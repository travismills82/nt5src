// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (3bbb61ea).
//
// cdosys.tlh
//
// C++ source equivalent of Win32 type library cdosys.dll
// compiler-generated file created 12/18/01 at 13:49:39 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "F:\Program Files\Common Files\System\ado\msado25.tlb"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("cd000023-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IBodyParts;
struct __declspec(uuid("cd000021-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IBodyPart;
struct __declspec(uuid("cd000029-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IDataSource;
struct __declspec(uuid("cd000025-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IMessages;
struct __declspec(uuid("cd000020-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IMessage;
struct __declspec(uuid("cd000022-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IConfiguration;
struct /* coclass */ Message;
struct /* coclass */ Configuration;
struct /* coclass */ DropDirectory;
struct __declspec(uuid("cd000024-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ IDropDirectory;
struct /* coclass */ SMTPConnector;
struct __declspec(uuid("cd000030-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ ISMTPScriptConnector;
struct __declspec(uuid("cd000026-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ ISMTPOnArrival;
struct /* coclass */ NNTPEarlyConnector;
struct __declspec(uuid("cd000034-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ INNTPEarlyScriptConnector;
struct __declspec(uuid("cd000033-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ INNTPOnPostEarly;
struct /* coclass */ NNTPPostConnector;
struct __declspec(uuid("cd000031-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ INNTPPostScriptConnector;
struct __declspec(uuid("cd000027-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ INNTPOnPost;
struct /* coclass */ NNTPFinalConnector;
struct __declspec(uuid("cd000032-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ INNTPFinalScriptConnector;
struct __declspec(uuid("cd000028-8b95-11d1-82db-00c04fb1625d"))
/* dual interface */ INNTPOnPostFinal;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IBodyParts, __uuidof(IBodyParts));
_COM_SMARTPTR_TYPEDEF(IBodyPart, __uuidof(IBodyPart));
_COM_SMARTPTR_TYPEDEF(IDataSource, __uuidof(IDataSource));
_COM_SMARTPTR_TYPEDEF(IMessages, __uuidof(IMessages));
_COM_SMARTPTR_TYPEDEF(IMessage, __uuidof(IMessage));
_COM_SMARTPTR_TYPEDEF(IConfiguration, __uuidof(IConfiguration));
_COM_SMARTPTR_TYPEDEF(IDropDirectory, __uuidof(IDropDirectory));
_COM_SMARTPTR_TYPEDEF(ISMTPScriptConnector, __uuidof(ISMTPScriptConnector));
_COM_SMARTPTR_TYPEDEF(ISMTPOnArrival, __uuidof(ISMTPOnArrival));
_COM_SMARTPTR_TYPEDEF(INNTPEarlyScriptConnector, __uuidof(INNTPEarlyScriptConnector));
_COM_SMARTPTR_TYPEDEF(INNTPOnPostEarly, __uuidof(INNTPOnPostEarly));
_COM_SMARTPTR_TYPEDEF(INNTPPostScriptConnector, __uuidof(INNTPPostScriptConnector));
_COM_SMARTPTR_TYPEDEF(INNTPOnPost, __uuidof(INNTPOnPost));
_COM_SMARTPTR_TYPEDEF(INNTPFinalScriptConnector, __uuidof(INNTPFinalScriptConnector));
_COM_SMARTPTR_TYPEDEF(INNTPOnPostFinal, __uuidof(INNTPOnPostFinal));

//
// Type library items
//

enum CdoConfigSource
{
    cdoDefaults = -1,
    cdoIIS = 1,
    cdoOutlookExpress = 2
};

enum CdoDSNOptions
{
    cdoDSNDefault = 0,
    cdoDSNNever = 1,
    cdoDSNFailure = 2,
    cdoDSNSuccess = 4,
    cdoDSNDelay = 8,
    cdoDSNSuccessFailOrDelay = 14
};

enum CdoEventStatus
{
    cdoRunNextSink = 0,
    cdoSkipRemainingSinks = 1
};

enum cdoImportanceValues
{
    cdoLow = 0,
    cdoNormal = 1,
    cdoHigh = 2
};

enum CdoMessageStat
{
    cdoStatSuccess = 0,
    cdoStatAbortDelivery = 2,
    cdoStatBadMail = 3
};

enum CdoMHTMLFlags
{
    cdoSuppressNone = 0,
    cdoSuppressImages = 1,
    cdoSuppressBGSounds = 2,
    cdoSuppressFrames = 4,
    cdoSuppressObjects = 8,
    cdoSuppressStyleSheets = 16,
    cdoSuppressAll = 31
};

enum CdoNNTPProcessingField
{
    cdoPostMessage = 1,
    cdoProcessControl = 2,
    cdoProcessModerator = 4
};

enum CdoPostUsing
{
    cdoPostUsingPickup = 1,
    cdoPostUsingPort = 2
};

enum cdoPriorityValues
{
    cdoPriorityNonUrgent = -1,
    cdoPriorityNormal = 0,
    cdoPriorityUrgent = 1
};

enum CdoProtocolsAuthentication
{
    cdoAnonymous = 0,
    cdoBasic = 1,
    cdoNTLM = 2
};

enum CdoReferenceType
{
    cdoRefTypeId = 0,
    cdoRefTypeLocation = 1
};

enum CdoSendUsing
{
    cdoSendUsingPickup = 1,
    cdoSendUsingPort = 2
};

enum cdoSensitivityValues
{
    cdoSensitivityNone = 0,
    cdoPersonal = 1,
    cdoPrivate = 2,
    cdoCompanyConfidential = 3
};

enum CdoTimeZoneId
{
    cdoUTC = 0,
    cdoGMT = 1,
    cdoSarajevo = 2,
    cdoParis = 3,
    cdoBerlin = 4,
    cdoEasternEurope = 5,
    cdoPrague = 6,
    cdoAthens = 7,
    cdoBrasilia = 8,
    cdoAtlanticCanada = 9,
    cdoEastern = 10,
    cdoCentral = 11,
    cdoMountain = 12,
    cdoPacific = 13,
    cdoAlaska = 14,
    cdoHawaii = 15,
    cdoMidwayIsland = 16,
    cdoWellington = 17,
    cdoBrisbane = 18,
    cdoAdelaide = 19,
    cdoTokyo = 20,
    cdoSingapore = 21,
    cdoBangkok = 22,
    cdoBombay = 23,
    cdoAbuDhabi = 24,
    cdoTehran = 25,
    cdoBaghdad = 26,
    cdoIsrael = 27,
    cdoNewfoundland = 28,
    cdoAzores = 29,
    cdoMidAtlantic = 30,
    cdoMonrovia = 31,
    cdoBuenosAires = 32,
    cdoCaracas = 33,
    cdoIndiana = 34,
    cdoBogota = 35,
    cdoSaskatchewan = 36,
    cdoMexicoCity = 37,
    cdoArizona = 38,
    cdoEniwetok = 39,
    cdoFiji = 40,
    cdoMagadan = 41,
    cdoHobart = 42,
    cdoGuam = 43,
    cdoDarwin = 44,
    cdoBeijing = 45,
    cdoAlmaty = 46,
    cdoIslamabad = 47,
    cdoKabul = 48,
    cdoCairo = 49,
    cdoHarare = 50,
    cdoMoscow = 51,
    cdoFloating = 52,
    cdoCapeVerde = 53,
    cdoCaucasus = 54,
    cdoCentralAmerica = 55,
    cdoEastAfrica = 56,
    cdoMelbourne = 57,
    cdoEkaterinburg = 58,
    cdoHelsinki = 59,
    cdoGreenland = 60,
    cdoRangoon = 61,
    cdoNepal = 62,
    cdoIrkutsk = 63,
    cdoKrasnoyarsk = 64,
    cdoSantiago = 65,
    cdoSriLanka = 66,
    cdoTonga = 67,
    cdoVladivostok = 68,
    cdoWestCentralAfrica = 69,
    cdoYakutsk = 70,
    cdoDhaka = 71,
    cdoSeoul = 72,
    cdoPerth = 73,
    cdoArab = 74,
    cdoTaipei = 75,
    cdoSydney2000 = 76,
    cdoInvalidTimeZone = 77
};

struct __declspec(uuid("cd000023-8b95-11d1-82db-00c04fb1625d"))
IBodyParts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IBodyPartPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IBodyPartPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        const _variant_t & varBP );
    HRESULT DeleteAll ( );
    IBodyPartPtr Add (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * varCount ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct IBodyPart * * ppBody ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * retval ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT varBP ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall raw_Add (
        long Index,
        struct IBodyPart * * ppPart ) = 0;
};

struct __declspec(uuid("cd000021-8b95-11d1-82db-00c04fb1625d"))
IBodyPart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBodyParts))
    IBodyPartsPtr BodyParts;
    __declspec(property(get=GetContentTransferEncoding,put=PutContentTransferEncoding))
    _bstr_t ContentTransferEncoding;
    __declspec(property(get=GetContentMediaType,put=PutContentMediaType))
    _bstr_t ContentMediaType;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetCharset,put=PutCharset))
    _bstr_t Charset;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetDataSource))
    IDataSourcePtr DataSource;
    __declspec(property(get=GetContentClass,put=PutContentClass))
    _bstr_t ContentClass;
    __declspec(property(get=GetContentClassName,put=PutContentClassName))
    _bstr_t ContentClassName;
    __declspec(property(get=GetParent))
    IBodyPartPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IBodyPartsPtr GetBodyParts ( );
    _bstr_t GetContentTransferEncoding ( );
    void PutContentTransferEncoding (
        _bstr_t pContentTransferEncoding );
    _bstr_t GetContentMediaType ( );
    void PutContentMediaType (
        _bstr_t pContentMediaType );
    FieldsPtr GetFields ( );
    _bstr_t GetCharset ( );
    void PutCharset (
        _bstr_t pCharset );
    _bstr_t GetFileName ( );
    IDataSourcePtr GetDataSource ( );
    _bstr_t GetContentClass ( );
    void PutContentClass (
        _bstr_t pContentClass );
    _bstr_t GetContentClassName ( );
    void PutContentClassName (
        _bstr_t pContentClassName );
    IBodyPartPtr GetParent ( );
    IBodyPartPtr AddBodyPart (
        long Index );
    HRESULT SaveToFile (
        _bstr_t FileName );
    _StreamPtr GetEncodedContentStream ( );
    _StreamPtr GetDecodedContentStream ( );
    _StreamPtr GetStream ( );
    _bstr_t GetFieldParameter (
        _bstr_t FieldName,
        _bstr_t Parameter );
    IDispatchPtr GetInterface (
        _bstr_t Interface );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BodyParts (
        struct IBodyParts * * varBodyParts ) = 0;
    virtual HRESULT __stdcall get_ContentTransferEncoding (
        BSTR * pContentTransferEncoding ) = 0;
    virtual HRESULT __stdcall put_ContentTransferEncoding (
        BSTR pContentTransferEncoding ) = 0;
    virtual HRESULT __stdcall get_ContentMediaType (
        BSTR * pContentMediaType ) = 0;
    virtual HRESULT __stdcall put_ContentMediaType (
        BSTR pContentMediaType ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct Fields * * varFields ) = 0;
    virtual HRESULT __stdcall get_Charset (
        BSTR * pCharset ) = 0;
    virtual HRESULT __stdcall put_Charset (
        BSTR pCharset ) = 0;
    virtual HRESULT __stdcall get_FileName (
        BSTR * varFileName ) = 0;
    virtual HRESULT __stdcall get_DataSource (
        struct IDataSource * * varDataSource ) = 0;
    virtual HRESULT __stdcall get_ContentClass (
        BSTR * pContentClass ) = 0;
    virtual HRESULT __stdcall put_ContentClass (
        BSTR pContentClass ) = 0;
    virtual HRESULT __stdcall get_ContentClassName (
        BSTR * pContentClassName ) = 0;
    virtual HRESULT __stdcall put_ContentClassName (
        BSTR pContentClassName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IBodyPart * * varParent ) = 0;
    virtual HRESULT __stdcall raw_AddBodyPart (
        long Index,
        struct IBodyPart * * ppPart ) = 0;
    virtual HRESULT __stdcall raw_SaveToFile (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_GetEncodedContentStream (
        struct _Stream * * ppStream ) = 0;
    virtual HRESULT __stdcall raw_GetDecodedContentStream (
        struct _Stream * * ppStream ) = 0;
    virtual HRESULT __stdcall raw_GetStream (
        struct _Stream * * ppStream ) = 0;
    virtual HRESULT __stdcall raw_GetFieldParameter (
        BSTR FieldName,
        BSTR Parameter,
        BSTR * pbstrValue ) = 0;
    virtual HRESULT __stdcall raw_GetInterface (
        BSTR Interface,
        IDispatch * * ppUnknown ) = 0;
};

struct __declspec(uuid("cd000029-8b95-11d1-82db-00c04fb1625d"))
IDataSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceClass))
    _bstr_t SourceClass;
    __declspec(property(get=GetSource))
    IUnknownPtr Source;
    __declspec(property(get=GetIsDirty,put=PutIsDirty))
    VARIANT_BOOL IsDirty;
    __declspec(property(get=GetSourceURL))
    _bstr_t SourceURL;
    __declspec(property(get=GetActiveConnection))
    _ConnectionPtr ActiveConnection;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSourceClass ( );
    IUnknownPtr GetSource ( );
    VARIANT_BOOL GetIsDirty ( );
    void PutIsDirty (
        VARIANT_BOOL pIsDirty );
    _bstr_t GetSourceURL ( );
    _ConnectionPtr GetActiveConnection ( );
    HRESULT SaveToObject (
        IUnknown * Source,
        _bstr_t InterfaceName );
    HRESULT OpenObject (
        IUnknown * Source,
        _bstr_t InterfaceName );
    HRESULT SaveTo (
        _bstr_t SourceURL,
        IDispatch * ActiveConnection,
        enum ConnectModeEnum Mode,
        enum RecordCreateOptionsEnum CreateOptions,
        enum RecordOpenOptionsEnum Options,
        _bstr_t UserName,
        _bstr_t Password );
    HRESULT Open (
        _bstr_t SourceURL,
        IDispatch * ActiveConnection,
        enum ConnectModeEnum Mode,
        enum RecordCreateOptionsEnum CreateOptions,
        enum RecordOpenOptionsEnum Options,
        _bstr_t UserName,
        _bstr_t Password );
    HRESULT Save ( );
    HRESULT SaveToContainer (
        _bstr_t ContainerURL,
        IDispatch * ActiveConnection,
        enum ConnectModeEnum Mode,
        enum RecordCreateOptionsEnum CreateOptions,
        enum RecordOpenOptionsEnum Options,
        _bstr_t UserName,
        _bstr_t Password );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_SourceClass (
        BSTR * varSourceClass ) = 0;
    virtual HRESULT __stdcall get_Source (
        IUnknown * * varSource ) = 0;
    virtual HRESULT __stdcall get_IsDirty (
        VARIANT_BOOL * pIsDirty ) = 0;
    virtual HRESULT __stdcall put_IsDirty (
        VARIANT_BOOL pIsDirty ) = 0;
    virtual HRESULT __stdcall get_SourceURL (
        BSTR * varSourceURL ) = 0;
    virtual HRESULT __stdcall get_ActiveConnection (
        struct _Connection * * varActiveConnection ) = 0;
    virtual HRESULT __stdcall raw_SaveToObject (
        IUnknown * Source,
        BSTR InterfaceName ) = 0;
    virtual HRESULT __stdcall raw_OpenObject (
        IUnknown * Source,
        BSTR InterfaceName ) = 0;
    virtual HRESULT __stdcall raw_SaveTo (
        BSTR SourceURL,
        IDispatch * ActiveConnection,
        enum ConnectModeEnum Mode,
        enum RecordCreateOptionsEnum CreateOptions,
        enum RecordOpenOptionsEnum Options,
        BSTR UserName,
        BSTR Password ) = 0;
    virtual HRESULT __stdcall raw_Open (
        BSTR SourceURL,
        IDispatch * ActiveConnection,
        enum ConnectModeEnum Mode,
        enum RecordCreateOptionsEnum CreateOptions,
        enum RecordOpenOptionsEnum Options,
        BSTR UserName,
        BSTR Password ) = 0;
    virtual HRESULT __stdcall raw_Save ( ) = 0;
    virtual HRESULT __stdcall raw_SaveToContainer (
        BSTR ContainerURL,
        IDispatch * ActiveConnection,
        enum ConnectModeEnum Mode,
        enum RecordCreateOptionsEnum CreateOptions,
        enum RecordOpenOptionsEnum Options,
        BSTR UserName,
        BSTR Password ) = 0;
};

struct __declspec(uuid("cd000025-8b95-11d1-82db-00c04fb1625d"))
IMessages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IMessagePtr GetItem (
        long Index );
    long GetCount ( );
    HRESULT Delete (
        long Index );
    HRESULT DeleteAll ( );
    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetFileName (
        const _variant_t & var );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        long Index,
        struct IMessage * * ppMessage ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * varCount ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long Index ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * retval ) = 0;
    virtual HRESULT __stdcall get_FileName (
        VARIANT var,
        BSTR * FileName ) = 0;
};

struct __declspec(uuid("cd000020-8b95-11d1-82db-00c04fb1625d"))
IMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBodyPart))
    IBodyPartPtr BodyPart;
    __declspec(property(get=GetDataSource))
    IDataSourcePtr DataSource;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetMDNRequested,put=PutMDNRequested))
    VARIANT_BOOL MDNRequested;
    __declspec(property(get=GetBCC,put=PutBCC))
    _bstr_t BCC;
    __declspec(property(get=GetCC,put=PutCC))
    _bstr_t CC;
    __declspec(property(get=GetFollowUpTo,put=PutFollowUpTo))
    _bstr_t FollowUpTo;
    __declspec(property(get=GetFrom,put=PutFrom))
    _bstr_t From;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetMimeFormatted,put=PutMimeFormatted))
    VARIANT_BOOL MimeFormatted;
    __declspec(property(get=GetNewsgroups,put=PutNewsgroups))
    _bstr_t Newsgroups;
    __declspec(property(get=GetOrganization,put=PutOrganization))
    _bstr_t Organization;
    __declspec(property(get=GetReceivedTime))
    DATE ReceivedTime;
    __declspec(property(get=GetReplyTo,put=PutReplyTo))
    _bstr_t ReplyTo;
    __declspec(property(get=GetDSNOptions,put=PutDSNOptions))
    enum CdoDSNOptions DSNOptions;
    __declspec(property(get=GetSentOn))
    DATE SentOn;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetTo,put=PutTo))
    _bstr_t To;
    __declspec(property(get=GetTextBody,put=PutTextBody))
    _bstr_t TextBody;
    __declspec(property(get=GetHTMLBody,put=PutHTMLBody))
    _bstr_t HTMLBody;
    __declspec(property(get=GetAttachments))
    IBodyPartsPtr Attachments;
    __declspec(property(get=GetSender,put=PutSender))
    _bstr_t Sender;
    __declspec(property(get=GetConfiguration,put=PutRefConfiguration))
    IConfigurationPtr Configuration;
    __declspec(property(get=GetAutoGenerateTextBody,put=PutAutoGenerateTextBody))
    VARIANT_BOOL AutoGenerateTextBody;
    __declspec(property(get=GetEnvelopeFields))
    FieldsPtr EnvelopeFields;
    __declspec(property(get=GetTextBodyPart))
    IBodyPartPtr TextBodyPart;
    __declspec(property(get=GetHTMLBodyPart))
    IBodyPartPtr HTMLBodyPart;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBCC ( );
    void PutBCC (
        _bstr_t pBCC );
    _bstr_t GetCC ( );
    void PutCC (
        _bstr_t pCC );
    _bstr_t GetFollowUpTo ( );
    void PutFollowUpTo (
        _bstr_t pFollowUpTo );
    _bstr_t GetFrom ( );
    void PutFrom (
        _bstr_t pFrom );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t pKeywords );
    VARIANT_BOOL GetMimeFormatted ( );
    void PutMimeFormatted (
        VARIANT_BOOL pMimeFormatted );
    _bstr_t GetNewsgroups ( );
    void PutNewsgroups (
        _bstr_t pNewsgroups );
    _bstr_t GetOrganization ( );
    void PutOrganization (
        _bstr_t pOrganization );
    DATE GetReceivedTime ( );
    _bstr_t GetReplyTo ( );
    void PutReplyTo (
        _bstr_t pReplyTo );
    enum CdoDSNOptions GetDSNOptions ( );
    void PutDSNOptions (
        enum CdoDSNOptions pDSNOptions );
    DATE GetSentOn ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pSubject );
    _bstr_t GetTo ( );
    void PutTo (
        _bstr_t pTo );
    _bstr_t GetTextBody ( );
    void PutTextBody (
        _bstr_t pTextBody );
    _bstr_t GetHTMLBody ( );
    void PutHTMLBody (
        _bstr_t pHTMLBody );
    IBodyPartsPtr GetAttachments ( );
    _bstr_t GetSender ( );
    void PutSender (
        _bstr_t pSender );
    IConfigurationPtr GetConfiguration ( );
    void PutConfiguration (
        struct IConfiguration * pConfiguration );
    void PutRefConfiguration (
        struct IConfiguration * pConfiguration );
    VARIANT_BOOL GetAutoGenerateTextBody ( );
    void PutAutoGenerateTextBody (
        VARIANT_BOOL pAutoGenerateTextBody );
    FieldsPtr GetEnvelopeFields ( );
    IBodyPartPtr GetTextBodyPart ( );
    IBodyPartPtr GetHTMLBodyPart ( );
    IBodyPartPtr GetBodyPart ( );
    IDataSourcePtr GetDataSource ( );
    FieldsPtr GetFields ( );
    VARIANT_BOOL GetMDNRequested ( );
    void PutMDNRequested (
        VARIANT_BOOL pMDNRequested );
    IBodyPartPtr AddRelatedBodyPart (
        _bstr_t URL,
        _bstr_t Reference,
        enum CdoReferenceType ReferenceType,
        _bstr_t UserName,
        _bstr_t Password );
    IBodyPartPtr AddAttachment (
        _bstr_t URL,
        _bstr_t UserName,
        _bstr_t Password );
    HRESULT CreateMHTMLBody (
        _bstr_t URL,
        enum CdoMHTMLFlags Flags,
        _bstr_t UserName,
        _bstr_t Password );
    IMessagePtr Forward ( );
    HRESULT Post ( );
    IMessagePtr PostReply ( );
    IMessagePtr Reply ( );
    IMessagePtr ReplyAll ( );
    HRESULT Send ( );
    _StreamPtr GetStream ( );
    IDispatchPtr GetInterface (
        _bstr_t Interface );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_BCC (
        BSTR * pBCC ) = 0;
    virtual HRESULT __stdcall put_BCC (
        BSTR pBCC ) = 0;
    virtual HRESULT __stdcall get_CC (
        BSTR * pCC ) = 0;
    virtual HRESULT __stdcall put_CC (
        BSTR pCC ) = 0;
    virtual HRESULT __stdcall get_FollowUpTo (
        BSTR * pFollowUpTo ) = 0;
    virtual HRESULT __stdcall put_FollowUpTo (
        BSTR pFollowUpTo ) = 0;
    virtual HRESULT __stdcall get_From (
        BSTR * pFrom ) = 0;
    virtual HRESULT __stdcall put_From (
        BSTR pFrom ) = 0;
    virtual HRESULT __stdcall get_Keywords (
        BSTR * pKeywords ) = 0;
    virtual HRESULT __stdcall put_Keywords (
        BSTR pKeywords ) = 0;
    virtual HRESULT __stdcall get_MimeFormatted (
        VARIANT_BOOL * pMimeFormatted ) = 0;
    virtual HRESULT __stdcall put_MimeFormatted (
        VARIANT_BOOL pMimeFormatted ) = 0;
    virtual HRESULT __stdcall get_Newsgroups (
        BSTR * pNewsgroups ) = 0;
    virtual HRESULT __stdcall put_Newsgroups (
        BSTR pNewsgroups ) = 0;
    virtual HRESULT __stdcall get_Organization (
        BSTR * pOrganization ) = 0;
    virtual HRESULT __stdcall put_Organization (
        BSTR pOrganization ) = 0;
    virtual HRESULT __stdcall get_ReceivedTime (
        DATE * varReceivedTime ) = 0;
    virtual HRESULT __stdcall get_ReplyTo (
        BSTR * pReplyTo ) = 0;
    virtual HRESULT __stdcall put_ReplyTo (
        BSTR pReplyTo ) = 0;
    virtual HRESULT __stdcall get_DSNOptions (
        enum CdoDSNOptions * pDSNOptions ) = 0;
    virtual HRESULT __stdcall put_DSNOptions (
        enum CdoDSNOptions pDSNOptions ) = 0;
    virtual HRESULT __stdcall get_SentOn (
        DATE * varSentOn ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * pSubject ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR pSubject ) = 0;
    virtual HRESULT __stdcall get_To (
        BSTR * pTo ) = 0;
    virtual HRESULT __stdcall put_To (
        BSTR pTo ) = 0;
    virtual HRESULT __stdcall get_TextBody (
        BSTR * pTextBody ) = 0;
    virtual HRESULT __stdcall put_TextBody (
        BSTR pTextBody ) = 0;
    virtual HRESULT __stdcall get_HTMLBody (
        BSTR * pHTMLBody ) = 0;
    virtual HRESULT __stdcall put_HTMLBody (
        BSTR pHTMLBody ) = 0;
    virtual HRESULT __stdcall get_Attachments (
        struct IBodyParts * * varAttachments ) = 0;
    virtual HRESULT __stdcall get_Sender (
        BSTR * pSender ) = 0;
    virtual HRESULT __stdcall put_Sender (
        BSTR pSender ) = 0;
    virtual HRESULT __stdcall get_Configuration (
        struct IConfiguration * * pConfiguration ) = 0;
    virtual HRESULT __stdcall put_Configuration (
        struct IConfiguration * pConfiguration ) = 0;
    virtual HRESULT __stdcall putref_Configuration (
        struct IConfiguration * pConfiguration ) = 0;
    virtual HRESULT __stdcall get_AutoGenerateTextBody (
        VARIANT_BOOL * pAutoGenerateTextBody ) = 0;
    virtual HRESULT __stdcall put_AutoGenerateTextBody (
        VARIANT_BOOL pAutoGenerateTextBody ) = 0;
    virtual HRESULT __stdcall get_EnvelopeFields (
        struct Fields * * varEnvelopeFields ) = 0;
    virtual HRESULT __stdcall get_TextBodyPart (
        struct IBodyPart * * varTextBodyPart ) = 0;
    virtual HRESULT __stdcall get_HTMLBodyPart (
        struct IBodyPart * * varHTMLBodyPart ) = 0;
    virtual HRESULT __stdcall get_BodyPart (
        struct IBodyPart * * varBodyPart ) = 0;
    virtual HRESULT __stdcall get_DataSource (
        struct IDataSource * * varDataSource ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct Fields * * varFields ) = 0;
    virtual HRESULT __stdcall get_MDNRequested (
        VARIANT_BOOL * pMDNRequested ) = 0;
    virtual HRESULT __stdcall put_MDNRequested (
        VARIANT_BOOL pMDNRequested ) = 0;
    virtual HRESULT __stdcall raw_AddRelatedBodyPart (
        BSTR URL,
        BSTR Reference,
        enum CdoReferenceType ReferenceType,
        BSTR UserName,
        BSTR Password,
        struct IBodyPart * * ppBody ) = 0;
    virtual HRESULT __stdcall raw_AddAttachment (
        BSTR URL,
        BSTR UserName,
        BSTR Password,
        struct IBodyPart * * ppBody ) = 0;
    virtual HRESULT __stdcall raw_CreateMHTMLBody (
        BSTR URL,
        enum CdoMHTMLFlags Flags,
        BSTR UserName,
        BSTR Password ) = 0;
    virtual HRESULT __stdcall raw_Forward (
        struct IMessage * * ppMsg ) = 0;
    virtual HRESULT __stdcall raw_Post ( ) = 0;
    virtual HRESULT __stdcall raw_PostReply (
        struct IMessage * * ppMsg ) = 0;
    virtual HRESULT __stdcall raw_Reply (
        struct IMessage * * ppMsg ) = 0;
    virtual HRESULT __stdcall raw_ReplyAll (
        struct IMessage * * ppMsg ) = 0;
    virtual HRESULT __stdcall raw_Send ( ) = 0;
    virtual HRESULT __stdcall raw_GetStream (
        struct _Stream * * ppStream ) = 0;
    virtual HRESULT __stdcall raw_GetInterface (
        BSTR Interface,
        IDispatch * * ppUnknown ) = 0;
};

struct __declspec(uuid("cd000022-8b95-11d1-82db-00c04fb1625d"))
IConfiguration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFields))
    FieldsPtr Fields;

    //
    // Wrapper methods for error-handling
    //

    FieldsPtr GetFields ( );
    HRESULT Load (
        enum CdoConfigSource LoadFrom,
        _bstr_t URL );
    IDispatchPtr GetInterface (
        _bstr_t Interface );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Fields (
        struct Fields * * varFields ) = 0;
    virtual HRESULT __stdcall raw_Load (
        enum CdoConfigSource LoadFrom,
        BSTR URL ) = 0;
    virtual HRESULT __stdcall raw_GetInterface (
        BSTR Interface,
        IDispatch * * ppUnknown ) = 0;
};

struct __declspec(uuid("cd000001-8b95-11d1-82db-00c04fb1625d"))
Message;
    // [ default ] interface IMessage
    // interface IDataSource
    // interface IBodyPart

struct __declspec(uuid("cd000002-8b95-11d1-82db-00c04fb1625d"))
Configuration;
    // [ default ] interface IConfiguration

struct __declspec(uuid("cd000004-8b95-11d1-82db-00c04fb1625d"))
DropDirectory;
    // [ default ] interface IDropDirectory

struct __declspec(uuid("cd000024-8b95-11d1-82db-00c04fb1625d"))
IDropDirectory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IMessagesPtr GetMessages (
        _bstr_t DirName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetMessages (
        BSTR DirName,
        struct IMessages * * Msgs ) = 0;
};

struct __declspec(uuid("cd000008-8b95-11d1-82db-00c04fb1625d"))
SMTPConnector;
    // [ default ] interface ISMTPScriptConnector
    // [ default, source ] interface ISMTPOnArrival

struct __declspec(uuid("cd000030-8b95-11d1-82db-00c04fb1625d"))
ISMTPScriptConnector : IDispatch
{};

struct __declspec(uuid("cd000026-8b95-11d1-82db-00c04fb1625d"))
ISMTPOnArrival : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnArrival (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_OnArrival (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus ) = 0;
};

struct __declspec(uuid("cd000011-8b95-11d1-82db-00c04fb1625d"))
NNTPEarlyConnector;
    // [ default ] interface INNTPEarlyScriptConnector
    // [ default, source ] interface INNTPOnPostEarly

struct __declspec(uuid("cd000034-8b95-11d1-82db-00c04fb1625d"))
INNTPEarlyScriptConnector : IDispatch
{};

struct __declspec(uuid("cd000033-8b95-11d1-82db-00c04fb1625d"))
INNTPOnPostEarly : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnPostEarly (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_OnPostEarly (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus ) = 0;
};

struct __declspec(uuid("cd000009-8b95-11d1-82db-00c04fb1625d"))
NNTPPostConnector;
    // [ default ] interface INNTPPostScriptConnector
    // [ default, source ] interface INNTPOnPost

struct __declspec(uuid("cd000031-8b95-11d1-82db-00c04fb1625d"))
INNTPPostScriptConnector : IDispatch
{};

struct __declspec(uuid("cd000027-8b95-11d1-82db-00c04fb1625d"))
INNTPOnPost : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnPost (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_OnPost (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus ) = 0;
};

struct __declspec(uuid("cd000010-8b95-11d1-82db-00c04fb1625d"))
NNTPFinalConnector;
    // [ default ] interface INNTPFinalScriptConnector
    // [ default, source ] interface INNTPOnPostFinal

struct __declspec(uuid("cd000032-8b95-11d1-82db-00c04fb1625d"))
INNTPFinalScriptConnector : IDispatch
{};

struct __declspec(uuid("cd000028-8b95-11d1-82db-00c04fb1625d"))
INNTPOnPostFinal : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnPostFinal (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_OnPostFinal (
        struct IMessage * Msg,
        enum CdoEventStatus * EventStatus ) = 0;
};

//
// Wrapper method implementations
//

#include "cdosys.tli"

#pragma pack(pop)
