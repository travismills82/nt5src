// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (3bbb61ea).
//
// cdosys.tli
//
// Wrapper implementations for Win32 type library cdosys.dll
// compiler-generated file created 12/18/01 at 13:49:39 - DO NOT EDIT!

#pragma once

//
// interface IBodyParts wrapper method implementations
//

inline long IBodyParts::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBodyPartPtr IBodyParts::GetItem ( long Index ) {
    struct IBodyPart * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline IUnknownPtr IBodyParts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IBodyParts::Delete ( const _variant_t & varBP ) {
    HRESULT _hr = raw_Delete(varBP);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBodyParts::DeleteAll ( ) {
    HRESULT _hr = raw_DeleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IBodyPartPtr IBodyParts::Add ( long Index ) {
    struct IBodyPart * _result;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

//
// interface IBodyPart wrapper method implementations
//

inline IBodyPartsPtr IBodyPart::GetBodyParts ( ) {
    struct IBodyParts * _result;
    HRESULT _hr = get_BodyParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartsPtr(_result, false);
}

inline _bstr_t IBodyPart::GetContentTransferEncoding ( ) {
    BSTR _result;
    HRESULT _hr = get_ContentTransferEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBodyPart::PutContentTransferEncoding ( _bstr_t pContentTransferEncoding ) {
    HRESULT _hr = put_ContentTransferEncoding(pContentTransferEncoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBodyPart::GetContentMediaType ( ) {
    BSTR _result;
    HRESULT _hr = get_ContentMediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBodyPart::PutContentMediaType ( _bstr_t pContentMediaType ) {
    HRESULT _hr = put_ContentMediaType(pContentMediaType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FieldsPtr IBodyPart::GetFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

inline _bstr_t IBodyPart::GetCharset ( ) {
    BSTR _result;
    HRESULT _hr = get_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBodyPart::PutCharset ( _bstr_t pCharset ) {
    HRESULT _hr = put_Charset(pCharset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBodyPart::GetFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDataSourcePtr IBodyPart::GetDataSource ( ) {
    struct IDataSource * _result;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDataSourcePtr(_result, false);
}

inline _bstr_t IBodyPart::GetContentClass ( ) {
    BSTR _result;
    HRESULT _hr = get_ContentClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBodyPart::PutContentClass ( _bstr_t pContentClass ) {
    HRESULT _hr = put_ContentClass(pContentClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBodyPart::GetContentClassName ( ) {
    BSTR _result;
    HRESULT _hr = get_ContentClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBodyPart::PutContentClassName ( _bstr_t pContentClassName ) {
    HRESULT _hr = put_ContentClassName(pContentClassName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IBodyPartPtr IBodyPart::GetParent ( ) {
    struct IBodyPart * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline IBodyPartPtr IBodyPart::AddBodyPart ( long Index ) {
    struct IBodyPart * _result;
    HRESULT _hr = raw_AddBodyPart(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline HRESULT IBodyPart::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _StreamPtr IBodyPart::GetEncodedContentStream ( ) {
    struct _Stream * _result;
    HRESULT _hr = raw_GetEncodedContentStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StreamPtr(_result, false);
}

inline _StreamPtr IBodyPart::GetDecodedContentStream ( ) {
    struct _Stream * _result;
    HRESULT _hr = raw_GetDecodedContentStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StreamPtr(_result, false);
}

inline _StreamPtr IBodyPart::GetStream ( ) {
    struct _Stream * _result;
    HRESULT _hr = raw_GetStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StreamPtr(_result, false);
}

inline _bstr_t IBodyPart::GetFieldParameter ( _bstr_t FieldName, _bstr_t Parameter ) {
    BSTR _result;
    HRESULT _hr = raw_GetFieldParameter(FieldName, Parameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IBodyPart::GetInterface ( _bstr_t Interface ) {
    IDispatch * _result;
    HRESULT _hr = raw_GetInterface(Interface, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IDataSource wrapper method implementations
//

inline _bstr_t IDataSource::GetSourceClass ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr IDataSource::GetSource ( ) {
    IUnknown * _result;
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL IDataSource::GetIsDirty ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDataSource::PutIsDirty ( VARIANT_BOOL pIsDirty ) {
    HRESULT _hr = put_IsDirty(pIsDirty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDataSource::GetSourceURL ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _ConnectionPtr IDataSource::GetActiveConnection ( ) {
    struct _Connection * _result;
    HRESULT _hr = get_ActiveConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConnectionPtr(_result, false);
}

inline HRESULT IDataSource::SaveToObject ( IUnknown * Source, _bstr_t InterfaceName ) {
    HRESULT _hr = raw_SaveToObject(Source, InterfaceName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataSource::OpenObject ( IUnknown * Source, _bstr_t InterfaceName ) {
    HRESULT _hr = raw_OpenObject(Source, InterfaceName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataSource::SaveTo ( _bstr_t SourceURL, IDispatch * ActiveConnection, enum ConnectModeEnum Mode, enum RecordCreateOptionsEnum CreateOptions, enum RecordOpenOptionsEnum Options, _bstr_t UserName, _bstr_t Password ) {
    HRESULT _hr = raw_SaveTo(SourceURL, ActiveConnection, Mode, CreateOptions, Options, UserName, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataSource::Open ( _bstr_t SourceURL, IDispatch * ActiveConnection, enum ConnectModeEnum Mode, enum RecordCreateOptionsEnum CreateOptions, enum RecordOpenOptionsEnum Options, _bstr_t UserName, _bstr_t Password ) {
    HRESULT _hr = raw_Open(SourceURL, ActiveConnection, Mode, CreateOptions, Options, UserName, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataSource::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDataSource::SaveToContainer ( _bstr_t ContainerURL, IDispatch * ActiveConnection, enum ConnectModeEnum Mode, enum RecordCreateOptionsEnum CreateOptions, enum RecordOpenOptionsEnum Options, _bstr_t UserName, _bstr_t Password ) {
    HRESULT _hr = raw_SaveToContainer(ContainerURL, ActiveConnection, Mode, CreateOptions, Options, UserName, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMessages wrapper method implementations
//

inline IMessagePtr IMessages::GetItem ( long Index ) {
    struct IMessage * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline long IMessages::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMessages::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessages::DeleteAll ( ) {
    HRESULT _hr = raw_DeleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IMessages::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _bstr_t IMessages::GetFileName ( const _variant_t & var ) {
    BSTR _result;
    HRESULT _hr = get_FileName(var, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMessage wrapper method implementations
//

inline _bstr_t IMessage::GetBCC ( ) {
    BSTR _result;
    HRESULT _hr = get_BCC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutBCC ( _bstr_t pBCC ) {
    HRESULT _hr = put_BCC(pBCC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetCC ( ) {
    BSTR _result;
    HRESULT _hr = get_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutCC ( _bstr_t pCC ) {
    HRESULT _hr = put_CC(pCC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetFollowUpTo ( ) {
    BSTR _result;
    HRESULT _hr = get_FollowUpTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutFollowUpTo ( _bstr_t pFollowUpTo ) {
    HRESULT _hr = put_FollowUpTo(pFollowUpTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetFrom ( ) {
    BSTR _result;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutFrom ( _bstr_t pFrom ) {
    HRESULT _hr = put_From(pFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetKeywords ( ) {
    BSTR _result;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutKeywords ( _bstr_t pKeywords ) {
    HRESULT _hr = put_Keywords(pKeywords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessage::GetMimeFormatted ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MimeFormatted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutMimeFormatted ( VARIANT_BOOL pMimeFormatted ) {
    HRESULT _hr = put_MimeFormatted(pMimeFormatted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetNewsgroups ( ) {
    BSTR _result;
    HRESULT _hr = get_Newsgroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutNewsgroups ( _bstr_t pNewsgroups ) {
    HRESULT _hr = put_Newsgroups(pNewsgroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetOrganization ( ) {
    BSTR _result;
    HRESULT _hr = get_Organization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutOrganization ( _bstr_t pOrganization ) {
    HRESULT _hr = put_Organization(pOrganization);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DATE IMessage::GetReceivedTime ( ) {
    DATE _result;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetReplyTo ( ) {
    BSTR _result;
    HRESULT _hr = get_ReplyTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutReplyTo ( _bstr_t pReplyTo ) {
    HRESULT _hr = put_ReplyTo(pReplyTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum CdoDSNOptions IMessage::GetDSNOptions ( ) {
    enum CdoDSNOptions _result;
    HRESULT _hr = get_DSNOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutDSNOptions ( enum CdoDSNOptions pDSNOptions ) {
    HRESULT _hr = put_DSNOptions(pDSNOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DATE IMessage::GetSentOn ( ) {
    DATE _result;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutSubject ( _bstr_t pSubject ) {
    HRESULT _hr = put_Subject(pSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetTo ( ) {
    BSTR _result;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutTo ( _bstr_t pTo ) {
    HRESULT _hr = put_To(pTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetTextBody ( ) {
    BSTR _result;
    HRESULT _hr = get_TextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutTextBody ( _bstr_t pTextBody ) {
    HRESULT _hr = put_TextBody(pTextBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetHTMLBody ( ) {
    BSTR _result;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutHTMLBody ( _bstr_t pHTMLBody ) {
    HRESULT _hr = put_HTMLBody(pHTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IBodyPartsPtr IMessage::GetAttachments ( ) {
    struct IBodyParts * _result;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartsPtr(_result, false);
}

inline _bstr_t IMessage::GetSender ( ) {
    BSTR _result;
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutSender ( _bstr_t pSender ) {
    HRESULT _hr = put_Sender(pSender);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IConfigurationPtr IMessage::GetConfiguration ( ) {
    struct IConfiguration * _result;
    HRESULT _hr = get_Configuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConfigurationPtr(_result, false);
}

inline void IMessage::PutConfiguration ( struct IConfiguration * pConfiguration ) {
    HRESULT _hr = put_Configuration(pConfiguration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IMessage::PutRefConfiguration ( struct IConfiguration * pConfiguration ) {
    HRESULT _hr = putref_Configuration(pConfiguration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessage::GetAutoGenerateTextBody ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoGenerateTextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutAutoGenerateTextBody ( VARIANT_BOOL pAutoGenerateTextBody ) {
    HRESULT _hr = put_AutoGenerateTextBody(pAutoGenerateTextBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline FieldsPtr IMessage::GetEnvelopeFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_EnvelopeFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

inline IBodyPartPtr IMessage::GetTextBodyPart ( ) {
    struct IBodyPart * _result;
    HRESULT _hr = get_TextBodyPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline IBodyPartPtr IMessage::GetHTMLBodyPart ( ) {
    struct IBodyPart * _result;
    HRESULT _hr = get_HTMLBodyPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline IBodyPartPtr IMessage::GetBodyPart ( ) {
    struct IBodyPart * _result;
    HRESULT _hr = get_BodyPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline IDataSourcePtr IMessage::GetDataSource ( ) {
    struct IDataSource * _result;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDataSourcePtr(_result, false);
}

inline FieldsPtr IMessage::GetFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

inline VARIANT_BOOL IMessage::GetMDNRequested ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MDNRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutMDNRequested ( VARIANT_BOOL pMDNRequested ) {
    HRESULT _hr = put_MDNRequested(pMDNRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IBodyPartPtr IMessage::AddRelatedBodyPart ( _bstr_t URL, _bstr_t Reference, enum CdoReferenceType ReferenceType, _bstr_t UserName, _bstr_t Password ) {
    struct IBodyPart * _result;
    HRESULT _hr = raw_AddRelatedBodyPart(URL, Reference, ReferenceType, UserName, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline IBodyPartPtr IMessage::AddAttachment ( _bstr_t URL, _bstr_t UserName, _bstr_t Password ) {
    struct IBodyPart * _result;
    HRESULT _hr = raw_AddAttachment(URL, UserName, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyPartPtr(_result, false);
}

inline HRESULT IMessage::CreateMHTMLBody ( _bstr_t URL, enum CdoMHTMLFlags Flags, _bstr_t UserName, _bstr_t Password ) {
    HRESULT _hr = raw_CreateMHTMLBody(URL, Flags, UserName, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr IMessage::Forward ( ) {
    struct IMessage * _result;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline HRESULT IMessage::Post ( ) {
    HRESULT _hr = raw_Post();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr IMessage::PostReply ( ) {
    struct IMessage * _result;
    HRESULT _hr = raw_PostReply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IMessage::Reply ( ) {
    struct IMessage * _result;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IMessage::ReplyAll ( ) {
    struct IMessage * _result;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline HRESULT IMessage::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _StreamPtr IMessage::GetStream ( ) {
    struct _Stream * _result;
    HRESULT _hr = raw_GetStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StreamPtr(_result, false);
}

inline IDispatchPtr IMessage::GetInterface ( _bstr_t Interface ) {
    IDispatch * _result;
    HRESULT _hr = raw_GetInterface(Interface, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IConfiguration wrapper method implementations
//

inline FieldsPtr IConfiguration::GetFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

inline HRESULT IConfiguration::Load ( enum CdoConfigSource LoadFrom, _bstr_t URL ) {
    HRESULT _hr = raw_Load(LoadFrom, URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IConfiguration::GetInterface ( _bstr_t Interface ) {
    IDispatch * _result;
    HRESULT _hr = raw_GetInterface(Interface, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IDropDirectory wrapper method implementations
//

inline IMessagesPtr IDropDirectory::GetMessages ( _bstr_t DirName ) {
    struct IMessages * _result;
    HRESULT _hr = raw_GetMessages(DirName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagesPtr(_result, false);
}

//
// interface ISMTPOnArrival wrapper method implementations
//

inline HRESULT ISMTPOnArrival::OnArrival ( struct IMessage * Msg, enum CdoEventStatus * EventStatus ) {
    HRESULT _hr = raw_OnArrival(Msg, EventStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface INNTPOnPostEarly wrapper method implementations
//

inline HRESULT INNTPOnPostEarly::OnPostEarly ( struct IMessage * Msg, enum CdoEventStatus * EventStatus ) {
    HRESULT _hr = raw_OnPostEarly(Msg, EventStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface INNTPOnPost wrapper method implementations
//

inline HRESULT INNTPOnPost::OnPost ( struct IMessage * Msg, enum CdoEventStatus * EventStatus ) {
    HRESULT _hr = raw_OnPost(Msg, EventStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface INNTPOnPostFinal wrapper method implementations
//

inline HRESULT INNTPOnPostFinal::OnPostFinal ( struct IMessage * Msg, enum CdoEventStatus * EventStatus ) {
    HRESULT _hr = raw_OnPostFinal(Msg, EventStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
