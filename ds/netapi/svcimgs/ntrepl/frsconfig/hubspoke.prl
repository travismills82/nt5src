    use frsobjsup;
    package main; 
    my ($__HashRef, $__k, $__v);
##  Processing file hubspoke.mrs    Modify Time: Tue Apr  3 13:30:15 2001


##  use Time::Local;
use Time::Local;
##  printf "Configuration generated at %s\n\n", scalar localtime;
printf "Configuration generated at %s\n\n", scalar localtime;
##  $stage = "D:\\staging";   
$stage = "D:\\staging";   
##  $DC_OU_DN = "ou=domain controllers,dc=frs1221,dc=nttest,dc=microsoft,dc=com";
$DC_OU_DN = "ou=domain controllers,dc=frs1221,dc=nttest,dc=microsoft,dc=com";
##  HUB: FRS_SERVER  (/RP="E:\RSB"  /SP="$stage" /COMPUTER='frs1221\sudarctest1$'    
##  /DNS_NAME="sudarctest1.frs1221.nttest.microsoft.com" /MNAME="hub0")
    $__HashRef = FRS_SERVER->New( 
##  ArgIndex for parameter: 'RP' 
##  ArgType found for parameter: 'RP' is 'VALUE_STR'
##  ArgIndex for parameter: 'SP' 
##  ArgType found for parameter: 'SP' is 'VALUE_STR'
##  ArgIndex for parameter: 'COMPUTER' 
##  ArgType found for parameter: 'COMPUTER' is 'VALUE_STR'
##  ArgIndex for parameter: 'DNS_NAME' 
##  ArgIndex for parameter: 'MNAME' 
        RP=>"E:\\RSB", SP=>"$stage", COMPUTER=>'frs1221\\sudarctest1$', DNS_NAME=>"sudarctest1.frs1221.nttest.microsoft.com", MNAME=>"hub0" 
    ); 
    &FRSSUP::AddToSet("HUB", $__HashRef);

##  HUB: FRS_SERVER  (/RP="E:\RSB"  /SP="$stage" /COMPUTER='frs1221\sudarctest2$'
##  /DNS_NAME="sudarctest2.frs1221.nttest.microsoft.com" /MNAME="hub1")
    $__HashRef = FRS_SERVER->New( 
##  ArgIndex for parameter: 'RP' 
##  ArgType found for parameter: 'RP' is 'VALUE_STR'
##  ArgIndex for parameter: 'SP' 
##  ArgType found for parameter: 'SP' is 'VALUE_STR'
##  ArgIndex for parameter: 'COMPUTER' 
##  ArgType found for parameter: 'COMPUTER' is 'VALUE_STR'
##  ArgIndex for parameter: 'DNS_NAME' 
##  ArgIndex for parameter: 'MNAME' 
        RP=>"E:\\RSB", SP=>"$stage", COMPUTER=>'frs1221\\sudarctest2$', DNS_NAME=>"sudarctest2.frs1221.nttest.microsoft.com", MNAME=>"hub1" 
    ); 
    &FRSSUP::AddToSet("HUB", $__HashRef);

##  foreach $b ("sudarctest4", "DREWSAM-SRV", "sudarctest3", "DREWSAM-SRV"  ) {
foreach $b ("sudarctest4", "DREWSAM-SRV", "sudarctest3", "DREWSAM-SRV"  ) {
##      $Nt4Acct = "frs1221\\$b\$";
    $Nt4Acct = "frs1221\\$b\$";
##      BCH:  FRS_SERVER  (/RP="D:\RSB"  /SP="D:\staging"
##  /COMPUTER=$Nt4Acct
##  /id="-$b"
##  /DNS_NAME="$b.frs1221.nttest.microsoft.com"
##  )
    $__HashRef = FRS_SERVER->New( 
##  ArgIndex for parameter: 'RP' 
##  ArgType found for parameter: 'RP' is 'VALUE_STR'
##  ArgIndex for parameter: 'SP' 
##  ArgType found for parameter: 'SP' is 'VALUE_STR'
##  ArgIndex for parameter: 'COMPUTER' 
##  ArgType found for parameter: 'COMPUTER' is 'VALUE_STR'
##  ArgIndex for parameter: 'id' 
##  ArgIndex for parameter: 'DNS_NAME' 
        RP=>"D:\\RSB", SP=>"D:\\staging", COMPUTER=>$Nt4Acct, id=>"-$b", DNS_NAME=>"$b.frs1221.nttest.microsoft.com" 
    ); 
    &FRSSUP::AddToSet("BCH", $__HashRef);

##  }
}
##  PRIMARY_SCH: FRS_SCHEDULE  (/REPL_INTERVAL=4 /REPL_DURATION="1:30"
##  /TIME_ZONE="+1" /REPL_OFFSET=0 /STAGGER=2
##  /METHOD=1   /NAME='Primary Sched'
##  /DISABLE="mo:07:30-mo:18:00,tu:07:30-tu:18:00,we:07:30-we:18:00,th:07:30-th:18:00,fr:07:30-fr:18:00"
##  )
    $__HashRef = FRS_SCHEDULE->New( 
##  ArgIndex for parameter: 'REPL_INTERVAL' 
##  ArgType found for parameter: 'REPL_INTERVAL' is 'VALUE_TIME_SINGLE'
##  ArgIndex for parameter: 'REPL_DURATION' 
##  ArgType found for parameter: 'REPL_DURATION' is 'VALUE_TIME_SINGLE'
##  ArgIndex for parameter: 'TIME_ZONE' 
##  ArgType found for parameter: 'TIME_ZONE' is 'VALUE_SIGN_TIME'
##  ArgIndex for parameter: 'REPL_OFFSET' 
##  ArgType found for parameter: 'REPL_OFFSET' is 'VALUE_TIME_SINGLE'
##  ArgIndex for parameter: 'STAGGER' 
##  ArgType found for parameter: 'STAGGER' is 'VALUE_TIME_SINGLE'
##  ArgIndex for parameter: 'METHOD' 
##  ArgType found for parameter: 'METHOD' is 'VALUE_CHOICE_SINGLE'
##  ArgIndex for parameter: 'NAME' 
##  ArgType found for parameter: 'NAME' is 'VALUE_STR'
##  ArgIndex for parameter: 'DISABLE' 
##  ArgType found for parameter: 'DISABLE' is 'VALUE_TIME_LIST'
        REPL_INTERVAL=>4, REPL_DURATION=>"1:30", TIME_ZONE=>"+1", REPL_OFFSET=>0, STAGGER=>2, METHOD=>1, NAME=>'Primary Sched', DISABLE=>"mo:07:30-mo:18:00,tu:07:30-tu:18:00,we:07:30-we:18:00,th:07:30-th:18:00,fr:07:30-fr:18:00" 
    ); 
    &FRSSUP::AddToSet("PRIMARY_SCH", $__HashRef);

##  FRS_SUB CREATE_HUB_SPOKE_CONN(/HUBSET=SET_REF_SET           
##  subname = 'CREATE_HUB_SPOKE_CONN',  func = 'FRS_SUB',  rest = '(/HUBSET=SET_REF_SET           '

##  /BCHSET=SET_REF_SET
##  /SC1=SCHEDULE )
sub CREATE_HUB_SPOKE_CONN {
    my %__args = (@_);
    my ($__HashRef, $__k, $__v);
    while ( ($__k, $__v) = each %__args ) { print "\t$__k => '$__v'\n"; }


##   paramstr: HUBSET=SET_REF_SET            /BCHSET=SET_REF_SET /SC1=SCHEDULE

##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE_CONN-HUBSET' 
##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE_CONN-BCHSET' 
##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE_CONN-SC1' 

##      $Hx = 0;
    $Hx = 0;
##      $NHub = FRS_COUNT_SET(/SET=%HUBSET%);
## ExpandArgStr:     $NHub = FRS_COUNT_SET(/SET=$__args{HUBSET});
    $NHub =   scalar @{  
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
$__args{HUBSET} } 

;
##      print " NHUB = $NHub\n\n";
    print " NHUB = $NHub\n\n";
##      print " NBCH FRS _COUNT_SET( /SET= % BCHSET % ) ", FRS_COUNT_SET(/SET= %BCHSET% ), "\n" ;
## ExpandArgStr:     print " NBCH FRS _COUNT_SET( /SET= % BCHSET % ) ", FRS_COUNT_SET(/SET= $__args{BCHSET} ), "\n" ;
    print " NBCH FRS _COUNT_SET( /SET= % BCHSET % ) ",   scalar @{  
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
$__args{BCHSET} } 

, "\n" ;
##      foreach $bch  (FRS_ARRAY(/SET=%BCHSET%)) {
## ExpandArgStr:     foreach $bch  (FRS_ARRAY(/SET=$__args{BCHSET})) {
    foreach $bch  (  @{  
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
$__args{BCHSET} } 

) {
##          print "working on branch: $bch->{ONAME}\n";
        print "working on branch: $bch->{ONAME}\n";
##          $hubsrv = %HUBSET%[$Hx];
## ExpandArgStr:         $hubsrv = $__args{HUBSET}[$Hx];
        $hubsrv = $__args{HUBSET}[$Hx];
##          FRS_CONNECTION  (/TO=$bch /FROM=%HUBSET%[$Hx] /SCHED=%SC1%
## ExpandArgStr:         FRS_CONNECTION  (/TO=$bch /FROM=$__args{HUBSET}[$Hx] /SCHED=$__args{SC1}
##  /ONAME="FROM-".$hubsrv->{MNAME}."-TO-".$bch->{ONAME} )
    FRS_CONNECTION->New( 
##  ArgIndex for parameter: 'TO' 
##  ArgType found for parameter: 'TO' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'FROM' 
##  ArgType found for parameter: 'FROM' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'SCHED' 
##  ArgType found for parameter: 'SCHED' is 'SCHEDULE'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        TO=>$bch, FROM=>$__args{HUBSET}[$Hx], SCHED=>$__args{SC1}, ONAME=>"FROM-".$hubsrv->{MNAME}."-TO-".$bch->{ONAME} 
    ); 

##          FRS_CONNECTION  (/TO=%HUBSET%[$Hx] /FROM=$bch /SCHED=%SC1%
## ExpandArgStr:         FRS_CONNECTION  (/TO=$__args{HUBSET}[$Hx] /FROM=$bch /SCHED=$__args{SC1}
##  /ONAME="FROM-".$bch->{ONAME}."-TO-".$hubsrv->{MNAME} )
    FRS_CONNECTION->New( 
##  ArgIndex for parameter: 'TO' 
##  ArgType found for parameter: 'TO' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'FROM' 
##  ArgType found for parameter: 'FROM' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'SCHED' 
##  ArgType found for parameter: 'SCHED' is 'SCHEDULE'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        TO=>$__args{HUBSET}[$Hx], FROM=>$bch, SCHED=>$__args{SC1}, ONAME=>"FROM-".$bch->{ONAME}."-TO-".$hubsrv->{MNAME} 
    ); 

##          $Hx=($Hx+1) % $NHub;
        $Hx=($Hx+1) % $NHub;
##          if ($Hx == 0) {
        if ($Hx == 0) {
##              FRS_STAGGER (/SCHED=%SC1%)
## ExpandArgStr:             FRS_STAGGER (/SCHED=$__args{SC1})
              FRS_SCHEDULE::FRS_STAGGER( 
##  ArgIndex for parameter: 'SCHED' 
##  ArgType found for parameter: 'SCHED' is 'SCHEDULE'
SCHED=>$__args{SC1} ); 


##          }
        }
##      }
    }
##  FRS_END_SUB
}   # FRS_END_SUB


##  FRS_SUB CREATE_RING_CONN(/HUBSET=SET_REF_SET )
##  subname = 'CREATE_RING_CONN',  func = 'FRS_SUB',  rest = '(/HUBSET=SET_REF_SET )'

sub CREATE_RING_CONN {
    my %__args = (@_);
    my ($__HashRef, $__k, $__v);
    while ( ($__k, $__v) = each %__args ) { print "\t$__k => '$__v'\n"; }


##   paramstr: HUBSET=SET_REF_SET

##  new FRS_SUB parameter: 'CREATE_RING_CONN-HUBSET' 

##      FRS_SHOW(/SET=%HUBSET%)
## ExpandArgStr:     FRS_SHOW(/SET=$__args{HUBSET})
      FRSSUP::FRS_SHOW( 
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
SET=>$__args{HUBSET} ); 


##      $Ringx = 0;
    $Ringx = 0;
##      $RingCount = FRS_COUNT_SET(/SET=%HUBSET%);
## ExpandArgStr:     $RingCount = FRS_COUNT_SET(/SET=$__args{HUBSET});
    $RingCount =   scalar @{  
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
$__args{HUBSET} } 

;
##      print " RingCount = $RingCount\n\n";
    print " RingCount = $RingCount\n\n";
##      for ($Ringx=0; $Ringx < $RingCount-1; $Ringx++) {
    for ($Ringx=0; $Ringx < $RingCount-1; $Ringx++) {
##          $RM1 = %HUBSET%[$Ringx];
## ExpandArgStr:         $RM1 = $__args{HUBSET}[$Ringx];
        $RM1 = $__args{HUBSET}[$Ringx];
##          $RM2 = %HUBSET%[($Ringx+1) % $RingCount];
## ExpandArgStr:         $RM2 = $__args{HUBSET}[($Ringx+1) % $RingCount];
        $RM2 = $__args{HUBSET}[($Ringx+1) % $RingCount];
##          FRS_CONNECTION  (/TO=$RM1 /FROM=$RM2 /SCHED=ON
##  /ONAME="FROM-".$RM2->{MNAME}."-TO-".$RM1->{MNAME} )
    FRS_CONNECTION->New( 
##  ArgIndex for parameter: 'TO' 
##  ArgType found for parameter: 'TO' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'FROM' 
##  ArgType found for parameter: 'FROM' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'SCHED' 
##  ArgType found for parameter: 'SCHED' is 'SCHEDULE'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        TO=>$RM1, FROM=>$RM2, SCHED=>ON, ONAME=>"FROM-".$RM2->{MNAME}."-TO-".$RM1->{MNAME} 
    ); 

##          FRS_CONNECTION  (/TO=$RM2 /FROM=$RM1 /SCHED=ON
##  /ONAME="FROM-".$RM1->{MNAME}."-TO-".$RM2->{MNAME} )
    FRS_CONNECTION->New( 
##  ArgIndex for parameter: 'TO' 
##  ArgType found for parameter: 'TO' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'FROM' 
##  ArgType found for parameter: 'FROM' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'SCHED' 
##  ArgType found for parameter: 'SCHED' is 'SCHEDULE'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        TO=>$RM2, FROM=>$RM1, SCHED=>ON, ONAME=>"FROM-".$RM1->{MNAME}."-TO-".$RM2->{MNAME} 
    ); 

##      }
    }
##  FRS_END_SUB
}   # FRS_END_SUB


##  FRS_SUB CREATE_HUB_SPOKE(/HUBSET=SET_REF_SET           
##  subname = 'CREATE_HUB_SPOKE',  func = 'FRS_SUB',  rest = '(/HUBSET=SET_REF_SET           '

##  /BCHSET=SET_REF_SET
##  /SC1=SCHEDULE
##  /REPSETDN=SET_ELEMENT)
sub CREATE_HUB_SPOKE {
    my %__args = (@_);
    my ($__HashRef, $__k, $__v);
    while ( ($__k, $__v) = each %__args ) { print "\t$__k => '$__v'\n"; }


##   paramstr: HUBSET=SET_REF_SET            /BCHSET=SET_REF_SET /SC1=SCHEDULE /REPSETDN=SET_ELEMENT

##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE-HUBSET' 
##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE-BCHSET' 
##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE-SC1' 
##  new FRS_SUB parameter: 'CREATE_HUB_SPOKE-REPSETDN' 

##      FRSSUP::PrintHash(\%__args);
    FRSSUP::PrintHash(\%__args);
##      FRS_SHOW(/SET=%HUBSET%)
## ExpandArgStr:     FRS_SHOW(/SET=$__args{HUBSET})
      FRSSUP::FRS_SHOW( 
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
SET=>$__args{HUBSET} ); 


##      # Restriction: All subroutine argument refs are surrounded by "%"
    # Restriction: All subroutine argument refs are surrounded by "%"
##      #              notation "->{...}"
    #              notation "->{...}"
##      foreach $hub  (FRS_ARRAY(/SET=%HUBSET%)) {
## ExpandArgStr:     foreach $hub  (FRS_ARRAY(/SET=$__args{HUBSET})) {
    foreach $hub  (  @{  
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
$__args{HUBSET} } 

) {
##          MOBJHUB: FRS_MEMBER  (/UNDER=%REPSETDN%
## ExpandArgStr:         MOBJHUB: FRS_MEMBER  (/UNDER=$__args{REPSETDN}
##  /SERVER=$hub
##  /COMPUTER=$hub->{COMPUTER}
##  /ONAME=$hub->{MNAME} )
    $__HashRef = FRS_MEMBER->New( 
##  ArgIndex for parameter: 'UNDER' 
##  ArgType found for parameter: 'UNDER' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'SERVER' 
##  ArgType found for parameter: 'SERVER' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'COMPUTER' 
##  ArgType found for parameter: 'COMPUTER' is 'VALUE_STR'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        UNDER=>$__args{REPSETDN}, SERVER=>$hub, COMPUTER=>$hub->{COMPUTER}, ONAME=>$hub->{MNAME} 
    ); 
    &FRSSUP::AddToSet("MOBJHUB", $__HashRef);

##      }
    }
##      foreach $bch  (FRS_SET(/SET=%BCHSET%)) {
## ExpandArgStr:     foreach $bch  (FRS_SET(/SET=$__args{BCHSET})) {
    foreach $bch  (  @{ FRSSUP::FRS_SET( 
##  ArgIndex for parameter: 'SET' 
##  ArgType found for parameter: 'SET' is 'SET_REF_SET'
SET=>$__args{BCHSET} ) } 

) {
##          MOBJBCH: FRS_MEMBER  (/UNDER=%REPSETDN%
## ExpandArgStr:         MOBJBCH: FRS_MEMBER  (/UNDER=$__args{REPSETDN}
##  /SERVER=$bch
##  /COMPUTER=$bch->{COMPUTER}
##  /ONAME="B".$bch->{id} )
    $__HashRef = FRS_MEMBER->New( 
##  ArgIndex for parameter: 'UNDER' 
##  ArgType found for parameter: 'UNDER' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'SERVER' 
##  ArgType found for parameter: 'SERVER' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'COMPUTER' 
##  ArgType found for parameter: 'COMPUTER' is 'VALUE_STR'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        UNDER=>$__args{REPSETDN}, SERVER=>$bch, COMPUTER=>$bch->{COMPUTER}, ONAME=>"B".$bch->{id} 
    ); 
    &FRSSUP::AddToSet("MOBJBCH", $__HashRef);

##      }
    }
##      CREATE_RING_CONN(/HUBSET=<MOBJHUB> )
## ExpandSetRef:     CREATE_RING_CONN(/HUBSET=&FRSSUP::SelectSet(MOBJHUB) )
      &CREATE_RING_CONN ( 
##  ArgIndex for parameter: 'CREATE_RING_CONN-HUBSET' 
##  ArgType found for parameter: 'CREATE_RING_CONN-HUBSET' is 'SET_REF_SET'
HUBSET=>&FRSSUP::SelectSet(MOBJHUB) ); 

##      CREATE_HUB_SPOKE_CONN(/HUBSET=<MOBJHUB>       
## ExpandSetRef:     CREATE_HUB_SPOKE_CONN(/HUBSET=&FRSSUP::SelectSet(MOBJHUB)       
##  /BCHSET=<MOBJBCH>
## ExpandSetRef: /BCHSET=&FRSSUP::SelectSet(MOBJBCH)
##  /SC1=%SC1%     )
## ExpandArgStr: /SC1=$__args{SC1}     )
      &CREATE_HUB_SPOKE_CONN ( 
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE_CONN-HUBSET' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE_CONN-HUBSET' is 'SET_REF_SET'
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE_CONN-BCHSET' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE_CONN-BCHSET' is 'SET_REF_SET'
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE_CONN-SC1' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE_CONN-SC1' is 'SCHEDULE'
HUBSET=>&FRSSUP::SelectSet(MOBJHUB), BCHSET=>&FRSSUP::SelectSet(MOBJBCH), SC1=>$__args{SC1} ); 

##  FRS_END_SUB
    &FRSSUP::DeleteSet("MOBJHUB");
    &FRSSUP::DeleteSet("MOBJBCH");
}   # FRS_END_SUB


##  SETTINGS: FRS_SETTINGS  (/DN="cn=services,cn=configuration,dc=frs1221,dc=nttest,dc=microsoft,dc=com"
##  /ONAME="cn=ntfrs test settings")
    $__HashRef = FRS_SETTINGS->New( 
##  ArgIndex for parameter: 'DN' 
##  ArgType found for parameter: 'DN' is 'VALUE_STR'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        DN=>"cn=services,cn=configuration,dc=frs1221,dc=nttest,dc=microsoft,dc=com", ONAME=>"cn=ntfrs test settings" 
    ); 
    &FRSSUP::AddToSet("SETTINGS", $__HashRef);

##  SET: FRS_REPLICASET  (/UNDER=<SETTINGS> /TYPE=DFS /ONAME="HubSpokeRepSet")
## ExpandSetRef: SET: FRS_REPLICASET  (/UNDER=&FRSSUP::SelectSet(SETTINGS) /TYPE=DFS /ONAME="HubSpokeRepSet")
    $__HashRef = FRS_REPLICASET->New( 
##  ArgIndex for parameter: 'UNDER' 
##  ArgType found for parameter: 'UNDER' is 'SET_ELEMENT'
##  ArgIndex for parameter: 'TYPE' 
##  ArgType found for parameter: 'TYPE' is 'VALUE_CHOICE_SINGLE'
##  ArgIndex for parameter: 'ONAME' 
##  ArgType found for parameter: 'ONAME' is 'VALUE_STR'
        UNDER=>&FRSSUP::SelectSet(SETTINGS)->[0], TYPE=>DFS, ONAME=>"HubSpokeRepSet" 
    ); 
    &FRSSUP::AddToSet("SET", $__HashRef);

##  CREATE_HUB_SPOKE(/HUBSET=<HUB>           
## ExpandSetRef: CREATE_HUB_SPOKE(/HUBSET=&FRSSUP::SelectSet(HUB)           
##  /BCHSET=<BCH>
## ExpandSetRef: /BCHSET=&FRSSUP::SelectSet(BCH)
##  /SC1=<PRIMARY_SCH>
## ExpandSetRef: /SC1=&FRSSUP::SelectSet(PRIMARY_SCH)
##  /REPSETDN=<SET>)
## ExpandSetRef: /REPSETDN=&FRSSUP::SelectSet(SET))
  &CREATE_HUB_SPOKE ( 
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE-HUBSET' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE-HUBSET' is 'SET_REF_SET'
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE-BCHSET' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE-BCHSET' is 'SET_REF_SET'
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE-SC1' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE-SC1' is 'SCHEDULE'
##  ArgIndex for parameter: 'CREATE_HUB_SPOKE-REPSETDN' 
##  ArgType found for parameter: 'CREATE_HUB_SPOKE-REPSETDN' is 'SET_ELEMENT'
HUBSET=>&FRSSUP::SelectSet(HUB), BCHSET=>&FRSSUP::SelectSet(BCH), SC1=>&FRSSUP::SelectSet(PRIMARY_SCH)->[0], REPSETDN=>&FRSSUP::SelectSet(SET)->[0] ); 

__END__
