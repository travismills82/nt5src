// Created by Microsoft (R) C/C++ Compiler Version 13.00.9176 (915640eb).
//
// e:\nt\ds\security\passport\passportmanager\obj\i386\asp.tli
//
// Wrapper implementations for Win32 type library asp.dll
// compiler-generated file created 03/07/02 at 20:41:23 - DO NOT EDIT!

#pragma once

//
// interface IStringList wrapper method implementations
//

inline _variant_t IStringList::GetItem ( const _variant_t & i ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(i, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline int IStringList::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IStringList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IRequestDictionary wrapper method implementations
//

inline _variant_t IRequestDictionary::GetItem ( const _variant_t & Var ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Var, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr IRequestDictionary::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline int IRequestDictionary::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRequestDictionary::GetKey ( const _variant_t & VarKey ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(VarKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IRequest wrapper method implementations
//

inline IDispatchPtr IRequest::GetItem ( _bstr_t bstrVar ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(bstrVar, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IRequestDictionaryPtr IRequest::GetQueryString ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_QueryString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline IRequestDictionaryPtr IRequest::GetForm ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_Form(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline IRequestDictionaryPtr IRequest::GetBody ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline IRequestDictionaryPtr IRequest::GetServerVariables ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_ServerVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline IRequestDictionaryPtr IRequest::GetClientCertificate ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_ClientCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline IRequestDictionaryPtr IRequest::GetCookies ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_Cookies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline long IRequest::GetTotalBytes ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IRequest::BinaryRead ( VARIANT * pvarCountToRead ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BinaryRead(pvarCountToRead, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IReadCookie wrapper method implementations
//

inline _variant_t IReadCookie::GetItem ( const _variant_t & Var ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Var, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IReadCookie::GetHasKeys ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasKeys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IReadCookie::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline int IReadCookie::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IReadCookie::GetKey ( const _variant_t & VarKey ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(VarKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IWriteCookie wrapper method implementations
//

inline void IWriteCookie::PutItem ( const _variant_t & Key, _bstr_t _arg2 ) {
    HRESULT _hr = put_Item(Key, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IWriteCookie::PutExpires ( DATE _arg1 ) {
    HRESULT _hr = put_Expires(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IWriteCookie::PutDomain ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Domain(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IWriteCookie::PutPath ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Path(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IWriteCookie::PutSecure ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Secure(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWriteCookie::GetHasKeys ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasKeys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IWriteCookie::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IResponse wrapper method implementations
//

inline VARIANT_BOOL IResponse::GetBuffer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Buffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IResponse::PutBuffer ( VARIANT_BOOL fIsBuffering ) {
    HRESULT _hr = put_Buffer(fIsBuffering);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IResponse::GetContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IResponse::PutContentType ( _bstr_t pbstrContentTypeRet ) {
    HRESULT _hr = put_ContentType(pbstrContentTypeRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IResponse::GetExpires ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Expires(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IResponse::PutExpires ( long pvarExpiresMinutesRet ) {
    HRESULT _hr = put_Expires(pvarExpiresMinutesRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IResponse::GetExpiresAbsolute ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpiresAbsolute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IResponse::PutExpiresAbsolute ( DATE pvarExpiresRet ) {
    HRESULT _hr = put_ExpiresAbsolute(pvarExpiresRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRequestDictionaryPtr IResponse::GetCookies ( ) {
    struct IRequestDictionary * _result = 0;
    HRESULT _hr = get_Cookies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestDictionaryPtr(_result, false);
}

inline _bstr_t IResponse::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IResponse::PutStatus ( _bstr_t pbstrStatusRet ) {
    HRESULT _hr = put_Status(pbstrStatusRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IResponse::Add ( _bstr_t bstrHeaderValue, _bstr_t bstrHeaderName ) {
    HRESULT _hr = raw_Add(bstrHeaderValue, bstrHeaderName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::AddHeader ( _bstr_t bstrHeaderName, _bstr_t bstrHeaderValue ) {
    HRESULT _hr = raw_AddHeader(bstrHeaderName, bstrHeaderValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::AppendToLog ( _bstr_t bstrLogEntry ) {
    HRESULT _hr = raw_AppendToLog(bstrLogEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::BinaryWrite ( const _variant_t & varInput ) {
    HRESULT _hr = raw_BinaryWrite(varInput);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::End ( ) {
    HRESULT _hr = raw_End();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::Flush ( ) {
    HRESULT _hr = raw_Flush();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::Redirect ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_Redirect(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::Write ( const _variant_t & varText ) {
    HRESULT _hr = raw_Write(varText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResponse::WriteBlock ( short iBlockNumber ) {
    HRESULT _hr = raw_WriteBlock(iBlockNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IResponse::IsClientConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsClientConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IResponse::GetCharSet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CharSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IResponse::PutCharSet ( _bstr_t pbstrCharSetRet ) {
    HRESULT _hr = put_CharSet(pbstrCharSetRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IResponse::Pics ( _bstr_t bstrHeaderValue ) {
    HRESULT _hr = raw_Pics(bstrHeaderValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IResponse::GetCacheControl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CacheControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IResponse::PutCacheControl ( _bstr_t pbstrCacheControl ) {
    HRESULT _hr = put_CacheControl(pbstrCacheControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVariantDictionary wrapper method implementations
//

inline _variant_t IVariantDictionary::GetItem ( const _variant_t & VarKey ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(VarKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IVariantDictionary::PutItem ( const _variant_t & VarKey, const _variant_t & pvar ) {
    HRESULT _hr = put_Item(VarKey, pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IVariantDictionary::PutRefItem ( const _variant_t & VarKey, const _variant_t & pvar ) {
    HRESULT _hr = putref_Item(VarKey, pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IVariantDictionary::GetKey ( const _variant_t & VarKey ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(VarKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline int IVariantDictionary::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IVariantDictionary::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISessionObject wrapper method implementations
//

inline _bstr_t ISessionObject::GetSessionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SessionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t ISessionObject::GetValue ( _bstr_t bstrValue ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(bstrValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISessionObject::PutValue ( _bstr_t bstrValue, const _variant_t & pvar ) {
    HRESULT _hr = put_Value(bstrValue, pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISessionObject::PutRefValue ( _bstr_t bstrValue, const _variant_t & pvar ) {
    HRESULT _hr = putref_Value(bstrValue, pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISessionObject::GetTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_Timeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISessionObject::PutTimeout ( long plvar ) {
    HRESULT _hr = put_Timeout(plvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISessionObject::Abandon ( ) {
    HRESULT _hr = raw_Abandon();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISessionObject::GetCodePage ( ) {
    long _result = 0;
    HRESULT _hr = get_CodePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISessionObject::PutCodePage ( long plvar ) {
    HRESULT _hr = put_CodePage(plvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISessionObject::GetLCID ( ) {
    long _result = 0;
    HRESULT _hr = get_LCID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISessionObject::PutLCID ( long plvar ) {
    HRESULT _hr = put_LCID(plvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IVariantDictionaryPtr ISessionObject::GetStaticObjects ( ) {
    struct IVariantDictionary * _result = 0;
    HRESULT _hr = get_StaticObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariantDictionaryPtr(_result, false);
}

inline IVariantDictionaryPtr ISessionObject::GetContents ( ) {
    struct IVariantDictionary * _result = 0;
    HRESULT _hr = get_Contents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariantDictionaryPtr(_result, false);
}

//
// interface IApplicationObject wrapper method implementations
//

inline _variant_t IApplicationObject::GetValue ( _bstr_t bstrValue ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(bstrValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IApplicationObject::PutValue ( _bstr_t bstrValue, const _variant_t & pvar ) {
    HRESULT _hr = put_Value(bstrValue, pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IApplicationObject::PutRefValue ( _bstr_t bstrValue, const _variant_t & pvar ) {
    HRESULT _hr = putref_Value(bstrValue, pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IApplicationObject::Lock ( ) {
    HRESULT _hr = raw_Lock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IApplicationObject::UnLock ( ) {
    HRESULT _hr = raw_UnLock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IVariantDictionaryPtr IApplicationObject::GetStaticObjects ( ) {
    struct IVariantDictionary * _result = 0;
    HRESULT _hr = get_StaticObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariantDictionaryPtr(_result, false);
}

inline IVariantDictionaryPtr IApplicationObject::GetContents ( ) {
    struct IVariantDictionary * _result = 0;
    HRESULT _hr = get_Contents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariantDictionaryPtr(_result, false);
}

//
// interface IServer wrapper method implementations
//

inline long IServer::GetScriptTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_ScriptTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IServer::PutScriptTimeout ( long plTimeoutSeconds ) {
    HRESULT _hr = put_ScriptTimeout(plTimeoutSeconds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IServer::CreateObject ( _bstr_t bstrProgID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateObject(bstrProgID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IServer::HTMLEncode ( _bstr_t bstrIn ) {
    BSTR _result = 0;
    HRESULT _hr = raw_HTMLEncode(bstrIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IServer::MapPath ( _bstr_t bstrLogicalPath ) {
    BSTR _result = 0;
    HRESULT _hr = raw_MapPath(bstrLogicalPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IServer::URLEncode ( _bstr_t bstrIn ) {
    BSTR _result = 0;
    HRESULT _hr = raw_URLEncode(bstrIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IServer::URLPathEncode ( _bstr_t bstrIn ) {
    BSTR _result = 0;
    HRESULT _hr = raw_URLPathEncode(bstrIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IScriptingContext wrapper method implementations
//

inline IRequestPtr IScriptingContext::GetRequest ( ) {
    struct IRequest * _result = 0;
    HRESULT _hr = get_Request(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRequestPtr(_result, false);
}

inline IResponsePtr IScriptingContext::GetResponse ( ) {
    struct IResponse * _result = 0;
    HRESULT _hr = get_Response(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IResponsePtr(_result, false);
}

inline IServerPtr IScriptingContext::GetServer ( ) {
    struct IServer * _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IServerPtr(_result, false);
}

inline ISessionObjectPtr IScriptingContext::GetSession ( ) {
    struct ISessionObject * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISessionObjectPtr(_result, false);
}

inline IApplicationObjectPtr IScriptingContext::GetApplication ( ) {
    struct IApplicationObject * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationObjectPtr(_result, false);
}
