// Created by Microsoft (R) C/C++ Compiler Version 13.00.9176 (915640eb).
//
// e:\nt\ds\security\passport\passportmanager\obj\i386\asp.tlh
//
// C++ source equivalent of Win32 type library asp.dll
// compiler-generated file created 03/07/02 at 20:41:23 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("d97a6da0-a85c-11cf-83ae-00a0c90c2bd8"))
/* LIBID */ __ASPTypeLibrary;
struct __declspec(uuid("d97a6da0-a85d-11cf-83ae-00a0c90c2bd8"))
/* dual interface */ IStringList;
struct __declspec(uuid("d97a6da0-a85f-11df-83ae-00a0c90c2bd8"))
/* dual interface */ IRequestDictionary;
struct __declspec(uuid("d97a6da0-a861-11cf-93ae-00a0c90c2bd8"))
/* dual interface */ IRequest;
struct /* coclass */ Request;
struct __declspec(uuid("71eaf260-0ce0-11d0-a53e-00a0c90c2091"))
/* dual interface */ IReadCookie;
struct __declspec(uuid("d97a6da0-a862-11cf-84ae-00a0c90c2bd8"))
/* dual interface */ IWriteCookie;
struct __declspec(uuid("d97a6da0-a864-11cf-83be-00a0c90c2bd8"))
/* dual interface */ IResponse;
struct /* coclass */ Response;
struct __declspec(uuid("4a7deb90-b069-11d0-b373-00a0c90c2bd8"))
/* dual interface */ IVariantDictionary;
struct __declspec(uuid("d97a6da0-a865-11cf-83af-00a0c90c2bd8"))
/* dual interface */ ISessionObject;
struct /* coclass */ Session;
struct __declspec(uuid("d97a6da0-a866-11cf-83ae-10a0c90c2bd8"))
/* dual interface */ IApplicationObject;
struct /* coclass */ Application;
struct __declspec(uuid("d97a6da0-a867-11cf-83ae-01a0c90c2bd8"))
/* dual interface */ IServer;
struct /* coclass */ Server;
struct __declspec(uuid("d97a6da0-a868-11cf-83ae-00b0c90c2bd8"))
/* dual interface */ IScriptingContext;
struct /* coclass */ ScriptingContext;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IStringList, __uuidof(IStringList));
_COM_SMARTPTR_TYPEDEF(IRequestDictionary, __uuidof(IRequestDictionary));
_COM_SMARTPTR_TYPEDEF(IRequest, __uuidof(IRequest));
_COM_SMARTPTR_TYPEDEF(IReadCookie, __uuidof(IReadCookie));
_COM_SMARTPTR_TYPEDEF(IWriteCookie, __uuidof(IWriteCookie));
_COM_SMARTPTR_TYPEDEF(IResponse, __uuidof(IResponse));
_COM_SMARTPTR_TYPEDEF(IVariantDictionary, __uuidof(IVariantDictionary));
_COM_SMARTPTR_TYPEDEF(ISessionObject, __uuidof(ISessionObject));
_COM_SMARTPTR_TYPEDEF(IApplicationObject, __uuidof(IApplicationObject));
_COM_SMARTPTR_TYPEDEF(IServer, __uuidof(IServer));
_COM_SMARTPTR_TYPEDEF(IScriptingContext, __uuidof(IScriptingContext));

//
// Type library items
//

struct __declspec(uuid("d97a6da0-a85d-11cf-83ae-00a0c90c2bd8"))
IStringList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetItem (
        const _variant_t & i = vtMissing );
    int GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT i,
        /*[out,retval]*/ VARIANT * pVariantReturn ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * cStrRet ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumReturn ) = 0;
};

struct __declspec(uuid("d97a6da0-a85f-11df-83ae-00a0c90c2bd8"))
IRequestDictionary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetKey))
    _variant_t Key[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetItem (
        const _variant_t & Var = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    int GetCount ( );
    _variant_t GetKey (
        const _variant_t & VarKey );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Var,
        /*[out,retval]*/ VARIANT * pVariantReturn ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumReturn ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * cStrRet ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT VarKey,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
};

struct __declspec(uuid("d97a6da0-a861-11cf-93ae-00a0c90c2bd8"))
IRequest : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetQueryString))
    IRequestDictionaryPtr QueryString;
    __declspec(property(get=GetForm))
    IRequestDictionaryPtr Form;
    __declspec(property(get=GetBody))
    IRequestDictionaryPtr Body;
    __declspec(property(get=GetServerVariables))
    IRequestDictionaryPtr ServerVariables;
    __declspec(property(get=GetClientCertificate))
    IRequestDictionaryPtr ClientCertificate;
    __declspec(property(get=GetCookies))
    IRequestDictionaryPtr Cookies;
    __declspec(property(get=GetTotalBytes))
    long TotalBytes;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetItem (
        _bstr_t bstrVar );
    IRequestDictionaryPtr GetQueryString ( );
    IRequestDictionaryPtr GetForm ( );
    IRequestDictionaryPtr GetBody ( );
    IRequestDictionaryPtr GetServerVariables ( );
    IRequestDictionaryPtr GetClientCertificate ( );
    IRequestDictionaryPtr GetCookies ( );
    long GetTotalBytes ( );
    _variant_t BinaryRead (
        VARIANT * pvarCountToRead );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ BSTR bstrVar,
        /*[out,retval]*/ IDispatch * * ppObjReturn ) = 0;
      virtual HRESULT __stdcall get_QueryString (
        /*[out,retval]*/ struct IRequestDictionary * * ppDictReturn ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ struct IRequestDictionary * * ppDictReturn ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IRequestDictionary * * ppDictReturn ) = 0;
      virtual HRESULT __stdcall get_ServerVariables (
        /*[out,retval]*/ struct IRequestDictionary * * ppDictReturn ) = 0;
      virtual HRESULT __stdcall get_ClientCertificate (
        /*[out,retval]*/ struct IRequestDictionary * * ppDictReturn ) = 0;
      virtual HRESULT __stdcall get_Cookies (
        /*[out,retval]*/ struct IRequestDictionary * * ppDictReturn ) = 0;
      virtual HRESULT __stdcall get_TotalBytes (
        /*[out,retval]*/ long * pcbTotal ) = 0;
      virtual HRESULT __stdcall raw_BinaryRead (
        /*[in,out]*/ VARIANT * pvarCountToRead,
        /*[out,retval]*/ VARIANT * pvarReturn ) = 0;
};

struct __declspec(uuid("920c25d0-25d9-11d0-a55f-00a0c90c2091"))
Request;
    // [ default ] interface IRequest

struct __declspec(uuid("71eaf260-0ce0-11d0-a53e-00a0c90c2091"))
IReadCookie : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];
    __declspec(property(get=GetHasKeys))
    VARIANT_BOOL HasKeys;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetKey))
    _variant_t Key[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetItem (
        const _variant_t & Var = vtMissing );
    VARIANT_BOOL GetHasKeys ( );
    IUnknownPtr Get_NewEnum ( );
    int GetCount ( );
    _variant_t GetKey (
        const _variant_t & VarKey );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Var,
        /*[out,retval]*/ VARIANT * pVariantReturn ) = 0;
      virtual HRESULT __stdcall get_HasKeys (
        /*[out,retval]*/ VARIANT_BOOL * pfHasKeys ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumReturn ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * cStrRet ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT VarKey,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
};

struct __declspec(uuid("d97a6da0-a862-11cf-84ae-00a0c90c2bd8"))
IWriteCookie : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutItem))
    _bstr_t Item[];
    __declspec(property(put=PutExpires))
    DATE Expires;
    __declspec(property(put=PutDomain))
    _bstr_t Domain;
    __declspec(property(put=PutPath))
    _bstr_t Path;
    __declspec(property(put=PutSecure))
    VARIANT_BOOL Secure;
    __declspec(property(get=GetHasKeys))
    VARIANT_BOOL HasKeys;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    void PutItem (
        const _variant_t & Key,
        _bstr_t _arg2 );
    void PutExpires (
        DATE _arg1 );
    void PutDomain (
        _bstr_t _arg1 );
    void PutPath (
        _bstr_t _arg1 );
    void PutSecure (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasKeys ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Item (
        /*[in]*/ VARIANT Key,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall put_Expires (
        /*[in]*/ DATE _arg1 ) = 0;
      virtual HRESULT __stdcall put_Domain (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Secure (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_HasKeys (
        /*[out,retval]*/ VARIANT_BOOL * pfHasKeys ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumReturn ) = 0;
};

struct __declspec(uuid("d97a6da0-a864-11cf-83be-00a0c90c2bd8"))
IResponse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBuffer,put=PutBuffer))
    VARIANT_BOOL Buffer;
    __declspec(property(get=GetContentType,put=PutContentType))
    _bstr_t ContentType;
    __declspec(property(get=GetCookies))
    IRequestDictionaryPtr Cookies;
    __declspec(property(get=GetStatus,put=PutStatus))
    _bstr_t Status;
    __declspec(property(get=GetCharSet,put=PutCharSet))
    _bstr_t CharSet;
    __declspec(property(get=GetCacheControl,put=PutCacheControl))
    _bstr_t CacheControl;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBuffer ( );
    void PutBuffer (
        VARIANT_BOOL fIsBuffering );
    _bstr_t GetContentType ( );
    void PutContentType (
        _bstr_t pbstrContentTypeRet );
    _variant_t GetExpires ( );
    void PutExpires (
        long pvarExpiresMinutesRet );
    _variant_t GetExpiresAbsolute ( );
    void PutExpiresAbsolute (
        DATE pvarExpiresRet );
    IRequestDictionaryPtr GetCookies ( );
    _bstr_t GetStatus ( );
    void PutStatus (
        _bstr_t pbstrStatusRet );
    HRESULT Add (
        _bstr_t bstrHeaderValue,
        _bstr_t bstrHeaderName );
    HRESULT AddHeader (
        _bstr_t bstrHeaderName,
        _bstr_t bstrHeaderValue );
    HRESULT AppendToLog (
        _bstr_t bstrLogEntry );
    HRESULT BinaryWrite (
        const _variant_t & varInput );
    HRESULT Clear ( );
    HRESULT End ( );
    HRESULT Flush ( );
    HRESULT Redirect (
        _bstr_t bstrURL );
    HRESULT Write (
        const _variant_t & varText );
    HRESULT WriteBlock (
        short iBlockNumber );
    VARIANT_BOOL IsClientConnected ( );
    _bstr_t GetCharSet ( );
    void PutCharSet (
        _bstr_t pbstrCharSetRet );
    HRESULT Pics (
        _bstr_t bstrHeaderValue );
    _bstr_t GetCacheControl ( );
    void PutCacheControl (
        _bstr_t pbstrCacheControl );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Buffer (
        /*[out,retval]*/ VARIANT_BOOL * fIsBuffering ) = 0;
      virtual HRESULT __stdcall put_Buffer (
        /*[in]*/ VARIANT_BOOL fIsBuffering ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ BSTR * pbstrContentTypeRet ) = 0;
      virtual HRESULT __stdcall put_ContentType (
        /*[in]*/ BSTR pbstrContentTypeRet ) = 0;
      virtual HRESULT __stdcall get_Expires (
        /*[out,retval]*/ VARIANT * pvarExpiresMinutesRet ) = 0;
      virtual HRESULT __stdcall put_Expires (
        /*[in]*/ long pvarExpiresMinutesRet ) = 0;
      virtual HRESULT __stdcall get_ExpiresAbsolute (
        /*[out,retval]*/ VARIANT * pvarExpiresRet ) = 0;
      virtual HRESULT __stdcall put_ExpiresAbsolute (
        /*[in]*/ DATE pvarExpiresRet ) = 0;
      virtual HRESULT __stdcall get_Cookies (
        /*[out,retval]*/ struct IRequestDictionary * * ppCookies ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ BSTR * pbstrStatusRet ) = 0;
      virtual HRESULT __stdcall put_Status (
        /*[in]*/ BSTR pbstrStatusRet ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR bstrHeaderValue,
        /*[in]*/ BSTR bstrHeaderName ) = 0;
      virtual HRESULT __stdcall raw_AddHeader (
        /*[in]*/ BSTR bstrHeaderName,
        /*[in]*/ BSTR bstrHeaderValue ) = 0;
      virtual HRESULT __stdcall raw_AppendToLog (
        /*[in]*/ BSTR bstrLogEntry ) = 0;
      virtual HRESULT __stdcall raw_BinaryWrite (
        /*[in]*/ VARIANT varInput ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_End ( ) = 0;
      virtual HRESULT __stdcall raw_Flush ( ) = 0;
      virtual HRESULT __stdcall raw_Redirect (
        /*[in]*/ BSTR bstrURL ) = 0;
      virtual HRESULT __stdcall raw_Write (
        /*[in]*/ VARIANT varText ) = 0;
      virtual HRESULT __stdcall raw_WriteBlock (
        /*[in]*/ short iBlockNumber ) = 0;
      virtual HRESULT __stdcall raw_IsClientConnected (
        /*[out,retval]*/ VARIANT_BOOL * pfIsClientConnected ) = 0;
      virtual HRESULT __stdcall get_CharSet (
        /*[out,retval]*/ BSTR * pbstrCharSetRet ) = 0;
      virtual HRESULT __stdcall put_CharSet (
        /*[in]*/ BSTR pbstrCharSetRet ) = 0;
      virtual HRESULT __stdcall raw_Pics (
        /*[in]*/ BSTR bstrHeaderValue ) = 0;
      virtual HRESULT __stdcall get_CacheControl (
        /*[out,retval]*/ BSTR * pbstrCacheControl ) = 0;
      virtual HRESULT __stdcall put_CacheControl (
        /*[in]*/ BSTR pbstrCacheControl ) = 0;
};

struct __declspec(uuid("46e19ba0-25dd-11d0-a55f-00a0c90c2091"))
Response;
    // [ default ] interface IResponse

struct __declspec(uuid("4a7deb90-b069-11d0-b373-00a0c90c2bd8"))
IVariantDictionary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutRefItem))
    _variant_t Item[];
    __declspec(property(get=GetKey))
    _variant_t Key[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetItem (
        const _variant_t & VarKey );
    void PutItem (
        const _variant_t & VarKey,
        const _variant_t & pvar );
    void PutRefItem (
        const _variant_t & VarKey,
        const _variant_t & pvar );
    _variant_t GetKey (
        const _variant_t & VarKey );
    int GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT VarKey,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ VARIANT VarKey,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall putref_Item (
        /*[in]*/ VARIANT VarKey,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT VarKey,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * cStrRet ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumReturn ) = 0;
};

struct __declspec(uuid("d97a6da0-a865-11cf-83af-00a0c90c2bd8"))
ISessionObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSessionID))
    _bstr_t SessionID;
    __declspec(property(get=GetValue,put=PutRefValue))
    _variant_t Value[];
    __declspec(property(get=GetTimeout,put=PutTimeout))
    long Timeout;
    __declspec(property(get=GetCodePage,put=PutCodePage))
    long CodePage;
    __declspec(property(get=GetLCID,put=PutLCID))
    long LCID;
    __declspec(property(get=GetStaticObjects))
    IVariantDictionaryPtr StaticObjects;
    __declspec(property(get=GetContents))
    IVariantDictionaryPtr Contents;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSessionID ( );
    _variant_t GetValue (
        _bstr_t bstrValue );
    void PutValue (
        _bstr_t bstrValue,
        const _variant_t & pvar );
    void PutRefValue (
        _bstr_t bstrValue,
        const _variant_t & pvar );
    long GetTimeout ( );
    void PutTimeout (
        long plvar );
    HRESULT Abandon ( );
    long GetCodePage ( );
    void PutCodePage (
        long plvar );
    long GetLCID ( );
    void PutLCID (
        long plvar );
    IVariantDictionaryPtr GetStaticObjects ( );
    IVariantDictionaryPtr GetContents ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SessionID (
        /*[out,retval]*/ BSTR * pbstrRet ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ BSTR bstrValue,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR bstrValue,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall putref_Value (
        /*[in]*/ BSTR bstrValue,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Timeout (
        /*[out,retval]*/ long * plvar ) = 0;
      virtual HRESULT __stdcall put_Timeout (
        /*[in]*/ long plvar ) = 0;
      virtual HRESULT __stdcall raw_Abandon ( ) = 0;
      virtual HRESULT __stdcall get_CodePage (
        /*[out,retval]*/ long * plvar ) = 0;
      virtual HRESULT __stdcall put_CodePage (
        /*[in]*/ long plvar ) = 0;
      virtual HRESULT __stdcall get_LCID (
        /*[out,retval]*/ long * plvar ) = 0;
      virtual HRESULT __stdcall put_LCID (
        /*[in]*/ long plvar ) = 0;
      virtual HRESULT __stdcall get_StaticObjects (
        /*[out,retval]*/ struct IVariantDictionary * * ppTaggedObjects ) = 0;
      virtual HRESULT __stdcall get_Contents (
        /*[out,retval]*/ struct IVariantDictionary * * ppProperties ) = 0;
};

struct __declspec(uuid("509f8f20-25de-11d0-a55f-00a0c90c2091"))
Session;
    // [ default ] interface ISessionObject

struct __declspec(uuid("d97a6da0-a866-11cf-83ae-10a0c90c2bd8"))
IApplicationObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutRefValue))
    _variant_t Value[];
    __declspec(property(get=GetStaticObjects))
    IVariantDictionaryPtr StaticObjects;
    __declspec(property(get=GetContents))
    IVariantDictionaryPtr Contents;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue (
        _bstr_t bstrValue );
    void PutValue (
        _bstr_t bstrValue,
        const _variant_t & pvar );
    void PutRefValue (
        _bstr_t bstrValue,
        const _variant_t & pvar );
    HRESULT Lock ( );
    HRESULT UnLock ( );
    IVariantDictionaryPtr GetStaticObjects ( );
    IVariantDictionaryPtr GetContents ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[in]*/ BSTR bstrValue,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR bstrValue,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall putref_Value (
        /*[in]*/ BSTR bstrValue,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall raw_Lock ( ) = 0;
      virtual HRESULT __stdcall raw_UnLock ( ) = 0;
      virtual HRESULT __stdcall get_StaticObjects (
        /*[out,retval]*/ struct IVariantDictionary * * ppProperties ) = 0;
      virtual HRESULT __stdcall get_Contents (
        /*[out,retval]*/ struct IVariantDictionary * * ppProperties ) = 0;
};

struct __declspec(uuid("7c3baf00-25de-11d0-a55f-00a0c90c2091"))
Application;
    // [ default ] interface IApplicationObject

struct __declspec(uuid("d97a6da0-a867-11cf-83ae-01a0c90c2bd8"))
IServer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScriptTimeout,put=PutScriptTimeout))
    long ScriptTimeout;

    //
    // Wrapper methods for error-handling
    //

    long GetScriptTimeout ( );
    void PutScriptTimeout (
        long plTimeoutSeconds );
    IDispatchPtr CreateObject (
        _bstr_t bstrProgID );
    _bstr_t HTMLEncode (
        _bstr_t bstrIn );
    _bstr_t MapPath (
        _bstr_t bstrLogicalPath );
    _bstr_t URLEncode (
        _bstr_t bstrIn );
    _bstr_t URLPathEncode (
        _bstr_t bstrIn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScriptTimeout (
        /*[out,retval]*/ long * plTimeoutSeconds ) = 0;
      virtual HRESULT __stdcall put_ScriptTimeout (
        /*[in]*/ long plTimeoutSeconds ) = 0;
      virtual HRESULT __stdcall raw_CreateObject (
        /*[in]*/ BSTR bstrProgID,
        /*[out,retval]*/ IDispatch * * ppDispObject ) = 0;
      virtual HRESULT __stdcall raw_HTMLEncode (
        /*[in]*/ BSTR bstrIn,
        /*[out,retval]*/ BSTR * pbstrEncoded ) = 0;
      virtual HRESULT __stdcall raw_MapPath (
        /*[in]*/ BSTR bstrLogicalPath,
        /*[out,retval]*/ BSTR * pbstrPhysicalPath ) = 0;
      virtual HRESULT __stdcall raw_URLEncode (
        /*[in]*/ BSTR bstrIn,
        /*[out,retval]*/ BSTR * pbstrEncoded ) = 0;
      virtual HRESULT __stdcall raw_URLPathEncode (
        /*[in]*/ BSTR bstrIn,
        /*[out,retval]*/ BSTR * pbstrEncoded ) = 0;
};

struct __declspec(uuid("a506d160-25e0-11d0-a55f-00a0c90c2091"))
Server;
    // [ default ] interface IServer

struct __declspec(uuid("d97a6da0-a868-11cf-83ae-00b0c90c2bd8"))
IScriptingContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRequest))
    IRequestPtr Request;
    __declspec(property(get=GetResponse))
    IResponsePtr Response;
    __declspec(property(get=GetServer))
    IServerPtr Server;
    __declspec(property(get=GetSession))
    ISessionObjectPtr Session;
    __declspec(property(get=GetApplication))
    IApplicationObjectPtr Application;

    //
    // Wrapper methods for error-handling
    //

    IRequestPtr GetRequest ( );
    IResponsePtr GetResponse ( );
    IServerPtr GetServer ( );
    ISessionObjectPtr GetSession ( );
    IApplicationObjectPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Request (
        /*[out,retval]*/ struct IRequest * * ppRequest ) = 0;
      virtual HRESULT __stdcall get_Response (
        /*[out,retval]*/ struct IResponse * * ppResponse ) = 0;
      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ struct IServer * * ppServer ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct ISessionObject * * ppSession ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplicationObject * * ppApplication ) = 0;
};

struct __declspec(uuid("d97a6da0-a868-11cf-83ae-11b0c90c2bd8"))
ScriptingContext;
    // [ default ] interface IScriptingContext

//
// Wrapper method implementations
//

#include "asp.tli"

#pragma pack(pop)
