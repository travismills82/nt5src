Qualifier Description : ToSubClass Amended;
Qualifier Values : ToSubClass Amended;
Qualifier DisplayName : ToSubClass Amended;
Qualifier BitValues:ToSubClass Amended ;

Qualifier Aggregate : ToSubClass ;
Qualifier ValueMap : ToSubClass ;
Qualifier Aggregation : ToSubClass ;
Qualifier ArrayType : ToSubClass ;
Qualifier Association : ToInstance ToSubClass DisableOverride ;
Qualifier BitMap : ToSubClass ;
Qualifier CIM_Key : ToSubClass ;
Qualifier CIMTYPE : ToSubClass ;
Qualifier Deprecated : ToSubClass ;
Qualifier Enumeration : ToSubClass ;
Qualifier EnumPrivileges : ToSubClass ;
Qualifier ImplementationSource : ToSubClass ;
Qualifier Key : ToInstance ToSubClass DisableOverride ;
Qualifier Locale : ToInstance ;
Qualifier MappingStrings : ToSubClass ;
Qualifier Max : ToSubClass ;
Qualifier MaxLen : ToSubClass ;
Qualifier MethodSource : ToSubClass ;
Qualifier Min : ToSubClass ;
Qualifier ModelCorrespondence : ToSubClass ;
Qualifier Not_Null : ToSubClass ;
Qualifier Optional : ToSubClass ;
Qualifier Override : Restricted ;
Qualifier Privileges : ToSubClass ;
Qualifier Propagated : ToSubClass ;
Qualifier PropertySources : ToSubClass ;
Qualifier Provider : ToInstance ;
Qualifier Range : ToSubClass ;
Qualifier Read : ToSubClass ;
Qualifier Schema : ToInstance ;
Qualifier Singleton : ToSubClass ToInstance ;
Qualifier SUBTYPE : ToSubClass ;
Qualifier Units : ToSubClass ;
Qualifier UUID : ToInstance ;
Qualifier Volatile : ToSubClass ;
Qualifier Weak : ToSubClass ;
Qualifier Write : ToSubClass ;
Qualifier WritePrivileges : ToSubClass ;

#pragma namespace("\\\\.\\root")

Instance of __Namespace
{
  Name = "MicrosoftIISv1";
};
#pragma namespace("\\\\.\\ROOT\\MicrosoftIISv1")

/* View provider setup */
instance of __Win32Provider as $DataProv
{
    Name = "MS_VIEW_INSTANCE_PROVIDER";
    ClsId = "{AA70DDF4-E11C-11D1-ABB0-00C04FD9159E}";
    ImpersonationLevel = 1;
    PerUserInitialization = "True";

};
instance of __InstanceProviderRegistration
{
    Provider = $DataProv;
    SupportsPut = True;
    SupportsGet = True;
    SupportsDelete = True;
    SupportsEnumeration = True;
    QuerySupportLevels = {"WQL:UnarySelect"};
};
instance of __MethodProviderRegistration
{
    Provider = $DataProv;
};
/**/

/* IIS provider setup */
Instance of __Win32Provider as $IISProv
{
  Name = "IIS__PROVIDER";
  ClsId = "{1339F295-5C3F-45ab-A117-C91B002408D5}";
  Pure = "TRUE";
  ImpersonationLevel = 1;
  PerUserInitialization = "TRUE";
};
Instance of __InstanceProviderRegistration
{
  Provider = $IISProv;
  SupportsPut = "TRUE";
  SupportsGet = "TRUE";
  SupportsDelete = "TRUE";
  SupportsEnumeration = "TRUE";
};
Instance of __MethodProviderRegistration
{
  Provider = $IISProv;
};
/**/

        [Abstract,
        Description("The CIM_ManagedSystemElement class is the base class for the system element "
        "hierarchy. Membership criteria: Any distinguishable component of a system is a candidate "
        "for inclusion in this class.\nExamples: software components, such as files; and devices, "
        "such as disk drives and controllers, and physical components such as chips and cards."),
        Locale(1033),
        UUID("{8502C517-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_ManagedSystemElement
{
        [PropertySources("Caption"),
        MaxLen(64),
        Description("The Caption property is a short textual description (one-line string) of the "
        "object."),
        read]
    string Caption;

        [PropertySources("Description"),
        Description("The Description property provides a textual description of the object."),
        read]
    string Description;

        [PropertySources("InstallDate"),
        Description("The InstallDate property is datetime value indicating when the object was "
        "installed. A lack of a value does not indicate that the object is not installed."),
        MappingStrings{"MIF.DMTF|ComponentID|001.5"},
        read]
    datetime InstallDate;

        [PropertySources("Name"),
        Description("The Name property defines the label by which the object is known. When "
        "subclassed, the Name property can be overridden to be a Key property."),
        read]
    string Name;

        [PropertySources("Status"),
        read,
        MaxLen(10),
        Description("The Status property is a string indicating the current status of the object. "
        "Various operational and non-operational statuses can be defined. Operational statuses are "
        "\"OK\", \"Degraded\" and \"Pred Fail\". \"Pred Fail\" indicates that an element may be "
        "functioning properly but predicting a failure in the near future. An example is a "
        "SMART-enabled hard drive. Non-operational statuses can also be specified. These are "
        "\"Error\", \"Starting\", \"Stopping\" and \"Service\". The latter, \"Service\", could "
        "apply during mirror-resilvering of a disk, reload of a user permissions list, or other "
        "administrative work. Not all such work is on-line, yet the managed element is neither "
        "\"OK\" nor in one of the other states."),
        ValueMap{"OK", "Error", "Degraded", "Unknown", "Pred Fail", "Starting", "Stopping",
        "Service"},
        Values{"OK", "Error", "Degraded", "Unknown", "Pred Fail", "Starting", "Stopping",
        "Service"}]
    string Status;

};

        [Description("The CIM_LogicalElement class is the base class for all the components of "
        "the system that represent abstract system components.\nExample: profiles, processes, or "
        "system capabilities in the form of logical devices."),
        Abstract,
        Locale(1033),
        UUID("{8502C518-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_LogicalElement : CIM_ManagedSystemElement
{
};

        [Abstract, Description (
        "A logical element that aggregates an enumerable set of managed system "
        "elements. The aggregation operates as an functional whole. Within any "
        "particular subclass of CIM_System, there is a well-defined list of "
        "CIM_ManagedSystemElement classes whose instances must be aggregated."),
        Locale (0x409), UUID ("{8502C524-5FBB-11D2-AAC1-006008C78BC7}") ]
class CIM_System: CIM_LogicalElement
{
        [CIM_Key, Read,
        Description ("The CreationClassName property indicates the name "
        "of the class or the subclass used in the creation of an instance. "
        "When used with the other key properties of this class, this "
        "property allows all instances of this class and its subclasses to "
        "be uniquely identified.")]
    string CreationClassName ;
        [Override ("Name") , Description (
        "The inherited Name property serves as key of a CIM_System instance in an enterprise "
        "environment.") , CIM_Key, Read ]
    string Name ;
        [Description (
        "The CIM_System object and its derivatives are top level objects of CIM. "
        "They provide the scope for numerous components. Having unique system "
        "keys is required. A heuristic can be defined in individual system "
        "subclasses to attempt to always generate the same system name key. The "
        "NameFormat property identifies how the system name was generated, using "
        "the subclass' heuristic.") , Read ]
    string NameFormat ;
        [Description (
        "A string that provides information on how the primary system owner can "
        "be reached (e.g. phone number, email address, ...).") , Read ]
    string PrimaryOwnerContact ;
        [Description ("The name of the primary system owner.") , Read ]
    string PrimaryOwnerName ;
        [Description (
        "A collection of strings that specify the roles this system plays in "
        "the IT-environment.") , Read, Write ]
    string Roles[] ;
};

        [Description (
         "The Setting class represents configuration-related and "
         "operational parameters for one or more ManagedSystem"
         "Element(s). A ManagedSystemElement may have multiple Setting "
         "objects associated with it. The current operational values "
         "for an Element's parameters are reflected by properties in "
         "the Element itself or by properties in its associations. "
         "These properties do not have to be the same values present "
         "in the Setting object. For example, a modem may have a "
         "Setting baud rate of 56Kb/sec but be operating "
         "at 19.2Kb/sec."),
        Abstract,
        Locale(1033),
        UUID("{8502C572-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_Setting
{
        [read,
        MaxLen(256),
        Description("The identifier by which the CIM_Setting object is known.")]
    string SettingID;

        [read,
        MaxLen(64),
        Description("A short textual description (one-line string) of the CIM_Setting object.")]
    string Caption;

        [read,
        Description("A textual description of the CIM_Setting object.")]
    string Description;

};

        [Association,
        Abstract,
        Aggregation,
        Description("A generic association to establish 'part of' relationships between managed "
        "system elements."),
        Locale(1033),
        UUID("{8502C573-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_Component
{
        [read,
        Aggregate,
        Description("The parent element in the association"),
        Min(1),
        Max(1)]
    CIM_ManagedSystemElement ref GroupComponent;

        [Description("The child element in the association"),
        read]
    CIM_ManagedSystemElement ref PartComponent;

};

        [Description("A logical element that contains the information necessary to represent and "
        "manage the functionality provided by a device and/or software feature. A service is a "
        "general-purpose object to configure and manage the implementation of functionality. It is "
        "not the functionality itself."),
        union,
        ViewSources{"Select * from CIM_Service"},
        ViewSpaces{"\\\\.\\root\\cimv2"},
        provider("MS_VIEW_INSTANCE_PROVIDER"),
        Abstract,
        Locale(1033),
        UUID("{8502C527-5FBB-11D2-AAC1-006008C78BC7}")]
class CIM_Service : CIM_LogicalElement
{
        [PropertySources("Name"),
        Description("The Name property uniquely identifies the service and provides an indication "
        "of the functionality that is managed. This functionality is described in more detail in "
        "the object's Description property."),
        read,
        Override("Name"),
        cim_key]
    string Name;

        [PropertySources("CreationClassName"),
        CIM_Key,
        read,
        Description("CreationClassName indicates the name of the class or the subclass used in "
        "the creation of an instance. When used with the other key properties of this class, this "
        "property allows all instances of this class and its subclasses to be uniquely "
        "identified.")]
    string CreationClassName;

        [PropertySources("StartMode"),
        Description("StartMode is a string value indicating whether the service is automatically "
        "started by a operating system, or only started upon request."),
        ValueMap{"Automatic", "Manual"},
        Values{"Automatic", "Manual"},
        read]
    string StartMode;

        [PropertySources("Started"),
        Description("Started is a boolean indicating whether the service has been started (TRUE), "
        "or stopped (FALSE)."),
        read]
    boolean Started;

        [PropertySources("SystemCreationClassName"),
        Propagated("CIM_System.CreationClassName"),
        CIM_Key,
        Description("The type name of the system that hosts this service"),
        read]
    string SystemCreationClassName;

        [PropertySources("SystemName"),
        Propagated("CIM_System.Name"),
        CIM_Key,
        Description("The name of the system that hosts this service"),
        read]
    string SystemName;

        [Description("The StartService method places the service in the started state. It returns "
        "an integer value of 0 if the service was successfully started, 1 if the request is not "
        "supported and any other number to indicate an error.")]
    uint32 StartService();

        [Description("The StopService method places the service in the stopped state. It returns "
        "an integer value of 0 if the service was successfully stopped, 1 if the request is not "
        "supported and any other number to indicate an error.")]
    uint32 StopService();

};

        [Description("The Win32_BaseService class represents executable objects that are "
        "installed in a registry database maintained by the Service Control Manager. The "
        "executable file associated with a service can be started at boot time by a boot program "
        "or by the system. It can also be started on-demand by the Service Control Manager. Any "
        "service or process that is not owned by a specific user, and that provides an interface "
        "to some functionality supported by the computer system, is a descendent (or member) of "
        "this class.\nExample: The dynamic host configuration protocol (DHCP) client service on a "
        "Windows NT/Windows 2000 computer system."),
        provider("MS_VIEW_INSTANCE_PROVIDER"),
        Union,
        ViewSources{"Select * from Win32_BaseService"},
        ViewSpaces{"\\\\.\\root\\cimv2"},
        Abstract,
        Locale(1033),
        UUID("{8502C4C4-5FBB-11D2-AAC1-006008C78BC7}")]
class Win32_BaseService : CIM_Service
{

        [PropertySources("Name"),
        Description("The Name property uniquely identifies the service and provides an indication "
        "of the functionality that is managed. This functionality is described in more detail in "
        "the object's Description property."),
        read,
        Override("Name"),
        key]
    string Name;

        [PropertySources("StartMode"),
        Description("The StartMode property indicates the start mode of the Win32 base service. "
        "\"Boot\" specifies a device driver started by the operating system loader. This value is "
        "valid only for driver services. \"System\" specifies a device driver started by the "
        "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
        "specifies a service to be started automatically by the service control manager during "
        "system startup. \"Manual\" specifies a service to be started by the service control "
        "manager when a process calls the StartService function. \"Disabled\" specifies a service "
        "that can no longer be started."),
        ValueMap{"Boot", "System", "Auto", "Manual", "Disabled"},
        Values{"Boot", "System", "Auto", "Manual", "Disabled"},
        read,
        Override("StartMode")]
    string StartMode;

        [read,
        PropertySources("AcceptPause"),
        Description("The AcceptPause property indicates whether the service can be "
        "paused.\nValues: TRUE or FALSE. A value of TRUE indicates the service can be paused."),
        MappingStrings{"Win32API|Service "
        "Structures|SERVICE_STATUS|dwControlsAccepted|SERVICE_ACCEPT_PAUSE_CONTINUE"}]
    boolean AcceptPause;

        [read,
        PropertySources("AcceptStop"),
        Description("The AcceptStop property indicates whether the service can be "
        "stopped.\nValues: TRUE or FALSE. A value of TRUE indicates the service can be stopped."),
        MappingStrings{"Win32API|Service "
        "Structures|SERVICE_STATUS|dwControlsAccepted|SERVICE_ACCEPT_STOP"}]
    boolean AcceptStop;

        [read,
        PropertySources("DesktopInteract"),
        Description("The DesktopInteract property indicates whether the service can create or "
        "communicate with windows on the desktop.\nValues: TRUE or FALSE. A value of TRUE "
        "indicates the service can create or communicate with windows on the desktop."),
        MappingStrings{"Win32API|Service "
        "Structures|QUERY_SERVICE_CONFIG|dwServiceType|SERVICE_INTERACTIVE_PROCESS"}]
    boolean DesktopInteract;

        [read,
        PropertySources("DisplayName"),
        Description("The DisplayName property indicates the display name of the service. This "
        "string has a maximum length of 256 characters. The name is case-preserved in the Service "
        "Control Manager. DisplayName comparisons are always case-insensitive. \nConstraints: "
        "Accepts the same value as the Name property.\nExample: Atdisk."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDisplayName"}]
    string DisplayName;

        [read,
        PropertySources("ErrorControl"),
        Description("If this service fails to start during startup, the ErrorControl property "
        "specifies the severity of the error. The value indicates the action taken by the startup "
        "program if failure occurs. All errors are logged by the computer system. The computer "
        "system does not notify the user of \"Ignore\" errors. With \"Normal\" errorsthe user is "
        "notified. With \"Severe\" errors, the system is restarted with the last-known-good "
        "configuration. Finally, on\"Critical\" errors the system attempts to restart with a good "
        "configuration."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwErrorControl"},
        Values{"Ignore", "Normal", "Severe", "Critical", "Unknown"},
        ValueMap{"Ignore", "Normal", "Severe", "Critical", "Unknown"}]
    string ErrorControl;

        [read,
        PropertySources("PathName"),
        Description("The PathName property contains the fully qualified path to the service "
        "binary file that implements the service.\nExample: "
        "\\SystemRoot\\System32\\drivers\\afd.sys"),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpBinaryPathName"}]
    string PathName;

        [read,
        PropertySources("ServiceType"),
        Description("The ServiceType property supplies the type of service provided to calling "
        "processes."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwServiceType"},
        Values{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
        "Process", "Share Process", "Interactive Process"},
        ValueMap{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
        "Process", "Share Process", "Interactive Process"}]
    string ServiceType;

        [read,
        PropertySources("StartName"),
        Description("The StartName property indicates the account name under which the service "
        "runs. Depending on the service type, the account name may be in the form of "
        "\"DomainName\\Username\".The service process will be logged using one of these two forms "
        "when it runs. If the account belongs to the built-in domain, \".\\Username\" can be "
        "specified. If NULL is specified, the service will be logged on as the LocalSystem "
        "account. For kernel or system level drivers, StartName contains the driver object name "
        "(that is, \\FileSystem\\Rdr or \\Driver\\Xns) which the input and output (I/O) system "
        "uses to load the device driver. Additionally, if NULL is specified, the driver runs with "
        "a default object name created by the I/O system based on the service name.\nExample: "
        "DWDOM\\Admin."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpServiceStartName"}]
    string StartName;

        [read,
        PropertySources("State"),
        Description("The State property indicates the current state of the base service."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwCurrentState "},
        Values{"Stopped", "Start Pending", "Stop Pending", "Running", "Continue Pending", "Pause "
        "Pending", "Paused", "Unknown"},
        ValueMap{"Stopped", "Start Pending", "Stop Pending", "Running", "Continue Pending",
        "Pause Pending", "Paused", "Unknown"}]
    string State;

        [read,
        PropertySources("TagId"),
        Description("The TagId property specifies a unique tag value for this service in the "
        "group. A value of 0 indicates that the service has not been assigned a tag. A tag can be "
        "used for ordering service startup within a load order group by specifying a tag order "
        "vector in the registry located at: "
        "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\GroupOrderList. Tags are only "
        "evaluated for Kernel Driver and File System Driver start type services that have \"Boot\" "
        "or \"System\" start modes."),
        MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwTagId"}]
    uint32 TagId;

        [read,
        PropertySources("ExitCode"),
        Description("The ExitCode property specifies a Win32 error code defining any problems "
        "encountered in starting or stopping the service. This property is set to "
        "ERROR_SERVICE_SPECIFIC_ERROR (1066) when the error is unique to the service represented "
        "by this class, and information about the error is available in the "
        "ServiceSpecificExitCode member. The service sets this value to NO_ERROR when running, and "
        "again upon normal termination."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwWin32ExitCode"}]
    uint32 ExitCode;

        [read,
        PropertySources("ServiceSpecificExitCode"),
        Description("The ServiceSpecificExitCode property specifies a service-specific error code "
        "for errors that occur while the service is either starting or stopping. The exit codes "
        "are defined by the service represented by this class. This value is only set when the "
        "ExitCodeproperty value is ERROR_SERVICE_SPECIFIC_ERROR, 1066."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwServiceSpecificExitCode"}]
    uint32 ServiceSpecificExitCode;

        [Description("The StartService method attempts to place the service into its startup "
        "state. It returns one of the following integer values:\n0 - The request was accepted.\n1 "
        "- The request is not supported.\n2 - The user did not have the necessary access.\n3 - The "
        "service cannot be stopped because other services that are running are dependent on it.\n4 "
        "- The requested control code is not valid, or it is unacceptable to the service.\n5 - The "
        "requested control code cannot be sent to the service because the state of the service "
        "(Win32_BaseService:State) is equal to 0, 1, or 2.\n6 - The service has not been "
        "started.\n7 - The service did not respond to the start request in a timely fashion.\n8 - "
        "Unknown failure when starting the service.\n9 - The directory path to the service "
        "executable was not found.\n10 - The service is already running.\n11 - The database to add "
        "a new service is locked.\n12 - A dependency for which this service relies on has been "
        "removed from the system.\n13 - The service failed to find the service needed from a "
        "dependent service.\n14 - The service has been disabled from the system.\n15 - The service "
        "does not have the correct authentication to run on the system.\n16 - This service is "
        "being removed from the system.\n17 - There is no execution thread for the service.\n18 - "
        "There are circular dependencies when starting the service.\n19 - There is a service "
        "running under the same name.\n20 - There are invalid characters in the name of the "
        "service.\n21 - Invalid parameters have been passed to the service.\n22 - The account "
        "which this service is to run under is either invalid or lacks the permissions to run the "
        "service.\n23 - The service exists in the database of services available from the "
        "system.\n24 - The service is currently paused in the system.\n"),
        MethodSource("StartService"),
        Override("StartService"),
        Implemented,
        Values{"Success", "Not Supported", "Access Denied", "Dependent Services Running",
        "Invalid Service Control", "Service Cannot Accept Control", "Service Not Active",
        "Service Request Timeout", "Unknown Failure", "Path Not Found", "Service Already "
        "Running", "Service Database Locked", "Service Dependency Deleted", "Service Dependency "
        "Failure", "Service Disabled", "Service Logon Failed", "Service Marked For Deletion",
        "Service No Thread", "Status Circular Dependency", "Status Duplicate Name", "Status "
        "Invalid Name", "Status Invalid Parameter", "Status Invalid Service Account", "Status "
        "Service Exists", "Service Already Paused"},
        MappingStrings{"Win32API|Service Functions|StartService"}]
    uint32 StartService();

        [Description("The StopService method places the service in the stopped state. It returns "
        "an integer value of 0 if the service was successfully stopped, 1 if the request is not "
        "supported, and any other number to indicate an error."),
        MethodSource("StopService"),
        Override("StopService"),
        Implemented,
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_STOP"}]
    uint32 StopService();

        [MethodSource("PauseService"),
        Implemented,
        Description("The PauseService method attempts to place the service in the paused state. "
        "It returns an integer value of 0 if the PauseService request was accepted, 1 if the "
        "request is not supported, and any other number to indicate an error."),
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_PAUSE"}]
    uint32 PauseService();

        [MethodSource("ResumeService"),
        Implemented,
        Description("The ResumeService method attempts to place the service in the resumed state. "
        "It returns an integer value of 0 if the ResumeService request was accepted, 1 if the "
        "request is not supported, and any other number to indicate an error."),
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_CONTINUE"}]
    uint32 ResumeService();

        [MethodSource("InterrogateService"),
        Implemented,
        Description("The InterrogateService method requests that the service update its state to "
        "the service manager. It returns an integer value of 0 if the InterrogateService request "
        "was accepted, 1 if the request is not supported, and any other number to indicate an "
        "error."),
        MappingStrings{"Win32API|Service "
        "Functions|ControlService|dwControl|SERVICE_CONTROL_INTERROGATE"}]
    uint32 InterrogateService();

        [MethodSource("UserControlService"),
        Implemented,
        Description("The UserControlService method attempts to send a user-defined control code "
        "to a service. It returns an integer value of 0 if the UserControlService request was "
        "accepted, 1 if the request is not supported, and any other number to indicate an "
        "error."),
        MappingStrings{"Win32API|Service "
        "Functions|CreateService|dwDesiredAccess|SERVICE_USER_DEFINED_CONTROL"}]
    uint32 UserControlService(

            [In,
            Description("The ControlCode parameter specifies defined values(from 128 to 255) that "
            "provide control commands specific to a user."),
            MappingStrings{"Win32API|Service Functions|ControlService|dwControl"}]
        uint8 ControlCode

    );

        [MethodSource("Create"),
        Constructor,
        Implemented,
        Static,
        Description("The Create method creates a new service. It returns an integer value of 0 if "
        "the service was successfully created, 1 if the request is not supported, and any other "
        "number to indicate an error. The Win32_LoadOrderGroup parameter represents a grouping of "
        "system services defining execution dependencies. The services must be initiated in the "
        "order specified by the Load Order Group, as the services are dependent on each other. "
        "These dependent services require the presence of the antecedent services in order to "
        "function correctly."),
        MappingStrings{"Win32API|Service Functions|CreateService"}]
    uint32 Create(

            [In,
            Description("The Name parameter passes the name of the service to install to the Create "
            "method. The maximum string length is 256 characters. The service control manager database "
            "preserves the case of the characters, but service name comparisons are always case "
            "insensitive. Forward-slashes (/) and double back-slashes (\\) are invalid service name "
            "characters."),
            MappingStrings{"Win32API|Service Functions|CreateServicelpServiceName"}]
        string Name,

            [In,
            Description("The DisplayName parameter passes the display name of the service. This "
            "string has a maximum length of 256 characters. The name is case-preserved in the service "
            "control manager. DisplayName comparisons are always case-insensitive. \nConstraints: "
            "Accepts the same value as the Name parameter.\nExample: Atdisk."),
            MappingStrings{"Win32API|Service Functions|CreateServicelpDisplayName"}]
        string DisplayName,

            [In,
            Description("The PathName parameter passes the fully qualified path to the executable "
            "file that implements the service.\nExample: \\SystemRoot\\System32\\drivers\\afd.sys"),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpBinaryPathName "}]
        string PathName,

            [In,
            Description("The ServiceType parameter passes the type of services provided to processes "
            "that call them."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwServiceType"},
            BitValues{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
            "Process", "Share Process"},
            BitMap{"0", "1", "2", "3", "4", "5", "8"}]
        uint8 ServiceType,

            [In,
            Description("If the Create method fails to start, the ErrorControl parameter passes the "
            "severity of the error. The value indicates the action taken by the startup program if "
            "failure occurs. All errors are logged by the system. The system does not notify the user "
            "of \"Ignore\" errors. With \"Normal\" errors the user is notified. With \"Severe\" "
            "errors, the system is restarted with the last-known-good configuration. Finally, on "
            "\"Critical\" errors, the system attempts to restart with a good configuration."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwErrorControl"},
            Values{"Ignore", "Normal", "Severe", "Critical"}]
        uint8 ErrorControl,

            [In,
            Description("The StartMode parameter passes the start mode of the Win32 base service. "
            "\"Boot\" specifies a device driver started by the operating system loader. This value is "
            "valid only for driver services. \"System\" specifies a device driver started by the "
            "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
            "specifies a service to be started automatically by the service control manager during "
            "system startup. \"Manual\" specifies a service to be started by the service control "
            "manager when a process calls the StartService function. \"Disabled\" specifies a service "
            "that can no longer be started."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwStartType"},
            Values{"Boot Start", "System Start", "Auto Start", "Demand Start", "Disabled"},
            ValueMap{"Boot", "System", "Automatic", "Manual", "Disabled"}]
        string StartMode,

            [In,
            Description("The DesktopInteract parameter passes the value that indicates whether the "
            "service can create or communicate with windows on the desktop.\nValues: TRUE or FALSE. A "
            "value of TRUE indicates the service can create or communicate with windows on the "
            "desktop."),
            MappingStrings{"Win32API|Service "
            "Structures|QUERY_SERVICE_CONFIG|dwServiceType|SERVICE_INTERACTIVE_PROCESS"}]
        boolean DesktopInteract,

            [In,
            Description("The StartName parameter passes the account name the service runs under. "
            "Depending on the service type, the account name may be in the form of "
            "\"DomainName\\Username\".The service process will be logged using one of these two forms "
            "when it runs.  If the account belongs to the built-in domain, \".\\Username\" can be "
            "specified. If NULL is specified, the service will be logged on as the LocalSystem "
            "account. For a kernel or system-level drivers, StartName contains the driver object name "
            "(that is, \\FileSystem\\Rdr or \\Driver\\Xns) which the input and output (I/O) system "
            "uses to load the device driver. If NULL is specified, the driver runs with a default "
            "object name created by the I/O system based on the service name.\nExample: "
            "DWDOM\\Admin."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpServiceStartName"}]
        string StartName,

            [In,
            Description("The StartPassword parameter passes the password to the account name "
            "specified by the StartName parameter. Specify NULL if you are not changing the password. "
            "Specify an empty string if the service has no password."),
            MappingStrings{"Win32API|Service Functions|CreateService|lpPassword"}]
        string StartPassword,

            [In,
            Description("The LoadOrderGroup parameter passes the group name associated with the new "
            "service. Load order groups are contained in the registry, and determine the sequence in "
            "which services are loaded into the operating system. If the pointer is NULL or if it "
            "points to an empty string, the service does not belong to a group. Dependencies between "
            "groups should be listed in the LoadOrderGroupDependencies parameter. Services in the "
            "load-ordering group list are started first, followed by services in groups not in the "
            "load-ordering group list, followed by services that do not belong to a group. The "
            "registry has a list of load ordering groups located "
            "at:\nHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\ServiceGroupOrder."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpLoadOrderGroup"}]
        string LoadOrderGroup,

            [In,
            Description("The LoadOrderGroupDependencies parameter passes a list of load ordering "
            "groups that must start before this service. The array is doubly null-terminated. If the "
            "pointer is NULL or if it points to an empty string, the service has no dependencies.  "
            "Group names must be prefixed by the SC_GROUP_IDENTIFIER (defined in the WINSVC.H file) "
            "character to differentiate it from a service name, because services and service groups "
            "share the same name space.  Dependency on a group means that this service can run if at "
            "least one member of the group is running after an attempt to start all members of the "
            "group."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string LoadOrderGroupDependencies[],

            [In,
            Description("The ServiceDependencies parameter passes a list containing names of services "
            "that must start before this service starts. The array is doubly null-terminated. If the "
            "pointer is NULL, or if it points to an empty string, the service has no dependencies. "
            "Dependency on a service means that this service can only run if the service it depends on "
            "is running."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string ServiceDependencies[]

    );

        [MethodSource("Change"),
        Implemented,
        Description("The Change method modifies a service. It returns an integer value of 0 if "
        "the service was successfully modified, 1 if the request is not supported and any other "
        "number to indicate an error.  The Win32_LoadOrderGroup parameter represents a grouping of "
        "system services defining execution dependencies. The services must be initiated in the "
        "order specified by the Load Order Group as the services are dependent on each other. "
        "These dependent services require the presence of the antecedent services in order to "
        "function correctly."),
        MappingStrings{"Win32API|Service Functions|ChangeServiceConfig"}]
    uint32 Change(

            [In,
            Description("The DisplayName parameter passes the display name of the service.  This "
            "string has a maximum length of 256 characters. The name is case-preserved in the service "
            "control manager. DisplayName comparisons are always case-insensitive. \nConstraints: "
            "Accepts the same value as the Name parameter.\nExample: Atdisk"),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDisplayName"}]
        string DisplayName,

            [In,
            Description("The PathName parameter passes the fully qualified path of the service binary "
            "file that implements the service.\nExample: \\SystemRoot\\System32\\drivers\\afd.sys"),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpBinaryPathName"}]
        string PathName,

            [In,
            Description("The ServiceType parameter passes the type of service provided to processes "
            "calling the service."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwServiceType"},
            BitValues{"Kernel Driver", "File System Driver", "Adapter", "Recognizer Driver", "Own "
            "Process", "Share Process"},
            BitMap{"0", "1", "2", "3", "4", "5", "8"}]
        uint8 ServiceType,

            [In,
            Description("If this service fails to start during startup, the ErrorControl parameter "
            "passes the severity of the error. The value indicates the action taken by the startup "
            "program if failure occurs. All errors are logged by the system. The system does not "
            "notify the user of \"Ignore\" errors. With \"Normal\" errors the user is notified. With "
            "\"Severe\" errors, the system is restarted with the last-known-good configuration. "
            "Finally, on \"Critical\" errors, the system attempts to restart with a good "
            "configuration."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwErrorControl"},
            Values{"Ignore", "Normal", "Severe", "Critical"}]
        uint8 ErrorControl,

            [In,
            Description("The StartMode property indicates the start mode of the Win32 base service. "
            "\"Boot\" specifies a device driver started by the operating system loader. This value is "
            "valid only for driver services. \"System\" specifies a device driver started by the "
            "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
            "specifies a service to be started automatically by the service control manager during "
            "system startup. \"Manual\" specifies a service to be started by the service control "
            "manager when a process calls the StartService function. \"Disabled\" specifies a service "
            "that can no longer be started."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwStartType"},
            Values{"Boot Start", "System Start", "Auto Start", "Demand Start", "Disabled"},
            ValueMap{"Boot", "System", "Automatic", "Manual", "Disabled"}]
        string StartMode,

            [In,
            Description("The DesktopInteract parameter passes the value that indicates whether the "
            "service can create or communicate with windows on the desktop.\nValues: TRUE or FALSE. A "
            "value of TRUE indicates the service can create or communicate with windows on the "
            "desktop."),
            MappingStrings{"Win32API|Service "
            "Structures|QUERY_SERVICE_CONFIG|dwServiceType|SERVICE_INTERACTIVE_PROCESS"}]
        boolean DesktopInteract,

            [In,
            Description("The StartName property indicates the account name the service runs under. "
            "Depending on the service type, the account name may be in the form of "
            "\"DomainName\\Username\", The service process will be logged using one of these two forms "
            "when it runs. If the account belongs to the built-in domain, \".\\Username\" can be "
            "specified. If NULL is specified, the service will be logged on as the LocalSystem "
            "account. For kernel or system-level drivers, StartName contains the driver object name "
            "(that is, \\FileSystem\\Rdr or \\Driver\\Xns) that the input and output (I/O) system uses "
            "to load the device driver. If NULL is specified, the driver runs with a default object "
            "name created by the I/O system based on the service name.\nExample: DWDOM\\Admin."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpServiceStartName"}]
        string StartName,

            [In,
            Description("The StartPassword parameter passes the password to the account name "
            "specified by the StartName parameter. Specify NULL if you are not changing the password. "
            "Specify an empty string if the service has no password."),
            MappingStrings{"Win32API|Service Functions|CreateService|lpPassword"}]
        string StartPassword,

            [In,
            Description("The LoadOrderGroup parameter passes the group name that it is associated "
            "with. Load order groups are contained in the system registry, and determine the sequence "
            "in which services are loaded into the operating system. If the pointer is NULL, or if it "
            "points to an empty string, the service does not belong to a group. Dependencies between "
            "groups should be listed in the LoadOrderGroupDependencies parameter. Services in the "
            "load-ordering group list are started first, followed by services in groups not in the "
            "load-ordering group list, followed by services that do not belong to a group. The system "
            "registry has a list of load ordering groups located "
            "at:\nHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\ServiceGroupOrder."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpLoadOrderGroup"}]
        string LoadOrderGroup,

            [In,
            Description("The LoadOrderGroupDependencies parameter passes a list of load ordering "
            "groups that must start before this service starts. The array is doubly null-terminated. "
            "If the pointer is NULL, or if it points to an empty string, the service has no "
            "dependencies. Group names must be prefixed by the SC_GROUP_IDENTIFIER (defined in the "
            "WINSVC.H file) character to differentiate them from service names because services and "
            "service groups share the same name space. Dependency on a group means that this service "
            "can run if at least one member of the group is running after an attempt to start all "
            "members of the group."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string LoadOrderGroupDependencies[],

            [In,
            Description("The ServiceDependencies parameter passes a list containing names of services "
            "that must start before this service starts. The array is doubly null-terminated. If the "
            "pointer is NULL, or if it points to an empty string, the service has no dependencies. "
            "Dependency on a service means that this service can run only if the service it depends on "
            "is running."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|lpDependencies"}]
        string ServiceDependencies[]

    );

        [MethodSource("ChangeStartMode"),
        Implemented,
        Description("The ChangeStartMode method modifies the StartMode of a service. It returns "
        "an integer value of 0 if the service was successfully modified, 1 if the request is not "
        "supported, and any other number to indicate an error."),
        MappingStrings{"Service Functions|ChangeServiceConfig|dwStartType"}]
    uint32 ChangeStartMode(

            [In,
            Description("The StartMode parameter passes the start mode of the Win32 base service. "
            "\"Boot\" specifies a device driver started by the operating system loader. This value is "
            "valid only for driver services. \"System\" specifies a device driver started by the "
            "IoInitSystem function. This value is valid only for driver services. \"Automatic\" "
            "specifies a service to be started automatically by the service control manager during "
            "system startup. \"Manual\" specifies a service to be started by the service control "
            "manager when a process calls the StartService function. \"Disabled\" specifies a service "
            "that can no longer be started."),
            MappingStrings{"Win32API|Service Structures|QUERY_SERVICE_CONFIG|dwStartType"},
            Values{"Boot Start", "System Start", "Auto Start", "Demand Start", "Disabled"},
            ValueMap{"Boot", "System", "Automatic", "Manual", "Disabled"}]
        string StartMode = "Automatic"

    );

        [MethodSource("Delete"),
        Destructor,
        Implemented,
        Description("The Delete method deletes an existing service. It returns an integer value "
        "of 0 if the service was successfully deleted, 1 if the request is not supported, and any "
        "other number to indicate an error."),
        MappingStrings{"Win32API|Service Functions|ChangeServiceConfig|DeleteService"}]
    uint32 Delete();

};

        [Description("The Win32_Service class represents a service on a Win32 computer system. A "
        "service application conforms to the interface rules of the Service Control Manager (SCM) "
        "and can be started by a user automatically at system boot through the Services control "
        "panel utility, or by an application that uses the service functions included in the Win32 "
        "API. Services can execute even when no user is logged on to the system."),
        union,
        ViewSources{"Select * from Win32_Service"},
        ViewSpaces{"\\\\.\\root\\cimv2"},
        provider("MS_VIEW_INSTANCE_PROVIDER"),
        dynamic,
        Locale(1033),
        UUID("{8502C4D9-5FBB-11D2-AAC1-006008C78BC7}")]
class Win32_Service : Win32_BaseService
{
        [read,
        PropertySources("CheckPoint"),
        Description("The CheckPoint property specifies a value that the service increments "
        "periodically to report its progress during a lengthy start, stop, pause, or continue "
        "operation. For example, the service should increment this value as it completes each step "
        "of its initialization when it is starting up. The user interface program that invoked the "
        "operation on the service uses this value to track the progress of the service during a "
        "lengthy operation. This value is not valid and should be zero when the service does not "
        "have a start, stop, pause, or continue operation pending."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwCheckPoint"}]
    uint32 CheckPoint;

        [read,
        PropertySources("WaitHint"),
        Description("The WaitHint property specifies the estimated time required (in "
        "milliseconds) for a pending start, stop, pause, or continue operation. After the "
        "specified amount of time has elapsed, the service makes its next call to the "
        "SetServiceStatus function with either an incremented CheckPoint value or a change in "
        "CurrentState. If the amount of time specified by WaitHint passes, and CheckPoint has not "
        "been incremented, or the CurrentState has not changed, the service control manager or "
        "service control program assumes that an error has occurred."),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS|dwWaitHint"}]
    uint32 WaitHint;

        [read,
        PropertySources("ProcessId"),
        Description("The ProcessId property specifies the process identifier of the "
        "service.\nExample: 324"),
        MappingStrings{"Win32API|Service Structures|SERVICE_STATUS_PROCESS|dwProcessId"}]
    uint32 ProcessId;

};

    [Abstract, Locale ( 0x409 ) , UUID ( "{120BB700-DB2B-11d2-85FC-0000F8102E5F}" ),
    Description(" The CIM_ApplicationSystem class is used to represent an  application "
        "or a software system that supports a particular  business function "
        "and that can be managed as an independent  units. Such a system "
        "can be decomposed into its functional  components using the CIM_SoftwareFeature "
        "class. The software  features for a particular application or "
        "software system are  located using the CIM_ApplicationSystemSoftwareFeature "
        " association.  ")]
class CIM_ApplicationSystem: CIM_System
{
};

        [Abstract,
        Association,
        Locale(1033),
        UUID("{8502C577-5FBB-11D2-AAC1-006008C78BC7}"),
        Description (
        "ElementSetting represents the association between Managed"
        "SystemElements and the Setting class(es) defined for them.") ]
class CIM_ElementSetting
{
        [read,
        Description("The Element reference represents the role of the CIM_ManagedSystemElement "
        "object of the CIM_ElementSetting association. Role: The associated managed system element "
        "provides the element that implements the element setting.")]
    CIM_ManagedSystemElement ref Element;

        [read,
        Description("The CIM_Setting reference represents the role of the CIM_Setting object of "
        "the CIM_ElementSetting association. Role: The associated setting provides the setting "
        "that implements the element setting.")]
    CIM_Setting ref Setting;

};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer : CIM_ApplicationSystem
{
  [key] string Name;
  [Implemented,Locale(1033)] void Backup([IN] string BackupLocation,[IN] sint32 BackupVersion,[IN] sint32 BackupFlags);
  [Implemented,Locale(1033)] void DeleteBackup([IN] string BackupLocation,[IN] sint32 BackupVersion);
  [Implemented,Locale(1033)] void EnumBackups([IN,OUT] string BackupLocation,[IN] sint32 IndexIn,[OUT] sint32 BackupVersionOut,[OUT] datetime BackupDateTimeOut);
  [Implemented,Locale(1033)] void Restore([IN] string BackupLocation,[IN] sint32 BackupVersion,[IN] sint32 BackupFlags);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_ComputerSetting : CIM_Setting
{
  sint32 MaxBandwidth;
  sint32 MaxBandwidthBlocked;
  string MimeMap[];
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpService : Win32_Service
{
  [Implemented,Locale(1033)] IIs_FtpServer ref CreateNewServer([OPTIONAL, IN] string ServerNumber,[IN] string ServerComment,[IN] string ServerBindings[],[IN] string PathOfRootVitualDir);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpCommonSetting : CIM_Setting
{
  sint32 AccessFlags;
  boolean AccessRead;
  boolean AccessWrite;
  boolean DontLog;
  boolean FtpDirBrowseShowLongDate;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServerCommonSetting : IIs_FtpCommonSetting
{
  boolean AllowAnonymous;
  boolean AnonymousOnly;
  boolean AnonymousPasswordSync;
  string AnonymousUserName;
  string AnonymousUserPass;
  sint32 ConnectionTimeout;
  string DefaultLogonDomain;
  boolean DisableSocketPooling;
  string ExitMessage;
  string GreetingMessage[];
  boolean LogAnonymous;
  boolean LogExtFileBytesRecv;
  boolean LogExtFileBytesSent;
  boolean LogExtFileClientIp;
  boolean LogExtFileComputerName;
  boolean LogExtFileCookie;
  boolean LogExtFileDate;
  sint32 LogExtFileFlags;
  boolean LogExtFileHttpStatus;
  boolean LogExtFileMethod;
  boolean LogExtFileProtocolVersion;
  boolean LogExtFileReferer;
  boolean LogExtFileServerIp;
  boolean LogExtFileServerPort;
  boolean LogExtFileSiteName;
  boolean LogExtFileTime;
  boolean LogExtFileTimeTaken;
  boolean LogExtFileUriQuery;
  boolean LogExtFileUriStem;
  boolean LogExtFileUserAgent;
  boolean LogExtFileUserName;
  boolean LogExtFileWin32Status;
  string LogFileDirectory;
  boolean LogFileLocaltimeRollover;
  sint32 LogFilePeriod;
  sint32 LogFileTruncateSize;
  boolean LogNonAnonymous;
  string LogOdbcDataSource;
  string LogOdbcPassword;
  string LogOdbcTableName;
  string LogOdbcUserName;
  string LogPluginClsId;
  sint32 LogType;
  string MaxClientsMessage;
  sint32 MaxConnections;
  sint32 MaxEndpointConnections;
  boolean MSDOSDirOutput;
  string Realm;
  boolean ServerAutoStart;
  string ServerBindings[];
  string ServerComment;
  sint32 ServerListenBacklog;
  sint32 ServerListenTimeout;
  sint32 ServerSize;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServiceSetting : IIs_FtpServerCommonSetting
{
  sint32 DirectoryLevelsToScan;
  string DownlevelAdminInstance;
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServer : CIM_LogicalElement
{
  [key] string Name;
  sint32 ServerState;
  [Implemented,Locale(1033)] void Start();
  [Implemented,Locale(1033)] void Stop();
  [Implemented,Locale(1033)] void Pause();
  [Implemented,Locale(1033)] void Continue();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServerSetting : IIs_FtpServerCommonSetting
{
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService : Win32_Service
{
  string AdminServer;
  sint32 AppIsolated;
  string AppPackageName;
  string AppWamClsID;
  [Implemented,Locale(1033)] IIs_WebServer ref CreateNewServer([OPTIONAL, IN] string ServerNumber,[IN] string ServerComment,[IN] string ServerBindings[],[IN] string PathOfRootVitualDir);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebCommonSetting : CIM_Setting
{
  boolean AccessExecute;
  sint32 AccessFlags;
  boolean AccessNoRemoteExecute;
  boolean AccessNoRemoteRead;
  boolean AccessNoRemoteScript;
  boolean AccessNoRemoteWrite;
  boolean AccessRead;
  boolean AccessScript;
  boolean AccessSSL;
  boolean AccessSSL128;
  sint32 AccessSSLFlags;
  boolean AccessSSLMapCert;
  boolean AccessSSLNegotiateCert;
  boolean AccessSSLRequireCert;
  boolean AccessWrite;
  boolean AnonymousPasswordSync;
  string AnonymousUserName;
  string AnonymousUserPass;
  boolean AuthAnonymous;
  boolean AuthBasic;
  sint32 AuthFlags;
  boolean AuthNTLM;
  sint32 AuthPersistence;
  boolean AuthPersistSingleRequest;
  boolean AuthPersistSingleRequestAlwaysIfProxy;
  boolean AuthPersistSingleRequestIfProxy;
  string CacheControlCustom;
  sint32 CacheControlMaxAge;
  boolean CacheControlNoCache;
  sint32 CGITimeout;
  boolean CpuAppEnabled;
  boolean CpuCgiEnabled;
  boolean CreateCGIWithNewConsole;
  boolean CreateProcessAsUser;
  string DefaultDocFooter;
  string DefaultLogonDomain;
  boolean DontLog;
  boolean EnableDocFooter;
  boolean EnableReverseDns;
  string HttpCustomHeaders[];
  string HttpErrors[];
  string HttpExpires;
  string HttpPics[];
  string HttpRedirect;
  sint32 LogonMethod;
  string MimeMap[];
  sint32 PoolIDCTimeout;
  sint32 PutReadSize;
  string Realm;
  string Redirectheaders;
  string ScriptMaps[];
  boolean SSIExecDisable;
  boolean UNCAuthenticationPassthrough;
  sint32 UploadReadAheadSize;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirCommonSetting : IIs_WebCommonSetting
{
  boolean AppAllowClientDebug;
  boolean AppAllowDebugging;
  string AppFriendlyName;
  string AppPackageID;
  string AppRoot;
  boolean AspAllowOutOfProcComponents;
  boolean AspAllowSessionState;
  boolean AspBufferingOn;
  sint32 AspCodepage;
  boolean AspEnableApplicationRestart;
  boolean AspEnableAspHtmlFallback;
  boolean AspEnableChunkedEncoding;
  boolean AspEnableParentPaths;
  boolean AspEnableTypelibCache;
  boolean AspErrorsToNTLog;
  boolean AspExceptionCatchEnable;
  boolean AspLogErrorRequests;
  sint32 AspProcessorThreadMax;
  sint32 AspQueueConnectionTestTime;
  sint32 AspQueueTimeout;
  sint32 AspRequestQueueMax;
  sint32 AspScriptEngineCacheMax;
  string AspScriptErrorMessage;
  boolean AspScriptErrorSentToBrowser;
  sint32 AspScriptFileCacheSize;
  string AspScriptLanguage;
  sint32 AspScriptTimeout;
  sint32 AspSessionMax;
  sint32 AspSessionTimeout;
  boolean AspThreadGateEnabled;
  sint32 AspThreadGateLoadHigh;
  sint32 AspThreadGateLoadLow;
  sint32 AspThreadGateSleepDelay;
  sint32 AspThreadGateSleepMax;
  sint32 AspThreadGateTimeSlice;
  boolean AspTrackThreadingModel;
  boolean CacheISAPI;
  boolean ContentIndexed;
  string DefaultDoc;
  sint32 DirBrowseFlags;
  boolean DirBrowseShowDate;
  boolean DirBrowseShowExtension;
  boolean DirBrowseShowLongDate;
  boolean DirBrowseShowSize;
  boolean DirBrowseShowTime;
  boolean EnableDefaultDoc;
  boolean EnableDirBrowsing;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServerCommonSetting : IIs_WebDirCommonSetting
{
  boolean AccessSource;
  boolean AllowKeepAlive;
  boolean AllowPathInfoForScriptMappings;
  sint32 ConnectionTimeout;
  boolean CpuEnableActiveProcs;
  boolean CpuEnableAllProcLogging;
  boolean CpuEnableApplicationLogging;
  boolean CpuEnableCgiLogging;
  boolean CpuEnableEvent;
  boolean CpuEnableKernelTime;
  boolean CpuEnableLogging;
  boolean CpuEnablePageFaults;
  boolean CpuEnableProcType;
  boolean CpuEnableTerminatedProcs;
  boolean CpuEnableTotalProcs;
  boolean CpuEnableUserTime;
  sint32 CpuLimitLogEvent;
  sint32 CpuLimitPause;
  sint32 CpuLimitPriority;
  sint32 CpuLimitProcStop;
  boolean CpuLimitsEnabled;
  sint32 CpuLoggingInterval;
  sint32 CpuLoggingMask;
  sint32 CpuLoggingOptions;
  sint32 CpuResetInterval;
  boolean DisableSocketPooling;
  boolean LogExtFileBytesRecv;
  boolean LogExtFileBytesSent;
  boolean LogExtFileClientIp;
  boolean LogExtFileComputerName;
  boolean LogExtFileCookie;
  boolean LogExtFileDate;
  sint32 LogExtFileFlags;
  boolean LogExtFileHttpStatus;
  boolean LogExtFileMethod;
  boolean LogExtFileProtocolVersion;
  boolean LogExtFileReferer;
  boolean LogExtFileServerIp;
  boolean LogExtFileServerPort;
  boolean LogExtFileSiteName;
  boolean LogExtFileTime;
  boolean LogExtFileTimeTaken;
  boolean LogExtFileUriQuery;
  boolean LogExtFileUriStem;
  boolean LogExtFileUserAgent;
  boolean LogExtFileUserName;
  boolean LogExtFileWin32Status;
  string LogFileDirectory;
  boolean LogFileLocaltimeRollover;
  sint32 LogFilePeriod;
  sint32 LogFileTruncateSize;
  string LogOdbcDataSource;
  string LogOdbcPassword;
  string LogOdbcTableName;
  string LogOdbcUserName;
  string LogPluginClsId;
  sint32 LogType;
  sint32 MaxConnections;
  sint32 MaxEndpointConnections;
  sint32 NetLogonWorkstation;
  string NTAuthenticationProviders;
  sint32 PasswordCacheTTL;
  sint32 PasswordChangeFlags;
  sint32 PasswordExpirePrenotifyDays;
  boolean ProcessNTCRIfLoggedOn;
  boolean ServerAutoStart;
  string ServerBindings[];
  string ServerComment;
  sint32 ServerListenBacklog;
  sint32 ServerListenTimeout;
  sint32 ServerSize;
  boolean UseHostName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServiceSetting : IIs_WebServerCommonSetting
{
  string InProcessIsapiApps[];
  [key] string Name;
  string WAMUserName;
  string WAMUserPass;
  sint32 DirectoryLevelsToScan;
  string DownlevelAdminInstance;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer : CIM_LogicalElement
{
  [key] string Name;
  sint32 ServerState;
  sint32 AppIsolated;
  string AppPackageName;
  string AppWamClsID;
  [Implemented,Locale(1033)] void Start();
  [Implemented,Locale(1033)] void Stop();
  [Implemented,Locale(1033)] void Pause();
  [Implemented,Locale(1033)] void Continue();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServerSetting : IIs_WebServerCommonSetting
{
  sint32 AppOopRecoverLimit;
  sint32 MaxBandwidth;
  sint32 MaxBandwidthBlocked;
  boolean NotDeletable;
  string SecureBindings[];
  string ServerID;
  [key] string Name;
};

[Abstract,Locale(1033)] 
class IIs_Directory : CIM_LogicalElement
{
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDir : IIs_Directory
{
  sint32 AppIsolated;
  string AppPackageName;
  string AppWamClsID;
  boolean AppEnabled;
  uint32 AppStatus;
  [Implemented,Locale(1033)] void AppCreate([IN] boolean InProcFlag);
  [Implemented,Locale(1033)] void AppCreate2([IN] sint32 AppMode);
  [Implemented,Locale(1033)] void AppDelete([IN] boolean Recursive);
  [Implemented,Locale(1033)] void AppUnLoad([IN] boolean Recursive);
  [Implemented,Locale(1033)] void AppEnable([IN] boolean Recursive);
  [Implemented,Locale(1033)] void AppDisable([IN] boolean Recursive);
  [Implemented,Locale(1033)] uint32 AppGetStatus();
  [Implemented,Locale(1033)] void AspAppRestart();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDirSetting : IIs_WebDirCommonSetting
{
  boolean AccessSource;
  sint32 AppOopRecoverLimit;
  string Path;
  [key] string Name;
  string UNCPassword;
  string UNCUserName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectory : IIs_Directory
{
  sint32 AppIsolated;
  string AppPackageName;
  string AppWamClsID;
  boolean AppEnabled;
  uint32 AppStatus;
  [Implemented,Locale(1033)] void AppCreate([IN] boolean InProcFlag);
  [Implemented,Locale(1033)] void AppCreate2([IN] sint32 AppMode);
  [Implemented,Locale(1033)] void AppDelete([IN] boolean Recursive);
  [Implemented,Locale(1033)] void AppUnLoad([IN] boolean Recursive);
  [Implemented,Locale(1033)] void AppEnable([IN] boolean Recursive);
  [Implemented,Locale(1033)] void AppDisable([IN] boolean Recursive);
  [Implemented,Locale(1033)] uint32 AppGetStatus();
  [Implemented,Locale(1033)] void AspAppRestart();
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectorySetting : IIs_WebDirCommonSetting
{
  sint32 AppOopRecoverLimit;
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpVirtualDir : IIs_Directory
{
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpVirtualDirSetting : IIs_FtpCommonSetting
{
  string Path;
  [key] string Name;
  string UNCPassword;
  string UNCUserName;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebFile : IIs_Directory
{
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebFileSetting : IIs_WebCommonSetting
{
  boolean AccessSource;
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_AdminACL : CIM_LogicalElement
{
  [key] string Name;
  string Owner;
  string Group;
  sint32 ControlFlags;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_ACE : CIM_LogicalElement
{
  [key] string Name;
  [key] string Trustee;
  sint32 AccessMask;
  sint32 AceType;
  sint32 AceFlags;
  sint32 Flags;
  string ObjectType;
  string InheritedObjectType;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_AdminACL_ACE : CIM_Component
{
  [key,Override("GroupComponent"),Locale(1033)] IIs_AdminACL Ref GroupComponent;
  [key,Override("PartComponent"),Locale(1033)] IIs_ACE Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_CompressionSchemeSetting : CIM_Setting
{
  string HcCompressionDll;
  sint32 HcCreateFlags;
  boolean HcDoDynamicCompression;
  boolean HcDoOnDemandCompression;
  boolean HcDoStaticCompression;
  sint32 HcDynamicCompressionLevel;
  string HcFileExtensions[];
  string HcMimeType;
  sint32 HcOnDemandCompLevel;
  sint32 HcPriority;
  string HcScriptFileExtensions[];
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_CustomLogModuleSetting : CIM_Setting
{
  [key] string Name;
  sint32 LogCustomPropertyDataType;
  string LogCustomPropertyHeader;
  sint32 LogCustomPropertyID;
  sint32 LogCustomPropertyMask;
  string LogCustomPropertyName;
  string LogCustomPropertyServicesString[];
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebInfoSetting : CIM_Setting
{
  string CustomErrorDescriptions[];
  string LogModuleList;
  boolean ServerConfigAutoPWSync;
  sint32 ServerConfigFlags;
  boolean ServerConfigSSL128;
  boolean ServerConfigSSL40;
  boolean ServerConfigSSLAllowEncrypt;
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_CertMapper : CIM_LogicalElement
{
  [key] string Name;
  [Implemented,Locale(1033)] void CreateMapping([IN] string vCert,[IN] string NtAcct,[IN] string NtPwd,[IN] string strName,[IN] boolean IEnabled);
  [Implemented,Locale(1033)] void DeleteMapping([IN] sint32 IMethod,[IN] string vKey);
  [Implemented,Locale(1033)] void GetMapping([IN] sint32 IMethod,[IN] string vKey,[OUT] string vCert,[OUT] string NtAcct,[OUT] string NtPwd,[OUT] string strName,[OUT] boolean IEnabled);
  [Implemented,Locale(1033)] void SetAcct([IN] sint32 IMethod,[IN] string vKey,[IN] string NtAcct);
  [Implemented,Locale(1033)] void SetEnabled([IN] sint32 IMethod,[IN] string vKey,[IN] boolean IEnabled);
  [Implemented,Locale(1033)] void SetName([IN] sint32 IMethod,[IN] string vKey,[IN] string strName);
  [Implemented,Locale(1033)] void SetPwd([IN] sint32 IMethod,[IN] string vKey,[IN] string NtPwd);
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Filter : CIM_LogicalElement
{
  [key] string Name;
  string FilterDescription;
  boolean FilterEnabled;
  sint32 FilterFlags;
  string FilterPath;
  sint32 FilterState;
  boolean NotifyAuthentication;
  boolean NotifyEndOfNetSession;
  boolean NotifyEndOfRequest;
  boolean NotifyLog;
  boolean NotifyNonSecurePort;
  boolean NotifyOrderHigh;
  boolean NotifyOrderLow;
  boolean NotifyOrderMedium;
  boolean NotifyPreProcHeaders;
  boolean NotifyReadRawData;
  boolean NotifySecurePort;
  boolean NotifySendRawData;
  boolean NotifySendResponse;
  boolean NotifyUrlMap;
  boolean NotifyAccessDenied;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_MimeTypeSetting : CIM_Setting
{
  string MimeMap[];
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_LogModuleSetting : CIM_Setting
{
  [key] string Name;
  string LogModuleId;
  string LogModuleUiId;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_IPSecuritySetting : CIM_Setting
{
  [key] string Name;
  string IPDeny[];
  string IPGrant[];
  string DomainDeny[];
  string DomainGrant[];
  boolean GrantByDefault;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpInfoSetting : CIM_Setting
{
  string LogModuleList;
  [key] string Name;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer_ComputerSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_Computer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_ComputerSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer_FtpService : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_Computer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_FtpService Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer_WebService : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_Computer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebService Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer_MimeTypeSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_Computer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_MimeTypeSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer_LogModuleSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_Computer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_LogModuleSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_Computer_CustomLogModuleSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_Computer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_CustomLogModuleSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpService_FtpServer : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_FtpService Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_FtpServer Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpService_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_FtpService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpService_FtpInfoSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_FtpService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_FtpInfoSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpService_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_FtpService Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpService_FtpServiceSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_FtpService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_FtpServiceSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServer_FtpServerSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_FtpServer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_FtpServerSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServer_FtpVirtualDir : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_FtpServer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_FtpVirtualDir Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServer_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_FtpServer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpServer_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_FtpServer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_WebInfoSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_WebInfoSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_WebServiceSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_WebServiceSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_WebServer : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebService Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebServer Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_Filter : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebService Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_Filter Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_CompressionSchemeSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_CompressionSchemeSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebService Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebService_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebService Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer_WebServerSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebServer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_WebServerSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer_Filter : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebServer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_Filter Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer_CertMapper : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebServer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_CertMapper Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer_WebVirtualDir : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebServer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebServer Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebServer_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebServer Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDir_WebVirtualDirSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebVirtualDir Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_WebVirtualDirSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDir_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebVirtualDir Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDir_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualSubDir : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDir_File : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebFile Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebVirtualDir_WebDirectory : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebDirectory Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectory_WebDirectorySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebDirectory Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_WebDirectorySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectory_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebDirectory Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectory_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebDirectory Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebSubDirectory : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebDirectory Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebDirectory Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectory_WebVirtualDir : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebDirectory Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebVirtualDir Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebDirectory_File : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebDirectory Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_WebFile Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpVirtualDir_FtpVirtualDirSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_FtpVirtualDir Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_FtpVirtualDirSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_FtpVirtualSubDir : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_FtpVirtualDir Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_FtpVirtualDir Ref PartComponent;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebFile_WebFileSetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebFile Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_WebFileSetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebFile_IPSecuritySetting : CIM_ElementSetting
{
  [key,Override("Element"),Locale(1033)] IIs_WebFile Ref Element;
  [key,Override("Setting"),Locale(1033)] IIs_IPSecuritySetting Ref Setting;
};

[dynamic : ToInstance,provider("IIS__PROVIDER"),Locale(1033)] 
class IIs_WebFile_AdminACL : CIM_Component
{
  [key,Override("GroupComponent") : ToSubclass,Locale(1033)] IIs_WebFile Ref GroupComponent;
  [key,Override("PartComponent") : ToSubclass,Locale(1033)] IIs_AdminACL Ref PartComponent;
};
