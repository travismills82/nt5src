!IF 0

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.


Author:

    Mark Lucovsky (markl) 18-Sep-1990

NOTE:   Commented description of this file is in \nt\bak\bin\sources.tpl

!ENDIF

TARGETPATH=obj
TARGETNAME=
TARGETTYPE=LIBRARY

SYNCHRONIZE_BLOCK=1

PASS0_PUBLISH=\
    {acpitabl.h=$(PROJECT_INC_PATH)\acpitabl.h;$(HALKIT_INC_PATH)\acpitabl.h;$(PROCESSOR_INC_PATH)\acpitabl.h}\
    {ahcache.w=$(PROJECT_INC_PATH)\ahcache.h}\
    {alertmsg.w=$(BASE_INC_PATH)\alertmsg.h}\
    {apcompat.w=$(PROJECT_INC_PATH)\apcompat.h}\
    {apic.inc=$(HALKIT_INC_PATH)\apic.inc;$(PROCESSOR_INC_PATH)\apic.inc}\
    {apithunk.w=$(PROJECT_INC_PATH)\apithunk.tpl}\
    {apm.w=$(HALKIT_INC_PATH)\apm.h}\
    {arc.w=$(HALKIT_INC_PATH)\arc.h;$(PROJECT_INC_PATH)\arc.h}\
    {arccodes.w=$(HALKIT_INC_PATH)\arccodes.h;$(PROJECT_INC_PATH)\arccodes.h} \
    {atom.w=$(PROJECT_INC_PATH)\atom.h} \
    {avrf.w=$(PROJECT_INC_PATH)\avrf.h}\
    {basetsd.w=$(SDK_INC_PATH)\basetsd.h} \
    {basetsd_idl.w=$(SDK_INC_PATH)\basetsd.idl} \
    {batclass.w=$(SDK_INC_PATH)\batclass.h} \
    {bmbuild.w=$(PROJECT_INC_PATH)\bmbuild.h}\
    {bootstatus.w=$(PROJECT_INC_PATH)\bootstatus.h} \
    {bootvid.w=$(PROJECT_INC_PATH)\bootvid.h} \
    {bowdbg.w=$(PROJECT_INC_PATH)\bowdbg.h} \
    {cfg.w=$(SDK_INC_PATH)\cfg.h;$(DDK_INC_PATH)\cfg.h}\
    {cfgmgr32.w=$(SDK_INC_PATH)\cfgmgr32.h;$(DDK_INC_PATH)\cfgmgr32.h}\
    {clusapi.w=$(SDK_INC_PATH)\clusapi.h} \
    {clusdisk.w=$(PROJECT_INC_PATH)\clusdisk.h} \
    {clussprt.w=$(PROJECT_INC_PATH)\clussprt.h} \
    {clusstor.w=$(PROJECT_INC_PATH)\clusstor.h} \
    {clustdi.w=$(PROJECT_INC_PATH)\clustdi.h} \
    {common.w=$(SDK_INC_PATH)\common.ver} \
    {dbt.w=$(SDK_INC_PATH)\dbt.h}\
    {devioctl.w=$(SDK_INC_PATH)\devioctl.h;$(DDK_INC_PATH)\devioctl.h} \
    {devguid.w=$(SDK_INC_PATH)\devguid.h} \
    {dfsfsctl.w=$(PROJECT_INC_PATH)\dfsfsctl.h} \
    {dfspriv.w=$(PROJECT_INC_PATH)\dfspriv.h} \
    {dloaddef.w=$(PROJECT_INC_PATH)\dloaddef.h}\
    {errorrep.w=$(SDK_INC_PATH)\errorrep.h}\
    {evntrace.h=$(SDK_INC_PATH)\evntrace.h}\
    {faultrep.w=$(BASE_INC_PATH)\faultrep.h}\
    {fmifs.w=$(PROJECT_INC_PATH)\fmifs.h} \
    {gb18030.w=$(SDK_INC_PATH)\gb18030.h} \
    {genmacro.w=$(PROJECT_INC_PATH)\genmacro.tpl} \
    {guiddef.w=$(SDK_INC_PATH)\guiddef.h} \
    {hdlsblk.w=$(PROJECT_INC_PATH)\hdlsblk.h} \
    {hdlsterm.w=$(PROJECT_INC_PATH)\hdlsterm.h} \
    {ia64reg.w=$(SDK_INC_PATH)\ia64reg.h;$(DDK_INC_PATH)\ia64reg.h}\
    {inbv.w=$(HALKIT_INC_PATH)\inbv.h;$(PROJECT_INC_PATH)\inbv.h} \
    {infstr.w=$(SDK_INC_PATH)\infstr.h} \
    {winbase_interlockedunsigned.w=$(SDK_INC_PATH)\winbase_interlockedunsigned.h} \
    {winbase_interlockedcplusplus.w=$(SDK_INC_PATH)\winbase_interlockedcplusplus.h} \
    {ksalpha.w=$(SDK_INC_PATH)\ksalpha.h} \
    {kxamd64.w=$(SDK_INC_PATH)\kxamd64.inc} \
    {kxalpha.w=$(SDK_INC_PATH)\kxalpha.h} \
    {kxia64.w=$(SDK_INC_PATH)\kxia64.h} \
    {loadperf.h=$(SDK_INC_PATH)\loadperf.h} \
    {machinep.w=$(PROJECT_INC_PATH)\machinep.h} \
    {$(O)\mcaia64.mof=$(PROJECT_INC_PATH)\mcaia64.mof} \
    {mce.h=$(PROJECT_INC_PATH)\mce.h;$(HALKIT_INC_PATH)\mce.h;$(SDK_INC_PATH)\mce.h;$(DDK_INC_PATH)\mce.h;$(WDM_INC_PATH)\mce.h}\
    {nt.w=$(SDK_INC_PATH)\nt.h}\
    {ntacpi.h=$(PROJECT_INC_PATH)\ntacpi.h;$(HALKIT_INC_PATH)\ntacpi.h;$(PROCESSOR_INC_PATH)\ntacpi.h}\
    {ntamd64.w=$(SDK_INC_PATH)\ntamd64.h} \
    {ntalpha.w=$(SDK_INC_PATH)\ntalpha.h} \
    {ntapm.w=$(HALKIT_INC_PATH)\ntapm.h} \
    {ntconfig.w=$(SDK_INC_PATH)\ntconfig.h} \
    {ntcsrdll.w=$(SDK_INC_PATH)\ntcsrdll.h} \
    {ntcsrmsg.w=$(SDK_INC_PATH)\ntcsrmsg.h} \
    {ntcsrsrv.w=$(SDK_INC_PATH)\ntcsrsrv.h} \
    {ntddnfs.w=$(SDK_INC_PATH)\ntddnfs.h} \
    {ntddmup.w=$(SDK_INC_PATH)\ntddmup.h} \
    {ntddpcm.w=$(SDK_INC_PATH)\ntddpcm.h;$(DDK_INC_PATH)\ntddpcm.h} \
    {ntddsd.w=$(DDK_INC_PATH)\ntddsd.h} \
    {ntdef.w=$(SDK_INC_PATH)\ntdef.h;$(DDK_INC_PATH)\ntdef.h} \
    {ntelfapi.w=$(SDK_INC_PATH)\ntelfapi.h} \
    {ntexapi_dbg.w=$(SDK_INC_PATH)\ntexapi.dbg}\
    {ntexapi_h.w=$(SDK_INC_PATH)\ntexapi.h}\
    {ntddbrow.w=$(SDK_INC_PATH)\ntddbrow.h}\
    {ntfsexp.w=$(PROJECT_INC_PATH)\ntfsexp.h} \
    {nti386.w=$(SDK_INC_PATH)\nti386.h} \
    {ntia64.w=$(SDK_INC_PATH)\ntia64.h} \
    {ntimage.w=$(SDK_INC_PATH)\ntimage.h;$(DDK_INC_PATH)\ntimage.h} \
    {ntioapi.w=$(SDK_INC_PATH)\ntioapi.h} \
    {ntiolog.w=$(SDK_INC_PATH)\ntiolog.h} \
    {ntkeapi.w=$(SDK_INC_PATH)\ntkeapi.h} \
    {ntldr.w=$(SDK_INC_PATH)\ntldr.h} \
    {ntmips.w=$(SDK_INC_PATH)\ntmips.h} \
    {ntmmapi.w=$(SDK_INC_PATH)\ntmmapi.h} \
    {ntmppc.w=$(SDK_INC_PATH)\ntmppc.h} \
    {ntnls.w=$(SDK_INC_PATH)\ntnls.h;$(DDK_INC_PATH)\ntnls.h} \
    {ntobapi.w=$(SDK_INC_PATH)\ntobapi.h} \
    {ntperf.w=$(PROJECT_INC_PATH)\ntperf.h} \
    {ntpnpapi.w=$(SDK_INC_PATH)\ntpnpapi.h}\
    {ntpoapi.w=$(SDK_INC_PATH)\ntpoapi.h;$(DDK_INC_PATH)\ntpoapi.h}\
    {ntppc.w=$(SDK_INC_PATH)\ntppc.h} \
    {ntprfctr.w=$(SDK_INC_PATH)\ntprfctr.h}\
    {ntpsapi.w=$(SDK_INC_PATH)\ntpsapi.h}\
    {ntregapi.w=$(SDK_INC_PATH)\ntregapi.h} \
    {$(O)\ntrtl.h=$(SDK_INC_PATH)\ntrtl.h}\
    {ntrtlstringandbuffer.w=$(SDK_INC_PATH)\ntrtlstringandbuffer.h}\
    {ntrtlpath.w=$(SDK_INC_PATH)\ntrtlpath.h}\
    {ntrtloverflow.w=$(SDK_INC_PATH)\ntrtloverflow.h}\
    {ntrtlmmapio.w=$(SDK_INC_PATH)\ntrtlmmapio.h}\
    {ntsm.w=$(SDK_INC_PATH)\ntsm.h} \
    {nturtl.w=$(SDK_INC_PATH)\nturtl.h}\
    {ntwmi.w=$(PROJECT_INC_PATH)\ntwmi.h;$(PROCESSOR_INC_PATH)\ntwmi.h} \
    {ntxcapi.w=$(SDK_INC_PATH)\ntxcapi.h}\
    {nxalpha.w=$(SDK_INC_PATH)\nxalpha.h}\
    {nxamd64.w=$(SDK_INC_PATH)\nxamd64.h}\
    {nxia64.w=$(SDK_INC_PATH)\nxia64.h}\
    {nxi386.w=$(SDK_INC_PATH)\nxi386.h}\
    {ocmanage.w=$(SDK_INC_PATH)\ocmanage.h}\
    {oscpkt.w=$(PROJECT_INC_PATH)\oscpkt.h}\
    {oprghdlr.h=$(DDK_INC_PATH)\wdm\oprghdlr.h}\
    {overflow.w=$(PROJECT_INC_PATH)\overflow.h}\
    {pchrexec.w=$(PROJECT_INC_PATH)\pchrexec.h}\
    {pebteb.w=$(SDK_INC_PATH)\pebteb.h}\
    {pnpmgr.w=$(PROJECT_INC_PATH)\pnpmgr.h}\
    {pnpsetup.w=$(PROJECT_INC_PATH)\pnpsetup.h} \
    {poclass.w=$(SDK_INC_PATH)\poclass.h;$(DDK_INC_PATH)\poclass.h} \
    {poppack.w=$(SDK_INC_PATH)\poppack.h} \
    {prefetch.w=$(PROJECT_INC_PATH)\prefetch.h} \
    {profiles.w=$(HALKIT_INC_PATH)\profiles.h;$(PROJECT_INC_PATH)\profiles.h} \
    {protocol.w=$(PROJECT_INC_PATH)\protocol.h}\
    {pshpack1.w=$(SDK_INC_PATH)\pshpack1.h} \
    {pshpack2.w=$(SDK_INC_PATH)\pshpack2.h} \
    {pshpack4.w=$(SDK_INC_PATH)\pshpack4.h} \
    {pshpack8.w=$(SDK_INC_PATH)\pshpack8.h} \
    {pshpck16.w=$(SDK_INC_PATH)\pshpck16.h;$(DDK_INC_PATH)\pshpck16.h} \
    {regstr.w=$(SDK_INC_PATH)\regstr.h} \
    {remboot.w=$(PROJECT_INC_PATH)\remboot.h} \
    {resapi.w=$(SDK_INC_PATH)\resapi.h} \
    {riname.h=$(PROJECT_INC_PATH)\riname.h} \
    {riname.c=$(PROJECT_INC_PATH)\riname.c} \
    {sdistructs.w=$(PROJECT_INC_PATH)\sdistructs.h} \
    {seopaque.h=$(BASE_INC_PATH)\seopaque.h} \
    {sertlp.w=$(BASE_INC_PATH)\sertlp.h} \
    {setupapi.w=$(SDK_INC_PATH)\setupapi.h} \
    {setupblk.w=$(PROJECT_INC_PATH)\setupblk.h} \
    {smb.w=$(PROJECT_INC_PATH)\smb.h}\
    {smbus.h=$(DDK_INC_PATH)\smbus.h} \
    {smbtrans.w=$(PROJECT_INC_PATH)\smbtrans.h}\
    {smbtypes.w=$(PROJECT_INC_PATH)\smbtypes.h}\
    {spapip.w=$(PROJECT_INC_PATH)\spapip.h}\
    {sputils.w=$(PROJECT_INC_PATH)\sputils.h}\
    {srvfsctl.w=$(PROJECT_INC_PATH)\srvfsctl.h}\
    {stub512.w=$(SDK_LIB_DEST)\stub512.com}\
    {stwlog.w=$(PROJECT_INC_PATH)\stwlog.h}\
    {svcs.w=$(PROJECT_INC_PATH)\svcs.h} \
    {sxsapi.w=$(PROJECT_INC_PATH)\sxsapi.h} \
    {sxsapi_guids.w=$(PROJECT_INC_PATH)\sxsapi_guids.h} \
    {$(O)\sxstypes.h=$(SDK_INC_PATH)\sxstypes.h} \
    {thunklog.w=$(PROJECT_INC_PATH)\thunklog.tpl} \
    {tlhelp32.w=$(SDK_INC_PATH)\tlhelp32.h} \
    {unittest.w=$(BASE_INC_PATH)\unittest.h} \
    {wow64reg.w=$(PROJECT_INC_PATH)\wow64reg.h} \
    {wow64t.w=$(PROJECT_INC_PATH)\wow64t.h} \
    {wow64thk.w=$(PROJECT_INC_PATH)\wow64thk.h} \
    {x86mboot.w=$(PROJECT_INC_PATH)\x86mboot.h} \
    {vdm.w=$(PROJECT_INC_PATH)\vdm.h} \
    {vdmapi.w=$(PROJECT_INC_PATH)\vdmapi.h} \
    {warning.w=$(SDK_INC_PATH)\warning.h;$(DDK_INC_PATH)\warning.h} \
    {wdm.ref=$(SDK_INC_PATH)\wdm.ref} \
    {wdmguid.w=$(SDK_INC_PATH)\wdmguid.h;$(WDM_INC_PATH)\wdmguid.h} \
    {wdmwarn4.w=$(SDK_INC_PATH)\wdmwarn4.h;$(WDM_INC_PATH)\wdmwarn4.h} \
    {winperf.h=$(SDK_INC_PATH)\winperf.h} \
    {winperfp.w=$(PROJECT_INC_PATH)\winperfp.h} \
    {winsvcp.w=$(PROJECT_INC_PATH)\winsvcp.h} \
    {wmicore.mof=$(DDK_INC_PATH)\wmicore.mof} \
    {wmiguid.h=$(SDK_INC_PATH)\wmiguid.h;$(DDK_INC_PATH)\wdm\wmiguid.h} \
    {wmistr.h=$(SDK_INC_PATH)\wmistr.h} \
    {wmium.h=$(SDK_INC_PATH)\wmium.h} \
    {wmiumkm.w=$(PROJECT_INC_PATH)\wmiumkm.h} \
    {wsclus.w=$(PROJECT_INC_PATH)\wsclus.h} \
    {xsum_x86=$(PROJECT_INC_PATH)\xsum.x86} \
    {xsum_amd64=$(PROJECT_INC_PATH)\xsum.amd64} \
    {xsum_axp=$(PROJECT_INC_PATH)\xsum.axp} \
    {xsum_ia64=$(PROJECT_INC_PATH)\xsum.ia64} \
    {$(O)\zwapi.h=$(PROJECT_INC_PATH)\zwapi.h} \
    {$(O)\lzexpand.h=$(SDK_INC_PATH)\lzexpand.h} \
    {$(O)\ntstatus.dbg=$(BASE_INC_PATH)\ntstatus.dbg}\
    {$(O)\ntstatus.h=$(SDK_INC_PATH)\ntstatus.h;$(DDK_INC_PATH)\ntstatus.h}\
    {$(O)\wbasek.h=$(BASE_INC_PATH)\wbasek.h}\
    {$(O)\winbase.h=$(SDK_INC_PATH)\winbase.h}\
    {$(O)\winbase.inl=$(SDK_INC_PATH)\winbase.inl}\
    {$(O)\winbasep.h=$(BASE_INC_PATH)\winbasep.h}\
    {$(O)\winerror.h=$(SDK_INC_PATH)\winerror.h}\
    {$(O)\winerror.dbg=$(BASE_INC_PATH)\winerror.dbg}\
    {$(O)\winnls.h=$(SDK_INC_PATH)\winnls.h}\
    {$(O)\winnlsp.h=$(BASE_INC_PATH)\winnlsp.h}\
    {$(O)\winnt.h=$(SDK_INC_PATH)\winnt.h}\
    {$(O)\winnt.rh=$(SDK_INC_PATH)\winnt.rh}\
    {$(O)\winreg.h=$(SDK_INC_PATH)\winreg.h}\
    {$(O)\winsvc.h=$(SDK_INC_PATH)\winsvc.h} \
    {gentypes.w=$(BASE_INC_PATH)\gentypes.tpl}\
    {$(O)\wmicore.bmf=$(PROJECT_INC_PATH)\wmicore.bmf} \
    {$(O)\wmidata.h=$(SDK_INC_PATH)\wmidata.h;$(DDK_INC_PATH)\wdm\wmidata.h} \
    {cmapi.rc=$(PROJECT_INC_PATH)\cmapi.rc}\
    {comp.w=$(PROJECT_INC_PATH)\comp.h}\
    {miglib.w=$(PROJECT_INC_PATH)\miglib.h}\
    {ocmgrlib.w=$(PROJECT_INC_PATH)\ocmgrlib.h}\
    {plugin.w=$(PROJECT_INC_PATH)\plugin.h}\
    {setupbat.w=$(SDK_INC_PATH)\setupbat.h} \
    {setuplog.w=$(PROJECT_INC_PATH)\setuplog.h}\
    {sysprep_h.w=$(PROJECT_INC_PATH)\sysprep_.h} \
    {sysprep_c.w=$(PROJECT_INC_PATH)\sysprep_.c} \
    {syssetup.w=$(SDK_INC_PATH)\syssetup.h} \
    {undo.w=$(PROJECT_INC_PATH)\undo.h}\
    {vendinfo.mc=$(PROJECT_INC_PATH)\vendinfo.mc}\
    {winasr.w=$(SDK_INC_PATH)\winasr.h}\
    {winnt32p.w=$(PROJECT_INC_PATH)\winnt32p.h}\
    {encrypt.w=$(PROJECT_INC_PATH)\encrypt.h}\
    {pencrypt.w=$(PROJECT_INC_PATH)\pencrypt.h}\
    {ntsetup.w=$(PROJECT_INC_PATH)\ntsetup.h} \
    {spsyslib.w=$(PROJECT_INC_PATH)\spsyslib.h}\
    {pciintrf.w=$(PROJECT_INC_PATH)\pciintrf.h}\
    {winternl.w=$(SDK_INC_PATH)\winternl.h}\
    {$(O)\strsafe.h=$(SDK_INC_PATH)\strsafe.h}\
    {$(O)\ntstrsafe.h=$(DDK_INC_PATH)\ntstrsafe.h}\
    {$(O)\ntstrsafe.h=$(DDK_INC_PATH)\legacy\ntstrsafe.h}


PASS0_HEADERDIR=$(O)
PASS0_SOURCEDIR=$(O)

MC_FLAGS=-b -x $(O)

MISCFILES= \
    $(O)\pooltag.txt \
    $(O)\pooltag.pri

SOURCES=\
    ntstatus.mc \
    winerror.mc \
    wmicore.mof

NTTARGETFILES=
NTTARGETFILE0=$(O)\dpfilter.h \
    $(O)\lzexpand.h \
    $(O)\mcaia64.mof \
    $(O)\ntrtl.h \
    $(O)\pooltag.txt \
    $(O)\pooltag.pri \
    $(O)\sxstypes.h \
    $(O)\zwapi.h \
    $(O)\winnt.h \
    $(O)\winnt.rh \
    $(O)\wbasek.h \
    $(O)\winerror.h \
    $(O)\winerror.dbg \
    $(O)\winbase.h \
    $(O)\winbasep.h \
    $(O)\winnls.h \
    $(O)\winnlsp.h \
    $(O)\winreg.h \
    $(O)\winsvc.h \
    $(O)\wmidata.h \
    $(O)\strsafe.h \
    $(O)\ntstrsafe.h
