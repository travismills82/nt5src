; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9178 

	TITLE	.\fasterxml.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15MNCACJLI@?$AA?2?$AA?1?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13CGOKJPIL@?$AA?1?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MLPNBPGH@CDATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@FAGEMIA@?$AAC?$AAD?$AAA?$AAT?$AAA?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17CAPCPOIM@?$AAx?$AAm?$AAl?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@KLMLAFKI@?$AAe?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FLHGMILF@standalone?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BG@MPGNLCEB@?$AAs?$AAt?$AAa?$AAn?$AAd?$AAa?$AAl?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@KPDNCIMM@?$AAv?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05PPEFOGKI@xmlns?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@EOEFJFPG@?$AAx?$AAm?$AAl?$AAn?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _RtlXmlDefaultCompareStrings@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlDefaultSpecialStringCompare@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlXmlDefaultNextCharacter_UTF8@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlXmlDefaultNextCharacter@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlpIsCharacterLetter@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlpIsCharacterDigit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlpIsCharacterCombiner@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlpIsCharacterExtender@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @_RtlpDecodeCharacter@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlRawXmlTokenizer_SingleToken@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlRawXmlTokenizer_GatherWhitespace@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlRawXmlTokenizer_GatherPCData@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlRawXmlTokenizer_GatherNTokens@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlRawXmlTokenizer_GatherIdentifier@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RtlRawXmlTokenizer_GatherUntil@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlNextToken@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlAdvanceTokenization@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlInitializeTokenization@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlDetermineStreamEncoding@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlCloneTokenizationState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlXmlCopyStringOut@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RtlNtPathSeperatorString
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _RtlAlternateDosPathSeperatorString
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _RtlDosPathSeperatorsString
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_RtlNtPathSeperatorString
PUBLIC	??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@		; `string'
PUBLIC	_RtlDosPathSeperatorsString
PUBLIC	??_C@_15MNCACJLI@?$AA?2?$AA?1?$AA?$AA@		; `string'
PUBLIC	_RtlAlternateDosPathSeperatorString
PUBLIC	??_C@_13CGOKJPIL@?$AA?1?$AA?$AA@		; `string'
PUBLIC	_xss_CDATA
PUBLIC	_xss_xml
PUBLIC	_xss_encoding
PUBLIC	_xss_standalone
PUBLIC	_xss_version
PUBLIC	??_C@_05MLPNBPGH@CDATA?$AA@			; `string'
PUBLIC	??_C@_1M@FAGEMIA@?$AAC?$AAD?$AAA?$AAT?$AAA?$AA?$AA@ ; `string'
PUBLIC	??_C@_03PJHHNEEI@xml?$AA@			; `string'
PUBLIC	??_C@_17CAPCPOIM@?$AAx?$AAm?$AAl?$AA?$AA@	; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_1BC@KLMLAFKI@?$AAe?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@FLHGMILF@standalone?$AA@		; `string'
PUBLIC	??_C@_1BG@MPGNLCEB@?$AAs?$AAt?$AAa?$AAn?$AAd?$AAa?$AAl?$AAo?$AAn?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	??_C@_1BA@KPDNCIMM@?$AAv?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	_xss_xmlns
PUBLIC	??_C@_05PPEFOGKI@xmlns?$AA@			; `string'
PUBLIC	??_C@_1M@EOEFJFPG@?$AAx?$AAm?$AAl?$AAn?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@ DB '\', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _RtlNtPathSeperatorString
CONST	SEGMENT
_RtlNtPathSeperatorString DW 02H
	DW	04H
	DD	FLAT:??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@
CONST	ENDS
;	COMDAT ??_C@_15MNCACJLI@?$AA?2?$AA?1?$AA?$AA@
CONST	SEGMENT
??_C@_15MNCACJLI@?$AA?2?$AA?1?$AA?$AA@ DB '\', 00H, '/', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT _RtlDosPathSeperatorsString
CONST	SEGMENT
_RtlDosPathSeperatorsString DW 04H
	DW	06H
	DD	FLAT:??_C@_15MNCACJLI@?$AA?2?$AA?1?$AA?$AA@
CONST	ENDS
;	COMDAT ??_C@_13CGOKJPIL@?$AA?1?$AA?$AA@
CONST	SEGMENT
??_C@_13CGOKJPIL@?$AA?1?$AA?$AA@ DB '/', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _RtlAlternateDosPathSeperatorString
CONST	SEGMENT
_RtlAlternateDosPathSeperatorString DW 02H
	DW	04H
	DD	FLAT:??_C@_13CGOKJPIL@?$AA?1?$AA?$AA@
CONST	ENDS
;	COMDAT ??_C@_05MLPNBPGH@CDATA?$AA@
CONST	SEGMENT
??_C@_05MLPNBPGH@CDATA?$AA@ DB 'CDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@FAGEMIA@?$AAC?$AAD?$AAA?$AAT?$AAA?$AA?$AA@
CONST	SEGMENT
??_C@_1M@FAGEMIA@?$AAC?$AAD?$AAA?$AAT?$AAA?$AA?$AA@ DB 'C', 00H, 'D', 00H
	DB	'A', 00H, 'T', 00H, 'A', 00H, 00H, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_xss_CDATA DD	FLAT:??_C@_05MLPNBPGH@CDATA?$AA@
	DD	05H
	DD	FLAT:??_C@_1M@FAGEMIA@?$AAC?$AAD?$AAA?$AAT?$AAA?$AA?$AA@
	DD	05H
_DATA	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml?$AA@
CONST	SEGMENT
??_C@_03PJHHNEEI@xml?$AA@ DB 'xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CAPCPOIM@?$AAx?$AAm?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_17CAPCPOIM@?$AAx?$AAm?$AAl?$AA?$AA@ DB 'x', 00H, 'm', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
_DATA	SEGMENT
_xss_xml DD	FLAT:??_C@_03PJHHNEEI@xml?$AA@
	DD	03H
	DD	FLAT:??_C@_17CAPCPOIM@?$AAx?$AAm?$AAl?$AA?$AA@
	DD	03H
_DATA	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@KLMLAFKI@?$AAe?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KLMLAFKI@?$AAe?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ DB 'e'
	DB	00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 00H, 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
_xss_encoding DD FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DD	08H
	DD	FLAT:??_C@_1BC@KLMLAFKI@?$AAe?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
	DD	08H
_DATA	ENDS
;	COMDAT ??_C@_0L@FLHGMILF@standalone?$AA@
CONST	SEGMENT
??_C@_0L@FLHGMILF@standalone?$AA@ DB 'standalone', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@MPGNLCEB@?$AAs?$AAt?$AAa?$AAn?$AAd?$AAa?$AAl?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@MPGNLCEB@?$AAs?$AAt?$AAa?$AAn?$AAd?$AAa?$AAl?$AAo?$AAn?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H, 'l', 00H
	DB	'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_xss_standalone DD FLAT:??_C@_0L@FLHGMILF@standalone?$AA@
	DD	0aH
	DD	FLAT:??_C@_1BG@MPGNLCEB@?$AAs?$AAt?$AAa?$AAn?$AAd?$AAa?$AAl?$AAo?$AAn?$AAe?$AA?$AA@
	DD	0aH
_DATA	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@KPDNCIMM@?$AAv?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@KPDNCIMM@?$AAv?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?$AA@ DB 'v', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
_DATA	SEGMENT
_xss_version DD	FLAT:??_C@_07CPCPJPKL@version?$AA@
	DD	07H
	DD	FLAT:??_C@_1BA@KPDNCIMM@?$AAv?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?$AA@
	DD	07H
_DATA	ENDS
;	COMDAT ??_C@_05PPEFOGKI@xmlns?$AA@
CONST	SEGMENT
??_C@_05PPEFOGKI@xmlns?$AA@ DB 'xmlns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@EOEFJFPG@?$AAx?$AAm?$AAl?$AAn?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@EOEFJFPG@?$AAx?$AAm?$AAl?$AAn?$AAs?$AA?$AA@ DB 'x', 00H, 'm', 00H
	DB	'l', 00H, 'n', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_xss_xmlns DD	FLAT:??_C@_05PPEFOGKI@xmlns?$AA@
	DD	05H
	DD	FLAT:??_C@_1M@EOEFJFPG@?$AAx?$AAm?$AAl?$AAn?$AAs?$AA?$AA@
	DD	05H
_DATA	ENDS
CONST	SEGMENT
?ComparisonStates@?CN@??RtlXmlNextToken@@9@9 DD FLAT:_xss_encoding ; `RtlXmlNextToken'::`45'::ComparisonStates
	DD	030H
	DD	FLAT:_xss_version
	DD	032H
	DD	FLAT:_xss_standalone
	DD	031H
CONST	ENDS
_DATA	SEGMENT
?s_rgbUTF16_big_BOM@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 0feH ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUTF16_big_BOM
	DB	0ffH
	ORG $+2
?s_rgbUTF16_little_BOM@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 0ffH ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUTF16_little_BOM
	DB	0feH
	ORG $+2
?s_rgbUCS4_big@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 00H ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUCS4_big
	DB	00H
	DB	00H
	DB	03cH
?s_rgbUCS4_little@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 03cH ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUCS4_little
	DB	00H
	DB	00H
	DB	00H
?s_rgbUTF16_big@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 00H ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUTF16_big
	DB	03cH
	DB	00H
	DB	03fH
?s_rgbUTF16_little@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 03cH ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUTF16_little
	DB	00H
	DB	03fH
	DB	00H
?s_rgbUTF8_or_mixed@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 03cH ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUTF8_or_mixed
	DB	03fH
	DB	078H
	DB	06dH
?s_rgbUTF8_with_bom@?1??RtlXmlDetermineStreamEncoding@@9@9 DB 0efH ; `RtlXmlDetermineStreamEncoding'::`2'::s_rgbUTF8_with_bom
	DB	0bbH
	DB	0bfH
	ORG $+1
?EncodingCorrelation@?1??RtlXmlDetermineStreamEncoding@@9@9 DD FLAT:?s_rgbUTF16_big_BOM@?1??RtlXmlDetermineStreamEncoding@@9@9 ; `RtlXmlDetermineStreamEncoding'::`2'::EncodingCorrelation
	DD	02H
	DD	04H
	DD	02H
	ORG $+4
	DD	FLAT:?s_rgbUTF16_little_BOM@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	02H
	DD	03H
	DD	02H
	ORG $+4
	DD	FLAT:?s_rgbUTF16_big@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	04H
	DD	04H
	DD	00H
	ORG $+4
	DD	FLAT:?s_rgbUTF16_little@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	04H
	DD	03H
	DD	00H
	ORG $+4
	DD	FLAT:?s_rgbUCS4_big@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	04H
	DD	02H
	DD	00H
	ORG $+4
	DD	FLAT:?s_rgbUCS4_little@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	04H
	DD	01H
	DD	00H
	ORG $+4
	DD	FLAT:?s_rgbUTF8_with_bom@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	03H
	DD	05H
	DD	03H
	ORG $+4
	DD	FLAT:?s_rgbUTF8_or_mixed@?1??RtlXmlDetermineStreamEncoding@@9@9
	DD	04H
	DD	05H
	DD	00H
	ORG $+4
_DATA	ENDS
PUBLIC	_RtlXmlDefaultCompareStrings@16
; Function compile flags: /Ogsy
; File f:\sxsprojects\newcabarc\xmllib\fasterxml.c
;	COMDAT _RtlXmlDefaultCompareStrings@16
_TEXT	SEGMENT
_pvOriginal$ = -16
_chLeft$15336 = -12
_status$ = -8
_cbLeft$ = -4
_cbRight$ = 8
_pState$ = 8
_pLeft$ = 12
_pRight$ = 16
_pfEqual$ = 20
_RtlXmlDefaultCompareStrings@16 PROC NEAR		; COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 28   :     ULONG cbLeft, cbRight;
; 29   :     PVOID pvLeft, pvRight, pvOriginal;
; 30   :     NTSTATUS status = STATUS_SUCCESS;
; 31   : 
; 32   :     if (!ARGUMENT_PRESENT(pLeft) || !ARGUMENT_PRESENT(pRight) || !ARGUMENT_PRESENT(pfEqual)) {

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pLeft$[ebp]
  00009	83 65 f8 00	 and	 DWORD PTR _status$[ebp], 0
  0000d	85 c9		 test	 ecx, ecx
  0000f	0f 84 e5 00 00
	00		 je	 $L15331
  00015	8b 45 10	 mov	 eax, DWORD PTR _pRight$[ebp]
  00018	85 c0		 test	 eax, eax
  0001a	0f 84 da 00 00
	00		 je	 $L15331
  00020	8b 55 14	 mov	 edx, DWORD PTR _pfEqual$[ebp]
  00023	85 d2		 test	 edx, edx
  00025	0f 84 cf 00 00
	00		 je	 $L15331

; 34   :     }
; 35   : 
; 36   :     *pfEqual = XML_STRING_COMPARE_EQUALS;

  0002b	83 22 00	 and	 DWORD PTR [edx], 0

; 37   : 
; 38   :     pvOriginal = pState->RawTokenState.pvCursor;
; 39   :     pvLeft = pLeft->pvData;
; 40   :     pvRight = pRight->pvData;
; 41   : 
; 42   :     //
; 43   :     // Loop through the data until we run out
; 44   :     //
; 45   :     for (cbLeft = 0, cbRight = 0; (cbLeft < pLeft->cbData) && (cbRight < pRight->cbData); )

  0002e	83 65 fc 00	 and	 DWORD PTR _cbLeft$[ebp], 0
  00032	53		 push	 ebx
  00033	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00035	56		 push	 esi
  00036	8b 75 08	 mov	 esi, DWORD PTR _pState$[ebp]
  00039	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0003c	83 65 08 00	 and	 DWORD PTR _cbRight$[ebp], 0
  00040	57		 push	 edi
  00041	8b 38		 mov	 edi, DWORD PTR [eax]
  00043	89 55 f0	 mov	 DWORD PTR _pvOriginal$[ebp], edx
$L15334:
  00046	8b 55 fc	 mov	 edx, DWORD PTR _cbLeft$[ebp]
  00049	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0004c	73 7d		 jae	 SHORT $L16247
  0004e	8b 55 08	 mov	 edx, DWORD PTR _cbRight$[ebp]
  00051	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00054	73 75		 jae	 SHORT $L16247

; 46   :     {
; 47   :         ULONG chLeft, chRight;
; 48   :         int iResult;
; 49   : 
; 50   :         //
; 51   :         // Set the left cursor, gather a character out of it, advance it
; 52   :         //
; 53   :         pState->RawTokenState.pvCursor = pvLeft;
; 54   : 
; 55   :         chLeft = pState->RawTokenState.pfnNextChar(&pState->RawTokenState);

  00056	8b ce		 mov	 ecx, esi
  00058	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0005b	ff 56 10	 call	 DWORD PTR [esi+16]
  0005e	89 45 f4	 mov	 DWORD PTR _chLeft$15336[ebp], eax

; 56   : 
; 57   :         pvLeft = (PBYTE)pvLeft + pState->RawTokenState.cbBytesInLastRawToken;

  00061	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 58   :         cbLeft += pState->RawTokenState.cbBytesInLastRawToken;

  00064	01 45 fc	 add	 DWORD PTR _cbLeft$[ebp], eax
  00067	03 d8		 add	 ebx, eax

; 59   : 
; 60   :         //
; 61   :         // Failure?
; 62   :         //
; 63   :         if ((chLeft == 0) && !NT_SUCCESS(pState->RawTokenState.NextCharacterResult)) {

  00069	83 7d f4 00	 cmp	 DWORD PTR _chLeft$15336[ebp], 0
  0006d	75 06		 jne	 SHORT $L15341
  0006f	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  00073	7c 3c		 jl	 SHORT $L16246
$L15341:

; 64   :             status = pState->RawTokenState.NextCharacterResult;
; 65   :             goto Exit;
; 66   :         }
; 67   : 
; 68   :         //
; 69   :         // Reset
; 70   :         //
; 71   :         if (pState->RawTokenState.cbBytesInLastRawToken != pState->RawTokenState.DefaultCharacterSize) {

  00075	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00078	3b c1		 cmp	 eax, ecx
  0007a	74 03		 je	 SHORT $L15343

; 72   :             pState->RawTokenState.cbBytesInLastRawToken = pState->RawTokenState.DefaultCharacterSize;

  0007c	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
$L15343:

; 73   :         }
; 74   : 
; 75   : 
; 76   :         //
; 77   :         // Set the right cursor, gather a character, etc.
; 78   :         //
; 79   :         pState->RawTokenState.pvCursor = pvRight;
; 80   : 
; 81   :         chRight = pState->RawTokenState.pfnNextChar(&pState->RawTokenState);

  0007f	8b ce		 mov	 ecx, esi
  00081	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00084	ff 56 10	 call	 DWORD PTR [esi+16]

; 82   : 
; 83   :         pvRight = (PBYTE)pvRight + pState->RawTokenState.cbBytesInLastRawToken;

  00087	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]

; 84   :         cbRight += pState->RawTokenState.cbBytesInLastRawToken;

  0008a	01 4d 08	 add	 DWORD PTR _cbRight$[ebp], ecx
  0008d	03 f9		 add	 edi, ecx

; 85   : 
; 86   :         if ((chRight == 0) && !NT_SUCCESS(pState->RawTokenState.NextCharacterResult)) {

  0008f	85 c0		 test	 eax, eax
  00091	75 05		 jne	 SHORT $L15346
  00093	39 46 30	 cmp	 DWORD PTR [esi+48], eax
  00096	7c 19		 jl	 SHORT $L16246
$L15346:

; 89   :         }
; 90   : 
; 91   :         if (pState->RawTokenState.cbBytesInLastRawToken != pState->RawTokenState.DefaultCharacterSize) {

  00098	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0009b	3b ca		 cmp	 ecx, edx
  0009d	74 03		 je	 SHORT $L15347

; 92   :             pState->RawTokenState.cbBytesInLastRawToken = pState->RawTokenState.DefaultCharacterSize;

  0009f	89 56 2c	 mov	 DWORD PTR [esi+44], edx
$L15347:

; 93   :         }
; 94   : 
; 95   :         //
; 96   :         // Are they equal?
; 97   :         //
; 98   :         iResult = chLeft - chRight;

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _chLeft$15336[ebp]
  000a5	2b c8		 sub	 ecx, eax

; 99   :         if (iResult == 0) {

  000a7	75 10		 jne	 SHORT $L15348

; 100  :             continue;

  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _pLeft$[ebp]
  000ac	8b 45 10	 mov	 eax, DWORD PTR _pRight$[ebp]
  000af	eb 95		 jmp	 SHORT $L15334
$L16246:

; 87   :             status = pState->RawTokenState.NextCharacterResult;

  000b1	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000b4	89 45 f8	 mov	 DWORD PTR _status$[ebp], eax

; 88   :             goto Exit;

  000b7	eb 33		 jmp	 SHORT $Exit$15342
$L15348:

; 101  :         }
; 102  :         //
; 103  :         // Nope, left is larger
; 104  :         //
; 105  :         else if (iResult > 0) {

  000b9	33 c0		 xor	 eax, eax
  000bb	85 c9		 test	 ecx, ecx
  000bd	8b 4d 14	 mov	 ecx, DWORD PTR _pfEqual$[ebp]
  000c0	0f 9f c0	 setg	 al
  000c3	8d 44 00 ff	 lea	 eax, DWORD PTR [eax+eax-1]
  000c7	89 01		 mov	 DWORD PTR [ecx], eax

; 106  :             *pfEqual = XML_STRING_COMPARE_GT;
; 107  :             goto Exit;
; 108  :         }
; 109  :         //
; 110  :         // Right is larger
; 111  :         //
; 112  :         else {
; 113  :             *pfEqual = XML_STRING_COMPARE_LT;
; 114  :             goto Exit;

  000c9	eb 21		 jmp	 SHORT $Exit$15342
$L16247:

; 115  :         }
; 116  :     }
; 117  : 
; 118  :     //
; 119  :     // There was data left in the right thing
; 120  :     //
; 121  :     if (cbRight < pRight->cbData) {

  000cb	8b 55 08	 mov	 edx, DWORD PTR _cbRight$[ebp]
  000ce	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000d1	73 08		 jae	 SHORT $L15352

; 122  :         *pfEqual = XML_STRING_COMPARE_LT;

  000d3	8b 45 14	 mov	 eax, DWORD PTR _pfEqual$[ebp]
  000d6	83 08 ff	 or	 DWORD PTR [eax], -1

; 123  :     }
; 124  :     //
; 125  :     // There was data left in the left thing
; 126  :     //
; 127  :     else if (cbLeft < pLeft->cbData) {

  000d9	eb 11		 jmp	 SHORT $Exit$15342
$L15352:
  000db	8b 45 fc	 mov	 eax, DWORD PTR _cbLeft$[ebp]
  000de	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000e1	73 09		 jae	 SHORT $Exit$15342

; 128  :         *pfEqual = XML_STRING_COMPARE_GT;

  000e3	8b 45 14	 mov	 eax, DWORD PTR _pfEqual$[ebp]
  000e6	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$Exit$15342:

; 129  :     }
; 130  :     //
; 131  :     // Otherwise, it's still equal
; 132  :     //
; 133  : 
; 134  : Exit:
; 135  :     pState->RawTokenState.pvCursor = pvOriginal;

  000ec	8b 45 f0	 mov	 eax, DWORD PTR _pvOriginal$[ebp]
  000ef	5f		 pop	 edi
  000f0	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 136  :     return status;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR _status$[ebp]
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	eb 05		 jmp	 SHORT $L15310
$L15331:

; 33   :         return STATUS_INVALID_PARAMETER;

  000fa	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$L15310:

; 137  : }

  000ff	c9		 leave
  00100	c2 10 00	 ret	 16			; 00000010H
_RtlXmlDefaultCompareStrings@16 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlDefaultSpecialStringCompare@16
; Function compile flags: /Ogsy
;	COMDAT _RtlXmlDefaultSpecialStringCompare@16
_TEXT	SEGMENT
_ulGathered$ = 8
_pState$ = 8
_pvOriginal$ = 12
_pToken$ = 12
_pSpecialString$ = 16
_pfMatches$ = 20
_RtlXmlDefaultSpecialStringCompare@16 PROC NEAR		; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 152  :     PVOID pvOriginal = NULL;
; 153  :     ULONG ulGathered = 0;
; 154  :     ULONG cchCompareStringIdx = 0;
; 155  : 
; 156  :     if (!ARGUMENT_PRESENT(pState) || !ARGUMENT_PRESENT(pToken) || !ARGUMENT_PRESENT(pSpecialString) ||
; 157  :         !ARGUMENT_PRESENT(pfMatches)) {

  00005	8b 75 08	 mov	 esi, DWORD PTR _pState$[ebp]
  00008	33 db		 xor	 ebx, ebx
  0000a	3b f3		 cmp	 esi, ebx
  0000c	57		 push	 edi
  0000d	0f 84 c6 00 00
	00		 je	 $L15386
  00013	8b 7d 0c	 mov	 edi, DWORD PTR _pToken$[ebp]
  00016	3b fb		 cmp	 edi, ebx
  00018	0f 84 bb 00 00
	00		 je	 $L15386
  0001e	39 5d 10	 cmp	 DWORD PTR _pSpecialString$[ebp], ebx
  00021	0f 84 b2 00 00
	00		 je	 $L15386
  00027	39 5d 14	 cmp	 DWORD PTR _pfMatches$[ebp], ebx
  0002a	0f 84 a9 00 00
	00		 je	 $L15386

; 160  :     }
; 161  : 
; 162  :     pvOriginal = pState->RawTokenState.pvCursor;

  00030	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00033	89 45 0c	 mov	 DWORD PTR _pvOriginal$[ebp], eax

; 163  : 
; 164  :     //
; 165  :     // Rewire the input cursor
; 166  :     //
; 167  :     pState->RawTokenState.pvCursor = pToken->pvData;

  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 168  : 
; 169  :     for (ulGathered = 0; 
; 170  :          (ulGathered < pToken->cbData) && (cchCompareStringIdx < pSpecialString->cchwszStringText); 
; 171  :          ulGathered) 

  0003b	39 5f 04	 cmp	 DWORD PTR [edi+4], ebx
  0003e	89 5d 08	 mov	 DWORD PTR _ulGathered$[ebp], ebx
  00041	76 4b		 jbe	 SHORT $L15390
$L15389:
  00043	8b 45 10	 mov	 eax, DWORD PTR _pSpecialString$[ebp]
  00046	3b 58 0c	 cmp	 ebx, DWORD PTR [eax+12]
  00049	73 43		 jae	 SHORT $L15390

; 172  :     {
; 173  :     
; 174  :         ULONG ulChar = pState->RawTokenState.pfnNextChar(&pState->RawTokenState);

  0004b	8b ce		 mov	 ecx, esi
  0004d	ff 56 10	 call	 DWORD PTR [esi+16]

; 175  :         int iDiff;
; 176  : 
; 177  :         if ((ulChar == 0) && !NT_SUCCESS(pState->RawTokenState.NextCharacterResult)) {

  00050	85 c0		 test	 eax, eax
  00052	75 05		 jne	 SHORT $L15394
  00054	39 46 30	 cmp	 DWORD PTR [esi+48], eax
  00057	7c 45		 jl	 SHORT $L16254
$L15394:

; 179  :         }
; 180  : 
; 181  :         //
; 182  :         // Out of our range, ick
; 183  :         //
; 184  :         if (ulChar > 0xFFFF) {

  00059	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005e	77 43		 ja	 SHORT $L16255

; 187  : 
; 188  :         } 
; 189  :         //
; 190  :         // Not matching characters?
; 191  :         //
; 192  : 
; 193  :         iDiff = ulChar - pSpecialString->wszStringText[cchCompareStringIdx++];

  00060	8b 4d 10	 mov	 ecx, DWORD PTR _pSpecialString$[ebp]
  00063	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00066	0f b7 0c 59	 movzx	 ecx, WORD PTR [ecx+ebx*2]
  0006a	2b c1		 sub	 eax, ecx
  0006c	43		 inc	 ebx

; 194  : 
; 195  :         if (iDiff > 0) {

  0006d	85 c0		 test	 eax, eax
  0006f	7f 25		 jg	 SHORT $L16256

; 196  :             *pfMatches = XML_STRING_COMPARE_LT;
; 197  :             goto Exit;
; 198  :         }
; 199  :         else if (iDiff < 0) {

  00071	7c 37		 jl	 SHORT $L16257

; 202  :         }
; 203  : 
; 204  :         //
; 205  :         // Account for the bytes that we gathered, advancing the pointer
; 206  :         //
; 207  :         pState->RawTokenState.pvCursor = (PBYTE)pState->RawTokenState.pvCursor + pState->RawTokenState.cbBytesInLastRawToken;

  00073	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 208  :         ulGathered += pState->RawTokenState.cbBytesInLastRawToken;
; 209  : 
; 210  :         if (pState->RawTokenState.cbBytesInLastRawToken != pState->RawTokenState.DefaultCharacterSize) {

  00076	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00079	01 46 0c	 add	 DWORD PTR [esi+12], eax
  0007c	01 45 08	 add	 DWORD PTR _ulGathered$[ebp], eax
  0007f	3b c1		 cmp	 eax, ecx
  00081	74 03		 je	 SHORT $L15402

; 211  :             pState->RawTokenState.cbBytesInLastRawToken = pState->RawTokenState.DefaultCharacterSize;

  00083	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
$L15402:

; 168  : 
; 169  :     for (ulGathered = 0; 
; 170  :          (ulGathered < pToken->cbData) && (cchCompareStringIdx < pSpecialString->cchwszStringText); 
; 171  :          ulGathered) 

  00086	8b 45 08	 mov	 eax, DWORD PTR _ulGathered$[ebp]
  00089	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0008c	72 b5		 jb	 SHORT $L15389
$L15390:

; 212  :         }
; 213  : 
; 214  : 
; 215  :     }
; 216  : 
; 217  :     if (ulGathered < pToken->cbData) {

  0008e	8b 45 08	 mov	 eax, DWORD PTR _ulGathered$[ebp]
  00091	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00094	73 1f		 jae	 SHORT $L15403
$L16256:

; 218  :      *pfMatches = XML_STRING_COMPARE_LT;

  00096	8b 45 14	 mov	 eax, DWORD PTR _pfMatches$[ebp]
  00099	83 08 ff	 or	 DWORD PTR [eax], -1

; 219  :     }
; 220  :     else if (cchCompareStringIdx < pSpecialString->cchwszStringText) {

  0009c	eb 26		 jmp	 SHORT $Exit$15398
$L16254:

; 178  :             return pState->RawTokenState.NextCharacterResult;

  0009e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000a1	eb 3b		 jmp	 SHORT $L15364
$L16255:

; 185  : 
; 186  :             return STATUS_INTEGER_OVERFLOW;

  000a3	b8 95 00 00 c0	 mov	 eax, -1073741675	; c0000095H
  000a8	eb 34		 jmp	 SHORT $L15364
$L16257:

; 200  :             *pfMatches = XML_STRING_COMPARE_GT;

  000aa	8b 45 14	 mov	 eax, DWORD PTR _pfMatches$[ebp]
  000ad	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 201  :             goto Exit;

  000b3	eb 0f		 jmp	 SHORT $Exit$15398
$L15403:

; 219  :     }
; 220  :     else if (cchCompareStringIdx < pSpecialString->cchwszStringText) {

  000b5	8b 45 10	 mov	 eax, DWORD PTR _pSpecialString$[ebp]
  000b8	3b 58 0c	 cmp	 ebx, DWORD PTR [eax+12]
  000bb	8b 4d 14	 mov	 ecx, DWORD PTR _pfMatches$[ebp]
  000be	1b c0		 sbb	 eax, eax
  000c0	f7 d8		 neg	 eax
  000c2	89 01		 mov	 DWORD PTR [ecx], eax
$Exit$15398:

; 221  :      *pfMatches = XML_STRING_COMPARE_GT;
; 222  :     }
; 223  :     else {
; 224  :      *pfMatches = XML_STRING_COMPARE_EQUALS;
; 225  :     }
; 226  :      
; 227  : Exit:
; 228  :     if (pState->RawTokenState.cbBytesInLastRawToken != pState->RawTokenState.DefaultCharacterSize) {

  000c4	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000c7	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  000ca	74 03		 je	 SHORT $L15407

; 229  :         pState->RawTokenState.cbBytesInLastRawToken = pState->RawTokenState.DefaultCharacterSize;

  000cc	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15407:

; 230  :     }
; 231  : 
; 232  :     pState->RawTokenState.pvCursor = pvOriginal;

  000cf	8b 45 0c	 mov	 eax, DWORD PTR _pvOriginal$[ebp]
  000d2	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 233  : 
; 234  :     return STATUS_SUCCESS;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 05		 jmp	 SHORT $L15364
$L15386:

; 158  : 
; 159  :         return STATUS_INVALID_PARAMETER;

  000d9	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$L15364:
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx

; 235  : }

  000e1	5d		 pop	 ebp
  000e2	c2 10 00	 ret	 16			; 00000010H
_RtlXmlDefaultSpecialStringCompare@16 ENDP
_TEXT	ENDS
PUBLIC	@RtlXmlDefaultNextCharacter_UTF8@4
; Function compile flags: /Ogsy
;	COMDAT @RtlXmlDefaultNextCharacter_UTF8@4
_TEXT	SEGMENT
@RtlXmlDefaultNextCharacter_UTF8@4 PROC NEAR		; COMDAT
; _pContext$ = ecx

; 250  :     PBYTE pb = (PBYTE)pContext->pvCursor;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 251  :     const BYTE b = pb[0];

  00003	8a 00		 mov	 al, BYTE PTR [eax]

; 252  : 
; 253  :     if ((b & 0x80) == 0) {

  00005	84 c0		 test	 al, al
  00007	78 04		 js	 SHORT $L15416

; 254  :         return b;

  00009	0f b6 c0	 movzx	 eax, al

; 263  :     }
; 264  : }

  0000c	c3		 ret	 0
$L15416:

; 255  :     }
; 256  :     //
; 257  :     // Decode the UTF data - look at the top bits to determine
; 258  :     // how many bytes are left in the input stream.
; 259  :     //
; 260  :     else {
; 261  :         pContext->NextCharacterResult = STATUS_NOT_IMPLEMENTED;

  0000d	c7 41 30 02 00
	00 c0		 mov	 DWORD PTR [ecx+48], -1073741822 ; c0000002H

; 262  :         return 0;

  00014	33 c0		 xor	 eax, eax

; 263  :     }
; 264  : }

  00016	c3		 ret	 0
@RtlXmlDefaultNextCharacter_UTF8@4 ENDP
_TEXT	ENDS
PUBLIC	@RtlXmlDefaultNextCharacter@4
; Function compile flags: /Ogsy
;	COMDAT @RtlXmlDefaultNextCharacter@4
_TEXT	SEGMENT
@RtlXmlDefaultNextCharacter@4 PROC NEAR			; COMDAT
; _pContext$ = ecx

; 272  :     ULONG ulResult = 0;

  00000	33 c0		 xor	 eax, eax

; 273  : 
; 274  :     ASSERT(pContext->cbBytesInLastRawToken == pContext->DefaultCharacterSize);
; 275  :     ASSERT(pContext->NextCharacterResult == STATUS_SUCCESS);
; 276  : 
; 277  :     if (!ARGUMENT_PRESENT(pContext)) {

  00002	3b c8		 cmp	 ecx, eax
  00004	75 06		 jne	 SHORT $L15430

; 278  :         return STATUS_INVALID_PARAMETER;

  00006	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$L15422:

; 301  :     }
; 302  : 
; 303  :     return ulResult;
; 304  : }

  0000b	c3		 ret	 0
$L15430:

; 279  :     }
; 280  : 
; 281  : 
; 282  :     switch (pContext->EncodingFamily) {

  0000c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000f	2b d0		 sub	 edx, eax
  00011	74 0b		 je	 SHORT $L15436
  00013	83 ea 03	 sub	 edx, 3
  00016	74 1a		 je	 SHORT $L15437
  00018	4a		 dec	 edx
  00019	74 08		 je	 SHORT $L15439
  0001b	4a		 dec	 edx
  0001c	75 ed		 jne	 SHORT $L15422
$L15436:

; 283  :     case XMLEF_UNKNOWN:
; 284  :     case XMLEF_UTF_8_OR_ASCII:
; 285  :         return RtlXmlDefaultNextCharacter_UTF8(pContext);

  0001e	e9 00 00 00 00	 jmp	 @RtlXmlDefaultNextCharacter_UTF8@4
$L15439:

; 292  :         }
; 293  :         break;
; 294  : 
; 295  :     case XMLEF_UTF_16_BE:
; 296  :         {
; 297  :             ulResult = (*((PBYTE)pContext->pvCursor) << 8) | (*((PBYTE)pContext->pvCursor));

  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e0 08	 shl	 eax, 8
  0002e	0b c2		 or	 eax, edx

; 298  :             pContext->cbBytesInLastRawToken = 2;
; 299  :         }
; 300  :         break;

  00030	eb 06		 jmp	 SHORT $L16265
$L15437:

; 286  :         break;
; 287  : 
; 288  :     case XMLEF_UTF_16_LE:
; 289  :         {
; 290  :             ulResult = *((WCHAR*)pContext->pvCursor);

  00032	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00035	0f b7 00	 movzx	 eax, WORD PTR [eax]
$L16265:

; 291  :             pContext->cbBytesInLastRawToken = 2;

  00038	c7 41 2c 02 00
	00 00		 mov	 DWORD PTR [ecx+44], 2

; 301  :     }
; 302  : 
; 303  :     return ulResult;
; 304  : }

  0003f	c3		 ret	 0
@RtlXmlDefaultNextCharacter@4 ENDP
_TEXT	ENDS
PUBLIC	_RtlpIsCharacterLetter@4
; Function compile flags: /Ogsy
;	COMDAT _RtlpIsCharacterLetter@4
_TEXT	SEGMENT
_ulCharacter$ = 8
_RtlpIsCharacterLetter@4 PROC NEAR			; COMDAT

; 336  :     //
; 337  :     // BUGBUG: For now, we only care about the US english alphabet
; 338  :     //
; 339  :     return (((ulCharacter >= L'a') && (ulCharacter <= L'z')) || ((ulCharacter >= L'A') && (ulCharacter <= L'Z')));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ulCharacter$[esp-4]
  00004	83 f8 61	 cmp	 eax, 97			; 00000061H
  00007	72 05		 jb	 SHORT $L16269
  00009	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0000c	76 0a		 jbe	 SHORT $L16271
$L16269:
  0000e	83 f8 41	 cmp	 eax, 65			; 00000041H
  00011	72 0a		 jb	 SHORT $L16270
  00013	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  00016	77 05		 ja	 SHORT $L16270
$L16271:
  00018	33 c0		 xor	 eax, eax
  0001a	40		 inc	 eax
  0001b	eb 02		 jmp	 SHORT $L16272
$L16270:
  0001d	33 c0		 xor	 eax, eax
$L16272:

; 340  : }

  0001f	c2 04 00	 ret	 4
_RtlpIsCharacterLetter@4 ENDP
_TEXT	ENDS
PUBLIC	_RtlpIsCharacterDigit@4
; Function compile flags: /Ogsy
;	COMDAT _RtlpIsCharacterDigit@4
_TEXT	SEGMENT
_ulCharacter$ = 8
_RtlpIsCharacterDigit@4 PROC NEAR			; COMDAT

; 345  :     return (ulCharacter >= '0') && (ulCharacter <= '9');

  00000	83 7c 24 04 30	 cmp	 DWORD PTR _ulCharacter$[esp-4], 48 ; 00000030H
  00005	72 0c		 jb	 SHORT $L16276
  00007	83 7c 24 04 39	 cmp	 DWORD PTR _ulCharacter$[esp-4], 57 ; 00000039H
  0000c	77 05		 ja	 SHORT $L16276
  0000e	33 c0		 xor	 eax, eax
  00010	40		 inc	 eax
  00011	eb 02		 jmp	 SHORT $L16277
$L16276:
  00013	33 c0		 xor	 eax, eax
$L16277:

; 346  : }

  00015	c2 04 00	 ret	 4
_RtlpIsCharacterDigit@4 ENDP
_TEXT	ENDS
PUBLIC	_RtlpIsCharacterCombiner@4
; Function compile flags: /Ogsy
;	COMDAT _RtlpIsCharacterCombiner@4
_TEXT	SEGMENT
_ulCharacter$ = 8
_RtlpIsCharacterCombiner@4 PROC NEAR			; COMDAT

; 351  :     return FALSE;

  00000	32 c0		 xor	 al, al

; 352  : }

  00002	c2 04 00	 ret	 4
_RtlpIsCharacterCombiner@4 ENDP
_TEXT	ENDS
PUBLIC	_RtlpIsCharacterExtender@4
; Function compile flags: /Ogsy
;	COMDAT _RtlpIsCharacterExtender@4
_TEXT	SEGMENT
_ulCharacter$ = 8
_RtlpIsCharacterExtender@4 PROC NEAR			; COMDAT

; 357  :     return FALSE;

  00000	32 c0		 xor	 al, al

; 358  : }

  00002	c2 04 00	 ret	 4
_RtlpIsCharacterExtender@4 ENDP
_TEXT	ENDS
PUBLIC	@_RtlpDecodeCharacter@4
; Function compile flags: /Ogsy
;	COMDAT @_RtlpDecodeCharacter@4
_TEXT	SEGMENT
@_RtlpDecodeCharacter@4 PROC NEAR			; COMDAT
; _ulCharacter$ = ecx

; 363  : 
; 364  :     NTXML_RAW_TOKEN RetVal;
; 365  : 
; 366  :     switch (ulCharacter) {

  00000	83 f9 3a	 cmp	 ecx, 58			; 0000003aH
  00003	77 70		 ja	 SHORT $L16287
  00005	74 6a		 je	 SHORT $L15490
  00007	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0000a	77 3e		 ja	 SHORT $L16288
  0000c	74 38		 je	 SHORT $L15494
  0000e	83 f9 09	 cmp	 ecx, 9
  00011	0f 82 a0 00 00
	00		 jb	 $L15496
  00017	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0001a	6a 0d		 push	 13			; 0000000dH
  0001c	58		 pop	 eax
  0001d	0f 86 a7 00 00
	00		 jbe	 $L15498
  00023	3b c8		 cmp	 ecx, eax
  00025	0f 84 9f 00 00
	00		 je	 $L15498
  0002b	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0002e	0f 84 96 00 00
	00		 je	 $L15498
  00034	83 f9 21	 cmp	 ecx, 33			; 00000021H
  00037	74 09		 je	 SHORT $L15487
  00039	83 f9 22	 cmp	 ecx, 34			; 00000022H
  0003c	75 79		 jne	 SHORT $L15496

; 374  :     case L'\"': RetVal = NTXML_RAWTOKEN_DOUBLEQUOTE;     break;

  0003e	6a 0a		 push	 10			; 0000000aH

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00040	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00041	c3		 ret	 0
$L15487:

; 378  :     case L'!':  RetVal = NTXML_RAWTOKEN_BANG;            break;

  00042	6a 10		 push	 16			; 00000010H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00044	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00045	c3		 ret	 0
$L15494:

; 385  :     case L'#':  RetVal = NTXML_RAWTOKEN_POUNDSIGN;       break;

  00046	6a 17		 push	 23			; 00000017H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00048	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00049	c3		 ret	 0
$L16288:

; 363  : 
; 364  :     NTXML_RAW_TOKEN RetVal;
; 365  : 
; 366  :     switch (ulCharacter) {

  0004a	83 e9 26	 sub	 ecx, 38			; 00000026H
  0004d	74 1e		 je	 SHORT $L15493
  0004f	49		 dec	 ecx
  00050	74 17		 je	 SHORT $L15484
  00052	83 e9 06	 sub	 ecx, 6
  00055	74 0e		 je	 SHORT $L15476
  00057	49		 dec	 ecx
  00058	74 07		 je	 SHORT $L15477
  0005a	49		 dec	 ecx
  0005b	75 5a		 jne	 SHORT $L15496

; 370  :     case L'/':  RetVal = NTXML_RAWTOKEN_FORWARDSLASH;    break;

  0005d	6a 05		 push	 5

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  0005f	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00060	c3		 ret	 0
$L15477:

; 368  :     case L'.':  RetVal = NTXML_RAWTOKEN_DOT;             break;

  00061	6a 02		 push	 2

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00063	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00064	c3		 ret	 0
$L15476:

; 367  :     case L'-':  RetVal = NTXML_RAWTOKEN_DASH;            break;

  00065	33 c0		 xor	 eax, eax
  00067	40		 inc	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00068	c3		 ret	 0
$L15484:

; 375  :     case L'\'': RetVal = NTXML_RAWTOKEN_QUOTE;           break;

  00069	6a 09		 push	 9

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  0006b	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  0006c	c3		 ret	 0
$L15493:

; 384  :     case L'&':  RetVal = NTXML_RAWTOKEN_AMPERSTAND;      break;

  0006d	6a 16		 push	 22			; 00000016H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  0006f	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00070	c3		 ret	 0
$L15490:

; 381  :     case L':':  RetVal = NTXML_RAWTOKEN_COLON;           break;

  00071	6a 13		 push	 19			; 00000013H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00073	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00074	c3		 ret	 0
$L16287:

; 363  : 
; 364  :     NTXML_RAW_TOKEN RetVal;
; 365  : 
; 366  :     switch (ulCharacter) {

  00075	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00078	77 2b		 ja	 SHORT $L16289
  0007a	74 25		 je	 SHORT $L15485
  0007c	83 e9 3b	 sub	 ecx, 59			; 0000003bH
  0007f	74 1c		 je	 SHORT $L15491
  00081	49		 dec	 ecx
  00082	74 15		 je	 SHORT $L15481
  00084	49		 dec	 ecx
  00085	74 0e		 je	 SHORT $L15478
  00087	49		 dec	 ecx
  00088	74 07		 je	 SHORT $L15480
  0008a	49		 dec	 ecx
  0008b	75 2a		 jne	 SHORT $L15496

; 373  :     case L'?':  RetVal = NTXML_RAWTOKEN_QUESTIONMARK;    break;

  0008d	6a 08		 push	 8

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  0008f	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00090	c3		 ret	 0
$L15480:

; 371  :     case L'>':  RetVal = NTXML_RAWTOKEN_GT;              break;

  00091	6a 06		 push	 6

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00093	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00094	c3		 ret	 0
$L15478:

; 369  :     case L'=':  RetVal = NTXML_RAWTOKEN_EQUALS;          break;

  00095	6a 04		 push	 4

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  00097	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  00098	c3		 ret	 0
$L15481:

; 372  :     case L'<':  RetVal = NTXML_RAWTOKEN_LT;              break;

  00099	6a 07		 push	 7

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  0009b	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  0009c	c3		 ret	 0
$L15491:

; 382  :     case L';':  RetVal = NTXML_RAWTOKEN_SEMICOLON;       break;

  0009d	6a 14		 push	 20			; 00000014H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  0009f	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000a0	c3		 ret	 0
$L15485:

; 376  :     case L'[':  RetVal = NTXML_RAWTOKEN_OPENBRACKET;     break;

  000a1	6a 0e		 push	 14			; 0000000eH

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  000a3	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000a4	c3		 ret	 0
$L16289:

; 363  : 
; 364  :     NTXML_RAW_TOKEN RetVal;
; 365  : 
; 366  :     switch (ulCharacter) {

  000a5	83 e9 5d	 sub	 ecx, 93			; 0000005dH
  000a8	74 1d		 je	 SHORT $L15486
  000aa	49		 dec	 ecx
  000ab	49		 dec	 ecx
  000ac	74 15		 je	 SHORT $L15492
  000ae	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  000b1	74 0c		 je	 SHORT $L15488
  000b3	49		 dec	 ecx
  000b4	49		 dec	 ecx
  000b5	74 04		 je	 SHORT $L15489
$L15496:

; 386  :     case 0x09:
; 387  :     case 0x0a:
; 388  :     case 0x0d:
; 389  :     case 0x20:  RetVal = NTXML_RAWTOKEN_WHITESPACE;      break;
; 390  : 
; 391  :     default:
; 392  :         if (_RtlIsCharacterText(ulCharacter))
; 393  :             RetVal = NTXML_RAWTOKEN_TEXT;

  000b7	6a 0c		 push	 12			; 0000000cH

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  000b9	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000ba	c3		 ret	 0
$L15489:

; 380  :     case L'}':  RetVal = NTXML_RAWTOKEN_CLOSECURLY;      break;

  000bb	6a 12		 push	 18			; 00000012H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  000bd	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000be	c3		 ret	 0
$L15488:

; 379  :     case L'{':  RetVal = NTXML_RAWTOKEN_OPENCURLY;       break;

  000bf	6a 11		 push	 17			; 00000011H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  000c1	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000c2	c3		 ret	 0
$L15492:

; 383  :     case L'_':  RetVal = NTXML_RAWTOKEN_UNDERSCORE;      break;

  000c3	6a 15		 push	 21			; 00000015H

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  000c5	58		 pop	 eax

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000c6	c3		 ret	 0
$L15486:

; 377  :     case L']':  RetVal = NTXML_RAWTOKEN_CLOSEBRACKET;    break;

  000c7	6a 0f		 push	 15			; 0000000fH
  000c9	58		 pop	 eax
$L15498:

; 394  :         else
; 395  :             RetVal = NTXML_RAWTOKEN_ERROR;
; 396  :     }
; 397  : 
; 398  :     return RetVal;
; 399  : }

  000ca	c3		 ret	 0
@_RtlpDecodeCharacter@4 ENDP
_TEXT	ENDS
PUBLIC	@RtlRawXmlTokenizer_SingleToken@8
; Function compile flags: /Ogsy
;	COMDAT @RtlRawXmlTokenizer_SingleToken@8
_TEXT	SEGMENT
@RtlRawXmlTokenizer_SingleToken@8 PROC NEAR		; COMDAT
; _pState$ = ecx
; _pToken$ = edx

; 407  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 408  :     ULONG ulToken;
; 409  : 
; 410  :     //
; 411  :     // Determine if this hits the single-item cache, or we're at the end
; 412  :     // of the document
; 413  :     //
; 414  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  00004	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00007	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0000a	8b f2		 mov	 esi, edx
  0000c	72 15		 jb	 SHORT $L15506

; 415  :         pToken->Run.cbData = 0;

  0000e	83 66 08 00	 and	 DWORD PTR [esi+8], 0

; 416  :         pToken->Run.pvData = pState->pvDocumentEnd;

  00012	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00015	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 417  :         pToken->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00018	c7 06 03 00 00
	00		 mov	 DWORD PTR [esi], 3

; 418  :         return STATUS_SUCCESS;

  0001e	e9 0d 01 00 00	 jmp	 $L16329
$L15506:

; 419  :     }
; 420  : 
; 421  :     //
; 422  :     // Look at the single next input token
; 423  :     //
; 424  :     ASSERT(pState->NextCharacterResult == STATUS_SUCCESS);
; 425  :     ASSERT(pState->cbBytesInLastRawToken == pState->DefaultCharacterSize);
; 426  : 
; 427  :     ulToken = pState->pfnNextChar(pState);

  00023	8b cf		 mov	 ecx, edi
  00025	ff 57 10	 call	 DWORD PTR [edi+16]

; 428  : 
; 429  :     if ((ulToken == 0) && !NT_SUCCESS(pState->NextCharacterResult)) {

  00028	85 c0		 test	 eax, eax
  0002a	75 0e		 jne	 SHORT $L15511
  0002c	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0002f	85 c9		 test	 ecx, ecx
  00031	7d 07		 jge	 SHORT $L15511

; 430  :         return pState->NextCharacterResult;

  00033	8b c1		 mov	 eax, ecx
  00035	e9 f8 00 00 00	 jmp	 $L15504
$L15511:

; 431  :     }
; 432  : 
; 433  :     //
; 434  :     // Set up returns
; 435  :     //
; 436  :     pToken->Run.pvData = pState->pvCursor;
; 437  :     pToken->Run.cbData = pState->cbBytesInLastRawToken;
; 438  :     pToken->TokenName = _RtlpDecodeCharacter(ulToken);

  0003a	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  0003d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00040	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00043	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00046	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00049	77 77		 ja	 SHORT $L16326
  0004b	74 71		 je	 SHORT $L16316
  0004d	83 f8 23	 cmp	 eax, 35			; 00000023H
  00050	77 44		 ja	 SHORT $L16327
  00052	74 3b		 je	 SHORT $L16320
  00054	83 f8 09	 cmp	 eax, 9
  00057	0f 82 a7 00 00
	00		 jb	 $L16322
  0005d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00060	76 26		 jbe	 SHORT $L16321
  00062	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00065	74 21		 je	 SHORT $L16321
  00067	83 f8 20	 cmp	 eax, 32			; 00000020H
  0006a	74 1c		 je	 SHORT $L16321
  0006c	83 f8 21	 cmp	 eax, 33			; 00000021H
  0006f	74 10		 je	 SHORT $L16313
  00071	83 f8 22	 cmp	 eax, 34			; 00000022H
  00074	0f 85 8a 00 00
	00		 jne	 $L16322
  0007a	6a 0a		 push	 10			; 0000000aH
  0007c	e9 95 00 00 00	 jmp	 $L16330
$L16313:
  00081	6a 10		 push	 16			; 00000010H
  00083	e9 8e 00 00 00	 jmp	 $L16330
$L16321:
  00088	6a 0d		 push	 13			; 0000000dH
  0008a	e9 87 00 00 00	 jmp	 $L16330
$L16320:
  0008f	6a 17		 push	 23			; 00000017H
  00091	e9 80 00 00 00	 jmp	 $L16330
$L16327:
  00096	83 e8 26	 sub	 eax, 38			; 00000026H
  00099	74 1f		 je	 SHORT $L16319
  0009b	48		 dec	 eax
  0009c	74 18		 je	 SHORT $L16310
  0009e	83 e8 06	 sub	 eax, 6
  000a1	74 0e		 je	 SHORT $L16302
  000a3	48		 dec	 eax
  000a4	74 07		 je	 SHORT $L16303
  000a6	48		 dec	 eax
  000a7	75 5b		 jne	 SHORT $L16322
  000a9	6a 05		 push	 5
  000ab	eb 69		 jmp	 SHORT $L16330
$L16303:
  000ad	6a 02		 push	 2
  000af	eb 65		 jmp	 SHORT $L16330
$L16302:
  000b1	33 c0		 xor	 eax, eax
  000b3	40		 inc	 eax
  000b4	eb 61		 jmp	 SHORT $L16324
$L16310:
  000b6	6a 09		 push	 9
  000b8	eb 5c		 jmp	 SHORT $L16330
$L16319:
  000ba	6a 16		 push	 22			; 00000016H
  000bc	eb 58		 jmp	 SHORT $L16330
$L16316:
  000be	6a 13		 push	 19			; 00000013H
  000c0	eb 54		 jmp	 SHORT $L16330
$L16326:
  000c2	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  000c5	77 2b		 ja	 SHORT $L16328
  000c7	74 25		 je	 SHORT $L16311
  000c9	83 e8 3b	 sub	 eax, 59			; 0000003bH
  000cc	74 1c		 je	 SHORT $L16317
  000ce	48		 dec	 eax
  000cf	74 15		 je	 SHORT $L16307
  000d1	48		 dec	 eax
  000d2	74 0e		 je	 SHORT $L16304
  000d4	48		 dec	 eax
  000d5	74 07		 je	 SHORT $L16306
  000d7	48		 dec	 eax
  000d8	75 2a		 jne	 SHORT $L16322
  000da	6a 08		 push	 8
  000dc	eb 38		 jmp	 SHORT $L16330
$L16306:
  000de	6a 06		 push	 6
  000e0	eb 34		 jmp	 SHORT $L16330
$L16304:
  000e2	6a 04		 push	 4
  000e4	eb 30		 jmp	 SHORT $L16330
$L16307:
  000e6	6a 07		 push	 7
  000e8	eb 2c		 jmp	 SHORT $L16330
$L16317:
  000ea	6a 14		 push	 20			; 00000014H
  000ec	eb 28		 jmp	 SHORT $L16330
$L16311:
  000ee	6a 0e		 push	 14			; 0000000eH
  000f0	eb 24		 jmp	 SHORT $L16330
$L16328:
  000f2	83 e8 5d	 sub	 eax, 93			; 0000005dH
  000f5	74 1d		 je	 SHORT $L16312
  000f7	48		 dec	 eax
  000f8	48		 dec	 eax
  000f9	74 15		 je	 SHORT $L16318
  000fb	83 e8 1c	 sub	 eax, 28			; 0000001cH
  000fe	74 0c		 je	 SHORT $L16314
  00100	48		 dec	 eax
  00101	48		 dec	 eax
  00102	74 04		 je	 SHORT $L16315
$L16322:
  00104	6a 0c		 push	 12			; 0000000cH
  00106	eb 0e		 jmp	 SHORT $L16330
$L16315:
  00108	6a 12		 push	 18			; 00000012H
  0010a	eb 0a		 jmp	 SHORT $L16330
$L16314:
  0010c	6a 11		 push	 17			; 00000011H
  0010e	eb 06		 jmp	 SHORT $L16330
$L16318:
  00110	6a 15		 push	 21			; 00000015H
  00112	eb 02		 jmp	 SHORT $L16330
$L16312:
  00114	6a 0f		 push	 15			; 0000000fH
$L16330:
  00116	58		 pop	 eax
$L16324:
  00117	89 06		 mov	 DWORD PTR [esi], eax

; 439  : 
; 440  :     if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  00119	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0011c	39 47 2c	 cmp	 DWORD PTR [edi+44], eax
  0011f	74 03		 je	 SHORT $L15512

; 441  :         pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00121	89 47 2c	 mov	 DWORD PTR [edi+44], eax
$L15512:

; 442  :     }
; 443  : 
; 444  :     //
; 445  :     // Update cache
; 446  :     //
; 447  :     pState->pvLastCursor = pState->pvCursor;

  00124	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00127	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 448  :     pState->LastTokenCache = *pToken;

  0012a	83 c7 1c	 add	 edi, 28			; 0000001cH
  0012d	a5		 movsd
  0012e	a5		 movsd
  0012f	a5		 movsd
$L16329:

; 449  : 
; 450  :     return STATUS_SUCCESS;

  00130	33 c0		 xor	 eax, eax
$L15504:
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi

; 451  : }

  00134	c3		 ret	 0
@RtlRawXmlTokenizer_SingleToken@8 ENDP
_TEXT	ENDS
PUBLIC	@RtlRawXmlTokenizer_GatherWhitespace@12
; Function compile flags: /Ogsy
;	COMDAT @RtlRawXmlTokenizer_GatherWhitespace@12
_TEXT	SEGMENT
_pTerminator$ = 8
@RtlRawXmlTokenizer_GatherWhitespace@12 PROC NEAR	; COMDAT
; _pState$ = ecx
; _pWhitespace$ = edx

; 464  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 465  :     ULONG ulCharacter;
; 466  :     NTXML_RAW_TOKEN NextToken;
; 467  : 
; 468  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  00004	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00007	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0000a	8b f2		 mov	 esi, edx
  0000c	72 15		 jb	 SHORT $L15524

; 469  :         RtlZeroMemory(pState, sizeof(*pState));

  0000e	33 c0		 xor	 eax, eax
  00010	6a 0e		 push	 14			; 0000000eH
  00012	59		 pop	 ecx
  00013	f3 ab		 rep stosd

; 470  :         RtlZeroMemory(pTerminator, sizeof(*pTerminator));

  00015	8b 7c 24 0c	 mov	 edi, DWORD PTR _pTerminator$[esp+4]
  00019	ab		 stosd
  0001a	ab		 stosd
  0001b	ab		 stosd

; 471  :         return STATUS_SUCCESS;

  0001c	33 c0		 xor	 eax, eax
  0001e	e9 6e 01 00 00	 jmp	 $L15521
$L15524:
  00023	53		 push	 ebx

; 472  :     }
; 473  : 
; 474  :     //
; 475  :     // Record starting point
; 476  :     //
; 477  :     pWhitespace->Run.pvData = pState->pvCursor;

  00024	6a 0d		 push	 13			; 0000000dH
  00026	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00029	5b		 pop	 ebx
$L15528:

; 478  : 
; 479  :     ASSERT(pState->NextCharacterResult == STATUS_SUCCESS);
; 480  :     ASSERT(pState->cbBytesInLastRawToken == pState->DefaultCharacterSize);
; 481  : 
; 482  :     do
; 483  :     {
; 484  :         //
; 485  :         // Gather a character
; 486  :         //
; 487  :         ulCharacter = pState->pfnNextChar(pState);

  0002a	8b cf		 mov	 ecx, edi
  0002c	ff 57 10	 call	 DWORD PTR [edi+16]

; 488  : 
; 489  :         //
; 490  :         // If this is tab, space, cr or lf, then continue.  Otherwise,
; 491  :         // quit.
; 492  :         //
; 493  :         switch (ulCharacter) {

  0002f	85 c0		 test	 eax, eax
  00031	74 4d		 je	 SHORT $L15535
  00033	83 f8 08	 cmp	 eax, 8
  00036	76 5c		 jbe	 SHORT $SetTerminator$15539
  00038	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0003b	76 09		 jbe	 SHORT $L15540
  0003d	3b c3		 cmp	 eax, ebx
  0003f	74 05		 je	 SHORT $L15540
  00041	83 f8 20	 cmp	 eax, 32			; 00000020H
  00044	75 4e		 jne	 SHORT $SetTerminator$15539
$L15540:

; 515  :             }
; 516  :             goto Done;
; 517  :             break;
; 518  :         }
; 519  : 
; 520  :         //
; 521  :         // Advance cursor
; 522  :         //
; 523  :         ADVANCE_PVOID(pState->pvCursor, pState->cbBytesInLastRawToken);

  00046	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]

; 524  : 
; 525  :         if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  00049	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  0004c	01 47 0c	 add	 DWORD PTR [edi+12], eax
  0004f	3b c1		 cmp	 eax, ecx
  00051	74 03		 je	 SHORT $L15529

; 526  :             pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00053	89 4f 2c	 mov	 DWORD PTR [edi+44], ecx
$L15529:

; 527  :         }
; 528  :     }
; 529  :     while (pState->pvCursor < pState->pvDocumentEnd);

  00056	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00059	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0005c	72 cc		 jb	 SHORT $L15528

; 530  : 
; 531  :     //
; 532  :     // Hit the end of the document during whitespace?
; 533  :     //
; 534  :     if (pState->pvCursor == pState->pvDocumentEnd) {

  0005e	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00061	0f 85 17 01 00
	00		 jne	 $Done$15543

; 535  :         pTerminator->Run.cbData = 0;

  00067	8b 44 24 10	 mov	 eax, DWORD PTR _pTerminator$[esp+8]
  0006b	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 536  :         pTerminator->Run.pvData = pState->pvDocumentEnd;

  0006f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 537  :         pTerminator->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00075	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
  0007b	e9 fe 00 00 00	 jmp	 $Done$15543
$L15535:

; 494  :         case 0:
; 495  :             if (!NT_SUCCESS(pState->NextCharacterResult)) {

  00080	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00083	85 c9		 test	 ecx, ecx
  00085	7d 0d		 jge	 SHORT $SetTerminator$15539

; 496  :                 pState->pvCursor = pWhitespace->Run.pvData;

  00087	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008a	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 497  :                 return pState->NextCharacterResult;

  0008d	8b c1		 mov	 eax, ecx
  0008f	e9 fc 00 00 00	 jmp	 $L16372
$SetTerminator$15539:

; 498  :             }
; 499  :             else {
; 500  :                 goto SetTerminator;
; 501  :             }
; 502  :             break;
; 503  : 
; 504  :         case 0x9:
; 505  :         case 0xa:
; 506  :         case 0xd:
; 507  :         case 0x20:
; 508  :             break;
; 509  :         default:
; 510  : SetTerminator:
; 511  :             if (pTerminator) {

  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pTerminator$[esp+8]
  00098	85 c9		 test	 ecx, ecx
  0009a	0f 84 de 00 00
	00		 je	 $Done$15543

; 512  :                 pTerminator->Run.pvData = pState->pvCursor;
; 513  :                 pTerminator->Run.cbData = pState->cbBytesInLastRawToken;
; 514  :                 pTerminator->TokenName = _RtlpDecodeCharacter(ulCharacter);

  000a0	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  000a3	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  000a6	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000a9	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  000ac	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  000af	77 76		 ja	 SHORT $L16366
  000b1	74 70		 je	 SHORT $L16356
  000b3	83 f8 23	 cmp	 eax, 35			; 00000023H
  000b6	77 43		 ja	 SHORT $L16367
  000b8	74 3a		 je	 SHORT $L16360
  000ba	83 f8 09	 cmp	 eax, 9
  000bd	0f 82 a6 00 00
	00		 jb	 $L16362
  000c3	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000c6	76 25		 jbe	 SHORT $L16361
  000c8	3b c3		 cmp	 eax, ebx
  000ca	74 21		 je	 SHORT $L16361
  000cc	83 f8 20	 cmp	 eax, 32			; 00000020H
  000cf	74 1c		 je	 SHORT $L16361
  000d1	83 f8 21	 cmp	 eax, 33			; 00000021H
  000d4	74 10		 je	 SHORT $L16353
  000d6	83 f8 22	 cmp	 eax, 34			; 00000022H
  000d9	0f 85 8a 00 00
	00		 jne	 $L16362
  000df	6a 0a		 push	 10			; 0000000aH
  000e1	e9 95 00 00 00	 jmp	 $L16373
$L16353:
  000e6	6a 10		 push	 16			; 00000010H
  000e8	e9 8e 00 00 00	 jmp	 $L16373
$L16361:
  000ed	8b c3		 mov	 eax, ebx
  000ef	e9 88 00 00 00	 jmp	 $L16364
$L16360:
  000f4	6a 17		 push	 23			; 00000017H
  000f6	e9 80 00 00 00	 jmp	 $L16373
$L16367:
  000fb	83 e8 26	 sub	 eax, 38			; 00000026H
  000fe	74 1f		 je	 SHORT $L16359
  00100	48		 dec	 eax
  00101	74 18		 je	 SHORT $L16350
  00103	83 e8 06	 sub	 eax, 6
  00106	74 0e		 je	 SHORT $L16342
  00108	48		 dec	 eax
  00109	74 07		 je	 SHORT $L16343
  0010b	48		 dec	 eax
  0010c	75 5b		 jne	 SHORT $L16362
  0010e	6a 05		 push	 5
  00110	eb 69		 jmp	 SHORT $L16373
$L16343:
  00112	6a 02		 push	 2
  00114	eb 65		 jmp	 SHORT $L16373
$L16342:
  00116	33 c0		 xor	 eax, eax
  00118	40		 inc	 eax
  00119	eb 61		 jmp	 SHORT $L16364
$L16350:
  0011b	6a 09		 push	 9
  0011d	eb 5c		 jmp	 SHORT $L16373
$L16359:
  0011f	6a 16		 push	 22			; 00000016H
  00121	eb 58		 jmp	 SHORT $L16373
$L16356:
  00123	6a 13		 push	 19			; 00000013H
  00125	eb 54		 jmp	 SHORT $L16373
$L16366:
  00127	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0012a	77 2b		 ja	 SHORT $L16368
  0012c	74 25		 je	 SHORT $L16351
  0012e	83 e8 3b	 sub	 eax, 59			; 0000003bH
  00131	74 1c		 je	 SHORT $L16357
  00133	48		 dec	 eax
  00134	74 15		 je	 SHORT $L16347
  00136	48		 dec	 eax
  00137	74 0e		 je	 SHORT $L16344
  00139	48		 dec	 eax
  0013a	74 07		 je	 SHORT $L16346
  0013c	48		 dec	 eax
  0013d	75 2a		 jne	 SHORT $L16362
  0013f	6a 08		 push	 8
  00141	eb 38		 jmp	 SHORT $L16373
$L16346:
  00143	6a 06		 push	 6
  00145	eb 34		 jmp	 SHORT $L16373
$L16344:
  00147	6a 04		 push	 4
  00149	eb 30		 jmp	 SHORT $L16373
$L16347:
  0014b	6a 07		 push	 7
  0014d	eb 2c		 jmp	 SHORT $L16373
$L16357:
  0014f	6a 14		 push	 20			; 00000014H
  00151	eb 28		 jmp	 SHORT $L16373
$L16351:
  00153	6a 0e		 push	 14			; 0000000eH
  00155	eb 24		 jmp	 SHORT $L16373
$L16368:
  00157	83 e8 5d	 sub	 eax, 93			; 0000005dH
  0015a	74 1d		 je	 SHORT $L16352
  0015c	48		 dec	 eax
  0015d	48		 dec	 eax
  0015e	74 15		 je	 SHORT $L16358
  00160	83 e8 1c	 sub	 eax, 28			; 0000001cH
  00163	74 0c		 je	 SHORT $L16354
  00165	48		 dec	 eax
  00166	48		 dec	 eax
  00167	74 04		 je	 SHORT $L16355
$L16362:
  00169	6a 0c		 push	 12			; 0000000cH
  0016b	eb 0e		 jmp	 SHORT $L16373
$L16355:
  0016d	6a 12		 push	 18			; 00000012H
  0016f	eb 0a		 jmp	 SHORT $L16373
$L16354:
  00171	6a 11		 push	 17			; 00000011H
  00173	eb 06		 jmp	 SHORT $L16373
$L16358:
  00175	6a 15		 push	 21			; 00000015H
  00177	eb 02		 jmp	 SHORT $L16373
$L16352:
  00179	6a 0f		 push	 15			; 0000000fH
$L16373:
  0017b	58		 pop	 eax
$L16364:
  0017c	89 01		 mov	 DWORD PTR [ecx], eax
$Done$15543:

; 538  :     }
; 539  : 
; 540  :     //
; 541  :     // This label is here b/c if we terminated b/c of not-a-whitespace-thing,
; 542  :     // then don't bother to compare against the end of the document.
; 543  :     //
; 544  : Done:
; 545  : 
; 546  : 
; 547  :     //
; 548  :     // Set up the other stuff in the output.
; 549  :     //
; 550  :     pWhitespace->Run.cbData = (PBYTE)pState->pvCursor - (PBYTE)pWhitespace->Run.pvData;

  0017e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00181	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00184	2b c8		 sub	 ecx, eax
  00186	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 551  :     pWhitespace->TokenName = NTXML_RAWTOKEN_WHITESPACE;

  00189	89 1e		 mov	 DWORD PTR [esi], ebx

; 552  : 
; 553  :     //
; 554  :     // Rewind the cursor back to where we started from
; 555  :     //
; 556  :     pState->pvCursor = pWhitespace->Run.pvData;

  0018b	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 557  : 
; 558  :     return STATUS_SUCCESS;

  0018e	33 c0		 xor	 eax, eax
$L16372:
  00190	5b		 pop	 ebx
$L15521:
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi

; 559  : }

  00193	c2 04 00	 ret	 4
@RtlRawXmlTokenizer_GatherWhitespace@12 ENDP
_TEXT	ENDS
PUBLIC	@RtlRawXmlTokenizer_GatherPCData@12
; Function compile flags: /Ogsy
;	COMDAT @RtlRawXmlTokenizer_GatherPCData@12
_TEXT	SEGMENT
_pNextRawToken$ = 8
@RtlRawXmlTokenizer_GatherPCData@12 PROC NEAR		; COMDAT
; _pState$ = ecx
; _pPcData$ = edx

; 576  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 577  :     ULONG ulCbPcData = 0;
; 578  : 
; 579  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00009	57		 push	 edi
  0000a	8b fa		 mov	 edi, edx
  0000c	72 15		 jb	 SHORT $L15559

; 580  :         pPcData->Run.cbData = 0;

  0000e	83 67 08 00	 and	 DWORD PTR [edi+8], 0

; 581  :         pPcData->Run.pvData = pState->pvDocumentEnd;

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 582  :         pPcData->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00018	c7 07 03 00 00
	00		 mov	 DWORD PTR [edi], 3

; 583  :         return STATUS_SUCCESS;

  0001e	e9 99 00 00 00	 jmp	 $L15581
$L15559:

; 584  :     }
; 585  : 
; 586  :     pPcData->Run.pvData = pState->pvCursor;
; 587  :     pPcData->Run.cbData = 0;

  00023	83 67 08 00	 and	 DWORD PTR [edi+8], 0
  00027	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 588  :     pPcData->TokenName = NTXML_RAWTOKEN_TEXT;

  0002a	c7 07 0c 00 00
	00		 mov	 DWORD PTR [edi], 12	; 0000000cH
$L15561:

; 589  : 
; 590  :     do {
; 591  : 
; 592  :         ASSERT(pState->NextCharacterResult == STATUS_SUCCESS);
; 593  :         ASSERT(pState->cbBytesInLastRawToken == pState->DefaultCharacterSize);
; 594  : 
; 595  :         switch (pState->pfnNextChar(pState)) {

  00030	8b ce		 mov	 ecx, esi
  00032	ff 56 10	 call	 DWORD PTR [esi+16]
  00035	83 f8 26	 cmp	 eax, 38			; 00000026H
  00038	8b 4c 24 0c	 mov	 ecx, DWORD PTR _pNextRawToken$[esp+4]
  0003c	74 3b		 je	 SHORT $L15572
  0003e	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  00041	74 25		 je	 SHORT $L15570

; 610  :             goto NoMore;
; 611  : 
; 612  :             //
; 613  :             // Everything else is just normal pcdata to use
; 614  :             //
; 615  :         default:
; 616  :             
; 617  : 
; 618  :             //
; 619  :             // The next-char thing returned zero, this might be a failure.
; 620  :             //
; 621  :         case 0:
; 622  :             if (pState->NextCharacterResult != STATUS_SUCCESS) {

  00043	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  00047	75 1a		 jne	 SHORT $L16378

; 624  :             }
; 625  :             break;
; 626  :         }
; 627  : 
; 628  :         //
; 629  :         // Move the cursor along
; 630  :         //
; 631  :         ADVANCE_PVOID(pState->pvCursor, pState->cbBytesInLastRawToken);

  00049	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 632  : 
; 633  :         //
; 634  :         // If the size was different, then reset it
; 635  :         //
; 636  :         if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  0004c	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0004f	01 46 0c	 add	 DWORD PTR [esi+12], eax
  00052	3b c2		 cmp	 eax, edx
  00054	74 03		 je	 SHORT $L15562

; 637  :             pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00056	89 56 2c	 mov	 DWORD PTR [esi+44], edx
$L15562:

; 638  :         }
; 639  :     }
; 640  :     while (pState->pvCursor < pState->pvDocumentEnd);

  00059	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0005f	72 cf		 jb	 SHORT $L15561
  00061	eb 28		 jmp	 SHORT $NoMore$15571
$L16378:

; 623  :                 return pState->NextCharacterResult;

  00063	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00066	eb 56		 jmp	 SHORT $L15557
$L15570:

; 596  : 
; 597  :             //
; 598  :             // < terminates PCData, as it's probably the start of
; 599  :             // a new element.
; 600  :             //
; 601  :         case L'<':
; 602  :             pNextRawToken->Run.cbData = pState->cbBytesInLastRawToken;

  00068	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0006b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 603  :             pNextRawToken->Run.pvData = pState->pvCursor;

  0006e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 604  :             pNextRawToken->TokenName = NTXML_RAWTOKEN_LT;

  00071	c7 01 07 00 00
	00		 mov	 DWORD PTR [ecx], 7

; 605  :             goto NoMore;

  00077	eb 0f		 jmp	 SHORT $L16380
$L15572:

; 606  :         case L'&':
; 607  :             pNextRawToken->Run.cbData = pState->cbBytesInLastRawToken;

  00079	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 608  :             pNextRawToken->Run.pvData = pState->pvCursor;

  0007f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 609  :             pNextRawToken->TokenName = NTXML_RAWTOKEN_AMPERSTAND;

  00082	c7 01 16 00 00
	00		 mov	 DWORD PTR [ecx], 22	; 00000016H
$L16380:

; 608  :             pNextRawToken->Run.pvData = pState->pvCursor;

  00088	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$NoMore$15571:

; 641  : 
; 642  : NoMore:
; 643  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  0008b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008e	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00091	72 10		 jb	 SHORT $L15578

; 644  :         pNextRawToken->Run.cbData = 0;

  00093	83 61 08 00	 and	 DWORD PTR [ecx+8], 0

; 645  :         pNextRawToken->Run.pvData = pState->pvDocumentEnd;

  00097	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 646  :         pNextRawToken->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  0009d	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3
$L15578:

; 647  :     }
; 648  : 
; 649  :     pPcData->Run.cbData = (PBYTE)pState->pvCursor - (PBYTE)pPcData->Run.pvData;

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000a9	2b c8		 sub	 ecx, eax
  000ab	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 650  :     pState->pvCursor = pPcData->Run.pvData;

  000ae	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 651  : 
; 652  :     if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  000b1	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000b4	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  000b7	74 03		 je	 SHORT $L15581

; 653  :         pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  000b9	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15581:

; 654  :     }
; 655  : 
; 656  :     return STATUS_SUCCESS;

  000bc	33 c0		 xor	 eax, eax
$L15557:
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi

; 657  : }

  000c0	c2 04 00	 ret	 4
@RtlRawXmlTokenizer_GatherPCData@12 ENDP
_TEXT	ENDS
PUBLIC	@RtlRawXmlTokenizer_GatherNTokens@12
; Function compile flags: /Ogsy
;	COMDAT @RtlRawXmlTokenizer_GatherNTokens@12
_TEXT	SEGMENT
_ulTokenCount$ = 8
@RtlRawXmlTokenizer_GatherNTokens@12 PROC NEAR		; COMDAT
; _pState$ = ecx
; _pTokens$ = edx

; 667  : {

  00000	53		 push	 ebx

; 668  :     PVOID pvStart = pState->pvCursor;
; 669  : 
; 670  :     //
; 671  :     // If we're at the document end, set all the tokens to the "end" state
; 672  :     // and return immediately.
; 673  :     //
; 674  :     if ((ulTokenCount == 0) || (pState->pvCursor >= pState->pvDocumentEnd)) {

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _ulTokenCount$[esp]
  00005	85 db		 test	 ebx, ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 6e 0c	 mov	 ebp, DWORD PTR [esi+12]
  0000e	57		 push	 edi
  0000f	8b fa		 mov	 edi, edx
  00011	0f 84 47 01 00
	00		 je	 $L16422
  00017	3b 6e 08	 cmp	 ebp, DWORD PTR [esi+8]
  0001a	0f 83 22 01 00
	00		 jae	 $FillEndOfDocumentTokens$15594
$L15595:

; 675  :         goto FillEndOfDocumentTokens;
; 676  :     }
; 677  : 
; 678  :     //
; 679  :     // While we've got tokens left, and we're not at the end of the
; 680  :     // document, start grabbing chunklets
; 681  :     //
; 682  :     do {
; 683  : 
; 684  :         ULONG ulCharacter;
; 685  : 
; 686  :         ASSERT(pState->NextCharacterResult == STATUS_SUCCESS);
; 687  :         ASSERT(pState->cbBytesInLastRawToken == pState->DefaultCharacterSize);
; 688  : 
; 689  :         ulCharacter = pState->pfnNextChar(pState);

  00020	8b ce		 mov	 ecx, esi
  00022	ff 56 10	 call	 DWORD PTR [esi+16]

; 690  : 
; 691  :         //
; 692  :         // If this was a zero character, then there might have been an error - 
; 693  :         // see if the status was set, and if so, return
; 694  :         //
; 695  :         if ((ulCharacter == 0) && (pState->NextCharacterResult != STATUS_SUCCESS)) {

  00025	85 c0		 test	 eax, eax
  00027	75 09		 jne	 SHORT $L15602
  00029	39 46 30	 cmp	 DWORD PTR [esi+48], eax
  0002c	0f 85 40 01 00
	00		 jne	 $L16421
$L15602:

; 697  :         }
; 698  : 
; 699  :         //
; 700  :         // Decode the name
; 701  :         //
; 702  :         pTokens->TokenName = _RtlpDecodeCharacter(ulCharacter);

  00032	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00035	77 77		 ja	 SHORT $L16389
  00037	74 71		 je	 SHORT $L16410
  00039	83 f8 23	 cmp	 eax, 35			; 00000023H
  0003c	77 44		 ja	 SHORT $L16390
  0003e	74 3b		 je	 SHORT $L16414
  00040	83 f8 09	 cmp	 eax, 9
  00043	0f 82 a7 00 00
	00		 jb	 $L16416
  00049	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0004c	76 26		 jbe	 SHORT $L16424
  0004e	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00051	74 21		 je	 SHORT $L16424
  00053	83 f8 20	 cmp	 eax, 32			; 00000020H
  00056	74 1c		 je	 SHORT $L16424
  00058	83 f8 21	 cmp	 eax, 33			; 00000021H
  0005b	74 10		 je	 SHORT $L16407
  0005d	83 f8 22	 cmp	 eax, 34			; 00000022H
  00060	0f 85 8a 00 00
	00		 jne	 $L16416
  00066	6a 0a		 push	 10			; 0000000aH
  00068	e9 95 00 00 00	 jmp	 $L16426
$L16407:
  0006d	6a 10		 push	 16			; 00000010H
  0006f	e9 8e 00 00 00	 jmp	 $L16426
$L16424:
  00074	6a 0d		 push	 13			; 0000000dH
  00076	e9 87 00 00 00	 jmp	 $L16426
$L16414:
  0007b	6a 17		 push	 23			; 00000017H
  0007d	e9 80 00 00 00	 jmp	 $L16426
$L16390:
  00082	83 e8 26	 sub	 eax, 38			; 00000026H
  00085	74 1f		 je	 SHORT $L16413
  00087	48		 dec	 eax
  00088	74 18		 je	 SHORT $L16404
  0008a	83 e8 06	 sub	 eax, 6
  0008d	74 0e		 je	 SHORT $L16396
  0008f	48		 dec	 eax
  00090	74 07		 je	 SHORT $L16397
  00092	48		 dec	 eax
  00093	75 5b		 jne	 SHORT $L16416
  00095	6a 05		 push	 5
  00097	eb 69		 jmp	 SHORT $L16426
$L16397:
  00099	6a 02		 push	 2
  0009b	eb 65		 jmp	 SHORT $L16426
$L16396:
  0009d	33 c0		 xor	 eax, eax
  0009f	40		 inc	 eax
  000a0	eb 61		 jmp	 SHORT $L16418
$L16404:
  000a2	6a 09		 push	 9
  000a4	eb 5c		 jmp	 SHORT $L16426
$L16413:
  000a6	6a 16		 push	 22			; 00000016H
  000a8	eb 58		 jmp	 SHORT $L16426
$L16410:
  000aa	6a 13		 push	 19			; 00000013H
  000ac	eb 54		 jmp	 SHORT $L16426
$L16389:
  000ae	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  000b1	77 2b		 ja	 SHORT $L16391
  000b3	74 25		 je	 SHORT $L16405
  000b5	83 e8 3b	 sub	 eax, 59			; 0000003bH
  000b8	74 1c		 je	 SHORT $L16411
  000ba	48		 dec	 eax
  000bb	74 15		 je	 SHORT $L16401
  000bd	48		 dec	 eax
  000be	74 0e		 je	 SHORT $L16398
  000c0	48		 dec	 eax
  000c1	74 07		 je	 SHORT $L16400
  000c3	48		 dec	 eax
  000c4	75 2a		 jne	 SHORT $L16416
  000c6	6a 08		 push	 8
  000c8	eb 38		 jmp	 SHORT $L16426
$L16400:
  000ca	6a 06		 push	 6
  000cc	eb 34		 jmp	 SHORT $L16426
$L16398:
  000ce	6a 04		 push	 4
  000d0	eb 30		 jmp	 SHORT $L16426
$L16401:
  000d2	6a 07		 push	 7
  000d4	eb 2c		 jmp	 SHORT $L16426
$L16411:
  000d6	6a 14		 push	 20			; 00000014H
  000d8	eb 28		 jmp	 SHORT $L16426
$L16405:
  000da	6a 0e		 push	 14			; 0000000eH
  000dc	eb 24		 jmp	 SHORT $L16426
$L16391:
  000de	83 e8 5d	 sub	 eax, 93			; 0000005dH
  000e1	74 1d		 je	 SHORT $L16406
  000e3	48		 dec	 eax
  000e4	48		 dec	 eax
  000e5	74 15		 je	 SHORT $L16412
  000e7	83 e8 1c	 sub	 eax, 28			; 0000001cH
  000ea	74 0c		 je	 SHORT $L16408
  000ec	48		 dec	 eax
  000ed	48		 dec	 eax
  000ee	74 04		 je	 SHORT $L16409
$L16416:
  000f0	6a 0c		 push	 12			; 0000000cH
  000f2	eb 0e		 jmp	 SHORT $L16426
$L16409:
  000f4	6a 12		 push	 18			; 00000012H
  000f6	eb 0a		 jmp	 SHORT $L16426
$L16408:
  000f8	6a 11		 push	 17			; 00000011H
  000fa	eb 06		 jmp	 SHORT $L16426
$L16412:
  000fc	6a 15		 push	 21			; 00000015H
  000fe	eb 02		 jmp	 SHORT $L16426
$L16406:
  00100	6a 0f		 push	 15			; 0000000fH
$L16426:
  00102	58		 pop	 eax
$L16418:
  00103	89 07		 mov	 DWORD PTR [edi], eax

; 703  :         pTokens->Run.cbData = pState->cbBytesInLastRawToken;

  00105	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00108	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 704  :         pTokens->Run.pvData = pState->pvCursor;

  0010b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0010e	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 705  : 
; 706  :         //
; 707  :         // If this was multibyte, reset the count back
; 708  :         //
; 709  :         if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  00111	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00114	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  00117	74 03		 je	 SHORT $L15603

; 710  :             pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00119	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15603:

; 711  :         }
; 712  : 
; 713  :         ADVANCE_PVOID(pState->pvCursor, pTokens->Run.cbData);

  0011c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0011f	01 46 0c	 add	 DWORD PTR [esi+12], eax

; 714  :         pTokens++;

  00122	83 c7 0c	 add	 edi, 12			; 0000000cH

; 715  : 
; 716  :     }
; 717  :     while (ulTokenCount-- && (pState->pvCursor < pState->pvDocumentEnd));

  00125	8b c3		 mov	 eax, ebx
  00127	4b		 dec	 ebx
  00128	85 c0		 test	 eax, eax
  0012a	74 0c		 je	 SHORT $L15605
  0012c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0012f	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00132	0f 82 e8 fe ff
	ff		 jb	 $L15595
$L15605:

; 718  : 
; 719  :     if (ulTokenCount == -1) {

  00138	83 fb ff	 cmp	 ebx, -1
  0013b	75 02		 jne	 SHORT $L15606

; 720  :         ulTokenCount = 0;

  0013d	33 db		 xor	 ebx, ebx
$L15606:

; 721  :     }
; 722  : 
; 723  :     //
; 724  :     // Rewind input cursor
; 725  :     //
; 726  :     pState->pvCursor = pvStart;

  0013f	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
$FillEndOfDocumentTokens$15594:

; 727  : 
; 728  :     //
; 729  :     // Did we find the end of the document before we ran out of tokens from the
; 730  :     // input?  Then fill the remainder with the "end of document" token
; 731  :     //
; 732  : FillEndOfDocumentTokens:
; 733  :     while (ulTokenCount--) {

  00142	85 db		 test	 ebx, ebx
  00144	74 18		 je	 SHORT $L16422
  00146	8b c3		 mov	 eax, ebx
$L15608:

; 734  :         pTokens->Run.pvData = pState->pvDocumentEnd;

  00148	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 735  :         pTokens->Run.cbData = 0;

  0014b	83 67 08 00	 and	 DWORD PTR [edi+8], 0
  0014f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 736  :         pTokens->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00152	c7 07 03 00 00
	00		 mov	 DWORD PTR [edi], 3

; 737  :         pTokens++;

  00158	83 c7 0c	 add	 edi, 12			; 0000000cH
  0015b	48		 dec	 eax
  0015c	75 ea		 jne	 SHORT $L15608
$L16422:

; 738  :     }
; 739  : 
; 740  :     if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  0015e	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00161	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  00164	74 03		 je	 SHORT $L15610

; 741  :         pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00166	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15610:

; 742  :     }
; 743  : 
; 744  :     return STATUS_SUCCESS;

  00169	33 c0		 xor	 eax, eax
$L15590:
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5d		 pop	 ebp
  0016e	5b		 pop	 ebx

; 745  : }

  0016f	c2 04 00	 ret	 4
$L16421:

; 696  :             return pState->NextCharacterResult;

  00172	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00175	eb f4		 jmp	 SHORT $L15590
@RtlRawXmlTokenizer_GatherNTokens@12 ENDP
_TEXT	ENDS
PUBLIC	@RtlRawXmlTokenizer_GatherIdentifier@12
; Function compile flags: /Ogsy
;	COMDAT @RtlRawXmlTokenizer_GatherIdentifier@12
_TEXT	SEGMENT
tv322 = -8
_cbName$ = -4
_pStoppedOn$ = 8
@RtlRawXmlTokenizer_GatherIdentifier@12 PROC NEAR	; COMDAT
; _pState$ = ecx
; _pIdentifier$ = edx

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 761  :     PVOID pvOriginal = pState->pvCursor;

  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 762  :     SIZE_T cbName = 0;
; 763  :     NTXML_RAW_TOKEN TokenName;
; 764  :     BOOLEAN fFirstCharFound = FALSE;
; 765  :     ULONG ulCharacter;
; 766  : 
; 767  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  0000c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0000f	8b da		 mov	 ebx, edx
  00011	89 45 f8	 mov	 DWORD PTR tv322[ebp], eax
  00014	72 15		 jb	 SHORT $L15625

; 768  :         pIdentifier->Run.cbData = 0;

  00016	83 63 08 00	 and	 DWORD PTR [ebx+8], 0

; 769  :         pIdentifier->Run.pvData = pState->pvDocumentEnd;

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 770  :         pIdentifier->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00020	c7 03 03 00 00
	00		 mov	 DWORD PTR [ebx], 3

; 771  :         return STATUS_SUCCESS;

  00026	e9 3b 01 00 00	 jmp	 $L15634
$L15625:

; 772  :     }
; 773  : 
; 774  :     ASSERT(pState->cbBytesInLastRawToken == pState->DefaultCharacterSize);
; 775  :     ASSERT(pState->NextCharacterResult == STATUS_SUCCESS);
; 776  : 
; 777  :     //
; 778  :     // Start up
; 779  :     //
; 780  :     pIdentifier->Run.cbData = 0;

  0002b	83 63 08 00	 and	 DWORD PTR [ebx+8], 0

; 781  :     pIdentifier->Run.pvData = pvOriginal;
; 782  :     pIdentifier->TokenName = NTXML_RAWTOKEN_ERROR;

  0002f	83 23 00	 and	 DWORD PTR [ebx], 0

; 783  : 
; 784  :     //
; 785  :     // Start with the first character at the cursor
; 786  :     ulCharacter = pState->pfnNextChar(pState);

  00032	8b ce		 mov	 ecx, esi
  00034	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00037	ff 56 10	 call	 DWORD PTR [esi+16]

; 787  : 
; 788  :     //
; 789  :     // Badly formatted name - stop before we get too far.
; 790  :     //
; 791  :     if ((ulCharacter == 0) && !NT_SUCCESS(pState->NextCharacterResult)) {

  0003a	85 c0		 test	 eax, eax
  0003c	75 0e		 jne	 SHORT $L15630
  0003e	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00041	85 c9		 test	 ecx, ecx
  00043	7d 2c		 jge	 SHORT $L16437

; 792  :         return pState->NextCharacterResult;

  00045	8b c1		 mov	 eax, ecx
  00047	e9 dc 02 00 00	 jmp	 $L15619
$L15630:

; 793  :     }
; 794  :     //
; 795  :     // Not a _ or a character is a bad identifier
; 796  :     //
; 797  :     else if ((ulCharacter != L'_') && !RtlpIsCharacterLetter(ulCharacter)) {

  0004c	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  0004f	0f 84 18 01 00
	00		 je	 $L15632
  00055	83 f8 61	 cmp	 eax, 97			; 00000061H
  00058	72 09		 jb	 SHORT $L16436
  0005a	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0005d	0f 86 0a 01 00
	00		 jbe	 $L15632
$L16436:
  00063	83 f8 41	 cmp	 eax, 65			; 00000041H
  00066	72 09		 jb	 SHORT $L16437
  00068	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0006b	0f 86 fc 00 00
	00		 jbe	 $L15632
$L16437:

; 798  : 
; 799  :         if (pStoppedOn) {

  00071	8b 4d 08	 mov	 ecx, DWORD PTR _pStoppedOn$[ebp]
  00074	85 c9		 test	 ecx, ecx
  00076	0f 84 df 00 00
	00		 je	 $L15633

; 800  :             pStoppedOn->Run.cbData = pState->cbBytesInLastRawToken;
; 801  :             pStoppedOn->Run.pvData = pState->pvCursor;
; 802  :             pStoppedOn->TokenName = _RtlpDecodeCharacter(ulCharacter);

  0007c	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  0007f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00082	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00085	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00088	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0008b	77 77		 ja	 SHORT $L16446
  0008d	74 71		 je	 SHORT $L16467
  0008f	83 f8 23	 cmp	 eax, 35			; 00000023H
  00092	77 44		 ja	 SHORT $L16447
  00094	74 3b		 je	 SHORT $L16471
  00096	83 f8 09	 cmp	 eax, 9
  00099	0f 82 a7 00 00
	00		 jb	 $L16473
  0009f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a2	76 26		 jbe	 SHORT $L16472
  000a4	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000a7	74 21		 je	 SHORT $L16472
  000a9	83 f8 20	 cmp	 eax, 32			; 00000020H
  000ac	74 1c		 je	 SHORT $L16472
  000ae	83 f8 21	 cmp	 eax, 33			; 00000021H
  000b1	74 10		 je	 SHORT $L16464
  000b3	83 f8 22	 cmp	 eax, 34			; 00000022H
  000b6	0f 85 8a 00 00
	00		 jne	 $L16473
  000bc	6a 0a		 push	 10			; 0000000aH
  000be	e9 95 00 00 00	 jmp	 $L16545
$L16464:
  000c3	6a 10		 push	 16			; 00000010H
  000c5	e9 8e 00 00 00	 jmp	 $L16545
$L16472:
  000ca	6a 0d		 push	 13			; 0000000dH
  000cc	e9 87 00 00 00	 jmp	 $L16545
$L16471:
  000d1	6a 17		 push	 23			; 00000017H
  000d3	e9 80 00 00 00	 jmp	 $L16545
$L16447:
  000d8	83 e8 26	 sub	 eax, 38			; 00000026H
  000db	74 1f		 je	 SHORT $L16470
  000dd	48		 dec	 eax
  000de	74 18		 je	 SHORT $L16461
  000e0	83 e8 06	 sub	 eax, 6
  000e3	74 0e		 je	 SHORT $L16453
  000e5	48		 dec	 eax
  000e6	74 07		 je	 SHORT $L16454
  000e8	48		 dec	 eax
  000e9	75 5b		 jne	 SHORT $L16473
  000eb	6a 05		 push	 5
  000ed	eb 69		 jmp	 SHORT $L16545
$L16454:
  000ef	6a 02		 push	 2
  000f1	eb 65		 jmp	 SHORT $L16545
$L16453:
  000f3	33 c0		 xor	 eax, eax
  000f5	40		 inc	 eax
  000f6	eb 61		 jmp	 SHORT $L16475
$L16461:
  000f8	6a 09		 push	 9
  000fa	eb 5c		 jmp	 SHORT $L16545
$L16470:
  000fc	6a 16		 push	 22			; 00000016H
  000fe	eb 58		 jmp	 SHORT $L16545
$L16467:
  00100	6a 13		 push	 19			; 00000013H
  00102	eb 54		 jmp	 SHORT $L16545
$L16446:
  00104	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00107	77 2b		 ja	 SHORT $L16448
  00109	74 25		 je	 SHORT $L16462
  0010b	83 e8 3b	 sub	 eax, 59			; 0000003bH
  0010e	74 1c		 je	 SHORT $L16468
  00110	48		 dec	 eax
  00111	74 15		 je	 SHORT $L16458
  00113	48		 dec	 eax
  00114	74 0e		 je	 SHORT $L16455
  00116	48		 dec	 eax
  00117	74 07		 je	 SHORT $L16457
  00119	48		 dec	 eax
  0011a	75 2a		 jne	 SHORT $L16473
  0011c	6a 08		 push	 8
  0011e	eb 38		 jmp	 SHORT $L16545
$L16457:
  00120	6a 06		 push	 6
  00122	eb 34		 jmp	 SHORT $L16545
$L16455:
  00124	6a 04		 push	 4
  00126	eb 30		 jmp	 SHORT $L16545
$L16458:
  00128	6a 07		 push	 7
  0012a	eb 2c		 jmp	 SHORT $L16545
$L16468:
  0012c	6a 14		 push	 20			; 00000014H
  0012e	eb 28		 jmp	 SHORT $L16545
$L16462:
  00130	6a 0e		 push	 14			; 0000000eH
  00132	eb 24		 jmp	 SHORT $L16545
$L16448:
  00134	83 e8 5d	 sub	 eax, 93			; 0000005dH
  00137	74 1d		 je	 SHORT $L16463
  00139	48		 dec	 eax
  0013a	48		 dec	 eax
  0013b	74 15		 je	 SHORT $L16469
  0013d	83 e8 1c	 sub	 eax, 28			; 0000001cH
  00140	74 0c		 je	 SHORT $L16465
  00142	48		 dec	 eax
  00143	48		 dec	 eax
  00144	74 04		 je	 SHORT $L16466
$L16473:
  00146	6a 0c		 push	 12			; 0000000cH
  00148	eb 0e		 jmp	 SHORT $L16545
$L16466:
  0014a	6a 12		 push	 18			; 00000012H
  0014c	eb 0a		 jmp	 SHORT $L16545
$L16465:
  0014e	6a 11		 push	 17			; 00000011H
  00150	eb 06		 jmp	 SHORT $L16545
$L16469:
  00152	6a 15		 push	 21			; 00000015H
  00154	eb 02		 jmp	 SHORT $L16545
$L16463:
  00156	6a 0f		 push	 15			; 0000000fH
$L16545:
  00158	58		 pop	 eax
$L16475:
  00159	89 01		 mov	 DWORD PTR [ecx], eax
$L15633:

; 803  :         }
; 804  : 
; 805  :         if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  0015b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0015e	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  00161	74 03		 je	 SHORT $L15634

; 806  :             pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00163	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15634:

; 807  :         }
; 808  : 
; 809  :         return STATUS_SUCCESS;

  00166	33 c0		 xor	 eax, eax
  00168	e9 bb 01 00 00	 jmp	 $L15619
$L15632:

; 810  :     }
; 811  : 
; 812  :     cbName = pState->cbBytesInLastRawToken;

  0016d	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]

; 813  : 
; 814  :     //
; 815  :     // Reset character size if necessary
; 816  :     //
; 817  :     if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  00170	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00173	3b c8		 cmp	 ecx, eax
  00175	89 4d fc	 mov	 DWORD PTR _cbName$[ebp], ecx
  00178	74 03		 je	 SHORT $L15636

; 818  :         pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  0017a	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15636:

; 819  :     }
; 820  : 
; 821  :     //
; 822  :     // Advance cursor, now just look for name characters
; 823  :     //
; 824  :     ADVANCE_PVOID(pState->pvCursor, pState->cbBytesInLastRawToken);

  0017d	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00180	01 46 0c	 add	 DWORD PTR [esi+12], eax
  00183	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 825  : 
; 826  :     //
; 827  :     // Was that the last character in the input?
; 828  :     //
; 829  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  00186	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00189	57		 push	 edi
  0018a	8b 7d 08	 mov	 edi, DWORD PTR _pStoppedOn$[ebp]
  0018d	72 14		 jb	 SHORT $L15640

; 830  :         
; 831  :         pStoppedOn->Run.cbData = pState->cbBytesInLastRawToken;

  0018f	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 832  :         pStoppedOn->Run.pvData = pState->pvCursor;

  00192	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00195	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 833  :         pStoppedOn->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00198	c7 07 03 00 00
	00		 mov	 DWORD PTR [edi], 3

; 834  : 
; 835  :         goto DoneLooking;

  0019e	e9 4a 01 00 00	 jmp	 $DoneLooking$15639
$L15640:

; 836  :     }
; 837  : 
; 838  : 
; 839  :     do {
; 840  : 
; 841  :         ulCharacter = pState->pfnNextChar(pState);

  001a3	8b ce		 mov	 ecx, esi
  001a5	ff 56 10	 call	 DWORD PTR [esi+16]

; 842  : 
; 843  :         //
; 844  :         // dots, dashes, and underscores are fine
; 845  :         //
; 846  :         switch (ulCharacter) {

  001a8	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  001ab	72 0a		 jb	 SHORT $L15648
  001ad	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001b0	76 2c		 jbe	 SHORT $L15652
  001b2	83 f8 5f	 cmp	 eax, 95			; 0000005fH

; 847  :         case '.':
; 848  :         case '_':
; 849  :         case '-':
; 850  :             break;

  001b5	74 27		 je	 SHORT $L15652
$L15648:

; 851  : 
; 852  :             //
; 853  :             // If this wasn't a letter, digit, combiner, or extender, stop looking
; 854  :             //
; 855  :         default:
; 856  :             if ((ulCharacter == 0) && !NT_SUCCESS(pState->NextCharacterResult)) {

  001b7	85 c0		 test	 eax, eax
  001b9	75 05		 jne	 SHORT $L15650
  001bb	39 46 30	 cmp	 DWORD PTR [esi+48], eax
  001be	7c 3e		 jl	 SHORT $L16536
$L15650:

; 858  :             }
; 859  :             else if (!RtlpIsCharacterLetter(ulCharacter) && !RtlpIsCharacterDigit(ulCharacter) &&
; 860  :                 !RtlpIsCharacterCombiner(ulCharacter) && !RtlpIsCharacterExtender(ulCharacter)) {

  001c0	83 f8 61	 cmp	 eax, 97			; 00000061H
  001c3	72 05		 jb	 SHORT $L16482
  001c5	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  001c8	76 14		 jbe	 SHORT $L15652
$L16482:
  001ca	83 f8 41	 cmp	 eax, 65			; 00000041H
  001cd	72 05		 jb	 SHORT $L16483
  001cf	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  001d2	76 0a		 jbe	 SHORT $L15652
$L16483:
  001d4	83 f8 30	 cmp	 eax, 48			; 00000030H
  001d7	72 2d		 jb	 SHORT $L16537
  001d9	83 f8 39	 cmp	 eax, 57			; 00000039H
  001dc	77 28		 ja	 SHORT $L16537
$L15652:

; 866  :                 }
; 867  :                 goto DoneLooking;
; 868  :             }
; 869  :             break;
; 870  :         }
; 871  : 
; 872  :         ADVANCE_PVOID(pState->pvCursor, pState->cbBytesInLastRawToken);

  001de	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 873  :         cbName += pState->cbBytesInLastRawToken;
; 874  : 
; 875  :         if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  001e1	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  001e4	01 46 0c	 add	 DWORD PTR [esi+12], eax
  001e7	01 45 fc	 add	 DWORD PTR _cbName$[ebp], eax
  001ea	3b c1		 cmp	 eax, ecx
  001ec	74 03		 je	 SHORT $L15641

; 876  :             pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  001ee	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
$L15641:

; 877  :         }
; 878  : 
; 879  :     }
; 880  :     while (pState->pvCursor < pState->pvDocumentEnd);

  001f1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001f4	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001f7	72 aa		 jb	 SHORT $L15640
  001f9	e9 ef 00 00 00	 jmp	 $DoneLooking$15639
$L16536:

; 857  :                 return pState->NextCharacterResult;

  001fe	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00201	e9 21 01 00 00	 jmp	 $L16544
$L16537:

; 861  : 
; 862  :                 if (pStoppedOn) {

  00206	85 ff		 test	 edi, edi
  00208	0f 84 df 00 00
	00		 je	 $DoneLooking$15639

; 863  :                     pStoppedOn->Run.cbData = pState->cbBytesInLastRawToken;
; 864  :                     pStoppedOn->Run.pvData = pState->pvCursor;
; 865  :                     pStoppedOn->TokenName = _RtlpDecodeCharacter(ulCharacter);

  0020e	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00211	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00214	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00217	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0021a	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  0021d	77 77		 ja	 SHORT $L16510
  0021f	74 71		 je	 SHORT $L16526
  00221	83 f8 23	 cmp	 eax, 35			; 00000023H
  00224	77 44		 ja	 SHORT $L16512
  00226	74 3b		 je	 SHORT $L16530
  00228	83 f8 09	 cmp	 eax, 9
  0022b	0f 82 a7 00 00
	00		 jb	 $L16532
  00231	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00234	76 26		 jbe	 SHORT $L16531
  00236	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00239	74 21		 je	 SHORT $L16531
  0023b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0023e	74 1c		 je	 SHORT $L16531
  00240	83 f8 21	 cmp	 eax, 33			; 00000021H
  00243	74 10		 je	 SHORT $L16523
  00245	83 f8 22	 cmp	 eax, 34			; 00000022H
  00248	0f 85 8a 00 00
	00		 jne	 $L16532
  0024e	6a 0a		 push	 10			; 0000000aH
  00250	e9 95 00 00 00	 jmp	 $L16546
$L16523:
  00255	6a 10		 push	 16			; 00000010H
  00257	e9 8e 00 00 00	 jmp	 $L16546
$L16531:
  0025c	6a 0d		 push	 13			; 0000000dH
  0025e	e9 87 00 00 00	 jmp	 $L16546
$L16530:
  00263	6a 17		 push	 23			; 00000017H
  00265	e9 80 00 00 00	 jmp	 $L16546
$L16512:
  0026a	83 e8 26	 sub	 eax, 38			; 00000026H
  0026d	74 1f		 je	 SHORT $L16529
  0026f	48		 dec	 eax
  00270	74 18		 je	 SHORT $L16520
  00272	83 e8 06	 sub	 eax, 6
  00275	74 0e		 je	 SHORT $L16509
  00277	48		 dec	 eax
  00278	74 07		 je	 SHORT $L16511
  0027a	48		 dec	 eax
  0027b	75 5b		 jne	 SHORT $L16532
  0027d	6a 05		 push	 5
  0027f	eb 69		 jmp	 SHORT $L16546
$L16511:
  00281	6a 02		 push	 2
  00283	eb 65		 jmp	 SHORT $L16546
$L16509:
  00285	33 c0		 xor	 eax, eax
  00287	40		 inc	 eax
  00288	eb 61		 jmp	 SHORT $L16534
$L16520:
  0028a	6a 09		 push	 9
  0028c	eb 5c		 jmp	 SHORT $L16546
$L16529:
  0028e	6a 16		 push	 22			; 00000016H
  00290	eb 58		 jmp	 SHORT $L16546
$L16526:
  00292	6a 13		 push	 19			; 00000013H
  00294	eb 54		 jmp	 SHORT $L16546
$L16510:
  00296	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00299	77 2b		 ja	 SHORT $L16514
  0029b	74 25		 je	 SHORT $L16521
  0029d	83 e8 3b	 sub	 eax, 59			; 0000003bH
  002a0	74 1c		 je	 SHORT $L16527
  002a2	48		 dec	 eax
  002a3	74 15		 je	 SHORT $L16517
  002a5	48		 dec	 eax
  002a6	74 0e		 je	 SHORT $L16513
  002a8	48		 dec	 eax
  002a9	74 07		 je	 SHORT $L16516
  002ab	48		 dec	 eax
  002ac	75 2a		 jne	 SHORT $L16532
  002ae	6a 08		 push	 8
  002b0	eb 38		 jmp	 SHORT $L16546
$L16516:
  002b2	6a 06		 push	 6
  002b4	eb 34		 jmp	 SHORT $L16546
$L16513:
  002b6	6a 04		 push	 4
  002b8	eb 30		 jmp	 SHORT $L16546
$L16517:
  002ba	6a 07		 push	 7
  002bc	eb 2c		 jmp	 SHORT $L16546
$L16527:
  002be	6a 14		 push	 20			; 00000014H
  002c0	eb 28		 jmp	 SHORT $L16546
$L16521:
  002c2	6a 0e		 push	 14			; 0000000eH
  002c4	eb 24		 jmp	 SHORT $L16546
$L16514:
  002c6	83 e8 5d	 sub	 eax, 93			; 0000005dH
  002c9	74 1d		 je	 SHORT $L16522
  002cb	48		 dec	 eax
  002cc	48		 dec	 eax
  002cd	74 15		 je	 SHORT $L16528
  002cf	83 e8 1c	 sub	 eax, 28			; 0000001cH
  002d2	74 0c		 je	 SHORT $L16524
  002d4	48		 dec	 eax
  002d5	48		 dec	 eax
  002d6	74 04		 je	 SHORT $L16525
$L16532:
  002d8	6a 0c		 push	 12			; 0000000cH
  002da	eb 0e		 jmp	 SHORT $L16546
$L16525:
  002dc	6a 12		 push	 18			; 00000012H
  002de	eb 0a		 jmp	 SHORT $L16546
$L16524:
  002e0	6a 11		 push	 17			; 00000011H
  002e2	eb 06		 jmp	 SHORT $L16546
$L16528:
  002e4	6a 15		 push	 21			; 00000015H
  002e6	eb 02		 jmp	 SHORT $L16546
$L16522:
  002e8	6a 0f		 push	 15			; 0000000fH
$L16546:
  002ea	58		 pop	 eax
$L16534:
  002eb	89 07		 mov	 DWORD PTR [edi], eax
$DoneLooking$15639:

; 881  : 
; 882  : 
; 883  : 
; 884  : DoneLooking:
; 885  : 
; 886  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  002ed	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002f0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  002f3	72 10		 jb	 SHORT $L15656

; 887  :         pStoppedOn->Run.cbData = 0;

  002f5	83 67 08 00	 and	 DWORD PTR [edi+8], 0

; 888  :         pStoppedOn->Run.pvData = pState->pvDocumentEnd;

  002f9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002fc	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 889  :         pStoppedOn->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  002ff	c7 07 03 00 00
	00		 mov	 DWORD PTR [edi], 3
$L15656:

; 890  :     }
; 891  : 
; 892  :     if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  00305	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00308	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  0030b	74 03		 je	 SHORT $L15657

; 893  :         pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  0030d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15657:

; 894  :     }
; 895  : 
; 896  :     pState->pvCursor = pvOriginal;

  00310	8b 45 f8	 mov	 eax, DWORD PTR tv322[ebp]

; 897  :     pIdentifier->Run.cbData = cbName;

  00313	8b 4d fc	 mov	 ecx, DWORD PTR _cbName$[ebp]
  00316	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 898  :     pIdentifier->Run.pvData = pvOriginal;

  00319	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0031c	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 899  :     pIdentifier->TokenName = NTXML_RAWTOKEN_TEXT;

  0031f	c7 03 0c 00 00
	00		 mov	 DWORD PTR [ebx], 12	; 0000000cH

; 900  : 
; 901  :     return STATUS_SUCCESS;

  00325	33 c0		 xor	 eax, eax
$L16544:
  00327	5f		 pop	 edi
$L15619:
  00328	5e		 pop	 esi
  00329	5b		 pop	 ebx

; 902  : }

  0032a	c9		 leave
  0032b	c2 04 00	 ret	 4
@RtlRawXmlTokenizer_GatherIdentifier@12 ENDP
_TEXT	ENDS
PUBLIC	@RtlRawXmlTokenizer_GatherUntil@16
; Function compile flags: /Ogsy
;	COMDAT @RtlRawXmlTokenizer_GatherUntil@16
_TEXT	SEGMENT
_pGathered$ = -12
tv226 = -8
_cbChunk$ = -4
_StopOn$ = 8
_pTokenFound$ = 12
@RtlRawXmlTokenizer_GatherUntil@16 PROC NEAR		; COMDAT
; _pState$ = ecx
; _pGathered$ = edx

; 919  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 920  :     PVOID pvOriginal = pState->pvCursor;
; 921  :     SIZE_T cbChunk = 0;

  00006	83 65 fc 00	 and	 DWORD PTR _cbChunk$[ebp], 0
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 922  :     ULONG ulDecoded;
; 923  : 
; 924  :     if (pState->pvCursor >= pState->pvDocumentEnd) {

  00010	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00013	3b c8		 cmp	 ecx, eax
  00015	89 55 f4	 mov	 DWORD PTR _pGathered$[ebp], edx
  00018	89 4d f8	 mov	 DWORD PTR tv226[ebp], ecx
  0001b	72 14		 jb	 SHORT $L15672

; 925  :         pGathered->Run.pvData = pState->pvDocumentEnd;
; 926  :         pGathered->Run.cbData = 0;

  0001d	83 62 08 00	 and	 DWORD PTR [edx+8], 0
  00021	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 927  :         pGathered->TokenName = NTXML_RAWTOKEN_END_OF_STREAM;

  00024	c7 02 03 00 00
	00		 mov	 DWORD PTR [edx], 3

; 928  :         return STATUS_SUCCESS;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 73 01 00 00	 jmp	 $L15668
$L15672:
  00031	53		 push	 ebx

; 929  :     }
; 930  : 
; 931  :     if (pTokenFound) {

  00032	8b 5d 0c	 mov	 ebx, DWORD PTR _pTokenFound$[ebp]
  00035	85 db		 test	 ebx, ebx
  00037	74 09		 je	 SHORT $L15677
  00039	57		 push	 edi

; 932  :         RtlZeroMemory(pTokenFound, sizeof(*pTokenFound));

  0003a	33 c0		 xor	 eax, eax
  0003c	8b fb		 mov	 edi, ebx
  0003e	ab		 stosd
  0003f	ab		 stosd
  00040	ab		 stosd
  00041	5f		 pop	 edi
$L15677:

; 933  :     }
; 934  : 
; 935  :     ASSERT(pState->NextCharacterResult == STATUS_SUCCESS);
; 936  :     ASSERT(pState->cbBytesInLastRawToken == pState->DefaultCharacterSize);
; 937  : 
; 938  :     do 
; 939  :     {
; 940  :         ULONG ulCharacter = pState->pfnNextChar(pState);

  00042	8b ce		 mov	 ecx, esi
  00044	ff 56 10	 call	 DWORD PTR [esi+16]

; 941  : 
; 942  :         //
; 943  :         // Zero character, and error?  Oops.
; 944  :         //
; 945  :         if ((ulCharacter == 0) && !NT_SUCCESS(pState->NextCharacterResult)) {

  00047	33 d2		 xor	 edx, edx
  00049	3b c2		 cmp	 eax, edx
  0004b	75 09		 jne	 SHORT $L15682
  0004d	39 56 30	 cmp	 DWORD PTR [esi+48], edx
  00050	0f 8c fa 00 00
	00		 jl	 $L16586
$L15682:

; 948  :         }
; 949  :         //
; 950  :         // Found the character we were looking for? Neat.
; 951  :         //
; 952  :         else if ((ulDecoded = _RtlpDecodeCharacter(ulCharacter)) == StopOn) {

  00056	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00059	77 77		 ja	 SHORT $L16582
  0005b	74 71		 je	 SHORT $L16572
  0005d	83 f8 23	 cmp	 eax, 35			; 00000023H
  00060	77 44		 ja	 SHORT $L16583
  00062	74 3b		 je	 SHORT $L16576
  00064	83 f8 09	 cmp	 eax, 9
  00067	0f 82 a7 00 00
	00		 jb	 $L16578
  0006d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00070	76 26		 jbe	 SHORT $L16577
  00072	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00075	74 21		 je	 SHORT $L16577
  00077	83 f8 20	 cmp	 eax, 32			; 00000020H
  0007a	74 1c		 je	 SHORT $L16577
  0007c	83 f8 21	 cmp	 eax, 33			; 00000021H
  0007f	74 10		 je	 SHORT $L16569
  00081	83 f8 22	 cmp	 eax, 34			; 00000022H
  00084	0f 85 8a 00 00
	00		 jne	 $L16578
  0008a	6a 0a		 push	 10			; 0000000aH
  0008c	e9 95 00 00 00	 jmp	 $L16591
$L16569:
  00091	6a 10		 push	 16			; 00000010H
  00093	e9 8e 00 00 00	 jmp	 $L16591
$L16577:
  00098	6a 0d		 push	 13			; 0000000dH
  0009a	e9 87 00 00 00	 jmp	 $L16591
$L16576:
  0009f	6a 17		 push	 23			; 00000017H
  000a1	e9 80 00 00 00	 jmp	 $L16591
$L16583:
  000a6	83 e8 26	 sub	 eax, 38			; 00000026H
  000a9	74 1f		 je	 SHORT $L16575
  000ab	48		 dec	 eax
  000ac	74 18		 je	 SHORT $L16566
  000ae	83 e8 06	 sub	 eax, 6
  000b1	74 0e		 je	 SHORT $L16558
  000b3	48		 dec	 eax
  000b4	74 07		 je	 SHORT $L16559
  000b6	48		 dec	 eax
  000b7	75 5b		 jne	 SHORT $L16578
  000b9	6a 05		 push	 5
  000bb	eb 69		 jmp	 SHORT $L16591
$L16559:
  000bd	6a 02		 push	 2
  000bf	eb 65		 jmp	 SHORT $L16591
$L16558:
  000c1	33 c0		 xor	 eax, eax
  000c3	40		 inc	 eax
  000c4	eb 61		 jmp	 SHORT $L16580
$L16566:
  000c6	6a 09		 push	 9
  000c8	eb 5c		 jmp	 SHORT $L16591
$L16575:
  000ca	6a 16		 push	 22			; 00000016H
  000cc	eb 58		 jmp	 SHORT $L16591
$L16572:
  000ce	6a 13		 push	 19			; 00000013H
  000d0	eb 54		 jmp	 SHORT $L16591
$L16582:
  000d2	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  000d5	77 2b		 ja	 SHORT $L16584
  000d7	74 25		 je	 SHORT $L16567
  000d9	83 e8 3b	 sub	 eax, 59			; 0000003bH
  000dc	74 1c		 je	 SHORT $L16573
  000de	48		 dec	 eax
  000df	74 15		 je	 SHORT $L16563
  000e1	48		 dec	 eax
  000e2	74 0e		 je	 SHORT $L16560
  000e4	48		 dec	 eax
  000e5	74 07		 je	 SHORT $L16562
  000e7	48		 dec	 eax
  000e8	75 2a		 jne	 SHORT $L16578
  000ea	6a 08		 push	 8
  000ec	eb 38		 jmp	 SHORT $L16591
$L16562:
  000ee	6a 06		 push	 6
  000f0	eb 34		 jmp	 SHORT $L16591
$L16560:
  000f2	6a 04		 push	 4
  000f4	eb 30		 jmp	 SHORT $L16591
$L16563:
  000f6	6a 07		 push	 7
  000f8	eb 2c		 jmp	 SHORT $L16591
$L16573:
  000fa	6a 14		 push	 20			; 00000014H
  000fc	eb 28		 jmp	 SHORT $L16591
$L16567:
  000fe	6a 0e		 push	 14			; 0000000eH
  00100	eb 24		 jmp	 SHORT $L16591
$L16584:
  00102	83 e8 5d	 sub	 eax, 93			; 0000005dH
  00105	74 1d		 je	 SHORT $L16568
  00107	48		 dec	 eax
  00108	48		 dec	 eax
  00109	74 15		 je	 SHORT $L16574
  0010b	83 e8 1c	 sub	 eax, 28			; 0000001cH
  0010e	74 0c		 je	 SHORT $L16570
  00110	48		 dec	 eax
  00111	48		 dec	 eax
  00112	74 04		 je	 SHORT $L16571
$L16578:
  00114	6a 0c		 push	 12			; 0000000cH
  00116	eb 0e		 jmp	 SHORT $L16591
$L16571:
  00118	6a 12		 push	 18			; 00000012H
  0011a	eb 0a		 jmp	 SHORT $L16591
$L16570:
  0011c	6a 11		 push	 17			; 00000011H
  0011e	eb 06		 jmp	 SHORT $L16591
$L16574:
  00120	6a 15		 push	 21			; 00000015H
  00122	eb 02		 jmp	 SHORT $L16591
$L16568:
  00124	6a 0f		 push	 15			; 0000000fH
$L16591:
  00126	58		 pop	 eax
$L16580:
  00127	3b 45 08	 cmp	 eax, DWORD PTR _StopOn$[ebp]
  0012a	74 2f		 je	 SHORT $L16587

; 958  :             }
; 959  : 
; 960  :             break;
; 961  :         }
; 962  :         //
; 963  :         // Otherwise, add on the bytes in token
; 964  :         //
; 965  :         else {
; 966  :             cbChunk += pState->cbBytesInLastRawToken;

  0012c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]

; 967  :         }
; 968  : 
; 969  :         if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  0012f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00132	01 4d fc	 add	 DWORD PTR _cbChunk$[ebp], ecx
  00135	3b c8		 cmp	 ecx, eax
  00137	74 03		 je	 SHORT $L15687

; 970  :             pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  00139	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15687:

; 971  :         }
; 972  : 
; 973  :         ADVANCE_PVOID(pState->pvCursor, pState->cbBytesInLastRawToken);

  0013c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0013f	01 46 0c	 add	 DWORD PTR [esi+12], eax
  00142	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 974  :     }
; 975  :     while (pState->pvCursor < pState->pvDocumentEnd);

  00145	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00148	0f 82 f4 fe ff
	ff		 jb	 $L15677
  0014e	eb 1d		 jmp	 SHORT $L15679
$L16586:

; 946  :             pState->pvCursor = pvOriginal;

  00150	8b 45 f8	 mov	 eax, DWORD PTR tv226[ebp]
  00153	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 947  :             return pState->NextCharacterResult;

  00156	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00159	eb 48		 jmp	 SHORT $L16590
$L16587:

; 953  : 
; 954  :             if (pTokenFound) {

  0015b	3b da		 cmp	 ebx, edx
  0015d	74 0e		 je	 SHORT $L15679

; 955  :                 pTokenFound->Run.cbData = pState->cbBytesInLastRawToken;

  0015f	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00162	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 956  :                 pTokenFound->Run.pvData = pState->pvCursor;

  00165	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00168	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 957  :                 pTokenFound->TokenName = ulDecoded;

  0016b	89 03		 mov	 DWORD PTR [ebx], eax
$L15679:

; 976  : 
; 977  :     //
; 978  :     // If we fell off the document, say we did so.
; 979  :     //
; 980  :     if ((pState->pvCursor >= pState->pvDocumentEnd) && pTokenFound) {

  0016d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00170	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00173	72 0f		 jb	 SHORT $L15689
  00175	3b da		 cmp	 ebx, edx
  00177	74 0b		 je	 SHORT $L15689

; 981  :         pTokenFound->Run.cbData = 0;

  00179	89 53 08	 mov	 DWORD PTR [ebx+8], edx

; 982  :         pTokenFound->Run.pvData = pState->pvDocumentEnd;

  0017c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0017f	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 983  :         pTokenFound->TokenName = NTXML_RAWTOKEN_ERROR;

  00182	89 13		 mov	 DWORD PTR [ebx], edx
$L15689:

; 984  :     }
; 985  : 
; 986  :     if (pState->cbBytesInLastRawToken != pState->DefaultCharacterSize) {

  00184	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00187	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  0018a	74 03		 je	 SHORT $L15690

; 987  :         pState->cbBytesInLastRawToken = pState->DefaultCharacterSize;

  0018c	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$L15690:

; 988  :     }
; 989  : 
; 990  :     //
; 991  :     // Indicate we're done
; 992  :     //
; 993  :     pGathered->Run.pvData = pState->pvCursor = pvOriginal;

  0018f	8b 4d f8	 mov	 ecx, DWORD PTR tv226[ebp]
  00192	8b 45 f4	 mov	 eax, DWORD PTR _pGathered$[ebp]
  00195	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00198	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 994  :     pGathered->Run.cbData = cbChunk;

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR _cbChunk$[ebp]
  0019e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 995  : 
; 996  :     return STATUS_SUCCESS;

  001a1	33 c0		 xor	 eax, eax
$L16590:
  001a3	5b		 pop	 ebx
$L15668:
  001a4	5e		 pop	 esi

; 997  : }

  001a5	c9		 leave
  001a6	c2 08 00	 ret	 8
@RtlRawXmlTokenizer_GatherUntil@16 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlNextToken@12
; Function compile flags: /Ogsy
;	COMDAT _RtlXmlNextToken@12
_TEXT	SEGMENT
_NextRawToken$ = -36
_RawToken$ = -24
_pvStarterCursor$ = -12
_fCompare$ = -8
_NextState$ = -4
_cbChunk$15864 = 8
_cbThisChunklet$15849 = 8
_fMatching$15804 = 8
_fMatching$15747 = 8
_pState$ = 8
_pToken$ = 12
_fAdvanceState$ = 16
_RtlXmlNextToken@12 PROC NEAR				; COMDAT

; 1020 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 1021 :     XML_STRING_COMPARE              fCompare = XML_STRING_COMPARE_LT;

  00006	83 4d f8 ff	 or	 DWORD PTR _fCompare$[ebp], -1
  0000a	56		 push	 esi

; 1022 :     PVOID                           pvStarterCursor = NULL;
; 1023 :     NTSTATUS                        success = STATUS_SUCCESS;
; 1024 :     XML_RAW_TOKEN                   RawToken;
; 1025 :     XML_TOKENIZATION_SPECIFIC_STATE PreviousState;
; 1026 :     XML_TOKENIZATION_SPECIFIC_STATE NextState = XTSS_ERRONEOUS;
; 1027 :     ULONG                           cbTotalTokenLength = 0;
; 1028 :     XML_RAW_TOKEN                   NextRawToken;
; 1029 : 
; 1030 :     if (!ARGUMENT_PRESENT(pState)) {

  0000b	8b 75 08	 mov	 esi, DWORD PTR _pState$[ebp]
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	33 c0		 xor	 eax, eax
  00013	3b f7		 cmp	 esi, edi
  00015	89 7d fc	 mov	 DWORD PTR _NextState$[ebp], edi
  00018	75 0a		 jne	 SHORT $L15713

; 1031 :         return STATUS_INVALID_PARAMETER_1;

  0001a	b8 ef 00 00 c0	 mov	 eax, -1073741585	; c00000efH
  0001f	e9 b0 03 00 00	 jmp	 $L15698
$L15713:

; 1032 :     }
; 1033 : 
; 1034 :     if (!ARGUMENT_PRESENT(pToken)) {

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _pToken$[ebp]
  00027	3b cf		 cmp	 ecx, edi
  00029	75 0a		 jne	 SHORT $L15719

; 1035 :         return STATUS_INVALID_PARAMETER_2;

  0002b	b8 f0 00 00 c0	 mov	 eax, -1073741584	; c00000f0H
  00030	e9 9f 03 00 00	 jmp	 $L15698
$L15719:
  00035	53		 push	 ebx

; 1036 :     }
; 1037 : 
; 1038 : 
; 1039 :     if (pState->PreviousState == XTSS_STREAM_END) {

  00036	8b 5e 38	 mov	 ebx, DWORD PTR [esi+56]
  00039	6a 03		 push	 3
  0003b	5a		 pop	 edx
  0003c	3b da		 cmp	 ebx, edx
  0003e	75 13		 jne	 SHORT $L15721

; 1040 :         //
; 1041 :         // A little short circuiting - if we're in the "end of stream" logical
; 1042 :         // state, then we can't do anything else - just return success.
; 1043 :         //
; 1044 :         pToken->Run.cbData = 0;

  00040	83 61 04 00	 and	 DWORD PTR [ecx+4], 0

; 1045 :         pToken->Run.pvData = pState->RawTokenState.pvCursor;

  00044	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00047	89 01		 mov	 DWORD PTR [ecx], eax

; 1046 :         pToken->State = XTSS_STREAM_END;

  00049	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 1047 :         return STATUS_SUCCESS;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 80 03 00 00	 jmp	 $L16611
$L15721:

; 1048 :     }
; 1049 : 
; 1050 : 
; 1051 :     //
; 1052 :     // Stash this for later diffs
; 1053 :     //
; 1054 :     pvStarterCursor = pState->RawTokenState.pvCursor;

  00053	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 1055 : 
; 1056 : 
; 1057 : 
; 1058 :     //
; 1059 :     // Copy these onto the stack for faster lookup during token
; 1060 :     // processing and state detection.
; 1061 :     //
; 1062 :     PreviousState = pState->PreviousState;
; 1063 : 
; 1064 :     //
; 1065 :     // Set the outbound thing
; 1066 :     //
; 1067 :     pToken->Run.cbData = 0;

  00056	83 61 04 00	 and	 DWORD PTR [ecx+4], 0

; 1068 :     pToken->Run.pvData = pvStarterCursor;
; 1069 :     pToken->fError = FALSE;

  0005a	80 61 0c 00	 and	 BYTE PTR [ecx+12], 0
  0005e	89 55 f4	 mov	 DWORD PTR _pvStarterCursor$[ebp], edx
  00061	89 11		 mov	 DWORD PTR [ecx], edx

; 1070 :     pToken->State = PreviousState;
; 1071 : 
; 1072 :     switch (PreviousState)
; 1073 :     {

  00063	8d 53 ff	 lea	 edx, DWORD PTR [ebx-1]
  00066	83 fa 34	 cmp	 edx, 52			; 00000034H
  00069	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
  0006c	0f 87 39 03 00
	00		 ja	 $L16015
  00072	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR $L16608[edx]
  00079	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L16622[edx*4]
$L15727:

; 1074 : 
; 1075 :         //
; 1076 :         // If we just closed a state, or we're at the start of a stream, or
; 1077 :         // we're in hyperspace, we have to figure out what the next state
; 1078 :         // should be based on the raw token.
; 1079 :         //
; 1080 :     case XTSS_XMLDECL_CLOSE:
; 1081 :     case XTSS_ELEMENT_CLOSE:
; 1082 :     case XTSS_ELEMENT_CLOSE_EMPTY:
; 1083 :     case XTSS_ENDELEMENT_CLOSE:
; 1084 :     case XTSS_CDATA_CLOSE:
; 1085 :     case XTSS_PI_CLOSE:
; 1086 :     case XTSS_COMMENT_CLOSE:
; 1087 :     case XTSS_STREAM_START:
; 1088 :     case XTSS_STREAM_HYPERSPACE:
; 1089 : 
; 1090 :         //
; 1091 :         // We always need a token here to see what our next state is
; 1092 :         //
; 1093 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00080	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1094 :         if (!NT_SUCCESS(success)) {

  0008a	85 c0		 test	 eax, eax
  0008c	7d 0c		 jge	 SHORT $L15729

; 1095 :             pToken->fError = TRUE;

  0008e	8b 4d 0c	 mov	 ecx, DWORD PTR _pToken$[ebp]
  00091	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1096 :             return success;

  00095	e9 39 03 00 00	 jmp	 $L16611
$L15729:

; 1097 :         }
; 1098 : 
; 1099 :         cbTotalTokenLength = RawToken.Run.cbData;

  0009a	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1100 : 
; 1101 : 
; 1102 :         //
; 1103 :         // Oh, end of stream.  Goody.
; 1104 :         //
; 1105 :         if (RawToken.TokenName == NTXML_RAWTOKEN_END_OF_STREAM) {

  0009d	6a 03		 push	 3
  0009f	5b		 pop	 ebx
  000a0	39 5d e8	 cmp	 DWORD PTR _RawToken$[ebp], ebx

; 1106 :             NextState = XTSS_STREAM_END;
; 1107 :         }
; 1108 :         //
; 1109 :         // The < starts a gross bunch of detection code
; 1110 :         //
; 1111 :         else if (RawToken.TokenName == NTXML_RAWTOKEN_LT) {

  000a3	0f 84 64 05 00
	00		 je	 $L16614
  000a9	83 7d e8 07	 cmp	 DWORD PTR _RawToken$[ebp], 7

; 1112 : 
; 1113 :             //
; 1114 :             // Acquire the next thing from the input stream, see what it claims to be
; 1115 :             //
; 1116 :             ADVANCE_PVOID(pState->RawTokenState.pvCursor, RawToken.Run.cbData);
; 1117 :             if (!NT_SUCCESS(success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken))) {

  000ad	8b ce		 mov	 ecx, esi
  000af	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  000b2	0f 85 1f 01 00
	00		 jne	 $L15732
  000b8	01 7e 0c	 add	 DWORD PTR [esi+12], edi
  000bb	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8
  000c0	85 c0		 test	 eax, eax

; 1118 :                 return success;

  000c2	0f 8c 0b 03 00
	00		 jl	 $L16611

; 1119 :             }
; 1120 : 
; 1121 : 
; 1122 : 
; 1123 :             switch (RawToken.TokenName) {

  000c8	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  000cb	83 e9 05	 sub	 ecx, 5
  000ce	0f 84 f4 00 00
	00		 je	 $L15740
  000d4	2b cb		 sub	 ecx, ebx
  000d6	0f 84 80 00 00
	00		 je	 $L15741
  000dc	83 e9 06	 sub	 ecx, 6
  000df	74 6f		 je	 SHORT $L15761
  000e1	49		 dec	 ecx
  000e2	49		 dec	 ecx
  000e3	74 0f		 je	 SHORT $L15751

; 1249 : 
; 1250 : 
; 1251 : 
; 1252 :                 //
; 1253 :                 // Everything else starts an element section.  The next pass will decide
; 1254 :                 // if it's valid.  Adjust the size backwards a little.
; 1255 :                 //
; 1256 :             default:
; 1257 :                 cbTotalTokenLength = RawToken.Run.cbData;

  000e5	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1258 :                 NextState = XTSS_ELEMENT_OPEN;

  000e8	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 4

; 1259 :                 break;

  000ef	e9 bb 02 00 00	 jmp	 $L15724
$L15751:

; 1188 : 
; 1189 : 
; 1190 : 
; 1191 :                 //
; 1192 :                 // Must be followed by two dashes
; 1193 :                 //
; 1194 :             case NTXML_RAWTOKEN_BANG:
; 1195 :                 {
; 1196 :                     cbTotalTokenLength += RawToken.Run.cbData;

  000f4	8b 45 f0	 mov	 eax, DWORD PTR _RawToken$[ebp+8]

; 1197 : 
; 1198 :                     //
; 1199 :                     // Sniff the next two raw tokens to see if they're dash-dash
; 1200 :                     //
; 1201 :                     ADVANCE_PVOID(pState->RawTokenState.pvCursor, RawToken.Run.cbData);

  000f7	01 46 0c	 add	 DWORD PTR [esi+12], eax

; 1202 :                     if (!NT_SUCCESS(success = RtlRawXmlTokenizer_SingleToken(
; 1203 :                         &pState->RawTokenState, 
; 1204 :                         pState->RawTokenScratch))) {

  000fa	8d 5e 3c	 lea	 ebx, DWORD PTR [esi+60]
  000fd	8b d3		 mov	 edx, ebx
  000ff	8b ce		 mov	 ecx, esi
  00101	03 f8		 add	 edi, eax
  00103	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8
  00108	85 c0		 test	 eax, eax

; 1205 :                         return success;

  0010a	0f 8c c3 02 00
	00		 jl	 $L16611

; 1206 :                     }
; 1207 : 
; 1208 :                     //
; 1209 :                     // First dash?
; 1210 :                     //
; 1211 :                     if (pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_DASH) {

  00110	83 3b 01	 cmp	 DWORD PTR [ebx], 1
  00113	0f 85 8f 02 00
	00		 jne	 $L16013

; 1212 : 
; 1213 :                         ADVANCE_PVOID(pState->RawTokenState.pvCursor, pState->RawTokenScratch[0].Run.cbData);

  00119	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0011c	01 46 0c	 add	 DWORD PTR [esi+12], eax

; 1214 :                         if (!NT_SUCCESS(success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, pState->RawTokenScratch + 1))) {

  0011f	8d 5e 48	 lea	 ebx, DWORD PTR [esi+72]
  00122	8b d3		 mov	 edx, ebx
  00124	8b ce		 mov	 ecx, esi
  00126	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8
  0012b	85 c0		 test	 eax, eax

; 1215 :                             return success;

  0012d	0f 8c a0 02 00
	00		 jl	 $L16611

; 1216 :                         }
; 1217 : 
; 1218 :                         //
; 1219 :                         // Second dash?
; 1220 :                         //
; 1221 :                         if (pState->RawTokenScratch[1].TokenName == NTXML_RAWTOKEN_DASH) {

  00133	83 3b 01	 cmp	 DWORD PTR [ebx], 1
  00136	0f 85 6c 02 00
	00		 jne	 $L16013

; 1222 :                             NextState = XTSS_COMMENT_OPEN;
; 1223 :                             cbTotalTokenLength += 
; 1224 :                                 pState->RawTokenScratch[0].Run.cbData +
; 1225 :                                 pState->RawTokenScratch[1].Run.cbData;

  0013c	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0013f	03 4e 44	 add	 ecx, DWORD PTR [esi+68]
  00142	c7 45 fc 26 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 38 ; 00000026H
  00149	03 f9		 add	 edi, ecx

; 2412 :         }
; 2413 :         else {

  0014b	e9 5f 02 00 00	 jmp	 $L15724
$L15761:

; 1226 :                         }
; 1227 :                     }
; 1228 : 
; 1229 :                     //
; 1230 :                     // If there was <! without <!--, then that's an error.
; 1231 :                     //
; 1232 :                     if (NextState != XTSS_COMMENT_OPEN) {
; 1233 :                         pToken->fError = TRUE;
; 1234 :                     }
; 1235 :                 }
; 1236 :                 break;
; 1237 : 
; 1238 : 
; 1239 : 
; 1240 :                 //
; 1241 :                 // An open brace must be followed by !CDATA[ (bang text brace)
; 1242 :                 //
; 1243 :             case NTXML_RAWTOKEN_OPENBRACKET:
; 1244 :                 NextState = XTSS_CDATA_OPEN;

  00150	c7 45 fc 29 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 41 ; 00000029H

; 1245 :                 //
; 1246 :                 // BUGBUG - fix me, please!
; 1247 :                 //
; 1248 :                 break;

  00157	e9 53 02 00 00	 jmp	 $L15724
$L15741:

; 1131 :                 break;
; 1132 : 
; 1133 : 
; 1134 : 
; 1135 : 
; 1136 :                 //
; 1137 :                 // Potentially, this could either be "xml" or just another
; 1138 :                 // name token.  Let's see what the next token is, just to
; 1139 :                 // be sure.
; 1140 :                 //
; 1141 :             case NTXML_RAWTOKEN_QUESTIONMARK:
; 1142 :                 {
; 1143 :                     cbTotalTokenLength += RawToken.Run.cbData;

  0015c	8b 45 f0	 mov	 eax, DWORD PTR _RawToken$[ebp+8]

; 1144 : 
; 1145 :                     //
; 1146 :                     // Defaultwise, this is just a PI opening
; 1147 :                     //
; 1148 :                     NextState = XTSS_PI_OPEN;
; 1149 : 
; 1150 :                     //
; 1151 :                     // Find the identifier out of the input
; 1152 :                     //
; 1153 :                     ADVANCE_PVOID(pState->RawTokenState.pvCursor, RawToken.Run.cbData);

  0015f	01 46 0c	 add	 DWORD PTR [esi+12], eax

; 1154 :                     success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, NULL);

  00162	6a 00		 push	 0
  00164	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00167	8b ce		 mov	 ecx, esi
  00169	03 f8		 add	 edi, eax
  0016b	c7 45 fc 21 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 33 ; 00000021H
  00172	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 1155 :                     if (!NT_SUCCESS(success)) {

  00177	85 c0		 test	 eax, eax

; 1156 :                         return success;

  00179	0f 8c 54 02 00
	00		 jl	 $L16611

; 1157 :                     }
; 1158 : 
; 1159 :                     //
; 1160 :                     // If we got data from the identifier lookup, and the thing found was text, then maybe
; 1161 :                     // it's the 'xml' special PI
; 1162 :                     //
; 1163 :                     if ((RawToken.Run.cbData != 0) && (RawToken.TokenName == NTXML_RAWTOKEN_TEXT)) {

  0017f	83 7d f0 00	 cmp	 DWORD PTR _RawToken$[ebp+8], 0
  00183	0f 84 26 02 00
	00		 je	 $L15724
  00189	83 7d e8 0c	 cmp	 DWORD PTR _RawToken$[ebp], 12 ; 0000000cH
  0018d	0f 85 1c 02 00
	00		 jne	 $L15724

; 1164 : 
; 1165 :                         XML_STRING_COMPARE fMatching;
; 1166 : 
; 1167 :                         success = pState->pfnCompareSpecialString(
; 1168 :                             pState,
; 1169 :                             &RawToken.Run,
; 1170 :                             &xss_xml,
; 1171 :                             &fMatching);

  00193	8d 45 08	 lea	 eax, DWORD PTR _fMatching$15747[ebp]
  00196	50		 push	 eax
  00197	68 00 00 00 00	 push	 OFFSET FLAT:_xss_xml
  0019c	8d 45 ec	 lea	 eax, DWORD PTR _RawToken$[ebp+4]
  0019f	50		 push	 eax
  001a0	56		 push	 esi
  001a1	ff 96 30 01 00
	00		 call	 DWORD PTR [esi+304]

; 1172 : 
; 1173 :                         if (!NT_SUCCESS(success)) {

  001a7	85 c0		 test	 eax, eax

; 1174 :                             return success;

  001a9	0f 8c 24 02 00
	00		 jl	 $L16611

; 1175 :                         }
; 1176 : 
; 1177 :                         //
; 1178 :                         // If these two match, then we're really in the XMLDECL
; 1179 :                         // element
; 1180 :                         //
; 1181 :                         if (fMatching == XML_STRING_COMPARE_EQUALS) {

  001af	83 7d 08 00	 cmp	 DWORD PTR _fMatching$15747[ebp], 0
  001b3	0f 85 f6 01 00
	00		 jne	 $L15724

; 1182 :                             NextState = XTSS_XMLDECL_OPEN;
; 1183 :                             cbTotalTokenLength += RawToken.Run.cbData;

  001b9	03 7d f0	 add	 edi, DWORD PTR _RawToken$[ebp+8]
  001bc	c7 45 fc 2c 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 44 ; 0000002cH

; 1184 :                         }
; 1185 :                     }
; 1186 :                 }
; 1187 :                 break;

  001c3	e9 e7 01 00 00	 jmp	 $L15724
$L15740:

; 1124 : 
; 1125 :                 //
; 1126 :                 // </ is the start of an end-element
; 1127 :                 //
; 1128 :             case NTXML_RAWTOKEN_FORWARDSLASH:
; 1129 :                 cbTotalTokenLength += RawToken.Run.cbData;

  001c8	03 7d f0	 add	 edi, DWORD PTR _RawToken$[ebp+8]

; 1130 :                 NextState = XTSS_ENDELEMENT_OPEN;

  001cb	c7 45 fc 1b 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 27 ; 0000001bH

; 1260 :             }
; 1261 :         }
; 1262 :         //
; 1263 :         // Otherwise, we're back in hyperspace, gather some more tokens until we find something
; 1264 :         // interesting - a <, 
; 1265 :         //
; 1266 :         else {

  001d2	e9 d8 01 00 00	 jmp	 $L15724
$L15732:

; 1267 :             success = RtlRawXmlTokenizer_GatherPCData(
; 1268 :                 &pState->RawTokenState,
; 1269 :                 &RawToken,
; 1270 :                 &NextRawToken);

  001d7	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherPCData@12

; 1271 : 
; 1272 :             cbTotalTokenLength = RawToken.Run.cbData;

  001e0	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1273 : 
; 1274 :             NextState = XTSS_STREAM_HYPERSPACE;

  001e3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 1

; 1275 :         }
; 1276 :         break;

  001ea	e9 c0 01 00 00	 jmp	 $L15724
$L15764:

; 1277 : 
; 1278 : 
; 1279 : 
; 1280 :         //
; 1281 :         // The open-tag can only be followed by whitespace.  Gather it up, but error out if
; 1282 :         // there wasn't any.
; 1283 :         //
; 1284 :     case XTSS_XMLDECL_OPEN:
; 1285 :         success = RtlRawXmlTokenizer_GatherWhitespace(&pState->RawTokenState, &RawToken, NULL);

  001ef	6a 00		 push	 0
  001f1	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  001f4	8b ce		 mov	 ecx, esi
  001f6	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherWhitespace@12

; 1286 :         if (!NT_SUCCESS(success)) {

  001fb	85 c0		 test	 eax, eax

; 1287 :             return success;

  001fd	0f 8c d0 01 00
	00		 jl	 $L16611

; 1288 :         }
; 1289 : 
; 1290 :         cbTotalTokenLength = RawToken.Run.cbData;

  00203	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1291 :         if ((RawToken.Run.cbData > 0) && (RawToken.TokenName == NTXML_RAWTOKEN_WHITESPACE)) {

  00206	85 ff		 test	 edi, edi
  00208	0f 86 9a 01 00
	00		 jbe	 $L16013
  0020e	83 7d e8 0d	 cmp	 DWORD PTR _RawToken$[ebp], 13 ; 0000000dH
  00212	0f 85 90 01 00
	00		 jne	 $L16013
$L16613:

; 1292 :             NextState = XTSS_XMLDECL_WHITESPACE;

  00218	c7 45 fc 2e 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 46 ; 0000002eH

; 2412 :         }
; 2413 :         else {

  0021f	e9 8b 01 00 00	 jmp	 $L15724
$L15770:

; 1293 :         }
; 1294 :         else {
; 1295 :             pToken->fError = TRUE;
; 1296 :         }
; 1297 :         break;
; 1298 : 
; 1299 : 
; 1300 :         //
; 1301 :         // Each of these has to be followed by an equals sign
; 1302 :         //
; 1303 :     case XTSS_XMLDECL_ENCODING:
; 1304 :     case XTSS_XMLDECL_STANDALONE:
; 1305 :     case XTSS_XMLDECL_VERSION:
; 1306 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00224	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00227	8b ce		 mov	 ecx, esi
  00229	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1307 :         if (!NT_SUCCESS(success)) {

  0022e	85 c0		 test	 eax, eax

; 1308 :             return success;

  00230	0f 8c 9d 01 00
	00		 jl	 $L16611

; 1309 :         }
; 1310 : 
; 1311 :         cbTotalTokenLength = RawToken.Run.cbData;
; 1312 :         if (RawToken.TokenName == NTXML_RAWTOKEN_EQUALS) {

  00236	83 7d e8 04	 cmp	 DWORD PTR _RawToken$[ebp], 4
  0023a	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  0023d	0f 85 65 01 00
	00		 jne	 $L16013

; 1313 :             NextState = XTSS_XMLDECL_EQUALS;

  00243	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 47 ; 0000002fH

; 2412 :         }
; 2413 :         else {

  0024a	e9 60 01 00 00	 jmp	 $L15724
$L15775:

; 1314 :         }
; 1315 :         else {
; 1316 :             pToken->fError = TRUE;
; 1317 :         }
; 1318 :         break;
; 1319 : 
; 1320 : 
; 1321 : 
; 1322 : 
; 1323 : 
; 1324 : 
; 1325 : 
; 1326 :         //
; 1327 :         // If the next thing is a quote, then record it, otherwise
; 1328 :         // error out.
; 1329 :         //
; 1330 :     case XTSS_XMLDECL_EQUALS:
; 1331 : 
; 1332 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  0024f	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00252	8b ce		 mov	 ecx, esi
  00254	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1333 :         if (!NT_SUCCESS(success)) {

  00259	85 c0		 test	 eax, eax

; 1334 :             return success;

  0025b	0f 8c 72 01 00
	00		 jl	 $L16611

; 1335 :         }
; 1336 : 
; 1337 :         cbTotalTokenLength = RawToken.Run.cbData;
; 1338 : 
; 1339 :         if ((RawToken.TokenName == NTXML_RAWTOKEN_QUOTE) || (RawToken.TokenName == NTXML_RAWTOKEN_DOUBLEQUOTE)) {

  00261	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  00264	83 f9 09	 cmp	 ecx, 9
  00267	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  0026a	74 09		 je	 SHORT $L15779
  0026c	83 f9 0a	 cmp	 ecx, 10			; 0000000aH

; 1343 : 
; 1344 :         }
; 1345 :         else {
; 1346 :             pToken->fError = TRUE;

  0026f	0f 85 33 01 00
	00		 jne	 $L16013
$L15779:

; 1340 : 
; 1341 :             pState->QuoteTemp = RawToken.TokenName;

  00275	89 8e 34 01 00
	00		 mov	 DWORD PTR [esi+308], ecx

; 1342 :             NextState = XTSS_XMLDECL_VALUE_OPEN;

  0027b	c7 45 fc 33 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 51 ; 00000033H

; 1347 :         }
; 1348 :         break;

  00282	e9 28 01 00 00	 jmp	 $L15724
$L15781:

; 1349 : 
; 1350 : 
; 1351 : 
; 1352 : 
; 1353 : 
; 1354 : 
; 1355 :         //
; 1356 :         // Values can only be followed by another quote
; 1357 :         //
; 1358 :     case XTSS_XMLDECL_VALUE:
; 1359 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00287	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0028a	8b ce		 mov	 ecx, esi
  0028c	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1360 :         if (!NT_SUCCESS(success)) {

  00291	85 c0		 test	 eax, eax

; 1361 :             return success;

  00293	0f 8c 3a 01 00
	00		 jl	 $L16611

; 1362 :         }
; 1363 : 
; 1364 :         cbTotalTokenLength = RawToken.Run.cbData;
; 1365 : 
; 1366 :         if (RawToken.TokenName == pState->QuoteTemp) {

  00299	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  0029c	3b 8e 34 01 00
	00		 cmp	 ecx, DWORD PTR [esi+308]
  002a2	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  002a5	0f 85 fd 00 00
	00		 jne	 $L16013

; 1367 :             NextState = XTSS_XMLDECL_VALUE_CLOSE;

  002ab	c7 45 fc 35 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 53 ; 00000035H

; 2412 :         }
; 2413 :         else {

  002b2	e9 f8 00 00 00	 jmp	 $L15724
$L15786:

; 1368 :         }
; 1369 :         //
; 1370 :         // Otherwise, something odd was present in the input stream...
; 1371 :         //
; 1372 :         else {
; 1373 :             pToken->fError = TRUE;
; 1374 :         }
; 1375 : 
; 1376 :         break;
; 1377 : 
; 1378 : 
; 1379 : 
; 1380 : 
; 1381 : 
; 1382 :         //
; 1383 :         // Value-open is followed by N tokens until a close is found
; 1384 :         //
; 1385 :     case XTSS_XMLDECL_VALUE_OPEN:
; 1386 : 
; 1387 :         success = RtlRawXmlTokenizer_GatherUntil(&pState->RawTokenState, &RawToken, pState->QuoteTemp, &NextRawToken);

  002b7	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  002ba	50		 push	 eax
  002bb	ff b6 34 01 00
	00		 push	 DWORD PTR [esi+308]
  002c1	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  002c4	8b ce		 mov	 ecx, esi
  002c6	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherUntil@16

; 1388 :         if (!NT_SUCCESS(success)) {

  002cb	85 c0		 test	 eax, eax

; 1389 :             return success;

  002cd	0f 8c 00 01 00
	00		 jl	 $L16611

; 1390 :         }
; 1391 : 
; 1392 :         //
; 1393 :         // With luck, we'll always hit this state.  Found the closing quote value
; 1394 :         //
; 1395 :         if (NextRawToken.TokenName == pState->QuoteTemp) {

  002d3	8b 4d dc	 mov	 ecx, DWORD PTR _NextRawToken$[ebp]
  002d6	3b 8e 34 01 00
	00		 cmp	 ecx, DWORD PTR [esi+308]
  002dc	0f 85 c6 00 00
	00		 jne	 $L16013

; 1396 :             cbTotalTokenLength = RawToken.Run.cbData;

  002e2	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1397 :             NextState = XTSS_XMLDECL_VALUE;

  002e5	c7 45 fc 34 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 52 ; 00000034H

; 2412 :         }
; 2413 :         else {

  002ec	e9 be 00 00 00	 jmp	 $L15724
$L15791:

; 1398 :         }
; 1399 :         //
; 1400 :         // Otherwise, we found something odd (end of stream, maybe)
; 1401 :         else {
; 1402 :             pToken->fError = TRUE;
; 1403 :         }
; 1404 : 
; 1405 :         break;
; 1406 : 
; 1407 : 
; 1408 : 
; 1409 : 
; 1410 : 
; 1411 :         //
; 1412 :         // Whitespace and value-close can only be followed by more whitespace
; 1413 :         // or the close-PI tag
; 1414 :         //
; 1415 :     case XTSS_XMLDECL_VALUE_CLOSE:
; 1416 :     case XTSS_XMLDECL_WHITESPACE:
; 1417 : 
; 1418 :         success = RtlRawXmlTokenizer_GatherWhitespace(&pState->RawTokenState, &RawToken, &NextRawToken);

  002f1	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  002f4	50		 push	 eax
  002f5	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  002f8	8b ce		 mov	 ecx, esi
  002fa	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherWhitespace@12

; 1419 :         if (!NT_SUCCESS(success)) {

  002ff	85 c0		 test	 eax, eax

; 1420 :             return success;

  00301	0f 8c cc 00 00
	00		 jl	 $L16611

; 1421 :         }
; 1422 : 
; 1423 :         if ((RawToken.Run.cbData > 0) && (RawToken.TokenName == NTXML_RAWTOKEN_WHITESPACE)) {

  00307	83 7d f0 00	 cmp	 DWORD PTR _RawToken$[ebp+8], 0
  0030b	76 0e		 jbe	 SHORT $L15794
  0030d	83 7d e8 0d	 cmp	 DWORD PTR _RawToken$[ebp], 13 ; 0000000dH
  00311	75 08		 jne	 SHORT $L15794

; 1424 :             cbTotalTokenLength = RawToken.Run.cbData;

  00313	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1425 :             NextState = XTSS_XMLDECL_WHITESPACE;
; 1426 :         }
; 1427 :         //
; 1428 :         // Maybe there wasn't whitespace, but the next thing was a questionmark
; 1429 :         //
; 1430 :         else if (NextRawToken.TokenName == NTXML_RAWTOKEN_QUESTIONMARK) {

  00316	e9 fd fe ff ff	 jmp	 $L16613
$L15794:
  0031b	83 7d dc 08	 cmp	 DWORD PTR _NextRawToken$[ebp], 8
  0031f	75 2c		 jne	 SHORT $L15796

; 1431 : 
; 1432 :             cbTotalTokenLength = NextRawToken.Run.cbData;
; 1433 : 
; 1434 :             ADVANCE_PVOID(pState->RawTokenState.pvCursor, NextRawToken.Run.cbData);

  00321	8b 7d e4	 mov	 edi, DWORD PTR _NextRawToken$[ebp+8]
  00324	01 7e 0c	 add	 DWORD PTR [esi+12], edi

; 1435 : 
; 1436 :             success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00327	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0032a	8b ce		 mov	 ecx, esi
  0032c	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1437 :             if (!NT_SUCCESS(success)) {

  00331	85 c0		 test	 eax, eax

; 1438 :                 return success;

  00333	0f 8c 9a 00 00
	00		 jl	 $L16611

; 1439 :             }
; 1440 : 
; 1441 :             cbTotalTokenLength += RawToken.Run.cbData;

  00339	8b 4d f0	 mov	 ecx, DWORD PTR _RawToken$[ebp+8]
  0033c	03 f9		 add	 edi, ecx

; 1442 : 
; 1443 :             //
; 1444 :             // ? must be followed by > in an xmldecl.
; 1445 :             //
; 1446 :             if (RawToken.TokenName == NTXML_RAWTOKEN_GT) {

  0033e	83 7d e8 06	 cmp	 DWORD PTR _RawToken$[ebp], 6
  00342	75 64		 jne	 SHORT $L16013

; 1447 :                 NextState = XTSS_XMLDECL_CLOSE;

  00344	c7 45 fc 2d 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 45 ; 0000002dH

; 2412 :         }
; 2413 :         else {

  0034b	eb 62		 jmp	 SHORT $L15724
$L15796:

; 1448 :             }
; 1449 :             else {
; 1450 :                 pToken->fError = TRUE;
; 1451 :             }
; 1452 :         }
; 1453 :         //
; 1454 :         // If we're on whitespace, and the next raw token is a textual thing, then we can
; 1455 :         // probably gather up an attribute from the input.
; 1456 :         //
; 1457 :         else if ((NextRawToken.TokenName == NTXML_RAWTOKEN_TEXT) && (PreviousState == XTSS_XMLDECL_WHITESPACE)) {

  0034d	83 7d dc 0c	 cmp	 DWORD PTR _NextRawToken$[ebp], 12 ; 0000000cH
  00351	75 55		 jne	 SHORT $L16013
  00353	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00356	75 50		 jne	 SHORT $L16013

; 1458 :             XML_STRING_COMPARE fMatching = XML_STRING_COMPARE_LT;

  00358	83 4d 08 ff	 or	 DWORD PTR _fMatching$15804[ebp], -1

; 1459 :             ULONG u;
; 1460 : 
; 1461 :             static const struct {
; 1462 :                 PXML_SPECIAL_STRING             ss;
; 1463 :                 XML_TOKENIZATION_SPECIFIC_STATE state;
; 1464 :             } ComparisonStates[] = {
; 1465 :                 { &xss_encoding,    XTSS_XMLDECL_ENCODING },
; 1466 :                 { &xss_version,     XTSS_XMLDECL_VERSION },
; 1467 :                 { &xss_standalone,  XTSS_XMLDECL_STANDALONE }
; 1468 :             };
; 1469 : 
; 1470 :             //
; 1471 :             // Snif the actual full identifier from the input stream
; 1472 :             //
; 1473 :             success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, NULL);

  0035c	33 db		 xor	 ebx, ebx
  0035e	53		 push	 ebx
  0035f	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00362	8b ce		 mov	 ecx, esi
  00364	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 1474 :             if (!NT_SUCCESS(success)) {

  00369	3b c3		 cmp	 eax, ebx

; 1475 :                 return success;

  0036b	7c 66		 jl	 SHORT $L16611

; 1476 :             }
; 1477 : 
; 1478 :             //
; 1479 :             // This had better be text again
; 1480 :             //
; 1481 :             ASSERT(RawToken.TokenName == NTXML_RAWTOKEN_TEXT);
; 1482 :             cbTotalTokenLength = RawToken.Run.cbData;

  0036d	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
$L15815:

; 1483 : 
; 1484 :             //
; 1485 :             // Look to see if it's any of the known XMLDECL attributes
; 1486 :             //
; 1487 :             for (u = 0; u < NUMBER_OF(ComparisonStates); u++) {
; 1488 : 
; 1489 :                 success = pState->pfnCompareSpecialString(
; 1490 :                     pState,
; 1491 :                     &RawToken.Run,
; 1492 :                     ComparisonStates[u].ss,
; 1493 :                     &fMatching);

  00370	8d 45 08	 lea	 eax, DWORD PTR _fMatching$15804[ebp]
  00373	50		 push	 eax
  00374	ff 34 dd 00 00
	00 00		 push	 DWORD PTR ?ComparisonStates@?CN@??RtlXmlNextToken@@9@9[ebx*8]
  0037b	8d 45 ec	 lea	 eax, DWORD PTR _RawToken$[ebp+4]
  0037e	50		 push	 eax
  0037f	56		 push	 esi
  00380	ff 96 30 01 00
	00		 call	 DWORD PTR [esi+304]

; 1494 : 
; 1495 :                 if (!NT_SUCCESS(success)) {

  00386	85 c0		 test	 eax, eax
  00388	7c 49		 jl	 SHORT $L16611

; 1496 :                     return success;
; 1497 :                 }
; 1498 : 
; 1499 :                 if (fMatching == XML_STRING_COMPARE_EQUALS) {

  0038a	83 7d 08 00	 cmp	 DWORD PTR _fMatching$15804[ebp], 0
  0038e	74 08		 je	 SHORT $L16599
  00390	43		 inc	 ebx
  00391	83 fb 03	 cmp	 ebx, 3
  00394	72 da		 jb	 SHORT $L15815

; 1732 :                 if (!NT_SUCCESS(success)) {

  00396	eb 0a		 jmp	 SHORT $L15817
$L16599:

; 1500 :                     NextState = ComparisonStates[u].state;

  00398	8b 0c dd 04 00
	00 00		 mov	 ecx, DWORD PTR ?ComparisonStates@?CN@??RtlXmlNextToken@@9@9[ebx*8+4]
  0039f	89 4d fc	 mov	 DWORD PTR _NextState$[ebp], ecx
$L15817:

; 1501 :                     break;
; 1502 :                 }
; 1503 : 
; 1504 :             }
; 1505 : 
; 1506 :             //
; 1507 :             // No match found means unknown xmldecl attribute name.
; 1508 :             //
; 1509 :             if (fMatching != XML_STRING_COMPARE_EQUALS) {

  003a2	83 7d 08 00	 cmp	 DWORD PTR _fMatching$15804[ebp], 0
  003a6	74 07		 je	 SHORT $L15724
$L16013:

; 2427 :         }
; 2428 : 
; 2429 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2430 : 
; 2431 :         if (RawToken.TokenName == NTXML_RAWTOKEN_EQUALS) {
; 2432 :             NextState = XTSS_ELEMENT_XMLNS_EQUALS;
; 2433 :         }
; 2434 :         else {
; 2435 :             pToken->fError = TRUE;

  003a8	8b 4d 0c	 mov	 ecx, DWORD PTR _pToken$[ebp]
$L16015:

; 2436 :         }
; 2437 :         break;
; 2438 : 
; 2439 : 
; 2440 : 
; 2441 : 
; 2442 :         //
; 2443 :         // Wierd, some unhandled state.
; 2444 :         //
; 2445 :     default:
; 2446 :         pToken->fError = TRUE;

  003ab	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
$L15724:

; 2447 :         break;
; 2448 :     }
; 2449 : 
; 2450 : 
; 2451 : 
; 2452 : 
; 2453 :     //
; 2454 :     // Reset the state of the raw tokenizer back to the original incoming state,
; 2455 :     // as the caller is the one that has to do the "advance"
; 2456 :     //
; 2457 :     pState->RawTokenState.pvCursor = pvStarterCursor;
; 2458 : 
; 2459 :     pToken->Run.cbData = cbTotalTokenLength;
; 2460 :     pToken->Run.pvData = pvStarterCursor;
; 2461 :     pToken->State = NextState;
; 2462 : 
; 2463 :     if (NT_SUCCESS(success) && fAdvanceState) {

  003af	85 c0		 test	 eax, eax
  003b1	8b 55 f4	 mov	 edx, DWORD PTR _pvStarterCursor$[ebp]
  003b4	8b 4d 0c	 mov	 ecx, DWORD PTR _pToken$[ebp]
  003b7	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  003ba	89 11		 mov	 DWORD PTR [ecx], edx
  003bc	8b 55 fc	 mov	 edx, DWORD PTR _NextState$[ebp]
  003bf	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  003c2	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  003c5	7c 0c		 jl	 SHORT $L16611
  003c7	80 7d 10 00	 cmp	 BYTE PTR _fAdvanceState$[ebp], 0
  003cb	74 06		 je	 SHORT $L16611

; 2464 :         ADVANCE_PVOID(pState->RawTokenState.pvCursor, pToken->Run.cbData);

  003cd	01 7e 0c	 add	 DWORD PTR [esi+12], edi

; 2465 :         pState->PreviousState = NextState;

  003d0	89 56 38	 mov	 DWORD PTR [esi+56], edx
$L16611:
  003d3	5b		 pop	 ebx
$L15698:
  003d4	5f		 pop	 edi
  003d5	5e		 pop	 esi

; 2466 :     }
; 2467 : 
; 2468 :     return success;
; 2469 : }

  003d6	c9		 leave
  003d7	c2 0c 00	 ret	 12			; 0000000cH
$L15823:

; 1510 :                 pToken->fError = TRUE;
; 1511 :             }
; 1512 :         }
; 1513 :         else {
; 1514 :             pToken->fError = TRUE;
; 1515 :         }
; 1516 :         break;
; 1517 : 
; 1518 : 
; 1519 : 
; 1520 : 
; 1521 : 
; 1522 : 
; 1523 :         //
; 1524 :         // After a PI opening <?, there should come a name
; 1525 :         //
; 1526 :     case XTSS_PI_OPEN:
; 1527 : 
; 1528 :         success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, NULL);

  003da	6a 00		 push	 0
  003dc	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  003df	8b ce		 mov	 ecx, esi
  003e1	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 1529 :         if (!NT_SUCCESS(success)) {

  003e6	85 c0		 test	 eax, eax

; 1530 :             return success;

  003e8	7c e9		 jl	 SHORT $L16611

; 1531 :         }
; 1532 : 
; 1533 :         cbTotalTokenLength = RawToken.Run.cbData;

  003ea	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1534 : 
; 1535 :         //
; 1536 :         // Found an identifier
; 1537 :         //
; 1538 :         if ((RawToken.Run.cbData > 0) && (RawToken.TokenName == NTXML_RAWTOKEN_TEXT)) {

  003ed	85 ff		 test	 edi, edi
  003ef	76 b7		 jbe	 SHORT $L16013
  003f1	83 7d e8 0c	 cmp	 DWORD PTR _RawToken$[ebp], 12 ; 0000000cH
  003f5	75 b1		 jne	 SHORT $L16013

; 1539 :             NextState = XTSS_PI_TARGET;

  003f7	c7 45 fc 23 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 35 ; 00000023H

; 2412 :         }
; 2413 :         else {

  003fe	eb af		 jmp	 SHORT $L15724
$L15829:

; 1540 :         }
; 1541 :         else {
; 1542 :             pToken->fError = TRUE;
; 1543 :         }
; 1544 : 
; 1545 :         break;
; 1546 : 
; 1547 : 
; 1548 : 
; 1549 : 
; 1550 : 
; 1551 : 
; 1552 :         //
; 1553 :         // After a value should only come a ?> combo.
; 1554 :         //
; 1555 :     case XTSS_PI_VALUE:
; 1556 : 
; 1557 :         success = RtlRawXmlTokenizer_GatherNTokens(
; 1558 :             &pState->RawTokenState,
; 1559 :             pState->RawTokenScratch,
; 1560 :             2);

  00400	8d 5e 3c	 lea	 ebx, DWORD PTR [esi+60]
  00403	6a 02		 push	 2
  00405	8b d3		 mov	 edx, ebx
  00407	8b ce		 mov	 ecx, esi
  00409	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherNTokens@12

; 1561 : 
; 1562 :         if (!NT_SUCCESS(success)) {

  0040e	85 c0		 test	 eax, eax

; 1563 :             return success;

  00410	7c c1		 jl	 SHORT $L16611

; 1564 :         }
; 1565 : 
; 1566 :         //
; 1567 :         // Set these up to start with
; 1568 :         //
; 1569 :         cbTotalTokenLength = pState->RawTokenScratch[0].Run.cbData + pState->RawTokenScratch[1].Run.cbData;

  00412	8b 7e 50	 mov	 edi, DWORD PTR [esi+80]
  00415	03 7e 44	 add	 edi, DWORD PTR [esi+68]

; 1570 : 
; 1571 :         //
; 1572 :         // After a PI must come a ?> pair
; 1573 :         //
; 1574 :         if ((pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_QUESTIONMARK) &&
; 1575 :             (pState->RawTokenScratch[1].TokenName == NTXML_RAWTOKEN_GT)) {

  00418	83 3b 08	 cmp	 DWORD PTR [ebx], 8
  0041b	75 8b		 jne	 SHORT $L16013
  0041d	83 7e 48 06	 cmp	 DWORD PTR [esi+72], 6
  00421	75 85		 jne	 SHORT $L16013

; 1576 : 
; 1577 :             NextState = XTSS_PI_CLOSE;

  00423	c7 45 fc 22 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 34 ; 00000022H

; 2412 :         }
; 2413 :         else {

  0042a	eb 83		 jmp	 SHORT $L15724
$L15834:

; 1578 :         }
; 1579 :         //
; 1580 :         // Otherwise, error out
; 1581 :         //
; 1582 :         else {
; 1583 :             pToken->fError = TRUE;
; 1584 :         }
; 1585 :         
; 1586 :         break;
; 1587 : 
; 1588 : 
; 1589 :         //
; 1590 :         // After a target must come either whitespace or a ?> pair.
; 1591 :         //
; 1592 :     case XTSS_PI_TARGET:
; 1593 : 
; 1594 :         success = RtlRawXmlTokenizer_GatherWhitespace(&pState->RawTokenState, &RawToken, &NextRawToken);

  0042c	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  0042f	50		 push	 eax
  00430	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00433	8b ce		 mov	 ecx, esi
  00435	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherWhitespace@12

; 1595 :         if (!NT_SUCCESS(success)) {

  0043a	85 c0		 test	 eax, eax

; 1596 :             return success;

  0043c	7c 95		 jl	 SHORT $L16611

; 1597 :         }
; 1598 : 
; 1599 :         cbTotalTokenLength = RawToken.Run.cbData;

  0043e	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1600 : 
; 1601 :         //
; 1602 :         // Whitespace present?  Dandy
; 1603 :         //
; 1604 :         if ((RawToken.Run.cbData != 0) && (RawToken.TokenName == NTXML_RAWTOKEN_WHITESPACE)) {

  00441	85 ff		 test	 edi, edi
  00443	74 12		 je	 SHORT $L15837
  00445	83 7d e8 0d	 cmp	 DWORD PTR _RawToken$[ebp], 13 ; 0000000dH
  00449	75 0c		 jne	 SHORT $L15837

; 1605 :             NextState = XTSS_PI_WHITESPACE;

  0044b	c7 45 fc 25 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 37 ; 00000025H

; 1606 :         }
; 1607 :         //
; 1608 :         // If this was a questionmark, then gather the next two items.
; 1609 :         //
; 1610 :         else if (NextRawToken.TokenName == NTXML_RAWTOKEN_QUESTIONMARK) {

  00452	e9 58 ff ff ff	 jmp	 $L15724
$L15837:
  00457	83 7d dc 08	 cmp	 DWORD PTR _NextRawToken$[ebp], 8
  0045b	0f 85 47 ff ff
	ff		 jne	 $L16013

; 2412 :         }
; 2413 :         else {

  00461	eb 9d		 jmp	 SHORT $L15829
$L15845:

; 1611 : 
; 1612 :             success = RtlRawXmlTokenizer_GatherNTokens(&pState->RawTokenState, pState->RawTokenScratch, 2);
; 1613 :             if (!NT_SUCCESS(success)) {
; 1614 :                 return success;
; 1615 :             }
; 1616 : 
; 1617 :             cbTotalTokenLength = pState->RawTokenScratch[0].Run.cbData + pState->RawTokenScratch[1].Run.cbData;
; 1618 : 
; 1619 :             //
; 1620 :             // ?> -> PI close
; 1621 :             //
; 1622 :             if ((pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_QUESTIONMARK) &&
; 1623 :                 (pState->RawTokenScratch[1].TokenName == NTXML_RAWTOKEN_GT)) {
; 1624 : 
; 1625 :                 NextState = XTSS_PI_CLOSE;
; 1626 :             }
; 1627 :             //
; 1628 :             // ? just hanging out there is an error
; 1629 :             //
; 1630 :             else {
; 1631 :                 pToken->fError = TRUE;
; 1632 :             }
; 1633 :         }
; 1634 :         //
; 1635 :         // Not starting with whitespace or a questionmark after a value name is illegal.
; 1636 :         //
; 1637 :         else {
; 1638 :             pToken->fError = TRUE;
; 1639 :         }
; 1640 :         break;
; 1641 : 
; 1642 : 
; 1643 : 
; 1644 :         //
; 1645 :         // After the whitespace following a PI target comes random junk until a ?> is found.
; 1646 :         //
; 1647 :     case XTSS_PI_WHITESPACE:
; 1648 : 
; 1649 :         cbTotalTokenLength = 0;

  00463	33 ff		 xor	 edi, edi
$L15846:

; 1650 : 
; 1651 :         do
; 1652 :         {
; 1653 :             SIZE_T cbThisChunklet = 0;
; 1654 : 
; 1655 :             success = RtlRawXmlTokenizer_GatherUntil(
; 1656 :                 &pState->RawTokenState, 
; 1657 :                 &RawToken, 
; 1658 :                 NTXML_RAWTOKEN_QUESTIONMARK,
; 1659 :                 &NextRawToken);

  00465	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  00468	50		 push	 eax
  00469	6a 08		 push	 8
  0046b	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0046e	8b ce		 mov	 ecx, esi
  00470	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherUntil@16

; 1660 : 
; 1661 :             cbThisChunklet = RawToken.Run.cbData;

  00475	8b 4d f0	 mov	 ecx, DWORD PTR _RawToken$[ebp+8]

; 1662 :             ADVANCE_PVOID(pState->RawTokenState.pvCursor, RawToken.Run.cbData);

  00478	01 4e 0c	 add	 DWORD PTR [esi+12], ecx

; 1663 : 
; 1664 :             //
; 1665 :             // Found a questionmark, see if this is really ?>
; 1666 :             //
; 1667 :             if (NextRawToken.TokenName == NTXML_RAWTOKEN_QUESTIONMARK) {

  0047b	83 7d dc 08	 cmp	 DWORD PTR _NextRawToken$[ebp], 8
  0047f	89 4d 08	 mov	 DWORD PTR _cbThisChunklet$15849[ebp], ecx
  00482	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00485	75 33		 jne	 SHORT $L15851

; 1668 : 
; 1669 :                 ADVANCE_PVOID(pState->RawTokenState.pvCursor, NextRawToken.Run.cbData);

  00487	8b 5d e4	 mov	 ebx, DWORD PTR _NextRawToken$[ebp+8]
  0048a	03 cb		 add	 ecx, ebx
  0048c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 1670 : 
; 1671 :                 success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  0048f	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00492	8b ce		 mov	 ecx, esi
  00494	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1672 :                 if (!NT_SUCCESS(success)) {

  00499	85 c0		 test	 eax, eax
  0049b	0f 8c 32 ff ff
	ff		 jl	 $L16611

; 1673 :                     return success;
; 1674 :                 }
; 1675 : 
; 1676 :                 //
; 1677 :                 // Wasn't ?> - simply forward the cursor past the two and continue
; 1678 :                 //
; 1679 :                 if (RawToken.TokenName != NTXML_RAWTOKEN_GT) {

  004a1	83 7d e8 06	 cmp	 DWORD PTR _RawToken$[ebp], 6
  004a5	74 0a		 je	 SHORT $L15855

; 1680 :                     cbThisChunklet = NextRawToken.Run.cbData + RawToken.Run.cbData;
; 1681 :                     ADVANCE_PVOID(pState->RawTokenState.pvCursor, cbThisChunklet);

  004a7	8b 45 f0	 mov	 eax, DWORD PTR _RawToken$[ebp+8]
  004aa	03 d8		 add	 ebx, eax
  004ac	01 5e 0c	 add	 DWORD PTR [esi+12], ebx

; 1682 :                     continue;

  004af	eb b4		 jmp	 SHORT $L15846
$L15855:

; 1683 :                 }
; 1684 :                 else {
; 1685 :                     NextState = XTSS_PI_VALUE;

  004b1	c7 45 fc 24 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 36 ; 00000024H

; 1686 :                 }
; 1687 :             }
; 1688 :             //
; 1689 :             // Otherwise, was this maybe end of stream?  We'll just stop looking
; 1690 :             //
; 1691 :             else if (NextRawToken.TokenName == NTXML_RAWTOKEN_END_OF_STREAM) {

  004b8	eb 0a		 jmp	 SHORT $L16609
$L15851:
  004ba	83 7d dc 03	 cmp	 DWORD PTR _NextRawToken$[ebp], 3
  004be	75 04		 jne	 SHORT $L16609

; 1692 :                 NextState = XTSS_ERRONEOUS;

  004c0	83 65 fc 00	 and	 DWORD PTR _NextState$[ebp], 0
$L16609:

; 1693 :             }
; 1694 : 
; 1695 :             //
; 1696 :             // Advance the cursor and append the data to the current chunklet
; 1697 :             //
; 1698 :             cbTotalTokenLength += cbThisChunklet;

  004c4	03 7d 08	 add	 edi, DWORD PTR _cbThisChunklet$15849[ebp]

; 1699 :         }
; 1700 :         while (NextState == XTSS_ERRONEOUS);

  004c7	83 7d fc 00	 cmp	 DWORD PTR _NextState$[ebp], 0
  004cb	74 98		 je	 SHORT $L15846
  004cd	e9 dd fe ff ff	 jmp	 $L15724
$L15860:

; 1701 : 
; 1702 :         break;
; 1703 : 
; 1704 : 
; 1705 : 
; 1706 : 
; 1707 :         //
; 1708 :         // We gather data here until we find -- in the input stream.
; 1709 :         //
; 1710 :     case XTSS_COMMENT_OPEN:
; 1711 : 
; 1712 :         NextState = XTSS_ERRONEOUS;

  004d2	83 65 fc 00	 and	 DWORD PTR _NextState$[ebp], 0
$L15861:

; 1713 : 
; 1714 :         do 
; 1715 :         {
; 1716 :             SIZE_T cbChunk = 0;
; 1717 : 
; 1718 :             success = RtlRawXmlTokenizer_GatherUntil(&pState->RawTokenState, &RawToken, NTXML_RAWTOKEN_DASH, &NextRawToken);

  004d6	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  004d9	50		 push	 eax
  004da	6a 01		 push	 1
  004dc	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  004df	8b ce		 mov	 ecx, esi
  004e1	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherUntil@16

; 1719 :             if (!NT_SUCCESS(success)) {

  004e6	85 c0		 test	 eax, eax
  004e8	0f 8c e5 fe ff
	ff		 jl	 $L16611

; 1720 :                 return success;
; 1721 :             }
; 1722 : 
; 1723 :             cbChunk = RawToken.Run.cbData;
; 1724 : 
; 1725 :             if (NextRawToken.TokenName == NTXML_RAWTOKEN_DASH) {

  004ee	83 7d dc 01	 cmp	 DWORD PTR _NextRawToken$[ebp], 1
  004f2	8b 4d f0	 mov	 ecx, DWORD PTR _RawToken$[ebp+8]
  004f5	89 4d 08	 mov	 DWORD PTR _cbChunk$15864[ebp], ecx
  004f8	75 2b		 jne	 SHORT $L15867

; 1726 :                 //
; 1727 :                 // Go past the text and the dash
; 1728 :                 //
; 1729 :                 ADVANCE_PVOID(pState->RawTokenState.pvCursor, cbChunk + NextRawToken.Run.cbData);

  004fa	8b 5d e4	 mov	 ebx, DWORD PTR _NextRawToken$[ebp+8]
  004fd	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00500	01 46 0c	 add	 DWORD PTR [esi+12], eax

; 1730 : 
; 1731 :                 success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00503	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00506	8b ce		 mov	 ecx, esi
  00508	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1732 :                 if (!NT_SUCCESS(success)) {

  0050d	85 c0		 test	 eax, eax
  0050f	0f 8c be fe ff
	ff		 jl	 $L16611

; 1733 :                     return success;
; 1734 :                 }
; 1735 : 
; 1736 :                 //
; 1737 :                 // That was a dash as well - we don't want to add that to the run, but we
; 1738 :                 // should stop looking
; 1739 :                 //
; 1740 :                 if (RawToken.TokenName == NTXML_RAWTOKEN_DASH) {

  00515	83 7d e8 01	 cmp	 DWORD PTR _RawToken$[ebp], 1

; 1741 :                     NextState = XTSS_COMMENT_COMMENTARY;
; 1742 :                 }
; 1743 :                 //
; 1744 :                 // Add the dash and the non-dash as well
; 1745 :                 //
; 1746 :                 else {

  00519	74 10		 je	 SHORT $L16612

; 1747 :                     cbChunk += NextRawToken.Run.cbData + RawToken.Run.cbData;

  0051b	8b 4d f0	 mov	 ecx, DWORD PTR _RawToken$[ebp+8]
  0051e	03 d9		 add	 ebx, ecx
  00520	01 5d 08	 add	 DWORD PTR _cbChunk$15864[ebp], ebx

; 1748 :                 }
; 1749 :             }
; 1750 :             //
; 1751 :             // End of stream found means "end of commentary" - next call through
; 1752 :             // here will detect the badness and return
; 1753 :             //
; 1754 :             else if (NextRawToken.TokenName == NTXML_RAWTOKEN_END_OF_STREAM) {

  00523	eb 0d		 jmp	 SHORT $L16610
$L15867:
  00525	83 7d dc 03	 cmp	 DWORD PTR _NextRawToken$[ebp], 3
  00529	75 07		 jne	 SHORT $L16610
$L16612:

; 1755 :                 NextState = XTSS_COMMENT_COMMENTARY;

  0052b	c7 45 fc 27 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 39 ; 00000027H
$L16610:

; 1756 :             }
; 1757 : 
; 1758 :             ADVANCE_PVOID(pState->RawTokenState.pvCursor, cbChunk);

  00532	8b 4d 08	 mov	 ecx, DWORD PTR _cbChunk$15864[ebp]
  00535	01 4e 0c	 add	 DWORD PTR [esi+12], ecx

; 1759 :             cbTotalTokenLength += cbChunk;

  00538	03 f9		 add	 edi, ecx

; 1760 :         }
; 1761 :         while (NextState == XTSS_ERRONEOUS);

  0053a	83 7d fc 00	 cmp	 DWORD PTR _NextState$[ebp], 0
  0053e	74 96		 je	 SHORT $L15861
  00540	e9 6a fe ff ff	 jmp	 $L15724
$L15876:

; 1762 : 
; 1763 :         break;
; 1764 : 
; 1765 : 
; 1766 : 
; 1767 : 
; 1768 : 
; 1769 :         //
; 1770 :         // After commentary can only come -->, so gather three tokens
; 1771 :         // and see if they're all there
; 1772 :         //
; 1773 :     case XTSS_COMMENT_COMMENTARY:
; 1774 :         
; 1775 : 
; 1776 :         //
; 1777 :         // Grab three tokens
; 1778 :         //
; 1779 :         success = RtlRawXmlTokenizer_GatherNTokens(
; 1780 :             &pState->RawTokenState,
; 1781 :             pState->RawTokenScratch,
; 1782 :             3);

  00545	8d 5e 3c	 lea	 ebx, DWORD PTR [esi+60]
  00548	6a 03		 push	 3
  0054a	8b d3		 mov	 edx, ebx
  0054c	8b ce		 mov	 ecx, esi
  0054e	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherNTokens@12

; 1783 : 
; 1784 :         if (!NT_SUCCESS(success)) {

  00553	85 c0		 test	 eax, eax

; 1785 :             return success;

  00555	0f 8c 78 fe ff
	ff		 jl	 $L16611

; 1786 :         }
; 1787 : 
; 1788 :         //
; 1789 :         // Store their size
; 1790 :         //
; 1791 :         cbTotalTokenLength = 
; 1792 :             pState->RawTokenScratch[0].Run.cbData +
; 1793 :             pState->RawTokenScratch[1].Run.cbData +
; 1794 :             pState->RawTokenScratch[2].Run.cbData;

  0055b	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
  0055e	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  00561	03 7e 44	 add	 edi, DWORD PTR [esi+68]

; 1795 : 
; 1796 :         //
; 1797 :         // If this is -->, then great.
; 1798 :         //
; 1799 :         if ((pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_DASH) &&
; 1800 :             (pState->RawTokenScratch[1].TokenName == NTXML_RAWTOKEN_DASH) &&
; 1801 :             (pState->RawTokenScratch[2].TokenName == NTXML_RAWTOKEN_GT)) {

  00564	83 3b 01	 cmp	 DWORD PTR [ebx], 1
  00567	0f 85 3b fe ff
	ff		 jne	 $L16013
  0056d	83 7e 48 01	 cmp	 DWORD PTR [esi+72], 1
  00571	0f 85 31 fe ff
	ff		 jne	 $L16013
  00577	83 7e 54 06	 cmp	 DWORD PTR [esi+84], 6
  0057b	0f 85 27 fe ff
	ff		 jne	 $L16013

; 1802 : 
; 1803 :             NextState = XTSS_COMMENT_CLOSE;

  00581	c7 45 fc 28 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 40 ; 00000028H

; 2412 :         }
; 2413 :         else {

  00588	e9 22 fe ff ff	 jmp	 $L15724
$L15881:

; 1804 :         }
; 1805 :         //
; 1806 :         // Otherwise, bad format.
; 1807 :         //
; 1808 :         else {
; 1809 :             pToken->fError = TRUE;
; 1810 :         }
; 1811 : 
; 1812 :         break;
; 1813 : 
; 1814 : 
; 1815 : 
; 1816 : 
; 1817 : 
; 1818 :         //
; 1819 :         // We had found the opening of an "end" element.  Find out
; 1820 :         // what it's supposed to be.
; 1821 :         //
; 1822 :     case XTSS_ENDELEMENT_OPEN:
; 1823 : 
; 1824 :         success = RtlRawXmlTokenizer_GatherIdentifier(
; 1825 :             &pState->RawTokenState,
; 1826 :             &RawToken,
; 1827 :             &NextRawToken);

  0058d	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  00590	50		 push	 eax
  00591	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00594	8b ce		 mov	 ecx, esi
  00596	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 1828 : 
; 1829 :         if (!NT_SUCCESS(success)) {

  0059b	85 c0		 test	 eax, eax

; 1830 :             return success;

  0059d	0f 8c 30 fe ff
	ff		 jl	 $L16611

; 1831 :         }
; 1832 : 
; 1833 :         cbTotalTokenLength = RawToken.Run.cbData;        

  005a3	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1834 : 
; 1835 :         //
; 1836 :         // No data in the token?  Malformed identifier
; 1837 :         //
; 1838 :         if (RawToken.Run.cbData == 0) {

  005a6	85 ff		 test	 edi, edi

; 1839 :             pToken->fError = TRUE;
; 1840 :         }
; 1841 :         //
; 1842 :         // Is the next thing a colon?  Then we got a prefix.  Otherwise,
; 1843 :         // we got a name.
; 1844 :         //
; 1845 :         else {

  005a8	0f 84 fa fd ff
	ff		 je	 $L16013

; 1846 :             NextState = (NextRawToken.TokenName == NTXML_RAWTOKEN_COLON) 
; 1847 :                 ? XTSS_ENDELEMENT_NS_PREFIX
; 1848 :                 : XTSS_ENDELEMENT_NAME;

  005ae	33 c9		 xor	 ecx, ecx
  005b0	83 7d dc 13	 cmp	 DWORD PTR _NextRawToken$[ebp], 19 ; 00000013H
  005b4	0f 95 c1	 setne	 cl
  005b7	49		 dec	 ecx
  005b8	83 e1 03	 and	 ecx, 3
  005bb	83 c1 1c	 add	 ecx, 28			; 0000001cH

; 1849 :         }
; 1850 : 
; 1851 :         break;

  005be	e9 83 00 00 00	 jmp	 $L16615
$L15886:

; 1852 : 
; 1853 : 
; 1854 : 
; 1855 :         //
; 1856 :         // Whitespace and endelement-name must be followed by a >
; 1857 :         //
; 1858 :     case XTSS_ENDELEMENT_NAME:
; 1859 :     case XTSS_ENDELEMENT_WHITESPACE:
; 1860 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  005c3	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  005c6	8b ce		 mov	 ecx, esi
  005c8	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1861 :         if (!NT_SUCCESS(success)) {

  005cd	85 c0		 test	 eax, eax

; 1862 :             return success;

  005cf	0f 8c fe fd ff
	ff		 jl	 $L16611

; 1863 :         }
; 1864 : 
; 1865 :         cbTotalTokenLength = RawToken.Run.cbData;
; 1866 : 
; 1867 :         if (RawToken.TokenName == NTXML_RAWTOKEN_GT) {

  005d5	83 7d e8 06	 cmp	 DWORD PTR _RawToken$[ebp], 6
  005d9	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  005dc	75 0c		 jne	 SHORT $L15889

; 1868 :             NextState = XTSS_ENDELEMENT_CLOSE;

  005de	c7 45 fc 1e 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 30 ; 0000001eH

; 1869 :         }
; 1870 :         //
; 1871 :         // More whitespace?  Odd, gather it and continue
; 1872 :         //
; 1873 :         else if (RawToken.TokenName == XTSS_ENDELEMENT_WHITESPACE) {

  005e5	e9 c5 fd ff ff	 jmp	 $L15724
$L15889:
  005ea	6a 1d		 push	 29			; 0000001dH
  005ec	5b		 pop	 ebx
  005ed	39 5d e8	 cmp	 DWORD PTR _RawToken$[ebp], ebx
  005f0	0f 85 b2 fd ff
	ff		 jne	 $L16013

; 1874 : 
; 1875 :             success = RtlRawXmlTokenizer_GatherWhitespace(&pState->RawTokenState, &RawToken, NULL);

  005f6	6a 00		 push	 0
  005f8	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  005fb	8b ce		 mov	 ecx, esi
  005fd	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherWhitespace@12

; 1876 :             if (!NT_SUCCESS(success)) {

  00602	85 c0		 test	 eax, eax

; 1877 :                 return success;

  00604	0f 8c c9 fd ff
	ff		 jl	 $L16611

; 1878 :             }
; 1879 : 
; 1880 :             cbTotalTokenLength = RawToken.Run.cbData;

  0060a	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
$L16614:

; 1881 :             NextState = XTSS_ENDELEMENT_WHITESPACE;

  0060d	89 5d fc	 mov	 DWORD PTR _NextState$[ebp], ebx

; 2412 :         }
; 2413 :         else {

  00610	e9 9a fd ff ff	 jmp	 $L15724
$L15896:

; 1882 :         }
; 1883 :         else {
; 1884 :             pToken->fError = TRUE;
; 1885 :         }
; 1886 :         break;
; 1887 : 
; 1888 : 
; 1889 : 
; 1890 : 
; 1891 : 
; 1892 : 
; 1893 : 
; 1894 :         //
; 1895 :         // We're in an element, so look at the next thing
; 1896 :         //
; 1897 :     case XTSS_ELEMENT_OPEN:
; 1898 : 
; 1899 :         success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, &NextRawToken);

  00615	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  00618	50		 push	 eax
  00619	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0061c	8b ce		 mov	 ecx, esi
  0061e	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 1900 :         if (!NT_SUCCESS(success)) {

  00623	85 c0		 test	 eax, eax

; 1901 :             return success;

  00625	0f 8c a8 fd ff
	ff		 jl	 $L16611

; 1902 :         }
; 1903 :         
; 1904 :         cbTotalTokenLength = RawToken.Run.cbData;

  0062b	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1905 :         
; 1906 :         //
; 1907 :         // Was there data in the identifier?
; 1908 :         //
; 1909 :         if (RawToken.Run.cbData > 0) {

  0062e	85 ff		 test	 edi, edi
  00630	0f 86 72 fd ff
	ff		 jbe	 $L16013

; 1910 :             NextState = (NextRawToken.TokenName == NTXML_RAWTOKEN_COLON)
; 1911 :                 ? XTSS_ELEMENT_NAME_NS_PREFIX
; 1912 :                 : XTSS_ELEMENT_NAME;

  00636	33 c9		 xor	 ecx, ecx
  00638	83 7d dc 13	 cmp	 DWORD PTR _NextRawToken$[ebp], 19 ; 00000013H
  0063c	0f 95 c1	 setne	 cl
  0063f	49		 dec	 ecx
  00640	83 e1 09	 and	 ecx, 9
  00643	83 c1 05	 add	 ecx, 5
$L16615:
  00646	89 4d fc	 mov	 DWORD PTR _NextState$[ebp], ecx

; 2412 :         }
; 2413 :         else {

  00649	e9 61 fd ff ff	 jmp	 $L15724
$L15901:

; 1913 :         }
; 1914 :         //
; 1915 :         // Otherwise, there was erroneous data there
; 1916 :         //
; 1917 :         else {
; 1918 :             pToken->fError = TRUE;
; 1919 :         }
; 1920 : 
; 1921 :         break;
; 1922 : 
; 1923 : 
; 1924 : 
; 1925 : 
; 1926 : 
; 1927 :         //
; 1928 :         // After a prefix should only come a colon
; 1929 :         //
; 1930 :     case XTSS_ELEMENT_NAME_NS_PREFIX:
; 1931 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  0064e	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00651	8b ce		 mov	 ecx, esi
  00653	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 1932 :         if (!NT_SUCCESS(success)) {

  00658	85 c0		 test	 eax, eax

; 1933 :             return success;

  0065a	0f 8c 73 fd ff
	ff		 jl	 $L16611

; 1934 :         }
; 1935 : 
; 1936 :         cbTotalTokenLength = RawToken.Run.cbData;
; 1937 : 
; 1938 :         if (RawToken.TokenName == NTXML_RAWTOKEN_COLON) {

  00660	83 7d e8 13	 cmp	 DWORD PTR _RawToken$[ebp], 19 ; 00000013H
  00664	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  00667	0f 85 3b fd ff
	ff		 jne	 $L16013

; 1939 :             NextState = XTSS_ELEMENT_NAME_NS_COLON;

  0066d	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 15 ; 0000000fH

; 2412 :         }
; 2413 :         else {

  00674	e9 36 fd ff ff	 jmp	 $L15724
$L15906:

; 1940 :         }
; 1941 :         else {
; 1942 :             pToken->fError = TRUE;
; 1943 :         }
; 1944 :         break;
; 1945 : 
; 1946 : 
; 1947 : 
; 1948 : 
; 1949 : 
; 1950 :         //
; 1951 :         // After a colon can only come a name piece
; 1952 :         //
; 1953 :     case XTSS_ELEMENT_NAME_NS_COLON:
; 1954 : 
; 1955 : 
; 1956 :         success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, NULL);

  00679	6a 00		 push	 0
  0067b	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0067e	8b ce		 mov	 ecx, esi
  00680	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 1957 :         if (!NT_SUCCESS(success)) {

  00685	85 c0		 test	 eax, eax

; 1958 :             return success;

  00687	0f 8c 46 fd ff
	ff		 jl	 $L16611

; 1959 :         }
; 1960 : 
; 1961 :         cbTotalTokenLength = RawToken.Run.cbData;

  0068d	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1962 : 
; 1963 :         //
; 1964 :         // If there was data in the name
; 1965 :         //
; 1966 :         if (RawToken.Run.cbData > 0) {

  00690	85 ff		 test	 edi, edi
  00692	0f 86 10 fd ff
	ff		 jbe	 $L16013

; 1967 :             NextState = XTSS_ELEMENT_NAME;

  00698	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 5

; 2412 :         }
; 2413 :         else {

  0069f	e9 0b fd ff ff	 jmp	 $L15724
$L15912:

; 1968 :         }
; 1969 :         //
; 1970 :         // Otherwise, we found something else, error
; 1971 :         //
; 1972 :         else {
; 1973 :             pToken->fError = TRUE;
; 1974 :         }
; 1975 : 
; 1976 :         break;
; 1977 : 
; 1978 : 
; 1979 : 
; 1980 :         
; 1981 :         //
; 1982 :         // We're in the name portion of an element  Here, we should get ether
; 1983 :         // whitespace, /> or >.  Let's gather whitespace and see what the next token
; 1984 :         // after it is.
; 1985 :         //
; 1986 :     case XTSS_ELEMENT_NAME:
; 1987 : 
; 1988 :         success = RtlRawXmlTokenizer_GatherWhitespace(&pState->RawTokenState, &RawToken, &NextRawToken);

  006a4	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  006a7	50		 push	 eax
  006a8	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  006ab	8b ce		 mov	 ecx, esi
  006ad	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherWhitespace@12

; 1989 :         if (!NT_SUCCESS(success)) {

  006b2	85 c0		 test	 eax, eax

; 1990 :             return success;

  006b4	0f 8c 19 fd ff
	ff		 jl	 $L16611

; 1991 :         }
; 1992 : 
; 1993 :         cbTotalTokenLength = RawToken.Run.cbData;

  006ba	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 1994 : 
; 1995 :         if (RawToken.Run.cbData > 0) {

  006bd	85 ff		 test	 edi, edi

; 1996 :             NextState = XTSS_ELEMENT_WHITESPACE;
; 1997 :         }
; 1998 :         else {

  006bf	0f 87 84 01 00
	00		 ja	 $L16619

; 1999 : 
; 2000 :             //
; 2001 :             // If the next raw token is a gt symbol, then gather it (again... ick)
; 2002 :             // and say we're at the end of an element
; 2003 :             //
; 2004 :             if (NextRawToken.TokenName == NTXML_RAWTOKEN_GT) {

  006c5	83 7d dc 06	 cmp	 DWORD PTR _NextRawToken$[ebp], 6
  006c9	75 0a		 jne	 SHORT $L15917

; 2005 : 
; 2006 :                 cbTotalTokenLength += NextRawToken.Run.cbData;

  006cb	8b 4d e4	 mov	 ecx, DWORD PTR _NextRawToken$[ebp+8]
  006ce	03 f9		 add	 edi, ecx

; 2007 :                 NextState = XTSS_ELEMENT_CLOSE;
; 2008 :             }
; 2009 :             //
; 2010 :             // A forwardslash has to be followed by a >
; 2011 :             //
; 2012 :             else if (NextRawToken.TokenName == NTXML_RAWTOKEN_FORWARDSLASH) {

  006d0	e9 89 01 00 00	 jmp	 $L16618
$L15917:
  006d5	83 7d dc 05	 cmp	 DWORD PTR _NextRawToken$[ebp], 5
  006d9	0f 85 c9 fc ff
	ff		 jne	 $L16013

; 2013 : 
; 2014 :                 success = RtlRawXmlTokenizer_GatherNTokens(&pState->RawTokenState, pState->RawTokenScratch, 2);

  006df	8d 5e 3c	 lea	 ebx, DWORD PTR [esi+60]
  006e2	6a 02		 push	 2
  006e4	8b d3		 mov	 edx, ebx
  006e6	8b ce		 mov	 ecx, esi
  006e8	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherNTokens@12

; 2015 :                 if (!NT_SUCCESS(success)) {

  006ed	85 c0		 test	 eax, eax

; 2016 :                     return success;

  006ef	0f 8c de fc ff
	ff		 jl	 $L16611

; 2017 :                 }
; 2018 : 
; 2019 :                 ASSERT(pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_FORWARDSLASH);
; 2020 : 
; 2021 :                 cbTotalTokenLength = 
; 2022 :                     pState->RawTokenScratch[0].Run.cbData + 
; 2023 :                     pState->RawTokenScratch[1].Run.cbData;

  006f5	8b 7e 50	 mov	 edi, DWORD PTR [esi+80]
  006f8	03 7e 44	 add	 edi, DWORD PTR [esi+68]

; 2024 : 
; 2025 :                 //
; 2026 :                 // /> -> close-empty
; 2027 :                 //
; 2028 :                 if ((pState->RawTokenScratch[1].TokenName == NTXML_RAWTOKEN_GT) &&
; 2029 :                     (pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_FORWARDSLASH)) {

  006fb	83 7e 48 06	 cmp	 DWORD PTR [esi+72], 6
  006ff	0f 85 a3 fc ff
	ff		 jne	 $L16013
  00705	83 3b 05	 cmp	 DWORD PTR [ebx], 5
$L16616:
  00708	0f 85 9a fc ff
	ff		 jne	 $L16013

; 2030 : 
; 2031 :                     NextState = XTSS_ELEMENT_CLOSE_EMPTY;

  0070e	c7 45 fc 13 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 19 ; 00000013H

; 2412 :         }
; 2413 :         else {

  00715	e9 95 fc ff ff	 jmp	 $L15724
$L15926:

; 2032 :                 }
; 2033 :                 //
; 2034 :                 // /* -> Oops.
; 2035 :                 //
; 2036 :                 else {
; 2037 :                     pToken->fError = TRUE;
; 2038 :                 }
; 2039 :             }
; 2040 :             //
; 2041 :             // Otherwise, we got something after a name that wasn't whitespace, or
; 2042 :             // part of a clsoe, so that's an error
; 2043 :             //
; 2044 :             else {
; 2045 :                 pToken->fError = TRUE;
; 2046 :             }
; 2047 :         }
; 2048 : 
; 2049 :         break;
; 2050 : 
; 2051 : 
; 2052 : 
; 2053 : 
; 2054 : 
; 2055 :         //
; 2056 :         // After an attribute name, the only legal thing is an equals
; 2057 :         // sign.
; 2058 :         //
; 2059 :     case XTSS_ELEMENT_ATTRIBUTE_NAME:
; 2060 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);;

  0071a	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0071d	8b ce		 mov	 ecx, esi
  0071f	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2061 :         if (!NT_SUCCESS(success)) {

  00724	85 c0		 test	 eax, eax

; 2062 :             return success;

  00726	0f 8c a7 fc ff
	ff		 jl	 $L16611

; 2063 :         }
; 2064 : 
; 2065 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2066 : 
; 2067 :         if (RawToken.TokenName == NTXML_RAWTOKEN_EQUALS) {

  0072c	83 7d e8 04	 cmp	 DWORD PTR _RawToken$[ebp], 4
  00730	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  00733	0f 85 6f fc ff
	ff		 jne	 $L16013

; 2068 :             NextState = XTSS_ELEMENT_ATTRIBUTE_EQUALS;

  00739	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 21 ; 00000015H

; 2412 :         }
; 2413 :         else {

  00740	e9 6a fc ff ff	 jmp	 $L15724
$L15931:

; 2069 :         } else {
; 2070 :             pToken->fError = TRUE;
; 2071 :         }
; 2072 :         break;
; 2073 : 
; 2074 : 
; 2075 : 
; 2076 : 
; 2077 : 
; 2078 : 
; 2079 :         //
; 2080 :         // After an equals can only come a quote and a set of value data.  We
; 2081 :         // record the opening quote and gather data until the closing quote.
; 2082 :         //
; 2083 :     case XTSS_ELEMENT_ATTRIBUTE_EQUALS:
; 2084 :         
; 2085 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00745	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00748	8b ce		 mov	 ecx, esi
  0074a	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2086 :         if (!NT_SUCCESS(success)) {

  0074f	85 c0		 test	 eax, eax

; 2087 :             return success;

  00751	0f 8c 7c fc ff
	ff		 jl	 $L16611

; 2088 :         }
; 2089 : 
; 2090 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2091 : 
; 2092 :         //
; 2093 :         // Quote or doublequote starts an attribute value
; 2094 :         //
; 2095 :         if ((RawToken.TokenName == NTXML_RAWTOKEN_QUOTE) ||
; 2096 :             (RawToken.TokenName == NTXML_RAWTOKEN_DOUBLEQUOTE)) {

  00757	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  0075a	83 f9 09	 cmp	 ecx, 9
  0075d	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  00760	74 09		 je	 SHORT $L15935
  00762	83 f9 0a	 cmp	 ecx, 10			; 0000000aH

; 2100 :         }
; 2101 :         else {
; 2102 :             pToken->fError = TRUE;

  00765	0f 85 3d fc ff
	ff		 jne	 $L16013
$L15935:

; 2097 : 
; 2098 :             pState->QuoteTemp = RawToken.TokenName;

  0076b	89 8e 34 01 00
	00		 mov	 DWORD PTR [esi+308], ecx

; 2099 :             NextState = XTSS_ELEMENT_ATTRIBUTE_OPEN;

  00771	c7 45 fc 18 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 24 ; 00000018H

; 2103 :         }
; 2104 :         break;

  00778	e9 32 fc ff ff	 jmp	 $L15724
$L15937:

; 2105 : 
; 2106 : 
; 2107 : 
; 2108 : 
; 2109 :         //
; 2110 :         // We gather stuff until we find the close-quote
; 2111 :         //
; 2112 :     case XTSS_ELEMENT_ATTRIBUTE_OPEN:
; 2113 : 
; 2114 :         ASSERT((pState->QuoteTemp == NTXML_RAWTOKEN_QUOTE) || (pState->QuoteTemp == NTXML_RAWTOKEN_DOUBLEQUOTE));
; 2115 : 
; 2116 :         success = RtlRawXmlTokenizer_GatherUntil(&pState->RawTokenState, &RawToken, pState->QuoteTemp, NULL);

  0077d	6a 00		 push	 0
  0077f	ff b6 34 01 00
	00		 push	 DWORD PTR [esi+308]
  00785	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00788	8b ce		 mov	 ecx, esi
  0078a	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherUntil@16

; 2117 :         if (!NT_SUCCESS(success)) {

  0078f	85 c0		 test	 eax, eax

; 2118 :             return success;

  00791	0f 8c 3c fc ff
	ff		 jl	 $L16611

; 2119 :         }
; 2120 : 
; 2121 :         cbTotalTokenLength = RawToken.Run.cbData;

  00797	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 2122 :         NextState = XTSS_ELEMENT_ATTRIBUTE_VALUE;

  0079a	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 23 ; 00000017H

; 2123 : 
; 2124 :         break;

  007a1	e9 09 fc ff ff	 jmp	 $L15724
$L15942:

; 2125 : 
; 2126 : 
; 2127 : 
; 2128 : 
; 2129 : 
; 2130 : 
; 2131 :         //
; 2132 :         // Only followed by the same quote that opened it
; 2133 :         //
; 2134 :     case XTSS_ELEMENT_ATTRIBUTE_VALUE:
; 2135 : 
; 2136 :         ASSERT((pState->QuoteTemp == NTXML_RAWTOKEN_QUOTE) || (pState->QuoteTemp == NTXML_RAWTOKEN_DOUBLEQUOTE));
; 2137 : 
; 2138 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  007a6	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  007a9	8b ce		 mov	 ecx, esi
  007ab	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2139 :         if (!NT_SUCCESS(success)) {

  007b0	85 c0		 test	 eax, eax

; 2140 :             return success;

  007b2	0f 8c 1b fc ff
	ff		 jl	 $L16611

; 2141 :         }
; 2142 : 
; 2143 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2144 :             
; 2145 :         if (RawToken.TokenName == pState->QuoteTemp) {

  007b8	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  007bb	3b 8e 34 01 00
	00		 cmp	 ecx, DWORD PTR [esi+308]
  007c1	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  007c4	0f 85 de fb ff
	ff		 jne	 $L16013

; 2146 :             NextState = XTSS_ELEMENT_ATTRIBUTE_CLOSE;

  007ca	c7 45 fc 19 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 25 ; 00000019H

; 2412 :         }
; 2413 :         else {

  007d1	e9 d9 fb ff ff	 jmp	 $L15724
$L15948:

; 2147 :         }
; 2148 :         else {
; 2149 :             pToken->fError = TRUE;
; 2150 :         }
; 2151 :         
; 2152 :         break;
; 2153 : 
; 2154 : 
; 2155 :         
; 2156 :         
; 2157 :         
; 2158 :         //
; 2159 :         // After an attribute namespace prefix should only come a colon.
; 2160 :         //
; 2161 :     case XTSS_ELEMENT_ATTRIBUTE_NAME_NS_PREFIX:
; 2162 : 
; 2163 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  007d6	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  007d9	8b ce		 mov	 ecx, esi
  007db	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2164 :         if (!NT_SUCCESS(success)) {

  007e0	85 c0		 test	 eax, eax

; 2165 :             return success;

  007e2	0f 8c eb fb ff
	ff		 jl	 $L16611

; 2166 :         }
; 2167 : 
; 2168 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2169 : 
; 2170 :         if (RawToken.TokenName == NTXML_RAWTOKEN_COLON) {

  007e8	83 7d e8 13	 cmp	 DWORD PTR _RawToken$[ebp], 19 ; 00000013H
  007ec	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  007ef	0f 85 b3 fb ff
	ff		 jne	 $L16013

; 2171 :             NextState = XTSS_ELEMENT_ATTRIBUTE_NAME_NS_COLON;

  007f5	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 17 ; 00000011H

; 2412 :         }
; 2413 :         else {

  007fc	e9 ae fb ff ff	 jmp	 $L15724
$L15953:

; 2172 :         }
; 2173 :         else {
; 2174 :             pToken->fError = TRUE;
; 2175 :         }
; 2176 :         break;
; 2177 : 
; 2178 : 
; 2179 : 
; 2180 : 
; 2181 :         //
; 2182 :         // After a colon should come only more name bits
; 2183 :         //
; 2184 :     case XTSS_ELEMENT_ATTRIBUTE_NAME_NS_COLON:
; 2185 : 
; 2186 :         success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, NULL);

  00801	6a 00		 push	 0
  00803	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00806	8b ce		 mov	 ecx, esi
  00808	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 2187 :         if (!NT_SUCCESS(success)) {

  0080d	85 c0		 test	 eax, eax

; 2188 :             return success;

  0080f	0f 8c be fb ff
	ff		 jl	 $L16611

; 2189 :         }
; 2190 : 
; 2191 :         cbTotalTokenLength = RawToken.Run.cbData;

  00815	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 2192 : 
; 2193 :         if (RawToken.Run.cbData > 0) {

  00818	85 ff		 test	 edi, edi
  0081a	0f 86 88 fb ff
	ff		 jbe	 $L16013

; 2194 :             NextState = XTSS_ELEMENT_ATTRIBUTE_NAME;

  00820	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 20 ; 00000014H

; 2412 :         }
; 2413 :         else {

  00827	e9 83 fb ff ff	 jmp	 $L15724
$L15959:

; 2195 :         }
; 2196 :         else {
; 2197 :             pToken->fError = TRUE;
; 2198 :         }
; 2199 : 
; 2200 :         break;
; 2201 : 
; 2202 : 
; 2203 : 
; 2204 :         //
; 2205 :         // Attribute end-of-value and whitespace both have the same transitions to
; 2206 :         // the next state.
; 2207 :         //
; 2208 :     case XTSS_ELEMENT_ATTRIBUTE_CLOSE:
; 2209 :     case XTSS_ELEMENT_XMLNS_VALUE_CLOSE:
; 2210 :     case XTSS_ELEMENT_WHITESPACE:
; 2211 : 
; 2212 :         success = RtlRawXmlTokenizer_GatherWhitespace(&pState->RawTokenState, &RawToken, &NextRawToken);

  0082c	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  0082f	50		 push	 eax
  00830	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00833	8b ce		 mov	 ecx, esi
  00835	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherWhitespace@12

; 2213 :         if (!NT_SUCCESS(success)) {

  0083a	85 c0		 test	 eax, eax

; 2214 :             return success;

  0083c	0f 8c 91 fb ff
	ff		 jl	 $L16611

; 2215 :         }
; 2216 : 
; 2217 :         if (RawToken.Run.cbData > 0) {

  00842	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  00845	85 ff		 test	 edi, edi
  00847	76 0c		 jbe	 SHORT $L15962
$L16619:

; 2218 :             cbTotalTokenLength = RawToken.Run.cbData;
; 2219 :             NextState = XTSS_ELEMENT_WHITESPACE;

  00849	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 26 ; 0000001aH

; 2220 :         }
; 2221 :         //
; 2222 :         // Just a >? Then we're at "element close"
; 2223 :         //
; 2224 :         else if (NextRawToken.TokenName == NTXML_RAWTOKEN_GT) {

  00850	e9 5a fb ff ff	 jmp	 $L15724
$L15962:
  00855	83 7d dc 06	 cmp	 DWORD PTR _NextRawToken$[ebp], 6
  00859	75 0f		 jne	 SHORT $L15964

; 2225 : 
; 2226 :             cbTotalTokenLength += NextRawToken.Run.cbData;

  0085b	8b 7d e4	 mov	 edi, DWORD PTR _NextRawToken$[ebp+8]
$L16618:

; 2227 :             NextState = XTSS_ELEMENT_CLOSE;

  0085e	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 18 ; 00000012H

; 2228 :             
; 2229 :         }
; 2230 :         //
; 2231 :         // Forwardslash?  See if there's a > after it
; 2232 :         //
; 2233 :         else if (NextRawToken.TokenName == NTXML_RAWTOKEN_FORWARDSLASH) {

  00865	e9 45 fb ff ff	 jmp	 $L15724
$L15964:
  0086a	83 7d dc 05	 cmp	 DWORD PTR _NextRawToken$[ebp], 5

; 2234 :             success = RtlRawXmlTokenizer_GatherNTokens(&pState->RawTokenState, pState->RawTokenScratch, 2);

  0086e	8b ce		 mov	 ecx, esi
  00870	75 2c		 jne	 SHORT $L15966
  00872	8d 5e 3c	 lea	 ebx, DWORD PTR [esi+60]
  00875	6a 02		 push	 2
  00877	8b d3		 mov	 edx, ebx
  00879	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherNTokens@12

; 2235 :             if (!NT_SUCCESS(success)) {

  0087e	85 c0		 test	 eax, eax

; 2236 :                 return success;

  00880	0f 8c 4d fb ff
	ff		 jl	 $L16611

; 2237 :             }
; 2238 : 
; 2239 :             cbTotalTokenLength = pState->RawTokenScratch[0].Run.cbData + pState->RawTokenScratch[1].Run.cbData;

  00886	8b 7e 50	 mov	 edi, DWORD PTR [esi+80]
  00889	03 7e 44	 add	 edi, DWORD PTR [esi+68]

; 2240 : 
; 2241 :             ASSERT(pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_FORWARDSLASH);
; 2242 : 
; 2243 :             if ((pState->RawTokenScratch[0].TokenName == NTXML_RAWTOKEN_FORWARDSLASH) &&
; 2244 :                 (pState->RawTokenScratch[1].TokenName == NTXML_RAWTOKEN_GT)) {

  0088c	83 3b 05	 cmp	 DWORD PTR [ebx], 5
  0088f	0f 85 13 fb ff
	ff		 jne	 $L16013
  00895	83 7e 48 06	 cmp	 DWORD PTR [esi+72], 6

; 2412 :         }
; 2413 :         else {

  00899	e9 6a fe ff ff	 jmp	 $L16616
$L15966:

; 2245 : 
; 2246 :                 NextState = XTSS_ELEMENT_CLOSE_EMPTY;
; 2247 :             }
; 2248 :             else {
; 2249 :                 pToken->fError = TRUE;
; 2250 :             }
; 2251 :         }
; 2252 :         //
; 2253 :         // Otherwise try to gather an identifier (attribute name) from the stream
; 2254 :         //
; 2255 :         else {
; 2256 :             success = RtlRawXmlTokenizer_GatherIdentifier(&pState->RawTokenState, &RawToken, &NextRawToken);

  0089e	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  008a1	50		 push	 eax
  008a2	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  008a5	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 2257 :             if (!NT_SUCCESS(success)) {

  008aa	85 c0		 test	 eax, eax

; 2258 :                 return success;

  008ac	0f 8c 21 fb ff
	ff		 jl	 $L16611

; 2259 :             }
; 2260 : 
; 2261 :             cbTotalTokenLength = RawToken.Run.cbData;

  008b2	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 2262 : 
; 2263 :             //
; 2264 :             // Found an identifier.  Is it 'xmlns'?
; 2265 :             //
; 2266 :             if (RawToken.Run.cbData > 0) {

  008b5	85 ff		 test	 edi, edi
  008b7	0f 86 eb fa ff
	ff		 jbe	 $L16013

; 2267 : 
; 2268 :                 success = pState->pfnCompareSpecialString(pState, &RawToken.Run, &xss_xmlns, &fCompare);

  008bd	8d 45 f8	 lea	 eax, DWORD PTR _fCompare$[ebp]
  008c0	50		 push	 eax
  008c1	68 00 00 00 00	 push	 OFFSET FLAT:_xss_xmlns
  008c6	8d 45 ec	 lea	 eax, DWORD PTR _RawToken$[ebp+4]
  008c9	50		 push	 eax
  008ca	56		 push	 esi
  008cb	ff 96 30 01 00
	00		 call	 DWORD PTR [esi+304]

; 2269 :                 if (!NT_SUCCESS(success)) {

  008d1	85 c0		 test	 eax, eax

; 2270 :                     return success;

  008d3	0f 8c fa fa ff
	ff		 jl	 $L16611

; 2271 :                 }
; 2272 : 
; 2273 :                 if (fCompare == XML_STRING_COMPARE_EQUALS) {
; 2274 :                     NextState = ((NextRawToken.TokenName == NTXML_RAWTOKEN_COLON)
; 2275 :                         ? XTSS_ELEMENT_XMLNS
; 2276 :                         : XTSS_ELEMENT_XMLNS_DEFAULT);

  008d9	33 c9		 xor	 ecx, ecx
  008db	39 4d f8	 cmp	 DWORD PTR _fCompare$[ebp], ecx
  008de	75 0f		 jne	 SHORT $L15978
  008e0	83 7d dc 13	 cmp	 DWORD PTR _NextRawToken$[ebp], 19 ; 00000013H
  008e4	0f 95 c1	 setne	 cl
  008e7	83 c1 06	 add	 ecx, 6

; 2277 :                 }
; 2278 :                 else {

  008ea	e9 57 fd ff ff	 jmp	 $L16615
$L15978:

; 2279 :                     NextState = ((NextRawToken.TokenName == NTXML_RAWTOKEN_COLON)
; 2280 :                         ? XTSS_ELEMENT_ATTRIBUTE_NAME_NS_PREFIX
; 2281 :                         : XTSS_ELEMENT_ATTRIBUTE_NAME);

  008ef	83 7d dc 13	 cmp	 DWORD PTR _NextRawToken$[ebp], 19 ; 00000013H
  008f3	0f 95 c1	 setne	 cl
  008f6	8d 0c 8d 10 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+16]

; 2412 :         }
; 2413 :         else {

  008fd	e9 44 fd ff ff	 jmp	 $L16615
$L15981:

; 2282 :                 }
; 2283 :             }
; 2284 :             else {
; 2285 :                 pToken->fError = TRUE;
; 2286 :             }
; 2287 :         }
; 2288 :         break;
; 2289 : 
; 2290 : 
; 2291 :         //
; 2292 :         // Followed by a colon only
; 2293 :         //
; 2294 :     case XTSS_ELEMENT_XMLNS:
; 2295 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00902	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00905	8b ce		 mov	 ecx, esi
  00907	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2296 :         if (!NT_SUCCESS(success)) {

  0090c	85 c0		 test	 eax, eax

; 2297 :             return success;

  0090e	0f 8c bf fa ff
	ff		 jl	 $L16611

; 2298 :         }
; 2299 : 
; 2300 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2301 : 
; 2302 :         if (RawToken.TokenName == NTXML_RAWTOKEN_COLON) {

  00914	83 7d e8 13	 cmp	 DWORD PTR _RawToken$[ebp], 19 ; 00000013H
  00918	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  0091b	0f 85 87 fa ff
	ff		 jne	 $L16013

; 2303 :             NextState = XTSS_ELEMENT_XMLNS_COLON;

  00921	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 9

; 2412 :         }
; 2413 :         else {

  00928	e9 82 fa ff ff	 jmp	 $L15724
$L15986:

; 2304 :         }
; 2305 :         else {
; 2306 :             pToken->fError = TRUE;
; 2307 :         }
; 2308 :         break;
; 2309 : 
; 2310 :         //
; 2311 :         // Followed only by an identifier
; 2312 :         //
; 2313 :     case XTSS_ELEMENT_XMLNS_COLON:
; 2314 :         success = RtlRawXmlTokenizer_GatherIdentifier(
; 2315 :             &pState->RawTokenState,
; 2316 :             &RawToken,
; 2317 :             &NextRawToken);

  0092d	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  00930	50		 push	 eax
  00931	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00934	8b ce		 mov	 ecx, esi
  00936	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherIdentifier@12

; 2318 : 
; 2319 :         if (!NT_SUCCESS(success)) {

  0093b	85 c0		 test	 eax, eax

; 2320 :             return success;

  0093d	0f 8c 90 fa ff
	ff		 jl	 $L16611

; 2321 :         }
; 2322 : 
; 2323 :         cbTotalTokenLength = RawToken.Run.cbData;

  00943	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 2324 : 
; 2325 :         if (RawToken.Run.cbData > 0) {

  00946	85 ff		 test	 edi, edi
  00948	0f 86 5a fa ff
	ff		 jbe	 $L16013

; 2326 :             NextState = XTSS_ELEMENT_XMLNS_ALIAS;

  0094e	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 8

; 2412 :         }
; 2413 :         else {

  00955	e9 55 fa ff ff	 jmp	 $L15724
$L15991:

; 2327 :         }
; 2328 :         else {
; 2329 :             pToken->fError = TRUE;
; 2330 :         }
; 2331 :         break;
; 2332 : 
; 2333 :         //
; 2334 :         // Alias followed by equals
; 2335 :         //
; 2336 :     case XTSS_ELEMENT_XMLNS_ALIAS:
; 2337 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  0095a	8b ce		 mov	 ecx, esi
  0095c	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  0095f	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2338 :         if (!NT_SUCCESS(success)) {

  00964	85 c0		 test	 eax, eax

; 2339 :             return success;

  00966	0f 8c 67 fa ff
	ff		 jl	 $L16611

; 2340 :         }
; 2341 : 
; 2342 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2343 : 
; 2344 :         if (RawToken.TokenName == NTXML_RAWTOKEN_EQUALS) {

  0096c	83 7d e8 04	 cmp	 DWORD PTR _RawToken$[ebp], 4
  00970	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  00973	0f 85 2f fa ff
	ff		 jne	 $L16013

; 2345 :             NextState = XTSS_ELEMENT_XMLNS_EQUALS;

  00979	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 10 ; 0000000aH

; 2412 :         }
; 2413 :         else {

  00980	e9 2a fa ff ff	 jmp	 $L15724
$L15996:

; 2346 :         }
; 2347 :         else {
; 2348 :             pToken->fError = TRUE;
; 2349 :         }
; 2350 :         break;
; 2351 : 
; 2352 : 
; 2353 :         //
; 2354 :         // Equals followed by quote
; 2355 :         //
; 2356 :     case XTSS_ELEMENT_XMLNS_EQUALS:
; 2357 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  00985	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  00988	8b ce		 mov	 ecx, esi
  0098a	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2358 :         if (!NT_SUCCESS(success)) {

  0098f	85 c0		 test	 eax, eax

; 2359 :             return success;

  00991	0f 8c 3c fa ff
	ff		 jl	 $L16611

; 2360 :         }
; 2361 : 
; 2362 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2363 : 
; 2364 :         if ((RawToken.TokenName == NTXML_RAWTOKEN_QUOTE) ||
; 2365 :             (RawToken.TokenName == NTXML_RAWTOKEN_DOUBLEQUOTE)) {

  00997	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  0099a	83 f9 09	 cmp	 ecx, 9
  0099d	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  009a0	74 09		 je	 SHORT $L16000
  009a2	83 f9 0a	 cmp	 ecx, 10			; 0000000aH

; 2369 :         }
; 2370 :         else {
; 2371 :             pToken->fError = TRUE;

  009a5	0f 85 fd f9 ff
	ff		 jne	 $L16013
$L16000:

; 2366 : 
; 2367 :             pState->QuoteTemp = RawToken.TokenName;

  009ab	89 8e 34 01 00
	00		 mov	 DWORD PTR [esi+308], ecx

; 2368 :             NextState = XTSS_ELEMENT_XMLNS_VALUE_OPEN;

  009b1	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 11 ; 0000000bH

; 2372 :         }
; 2373 :         break;

  009b8	e9 f2 f9 ff ff	 jmp	 $L15724
$L16002:

; 2374 : 
; 2375 : 
; 2376 :         //
; 2377 :         // Value open starts the value, which continues until either the
; 2378 :         // end of the document or the close quote is found.  We just return
; 2379 :         // all the data we found, and assume the pass for XTSS_ELEMENT_XMLNS_VALUE
; 2380 :         // will detect the 'end of file looking for quote' error.
; 2381 :         //
; 2382 :     case XTSS_ELEMENT_XMLNS_VALUE_OPEN:
; 2383 :         success = RtlRawXmlTokenizer_GatherUntil(
; 2384 :             &pState->RawTokenState,
; 2385 :             &RawToken,
; 2386 :             pState->QuoteTemp,
; 2387 :             &NextRawToken);

  009bd	8d 45 dc	 lea	 eax, DWORD PTR _NextRawToken$[ebp]
  009c0	50		 push	 eax
  009c1	ff b6 34 01 00
	00		 push	 DWORD PTR [esi+308]
  009c7	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  009ca	8b ce		 mov	 ecx, esi
  009cc	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_GatherUntil@16

; 2388 : 
; 2389 :         if (!NT_SUCCESS(success)) {

  009d1	85 c0		 test	 eax, eax

; 2390 :             return success;

  009d3	0f 8c fa f9 ff
	ff		 jl	 $L16611

; 2391 :         }
; 2392 : 
; 2393 :         cbTotalTokenLength = RawToken.Run.cbData;

  009d9	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]

; 2394 :         NextState = XTSS_ELEMENT_XMLNS_VALUE;

  009dc	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 13 ; 0000000dH

; 2395 :         break;

  009e3	e9 c7 f9 ff ff	 jmp	 $L15724
$L16005:

; 2396 : 
; 2397 : 
; 2398 : 
; 2399 :         //
; 2400 :         // Must find a quote that matches the quote we found before
; 2401 :         //
; 2402 :     case XTSS_ELEMENT_XMLNS_VALUE:
; 2403 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);

  009e8	8d 55 e8	 lea	 edx, DWORD PTR _RawToken$[ebp]
  009eb	8b ce		 mov	 ecx, esi
  009ed	e8 00 00 00 00	 call	 @RtlRawXmlTokenizer_SingleToken@8

; 2404 :         if (!NT_SUCCESS(success)) {

  009f2	85 c0		 test	 eax, eax

; 2405 :             return success;

  009f4	0f 8c d9 f9 ff
	ff		 jl	 $L16611

; 2406 :         }
; 2407 : 
; 2408 :         cbTotalTokenLength = RawToken.Run.cbData;
; 2409 : 
; 2410 :         if (RawToken.TokenName == pState->QuoteTemp) {

  009fa	8b 4d e8	 mov	 ecx, DWORD PTR _RawToken$[ebp]
  009fd	3b 8e 34 01 00
	00		 cmp	 ecx, DWORD PTR [esi+308]
  00a03	8b 7d f0	 mov	 edi, DWORD PTR _RawToken$[ebp+8]
  00a06	0f 85 9c f9 ff
	ff		 jne	 $L16013

; 2411 :             NextState = XTSS_ELEMENT_XMLNS_VALUE_CLOSE;

  00a0c	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _NextState$[ebp], 12 ; 0000000cH

; 2414 :             pToken->fError = TRUE;
; 2415 :         }
; 2416 :         break;
; 2417 : 
; 2418 : 
; 2419 : 
; 2420 :         //
; 2421 :         // Must be followed by an equals
; 2422 :         //
; 2423 :     case XTSS_ELEMENT_XMLNS_DEFAULT:
; 2424 :         success = RtlRawXmlTokenizer_SingleToken(&pState->RawTokenState, &RawToken);
; 2425 :         if (!NT_SUCCESS(success)) {
; 2426 :             return success;

  00a13	e9 97 f9 ff ff	 jmp	 $L15724
$L16622:

; 2466 :     }
; 2467 : 
; 2468 :     return success;
; 2469 : }

  00a18	00 00 00 00	 DD	 $L15727
  00a1c	00 00 00 00	 DD	 $L15896
  00a20	00 00 00 00	 DD	 $L15912
  00a24	00 00 00 00	 DD	 $L15981
  00a28	00 00 00 00	 DD	 $L15991
  00a2c	00 00 00 00	 DD	 $L15986
  00a30	00 00 00 00	 DD	 $L15996
  00a34	00 00 00 00	 DD	 $L16002
  00a38	00 00 00 00	 DD	 $L15959
  00a3c	00 00 00 00	 DD	 $L16005
  00a40	00 00 00 00	 DD	 $L15901
  00a44	00 00 00 00	 DD	 $L15906
  00a48	00 00 00 00	 DD	 $L15948
  00a4c	00 00 00 00	 DD	 $L15953
  00a50	00 00 00 00	 DD	 $L15926
  00a54	00 00 00 00	 DD	 $L15931
  00a58	00 00 00 00	 DD	 $L15942
  00a5c	00 00 00 00	 DD	 $L15937
  00a60	00 00 00 00	 DD	 $L15881
  00a64	00 00 00 00	 DD	 $L15886
  00a68	00 00 00 00	 DD	 $L15823
  00a6c	00 00 00 00	 DD	 $L15834
  00a70	00 00 00 00	 DD	 $L15829
  00a74	00 00 00 00	 DD	 $L15845
  00a78	00 00 00 00	 DD	 $L15860
  00a7c	00 00 00 00	 DD	 $L15876
  00a80	00 00 00 00	 DD	 $L15764
  00a84	00 00 00 00	 DD	 $L15791
  00a88	00 00 00 00	 DD	 $L15775
  00a8c	00 00 00 00	 DD	 $L15770
  00a90	00 00 00 00	 DD	 $L15786
  00a94	00 00 00 00	 DD	 $L15781
  00a98	00 00 00 00	 DD	 $L16015
$L16608:
  00a9c	00		 DB	 0
  00a9d	00		 DB	 0
  00a9e	20		 DB	 32			; 00000020H
  00a9f	01		 DB	 1
  00aa0	02		 DB	 2
  00aa1	03		 DB	 3
  00aa2	04		 DB	 4
  00aa3	04		 DB	 4
  00aa4	05		 DB	 5
  00aa5	06		 DB	 6
  00aa6	07		 DB	 7
  00aa7	08		 DB	 8
  00aa8	09		 DB	 9
  00aa9	0a		 DB	 10			; 0000000aH
  00aaa	0b		 DB	 11			; 0000000bH
  00aab	0c		 DB	 12			; 0000000cH
  00aac	0d		 DB	 13			; 0000000dH
  00aad	00		 DB	 0
  00aae	00		 DB	 0
  00aaf	0e		 DB	 14			; 0000000eH
  00ab0	0f		 DB	 15			; 0000000fH
  00ab1	20		 DB	 32			; 00000020H
  00ab2	10		 DB	 16			; 00000010H
  00ab3	11		 DB	 17			; 00000011H
  00ab4	08		 DB	 8
  00ab5	08		 DB	 8
  00ab6	12		 DB	 18			; 00000012H
  00ab7	13		 DB	 19			; 00000013H
  00ab8	13		 DB	 19			; 00000013H
  00ab9	00		 DB	 0
  00aba	20		 DB	 32			; 00000020H
  00abb	20		 DB	 32			; 00000020H
  00abc	14		 DB	 20			; 00000014H
  00abd	00		 DB	 0
  00abe	15		 DB	 21			; 00000015H
  00abf	16		 DB	 22			; 00000016H
  00ac0	17		 DB	 23			; 00000017H
  00ac1	18		 DB	 24			; 00000018H
  00ac2	19		 DB	 25			; 00000019H
  00ac3	00		 DB	 0
  00ac4	20		 DB	 32			; 00000020H
  00ac5	20		 DB	 32			; 00000020H
  00ac6	00		 DB	 0
  00ac7	1a		 DB	 26			; 0000001aH
  00ac8	00		 DB	 0
  00ac9	1b		 DB	 27			; 0000001bH
  00aca	1c		 DB	 28			; 0000001cH
  00acb	1d		 DB	 29			; 0000001dH
  00acc	1d		 DB	 29			; 0000001dH
  00acd	1d		 DB	 29			; 0000001dH
  00ace	1e		 DB	 30			; 0000001eH
  00acf	1f		 DB	 31			; 0000001fH
  00ad0	1b		 DB	 27			; 0000001bH
_RtlXmlNextToken@12 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlAdvanceTokenization@8
; Function compile flags: /Ogsy
;	COMDAT _RtlXmlAdvanceTokenization@8
_TEXT	SEGMENT
_pState$ = 8
_pToken$ = 12
_RtlXmlAdvanceTokenization@8 PROC NEAR			; COMDAT

; 2478 :     if (!ARGUMENT_PRESENT(pState)) {

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pState$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 07		 jne	 SHORT $L16028

; 2479 :         return STATUS_INVALID_PARAMETER_1;

  00008	b8 ef 00 00 c0	 mov	 eax, -1073741585	; c00000efH
  0000d	eb 1d		 jmp	 SHORT $L16023
$L16028:

; 2480 :     }
; 2481 : 
; 2482 :     if (!ARGUMENT_PRESENT(pToken)) {

  0000f	8b 4c 24 08	 mov	 ecx, DWORD PTR _pToken$[esp-4]
  00013	85 c9		 test	 ecx, ecx
  00015	75 07		 jne	 SHORT $L16034

; 2483 :         return STATUS_INVALID_PARAMETER_2;

  00017	b8 f0 00 00 c0	 mov	 eax, -1073741584	; c00000f0H
  0001c	eb 0e		 jmp	 SHORT $L16023
$L16034:

; 2484 :     }
; 2485 : 
; 2486 :     //
; 2487 :     // Advance the XML pointer, and advance the state
; 2488 :     //
; 2489 :     ADVANCE_PVOID(pState->RawTokenState.pvCursor, pToken->Run.cbData);

  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	01 50 0c	 add	 DWORD PTR [eax+12], edx

; 2490 :     pState->PreviousState = pToken->State;

  00024	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00027	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 2491 : 
; 2492 :     return STATUS_SUCCESS;

  0002a	33 c0		 xor	 eax, eax
$L16023:

; 2493 : }

  0002c	c2 08 00	 ret	 8
_RtlXmlAdvanceTokenization@8 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlInitializeTokenization@24
; Function compile flags: /Ogsy
;	COMDAT _RtlXmlInitializeTokenization@24
_TEXT	SEGMENT
_pState$ = 8
_pvData$ = 12
_cbData$ = 16
_pfnNextCharacter$ = 20
_pfnSpecialStringComparison$ = 24
_pfnNormalStringComparison$ = 28
_RtlXmlInitializeTokenization@24 PROC NEAR		; COMDAT

; 2506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2507 :     NTSTATUS success = STATUS_SUCCESS;
; 2508 : 
; 2509 :     if (!ARGUMENT_PRESENT(pState)) {

  00003	8b 55 08	 mov	 edx, DWORD PTR _pState$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	75 07		 jne	 SHORT $L16057

; 2510 :         return STATUS_INVALID_PARAMETER_1;

  0000a	b8 ef 00 00 c0	 mov	 eax, -1073741585	; c00000efH
  0000f	eb 67		 jmp	 SHORT $L16050
$L16057:
  00011	56		 push	 esi

; 2511 :     }
; 2512 : 
; 2513 :     if (!ARGUMENT_PRESENT(pvData)) {

  00012	8b 75 0c	 mov	 esi, DWORD PTR _pvData$[ebp]
  00015	85 f6		 test	 esi, esi
  00017	75 07		 jne	 SHORT $L16063

; 2514 :         return STATUS_INVALID_PARAMETER_2;

  00019	b8 f0 00 00 c0	 mov	 eax, -1073741584	; c00000f0H
  0001e	eb 57		 jmp	 SHORT $L16635
$L16063:
  00020	57		 push	 edi

; 2515 :     }
; 2516 : 
; 2517 :     RtlZeroMemory(pState, sizeof(*pState));

  00021	6a 4e		 push	 78			; 0000004eH
  00023	33 c0		 xor	 eax, eax
  00025	59		 pop	 ecx
  00026	8b fa		 mov	 edi, edx
  00028	f3 ab		 rep stosd

; 2518 : 
; 2519 :     pState->RawTokenState.OriginalDocument.cbData = cbData;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _cbData$[ebp]

; 2520 :     pState->RawTokenState.OriginalDocument.pvData = pState->RawTokenState.pvCursor = pvData;

  0002d	89 72 0c	 mov	 DWORD PTR [edx+12], esi
  00030	89 32		 mov	 DWORD PTR [edx], esi

; 2521 :     pState->RawTokenState.pvDocumentEnd = pvData;
; 2522 :     ADVANCE_PVOID(pState->RawTokenState.pvDocumentEnd, cbData);

  00032	03 f0		 add	 esi, eax
  00034	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 2523 :     pState->RawTokenState.pfnNextChar = pfnNextCharacter ? pfnNextCharacter : RtlXmlDefaultNextCharacter;

  00037	8b 45 14	 mov	 eax, DWORD PTR _pfnNextCharacter$[ebp]
  0003a	85 c0		 test	 eax, eax
  0003c	89 72 08	 mov	 DWORD PTR [edx+8], esi
  0003f	5f		 pop	 edi
  00040	75 05		 jne	 SHORT $L16630
  00042	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:@RtlXmlDefaultNextCharacter@4
$L16630:
  00047	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 2524 :     pState->pfnCompareSpecialString = pfnSpecialStringComparison ? pfnSpecialStringComparison : RtlXmlDefaultSpecialStringCompare;

  0004a	8b 45 18	 mov	 eax, DWORD PTR _pfnSpecialStringComparison$[ebp]
  0004d	85 c0		 test	 eax, eax
  0004f	75 05		 jne	 SHORT $L16632
  00051	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_RtlXmlDefaultSpecialStringCompare@16
$L16632:
  00056	89 82 30 01 00
	00		 mov	 DWORD PTR [edx+304], eax

; 2525 :     pState->pfnCompareStrings = pfnNormalStringComparison ? pfnNormalStringComparison : RtlXmlDefaultCompareStrings;

  0005c	8b 45 1c	 mov	 eax, DWORD PTR _pfnNormalStringComparison$[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	75 05		 jne	 SHORT $L16634
  00063	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_RtlXmlDefaultCompareStrings@16
$L16634:
  00068	89 82 2c 01 00
	00		 mov	 DWORD PTR [edx+300], eax

; 2526 :     pState->PreviousState = XTSS_STREAM_START;

  0006e	c7 42 38 02 00
	00 00		 mov	 DWORD PTR [edx+56], 2

; 2527 : 
; 2528 :     return success;

  00075	33 c0		 xor	 eax, eax
$L16635:
  00077	5e		 pop	 esi
$L16050:

; 2529 : }

  00078	5d		 pop	 ebp
  00079	c2 18 00	 ret	 24			; 00000018H
_RtlXmlInitializeTokenization@24 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlCloneTokenizationState@8
; Function compile flags: /Ogsy
;	COMDAT _RtlXmlCloneTokenizationState@8
_TEXT	SEGMENT
_pStartState$ = 8
_pTargetState$ = 12
_RtlXmlCloneTokenizationState@8 PROC NEAR		; COMDAT

; 2725 : {

  00000	56		 push	 esi

; 2726 :     if (!ARGUMENT_PRESENT(pStartState) || !ARGUMENT_PRESENT(pTargetState)) {

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pStartState$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	74 11		 je	 SHORT $L16156
  0000a	8b 7c 24 10	 mov	 edi, DWORD PTR _pTargetState$[esp+4]
  0000e	85 ff		 test	 edi, edi
  00010	74 09		 je	 SHORT $L16156

; 2728 :     }
; 2729 : 
; 2730 :     *pTargetState = *pStartState;

  00012	6a 4e		 push	 78			; 0000004eH
  00014	59		 pop	 ecx
  00015	f3 a5		 rep movsd

; 2731 : 
; 2732 :     return STATUS_SUCCESS;

  00017	33 c0		 xor	 eax, eax
  00019	eb 05		 jmp	 SHORT $L16146
$L16156:

; 2727 :         return STATUS_INVALID_PARAMETER;

  0001b	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$L16146:
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 2733 : }

  00022	c2 08 00	 ret	 8
_RtlXmlCloneTokenizationState@8 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlCopyStringOut@16
; Function compile flags: /Ogsy
;	COMDAT _RtlXmlCopyStringOut@16
_TEXT	SEGMENT
_status$ = -8
_cchTotal$ = -4
_cbSoFar$ = 8
_pState$ = 8
_pvOriginal$ = 12
_pExtent$ = 12
_pwszTarget$ = 16
_pCchResult$ = 20
_RtlXmlCopyStringOut@16 PROC NEAR			; COMDAT

; 2744 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi

; 2745 :     SIZE_T                      cchTotal = 0;
; 2746 :     SIZE_T                      cchRemains = 0;
; 2747 :     ULONG                       ulCharacter = 0;
; 2748 :     ULONG                       cbSoFar = 0;
; 2749 :     PXML_RAWTOKENIZATION_STATE  pRawState = NULL;
; 2750 :     PVOID                       pvOriginal = NULL;
; 2751 :     NTSTATUS                    status = STATUS_SUCCESS;
; 2752 : 
; 2753 : 
; 2754 :     if (!pState || !pExtent || !pCchResult || ((*pCchResult > 0) && !pwszTarget)) {

  00006	8b 75 08	 mov	 esi, DWORD PTR _pState$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b f1		 cmp	 esi, ecx
  0000d	57		 push	 edi
  0000e	89 4d fc	 mov	 DWORD PTR _cchTotal$[ebp], ecx
  00011	89 4d f8	 mov	 DWORD PTR _status$[ebp], ecx
  00014	0f 84 ae 00 00
	00		 je	 $L16179
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR _pExtent$[ebp]
  0001d	3b f9		 cmp	 edi, ecx
  0001f	0f 84 a3 00 00
	00		 je	 $L16179
  00025	8b 45 14	 mov	 eax, DWORD PTR _pCchResult$[ebp]
  00028	3b c1		 cmp	 eax, ecx
  0002a	0f 84 98 00 00
	00		 je	 $L16179
  00030	39 08		 cmp	 DWORD PTR [eax], ecx
  00032	76 09		 jbe	 SHORT $L16645
  00034	39 4d 10	 cmp	 DWORD PTR _pwszTarget$[ebp], ecx
  00037	0f 84 8b 00 00
	00		 je	 $L16179
$L16645:

; 2756 :     }
; 2757 : 
; 2758 :     if (pwszTarget) {

  0003d	8b 55 10	 mov	 edx, DWORD PTR _pwszTarget$[ebp]
  00040	3b d1		 cmp	 edx, ecx
  00042	74 03		 je	 SHORT $L16181

; 2759 :         *pwszTarget = UNICODE_NULL;

  00044	66 89 0a	 mov	 WORD PTR [edx], cx
$L16181:

; 2760 :     }
; 2761 : 
; 2762 :     pRawState = &pState->RawTokenState;
; 2763 :     pvOriginal = pRawState->pvCursor;

  00047	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0004a	89 55 0c	 mov	 DWORD PTR _pvOriginal$[ebp], edx

; 2764 :     cchRemains = *pCchResult;
; 2765 : 
; 2766 :     ASSERT(pRawState->cbBytesInLastRawToken == pRawState->DefaultCharacterSize);
; 2767 :     ASSERT(NT_SUCCESS(pRawState->NextCharacterResult));
; 2768 : 
; 2769 :     //
; 2770 :     // Gather characters
; 2771 :     //
; 2772 :     pRawState->pvCursor = pExtent->pvData;

  0004d	8b 17		 mov	 edx, DWORD PTR [edi]
  0004f	53		 push	 ebx
  00050	8b 18		 mov	 ebx, DWORD PTR [eax]
  00052	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 2773 : 
; 2774 :     for (cbSoFar = 0; cbSoFar < pExtent->cbData; cbSoFar) {

  00055	39 4f 04	 cmp	 DWORD PTR [edi+4], ecx
  00058	89 4d 08	 mov	 DWORD PTR _cbSoFar$[ebp], ecx
  0005b	76 49		 jbe	 SHORT $L16647
$L16186:

; 2775 : 
; 2776 :         ulCharacter = pRawState->pfnNextChar(pRawState);

  0005d	8b ce		 mov	 ecx, esi
  0005f	ff 56 10	 call	 DWORD PTR [esi+16]

; 2777 : 
; 2778 :         if ((ulCharacter == 0) && !NT_SUCCESS(pRawState->NextCharacterResult)) {

  00062	85 c0		 test	 eax, eax
  00064	75 05		 jne	 SHORT $L16189
  00066	39 46 30	 cmp	 DWORD PTR [esi+48], eax
  00069	7c 4c		 jl	 SHORT $L16643
$L16189:

; 2781 :         }
; 2782 :         else if (ulCharacter > 0xFFFF) {

  0006b	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00070	77 4d		 ja	 SHORT $L16644

; 2785 :         }
; 2786 :         
; 2787 :         if (pwszTarget && (cchRemains > 0)) {

  00072	8b 4d 10	 mov	 ecx, DWORD PTR _pwszTarget$[ebp]
  00075	85 c9		 test	 ecx, ecx
  00077	74 0c		 je	 SHORT $L16646
  00079	85 db		 test	 ebx, ebx
  0007b	76 08		 jbe	 SHORT $L16646

; 2788 :             pwszTarget[cchTotal] = (WCHAR)ulCharacter;

  0007d	8b 55 fc	 mov	 edx, DWORD PTR _cchTotal$[ebp]
  00080	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 2789 :             cchRemains--;

  00084	4b		 dec	 ebx
$L16646:

; 2790 :         }
; 2791 : 
; 2792 :         cchTotal++;
; 2793 : 
; 2794 :         pRawState->pvCursor = (PBYTE)pRawState->pvCursor + pRawState->cbBytesInLastRawToken;

  00085	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 2795 :         cbSoFar += pRawState->cbBytesInLastRawToken;
; 2796 : 
; 2797 :         if (pRawState->cbBytesInLastRawToken != pRawState->DefaultCharacterSize) {

  00088	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0008b	ff 45 fc	 inc	 DWORD PTR _cchTotal$[ebp]
  0008e	01 46 0c	 add	 DWORD PTR [esi+12], eax
  00091	01 45 08	 add	 DWORD PTR _cbSoFar$[ebp], eax
  00094	3b c1		 cmp	 eax, ecx
  00096	74 03		 je	 SHORT $L16197

; 2798 :             pRawState->cbBytesInLastRawToken = pRawState->DefaultCharacterSize;

  00098	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
$L16197:

; 2773 : 
; 2774 :     for (cbSoFar = 0; cbSoFar < pExtent->cbData; cbSoFar) {

  0009b	8b 45 08	 mov	 eax, DWORD PTR _cbSoFar$[ebp]
  0009e	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000a1	72 ba		 jb	 SHORT $L16186

; 2781 :         }
; 2782 :         else if (ulCharacter > 0xFFFF) {

  000a3	8b 45 14	 mov	 eax, DWORD PTR _pCchResult$[ebp]
$L16647:

; 2799 :         }
; 2800 :     }
; 2801 : 
; 2802 :     *pCchResult = cchTotal;

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _cchTotal$[ebp]
  000a9	89 08		 mov	 DWORD PTR [eax], ecx
$Exit$16190:

; 2803 : 
; 2804 : Exit:
; 2805 :     pState->RawTokenState.pvCursor = pvOriginal;

  000ab	8b 45 0c	 mov	 eax, DWORD PTR _pvOriginal$[ebp]
  000ae	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 2806 : 
; 2807 :     return status;

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _status$[ebp]
  000b4	5b		 pop	 ebx
  000b5	eb 16		 jmp	 SHORT $L16167
$L16643:

; 2779 :             status = pRawState->NextCharacterResult;

  000b7	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000ba	89 45 f8	 mov	 DWORD PTR _status$[ebp], eax

; 2780 :             goto Exit;

  000bd	eb ec		 jmp	 SHORT $Exit$16190
$L16644:

; 2783 :             status = STATUS_INVALID_PARAMETER;

  000bf	c7 45 f8 0d 00
	00 c0		 mov	 DWORD PTR _status$[ebp], -1073741811 ; c000000dH

; 2784 :             goto Exit;

  000c6	eb e3		 jmp	 SHORT $Exit$16190
$L16179:

; 2755 :         return STATUS_INVALID_PARAMETER;

  000c8	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$L16167:
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi

; 2808 : }

  000cf	c9		 leave
  000d0	c2 10 00	 ret	 16			; 00000010H
_RtlXmlCopyStringOut@16 ENDP
_TEXT	ENDS
PUBLIC	_RtlXmlDetermineStreamEncoding@12
EXTRN	__SEH_prolog:NEAR
EXTRN	__SEH_epilog:NEAR
;	COMDAT CONST
CONST	SEGMENT
$T16662	DD	0ffffffffH
	DD	FLAT:$L16652
	DD	FLAT:$L16653
; Function compile flags: /Ogsy
CONST	ENDS
;	COMDAT _RtlXmlDetermineStreamEncoding@12
_TEXT	SEGMENT
$T16656 = -368
_fNextValueIsEncoding$16128 = -361
_Token$ = -360
_t$ = -344
_PrivateState$ = -340
_Family$ = -28
__$SEHRec$ = -24
_pState$ = 8
_pulBytesOfEncoding$ = 12
_pEncodingMarker$ = 16
_RtlXmlDetermineStreamEncoding@12 PROC NEAR		; COMDAT

; 2553 : {

  00000	68 60 01 00 00	 push	 352			; 00000160H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:$T16662
  0000a	e8 00 00 00 00	 call	 __SEH_prolog

; 2554 :     PVOID pvCursor;
; 2555 :     PVOID pSense;
; 2556 :     XML_ENCODING_FAMILY Family = XMLEF_UNKNOWN;

  0000f	33 db		 xor	 ebx, ebx
  00011	89 5d e4	 mov	 DWORD PTR _Family$[ebp], ebx

; 2557 :     NTSTATUS status = STATUS_SUCCESS;
; 2558 :     SIZE_T t;
; 2559 :     XML_TOKENIZATION_STATE PrivateState;
; 2560 :     XML_TOKEN Token;
; 2561 : 
; 2562 : 
; 2563 :     static BYTE s_rgbUTF16_big_BOM[]    = { 0xFE, 0xFF };
; 2564 :     static BYTE s_rgbUTF16_little_BOM[] = { 0xFF, 0xFE };
; 2565 :     static BYTE s_rgbUCS4_big[]         = { 0x00, 0x00, 0x00, 0x3c };
; 2566 :     static BYTE s_rgbUCS4_little[]      = { 0x3c, 0x00, 0x00, 0x00 };
; 2567 :     static BYTE s_rgbUTF16_big[]        = { 0x00, 0x3C, 0x00, 0x3F };
; 2568 :     static BYTE s_rgbUTF16_little[]     = { 0x3C, 0x00, 0x3F, 0x00};
; 2569 :     static BYTE s_rgbUTF8_or_mixed[]    = { 0x3C, 0x3F, 0x78, 0x6D};
; 2570 :     static BYTE s_rgbUTF8_with_bom[]    = { 0xEF, 0xBB, 0xBF };
; 2571 : 
; 2572 :     //
; 2573 :     // These values for 'presumed' encoding families found at
; 2574 :     // http://www.xml.com/axml/testaxml.htm (Appendix F)
; 2575 :     //
; 2576 :     static struct {
; 2577 :         PBYTE pbSense;
; 2578 :         SIZE_T cbSense;
; 2579 :         XML_ENCODING_FAMILY Family;
; 2580 :         SIZE_T cbToDiscard;
; 2581 :         NTXMLRAWNEXTCHARACTER pfnFastDecoder;
; 2582 :     } EncodingCorrelation[] = {
; 2583 :         { s_rgbUTF16_big_BOM, NUMBER_OF(s_rgbUTF16_big_BOM),        XMLEF_UTF_16_BE, 2 },
; 2584 :         { s_rgbUTF16_little_BOM, NUMBER_OF(s_rgbUTF16_little_BOM),  XMLEF_UTF_16_LE, 2 },
; 2585 :         { s_rgbUTF16_big, NUMBER_OF(s_rgbUTF16_big),                XMLEF_UTF_16_BE, 0 },
; 2586 :         { s_rgbUTF16_little, NUMBER_OF(s_rgbUTF16_little),          XMLEF_UTF_16_LE, 0 },
; 2587 :         { s_rgbUCS4_big, NUMBER_OF(s_rgbUCS4_big),                  XMLEF_UCS_4_BE, 0 },
; 2588 :         { s_rgbUCS4_little, NUMBER_OF(s_rgbUCS4_little),            XMLEF_UCS_4_LE, 0 },
; 2589 :         { s_rgbUTF8_with_bom, NUMBER_OF(s_rgbUTF8_with_bom),        XMLEF_UTF_8_OR_ASCII, 3 },
; 2590 :         { s_rgbUTF8_or_mixed, NUMBER_OF(s_rgbUTF8_or_mixed),        XMLEF_UTF_8_OR_ASCII, 0 }
; 2591 :     };
; 2592 : 
; 2593 :     if (!ARGUMENT_PRESENT(pState) ||
; 2594 :         (pState->RawTokenState.OriginalDocument.pvData == NULL) ||
; 2595 :         (pulBytesOfEncoding == NULL)) {

  00014	8b 55 08	 mov	 edx, DWORD PTR _pState$[ebp]
  00017	3b d3		 cmp	 edx, ebx
  00019	0f 84 a6 01 00
	00		 je	 $L16112
  0001f	39 1a		 cmp	 DWORD PTR [edx], ebx
  00021	0f 84 9e 01 00
	00		 je	 $L16112
  00027	8b 75 0c	 mov	 esi, DWORD PTR _pulBytesOfEncoding$[ebp]
  0002a	3b f3		 cmp	 esi, ebx
  0002c	0f 84 93 01 00
	00		 je	 $L16112

; 2597 :     }
; 2598 : 
; 2599 :     if (!NT_SUCCESS(status = RtlXmlCloneTokenizationState(pState, &PrivateState))) {

  00032	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _PrivateState$[ebp]
  00038	50		 push	 eax
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _RtlXmlCloneTokenizationState@8
  0003f	3b c3		 cmp	 eax, ebx

; 2600 :         return status;

  00041	0f 8c 83 01 00
	00		 jl	 $L16072

; 2601 :     }
; 2602 : 
; 2603 :     pvCursor = PrivateState.RawTokenState.pvCursor;
; 2604 :     *pulBytesOfEncoding = 0;

  00047	89 1e		 mov	 DWORD PTR [esi], ebx

; 2605 :     RtlZeroMemory(pEncodingMarker, sizeof(*pEncodingMarker));

  00049	33 c0		 xor	 eax, eax
  0004b	8b 7d 10	 mov	 edi, DWORD PTR _pEncodingMarker$[ebp]
  0004e	ab		 stosd
  0004f	ab		 stosd

; 2606 : 
; 2607 :     //
; 2608 :     // Reset the cursor to the top of the XML, as that's where all this stuff is going
; 2609 :     // to be.
; 2610 :     //
; 2611 :     pSense = PrivateState.RawTokenState.pvCursor = PrivateState.RawTokenState.OriginalDocument.pvData;

  00050	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _PrivateState$[ebp]
  00056	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _PrivateState$[ebp+12], eax

; 2612 : 
; 2613 :     //
; 2614 :     // Since we're reading user data, we have to be careful.
; 2615 :     //
; 2616 :     __try {

  0005c	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 2617 : 
; 2618 :         if (PrivateState.RawTokenState.OriginalDocument.cbData >= 4) {

  0005f	83 bd b0 fe ff
	ff 04		 cmp	 DWORD PTR _PrivateState$[ebp+4], 4
  00066	72 3f		 jb	 SHORT $L16120

; 2619 : 
; 2620 :             for (t = 0; t < NUMBER_OF(EncodingCorrelation); t++) {

  00068	33 c0		 xor	 eax, eax
$L16669:
  0006a	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _t$[ebp], eax
  00070	83 f8 08	 cmp	 eax, 8
  00073	73 32		 jae	 SHORT $L16120

; 2621 : 
; 2622 :                 if (memcmp(EncodingCorrelation[t].pbSense, pSense, EncodingCorrelation[t].cbSense) == 0) {

  00075	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00078	c1 e0 02	 shl	 eax, 2
  0007b	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?EncodingCorrelation@?1??RtlXmlDetermineStreamEncoding@@9@9[eax+4]
  00081	8b bd ac fe ff
	ff		 mov	 edi, DWORD PTR _PrivateState$[ebp]
  00087	8b b0 00 00 00
	00		 mov	 esi, DWORD PTR ?EncodingCorrelation@?1??RtlXmlDetermineStreamEncoding@@9@9[eax]
  0008d	33 db		 xor	 ebx, ebx
  0008f	f3 a6		 repe cmpsb
  00091	75 4c		 jne	 SHORT $L16119

; 2623 :                     Family = EncodingCorrelation[t].Family;

  00093	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?EncodingCorrelation@?1??RtlXmlDetermineStreamEncoding@@9@9[eax+8]
  00099	89 4d e4	 mov	 DWORD PTR _Family$[ebp], ecx

; 2624 :                     *pulBytesOfEncoding = EncodingCorrelation[t].cbToDiscard;

  0009c	8b 80 0c 00 00
	00		 mov	 eax, DWORD PTR ?EncodingCorrelation@?1??RtlXmlDetermineStreamEncoding@@9@9[eax+12]
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _pulBytesOfEncoding$[ebp]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax
$L16120:

; 2619 : 
; 2620 :             for (t = 0; t < NUMBER_OF(EncodingCorrelation); t++) {

  000a7	83 4d fc ff	 or	 DWORD PTR __$SEHRec$[ebp+20], -1

; 2634 :         goto Exit;
; 2635 :     }
; 2636 : 
; 2637 :     //
; 2638 :     // Are we using the default next character implementation?  If so, and the
; 2639 :     // encoding is UTF8, then we have a faster version of the decoder.
; 2640 :     //
; 2641 :     if ((pState->RawTokenState.pfnNextChar == RtlXmlDefaultNextCharacter) && (Family == XMLEF_UTF_8_OR_ASCII)) {

  000ab	81 7a 10 00 00
	00 00		 cmp	 DWORD PTR [edx+16], OFFSET FLAT:@RtlXmlDefaultNextCharacter@4
  000b2	75 34		 jne	 SHORT $L16665
  000b4	83 7d e4 05	 cmp	 DWORD PTR _Family$[ebp], 5
  000b8	75 2e		 jne	 SHORT $L16665

; 2642 : 
; 2643 :         pState->RawTokenState.pfnNextChar = RtlXmlDefaultNextCharacter_UTF8;

  000ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:@RtlXmlDefaultNextCharacter_UTF8@4
  000bf	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 2644 :         pState->RawTokenState.DefaultCharacterSize = pState->RawTokenState.cbBytesInLastRawToken = 1;

  000c2	33 db		 xor	 ebx, ebx
  000c4	43		 inc	 ebx
  000c5	89 5a 2c	 mov	 DWORD PTR [edx+44], ebx
  000c8	89 5a 34	 mov	 DWORD PTR [edx+52], ebx

; 2645 : 
; 2646 :         PrivateState.RawTokenState.pfnNextChar = RtlXmlDefaultNextCharacter_UTF8;

  000cb	89 85 bc fe ff
	ff		 mov	 DWORD PTR _PrivateState$[ebp+16], eax

; 2647 :         PrivateState.RawTokenState.DefaultCharacterSize = PrivateState.RawTokenState.cbBytesInLastRawToken = 1;

  000d1	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _PrivateState$[ebp+44], ebx
  000d7	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _PrivateState$[ebp+52], ebx
  000dd	eb 0c		 jmp	 SHORT $L16123
$L16119:

; 2619 : 
; 2620 :             for (t = 0; t < NUMBER_OF(EncodingCorrelation); t++) {

  000df	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _t$[ebp]
  000e5	40		 inc	 eax
  000e6	eb 82		 jmp	 SHORT $L16669
$L16665:

; 2647 :         PrivateState.RawTokenState.DefaultCharacterSize = PrivateState.RawTokenState.cbBytesInLastRawToken = 1;

  000e8	33 db		 xor	 ebx, ebx
  000ea	43		 inc	 ebx
$L16123:

; 2648 :     }
; 2649 : 
; 2650 :     //
; 2651 :     // Now let's gather the first token from the input stream.  If it's
; 2652 :     // not XTSS_XMLDECL_OPEN, then quit out.  Otherwise, we need to do a little
; 2653 :     // work to determine the encoding - keep gathering values until the 'encoding'
; 2654 :     // string is found.  Advance only if there were BOM bytes.
; 2655 :     //
; 2656 :     if (*pulBytesOfEncoding != 0) {

  000eb	8b 45 0c	 mov	 eax, DWORD PTR _pulBytesOfEncoding$[ebp]
  000ee	8b 00		 mov	 eax, DWORD PTR [eax]
  000f0	85 c0		 test	 eax, eax
  000f2	74 06		 je	 SHORT $L16124

; 2657 :         ADVANCE_PVOID(PrivateState.RawTokenState.pvCursor, *pulBytesOfEncoding);

  000f4	01 85 b8 fe ff
	ff		 add	 DWORD PTR _PrivateState$[ebp+12], eax
$L16124:

; 2658 :     }
; 2659 : 
; 2660 : 
; 2661 :     if (NT_SUCCESS(status = RtlXmlNextToken(&PrivateState, &Token, TRUE))) {

  000fa	53		 push	 ebx
  000fb	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _Token$[ebp]
  00101	50		 push	 eax
  00102	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _PrivateState$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _RtlXmlNextToken@12
  0010e	85 c0		 test	 eax, eax
  00110	0f 8c b4 00 00
	00		 jl	 $L16072

; 2662 : 
; 2663 :         BOOLEAN fNextValueIsEncoding = FALSE;

  00116	80 a5 97 fe ff
	ff 00		 and	 BYTE PTR _fNextValueIsEncoding$16128[ebp], 0

; 2664 : 
; 2665 :         //
; 2666 :         // Didn't find the XMLDECL opening, or we found an error during
; 2667 :         // tokenization?  Stop looking... return success, assume the caller
; 2668 :         // will do the Right Thing when it calls RtlXmlNextToken itself.
; 2669 :         //
; 2670 :         if ((Token.State != XTSS_XMLDECL_OPEN) || Token.fError) {

  0011d	83 bd a0 fe ff
	ff 2c		 cmp	 DWORD PTR _Token$[ebp+8], 44 ; 0000002cH
  00124	0f 85 a0 00 00
	00		 jne	 $L16072
  0012a	80 bd a4 fe ff
	ff 00		 cmp	 BYTE PTR _Token$[ebp+12], 0
  00131	0f 85 93 00 00
	00		 jne	 $L16072

; 2671 :             goto Exit;
; 2672 :         }
; 2673 : 
; 2674 :         //
; 2675 :         // Let's look until we find the close of the XMLDECL, the end of
; 2676 :         // the document, or an error, for the encoding value
; 2677 :         //
; 2678 :         do {
; 2679 : 
; 2680 :             status = RtlXmlNextToken(&PrivateState, &Token, TRUE);

  00137	eb 3c		 jmp	 SHORT $L16132
$L16131:

; 2683 :             }
; 2684 : 
; 2685 :             //
; 2686 :             // Hmm... something odd, quit looking
; 2687 :             //
; 2688 :             if (Token.fError || (Token.State == XTSS_ERRONEOUS) ||
; 2689 :                 (Token.State == XTSS_XMLDECL_CLOSE) || (Token.State == XTSS_STREAM_END)) {

  00139	80 bd a4 fe ff
	ff 00		 cmp	 BYTE PTR _Token$[ebp+12], 0
  00140	0f 85 84 00 00
	00		 jne	 $L16072
  00146	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _Token$[ebp+8]
  0014c	85 c9		 test	 ecx, ecx
  0014e	74 7a		 je	 SHORT $L16072
  00150	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  00153	74 75		 je	 SHORT $L16072
  00155	83 f9 03	 cmp	 ecx, 3
  00158	74 70		 je	 SHORT $L16072

; 2690 :                 break;
; 2691 :             }
; 2692 :             //
; 2693 :             // Otherwise, is this the 'encoding' marker?
; 2694 :             //
; 2695 :             else if (Token.State == XTSS_XMLDECL_ENCODING) {

  0015a	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0015d	75 08		 jne	 SHORT $L16139

; 2696 :                 fNextValueIsEncoding = TRUE;

  0015f	88 9d 97 fe ff
	ff		 mov	 BYTE PTR _fNextValueIsEncoding$16128[ebp], bl

; 2697 :             }
; 2698 :             //
; 2699 :             // The caller will know how to deal with this.
; 2700 :             //
; 2701 :             else if ((Token.State == XTSS_XMLDECL_VALUE) && fNextValueIsEncoding) {

  00165	eb 0e		 jmp	 SHORT $L16132
$L16139:
  00167	83 f9 34	 cmp	 ecx, 52			; 00000034H
  0016a	75 09		 jne	 SHORT $L16132
  0016c	80 bd 97 fe ff
	ff 00		 cmp	 BYTE PTR _fNextValueIsEncoding$16128[ebp], 0
  00173	75 1a		 jne	 SHORT $L16661
$L16132:

; 2671 :             goto Exit;
; 2672 :         }
; 2673 : 
; 2674 :         //
; 2675 :         // Let's look until we find the close of the XMLDECL, the end of
; 2676 :         // the document, or an error, for the encoding value
; 2677 :         //
; 2678 :         do {
; 2679 : 
; 2680 :             status = RtlXmlNextToken(&PrivateState, &Token, TRUE);

  00175	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _Token$[ebp]
  0017b	53		 push	 ebx
  0017c	50		 push	 eax
  0017d	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _PrivateState$[ebp]
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _RtlXmlNextToken@12

; 2681 :             if (!NT_SUCCESS(status)) {

  00189	85 c0		 test	 eax, eax
  0018b	7d ac		 jge	 SHORT $L16131

; 2682 :                 break;

  0018d	eb 3b		 jmp	 SHORT $L16072
$L16661:

; 2702 :                 *pEncodingMarker = Token.Run;

  0018f	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _Token$[ebp]
  00195	8b 4d 10	 mov	 ecx, DWORD PTR _pEncodingMarker$[ebp]
  00198	89 11		 mov	 DWORD PTR [ecx], edx
  0019a	8b 95 9c fe ff
	ff		 mov	 edx, DWORD PTR _Token$[ebp+4]
  001a0	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 2703 :                 break;

  001a3	eb 25		 jmp	 SHORT $L16072
$L16652:

; 2625 :                     break;
; 2626 :                 }
; 2627 :             }
; 2628 : 
; 2629 :         }
; 2630 :     }
; 2631 :     __except (EXCEPTION_EXECUTE_HANDLER)

  001a5	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  001a8	8b 00		 mov	 eax, DWORD PTR [eax]
  001aa	8b 00		 mov	 eax, DWORD PTR [eax]
  001ac	89 85 90 fe ff
	ff		 mov	 DWORD PTR $T16656[ebp], eax
  001b2	33 c0		 xor	 eax, eax
  001b4	40		 inc	 eax
$L16654:
  001b5	c3		 ret	 0
$L16653:
  001b6	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 2632 :     {
; 2633 :         status = GetExceptionCode();

  001b9	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR $T16656[ebp]
  001bf	83 4d fc ff	 or	 DWORD PTR __$SEHRec$[ebp+20], -1
$Exit$16122:

; 2704 :             }
; 2705 :         }
; 2706 :         while (TRUE);
; 2707 :     }
; 2708 : 
; 2709 : Exit:
; 2710 :     return status;

  001c3	eb 05		 jmp	 SHORT $L16072
$L16112:

; 2596 :         return STATUS_INVALID_PARAMETER;

  001c5	b8 0d 00 00 c0	 mov	 eax, -1073741811	; c000000dH
$L16072:

; 2711 : }

  001ca	e8 00 00 00 00	 call	 __SEH_epilog
  001cf	c2 0c 00	 ret	 12			; 0000000cH
_RtlXmlDetermineStreamEncoding@12 ENDP
_TEXT	ENDS
END
