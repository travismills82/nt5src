//***************************************************************************** 
// 
// Microsoft Windows Media 
// Copyright (C) Microsoft Corporation. All rights reserved. 
//
// FileName:            wmsbuffer.idl
//
// Abstract:
//
//*****************************************************************************

cpp_quote("//*****************************************************************************") 
cpp_quote("//") 
cpp_quote("// Microsoft Windows Media") 
cpp_quote("// Copyright (C) Microsoft Corporation. All rights reserved.") 
cpp_quote("//")
cpp_quote("// Automatically generated by Midl from wmsbuffer.idl" )
cpp_quote("//")
cpp_quote("// DO NOT EDIT THIS FILE.")
cpp_quote("//")
cpp_quote("//*****************************************************************************") 

cpp_quote("#if _MSC_VER > 1000")
cpp_quote("#pragma once")
cpp_quote("#endif // _MSC_VER > 1000")

import "objidl.idl";

cpp_quote( "EXTERN_GUID( IID_INSSBuffer, 0xE1CD3524,0x03D7,0x11d2,0x9E,0xED,0x00,0x60,0x97,0xD2,0xD7,0xCF );" )
cpp_quote( "EXTERN_GUID( IID_IWMSBuffer, 0xE1CD3524,0x03D7,0x11d2,0x9E,0xED,0x00,0x60,0x97,0xD2,0xD7,0xCF );" )
cpp_quote( "EXTERN_GUID( IID_IWMSBufferAllocator, 0x61103CA4,0x2033,0x11d2,0x9E,0xF1,0x00,0x60,0x97,0xD2,0xD7,0xCF );" )


//////////////////////////////////////////////////////////////////////////////

cpp_quote( "#define IWMSBuffer INSSBuffer" )

interface IWMSBuffer;

//////////////////////////////////////////////////////////////////////////////
[
    local,
    object,
    pointer_default(unique),
    uuid(E1CD3524-03D7-11d2-9EED-006097D2D7CF),
    version(1.0),
    helpstring("Provides methods for managing a buffer.")
]
interface INSSBuffer : IUnknown
{
    [helpstring("Retrieves the number of bytes in the buffer that are being used to store data.")] HRESULT 
    GetLength( [out] DWORD *pdwLength );
	
    [helpstring("Specifies the number of bytes in the buffer that are being used to store data.")] HRESULT 
    SetLength( [in] DWORD dwLength );
	
    [helpstring("Retrieves the maximum number of bytes that can be stored in the buffer.")] HRESULT
    GetMaxLength( [out] DWORD *pdwLength );
    
    [helpstring("Retrieves the buffer.")] HRESULT
    GetBuffer( [out] BYTE **ppbBuffer );
    
    [helpstring("Retrieves the buffer and the number of bytes in the buffer that are being used to store data.")] HRESULT
    GetBufferAndLength( [out] BYTE **ppbBuffer, [out] DWORD *pdwLength );
};

//////////////////////////////////////////////////////////////////////////////
[
    local,
    object,
    pointer_default(unique),
    uuid(61103CA4-2033-11d2-9EF1-006097D2D7CF),
    version(1.0),
    helpstring("Provides methods for allocating a buffer.")
]
interface IWMSBufferAllocator : IUnknown
{
    [helpstring("Allocates a buffer.")] HRESULT 
    AllocateBuffer(
                [in] DWORD dwMaxBufferSize,
                [out] INSSBuffer **ppBuffer
                );
    [helpstring("Allocates a page aligned buffer that is a multiple of a page size.")] HRESULT 
    AllocatePageSizeBuffer(
                [in] DWORD dwMaxBufferSize,
                [out] INSSBuffer **ppBuffer
                );
};




