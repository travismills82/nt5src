ASSEMBLY_NOT_REGISTERED=This schema for this assembly has not been registered with WMI.


COMMENT_SHOULDSERIALIZE = Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.

COMMENT_ISPROPNULL = Functions Is<PropertyName>Null() are used to check if a property is NULL.

COMMENT_RESETPROP = Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.

COMMENT_DATECONVFUNC = Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
COMMENT_TIMESPANCONVFUNC = Time interval functions  ToTimeSpan and ToDmtfTimeInterval are added to the class to convert DMTF Time Interval to  System.TimeSpan and vice-versa.
COMMENT_ATTRIBPROP = Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.

COMMENT_GETINSTANCES = Different overloads of GetInstances() help in enumerating instances of the WMI class.

COMMENT_CLASSBEGIN = An Early Bound class generated for the WMI class.

COMMENT_PRIVAUTOCOMMIT = Member variable to store the 'automatic commit' behavior for the class.

COMMENT_CONSTRUCTORS = Below are different overloads of constructors to initialize an instance of the class with a WMI object.

COMMENT_ORIGNAMESPACE = Property returns the namespace of the WMI class.

COMMENT_CLASSNAME = Name of the WMI class.

COMMENT_SYSOBJECT = Property pointing to an embedded object to get System properties of the WMI object.

COMMENT_LATEBOUNDOBJ = Underlying lateBound WMI object.

COMMENT_MGMTSCOPE = ManagementScope of the object.

COMMENT_AUTOCOMMITPROP = Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).

COMMENT_MGMTPATH = The ManagementPath of the underlying WMI object.

COMMENT_PROPTYPECONVERTER = TypeConverter to handle null values for ValueType properties

COMMENT_SYSPROPCLASS = Embedded class to represent WMI system Properties.

COMMENT_ENUMIMPL = Enumerator implementation for enumerating instances of the class.

COMMENT_LATEBOUNDPROP = Property returning the underlying lateBound object.

COMMENT_CREATEDCLASS = Private property to hold the name of WMI class which created this class.
COMMENT_CREATEDWMINAMESPACE = Private property to hold the WMI namespace in which the class resides.
COMMENT_STATICMANAGEMENTSCOPE = Private member variable to hold the ManagementScope which is used by the various methods.
COMMENT_STATICSCOPEPROPERTY = Public static scope property which is used by the various methods.
COMMENT_TODATETIME = Converts a given datetime in DMTF format to System.DateTime object.
COMMENT_TODMTFDATETIME = Converts a given System.DateTime object to DMTF datetime format.
COMMENT_TODMTFTIMEINTERVAL = Converts a given System.TimeSpan object to DMTF Time interval format.
COMMENT_TOTIMESPAN = Converts a given time interval in DMTF format to System.TimeSpan object.
COMMENT_EMBEDDEDOBJ = Private variable to hold the embedded property representing the instance.

COMMENT_CURRENTOBJ = The current WMI object used

COMMENT_FLAGFOREMBEDDED = Flag to indicate if the instance is an embedded object.


EMBEDDED_COMMENT1 =If the embedded property is strongly typed then, to strongly type the property to the type of
EMBEDDED_COMMENT2 =the embedded object, you have to do the following things.
EMBEDDED_COMMENT3 =\t1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
EMBEDDED_COMMENT4 =\t2. Include the namespace of the generated class.
EMBEDDED_COMMENT5 =\t3. Change the property get/set functions so as return the instance of the Managed class.
EMBEDDED_COMMENT6 =Below is a sample code.

EMBEDDED_COMMENT7 =VB Code
EMBEDED_VB_CODESAMP1 =Public Property <PropertyName>() As <ManagedClassName of Embedded property>
EMBEDED_VB_CODESAMP2 =\tGet
EMBEDED_VB_CODESAMP3 =\t\tReturn New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
EMBEDED_VB_CODESAMP4 =\tEnd Get
EMBEDED_VB_CODESAMP5 =\tSet(ByVal Value As <ManagedClassName of Embedded property>)
EMBEDED_VB_CODESAMP6 =\t\tcurObj("EObject") = Value.LateBoundObject
EMBEDED_VB_CODESAMP7 =\t\tIf (AutoCommitProp = True And isEmbedded = False) Then
EMBEDED_VB_CODESAMP8 =\t\t\tPrivateLateBoundObject.Put()
EMBEDED_VB_CODESAMP9 =\t\tEnd If
EMBEDED_VB_CODESAMP10 =\tEnd Set

EMBEDDED_COMMENT8 =C# Code
EMBEDED_CS_CODESAMP1 =public <ManagedClassName of Embedded property> <PropertyName>
EMBEDED_CS_CODESAMP2 ={
EMBEDED_CS_CODESAMP3 =\tget
EMBEDED_CS_CODESAMP4 =\t{
EMBEDED_CS_CODESAMP5 =\t\treturn new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
EMBEDED_CS_CODESAMP6 =\t}
EMBEDED_CS_CODESAMP7 =\tset
EMBEDED_CS_CODESAMP8 =\t{
EMBEDED_CS_CODESAMP9 =\t\tcurObj["<PropertyName>"] = value.LateBoundObject;
EMBEDED_CS_CODESAMP10 =\t\tIf (AutoCommitProp == true && isEmbedded == false)
EMBEDED_CS_CODESAMP11 =\t\t{
EMBEDED_CS_CODESAMP12 =\t\t\tPrivateLateBoundObject.Put();
EMBEDED_CS_CODESAMP13 =\t\t}
EMBEDED_CS_CODESAMP14 =\t}
EMBEDED_CS_CODESAMP15 =}

CLASSNOT_FOUND_EXCEPT =Class name does not match.
NULLFILEPATH_EXCEPT = FilePath or code generator object is null.
EMPTY_FILEPATH_EXCEPT =FilePath cannot be empty.
NAMESPACE_NOTINIT_EXCEPT =Namespace not initialized.
CLASSNAME_NOTINIT_EXCEPT =ClassName not initialized.

FORCE_UPDATE =Forces update of the instrumented assemblies registration information
FILETOWRITE_MOF =File to write equivalent MOF for instrumented assemblies
WMISCHEMA_INSTALLATIONSTART =Installing WMI Schema: Started
REGESTRING_ASSEMBLY =Registering assembly:
WMISCHEMA_INSTALLATIONEND =Installing WMI Schema: Finished
MOFFILE_GENERATING =Generating MOF file:
UNSUPPORTEDMEMBER_EXCEPT = The member '{0}' has a declaration that is not supported.  Use the IgnoreMember attribute.
CLASSINST_EXCEPT =Instance instrumentation classes must derive from abstract WMI classes
MEMBERCONFLILCT_EXCEPT =The member '{0}' has a managed name that conflicts with another local member.
NAMESPACE_ENSURE =Ensuring that namespace exists:
CLASS_ENSURE =Ensuring that class exists:
CLASS_ENSURECREATE =Ensuring that class exists: CREATING 
CLASS_NOTREPLACED_EXCEPT =Could not replace class

