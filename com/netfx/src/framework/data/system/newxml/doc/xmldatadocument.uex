<docs>
	<doc for="XmlDataDocument.SaveDataSetMapping">
		<summary>
			<para>
				Saves
       the current relational view as an XSD schema.
			</para>
		</summary>
		<param name="schemaFile">Filename and location where you want to save the schema.</param>
		<example>
			<para>The following example does a simple Select command 
       against a customer table and uses the resulting dataset to load an XmlDataDocument. It displays the document and then saves the current view out as an XSD schema. </para>
			<para> The sample uses the SQL Server 2000 Northwind database. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.SaveDataSetMapping Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDataDocument.IsRowOptimized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="XmlDataDocument.LoadDataSetMapping">
		<summary>
			<para>Builds a relational view according to the specified
      schema.</para>
		</summary>
		<param name="schemaFile">URL for the file containing the schema to use.</param>
		<remarks>
			<para>If there is already a relational view defined for the
      XmlDataDocument, an exception is thrown.</para>
		</remarks>
		<example>
			<para>The following example modifies the price of a book using the DataSet. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.LoadDataSetMapping Example" SnippetID="1"/>
			<para>The sample uses the input file </para>
			<para>
				<see langword="test.xsd"/>
			</para>
			<codelink SampleID="Classic WebData XmlDataDocument.LoadDataSetMapping Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlDataDocument.CreateEntityReference">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlEntityReference"/> with the specified name. </para>
			<para>
				<see langword="XmlEntityReference"/> nodes cannot be
created for <see langword="XmlDataDocument"/> objects. Calling
this method throws an exception.</para>
		</summary>
		<param name="name">Name of the entity reference.</param>
		<exception cref="NotSupportedException">Calling this method.</exception>
	</doc>
	<doc for="XmlDataDocument.XmlDataDocument2">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlDataDocument">
		<summary>
			<para>Allows structured data to be stored, retrieved, and
      manipulated through a relational <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<remarks>
			<para> This class extends <see cref="System.Xml.XmlDocument"/> . It enables you to load either relational data or 
   XML data and manipulate that data using the W3C Document Object Model (DOM). The
   DOM presents data as a hierarchy of node objects. Because
<see langword="XmlDataDocument"/> implements the <see cref="System.Xml.XPath.IXPathNavigable"/> interface it can also be used as the source 
   document for the <see cref="System.Xml.Xsl.XslTransform"/>
   class.</para>
			<para><see langword="XmlDataDocument"/> has a close affiliation
with the <see langword="DataSet"/>
class which provides a relational view of the loaded XML data. Any changes
made to the <see langword="XmlDataDocument"/> are reflected in the
<see langword="DataSet"/>
and vice versa.</para>
			<para> To load a <see langword="DataSet"/> with XML data, use <see cref="System.Data.DataSet.ReadXmlSchema"/> to build
a relational mapping. The XML data can then be loaded using
<see cref="System.Xml.XmlDataDocument.Load"/> 
or <see cref="System.Xml.XmlDocument.LoadXml"/> .</para>
			<para> To load relational data, specify the
<see langword="DataSet"/> containing
   the relational data as the parameter in the <see cref="System.Xml.XmlDataDocument()"/>
   constructor.
   </para>
		</remarks>
	</doc><doc for="XmlDataDocument.XmlDataDocument1">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlDataDocument"/> class
      with the specified <see cref="System.Data.DataSet"/>
      .</para>
		</summary>
		<param name="dataset">The <see langword="DataSet"/> to load into <see langword="XmlDataDocument"/> .</param>
		<remarks>
			<para>The <see langword="XmlDataDocument"/> is synchronized
   with the specified <see langword="DataSet"/>. Any data in the
<see langword="DataSet"/> is immediately available through the 
<see langword="XmlDataDocument"/> . Any changes in the 
<see langword="DataSet "/>are propagated in the 
<see langword="XmlDataDocument"/>. Any changes made in the 
<see langword="XmlDataDocument"/>, provided they match the 
<see langword="DataSet"/> schema, are propagated in the 
<see langword="DataSet"/> 
.</para>
		</remarks>
		<example>
			<para> The following example loads a customer table into an
   <see langword="XmlDataDocument"/> . </para>
			<para>The example uses the SQL Server 2000 Northwind database. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.XmlDataDocument1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter"/>
	</doc><doc for="XmlDataDocument.CloneNode">
		<summary>
			<para>Creates a duplicate of the current node.</para>
		</summary>
		<param name="deep"><see langword="true"/> to recursively clone the subtree under the specified node; <see langword="false"/> to clone only the node itself.</param>
		<returns>
			<para>The cloned node.</para>
		</returns>
		<remarks>
			<para> Cloning the <see langword="XmlDataDocument"/> also clones
   the <see cref="System.Data.DataSet"/>
   schema.</para>
			<para>If <paramref name="deep"/> is set to
<see langword="false"/> , the cloned <see langword="DataSet"/> has no data,
that is, no rows.</para>
			<para>If <paramref name="deep"/> is set to
<see langword="true"/>, the cloned <see langword="DataSet"/> 
is set
with the schema and then populated with the data.</para>
			<para> See <see cref="System.Xml.XmlNode.CloneNode"/>, 
in the <see langword="XmlNode"/> class, to see a table describing how this
method behaves with each of the different node types.</para>
		</remarks>
		<example>
			<para>The following example loads a <see langword="DataSet"/> into an <see langword="XmlDataDocument"/> and then creates a shallow clone 
   of the <see langword="XmlDataDocument"/>
   . </para>
			<para>The example uses the SQL Server 2000 Northwind database. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.CloneNode Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDataDocument.GetElementFromRow">
		<summary>
			<para>Retrieves the <see cref="System.Xml.XmlElement"/>
associated with the specified <see cref="System.Data.DataRow"/>
.</para>
		</summary>
		<param name="r">The <see langword="DataRow"/> whose associated <see langword="XmlElement"/> you wish to retrieve.</param>
		<returns>
			<para>The <see langword="XmlElement"/> containing a
   representation of the specified <see langword="DataRow"/>
   .</para>
		</returns>
		<example>
			<para>The following example loads a <see langword="DataSet"/>
into an <see langword="XmlDataDocument"/> and then creates an
<see langword="XmlElement"/> representing the first customer record. </para>
			<para>The example uses the SQL Server 2000 Northwind database. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.GetElementFromRow Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataTable"/>
	</doc><doc for="XmlDataDocument.WriteTo">
		<summary>
			<para>Saves the current node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="writer">The <see langword="XmlWriter"/> to which you want to save.</param>
		<example>
			<para>The following example loads a <see langword="DataSet"/>
into an <see langword="XmlDataDocument"/>
and then saves the data out into a file. </para>
			<para>The example uses the SQL Server 2000 Northwind database. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.WriteTo Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDataDocument.CreateElement">
		<overload>
			<para>Creates an <see cref="System.Xml.XmlElement"/> .</para>
		</overload>
		<summary>
			<para> Creates an element with the specified <see cref="System.Xml.XmlNode.Prefix"/>,
<see cref="System.Xml.XmlDocument.LocalName"/>, and <see cref="System.Xml.XmlNode.NamespaceURI"/> 
.</para>
		</summary>
		<param name="prefix">The prefix of the new element; if String.Empty or <see langword="null"/> there is no prefix. </param>
		<param name=" localName">The local name of the new element. </param>
		<param name=" namespaceURI">The namespace URI of the new element; if String.Empty or <see langword="null"/> there is no namespaceURI. </param>
		<returns>
			<para> A new <see cref="System.Xml.XmlElement"/> .
   </para>
		</returns>
		<remarks>
			<para><see langword="Notes to Inheritors"/> If you overload this function, it
   cannot be used for extensibility. Instead, you can return an element created by the
   base class, in this case, <see langword="XmlDataDocument"/> .
   See the following example.
   </para>
			<code>
class MyXmlDataDocument : XmlDataDocument {
 public override XmlElement CreateElement( string prefix, string localName, string nsURI) {
   //Ensure we are returning the base class implementation of element.
   XmlElement e = base.CreateElement( prefix, localName, nsURI );
   //Add additional code here.
   return e;    //Return the element created by XmlDataDocument.
 }    
}
</code>
		</remarks>
	</doc><doc for="XmlDataDocument.XmlDataDocument">
		<overload>
			<para> Initializes a new instance of the
   <see langword="XmlDataDocument"/> class.
      </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the
   <see langword="XmlDataDocument"/> class.
      </para>
		</summary>
		<remarks>
			<para>An empty <see cref="System.Data.DataSet"/> is created and associated with the 
<see langword="XmlDataDocument"/> 
.</para>
		</remarks>
	</doc><doc for="XmlDataDocument.DataSet">
		<summary>
			<para>Gets a <see cref="System.Data.DataSet"/> that provides a relational representation of the
   data in the <see langword="XmlDataDocument"/>
   .</para>
		</summary>
		<value>
			<para>A <see langword="DataSet"/> that can be used to access
   the data in the <see langword="XmlDataDocument"/> using
   a relational model.</para>
		</value>
		<remarks>
			<para>The <see langword="DataSet"/> enables you to access the
   data in the <see langword="XmlDataDocument"/> using a relational model. This
   means that you can handle the data as tables and views, rows and columns,
   relations, and so on. Changes made in the <see langword="DataSet"/> are
   immediately visible in the <see langword="XmlDataDocument"/>
   .</para>
		</remarks>
		<example>
			<para>The following example modifies the price of a book using
      the <see langword="DataSet"/> methods. </para>
			<codelink SampleID="Classic WebData XmlDataDocument.DataSet Example" SnippetID="1"/>
			<para>The example uses the following two files
 as input. </para>
			<para><see langword="2books.xml"/>
			</para>
			<codelink SampleID="Classic WebData XmlDataDocument.DataSet Example" SnippetID="2"/>
			<para><see langword="store.xsd"/>
			</para>
			<codelink SampleID="Classic WebData XmlDataDocument.DataSet Example" SnippetID="3"/>
		</example>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataTable"/>
	</doc><doc for="XmlDataDocument.GetRowFromElement">
		<summary>
			<para>Retrieves the <see cref="System.Data.DataRow"/> associated
   with the specified <see cref="System.Xml.XmlElement"/>.</para>
		</summary>
		<param name="e">The <see langword="XmlElement"/> whose associated <see langword="DataRow"/> you wish to retrieve.</param>
		<returns>
			<para>The <see langword="DataRow"/> 
containing a representation of the <see langword="XmlElement"/>;
<see langword="null"/> if there is no <see langword="DataRow"/> 
associated with the <see langword="XmlElement"/> .</para>
		</returns>
		<example>
			<para> The following example modifies the price of the first book. </para>
			<codelink SampleID="XmlDataDocument.GetRowFromElement" SnippetID="1"/>
			<para>The example uses the following input files: </para>
			<para><see langword="2books.xml"/>
			</para>
			<codelink SampleID="Classic WebData XmlDataDocument.DataSet Example" SnippetID="2"/>
			<para><see langword="store.xsd"/></para>
			<codelink SampleID="Classic WebData XmlDataDocument.DataSet Example" SnippetID="3"/>
		</example>
	</doc><doc for="XmlDataDocument.CreateNavigator">
		<overload>
			<para>Creates a new <see cref="System.Xml.XPath.XPathNavigator"/> object for navigating this document. The navigator is positioned positioned on the Document node.</para>
			<para>To see an XSLT transform using 
<see langword="XmlDataDocument"/> and an <see langword="XPathNavigator"/>, see 
   the <see cref="System.Xml.Xsl.XslTransform.Transform" qualify="true"/> method.</para>
		</overload>
		<summary>
			<para>Creates a new <see cref="System.Xml.XPath.XPathNavigator"/> object for navigating this document. The 
<see langword="XPathNavigator"/> 
is positioned on the node specified in the <paramref name="node"/> parameter.</para>
		</summary>
		<param name="node">The <see cref="System.Xml.XmlNode"/> you want the navigator initially positioned on.</param>
		<returns>
			<para>An <see langword="XPathNavigator"/> .</para>
		</returns>
		<remarks>
			<para>The <see langword="XPathNavigator"/>
provides read-only, random access to data. Because it is
optimized for XSLT transformations, it provides performance benefits when used
as an input mechanism to the <see cref="System.Xml.Xsl.XslTransform.Transform"/> method.</para>
		</remarks>
		<example>
			<para>To see an XSLT transform using 
   <see langword="XmlDataDocument"/> and an <see langword="XPathNavigator"/>, see 
      the <see cref="System.Xml.Xsl.XslTransform.Transform" qualify="true"/> method.</para>
		</example>
		<seealso cref="System.Xml.Xsl.XslTransform"/>
	</doc><doc for="XmlDataDocument.Load2">
		<summary>
			<para>Loads the <see langword="XmlDataDocument"/> from the specified stream.</para>
		</summary>
		<param name="inStream">The stream containing the XML document to load.</param>
		<remarks>
			<para><see langword="XmlDataDocument"/> does not support creating entity
   references. If the data includes entity references, the
<see langword="Load"/> method resolves and 
   expands any entity references.</para>
			<note type="note">
   In order to view the XML data relationally,
   you must first specify a schema to use for data mapping. This can be done either
   by calling the <see cref="System.Data.DataSet.ReadXmlSchema"/> method, or by creating the tables and
   columns within the <see langword="DataSet"/> manually. This
   step must be done before calling <see langword="Load"/>.
</note>
		</remarks>
	</doc><doc for="XmlDataDocument.Load3">
		<summary>
			<para>Loads the <see langword="XmlDataDocument"/> from the
   specified <see cref="System.IO.TextReader"/>.</para>
		</summary>
		<param name="txtReader">The <see langword="TextReader"/> used to feed the XML data into the document.</param>
		<remarks>
			<para><see langword="XmlDataDocument"/> does not support creating entity
   references. If the data includes entity references, the
<see langword="Load"/> method resolves and 
   expands any entity references.</para>
			<note type="note">
   In order to view the XML data relationally,
   you must first specify a schema to use for data mapping. This can be done either
   by calling the <see cref="System.Data.DataSet.ReadXmlSchema"/> method, or by creating the tables and
   columns within the <see langword="DataSet"/> manually. This step must be done before
   calling <see langword="Load"/>.
</note>
		</remarks>
	</doc><doc for="XmlDataDocument.Load1">
		<overload>
			<para>Loads the <see langword="XmlDataDocument"/> using the specified data source and
   synchronizes the <see cref="System.Data.DataSet"/> with the loaded data.
   </para>
			<note type="note">
   In order to view the XML data relationally,
   you must first specify a schema to use for data mapping. This can be done either
   by calling the <see cref="System.Data.DataSet.ReadXmlSchema"/> method, or by creating the tables and
   columns within the <see langword="DataSet"/> manually. This
   step must be done before calling <see langword="Load"/>.
</note>
			<para><see langword="XmlDataDocument"/> does not support creating entity
references. If the data includes entity references, the
<see langword="Load"/> method resolves and expands any entity references. 
However, if you are using the <see langword="Load"/> overload that takes
an <see cref="System.Xml.XmlReader"/> as an argument, you must specify an
<see langword="XmlReader"/> that can resolve entities.</para>
		</overload>
		<summary>
			<para>Loads the <see langword="XmlDataDocument"/> using the specified URL.</para>
		</summary>
		<param name="filename">URL for the file containing the XML document to load.</param>
		<remarks>
			<para><see langword="XmlDataDocument"/> does not support creating entity
   references. If the data includes entity references, the
<see langword="Load"/> method resolves and 
   expands any entity references.</para>
			<note type="note">
   In order to view the XML data relationally,
   you must first specify a schema to use for data mapping. This can be done either
   by calling the <see cref="System.Data.DataSet.ReadXmlSchema"/> method, or by creating the tables and
   columns within the <see langword="DataSet"/> manually. This step must be done before
   calling <see langword="Load"/>
   .
</note>
		</remarks>
	</doc>
	<doc for="XmlDataDocument.Load">
		<summary>
			<para>Loads the <see langword="XmlDataDocument"/> from the specified <see cref="System.Xml.XmlReader"/> .</para>
		</summary>
		<param name="reader"><see langword="XmlReader"/> containing the XML document to load.</param>
		<exception cref="NotSupportedException">The XML being loaded contains entity references and the reader cannot resolve entities.</exception>
		<remarks>
			<para><see langword="XmlDataDocument"/> does not support
   creating entity references. If the data source contains entity references,
   you must create an <see cref="System.Xml.XmlValidatingReader"/> with the <see cref="System.Xml.XmlValidatingReader.EntityHandling"/> property set to EntityHandling.ExpandEntities (this
   is the default behavior), and pass the <see langword="XmlValidatingReader"/> to
   the <see langword="Load"/> method. If you do not use an
<see langword="XmlValidatingReader"/>, the <see langword="Load"/> method throws an exception.</para>
			<para>The <see langword="Load"/> method
always preserves significant white space. The <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> property
determines whether or not white space is preserved. The default is <see langword="false"/> , white space is not preserved.</para>
			<para>If the reader is in the initial state, that is, ReadState=ReadState.Initial,
<see langword="Load"/> consumes 
   the entire contents of the reader and builds the DOM from what it finds.</para>
			<para> If the reader is already positioned on
   some node at depth "n", then this method loads that node and all subsequent siblings up to the
   end tag that closes depth "n". This has the following results. </para>
			<para>If the current node and its following siblings looks similar to the following: </para>
			<para><c>&lt;!--comment--&gt;&lt;element1&gt;one&lt;/element1&gt;&lt;element2&gt;two&lt;/element2&gt;</c>
			</para>
			<para><see langword="Load"/> throws an exception because a document cannot have two root
level elements. If the current node and its following siblings looks similar to
the following: </para>
			<para><c>&lt;!--comment--&gt;&lt;?process
   instruction?&gt;&lt;!--comment--&gt;&lt;/endtag&gt;</c>
			</para>
			<para><see langword="Load"/> will succeed, however you will have an incomplete DOM tree,
because there is no root level element. You have to add a root level element
before you save the document; otherwise, the <see cref="System.Xml.XmlDocument.Save"/> method throws an exception.</para>
			<para>If the reader is positioned on a leaf node that is invalid for the root level
   of a document, for example a white space or attribute node, the reader
   continues to read until it is positioned on a node that can be used for the
   root. The document begins loading at this point.</para>
		</remarks>
		<example>
			<para>The following example modifies the price of a book using
      the <see langword="DataSet"/> methods. </para>
			<codelink SampleID="XmlDataDocument.Load" SnippetID="1"/>
			<para>The example uses the following two input files. </para>
			<para><see langword="2books.xml"/>
			</para>
			<codelink SampleID="XmlDataDocument.Load" SnippetID="2"/>
			<para><see langword="store.xsd"/>
			</para>
			<codelink SampleID="XmlDataDocument.Load" SnippetID="3"/>
		</example>
	</doc>
	<doc for="XmlDataDocument.GetElementById">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlElement"/> with the specified ID.</para>
			<para>This method is not supported by the <see langword="XmlDataDocument"/>
class. Calling this method throws an exception.</para>
		</summary>
		<param name="elemId">The attribute ID to match.</param>
		<exception cref="NotSupportedException">Calling this method.</exception>
		<remarks>
   This method is not supported by the
<see langword="XmlDataDocument"/> class.
</remarks>
	</doc>
</docs>
