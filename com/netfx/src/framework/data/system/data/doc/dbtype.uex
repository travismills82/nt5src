<docs>
	<doc for="DbType.Boolean">
		<summary>
			<para>A simple type representing Boolean values of <see langword="true"/> 
or <see langword="false"/> .</para>
		</summary>
	</doc><doc for="DbType.DateTime">
		<summary>
			<para>A type representing a date and time value.</para>
		</summary>
	</doc><doc for="DbType.Decimal">
		<summary>
			<para>A simple type representing values ranging from 1.0 x 
      10<superscript term="-28"/> to approximately 7.9 x 10 <superscript term="28"/> with 28-29 significant digits.</para>
		</summary>
	</doc><doc for="DbType.Double">
		<summary>
			<para>A floating point type representing values ranging from 
      approximately 5.0 x 10<superscript term="-324"/> to 1.7 x 10 <superscript term="308"/> with a
      precision of 15-16 digits.</para>
		</summary>
	</doc><doc for="DbType.Int16">
		<summary>
			<para>An integral type representing signed 16-bit integers 
      with values between -32768 and 32767.</para>
		</summary>
	</doc><doc for="DbType.Int32">
		<summary>
			<para>An integral type representing signed 32-bit integers 
      with values between -2147483648 and 2147483647.</para>
		</summary>
	</doc><doc for="DbType.Int64">
		<summary>
			<para>An integral type representing signed 64-bit integers 
      with values between -9223372036854775808 and 9223372036854775807.</para>
		</summary>
	</doc><doc for="DbType.SByte">
		<summary>
			<para>An integral type representing signed 8-bit integers with 
      values between -128 and 127.</para>
		</summary>
	</doc><doc for="DbType.Single">
		<summary>
			<para>A floating point type representing values ranging from 
      approximately 1.5 x 10<superscript term="-45"/> to 3.4 x 10 <superscript term="38"/> with a precision
      of 7 digits.</para>
		</summary>
	</doc><doc for="DbType.UInt16">
		<summary>
			<para>An integral type representing unsigned 16-bit integers 
      with values between 0 and 65535.</para>
		</summary>
	</doc><doc for="DbType.UInt32">
		<summary>
			<para>An integral type representing unsigned 32-bit integers 
      with values between 0 and 4294967295.</para>
		</summary>
	</doc><doc for="DbType.UInt64">
		<summary>
			<para>An integral type representing unsigned 64-bit integers 
      with values between 0 and 18446744073709551615.</para>
		</summary>
	</doc><doc for="DbType.AnsiString">
		<summary>
			<para>A variable-length stream of non-Unicode characters 
      ranging between 1 and 8,000 characters.</para>
		</summary>
	</doc><doc for="DbType.Currency">
		<summary>
			<para>A currency value ranging from -2<superscript term="63"/> (or 
   -922,337,203,685,477.5808) to 2<superscript term="63"/> -1 (or +922,337,203,685,477.5807)
   with an accuracy to a ten-thousandth of a currency unit.</para>
		</summary>
	</doc><doc for="DbType.Date">
		<summary>
			<para>Date and time data ranging in value from January 1, 1753 
      to December 31, 9999 to an accuracy of 3.33 milliseconds.</para>
		</summary>
	</doc><doc for="DbType.Guid">
		<summary>
			<para>A globally unique identifier (or GUID).</para>
		</summary>
	</doc><doc for="DbType.Time">
		<summary>
			<para>Date and time data ranging in value from January 1, 1753 
      to December 31, 9999 to an accuracy of 3.33 milliseconds.</para>
		</summary>
	</doc><doc for="DbType.VarNumeric // 21">
		<summary>
			<para>A variable-length numeric value (<see cref="System.Data.OleDb.OleDbParameter"/> only). This maps to <see cref="System.Decimal"/> . 
<see cref="System.Data.DbType.VarNumeric"/> is not supported by the SQL Server .NET 
   Provider.</para>
		</summary>
	</doc><doc for="DbType.String">
		<summary>
			<para> A type representing Unicode character strings.</para>
		</summary>
	</doc><doc for="DbType.Byte">
		<summary>
			<para>An 8-bit unsigned integer ranging in value from 0 to 255.</para>
		</summary>
	</doc><doc for="DbType.Object">
		<summary>
			<para>A general type representing any reference or value type 
      not explicitly represented by another <see langword="DbType"/> value.</para>
		</summary>
	</doc><doc for="DbType.AnsiStringFixedLength">
		<summary>
			<para> A fixed-length stream of non-Unicode characters.</para>
		</summary>
	</doc><doc for="DbType.StringFixedLength // 23">
		<summary>
			<para> A fixed-length stream of Unicode characters.</para>
		</summary>
	</doc><doc for="DbType.Binary">
		<summary>
			<para>A variable-length stream of binary data ranging between 1 and 8,000
      bytes.</para>
			<note type="note">
      ADO.NET cannot correctly infer the type if
      the byte array is larger than 8,000 bytes. Explicitly specify the <see cref="System.Data.DbType"/>
      
      when working with
      byte arrays larger than 8,000 bytes.
      
      </note>
		</summary>
	</doc><doc for="DbType.VarNumeric">
		<summary>
			<para>A variable-length numeric value.</para>
		</summary>
	</doc>
	<doc for="DbType">
		<summary>
			<para>Specifies the data type of a field, a property, or a
   <see langword="Parameter"/>
   object of a .NET Framework data provider.</para>
		</summary>
		<remarks>
			<para>The type of a parameter is specific to the .NET Framework data provider. Specifying the
      type converts the value of the <see langword="Parameter"/> to the data provider
      Type before passing the value to the data source. If the type is not specified, ADO.NET infers the data provider Type of the <see langword="Parameter"/>
      from the <see langword="Value"/> property of the
   <see langword="Parameter"/> object.</para>
			<para>You can also generically specify the type of a <see langword="Parameter"/> by setting <see langword="DbType"/> property of a <see langword="Parameter"/> object. For more
   information, see <see topic="cpconusingparameterswithdataadapters"/>.</para>
		</remarks>
	</doc>
</docs>
