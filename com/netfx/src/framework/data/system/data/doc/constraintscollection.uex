<docs>
  <doc for="ConstraintCollection">
    <summary>
      <para>Represents a collection of constraints for a <see cref="System.Data.DataTable" /> 
 .</para>
    </summary>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection" /> is accessed through the 
 <see cref="System.Data.DataTable.Constraints" qualify="true" /> property.</para>
      <para>The <see cref="System.Data.ConstraintCollection" /> can contain both <see cref="System.Data.UniqueConstraint" /> 
 and <see cref="System.Data.ForeignKeyConstraint" /> objects for the <see cref="System.Data.DataTable" />. A <see cref="System.Data.UniqueConstraint" />
 object ensures that data in a given column is always unique to preserve the data
 integrity. The <see cref="System.Data.ForeignKeyConstraint" /> determines what will happen in related tables when
 data in the <see cref="System.Data.DataTable" /> is either updated or deleted. For example, if a row
 is deleted, the <see cref="System.Data.ForeignKeyConstraint" /> will determine whether the related rows are also
 deleted (a cascade), or some other course of action.</para>
      <note type="note">
    When you add a <see cref="System.Data.DataRelation" />,
    which creates a relationship between two tables, to a <see cref="System.Data.DataSet" />, both a
 <see cref="System.Data.ForeignKeyConstraint" /> and a <see cref="System.Data.UniqueConstraint" /> are created automatically. The 
 <see cref="System.Data.UniqueConstraint" /> is applied to the primary key column in the parent 
 <see cref="System.Data.DataTable" />, 
    and the constraint is added to that table's <see cref="System.Data.ConstraintCollection" />. The <see cref="System.Data.ForeignKeyConstraint" /> is applied to the primary key
    column and the foreign key column, and the constraint is added to the child
    table's <see cref="System.Data.ConstraintCollection" />.
 </note>
      <para>The <see cref="System.Data.ConstraintCollection" /> uses standard collection methods 
 such as <see cref="System.Data.ConstraintCollection.Add" />, <see cref="System.Data.ConstraintCollection.Clear" />, and <see cref="System.Data.ConstraintCollection.Remove" />. In addition, the <see cref="System.Data.ConstraintCollection.Contains" /> method can be used to check for the existence of a
 particular constraint in the collection.</para>
      <para>A <see cref="System.Data.UniqueConstraint" /> is created when a <see cref="System.Data.DataColumn" /> with 
 its <see cref="System.Data.DataColumn.Unique" /> property set to <see langword="true " /> is added to a <see cref="System.Data.DataTable" /> object's
 <see cref="System.Data.DataColumnCollection" />.</para>
      <para>A <see cref="System.Data.ForeignKeyConstraint" /> is created when a <see cref="System.Data.DataRelation" /> is 
 added to a <see cref="System.Data.DataSet" /> object's <see cref="System.Data.DataRelationCollection" />.</para>
    </remarks>
    <example>
      <para>The first example creates a <see cref="System.Data.DataTable" />, and 
    adds a <see cref="System.Data.DataColumn" /> (with its <see cref="System.Data.DataColumn.Unique" /> property set to <see langword="true" />) to the <see cref="System.Data.DataColumnCollection" />. The second example creates a <see cref="System.Data.DataSet" />, two
 <see cref="System.Data.DataTable" /> 
 objects, four columns, and a <see cref="System.Data.DataRelation" />. The count of constraints is then
 printed to show that a <see cref="System.Data.ForeignKeyConstraint" /> and a <see cref="System.Data.UniqueConstraint" />
 are created when a <see cref="System.Data.DataRelation" /> is added to the <see cref="System.Data.DataSet" /> object's <see cref="System.Data.DataRelationCollection()" />.</para>
      <codelink SampleID="Classic WebData ConstraintCollection Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ForeignKeyConstraint" />
    <seealso cref="System.Data.UniqueConstraint" />
    <seealso cref="System.Data.DataRelation" />
  </doc>
  <doc for="ConstraintCollection.ConstraintCollection">
    <summary>
 ConstraintCollection constructor.  Used only by DataTable.
 </summary>
    <param name="table">
 The table that will parent this ConstraintCollection.
 </param>
  </doc>
  <doc for="ConstraintCollection.List">
    <summary>
      <para>Gets the list of objects contained by the collection.</para>
    </summary>
    <value>
      <para>An <see cref="T:System.Collections.ArrayList" /> containing the collection members.</para>
    </value>
  </doc>
  <doc for="ConstraintCollection.this">
    <overload>
      <para>Gets the specified <see cref="System.Data.Constraint" />.</para>
    </overload>
    <summary>
      <para>Gets the <see cref="System.Data.Constraint" /> 
 from the collection at the specified index.</para>
    </summary>
    <param name="index">The index of the constraint to return.</param>
    <value>
      <para>The <see cref="System.Data.Constraint" /> at the specified index.</para>
    </value>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a constraint at this index.</exception>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection.Contains" /> method can be used to test for the 
    existence of a specific constraint.</para>
    </remarks>
    <example>
      <para>The following example gets each <see cref="System.Data.Constraint" /> from the <see cref="System.Data.ConstraintCollection" />.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.this Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ConstraintCollection.Contains" />
  </doc>
  <doc for="ConstraintCollection.Table">
    <summary>
 The DataTable with which this ConstraintCollection is associated
 </summary>
  </doc>
  <doc for="ConstraintCollection.this1">
    <summary>
      <para>Gets the <see cref="System.Data.Constraint" /> from the collection with the specified name.</para>
    </summary>
    <param name="name">The <see cref="System.Data.Constraint.ConstraintName" /> of the constraint to return.</param>
    <value>
      <para>The <see cref="System.Data.Constraint" /> with the specified name.</para>
    </value>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a constraint at this index.</exception>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection.Contains" /> method can be used to test 
    for the existence of a specific constraint.</para>
    </remarks>
    <example>
      <para>The following example gets the named <see cref="System.Data.Constraint" />.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.this1 Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="ConstraintCollection.Add">
    <overload>
      <para>Adds a constraint to the <see cref="System.Data.ConstraintCollection" />.</para>
    </overload>
    <summary>
      <para> 
       Adds
       the specified constraint to the collection.</para>
    </summary>
    <param name="constraint">The <see cref="System.Data.Constraint" /> to add.</param>
    <exception cref="System.ArgumentNullException">The <paramref name="constraint " />argument is null.</exception>
    <exception cref="System.ArgumentException"> The constraint already belongs to this collection, or belongs to another collection. </exception>
    <exception cref="System.Data.DuplicateNameException">The collection already has a constraint with the same name. The comparison is not case-sensitive. </exception>
    <remarks>
      <para>If the collection is successfully changed by adding or removing constraints, 
       the <see cref="System.Data.ConstraintCollection.CollectionChanged" /> event occurs.</para>
    </remarks>
    <example>
      <para>The following example adds a <see cref="System.Data.UniqueConstraint" /> 
 to the <see cref="System.Data.ConstraintCollection" /> of a <see cref="System.Data.DataTable" />.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.Add Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.UniqueConstraint" />
    <seealso cref="System.Data.ForeignKeyConstraint" />
  </doc>
  <doc for="ConstraintCollection.Add1">
    <summary>
      <para>Constructs a new <see cref="System.Data.UniqueConstraint" /> using the 
    specified array of <see cref="System.Data.DataColumn" />
    objects, and adds it to the collection.</para>
    </summary>
    <param name="name">The name of the <see cref="System.Data.UniqueConstraint" />.</param>
    <param name="columns">An array of <see cref="System.Data.DataColumn" /> objects that are affected by the constraint.</param>
    <param name="primaryKey">Indicates whether the columns are primary key columns. <see langword="true" /> if the columns are primary key columns; otherwise, <see langword="false" />.</param>
    <exception cref="System.ArgumentException">
      <para>The constraint already belongs to this collection.</para>
      <para>-Or-</para>
      <para>The constraint belongs to another collection.</para>
    </exception>
    <exception cref="System.Data.DuplicateNameException">The collection already has a constraint with the same name. The comparison is not case-sensitive. </exception>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection.CollectionChanged" /> event occurs if the constraint is added 
    succesfully.</para>
    </remarks>
    <example>
      <para>The following example creates an array of <see cref="System.Data.DataColumn" /> objects 
    that are used to create a new <see cref="System.Data.UniqueConstraint" /> in a given <see cref="System.Data.DataTable" />.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.Add1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.UniqueConstraint" />
  </doc>
  <doc for="ConstraintCollection.Add2">
    <summary>
      <para>Constructs a new <see cref="System.Data.UniqueConstraint" />, using the 
    specified <see cref="System.Data.DataColumn" />, and adds it to the collection.</para>
    </summary>
    <param name="name">The name of the <see cref="System.Data.UniqueConstraint" />.</param>
    <param name="column">The <see cref="System.Data.DataColumn" /> affected by the constraint.</param>
    <param name="primaryKey">Indicates whether the column is a primary key column. <see langword="true" /> if the column is a primary key column; otherwise, <see langword="false" />.</param>
    <exception cref="System.ArgumentException">
      <para>The constraint already belongs to this collection.</para>
      <para>-Or-</para>
      <para>The constraint belongs to another collection.</para>
    </exception>
    <exception cref="System.Data.DuplicateNameException">The collection already has a constraint with the same name. The comparison is not case-sensitive. </exception>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection.CollectionChanged" /> event occurs if the 
    constraint is added successfully.</para>
    </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.ConstraintCollection.Add" /> method to create and add a new <see cref="System.Data.UniqueConstraint" /> 
 to a <see cref="System.Data.ConstraintCollection" /> .</para>
      <codelink SampleID="Classic WebData ConstraintCollection.Add2 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.UniqueConstraint" />
  </doc>
  <doc for="ConstraintCollection.Add3">
    <summary>
      <para> 
       Constructs a new <see cref="System.Data.ForeignKeyConstraint" />,
       with the specified parent and child columns, and adds the constraint to the collection.</para>
    </summary>
    <param name="name">The name of the <see cref="System.Data.UniqueConstraint" />.</param>
    <param name="primaryKeyColumn">The primary key <see cref="System.Data.DataColumn" />. </param>
    <param name="foreignKeyColumn">The foreign key <see cref="System.Data.DataColumn" />.</param>
    <remarks>
      <para>A <see cref="System.Data.ForeignKeyConstraint" /> and <see cref="System.Data.UniqueConstraint" /> 
 are both created and added automatically when a <see cref="System.Data.DataRelation" /> is
 added to a <see cref="System.Data.DataSet" /> object's <see cref="System.Data.DataRelationCollection" />. The <see cref="System.Data.ForeignKeyConstraint" /> (which gets the same name as the <see cref="System.Data.DataRelation" />) is
 added to the child table's <see cref="System.Data.ConstraintCollection" />, and the <see cref="System.Data.UniqueConstraint" />
 is added to the parent table's <see cref="System.Data.ConstraintCollection" />.</para>
      <para>In this case, if you add a second <see cref="System.Data.ForeignKeyConstraint" /> using this <see cref="System.Data.ConstraintCollection.Add" /> method, an exception will occur because an 
 identical <see cref="System.Data.ForeignKeyConstraint" /> is already in the
 collection. To avoid this, use the <see cref="System.Data.ForeignKeyConstraint" /> constructor to create the <see cref="System.Data.ForeignKeyConstraint" /> and test it against existing collection members
 with the <see cref="System.Data.ForeignKeyConstraint.Equals" />method.</para>
    </remarks>
    <example>
      <para>The following example adds a new <see cref="System.Data.ForeignKeyConstraint" /> to the <see cref="System.Data.ConstraintCollection" /> of a <see cref="System.Data.DataTable" /> . </para>
      <codelink SampleID="Classic WebData ConstraintCollection.Add3 Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="ConstraintCollection.Add4">
    <summary>
      <para>Constructs a new <see cref="System.Data.ForeignKeyConstraint" />, with the specified parent columns and 
    child columns, and adds the constraint to the collection.</para>
    </summary>
    <param name="name">The name of the <see cref="System.Data.UniqueConstraint" />.</param>
    <param name="primaryKeyColumns">An array of <see cref="System.Data.DataColumn" /> objects that are the primary key columns. </param>
    <param name="foreignKeyColumns">An array of <see cref="System.Data.DataColumn" /> objects that are the foreign key columns.</param>
    <remarks>
      <para>A <see cref="System.Data.ForeignKeyConstraint" /> and a <see cref="System.Data.UniqueConstraint" /> are created automatically when you add a <see cref="System.Data.DataRelation" /> to a 
 <see cref="System.Data.DataSet" />. 
    In that case, adding a second <see cref="System.Data.ForeignKeyConstraint" /> on the same columns will
    result in an exception. To avoid this, use the <see cref="System.Data.ForeignKeyConstraint" /> constructor to create the <see cref="System.Data.ForeignKeyConstraint" /> and test it against existing collection members
    with the <see cref="System.Data.ForeignKeyConstraint.Equals" />
    method.</para>
    </remarks>
    <example>
      <codelink SampleID="Classic WebData ConstraintCollection.Add4 Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="ConstraintCollection.CollectionChanged">
    <summary>
      <para>Occurs when the <see cref="System.Data.ConstraintCollection" /> is changed through additions or 
    removals.</para>
    </summary>
    <remarks>
      <para>For more information about handling events, see <see topic="cpconEventsOverview" />.</para>
    </remarks>
    <example>
      <para>The folllowing example adds an event handler for the 
    <see cref="System.Data.ConstraintCollection.CollectionChanged" /> 
    event.</para>
    </example>
  </doc>
  <doc for="ConstraintCollection.ArrayAdd">
    <summary>
  Adds the constraint to the constraints array.
 </summary>
    <param name="constraint">
 the constraint to add.
 </param>
  </doc>
  <doc for="ConstraintCollection.ArrayRemoveAt">
    <summary>
  Removes the constraint at the given index from the constraints array.
 </summary>
    <param name="index">
 the index of the constraint to remove.
 </param>
  </doc>
  <doc for="ConstraintCollection.AssignName">
    <summary>
 Creates a new default name.
 </summary>
    <returns>
 the new default name.
 </returns>
  </doc>
  <doc for="ConstraintCollection.BaseAdd">
    <summary>
 Does verification on the constraint and it's name.
 An ArgumentNullException is thrown if this constraint is null.  An ArgumentException is thrown if this constraint
 already belongs to this collection, belongs to another collection.
 A DuplicateNameException is thrown if this collection already has a constraint with the same
 name (case insensitive).
 </summary>
    <param name="constraint">
 The constraint to check.
 </param>
  </doc>
  <doc for="ConstraintCollection.BaseGroupSwitch">
    <summary>
 BaseGroupSwitch will intelligently remove and add tables from the collection.
 </summary>
    <param name="oldArray">
    </param>
    <param name="oldLength">
    </param>
    <param name="newArray">
    </param>
    <param name="newLength">
    </param>
  </doc>
  <doc for="ConstraintCollection.BaseRemove">
    <summary>
 Does verification on the constraint and it's name.
 An ArgumentNullException is thrown if this constraint is null.  An ArgumentException is thrown
 if this constraint doesn't belong to this collection or if this constraint is part of a relationship.
 </summary>
  </doc>
  <doc for="ConstraintCollection.CanRemove">
    <summary>
      <para>Indicates if a <see cref="System.Data.Constraint" /> can be removed.</para>
    </summary>
    <param name="constraint">The <see cref="System.Data.Constraint" /> to be tested for removal from the collection.</param>
    <returns>
      <para>Generates an exception if the <see cref="System.Data.Constraint" /> can't 
    be removed from collection. Otherwise, <see langword="true " />if the <see cref="System.Data.Constraint" /> can be removed.</para>
    </returns>
    <exception cref="System.Exception">The <see cref="System.Data.Constraint" /> can't be removed.</exception>
    <remarks>
      <para>When a <see cref="System.Data.DataRelation" /> is added to a <see cref="System.Data.DataSet" />, a <see cref="System.Data.ForeignKeyConstraint" /> and <see cref="System.Data.UniqueConstraint" /> are added automatically to the 
    parent table and the child table. The <see cref="System.Data.UniqueConstraint" /> is applied to the parent table's
    primary key column, and the <see cref="System.Data.ForeignKeyConstraint" /> is applied to the child table's
    foreign key column. In that case, attempting to remove the <see cref="System.Data.UniqueConstraint" />
    will cause an exception to be thrown because the <see cref="System.Data.ForeignKeyConstraint" /> must be removed first. To avoid this, use the
 <see cref="System.Data.ConstraintCollection.CanRemove" /> to determine if a <see cref="System.Data.UniqueConstraint" /> 
 can be removed.</para>
    </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.ConstraintCollection.CanRemove" /> to determine if a <see cref="System.Data.Constraint" /> can be removed, before attempting 
    to remove it.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.CanRemove Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="ConstraintCollection.Clear">
    <summary>
      <para>Clears the collection of any <see cref="System.Data.Constraint" /> 
 objects.</para>
    </summary>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection.CollectionChanged" /> occurs if this action is succesful.</para>
    </remarks>
  </doc>
  <doc for="ConstraintCollection.Contains">
    <summary>
      <para>Indicates whether the <see cref="System.Data.Constraint" />, specified by name, exists in the collection.</para>
    </summary>
    <param name="name">The <see cref="System.Data.Constraint.ConstraintName" /> of the constraint.</param>
    <returns>
      <para>
        <see langword="true " />if the collection contains the 
    specified constraint; otherwise, <see langword="false" /> .</para>
    </returns>
    <remarks>
      <para>Use the <see cref="System.Data.ConstraintCollection.Contains" /> method to determine if the 
    specified <see cref="System.Data.Constraint" /> exists before attempting to remove it from the
    collection. You can also use the <see cref="System.Data.ConstraintCollection.CanRemove" /> method
    to determine if a <see cref="System.Data.Constraint" /> can be removed.</para>
    </remarks>
    <seealso cref="System.Data.ConstraintCollection.Remove" />
  </doc>
  <doc for="ConstraintCollection.FindConstraint">
    <summary>
 Returns a matching constriant object.
 </summary>
    <param name="constraint">
 Constraint to find.
 </param>
    <returns>
 Constraint that matches argument or null.
 </returns>
  </doc>
  <doc for="ConstraintCollection.FindKeyConstraint">
    <summary>
 Returns a matching constriant object.
 </summary>
    <param name="columns">
    </param>
    <returns>
 Constraint that matches argument or null.
 </returns>
  </doc>
  <doc for="ConstraintCollection.FindKeyConstraint1">
    <summary>
 Returns a matching constriant object.
 </summary>
    <param name="column">
    </param>
    <returns>
 Constraint that matches argument or null.
 </returns>
  </doc>
  <doc for="ConstraintCollection.FindForeignKeyConstraint">
    <summary>
 Returns a matching constriant object.
 </summary>
    <param name="parentColumns">
    </param>
    <param name="childColumns">
    </param>
    <returns>
 Constraint that matches argument or null.
 </returns>
  </doc>
  <doc for="ConstraintCollection.IndexOf">
    <overload>
      <para>Gets the index of the specified <see cref="System.Data.Constraint" />.</para>
    </overload>
    <summary>
      <para>Gets the index of the <see cref="System.Data.Constraint" />, specified by name.</para>
    </summary>
    <param name="constraintName">The name of the <see cref="System.Data.Constraint" /> .</param>
    <returns>
      <para>The index of the <see cref="System.Data.Constraint" /> if it is 
    in the collection; otherwise, -1.</para>
    </returns>
    <remarks>
      <para>Use the <see cref="System.Data.ConstraintCollection.IndexOf" /> method to return an index to be used with either the 
 <see cref="System.Data.ConstraintCollection.Contains" /> or <see cref="System.Data.ConstraintCollection.Remove" /> method.</para>
    </remarks>
    <example>
      <para>The following method uses the <see cref="System.Data.ConstraintCollection.IndexOf" /> method to return the index of a <see cref="System.Data.Constraint" />. The 
    index is passed to the <see cref="System.Data.ConstraintCollection.Contains" /> method to determine if the
    collection contains the constraint, before removing it.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.IndexOf Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ConstraintCollection.Contains" />
    <seealso cref="System.Data.ConstraintCollection.Remove" />
    <seealso cref="System.Data.ConstraintCollection.CanRemove" />
  </doc>
  <doc for="ConstraintCollection.IndexOf1">
    <summary>
      <para>Gets the index of the specified <see cref="System.Data.Constraint" /> .</para>
    </summary>
    <param name="constraint">The <see cref="System.Data.Constraint" /> to search for.</param>
    <returns>
      <para>The index of the <see cref="System.Data.Constraint" /> if it is in the collection; otherwise, -1.</para>
    </returns>
    <remarks>
      <para>Use the <see cref="System.Data.ConstraintCollection.IndexOf" /> method to return an index to 
    be used with either the <see cref="System.Data.ConstraintCollection.Contains" /> or <see cref="System.Data.ConstraintCollection.Remove" /> method.</para>
    </remarks>
    <example>
      <para>The following method uses the <see cref="System.Data.ConstraintCollection.IndexOf" /> method to 
    return the index of a <see cref="System.Data.Constraint" />. The index is passed to the <see cref="System.Data.ConstraintCollection.Contains" />
    method, before it is removed, to
    determine if the collection contains the constraint.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.IndexOf1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ConstraintCollection.Contains" />
    <seealso cref="System.Data.ConstraintCollection.Remove" />
    <seealso cref="System.Data.ConstraintCollection.CanRemove" />
  </doc>
  <doc for="ConstraintCollection.MakeName">
    <summary>
 Makes a default name with the given index.  e.g. Constraint1, Constraint2, ... Constrainti
 </summary>
    <param name="index">
 The index to construct a default name for.
 </param>
    <returns>
 the proposed default name.
 </returns>
  </doc>
  <doc for="ConstraintCollection.NamesEqual">
    <summary>
 Compares the two names with a case insensitive comparison.
 </summary>
    <param name="s1">
 first string
 </param>
    <param name="s2">
 second string
 </param>
    <returns>
 whether they are equal (case insensitively)
 </returns>
  </doc>
  <doc for="ConstraintCollection.OnCollectionChanged">
    <summary>
      <para>Raises the <see cref="System.Data.ConstraintCollection.CollectionChanged" /> event.</para>
    </summary>
    <param name="ccevent">A <see cref="System.ComponentModel.CollectionChangeEventArgs" /> that contains the event data.</param>
    <remarks>
      <para>Raising an event invokes the event handler through a delegate. For 
       more information, see <see topic="cpconProvidingEventFunctionality" />. </para>
      <note type="inheritinfo">
       When overriding
    <see cref="System.Data.ConstraintCollection.OnCollectionChanged" /> in a derived class, be sure 
       to call the base class's <see cref="System.Data.ConstraintCollection.OnCollectionChanged" /> method.
    </note>
    </remarks>
  </doc>
  <doc for="ConstraintCollection.RegisterName">
    <summary>
 Registers this name as being used in the collection.  Will throw an ArgumentException
 if the name is already being used.  Called by Add, All property, and Constraint.ConstraintName property.
 if the name is equivalent to the next default name to hand out, we increment our defaultNameIndex.
 </summary>
    <param name="name">
 name to register as being used.
 </param>
  </doc>
  <doc for="ConstraintCollection.Remove">
    <overload>
      <para>Removes a <see cref="System.Data.Constraint" /> from the <see cref="System.Data.ConstraintCollection" />.</para>
    </overload>
    <summary>
      <para> 
       Removes the specified <see cref="System.Data.Constraint" />
       from the collection.</para>
    </summary>
    <param name="constraint">The <see cref="System.Data.Constraint" /> to remove.</param>
    <exception cref="System.ArgumentNullException">The <paramref name="constraint " />argument is <see langword="null" />.</exception>
    <exception cref="System.ArgumentException">The constraint doesn't belong to the collection.</exception>
    <remarks>
      <para>Use the <see cref="System.Data.ConstraintCollection.Contains" /> method to determine if the collection contains the 
    target <see cref="System.Data.Constraint" />
    .</para>
      <para>Use the <see cref="System.Data.ConstraintCollection.CanRemove" /> method to determine if a <see cref="System.Data.Constraint" /> can be 
 removed.</para>
      <para>The <see cref="System.Data.ConstraintCollection.CollectionChanged" /> 
 event occurs if the removal succeeds.</para>
    </remarks>
    <example>
      <codelink SampleID="Classic WebData ConstraintCollection.Remove Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ConstraintCollection.CanRemove" />
    <seealso cref="System.Data.ConstraintCollection.Contains" />
    <seealso cref="System.Data.ConstraintCollection.IndexOf" />
  </doc>
  <doc for="ConstraintCollection.Remove1">
    <summary>
      <para>Removes the constraint, specified by name, from the collection.</para>
    </summary>
    <param name="name">The name of the <see cref="System.Data.Constraint" /> to remove.</param>
    <remarks>
      <para>Use the <see cref="System.Data.ConstraintCollection.Contains" /> method to determine if the 
    collection contains the target <see cref="System.Data.Constraint" /> .</para>
      <para>Use the <see cref="System.Data.ConstraintCollection.CanRemove" /> method to determine if a 
 <see cref="System.Data.Constraint" /> 
 can be removed.</para>
      <para>The <see cref="System.Data.ConstraintCollection.CollectionChanged" /> event occurs if the removal 
 succeeds.</para>
    </remarks>
    <example>
      <para>The following example removes a <see cref="System.Data.Constraint" /> from a <see cref="System.Data.ConstraintCollection" /> after testing for its presence with the <see cref="System.Data.ConstraintCollection.Contains" /> method, and whether it can be removed with the 
 <see cref="System.Data.ConstraintCollection.CanRemove" /> method.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.Remove1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ConstraintCollection.CanRemove" />
    <seealso cref="System.Data.ConstraintCollection.Contains" />
    <seealso cref="System.Data.ConstraintCollection.IndexOf" />
  </doc>
  <doc for="ConstraintCollection.UnregisterName">
    <summary>
 Unregisters this name as no longer being used in the collection.  Called by Remove, All property, and
 Constraint.ConstraintName property.  If the name is equivalent to the last proposed default namem, we walk backwards
 to find the next proper default name to hang out.
 </summary>
    <param name="name">
 name to unregister as no longer used.
 </param>
  </doc>
  <doc for="ConstraintCollection.Dump">
    <internalonly />
    <summary>
    </summary>
  </doc>
  <doc for="ConstraintCollection.RemoveAt">
    <summary>
      <para>Removes the constraint at the specified index from the
      collection.</para>
    </summary>
    <param name="index">The index of the <see cref="System.Data.Constraint" /> to remove.</param>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a constraint at this index.</exception>
    <remarks>
      <para>The <see cref="System.Data.ConstraintCollection.IndexOf" /> method returns the index of a given <see cref="System.Data.Constraint" />.</para>
      <para>Use the <see cref="System.Data.ConstraintCollection.Contains" /> method to determine if the
collection contains the target <see cref="System.Data.Constraint" /> .</para>
      <para>Use the <see cref="System.Data.ConstraintCollection.CanRemove" /> method to determine if a
<see cref="System.Data.Constraint" />
can be removed.</para>
The <see cref="System.Data.ConstraintCollection.CollectionChanged" /> event occurs if the removal
succeeds.
</remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.ConstraintCollection.IndexOf" /> method in conjunction with the <see cref="System.Data.ConstraintCollection.RemoveAt" />
method to remove a constraint from the <see cref="System.Data.ConstraintCollection" />.</para>
      <codelink SampleID="Classic WebData ConstraintCollection.RemoveAt Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.ConstraintCollection.CanRemove" />
    <seealso cref="System.Data.ConstraintCollection.Contains" />
    <seealso cref="System.Data.ConstraintCollection.IndexOf" />
  </doc>
</docs>