<docs>
	<doc for="IDbConnection.IntegratedSecurity">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="IDbConnection.Password">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="IDbConnection.UserId">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="IDbConnection.ConnectionTimeout">
		<summary>
			<para>Gets the time to wait while trying to establish a connection before terminating the attempt and generating an
      error.</para>
		</summary>
		<value>
			<para>The time (in seconds) to wait for a connection to open.
      The default value is 15 seconds.</para>
		</value>
		<remarks>
			<para>A value of 0 indicates no limit to the wait time, rather than no wait time, and should be avoided
      in a <see cref="System.Data.IDbConnection.ConnectionString"/> because it would cause the connection attempt to wait indefinitely.</para>
		</remarks>
	</doc><doc for="IDbConnection.ConnectionString">
		<summary>
			<para> Gets or sets the string used to open a database.</para>
		</summary>
		<value>
			<para>A string containing connection settings.</para>
		</value>
		<remarks>
			<para>The <see langword="ConnectionString"/> property can be set only while the connection is
   closed.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived
      class, <see cref="System.Data.OleDb.OleDbConnection"/>, sets its <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>, and displays its <see cref="System.Data.OleDb.OleDbConnection.State"/>.
      .</para>
			<codelink SampleID="Classic WebData IDbConnection.ConnectionString Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDbConnection.ChangeDatabase">
		<summary>
			<para>Changes the current database for an open 
   <see langword="Connection"/> object.</para>
		</summary>
		<param name="databaseName">The name of the database to use in place of the current database.</param>
	</doc><doc for="IDbConnection.Close">
		<summary>
			<para> Closes the
      connection to the database.
      </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.IDbConnection.Close"/> method rolls back any
   pending transactions. It then releases the connection to the connection pool, or
   closes the connection if connection pooling is disabled.</para>
			<para>An application can call <see langword="Close"/> more than one time without generating an
exception.</para>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbConnection.Open"/>
	</doc><doc for="IDbConnection.Open">
		<summary>
			<para> Opens a database connection with the settings 
      specified by the <see langword="ConnectionString"/> property of the
      provider-specific Connection object.
      </para>
		</summary>
	</doc><doc for="IDbConnection.CreateCommand">
		<summary>
			<para>Creates and returns a Command object associated with the 
      connection.</para>
		</summary>
		<returns>
			<para>A Command object associated with the connection.</para>
		</returns>
	</doc><doc for="IDbConnection.State">
		<summary>
			<para>Gets the current state of the connection.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.ConnectionState"/> values.</para>
		</value>
		<remarks>
			<para> The allowed state changes are:</para>
			<list type="bullet"><item>
					<term>
         
         From <see langword="Closed"/> to <see langword="Open"/>, using the <see langword="Open"/> method of the Connection object.</term>
				</item>
				<item>
					<term>
         
         From <see langword="Open"/> to <see langword="Closed"/>, using either the
      <see langword="Close"/> method or the <see langword="Dispose"/> method of the Connection object.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class, <see cref="System.Data.OleDb.OleDbConnection"/>, sets its <see cref="System.Data.IDbConnection.ConnectionString"/>, and displays its <see cref="System.Data.IDbConnection.State"/>.</para>
			<codelink SampleID="Classic WebData IDbConnection.ConnectionString Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDbConnection.Database">
		<summary>
			<para> Gets the name of the current database or
      the database to be used after a connection is opened.</para>
		</summary>
		<value>
			<para>The name of the current database or the name of the database to be used
      once a connection is open. The default value is an empty string.</para>
		</value>
		<remarks>
			<para>The <see langword="Database"/>
property can be dynamically updated by
using the <see cref="System.Data.IDbConnection.ChangeDatabase"/> method or by passing an SQL statement
using one of the Execute methods. (Initially the database is set by means of the
connection string.) If you change the current database using an SQL statement or
the <see langword="ChangeDatabase"/>
method, an informational message is sent and then the property is updated. </para>
		</remarks>
		<seealso cref="System.Data.IDbConnection.ChangeDatabase"/>
		<seealso cref="System.Data.IDbConnection.ConnectionString"/>
		<seealso cref="System.Data.IDbConnection.ConnectionTimeout"/>
	</doc>
	<doc for="IDbConnection.BeginTransaction">
		<overload>
			<para>Begins a database transaction. </para>
		</overload>
		<summary>
			<para> Begins a database transaction.
      </para>
		</summary>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<remarks>
			<para>Once the transaction has completed, you must explicitly commit or roll back the transaction by using the <see cref="System.Data.IDbTransaction.Commit"/>
or <see cref="System.Data.IDbTransaction.Rollback"/>
methods.</para>
		</remarks>
	</doc>
	<doc for="IDbConnection.BeginTransaction1">
		<summary>
			<para>Begins a database transaction with the specified <see cref="System.Data.IsolationLevel"/> value.</para>
		</summary>
		<param name="il">One of the <see cref="System.Data.IsolationLevel"/> values.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<remarks>
			<para>Once the transaction has completed, you must explicitly commit or roll back the transaction
      using the <see cref="System.Data.IDbTransaction.Commit"/> or
      <see cref="System.Data.IDbTransaction.Rollback"/>
   methods.</para>
		</remarks>
	</doc>
	<doc for="IDbConnection">
		<summary>
			<para>Represents an open connection to a data source, and is implemented by .NET
      Framework data providers that access relational databases.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.IDbConnection"/> interface enables an
   inheriting class to implement a Connection class, which represents a unique session with a data source (for example, a network connection to a server). For more information
   about Connection classes, see <see topic="cpconadonetconnections"/>. For more information
   about implementing .NET Framework data providers, see <see topic="cpconimplementingnetdataprovider"/>.</para>
			<para>An application does not create an instance of the <see cref="System.Data.IDbConnection"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDbConnection"/>. </para>
			<para>Classes that inherit <see cref="System.Data.IDbConnection"/> must implement all inherited members, and typically
define additional members to add provider-specific functionality. For example,
the <see cref="System.Data.IDbConnection"/>
interface defines the <see cref="System.Data.IDbConnection.ConnectionTimeout"/> property. In
turn, the <see cref="System.Data.SqlClient.SqlConnection"/> class inherits this property, and also defines the <see cref="System.Data.SqlClient.SqlConnection.PacketSize"/>
property.</para>
			<note type="inotes">
   To
   promote consistency among .NET
   Framework data providers, name the inheriting class in the form
<paramref name="PrvClassname"/> where <paramref name="Prv "/>is the 
   uniform prefix given to all classes in a specific .NET Framework data provider
   namespace. For example, <paramref name="Sql"/>
   is
   the prefix of the <see cref="System.Data.SqlClient.SqlConnection"/> class in the
<see langword="System.Data.SqlClient"/> 
namespace.
</note>
			<para> When
   you inherit from the <see cref="System.Data.IDbConnection"/>
   interface, you should implement the following constructors:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> PrvConnection()</term>
					<description>Initializes a new instance of the PrvConnection
         class.</description>
				</item>
				<item>
					<term> PrvConnection(string connectionString)</term>
					<description>Initializes a new instance of the PrvConnection class
         when given a
         string containing the connection string.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates instances of the derived classes, <see cref="System.Data.SqlClient.SqlCommand"/> and <see cref="System.Data.SqlClient.SqlConnection"/>. The <see cref="System.Data.SqlClient.SqlConnection"/> is opened and set as
   the <see cref="System.Data.SqlClient.SqlCommand.Connection"/> for the <see cref="System.Data.SqlClient.SqlCommand"/> . The
   example then calls <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> ,
   and closes the connection. To accomplish this,
   the <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> is passed a connection string and a query string that is
   a Transact-SQL INSERT statement.</para>
			<codelink SampleID="Classic WebData SqlConnection Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
