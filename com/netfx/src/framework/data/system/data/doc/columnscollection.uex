<docs>
  <doc for="DataColumnCollection.DataColumnCollection">
    <summary>
 DataColumnCollection constructor.  Used only by DataTable.
 </summary>
    <param name="table">
 The table that will parent this DataColumnCollection.
 </param>
  </doc>
  <doc for="DataColumnCollection.List">
    <summary>
      <para>Gets the list of the collection items.</para>
    </summary>
    <value>
      <para>An <see cref="System.Collections.ArrayList" /> that represents the collection items.</para>
    </value>
    <example>
      <para>The following example uses the <see cref="System.Data.DataColumnCollection.List" /> property to return the objects in the
    collection.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.List Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataColumnCollection.All">
    <internalonly />
    <summary>
      <para>Gets or sets all the columns of the columns
       collection.</para>
    </summary>
    <value>
      <para>An array of <see cref="System.Data.DataColumn" /> objects.</para>
    </value>
    <exception cref="System.ArgumentException">A column that is added shouldn't be added and/or a column that is removed shouldn't be removed.</exception>
    <remarks>
      <para>If an
       exception is thrown, the collection returns to its original state.</para>
    If the collection is succesfully changed by adding or
    removing columns, the <see cref="System.Data.DataColumnCollection.OnCollectionChanged" /> event occurs.
 </remarks>
    <example>
      <para>The following examples show how to set and get arrays of
       columns using the <see cref="System.Data.DataColumnCollection.All" />method.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.All Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumnCollection.Add" />
    <seealso cref="System.Data.DataColumnCollection.Clear" />
    <seealso cref="System.Data.DataColumnCollection.Remove" />
  </doc>
  <doc for="DataColumnCollection.ShouldPersistAll">
    <internalonly />
    <summary>
    </summary>
  </doc>
  <doc for="DataColumnCollection.this">
    <overload>
      <para>Gets the specified <see cref="System.Data.DataColumn" /> from the collection.</para>
    </overload>
    <summary>
      <para>Gets the <see cref="System.Data.DataColumn" />
 from the collection at the specified index.</para>
    </summary>
    <param name="index">The zero-based index of the column to return.</param>
    <value>
      <para>The <see cref="System.Data.DataColumn" /> at the specified index.</para>
    </value>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a column at this index.</exception>
    <remarks>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" /> method can be used to test for
    the existence of a column, which is useful before attempting to use <see cref="System.Data.DataColumnCollection.this" />.</para>
    </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.DataColumnCollection.this" /> property to print the <see cref="System.Data.DataColumn.ColumnName" /> value of a <see cref="System.Data.DataColumn" /> object specified by
    index. The example uses the <see cref="System.Data.DataTable" /> contained by a System.Windows.Forms.DataGrid
    control.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.this Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumn" />
  </doc>
  <doc for="DataColumnCollection.this1">
    <summary>
      <para>Gets the <see cref="System.Data.DataColumn" /> from the collection with the specified name.</para>
    </summary>
    <param name="name">The <see cref="System.Data.DataColumn.ColumnName" /> of the column to return.</param>
    <value>
      <para>The <see cref="System.Data.DataColumn" /> in the collection with the specified <see cref="System.Data.DataColumn.ColumnName" />.</para>
    </value>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a column with this name.</exception>
    <remarks>
      <see cref="System.Data.DataColumnCollection.this" /> is not case-sensitive when 
    searching for column names.
 </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.DataColumnCollection.this" /> property to print the <see cref="System.Data.DataColumn.DataType" /> value of a <see cref="System.Data.DataColumn" /> object
    specified by index.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.this1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumn" />
  </doc>
  <doc for="DataColumnCollection.Add">
    <overload>
      <para>Adds a <see cref="System.Data.DataColumn" />
 to the <see cref="System.Data.DataColumnCollection" />.</para>
    </overload>
    <summary>
      <para>Adds the specified <see cref="System.Data.DataColumn" />
 to the <see cref="System.Data.DataColumnCollection" />.</para>
    </summary>
    <param name="column">The <see cref="System.Data.DataColumn" /> to add.</param>
    <exception cref="System.ArgumentNullException">The <paramref name="column" /> parameter is <see langword="null" /> .</exception>
    <exception cref="System.ArgumentException">The column already belongs to this collection, or to another collection.</exception>
    <exception cref="System.Data.DuplicateNameException">The collection already has a column with the same name (The comparison is not case-sensitive.).</exception>
    <exception cref="System.Data.InvalidExpressionException">The expression is invalid. See the <see cref="System.Data.DataColumn.Expression" /> property for details on creating expressions. </exception>
    <remarks>
      <para>If the collection is successfully changed by adding or removing columns, the 
    <see cref="System.Data.DataColumnCollection.CollectionChanged" /> event occurs.</para>
    </remarks>
    <example>
      <para>The following example adds a <see cref="System.Data.DataColumn" /> to a
 <see cref="System.Data.DataColumnCollection" />
 .</para>
      <codelink SampleID="Classic WebData DataColumnCollection.Add Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumnCollection.CollectionChanged" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumn.DataType" />
    <seealso cref="System.Data.DataColumn.Expression" />
  </doc>
  <doc for="DataColumnCollection.Add1">
    <summary>
      <para>Creates and adds a <see cref="System.Data.DataColumn" />
 with
 the specified name, type, and compute expression to the <see cref="System.Data.DataColumnCollection" />.</para>
    </summary>
    <param name="columnName">The column name.</param>
    <param name="type">The <see cref="System.Data.DataColumn.DataType" /> of the column.</param>
    <param name="expression">The expression to assign to the <see cref="System.Data.DataColumn.Expression" /> property.</param>
    <returns>
      <para>The newly created <see cref="System.Data.DataColumn" />
 .</para>
    </returns>
    <exception cref="System.Data.DuplicateNameException">The collection already has a column with the same name (the comparison is not case-sensitive).</exception>
    <exception cref="System.Data.InvalidExpressionException">The expression is invalid. See the <see cref="System.Data.DataColumn.Expression" /> property for details on creating expressions. </exception>
    <remarks>
      <para>If <see langword="null" /> or an empty string ("") is passed in for the name, a
    default name ("Column1", "Column2", etc.) is given to the column.</para>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" />
 method determine whether a column with the proposed name already exists in the
 collection.</para>
      <para>If the collection is successfully changed by adding or removing columns, the 
 <see cref="System.Data.DataColumnCollection.CollectionChanged" /> event occurs.</para>
    </remarks>
    <example>
      <para>The following example creates and adds a new <see cref="System.Data.DataColumn" /> to a
 <see cref="System.Data.DataColumnCollection" /> of a <see cref="System.Data.DataTable" />. </para>
      <codelink SampleID="Classic WebData DataColumnCollection.Add1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumn.DataType" />
    <seealso cref="System.Data.DataColumn.Expression" />
  </doc>
  <doc for="DataColumnCollection.Add2">
    <summary>
      <para>Creates and adds a <see cref="System.Data.DataColumn" />
 with the
 specified name and type to the <see cref="System.Data.DataColumnCollection" />.</para>
    </summary>
    <param name="columnName">The <see cref="System.Data.DataColumn.ColumnName" /> to create the column with.</param>
    <param name="type">The column's <see cref="System.Data.DataColumn.DataType" /> .</param>
    <returns>
      <para>The newly created <see cref="System.Data.DataColumn" />
 .</para>
    </returns>
    <exception cref="System.Data.DuplicateNameException">The collection already has a column with the same name (The comparison is not case-sensitive.).</exception>
    <exception cref="System.Data.InvalidExpressionException">The expression is invalid. See the <see cref="System.Data.DataColumn.Expression" /> property for details on creating expressions. </exception>
    <remarks>
      <para>If <see langword="null" /> or an empty string ("") is passed in for the name, a
    default name ("Column1", "Column2", etc.) is given to the column.</para>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" />
 method determine whether a column with the proposed name already exists in the
 collection.</para>
      <para>If the collection is successfully changed by adding or removing columns, the 
 <see cref="System.Data.DataColumnCollection.CollectionChanged" /> event occurs.</para>
    </remarks>
    <example>
      <para>The following example creates and adds a new <see cref="System.Data.DataColumn" /> to a
 <see cref="System.Data.DataColumnCollection" /> of a <see cref="System.Data.DataTable" />. </para>
      <codelink SampleID="Classic WebData DataColumnCollection.Add2 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumn.DataType" />
    <seealso cref="System.Data.DataColumn.Expression" />
  </doc>
  <doc for="DataColumnCollection.Add3">
    <summary>
      <para>Creates and adds a <see cref="System.Data.DataColumn" />
 with the specified name and
 storage to the collection.</para>
    </summary>
    <param name="columnName">The name of the column.</param>
    <param name="storage">The <see cref="T:System.Data.Common.DataStorage" /> for this column.</param>
    <returns>
      <para>The newly created <see cref="System.Data.DataColumn" /> .</para>
    </returns>
    <exception cref="System.Data.DuplicateNameException">The collection already has a column with the same name (the comparison is not case-sensitive).</exception>
    <exception cref="System.Data.InvalidExpressionException">The expression is invalid. See the <see cref="System.Data.DataColumn.Expression" /> property for details on creating expressions. </exception>
    <remarks>
      <para>If <see langword="null" /> or an empty string ("") is passed in for the name, a
    default name ("Column1", "Column2", etc.) is given to the column.</para>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" />
 method determine whether a column with the proposed name already exists in the
 collection.</para>
      <para>If the collection is successfully changed by adding or 
    removing columns, the <see cref="System.Data.DataColumnCollection.CollectionChanged" /> event
    occurs.</para>
    </remarks>
    <example>
      <para>The following example creates and adds a new <see cref="System.Data.DataColumn" /> to a
 <see cref="System.Data.DataColumnCollection" /> of a <see cref="System.Data.DataTable" />. </para>
      <codelink SampleID="Classic WebData DataColumnCollection.Add3 Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataColumnCollection.Add4">
    <summary>
      <para>Creates and adds a <see cref="System.Data.DataColumn" />
 with the specified name to the <see cref="System.Data.DataColumnCollection" />.</para>
    </summary>
    <param name="columnName">The name of the column.</param>
    <returns>
      <para>The newly created <see cref="System.Data.DataColumn" />.</para>
    </returns>
    <exception cref="System.Data.DuplicateNameException">
      <para> The collection already has a column with the same name (The comparison is not case-sensitive.).</para>
    </exception>
    <remarks>
      <para>By default, the column's <see cref="System.Data.DataColumn.DataType" /> is string.</para>
      <para>If <see langword="null" /> or an empty string ("") is passed in for the name, a
 default name ("Column1", "Column2", etc.) is given to the column.</para>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" />
 method determine whether a column with the proposed name already exists in the
 collection.</para>
      <para>If the collection is successfully changed by adding or removing columns, the 
 <see cref="System.Data.DataColumnCollection.CollectionChanged" /> event occurs.</para>
    </remarks>
    <example>
      <para>The following example creates and adds a new <see cref="System.Data.DataColumn" /> to a
 <see cref="System.Data.DataColumnCollection" /> of a <see cref="System.Data.DataTable" />. </para>
      <codelink SampleID="Classic WebData DataColumnCollection.Add4 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumn.DataType" />
    <seealso cref="System.Data.DataColumn.Expression" />
  </doc>
  <doc for="DataColumnCollection.Add5">
    <summary>
      <para>Creates and adds a <see cref="System.Data.DataColumn" /> to a <see cref="System.Data.DataColumnCollection" />.</para>
    </summary>
    <returns>
      <para>The newly created <see cref="System.Data.DataColumn" /> .</para>
    </returns>
    <remarks>
      <para>A default name ("Column1", "Column2", etc.) is given to the column.</para>
      <para>If the collection is successfully changed by adding or removing columns, the 
    <see cref="System.Data.DataColumnCollection.CollectionChanged" /> event occurs.</para>
    </remarks>
    <example>
      <para>The following example creates and adds a new <see cref="System.Data.DataColumn" /> to a
 <see cref="System.Data.DataColumnCollection" /> of a <see cref="System.Data.DataTable" />. </para>
      <codelink SampleID="Classic WebData DataColumnCollection.Add5 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn.ColumnName" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumn.DataType" />
    <seealso cref="System.Data.DataColumn.Expression" />
  </doc>
  <doc for="DataColumnCollection.CollectionChanged">
    <summary>
      <para>Occurs when the columns collection changes, either by adding or removing a column.</para>
    </summary>
    <remarks>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" /> and <see cref="System.Data.DataColumnCollection.CanRemove" /> methods can be used to determine
    if a column exists and can be removed.</para>
    </remarks>
    <example>
      <para>The following example adds an event handler for the CollectionChanged 
       event.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.CollectionChanged Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataColumnCollection.ArrayAdd">
    <summary>
  Adds the column to the columns array.
 </summary>
    <param name="column">
 the column to add.
 </param>
  </doc>
  <doc for="DataColumnCollection.ArrayRemoveAt">
    <summary>
  Removes the column at the given index from the columns array.
 </summary>
    <param name="index">
 the index who's column to remove.
 </param>
  </doc>
  <doc for="DataColumnCollection.AssignName">
    <summary>
 Creates a new default name.
 </summary>
    <returns>
 the new default name.
 </returns>
  </doc>
  <doc for="DataColumnCollection.BaseAdd">
    <summary>
 Does verification on the column and it's name, and points the column at the dataSet that owns this collection.
 An ArgumentNullException is thrown if this column is null.  An ArgumentException is thrown if this column
 already belongs to this collection, belongs to another collection.
 A DuplicateNameException is thrown if this collection already has a column with the same
 name (case insensitive).
 An InvalidExpressionException is fired if the column has a compute expression and it can't be bound.
 </summary>
    <param name="column">
 The column to check.
 </param>
    <param name="storage">
    </param>
  </doc>
  <doc for="DataColumnCollection.BaseGroupSwitch">
    <summary>
 BaseGroupSwitch will intelligently remove and add tables from the collection.
 </summary>
    <param name="oldArray">
    </param>
    <param name="oldLength">
    </param>
    <param name="newArray">
    </param>
    <param name="newLength">
    </param>
  </doc>
  <doc for="DataColumnCollection.BaseRemove">
    <summary>
 Does verification on the column and it's name, and clears the column's dataSet pointer.
 An ArgumentNullException is thrown if this column is null.  An ArgumentException is thrown
 if this column doesn't belong to this collection or if this column is part of a relationship.
 An ArgumentException is thrown if another column's compute expression depends on this column.
 </summary>
    <param name="column">
 The column to remove.
 </param>
  </doc>
  <doc for="DataColumnCollection.CanRemove">
    <summary>
      <para> Checks whether
       a given column can be removed from the collection.</para>
    </summary>
    <param name="column">A <see cref="System.Data.DataColumn" /> in the collection.</param>
    <returns>
      <para>
        <see langword="true" /> 
 if the column can be
 removed; otherwise, <see langword="false" />
 .</para>
    </returns>
    <exception cref="System.ArgumentNullException">The <paramref name="column" /> parameter is <see langword="null" /> .</exception>
    <exception cref="System.ArgumentException">
      <para>The column does not belong to this collection.</para>
      <para>-Or-</para>
      <para>The column is part of a relationship.</para>
      <para>-Or-</para>
      <para>Another column's compute expression depends on this column. </para>
    </exception>
    <remarks>
      <para>The <see cref="System.Data.DataColumnCollection.CanRemove" /> method performs several checks
    before returning a <see langword="true " />or <see langword="false " />including
    the following: whether the column exists, belongs to the table, or is involved in a
    constraint or relation.</para>
      <para>Use the <see cref="System.Data.DataColumnCollection.CanRemove" /> method before
 attempting to remove any column from a collection. You can also use the <see cref="System.Data.DataColumnCollection.Contains" /> method to determine if a
 particular column exists before attempting to reference it.</para>
    </remarks>
    <example>
      <para>The following example first uses the <see cref="System.Data.DataColumnCollection.Contains" />
 method to determine if a particular column is found in the collection. If found, the
 <see cref="System.Data.DataColumnCollection.CanRemove" /> method tests whether the column can be 
 removed. If so, the column is removed with the <see cref="System.Data.DataColumnCollection.Remove" /> method.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.CanRemove Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumnCollection.Remove" />
  </doc>
  <doc for="DataColumnCollection.Clear">
    <summary>
      <para>
       Clears the collection of any columns.
    </para>
    </summary>
    <remarks>
      <para>
       If the collection is succesfully changed by adding or
       removing columns, the <see cref="System.Data.DataColumnCollection.OnCollectionChanged" /> event occurs.
    </para>
    </remarks>
    <example>
      <para>
       The following example clears the columns collection.
    </para>
      <codelink SampleID="Classic WebData DataColumnCollection.Clear Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataColumnCollection.Contains">
    <summary>
      <para>Checks whether the collection contains a column with the specified name.</para>
    </summary>
    <param name="name">The <see cref="System.Data.DataColumn.ColumnName" /> of the column.</param>
    <returns>
      <para>
        <see langword="true " />if a column exists with this 
    name; otherwise, <see langword="false" /> .</para>
    </returns>
    <remarks>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" /> method can confirm the existence
    of a column before performing further operations on the column.</para>
    </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.DataColumnCollection.Contains" /> method and the <see cref="System.Data.DataColumnCollection.CanRemove" /> method to determine whether the column
    can be removed. If so, the column is removed.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.Contains Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumnCollection.CanRemove" />
    <seealso cref="System.Data.DataColumnCollection.IndexOf" />
  </doc>
  <doc for="DataColumnCollection.IndexOf">
    <summary>
      <para>Gets the index of
       a column specified by name.</para>
    </summary>
    <param name="columnName">The name of the column to return.</param>
    <returns>
      <para>The index of the column specified by
    <paramref name="columnName" />
    if it is found; otherwise, -1.</para>
    </returns>
    <remarks>
      <para>The <see cref="System.Data.DataColumnCollection.IndexOf" /> method is not case-sensitive.</para>
    </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.DataColumnCollection.Contains" /> method
    to determine if a specified column exists in a columns
    collection. If so, the <see cref="System.Data.DataColumnCollection.IndexOf" /> method returns the index of
    the column.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.IndexOf Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataColumnCollection.MakeName">
    <summary>
 Makes a default name with the given index.  e.g. Column1, Column2, ... Columni
 </summary>
    <param name="index">
 The index to construct a default name for.
 </param>
    <returns>
 the proposed default name.
 </returns>
  </doc>
  <doc for="DataColumnCollection.NamesEqual">
    <summary>
 Compares the two names with a case insensitive comparison.
 </summary>
    <param name="s1">
 first string
 </param>
    <param name="s2">
 second string
 </param>
    <returns>
 whether they are equal (case insensitively)
 </returns>
  </doc>
  <doc for="DataColumnCollection.OnCollectionChanged">
    <summary>
      <para>
       Raises the <see cref="System.Data.DataColumnCollection.OnCollectionChanged" /> event.
    </para>
    </summary>
    <param name="ccevent">
    A <see cref="System.ComponentModel.CollectionChangeEventArgs" /> that contains the event data.
 </param>
    <remarks>
      <para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see
    <see topic="cpconProvidingEventFunctionality" />.
    </para>
      <note type="inheritinfo">
       When overriding
    <see cref="System.Data.DataColumnCollection.OnCollectionChanged" /> in an inheriting class, be sure to call the base 
       class's <see cref="System.Data.DataColumnCollection.OnCollectionChanged" /> method.
    </note>
    </remarks>
  </doc>
  <doc for="DataColumnCollection.OnCollectionChanging">
    <summary>
      <para>[To be supplied.]</para>
    </summary>
  </doc>
  <doc for="DataColumnCollection.RegisterName">
    <summary>
 Registers this name as being used in the collection.  Will throw an ArgumentException
 if the name is already being used.  Called by Add, All property, and Column.ColumnName property.
 if the name is equivalent to the next default name to hand out, we increment our defaultNameIndex.
 </summary>
    <param name="name">
 name to register as being used.
 </param>
    <param name="col">
 DataColumn which contains the name to be registerred.
 </param>
  </doc>
  <doc for="DataColumnCollection.Remove">
    <overload>
      <para>Removes a column from the collection.</para>
    </overload>
    <summary>
      <para>Removes the specified <see cref="System.Data.DataColumn" />
 from the collection.</para>
    </summary>
    <param name="column">The <see cref="System.Data.DataColumn" /> to remove.</param>
    <exception cref="System.ArgumentNullException">The <paramref name="column" /> parameter is <see langword="null" /> .</exception>
    <exception cref="System.ArgumentException">
      <para>The column does not belong to this collection.</para>
      <para>-Or-</para>
      <para>The column is part of a relationship.</para>
      <para>-Or-</para>
      <para>Another column's compute expression depends on this column. </para>
    </exception>
    <remarks>
      <para>If the collection is succesfully changed by adding or
       removing columns, the <see cref="System.Data.DataColumnCollection.OnCollectionChanged" />
       event occurs.</para>
    </remarks>
    <example>
      <para>The following example uses the <see cref="System.Data.DataColumnCollection.Contains" /> method to determine if
    a named column exists. If so, the <see cref="System.Data.DataColumnCollection.this" /> property returns the column. The
 <see cref="System.Data.DataColumnCollection.CanRemove" /> method then checks whether the column 
    can be removed; if so, the <see cref="System.Data.DataColumnCollection.Remove" />
    method removes it.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.Remove Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumnCollection.CanRemove" />
    <seealso cref="System.Data.DataColumnCollection.this" />
  </doc>
  <doc for="DataColumnCollection.Remove1">
    <summary>
      <para>Removes the
       column with the specified name from the collection.</para>
    </summary>
    <param name="name">The name of the column to remove.</param>
    <exception cref="IndexOutOfRangeException">The collection does not have a column with the specified name.</exception>
    <remarks>
      <para>If the collection is succesfully changed by adding or
       removing columns, the <see cref="System.Data.DataColumnCollection.OnCollectionChanged" />
       event occurs.</para>
    </remarks>
    <example>
      <para>The following example first uses the <see cref="System.Data.DataColumnCollection.Contains" /> method to
    determine if a particular column is found in the collection. If it is found, the
 <see cref="System.Data.DataColumnCollection.CanRemove" /> method tests whether the column can be 
    removed. If so, the column is removed with the <see cref="System.Data.DataColumnCollection.Remove" /> method.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.Remove1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumnCollection.Contains" />
  </doc>
  <doc for="DataColumnCollection.UnregisterName">
    <summary>
 Unregisters this name as no longer being used in the collection.  Called by Remove, All property, and
 Column.ColumnName property.  If the name is equivalent to the last proposed default namem, we walk backwards
 to find the next proper default name to hang out.
 </summary>
    <param name="name">
 name to unregister as no longer used.
 </param>
  </doc>
  <doc for="DataColumnCollection.AddRange">
    <summary>
      <para>Copies the elements of the specified <see cref="System.Data.DataColumn" /> array to 
   the end of the collection.</para>
    </summary>
    <param name="columns">The array of <see cref="System.Data.DataColumn" /> objects to add to the collection.</param>
  </doc>
  <doc for="DataColumnCollection.RemoveAt">
    <summary>
      <para>Removes the
      column at the specified index from the collection.</para>
    </summary>
    <param name="index">The index of the column to remove.</param>
    <exception cref="System.IndexOutOfRangeException">The collection does not have a column at this index.</exception>
    <remarks>
      <para>If the collection is succesfully changed by adding or
      removing columns, the <see cref="System.Data.DataColumnCollection.OnCollectionChanged" /> event
      occurs.</para>
    </remarks>
    <example>
      <para>The following example first uses the <see cref="System.Data.DataColumnCollection.Contains" /> method to
   determine if a particular column is found in the collection. If it is found, the
<see cref="System.Data.DataColumnCollection.CanRemove" /> method tests whether the column can be
   removed. If so, the column is removed with the <see cref="System.Data.DataColumnCollection.RemoveAt" /> method.</para>
      <codelink SampleID="Classic WebData DataColumnCollection.RemoveAt Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumnCollection.IndexOf" />
    <seealso cref="System.Data.DataColumnCollection.Contains" />
    <seealso cref="System.Data.DataColumnCollection.CanRemove" />
  </doc>
  <doc for="DataColumnCollection">
    <summary>
      <para>Represents a collection of <see cref="System.Data.DataColumn" />
objects for a <see cref="System.Data.DataTable" />.</para>
    </summary>
    <remarks>
      <para>The <see cref="System.Data.DataColumnCollection" /> is a major component of a <see cref="System.Data.DataTable" />.
   Accessed through the <see cref="System.Data.DataTable.Columns" /> property, the collection of columns defines the
   table's schema and thus determines what kind of data can be contained by a
<see cref="System.Data.DataTable" />.</para>
      <para>The <see cref="System.Data.DataColumnCollection" /> is accessed
through the <see cref="System.Data.DataTable.Columns" /> property of
the <see cref="System.Data.DataTable" /> .</para>
      <para>The <see cref="System.Data.DataColumnCollection" /> uses the standard
collection methods, such as <see cref="System.Data.DataColumnCollection.Add" />, <see cref="System.Data.DataColumnCollection.Remove" />, and <see cref="System.Data.DataColumnCollection.Clear" />. To determine
the number of elements in the collection, use the <see cref="System.Data.InternalDataCollectionBase.Count" /> property.</para>
      <para>The <see cref="System.Data.DataColumnCollection.Contains" /> method verifies that a specified
index or column name exists in the collection.</para>
    </remarks>
    <example>
      <para>The following example iterates through a collection
      of <see cref="System.Data.DataColumn" />
      objects and prints
      various properties of each column in the collection.</para>
      <codelink SampleID="Classic WebData DataColumnCollection Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTable.Columns" />
    <seealso cref="System.Data.DataColumn" />
    <seealso cref="System.Data.DataTable" />
    <seealso cref="System.Data.DataRelation" />
    <seealso cref="System.Data.DataRow" />
    <seealso cref="System.Data.DataSet" />
  </doc>
</docs>