<docs>
  <doc for="DataTableCollection">
    <summary>
      <para>Represents the collection of tables for the <see cref="System.Data.DataSet" />.</para>
    </summary>
    <remarks>
      <para>The <see cref="System.Data.DataTableCollection" /> contains all of the <see cref="System.Data.DataTable" /> objects
    for a <see cref="System.Data.DataSet" />. To access the <see cref="System.Data.DataTableCollection" /> of a <see cref="System.Data.DataSet" />, use the <see cref="System.Data.DataSet.Tables" /> property.</para>
      <para>The <see cref="System.Data.DataTableCollection" /> has the standard collection
 methods <see cref="System.Data.DataTableCollection.Add" />, <see cref="System.Data.DataTableCollection.Clear" />, and <see cref="System.Data.DataTableCollection.Remove" />
 .</para>
      <para>To determine if a particular table (specified by either
    index or name) is in the collection, the <see cref="System.Data.DataTableCollection.Contains" />
    method returns a boolean value.</para>
      <para>To navigate from one table to another, use the <see cref="System.Data.DataTable" /> class's
 <see cref="System.Data.DataTable.ChildRelations" /> or <see cref="System.Data.DataTable.ParentRelations" /> properties to access the table's 
 collection of <see cref="System.Data.DataRelation" /> objects. You can also navigate through the <see cref="System.Data.DataSet" /> class's
 collection using the <see cref="System.Data.DataSet.Relations" />
 property.</para>
    </remarks>
    <example>
      <para>The
       first example below retrieves the <see cref="System.Data.DataTableCollection" /> of a <see cref="System.Data.DataSet" /> and prints the value of each column, in each row,
       of each table. The second example creates a new <see cref="System.Data.DataTable" /> with two columns, and adds it to
       the <see cref="System.Data.DataTableCollection" /> .</para>
      <codelink SampleID="Classic WebData DataTableCollection Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataColumn" />
    <seealso cref="System.Data.DataRow" />
    <seealso cref="System.Data.DataTable" />
    <seealso cref="System.Data.DataSet" />
  </doc>
  <doc for="DataTableCollection.DataTableCollection">
    <summary>
 DataTableCollection constructor.  Used only by DataSet.
 </summary>
    <param name="dataSet">
 The dataSet that will parent this DataTableCollection.
 </param>
  </doc>
  <doc for="DataTableCollection.List">
    <summary>
      <para>Gets the tables
       in the collection as an object.</para>
    </summary>
    <value>
      <para>An <see cref="System.Collections.ArrayList" />
 that contains all of tables.</para>
    </value>
    <example>
      <para>The following example uses the <see cref="System.Data.DataTableCollection.List" /> property of a <see cref="System.Data.DataTableCollection" />
 to return an <see cref="System.Collections.ArrayList" />.</para>
      <codelink SampleID="Classic WebData DataTableCollection.List Example" SnippetID="1" />
    </example>
    <seealso cref="System.Collections.ArrayList" />
  </doc>
  <doc for="DataTableCollection.this">
    <overload>
      <para>Gets the specified table from the collection.</para>
    </overload>
    <summary>
      <para>Gets the table specified by its index.</para>
    </summary>
    <param name="index">The zero-based index of the <see cref="System.Data.DataTable" /> being sought.</param>
    <value>
      <para>A <see cref="System.Data.DataTable" />.</para>
    </value>
    <exception cref="System.IndexOutOfRangeException">The index doesn't exist in the collection.</exception>
    <remarks>
      <para>The <see cref="System.Data.DataTableCollection.Contains" /> method can be used to determine if a table with a
    specified index exists.</para>
      <para>If you have the name of a table, but not its index, use
    the <see cref="System.Data.DataTableCollection.IndexOf" /> method to return
    the table's index.</para>
    </remarks>
    <example>
      <para>The following example retrieves a <see cref="System.Data.DataTable" />
 by its
 index.</para>
      <codelink SampleID="Classic WebData DataTableCollection.this Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.Contains" />
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTable" />
  </doc>
  <doc for="DataTableCollection.this1">
    <summary>
      <para>Gets the table in the collection with the given name (not case-sensitive).</para>
    </summary>
    <param name="name">The name of the table to find.</param>
    <value>
      <para>A <see cref="System.Data.DataTable" /> with the
    specified name.</para>
    </value>
    <exception cref="System.Data.DataException">The table name does not exist in the collection.</exception>
    <remarks>
      <para>The <see cref="System.Data.DataTableCollection.Contains" /> method can be used to determine if a table with a specified name
    or index exists.</para>
    </remarks>
    <example>
      <para>The following example retrieves a single table by name
       from the <see cref="System.Data.DataTableCollection" />.</para>
      <codelink SampleID="Classic WebData DataTableCollection.this1 Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataTableCollection.Add">
    <overload>
      <para>
       Adds a table to the collection.
    </para>
    </overload>
    <summary>
      <para>
       Adds
       the specified table to the collection.
    </para>
    </summary>
    <param name="table">
    The <see cref="System.Data.DataTable" /> to add.
 </param>
    <exception cref="System.ArgumentNullException">
    The table is <see langword="null" />.
 </exception>
    <exception cref="System.ArgumentException">
    The table already belongs to this collection, or belongs to another collection.
 </exception>
    <exception cref="System.Data.DuplicateNameException">
    A table in the collection has the same name. The comparison is not case-sensitive.
 </exception>
    <remarks>
      <para>
       The <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event occurs when a table is
       succefully added.
    </para>
    </remarks>
    <example>
      <para>
       The following example creates a <see cref="System.Data.DataTable" /> and adds it to the <see cref="System.Data.DataTableCollection" />
       of a <see cref="System.Data.DataSet" />.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Add Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTable" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
    <seealso cref="System.Data.DataTableCollection.Clear" />
  </doc>
  <doc for="DataTableCollection.Add1">
    <summary>
      <para>
       Creates a table with the given name and adds it to the
       collection.
    </para>
    </summary>
    <param name="name">
    The name to give the created <see cref="System.Data.DataTable" />.
 </param>
    <returns>
      <para>
       The newly created <see cref="System.Data.DataTable" />.
    </para>
    </returns>
    <exception cref="System.Data.DuplicateNameException">
    A table in the collection has the same name. The comparison is not case-sensitive.
 </exception>
    <remarks>
      <para>
       If either a <see langword="null " />or an empty string ("")
       is passed in, a default name is given to the newly created <see cref="System.Data.DataTable" />
       .
    </para>
      <para>
       The <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event occurs if the table is
       succesfully added.
    </para>
    </remarks>
    <example>
      <para>
       The following example adds a <see cref="System.Data.DataTable" /> with the given name to the
    <see cref="System.Data.DataTableCollection" />.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Add1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTable" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
    <seealso cref="System.Data.DataTableCollection.Clear" />
  </doc>
  <doc for="DataTableCollection.Add2">
    <summary>
      <para>
       Creates a new table with a default name and adds it to
       the collection.
    </para>
    </summary>
    <returns>
      <para>
       The newly created <see cref="System.Data.DataTable" />
       .
    </para>
    </returns>
    <remarks>
      <para>
       Because
       no name is specified, the table is created with a default
       name, relative to its order of addition. The default name is "Table&lt;i&gt;"
       where i =
       a
       new 1-based index.
    </para>
      <para>
       The <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event occurs when a table is
       successfully added to the collection.
    </para>
    </remarks>
    <example>
      <para>
       The following example adds three new <see cref="System.Data.DataTable" /> objects
       to the <see cref="System.Data.DataTableCollection" /> using the <see cref="System.Data.DataTableCollection.Add" /> method with no arguments.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Add2 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTable" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
    <seealso cref="System.Data.DataTableCollection.Clear" />
  </doc>
  <doc for="DataTableCollection.CollectionChanged">
    <summary>
      <para>
       Occurs when the collection is changed.
    </para>
    </summary>
  </doc>
  <doc for="DataTableCollection.ArrayAdd">
    <summary>
  Adds the table to the tables array.
 </summary>
    <param name="table">
 the table to add.
 </param>
  </doc>
  <doc for="DataTableCollection.ArrayRemoveAt">
    <summary>
  Removes the table at the given index from the tables array.
 </summary>
    <param name="index">
 the index who's table to remove.
 </param>
  </doc>
  <doc for="DataTableCollection.AssignName">
    <summary>
 Creates a new default name.
 </summary>
    <returns>
 the new default name.
 </returns>
  </doc>
  <doc for="DataTableCollection.BaseAdd">
    <summary>
 Does verification on the table and it's name, and points the table at the dataSet that owns this collection.
 An ArgumentNullException is thrown if this table is null.  An ArgumentException is thrown if this table
 already belongs to this collection, belongs to another collection.
 A DuplicateNameException is thrown if this collection already has a table with the same
 name (case insensitive).
 </summary>
    <param name="table">
 The table to check.
 </param>
  </doc>
  <doc for="DataTableCollection.BaseGroupSwitch">
    <summary>
 BaseGroupSwitch will intelligently remove and add tables from the collection.
 </summary>
    <param name="oldArray">
    </param>
    <param name="oldLength">
    </param>
    <param name="newArray">
    </param>
    <param name="newLength">
    </param>
  </doc>
  <doc for="DataTableCollection.BaseRemove">
    <summary>
 Does verification on the table and it's name, and clears the table's dataSet pointer.
 An ArgumentNullException is thrown if this table is null.  An ArgumentException is thrown
 if this table doesn't belong to this collection or if this table is part of a relationship.
 </summary>
    <param name="table">
 The table to check.
 </param>
  </doc>
  <doc for="DataTableCollection.CanRemove">
    <summary>
      <para>
       Verifies if a given table can be removed from the collection.
    </para>
    </summary>
    <param name="table">
    </param>
    <returns>
      <para>
        <see langword="true " />if the table can be removed; otherwise, 
       <see langword="false" />.
       </para>
    </returns>
    <example>
      <para>
          The following example uses the <see cref="System.Data.DataTableCollection.CanRemove" /> to test whether each table can be removed from a
       <see cref="System.Data.DataSet" />. 
          If so, the <see cref="System.Data.DataTableCollection.Remove" /> method is called to remove the table.
       </para>
      <codelink SampleID="Classic WebData DataTableCollection.CanRemove Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.this" />
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
  </doc>
  <doc for="DataTableCollection.Clear">
    <summary>
      <para>
       Clears the collection of any tables.
    </para>
    </summary>
    <example>
      <para>
       The following example gets the <see cref="System.Data.DataTableCollection" /> of a <see cref="System.Data.DataSet" />, then
       clears the collection of all tables.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Clear Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataTableCollection.Contains">
    <summary>
      <para>
       Checks if a table, specified by name, exists in the collection.
    </para>
    </summary>
    <param name="name">
    The table name to check for.
 </param>
    <returns>
      <para>
        <see langword="true " />if the specified table exists; 
       otherwise, <see langword="false" />.
    </para>
    </returns>
    <remarks>
      <para>
       The <see cref="System.Data.DataTable" /> object's name is specified by the <see cref="System.Data.DataTable.TableName" /> property. If you add a <see cref="System.Data.DataTable" /> to the
    <see cref="System.Data.DataTableCollection" /> with the <see cref="System.Data.DataTableCollection.Add" /> method, passing no arguments, the table is given a default name 
       such as Table1, Table2, and so on.
    </para>
      <para>
       To get the index of a <see cref="System.Data.DataTable" />, use the <see cref="System.Data.DataTableCollection.IndexOf" /> method.
    </para>
    </remarks>
    <example>
      <para>
       The following example tests whether a table with the name "Suppliers" exists
       in the <see cref="System.Data.DataTableCollection" />.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Contains Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.this" />
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
    <seealso cref="System.Data.DataTableCollection.CanRemove" />
  </doc>
  <doc for="DataTableCollection.IndexOf">
    <overload>
      <para>Gets the index of a specified table.</para>
    </overload>
    <summary>
      <para>Gets the index of a specified <see cref="System.Data.DataTable" />.</para>
    </summary>
    <param name="table">The <see cref="System.Data.DataTable" /> to search for.</param>
    <returns>
      <para>The 0-based index of the table, or -1 if the table
       isn't found in the collection.</para>
    </returns>
    <remarks>
      <para>Use the <see cref="System.Data.DataTableCollection.IndexOf" />
 method when it's necessary to know the exact index of a given table.</para>
      <para>Before calling <see cref="System.Data.DataTableCollection.IndexOf" />, you can test for the existence
 of a table (specified by either index or name) using the <see cref="System.Data.DataTableCollection.Contains" /> method.</para>
    </remarks>
    <example>
      <para>The following example returns the index of each table in
       the <see cref="System.Data.DataTableCollection" />.</para>
      <codelink SampleID="Classic WebData DataTableCollection.IndexOf Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTable.TableName" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
  </doc>
  <doc for="DataTableCollection.IndexOf1">
    <summary>
      <para>Gets the index of the
       table with the given name (case insensitive), or -1 if the table
       doesn't exist in the collection.</para>
    </summary>
    <param name="tableName">The name to look for.</param>
    <returns>
      <para>The index of the table with the name, or
       -1 if the table doesn't exist in the collection.</para>
    </returns>
    <remarks>
      <para>The name of a <see cref="System.Data.DataTable" /> is set with the <see cref="System.Data.DataTable.TableName" /> property.</para>
    </remarks>
    <example>
      <para>The following example returns the index of a named table
       in the <see cref="System.Data.DataTableCollection" />.</para>
      <codelink SampleID="Classic WebData DataTableCollection.IndexOf1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTable.TableName" />
    <seealso cref="System.Data.DataTableCollection.Remove" />
  </doc>
  <doc for="DataTableCollection.MakeName">
    <summary>
 Makes a default name with the given index.  e.g. Table1, Table2, ... Tablei
 </summary>
    <param name="index">
 The index to construct a default name for.
 </param>
    <returns>
 the proposed default name.
 </returns>
  </doc>
  <doc for="DataTableCollection.NamesEqual">
    <summary>
 Compares the two names with a case insensitive comparison.
 </summary>
    <param name="s1">
 first string
 </param>
    <param name="s2">
 second string
 </param>
    <returns>
 whether they are equal (case insensitively)
 </returns>
  </doc>
  <doc for="DataTableCollection.OnCollectionChanged">
    <summary>
      <para>
       Raises the <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event.
    </para>
    </summary>
    <param name="ccevent">
    A <see cref="System.ComponentModel.CollectionChangeEventArgs" /> that contains the event data.
 </param>
    <remarks>
      <para>
       Raising an event invokes the event handler through a delegate. For an
       overview, see <see topic="cpconProvidingEventFunctionality" />.
    </para>
      <note type="inheritinfo">
       When overriding OnCollectionChanged in an inheriting class, be sure to call the base 
       class's <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> method.
    </note>
    </remarks>
  </doc>
  <doc for="DataTableCollection.OnCollectionChanging">
    <summary>
      <para>[To be supplied.]</para>
    </summary>
  </doc>
  <doc for="DataTableCollection.RegisterName">
    <summary>
 Registers this name as being used in the collection.  Will throw an ArgumentException
 if the name is already being used.  Called by Add, All property, and Table.TableName property.
 if the name is equivalent to the next default name to hand out, we increment our defaultNameIndex.
 </summary>
    <param name="name">
 name to register as being used.
 </param>
  </doc>
  <doc for="DataTableCollection.Remove">
    <overload>
      <para>
       Removes a table from the collection.
    </para>
    </overload>
    <summary>
      <para>
       Removes the specified table from the collection.
    </para>
    </summary>
    <param name="table">
    The <see cref="System.Data.DataTable" /> to remove.
 </param>
    <exception cref="System.ArgumentNullException">
    The table is <see langword="null" />.
 </exception>
    <exception cref="System.ArgumentException">
      <para> The table doesn't belong to this collection.</para>
      <para> -Or- </para>
      <para> The table is part of a relationship. </para>
    </exception>
    <remarks>
      <para>
          The <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event occurs when a table is
          succesfully removed.
       </para>
      <para>
          To determine if a given table exists and can be removed before invoking
       <see cref="System.Data.DataTableCollection.Remove" />, use the <see cref="System.Data.DataTableCollection.Contains" /> and the <see cref="System.Data.DataTableCollection.CanRemove" /> 
       methods.
    </para>
    </remarks>
    <example>
      <para>
       The following example uses the <see cref="System.Data.DataTableCollection.CanRemove" /> to test whether
       each table can be removed from a <see cref="System.Data.DataSet" />. If so, the <see cref="System.Data.DataTableCollection.Remove" /> method is called to remove the
       table.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Remove Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTableCollection.Contains" />
  </doc>
  <doc for="DataTableCollection.Remove1">
    <summary>
      <para>
       Removes the table with a specified name from the
       collection.
    </para>
    </summary>
    <param name="name">
    The name of the <see cref="System.Data.DataTable" /> to remove.
 </param>
    <exception cref="System.IndexOutOfRangeException">
    The collection doesn't have a table at this index.
 </exception>
    <remarks>
      <para>
       The <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event occurs when a table is
       succesfully removed.
    </para>
      <para>
       To determine if a given table exists and can be removed before invoking
    <see cref="System.Data.DataTableCollection.Remove" />, use the <see cref="System.Data.DataTableCollection.Contains" /> and the <see cref="System.Data.DataTableCollection.CanRemove" /> methods. 
    </para>
    </remarks>
    <example>
      <para>
       The following example uses the <see cref="System.Data.DataTableCollection.Contains" /> and <see cref="System.Data.DataTableCollection.CanRemove" /> to test whether
       a named table exists and can be removed. If so, the <see cref="System.Data.DataTableCollection.Remove" /> method is called to remove the
       table.
    </para>
      <codelink SampleID="Classic WebData DataTableCollection.Remove1 Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTableCollection.Contains" />
  </doc>
  <doc for="DataTableCollection.UnregisterName">
    <summary>
 Unregisters this name as no longer being used in the collection.  Called by Remove, All property, and
 Table.TableName property.  If the name is equivalent to the last proposed default namem, we walk backwards
 to find the next proper default name to hang out.
 </summary>
    <param name="name">
 name to unregister as no longer used.
 </param>
  </doc>
  <doc for="DataTableCollection.AddRange">
    <summary>
      <para>Copies the elements of the specified <see cref="System.Data.DataTable" /> array to 
   the end of the collection.</para>
    </summary>
    <param name="tables">The array of <see cref="System.Data.DataTable" /> objects to add to the collection.</param>
  </doc>
  <doc for="DataTableCollection.CollectionChanging">
    <summary>
      <para>Occurs when the collection has changed.</para>
    </summary>
  </doc>
  <doc for="DataTableCollection.RemoveAt">
    <summary>
      <para> Removes the
      table at the given index from the collection
      </para>
    </summary>
    <param name="index">The index at which to remove a table. </param>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a table at this index. </exception>
    <remarks>
      <para> The <see cref="System.Data.DataTableCollection.OnCollectionChanged" /> event occurs when a table is
   succesfully removed.
   </para>
      <para> To determine if a given table exists and can be removed before invoking
<see cref="System.Data.DataTableCollection.Remove" />, use the <see cref="System.Data.DataTableCollection.Contains" /> and the <see cref="System.Data.DataTableCollection.CanRemove" /> methods.
   </para>
    </remarks>
    <example>
      <para> The following example uses the <see cref="System.Data.DataTableCollection.Contains" />
and <see cref="System.Data.DataTableCollection.CanRemove" /> to test whether a table with
the index 10 exists and can be removed. If so, the <see cref="System.Data.DataTableCollection.RemoveAt" /> method is called to remove the
table.</para>
      <codelink SampleID="Classic WebData DataTableCollection.RemoveAt Example" SnippetID="1" />
    </example>
    <seealso cref="System.Data.DataTableCollection.IndexOf" />
    <seealso cref="System.Data.DataTableCollection.Contains" />
  </doc>
</docs>