<docs>
	<doc for="ISqlTransaction">
		<summary>
			<para>Represents a Transact-SQL transaction to be made in a SQL Server database.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.ISqlTransaction"/> interface inherits from the <see cref="System.Data.IDbTransaction"/> 
interface and allows a .NET data provider to create a transaction for
use with a SQL Server relational database. </para>
		</remarks>
	</doc><doc for="ISqlTransaction.Rollback">
		<summary>
			<para> Rolls back a transaction from a pending state, and specifies the transaction name.
      </para>
		</summary>
		<param name="transactionName">The name of the transaction to rollback. </param>
		<exception cref="System.ArgumentException">No transaction name was be specified. </exception>
		<remarks>
			<para> The transaction can only be rolled back from a pending state
      (after <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> has been called, but
      before <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> is called).
      </para>
		</remarks>
	</doc><doc for="ISqlTransaction.Save">
		<summary>
			<para> Creates a savepoint in the transaction that can be used to roll back a portion of
      the transaction, and specifies the savepoint name.
      </para>
		</summary>
		<param name="savePoint">The name of the savepoint. </param>
		<exception cref="System.ArgumentException">No savepoint name was be specified. </exception>
		<remarks>
			<para>The value used in the <paramref name="savePoint 
      "/>parameter can be the same value used in the <paramref name="transactionName"/> parameter of some implementations of the
   <see cref="System.Data.ISqlConnection.BeginTransaction"/> 
   method.</para>
			<para>Savepoints offer a mechanism to roll back portions of transactions. You
   create a savepoint using the <see cref="System.Data.ISqlTransaction.Save"/> method, and then later
   call the <see cref="System.Data.ISqlTransaction.Rollback"/> method to roll back to the savepoint instead of rolling back
   to the start of the transaction.</para>
			<para>Savepoints are useful in situations where errors are unlikely to occur. The
   use of a savepoint to roll back part of a transaction in the case of an
   infrequent error can be more efficient than having each transaction test to see
   if an update is valid before making the update. Updates and rollbacks are
   expensive operations, so savepoints are effective only if the probability of
   encountering the error is low and the cost of checking the validity of an update
   beforehand is relatively high.</para>
		</remarks>
	</doc></docs>
