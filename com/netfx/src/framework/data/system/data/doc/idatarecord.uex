<docs>
	<doc for="IDataRecord.GetName">
		<summary>
			<para>Gets the name for the field to find.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The name of the field or the empty string (""), if there is no value to
       return.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetDataTypeName">
		<summary>
			<para>Gets the data type information for the specified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The data type information for the specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
		<remarks>
			<para>The data type information can differ from the type information returned by
       GetFieldType, especially where the underlying data types do not map one for one
       to the runtime types supported by the language. (e.g. DataTypeName may be
       "integer", while Type.Name may be "Int32".)</para>
		</remarks>
	</doc>
	<doc for="IDataRecord.GetFieldType">
		<summary>
			<para>Gets the <see cref="System.Type"/> information corresponding to the type
    of <see cref="System.Object"/>
    that would be returned from <see cref="System.Data.IDataRecord.GetValue"/>
    .</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The <see cref="System.Type"/> information corresponding to the type of <see cref="System.Object"/> that would be
    returned from <see cref="System.Data.IDataRecord.GetValue"/> .</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
		<remarks>
			<para>This information can be used to increase performance by indicating the
       strongly-typed accessor to call. (e.g. using GetInt32 is roughly ten times
       faster than using GetValue.)</para>
		</remarks>
	</doc>
	<doc for="IDataRecord.GetValue">
		<summary>
			<para>
       Return the value of the specified field.
    </para>
		</summary>
		<param name="i">
    The index of the field to find.
 </param>
		<returns>
			<para>
       The <see cref="System.Object"/> which will contain the field value upon return.
    </para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">
    The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.
 </exception>
	</doc>
	<doc for="IDataRecord.GetGuid">
		<summary>
			<para>
       Returns the guid value of the specified field.
    </para>
		</summary>
		<param name="i">
    The index of the field to find.
 </param>
		<returns>
			<para>
       The guid value of the specified field.
    </para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">
    The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.
 </exception>
	</doc>
	<doc for="IDataRecord.GetInt16">
		<summary>
			<para>Gets the 16-bit signed integer value of the specified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The 16-bit signed integer value of the specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetInt32">
		<summary>
			<para>Gets the 32-bit signed integer value of the specified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The 32-bit signed integer value of the specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetInt64">
		<summary>
			<para>Gets the 64-bit signed integer value of the specified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The 64-bit signed integer value of the specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetFloat">
		<summary>
			<para>Gets the single-precision floating point number of the specified
       field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The single-precision floating point number of the
       specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetDouble">
		<summary>
			<para>Gets the double-precision floating point number of the specified
       field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The double-precision floating point number of the
       specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetString">
		<summary>
			<para>Gets the string value of the specified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The string value of the specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetDecimal">
		<summary>
			<para>Gets the fixed-position numeric value of the specified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The fixed-position numeric value of the specified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetDateTime">
		<summary>
			<para>Gets the date and time data value of the spcified field.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>The date and time data value of the spcified field.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetData">
		<summary>
			<para>Gets an <see cref="System.Data.IDataReader"/> to be used when the field points to more remote
    structured data.</para>
		</summary>
		<param name="i">The index of the field to find.</param>
		<returns>
			<para>An <see cref="System.Data.IDataReader"/> to be used when the field points
    to more remote structured data.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.GetValues">
		<summary>
			<para>Gets all the attribute fields in the collection for the current
      record.</para>
		</summary>
		<param name="values">An array of <see cref="System.Object"/> to copy the attribute fields into.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, the <see cref="System.Data.IDataRecord.GetValues"/> method provides an efficient means for
   retrieving all columns, rather than retrieving each column individually.</para>
			<para>You can pass an <see cref="System.Object"/> array that contains fewer than the
number of columns contained in the resulting row. Only the amount of data
the <see cref="System.Object"/> array
holds is copied to the array. You can also pass an <see cref="System.Object"/> array whose
length is more than the number of columns contained in the resulting row.</para>
		</remarks>
	</doc><doc for="IDataRecord.GetBoolean">
		<summary>
			<para>Gets the value of the specified column as a Boolean.</para>
		</summary>
		<param name="i"> The zero-based column ordinal.</param>
		<returns>
			<para>The value of the column.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
		<remarks>
			<para>No conversions are performed, therefore the data retrieved must already be a
      Boolean or an exception is generated.</para>
		</remarks>
	</doc><doc for="IDataRecord.GetByte">
		<summary>
			<para>Gets the 8-bit unsigned integer value of the specified column.</para>
		</summary>
		<param name="i"> The zero-based column ordinal.</param>
		<returns>
			<para>The 8-bit unsigned integer value of the specified column.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc><doc for="IDataRecord.GetChar">
		<summary>
			<para>Gets the character value of the specified column.</para>
		</summary>
		<param name="i"> The zero-based column ordinal.</param>
		<returns>
			<para>The character value of the specified column.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc><doc for="IDataRecord.GetChars">
		<summary>
			<para> Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" buffer">The buffer into which to read the stream of bytes. </param>
		<param name=" length">The number of bytes to read. </param>
		<param name=" bufferoffset">The index for <paramref name="buffer"/> to begin the read operation. </param>
		<param name=" fieldoffset">The index within the row from which to begin the read operation. </param>
		<returns>
			<para> The actual number of characters read.
      </para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>. </exception>
		<remarks>
			<para><see cref="System.Data.IDataRecord.GetChars"/> returns the number of available characters in the field. In most cases this is the exact length of the field. However,
   the number returned may be less than the exact length of the field if <see langword="GetChars"/> has
   already been used to obtain characters from the
   field.
   </para>
			<para> 
   If you pass a buffer that is
<see langword="null"/>, <see langword="GetChars"/> returns the 
   length of the field in characters. </para>
			<para>No conversions are performed; therefore the data retrieved must already be a
   character array.</para>
		</remarks>
	</doc><doc for="IDataRecord.GetBytes">
		<summary>
			<para> Reads a stream of bytes from the specified column offset into the buffer as
      an array, starting at the given buffer offset.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" fieldOffset">The index within the field from which to begin the read operation. </param>
		<param name=" buffer">The buffer into which to read the stream of bytes. </param>
		<param name=" bufferoffset">The index for <paramref name="buffer"/> to begin the read operation. </param>
		<param name=" length">The number of bytes to read. </param>
		<returns>
			<para> The actual number of bytes read.
      </para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>. </exception>
		<remarks>
			<para><see cref="System.Data.IDataRecord.GetBytes"/>
returns the number of available bytes in the field. In most cases this is the
exact length of the field. However, the number returned may be less than the
true length of the field if <see langword="GetBytes"/>
has already been used to obtain bytes from
the field.</para>
			<para> If you pass a buffer that
   is <see langword="null"/>, <see cref="System.Data.IDataRecord.GetBytes"/> returns the
   length of the row in bytes. </para>
			<para>No conversions are performed; therefore the data retrieved must already be a
   byte array.</para>
		</remarks>
	</doc><doc for="IDataRecord.FieldCount">
		<summary>
			<para>Gets the number of columns in the current row.</para>
		</summary>
		<value>
			<para>When not positioned in a valid recordset, 0; otherwise
      the number of columns in the current record. The default is -1.</para>
		</value>
		<remarks>
			<para>After executing a query that does not return rows (for
      example, using the <see cref="System.Data.IDbCommand.ExecuteNonQuery"/>
      method), <see cref="System.Data.IDataRecord.FieldCount"/> returns
      -1.</para>
		</remarks>
	</doc><doc for="IDataRecord.IsDBNull">
		<summary>
			<para> Return whether the specified field is set to null.
      </para>
		</summary>
		<param name="i">The index of the field to find. </param>
		<returns>
			<para><see langword="true"/> if the specified field is set to null, otherwise
<see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>. </exception>
		<remarks>
			<para>Call this method to check for null column values before calling the typed get 
      methods (for example, <see cref="System.Data.SqlClient.SqlDataReader.GetByte"/>, <see cref="System.Data.SqlClient.SqlDataReader.GetChar"/>, and so on) to avoid
      raising an error.</para>
		</remarks>
	</doc><doc for="IDataRecord.this">
		<overload>
			<para>Gets the specified column. </para>
		</overload>
		<summary>
			<para>Gets the column located at the specified index.</para>
		</summary>
		<param name="i">The index of the column to get.</param>
		<value>
			<para>The column located at the specified index as an <see cref="System.Object"/>.</para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="IDataRecord.this1">
		<summary>
			<para>Gets the column with the specified name.</para>
		</summary>
		<param name="name">The name of the column to find.</param>
		<value>
			<para>The column with the specified name as an <see cref="System.Object"/>.</para>
		</value>
		<exception cref="System.IndexOutOfRangeException">No column with the specified name was found.</exception>
		<remarks>
			<para>A case-sensitive lookup is performed first. If it fails, a second
      case-insensitive search is made.</para>
			<para>This method is kana-width insensitive.</para>
		</remarks>
	</doc>
	<doc for="IDataRecord">
		<summary>
			<para> Provides access to
      the column values within each row for a DataReader, and is implemented by
      .NET Framework data providers that access relational databases.
      </para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.IDataReader"/> and <see cref="System.Data.IDataRecord"/> interfaces enable an inheriting class to implement a DataReader class, which provides a means of reading one or more forward-only streams of result sets. For more information
   about DataReader classes, see <see topic="cpcontheadonetdatareader"/>. For more information about implementing
   .NET Framework data providers, see <see topic="cpconimplementingnetdataprovider"/>.</para>
			<para>An application does not create an instance of the <see cref="System.Data.IDataRecord"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDataRecord"/> . Typically this is done by obtaining a DataReader through
the <see langword="ExecuteReader "/>method of the Command object. </para>
			<para>Classes that inherit <see cref="System.Data.IDataRecord"/> must implement all inherited members, and typically
define additional members to add provider-specific functionality.</para>
			<para> Providers implementing a DataReader
   are required to expose data in common
   language runtime (CLR) types. Type coercion is defined for some types not
   included in the CLR. These values may be accessed as alternate types, which conform
   to CLR
   types. As an example, the following table lists suggested mappings from OLE DB data types to CLR types, and lists alternate types in parentheses in the CLR Type column.</para>
			<list type="table">
				<listheader>
					<term>OLE DB Type</term>
					<description>CLR Type</description>
				</listheader>
				<item>
					<term> DBTYPE_BOOL</term>
					<description>Int16</description>
				</item>
				<item>
					<term> DBTYPE_BSTR</term>
					<description>string</description>
				</item>
				<item>
					<term> DBTYPE_BYTES</term>
					<description>byte[]</description>
				</item>
				<item>
					<term> DBTYPE_CY</term>
					<description>Decimal</description>
				</item>
				<item>
					<term> DBTYPE_DATE</term>
					<description>DateTime</description>
				</item>
				<item>
					<term> DBTYPE_DBDATE</term>
					<description>DateTime</description>
				</item>
				<item>
					<term> DBTYPE_DBTIME</term>
					<description>DateTime</description>
				</item>
				<item>
					<term> DBTYPE_DBTIMESTAMP</term>
					<description>DateTime</description>
				</item>
				<item>
					<term> DBTYPE_DECIMAL</term>
					<description>Decimal</description>
				</item>
				<item>
					<term> DBTYPE_EMPTY</term>
					<description>null</description>
				</item>
				<item>
					<term> DBTYPE_ERROR</term>
					<description>ExternalException</description>
				</item>
				<item>
					<term> DBTYPE_FILETIME</term>
					<description>DateTime</description>
				</item>
				<item>
					<term> DBTYPE_GUID</term>
					<description>Guid</description>
				</item>
				<item>
					<term> DBTYPE_HCHAPTER</term>
					<description>not supported</description>
				</item>
				<item>
					<term> DBTYPE_I1</term>
					<description>SByte</description>
				</item>
				<item>
					<term> DBTYPE_I2</term>
					<description>Int16</description>
				</item>
				<item>
					<term> DBTYPE_I4</term>
					<description>Int32</description>
				</item>
				<item>
					<term> DBTYPE_I8</term>
					<description>Int64</description>
				</item>
				<item>
					<term> DBTYPE_IDISPATCH</term>
					<description>object</description>
				</item>
				<item>
					<term> DBTYPE_IUNKNOWN</term>
					<description>object</description>
				</item>
				<item>
					<term> DBTYPE_NULL</term>
					<description>DBNull.Value</description>
				</item>
				<item>
					<term> DBTYPE_NUMERIC</term>
					<description>Decimal</description>
				</item>
				<item>
					<term> DBTYPE_PROPVARIANT</term>
					<description>object</description>
				</item>
				<item>
					<term> DBTYPE_R4</term>
					<description>Single</description>
				</item>
				<item>
					<term> DBTYPE_R8</term>
					<description>Double</description>
				</item>
				<item>
					<term> DBTYPE_STR</term>
					<description>string</description>
				</item>
				<item>
					<term> DBTYPE_UDT</term>
					<description>not supported</description>
				</item>
				<item>
					<term> DBTYPE_UI1</term>
					<description>byte (Int16)</description>
				</item>
				<item>
					<term> DBTYPE_UI2</term>
					<description>UInt16 (Int32)</description>
				</item>
				<item>
					<term> DBTYPE_UI4</term>
					<description>UInt32 (Int64)</description>
				</item>
				<item>
					<term> DBTYPE_UI8</term>
					<description>UInt64 (Decimal)</description>
				</item>
				<item>
					<term> DBTYPE_VARIANT</term>
					<description>object</description>
				</item>
				<item>
					<term> DBTYPE_VARNUMERIC</term>
					<description>not supported</description>
				</item>
				<item>
					<term> DBTYPE_WSTR</term>
					<description>string</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates instances of the derived classes, <see cref="System.Data.SqlClient.SqlConnection"/> , <see cref="System.Data.SqlClient.SqlCommand"/>
, and <see cref="System.Data.SqlClient.SqlDataReader"/>. The example reads through the data, writing it
out to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDataRecord.GetOrdinal">
		<summary>
			<para> Return the index of the named field.
      </para>
		</summary>
		<param name="name">The name of the field to find. </param>
		<returns>
			<para> The index of the named field.
      </para>
		</returns>
		<remarks>
			<para><see langword="GetOrdinal"/> performs a case-sensitive lookup first. If it
   fails, a second case-insensitive search is made.</para>
			<para><see langword="GetOrdinal"/> is kana-width insensitive.</para>
			<para>Because ordinal-based lookups are more efficient than named lookups, it is
   inefficient to call <see langword="GetOrdinal"/> within a loop. Save time by
   calling <see langword="GetOrdinal"/> once and assigning the results to an integer
   variable for use within the loop.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the inherited <see cref="System.Data.Odbc.OdbcDataReader.GetOrdinal"/> 
method.</para>
			<codelink SampleID="Classic WebData OdbcDataReader.GetOrdinal" SnippetID="1"/>
		</example>
	</doc></docs>
