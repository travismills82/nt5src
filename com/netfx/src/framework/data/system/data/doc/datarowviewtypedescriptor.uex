<docs>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetAttributes">
		<summary>
     Retrieves an array of member attributes for the given object.
 </summary>
		<returns>
     the array of attributes on the class.  This will never be null.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetClassName">
		<summary>
     Retrieves the class name for this object.  If null is returned,
     the type name is used.
 </summary>
		<returns>
     The class name for the object, or null if the default will be used.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetComponentName">
		<summary>
     Retrieves the name for this object.  If null is returned,
     the default is used.
 </summary>
		<returns>
     The name for the object, or null if the default will be used.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetConverter">
		<summary>
      Retrieves the type converter for this object.
 </summary>
		<returns>
     A TypeConverter.  If null is returned, the default is used.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetDefaultEvent">
		<summary>
     Retrieves the default event.
 </summary>
		<returns>
     the default event, or null if there are no
     events
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetDefaultProperty">
		<summary>
     Retrieves the default property.
 </summary>
		<returns>
     the default property, or null if there are no
     properties
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetEditor">
		<summary>
      Retrieves the an editor for this object.
 </summary>
		<returns>
     An editor of the requested type, or null.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetEvents">
		<summary>
     Retrieves an array of events that the given component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.
 </summary>
		<returns>
     an array of events this component surfaces.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetEvents1">
		<summary>
     Retrieves an array of events that the given component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.  The returned array of events will be
     filtered by the given set of attributes.
 </summary>
		<param name="attributes">
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the event does not have an instance of that attribute's
     class, this will still include the event if the
     Attribute is the same as it's Default property.
 </param>
		<returns>
     an array of events this component surfaces that match
     the given set of attributes..
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetProperties">
		<summary>
     Retrieves an array of properties that the given component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.
 </summary>
		<returns>
     an array of properties this component surfaces.
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetProperties1">
		<summary>
     Retrieves an array of properties that the given component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.  The returned array of properties will be
     filtered by the given set of attributes.
 </summary>
		<param name="attributes">
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the property does not have an instance of that attribute's
     class, this will still include the property if the
     Attribute is the same as it's Default property.
 </param>
		<returns>
     an array of properties this component surfaces that match
     the given set of attributes..
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor.ICustomTypeDescriptor.GetPropertyOwner">
		<summary>
     Retrieves the object that directly depends on this value being edited.  This is
     generally the object that is required for the PropertyDescriptor's GetValue and SetValue
     methods.  If 'null' is passed for the PropertyDescriptor, the ICustomComponent
     descripotor implemementation should return the default object, that is the main
     object that exposes the properties and attributes,
 </summary>
		<param name="pd">
    The PropertyDescriptor to find the owner for.  This call should return an object
    such that the call "pd.GetValue(GetPropertyOwner(pd));" will generally succeed.
    If 'null' is passed for pd, the main object that owns the properties and attributes
    should be returned.
 </param>
		<returns>
     valueOwner
 </returns>
	</doc>
	<doc for="DataRowViewTypeDescriptor">
		<summary>
   Provides dynamic type information about <see cref="System.Data.DataRowView"/> ActiveX
   controls.
</summary>
	</doc></docs>
