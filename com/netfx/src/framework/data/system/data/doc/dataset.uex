<docs>
	<doc for="DataSet.Xml">
		<summary>
			<para>Gets or sets the XML data for the <see cref="System.Data.DataSet"/> .</para>
		</summary>
		<value>
			<para>The XML code that defines the <see cref="System.Data.DataSet"/> including its relationships,
    table schemas, and data.</para>
		</value>
		<remarks>
			<para>The code returned by the <see cref="System.Data.DataSet.Xml"/>
 property can have both schema and instance data. To return only the XML schema,
 use the <see cref="System.Data.DataSet.XmlSchema"/> property. To return only the XML data, use the
 <see cref="System.Data.DataSet.ReadXml"/> property.</para>
		</remarks>
		<example>
			<para>The following example prints the XML data for a <see cref="System.Data.DataSet"/>
 using the XML property.</para>
			<codelink SampleID="Classic WebData DataSet.Xml Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.XmlSchema">
		<summary>
			<para>Gets or sets the XML schema of the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<value>
			<para>The XML schema for the <see cref="System.Data.DataSet"/>.</para>
		</value>
		<remarks>
			<para>The XML schema defines the tags for the data found in an
       XML document. The <see cref="System.Data.DataSet.XmlSchema"/> property returns only the tags, and not the data
       for the <see cref="System.Data.DataSet"/>. To return the data, use the <see cref="System.Data.DataSet.ReadXml"/> property. Use the <see cref="System.Data.DataSet.Xml"/>
       property to return both schema and
       data.</para>
		</remarks>
		<example>
			<para>The following example prints the <see cref="System.Data.DataSet.XmlSchema"/>
 and <see cref="System.Data.DataSet.ReadXml"/> for a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DataSet.XmlSchema Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.HasSchemaChanged"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc>
	<doc for="DataSet.MultiThreadedAccess">
		<summary>
 
 The default is false.
 </summary>
	</doc>
	<doc for="DataSet.Site">
		<summary>
			<para>Gets or sets an <see cref="T:System.ComponentModel.ISite" qualify="true"/> for the <see cref="System.Data.DataSet"/> .</para>
		</summary>
		<value>
			<para>An <see cref="T:System.ComponentModel.ISite"/> for the <see cref="System.Data.DataSet"/> .</para>
		</value>
		<remarks>
			<para>Sites bind a <see cref="T:System.ComponentModel.Component"/> to a <see cref="T:System.ComponentModel.Container"/> and enable communication between them, 
    as well as provide a way for the container to manage its components.</para>
		</remarks>
	</doc>
	<doc for="DataSet.ResetLocale">
		<summary>
			<para>Resets the <see cref="System.Data.DataSet.Locale"/>
 property to the current system locale.</para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Data.DataSet"/> or 
       creating your own control incorporating the <see cref="System.Data.DataSet"/>.</para>
		</remarks>
	</doc>
	<doc for="DataSet.ShouldSerializeLocale">
		<summary>
			<para>Indicates whether the <see cref="System.Data.DataSet.Locale"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
    default; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Data.DataSet"/> or 
       creating your own control incorporating the <see cref="System.Data.DataSet"/>.</para>
		</remarks>
	</doc>
	<doc for="DataSet.ResetRelations">
		<summary>
			<para>Resets the <see cref="System.Data.DataSet.Relations"/> property to its default state.</para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Data.DataSet"/> or 
       creating your own control incorporating the <see cref="System.Data.DataSet"/>. You can use the <see cref="System.Data.DataSet.ShouldSerializeRelations"/> method to determine whether the property value has
       changed from its default.</para>
		</remarks>
	</doc>
	<doc for="DataSet.ResetTables">
		<summary>
			<para>Resets the <see cref="System.Data.DataSet.Tables"/> property to its default state.</para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Data.DataSet"/> or 
       creating your own control incorporating the <see cref="System.Data.DataSet"/>. You can use the <see cref="System.Data.DataSet.ShouldSerializeTables"/> method to determine whether the property value has
       changed from its default.</para>
		</remarks>
		<example>
			<para>The following example shows a class derived from the 
    <see cref="System.Data.DataSet"/> 
    class. The <see cref="System.Data.DataSet.ShouldSerializeTables"/> and <see cref="System.Data.DataSet.ResetTables"/> methods are called from within
    functions in the derived class.</para>
			<codelink SampleID="Classic WebData DataSet.ShouldSerializeTables Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.PropertyChanged">
		<summary>
			<para>Occurs when a property value changes.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example adds an event handler for 
       the <see cref="System.Data.DataSet.PropertyChanged"/> event.</para>
			<codelink SampleID="Classic WebData DataSet.PropertyChanged Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.Copy">
		<summary>
			<para>Copies both the structure and data for this <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.DataSet"/> with the same structure (table schemas, relations,
    and constraints) and data as this <see cref="System.Data.DataSet"/>
    .</para>
			<note type="note">
    If these classes have been
    subclassed, the copy will also be of the same subclasses.
 </note>
		</returns>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.Copy"/> method to create a copy of the 
    original <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DataSet.Copy Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.Clone"/>
	</doc>
	<doc for="DataSet.GetChanges">
		<overload>
			<para>Gets a copy of the <see cref="System.Data.DataSet"/> containing all changes made to it
    since it was last loaded, or since <see cref="System.Data.DataSet.AcceptChanges"/>
    was called.</para>
		</overload>
		<summary>
			<para>Gets a copy of the <see cref="System.Data.DataSet"/> that contains all changes made to
    it since it was loaded or <see cref="System.Data.DataSet.AcceptChanges"/>
    was last called.</para>
		</summary>
		<returns>
			<para>A copy of the changes from this <see cref="System.Data.DataSet"/> that can 
    have actions performed on it and subsequently be merged back in using <see cref="System.Data.DataSet.Merge"/>, or
 <see langword="null "/> 
 if none are found.</para>
		</returns>
		<remarks>
			<para>Gets a copy of the <see cref="System.Data.DataSet"/> that contains all changes made to 
    it since it was loaded or <see cref="System.Data.DataSet.AcceptChanges"/> was last called. This copy is
    particularly designed so that it can be merged back in to this original <see cref="System.Data.DataSet"/>.
    Relationship constraints may cause Unchanged parent rows to be included. If no
    rows of these rowStates are found, this method returns
 <see langword="null"/> 
 .</para>
		</remarks>
		<example>
			<para>The following example creates a simple <see cref="System.Data.DataSet"/> with one 
    table, two columns, and ten rows. Two values are changed, and one row is added.
    A subset of the changed data is created using the <see cref="System.Data.DataSet.GetChanges"/>
    method. After reconciling errors, a new column is added to the subset, changing
    the schema. When the <see cref="System.Data.DataSet.Merge"/> method is called with the
 <paramref name="missingSchemaAction"/> set to <see langword="MissingSchemaAction.Add"/>. the 
    new column is added to the original <see cref="System.Data.DataSet"/>
    object's schema.</para>
			<codelink SampleID="Classic WebData DataSet.GetChanges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.HasChanges"/>
	</doc>
	<doc for="DataSet.HasChanges">
		<overload>
			<para>Gets a value indicating whether the <see cref="System.Data.DataSet"/> has changes, including new,
    deleted, or modified rows.</para>
		</overload>
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.DataSet"/> has changes, including new,
    deleted, or modified rows.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/>, if the <see cref="System.Data.DataSet"/> has changes; otherwise, 
 <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.GetChanges"/> method to create a second <see cref="System.Data.DataSet"/> object 
    that is then used to update a data source.</para>
			<codelink SampleID="Classic WebData DataSet.HasChanges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.GetChanges"/>
	</doc>
	<doc for="DataSet.HasSchema">
		<summary>
      Helper for ReadXmlSchema()
      Returns true if the instance of DataSet has no schema.
 </summary>
	</doc>
	<doc for="DataSet.HasSchemaChanged">
		<summary>
			<para> 
       Gets a value indicating whether the schema has changed.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/>, if the schema has changed; otherwise, 
 <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Data.DataSet"/> or 
       creating your own control incorporating the <see cref="System.Data.DataSet"/>. </para>
			<para>The <see cref="System.Data.DataSet.HasSchemaChanged"/> method allows you to monitor when a visual designer 
    causes the schema to change.</para>
		</remarks>
		<example>
			<para>The following example shows a class derived from the <see cref="System.Data.DataSet"/> class. The class 
    includes a function that calls the <see cref="System.Data.DataSet.HasSchemaChanged"/> method.</para>
			<codelink SampleID="Classic WebData DataSet.HasSchemaChanged Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.WriteXmlSchema">
		<overload>
			<para>Writes the <see cref="System.Data.DataSet"/> structure as an XML 
    schema.</para>
		</overload>
		<summary>
			<para>Writes the <see cref="System.Data.DataSet"/> structure as an XML schema to using the specified 
 <see cref="T:System.IO.Stream" qualify="true"/> object.</para>
		</summary>
		<param name="stream">A <see cref="T:System.IO.Stream"/> object used to write to a file.</param>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.WriteXmlSchema"/> method to write the schema for a <see cref="System.Data.DataSet"/> to an XML document. The schema includes table, 
    relation, and constraint definitions. To write a schema to an XML document, use
    the <see cref="System.Data.DataSet.WriteXmlSchema"/> method. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>To write the data to an XML document, use the <see cref="System.Data.DataSet.WriteXml"/> method.</para>
			<para>Classes that derive from the <see cref="T:System.IO.Stream"/> class include <see cref="T:System.IO.BufferedStream"/>, <see cref="T:System.IO.FileStream"/>, 
 <see cref="T:System.IO.MemoryStream"/>, and <see cref="T:System.Net.Sockets.NetworkStream"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="T:System.IO.FileStream"/> object that is passed to the 
 <see cref="System.Data.DataSet.WriteXmlSchema"/> method to write the schema to disk.</para>
			<codelink SampleID="Classic WebData DataSet.WriteXmlSchema Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
	</doc>
	<doc for="DataSet.GetChildRelations">
		<summary>
			<para>Gets the collection of child relations which belong to a specified table.</para>
		</summary>
		<param name="table">The <see cref="System.Data.DataTable"/> whose child <see cref="System.Data.DataRelationCollection"/> is returned.</param>
		<returns>
			<para>The
       child <see cref="System.Data.DataRelationCollection"/> that belongs to the
    <see cref="System.Data.DataTable"/>.</para>
		</returns>
		<example>
			<para>In the following example, for each <see cref="System.Data.DataTable"/> in the
    specified <see cref="System.Data.DataSet"/>, the <see cref="System.Data.DataSet.GetChildRelations"/> method returns all child
 <see cref="System.Data.DataRelation"/> objects. Each <see cref="System.Data.DataRelation"/> is then used as an argument to 
    the <see cref="System.Data.DataRow"/> class's <see cref="System.Data.DataRow.GetChildRows"/> method to return any
    child <see cref="System.Data.DataRow"/> objects. The value of each column in the array is then printed.</para>
			<codelink SampleID="Classic WebData DataSet.GetChildRelations Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataSet.Relations"/>
	</doc>
	<doc for="DataSet.GetParentRelations">
		<summary>
			<para>Gets the collection of parent relations which belong to a specified table.</para>
		</summary>
		<param name="table">The <see cref="System.Data.DataTable"/> whose parent <see cref="System.Data.DataRelationCollection"/> is returned.</param>
		<returns>
			<para>The parent <see cref="System.Data.DataRelationCollection"/> that belongs to the <see cref="System.Data.DataTable"/>.</para>
		</returns>
		<example>
			<para>In the following example, for each <see cref="System.Data.DataTable"/> in the specified <see cref="System.Data.DataSet"/>, the 
 <see cref="System.Data.DataSet.GetParentRelations"/> method returns all child <see cref="System.Data.DataRelation"/> 
 objects. Each <see cref="System.Data.DataRelation"/> is then used as an argument to the <see cref="System.Data.DataRow"/> class's
 <see cref="System.Data.DataRow.GetParentRow"/> method to return any parent <see cref="System.Data.DataRow"/> object. 
 The value of each column in the array is then printed.</para>
			<codelink SampleID="Classic WebData DataSet.GetParentRelations Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.OnPropertyChanged">
		<summary>
			<para>Raises the <see cref="System.Data.DataSet.PropertyChanged"/> event.</para>
		</summary>
		<param name="pcevent">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
		<example>
			<para>The following example shows a class derived from the 
    <see cref="System.Data.DataSet"/> 
    class. The <see cref="System.Data.DataSet.OnPropertyChanged"/>
    event invoked from within a function.</para>
			<codelink SampleID="Classic WebData DataSet.OnPropertyChanged Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.OnMergeFailed">
		<summary>
     Inheriting classes should override this method to handle this event.
     Call base.OnMergeFailed to send this event to any registered event
     listeners.
 </summary>
		<param name="mfevent">
     event
 </param>
	</doc>
	<doc for="DataSet.RaisePropertyChanged">
		<summary>
			<para>Raises the <see cref="System.Data.DataSet.PropertyChanged"/> 
 event.</para>
		</summary>
		<param name="name">The name of the changed property.</param>
		<example>
			<codelink SampleID="Classic WebData DataSet.RaisePropertyChanged Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.Reset">
		<summary>
			<para> Resets the <see cref="System.Data.DataSet"/>
      to its original state. Subclasses should
      override <see cref="System.Data.DataSet.Reset"/>to restore a <see cref="System.Data.DataSet"/> to its original state.</para>
		</summary>
	</doc>
	<doc for="DataSet.WriteXmlSchema2">
		<summary>
			<para>Writes the <see cref="System.Data.DataSet"/> structure as an XML schema to an <see cref="T:System.Xml.XmlWriter"/>
object.</para>
		</summary>
		<param name="writer">The <see cref="T:System.Xml.XmlWriter"/> with which to write.</param>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.WriteXmlSchema"/> method to write the schema for a <see cref="System.Data.DataSet"/> to an XML document. The schema includes table,
   relation, and constraint definitions. To write a schema to an XML document, use
   the <see cref="System.Data.DataSet.WriteXmlSchema"/>
   method. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>To write the data to an XML document, use the <see cref="System.Data.DataSet.WriteXml"/> method.</para>
			<para>One class that inherits from the <see cref="System.Xml.XmlWriter" qualify="true"/> class
is the <see cref="T:System.Xml.XmlTextWriter" qualify="true"/> class.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="T:System.IO.FileStream" qualify="true"/>
object with the specified path. The <see cref="T:System.IO.FileStream"/> object is used to create an
<see cref="T:System.Xml.XMLTextWriter" qualify="true"/> object. The <see cref="System.Data.DataSet.WriteXmlSchema"/> method is then invoked with the <see cref="T:System.Xml.XmlTextWriter"/>
object to write the schema to the disk.</para>
			<codelink SampleID="Classic WebData DataSet.WriteXmlSchema2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
	</doc>
	<doc for="DataSet.HasChanges2">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.DataSet"/> has 
   changes, including new, deleted, or modified rows, filtered by <see cref="System.Data.DataRowState"/> and whether the changes include deleted rows.</para>
		</summary>
		<param name="rowStates">One of the <see cref="System.Data.DataRowState"/> values: <see langword="Detached"/>, <see langword="Unchanged"/>, <see langword="New"/>, <see langword="Deleted"/>, and <see langword="Modified"/>.</param>
		<param name="detectRemovedRows">value indicating whether changes to the the <see cref="System.Data.DataSet"/> include deleted rows.</param>
		<returns>
			<para>
				<see langword="true"/>, if the <see cref="System.Data.DataSet"/> has changes; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="DataSet.TestNewReadXml">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataSet.TestNewReadXml1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataSet.TestNewReadXml2">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataSet.Relations">
		<summary>
			<para> Get the collection of relations that link tables and
      allow navigation from parent tables to child tables.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Data.DataRelationCollection"/> that contains a collection
   of <see cref="System.Data.DataRelation"/> objects; otherwise
   a null value if no <see cref="System.Data.DataRelation"/> objects exist.
   </para>
		</value>
		<example>
			<para> The following example prints the column name of all child
      tables through the <see cref="System.Data.DataSet.Relations"/> property.
      </para>
			<codelink SampleID="Classic WebData DataSet.Relations Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataRelationCollection"/>
	</doc>
	<doc for="DataSet.GetReader">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataSet.OnPropertyChanging">
		<summary>
			<para>Raises the <see cref="System.Data.DataSet.OnPropertyChanging"/> event.</para>
		</summary>
		<param name="pcevent">A <see cref="System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data. </param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For an
      overview, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.DataSet.OnPropertyChanging"/> in a derived class, be sure to call the
      base class's <see cref="System.Data.DataSet.OnPropertyChanging"/> method.
      
   </note>
		</remarks>
	</doc><doc for="DataSet.DataSet1">
		<summary>
			<para>Initializes a new instance of a <see cref="System.Data.DataSet"/>
class with the given name.</para>
		</summary>
		<param name="dataSetName">The name of the <see cref="System.Data.DataSet"/> .</param>
		<remarks>
			<para>A name for the <see cref="System.Data.DataSet"/> is required to ensure that the XML representation
   of the <see cref="System.Data.DataSet"/> always has a name for
   the document element, which is the highest level element in a schema definition. </para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataSet"/>, to which two <see cref="System.Data.DataTable"/>objects are added.</para>
			<codelink SampleID="Classic WebData DataSet.DataSet1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.DataSetName"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataTableCollection"/>
	</doc><doc for="DataSet.DataSetName">
		<summary>
			<para>Gets or sets
      the name of the current <see cref="System.Data.DataSet"/> .</para>
		</summary>
		<value>
			<para>The name of the <see cref="System.Data.DataSet"/> .</para>
		</value>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataSet"/> with the
   given <see cref="System.Data.DataSet.DataSetName"/>.</para>
			<codelink SampleID="Classic WebData DataSet.DataSetName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet()"/>
	</doc><doc for="DataSet.RaisePropertyChanging">
		<summary>
			<para>Sends notification that the specified <see cref="System.Data.DataSet"/> property is about to change.</para>
		</summary>
		<param name="name">The name of the property that is about to change.</param>
	</doc><doc for="DataSet.GetNestedChanges">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataSet.WriteXml6">
		<summary>
			<para>Writes the current data, and optionally the schema, for the <see cref="System.Data.DataSet"/> using the specified <see cref="T:System.Xml.XmlWriter"/> and <see cref="System.Data.XmlWriteMode"/>. To write the schema, set the value for the 
<see langword="XMLWriteMode"/> parameter to <paramref name="WriteSchema"/> .</para>
		</summary>
		<param name="writer">The <see cref="T:System.Xml.XmlWriter"/> with which to write. </param>
		<param name="mode">One of the <see cref="System.Data.XmlWriteMode"/> values.</param>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data 
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and 
   schema, set the <see langword="WriteXmlMode"/> parameter to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and 
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="T:System.IO.FileStream" qualify="true"/> object that is used to create a
   new <see cref="T:System.Xml.XmlTextWriter" qualify="true"/>. The <see cref="T:System.Xml.XmlTextWriter"/> object is used with the <see cref="System.Data.DataSet.WriteXml"/>
   method to write an XML document.</para>
			<codelink SampleID="Classic WebData DataSet.WriteXml6 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc><doc for="DataSet.WriteXml4">
		<summary>
			<para> Writes the current data, and optionally the schema, for the <see cref="System.Data.DataSet"/> using the
   specified <see cref="T:System.IO.Stream" qualify="true"/> and <see cref="System.Data.XmlWriteMode"/>. To write the schema, set the value for the
<see langword="XMLWriteMode"/> parameter to <paramref name="WriteSchema"/> .</para>
		</summary>
		<param name="stream">A <see cref="T:System.IO.Stream"/> object used to write to a file.</param>
		<param name="mode">One of the <see cref="System.Data.XmlWriteMode"/> values.</param>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data 
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and 
   schema, set the <see langword="WriteXmlMode"/> parameter to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and 
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
	</doc><doc for="DataSet.WriteXml5">
		<summary>
			<para> Writes the current data, and optionally the schema, for the <see cref="System.Data.DataSet"/> using the specified <see cref="T:System.IO.TextWriter"/> and <see cref="System.Data.XmlWriteMode"/>. To write the schema, set the value for the 
<see langword="XMLWriteMode"/> parameter to <paramref name="WriteSchema"/> .</para>
		</summary>
		<param name="writer">A <see cref="T:System.IO.TextWriter" qualify="true"/> object used to write the document.</param>
		<param name="mode">One of the <see cref="System.Data.XmlWriteMode"/> values.</param>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data 
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and 
   schema, set the <see langword="WriteXmlMode"/> parameter to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and 
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
		<example>
			<para>The following example first creates a simple <see cref="System.Data.DataSet"/> with one <see cref="System.Data.DataTable"/>, two
   columns, and ten rows. The <see cref="System.Data.DataSet"/> schema and data are written to disk by invoking the
<see cref="System.Data.DataSet.WriteXml"/> method. A second <see cref="System.Data.DataSet"/> is created
   and the <see cref="System.Data.DataSet.ReadXml"/> method is used to fill it with schema and
   data.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXml2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc><doc for="DataSet.WriteXml">
		<overload>
			<para> Writes XML data, and optionally the schema, from the <see cref="System.Data.DataSet"/>.</para>
		</overload>
		<summary>
			<para> Writes the current data for the <see cref="System.Data.DataSet"/> using the
   specified <see cref="T:System.IO.Stream" qualify="true"/>
   .</para>
		</summary>
		<param name="stream">A <see cref="T:System.IO.Stream"/> object used to write to a file. </param>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data 
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and schema, use one of the overloads 
   that includes the <see langword="WriteXmlMode"/> parameter, and set its value to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and 
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="T:System.IO.FileStream" qualify="true"/>
object. The objects is then with the <see cref="System.Data.DataSet.WriteXml"/>
method to write
an XML document.</para>
			<codelink SampleID="Classic WebData DataSet.WriteXml Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc><doc for="DataSet.WriteXml1">
		<summary>
			<para> Writes the current data for the <see cref="System.Data.DataSet"/> using the specified <see cref="System.IO.TextWriter"/>
.</para>
		</summary>
		<param name="writer">The <see cref="System.IO.TextWriter"/> object with which to write.</param>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data 
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and schema, use one of the overloads 
   that includes the <see langword="WriteXmlMode"/> parameter, and set its value to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and 
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
	</doc><doc for="DataSet.WriteXml2">
		<summary>
			<para> Writes the current data for the <see cref="System.Data.DataSet"/> to the specified <see cref="T:System.Xml.XmlWriter"/>
.</para>
		</summary>
		<param name="writer">The <see cref="T:System.Xml.XmlWriter"/> with which to write.</param>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data 
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and schema, use one of the overloads 
   that includes the <see langword="WriteXmlMode"/> parameter, and set its value to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and 
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
	</doc><doc for="DataSet.DataSet">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.DataSet"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.DataSet"/> class.</para>
		</summary>
		<remarks>
			<para>This implementation of the <see cref="System.Data.DataSet"/> constructor
   takes no parameters, and creates a default name, "NewDataSet", for the new instance. </para>
			<para>A name for the <see cref="System.Data.DataSet"/> is required to ensure that the XML representation
of the <see cref="System.Data.DataSet"/> always has a name for
the document element, which is the highest level element in a schema definition. </para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataSet"/> , and adds two <see cref="System.Data.DataTable"/> objects to it.</para>
			<codelink SampleID="Classic WebData DataSet.DataSet Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataTableCollection"/>
	</doc><doc for="DataSet.Locale">
		<summary>
			<para>Gets or sets the locale information used to compare strings within the table.</para>
		</summary>
		<value>
			<para>A <see cref="T:System.Globalization.CultureInfo"/> that contains data about the user's
   machine locale. The default is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Locale"/> property specifies the locale for which sorting
   will apply. </para>
			<para>By default, setting the <see cref="System.Data.DataSet.Locale"/> for
a <see cref="System.Data.DataSet"/>
also sets the <see cref="System.Data.DataSet.Locale"/> for each <see cref="System.Data.DataTable"/> object in that <see langword="DataSet"/>
to the same value.</para>
		</remarks>
		<example>
			<para>The following example gets the <see cref="System.Globalization.CultureInfo"/> for a <see cref="System.Data.DataSet"/> and prints
   the <see cref="System.Globalization.CultureInfo.DisplayName"/> and <see cref="System.Globalization.CultureInfo.EnglishName"/> properties.</para>
			<codelink SampleID="Classic WebData DataSet.Locale Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Globalization.CultureInfo"/>
	</doc><doc for="DataSet.Clone">
		<summary>
			<para>Copies the structure of the <see cref="System.Data.DataSet"/>, including all <see cref="System.Data.DataTable"/> schemas, relations, and constraints. Does not copy any
   data.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.DataSet"/> with the same schema as the current <see cref="System.Data.DataSet"/>, but none of the 
   data.</para>
		</returns>
		<remarks>
			<note type="note">
      If these classes have been
      subclassed, the clone will also be of the same subclasses.
      
   </note>
		</remarks>
		<example>
			<para>The following example creates a clone of a <see cref="System.Data.DataSet"/> object's schema.</para>
			<codelink SampleID="Classic WebData DataSet.Clone Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.Copy"/>
	</doc><doc for="DataSet.DataSet2">
		<summary>
   This member supports the .NET Framework infrastructure
   and is not intended to be used directly from your code.
</summary>
		<param name="info">The data needed to serialize or deserialize an object.</param>
		<param name="context">The source and destination of a given serialized stream.</param>
	</doc>
	<doc for="DataSet.GetChanges1">
		<summary>
			<para>Gets a copy of the <see cref="System.Data.DataSet"/> containing all changes made to it since it was last
   loaded, or since <see cref="System.Data.DataSet.AcceptChanges"/> was called, filtered by <see cref="System.Data.DataRowState"/>.</para>
		</summary>
		<param name="rowStates">One of the <see cref="System.Data.DataRowState"/> values.</param>
		<returns>
			<para>A filtered copy of the <see cref="System.Data.DataSet"/> that can have actions performed
   on it, and subsequently be merged back in using <see cref="System.Data.DataSet.Merge"/>. If
   no rows of the desired <see cref="System.Data.DataRowState"/> are found, the method returns
<see langword="null"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.GetChanges"/> method is used to produce a
   second <see cref="System.Data.DataSet"/> object which contains only the changes introduced
   into the original. Use the <paramref name="rowStates"/> argument to specify the type of
   changes the new object should include.</para>
			<para>This returned copy is designed to be merged back in to
   this original <see cref="System.Data.DataSet"/>. Relationship constraints may cause parent
   rows marked <see langword="Unchanged"/> to be included. If no rows of the desired
<see cref="System.Data.DataRowState"/> are found, the <see cref="System.Data.DataSet.GetChanges"/>
method returns <see langword="null"/>
.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.GetChanges"/> method to create a second <see cref="System.Data.DataSet"/> object
   that is then used to update a data source.</para>
			<codelink SampleID="Classic WebData DataSet.GetChanges1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.GetChanges"/>
	</doc>
	<doc for="DataSet.RejectChanges">
		<summary>
			<para>Rolls back all the changes made to the <see cref="System.Data.DataSet"/> since it was
   created, or since the last time <see cref="System.Data.DataSet.AcceptChanges" qualify="true"/> was called.</para>
		</summary>
		<remarks>
			<para>Invoke the <see cref="System.Data.DataSet.RejectChanges" qualify="true"/> to call the <see cref="System.Data.DataTable.RejectChanges" qualify="true"/> method on all <see cref="System.Data.DataTable"/> objects contained by the <see cref="System.Data.DataSet"/>
.</para>
			<para><see cref="System.Data.DataRow"/>
objects contained by the <see cref="System.Data.DataSet"/> can each be set into edit mode by invoking the
<see cref="System.Data.DataRow.BeginEdit" qualify="true"/> method. After invoking the <see cref="System.Data.DataRow.EndEdit" qualify="true"/>
method, changes can be rejected by calling the <see cref="System.Data.DataTable.RejectChanges" qualify="true"/> on the <see cref="System.Data.DataTable"/> to which the <see cref="System.Data.DataRow"/> objects belong. </para>
			<para>When the <see cref="System.Data.DataTable.RejectChanges" qualify="true"/> method is
called, any rows still in edit-mode cancel their edits. New rows are removed.
Modified and deleted rows return back to their original state
(<see langword="DataRowState.Unchanged"/>
).</para>
		</remarks>
		<example>
			<para>The following example shows a class derived from the
   <see cref="System.Data.DataSet"/>
   class. The <see cref="System.Data.DataSet.RejectChanges"/> event invoked from within a function.</para>
			<codelink SampleID="Classic WebData DataSet.RejectChanges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.AcceptChanges"/>
	</doc>
	<doc for="DataSet.BeginInit"><nodoc/>
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
	</doc><doc for="DataSet.EndInit">
		<nodoc/>
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
	</doc><doc for="DataSet.GetSerializationData"><nodoc/>
		<summary>
   This member supports the .NET Framework
   infrastructure and is not intended to be used directly from your code.
</summary>
		<param name="info">The data needed to serialize or deserialize an object.</param>
		<param name="context">The source and destination of a given serialized stream.</param>
		<returns>
			<para><see cref="System.Runtime.Serialization.SerializationInfo"/> and <see cref="System.Runtime.Serialization.StreamingContext"/> information.</para>
		</returns>
	</doc><doc for="DataSet.GetSchemaSerializable">
		<nodoc/>
		<summary>
			<para>This member supports the .NET Framework infrastructure
      and is not intended to be used directly from your code.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Xml.Schema.XmlSchema"/> object .</para>
		</returns>
	</doc><doc for="DataSet.ReadXmlSerializable">
		<nodoc/>
		<summary>
			<para>This member supports the .NET Framework infrastructure
      and is not intended to be used directly from your code.</para>
		</summary>
		<param name="reader">The <see cref="System.Xml.XmlReader"/> object.</param>
	</doc><doc for="DataSet.HasChanges1">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.DataSet"/> has changes, including new,
   deleted, or modified rows, filtered by <see cref="System.Data.DataRowState"/>.</para>
		</summary>
		<param name="rowStates">One of the <see cref="System.Data.DataRowState"/> values.</param>
		<returns>
			<para><see langword="true"/>, if the <see cref="System.Data.DataSet"/> has changes; otherwise,
<see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>Examine the <see cref="System.Data.DataSet.HasChanges"/> property of the <see langword="DataSet"/> before invoking the <see cref="System.Data.DataSet.GetChanges"/>
method.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.GetChanges"/> method to create a second <see cref="System.Data.DataSet"/> object
   that is then used to update a data source.</para>
			<codelink SampleID="Classic WebData DataSet.GetChanges1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.GetChanges"/>
	</doc>
	<doc for="DataSet.InferXmlSchema1">
		<summary>
			<para>Applies the XML schema from the specified <see cref="System.IO.Stream"/> to the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="stream">The <see langword="Stream"/> from which to read the schema. </param>
		<param name="nsArray">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</param>
	</doc>
	<doc for="DataSet.InferXmlSchema2">
		<summary>
			<para>Applies the XML schema from the specified <see cref="System.IO.TextReader"/> to the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="reader">The <see langword="TextReader"/> from which to read the schema.</param>
		<param name="nsArray">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</param>
	</doc>
	<doc for="DataSet.OnRemoveRelation">
		<summary>
			<para> Occurs when a <see cref="System.Data.DataRelation"/> object is removed from a <see cref="System.Data.DataTable"/>.
   </para>
		</summary>
		<param name="relation">The <see cref="System.Data.DataRelation"/> being removed.</param>
		<remarks>
			<para>This method should be overridden by
      subclasses to restrict tables being removed</para>
		</remarks>
	</doc>
	<doc for="DataSet.CaseSensitive">
		<summary>
			<para>Gets or sets a value indicating whether string
      comparisons within <see cref="System.Data.DataTable"/>
      objects are
      case-sensitive.</para>
		</summary>
		<value>
			<para><see langword="true "/>if string comparisons are
   case-sensitive; otherwise, <see langword="false"/>. The default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataSet.CaseSensitive"/> property affects how sorting, searching,
   and filtering operations are performed on each <see cref="System.Data.DataTable"/> object contained in a <see cref="System.Data.DataSet"/> when using the <see cref="System.Data.DataTable.Select"/> method.</para>
			<para>By default, setting the <see cref="System.Data.DataSet.CaseSensitive"/> property for a <see cref="System.Data.DataSet"/> also sets the <see cref="System.Data.DataTable.CaseSensitive"/>
property of each associated <see cref="System.Data.DataTable"/> to the same value.</para>
		</remarks>
		<example>
			<para>The following example toggles the <see cref="System.Data.DataSet.CaseSensitive"/> property.</para>
			<codelink SampleID="Classic WebData DataSet.CaseSensitive Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.CaseSensitive"/>
	</doc>
	<doc for="DataSet.HasErrors">
		<summary>
			<para>Gets a value indicating whether there are errors in 
      any of the <see cref="System.Data.DataTable"/> objects
      within this
   <see cref="System.Data.DataSet"/> .</para>
		</summary>
		<value>
			<para><see langword="true "/>if any table contains an error;otherwise,
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>Each <see cref="System.Data.DataTable"/> in a <see cref="System.Data.DataSet"/> also has a
<see cref="System.Data.DataTable.HasErrors"/> property. Use the <see langword="HasErrors"/> property of the
<see langword="DataSet"/> first, to determine if any table has errors, before checking individual 
<see cref="System.Data.DataTable"/> objects. If a <see langword="DataTable"/> has errors, the 
<see cref="System.Data.DataTable.GetErrors"/> method returns an array of 
<see cref="System.Data.DataRow"/>
objects containing the errors.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.HasErrors"/> property to determine whether a
<see cref="System.Data.DataSet"/>
object contains errors. If so, the errors for each <see cref="System.Data.DataRow"/> in each
<see cref="System.Data.DataTable"/>
are printed.</para>
			<codelink SampleID="Classic WebData DataSet.HasErrors Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.GetChanges"/>
	</doc>
	<doc for="DataSet.Namespace">
		<summary>
			<para>Gets or sets the namespace of the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<value>
			<para>The namespace of the <see cref="System.Data.DataSet"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The namespace already has data.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Namespace"/> property is used when reading and writing
   an XML document into the <see cref="System.Data.DataSet"/> using the <see cref="System.Data.DataSet.ReadXml"/> , <see cref="System.Data.DataSet.WriteXml"/>, <see cref="System.Data.DataSet.ReadXmlSchema"/>, or
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods.</para>
			<para> The namespace of an XML document is used to
   scope XML attributes and elements when read into a <see cref="System.Data.DataSet"/>. For example, if a <see cref="System.Data.DataSet"/> contains a schema that was read from a document
   with the namespace "myCompany," and an attempt is made to read data
   only from a document with
   a different namespace, any data that does not correspond to the existing
   schema will be ignored.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Data.DataSet.Prefix"/> before calling the
<see cref="System.Data.DataSet.ReadXml"/> method.</para>
			<codelink SampleID="Classic WebData DataSet.Namespace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.Prefix"/>
	</doc>
	<doc for="DataSet.Prefix">
		<summary>
			<para>Gets or sets an XML prefix that aliases the namespace of the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<value>
			<para>The XML prefix for the <see cref="System.Data.DataSet"/> namespace.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Prefix"/> 
property is
used throughout an XML document to identify elements which
belong to the namespace of the <see cref="System.Data.DataSet"/> object (as set by the <see cref="System.Data.DataSet.Namespace"/>
property). </para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Data.DataSet.Prefix"/> before calling the <see cref="System.Data.DataSet.ReadXml"/> method.</para>
			<codelink SampleID="Classic WebData DataSet.Namespace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.Namespace"/>
	</doc>
	<doc for="DataSet.Tables">
		<summary>
			<para>Gets the collection of tables contained in the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.DataTableCollection"/> contained by this
<see cref="System.Data.DataSet"/>; otherwise
   a null value if no <see cref="System.Data.DataTable"/> objects exist.</para>
		</value>
		<remarks>
			<para>To add tables to the collection, use <see cref="System.Data.DataTableCollection.Add"/> method of the <see cref="System.Data.DataTableCollection"/> . To remove tables, use the <see cref="System.Data.DataTableCollection.Remove"/>
method.</para>
		</remarks>
		<example>
			<para>The following example returns the <see cref="System.Data.DataSet"/> object's
<see cref="System.Data.DataTableCollection"/>, and prints the columns and rows in each table.</para>
			<codelink SampleID="Classic WebData DataSet.Tables Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataTableCollection"/>
	</doc>
	<doc for="DataSet.MergeFailed">
		<summary>
			<para>Occurs when a target and source <see cref="System.Data.DataRow"/> have the
   same primary key value, and <see cref="System.Data.DataSet.EnforceConstraints"/> is set to
   true.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> 
      The following example demonstrates the use of
      the <see cref="System.Data.DataSet.MergeFailed"/>
      event.</para>
			<codelink SampleID="Classic WebData DataSet.MergeFailed Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.Clear">
		<summary>
			<para>Clears the <see cref="System.Data.DataSet"/> of any data by removing all rows in all tables.</para>
		</summary>
		<remarks>
			<para>If the <see cref="System.Data.DataSet"/> is bound to an <see cref="System.Xml.XmlDataDocument"/>, calling <see cref="System.Data.DataSet.Clear" qualify="true"/> or
<see cref="System.Data.DataTable.Clear" qualify="true"/> raises the <see cref="System.NotSupportedException"/>. To avoid this situation, traverse each table, removing each row 
   one at a time.</para>
		</remarks>
		<example>
			<para>The following example clears the <see cref="System.Data.DataSet"/> of all
   rows in all tables.</para>
			<codelink SampleID="Classic WebData DataSet.Clear Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.GetXml">
		<summary>
			<para>Returns the XML
      representation of the data stored in the <see cref="System.Data.DataSet"/>.
      </para>
		</summary>
		<returns>
			<para>A string that is a representation of the data stored in the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<remarks>
			<para> Calling this method is identical to
      calling <see cref="System.Data.DataSet.WriteXml"/> with <paramref name="XmlWriteMode "/>
      set to
      <see langword="IgnoreSchema"/>.</para>
			<note type="note">
				<see cref="System.Data.DataSet.GetXml"/> returns XML as a string, and therefore, requires more overhead than
      using <see cref="System.Data.DataSet.WriteXml"/> to write XML to a file.
      
      </note>
		</remarks>
		<example>
			<para>
      The following example creates a <see cref="System.Data.DataSet"/> and <see cref="System.Data.DataTable"/>, adds sample data, and then displays the data in XML
      format.</para>
			<codelink SampleID="Classic WebData DataSet.GetXml Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.GetXmlSchema">
		<summary>
			<para>Returns
      the XSD schema for the XML representation of the data stored in the
      <see cref="System.Data.DataSet"/>.
      </para>
		</summary>
		<returns>
			<para>String that is the XSD schema for the XML representation of the
      data stored in the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<remarks>
			<para>Calling this method is identical to calling
      <see cref="System.Data.DataSet.WriteXmlSchema"/>, except that only the
      primary schema is written.</para>
			<note type="note">
				<see cref="System.Data.DataSet.GetXmlSchema"/> returns XML as a string, and
      therefore, requires more overhead than using <see cref="System.Data.DataSet.WriteXmlSchema"/> to write XML to a file.
      
      </note>
		</remarks>
		<example>
			<para>
      The following example creates a <see cref="System.Data.DataSet"/> and <see cref="System.Data.DataTable"/>, and then displays the schema in XML
      format.</para>
			<codelink SampleID="Classic WebData DataSet.GetXmlSchema Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.ExtendedProperties">
		<summary>
			<para>Gets the collection of customized user information
      associated with the <see langword="DataSet"/> .</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.PropertyCollection"/> with all custom user information.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ExtendedProperties"/> property
   enables you to store custom information with the <see langword="DataSet"/>
   . For example, you might store a time when the data should be
   refreshed.</para>
			<para>Extended properties must be of type <see cref="System.String"/> if you want them persisted
when the <see cref="System.Data.DataSet"/> is written as XML.</para>
		</remarks>
		<example>
			<para>The following example adds a custom property to the
   <see cref="System.Data.PropertyCollection"/> returned by the <see cref="System.Data.DataColumn.ExtendedProperties"/> property. The second example retrieves the custom
      property.</para>
			<codelink SampleID="Classic WebData DataSet.ExtendedProperties Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.InferXmlSchema">
		<overload>
			<para> Applies XML schema to the <see cref="System.Data.DataSet"/>.</para>
		</overload>
		<summary>
			<para>Applies the XML schema from the specified <see cref="System.Xml.XmlReader"/> to the <see cref="System.Data.DataSet"/></para>
		</summary>
		<param name="reader">The <see langword="XMLReader"/> from which to read the schema.</param>
		<param name="nsArray">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</param>
	</doc>
	<doc for="DataSet.ShouldSerializeTables">
		<summary>
			<para>Gets a value indicating whether <see cref="System.Data.DataSet.Tables"/> property should be persisted.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if the property value has been changed from its
   default; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method only if you are either creating a designer for
      the <see cref="System.Data.DataSet"/>, or creating your own control incorporating the
   <see cref="System.Data.DataSet"/>. </para>
		</remarks>
		<example>
			<para>The following example shows a class derived from the
   <see cref="System.Data.DataSet"/>
   class. The <see cref="System.Data.DataSet.ShouldSerializeTables"/>
   method is called from within functions in
   the derived class.</para>
			<codelink SampleID="Classic WebData DataSet.ShouldSerializeTables Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.OnRemoveTable">
		<summary>
			<para>Occurs when a <see cref="System.Data.DataTable"/> is removed from a <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="table">The <see cref="System.Data.DataTable"/> being removed.</param>
		<remarks>
			<para>This method can be overridden by subclasses to restrict tables from being
      removed.</para>
		</remarks>
		<example>
			<para>The following example shows a class derived from the <see cref="System.Data.DataSet"/> with the
<see cref="System.Data.DataSet.OnRemoveTable"/> method overridden. </para>
			<codelink SampleID="Classic WebData DataSet.OnRemoveTable Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.ShouldSerializeRelations">
		<summary>
			<para>Gets a value indicating whether <see cref="Relations"/> property should be persisted.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if the property value has been changed from its
   default; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> You typically use this method if you are either creating a designer for
      the <see cref="System.Data.DataSet"/>, or creating your own control incorporating the
   <see cref="System.Data.DataSet"/>. </para>
		</remarks>
		<example>
			<para>The following examples shows a class derived from the
   <see cref="System.Data.DataSet"/>
   class. The <see cref="System.Data.DataSet.Reset"/> and <see cref="System.Data.DataSet.ShouldSerializeRelations"/> methods are invoked from within
   functions in the derived class. </para>
			<codelink SampleID="Classic WebData DataSet.ShouldSerializeRelations Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataSet.WriteXmlSchema1">
		<summary>
			<para>Writes the <see cref="System.Data.DataSet"/> structure as an XML schema to a <see cref="System.IO.TextWriter"/>
object.</para>
		</summary>
		<param name="writer">The <see cref="System.IO.TextWriter"/> object with which to write.</param>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.WriteXmlSchema"/> method to write the schema for a <see cref="System.Data.DataSet"/> to an XML document. The schema includes table,
   relation, and constraint definitions. To write a schema to an XML document, use
   the <see cref="System.Data.DataSet.WriteXmlSchema"/>
   method. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>To write the data to an XML document, use the <see cref="System.Data.DataSet.WriteXml"/> method.</para>
			<para>Classes the derive from the <see cref="T:System.IO.TextWriter" qualify="true"/>
class include the <see cref="T:System.Web.HttpWriter" qualify="true"/>, <see cref="T:System.CodeDOM.Compiler.IndentedTextWriter" qualify="true"/>, <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true"/>, <see cref="T:System.IO.StreamWriter" qualify="true"/>, and <see cref="T:System.IO.StringWriter" qualify="true"/> .</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="T:System.Text.StringBuilder" qualify="true"/> object to that is used to
   create a new <see cref="T:System.IO.StringWriter" qualify="true"/>. The <see cref="T:System.IO.StringWriter"/> is passed to the <see cref="System.Data.DataSet.WriteXmlSchema"/> method, and the resulting string is printed to the
   console window.</para>
			<codelink SampleID="Classic WebData DataSet.WriteXmlSchema1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
	</doc>
	<doc for="DataSet.DefaultViewManager">
		<summary>
			<para>Gets a custom view of the data contained in the <see cref="System.Data.DataSet"/> to allow filtering, searching, and
   navigating using a custom <see cref="System.Data.DataViewManager"/>
   .</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.DataViewManager"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataViewManager"/> returned by the <see cref="System.Data.DataSet.DefaultViewManager"/> property allows you to create
   custom settings for each <see cref="System.Data.DataTable"/> in the <see cref="System.Data.DataSet"/>. </para>
			<para>When you obtain a <see cref="System.Data.DataView"/> from a <see cref="System.Data.DataTable"/>, the sort order, filtering, and 
<see cref="System.Data.DataViewRowState"/> are 
configured according to the settings in the <see cref="System.Data.DataSet.DefaultViewManager"/> property.</para>
		</remarks>
		<example>
			<para>The following example gets the default <see cref="System.Data.DataViewManager"/> for a <see cref="System.Data.DataSet"/>, and adds
   a <see cref="System.Data.DataTable"/> to the <see cref="System.Data.DataTableCollection"/>.</para>
			<codelink SampleID="Classic WebData DataSet.DefaultViewManager Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataTableCollection"/>
		<seealso cref="System.Data.DataViewRowState"/>
	</doc>
	<doc for="DataSet.ReadXml">
		<overload>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/>.</para>
		</overload>
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the
   specified <see cref="T:System.Xml.XmlReader" qualify="true"/>.</para>
		</summary>
		<param name="reader">The <see cref="System.Xml.XmlReader"/> from which to read.</param>
		<returns>
			<para>The
   <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is
   used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the
   same column in the same table defined with different datatypes) an exception is
   raised.</para>
			<para>If
   no in-line schema is specified, the relational structure is extended through
   inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through
   inference in order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<para><see cref="T:System.Xml.XmlTextReader" qualify="true"/> inherits from <see cref="T:System.Xml.XmlReader"/> .</para>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
		<example>
			<para>The following example first creates a simple <see cref="System.Data.DataSet"/> with one <see cref="System.Data.DataTable"/>, two
   columns, and ten rows. The <see cref="System.Data.DataSet"/> schema and data are written to disk by invoking the
<see cref="System.Data.DataSet.WriteXml"/> method. A second <see cref="System.Data.DataSet"/> is created
   and the <see cref="System.Data.DataSet.ReadXml"/> method is used to fill it with schema and data.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXml Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc>
	<doc for="DataSet.ReadXmlSchema">
		<overload>
			<para>Reads an XML schema into the <see cref="System.Data.DataSet"/>.</para>
		</overload>
		<summary>
			<para>Reads the XML schema from the specified <see cref="T:System.Xml.XmlReader"/> into the <see cref="System.Data.DataSet"/>
.</para>
		</summary>
		<param name="reader">The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.ReadXmlSchema"/> method to create the schema for a <see cref="System.Data.DataSet"/>. The
   schema includes table, relation, and constraint definitions. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>The <see cref="System.Data.DataSet.ReadXmlSchema"/> method is generally invoked before invoking
the <see cref="System.Data.DataSet.ReadXml"/> method which is
used to fill the <see cref="System.Data.DataSet"/>.</para>
			<para>The <see cref="T:System.Xml.XmlReader" qualify="true"/> class is abstract. A class that inherits
from the XmlReader is the <see cref="T:System.Xml.XmlTextReader" qualify="true"/> class.</para>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is be thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/> with
<see cref="System.Data.DataSet.ReadXmlSchema"/> . This exception does not occur if 
   you are using .NET Framework version 1.0.
</note>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataSet"/> and
<see cref="T:System.IO.FileStream" qualify="true"/> object. The <see cref="T:System.IO.FileStream"/> object, created with a file path
   and file name, is used to create an <see cref="T:System.Xml.XmlTextReader" qualify="true"/> that is passed as an argument to
   the <see cref="System.Data.DataSet.ReadXmlSchema"/> method.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXmlSchema Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
	</doc>
	<doc for="DataSet.ReadXmlSchema1">
		<summary>
			<para>Reads the XML schema from the specified <see cref="System.IO.Stream"/> into the
<see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="stream">The <see cref="System.IO.Stream"/> from which to read.</param>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.ReadXmlSchema"/> method to create the schema for a <see cref="System.Data.DataSet"/>. The schema includes table, relation, and
   constraint definitions. To write a schema to an XML document, use the <see cref="System.Data.DataSet.WriteXmlSchema"/>
   method. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>The <see cref="System.Data.DataSet.ReadXmlSchema"/> method is generally invoked before invoking
the <see cref="System.Data.DataSet.ReadXml"/> method which is
used to fill the <see cref="System.Data.DataSet"/>.</para>
			<para>Classes that derive from the <see cref="T:System.IO.Stream"/> class include <see cref="T:System.IO.BufferedStream"/>, <see cref="T:System.IO.FileStream"/>,
<see cref="T:System.IO.MemoryStream"/>, and <see cref="T:System.Net.Sockets.NetworkStream"/>.</para>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is be thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/> with
<see cref="System.Data.DataSet.ReadXmlSchema"/> . This exception does not occur if 
   you are using .NET Framework version 1.0.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="T:System.IO.FileStream"/> object to read an XML schema with, and invokes the
<see cref="System.Data.DataSet.ReadXmlSchema"/> method with the object.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXmlSchema1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc>
	<doc for="DataSet.ReadXmlSchema2">
		<summary>
			<para>Reads the XML schema from the specified <see cref="System.IO.TextReader"/> into the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="reader">The <see cref="System.IO.TextReader"/> from which to read.</param>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.ReadXmlSchema"/> method to create the schema for a <see cref="System.Data.DataSet"/>. The schema includes table, relation, and
   constraint definitions. To write a schema to an XML document, use the <see cref="System.Data.DataSet.WriteXmlSchema"/>
   method. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>The <see cref="System.Data.DataSet.ReadXmlSchema"/> method is generally invoked before invoking
the <see cref="System.Data.DataSet.ReadXml"/> method which is used to fill the <see cref="System.Data.DataSet"/>.</para>
			<para>Classes that inherit from the <see cref="T:System.IO.TextReader"/> class include the <see cref="T:System.IO.StreamReader"/> and
<see cref="T:System.IO.StringReader"/> classes.</para>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is be thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/> with
<see cref="System.Data.DataSet.ReadXmlSchema"/> . This exception does not occur if 
   you are using .NET Framework version 1.0.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="T:System.IO.StreamReader"/> object to read a schema with, and invokes the
<see cref="System.Data.DataSet.ReadXmlSchema"/> method with the object.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXmlSchema2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc>
	<doc for="DataSet.ReadXml1">
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified <see cref="T:System.IO.Stream" qualify="true"/>.</para>
		</summary>
		<param name="stream">An object that derives from <see cref="T:System.IO.Stream"/>.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is used to extend the
   existing relational structure prior to loading the data. If there are any
   conflicts (for example, the same column in the same table defined with different
   datatypes) an exception is raised.</para>
			<para>If no in-line schema is specified, the relational structure is extended
   through inference, as necessary, according to the structure of the XML
   document. If the schema cannot be extended through inference in
   order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
		<example>
			<para>The following example first creates a simple <see cref="System.Data.DataSet"/> with one <see cref="System.Data.DataTable"/>, two
   columns, and ten rows. The <see cref="System.Data.DataSet"/> schema and data are written to disk by invoking the
<see cref="System.Data.DataSet.WriteXml"/> method. A second <see cref="System.Data.DataSet"/> is created
   and the <see cref="System.Data.DataSet.ReadXml"/> method is used to fill it with schema and
   data.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXml1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc>
	<doc for="DataSet.ReadXml2">
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified <see cref="T:System.IO.TextReader" qualify="true"/>.</para>
		</summary>
		<param name="reader">The <see langword="TextReader"/> from which to read the schema and data.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is used to extend the
   existing relational structure prior to loading the data. If there are any
   conflicts (for example, the same column in the same table defined with different
   datatypes) an exception is raised.</para>
			<para>If no in-line schema is specified, the relational structure is extended
   through inference, as necessary, according to the structure of the XML
   document. If the schema cannot be extended through inference in
   order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code><para>Classes that inherit from the <see cref="T:System.IO.TextReader"/> class include the <see cref="T:System.IO.StreamReader"/> and
<see cref="T:System.IO.StringReader"/> classes.</para>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
		<example>
			<para>The following example first creates a simple <see cref="System.Data.DataSet"/> with one <see cref="System.Data.DataTable"/>, two
   columns, and ten rows. The <see cref="System.Data.DataSet"/> schema and data are written to disk by invoking the
<see cref="System.Data.DataSet.WriteXml"/> method. A second <see cref="System.Data.DataSet"/> is created
   and the <see cref="System.Data.DataSet.ReadXml"/> method is used to fill it with schema and
   data.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXml2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc>
	<doc for="DataSet.ReadXml4">
		<overload>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/>.
   </para>
		</overload>
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified
<see cref="T:System.Xml.XmlReader" qualify="true"/> and <see cref="System.Data.XmlReadMode"/>.</para>
		</summary>
		<param name="reader">The <see cref="System.Xml.XmlReader"/> from which to read.</param>
		<param name="mode">One of the <see cref="System.Data.XmlReadMode"/> values.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is used to extend the
   existing relational structure prior to loading the data. If there are any
   conflicts (for example, the same column in the same table defined with different
   datatypes) an exception is raised.</para>
			<para>If no in-line schema is specified, the relational structure is extended
   through inference, as necessary, according to the structure of the XML
   document. If the schema cannot be extended through inference in
   order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
	</doc>
	<doc for="DataSet.ReadXml5">
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified <see cref="T:System.IO.Stream" qualify="true"/> and <see cref="System.Data.XmlReadMode"/>.</para>
		</summary>
		<param name="stream">The <see cref="System.IO.Stream"/> from which to read.</param>
		<param name="mode">One of the <see cref="System.Data.XmlReadMode"/> values.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is
   used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the
   same column in the same table defined with different datatypes) an exception is
   raised.</para>
			<para>If
   no in-line schema is specified, the relational structure is extended through
   inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through
   inference in order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
	</doc>
	<doc for="DataSet.ReadXml6">
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified <see cref="T:System.IO.TextReader" qualify="true"/> and <see cref="System.Data.XmlReadMode"/>.</para>
		</summary>
		<param name="reader">The <see cref="System.IO.TextReader"/> from which to read.</param>
		<param name="mode">One of the <see cref="System.Data.XmlReadMode"/> values.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is
   used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the
   same column in the same table defined with different datatypes) an exception is
   raised.</para>
			<para>If
   no in-line schema is specified, the relational structure is extended through
   inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through
   inference in order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
	</doc>
	<doc for="DataSet.AcceptChanges">
		<summary>
			<para>Commits all the changes made to this <see cref="System.Data.DataSet"/> since it was loaded or since the last
   time <see cref="System.Data.DataSet.AcceptChanges"/> was called.</para>
		</summary>
		<remarks>
			<para>Both the <see cref="System.Data.DataRow"/> and <see cref="System.Data.DataTable"/> classes
   also have <see cref="System.Data.DataSet.AcceptChanges"/> methods. Calling <see cref="System.Data.DataTable.AcceptChanges"/> at the <see cref="System.Data.DataTable"/> level
   causes the <see cref="System.Data.DataRow.AcceptChanges"/> method for each <see cref="System.Data.DataRow"/> to be
   called. Similarly, invoking <see cref="System.Data.DataSet.AcceptChanges"/> on the <see cref="System.Data.DataSet"/> causes <see cref="System.Data.DataTable.AcceptChanges"/> to be called on each table within the <see cref="System.Data.DataSet"/> . In this manner, you
   have multiple levels at which the method can be invoked. Calling
   the
<see cref="System.Data.DataSet.AcceptChanges"/> of 
   the <see cref="System.Data.DataSet"/> enables you to invoke the method on all subordinate objects (for example,
   tables and rows) with one call.</para>
			<para>When you call <see langword="AcceptChanges"/> on the
<see langword="DataSet"/>, any <see cref="System.Data.DataRow"/> objects still in edit-mode successfully end their
edits. The <see cref="System.Data.DataRow.RowState"/> property of each <see cref="System.Data.DataRow"/> also changes; <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> and <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>
rows become <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, and <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
rows are removed.</para>
			<para>If the <see langword="DataSet"/> contains <see cref="System.Data.ForeignKeyConstraint"/> objects, invoking the <see langword="AcceptChanges"/> method also causes the <see cref="System.Data.ForeignKeyConstraint.AcceptRejectRule"/> to be enforced.</para>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Data.DataRow"/> to a <see cref="System.Data.DataTable"/> in a <see cref="System.Data.DataSet"/>. The
<see cref="System.Data.DataSet.AcceptChanges"/> method is then called on the <see cref="System.Data.DataSet"/>, which
   cascades to all <see cref="System.Data.DataTable"/> objects it contains.</para>
			<codelink SampleID="Classic WebData DataSet.AcceptChanges" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.AcceptChanges"/>
		<seealso cref="System.Data.ForeignKeyConstraint.AcceptRejectRule"/>
		<seealso cref="System.Data.DataRow.BeginEdit"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.ForeignKeyConstraint"/>
	</doc><doc for="DataSet.Merge">
		<overload>
			<para>Merges a specified <see cref="System.Data.DataSet"/>, <see cref="System.Data.DataTable"/>,
   or array of <see cref="System.Data.DataRow"/> objects into the current <see langword="DataSet"/> or <see langword="DataTable"/>.</para>
		</overload>
		<summary>
			<para>Merges a specified <see cref="System.Data.DataSet"/> and its schema into the current <see langword="DataSet"/>.</para>
		</summary>
		<param name="dataSet">The <see langword="DataSet"/> whose data and schema will be merged.</param>
		<exception cref="System.Data.ConstraintException">One or more constraints cannot be enabled.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="dataSet"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/>
method is used to merge two <see cref="System.Data.DataSet"/> objects that have largely similar schemas. A merge
is typically used on a client application to incorporate the latest changes from
a data source into an existing <see cref="System.Data.DataSet"/>. This allows the client application to have a
refreshed <see cref="System.Data.DataSet"/>
with the latest data
from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the
end of a series of procedures that involve validating changes, reconciling
errors, updating the data source with the changes, and finally refreshing the existing
<see cref="System.Data.DataSet"/>.</para>
			<para>In a client application, it is usual to have a single
   button that the user can click that gathers the changed data and validates it
   before sending it back to a middle tier component. In this
   scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first
   invoked. That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/>
method.</para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two <see cref="System.Data.DataSet"/> objects are compared because it is possible that
the schemas may have been changed. For example, in a business-to-business
scenario, new columns may have been added to an XML schema by an
automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the
<paramref name="missingSchemaAction "/>argument to
<see langword="MissingSchemaAction.Add"/>. In that case, the merged
<see cref="System.Data.DataSet"/> will contain the added 
schema and data. </para>
			<para>After merging schemas, the data is merged.</para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem>
are matched to new target rows with the same primary key
values as the new source rows.</para>
			<para>During a merge, constraints are disabled. If any
   constraints cannot be enabled at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the
   merged data is retained while the constraints are disabled. In this case, the
<see cref="System.Data.DataSet.EnforceConstraints"/> property is set
   to <see langword="false"/> , and all rows that are
   invalid are marked in error. The errors must be resolved before attempting to
   reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/> 
.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.GetChanges"/>, Update, and <see cref="System.Data.DataSet.Merge"/>
methods on a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DataSet.Merge Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.ForeignKeyConstraint"/>
		<seealso cref="System.Data.DataSet.GetChanges"/>
		<seealso cref="System.Data.UniqueConstraint"/>
	</doc><doc for="DataSet.Merge1">
		<summary>
			<para>Merges a specified <see cref="System.Data.DataSet"/> and its schema into the current <see langword="DataSet"/>, preserving or discarding any changes in
   this <see langword="DataSet"/> according to
   the given argument.</para>
		</summary>
		<param name="dataSet">The <see langword="DataSet"/> whose data and schema will be merged.</param>
		<param name="preserveChanges"><see langword="true"/>, to preserve changes in the current <see langword="DataSet"/> ; otherwise, <see langword="false"/> .</param>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is used to merge two <see cref="System.Data.DataSet"/> objects
   that have largely similar schemas. A merge is typically used on a client
   application to incorporate the latest changes from a data source into an existing
<see cref="System.Data.DataSet"/>.
   This allows the client application to have a refreshed <see cref="System.Data.DataSet"/> with the
   latest data from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the end of a
series of procedures that involve validating changes, reconciling errors,
updating the data source with the changes, and finally refreshing the existing <see cref="System.Data.DataSet"/> .</para>
			<para>In a client application, it is usual to have a single button that the user can
   click that gathers the changed data and validates it before sending it back to a
   middle tier component. In this scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first invoked.
   That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/> method.</para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two
<see cref="System.Data.DataSet"/>
objects are compared because it is possible that the schemas may have been
changed. For example, in a business-to-business scenario, new columns may have
been added to an XML schema by an automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the <paramref name="missingSchemaAction
"/>argument to <see langword="MissingSchemaAction.Add"/>. In that case, the
merged <see cref="System.Data.DataSet"/> will contain the added
schema and data. </para>
			<para>After merging schemas, the data is merged. </para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> are matched to new target rows with the same primary key
values as the new source rows.</para>
During a merge, constraints are disabled. If any constraints cannot be enabled
at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the merged data is
retained while the constraints are disabled. In this case, the <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false"/> ,
and all rows that are invalid are marked in error. The errors must be resolved
before attempting to reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/> .
</remarks>
		<example>
			<para>The following example creates a simple <see cref="System.Data.DataSet"/> with one table, two columns, and ten rows. After
   adding ten rows, two values are changed, and one row is added. A subset of the
   changed data is created using the <see cref="System.Data.DataSet.GetChanges"/> method.
   After reconciling errors, the subset data is merged into the original <see cref="System.Data.DataSet"/>
   . </para>
			<codelink SampleID="Classic WebData DataSet.GetChanges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.ForeignKeyConstraint"/>
		<seealso cref="System.Data.UniqueConstraint"/>
	</doc><doc for="DataSet.Merge2">
		<summary>
			<para>Merges a specified <see cref="System.Data.DataSet"/> and its schema with the current <see langword="DataSet"/>, preserving or discarding changes in the
   current <see langword="DataSet"/>
   and handling an incompatible schema according to the given arguments.</para>
		</summary>
		<param name="dataSet">The <see langword="DataSet"/> whose data and schema will be merged.</param>
		<param name="preserveChanges"><see langword="true"/>, to preserve changes in the current <see langword="DataSet"/> ; otherwise, <see langword="false"/> .</param>
		<param name="missingSchemaAction">One of the <see cref="System.Data.MissingSchemaAction"/> values.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="dataSet"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is used to merge two <see cref="System.Data.DataSet"/> objects
   that have largely similar schemas. A merge is typically used on a client
   application to incorporate the latest changes from a data source into an existing
<see cref="System.Data.DataSet"/>.
   This allows the client application to have a refreshed <see cref="System.Data.DataSet"/> with the
   latest data from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the end of a
series of procedures that involve validating changes, reconciling errors,
updating the data source with the changes, and finally refreshing the existing <see cref="System.Data.DataSet"/> .</para>
			<para>In a client application, it is usual to have a single button that the user can
   click that gathers the changed data and validates it before sending it back to a
   middle tier component. In this scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first invoked.
   That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/> method.</para>
			<para>To facilitate explanation of the <see cref="System.Data.DataSet.Merge"/> method, we use "target"
to signify the current <see cref="System.Data.DataSet"/>, and "source" to name the second (parameter)
<see cref="System.Data.DataSet"/>.
The target <see cref="System.Data.DataSet"/> is so named because it is the object upon which an
action (the merge) occurs. The second <see cref="System.Data.DataSet"/> is called a "source" because the
information it contains does not change, but instead is merged into the current
<see cref="System.Data.DataSet"/> . </para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two
<see cref="System.Data.DataSet"/>
objects are compared because it is possible that the schemas may have been
changed. For example, in a business-to-business scenario, new columns may have
been added to an XML schema by an automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the <paramref name="missingSchemaAction
"/>argument to <see langword="MissingSchemaAction.Add"/>. In that case, the
merged <see cref="System.Data.DataSet"/> will contain the added schema and data.</para>
			<para>After merging schemas, the data is merged. </para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> are matched to new target rows with the same primary key
values as the new source rows.</para>
			<para>During a merge, constraints are disabled. If any constraints cannot be enabled
   at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the merged data is
   retained while the constraints are disabled. In this case, the <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false"/> ,
   and all rows that are invalid are marked in error. The errors must be resolved
   before attempting to reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a simple <see cref="System.Data.DataSet"/> with one table, two columns, and ten rows. Two
   values are changed, and one row is added. A subset of the changed data is
   created using the <see cref="System.Data.DataSet.GetChanges"/> method. After reconciling errors, a new column is
   added to the subset, changing the schema. When the <see cref="System.Data.DataSet.Merge"/>
   method is called with the <paramref name="missingSchemaAction"/> set to
<see langword="MissingSchemaAction.Add"/>. the new column is added to the
   original <see cref="System.Data.DataSet"/> object's schema.</para>
			<codelink SampleID="Classic WebData DataSet.Merge2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataSet.Merge3">
		<summary>
			<para>Merges a specified <see cref="System.Data.DataTable"/> and its schema into the current <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="table">The <see cref="System.Data.DataTable"/> whose data and schema will be merged.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="dataSet"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is used to merge two <see cref="System.Data.DataSet"/> objects
   that have largely similar schemas. A merge is typically used on a client
   application to incorporate the latest changes from a data source into an existing
<see cref="System.Data.DataSet"/>.
   This allows the client application to have a refreshed <see cref="System.Data.DataSet"/> with the
   latest data from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the end of a
series of procedures that involve validating changes, reconciling errors,
updating the data source with the changes, and finally refreshing the existing <see cref="System.Data.DataSet"/> .</para>
			<para>In a client application, it is usual to have a single button that the user can
   click that gathers the changed data and validates it before sending it back to a
   middle tier component. In this scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first invoked.
   That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/> method.</para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two
<see cref="System.Data.DataSet"/>
objects are compared because it is possible that the schemas may have been
changed. For example, in a business-to-business scenario, new columns may have
been added to an XML schema by an automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the <paramref name="missingSchemaAction
"/>argument to <see langword="MissingSchemaAction.Add"/>. In that case, the
merged <see cref="System.Data.DataSet"/> will contain the added
schema and data. </para>
			<para>After merging schemas, the data is merged. </para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> are matched to new target rows with the same primary key
values as the new source rows.</para>
			<para>During a merge, constraints are disabled. If any constraints cannot be enabled
   at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the merged data is
   retained while the constraints are disabled. In this case, the <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false"/> ,
   and all rows that are invalid are marked in error. The errors must be resolved
   before attempting to reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/>. </para>
		</remarks>
		<example>
			<para>The following example creates a simple <see cref="System.Data.DataSet"/> with one
   table, two columns, and ten rows. A second <see cref="System.Data.DataTable"/> is created that is identical
   to the first. Two rows are added to the second table, which is then merged
   into the <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DataSet.Merge3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable"/>
	</doc><doc for="DataSet.Merge4">
		<summary>
			<para>Merges a specified <see cref="System.Data.DataTable"/> and its schema into the current <see langword="DataSet"/> , preserving or discarding changes in
   the <see langword="DataSet"/>
   and handling an incompatible schema according to the given arguments.</para>
		</summary>
		<param name="table">The <see langword="DataTable"/> whose data and schema will be merged.</param>
		<param name="missingSchemaAction">One of the <see cref="System.Data.MissingSchemaAction"/> values.</param>
		<param name="preserveChanges"><see langword="true"/>, to preserve changes in the <see langword="DataSet"/> ; otherwise, <see langword="false"/> .</param>
		<exception cref="System.ArgumentNullException">The <paramref name="dataSet"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is used to merge two <see cref="System.Data.DataSet"/> objects
   that have largely similar schemas. A merge is typically used on a client
   application to incorporate the latest changes from a data source into an existing
<see cref="System.Data.DataSet"/>.
   This allows the client application to have a refreshed <see cref="System.Data.DataSet"/> with the
   latest data from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the end of a
series of procedures that involve validating changes, reconciling errors,
updating the data source with the changes, and finally refreshing the existing <see cref="System.Data.DataSet"/> .</para>
			<para>iOn a client application, it is usual to have a single button that the user can
   click that gathers the changed data and validates it before sending it back to a
   middle tier component. In this scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first invoked.
   That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/> method.</para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two
<see cref="System.Data.DataSet"/>
objects are compared because it is possible that the schemas may have been
changed. For example, in a business-to-business scenario, new columns may have
been added to an XML schema by an automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the <paramref name="missingSchemaAction
"/>argument to <see langword="MissingSchemaAction.Add"/>. In that case, the
merged <see cref="System.Data.DataSet"/> will contain the added
schema and data. </para>
			<para>After merging schemas, the data is merged. </para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> are matched to new target rows with the same primary key
values as the new source rows.</para>
During a merge, constraints are disabled. If any constraints cannot be enabled
at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the merged data is
retained while the constraints are disabled. In this case, the <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false"/> ,
and all rows that are invalid are marked in error. The errors must be resolved
before attempting to reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/>.
</remarks>
		<example>
			<para>The following example creates a simple <see cref="System.Data.DataSet"/> with one
   table, two columns, and ten rows. A second <see cref="System.Data.DataTable"/> is created that is nearly
   identical to the first except that a new DataColumn is added to the table. Two
   rows are added to the second table, which is then merged into the <see cref="System.Data.DataSet"/> with the
<paramref name="preserveChanges "/>argument set to <see langword="false"/>, and the
<paramref name="missingSchemaAction "/>argument set to
<see langword="MissingSchemaAction.Add"/> .</para>
			<codelink SampleID="Classic WebData DataSet.Merge4 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataSet.Merge5">
		<summary>
			<para>Merges an array of <see cref="System.Data.DataRow"/> objects into the current <see cref="System.Data.DataSet"/> .</para>
		</summary>
		<param name="rows">The array of <see langword="DataRow"/> objects to be merged into the <see langword="DataSet"/>. </param>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is used to merge two <see cref="System.Data.DataSet"/> objects
   that have largely similar schemas. A merge is typically used on a client
   application to incorporate the latest changes from a data source into an existing
<see cref="System.Data.DataSet"/>.
   This allows the client application to have a refreshed <see cref="System.Data.DataSet"/> with the
   latest data from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the end of a
series of procedures that involve validating changes, reconciling errors,
updating the data source with the changes, and finally refreshing the existing <see cref="System.Data.DataSet"/> .</para>
			<para>In a client application, it is usual to have a single button that the user can
   click that gathers the changed data and validates it before sending it back to a
   middle tier component. In this scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first invoked.
   That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/> method.</para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two
<see cref="System.Data.DataSet"/>
objects are compared because it is possible that the schemas may have been
changed. For example, in a business-to-business scenario, new columns may have
been added to an XML schema by an automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the <paramref name="missingSchemaAction
"/>argument to <see langword="MissingSchemaAction.Add"/>. In that case, the
merged <see cref="System.Data.DataSet"/> will contain the added
schema and data. </para>
			<para>After merging schemas, the data is merged. </para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/>
				<SpecialLocalizableItem kind="UIElement">value</SpecialLocalizableItem> of Added are matched to new target rows with the same primary key
values as the new source rows.</para>
			<para>During a merge, constraints are disabled. If any constraints cannot be enabled
   at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the merged data is
   retained while the constraints are disabled. In this case, the <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false"/> ,
   and all rows that are invalid are marked in error. The errors must be resolved
   before attempting to reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/>.</para>
		</remarks>
	</doc><doc for="DataSet.Merge6">
		<summary>
			<para>Merges an array of <see cref="System.Data.DataRow"/> objects into the current <see cref="System.Data.DataSet"/>, preserving or discarding changes in the
<see langword="DataSet"/> 
and handling an incompatible schema according to the
given arguments.</para>
		</summary>
		<param name="rows">The array of <see cref="System.Data.DataRow"/> objects to be merged into the <see langword="DataSet"/> .</param>
		<param name=" preserveChanges"><see langword="true"/> to preserve changes in the <see langword="DataSet"/>; otherwise, <see langword="false"/>.</param>
		<param name=" missingSchemaAction">One of the <see cref="System.Data.MissingSchemaAction"/> values. </param>
		<remarks>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is used to merge two <see cref="System.Data.DataSet"/> objects
   that have largely similar schemas. A merge is typically used on a client
   application to incorporate the latest changes from a data source into an existing
<see cref="System.Data.DataSet"/>.
   This allows the client application to have a refreshed <see cref="System.Data.DataSet"/> with the
   latest data from the data source. </para>
			<para>The <see cref="System.Data.DataSet.Merge"/> method is typically called at the end of a
series of procedures that involve validating changes, reconciling errors,
updating the data source with the changes, and finally refreshing the existing <see cref="System.Data.DataSet"/> .</para>
			<para>In a client application, it is usual to have a single button that the user can
   click that gathers the changed data and validates it before sending it back to a
   middle tier component. In this scenario, the <see cref="System.Data.DataSet.GetChanges"/> method is first invoked.
   That method returns a second <see cref="System.Data.DataSet"/> optimized for validating and merging. This second
<see cref="System.Data.DataSet"/>
object contains only the <see cref="System.Data.DataTable"/> and <see cref="System.Data.DataRow"/> objects that were changed,
resulting in a subset of the original <see cref="System.Data.DataSet"/>. This subset is generally
smaller, and thus more efficiently passed back to a middle tier component. The
middle tier component will then update the original data source with the changes
through stored procedures. The middle tier can then send back either a new
<see cref="System.Data.DataSet"/>
that includes original data and the latest data from the data source (by running the
original query again), or it can send back the subset with any changes that have
been made to it from the data source. (For example, if the data source automatically creates
unique primary key values, these values can be propagated back to the client
application.) In either case, the returned <see cref="System.Data.DataSet"/> can be merged back into the
client application's original <see cref="System.Data.DataSet"/> with the <see cref="System.Data.DataSet.Merge"/> method.</para>
			<para>To facilitate explanation of the <see cref="System.Data.DataSet.Merge"/> method, we use "target"
to signify the current <see cref="System.Data.DataSet"/>, and "source" to name the second (parameter)
<see cref="System.Data.DataSet"/>.
The target <see cref="System.Data.DataSet"/> is so named because it is the object upon which an
action (the merge) occurs. The second <see cref="System.Data.DataSet"/> is called a "source" because the
information it contains does not change, but instead is merged into the current
<see cref="System.Data.DataSet"/> . </para>
			<para>When the <see cref="System.Data.DataSet.Merge"/> method is called, the schemas of the two
<see cref="System.Data.DataSet"/>
objects are compared because it is possible that the schemas may have been
changed. For example, in a business-to-business scenario, new columns may have
been added to an XML schema by an automated process. If the source <see cref="System.Data.DataSet"/> contains
schema elements (added <see cref="System.Data.DataColumn"/> objects) that are missing in the target, the schema
elements can be added to the target by setting the <paramref name="missingSchemaAction
"/>argument to <see langword="MissingSchemaAction.Add"/>. In that case, the
merged <see cref="System.Data.DataSet"/> will contain the added schema and data.</para>
			<para>After merging schemas, the data is merged. </para>
			<para>When merging a new source <see cref="System.Data.DataSet"/> into the target, any source rows with a <see cref="System.Data.DataRowState"/> value of <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem>, 
or <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem>
, are matched to target rows with the same primary key
values. Source rows with a <see langword="DataRowState"/> value of Added are matched to new target rows with the same primary key
values as the new source rows.</para>
			<para>During a merge, constraints are disabled. If any constraints cannot be enabled
   at the end of merge, a <see cref="System.Data.ConstraintException"/> is generated and the merged data is
   retained while the constraints are disabled. In this case, the <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false"/> ,
   and all rows that are invalid are marked in error. The errors must be resolved
   before attempting to reset the <see cref="System.Data.DataSet.EnforceConstraints"/> property to
<see langword="true"/>.</para>
		</remarks>
	</doc><doc for="DataSet.EnforceConstraints">
		<summary>
			<para>Gets or sets a value indicating whether constraint rules are followed when
      attempting any update operation.</para>
		</summary>
		<value>
			<para><see langword="true"/>, if rules are enforced; otherwise,
<see langword="false"/>. The default is 
<see langword="true"/>.</para>
		</value>
		<exception cref="System.Data.ConstraintException">One or more constraints cannot be enforced.</exception>
		<remarks>
			<para>Constraints are set at the <see cref="System.Data.DataTable"/> level (<see cref="System.Data.DataTable.Constraints"/>
property). For more information about creating constraints, see <see topic="cpconaddingconstraintstodataset"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.DataSet"/> with one
   table, one column, five rows, and one <see cref="System.Data.UniqueConstraint"/>. The <see cref="System.Data.DataSet.EnforceConstraints"/> property is set to <see langword="false "/>and the
   values of each row are set to the same value. When the <see cref="System.Data.DataSet.EnforceConstraints"/> property is reset to <see langword="true"/>, a <see cref="System.Data.ConstraintException"/>
   is generated.</para>
			<codelink SampleID="Classic WebData DataSet.EnforceConstraints Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.Constraints"/>
		<seealso cref="System.Data.ConstraintException"/>
		<seealso cref="System.Data.ForeignKeyConstraint"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.UniqueConstraint"/>
	</doc><doc for="DataSet">
		<summary>
			<para>Represents an in-memory cache of data.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded read operations. You must synchronize any
      write operations. </para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.Data.DataSet"/>, which is an in-memory
   cache of data retrieved from a data source, is a major component of the
   ADO.NET architecture. The <see cref="System.Data.DataSet"/> consists of a
   collection of <see cref="System.Data.DataTable"/> objects that you can relate to each other with
<see cref="System.Data.DataRelation"/> objects. You can also 
   enforce data integrity in the <see cref="System.Data.DataSet"/> by using the <see cref="System.Data.UniqueConstraint"/> and <see cref="System.Data.ForeignKeyConstraint"/> objects.
   For further details about working with <see cref="System.Data.DataSet"/> objects, see <see topic="cpconcreatingusingdatasets"/>
   
   .</para>
			<para>While <see cref="System.Data.DataTable"/> objects contain the data,
the <see cref="System.Data.DataRelationCollection"/>
allows you to navigate though the table hierarchy.
The tables are contained in a <see cref="System.Data.DataTableCollection"/> accessed through the <see cref="System.Data.DataSet.Tables"/> property. When
accessing <see cref="System.Data.DataTable"/> objects, note that they are conditionally
case-sensitive. For example, if one <see cref="System.Data.DataTable"/> is named "mydatatable" and another
is named "Mydatatable", a string used to search for one of the tables is
regarded as case-sensitive. However, if "mydatatable" exists and "Mydatatable"
does not, the search string is regarded as case-insensitive. For
more information about working with <see cref="System.Data.DataTable"/> objects, see <see topic="cpconCreatingDataTable"/>
.</para>
			<para>A <see cref="System.Data.DataSet"/> can read and write
data and schema as XML documents. The data and schema can then be transported
across HTTP and used by any application, on any platform that
is XML-enabled. You can save the schema as an XML schema with the <see cref="System.Data.DataSet.WriteXmlSchema"/> method, and both schema and data can be saved using the <see cref="System.Data.DataSet.WriteXml"/> method. To read an XML document that
includes both schema and data, use the <see cref="System.Data.DataSet.ReadXml"/>
method.</para>
			<para>In a typical multiple-tier implementation, the steps for
   creating and refreshing a <see cref="System.Data.DataSet"/>, and in turn, updating the original data are to:</para>
			<list type="number"><item>
					<term>
      
      Build and
      fill each <see cref="System.Data.DataTable"/>
      
      in a <see cref="System.Data.DataSet"/> with
      data from a data source using a <see cref="System.Data.Common.DataAdapter"/>.</term>
				</item>
				<item>
					<term>
      
      Change the data in individual <see cref="System.Data.DataTable"/>
      objects by adding, updating, or deleting <see cref="System.Data.DataRow"/> objects.</term>
				</item>
				<item>
					<term>
      
      Invoke the <see cref="System.Data.DataSet.GetChanges"/> method to create a second
   <see cref="System.Data.DataSet"/> that features only 
      the changes to the data.</term>
				</item>
				<item>
					<term>
      
      Call the <see cref="System.Data.Common.DataAdapter.Update"/> method of the <see cref="System.Data.Common.DataAdapter"/>, passing the second <see cref="System.Data.DataSet"/> as an argument.</term>
				</item>
				<item>
					<term>
      
      Invoke the <see cref="System.Data.DataSet.Merge"/> method to merge the changes from the
      second <see cref="System.Data.DataSet"/> into the first.</term>
				</item>
				<item>
					<term>
      
      Invoke the <see cref="System.Data.DataSet.AcceptChanges"/> on the <see cref="System.Data.DataSet"/>. Alternatively, invoke <see cref="System.Data.DataSet.RejectChanges"/> to cancel the
      changes.</term>
				</item>
			</list>
			<note type="note">
   The <see cref="System.Data.DataSet"/>
   and <see cref="System.Data.DataTable"/>
   objects inherit from <see cref="System.ComponentModel.MarshalByValueComponent"/>, and support the <see cref="System.Runtime.Serialization.ISerializable"/>
   interface for remoting. These are the only ADO.NET objects that can be
   remoted.
</note>
		</remarks>
		<example>
			<para>The following example consists of
      several methods that, combined, create and fill a <see cref="System.Data.DataSet"/> from the Northwind database
      installed as a sample database with SQLServer 7.0.</para>
			<codelink SampleID="Classic WebData DataSet Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataView"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter"/>
		<seealso cref="System.Data.ForeignKeyConstraint"/>
		<seealso cref="System.Data.UniqueConstraint"/>
	</doc><doc for="DataSet.ISerializable.GetObjectData"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataSet.IXmlSerializable.GetSchema"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataSet.IXmlSerializable.ReadXml"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataSet.IXmlSerializable.WriteXml">
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataSet.InferXmlSchema3">
		<summary>
			<para>Applies the XML schema from the specified file to the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="fileName">The name of the file (including the path) from which to read the schema.</param>
		<param name="nsArray">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</param>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>.</exception>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
	</doc><doc for="DataSet.ReadXmlSchema3">
		<summary>
			<para>Reads the XML schema from the specified file into the <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="fileName">The file name (including the path) from which to read. </param>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>.</exception>
		<remarks>
			<para>Use the<see cref="System.Data.DataSet.ReadXmlSchema"/> method to create the schema for a<see cref="System.Data.DataSet"/>. The schema includes table, relation, and
   constraint definitions. To write a schema to an XML document, use the <see cref="System.Data.DataSet.WriteXmlSchema"/>
   method.</para>
			<para>The XML schema is written using the XSD standard.</para>
			<para>The<see cref="System.Data.DataSet.ReadXmlSchema"/> method is generally invoked before invoking
the<see cref="System.Data.DataSet.ReadXml"/> method which is
used to fill the<see cref="System.Data.DataSet"/>.</para>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is be thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/> with
<see cref="System.Data.DataSet.ReadXmlSchema"/> . This exception does not occur if 
   you are using .NET Framework version 1.0.
</note>
		</remarks>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
		<example>
			<codelink SampleID="Classic WebData DataSet.ReadXmlSchema3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc><doc for="DataSet.WriteXmlSchema3">
		<summary>
			<para>Writes the <see cref="System.Data.DataSet"/> structure as an XML schema to a file.</para>
		</summary>
		<param name="fileName">The file name (including the path) to which to write. </param>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/>.</exception>
		<remarks>
			<para>Use the <see cref="System.Data.DataSet.WriteXmlSchema"/> method to write the schema for a <see cref="System.Data.DataSet"/> to an XML document. The schema includes table,
   relation, and constraint definitions. To write a schema to an XML document, use
   the <see cref="System.Data.DataSet.WriteXmlSchema"/>
   method. </para>
			<para>The XML schema is written using the XSD standard. </para>
			<para>To write the data to an XML document, use the <see cref="System.Data.DataSet.WriteXml"/> method.</para>
		</remarks>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
		<example>
			<codelink SampleID="Classic WebData DataSet.WriteXmlSchema3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
	</doc><doc for="DataSet.ReadXml3">
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified file.</para>
		</summary>
		<param name="fileName">The filename (including the path) from which to read.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is used to extend the
   existing relational structure prior to loading the data. If there are any
   conflicts (for example, the same column in the same table defined with different
   datatypes) an exception is raised.</para>
			<para>If no in-line schema is specified, the relational structure is extended
   through inference, as necessary, according to the structure of the XML
   document. If the schema cannot be extended through inference in
   order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
		<example>
			<para>The following example first creates a simple <see cref="System.Data.DataSet"/> with one <see cref="System.Data.DataTable"/>, two
   columns, and ten rows. The <see cref="System.Data.DataSet"/> schema and data are written to disk by invoking the
<see cref="System.Data.DataSet.WriteXml"/> method. A second <see cref="System.Data.DataSet"/> is created
   and the <see cref="System.Data.DataSet.ReadXml"/> method is used to fill it with schema and
   data.</para>
			<codelink SampleID="Classic WebData DataSet.ReadXml3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc><doc for="DataSet.ReadXml7">
		<summary>
			<para>Reads XML schema and data into the <see cref="System.Data.DataSet"/> using the specified file and <see cref="System.Data.XmlReadMode"/>.</para>
		</summary>
		<param name="fileName">The filename (including the path) from which to read.</param>
		<param name="mode">One of the <see cref="System.Data.XmlReadMode"/> values.</param>
		<returns>
			<para>The
      <see langword="XmlReadMode"/> used to read the data.
      </para>
		</returns>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataSet.ReadXml"/> method provides a way to read either data only, or both data and schema into a
<see cref="System.Data.DataSet"/> from an XML document, whereas the <see cref="System.Data.DataSet.ReadXmlSchema"/> method reads only the schema. To read both 
   data and schema, use one of the <see langword="ReadXML"/> overloads that includes
   the <paramref name="XmlReadMode"/> parameter,
   and set its value to <see langword="ReadSchema"/>. </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.WriteXml"/> and
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods, respectively. To write XML data, 
or both schema and data from the <see langword="DataSet"/>, use the
<see langword="WriteXml"/> method. To write just the schema, use the 
<see langword="WriteXmlSchema"/> 
method.</para>
			<para>If an in-line schema is specified, the in-line schema is
   used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the
   same column in the same table defined with different datatypes) an exception is
   raised.</para>
			<para>If
   no in-line schema is specified, the relational structure is extended through
   inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through
   inference in order to expose all data, an exception is raised.</para>
			<para>If the XSD schema for a <see cref="System.Data.DataSet"/> includes a targetNamespace, data may not be read,
and you may encounter exceptions when calling <see cref="System.Data.DataSet.ReadXml"/> to load the
<see cref="System.Data.DataSet"/> 
with XML that contains elements with no qualifying namespace.
To read unqualified elements, set elementFormDefault equal to "qualified" in your XSD
schema as the following example demonstrates.</para>
			<code>
&lt;xsd:schema id="MyDataSet" 
   elementFormDefault="qualified" 
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns="http://www.tempuri.org/MyDataSet.xsd" 
   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
&lt;/xsd:schema&gt;
</code>
			<note type="note">
   If the schema for
   your <see cref="System.Data.DataSet"/> contains elements of the same name, but different
   type, in the same namespace, an exception is thrown when you attempt to
   read the schema into the <see cref="System.Data.DataSet"/>
   with <see cref="System.Data.DataSet.ReadXml"/> by specifying
<see langword="XmlReadMode.ReadSchema"/>. This exception does not occur if you 
   are using .NET Framework version 1.0.
</note>
		</remarks>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
	</doc><doc for="DataSet.WriteXml3">
		<summary>
			<para> Writes the current data for the <see cref="System.Data.DataSet"/> to the specified file.</para>
		</summary>
		<param name="fileName">The file name (including the path) to which to write.</param>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/>.</exception>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and schema, use one of the overloads 
   that includes the <see langword="WriteXmlMode"/> parameter, and set its value to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
	</doc><doc for="DataSet.WriteXml7">
		<summary>
			<para>Writes the current data, and optionally the schema, for the <see cref="System.Data.DataSet"/> to the specified
   file using the specified <see cref="System.Data.XmlWriteMode"/>. To write the
   schema, set the value for the <see langword="XMLWriteMode"/> parameter to
<paramref name="WriteSchema"/> .</para>
		</summary>
		<param name="fileName">The file name (including the path) to which to write. </param>
		<param name="mode">One of the <see cref="System.Data.XmlWriteMode"/> values.</param>
		<exception cref="System.Security.SecurityException"><see cref="System.Security.Permissions.FileIOPermission"/> is not set to <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/>.</exception>
		<remarks>
			<para>The <see langword="WriteXml"/> method provides a way to write either data only, or both data
   and schema from a <see cref="System.Data.DataSet"/> into an XML document, whereas the
<see cref="System.Data.DataSet.WriteXmlSchema"/> method writes only the schema. To write both data and 
   schema, set the <see langword="WriteXmlMode"/> parameter to <paramref name="WriteSchema"/>.
   </para>
			<para>Note that the same is true for the <see cref="System.Data.DataSet.ReadXml"/> and
<see cref="System.Data.DataSet.ReadXmlSchema"/> methods, 
respectively. To read XML data, or both schema and data into the <see langword="DataSet"/>, use the
<see langword="ReadXml"/> method. To read just the schema, use the 
<see langword="ReadXmlSchema"/> method.</para>
		</remarks>
		<permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess"/></permission>
		<example>
			<para>The following example uses the <see cref="System.Data.DataSet.WriteXml"/> method to write an XML
   document.</para>
			<codelink SampleID="Classic WebData DataSet.WriteXml7 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet.ReadXml"/>
		<seealso cref="System.Data.DataSet.ReadXmlSchema"/>
		<seealso cref="System.Data.DataSet.WriteXml"/>
		<seealso cref="System.Data.DataSet.WriteXmlSchema"/>
	</doc></docs>
