<docs>
  <doc for="DataRelationCollection">
    <summary>
      <para>Represents the collection of relations,
       each of which allows navigation between related parent/child tables.</para>
    </summary>
    <remarks>
      <para>The <see cref="System.Data.DataRelationCollection" /> contains all of the <see cref="System.Data.DataRelation" />
 objects for a <see cref="System.Data.DataSet" />. To access the collection, use the <see cref="System.Data.DataSet.Relations" />
 property.</para>
      <para>The <see cref="System.Data.DataRelationCollection" /> has the standard collection methods <see cref="System.Data.DataRelationCollection.Add" />, <see cref="System.Data.DataRelationCollection.Clear" />, and <see cref="System.Data.DataRelationCollection.Remove" /> .</para>
    </remarks>
    <seealso cref="System.Data.DataRelationCollection.Add" />
    <seealso cref="System.Data.DataSet" />
    <seealso cref="System.Data.DataSet.Relations" />
    <seealso cref="System.Data.DataRelation" />
    <seealso cref="System.Data.DataRelationCollection.Remove" />
  </doc>
  <doc for="DataRelationCollection.this">
    <overload>
      <para>Get the specified <see cref="System.Data.DataRelation" /> from the collection.</para>
    </overload>
    <summary>
      <para>Gets the relation specified by index.</para>
    </summary>
    <param name="index">The zero-based index to find.</param>
    <exception cref="System.IndexOutOfRangeException">The collection doesn't have a member at this index.</exception>
  </doc>
  <doc for="DataRelationCollection.this1">
    <summary>
      <para>Gets the relation specified by name.</para>
    </summary>
    <param name="name">The name of the relation to find.</param>
    <value>
      <para>The named <see cref="System.Data.DataRelation" />.</para>
    </value>
  </doc>
  <doc for="DataRelationCollection.Add">
    <overload>
      <para>Adds a <see cref="System.Data.DataRelation" /> to the <see cref="System.Data.DataRelationCollection" /> .</para>
    </overload>
    <summary>
      <para> 
       Adds the relation to the collection.</para>
    </summary>
    <param name="relation">The <see cref="System.Data.DataRelation" /> to add to the collection.</param>
    <exception cref="System.ArgumentNullException">The <paramref name="relation" /> is null.</exception>
    <exception cref="System.ArgumentException ">The relation already belongs to this collection or belongs to another collection.</exception>
    <exception cref="System.Data.DuplicateNameException">The collection already has a relation with the same name The comparison is not case sensitive.</exception>
    <exception cref="System.Data.InvalidConstraintException ">The relation has entered an invalid state since it's been created.</exception>
    <remarks>
      <para>The <see cref="System.Data.DataRelationCollection.CollectionChanged" /> 
 event is fired if the relation is sucessfully
 added.</para>
    </remarks>
  </doc>
  <doc for="DataRelationCollection.Add1">
    <summary>
      <para> 
       Creates a <see cref="System.Data.DataRelation" /> with the
       specified name, parent columns,
       child columns, and adds it to the collection.</para>
    </summary>
    <param name="name">The name of the <see cref="System.Data.DataRelation" /> .</param>
    <param name="parentColumns">An array of parent <see cref="System.Data.DataColumn" /> objects.</param>
    <param name="childColumns">An array of child <see cref="System.Data.DataColumn" /> objects.</param>
    <returns>
      <para>The created <see cref="System.Data.DataRelation" /> .</para>
    </returns>
    <exception cref="System.ArgumentNullException">The <paramref name="relation" /> is null.</exception>
    <exception cref="System.ArgumentException">The relation already belongs to this collection or belongs to another collection.</exception>
    <exception cref="System.Data.DuplicateNameException">The collection already has a relation with the same name The comparison is not case sensitive.</exception>
    <exception cref="System.Data.InvalidConstraintException">The relation has entered an invalid state since it's been created.</exception>
    <remarks>
      <para>The <see cref="System.Data.DataRelationCollection.CollectionChanged" /> event is fired if the relation 
    is sucessfully added.</para>
    </remarks>
    <example>
      <codelink SampleID="Classic WebData DataRelationCollection.Add1 Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="DataRelationCollection.Add2">
    <summary>
    Creates a relation given the parameters and adds it to the collection.  An ArgumentNullException is
    generated if this relation is null.  An ArgumentException is generated if this relation already belongs to
    this collection, belongs to another collection, or if this collection already has a relation with the
    same name (case insensitive).
    An InvalidRelationException is generated if the relation can't be created based on the parameters.
    The CollectionChanged event is fired if it succeeds.
 </summary>
    <param name="name">The name of the relation.</param>
    <param name="parentColumns">parent columns of relation.</param>
    <param name="childColumns">child columns of relation.</param>
    <param name="createConstraints">whether to create a constraints</param>
    <returns>
    The created relation.
 </returns>
  </doc>
  <doc for="DataRelationCollection.Add3">
    <summary>
    Creates a relation given the parameters and adds it to the collection.  The name is defaulted.
    An ArgumentException is generated if
    this relation already belongs to this collection or belongs to another collection.
    An InvalidConstraintException is generated if the relation can't be created based on the parameters.
    The CollectionChanged event is fired if it succeeds.
 </summary>
    <param name="parentColumns">parent columns of relation.</param>
    <param name="childColumns">child columns of relation.</param>
    <returns>
    The created relation.
 </returns>
  </doc>
  <doc for="DataRelationCollection.Add4">
    <summary>
    Creates a relation given the parameters and adds it to the collection.
    An ArgumentException is generated if this relation already belongs to
    this collection or belongs to another collection.
    A DuplicateNameException is generated if this collection already has a relation with the same
    name (case insensitive).
    An InvalidConstraintException is generated if the relation can't be created based on the parameters.
    The CollectionChanged event is fired if it succeeds.
 </summary>
    <param name="name">The name of the relation.</param>
    <param name="parentColumn">parent column of relation.</param>
    <param name="childColumn">child column of relation.</param>
    <returns>
    The created relation.
 </returns>
  </doc>
  <doc for="DataRelationCollection.Add5">
    <summary>
    Creates a relation given the parameters and adds it to the collection.
    An ArgumentException is generated if this relation already belongs to
    this collection or belongs to another collection.
    A DuplicateNameException is generated if this collection already has a relation with the same
    name (case insensitive).
    An InvalidConstraintException is generated if the relation can't be created based on the parameters.
    The CollectionChanged event is fired if it succeeds.
 </summary>
    <param name="name">The name of the relation.</param>
    <param name="parentColumn">parent column of relation.</param>
    <param name="childColumn">child column of relation.</param>
    <param name="createConstraints">whether to create a constraints</param>
    <returns>
    The created relation.
 </returns>
  </doc>
  <doc for="DataRelationCollection.Add6">
    <summary>
    Creates a relation given the parameters and adds it to the collection.  The name is defaulted.
    An ArgumentException is generated if
    this relation already belongs to this collection or belongs to another collection.
    An InvalidConstraintException is generated if the relation can't be created based on the parameters.
    The CollectionChanged event is fired if it succeeds.
 </summary>
    <param name="parentColumn">parent column of relation.</param>
    <param name="childColumn">child column of relation.</param>
    <returns>
    The created relation.
 </returns>
  </doc>
  <doc for="DataRelationCollection.AssignName">
    <summary>
 Creates a new default name.
 </summary>
    <returns>
 the new default name.
 </returns>
  </doc>
  <doc for="DataRelationCollection.Clear">
    <summary>
 Clears the collection of any relations.
 </summary>
  </doc>
  <doc for="DataRelationCollection.Contains">
    <summary>
    Gets a value of true if this collection has a relation with the given name (case insensitive), false otherwise.
 </summary>
    <param name="name">name to test.</param>
    <returns>
    Whether a relation exists with this name.
 </returns>
  </doc>
  <doc for="DataRelationCollection.MakeName">
    <summary>
 Makes a default name with the given index.  e.g. Relation1, Relation2, ... Relationi
 </summary>
    <param name="index">
 The index to construct a default name for.
 </param>
    <returns>
 the proposed default name.
 </returns>
  </doc>
  <doc for="DataRelationCollection.NamesEqual">
    <summary>
 Compares the two names with a case insensitive comparison.
 </summary>
    <param name="s1">
 first string
 </param>
    <param name="s2">
 second string
 </param>
    <returns>
 whether they are equal (case insensitively)
 </returns>
  </doc>
  <doc for="DataRelationCollection.OnCollectionChanged">
    <summary>
 This method is called whenever the collection changes.  Overriders
 of this method should call the base implementation of this method.
 </summary>
    <param name="ccevent">
 The event information.
 </param>
  </doc>
  <doc for="DataRelationCollection.OnCollectionChanging">
    <summary>
      <para>[To be supplied.]</para>
    </summary>
  </doc>
  <doc for="DataRelationCollection.RegisterName">
    <summary>
 Registers this name as being used in the collection.  Will throw an ArgumentException
 if the name is already being used.  Called by Add, All property, and Relation.RelationName property.
 if the name is equivalent to the next default name to hand out, we increment our defaultNameIndex.
 </summary>
    <param name="name">
 name to register as being used.
 </param>
  </doc>
  <doc for="DataRelationCollection.RemoveCore">
    <summary>
    Does verification on the relation.
    An ArgumentNullException is generated if this relation is null.  An ArgumentException is generated
    if this relation doesn't belong to this collection.
 </summary>
    <param name="relation">The relation to check.</param>
  </doc>
  <doc for="DataRelationCollection.UnregisterName">
    <summary>
 Unregisters this name as no longer being used in the collection.  Called by Remove, All property, and
 Relation.RelationName property.  If the name is equivalent to the last proposed default namem, we walk backwards
 to find the next proper default name to hang out.
 </summary>
    <param name="name">
 name to unregister as no longer used.
 </param>
  </doc>
  <doc for="DataRelationCollection.Dump">
    <summary>
      <para>[To be supplied.]</para>
    </summary>
  </doc>
  <doc for="DataRelationCollection.Remove">
    <overload>
      <para>Removes the specified relation from the collection. </para>
    </overload>
    <summary>
      <para>Removes the specified relation from the collection.
      An ArgumentNullException is generated if this relation is null. An ArgumentException is generated
      if this relation doesn't belong to this collection.
      The CollectionChanged event is fired if it succeeds.</para>
    </summary>
    <param name="relation">The relation to remove.</param>
  </doc>
  <doc for="DataRelationCollection.RemoveAt">
    <summary>
      <para>Removes the relation at the specified index from the collection. An IndexOutOfRangeException is
      generated if this collection doesn't have a relation at this index.
      The CollectionChanged event is fired if it succeeds.</para>
    </summary>
    <param name="index">The index at which to remove a relation.</param>
  </doc>
  <doc for="DataRelationCollection.Remove1">
    <summary>
      <para>Removes the relation with the specified name from the collection. An IndexOutOfRangeException is
      generated if this collection doesn't have a relation with that name
      The CollectionChanged event is fired if it succeeds.</para>
    </summary>
    <param name="name">The name of the relation to remove.</param>
  </doc>
  <doc for="DataRelationCollection.GetDataSet">
    <summary>
      <para>Gets the dataset for this collection.</para>
    </summary>
    <returns>
      <para>The dataSet.</para>
    </returns>
  </doc>
  <doc for="DataRelationCollection.AddCore">
    <summary>
      <para>Performs verification on the table.
      An ArgumentNullException is generated if this relation is null. An ArgumentException is generated if this relation
      already belongs to this collection, belongs to another collection.
      A DuplicateNameException is generated if this collection already has a relation with the same
      name (case insensitive).</para>
    </summary>
    <param name="relation">The relation to check.</param>
  </doc>
  <doc for="DataRelationCollection.AddRange">
    <summary>
      <para>Copies the elements of the specified <see cref="System.Data.DataRelation" /> array to 
   the end of the collection.</para>
    </summary>
    <param name="relations">The array of <see cref="System.Data.DataRelation" /> objects to add to the collection.</param>
  </doc>
  <doc for="DataRelationCollection.CollectionChanged">
    <summary>
      <para>Occurs when the collection has changed.</para>
    </summary>
  </doc>
</docs>