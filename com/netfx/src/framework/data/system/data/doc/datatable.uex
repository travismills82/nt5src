<docs>
	<doc for="DataTable.fInitInProgress">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataTable.DataTable">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.DataTable"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.DataTable"/> class with no arguments.</para>
		</summary>
		<remarks>
			<para>The constructor sets initial values for all properties
       of the <see cref="System.Data.DataTable"/> object. The following
       table shows the properties and their default values. When an instance <see cref="System.Data.DataTable"/>
       is created, the following read/write properties are set to initial values.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Default Value</description>
				</listheader>
				<item>
					<term> CaseSensitive</term>
					<description>Same as the parent <see cref="System.Data.DataSet"/>, if it belongs to one.
       Otherwise, <see langword="false"/>
       .</description>
				</item>
				<item>
					<term> DisplayExpression</term>
					<description>Empty String ("")</description>
				</item>
				<item>
					<term> Locale</term>
					<description>Same as the parent <see cref="System.Data.DataSet"/> object's <see cref="System.Globalization.CultureInfo"/> (returned by the
 <see cref="System.Data.DataSet.Locale"/> property); if no parent exists, the default is the
    current system <see cref="System.Globalization.CultureInfo"/>.</description>
				</item>
				<item>
					<term> MinimumCapacity</term>
					<description>25
       rows.</description>
				</item>
			</list>
			<para>You can change the value for any of these properties through a separate call
    to the property.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataTable"/> with
 <see cref="System.Data.DataColumn"/> and <see cref="System.Data.DataRow"/>, and displays it in a <see cref="T:System.Windows.Forms.DataGrid"/> 
 control.</para>
			<codelink SampleID="Classic WebData DataTable.DataTable Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataView"/>
	</doc>
	<doc for="DataTable.DataTable1">
		<summary>
			<para>Intitalizes a new instance of the <see cref="System.Data.DataTable"/> class with the specified table
    name.</para>
		</summary>
		<param name="tableName">The name to give the table. If <see langword="null"/> or an empty string, a default name will be given when added to the <see cref="System.Data.DataTableCollection"/>.</param>
		<example>
			<para>The following example creates a System.Windows.Forms.DataGridTable and displays it in a System.Windows.Forms.DataGrid
       control.</para>
			<codelink SampleID="Classic WebData DataTable.DataTable1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataView"/>
	</doc>
	<doc for="DataTable.CaseSensitive">
		<summary>
			<para>Indicates whether string comparisons within the table are
       case-sensitive.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the comparison is case-sensitive; otherwise, 
 <see langword="false"/>. The default is set to the parent <see cref="System.Data.DataSet"/> object's 
 <see cref="System.Data.DataSet.CaseSensitive"/> property, or 
 <see langword="false "/> if the <see cref="System.Data.DataTable"/> was 
    created independently of a <see cref="System.Data.DataSet"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataTable.CaseSensitive"/> property affects string comparisons in
    sorting, searching, and filtering.</para>
		</remarks>
		<example>
			<para>The following example calls the <see cref="System.Data.DataTable.Select"/>
 method twice on a <see cref="System.Data.DataTable"/>. The first time, the <see cref="System.Data.DataTable.CaseSensitive"/> property is set to <see langword="true"/>, the
 second, to <see langword="false"/>
 .</para>
			<codelink SampleID="Classic WebData DataTable.CaseSensitive Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.Select"/>
	</doc>
	<doc for="DataTable.ResetCaseSensitive">
		<summary>
			<para>
       Resets the <see cref="System.Data.DataTable.CaseSensitive"/> property to its default state.
    </para>
		</summary>
	</doc>
	<doc for="DataTable.ShouldSerializeCaseSensitive">
		<summary>
			<para>
       Indicates whether the <see cref="System.Data.DataTable.CaseSensitive"/> property should be persisted.
    </para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
       default; otherwise, <see langword="false"/>.
    </para>
		</returns>
		<remarks>
			<para>
       You typically use this method only if you are either
       creating a designer for the <see cref="System.Data.DataTable"/>, or creating
       your own control incorporating the <see cref="System.Data.DataTable"/>.
    </para>
		</remarks>
	</doc>
	<doc for="DataTable.ShouldSerializeColumns">
		<summary>
			<para>
       Indicates whether the <see cref="System.Data.DataTable.Columns"/> property should be persisted.
    </para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
       default; otherwise, <see langword="false"/>.
    </para>
		</returns>
		<remarks>
			<para>
       You typically use this method only if you are either creating a designer for
       the <see cref="System.Data.DataTable"/>, or creating your own control incorporating the
    <see cref="System.Data.DataTable"/>. 
    </para>
		</remarks>
	</doc>
	<doc for="DataTable.ResetColumns">
		<summary>
			<para>
       Resets the <see cref="System.Data.DataTable.Columns"/> property to its default state.
    </para>
		</summary>
	</doc>
	<doc for="DataTable.ShouldSerializeConstraints">
		<summary>
			<para>
       Indicates whether the <see cref="System.Data.DataTable.Constraints"/> property should be persisted.
    </para>
		</summary>
		<remarks>
			<para>
       You typically use this method only if you are either creating a designer for
       the <see cref="System.Data.DataTable"/>, or creating your own control incorporating the
    <see cref="System.Data.DataTable"/>. 
    </para>
		</remarks>
	</doc>
	<doc for="DataTable.ResetConstraints">
		<summary>
			<para>
       Resets the <see cref="System.Data.DataTable.Constraints"/> property to its default state.
    </para>
		</summary>
	</doc>
	<doc for="DataTable.DataSet">
		<summary>
			<para>Gets the <see cref="System.Data.DataSet"/> that this table belongs to.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.DataSet"/> that this table belongs to.</para>
		</value>
		<remarks>
			<para>If a control is data bound to a <see cref="System.Data.DataTable"/>, and the table belongs to a 
 <see cref="System.Data.DataSet"/>, 
    you can get to the <see cref="System.Data.DataSet"/> through this property.</para>
		</remarks>
		<example>
			<para>The following example returns the parent <see cref="System.Data.DataSet"/> of a given table through the
 <see cref="System.Data.DataTable.DataSet"/> property. </para>
			<codelink SampleID="Classic WebData DataTable.DataSet Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet"/>
	</doc>
	<doc for="DataTable.SetDataSet">
		<summary>
 Internal method for setting the DataSet pointer.
 </summary>
	</doc>
	<doc for="DataTable.DefaultView">
		<summary>
			<para>Gets a customized view of the table which may include a
       filtered view, or a cursor position.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.DataView"/> associated with the <see cref="System.Data.DataTable"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataTable.DefaultView"/> property returns a <see cref="System.Data.DataView"/> you can use to sort, filter, and search a <see cref="System.Data.DataTable"/>
 .</para>
		</remarks>
		<example>
			<para>The following example sets a property of the <see cref="System.Data.DataTable"/> object's 
 <see cref="System.Data.DataView"/> 
 through the <see cref="System.Data.DataTable.DefaultView"/> property.
 The example also shows the binding of a DataGrid control to a DataTable named
 "Suppliers" that includes a column named "CompanyName."</para>
			<codelink SampleID="Classic WebData DataTable.DefaultView Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataTable.HasSchemaChanged">
		<summary>
			<para>Gets a value indicating whether the column count has changed.</para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the column count is not 0; otherwise, 
 <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>This property is intended to be used when creating a designer for the 
       DataTable. For example, check the property </para>
		</remarks>
	</doc>
	<doc for="DataTable.ResetLocale">
		<summary>
			<para>Resets the <see cref="System.Data.DataTable.Locale"/> property to its default state.</para>
		</summary>
		<seealso cref="System.Data.DataTable.Locale"/>
		<seealso cref="System.Data.DataTable.ShouldSerializeLocale"/>
	</doc>
	<doc for="DataTable.ShouldSerializeLocale">
		<summary>
			<para>
       Indicates whether the <see cref="System.Data.DataTable.Locale"/> property should be persisted.
    </para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
       default; otherwise, <see langword="false"/>.
    </para>
		</returns>
		<remarks>
			<para>
       You typically use this method only if you are either creating a designer for
       the <see cref="System.Data.DataTable"/>, or creating your own control incorporating the
    <see cref="System.Data.DataTable"/>. 
    </para>
		</remarks>
	</doc>
	<doc for="DataTable.MinimumCapacity">
		<summary>
			<para>Gets or sets the initial starting size for this table.</para>
		</summary>
		<value>
			<para>The initial
       starting size in rows of this table. The default is 25.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataTable.MinimumCapacity"/> allows the system to create an appropriate set of
    resources before fetching data. In a situation when performance is critical,
    setting this property can optimize performance.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Data.DataTable.MinimumCapacity"/> of a <see cref="System.Data.DataTable"/>.</para>
			<codelink SampleID="Classic WebData DataTable.MinimumCapacity Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataTable.ShouldSerializePrimaryKey">
		<summary>
			<para>
       Indicates whether the <see cref="System.Data.DataTable.PrimaryKey"/> property should be persisted.
    </para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
       default; otherwise, <see langword="false"/>.
    </para>
		</returns>
		<remarks>
			<para>
       You typically use this method only if you are either creating a designer for
       the <see cref="System.Data.DataTable"/>, or creating your own control incorporating the
    <see cref="System.Data.DataTable"/>. 
    </para>
		</remarks>
		<seealso cref="System.Data.DataTable.ResetPrimaryKey"/>
	</doc>
	<doc for="DataTable.ResetPrimaryKey">
		<summary>
			<para>
       Resets the <see cref="System.Data.DataTable.PrimaryKey"/> property to its default state.
    </para>
		</summary>
	</doc>
	<doc for="DataTable.ShouldSerializeNamespace">
		<summary>
			<para>
       Indicates whether the <see cref="System.Data.DataTable.Namespace"/> property should be persisted.
    </para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
       default; otherwise, <see langword="false"/>.
    </para>
		</returns>
		<remarks>
			<para>
       You typically use this method only if you are either creating a designer for
       the <see cref="System.Data.DataTable"/>, or creating your own control incorporating the
    <see cref="System.Data.DataTable"/>. 
    </para>
		</remarks>
	</doc>
	<doc for="DataTable.ResetNamespace">
		<summary>
			<para>
       Resets the <see cref="System.Data.DataTable.Namespace"/> property to its default state.
    </para>
		</summary>
	</doc>
	<doc for="DataTable.TypedTableName">
		<summary>
			<para>Gets the name of the table.</para>
		</summary>
		<value>
			<para>The name of the table.</para>
		</value>
		<seealso cref="System.Data.DataTable.TableName"/>
		<seealso cref="System.Data.DataTable.TypedRowName"/>
	</doc>
	<doc for="DataTable.TypedRowName">
		<summary>
			<para>Gets the typed row name of the current table.</para>
		</summary>
		<value>
			<para>The typed row name of the current table.</para>
		</value>
		<example>
			<para>The following example prints the <see cref="System.Data.DataTable.TableName"/>, <see cref="System.Data.DataTable.TypedTableName"/>, and <see cref="System.Data.DataTable.TypedRowName"/>.</para>
			<codelink SampleID="Classic WebData DataTable.TypedRowName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.TableName"/>
		<seealso cref="System.Data.DataTable.TypedTableName"/>
	</doc>
	<doc for="DataTable.PropertyChanged">
		<summary>
			<para> Occurs when any property on the control has been changed for any
       reason.</para>
		</summary>
	</doc>
	<doc for="DataTable.Compute">
		<summary>
			<para>Computes the given expression on the current rows that pass the filter criteria.</para>
		</summary>
		<param name="expression">The expression to compute.</param>
		<param name="filter">The filter to limit the rows that evaluate in the expression.</param>
		<returns>
			<para>An <see cref="System.Object"/>, set to
    the result of the computation.</para>
		</returns>
		<remarks>
			<para>The <paramref name="expression"/> parameter requires an aggregate function. For
    example, the following is a legal expression:</para>
			<para>Count(Quantity)</para>
			<para>But this expression is not:</para>
			<para>Sum (Quantity * UnitPrice)</para>
			<para>If you must perform an operation on two or more columns, you should create a
 <see cref="System.Data.DataColumn"/>, set its <see cref="System.Data.DataColumn.Expression"/> property to an appropriate expression, and use an 
    aggregate expression on the resulting column. In that case, given a <see cref="System.Data.DataColumn"/> with
    the name "total," and the <see cref="System.Data.DataColumn.Expression"/> property set to:</para>
			<para>"Quantity * UnitPrice"</para>
			<para>The expression argument for the <see cref="System.Data.DataTable.Compute"/> method would then be:</para>
			<para>Sum(total)</para>
			<para>The second parameter <paramref name="filter"/> determines which rows are used in the
 expression. For example, if the table contains a date column named "colDate",
 you could limit the rows with the following expression:</para>
			<para>colDate &gt; 1/1/99 AND colDate &lt; 17/1/99</para>
			<para>For
    rules on creating expressions for both parameters, see the <see cref="System.Data.DataColumn.Expression"/> property of the <see cref="System.Data.DataColumn"/> class.</para>
		</remarks>
		<example>
			<para>The following example sums the values of a column named "Total," for the
       saleperson whose identification number is 5.</para>
			<codelink SampleID="Classic WebData DataTable.Compute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.Expression"/>
	</doc>
	<doc for="DataTable.FindRow">
		<overload>
			<para>
       Finds and returns a specific <see cref="System.Data.DataRow"/> .
    </para>
		</overload>
		<summary>
			<para>
       Finds and returns a <see cref="System.Data.DataRow"/> with the specified values in the specified
       columns.
    </para>
		</summary>
		<param name="columns">
    An array of <see cref="System.Data.DataColumn"/> objects that specify the columns to search in.
 </param>
		<param name=" values">
    An array of values that are to be found in the named columns.
 </param>
		<returns>
			<para>
       A <see cref="System.Data.DataRow"/> whose column values match those specified in the method.
    </para>
		</returns>
		<remarks>
			<para>
       You can also use the <see cref="System.Data.DataRowCollection.Find"/> and <see cref="System.Data.DataRowCollection.Contains"/> methods of the <see cref="System.Data.DataRowCollection"/> to
       find specific rows or values in rows.
    </para>
		</remarks>
		<example>
			<para>
       The following example finds a single <see cref="System.Data.DataRow"/> through the <see cref="System.Data.DataTable.FindRow"/>
       method.
    </para>
			<codelink SampleID="Classic WebData DataTable.FindRow Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataRowCollection.Contains"/>
		<seealso cref="System.Data.DataRowCollection.Find"/>
	</doc>
	<doc for="DataTable.FindRow1">
		<summary>
			<para>
       Finds and returns a <see cref="System.Data.DataRow"/> with the specified value in the specified column.
    </para>
		</summary>
		<param name="column">
    A <see cref="System.Data.DataColumn"/> that specifies the column to search in.
 </param>
		<param name="value">
    An value that is to be found in the named column.
 </param>
		<returns>
			<para>
       A <see cref="System.Data.DataRow"/> whose column values match those specified in the
       method.
    </para>
		</returns>
		<remarks>
			<para>
       You can also use <see cref="System.Data.DataTable.Select"/>
       method to find a specific row in the <see cref="System.Data.DataTable"/>
       . Furthermore, the <see cref="System.Data.DataRowCollection.Find"/> and <see cref="System.Data.DataRowCollection.Contains"/> methods of the
    <see cref="System.Data.DataRowCollection"/> also return specific rows or values in rows. 
    </para>
		</remarks>
		<example>
			<para>
       The following example uses the <see cref="System.Data.DataTable.FindRows"/> method to return a <see cref="System.Data.DataRow"/> containing
       the specified value.
    </para>
			<codelink SampleID="Classic WebData DataTable.FindRow1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataRowCollection.Contains"/>
		<seealso cref="System.Data.DataRowCollection.Find"/>
	</doc>
	<doc for="DataTable.FindRows">
		<overload>
			<para>
       Finds and returns an array of <see cref="System.Data.DataRow"/> objects.
    </para>
		</overload>
		<summary>
			<para>
       Finds and returns an array of <see cref="System.Data.DataRow"/> objects using the specified columns and values.
    </para>
		</summary>
		<param name="columns">
    An array of <see cref="System.Data.DataColumn"/> objects.
 </param>
		<param name=" values">
    An array of values to find in the columns.
 </param>
		<returns>
			<para>
       An array
       of <see cref="System.Data.DataColumn"/> objects.
    </para>
		</returns>
		<example>
			<para>
       The following example uses the <see cref="System.Data.DataTable.FindRows"/> method to return a <see cref="System.Data.DataRow"/> containing
       the specified value.
    </para>
			<codelink SampleID="Classic WebData DataTable.FindRow1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataRowCollection.Contains"/>
		<seealso cref="System.Data.DataRowCollection.Find"/>
	</doc>
	<doc for="DataTable.FindRows1">
		<summary>
			<para>
       Finds and returns an array of <see cref="System.Data.DataRow"/> objects using the specified
    <see cref="System.Data.DataKey"/> 
    and values.
 </para>
		</summary>
		<param name="key">
    A <see cref="System.Data.DataKey"/> that specifies the <see cref="System.Data.DataColumn"/> objects which comprise the tables primary key or keys.
 </param>
		<param name=" values">
    An array of values to find.
 </param>
		<returns>
			<para>
       A <see cref="System.Data.DataRow"/> that contains the specified values.
    </para>
		</returns>
		<example>
			<para>
       The following example sets the <see cref="System.Data.DataKey"/> to the
       columns of a <see cref="System.Data.DataTable"/>, and returns an array of <see cref="System.Data.DataRow"/> objects
       that contain the specified values.
    </para>
			<codelink SampleID="Classic WebData DataTable.FindRows1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.Select"/>
	</doc>
	<doc for="DataTable.FindRows2">
		<summary>
			<para>
       Finds and returns an array of <see cref="System.Data.DataRow"/> objects with the specified value
       in the specified column.
    </para>
		</summary>
		<param name="column">
    The <see cref="System.Data.DataColumn"/> to search in.
 </param>
		<param name=" value">
    The value to search for.
 </param>
		<returns>
			<para>
       An array of <see cref="System.Data.DataRow"/> objects containing the specified value.
    </para>
		</returns>
		<remarks>
			<para>
       You can also use <see cref="System.Data.DataTable.Select"/>
       method to find a specific row in the <see cref="System.Data.DataTable"/>. Furthermore, the <see cref="System.Data.DataRowCollection.Find"/> and <see cref="System.Data.DataRowCollection.Contains"/> methods of the <see cref="System.Data.DataRowCollection"/> also return specific rows or values in rows.
    </para>
		</remarks>
	</doc>
	<doc for="DataTable.GetErrors">
		<summary>
			<para>Gets an array of <see cref="System.Data.DataRow"/> objects that contain errors.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.Data.DataRow"/>
 objects that have errors.</para>
		</returns>
		<remarks>
			<para>Invoke <see cref="System.Data.DataTable.GetErrors"/> after invoking the <see cref="System.Data.DataSet"/> class's <see cref="System.Data.DataSet.GetChanges"/> method. Also, be sure you don't invoke
    the <see cref="System.Data.DataTable.AcceptChanges"/> on the
 <see cref="System.Data.DataTable"/> until after all errors have been
    succesfully resolved, and the <see cref="System.Data.DataSet"/> re-submitted for
    updating.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataTable.GetErrors"/> method to return an array of <see cref="System.Data.DataRow"/>
 objects that have errors.</para>
			<codelink SampleID="Classic WebData DataTable.GetErrors Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.AcceptChanges"/>
		<seealso cref="System.Data.DataTable.HasErrors"/>
		<seealso cref="System.Data.DataRow.RowError"/>
		<seealso cref="System.Data.DataRow.SetColumnError"/>
	</doc>
	<doc for="DataTable.NewRow">
		<summary>
			<para>Creates a new <see cref="System.Data.DataRow"/>
 with the same schema as the table.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.DataRow"/> with the
    same schema as the <see cref="System.Data.DataTable"/> .</para>
		</returns>
		<remarks>
			<para>You must use the <see cref="System.Data.DataTable.NewRow"/> method to create new <see cref="System.Data.DataRow"/> objects
    with the same schema as the <see cref="System.Data.DataTable"/>. After creating a <see cref="System.Data.DataRow"/>, you
    can add it to the <see cref="System.Data.DataRowCollection"/>, through the <see cref="System.Data.DataTable"/> object's <see cref="System.Data.DataTable.Rows"/>
    property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.DataTable"/>, adds
    two <see cref="System.Data.DataColumn"/> objects that determine the table's schema, and
    creates several new <see cref="System.Data.DataRow"/> objects using the <see cref="System.Data.DataTable.NewRow"/>
    method. Those <see cref="System.Data.DataRow"/> objects are then added to the <see cref="System.Data.DataRowCollection"/>
    using the <see cref="System.Data.DataRowCollection.Add"/>
    method.</para>
			<codelink SampleID="Classic WebData DataTable.NewRow Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRow.AcceptChanges"/>
		<seealso cref="System.Data.DataRowCollection.Add"/>
		<seealso cref="System.Data.DataColumnCollection"/>
		<seealso cref="System.Data.DataColumn"/>
		<seealso cref="System.Data.DataRowCollection"/>
	</doc>
	<doc for="DataTable.CreateRowArray">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataTable.OnColumnChanging">
		<summary>
			<para>Raises the <see cref="System.Data.DataTable.ColumnChanging"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Data.DataColumnChangeEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler
       through a delegate. For an overview, see
    <see topic="cpconProvidingEventFunctionality"/>.</para>
			<note type="inheritinfo">
       When
       overriding <see cref="System.Data.DataTable.OnColumnChanging"/> in a derived class, be sure
       to call the base class's <see cref="System.Data.DataTable.OnColumnChanging"/> method.
    </note>
		</remarks>
		<seealso cref="System.Data.DataTable.ColumnChanging"/>
	</doc>
	<doc for="DataTable.OnPropertyChanged">
		<summary>
			<para>
       Raises the <see cref="System.Data.DataTable.OnPropertyChanged"/> event.
    </para>
		</summary>
		<param name="pcevent">
    A <see cref="System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see
    <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.DataTable.OnPropertyChanged"/> in a derived class, be sure to call the base 
       class's <see cref="System.Data.DataTable.OnPropertyChanged"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="DataTable.OnRemoveColumn">
		<summary>
			<para>Notifies the <see cref="System.Data.DataTable"/> that a <see cref="System.Data.DataColumn"/> is
    being removed.</para>
		</summary>
		<param name="column">The <see cref="System.Data.DataColumn"/> being removed.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For 
       more information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.DataTable.OnRemoveColumn"/> in a derived class, be sure to call the 
       base class's <see cref="System.Data.DataTable.OnRemoveColumn"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="DataTable.OnRowChanging">
		<summary>
			<para>
       Raises the <see cref="System.Data.DataTable.RowChanging"/> event.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.Data.DataRowChangeEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see
    <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.DataTable.OnRowChanging"/> in a derived class, be sure to call the base 
       class's <see cref="System.Data.DataTable.OnRowChanging"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="DataTable.RaisePropertyChanged">
		<summary>
     Raises the property changed event. This creates the needed event data
     and then calls OnPropertyChanged.
 </summary>
		<param name="name">
     Name of the changed property.
 </param>
	</doc>
	<doc for="DataTable.RejectChanges">
		<summary>
			<para>Rolls back all changes that have been made to the table
       since it was loaded, or the last time <see cref="System.Data.DataTable.AcceptChanges"/> was called.</para>
		</summary>
		<remarks>
			<para>When <see cref="System.Data.DataTable.RejectChanges"/> is called, any <see cref="System.Data.DataRow"/> objects
    that are still in edit-mode cancel their edits. New rows are removed. Rows with
    the <see cref="System.Data.DataRowState"/> set to <see langword="Modified "/>or <see langword="Deleted "/>
    return back to their original state.</para>
		</remarks>
		<example>
			<para>The following example makes several changes to a <see cref="System.Data.DataTable"/>, but 
    rejects the changes by invoking the <see cref="System.Data.DataTable.RejectChanges"/> method.</para>
			<codelink SampleID="Classic WebData DataTable.RejectChanges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.AcceptChanges"/>
		<seealso cref="System.Data.DataRow.BeginEdit"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataRowState"/>
		<seealso cref="System.Data.DataRowVersion"/>
		<seealso cref="System.Data.DataRow.EndEdit"/>
	</doc>
	<doc for="DataTable.Select">
		<overload>
			<para>Gets an array of <see cref="System.Data.DataRow"/> objects.</para>
		</overload>
		<summary>
			<para>Gets an array of all <see cref="System.Data.DataRow"/> objects.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.Data.DataRow"/> objects.</para>
		</returns>
		<remarks>
			<para>The method returns the current rows in order of primary key (or lacking one,
       order of addition.)</para>
		</remarks>
		<example>
			<para>The following example returns an array of <see cref="System.Data.DataRow"/> objects through the <see cref="System.Data.DataTable.Select"/>
 method.</para>
			<codelink SampleID="Classic WebData DataTable.Select Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.CaseSensitive"/>
		<seealso cref="System.Data.DataRow"/>
	</doc>
	<doc for="DataTable.Select1">
		<summary>
			<para>Gets an array of all <see cref="System.Data.DataRow"/> objects that match the filter criteria in order of
    primary key (or lacking one, order of addition.)</para>
		</summary>
		<param name="filterExpression">The criteria to use to filter the rows.</param>
		<returns>
			<para>An array of <see cref="System.Data.DataRow"/> objects.</para>
		</returns>
		<remarks>
			<para>To create the <paramref name="filterExpression "/>argument,
    use the same rules that apply to the
 <see cref="System.Data.DataColumn"/> 
 class's <see cref="System.Data.DataColumn.Expression"/> property value for creating filters.</para>
		</remarks>
		<example>
			<para>The following example uses a filter expression to return
       an array of <see cref="System.Data.DataRow"/> objects.</para>
			<codelink SampleID="Classic WebData DataTable.Select1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.CaseSensitive"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
		<seealso cref="System.Data.DataRow"/>
	</doc>
	<doc for="DataTable.Select3">
		<summary>
			<para>Gets an array of all <see cref="System.Data.DataRow"/> objects that match the filter in the order of the
    sort, that match the specified state.</para>
		</summary>
		<param name="filterExpression">The criteria to use to filter the rows.</param>
		<param name="sort">A string specifying the column and sort direction.</param>
		<param name="recordStates">One of the <see cref="System.Data.DataViewRowState"/> values.</param>
		<returns>
			<para>An array of <see cref="System.Data.DataRow"/> objects.</para>
		</returns>
		<remarks>
			<para>To form the <paramref name="filterExpression "/>argument, use the same rules for creating
    the <see cref="System.Data.DataColumn"/> class's <see cref="System.Data.DataColumn.Expression"/> property value. The
 <paramref name="Sort"/> argument also uses the same rules for creating class's <see cref="System.Data.DataColumn.Expression"/> strings.</para>
		</remarks>
		<example>
			<para>The following example uses a filter expression and record state to return an
       array of <see cref="System.Data.DataRow"/> objects.</para>
			<codelink SampleID="Classic WebData DataTable.Select3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.CaseSensitive"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataView"/>
		<seealso cref="System.Data.DataViewRowState"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
	</doc>
	<doc for="DataTable.ToString">
		<summary>
			<para>Gets the <see cref="System.Data.DataTable.TableName"/> and <see cref="System.Data.DataTable.DisplayExpression"/>, if there is one as a concatenated string.</para>
		</summary>
		<returns>
			<para>A string consisting of the <see cref="System.Data.DataTable.TableName"/> and the <see cref="System.Data.DataTable.DisplayExpression"/> values.</para>
		</returns>
		<remarks>
			<para>Gets the <see cref="System.Data.DataTable.TableName"/> and <see cref="System.Data.DataTable.DisplayExpression"/> for the <see cref="System.Data.DataTable"/>.</para>
		</remarks>
		<example>
			<para>The following example returns the <see cref="System.Data.DataTable.TableName"/> and <see cref="System.Data.DataTable.DisplayExpression"/> using the <see cref="System.Data.DataTable.ToString"/>method.</para>
			<codelink SampleID="Classic WebData DataTable.ToString Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.DisplayExpression"/>
		<seealso cref="System.Data.DataTable.TableName"/>
	</doc>
	<doc for="DataTable.NewRowArray">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataTable.Namespace">
		<summary>
			<para>Gets or sets the namespace for the XML represenation of the data stored in the <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<value>
			<para>The namespace of the <see cref="System.Data.DataTable"/> .</para>
		</value>
	</doc>
	<doc for="DataTable.Prefix">
		<summary>
			<para>Gets or sets the namespace for the XML represenation of the data stored in the <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<value>
			<para>The prefix of the <see cref="System.Data.DataTable"/> .</para>
		</value>
	</doc>
	<doc for="DataTable.Site">
		<summary>
			<para>Gets or sets an <see cref="T:System.ComponentModel.ISite" qualify="true"/> for the <see cref="System.Data.DataTable"/> .</para>
		</summary>
		<value>
			<para>An <see cref="T:System.ComponentModel.ISite"/> for the <see cref="System.Data.DataTable"/> .</para>
		</value>
		<remarks>
			<para>Sites bind a <see cref="T:System.ComponentModel.Component"/> to a <see cref="T:System.ComponentModel.Container"/> and enable 
   communication between them, as well as provide a way for the container to manage
   its components.</para>
		</remarks>
	</doc>
	<doc for="DataTable.OnColumnChanged">
		<summary>
			<para>Raises the <see cref="System.Data.DataTable.ColumnChanged"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Data.DataColumnChangeEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For an 
      overview, see <see topic="cpconProvidingEventFunctionality"/>.</para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.DataTable.OnColumnChanged"/> in a derived class, be sure to call the 
      base class's <see cref="System.Data.DataTable.OnColumnChanged"/> method.
   </note>
		</remarks>
	</doc>
	<doc for="DataTable.PrimaryKey">
		<summary>
			<para>Gets or sets an array of columns that function as primary keys for the data
      table.</para>
		</summary>
		<value>
			<para>An array of <see cref="System.Data.DataColumn"/> objects.</para>
		</value>
		<exception cref="System.Data.DataException">The key is a foreign key.</exception>
		<remarks>
			<para>The primary key of a table must be unique to identify
      the record in the table. It's also possible to have a table with a primary key
      made up of two or more columns. This occurs when a single column can't contain
      enough unique values. For example, a two column primary key might consist of a
      "FirstName" and "LastName" column. Because primary keys can be made up of more
      than one column, the <see cref="System.Data.DataTable.PrimaryKey"/> property consists of an array of
   <see cref="System.Data.DataColumn"/>
   objects.</para>
		</remarks>
		<example>
			<para> The first example
      shows how to return the primary key columns for a <see cref="System.Data.DataTable"/>
      displayed in a DataGrid. The second example
      demonstrates how to set the primary key columns for a <see cref="System.Data.DataTable"/>.</para>
			<codelink SampleID="Classic WebData DataTable.PrimaryKey Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn"/>
		<seealso cref="System.Data.DataTable.PrimaryKey"/>
		<seealso cref="System.Data.DataColumnCollection"/>
	</doc>
	<doc for="DataTable.ChildRelations">
		<summary>
			<para>Gets the collection of child relations for this <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.DataRelationCollection"/> that contains the child relations for the table; otherwise
   a null value if no <see cref="System.Data.DataRelation"/> objects exist.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Data.DataRelation"/> defines the
   relationship between two tables. Typically, two tables are linked through a
   single field that contains the same data. For example, a table which contains
   address data may have a single field containing codes that represent countries/regions.
   A second table that contains country/region data will have a single field that contains
   the code that identifies the country/region, and it is this code which is inserted into
   the corresponding field in the first table. A <see cref="System.Data.DataRelation"/>
   , then, contains at least four pieces of
   information: (1) the name of the first table, (2) the column name in the first
   table, (3) the name of the second table, and (4) the column name in the second
   table.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataTable.ChildRelations"/> property to return each child <see cref="System.Data.DataRelation"/> in a
   <see cref="System.Data.DataTable"/>.
   Each relation is then used as an argument in the <see cref="System.Data.DataRow.GetChildRows"/> method of the <see cref="System.Data.DataRow"/> to return an array of rows. The
   value of each column in the row is then printed.</para>
			<codelink SampleID="Classic WebData DataTable.ChildRelations Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.ParentRelations"/>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataRow.GetParentRows"/>
		<seealso cref="System.Data.DataRow.GetChildRows"/>
	</doc>
	<doc for="DataTable.Columns">
		<summary>
			<para>Gets the collection of columns that belong to this table.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.DataColumnCollection"/> that contains the
   collection of <see cref="System.Data.DataColumn"/> objects
   for the table; otherwise
   a null value if no <see cref="System.Data.DataColumn"/> objects exist.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataColumnCollection"/> determines the schema of a table
   by defining the data type of each column.</para>
		</remarks>
		<example>
			<para>The following example prints each value of each row in a table using the
   <see cref="System.Data.DataTable.Columns"/> property.</para>
			<codelink SampleID="Classic WebData DataTable.Columns Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumnCollection"/>
		<seealso cref="System.Data.DataColumn"/>
	</doc>
	<doc for="DataTable.Constraints">
		<summary>
			<para>Gets the collection of constraints maintained by this table.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.ConstraintCollection"/> that contains the collection of <see cref="System.Data.Constraint"/> objects
   for the table; otherwise
   a null value if no <see cref="System.Data.Constraint"/> objects exist.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Data.ForeignKeyConstraint"/>
restricts the
action performed when a value in a column (or columns) is either deleted or updated.
Such a constraint is intended to be used with primary key
columns. In a parent/child relationship between two tables, deleting a value from the parent table
can affect the child rows in one of the following ways.</para>
			<list type="bullet">
				<item>
					<term>
      The child rows can also be deleted (a cascading
      action).</term>
				</item>
				<item>
					<term>
      The values in the child column (or columns) can be
      set to null values.</term>
				</item>
				<item>
					<term>
      The values in the child column (or columns) can be
      set to default values.</term>
				</item>
				<item>
					<term>
      An exception can be generated.</term>
				</item>
			</list>
A <see cref="System.Data.UniqueConstraint"/> becomes active when attempting to
set a value in a primary key to a non-unique value.
</remarks>
		<example>
			<para>The following example adds a <see cref="System.Data.ForeignKeyConstraint"/> to the collection of
   constraints.</para>
			<codelink SampleID="Classic WebData DataTable.Constraints Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.AcceptRejectRule"/>
		<seealso cref="System.Data.ForeignKeyConstraint"/>
		<seealso cref="System.Data.UniqueConstraint"/>
		<seealso cref="System.Data.Rule"/>
	</doc>
	<doc for="DataTable.ParentRelations">
		<summary>
			<para>Gets the collection of parent relations for this <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.DataRelationCollection"/> that contains the parent relations for the table; otherwise
   a null value if no <see cref="System.Data.DataRelation"/> objects exist.</para>
		</value>
		<example>
			<para>The following example uses the <see cref="System.Data.DataTable.ParentRelations"/> property to return each parent <see cref="System.Data.DataRelation"/> in a
<see cref="System.Data.DataTable"/>.
   Each relation is then used as an argument in the <see cref="System.Data.DataRow.GetParentRows"/> method of the <see cref="System.Data.DataRow"/> to return an array of rows. The
   value of each column in the row is then printed.</para>
			<codelink SampleID="Classic WebData DataTable.ParentRelations Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.ChildRelations"/>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataSet.Relations"/>
	</doc>
	<doc for="DataTable.NestedInDataSet">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataTable.BeginLoadData">
		<summary>
			<para>Turns off notifications, index maintenance, and constraints while loading data.</para>
		</summary>
		<remarks>
			<para>Use <see cref="System.Data.DataTable.BeginLoadData"/> in conjunction with <see cref="System.Data.DataTable.LoadDataRow"/> and 
<see cref="System.Data.DataTable.EndLoadData"/>.</para>
		</remarks>
	</doc><doc for="DataTable.DataTable2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.DataTable"/> class with the <see cref="System.Runtime.Serialization.SerializationInfo"/> and 
   the <see cref="System.Runtime.Serialization.StreamingContext"/> .</para>
		</summary>
		<param name="info">The data needed to serialize or deserialize an object.</param>
		<param name="context">The source and destination of a given serialized stream.</param>
		<remarks>
			<para> This implemenation of the <see cref="System.Data.DataTable"/> constructor is required for <see cref="System.Runtime.Serialization.ISerializable"/>.</para>
		</remarks>
	</doc><doc for="DataTable.OnRowChanged">
		<summary>
			<para> Raises the <see cref="System.Data.DataTable.RowChanged"/> event.
 </para>
		</summary>
		<param name="e">A <see cref="System.Data.DataRowChangeEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
 through a delegate. For an overview, see
 <see topic="cpconProvidingEventFunctionality"/>.
 </para>
			<note type="inheritinfo">
 When overriding
 <see cref="System.Data.DataTable.OnRowChanged"/> in a derived class, be sure to call the base
 class's <see cref="System.Data.DataTable.OnRowChanged"/> method.
 
 </note>
		</remarks>
	</doc><doc for="DataTable.OnRowDeleted">
		<summary>
			<para> Raises the <see cref="System.Data.DataTable.RowDeleted"/> event.
 </para>
		</summary>
		<param name="e">A <see cref="System.Data.DataRowChangeEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
 through a delegate. For an overview, see
 <see topic="cpconProvidingEventFunctionality"/>.
 </para>
			<note type="inheritinfo">
 When overriding
 <see cref="System.Data.DataTable.OnRowDeleted"/> in a derived class, be sure to call the base
 class's <see cref="System.Data.DataTable.OnRowDeleted"/> method.
 
 </note>
		</remarks>
	</doc><doc for="DataTable.Reset">
		<summary>
			<para> Resets the <see cref="System.Data.DataTable"/> to its original state.</para>
		</summary>
	</doc><doc for="DataTable.EndLoadData">
		<summary>
			<para>Turns on notifications, index maintenance, and constraints after loading data.</para>
		</summary>
		<remarks>
			<para>Use <see cref="System.Data.DataTable.EndLoadData"/> in conjunction with <see cref="System.Data.DataTable.LoadDataRow"/> and <see cref="System.Data.DataTable.BeginLoadData"/>.</para>
		</remarks>
	</doc><doc for="DataTable.OnRowDeleting">
		<summary>
			<para> Raises the <see cref="System.Data.DataTable.RowDeleting"/> event.
   </para>
		</summary>
		<param name="e">A <see cref="System.Data.DataRowChangeEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see
   <see topic="cpconProvidingEventFunctionality"/>.
      </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.DataTable.OnRowDeleting"/> in a derived class, be sure to call the base
      class's <see cref="System.Data.DataTable.OnRowDeleting"/> method.
      
   </note>
		</remarks>
	</doc><doc for="DataTable">
		<summary>
			<para>Represents one table of in-memory data.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded read operations. You must synchronize any 
      write operations. </para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.Data.DataTable"/> is a central object in the ADO.NET library.
   Other objects that use the <see cref="System.Data.DataTable"/> include the <see cref="System.Data.DataSet"/> and the <see cref="System.Data.DataView"/>.</para>
			<para>When accessing <see cref="System.Data.DataTable"/> objects, note that they are conditionally
case-sensitive. For example, if one <see cref="System.Data.DataTable"/> is named "mydatatable" and another
is named "Mydatatable", a string used to search for one of the tables is
regarded as case-sensitive. However, if "mydatatable" exists and "Mydatatable"
does not, the search string is regarded as case-insensitive. For more
information about working with <see cref="System.Data.DataTable"/> objects, see <see topic="cpconCreatingDataTable"/> .</para>
			<para>If you are creating a <see cref="System.Data.DataTable"/> programmatically, you must first
define its schema by adding <see cref="System.Data.DataColumn"/> objects to the <see cref="System.Data.DataColumnCollection"/>
(accessed through the <see cref="System.Data.DataTable.Columns"/> property). For
more information about adding <see cref="System.Data.DataColumn"/>
objects, see <see topic="cpconaddingdatacolumnstodatatable"/>
.</para>
			<para> To add rows to a <see cref="System.Data.DataTable"/> , you must
first use the <see cref="System.Data.DataTable.NewRow"/> method to return a new <see cref="System.Data.DataRow"/> object.
The <see cref="System.Data.DataTable.NewRow"/> method returns a row with the schema
of the <see cref="System.Data.DataTable"/>, as it is defined by the table's <see cref="System.Data.DataColumnCollection"/>
. The
maximum number of rows that a <see cref="System.Data.DataTable"/> can
store is 16,777,216. For more information, see <see topic="cpconaddingdatatodatatable"/>
.</para>
			<para>The schema of a table is defined by the <see cref="System.Data.DataColumnCollection"/>,
the collection of <see cref="System.Data.DataColumn"/> objects. The <see cref="System.Data.DataColumnCollection"/>
is accessed through the <see cref="System.Data.DataTable.Columns"/>
property. See <see cref="System.Data.DataColumn"/> and
<see cref="System.Data.DataColumnCollection"/> for more information about defining a schema for
the table.</para>
			<para>The <see cref="System.Data.DataTable"/> contains
a collection of <see cref="System.Data.Constraint"/> objects that can be used to ensure the
integrity of the data. For more information, see <see topic="cpconAddingConstraintsToDataSet"/>
.</para>
			<para>To determine when changes are made to a table, use one
   of the following events: <see cref="System.Data.DataTable.RowChanged"/>, <see cref="System.Data.DataTable.RowChanging"/>, <see cref="System.Data.DataTable.RowDeleting"/>, and <see cref="System.Data.DataTable.RowDeleted"/>. For more
   information, see <see topic="cpconWorkingWithDataTableEvents"/>
   .</para>
			<para>When an instance of <see cref="System.Data.DataTable"/> is created, some of the read/write properties are
set to initial values. For a list of these values, see the <see cref="System.Data.DataTable"/>
constructor.</para>
			<note type="note">
   The <see cref="System.Data.DataSet"/> and <see cref="System.Data.DataTable"/> objects
   inherit from <see cref="System.ComponentModel.MarshalByValueComponent"/>, and support the <see cref="System.Runtime.Serialization.ISerializable"/> interface for remoting. These are the only
   ADO.NET objects that can be remoted.
</note>
		</remarks>
		<example>
			<para>The following example creates two <see cref="System.Data.DataTable"/> objects,
   one <see cref="System.Data.DataRelation"/> object, and adds the new objects to a <see cref="T:System.Data.DataSet"/> . The tables are then
   displayed in a <see cref="T:System.Windows.Forms.DataGrid"/> control by
   invoking the <see cref="P:System.Windows.Forms.DataGrid.SetDataBinding" qualify="true"/>
   method.</para>
			<codelink SampleID="Classic WebData DataTable Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumnCollection"/>
		<seealso cref="System.Data.DataColumn"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataView"/>
		<seealso cref="System.Data.DataRowCollection"/>
	</doc><doc for="DataTable.BeginInit">
		<summary>
			<para>Begins the initialization of a <see cref="System.Data.DataTable"/> that is used on a form or used by another component. The initialization occurs at runtime.</para>
		</summary>
		<remarks>
			<para>The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <see cref="System.Data.DataTable.EndInit"/>
method ends the initialization. Using the <see langword="BeginInit "/>and
<see langword="EndInit "/> methods prevents the control from being used before it is fully initialized.</para>
		</remarks>
	</doc><doc for="DataTable.EndInit">
		<summary>
			<para>Ends the initialization of a <see cref="System.Data.DataTable"/> that is used on a form or used by another component. The initialization occurs at runtime.</para>
		</summary>
		<remarks>
			<para>The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <see cref="System.Data.DataTable.BeginInit"/>
method starts the initialization. Using the <see langword="BeginInit "/>and
<see langword="EndInit "/> methods prevents the control from being used before it is fully initialized.</para>
		</remarks>
	</doc><doc for="DataTable.DisplayExpression">
		<summary>
			<para>Gets or sets the expression that will return a value used to represent this table
      in the user interface.</para>
		</summary>
		<value>
			<para>A display string.</para>
		</value>
		<seealso cref="System.Data.DataColumn.Expression"/>
	</doc>
	<doc for="DataTable.GetRowType">
		<nodoc/>
		<summary>
			<para>This
      member supports the .NET Framework infrastructure and is not intended to be used
      directly from your code.
   </para>
		</summary>
		<returns>
			<para>The <see cref="System.Type"/> of the row.</para>
		</returns>
	</doc><doc for="DataTable.HasErrors">
		<summary>
			<para>Gets a value indicating whether there are errors in any of the rows in any of
      the tables of the <see cref="System.Data.DataSet"/> to which the table belongs.</para>
		</summary>
		<value>
			<para><see langword="true "/>if errors exist, otherwise, <see langword="false"/>. </para>
		</value>
		<remarks>
			<para>As users work on a set of data contained in a <see cref="System.Data.DataSet"/>, you can mark each change with an
   error if the change causes some validation failure. You can mark an entire
<see cref="System.Data.DataRow"/>
with an error message using the <see cref="System.Data.DataRow.RowError"/> property. You can also set errors
on each column of the row with the <see cref="System.Data.DataRow.SetColumnError"/> method.</para>
			<para>Before updating a data source with a <see cref="System.Data.DataSet"/>, it's recommended that you first
invoke the <see cref="System.Data.DataSet.GetChanges"/> method on the target <see cref="System.Data.DataSet"/>. The method results in a <see cref="System.Data.DataSet"/> that
contains only the changes made to the original. Before sending the <see cref="System.Data.DataSet"/> to the data source for updating, check the <see cref="System.Data.DataTable.HasErrors"/> property of each table to see if
any errors have been attached to the rows or columns in the rows.</para>
			<para>After reconciling each error, clear the errors with the <see cref="System.Data.DataRow.ClearErrors"/> method of the
<see langword="DataRow"/> .</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataTable.HasErrors"/> property to check if a table contains errors.</para>
			<codelink SampleID="Classic WebData DataTable.HasErrors Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.GetErrors"/>
	</doc>
	<doc for="DataTable.Locale">
		<summary>
			<para>Gets or sets the locale information used to compare strings within the table.</para>
		</summary>
		<value>
			<para>A <see cref="System.Globalization.CultureInfo"/> that contains data about
   the user's machine locale. The default is the <see cref="System.Data.DataSet"/> object's <see cref="System.Globalization.CultureInfo"/> (returned by the <see cref="System.Data.DataSet.Locale"/>
   property) to which the <see cref="System.Data.DataTable"/> belongs; if the table doesn't belong to a <see cref="System.Data.DataSet"/> ,
   the default is the current system <see cref="System.Globalization.CultureInfo"/>.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Globalization.CultureInfo"/> represents the software preferences of a
   particular culture or community.</para>
			<para>When used for string comparisons, the <see cref="System.Globalization.CultureInfo"/> affects sorting,
comparisons, and filterings.</para>
		</remarks>
		<example>
			<para>The following example sets
      the <see cref="System.Globalization.CultureInfo"/> through the <see cref="System.Data.DataTable.Locale"/>
      and prints the ISO language name.</para>
			<codelink SampleID="Classic WebData DataTable.Locale Example" SnippetID="1"/>
		</example>
		<seealso cref="T:System.Globalization.CultureInfo"/>
	</doc>
	<doc for="DataTable.GetChanges">
		<overload>
			<para>Gets a copy of the <see cref="System.Data.DataTable"/> containing all changes made to it
   since it was last loaded, or since <see cref="System.Data.DataTable.AcceptChanges"/>
   was called.</para>
		</overload>
		<summary>
			<para>Gets a copy of the <see cref="System.Data.DataTable"/> that contains all changes made to
   it since it was loaded or <see cref="System.Data.DataTable.AcceptChanges"/>
   was last called.</para>
		</summary>
		<returns>
			<para>A copy of the changes from this <see cref="System.Data.DataTable"/>, or
<see langword="null "/>
if no changes are found.</para>
		</returns>
		<remarks>
			<para>Gets a copy of the <see cref="System.Data.DataTable"/> that contains all changes made to
   it since it was loaded or <see cref="System.Data.DataTable.AcceptChanges"/> was last called. This copy
   is particularly designed so that it can be merged back into the original <see cref="System.Data.DataTable"/>.
   Relationship constraints may cause Unchanged parent rows to be included. If no
   rows of these rowStates are found, this method returns
<see langword="null"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.GetChanges Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataTable.Clear">
		<summary>
			<para> Clears the <see cref="System.Data.DataTable"/>
of all data.</para>
		</summary>
		<remarks>
			<para>All rows in all tables are removed. An exception is generated if the table has
      any enforced child relations that would cause child rows to be stranded.</para>
			<para>If the <see cref="System.Data.DataSet"/> is bound to an <see cref="System.Xml.XmlDataDocument"/>, calling <see cref="System.Data.DataSet.Clear" qualify="true"/> or
<see cref="System.Data.DataTable.Clear" qualify="true"/> raises the <see cref="System.NotSupportedException"/>. To avoid this situation, traverse each table, removing each row 
   one at a time.</para>
		</remarks>
		<example>
			<para>The following example clears the table of all data.</para>
			<codelink SampleID="Classic WebData DataTable.Clear Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataTable.CreateInstance">
		<summary>
			<para>Creates a new instance of the <see cref="System.Data.DataTable"/> class.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.DataTable"/> .</para>
		</returns>
	</doc>
	<doc for="DataTable.OnPropertyChanging">
		<nodoc/>
		<summary>
			<para>Raises the <see cref="System.Data.DataTable.PropertyChanging"/> event.</para>
		</summary>
		<param name="pcevent">A <see cref="System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data. </param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For an
      overview, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.DataTable.OnPropertyChanging"/> in a derived class, be sure to call the
      base class's <see cref="System.Data.DataTable.OnPropertyChanging"/> method.
      
   </note>
		</remarks>
	</doc>
	<doc for="DataTable.LoadDataRow">
		<summary>
			<para>Finds and updates a specific row. If no matching
      row is found, a new row is created using the given values.</para>
		</summary>
		<param name="values">An array of values used to create the new row.</param>
		<param name="fAcceptChanges"><see langword="true"/> to accept changes; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>The new <see cref="System.Data.DataRow"/>
.</para>
		</returns>
		<exception cref="System.ArgumentException">The array is larger than the number of columns in the table.</exception>
		<exception cref="System.InvalidCastException">A value doesn't match its respective column type.</exception>
		<exception cref="System.Data.ConstraintException">Adding the row invalidates a constraint.</exception>
		<exception cref="System.Data.NoNullAllowedException">Attempting to put a null in a column where <see cref="System.Data.DataColumn.AllowDBNull"/> is false.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataTable.LoadDataRow"/>
method takes
an array of values and finds the
matching value(s) in the primary key column(s).</para>
			<para>If a column has a default value, pass a null value 
   in the array to set the default value for that column. Similarly, if a column
   has its <see cref="System.Data.DataColumn.AutoIncrement"/> property set
   to true, pass a null value
<see langword=" "/>in the array to set the automatically
   generated value for the row.</para>
			<para>If the <paramref name="fAcceptChanges "/>parameter is <see langword="true"/> or
not specified, the new data is added and then <see cref="System.Data.DataTable.AcceptChanges"/> is called to accept
all changes in the <see cref="System.Data.DataTable"/>; if the
argument is <see langword="false"/>, newly added rows are
marked as insertions, and changes to
existing rows are marked as modifications.</para>
			<para>Exceptions can also occur during either a <see cref="System.Data.DataTable.ColumnChanging"/> or <see cref="System.Data.DataTable.RowChanging"/>
event. If an exception occurs, the row is not added to the
table.</para>
			<para>Use <see cref="System.Data.DataTable.LoadDataRow"/> in conjunction with <see cref="System.Data.DataTable.BeginLoadData"/> and <see cref="System.Data.DataTable.EndLoadData"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataTable.LoadDataRow"/> method to attempt to find a row. If no such row is
   found, the values are used to create a new row.</para>
			<codelink SampleID="Classic WebData DataTable.LoadDataRow Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataTable.GetChanges1">
		<summary>
			<para>Gets a copy of the <see cref="System.Data.DataTable"/> containing all changes made to it since it was last
   loaded, or since <see cref="System.Data.DataTable.AcceptChanges"/> was called, filtered by <see cref="System.Data.DataRowState"/>.</para>
		</summary>
		<param name="rowStates">One of the <see cref="System.Data.DataRowState"/> values.</param>
		<returns>
			<para>A filtered copy of the <see cref="System.Data.DataTable"/> that can have actions performed
   on it, and subsequently be merged back in using <see cref="System.Data.DataSet.Merge"/>. If
   no rows of the desired <see cref="System.Data.DataRowState"/> are found, the method returns
<see langword="null"/>
.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.DataTable.GetChanges"/> method is used to produce a
   second <see cref="System.Data.DataTable"/> object which contains only the changes introduced
   into the original. Use the <paramref name="rowStates"/> argument to specify the type of
   changes the new object should include.</para>
			<para> Relationship constraints may cause parent
   rows marked <see langword="Unchanged"/> to be included. If no rows of the desired
<see cref="System.Data.DataRowState"/> are found, the <see cref="System.Data.DataTable.GetChanges"/>
method returns <see langword="null"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.GetChanges1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataTable.Rows">
		<summary>
			<para>Gets the collection of rows that belong to this table.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.DataRowCollection"/> that contains <see cref="System.Data.DataRow"/> objects; otherwise
   a null value if no <see cref="System.Data.DataRow"/> objects exist.</para>
		</value>
		<remarks>
			<para>To create a new <see cref="System.Data.DataRow"/>, you must use the <see cref="System.Data.DataTable.NewRow"/>
method to return a new object. Such an object is automatically
configured according to the schema defined for the <see cref="System.Data.DataTable"/> through its collection of <see cref="System.Data.DataColumn"/>
objects. After creating a new row and setting the values for each column in the
row, add the row to the DataRowCollection using the Add method.</para>
			<para>Each <see cref="System.Data.DataRow"/> in the collection represents a row of data in the
table. To commit a change to the value of a column in the row, you must invoke
the <see cref="System.Data.DataTable.AcceptChanges"/> method.</para>
		</remarks>
		<example>
			<para>The following shows two examples of returning and
      setting rows. The first example uses the <see cref="System.Data.DataTable.Rows"/>
      property and prints the value of each column for every row. The second example
      uses the <see cref="System.Data.DataTable"/> object's <see cref="System.Data.DataTable.NewRow"/> method to create a new <see cref="System.Data.DataRow"/> object
      with the schema of the <see cref="System.Data.DataTable"/>. After setting the row values, the row is added to
      the <see cref="System.Data.DataRowCollection"/> through the Add method.</para>
			<codelink SampleID="Classic WebData DataTable.Rows Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.AcceptChanges"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataRowCollection"/>
		<seealso cref="System.Data.DataTable.NewRow"/>
	</doc>
	<doc for="DataTable.TableName">
		<summary>
			<para>Gets or sets the name of the <see cref="System.Data.DataTable"/> .</para>
		</summary>
		<value>
			<para>The name of the <see cref="System.Data.DataTable"/> .</para>
		</value>
		<exception cref="System.ArgumentException"><see langword="null"/> or empty string ("") is passed in and this table belongs to a collection.</exception>
		<exception cref="System.Data.DuplicateNameException"> The table belongs to a collection that already has a table with the same name, with the name being case-sensitive).</exception>
		<remarks>
			<para>The <see cref="System.Data.DataTable.TableName"/> is used to return this table from the parent
<see cref="System.Data.DataSet"/>
object's <see cref="System.Data.DataTableCollection"/> (returned by the <see cref="System.Data.DataSet.Tables"/>
property).</para>
		</remarks>
		<example>
			<para>The following example prints the <see cref="System.Data.DataTable.TableName"/> for each table in a collection of <see cref="System.Data.DataTable"/>
objects.</para>
			<codelink SampleID="Classic WebData DataTable.TableName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataSet.Tables"/>
	</doc>
	<doc for="DataTable.Select2">
		<summary>
			<para>Gets an array of all <see cref="System.Data.DataRow"/> objects that match the filter criteria, in the
   specified sort order.</para>
		</summary>
		<param name="filterExpression">The criteria to use to filter the rows.</param>
		<param name="sort">A string specifying the column and sort direction.</param>
		<returns>
			<para>An array of <see cref="System.Data.DataRow"/> objects matching the filter
   expression.</para>
		</returns>
		<remarks>
			<para>To form the <paramref name="filterExpression "/>argument, use the same rules for
   creating the <see cref="System.Data.DataColumn"/> class's <see cref="System.Data.DataColumn.Expression"/> property value. The <paramref name="Sort"/>
   argument also uses the same rules for creating class's <see cref="System.Data.DataColumn.Expression"/> strings.</para>
		</remarks>
		<example>
			<para>The following example uses a filter expression to return an array of <see cref="System.Data.DataRow"/> objects.</para>
			<codelink SampleID="Classic WebData DataTable.Select2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.CaseSensitive"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
		<seealso cref="System.Data.DataRow"/>
	</doc>
	<doc for="DataTable.ColumnChanging">
		<summary>
			<para>Occurs when a value is being changed for the
      specified <see cref="System.Data.DataColumn"/> in a <see cref="System.Data.DataRow"/> .</para>
		</summary>
		<remarks>
			<para>For more information see <see topic="cpconworkingwithdatatableevents"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.ColumnChanging Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.ColumnChanged">
		<summary>
			<para> Occurs after a value has been changed for the
      specified <see cref="System.Data.DataColumn"/> in a <see cref="System.Data.DataRow"/> .</para>
		</summary>
		<remarks>
			<para>For more information see <see topic="cpconworkingwithdatatableevents"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.ColumnChanged Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.RowChanged">
		<summary>
			<para> Occurs after a <see cref="System.Data.DataRow"/> has been changed successfully.
   </para>
		</summary>
		<remarks>
			<para>For more information see <see topic="cpconworkingwithdatatableevents"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.RowChanged Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.RowChanging">
		<summary>
			<para> Occurs when a <see cref="System.Data.DataRow"/> is changing.
   </para>
		</summary>
		<remarks>
			<para>For more information see <see topic="cpconworkingwithdatatableevents"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.RowChanging Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.RowDeleting">
		<summary>
			<para>       Occurs before a row in the table is
      about to be deleted.
      </para>
		</summary>
		<remarks>
			<para>For more information see <see topic="cpconworkingwithdatatableevents"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.RowDeleting Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.RowDeleted">
		<summary>
			<para>       Occurs after a row in the
      table has been deleted.
      </para>
		</summary>
		<remarks>
			<para>For more information see <see topic="cpconworkingwithdatatableevents"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataTable.RowDeleted Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.ExtendedProperties">
		<summary>
			<para>Gets the collection of customized user information.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.PropertyCollection"/> that contains custom user information.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Data.DataTable.ExtendedProperties"/> to add custom information to a <see cref="System.Data.DataTable"/>. Add
   information with the Add method. Retrieve information with the Item method.</para>
			<para>Extended properties must be of type <see cref="System.String"/>. Properties that are not of type String
are not persisted when the <see cref="System.Data.DataTable"/> is written as XML.</para>
		</remarks>
		<example>
			<para>The following example adds a timestamp value to the <see cref="System.Data.DataTable"/> through
   the <see cref="System.Data.DataTable.ExtendedProperties"/> property.</para>
			<codelink SampleID="Classic WebData DataTable.ExtendedProperties Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.AcceptChanges">
		<summary>
			<para>Commits all the changes made to this table since the last time <see cref="System.Data.DataTable.AcceptChanges"/> was called.</para>
		</summary>
		<remarks>
			<para>When <see cref="System.Data.DataTable.AcceptChanges"/> is called, any <see cref="System.Data.DataRow"/> object still in edit mode
   successfully ends its edits. The <see cref="System.Data.DataRowState"/> also changes: all
   <SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> and <SpecialLocalizableItem kind="UIElement">Modified</SpecialLocalizableItem> rows become <SpecialLocalizableItem kind="UIElement">Unchanged</SpecialLocalizableItem>; <SpecialLocalizableItem kind="UIElement">Deleted</SpecialLocalizableItem> 
   rows are removed. </para>
			<para> The <see langword="AcceptChanges"/> method is generally called on a <see cref="System.Data.DataTable"/>
after you attempt to update the <see cref="System.Data.DataSet"/> using the <see cref="System.Data.Common.DbDataAdapter.Update" qualify="true"/>
method.</para>
		</remarks>
		<example>
			<para>The following example tests each table for errors. If
      the table's errors can be reconciled (by passing it to an undefined function),
   <see cref="System.Data.DataTable.AcceptChanges"/> is called; otherwise, <see cref="System.Data.DataTable.RejectChanges"/>
   is called.</para>
			<codelink SampleID="Classic WebData DataTable.AcceptChanges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataRow.AcceptChanges"/>
		<seealso cref="System.Data.DataRow.BeginEdit"/>
		<seealso cref="System.Data.DataRowState"/>
		<seealso cref="System.Data.DataRow.EndEdit"/>
		<seealso cref="System.Data.DataTable.RejectChanges"/>
	</doc><doc for="DataTable.ImportRow">
		<summary>
			<para>Copies a <see cref="System.Data.DataRow"/> into a <see cref="System.Data.DataTable"/>, preserving any property settings, as well as original and current values.</para>
		</summary>
		<param name="row">The <see langword="DataRow"/>to be imported.</param>
		<remarks>
			<para>Calling <see cref="System.Data.DataTable.NewRow"/> adds a row to the table using the
   existing table schema, but with default values for the row, and sets the
<see langword="DataRowState"/> to 
<SpecialLocalizableItem kind="UIElement">Added</SpecialLocalizableItem> . Calling <see langword="ImportRow"/> preserves the 
existing <see langword="DataRowState"/>, along with other values in the row.</para>
		</remarks>
	</doc><doc for="DataTable.Clone">
		<summary>
			<para>Clones the structure of the <see cref="System.Data.DataTable"/>,
   including all <see cref="System.Data.DataTable"/> schemas and constraints.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.DataTable"/> with the same schema as the current <see cref="System.Data.DataTable"/> .</para>
		</returns>
		<remarks>
			<note type="note">
      If these classes have been
      derived, the clone will also be of the same derived classes.
      
      </note>
		</remarks>
		<example>
			<para>The following example creates a clone of a <see cref="System.Data.DataTable"/> object's schema.</para>
			<codelink SampleID="Classic WebData DataTable.Clone Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataTable.Copy">
		<summary>
			<para>Copies both the structure and data for this <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.DataTable"/> with the same structure (table schemas
   and constraints) and data as this <see cref="System.Data.DataTable"/>
   .</para>
			<note type="note">
   If these classes have been
   derived, the copy will also be of the same derived classes.
   
</note>
		</returns>
		<example>
			<para>The following example uses the <see cref="System.Data.DataTable.Copy"/> method to create a copy of the
   original <see cref="System.Data.DataTable"/>.</para>
			<codelink SampleID="Classic WebData DataTable.Copy Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.Clone"/>
	</doc><doc for="DataTable.NewRowFromBuilder">
		<summary>
			<para> Creates a new row from an existing row.
      </para>
		</summary>
		<param name="builder">A <see cref="System.Data.DataRowBuilder"/> object.</param>
		<returns>
			<para>A <see cref="System.Data.DataRow"/> derived class.</para>
		</returns>
	</doc><doc for="DataTable.ISerializable.GetObjectData"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc></docs>
