<docs>
	<doc for="IDataParameter.DataType">
		<summary>
			<para>Gets the <see cref="System.Type"/>
 of the parameter.</para>
		</summary>
		<value>
			<para>The <see cref="System.Type"/> of the parameter.</para>
		</value>
	</doc>
	<doc for="IDataParameter.Direction">
		<summary>
			<para> Gets or sets a value indicating whether
      the parameter
      is input-only, output-only, bidirectional, or a stored procedure return value parameter.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.ParameterDirection"/> values. The default is <see langword="Input"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The property was not set to one of the valid <see cref="System.Data.ParameterDirection"/> values.</exception>
		<remarks>
			<para>If the <see cref="System.Data.ParameterDirection"/> is output, and execution of
   the associated <see cref="System.Data.SqlClient.SqlCommand"/> does not return
   a value, the <see cref="System.Data.IDataParameter"/> contains a null value. </para>
			<para>After the last row from the last resultset is read,
<see langword="Output"/>, <see langword="InputOut"/>, and <see langword="ReturnValue "/> parameters are updated. </para>
		</remarks>
		<example>
			<para>The following example creates an instance of the implementing class, <see cref="System.Data.SqlClient.SqlParameter"/>, and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlParameter.Direction Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataParameter.ParameterName">
		<summary>
			<para>Gets or sets the name of the <see cref="System.Data.IDataParameter"/>
.</para>
		</summary>
		<value>
			<para>The name of the <see cref="System.Data.IDataParameter"/> . The default is an empty string.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.IDataParameter.ParameterName"/>
is specified in the form @paramname. You must set <see cref="System.Data.IDataParameter.ParameterName"/> before
executing a command that relies on parameters.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the implementing class, <see cref="System.Data.SqlClient.SqlParameter"/>, and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlParameter.ParameterName Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataParameter.SourceColumn">
		<summary>
			<para>Gets or sets the name of the source column that is mapped to
      the <see cref="System.Data.DataSet"/> and used for loading or returning the <see cref="System.Data.IDataParameter.Value"/>
      .</para>
		</summary>
		<value>
			<para>The name of the source column that is mapped to the <see cref="System.Data.DataSet"/> . The default is an
   empty string.</para>
		</value>
		<remarks>
			<para>The link betwen the value of the <see cref="System.Data.IDataParameter"/> and the <see cref="System.Data.DataTable"/> may be bidirectional depending on the value of the
<see cref="System.Data.IDataParameter.Direction"/> 
property.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the implementing class, <see cref="System.Data.SqlClient.SqlParameter"/>, and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlParameter.SourceColumn Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataParameter.SourceVersion">
		<summary>
			<para>Gets or sets the <see cref="System.Data.DataRowVersion"/> to use when loading <see cref="System.Data.IDataParameter.Value"/> .</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.DataRowVersion"/> values. The default is
<see langword="Current"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The property was not set one of the <see cref="System.Data.DataRowVersion"/> values.</exception>
		<remarks>
			<para>This property is used by
      the <see cref="System.Data.IDbDataAdapter.UpdateCommand"/>
      during the <see cref="System.Data.Common.DbDataAdapter.Update"/> to determine whether the
      original or current value is used for a parameter value. This allows primary
      keys to be updated. This property is ignored by the <see cref="System.Data.IDbDataAdapter.InsertCommand"/> and <see cref="System.Data.IDbDataAdapter.DeleteCommand"/>. This property is set to
      the version of the <see cref="System.Data.DataRow"/> used by the <see cref="System.Data.DataRow.this"/> property, or the <see cref="System.Data.DataRow.GetChildRows"/> method of the <see cref="System.Data.DataRow"/>
      object.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the implementing class, <see cref="System.Data.SqlClient.SqlParameter"/>, and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlParameter.SourceVersion Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataParameter.Value">
		<summary>
			<para>Gets or sets the value of the parameter.</para>
		</summary>
		<value>
			<para>An <see cref="System.Object"/> that is the value 
   of the parameter. The default value is null.</para>
		</value>
		<remarks>
			<para> For input parameters, the
      value is bound to the <see cref="System.Data.IDbCommand"/>
      that is sent to the server. For output and return value parameters, the value is
      set on completion of the <see cref="System.Data.IDbCommand"/> and after the <see cref="System.Data.IDataReader"/> is closed.</para>
			<para>When sending a null parameter value to the server, the
      user must specify <see langword="DBNull"/>, not null. The null value in the
      system is an empty object that has no value. <see langword="DBNull "/>
      is used to represent null values.</para>
			<para> If the application specifies the database
      type, the bound value is converted to that type when the provider sends the
      data to the server. The provider attempts to convert any type of
      value if it supports the <see cref="System.IConvertible"/> interface. Conversion errors may
      result if the specified type is not compatible with the value.</para>
			<para> The <see cref="System.Data.SqlClient.SqlParameter.Value"/> property is overwritten by <see cref="System.Data.Common.DbDataAdapter.Update"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the implementing class, <see cref="System.Data.SqlClient.SqlParameter"/>, and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlParameter.Value Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataParameter.IsNullable">
		<summary>
			<para> Gets a value indicating whether the parameter accepts null values.</para>
		</summary>
		<value>
			<para><see langword="true"/> if null values are accepted; otherwise,
<see langword="false"/>. The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>Null values are handled using the <see cref="System.DBNull"/> class.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the implementing class, <see cref="System.Data.SqlClient.SqlParameter"/>, and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlParameter.IsNullable Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDataParameter">
		<summary>
			<para> Represents a parameter to a Command object, and
      optionally, its mapping to <see cref="System.Data.DataSet"/> columns; and is implemented by .NET Framework data providers
      that access data sources.
      </para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.IDataParameter"/> interface allows an inheriting class to implement a Parameter class, which represents a parameter to a Command object. For more information
   about Parameter classes, see <see topic="cpconusingstoredprocedureswithcommand"/>. For more information about
   implementing .NET Framework data providers, see <see topic="cpconimplementingnetdataprovider"/>.</para>
			<para>An application does not create an instance of the <see cref="System.Data.IDataParameter"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDataParameter"/> . </para>
			<para>Classes that inherit <see cref="System.Data.IDataParameter"/> must implement the inherited members, and typically
define additional members to add provider-specific functionality. For example, the <see cref="System.Data.IDataParameter"/>
interface defines the <see cref="System.Data.IDataParameter.DbType"/> property. In
turn, the <see cref="System.Data.OleDb.OleDbParameter"/> class inherits this property, and also defines the <see cref="System.Data.OleDb.OleDbParameter.OleDbType"/>
property.</para>
			<note type="inotes">
   To promote consistency among
   .NET Framework data providers, name the inheriting class in the form
<paramref name="Prv"/>Parameter where <paramref name="Prv "/>is the 
   uniform prefix given to all classes in a specific .NET Framework data provider namespace.
   For example, <paramref name="Sql"/> is the prefix of the <see cref="System.Data.SqlClient.SqlCommand"/> class in the
<see langword="System.Data.SqlClient"/> 
namespace.
</note>
			<para> When
   you inherit from the <see cref="System.Data.IDataParameter"/>
   interface, you should implement the following constructors:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> PrvParameter()</term>
					<description>Initializes a new instance of the Parameter class.</description>
				</item>
				<item>
					<term> PrvParameter(string name, PrvDbType dataType)</term>
					<description>Initializes a new instance of the Parameter class with the parameter name and data
         type.</description>
				</item>
				<item>
					<term> PrvParameter(string name, object value)</term>
					<description>Initializes a new instance of the Parameter class with the parameter name and an object that is the value
         of the Parameter.</description>
				</item>
				<item>
					<term>
         PrvParameter(string name, PrvDbType dataType, int size)</term>
					<description>Initializes a new instance of the Parameter class with the
         parameter name, data type,
         and width.</description>
				</item>
				<item>
					<term> PrvParameter(string name, PrvDbType dataType, int size, string srcColumn)</term>
					<description> Initializes a new instance of the DbParameter class with the parameter
         name, data type, width, and source column
         name.</description>
				</item>
				<item>
					<term> PrvParameter(string parameterName, PrvDbType dbType, int size, ParameterDirection direction, Boolean isNullable, Byte precision, Byte scale, string srcColumn, DataRowVersion srcVersion, object value)</term>
					<description>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbParameter"/> class
      with the parameter name, data type, width, source column name, parameter direction, numeric precision,
      and other
      properties.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates multiple instances of the derived class,
      <see cref="System.Data.SqlClient.SqlParameter"/>, through the <see cref="System.Data.SqlClient.SqlParameterCollection"/>
   collection within the <see cref="System.Data.SqlClient.SqlDataAdapter"/> . These parameters are used to select
   data from the data source and place the data in the <see cref="System.Data.DataSet"/> . This example assumes that
   a <see cref="System.Data.DataSet"/> and a <see cref="System.Data.SqlClient.SqlDataAdapter"/>
   have already been created with the appropriate schema, commands, and connection.</para>
			<codelink SampleID="Classic WebData SqlParameter Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDataParameter.DbType">
		<summary>
			<para> Gets or sets the <see cref="System.Data.DbType"/> of the
   parameter.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.DbType"/> values. The default is <see cref="System.Data.DbType.String"/>.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The property was not set to a valid <see cref="System.Data.DbType"/>.</exception>
		<remarks>
			<para>The PrvDbType (where Prv represents the
      provider-specific prefix) and <see cref="System.Data.SqlClient.SqlParameter.DbType"/> are linked. Therefore, setting
      the <see cref="System.Data.SqlClient.SqlParameter.DbType"/>
      changes the PrvDbType to a supporting PrvDbType.</para>
			<para>For a list of the supported data types, see the
      appropriate .NET Framework data provider PrvDbType member. For more information, see
      <see topic="cpconUsingParametersWithDataAdapters"/>.</para>
		</remarks>
	</doc>
</docs>
