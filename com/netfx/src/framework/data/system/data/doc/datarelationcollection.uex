<docs>
	<doc for="DataRelationCollection.AssignName">
		<summary>
 Creates a new default name.
 </summary>
		<returns>
 the new default name.
 </returns>
	</doc>
	<doc for="DataRelationCollection.Clear">
		<summary>
 Clears the collection of any relations.
 </summary>
	</doc>
	<doc for="DataRelationCollection.MakeName">
		<summary>
 Makes a default name with the given index.  e.g. Relation1, Relation2, ... Relationi
 </summary>
		<param name="index">
 The index to construct a default name for.
 </param>
		<returns>
 the proposed default name.
 </returns>
	</doc>
	<doc for="DataRelationCollection.NamesEqual">
		<summary>
 Compares the two names with a case insensitive comparison.
 </summary>
		<param name="s1">
 first string
 </param>
		<param name="s2">
 second string
 </param>
		<returns>
 whether they are equal (case insensitively)
 </returns>
	</doc>
	<doc for="DataRelationCollection.RegisterName">
		<summary>
 Registers this name as being used in the collection.  Will throw an ArgumentException
 if the name is already being used.  Called by Add, All property, and Relation.RelationName property.
 if the name is equivalent to the next default name to hand out, we increment our defaultNameIndex.
 </summary>
		<param name="name">
 name to register as being used.
 </param>
	</doc>
	<doc for="DataRelationCollection.UnregisterName">
		<summary>
 Unregisters this name as no longer being used in the collection.  Called by Remove, All property, and
 Relation.RelationName property.  If the name is equivalent to the last proposed default namem, we walk backwards
 to find the next proper default name to hang out.
 </summary>
		<param name="name">
 name to unregister as no longer used.
 </param>
	</doc>
	<doc for="DataRelationCollection.Dump">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DataRelationCollection.GetDataSet">
		<summary>
			<para>Gets the dataset for this collection.</para>
		</summary>
		<returns>
			<para>The dataSet.</para>
		</returns>
	</doc>
	<doc for="DataRelationCollection.CollectionChanged">
		<summary>
			<para>Occurs when the collection has changed.</para>
		</summary>
	</doc>
	<doc for="DataRelationCollection.OnCollectionChanged">
		<summary>
			<para> Raises the <see cref="System.Data.DataRelationCollection.OnCollectionChanged"/> event.
   </para>
		</summary>
		<param name="ccevent">A <see cref="System.ComponentModel.CollectionChangeEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see
   <see topic="cpconProvidingEventFunctionality"/>.
      </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.DataRelationCollection.OnCollectionChanged"/> in an inheriting class, be sure to call the base
      class's <see cref="System.Data.DataRelationCollection.OnCollectionChanged"/> method.
      
   </note>
		</remarks>
	</doc><doc for="DataRelationCollection.OnCollectionChanging">
		<summary>
			<para> Raises the <see cref="System.Data.DataRelationCollection.OnCollectionChanging"/> event.
   </para>
		</summary>
		<param name="ccevent">A <see cref="System.ComponentModel.CollectionChangeEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see
   <see topic="cpconProvidingEventFunctionality"/>.
      </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.DataRelationCollection.OnCollectionChanging"/> in an inheriting class, be sure to call the base
      class's <see cref="System.Data.DataRelationCollection.OnCollectionChanging"/> method.
      
   </note>
		</remarks>
	</doc><doc for="DataRelationCollection">
		<summary>
			<para>Represents the collection of <see cref="System.Data.DataRelation"/>
objects for this<see cref="System.Data.DataSet"/>.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded read operations. You must synchronize any 
      write operations.</para>
		</threadsafe>
		<remarks>
			<para>A <see cref="System.Data.DataRelationCollection"/> object enables
   navigation between related parent/child <see cref="System.Data.DataTable"/>
   objects.</para>
			<para>You create a <see langword="DataRelationCollection"/>
object by defining it as a property of either the <see langword="DataSet"/> or
the <see langword="DataTable"/>, rather than by directly using a
constructor. (Use the <see cref="System.Data.DataSet.Relations"/>
property of the <see langword="DataSet"/>, or the
<see cref="System.Data.DataTable.ParentRelations"/> property of the 
<see langword="DataTable"/>.)</para>
			<para> To access the collection, use the <see cref="System.Data.DataSet.Relations"/>
property of the <see cref="System.Data.DataSet"/> object.</para>
			<para>Once the collection exists you can manage the objects it contains by using methods such as
<see cref="System.Data.DataRelationCollection.Add"/>,
<see cref="System.Data.DataRelationCollection.Clear"/>, and 
<see cref="System.Data.DataRelationCollection.Remove"/>.</para>
		</remarks>
		<seealso cref="System.Data.DataRelationCollection.Add"/>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataSet.Relations"/>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataRelationCollection.Remove"/>
	</doc><doc for="DataRelationCollection.AddCore">
		<summary>
			<para>Performs verification on the table.</para>
		</summary>
		<param name="relation">The relation to check.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="relation"/> is null.</exception>
		<exception cref="System.ArgumentException">The relation already belongs to this collection, or it belongs to another collection.</exception>
		<exception cref="System.Data.DuplicateNameException">The collection already has a relation with the specified name. (The comparison is not case sensitive.)</exception>
	</doc><doc for="DataRelationCollection.Contains">
		<summary>
			<para> Verifies whether a <see cref="System.Data.DataRelation"/> with the given name (case insensitive) exists in the collection.</para>
		</summary>
		<param name="name">The name of the relation to find.</param>
		<returns>
			<para><see langword="true"/>, if a relation with the specified 
   name exists; otherwise <see langword="false"/> .</para>
		</returns>
	</doc><doc for="DataRelationCollection.IndexOf">
		<overload>
			<para> Gets the index of the specified data relation.</para>
		</overload>
		<summary>
			<para>Gets the index of the specified <see cref="System.Data.DataRelation"/> object.</para>
		</summary>
		<param name="relation">The relation to search for.</param>
		<returns>
			<para>The 0-based index of the relation, or -1 if the relation
      isn't found in the collection.</para>
		</returns>
	</doc><doc for="DataRelationCollection.RemoveAt">
		<summary>
   
   Removes the relation at the specified index from the
   collection.
</summary>
		<param name="index"> The index of the relation to remove.</param>
		<exception cref="System.ArgumentException">The collection does not have a relation at the specified index. </exception>
	</doc><doc for="DataRelationCollection.RemoveCore">
		<summary>
			<para>Performs a verification on the specified <see cref="System.Data.DataRelation"/> object.</para>
		</summary>
		<param name="relation">The <see langword="DataRelation"/> object to verify.</param>
		<exception cref="System.ArgumentNullException">The collection does not have a relation at the specified index. </exception>
		<exception cref="System.ArgumentException">The specified relation does not belong to this collection, or it belongs to another collection. </exception>
	</doc><doc for="DataRelationCollection.IndexOf1">
		<summary>
			<para>Gets the index of the <see cref="System.Data.DataRelation"/> specified by name.</para>
		</summary>
		<param name="relationName">The name of the relation to find.</param>
		<returns>
			<para>The zero-based index of the relation with the specified name, or
      -1 if the relation doesn't exist in the collection.</para>
		</returns>
	</doc><doc for="DataRelationCollection.Remove">
		<overload>
			<para>Removes the specified relation from the collection. </para>
		</overload>
		<summary>
			<para>Removes the specified relation from the collection.
      An ArgumentNullException is generated if this relation is null. An ArgumentException is generated
      if this relation doesn't belong to this collection.
      The CollectionChanged event is fired if it succeeds.</para>
			<para>Note that removing the relation does not remove any associated constraint 
      objects.</para>
		</summary>
		<param name="relation">The relation to remove.</param>
	</doc><doc for="DataRelationCollection.AddRange">
		<summary>
			<para>Copies the elements of the specified <see cref="System.Data.DataRelation"/> array to
   the end of the collection.</para>
		</summary>
		<param name="relations">The array of <see cref="System.Data.DataRelation"/> objects to add to the collection.</param>
		<remarks>
			<para>If <see cref="System.Data.DataSet.BeginInit"/> has
   been called, <see langword="AddRange"/> does not add any objects to the collection until
<see cref="System.Data.DataSet.EndInit"/> is called. At 
   the time that <see langword="EndInit"/> is called, the collection will be
   populated with the items specified in the most recent call to
<see langword="AddRange"/>. If <see langword="AddRange"/> is called multiple times 
   within a <see langword="BeginInit "/>/ <see langword="EndInit"/> sequence, only
   those items specified in the most recent call to <see langword="AddRange"/>
   are added.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataRelationCollection.AddRange Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataRelationCollection.Add2">
		<summary>
			<para>Creates a <see cref="System.Data.DataRelation"/> with the specified name, arrays of parent and child columns, and
   value specifying whether to create a constraint, and adds it to the collection.</para>
		</summary>
		<param name="name">The name of the <see langword="DataRelation"/> to create.</param>
		<param name="parentColumns">An array of parent <see cref="System.Data.DataColumn"/> objects.</param>
		<param name="childColumns">An array of child <see langword="DataColumn"/> objects.</param>
		<param name="createConstraints"><see langword="true"/> to create a constraint; otherwise <see langword="false"/> .</param>
		<returns>
			<para>The created relation.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The relation name is a null value.</exception>
		<exception cref="System.ArgumentException">The relation already belongs to this collection, or it belongs to another collection.</exception>
		<exception cref="System.Data.DuplicateNameException">The collection already has a relation with the same name. (The comparison is not case sensitive.)</exception>
		<exception cref="System.Data.InvalidConstraintException">The relation has entered an invalid state since it was created.</exception>
	</doc><doc for="DataRelationCollection.CanRemove">
		<summary>
			<para>Verifies whether the specified <see cref="System.Data.DataRelation"/> can be removed from the collection.</para>
		</summary>
		<param name="relation">The relation to perform the check against.</param>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Data.DataRelation"/> can be removed; otherwise, 
<see langword="false"/>.</para>
		</returns>
	</doc><doc for="DataRelationCollection.this">
		<overload>
			<para>Gets the specified <see cref="System.Data.DataRelation"/> from the collection.</para>
		</overload>
		<summary>
			<para>Gets the <see cref="System.Data.DataRelation"/>object at the specified index.</para>
		</summary>
		<param name="index">The zero-based index to find.</param>
		<value>
			<para>The <see cref="System.Data.DataRelation"/> , or a null value if the 
   specified <see cref="System.Data.DataRelation"/> does not exist.</para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index value is greater than the number of items in the collection.</exception>
	</doc><doc for="DataRelationCollection.this1">
		<summary>
			<para>Gets the <see cref="System.Data.DataRelation"/> object specified by name.</para>
		</summary>
		<param name="name">The name of the relation to find.</param>
		<value>
			<para>The named <see cref="System.Data.DataRelation"/> , or a null value if the 
   specified <see cref="System.Data.DataRelation"/>
   does not exist.</para>
		</value>
	</doc><doc for="DataRelationCollection.Remove1">
		<summary>
			<para>Removes the relation with the specified name from the collection. An IndexOutOfRangeException is
      generated if this collection doesn't have a relation with that name.
      The CollectionChanged event is fired if it succeeds.</para>
		</summary>
		<param name="name">The name of the relation to remove.</param>
	</doc>
	<doc for="DataRelationCollection.Add1">
		<summary>
			<para> Creates a <see cref="System.Data.DataRelation"/> with the
   specified name and arrays of parent and child columns, and adds it to the collection.</para>
		</summary>
		<param name="name">The name of the <see langword="DataRelation"/> to create.</param>
		<param name="parentColumns">An array of parent <see cref="System.Data.DataColumn"/> objects.</param>
		<param name="childColumns">An array of child <see langword="DataColumn"/> objects.</param>
		<returns>
			<para>The created <see langword="DataRelation"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The relation name is a null value.</exception>
		<exception cref="System.ArgumentException">The relation already belongs to this collection, or it belongs to another collection.</exception>
		<exception cref="System.Data.DuplicateNameException">The collection already has a relation with the same name. (The comparison is not case sensitive.)</exception>
		<exception cref="System.Data.InvalidConstraintException">The relation has entered an invalid state since it was created.</exception>
		<remarks>
			<para>If the relation is successfully added to the collection, the <see cref="System.Data.DataRelationCollection.CollectionChanged"/> event
   occurs.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic WebData DataRelationCollection.Add1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataRelationCollection.Add">
		<overload>
			<para>Adds a <see cref="System.Data.DataRelation"/> to the <see cref="System.Data.DataRelationCollection"/>.</para>
		</overload>
		<summary>
			<para> Adds a <see cref="System.Data.DataRelation"/> to the <see cref="System.Data.DataRelationCollection"/>.</para>
		</summary>
		<param name="relation">The <see langword="DataRelation"/> to add to the collection.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="relation"/> parameter is a null value.</exception>
		<exception cref="System.ArgumentException">The relation already belongs to this collection, or it belongs to another collection.</exception>
		<exception cref="System.Data.DuplicateNameException">The collection already has a relation with the specified name. (The comparison is not case sensitive.)</exception>
		<exception cref="System.Data.InvalidConstraintException">The relation has entered an invalid state since it was created.</exception>
		<remarks>
			<para>If the relation is successfully
      added to the collection, the <see cref="System.Data.DataRelationCollection.CollectionChanged"/>
      event occurs.</para>
		</remarks>
	</doc><doc for="DataRelationCollection.Add3">
		<summary>
			<para> Creates a <see cref="System.Data.DataRelation"/>
with the
specified parent and child columns, and adds it to the collection.</para>
		</summary>
		<param name="parentColumns">The parent columns of the relation.</param>
		<param name="childColumns">The child columns of the relation.</param>
		<returns>
			<para>The created relation.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="relation"/> argument is a null value.</exception>
		<exception cref="System.ArgumentException">The relation already belongs to this collection, or it belongs to another collection.</exception>
		<exception cref="System.Data.DuplicateNameException">The collection already has a relation with the same name. (The comparison is not case sensitive.)</exception>
		<exception cref="System.Data.InvalidConstraintException">The relation has entered an invalid state since it was created.</exception>
	</doc><doc for="DataRelationCollection.Add4">
		<summary>
			<para> 
      Creates a <see cref="System.Data.DataRelation"/> with the specified
      
      name, and parent and
      child columns, and adds it to the collection.</para>
		</summary>
		<param name="name">The name of the relation.</param>
		<param name="parentColumn">The parent column of the relation.</param>
		<param name="childColumn">The child column of the relation.</param>
		<returns>
			<para>The created relation.</para>
		</returns>
	</doc><doc for="DataRelationCollection.Add6">
		<summary>
			<para> Creates a <see cref="System.Data.DataRelation"/>
with a specified parent and
child column, and adds it to the collection.</para>
		</summary>
		<param name="parentColumn">The parent column of the relation.</param>
		<param name="childColumn">The child column of the relation.</param>
		<returns>
			<para>The created relation.</para>
		</returns>
	</doc><doc for="DataRelationCollection.Add5">
		<summary>
			<para> 
      Creates a <see cref="System.Data.DataRelation"/> with the specified
      name, parent and child columns, and a
      
      value indicating whether
      to add constraints, and adds it to the collection.</para>
		</summary>
		<param name="name">The name of the relation.</param>
		<param name="parentColumn">The parent column of the relation.</param>
		<param name="childColumn">The child column of the relation.</param>
		<param name="createConstraints"><see langword="true"/> to create constraints; otherwise <see langword="false"/>. (The default is <see langword="true"/> ).</param>
		<returns>
			<para>The created relation.</para>
		</returns>
	</doc></docs>
