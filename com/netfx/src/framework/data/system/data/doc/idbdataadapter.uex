<docs>
	<doc for="IDbDataAdapter.SelectCommand">
		<summary>
			<para>Gets or sets
      an SQL statement used to select records in the data source.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.IDbCommand"/> that is used during <see cref="System.Data.Common.DbDataAdapter.Update"/>
to select records from data source for placement in the data set.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.IDbDataAdapter.SelectCommand"/> is assigned to a previously created <see cref="System.Data.IDbCommand"/>,
   the <see cref="System.Data.IDbCommand"/> is not cloned. The <see cref="System.Data.IDbDataAdapter.SelectCommand"/> maintains a reference to the previously
   created <see cref="System.Data.IDbCommand"/>
   object.</para>
			<para>If the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
does not return any rows, no tables are added to the
<see cref="System.Data.DataSet"/>, and no exception is raised.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the inherited <see cref="System.Data.OleDb.OleDbDataAdapter"/>
class, and sets the
<see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> properties. It assumes 
you have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.SelectCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDbDataAdapter">
		<summary>
			<para> Represents a set of command-related
      properties that are used to fill the <see cref="System.Data.DataSet"/> and update a data source, and is implemented by
      .NET Framework data providers
      that access relational databases.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.IDbDataAdapter"/> interface inherits from the <see cref="System.Data.IDataAdapter"/> interface and allows an object to create a
   DataAdapter designed for use with a relational database. The <see cref="System.Data.IDbDataAdapter"/> interface and, optionally, the utility class, <see cref="System.Data.Common.DbDataAdapter"/>, allow an inheriting class to implement a DataAdapter
   class, which represents the bridge between a data source and a <see cref="System.Data.DataSet"/> . For more
   information
   about DataAdapter classes, see <see topic="cpconpopulatingdatasetfromdataadapter"/> . For more information about
   implementing .NET Framework data providers, see <see topic="cpconimplementingnetdataprovider"/>. </para>
			<para>An application does not create an instance of the <see cref="System.Data.IDbDataAdapter"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDbDataAdapter"/>
and <see cref="System.Data.Common.DbDataAdapter"/>. </para>
			<para>Classes that inherit <see cref="System.Data.IDbDataAdapter"/> must implement the inherited members, and typically
define additional members to add provider-specific functionality. For example,
the <see cref="System.Data.IDbDataAdapter"/>
interface defines the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property, and the <see cref="System.Data.Common.DbDataAdapter"/> interface defines a <see cref="System.Data.IDataAdapter.Fill"/>
method that takes a <see cref="System.Data.DataTable"/> as a parameter. In turn, the <see cref="System.Data.OleDb.OleDbDataAdapter"/>
class inherits the <see cref="System.Data.IDbDataAdapter.SelectCommand"/> property and the <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method, and also defines two additional overloads of the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> method that take an ADO Recordset object
as a parameter.</para>
			<note type="inotes">
   To promote consistency among
   .NET Framework data providers, name the inheriting class in the form
<paramref name="Prv"/>DataAdapter where <paramref name="Prv "/>is 
   the uniform prefix given to all classes in a specific .NET Framework data provider
   namespace. For example, <paramref name="Sql"/>
   is
   the prefix of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> class in the
<see langword="System.Data.SqlClient"/> 
namespace.
</note>
			<para> When
   you inherit from the <see cref="System.Data.IDbDataAdapter"/>
   interface, you should implement the following constructors:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> PrvDataAdapter()</term>
					<description>Initializes a new
         instance of the PrvDataAdapter
         class.</description>
				</item>
				<item>
					<term> PrvDataAdapter(PrvCommand selectCommand)</term>
					<description>Initializes a new instance
         of the PrvDataAdapter class with
         the specified SQL SELECT statement.</description>
				</item>
				<item>
					<term> PrvDataAdapter(string selectCommandText, string selectConnectionString)</term>
					<description>Initializes a new
         instance of the PrvDataAdapter
         class with an SQL SELECT statement and a connection
         string.</description>
				</item>
				<item>
					<term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</term>
					<description>Initializes a new
         instance of the PrvDataAdapter
         class with an
         SQL SELECT statement and a PrvConnection object.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example uses the derived classes, <see cref="System.Data.SqlClient.SqlCommand"/> , <see cref="System.Data.SqlClient.SqlDataAdapter"/> and <see cref="System.Data.SqlClient.SqlConnection"/>, to select records from a
   data source. The filled <see cref="System.Data.DataSet"/> is then returned. To accomplish this, the method is
   passed an initialized <see cref="System.Data.DataSet"/>
   , a connection string, and a query string that is
   a Transact-SQL SELECT statement.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDbDataAdapter.InsertCommand">
		<summary>
			<para>Gets or sets an SQL statement used to insert new records into the data source.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.IDbCommand"/> used during <see cref="System.Data.Common.DbDataAdapter.Update"/> to insert records in the data source for new rows in the
   data set.</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.IDbDataAdapter.InsertCommand"/> can be generated automatically if
   you set the <see langword="SelectCommand "/> property of
   a .NET Framework data provider. Then, any additional commands that you do not set are
   generated by the CommandBuilder. This generation logic requires key column
   information to be present in the <see cref="System.Data.DataSet"/>. For more information see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.IDbDataAdapter.InsertCommand"/> is assigned to a previously created <see cref="System.Data.IDbCommand"/>,
the <see cref="System.Data.IDbCommand"/> is not cloned. The <see cref="System.Data.IDbDataAdapter.InsertCommand"/> maintains a reference to the previously
created <see cref="System.Data.IDbCommand"/>
object.</para>
			<note type="note">
   If execution of
   this command returns rows, these rows may be added to the <see cref="System.Data.DataSet"/> depending on how you set
   the <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property of
   the <see cref="System.Data.IDbCommand"/>object.
</note>
		</remarks>
		<example>
			<para>The following example creates an instance of the inherited <see cref="System.Data.OleDb.OleDbDataAdapter"/>
class, and sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> properties. It assumes you
have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.InsertCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDbDataAdapter.UpdateCommand">
		<summary>
			<para>Gets or
      sets an SQL statement used to update records in the data source.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.IDbCommand"/> used during <see cref="System.Data.Common.DbDataAdapter.Update"/>
to update records in the data source for modified rows in the data set.</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.IDbDataAdapter.UpdateCommand"/> can be generated automatically if
   you set the <see langword="SelectCommand "/> property of
   a .NET Framework data provider. Then, any additional commands that you do not set are
   generated by the CommandBuilder. This generation logic requires key column
   information to be present in the <see cref="System.Data.DataSet"/>. For more information see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.IDbDataAdapter.UpdateCommand"/> is assigned to a previously created <see cref="System.Data.IDbCommand"/>,
the <see cref="System.Data.IDbCommand"/> is not cloned. The <see cref="System.Data.IDbDataAdapter.UpdateCommand"/> maintains a reference to the previously
created <see cref="System.Data.IDbCommand"/>
object.</para>
			<note type="note">
   If execution of
   this command returns rows, these rows are added to the <see cref="System.Data.DataSet"/>.
   
</note>
		</remarks>
		<example>
			<para>The following example creates an instance of the inherited <see cref="System.Data.OleDb.OleDbDataAdapter"/>
class, and sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/> properties. It assumes
you have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.UpdateCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDbDataAdapter.DeleteCommand">
		<summary>
			<para>Gets or sets an SQL statement for deleting records from the data set.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.IDbCommand"/> used during <see cref="System.Data.Common.DbDataAdapter.Update"/> to delete
   records in the data source for deleted rows in the data set.</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.IDbDataAdapter.DeleteCommand"/> can be generated automatically if
   you set the <see langword="SelectCommand "/> property of
   a .NET Framework data provider. Then, any additional commands that you do not set are
   generated by the CommandBuilder. This generation logic requires key column
   information to be present in the <see cref="System.Data.DataSet"/>. For more information see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.IDbDataAdapter.DeleteCommand"/> is assigned to a previously created <see cref="System.Data.IDbCommand"/>,
the <see cref="System.Data.IDbCommand"/> is not cloned. The <see cref="System.Data.IDbDataAdapter.DeleteCommand"/> maintains a reference to the previously
created <see cref="System.Data.IDbCommand"/>
object.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the inherited
      <see cref="System.Data.OleDb.OleDbDataAdapter"/>
   class, and sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/> properties. It assumes
   you have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.DeleteCommand Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
