<docs>
	<doc for="IDbCommand.ExecuteRow">
		<summary>
			<para>Executes the query, and returns an <see cref="System.Data.IDataRecord"/>IDataRecord 
      containing a single row returned by the query.
</para>
		</summary>
	</doc>
	<doc for="IDbCommand.CommandTimeout">
		<summary>
			<para>Gets or sets the wait time before terminating
      the attempt to execute a command and generating an error.</para>
		</summary>
		<value>
			<para>The time (in seconds) to wait for the command to execute. The default
      value is 30 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The property value assigned is less than 0.</exception>
		<example>
			<para>The following example creates an instance of a derived class, <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.</para>
			<codelink SampleID="Classic WebData IDbCommand.CommandTimeout Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.IDbCommand.CommandText"/>
		<seealso cref="System.Data.IDbCommand.Connection"/>
		<seealso cref="System.Data.IDbCommand.CommandType"/>
	</doc>
	<doc for="IDbCommand.Parameters">
		<summary>
			<para> Gets the <see cref="System.Data.IDataParameterCollection"/>
.</para>
		</summary>
		<value>
			<para>The parameters of the SQL statement or stored procedure.</para>
		</value>
		<example>
			<para>The following example creates an instance of the derived class, <see cref="System.Data.SqlClient.SqlCommand"/> , and displays its
   parameters. In the example, the application passes a <see cref="System.Data.SqlClient.SqlConnection"/> , a query string that is a
   Transact-SQL SELECT statement, and an array of <see cref="System.Data.SqlClient.SqlParameter"/> objects.</para>
			<codelink SampleID="Classic WebData IDbCommand.Parameters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.IDataParameter"/>
	</doc>
	<doc for="IDbCommand.UpdatedRowSource">
		<summary>
			<para>Gets or sets how command results are applied
      to the <see cref="System.Data.DataRow"/> when used by the <see cref="System.Data.IDataAdapter.Update"/>
      method of a <see cref="System.Data.Common.DbDataAdapter"/> .</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.UpdateRowSource"/> values. The default is
<see langword="Both"/> unless the command is automatically 
   generated. Then the default is <see langword="None"/>
   .</para>
		</value>
		<exception cref="System.ArgumentException">The value entered was not one of the <see cref="System.Data.UpdateRowSource"/> values.</exception>
	</doc><doc for="IDbCommand.ExecuteReader">
		<overload>
			<para> Executes the <see cref="System.Data.IDbCommand.CommandText"/> against the <see cref="System.Data.IDbCommand.Connection"/> and builds an <see cref="System.Data.IDataReader"/>.</para>
		</overload>
		<summary>
			<para>Executes the <see cref="System.Data.IDbCommand.CommandText"/> against the <see cref="System.Data.IDbCommand.Connection"/> and builds an <see cref="System.Data.IDataReader"/> .</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.IDataReader"/> object.</para>
		</returns>
	</doc><doc for="IDbCommand.CommandType">
		<summary>
			<para>Indicates or specifies how the <see cref="System.Data.IDbCommand.CommandText"/> property is
   interpreted.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.CommandType"/> values. The default is <see langword="Text"/>.</para>
		</value>
		<remarks>
			<para>When you set the <see cref="System.Data.IDbCommand.CommandType"/> property to
<see langword="StoredProcedure"/>, you should set the <see cref="System.Data.IDbCommand.CommandText"/> property to 
   the name of the stored procedure. The command executes this stored procedure
   when you call one of the Execute methods.</para>
		</remarks>
	</doc><doc for="IDbCommand.Prepare">
		<summary>
			<para>Creates a prepared (or compiled) version of the command on the data
      source.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>The <see cref="System.Data.OleDb.OleDbCommand.Connection"/> is not set.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OleDb.OleDbCommand.Connection"/> is not <see cref="System.Data.OleDb.OleDbConnection.Open"/> .</para></exception>
		<remarks>
			<para> If the <see cref="System.Data.IDbCommand.CommandType"/> property is set to
<see langword="TableDirect"/>, <see cref="System.Data.IDbCommand.Prepare"/> does nothing. 
   If <see cref="System.Data.IDbCommand.CommandType"/> is set to <see langword="StoredProcedure"/>, the call
   to <see cref="System.Data.IDbCommand.Prepare"/> should succeed, although it may result in a no-op.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the derived class, <see cref="System.Data.OleDb.OleDbCommand"/>, and
   opens the connection. The example then prepares a stored procedure on the data
   source by passing a string that is a SQL Select statement and a string to use to
   connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.Prepare Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDbCommand.Connection">
		<summary>
			<para>Gets or sets the <see cref="System.Data.IDbConnection"/> used by this instance of the
<see cref="System.Data.IDbCommand"/>.</para>
		</summary>
		<value>
			<para>The connection to the data source.</para>
		</value>
	</doc><doc for="IDbCommand.CommandText">
		<summary>
			<para>Gets or sets the text command to run against the data source.</para>
		</summary>
		<value>
			<para>The text command to execute. The
      default value is an empty string ("").</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.IDbCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, set the <see cref="System.Data.IDbCommand.CommandText"/> property to the name of the stored 
   procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. 
The command will call this stored procedure when you call one of the
   Execute methods.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class, <see cref="System.Data.OleDb.OleDbCommand"/> and sets some of
   its properties.</para>
			<codelink SampleID="Classic WebData IDbCommand.CommandText Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.IDbCommand.CommandType"/>
		<seealso cref="System.Data.IDbCommand.UpdatedRowSource"/>
	</doc><doc for="IDbCommand.Cancel">
		<summary>
			<para>Attempts to cancels the execution of an <see cref="System.Data.IDbCommand"/> .</para>
		</summary>
		<remarks>
			<para>If there is nothing to cancel, nothing happens. However, 
      if there is a command in process, and the attempt to cancel fails, no exception
      is generated.</para>
		</remarks>
	</doc><doc for="IDbCommand.ExecuteReader1">
		<summary>
			<para>Executes the <see cref="System.Data.IDbCommand.CommandText"/> against the <see cref="System.Data.IDbCommand.Connection"/>, and builds an <see cref="System.Data.IDataReader"/> using one of the <see cref="System.Data.CommandBehavior"/> values.</para>
		</summary>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/>values.</param>
		<returns>
			<para>An <see cref="System.Data.IDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>The
      caller must call the <see cref="System.Data.IDbConnection.Open"/> method of the <see cref="System.Data.IDbCommand.Connection"/> property.</para>
			<para>When the <see cref="System.Data.IDbCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.IDbCommand.CommandText"/>
property should be set to the name of the stored procedure. The
command executes this stored procedure when you call <see cref="System.Data.IDbCommand.ExecuteReader"/>.</para>
			<para>The <see cref="System.Data.IDataReader"/> supports a special mode that enables large binary
values to be read efficiently. For more information, see the
<see langword="SequentialAccess"/> 
setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para>While the <see cref="System.Data.IDataReader"/> is in use, the
associated <see cref="System.Data.IDbConnection"/> is busy serving the <see cref="System.Data.IDataReader"/>.
While in this state, no other operations can be performed on the <see cref="System.Data.IDbConnection"/>
other than closing it. This is the case until the <see cref="System.Data.IDataReader.Close"/> method of the DataReader is called. If
the DataReader is created with <see cref="System.Data.CommandBehavior"/>set to <see langword="CloseConnection"/>, closing
the DataReader closes the connection automatically.</para>
		</remarks>
	</doc>
	<doc for="IDbCommand.ExecuteScalar">
		<summary>
			<para>Executes the query, and returns the first column of the
      first row in the resultset returned by the query. Extra columns or rows are
      ignored.</para>
		</summary>
		<returns>
			<para>The first column of the first row in the resultset.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Data.IDbCommand.ExecuteScalar"/> method to retrieve a
   single value (for example, an aggregate value) from a database. This requires less
   code than using the <see cref="System.Data.IDbCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value using the data returned by an <see cref="System.Data.IDataReader"/>.</para>
			<para>A typical <see cref="System.Data.IDbCommand.ExecuteScalar"/> query can be formatted as in the following C# example:</para>
			<code>
CommandText = "select count(*) as NumberOfRegions from region";
Int32 count = (int) ExecuteScalar();
</code>
		</remarks>
		<example>
			<para>The following example creates an instance of the derived class, <see cref="System.Data.SqlClient.SqlCommand"/>, and then executes it
   using <see cref="System.Data.SqlClient.SqlCommand.ExecuteScalar"/> . The example is passed a
   string that is a Transact-SQL statement that returns an aggregate result,
   and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ExecuteScalar" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDbCommand">
		<summary>
			<para>Represents
      an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.IDbCommand"/> interface enables an inheriting class to implement a Command class, which represents an SQL statement that is executed at a data source. For more information
   about Command classes, see <see topic="cpconadonetcommands"/>. For more information about
   implementing .NET Framework data providers, see <see topic="cpconimplementingnetdataprovider"/>.</para>
			<para>An application does not create an instance of the <see cref="System.Data.IDbCommand"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDbCommand"/> . </para>
			<para>Classes that inherit <see cref="System.Data.IDbCommand"/> must implement all inherited members, and typically
define additional members to add provider-specific functionality. For example, the <see cref="System.Data.IDbCommand"/>
interface defines the <see cref="System.Data.IDbCommand.ExecuteNonQuery"/> method. In
turn, the <see cref="System.Data.SqlClient.SqlCommand"/> class inherits this method, and also defines the <see cref="System.Data.SqlClient.SqlCommand.ExecuteXmlReader"/>
method.</para>
			<note type="inotes">
   To promote consistency among
   .NET Framework data providers, name the inheriting class in the form
<paramref name="PrvClassname"/> where <paramref name="Prv "/>is the 
   uniform prefix given to all classes in a specific .NET Framework data provider namespace.
   For example, <paramref name="Sql"/> is the prefix of the <see cref="System.Data.SqlClient.SqlCommand"/> class in the
<see langword="System.Data.SqlClient"/> 
namespace.
</note>
			<para> When
   you inherit from the <see cref="System.Data.IDbCommand"/>
   interface, you should implement the following constructors:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> PrvCommand()</term>
					<description>Initializes a new instance of the PrvCommand
         class.</description>
				</item>
				<item>
					<term> PrvCommand(string cmdText)</term>
					<description>Initializes a new instance of the PrvCommand class with
         the text of the query.</description>
				</item>
				<item>
					<term> PrvCommand(string cmdText, PrvConnection connection)</term>
					<description>Initializes a new instance of the PrvCommand class with the text of the query and a PrvConnection.</description>
				</item>
				<item>
					<term> PrvCommand(string cmdText, PrvConnection
         connection, PrvTransaction transaction)</term>
					<description>Initializes a new instance of the PrvCommand class with the text of the query, a PrvConnection, and the
         PrvTransaction.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates instances of the derived classes, <see cref="System.Data.SqlClient.SqlConnection"/> , <see cref="System.Data.SqlClient.SqlCommand"/>
, and <see cref="System.Data.SqlClient.SqlDataReader"/> . The example reads through the data, writing
it to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Common.DbDataAdapter"/>
		<seealso cref="System.Data.IDbConnection"/>
		<seealso cref="System.Data.OleDb.OleDbCommand"/>
		<seealso cref="System.Data.SqlClient.SqlCommand"/>
	</doc>
	<doc for="IDbCommand.CreateParameter">
		<summary>
			<para> Creates a new instance of an
      <see cref="System.Data.IDbDataParameter"/> object. </para>
		</summary>
		<returns>
			<para>An <see langword="IDbDataParameter"/> object.</para>
		</returns>
		<remarks>
			<para>When inheriting from <see cref="System.Data.IDbCommand"/>, a .NET Framework data provider implements a
   strongly-typed version of <see cref="System.Data.IDbCommand.CreateParameter"/>.</para>
		</remarks>
	</doc>
	<doc for="IDbCommand.ExecuteNonQuery">
		<summary>
			<para>Executes an SQL statement against the
      <see langword="Connection"/> object of a .NET Framework data provider, and returns the number of rows affected.
      </para>
		</summary>
		<returns>
			<para>The number of rows affected.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The connection does not exist.</para>
			<para>-or-</para>
			<para>The connection is not open.</para></exception>
		<remarks>
			<para>You can use the <see cref="System.Data.IDbCommand.ExecuteNonQuery"/> to perform catalog operations
   (for example, querying the structure of a database or creating database objects
   such as tables), or to change the data in a database without using
   a <see cref="System.Data.DataSet"/> by executing
   UPDATE, INSERT, or DELETE statements.</para>
			<para>Although the <see cref="System.Data.IDbCommand.ExecuteNonQuery"/> does not return any rows, any
output parameters or return values mapped to parameters are populated with
data.</para>
			<para> For
   UPDATE, INSERT, and DELETE statements, the return value is the number of rows
   affected by the command. For all other types of statements, the return value is
   -1.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the derived class, <see cref="System.Data.OleDb.OleDbCommand"/>, and then executes it. To accomplish this, the method is passed a string that is a SQL SELECT statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ExecuteNonQuery Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IDbCommand.Transaction">
		<summary>
			<para>Gets or sets the transaction within which the
   <see langword="Command"/> object of a .NET Framework data provider
      executes.
      </para>
		</summary>
		<value>
			<para>the <see langword="Command"/> object 
   of a .NET Framework data
   provider executes. The default
   value is <see langword="null"/>.</para>
		</value>
	</doc>
</docs>
