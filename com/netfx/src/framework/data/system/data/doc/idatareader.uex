<docs>
	<doc for="IDataReader.Depth">
		<summary>
			<para>Gets a value indicating the depth of nesting for the current row.</para>
		</summary>
		<value>
			<para> The level
      of nesting.</para>
		</value>
		<remarks>
			<para>The outermost table has a depth of zero.</para>
		</remarks>
	</doc>
	<doc for="IDataReader.NextResult">
		<summary>
			<para> Advances the data reader to the next result, when reading the results of
      batch SQL statements.
      </para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if there are more rows; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Used to process multiple results, which can be obtained by executing
      batch SQL statements.
      </para>
			<para> By default, the data reader is positioned on the first result.
      </para>
		</remarks>
	</doc>
	<doc for="IDataReader.Close">
		<summary>
			<para>Closes the <see cref="System.Data.IDataReader"/>0bject.</para>
		</summary>
		<remarks>
			<para>You must explicitly call the <see cref="System.Data.IDataReader.Close"/>
method when you are through using the <see cref="System.Data.IDataReader"/> to use the
associated <see cref="System.Data.IDbConnection"/>
for any other purpose.</para>
		</remarks>
	</doc>
	<doc for="IDataReader.Read">
		<summary>
			<para>Advances the <see cref="System.Data.IDataReader"/>
to the next record.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more rows; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default position of the <see cref="System.Data.IDataReader"/> is prior to the first record.
   Therefore you must call <see cref="System.Data.IDataReader.Read"/>
   to
   begin accessing any data.</para>
			<para>While the data reader is in use, the associated
   connection is busy serving the <see cref="System.Data.IDataReader"/>
   . This is the case until <see cref="System.Data.IDataReader.Close"/> is called.</para>
		</remarks>
		<example>
			<para>The following example creates instances of three derived classes <see cref="System.Data.OleDb.OleDbConnection"/>, an <see cref="System.Data.OleDb.OleDbCommand"/>, and an <see cref="System.Data.OleDb.OleDbDataReader"/>. The example reads through the data, writing it out to the console. Finally, the example closes the <see cref="System.Data.OleDb.OleDbDataReader"/>, then the <see cref="System.Data.OleDb.OleDbConnection"/>.</para>
			<codelink SampleID="Classic WebData IDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataReader.IsClosed">
		<summary>
			<para>Gets a value indicating whether the data reader is
      closed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the data reader is closed; otherwise,
<see langword="false"/>. </para>
		</value>
		<remarks>
			<para><see cref="System.Data.IDataReader.IsClosed"/> and <see cref="System.Data.IDataReader.RecordsAffected"/> are the
   only properties that you can call after the <see cref="System.Data.IDataReader"/> is closed.</para>
		</remarks>
	</doc><doc for="IDataReader.RecordsAffected">
		<summary>
			<para> Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</para>
		</summary>
		<value>
			<para>The number of rows changed, inserted, or deleted; 0
      if no rows were affected or the statement failed; and -1 for SELECT statements.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.IDataReader.RecordsAffected"/> property is not set until all rows are read and you close
   the <see cref="System.Data.IDataReader"/>.</para>
			<para><see cref="System.Data.IDataReader.IsClosed"/> and <see cref="System.Data.IDataReader.RecordsAffected"/> are the
only properties that you can call after the <see cref="System.Data.IDataReader"/> is closed.</para>
		</remarks>
	</doc><doc for="IDataReader">
		<summary>
			<para>Provides a means of reading one or more forward-only
      streams of result sets obtained by executing a command at a data source, and is
      implemented by .NET Framework data providers that access relational databases.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.IDataReader"/> and <see cref="System.Data.IDataRecord"/> interfaces allow an inheriting class to implement a DataReader class, which provides a means of reading one or more forward-only streams of result sets. For more information
   about DataReader classes, see <see topic="cpcontheadonetdatareader"/>. For more information about
   implementing .NET Framework data providers, see <see topic="cpconimplementingnetdataprovider"/>.</para>
			<para>An application does not create an instance of the <see cref="System.Data.IDataReader"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDataReader"/> . </para>
			<para>Classes that inherit <see cref="System.Data.IDataReader"/> must implement the inherited members, and typically
define additional members to add provider-specific functionality.</para>
			<para>Changes made to a resultset by another process or thread
   while data is being read may be visible to the user of a class that implements
   an <see langword="IDataReader"/>.
   However, the precise behavior is both provider and timing dependent.</para>
			<note type="inotes">
   To promote consistency among
   .NET Framework data providers, name the inheriting class in the form
<paramref name="Prv"/>Command where <paramref name="Prv "/>is the 
   uniform prefix given to all classes in a specific .NET Framework data provider namespace.
   For example, <paramref name="Sql"/> is the prefix of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> class in the
<see langword="System.Data.SqlClient"/>
namespace.
</note>
			<para>Users do not create an instance of a DataReader class
   directly. Instead, they obtain the DataReader through the <see langword="ExecuteReader "/>
   method of the
   Command object. Therefore, you should mark DataReader constructors as
   internal.</para>
		</remarks>
		<example>
			<para>The following example creates instances of the derived classes, <see cref="System.Data.SqlClient.SqlConnection"/> , <see cref="System.Data.SqlClient.SqlCommand"/>
, and <see cref="System.Data.SqlClient.SqlDataReader"/>. The example reads through the data, writing it
out to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc><doc for="IDataReader.GetSchemaTable">
		<summary>
			<para>Returns a <see cref="System.Data.DataTable"/> that describes the column metadata
   of the <see cref="System.Data.IDataReader"/>. </para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.DataTable"/> that describes the column metadata.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.IDataReader"/> is closed.</exception>
		<remarks>
			<para> The implementation of <see cref="System.Data.IDataReader.GetSchemaTable"/> method for the .NET Framework Data
   Provider for OLE DB maps to the OLE DB IColumnsRowset::GetColumnsRowset method, while the
   implementation for the .NET Framework Data Provider for SQL Server does not use an OLE DB
   provider layer. <see cref="System.Data.IDataReader.GetSchemaTable"/>
   returns metadata about each column
   in the following order:</para>
			<list type="table">
				<listheader>
					<term>IDataReader Column</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> ColumnName</term>
					<description> The name of the column; this might not be unique. If this cannot be determined, a null value is returned. This name always reflects the most recent renaming of the column in the current view or command text.</description>
				</item>
				<item>
					<term> ColumnOrdinal</term>
					<description>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other columns are numbered starting with one. This column cannot contain a null value.</description>
				</item>
				<item>
					<term> ColumnSize</term>
					<description>The maximum possible length of a value in the column. For columns that use a fixed-length data type, this is the size of the data type. </description>
				</item>
				<item>
					<term> NumericPrecision</term>
					<description>
						<para> If ProviderType is a numeric data type, this is the maximum precision of the column. The precision depends on the definition of the column. If ProviderType is not a numeric data type, this is a null value.</para></description>
				</item>
				<item>
					<term> NumericScale</term>
					<description>
						<para>If ProviderType is is DBTYPE_DECIMAL or DBTYPE_NUMERIC, the number of digits to the right of the decimal point. Otherwise, this is a null value.</para></description>
				</item>
				<item>
					<term> DataType</term>
					<description>Maps to the .NET Framework type of the
         column.</description>
				</item>
				<item>
					<term> ProviderType</term>
					<description>
						<para>The indicator of the column's data type. If the data type of the column varies from row to row, this must be Object. This column cannot contain a null value. </para></description>
				</item>
				<item>
					<term> IsLong</term>
					<description>Set if the column contains a Binary Long Object
         (BLOB) that contains very long data. The definition of very long data is
         provider-specific. The setting of this flag corresponds to the value of
         the IS_LONG column in the PROVIDER_TYPES rowset for the data
         type.</description>
				</item>
				<item>
					<term> AllowDBNull</term>
					<description>Set if the consumer can set the column to a null value, or if the provider cannot determine whether
         or not the consumer can set the column to a null value.
         Otherwise, not set. A column may contain null values, even if it cannot be
         set to a null value.</description>
				</item>
				<item>
					<term> IsReadOnly</term>
					<description><see langword="true"/> if
      the column cannot be modified; otherwise
      <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsRowVersion</term>
					<description>Set if the column contains a persistent row
      identifier that cannot be written to, and has no meaningful value except
      to identity the row.</description>
				</item>
				<item>
					<term> IsUnique</term>
					<description>
						<para><see langword="true"/> if no two rows in the base
   table-the table returned in BaseTableName-can have the same value in this
   column. IsUnique is guaranteed to be <see langword="true"/> if the column
   constitutes a key by itself or if there is a constraint of type UNIQUE
   that applies only to this column. <see langword="false"/> if the column can
   contain duplicate values in the base table. The default of this column is
   <see langword="false"/> .</para></description>
				</item>
				<item>
					<term> IsKeyColumn</term>
					<description>
						<para><see langword="true"/> if the column is one of a
   set of columns in the rowset that, taken together, uniquely identify the
   row. The set of columns with IsKeyColumn set to <see langword="true"/> must
   uniquely identify a row in the rowset. There is no requirement that this
   set of columns is a minimal set of columns. This set of columns may be
   generated from a base table primary key, a unique constraint or a unique
   index. <see langword="false"/> if the column is not required to uniquely identify the row.</para></description>
				</item>
				<item>
					<term> IsAutoIncrement</term>
					<description>VARIANT_TRUE: The column assigns values to new rows in fixed increments. VARIANT_FALSE: The column does not assign values to new rows in fixed increments.The default of this column is VARIANT_FALSE.</description>
				</item>
				<item>
					<term> BaseSchemaName</term>
					<description>The name of the schema in the data store that contains the column. A null value if the base schema name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseCatalogName</term>
					<description>The name of the catalog in the data store that contains the column. A null value if the base catalog name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseTableName</term>
					<description>The name of the table or view in the data store that contains the column. A null value if the base table name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseColumnName</term>
					<description>
						<para>The name of the column in the data store. This might be different than the column name returned in the ColumnName column if an alias was used. A null value if the base column name cannot be determined or if the rowset column is derived, but not identical to, a column in the data store. The default of this column is a null value.</para></description>
				</item>
			</list>
		</remarks>
	</doc></docs>
