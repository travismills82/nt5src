<docs>
	<doc for="CommandBehavior.CloseConnection">
		<summary>
			<para>When the command is executed, the associated 
   <see langword="Connection "/>object is closed when the associated 
   <see langword="DataReader "/>object is closed.</para>
		</summary>
	</doc><doc for="CommandBehavior.Default">
		<summary>
			<para>The query may return multiple result sets. Execution of
      the query may effect the database state. <see langword="Default"/> sets
      no <see cref="System.Data.CommandBehavior"/> flags, so calling
   <see langword="ExecuteReader(CommandBehavior.Default)"/> is functionally
      equivalent to calling <see langword="ExecuteReader()"/>
      .</para>
		</summary>
	</doc><doc for="CommandBehavior.SchemaOnly">
		<summary>
			<para> The query returns column information only and does not effect the
      database state.
      </para>
		</summary>
	</doc><doc for="CommandBehavior">
		<summary>
			<para> Provides a description of the results of the query and its effect on
      the database.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.CommandBehavior"/> values are used by the <see cref="System.Data.IDbCommand.ExecuteReader"/> method of <see cref="System.Data.IDbCommand"/>
and any classes derived from it.</para>
			<para>A bitwise combination
   of these values may be used.</para>
		</remarks>
	</doc>
	<doc for="CommandBehavior.SequentialAccess">
		<summary>
			<para>Provides a way for the <see langword="DataReader"/> to handle rows
   that contain columns with large binary values. Rather than loading the
   entire row, <see langword="SequentialAccess"/> enables
   the <see langword="DataReader"/> to load
   data as a stream. You can then use the <see langword="GetBytes"/> or
<see langword="GetChars"/>
method to specify a byte location to start the
read operation, and a limited buffer size for the data being returned.</para>
			<para>When you specify <see langword="SequentialAccess"/>, you 
are required to read from the columns in the order they are returned, although
you are not required to read each column. Once you have read past a location in
the returned stream of data, data at or before that location can no longer be
read from the <see langword="DataReader"/>. When using the
<see cref="System.Data.OleDb.OleDbDataReader"/>, you can reread the current column value 
until reading past it. When using the <see cref="System.Data.SqlClient.SqlDataReader"/>, you can read a column value can only once.</para>
		</summary>
	</doc>
	<doc for="CommandBehavior.SingleResult">
		<summary>
			<para> The
      query returns a single result set.
      </para>
		</summary>
	</doc>
	<doc for="CommandBehavior.SingleRow">
		<summary>
			<para> The query is expected to return a single row. Execution of
      the query may effect the database state. Some .NET Framework data providers may, but
      are not required to, use this information to optimize the performance of the
      command. When you specify <see cref="System.Data.CommandBehavior.SingleRow"/> with the <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/> method of the <see cref="System.Data.OleDb.OleDbCommand"/> object, the .NET Framework Data Provider for OLE DB
      performs binding using the OLE DB <see langword="IRow"/> interface if it is
      available. Otherwise, it uses the <see langword="IRowset"/>
      interface. If your SQL statement is
      expected to return only a single row, specifying <see cref="System.Data.CommandBehavior.SingleRow"/>
      can also improve application performance.</para>
			<para>It is possible to specify <see langword="SingleRow"/> when
   executing queries that return multiple result sets. In that case, multiple
   result sets are still returned, but each result set has a single row.</para>
		</summary>
	</doc>
	<doc for="CommandBehavior.KeyInfo">
		<summary>
			<para> The query
      returns column and primary key information. The query is executed without any locking
      on the selected rows.
      </para>
			<note type="note">
      When using <see langword="KeyInfo"/> , the
      .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information.
      
   </note>
		</summary>
	</doc>
</docs>
