<docs>
	<doc for="DataColumn.DataColumn1">
		<summary>
			<para>Inititalizes a new instance of the <see cref="System.Data.DataColumn"/> class
    using the specified column name.</para>
		</summary>
		<param name="columnName">A string that represents the name of the column to be created. If set to <see langword="null"/> or an empty string (""), a default name will be given when added to the columns collection.</param>
		<remarks>
			<para>By default, the name given to a column becomes the <see cref="System.Data.DataColumn.Caption"/> property value.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataColumn"/> with a specified <see cref="System.Data.DataColumn.ColumnName"/> .</para>
			<codelink SampleID="Classic WebData DataColumn.DataColumn1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
		<seealso cref="System.Data.DataColumn.Caption"/>
		<seealso cref="System.Data.DataColumn.DefaultValue"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataColumn.DataType"/>
	</doc>
	<doc for="DataColumn.DataColumn2">
		<summary>
			<para>Inititalizes a new instance of the <see cref="System.Data.DataColumn"/> class
    using the specified column name and data type.</para>
		</summary>
		<param name="columnName">A string that represents the name of the column to be created. If set to <see langword="null"/> or an empty string (""), a default name will be given when added to the columns collection.</param>
		<param name="dataType">A supported <see cref="System.Data.DataColumn.DataType"/> .</param>
		<exception cref="System.ArgumentNullException">No <paramref name="dataType "/>was specified. </exception>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataColumn"/> with a specified <see cref="System.Data.DataColumn.ColumnName"/> and <see cref="System.Data.DataColumn.DataType"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.DataColumn2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.DefaultValue"/>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
		<seealso cref="System.Data.DataColumn.Caption"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataColumn.DataType"/>
	</doc>
	<doc for="DataColumn.DataColumn3">
		<summary>
			<para>Initializes a new instance
       of the <see cref="System.Data.DataColumn"/> class
       using the specified name, data type, and expression.</para>
		</summary>
		<param name="columnName">A string that represents the name of the column to be created. If set to <see langword="null"/> or an empty string (""), a default name will be given when added to the columns collection.</param>
		<param name="dataType">A supported <see cref="System.Data.DataColumn.DataType"/> .</param>
		<param name="expr">The expression used to create this column. For more details, see the <see cref="System.Data.DataColumn.Expression"/> property.</param>
		<exception cref="System.ArgumentNullException">No <paramref name="dataType "/> was specified.</exception>
		<example>
			<para>The following example creates a computed column.</para>
			<codelink SampleID="Classic WebData DataColumn.DataColumn3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.DefaultValue"/>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
		<seealso cref="System.Data.DataColumn.Caption"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataColumn.DataType"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
	</doc>
	<doc for="DataColumn.AutoIncrementSeed">
		<summary>
			<para>Gets
       or sets the starting value for a column that has its
    <see cref="System.Data.DataColumn.AutoIncrement"/> property 
       set to <see langword="true"/>
       .</para>
		</summary>
		<value>
			<para>The starting value for the <see cref="System.Data.DataColumn.AutoIncrement"/> feature.</para>
		</value>
		<example>
			<para>The following example sets the <see cref="System.Data.DataColumn.AutoIncrement"/>, <see cref="System.Data.DataColumn.AutoIncrementSeed"/>, and <see cref="System.Data.DataColumn.AutoIncrementStep"/>
 properties.</para>
			<codelink SampleID="Classic WebData DataColumn.AutoIncrementSeed Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.AutoIncrement"/>
		<seealso cref="System.Data.DataColumn.AutoIncrementStep"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
		<seealso cref="System.Data.DataRow.ItemArray"/>
	</doc>
	<doc for="DataColumn.AutoIncrementStep">
		<summary>
			<para>Gets or sets the increment used by a column with its <see cref="System.Data.DataColumn.AutoIncrement"/>
 property set to <see langword="true"/>
 .</para>
		</summary>
		<value>
			<para>The number by which
       the value of the column is automatically incremented. The default
       is 1.</para>
		</value>
		<exception cref="System.ArgumentException">The value set is zero.</exception>
		<example>
			<para>The following example sets the <see cref="System.Data.DataColumn.AutoIncrement"/>, <see cref="System.Data.DataColumn.AutoIncrementSeed"/>, and <see cref="System.Data.DataColumn.AutoIncrementStep"/> properties.</para>
			<codelink SampleID="Classic WebData DataColumn.AutoIncrementSeed Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.AutoIncrement"/>
		<seealso cref="System.Data.DataColumn.AutoIncrementSeed"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
		<seealso cref="System.Data.DataRow.ItemArray"/>
	</doc>
	<doc for="DataColumn.ResetCaption">
		<summary>
			<para>Resets the <see cref="System.Data.DataColumn.Caption"/> property to its previous value, or
    to <see langword="null"/> .</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.DataColumn.OnPropertyChanged"/>
 event is raised when the method succeeds.</para>
		</remarks>
		<example>
			<para>The following example checks the value of an argument, 
       and invokes the <see cref="System.Data.DataColumn.ResetCaption"/>
       method if nothing is found. Otherwise, it sets the
       column's caption to the argument value.</para>
			<codelink SampleID="Classic WebData DataColumn.ResetCaption Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataColumn.ShouldSerializeCaption">
		<summary>
			<para>
       Gets a value indicating whether the <see cref="System.Data.DataColumn.Caption"/> has been explicitly set.
    </para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if the property value has been changed from its 
       default; otherwise, <see langword="false"/>.
    </para>
		</returns>
		<example>
			<codelink SampleID="Classic WebData DataColumn.ShouldSerializeCaption Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataColumn.Computed">
		<summary>
 Whether this column computes values.
 </summary>
	</doc>
	<doc for="DataColumn.DataExpression">
		<summary>
 The internal expression object that computes the values.
 </summary>
	</doc>
	<doc for="DataColumn.HasData">
		<summary>
 Indicates whether this column is now storing data.
 </summary>
	</doc>
	<doc for="DataColumn.Sparse">
		<summary>
			<para>Gets or sets a value
       indicating whether the column should store data in a fashion optimized for sparse data patterns.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the column is marked as a sparse column; otherwise, 
 <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The column already has data stored.</exception>
		<remarks>
			<para>This property is useful for irregular data. Setting the property to
    <see langword="true "/> indicates that the column is not always there, allowing the system to handle memory and
       performance better.</para>
			<para>The <see cref="System.Data.DataColumn.PropertyChanged"/> event occurs when the property value is
    successfully changed.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataColumn"/> and sets the <see cref="System.Data.DataColumn.Sparse"/>
 property to <see langword="true"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.Sparse Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataColumn.Table">
		<summary>
			<para>Gets the <see cref="System.Data.DataTable"/> to which the column belongs to.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.DataTable"/> that the <see cref="System.Data.DataColumn"/> belongs to.</para>
		</value>
		<example>
			<para>The following example returns the parent table of a <see cref="System.Data.DataColumn"/>
 through its <see cref="System.Data.DataColumn.Table"/> property.</para>
			<codelink SampleID="Classic WebData DataColumn.Table Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable"/>
	</doc>
	<doc for="DataColumn.SetTable">
		<summary>
 Internal mechanism for changing the table pointer.
 </summary>
	</doc>
	<doc for="DataColumn.this">
		<summary>
 This is how data is pushed in and out of the column.
 </summary>
	</doc>
	<doc for="DataColumn.this1">
		<summary>
 This is how data is pushed in and out of the column.
 </summary>
	</doc>
	<doc for="DataColumn.PropertyChanged">
		<summary>
			<para>Occurs whenever a property value of the <see cref="System.Data.DataColumn"/>
 changes.</para>
		</summary>
		<remarks>
			<para>The event occurs when the values of the <see cref="System.Data.DataColumn"/>
 properties change.</para>
		</remarks>
		<example>
			<para>The following example adds an event handler for the <see cref="System.Data.DataColumn.PropertyChanged"/> event.</para>
			<codelink SampleID="Classic WebData DataColumn.PropertyChanged Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataColumn.FindParentRelation">
		<summary>
			<para>Finds a relation that this column is the sole child of or null.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.DataRelation"/> , if one is found.</para>
		</returns>
		<example>
			<para>The following example uses the <see cref="DataColumn.FindParentRelation"/> method to return a <see cref="System.Data.DataRelation"/>, the relation's name, and the name of
    the relation's parent column.</para>
			<codelink SampleID="Classic WebData DataColumn.FindParentRelation Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataTable.ChildRelations"/>
		<seealso cref="System.Data.DataRelation"/>
		<seealso cref="System.Data.DataTable.ParentRelations"/>
		<seealso cref="System.Data.DataRelationCollection"/>
	</doc>
	<doc for="DataColumn.IsInRelation">
		<summary>
      Returns true if this column is a part of a Parent or Child key for a relation.
      TODO: this should go away
 </summary>
		<returns>
 A relation if found.
 </returns>
	</doc>
	<doc for="DataColumn.OnPropertyChanged">
		<summary>
			<para>Raises the <see cref="System.Data.DataColumn.PropertyChanged"/> event.</para>
		</summary>
		<param name="pcevent">A <see cref="System.ComponentModel.PropertyChangedEventArgs"/> that contains data about the event.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For an
       overview, see <see topic="cpconProvidingEventFunctionality"/>.</para>
			<note type="inheritinfo">
       When overriding <see cref="System.Data.DataColumn.OnPropertyChanged"/> in a derived
       class, be sure to call the base class's <see cref="System.Data.DataColumn.OnPropertyChanged"/> method.
    </note>
		</remarks>
		<seealso cref="System.Data.DataColumn.PropertyChanged"/>
	</doc>
	<doc for="DataColumn.RaisePropertyChanged">
		<summary>
			<para>Raises the <see cref="System.Data.DataColumn.PropertyChanged"/> event.</para>
		</summary>
		<param name="name">The name of the changed property.</param>
		<remarks>
			<para>The method creates the needed event data and then calls
    <see cref="System.Data.DataColumn.OnPropertyChanged"/>
    .</para>
		</remarks>
	</doc>
	<doc for="DataColumn.ShouldSerializeDefaultValue">
		<internalonly/>
		<keyword term=""/>
	</doc>
	<doc for="DataColumn.ToString">
		<summary>
			<para>Gets the <see cref="System.Data.DataColumn.Expression"/> of the column, if one exists.</para>
		</summary>
		<returns>
			<para>The <see cref="System.Data.DataColumn.Expression"/> value, if the property is set;
    otherwise, the <see cref="System.Data.DataColumn.ColumnName"/>
    property.</para>
		</returns>
		<example>
			<para>The following example uses the <see cref="System.Data.DataColumn.ToString"/> property to return the default string of
    each member of a collection of <see cref="System.Data.DataColumn"/> objects.</para>
			<codelink SampleID="Classic WebData DataColumn.ToString Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.Expression"/>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
	</doc>
	<doc for="DataColumn.VerifyUnique">
		<summary>
			<para>Gets a value verifying whether a column value is unique.</para>
		</summary>
		<param name="value">The value, typed as <see cref="System.Object"/>, to verify.</param>
		<returns>
			<para>
				<see langword="true"/>, if the value is unique; otherwise, 
 <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You can also use a <see cref="System.Data.UniqueConstraint"/> 
 to ensure that values in a column are unique.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.DataColumn.VerifyUnique"/> method to determine if a value is unique.</para>
			<codelink SampleID="Classic WebData DataColumn.VerifyUnique Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataColumn.Namespace">
		<summary>
			<para>Gets or sets the namespace of the <see cref="System.Data.DataColumn"/>.</para>
		</summary>
		<value>
			<para>The namespace of the <see cref="System.Data.DataColumn"/> .</para>
		</value>
		<exception cref="System.ArgumentException"> The namespace already has data.</exception>
		<remarks>
			<para>The <see cref="System.Data.DataColumn.Namespace"/> property is used when reading and
   writing an XML document into a <see cref="System.Data.DataTable"/>
   in the <see cref="System.Data.DataSet"/> using the <see cref="System.Data.DataSet.ReadXml"/> , <see cref="System.Data.DataSet.WriteXml"/>, <see cref="System.Data.DataSet.ReadXmlSchema"/>, or
<see cref="System.Data.DataSet.WriteXmlSchema"/> methods.</para>
			<para> The namespace of an XML document is used to
   scope XML attributes and elements when read into a <see cref="System.Data.DataSet"/>. For example, a <see cref="System.Data.DataSet"/> contains a
   schema read from a document with the namespace "myCompany," and an attempt is
   made to read data (with the <see cref="System.Data.DataSet.ReadXml"/>
   method) from a document with
   the namespace "theirCompany." Any data that does not correspond to the existing
   schema will be ignored.</para>
		</remarks>
	</doc>
	<doc for="DataColumn.Prefix">
		<summary>
			<para>Gets or sets an XML prefix that aliases the namespace of the <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<value>
			<para>The XML prefix for the <see cref="System.Data.DataTable"/> namespace.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataTable.Prefix"/> is used throughout an XML document to identify
   elements which belong to the <see cref="System.Data.DataSet"/> object's namespace (as set by the <see cref="System.Data.DataSet.Namespace"/>
   property). </para>
		</remarks>
	</doc>
	<doc for="DataColumn.AutoIncrement">
		<summary>
			<para>Gets or
      sets a value indicating whether the column automatically increments the value of the column for new
      rows added to the table.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the value of the column increments automatically;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The column is a computed column.</exception>
		<remarks>
			<para>If the type of this column is not Int16, Int32, or Int64 when
      this property is set, the <see cref="System.Data.DataColumn.DataType"/> property is coerced to
      Int32. An exception is generated if this is a computed column (that is, the
   <see cref="System.Data.DataColumn.Expression"/> property is set.) The incremented value is used only
      if the row's value for this column, when added to the columns collection, is equal to the
      default value.</para>
			<para>You can create a new row using the <see cref="System.Data.DataRow"/> class's
<see cref="System.Data.DataRow.ItemArray"/> property and passing in an array of
   values. This is a potential problem for a column with its <see cref="System.Data.DataColumn.AutoIncrement"/> set to <see langword="true"/>, because its value is generated automatically.
   To use the <see cref="System.Data.DataRow.ItemArray"/>
   property, place <see langword="null "/> in the
   column's position in the array. For more details, see the <see cref="System.Data.DataRow"/>
   class's <see cref="System.Data.DataRow.ItemArray"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Data.DataColumn.AutoIncrement"/>, <see cref="System.Data.DataColumn.AutoIncrementSeed"/>, and <see cref="System.Data.DataColumn.AutoIncrementStep"/> properties.</para>
			<codelink SampleID="Classic WebData DataColumn.AutoIncrementSeed Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.AutoIncrementSeed"/>
		<seealso cref="System.Data.DataColumn.AutoIncrementStep"/>
		<seealso cref="System.Data.DataColumn.Expression"/>
		<seealso cref="System.Data.DataRow.ItemArray"/>
		<seealso cref="System.Data.DataTable.NewRow"/>
	</doc>
	<doc for="DataColumn.Ordinal">
		<summary>
			<para>Gets the position of the column in the <see cref="System.Data.DataColumnCollection"/>
collection.</para>
		</summary>
		<value>
			<para>The position of the column. Gets -1 if the column is not a
      member of a collection.</para>
		</value>
		<example>
			<para> The following example returns
      the column name, ordinal, and data type of a
      column.</para>
			<codelink SampleID="Classic WebData DataColumn.Ordinal Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataColumn.ReadOnly">
		<summary>
			<para>Gets or sets a value
      indicating whether the column allows changes once a row has been added to the table.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the column is read only;
   otherwise, <see langword="false"/>. The
   default is <see langword="false"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The property is set to <see langword="false"/> on a computed column.</exception>
		<example>
			<para>The following example creates a <see cref="System.Data.DataColumn"/> and sets its <see cref="System.Data.DataColumn.ReadOnly"/> property <see langword="true"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.ReadOnly Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.Unique"/>
		<seealso cref="System.Data.DataColumn.AutoIncrement"/>
	</doc>
	<doc for="DataColumn.AllowDBNull">
		<summary>
			<para>Gets or sets a value indicating whether null
      values are
      allowed in this column for rows belonging to the table.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if null
   values values are allowed; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataColumn"/> and sets its <see cref="System.Data.DataColumn.AllowDBNull"/> property to <see langword="true"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.AllowDBNull Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.Unique"/>
	</doc>
	<doc for="DataColumn.ColumnName">
		<summary>
			<para>Gets or sets the name of the column in the <see cref="System.Data.DataColumnCollection"/>.</para>
		</summary>
		<value>
			<para>The name of the column.</para>
		</value>
		<exception cref="System.ArgumentException">The property is set to <see langword="null"/> or an empty string and the column belongs to a collection.</exception>
		<exception cref="System.Data.DuplicateNameException">A column with the same name already exists in the collection. The name comparison is not case sensitive.</exception>
		<remarks>
			<para>When a <see cref="System.Data.DataColumn"/> is created, it has no <see cref="System.Data.DataColumn.ColumnName"/> value. When the <see cref="System.Data.DataColumn"/> is
   added to a <see cref="System.Data.DataTable"/> object's <see cref="System.Data.DataColumnCollection"/>
   , however,
   it is given a default name ("Column1", "Column2", etc.).</para>
			<para>The <see cref="System.Data.DataColumn.Caption"/> value is set to the <see cref="System.Data.DataColumn.ColumnName"/> value by
default.</para>
		</remarks>
		<example>
			<para>The following examples gets the <see cref="System.Data.DataColumn.ColumnName"/> for every column in every table
   in a <see cref="System.Data.DataSet"/>. The example also shows how to create
   a <see cref="System.Data.DataColumn"/> with a new <see cref="System.Data.DataColumn.ColumnName"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.ColumnName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.Caption"/>
	</doc><doc for="DataColumn.MaxLength">
		<summary>
			<para>Gets or sets the maximum length of a text column.</para>
		</summary>
		<value>
			<para>The maximum length of the column in characters. If the column has no maximum length, 
      the value is –1 (default).</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataColumn.MaxLength"/> property is ignored for non-text columns. </para>
		</remarks>
	</doc><doc for="DataColumn.ColumnMapping">
		<summary>
			<para>Gets or sets the <see cref="System.Data.MappingType"/> of the column.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.MappingType"/> values.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataColumn.ColumnMapping"/> property determines how a <see cref="System.Data.DataColumn"/> is
   mapped when a <see cref="System.Data.DataSet"/> is saved as an XML document using the <see cref="System.Data.DataSet.WriteXml"/>method.</para>
			<para>For example, if a <see cref="System.Data.DataColumn"/> is named "customerID," and its
<see cref="System.Data.DataColumn.ColumnMapping"/> property is set to
<see langword="MappingType.Element"/>, the column value will produce the
following XML:</para>
			<code>
&lt;Customers&gt;
 &lt;customerID&gt;ALFKI&lt;/customerID&gt;
 ......
 &lt;/Customers&gt;
 &lt;Orders&gt;
 &lt;OrderID&gt;12345&lt;/OrderID&gt;
 &lt;customerID&gt;ALFKI&lt;/customerID&gt;
 ......
 &lt;/Orders&gt;
</code>
			<para>However, if the same column is mapped to
<see langword="MappingType.Attribute"/>
, the following XML is produced:</para>
			<code>
&lt;Customers customerID="ALFKI" ........more attributes.....&gt;
 &lt;Order orderID="1234" ....more attributes..../&gt;
 &lt;Order orderID="1234" ....more attributes..../&gt;
 ...... More orders for this customer
 &lt;/Customers&gt;
</code>
			<para>Use the <see cref="System.Data.DataColumn()"/> constructor that contains the
<paramref name="type "/>argument to specificy how the <see cref="System.Data.DataColumn"/> is mapped when its <see cref="System.Data.DataSet"/> is transformed to an XML document.</para>
			<para>The <see cref="System.Data.DataColumn.ColumnMapping"/> property corresponds to the constructor 
argument <paramref name="type"/> . </para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Data.DataColumn.ColumnMapping"/> type property of new <see cref="System.Data.DataColumn"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.ColumnMapping Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataColumn.DataColumn4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.DataColumn"/> class
   using
   the specified name, data type, expression, and value that determines whether the
   column is an attribute.</para>
		</summary>
		<param name="columnName">A string that represents the name of the column to be created. If set to <see langword="null"/> or an empty string (""), a default name will be given when added to the columns collection.</param>
		<param name="dataType">A supported <see cref="System.Data.DataColumn.DataType"/> .</param>
		<param name="expr">The expression used to create this column. For more details, see the <see cref="System.Data.DataColumn.Expression"/> property.</param>
		<param name="type">One of the <see cref="System.Data.MappingType"/> values.</param>
		<exception cref="System.ArgumentNullException">No <paramref name="dataType "/> was specified.</exception>
		<remarks>
			<para>The <paramref name="type "/>argument sets the <see cref="System.Data.DataColumn.ColumnMapping"/> property. The property specifies how a <see cref="System.Data.DataColumn"/>
is mapped when a <see cref="System.Data.DataSet"/> is transformed into an XML document. For example,
if the the column is named "fName," and the value it contains is "Bob," and
<paramref name="type "/> is set to
<see langword="MappingType.Attribute"/>
, the XML
element would be:</para>
			<para>&lt;Name fName = 'Bob'/&gt;</para>
			<para>For more details on how columns are mapped to elements or attributes, see the
<see cref="System.Data.DataColumn.ColumnMapping"/> property.</para>
		</remarks>
		<example>
			<para>The following example constructs a computed column.</para>
			<codelink SampleID="Classic WebData DataColumn.DataColumn4 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
		<seealso cref="System.Data.DataColumn.ColumnMapping"/>
		<seealso cref="System.Data.DataColumn.Caption"/>
		<seealso cref="System.Data.DataColumn.DefaultValue"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataColumn.DataType"/>
	</doc><doc for="DataColumn.Unique">
		<summary>
			<para>Gets or sets a value indicating whether the values in each row of the column must be unique.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the value must be unique;
   otherwise, <see langword="false"/>. The
   default is <see langword="false"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The column is a calculated column.</exception>
		<remarks>
			<para>Once this property is changed from false to true, a 
      unique constraint will be created on this column
      to ensure values are unique.</para>
		</remarks>
		<example>
			<para> The following example creates new <see cref="System.Data.DataColumn"/> , sets its properties, and adds it to a table's columns collection.</para>
			<codelink SampleID="Classic WebData DataColumn.Unique Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.AllowDBNull"/>
		<seealso cref="System.Data.UniqueConstraint"/>
		<seealso cref="System.Data.DataTable.Constraints"/>
	</doc>
	<doc for="DataColumn.DataType">
		<summary>
			<para>Gets or sets the type of
      data stored in the column.</para>
		</summary>
		<value>
			<para>A <see cref="System.Type"/> object that
   represents the column data type.</para>
		</value>
		<exception cref="System.ArgumentException">The column already has data stored.</exception>
		<exception cref="System.ArgumentException"><see cref="System.Data.DataColumn.AutoIncrement"/> is <see langword="true"/>, but the value is set to a type a unsupported by <see cref="System.Data.DataColumn.AutoIncrement"/> .</exception>
		<remarks>
			<para>Setting the <see cref="System.Data.DataColumn.DataType"/> value 
   is critical to ensuring the correct creation and updating
   of data in a data source.</para>
			<para>The <see cref="System.Data.DataColumn.DataType"/>
property
supports the base .NET Framework data types shown
below:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Boolean"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Byte"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Char"/></term>
				</item>
				<item>
					<term>
						<see cref="System.DateTime"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Decimal"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Double"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Int16"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Int32"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Int64"/></term>
				</item>
				<item>
					<term>
						<see cref="System.SByte"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Single"/></term>
				</item>
				<item>
					<term>
						<see cref="System.String"/></term>
				</item>
				<item>
					<term>
						<see cref="System.TimeSpan"/></term>
				</item>
				<item>
					<term>
						<see cref="System.UInt16"/></term>
				</item>
				<item>
					<term>
						<see cref="System.UInt32"/></term>
				</item>
				<item>
					<term>
						<see cref="System.UInt64"/></term>
				</item>
			</list>
			<para>An exception is generated when changing this property
   after the column has begun storing data.</para>
			<para>If <see cref="System.Data.DataColumn.AutoIncrement"/> is set to
<see langword="true "/>before setting the <see cref="System.Data.DataColumn.DataType"/>
property, and you attempt to set the
type to anything except an integer type, an exception is generated.</para>
		</remarks>
		<example>
			<para>The following example adds columns of several
      data types to a <see cref="System.Data.DataTable"/>, then adds one row to
      the table.</para>
			<codelink SampleID="Classic WebData DataColumn.DataType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Type"/>
		<seealso cref="System.Type.GetType"/>
	</doc>
	<doc for="DataColumn">
		<summary>
			<para>Represents the schema of a column in a <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded read operations. You must synchronize any
      write operations.</para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.Data.DataColumn"/> is the fundamental building block for creating the
   schema of a <see cref="System.Data.DataTable"/>
   
   . You build the schema by adding one or
   more <see cref="System.Data.DataColumn"/> objects to the <see cref="System.Data.DataColumnCollection"/>. For more information, see <see topic="cpconaddingdatacolumnstodatatable"/>.</para>
			<para>Each <see cref="System.Data.DataColumn"/>
has a <see cref="System.Data.DataColumn.DataType"/> property that determines the kind
of data the <see cref="System.Data.DataColumn"/>
contains. For example, you can restrict the data type to integers,
or strings, or decimals. Because data contained by the <see cref="System.Data.DataTable"/> is usually merged back into its original data
source, you must match the data types to those in the data source. For
more information, see <see topic="cpconmappingnetdataproviderdatatypestonetframeworkdatatypes"/>.</para>
			<para>Properties such as <see cref="System.Data.DataColumn.AllowDBNull"/> , <see cref="System.Data.DataColumn.Unique"/> , and <see cref="System.Data.DataColumn.ReadOnly"/>
place restrictions on the entry and updating of data, thereby helping to ensure data integrity. You
can also use the <see cref="System.Data.DataColumn.AutoIncrement"/>, <see cref="System.Data.DataColumn.AutoIncrementSeed"/>, and <see cref="System.Data.DataColumn.AutoIncrementStep"/> properties
to control automatic data generation. For more information about <see cref="System.Data.DataColumn.AutoIncrement"/> columns, see <see topic="cpconcreatingautoincrementcolumns"/>
. For more information, see <see topic="cpcondefiningprimarykeyfortable"/>
.</para>
			<para>You can also ensure that values in a <see cref="System.Data.DataColumn"/> are unique by creating
a <see cref="System.Data.UniqueConstraint"/> and adding it to the <see cref="System.Data.ConstraintCollection"/> of the <see cref="System.Data.DataTable"/> to which the <see cref="System.Data.DataColumn"/>
belongs. For more information, see <see topic="cpconAddingConstraintsToDataSet"/>
.</para>
			<para> To create a relation between <see cref="System.Data.DataColumn"/>
objects, create a <see cref="System.Data.DataRelation"/> object and add it to the <see cref="System.Data.DataRelationCollection"/> of a <see cref="System.Data.DataSet"/>
.</para>
			<para> You
   can use the <see cref="System.Data.DataColumn.Expression"/> property of the <see cref="System.Data.DataColumn"/>
   object calculate the values in a column, or create
   an aggregate column. For more information, see <see topic="cpconcreatingexpressioncolumns"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.DataTable"/> with several <see cref="System.Data.DataColumn"/> objects.</para>
			<codelink SampleID="Classic WebData DataColumn Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumnCollection.Add"/>
		<seealso cref="System.Data.DataColumnCollection"/>
		<seealso cref="System.Data.DataTable.Constraints"/>
		<seealso cref="System.Data.ConstraintCollection"/>
		<seealso cref="T:System.Windows.Forms.DataGrid" qualify="true"/>
		<seealso cref="System.Data.DataRow"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataTable.NewRow"/>
		<seealso cref="System.Data.DataRowCollection"/>
		<seealso cref="System.Data.UniqueConstraint"/>
	</doc>
	<doc for="DataColumn.OnPropertyChanging"><nodoc/>
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
	</doc>
	<doc for="DataColumn.RaisePropertyChanging">
		<nodoc/>
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
	</doc>
	<doc for="DataColumn.ExtendedProperties">
		<summary>
			<para>Gets the collection of custom user information 
      associated with a <see cref="System.Data.DataColumn"/> .</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.PropertyCollection"/>
of custom information.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.DataColumn.ExtendedProperties"/> property allows you to store custom information
   with the object. For example, you may store a time when the data should be
   refreshed.</para>
			<para>Extended properties must be of type <see cref="System.String"/>. Properties that are not of type <see cref="System.String"/>
are not persisted when the <see cref="System.Data.DataColumn"/> is written as XML.</para>
		</remarks>
		<example>
			<para>The following example adds a custom property to the
   <see cref="System.Data.PropertyCollection"/> returned by the <see cref="System.Data.DataColumn.ExtendedProperties"/> property. The second example retrieves the custom
      property.</para>
			<codelink SampleID="Classic WebData DataColumn.ExtendedProperties Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.PropertyCollection"/>
	</doc>
	<doc for="DataColumn.DefaultValue">
		<summary>
			<para>Gets or sets the default value for the
      column when creating new rows.</para>
		</summary>
		<value>
			<para>A value appropriate to the column's <see cref="System.Data.DataColumn.DataType"/>.</para>
		</value>
		<exception cref="System.InvalidCastException">When adding a row, the default value is not an instance of the column's data type.</exception>
		<remarks>
			<para>A default value is the value that is automatically assigned to the column
      when a <see cref="System.Data.DataRow"/> is created (for example, the date and time
      when the <see cref="System.Data.DataRow"/>
      was created.</para>
			<para>When <see cref="System.Data.DataColumn.AutoIncrement"/>
is set to true,
there can be no default value.</para>
			<para>You can create a new row using the <see cref="System.Data.DataRow"/> class's <see cref="System.Data.DataRow.ItemArray"/> property and passing the method an array of
values. This is a potential problem for a column with a default value because
its value is generated automatically. To use the <see cref="System.Data.DataRow.ItemArray"/> property with such a column, place
<see langword="null "/> in
the column's position in the array. For more details, see the <see cref="System.Data.DataRow.ItemArray"/> property.</para>
		</remarks>
		<example>
			<para>The following example creates several <see cref="System.Data.DataColumn"/>
objects with different data
types, and sets appropriate default values to each column.</para>
			<codelink SampleID="Classic WebData DataColumn.DefaultValue Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.DataType"/>
		<seealso cref="System.Data.DataRow.ItemArray"/>
		<seealso cref="System.Data.DataColumn.AutoIncrement"/>
		<seealso cref="System.Data.UniqueConstraint"/>
	</doc>
	<doc for="DataColumn.CheckNotAllowNull"><nodoc/>
		<internalonly/>
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
	</doc>
	<doc for="DataColumn.CheckUnique"><nodoc/>
		<internalonly/>
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
	</doc>
	<doc for="DataColumn.Caption">
		<summary>
			<para>Gets or sets
      the caption for the column.</para>
		</summary>
		<value>
			<para>The caption of the column. If not set, returns the <see cref="System.Data.DataColumn.ColumnName"/> value.</para>
		</value>
		<remarks>
			<para>You can use the <see cref="System.Data.DataColumn.Caption"/> property to display a descriptive or 
   friendly name for a <see cref="System.Data.DataColumn"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a 
      new <see cref="System.Data.DataTable"/>. It then adds three <see cref="System.Data.DataColumn"/>
      objects to a <see cref="System.Data.DataColumnCollection"/> and sets the
   <see cref="System.Data.DataColumn.Caption"/> 
   property for each <see cref="System.Data.DataColumn"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.Caption Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
	</doc>
	<doc for="DataColumn.DataColumn">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.DataColumn"/>class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of a <see cref="System.Data.DataColumn"/>
class.</para>
		</summary>
		<remarks>
			<para>When created, a new <see cref="System.Data.DataColumn"/> object has no default <see cref="System.Data.DataColumn.ColumnName"/> or <see cref="System.Data.DataColumn.Caption"/> property. When added to a
<see cref="System.Data.DataColumnCollection"/>, however, a default name ("Column1", "Column2", and so
   on) is given to the column.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Data.DataColumn"/>, sets various properties, and adds it to a <see cref="System.Data.DataTable"/> object's
<see cref="System.Data.DataColumnCollection"/>.</para>
			<codelink SampleID="Classic WebData DataColumn.DataColumn Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.DataColumn.ColumnName"/>
		<seealso cref="System.Data.DataColumn.Caption"/>
		<seealso cref="System.Data.DataColumn.DefaultValue"/>
		<seealso cref="System.Data.DataTable"/>
		<seealso cref="System.Data.DataColumn.DataType"/>
	</doc><doc for="DataColumn.Expression">
		<summary>
			<para> Gets
      or sets the expression used to filter rows, calculate the values in a
      column, or create an aggregate column.</para>
		</summary>
		<value>
			<para>An expression to calculate the value of a column, or create
      an aggregate column. The return type of an expression is determined by the
   <see cref="System.Data.DataColumn.DataType"/> of the
      column.</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="System.Data.DataColumn.AutoIncrement"/> or <see cref="System.Data.DataColumn.Unique"/> property is set to <see langword="true"/>.</exception>
		<exception cref="System.FormatException">When using the CONVERT function, the expression evaluates to a string, but the string does not contain a representation that can be converted to the type parameter.</exception>
		<exception cref="System.InvalidCastException">When using the CONVERT function, the requested cast is not possible. See the Conversion function below for details on possible casts.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>When using the SUBSTRING function, the start argument is out of range.</para>
			<para>-Or-</para>
			<para>When using the SUBSTRING function, the length argument is out of range.</para></exception>
		<exception cref="System.Exception">When using the LEN function or the TRIM function, the expression does not evaluate to a string. This includes expressions that evaluate to <see cref="T:System.Char"/> .</exception>
		<remarks>
			<para>One use of
      the <see cref="System.Data.DataColumn.Expression"/> property is to create calculated
      columns. For example, to calculate a tax value, the unit price is multiplied by
      a tax rate of a given region. Since tax rates vary from region to region, it
      would be impossible to put a single tax rate in a column; instead, the value is
      calculated using the <see cref="System.Data.DataColumn.Expression"/>
      property, as
      shown in the Visual Basic code below:</para>
			<para>DataSet1.Tables("Products").Columns("tax").Expression = 
      "UnitPrice * 0.086"</para>
			<para>A second use is to create an aggregate
      column. Similar to a calculated value, an aggregate performs an operation based
      on the entire set of rows in the <see cref="System.Data.DataTable"/> .
      A simple example is to count the number of rows returned in
      the set, which is the method you would use to count the number of transactions
      completed by a particular salesperson, as shown in this Visual Basic code:</para>
			<code>
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"
   </code>
			<para>EXPRESSION SYNTAX</para>
			<para>When creating an expression, use the <see cref="System.Data.DataColumn.ColumnName"/> property to refer to columns. For
   example, if the <see cref="System.Data.DataColumn.ColumnName"/>
   for one column is "UnitPrice", and
   another "Quantity", the expression would be:</para>
			<para>"UnitPrice * Quantity"</para>
			<para>When creating an expression for a filter, enclose strings
   with single quotes:</para>
			<para>"LastName =
   'Jones'"</para>
			<para> The following characters are special characters
   and must be escaped, as explained below, if
   they are used in a column name:</para>
			<para>\n (newline)</para>
			<para>\t (tab)</para>
			<para>\r
   (carriage return)</para>
			<para>~</para>
			<para>(</para>
			<para>)</para>
			<para>#</para>
			<para>\</para>
			<para>/</para>
			<para>=</para>
			<para>&gt;</para>
			<para>&lt;</para>
			<para>+</para>
			<para>-</para>
			<para>*</para>
			<para>%</para>
			<para>&amp;</para>
			<para>|</para>
			<para>^</para>
			<para>'</para>
			<para>"</para>
			<para>[</para>
			<para>]</para>
			<para>If a column name contains one of the
   above characters, the name must be wrapped
   in brackets. For example to use a column named "Column#" in an expression, you
   would write "[Column#]":</para>
			<para>Total * [Column#]</para>
			<para>Because brackets are special characters, you must use a slash ("\") to escape
   the bracket, if it is part of a column name. For example, a column named
   "Column[]" would be written:</para>
			<para>Total * [Column[\]]</para>
			<para>(Only the second bracket must be escaped.)</para>
			<para>USER-DEFINED VALUES</para>
			<para>User-defined values may be used within expressions to be compared against
   column values. String values should be enclosed within single quotes. Date
   values should be enclosed within pound signs (#). Decimals and scientific
   notation are permissible for numeric values. For example:</para>
			<para>"FirstName = 'John'"</para>
			<para>"Price &lt;= 50.00"</para>
			<para>"Birthdate &lt; #1/31/82#"</para>
			<para>For columns that contain enumeration values, cast the value to an
   integer data type. For example:</para>
			<para>"EnumColumn = 5"</para>
			<para>OPERATORS</para>
			<para>Concatenation is allowed using Boolean AND, OR, and NOT operators. You can
   use parentheses to group clauses and force precedence. The AND operator has
   precedence over other operators. For example:</para>
			<para>(LastName = 'Smith' OR
   LastName = 'Jones') AND
   FirstName =
   'John'</para>
			<para>When creating comparison expressions,
   the following operators are
   allowed:</para>
			<para>&lt;</para>
			<para>&gt;</para>
			<para>&lt;=</para>
			<para>&gt;=</para>
			<para>&lt;&gt;</para>
			<para>=</para>
			<para>IN</para>
			<para>LIKE</para>
			<para>The following arithmetic operators are also supported in expressions:</para>
			<para>+ (addition)</para>
			<para>- (subtraction)</para>
			<para>* (multiplication)</para>
			<para>/ (division)</para>
			<para>% (modulus)</para>
			<para>STRING OPERATORS</para>
			<para>To concatenate a string, use the + character. Whether
   string comparisons are case-sensitive or not is determined by the value of the
<see cref="System.Data.DataSet"/>
class's <see cref="System.Data.DataSet.CaseSensitive"/> property. However, you can override that
value with the <see cref="System.Data.DataTable"/> class's <see cref="System.Data.DataTable.CaseSensitive"/>
property.</para>
			<para>WILDCARD CHARACTERS</para>
			<para>Both the *
   and % can be used interchangeably for wildcards in a LIKE comparison. If the
   string in a LIKE clause contains a * or %, those characters should be escaped
   in brackets ([]). If a bracket is in the clause, the bracket characters should be
   escaped in brackets (for example [[] or []]). A wildcard is allowed at
   the beginning and end of a pattern, or at the end of a pattern, or at the
   beginning of a pattern. For example:</para>
			<para>"ItemName LIKE '*product*'"</para>
			<para>"ItemName LIKE '*product'"</para>
			<para>"ItemName LIKE 'product*'"</para>
			<para>Wildcards are not allowed in the middle of a string. For example, 'te*xt' is
   not allowed.</para>
			<para>PARENT/CHILD RELATION REFERENCING</para>
			<para>A parent table may be referenced in an expression by
   prepending the column name with <see langword="Parent"/>. For example, the
<see langword="Parent.Price"/> references the parent table's column named 
<see langword="Price"/> 
.</para>
			<para>A column in a child table may be referenced in an expression by prepending
   the column name with <see langword="Child"/>. However, because child
   relationships may return multiple rows, you must include the reference to the
   child column in an aggregate function. For example,
<see langword="Sum(Child.Price)"/> would return the sum of the column named 
<see langword="Price"/> in the child table.</para>
			<para>If a table has more than one child, the syntax is:
<see langword="Child(RelationName)"/>. For example, if a table has two child 
   tables named <see langword="Customers"/> and <see langword="Orders"/>
   , and the <see cref="System.Data.DataRelation"/> object is named
<see langword="Customers2Orders"/>
, the reference would be:</para>
			<para>Avg(Child(Customers2Orders).Quantity)</para>
			<para>AGGREGATES</para>
			<para>The following aggregate types
   are supported:</para>
			<para>Sum (Sum)</para>
			<para>Avg (Average)</para>
			<para>Min (Minimum)</para>
			<para>Max (Maximum)</para>
			<para>Count (Count)</para>
			<para>StDev (Statistical standard deviation)</para>
			<para>Var (Statistical variance).</para>
			<para>Aggregates
   are usually performed along relationships. Create an
   aggregate expression by using one of the functions listed above and
   a child table column as detailed in
   PARENT/CHILD RELATION REFERENCING above. For example:</para>
			<para>Avg(Child.Price)</para>
			<para>Avg(Child(Orders2Details).Price)</para>
			<para>An aggregate can also be performed on a single table. For example, to
   create a summary of figures in a column named "Price":</para>
			<para>Sum(Price)</para>
			<note type="note">
   If you use a single table to
   create an aggregate, there would be no group-by functionality. Instead, all rows
   would display the same value in the column.
   
</note>
			<para>If a table has no rows, the aggregate functions will
   return <see langword="null"/>
   .</para>
			<para>Data types can always be determined by examining the
<see cref="System.Data.DataColumn.DataType"/>
property of a column. You can also convert data types using
the
Convert function, shown below.</para>
			<para><see langword="FUNCTIONS"/>
			</para>
			<para>The following
   functions are also supported:</para>
			<para><see langword="CONVERT"/>
			</para>
			<list type="table">
				<item>
					<term> Description</term>
					<description>Converts given expression to a specified .NET Framework Type.</description>
				</item>
				<item>
					<term> Syntax</term>
					<description>Convert(<paramref name="expression"/>, <paramref name="type"/>)</description>
				</item>
				<item>
					<term> Arguments</term>
					<description>
						<para><paramref name="expression "/>
   -- The
   expression to convert.</para>
						<para><paramref name="type"/> -- The .NET Framework type to which the value will
be converted.</para></description>
				</item>
			</list>
			<para>Example: myDataColumn.Expression="Convert(total, 'System.Int32')"</para>
			<para>All conversions are valid with the following exceptions:
<see langword="Boolean "/>can be coerced to and from <see langword="Byte"/>,
<see langword="SByte"/>, <see langword="Int16"/>, <see langword="Int32"/>,
<see langword="Int64"/>, <see langword="UInt16"/>, <see langword="UInt32"/>,
<see langword="UInt64"/>, <see langword="String "/>and itself only. <see langword="Char "/>can be coerced to and from <see langword="Int32"/>,
<see langword="UInt32"/>, <see langword="String"/>, and itself only. <see langword="DateTime "/>can be
   coerced to and from <see langword="String "/>and itself only. <see langword="TimeSpan "/>can be coerced to and from <see langword="String "/>and itself only.</para>
			<para><see langword="LEN"/>
			</para>
			<list type="table">
				<item>
					<term> Description</term>
					<description>Gets the length of a string</description>
				</item>
				<item>
					<term> Syntax</term>
					<description>LEN(<paramref name="expression"/>
   )</description>
				</item>
				<item>
					<term> Arguments</term>
					<description><paramref name="expression "/>-- The string to be evaluated.</description>
				</item>
			</list>
			<para>Example: myDataColumn.Expression="Len(ItemName)"</para>
			<para><see langword="ISNULL"/>
			</para>
			<list type="table">
				<item>
					<term> Description</term>
					<description>Checks an expression and either returns
         the checked expression or a replacement value.</description>
				</item>
				<item>
					<term> Syntax</term>
					<description>ISNULL(<paramref name="expression"/>, <paramref name="replacementvalue"/>)</description>
				</item>
				<item>
					<term> Arguments</term>
					<description>
						<para><paramref name="expression"/> -- The expression to check.</para>
						<para><paramref name="replacementvalue"/> -- If
   expression is <see langword="null"/> ,
<paramref name="replacementvalue"/> is returned. </para></description>
				</item>
			</list>
			<para>Example: myDataColumn.Expression="IsNull(price, -1)"</para>
			<para><see langword="IIF"/>
			</para>
			<list type="table">
				<item>
					<term> Description</term>
					<description>Gets one of two values depending on the
         result of a logical expression.</description>
				</item>
				<item>
					<term> Syntax</term>
					<description>IIF(<paramref name="expr"/>, <paramref name="truepart"/>, <paramref name="falsepart"/>)</description>
				</item>
				<item>
					<term> Arguments</term>
					<description>
						<para><paramref name="expr "/>-- The expression to evaluate.</para>
						<para><paramref name="truepart"/> -- The value to return if the expression is true.</para>
						<para><paramref name="falsepart"/> -- The value to return if the expression is
false.</para></description>
				</item>
			</list>
			<para>Example: myDataColumn.Expression = "IIF(total&gt;1000,
   'expensive', 'dear')</para>
			<para><see langword="TRIM"/>
			</para>
			<list type="table">
				<item>
					<term> Description</term>
					<description>Removes all leading and trailing blank characters like \r
         , \n, \t, ' '</description>
				</item>
				<item>
					<term> Syntax</term>
					<description>TRIM(<paramref name="expression"/>)</description>
				</item>
				<item>
					<term> Arguments</term>
					<description>
						<para><paramref name="expression"/> -- The expression to trim.</para></description>
				</item>
			</list>
			<para><see langword="SUBSTRING"/>
			</para>
			<list type="table">
				<item>
					<term> Description</term>
					<description>Gets
         a sub-string of a specified length, starting at a specified point in the
         string.</description>
				</item>
				<item>
					<term> Syntax</term>
					<description>SUBSTRING(<paramref name="expression, start,
         length"/>)</description>
				</item>
				<item>
					<term> Arguments</term>
					<description>
						<para><paramref name="expression"/> -- The source
         string for the substring.</para>
						<para><paramref name="start "/>-- Integer that specifies where the substring
      begins.</para>
						<para><paramref name="length "/>-- Integer that specifies the length of the
   substring.</para></description>
				</item>
			</list>
			<para>Example: myDataColumn.Expression = "SUBSTRING(phone, 7,
   8)"</para>
			<note type="note">
   You can reset the <see cref="System.Data.DataColumn.Expression"/> property by
   assigning it a null value or empty string. If a default value is set on the
   expression column, all previously filled rows are assigned the default value after the <see cref="System.Data.DataColumn.Expression"/>
   property is reset.
</note>
		</remarks>
		<example>
			<para>The following example creates three coumns in a <see cref="System.Data.DataTable"/>. The second and third
   columns contain expressions; the second calculates tax using a variable tax
   rate, and the third adds the result of the calculation to the value of the first
   column. The resulting table is displayed in a <see cref="T:System.Windows.Forms.DataGrid"/>
   control.</para>
			<codelink SampleID="Classic WebData DataColumn.Expression Example" SnippetID="1"/>
		</example>
	</doc></docs>
