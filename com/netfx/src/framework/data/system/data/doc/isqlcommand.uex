<docs>
	<doc for="ISqlCommand.ExecuteRow">
		<summary>
			<para>Executes the query, and returns an <see cref="System.Data.IDataRecord"/>IDataRecord 
      containing a single row returned by the query.
</para>
		</summary>
	</doc>
	<doc for="ISqlCommand.Connection">
		<summary>
   Gets or sets the text command to run against the data
   source.
</summary>
		<value>
			<para>The text command to execute. The default value is an empty string ("").</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.IDbCommand.Connection"/> property 
   cannot be set if the current connection is performing an execute or fetch
   operation. </para>
		</remarks>
	</doc>
	<doc for="ISqlCommand.CreateParameter">
		<summary>
			<para>Creates 
      a new instance of an <see cref="System.Data.ISqlParameter"/> object. </para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.ISqlParameter"/> object.</para>
		</returns>
	</doc>
	<doc for="ISqlCommand.Parameters">
		<summary>
			<para> Gets the <see cref="System.Data.ISqlParameterCollection"/>
.</para>
		</summary>
		<value>
			<para>The parameters of the Transact-SQL statement or stored procedure.</para>
		</value>
		<example>
			<para>The following example creates an instance of the derived class, <see cref="System.Data.SqlClient.SqlCommand"/> , and displays its
   parameters. In the example, the application passes a <see cref="System.Data.SqlClient.SqlConnection"/> , a query string that is a
   Transact-SQL SELECT statement, and an array of <see cref="System.Data.SqlClient.SqlParameter"/> objects.</para>
			<codelink SampleID="Classic WebData IDbCommand.Parameters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.ISqlParameter"/>
	</doc>
	<doc for="ISqlCommand.ExecuteStream">
		<summary>
			<para>Executes the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> against the
<see cref="System.Data.SqlClient.SqlCommand.Connection"/> and builds an <see cref="System.Xml.XmlReader"/> object.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Xml.XmlReader"/> object.</para>
		</returns>
	</doc><doc for="ISqlCommand.ExecuteResultset">
		<summary>
			<para>Reserved for future use.</para>
		</summary>
		<param name="options">Reserved for future use.</param>
		<returns>
			<para>Reserved for future use.</para>
		</returns>
	</doc><doc for="ISqlCommand.ExecuteReader">
		<overload>
			<para> Executes the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> against the 
<see cref="System.Data.IDbConnection"/> and builds an <see cref="System.Data.IDataReader"/>.</para>
		</overload>
		<summary>
			<para>Executes the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> against the <see cref="System.Data.IDbConnection"/> and builds an <see cref="System.Data.IDataReader"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.IDataReader"/> object.</para>
		</returns>
		<exception cref="System.Exception">The command could not be executed.</exception>
		<remarks>
			<para>When the <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/>
property should be set to the name of the stored procedure.
The command executes this stored procedure when you call <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> , clones it, then executes it. To accomplish this, the method is passed a string that is a Transact-SQL SELECT statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData ISqlCommand.ExecuteReader Example" SnippetID="1"/>
		</example>
	</doc><doc for="ISqlCommand.ExecuteReader1">
		<summary>
			<para>Executes the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> against the <see cref="System.Data.IDbConnection"/>, and builds an <see cref="System.Data.IDataReader"/> using one of the <see cref="System.Data.CommandBehavior"/>values.</para>
		</summary>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>An <see cref="System.Data.IDataReader"/> object.</para>
		</returns>
		<exception cref="System.Exception">The command could not be executed.</exception>
		<remarks>
			<para>When the <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/>
property should be set to the name of the stored procedure.
The command executes this stored procedure when you call <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/>.</para>
		</remarks>
	</doc><doc for="ISqlCommand">
		<summary>
			<para>Represents a Transact-SQL statement that is executed while connected to a SQL Server, and is implemented by .NET data providers that access SQL Server relational databases.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.ISqlCommand"/> interface inherits from the <see cref="System.Data.IDbCommand"/> 
interface, and in turn, allows an inheriting class to implement a Command class, which represents a SQL statement that is executed at a data source.
For more information, see <see topic="cpconadonetcommands"/>.</para>
			<para>An application does not create an instance of the <see cref="System.Data.ISqlCommand"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.ISqlCommand"/> . </para>
			<para>Classes that inherit <see cref="System.Data.ISqlCommand"/> must implement the inherited members, and typically 
define additional members to add provider-specific functionality.</para>
			<note type="inotes">
   
   When
   you inherit from the <see cref="System.Data.ISqlCommand"/> interface, it
   is recommended that you implement the following constructors:
</note>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> PrvCommand()</term>
					<description>Initializes a new instance of the PrvCommand
         class.</description>
				</item>
				<item>
					<term> PrvCommand(string cmdText)</term>
					<description>Initializes a new instance of the PrvCommand class with
         the text of the query.</description>
				</item>
				<item>
					<term> PrvCommand(string cmdText, PrvConnection connection)</term>
					<description>Initializes a new instance of the PrvCommand class with the text of the query and a PrvConnection.</description>
				</item>
				<item>
					<term> PrvCommand(string cmdText, PrvConnection
         connection, PrvTransaction transaction)</term>
					<description>Initializes a new instance of the PrvCommand class with the text of the query, a PrvConnection, and the
         PrvTransaction.</description>
				</item>
			</list>
			<para>To promote consistency among .NET data
   providers, you should name the inheriting class in the form
<paramref name="Prv"/>Command where <paramref name="Prv "/>is the 
   uniform prefix given to all classes in a specific .NET data provider namespace.
   For example, <paramref name="Sql"/> is the prefix of the <see cref="System.Data.SqlClient.SqlCommand"/> class in the
   System.Data.SqlClient namespace. </para>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter"/>
		<seealso cref="System.Data.IDbConnection"/>
		<seealso cref="System.Data.ISqlCommand"/>
		<seealso cref="System.Data.OleDb.OleDbCommand"/>
		<seealso cref="System.Data.SqlClient.SqlCommand"/>
	</doc><doc for="ISqlCommand.V2">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ISqlCommand.Transaction">
		<summary>
			<para>Gets or sets the transaction
      within which the <see cref="System.Data.ISqlCommand"/>
      executes.
      </para>
		</summary>
	</doc>
</docs>
