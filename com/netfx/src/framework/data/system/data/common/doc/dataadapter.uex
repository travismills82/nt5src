<docs>
	<doc for="DataAdapter.IDataAdapter.FillSchema">
		<summary>
			<para>Fills the <see cref="System.Data.DataSet"/> with only the schema based upon the chosen <see cref="System.Data.SchemaType"/> .</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> to be filled with the schema from the data source.</param>
		<param name="schemaType">One of the <see cref="System.Data.SchemaType"/> values.</param>
		<returns>
			<para>An array of <see cref="System.Data.DataTable"/> objects that contain data
    returned from the data source.</para>
		</returns>
		<remarks>
			<para>This method retrieves the data from the data source using a select command.
       The connection object associated with the SELECT statement must be valid, but it
       does not need to open. If the connection is closed before <see cref="System.Data.IDataAdapter.FillSchema"/> is called, it is opened to
       retrieve data, then closed. If the connection is open before <see cref="System.Data.IDataAdapter.FillSchema"/> is called, it is left
       open.</para>
			<para>This method assumes that a mapping named "Table" exists within the <see cref="System.Data.IDataAdapter.TableMappings"/> collection, otherwise an exception
    is generated.</para>
			<note type="inheritinfo">
    When
    overriding <see cref="System.Data.IDataAdapter.FillSchema"/> in a derived class, be sure to call the base
    class's <see cref="System.Data.IDataAdapter.FillSchema"/> method.
 </note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/>, to fill a <see cref="System.Data.DataSet"/> with the schema, an array of
 <see cref="System.Data.DataTable"/>
 objects with data, and returns the <see cref="System.Data.OleDb.OleDbParameterCollection"/> collection to an array of
 <see cref="System.Data.IDataParameter"/> objects. This example assumes that you have created
 an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/> .</para>
			<codelink SampleID="Classic WebData DataAdapter.IDataAdapter.FillSchema Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataAdapter.IDataAdapter.Fill">
		<summary>
			<para>Changes the data in the <see cref="System.Data.DataSet"/> to
    match the data in the data source.</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> to update with data and schema from the data source.</param>
		<returns>
			<para>The number of rows successfully updated to the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
    that do not return rows.</para>
		</returns>
		<remarks>
			<para>This method retrieves the data from the data source
       using a select command. The connection object associated with the SELECT statement
       must be valid, but it does not need to open. If the connection is closed
       before <see cref="System.Data.IDataAdapter.Fill"/> is called, it is opened to retrieve
       data, then closed. If the connection is open before <see cref="System.Data.IDataAdapter.Fill"/> is called, it is left open.</para>
			<para>This method assumes that a mapping named "Table" exists within the <see cref="System.Data.IDataAdapter.TableMappings"/> collection, otherwise
    an exception is generated.</para>
			<para>If the <see cref="System.Data.Common.DataAdapter"/> object encounters duplicate columns while
 populating a <see cref="System.Data.DataTable"/> , it generates artificial names for the
 subsequent columns, using the pattern "columnname_1", "columnname_2",
 "columnname_3", and so on. Empty column names are added to the <see cref="System.Data.DataTable"/>, using
 an empty string for the first column, followed by "_1", "_2", "_3", and so on
 for the subsequent empty columns.</para>
			<note type="note">
    When handling batch SQL statements that
    return multiple results, the implementation of <see cref="System.Data.IDataAdapter.Fill"/>
    and <see cref="System.Data.IDataAdapter.FillSchema"/> for the OLE
    DB managed provider retrieves schema information for only the first result.
 </note>
			<note type="inheritinfo">
    When
    overriding <see cref="System.Data.IDataAdapter.Fill"/> in a derived class, be sure to call the base
    class's <see cref="System.Data.IDataAdapter.Fill"/> method.
 </note>
		</remarks>

	</doc>
	<doc for="DataAdapter.IDataAdapter.GetFillParameters">
		<summary>
			<para>Gets an array of <see cref="System.Data.IDataParameter"/> objects used to fill
    the <see cref="System.Data.DataSet"/> with records from the data source.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.Data.IDataParameter"/> objects.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
       When
       overriding <see cref="System.Data.IDataAdapter.GetFillParameters"/> in a derived class, be sure to call the base
       class's <see cref="System.Data.IDataAdapter.GetFillParameters"/> method.
    </note>
		</remarks>

	</doc>
	<doc for="DataAdapter.IDataAdapter.Update">
		<summary>
			<para>Changes the data in the data source to match the data in
       the <see cref="System.Data.DataSet"/>
       .</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> to update the data source with.</param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<remarks>
			<para>Note that the rows are updated in data source based on
       the order of the indexes set up in the <see cref="System.Data.DataSet"/>.</para>
			<para> If INSERT, DELETE, or UPDATE statements have not been
       specified, this method will invoke the method used to generate these commands
       needed to reconcile changes in the <see cref="System.Data.DataSet"/> with the data source. For more information, see the
       discussion of <see topic="cpconAuto-GeneratedCommands"/> .</para>
			<para>This method assumes that a mapping named "Table" exists within the <see cref="System.Data.IDataAdapter.TableMappings"/> collection, otherwise an exception
    is generated.</para>
			<para>This method retrieves rows from the table listed
    in the first mapping before running an update. The adapter clones the
    INSERT, UPDATE, or DELETE statement appropriate for the row. Then the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised, allowing
    the user to inspect the <see cref="System.Data.DataSet"/>
    row, modify the cloned command, or cancel the default processing. The
    cloned command is then executed against the data source. If the
    cloned command is configured incorrectly, an error is raised. The data set command then refreshes the
    row according to <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property of the command. Any
    additional rows returned will be ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
 the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
 command. When the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event returns, the data
 set command releases the cloned copy of the command (Any changes made to it
 between the events are lost.). After a row updates successfully, the changes to
 that row are accepted. The connection object associated with the SELECT statement
 must be valid, but it does not need to open. If the connection is closed before <see cref="System.Data.IDataAdapter.Update"/> is called, it is opened
 to retrieve data, then closed. If the connection is open before <see cref="System.Data.IDataAdapter.Update"/> is called, it is left
 open.</para>
			<para>When using <see cref="System.Data.IDataAdapter.Update"/>, there are two events that
 occur per data row updated. The order of execution is as follows:</para>
			<list type="number">
				<item>
					<term>
       The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>
       The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>
       The command executes.</term>
				</item>
				<item>
					<term>
       If the command is set to <see langword="FirstReturnedRecord"/>, then the
       first returned result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>
       If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>
       The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<note type="inheritinfo">
    When
    overriding <see cref="System.Data.IDataAdapter.Update"/> in a derived class, be sure to call the base
    class's <see cref="System.Data.IDataAdapter.Update"/> method.
 </note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/> , to <see cref="System.Data.IDataAdapter.Update"/> the data source. This
    example assumes that you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DataAdapter.IDataAdapter.Update Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconAuto-GeneratedCommands"/>
		<seealso topic="cpconWorkingWithDataTable"/>
	</doc>
	<doc for="DataAdapter.MissingMappingAction">
		<summary>
			<para>Determines the 
      action to take when incoming data does not have a matching table or
      column.
			</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.MissingMappingAction"/> values. The
   default is <see langword="Passthrough"/>
   .</para>
		</value>
		<exception cref="System.ArgumentException">The value set is not one of the <see cref="System.Data.MissingMappingAction"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Data.Common.DataAdapter.TableMappings"/> property provides the master mapping
   between the returned records and the <see cref="System.Data.DataSet"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of
   its properties.</para>
			<codelink SampleID="Classic WebData DataAdapter.MissingMappingAction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Common.DataAdapter.MissingSchemaAction"/>
	</doc><doc for="DataAdapter.MissingSchemaAction">
		<summary>
			<para>Determines the 
      action to take when existing <see cref="System.Data.DataSet"/> schema does not match incoming
      data.
			</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.MissingSchemaAction"/> values. The default is
<see langword="Add"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The value set is not one of the <see cref="System.Data.MissingSchemaAction"/> values.</exception>
		<example>
			<para>The following example creates a derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData DataAdapter.MissingMappingAction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Common.DataAdapter.MissingMappingAction"/>
	</doc><doc for="DataAdapter.CloneInternals">
		<summary>
			<para>Creates a copy of this instance of <see cref="System.Data.Common.DataAdapter"/>.</para>
		</summary>
		<returns>
			<para>The cloned instance of <see cref="System.Data.Common.DataAdapter"/> .</para>
		</returns>
		<remarks>
			<para>All the commands, the <see cref="System.Data.Common.DataAdapter.TableMappings"/>, The <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/>, and the <see cref="System.Data.Common.DataAdapter.MissingMappingAction"/> are cloned. However, the connections for
   the commands are not copied, but shared. Thus, the cloned <see cref="System.Data.Common.DataAdapter"/>
   can be used against the
   same connection as the original.</para>
			<note type="inheritinfo">
   When
   overriding <see cref="System.Data.Common.DataAdapter.CloneInternals"/> in a derived class, be sure to call the base
   class's <see cref="System.Data.Common.DataAdapter.CloneInternals"/> method.
   
</note>
		</remarks>

	</doc><doc for="DataAdapter.CreateTableMappings">
		<summary>
			<para>Creates a new <see cref="System.Data.Common.DataTableMappingCollection"/> .</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.Common.DataTableMappingCollection"/> .</para>
		</returns>
	</doc><doc for="DataAdapter.GetFillParameters">
		<summary>
			<para>Gets the parameters set by the user when executing an SQL SELECT statement.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.Data.IDataParameter"/> objects that contains the parameters set
   by the user.</para>
		</returns>
	</doc><doc for="DataAdapter.ShouldSerializeTableMappings">
		<summary>
			<para>Determines whether one or more <see cref="System.Data.Common.DataTableMapping"/> objects exist and they should be persisted.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if one or more <see cref="System.Data.Common.DataTableMapping"/> objects exist; otherwise 
<see langword="false"/> .</para>
		</returns>
	</doc><doc for="DataAdapter.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.Common.DataAdapter"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.Common.DataAdapter"/> and optionally releases the managed 
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method. 
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.Data.Common.DataAdapter"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
	</doc><doc for="DataAdapter.IDataAdapter.TableMappings">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataAdapter.AcceptChangesDuringFill">
		<summary>
			<para>Gets or sets a value indicating whether <see cref="System.Data.DataRow.AcceptChanges"/>
is called on a <see cref="System.Data.DataRow"/> after it is added to the <see cref="System.Data.DataTable"/> during any of the
<see langword="Fill"/> operations.</para>
		</summary>
		<value>
			<para><see langword="true"/> if <see cref="System.Data.DataRow.AcceptChanges"/> is called on the <see cref="System.Data.DataRow"/>; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>If false, <see cref="System.Data.DataRow.AcceptChanges"/> is not called, and the newly added rows are
   treated as inserted rows.</para>
		</remarks>
	</doc>
	<doc for="DataAdapter.DataAdapter">
		<overload>
			<para>Initializes a new instance of a DataAdapter class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of a DataAdapter class.</para>
		</summary>
		<remarks>
			<para>When an instance of <see cref="System.Data.Common.DataAdapter"/> is created, the
   following read/write
   properties are set to the following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.TableMappings"/></term>
					<description>An array of <see cref="System.Data.Common.DataAdapter.TableMappings"/> objects.</description>
				</item>
			</list>
			<para>You can change the value of any of these properties
   through a separate call to the property.</para>
		</remarks>
	</doc>
	<doc for="DataAdapter.ContinueUpdateOnError">
		<summary>
			<para> Gets or sets a value
      that specifies whether to generate an exception when an error is encountered during a row update.</para>
		</summary>
		<value>
			<para><see langword="true"/> to continue the update without
   generating an exception; otherwise <see langword="false"/>. The default is
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>If <see langword="ContinueUpdateOnError"/> is set to
<see langword="true"/> , no exception is thrown when an error occurs 
   during the update of a row. The update of the row is skipped and the error information is placed in the
<see cref="System.Data.DataRow.RowError"/> property of the row in error. The
<see cref="System.Data.Common.DataAdapter"/> continues to update subsequent rows.</para>
			<para>If <see langword="ContinueUpdateOnError"/>is set to <see langword="false"/>, an exception is thrown when an
error occurs during the update of a row.</para>
		</remarks>
	</doc>
	<doc for="DataAdapter.TableMappings">
		<summary>
			<para>Gets a collection that provides the master mapping between
      a source table and a <see cref="System.Data.DataTable"/>
      .</para>
		</summary>
		<value>
			<para>A collection that provides the master mapping between the returned records
      and the <see cref="System.Data.DataSet"/>. The default value is an empty collection.</para>
		</value>
		<remarks>
			<para>When reconciling changes,
      the <see cref="System.Data.Common.DataAdapter"/> uses
      the <see cref="System.Data.Common.DataTableMappingCollection"/> collection to
      associate the column names used by the data source with the column names used by
      the <see cref="System.Data.DataSet"/>.</para>
		</remarks>
		<example>
			<para>The following example uses a derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/>, to add <see cref="System.Data.Common.DataTableMapping"/> objects to its <see cref="System.Data.Common.DataAdapter.TableMappings"/>
collection and display a list of those mapped source tables. This example
assumes that an <see cref="System.Data.OleDb.OleDbDataAdapter"/> has already been
created.</para>
			<codelink SampleID="Classic WebData DataAdapter.TableMappings Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DataAdapter.FillSchema">
		<summary>
			<para>Adds a <see cref="System.Data.DataTable"/> named "Table" to the specified <see cref="System.Data.DataSet"/> and configures the schema to match that in the data source based on the specified <see cref="System.Data.SchemaType"/>.</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> to be filled with the schema from the data source.</param>
		<param name="schemaType">One of the<see cref="System.Data.SchemaType"/> values.</param>
		<returns>
			<para> A <see cref="System.Data.DataTable"/>
object that contains schema information returned from the data
source.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DataAdapter.FillSchema"/> method retrieves the schema from
   the data source using the <see cref="System.Data.IDbDataAdapter.SelectCommand"/> . The connection object associated
   with the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
   must be valid, but it does
   not need to be open. If the connection is closed before <see cref="System.Data.Common.DataAdapter.FillSchema"/> is called, it is opened to retrieve
   data, then closed. If the connection is open before <see cref="System.Data.Common.DataAdapter.FillSchema"/> is called, it remains open.</para>
			<para>A <see cref="System.Data.Common.DataAdapter.FillSchema"/> operation adds a <see cref="System.Data.DataTable"/> to the destination
<see cref="System.Data.DataSet"/>. It 
then adds columns to the <see cref="System.Data.DataColumnCollection"/> of the <see cref="System.Data.DataTable"/>, and configures the following <see cref="System.Data.DataColumn"/> properties if they exist at the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Data.DataColumn.AllowDBNull"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.AutoIncrement"/> . You must set <see cref="System.Data.DataColumn.AutoIncrementStep"/> and <see cref="System.Data.DataColumn.AutoIncrementSeed"/> 
   separately.</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.MaxLength"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.ReadOnly"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.Unique"/></term>
				</item>
			</list>
			<para><see cref="System.Data.Common.DataAdapter.FillSchema"/> also configures the <see cref="System.Data.DataTable.PrimaryKey"/> and <see cref="System.Data.DataTable.Constraints"/> properties
according to the following rules:</para>
			<list type="bullet"><item>
					<term>
      If one or more primary key columns are returned by
      the<see cref="System.Data.IDbDataAdapter.SelectCommand"/>, they
      are used as the primary key columns for the <see cref="System.Data.DataTable"/>.</term>
				</item>
				<item>
					<term>
      If no primary key columns are returned
      but unique columns are, the unique columns are used as the primary key if, and
      only if, all the unique columns are nonnullable. If any of the columns are nullable,
      a <see cref="System.Data.UniqueConstraint"/> is added to the
   <see cref="System.Data.ConstraintCollection"/> , but the <see cref="System.Data.DataTable.PrimaryKey"/> property is 
      not set.</term>
				</item>
				<item>
					<term>
      If both primary key columns and unique columns are
      returned, the primary key columns are used as the primary key columns for the
   <see cref="System.Data.DataTable"/>.</term>
				</item>
			</list>
			<para>Note that primary keys and unique constraints are added
   to the <see cref="System.Data.ConstraintCollection"/> according to the
   preceding rules, but other constraint types are not added.</para>
			<para>If the <see cref="System.Data.Common.DataAdapter"/> encounters duplicate columns while populating a
<see cref="System.Data.DataTable"/>, it generates names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/>each result set is placed in a separate table.
Additional result sets are named by appending integral values to the specified
table name (for example, "Table", "Table1", "Table2", and so on.). Applications
should use caution when using column and table names to ensure that conflicts
with these naming patterns does not occur.</para>
			<para><see cref="System.Data.Common.DataAdapter.FillSchema"/> does not return any rows. Use the <see cref="System.Data.Common.DataAdapter.Fill"/> method
to add rows to
a <see cref="System.Data.DataTable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
		</remarks>
		<seealso cref="System.Data.Common.DataAdapter.Fill"/>
	</doc>
	<doc for="DataAdapter.DataAdapter1">
		<summary>
			<para>Initializes a new instance of a
      <see langword="DataAdapter"/> class from an existing object of the same type.</para>
		</summary>
		<param name="adapter">A <see langword="DataAdapter"/> object used to create the new <see langword="DataAdapter"/> .</param>
		<remarks>
			<para>This overload of the <see cref="System.Data.Common.DataAdapter"/> constructor is designed for use by a
   .NET Framework data provider when implementing a similar constructor for
   use in a clone implementation. </para>
		</remarks>
	</doc>
	<doc for="DataAdapter.Fill">
		<summary>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/> name, and creates
   a <see cref="System.Data.DataTable"/> named "Table".</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.Common.DataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.Common.DataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.Common.DataAdapter.Fill"/>
operation then adds the rows to destination <see cref="System.Data.DataTable"/> objects in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> objects if they do not already exist. When creating
<see cref="System.Data.DataTable"/> objects, the <see cref="System.Data.Common.DataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<para> If the data adapter encounters duplicate columns while populating
   a <see cref="System.Data.DataTable"/>, it generates
   names for the subsequent columns, using the pattern "columnname1",
   "columnname2", "columnname3", and so on. If the incoming data contains unnamed columns, they are placed in
   the <see cref="System.Data.DataSet"/>according to the pattern "Column1", "Column2", and so on. When
   multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a separate table.
   Additional result sets are named by appending integral values to the specified
   table name (for example, "Table", "Table1", "Table2", and so on). Applications
   should use caution when using column and table names to ensure that conflicts with these
   naming patterns do not occur.</para>
			<para> When the SELECT statement used to populate the <see cref="System.Data.DataSet"/> returns
multiple results, such as a batch SQL statements, if one of the results contains
an error, all subsequent results are skipped and not added to the <see cref="System.Data.DataSet"/>.</para>
			<para> You can use the <see cref="System.Data.Common.DataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
		</remarks>
		<seealso cref="System.Data.Common.DataAdapter.FillSchema"/>
	</doc>
	<doc for="DataAdapter.Update">
		<summary>
			<para> Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row
      in the specified <see cref="System.Data.DataSet"/> from a <see cref="System.Data.DataTable"/> named "Table".</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> used to update the data source.</param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.SystemException"><para>A source table could not be found.</para></exception>
		<exception cref="System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
		<remarks>
			<para> When an application
      calls the <see cref="System.Data.Common.DataAdapter.Update"/>
      method, the <see cref="System.Data.Common.DataAdapter"/>
      
      examines the <see cref="System.Data.DataRow.RowState"/> property, and executes the
      required INSERT, UPDATE, or DELETE statements iteratively for each row, based
      on the order of the indexes configured in the <see cref="System.Data.DataSet"/> .
      For example, <see cref="System.Data.Common.DataAdapter.Update"/>
      might execute a DELETE statement, followed by an INSERT
      statement, and then another
      DELETE statement, due to the ordering of the rows in the <see cref="System.Data.DataTable"/>.</para>
			<para>It should be noted that these statements are not performed as a batch process;
      each row is updated individually.
      An application can call the <see cref="System.Data.DataSet.GetChanges"/> method in
      situations where you must control the sequence of statement types (for example,
      INSERTs before UPDATEs). For more information, see
   <see topic="cpconUpdatingDatabaseWithDataAdapterDataSet"/>.</para>
			<para> If INSERT, UPDATE, or DELETE statements have not been
      specified, the <see cref="System.Data.Common.DataAdapter.Update"/>
      method generates an exception. However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
      or <see cref="System.Data.OleDb.OleDbCommandBuilder"/> object to
      automatically generate SQL statements for single-table updates if you set the
   <see langword="SelectCommand "/>property of a .NET Framework data
      provider. Then, any
      additional SQL statements that you do not set are generated by
      the CommandBuilder. This generation
      logic requires key column information to be present in the <see cref="System.Data.DataSet"/>. For
      more information see <see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>The <see cref="System.Data.Common.DataAdapter.Update"/>
method retrieves rows from the table listed in
the first mapping before performing an update. The <see cref="System.Data.Common.DataAdapter.Update"/> then refreshes the row using the
value of the <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property. Any additional rows returned are ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
command. After a row updates successfully, the changes to that row are
accepted.</para>
			<para>When using <see cref="System.Data.Common.DataAdapter.Update"/>
, the order of
execution is as follows:</para>
			<list type="number"><item>
					<term>
      The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>
      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>
      The command executes.</term>
				</item>
				<item>
					<term>
      If the command is set to
   <see langword="FirstReturnedRecord"/>
   , then the first returned
   result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>
      If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>
      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<para>Each command associated with
   
   the <see cref="System.Data.Common.DataAdapter"/> usually has a
   parameters collection associated with it. Parameters are mapped to the current
   row through the <see langword="SourceColumn "/>and <see langword="SourceVersion "/>properties of a .NET data provider's <see langword="Parameter "/>class.
<see langword="SourceColumn "/>refers to a <see cref="System.Data.DataTable"/> column that
   the <see cref="System.Data.Common.DataAdapter"/> references to obtain parameter values for the current row.</para>
			<para><see langword="SourceColumn "/>refers to the unmapped column name before any table mappings
have been applied. If <see langword="SourceColumn "/>refers to a nonexistent column, the action
taken depends on one of the following <see cref="System.Data.MissingMappingAction"/> values.</para>
			<list type="table">
				<listheader>
					<term>Enumeration Value</term>
					<description>Action Taken</description>
				</listheader>
				<item>
					<term>
						<see langword="MissingMappingAction.Passthrough"/></term>
					<description>Use
         the source column names and table names in the <see cref="System.Data.DataSet"/>
         if no mapping
         is present.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Ignore"/></term>
					<description>A <see cref="System.SystemException"/> is generated. When the mappings are
      explicitly set, a missing mapping for an input parameter is usually the
      result of an error.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Error"/></term>
					<description>A <see cref="System.SystemException"/> is generated.</description>
				</item>
			</list>
			<para>The <see langword="SourceColumn "/>property is also used to map the value for
output or input/output parameters back to the <see langword="DataSet"/>. An
exception is generated if it refers to a nonexistent column.</para>
			<para>The <see langword="SourceVersion "/>property of a .NET data provider's
<see langword="Parameter "/>class determines whether to use the 
<SpecialLocalizableItem kind="UIElement">Original</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Current</SpecialLocalizableItem>, or <SpecialLocalizableItem kind="UIElement">Proposed</SpecialLocalizableItem> 
version of the column value. This capability is often used to include
original values in the WHERE clause of an UPDATE statement to check for
optimistic concurrency violations.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/>, to <see cref="System.Data.Common.DataAdapter.Update"/> the data source.</para>
			<codelink SampleID="Classic WebData DataAdapter.IDataAdapter.Update Example" SnippetID="1"/>
		</example>
	</doc><doc for="DataAdapter">
		<summary>
			<para>Represents a set of data commands and a database connection that are used to
      fill the <see cref="System.Data.DataSet"/>
      and update the data source.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.Common.DataAdapter"/>
serves as a bridge between a <see cref="System.Data.DataSet"/> and a data source for retrieving and saving data. The
<see cref="System.Data.Common.DataAdapter"/> provides this bridge by mapping <see cref="System.Data.Common.DataAdapter.Fill"/>, which changes the data in the <see cref="System.Data.DataSet"/> to match
the data in the data source, and <see cref="System.Data.IDataAdapter.Update"/>, which changes the data
in the data source to match the data in the <see cref="System.Data.DataSet"/>.</para>
			<para> If you are connecting to a Microsoft SQL Server database,
   you can increase overall performance by using the <see cref="System.Data.SqlClient.SqlDataAdapter"/> along with its associated <see cref="System.Data.SqlClient.SqlCommand"/> and
<see cref="System.Data.SqlClient.SqlConnection"/> objects. For OLE DB-supported data sources, use the <see cref="System.Data.Common.DataAdapter"/> with its associated <see cref="System.Data.OleDb.OleDbCommand"/> and
<see cref="System.Data.OleDb.OleDbConnection"/> objects. For ODBC-supported data sources, use the <see cref="System.Data.Common.DataAdapter"/> with its associated <see cref="System.Data.Odbc.OdbcCommand"/> and
<see cref="System.Data.Odbc.OdbcConnection"/> objects. For 
   Oracle databases, use the <see cref="System.Data.Common.DataAdapter"/> with its associated <see cref="System.Data.OracleClient.OracleCommand"/> and <see cref="System.Data.OracleClient.OracleConnection"/> objects.</para>
			<para>When an instance of <see cref="System.Data.Common.DataAdapter"/> is created, the read/write properties are
set to initial values. For a list of these values, see the <see cref="System.Data.Common.DataAdapter"/> constructor.</para>
		</remarks>
	</doc></docs>
