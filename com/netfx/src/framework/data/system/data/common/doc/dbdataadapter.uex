<docs>
	<doc for="DbDataAdapter.DeleteCommand">
		<summary>
			<para>Gets or sets a command for deleting records from the data set.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.IDbCommand"/> used during <see cref="System.Data.IDataAdapter.Update"/> to delete
    records in the data source for deleted rows in the data set.</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/>, if this property is not
    set and primary key information is present in the <see cref="System.Data.DataSet"/>
    , the <see cref="System.Data.IDbDataAdapter.DeleteCommand"/>
    is automatically generated.</para>
		</remarks>
		<example>
			<para>The following example creates the derived class <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.DeleteCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DbDataAdapter.InsertCommand">
		<summary>
			<para>Gets or sets a command used to insert new records into the data source.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.IDbCommand"/> used during <see cref="System.Data.IDataAdapter.Update"/> to insert records in the data source for new rows in the
    data set.</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/>, if this property is not
    set and primary key information is present in the <see cref="System.Data.DataSet"/>
    , the <see cref="System.Data.IDbDataAdapter.InsertCommand"/>
    will be automatically generated.</para>
		</remarks>
		<example>
			<para>The following example creates the derived class <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.InsertCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DbDataAdapter.SelectCommand">
		<summary>
			<para>Gets or
       sets a command used to select records in the data source.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.IDbCommand"/> that is used during <see cref="System.Data.IDataAdapter.Update"/>
 to select records from data source for placement in the data set.</para>
		</value>
		<example>
			<para>The following example creates the derived class <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.SelectCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DbDataAdapter.UpdateCommand">
		<summary>
			<para>Gets
       or sets a command used to update records in the data source.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.IDbCommand"/> used during <see cref="System.Data.IDataAdapter.Update"/>
 to update records in the data source for modified rows in the data set.</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/>, if this property is not
    set and primary key information is present in the <see cref="System.Data.DataSet"/>
    , the <see cref="System.Data.IDbDataAdapter.UpdateCommand"/> will be automatically generated.</para>
		</remarks>
		<example>
			<para>The following example creates the derived class <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.UpdateCommand Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DbDataAdapter.OnFillError">
		<summary>
			<para>Raises the <see cref="System.Data.Common.DbDataAdapter.FillError"/> event.</para>
		</summary>
		<param name="value">A <see cref="System.Data.FillErrorEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
      .
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.Common.DbDataAdapter.OnFillError"/> in a derived class, be sure
      to call the base class's <see cref="System.Data.Common.DbDataAdapter.OnFillError"/> method.
      
   </note>
		</remarks>
	</doc><doc for="DbDataAdapter.FillError">
		<summary>
			<para>Returned when an error occurs during a fill operation.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.FillError"/> event allows a user to determine
   whether or not the fill operation should continue after the error occurs.
   Examples of when the <see cref="System.Data.Common.DbDataAdapter.FillError"/> event might occur are:
   </para>
			<list type="bullet"><item>
					<term>
      
      The data being added
      
      to a <see cref="System.Data.DataSet"/> cannot be converted to a common language runtime
      type without losing precision.</term>
				</item>
				<item>
					<term>
      
      The row being added contains data that violates a
   <see cref="System.Data.Constraint"/> that must be enforced on a <see cref="System.Data.DataColumn"/>
   
   in the <see cref="System.Data.DataSet"/>.</term>
				</item>
			</list>
			<para>An <see cref="System.InvalidCastException"/> exception is generated if an
application does not declare a function to handle the <see cref="System.Data.Common.DbDataAdapter.FillError"/> event.</para>
			<note type="note">
   The <see cref="System.Data.Common.DbDataAdapter.FillError"/> event is not returned if the
   source of the error is generated at the data source.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to catch and 
      handle a <see cref="System.Data.Common.DbDataAdapter.FillError"/>
      event. The examples assumes that you have created a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.FillError Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.GetFillParameters">
		<summary>
			<para>Gets the parameters set by the user when executing an SQL SELECT statement.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.Data.IDataParameter"/> objects that contains the parameters set
   by the user.</para>
		</returns>
	</doc><doc for="DbDataAdapter.CreateRowUpdatedEvent">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> class.</para>
		</summary>
		<param name="dataRow">The <see cref="System.Data.DataRow"/> used to update the data source.</param>
		<param name="command">The <see cref="System.Data.IDbCommand"/> executed during the <see cref="System.Data.IDataAdapter.Update"/>.</param>
		<param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
		<param name="tableMapping">A <see cref="System.Data.Common.DataTableMapping"/> object.</param>
		<returns>
			<para>A new instance of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> class.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
 When overridding <see cref="System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent"/> in a derived class, be sure to call
 the base class's <see cref="System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent"/> method.
 
 </note>
		</remarks>
	</doc><doc for="DbDataAdapter.CreateRowUpdatingEvent">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Common.RowUpdatingEventArgs"/> class.</para>
		</summary>
		<param name="dataRow">The <see cref="System.Data.DataRow"/> that updates the data source.</param>
		<param name="command">The <see cref="System.Data.IDbCommand"/> to execute during the <see cref="System.Data.IDataAdapter.Update"/>.</param>
		<param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement .</param>
		<param name="tableMapping">A <see cref="System.Data.Common.DataTableMapping"/> object.</param>
		<returns>
			<para>A new instance of the <see cref="System.Data.Common.RowUpdatingEventArgs"/> class.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
 When
 overridding <see cref="System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent"/> in a derived class, be sure to call
 the base class's <see cref="System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent"/> method.
 
 </note>
		</remarks>
	</doc><doc for="DbDataAdapter.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DbDataAdapter.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.Common.DbDataAdapter"/> and optionally 
   releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
	</doc><doc for="DbDataAdapter.DefaultSourceTableName">
		<summary>
			<para>The default name used by the <see cref="System.Data.Common.DataAdapter"/> object for table mappings.</para>
		</summary>
		<remarks>
			<para>The default name used by the <see cref="System.Data.Common.DataAdapter"/> object for table mappings is "Table".</para>
			<para><see cref="System.Data.Common.DbDataAdapter.DefaultSourceTableName"/> is when an application
adds a table mapping to be used with <see cref="System.Data.Common.DbDataAdapter.Fill"/>, but does not
specify a <see cref="System.Data.DataTable"/> name.</para>
		</remarks>
	</doc>
	<doc for="DbDataAdapter.DbDataAdapter">
		<overload>
			<para>Initializes a new instance of a DataAdapter class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of a DataAdapter class.</para>
		</summary>
		<remarks>
			<para>When you create an instance of <see cref="System.Data.Common.DbDataAdapter"/>, the following read/write properties
   are set to the
   following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.IDbDataAdapter.SelectCommand"/></term>
					<description>A
         new <see cref="System.Data.IDbCommand"/>.</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.IDbDataAdapter.InsertCommand"/></term>
					<description>A new <see cref="System.Data.IDbCommand"/>.</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.IDbDataAdapter.DeleteCommand"/></term>
					<description>A new <see cref="System.Data.IDbCommand"/>.</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.IDbDataAdapter.UpdateCommand"/></term>
					<description>A new <see cref="System.Data.IDbCommand"/>.</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
	</doc>
	<doc for="DbDataAdapter.OnRowUpdated">
		<summary>
			<para> Raises the <see langword="RowUpdated"/> event of a .NET Framework data provider.</para>
		</summary>
		<param name="value">A <see cref="System.Data.Common.RowUpdatedEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
      .
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> in a derived class, be sure
      to call the base class's <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> method.
      
      </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/>
	</doc>
	<doc for="DbDataAdapter.FillSchema3">
		<summary>
			<para>Adds a <see cref="System.Data.DataTable"/> to the specified <see cref="System.Data.DataSet"/> and configures the schema to match that in the data source based on the specified <see cref="System.Data.SchemaType"/>.</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> to be filled with the schema from the data source.</param>
		<param name="schemaType">One of the<see cref="System.Data.SchemaType"/> values.</param>
		<param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
		<param name="srcTable">The name of the source table to use for table mapping.</param>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>An array of <see cref="System.Data.DataTable"/>
objects that contain schema information returned from the data
source.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> method retrieves the schema
   from the data source using the <see cref="System.Data.IDbDataAdapter.SelectCommand"/> . The connection object associated
   with the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
   must be valid, but it does
   not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is opened to retrieve
   data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it remains open.</para>
			<para>A <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> operation adds a <see cref="System.Data.DataTable"/> to the destination
<see cref="System.Data.DataSet"/>. It 
then adds columns to the <see cref="System.Data.DataColumnCollection"/> of the <see cref="System.Data.DataTable"/>, and configures the following <see cref="System.Data.DataColumn"/> properties if they exist at the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Data.DataColumn.AllowDBNull"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.AutoIncrement"/> . You must set <see cref="System.Data.DataColumn.AutoIncrementStep"/> and <see cref="System.Data.DataColumn.AutoIncrementSeed"/>
separately.</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.MaxLength"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.ReadOnly"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.Unique"/></term>
				</item>
			</list>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> also configures the <see cref="System.Data.DataTable.PrimaryKey"/> and <see cref="System.Data.DataTable.Constraints"/> properties
according to the following rules:</para>
			<list type="bullet"><item>
					<term>      If one or more primary key columns are returned by
      the<see cref="System.Data.IDbDataAdapter.SelectCommand"/>, they
      are used as the primary key columns for the <see cref="System.Data.DataTable"/>.</term>
				</item>
				<item>
					<term>      If no primary key columns are returned
      but unique columns are, the unique columns are used as the primary key if, and
      only if, all the unique columns are nonnullable. If any of the columns are nullable,
      a <see cref="System.Data.UniqueConstraint"/> is added to the
      <see cref="System.Data.ConstraintCollection"/> , but the <see cref="System.Data.DataTable.PrimaryKey"/> property is
      not set.</term>
				</item>
				<item>
					<term>      If both primary key columns and unique columns are
      returned, the primary key columns are used as the primary key columns for the
      <see cref="System.Data.DataTable"/> .</term>
				</item>
			</list>
			<para>Note that primary keys and unique constraints are added
   to the <see cref="System.Data.ConstraintCollection"/> according to the
   preceding rules, but other constraint types are not added.</para>
			<para>If the <see cref="System.Data.IDataAdapter"/> encounters duplicate columns while populating a
<see cref="System.Data.DataTable"/>, it generates names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a separate table.
Additional result sets are named by appending integral values to the specified
table name (for example, "Table", "Table1", "Table2", and so on.). Applications
should use caution when using column and table names to ensure that conflicts
with these naming patterns does not occur.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> does not return any rows. Use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method
to add rows to
a <see cref="System.Data.DataTable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<para>When using<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, the .NET Framework Data
Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user
should be aware of potential side effects, such as interference with the use of
SET FMTONLY ON statements. See SQL Server Books Online for more information.</para>
			<note type="inotes">
   This
   implementation of
   the <see cref="System.Data.IDataAdapter.FillSchema"/> method is protected and is
   designed for use by a .NET Framework data provider.
</note>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.Fill"/>
	</doc>
	<doc for="DbDataAdapter.FillSchema4">
		<summary>
			<para>Configures the schema of the specified <see cref="System.Data.DataTable"/> based on
   the specified <see cref="System.Data.SchemaType"/>, command string, and <see cref="System.Data.CommandBehavior"/>
   values.</para>
		</summary>
		<param name="dataTable">The <see cref="System.Data.DataTable"/> to be filled with the schema from the data source.</param>
		<param name="schemaType">One of the<see cref="System.Data.SchemaType"/> values.</param>
		<param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para> A of <see cref="System.Data.DataTable"/>
object that contains schema information returned from the data
source.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> method retrieves the schema
   from the data source using the <see cref="System.Data.IDbDataAdapter.SelectCommand"/> . The connection object associated
   with the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
   must be valid, but it does
   not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is opened to retrieve
   data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it remains open.</para>
			<para>A <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> operation adds a <see cref="System.Data.DataTable"/> to the destination
<see cref="System.Data.DataSet"/>. It 
then adds columns to the <see cref="System.Data.DataColumnCollection"/> of the <see cref="System.Data.DataTable"/>, and configures the following <see cref="System.Data.DataColumn"/> properties if they exist at the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Data.DataColumn.AllowDBNull"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.AutoIncrement"/> . You must set <see cref="System.Data.DataColumn.AutoIncrementStep"/> and <see cref="System.Data.DataColumn.AutoIncrementSeed"/>
separately.</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.MaxLength"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.ReadOnly"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.Unique"/></term>
				</item>
			</list>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> also configures the <see cref="System.Data.DataTable.PrimaryKey"/> and <see cref="System.Data.DataTable.Constraints"/> properties
according to the following rules:</para>
			<list type="bullet"><item>
					<term>      If one or more primary key columns are returned by
      the<see cref="System.Data.IDbDataAdapter.SelectCommand"/>, they
      are used as the primary key columns for the <see cref="System.Data.DataTable"/>.</term>
				</item>
				<item>
					<term>      If no primary key columns are returned
      but unique columns are, the unique columns are used as the primary key if, and
      only if, all the unique columns are nonnullable. If any of the columns are nullable,
      a <see cref="System.Data.UniqueConstraint"/> is added to the
      <see cref="System.Data.ConstraintCollection"/> , but the <see cref="System.Data.DataTable.PrimaryKey"/> property is
      not set.</term>
				</item>
				<item>
					<term>      If both primary key columns and unique columns are
      returned, the primary key columns are used as the primary key columns for the
      <see cref="System.Data.DataTable"/> .</term>
				</item>
			</list>
			<para>Note that primary keys and unique constraints are added
   to the <see cref="System.Data.ConstraintCollection"/> according to the
   preceding rules, but other constraint types are not added.</para>
			<para>If the <see cref="System.Data.IDataAdapter"/> encounters duplicate columns while populating a
<see cref="System.Data.DataTable"/>, it generates names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a separate table.
Additional result sets are named by appending integral values to the specified
table name (for example, "Table", "Table1", "Table2", and so on.). Applications
should use caution when using column and table names to ensure that conflicts
with these naming patterns does not occur.</para>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> does not return any rows. Use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method
to add rows to
a <see cref="System.Data.DataTable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<para>When using<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, the .NET Framework Data
Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user
should be aware of potential side effects, such as interference with the use of
SET FMTONLY ON statements. See SQL Server Books Online for more information.</para>
			<note type="inotes">
   This
   implementation of
   the <see cref="System.Data.IDataAdapter.FillSchema"/> method is protected and is
   designed for use by a .NET Framework data provider.
</note>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.Fill"/>
	</doc>
	<doc for="DbDataAdapter.DbDataAdapter1">
		<summary>
			<para>Initializes a new instance of a
      <see langword="DataAdapter"/> class from an existing object of the same type.</para>
		</summary>
		<param name="adapter">A <see langword="DataAdapter"/> object used to create the new <see langword="DataAdapter"/> .</param>
		<remarks>
			<para>This overload of the <see cref="System.Data.Common.DbDataAdapter"/> constructor is designed for use by a
   .NET Framework data provider when implementing a similar constructor for
   use in a clone implementation. </para>
		</remarks>
	</doc>
	<doc for="DbDataAdapter.OnRowUpdating">
		<summary>
			<para> Raises the <see langword="RowUpdating"/> event of a .NET Framework
   data provider.</para>
		</summary>
		<param name="value">An <see cref="System.Data.OleDb.OleDbRowUpdatingEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
      .
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> in a derived class, be sure
      to call the bases class's <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/>
	</doc>
	<doc for="DbDataAdapter.Fill6">
		<summary>
			<para>Adds or refreshes rows in a <see cref="System.Data.DataTable"/> to match those
   in the data source using the <see cref="System.Data.DataTable"/> name, the specified SQL
   SELECT statement, and <see cref="System.Data.CommandBehavior"/>.</para>
		</summary>
		<param name="dataTable">A <see cref="System.Data.DataTable"/> to fill with records and, if necessary, schema.</param>
		<param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataTable"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
operation then
adds the rows to the specified destination <see cref="System.Data.DataTable"/> object in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> object if it does not already exist. When creating a
<see cref="System.Data.DataTable"/> object, the <see cref="System.Data.Common.DbDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object
encounters duplicate columns while populating a <see cref="System.Data.DataTable"/>, it will generate names for the
subsequent columns, using the pattern "columnname1", "columnname2",
"columnname3", and so on. If the incoming data contains unnamed columns, they
are placed in the <see cref="System.Data.DataSet"/>according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/>each result
set is placed in a separate table. Additional result sets are named by appending
integral values to the specified table name (for example, "Table", "Table1",
"Table2", and so on). Applications should use caution when using column and
table names to ensure that conflicts with these naming patterns do not
occur.</para>
			<para> You can use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<note type="inotes">
   This
   overload of
   the <see cref="System.Data.IDataAdapter.Fill"/> method is protected and is
   designed for use by a .NET Framework data provider.
</note>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.FillSchema"/>
	</doc><doc for="DbDataAdapter.Fill5">
		<summary>
			<para>Adds or refreshes rows in a specified range in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/>, <see cref="System.Data.DataTable"/> , and <see cref="System.Data.IDataReader"/> names.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<param name="srcTable">The name of the <see cref="System.Data.DataTable"/> to use for table mapping. </param>
		<param name="dataReader">The name of the <see cref="System.Data.IDataReader"/>.</param>
		<param name="startRecord">The zero-based record number to start with.</param>
		<param name="maxRecords">The maximum number of records to retrieve.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The source table is invalid.</exception>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
operation then adds the rows to destination <see cref="System.Data.DataTable"/> objects in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> objects if they do not already exist. When creating
<see cref="System.Data.DataTable"/> objects, the <see cref="System.Data.Common.DbDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para> If the <see cref="System.Data.Common.DbDataAdapter"/> duplicate columns while populating
a <see cref="System.Data.DataTable"/>, it generates
names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/>according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a
separate table. Additional result sets are named by appending integral values to
the specified table name (for example, "Table", "Table1", "Table2", and so on).
Applications
should use caution when using column and table names to ensure that conflicts with these
naming patterns do not occur.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.Common.DbDataAdapter.Fill"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para> You can use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When handling batch SQL statements that
   return multiple results, the implementation of <see cref="System.Data.Common.DbDataAdapter.Fill"/>
   and <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>
   for a .NET Framework data provider retrieves schema information for only the first result.
   
</note>
			<note type="inotes">
   This
   overload of
   the <see cref="System.Data.IDataAdapter.Fill"/> method is protected and is
   designed for use by a .NET Framework data provider.
</note>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.FillSchema"/>
	</doc><doc for="DbDataAdapter.Fill7">
		<summary>
			<para>Adds or refreshes rows in a <see cref="System.Data.DataTable"/> to match those in
   the data source using the specified <see cref="System.Data.DataTable"/> and <see cref="System.Data.IDataReader"/>
   names.</para>
		</summary>
		<param name="dataTable">A <see cref="System.Data.DataTable"/> to fill with records and, if necessary, schema.</param>
		<param name="dataReader">The name of the <see cref="System.Data.IDataReader"/> .</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataTable"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
operation then
adds the rows to the specified destination <see cref="System.Data.DataTable"/> object in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> object if it does not already exist. When creating a
<see cref="System.Data.DataTable"/> object, the <see cref="System.Data.Common.DbDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object
encounters duplicate columns while populating a <see cref="System.Data.DataTable"/>, it will generate names for the
subsequent columns, using the pattern "columnname1", "columnname2",
"columnname3", and so on. If the incoming data contains unnamed columns, they
are placed in the <see cref="System.Data.DataSet"/>according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/>each result
set is placed in a separate table. Additional result sets are named by appending
integral values to the specified table name (for example, "Table", "Table1",
"Table2", and so on). Applications should use caution when using column and
table names to ensure that conflicts with these naming patterns do not
occur.</para>
			<para> You can use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<note type="inotes">
   This
   overload of
   the <see cref="System.Data.IDataAdapter.Fill"/> method is protected and is
   designed for use by a .NET Framework data provider.
</note>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.FillSchema"/>
	</doc><doc for="DbDataAdapter.FillSchema">
		<overload>
			<para>Adds a <see cref="System.Data.DataTable"/> to a <see cref="System.Data.DataSet"/> and configures the schema to match that in the data source.</para>
		</overload>
		<summary>
			<para>Configures the schema of the
      specified <see cref="System.Data.DataTable"/> based on the specified <see cref="System.Data.SchemaType"/>.</para>
		</summary>
		<param name="dataTable">The <see cref="System.Data.DataTable"/> to be filled with the schema from the data source.</param>
		<param name="schemaType">One of the<see cref="System.Data.SchemaType"/> values.</param>
		<returns>
			<para> A <see cref="System.Data.DataTable"/>
that contains schema information returned from the data
source.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> method retrieves the schema
   from the data source using the <see cref="System.Data.IDbDataAdapter.SelectCommand"/> . The connection object associated
   with the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
   must be valid, but it does
   not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is opened to retrieve
   data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it remains open.</para>
			<para>A <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> operation returns a <see cref="System.Data.DataTable"/>. It
then adds columns to the <see cref="System.Data.DataColumnCollection"/> of the <see cref="System.Data.DataTable"/>, and configures the following <see cref="System.Data.DataColumn"/> properties if they exist at the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Data.DataColumn.AllowDBNull"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.AutoIncrement"/> . You must set <see cref="System.Data.DataColumn.AutoIncrementStep"/> and <see cref="System.Data.DataColumn.AutoIncrementSeed"/> 
   separately.</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.MaxLength"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.ReadOnly"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.Unique"/></term>
				</item>
			</list>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> also configures the <see cref="System.Data.DataTable.PrimaryKey"/> and <see cref="System.Data.DataTable.Constraints"/> properties
according to the following rules:</para>
			<list type="bullet"><item>
					<term>
      If a <see cref="System.Data.DataTable.PrimaryKey"/> has already been defined for the
   <see langword="DataTable"/>, or the <see langword="DataTable"/>
   contains data, the <see langword="PrimaryKey"/> property will not be set.</term>
				</item>
				<item>
					<term>
      If one or more primary key columns are returned by
      the<see cref="System.Data.IDbDataAdapter.SelectCommand"/>, they are used as the primary key
      columns for the <see langword="DataTable"/>.</term>
				</item>
				<item>
					<term>
      If no primary key columns are returned
      but unique columns are, the unique columns are used as the primary key if, and
      only if, all the unique columns are nonnullable. If any of the columns are nullable,
      a <see cref="System.Data.UniqueConstraint"/> is added to the
   <see cref="System.Data.ConstraintCollection"/> , but
      the <see langword="PrimaryKey"/> property is not set.</term>
				</item>
				<item>
					<term>
      If both primary key columns and unique columns are
      returned, the primary key columns are used as the primary key columns for
      the <see langword="DataTable"/> .</term>
				</item>
			</list>
			<para>Note that primary keys and unique constraints are added
   to the <see cref="System.Data.ConstraintCollection"/> according to
   the preceding rules, but other constraint types are not added.
   This process may require several round-trips to the server.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> encounters duplicate columns while populating a
<see cref="System.Data.DataTable"/>, it generates names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a separate table.
Additional result sets are named by appending integral values to the specified
table name (for example, "Table", "Table1", "Table2", and so on.). Applications
should use caution when using column and table names to ensure that conflicts
with these naming patterns does not occur.</para>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> does not return any rows. Use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method
to add rows to
a <see cref="System.Data.DataTable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<para>When using<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, the .NET Framework Data
Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user
should be aware of potential side effects, such as interference with the use of
SET FMTONLY ON statements. See SQL Server Books Online for more information.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.SqlClient.SqlDataAdapter"/>, to fill a <see cref="System.Data.DataSet"/> with the schema, an array of <see cref="System.Data.DataTable"/> objects with data, and returns the <see cref="System.Data.SqlClient.SqlParameterCollection"/> collection to an array of <see cref="System.Data.IDataParameter"/> objects. This example assumes that you have created a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.FillSchema3" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Common.DbDataAdapter.Fill"/>
	</doc><doc for="DbDataAdapter.FillSchema1">
		<summary>
			<para>Adds a <see cref="System.Data.DataTable"/> named "Table" to the specified <see cref="System.Data.DataSet"/> and
   configures the schema to match that in the data source based on the specified
<see cref="System.Data.SchemaType"/>.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to insert the schema in.</param>
		<param name="schemaType">One of the <see cref="System.Data.SchemaType"/> values that specify how to insert the schema.</param>
		<returns>
			<para>A reference to a collection
      of <see cref="System.Data.DataTable"/>
      objects that were added to the <see cref="System.Data.DataSet"/>
      .</para>
		</returns>
		<remarks>
			<para>This method retrieves the schema information from the
      data source using the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
      .</para>
			<para>A <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> operation adds a <see cref="System.Data.DataTable"/> to the destination
<see cref="System.Data.DataSet"/>. It 
   then adds columns to the <see cref="System.Data.DataColumnCollection"/> of the <see cref="System.Data.DataTable"/>, and configures the following <see cref="System.Data.DataColumn"/> properties if they exist at the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Data.DataColumn.AllowDBNull"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.AutoIncrement"/> . You must set <see cref="System.Data.DataColumn.AutoIncrementStep"/> and <see cref="System.Data.DataColumn.AutoIncrementSeed"/> 
   separately.</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.MaxLength"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.ReadOnly"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.Unique"/></term>
				</item>
			</list>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> also configures the <see cref="System.Data.DataTable.PrimaryKey"/> and <see cref="System.Data.DataTable.Constraints"/> properties
according to the following rules:</para>
			<list type="bullet"><item>
					<term>
      If one or more primary key columns are returned by
      the<see cref="System.Data.IDbDataAdapter.SelectCommand"/>, they
      are used as the primary key columns for the <see cref="System.Data.DataTable"/>.</term>
				</item>
				<item>
					<term>
      If no primary key columns are returned
      but unique columns are, the unique columns are used as the primary key if, and
      only if, all the unique columns are nonnullable. If any of the columns are nullable,
      a <see cref="System.Data.UniqueConstraint"/> is added to the
   <see cref="System.Data.ConstraintCollection"/> , but the <see cref="System.Data.DataTable.PrimaryKey"/> property is 
      not set.</term>
				</item>
				<item>
					<term>
      If both primary key columns and unique columns are
      returned, the primary key columns are used as the primary key columns for the
   <see cref="System.Data.DataTable"/> .</term>
				</item>
			</list>
			<para>Note that primary keys and unique constraints are added
   to the <see cref="System.Data.ConstraintCollection"/> according to the
   preceding rules, but other constraint types are not added.</para>
			<list type="bullet"></list>
			<para> Primary key information is used
   during <see cref="System.Data.Common.DbDataAdapter.Fill"/> to find and replace any
   rows whose key columns match. If this is not the desired behavior,
   use <see cref="System.Data.Common.DbDataAdapter.Fill"/> without requesting schema
   information.</para>
			<para>If the <see cref="System.Data.IDataAdapter"/> encounters duplicate columns while populating a
<see cref="System.Data.DataTable"/>, it generates names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a separate table.
Additional result sets are named by appending integral values to the specified
table name (for example, "Table", "Table1", "Table2", and so on.). Applications
should use caution when using column and table names to ensure that conflicts
with these naming patterns does not occur.</para>
			<para>The <see cref="System.Data.IDbConnection"/> object associated with the select command
must be valid, but it does not need to open. If the <see cref="System.Data.IDbConnection"/> is closed before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is opened
to retrieve data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is left
open.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<para>When using<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, the .NET Framework Data
Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user
should be aware of potential side effects, such as interference with the use of
SET FMTONLY ON statements. See SQL Server Books Online for more information.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.SqlClient.SqlDataAdapter"/>, to fill a <see cref="System.Data.DataSet"/> with the schema, an array of <see cref="System.Data.DataTable"/> objects with data, and returns the <see cref="System.Data.SqlClient.SqlParameterCollection"/> collection to an array of <see cref="System.Data.IDataParameter"/> objects. This example assumes that you have created an <see cref="System.Data.SqlClient.SqlDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.FillSchema1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.FillSchema2">
		<summary>
			<para>Adds a <see cref="System.Data.DataTable"/> to the specified <see cref="System.Data.DataSet"/> and configures the schema to match that in the data source based upon
   the specified <see cref="System.Data.SchemaType"/> and <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to insert the schema in.</param>
		<param name="schemaType">One of the <see cref="System.Data.SchemaType"/> values that specify how to insert the schema.</param>
		<param name="srcTable">The name of the source table to use for table mapping.</param>
		<returns>
			<para>A reference to a collection of <see cref="System.Data.DataTable"/>
objects that were added to the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">A source table from which to get the schema could not be found .</exception>
		<remarks>
			<para>This method retrieves the schema information from the
      data source using the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
      .</para>
			<para>A <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> operation adds a <see cref="System.Data.DataTable"/> to the destination
<see cref="System.Data.DataSet"/>. It 
   then adds columns to the <see cref="System.Data.DataColumnCollection"/> of the <see cref="System.Data.DataTable"/>, and configures the following <see cref="System.Data.DataColumn"/> properties if they exist at the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Data.DataColumn.AllowDBNull"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.AutoIncrement"/> . You must set <see cref="System.Data.DataColumn.AutoIncrementStep"/> and <see cref="System.Data.DataColumn.AutoIncrementSeed"/>
separately.</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.MaxLength"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.ReadOnly"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataColumn.Unique"/></term>
				</item>
			</list>
			<para><see cref="System.Data.Common.DbDataAdapter.FillSchema"/> also configures the <see cref="System.Data.DataTable.PrimaryKey"/> and <see cref="System.Data.DataTable.Constraints"/> properties
according to the following rules:</para>
			<list type="bullet"><item>
					<term>      If one or more primary key columns are returned by
      the<see cref="System.Data.IDbDataAdapter.SelectCommand"/>, they
      are used as the primary key columns for the <see cref="System.Data.DataTable"/>.</term>
				</item>
				<item>
					<term>      If no primary key columns are returned
      but unique columns are, the unique columns are used as the primary key if, and
      only if, all the unique columns are nonnullable. If any of the columns are nullable,
      a <see cref="System.Data.UniqueConstraint"/> is added to the
      <see cref="System.Data.ConstraintCollection"/> , but the <see cref="System.Data.DataTable.PrimaryKey"/> property is
      not set.</term>
				</item>
				<item>
					<term>      If both primary key columns and unique columns are
      returned, the primary key columns are used as the primary key columns for the
      <see cref="System.Data.DataTable"/> .</term>
				</item>
			</list>
			<para>Note that primary keys and unique constraints are added
   to the <see cref="System.Data.ConstraintCollection"/> according to the
   preceding rules, but other constraint types are not added.</para>
			<para> Primary key information is used during
<see cref="System.Data.Common.DbDataAdapter.Fill"/> to find and replace any
   rows whose key columns match. If this is not the desired behavior, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> without requesting schema
   information.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> encounters duplicate columns while populating a
<see cref="System.Data.DataTable"/> , it generates names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a separate table.
Additional result sets are named by appending integral values to the specified
table name (for example, "Table", "Table1", "Table2", and so on.). Applications
should use caution when using column and table names to ensure that conflicts
with these naming patterns does not occur.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para>The <see cref="System.Data.IDbConnection"/> object
associated with the select command must be valid, but it does not need to open.
If the <see cref="System.Data.IDbConnection"/> is closed
before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is opened
to retrieve data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> is called, it is left
open.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<para>When using<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being
executed. The user should be aware of potential side effects, such as
interference with the use of SET FMTONLY ON statements. See SQL Server Books
Online for more information.</para>
			<para>
			</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.SqlClient.SqlDataAdapter"/>, to fill a <see cref="System.Data.DataSet"/> with the schema, an array of <see cref="System.Data.DataTable"/> objects with data, and returns the <see cref="System.Data.SqlClient.SqlParameterCollection"/> collection to an array of <see cref="System.Data.IDataParameter"/> objects. This example assumes that you have created an <see cref="System.Data.SqlClient.SqlDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.FillSchema2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.Update">
		<overload>
			<para> Calls the respective INSERT, UPDATE, or DELETE statements
      for each inserted, updated, or deleted row in the <see cref="System.Data.DataSet"/>
      .</para>
		</overload>
		<summary>
			<para> Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row
      in the specified <see cref="System.Data.DataSet"/>.</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> used to update the data source.</param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.SystemException"><para>A source table could not be found.</para></exception>
		<exception cref="System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
		<remarks>
			<para> When an application
      calls the <see cref="System.Data.Common.DbDataAdapter.Update"/>
      method, the <see cref="System.Data.Common.DbDataAdapter"/>
      
      examines the <see cref="System.Data.DataRow.RowState"/> property, and executes
      the required INSERT, UPDATE, or DELETE statements iteratively for each row, based
      on the order of the indexes configured in the <see cref="System.Data.DataSet"/> .
      For example, <see cref="System.Data.Common.DbDataAdapter.Update"/>
      might execute a DELETE statement, followed by an INSERT
      statement, and then another
      DELETE statement, due to the ordering of the rows in the <see cref="System.Data.DataTable"/>.</para>
			<para> It should be noted that these statements are not
      performed as a batch process; each row is updated individually.
      An application can call the <see cref="System.Data.DataSet.GetChanges"/> method in
      situations where you must control the sequence of statement types (for example,
      INSERTs before UPDATEs). For more information, see
   <see topic="cpconUpdatingDatabaseWithDataAdapterDataSet"/>.</para>
			<para> If INSERT, UPDATE, or DELETE statements have not been
      specified, the <see cref="System.Data.Common.DataAdapter.Update"/>
      method generates an exception. However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
      or <see cref="System.Data.OleDb.OleDbCommandBuilder"/> object to
      automatically generate SQL statements for single-table updates if you set the
   <see langword="SelectCommand "/>property of a .NET Framework data
      provider. Then, any
      additional SQL statements that you do not set are generated by
      the CommandBuilder. This generation
      logic requires key column information to be present in the <see cref="System.Data.DataSet"/>. For
      more information see <see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Update"/>
method retrieves rows from the table listed in
the first mapping before performing an update. The <see cref="System.Data.Common.DbDataAdapter.Update"/> then refreshes the row using the
value of the <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property. Any additional rows returned are ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
command. After a row updates successfully, the changes to that row are accepted.</para>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>
, the order of
execution is as follows:</para>
			<list type="number"><item>
					<term>
      The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>
      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>
      The command executes.</term>
				</item>
				<item>
					<term>
      If the command is set to
   <see langword="FirstReturnedRecord"/>
   , then the first returned
   result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>
      If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>
      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<para>Each command associated with
   
   the <see cref="System.Data.Common.DbDataAdapter"/> usually has a
   parameters collection associated with it. Parameters are mapped to the current
   row through the <see langword="SourceColumn "/>and <see langword="SourceVersion "/>properties of a .NET Framework data provider's <see langword="Parameter "/>class.
<see langword="SourceColumn "/>refers to a <see cref="System.Data.DataTable"/> column that
   the <see cref="System.Data.Common.DbDataAdapter"/> references to obtain parameter values for the current row.</para>
			<para><see langword="SourceColumn "/>refers to the unmapped column name before any table mappings
have been applied. If <see langword="SourceColumn "/>refers to a nonexistent column, the action
taken depends on one of the following <see cref="System.Data.MissingMappingAction"/> values.</para>
			<list type="table">
				<listheader>
					<term>Enumeration Value</term>
					<description>Action Taken</description>
				</listheader>
				<item>
					<term>
						<see langword="MissingMappingAction.Passthrough"/></term>
					<description>Use
         the source column names and table names in the <see cref="System.Data.DataSet"/>
         if no mapping
         is present.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Ignore"/></term>
					<description>A <see cref="System.SystemException"/> is generated. When the mappings are
      explicitly set, a missing mapping for an input parameter is usually the
      result of an error.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Error"/></term>
					<description>A <see cref="System.SystemException"/> is generated.</description>
				</item>
			</list>
			<para>The <see langword="SourceColumn "/>property is also used to map the value for
output or input/output parameters back to the <see langword="DataSet"/>. An
exception is generated if it refers to a nonexistent column.</para>
			<para>The <see langword="SourceVersion "/>property of a .NET Framework data provider's
<see langword="Parameter "/>class determines whether to use the 
<SpecialLocalizableItem kind="UIElement">Original</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Current</SpecialLocalizableItem>, or <SpecialLocalizableItem kind="UIElement">Proposed</SpecialLocalizableItem> 
version of the column value. This capability is often used to include
original values in the WHERE clause of an UPDATE statement to check for
optimistic concurrency violations.</para>
			<note type="note">
   If an
error occurs while updating a row, an exception is thrown and execution of
the update is discontinued. To continue the update operation without
generating exceptions when an error is encountered, set the
<see cref="System.Data.Common.DataAdapter.ContinueUpdateOnError"/> 
property to <see langword="true"/> before calling <see cref="System.Data.Common.DbDataAdapter.Update"/>. You may also
respond to errors on a per-row basis within the <see langword="RowUpdated"/> event of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> or
<see cref="System.Data.OleDb.OleDbDataAdapter"/>. To continue
the update operation without generating an exception within the <see langword="RowUpdated"/>
event, set the <see cref="System.Data.Common.RowUpdatedEventArgs.Status"/> property of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> to <see cref="System.Data.UpdateStatus.Continue"/>.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/>, to <see cref="System.Data.Common.DbDataAdapter.Update"/> the data source. This example assumes that
   you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.Update Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.Update1">
		<summary>
			<para> Calls the respective INSERT, UPDATE, or DELETE
      statements for each inserted, updated, or deleted row in the specified array of <see cref="System.Data.DataRow"/>
      objects.</para>
		</summary>
		<param name="dataRows">An array of <see cref="System.Data.DataRow"/> objects used to update the data source.</param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.DataSet"/> is invalid.</exception>
		<exception cref="System.InvalidOperationException"><para>The source table is invalid.</para></exception>
		<exception cref="System.SystemException"><para>No <see cref="System.Data.DataRow"/> exists to update.</para>
			<para>-or-</para>
			<para> No <see cref="System.Data.DataTable"/> exists to update. </para>
			<para>-or-</para>
			<para> No <see cref="System.Data.DataSet"/> exists to use as a source.</para></exception>
		<exception cref="System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
		<remarks>
			<para> When an application
      calls the <see cref="System.Data.Common.DbDataAdapter.Update"/>
      method, the <see cref="System.Data.Common.DbDataAdapter"/>
      
      examines the <see cref="System.Data.DataRow.RowState"/> property, and executes the
      required INSERT, UPDATE, or DELETE statements iteratively for each row, based
      on the order of the indexes configured in the <see cref="System.Data.DataSet"/> .
      For example, <see cref="System.Data.Common.DbDataAdapter.Update"/>
      might execute a DELETE statement, followed by an INSERT
      statement, and then another
      DELETE statement, due to the ordering of the rows in the <see cref="System.Data.DataTable"/>.</para>
			<para>It should be noted that these statements are not performed as a batch
      process; each row is updated individually.
      An application can call the <see cref="System.Data.DataSet.GetChanges"/> method in
      situations where you must control the sequence of statement types (for example,
      INSERTs before UPDATEs). For more information, see
      <see topic="cpconUpdatingDatabaseWithDataAdapterDataSet"/>.</para>
			<para> If INSERT, UPDATE, or DELETE statements have not been
      specified, the <see cref="System.Data.Common.DataAdapter.Update"/>
      method generates an exception. However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
      or <see cref="System.Data.OleDb.OleDbCommandBuilder"/> object to
      automatically generate SQL statements for single-table updates if you set the
      <see langword="SelectCommand "/>property of a .NET Framework data
      provider. Then, any
      additional SQL statements that you do not set are generated by
      the CommandBuilder. This generation
      logic requires key column information to be present in the <see cref="System.Data.DataSet"/>. For
      more information see <see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Update"/>
method retrieves rows from the table listed in
the first mapping before performing an update. The <see cref="System.Data.Common.DbDataAdapter.Update"/> then refreshes the row using the
value of the <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property. Any additional rows returned are ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
command. After a row updates successfully, the changes to that row are
accepted.</para>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>
, the order of
execution is as follows:</para>
			<list type="number"><item>
					<term>      The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>      The command executes.</term>
				</item>
				<item>
					<term>      If the command is set to
      <see langword="FirstReturnedRecord"/>
   , then the first returned
   result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<para>Each command associated with
   
   the <see cref="System.Data.Common.DbDataAdapter"/> usually has a
   parameters collection associated with it. Parameters are mapped to the current
   row through the <see langword="SourceColumn "/>and <see langword="SourceVersion "/>properties of a .NET Framework data provider's <see langword="Parameter "/>class.
<see langword="SourceColumn "/>refers to a <see cref="System.Data.DataTable"/> column that
   the <see cref="System.Data.Common.DbDataAdapter"/> references to obtain parameter values for the current row.</para>
			<para><see langword="SourceColumn "/>refers to the unmapped column name before any table mappings
have been applied. If <see langword="SourceColumn "/>refers to a nonexistent column, the action
taken depends on one of the following <see cref="System.Data.MissingMappingAction"/> values.</para>
			<list type="table">
				<listheader>
					<term>Enumeration Value</term>
					<description>Action Taken</description>
				</listheader>
				<item>
					<term>
						<see langword="MissingMappingAction.Passthrough"/></term>
					<description>Use
      the source column names and table names in the <see cref="System.Data.DataSet"/>
      if no mapping
      is present.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Ignore"/></term>
					<description>A <see cref="System.SystemException"/> is generated. When the mappings are
explicitly set, a missing mapping for an input parameter is usually the
result of an error.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Error"/></term>
					<description>A <see cref="System.SystemException"/> is generated.</description>
				</item>
			</list>
			<para>The <see langword="SourceColumn "/>property is also used to map the value for
output or input/output parameters back to the <see langword="DataSet"/>. An
exception is generated if it refers to a nonexistent column.</para>
			<para>The <see langword="SourceVersion "/>property of a .NET Framework data provider's
<see langword="Parameter "/>class determines whether to use the 
<SpecialLocalizableItem kind="UIElement">Original</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Current</SpecialLocalizableItem>, or <SpecialLocalizableItem kind="UIElement">Proposed</SpecialLocalizableItem> 
version of the column value. This capability is often used to include
original values in the WHERE clause of an UPDATE statement to check for
optimistic concurrency violations.</para>
			<note type="note">
   If an
error occurs while updating a row, an exception is thrown and execution of
the update is discontinued. To continue the update operation without
generating exceptions when an error is encountered, set the
<see cref="System.Data.Common.DataAdapter.ContinueUpdateOnError"/> 
property to <see langword="true"/> before calling <see cref="System.Data.Common.DbDataAdapter.Update"/>. You may also
respond to errors on a per-row basis within the <see langword="RowUpdated"/> event of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> or
<see cref="System.Data.OleDb.OleDbDataAdapter"/>. To continue
the update operation without generating an exception within the <see langword="RowUpdated"/>
event, set the <see cref="System.Data.Common.RowUpdatedEventArgs.Status"/> property of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> to <see cref="System.Data.UpdateStatus.Continue"/>.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/> , to <see cref="System.Data.Common.DbDataAdapter.Update"/> the data source. This example assumes that
   you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and an array of <see cref="System.Data.DataRow"/>objects.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.Update1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.Update2">
		<summary>
			<para> Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row
      in the specified <see cref="System.Data.DataTable"/>.</para>
		</summary>
		<param name="dataTable">The <see cref="System.Data.DataTable"/> used to update the data source.</param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.DataSet"/> is invalid.</exception>
		<exception cref="System.InvalidOperationException"><para>The source table is invalid.</para></exception>
		<exception cref="System.SystemException"><para>No <see cref="System.Data.DataRow"/> exists to update.</para>
			<para>-or-</para>
			<para> No <see cref="System.Data.DataTable"/> exists to update. </para>
			<para>-or-</para>
			<para> No <see cref="System.Data.DataSet"/> exists to use as a source.</para></exception>
		<exception cref="System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
		<remarks>
			<para> When an application
      calls the <see cref="System.Data.Common.DbDataAdapter.Update"/>
      method, the <see cref="System.Data.Common.DbDataAdapter"/>
      
      examines the <see cref="System.Data.DataRow.RowState"/> property, and executes
      the required INSERT, UPDATE, or DELETE statements iteratively for each row, based
      on the order of the indexes configured in the <see cref="System.Data.DataSet"/> .
      For example, <see cref="System.Data.Common.DbDataAdapter.Update"/>
      might execute a DELETE statement, followed by an INSERT
      statement, and then another
      DELETE statement, due to the ordering of the rows in the <see cref="System.Data.DataTable"/>.</para>
			<para>It should be noted that these statements are not performed as a batch
      process; each row is updated individually.
      An application can call the <see cref="System.Data.DataSet.GetChanges"/> method in
      situations where you must control the sequence of statement types (for example,
      INSERTs before UPDATEs). For more information, see
      <see topic="cpconUpdatingDatabaseWithDataAdapterDataSet"/>.</para>
			<para> If INSERT, UPDATE, or DELETE statements have not been
      specified, the <see cref="System.Data.Common.DataAdapter.Update"/>
      method generates an exception. However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
      or <see cref="System.Data.OleDb.OleDbCommandBuilder"/> object to
      automatically generate SQL statements for single-table updates if you set the
      <see langword="SelectCommand "/>property of a .NET Framework data
      provider. Then, any
      additional SQL statements that you do not set are generated by
      the CommandBuilder. This generation
      logic requires key column information to be present in the <see cref="System.Data.DataSet"/>. For
      more information see <see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Update"/>
method retrieves rows from the table listed in
the first mapping before performing an update. The <see cref="System.Data.Common.DbDataAdapter.Update"/> then refreshes the row using the
value of the <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property. Any additional rows returned are ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
command. After a row updates successfully, the changes to that row are
accepted.</para>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>
, the order of
execution is as follows:</para>
			<list type="number"><item>
					<term>      The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>      The command executes.</term>
				</item>
				<item>
					<term>      If the command is set to
      <see langword="FirstReturnedRecord"/>
   , then the first returned
   result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<para>Each command associated with
   
   the <see cref="System.Data.Common.DbDataAdapter"/> usually has a
   parameters collection associated with it. Parameters are mapped to the current
   row through the <see langword="SourceColumn "/>and <see langword="SourceVersion "/>properties of a .NET Framework data provider's <see langword="Parameter "/>class.
<see langword="SourceColumn "/>refers to a <see cref="System.Data.DataTable"/> column that
   the <see cref="System.Data.Common.DbDataAdapter"/> references to obtain parameter values for the current row.</para>
			<para><see langword="SourceColumn "/>refers to the unmapped column name before any table mappings
have been applied. If <see langword="SourceColumn "/>refers to a nonexistent column, the action
taken depends on one of the following <see cref="System.Data.MissingMappingAction"/> values.</para>
			<list type="table">
				<listheader>
					<term>Enumeration Value</term>
					<description>Action Taken</description>
				</listheader>
				<item>
					<term>
						<see langword="MissingMappingAction.Passthrough"/></term>
					<description>Use
      the source column names and table names in the <see cref="System.Data.DataSet"/>
      if no mapping
      is present.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Ignore"/></term>
					<description>A <see cref="System.SystemException"/> is generated. When the mappings are
explicitly set, a missing mapping for an input parameter is usually the
result of an error.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Error"/></term>
					<description>A <see cref="System.SystemException"/> is generated.</description>
				</item>
			</list>
			<para>The <see langword="SourceColumn "/>property is also used to map the value for
output or input/output parameters back to the <see langword="DataSet"/>. An
exception is generated if it refers to a nonexistent column.</para>
			<para>The <see langword="SourceVersion "/>property of a .NET Framework data provider's
<see langword="Parameter "/>class determines whether to use the 
<SpecialLocalizableItem kind="UIElement">Original</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Current</SpecialLocalizableItem>, or <SpecialLocalizableItem kind="UIElement">Proposed</SpecialLocalizableItem> 
version of the column value. This capability is often used to include
original values in the WHERE clause of an UPDATE statement to check for
optimistic concurrency violations.</para>
			<note type="note">
   If an
error occurs while updating a row, an exception is thrown and execution of
the update is discontinued. To continue the update operation without
generating exceptions when an error is encountered, set the
<see cref="System.Data.Common.DataAdapter.ContinueUpdateOnError"/> 
property to <see langword="true"/> before calling <see cref="System.Data.Common.DbDataAdapter.Update"/>. You may also
respond to errors on a per-row basis within the <see langword="RowUpdated"/> event of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> or
<see cref="System.Data.OleDb.OleDbDataAdapter"/>. To continue
the update operation without generating an exception within the <see langword="RowUpdated"/>
event, set the <see cref="System.Data.Common.RowUpdatedEventArgs.Status"/> property of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> to <see cref="System.Data.UpdateStatus.Continue"/>.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/> , to <see cref="System.Data.Common.DbDataAdapter.Update"/> the data source. This example assumes that
   you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.Update2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.Update3">
		<summary>
			<para> Calls the respective INSERT, UPDATE, or DELETE statements
      for each inserted, updated, or deleted row in the <see cref="System.Data.DataSet"/> with the specified <see cref="System.Data.DataTable"/>
      name.</para>
		</summary>
		<param name="dataSet">The <see cref="System.Data.DataSet"/> to use to update the data source.</param>
		<param name="srcTable">The name of the source table to use for table mapping. </param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.DataSet"/> is invalid.</exception>
		<exception cref="System.InvalidOperationException">The source table is invalid.</exception>
		<exception cref="System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
		<remarks>
			<para> When an application
      calls the <see cref="System.Data.Common.DbDataAdapter.Update"/>
      method, the <see cref="System.Data.Common.DbDataAdapter"/>
      
      examines the <see cref="System.Data.DataRow.RowState"/> property, and executes
      the required INSERT, UPDATE, or DELETE statements iteratively for each row, based
      on the order of the indexes configured in the <see cref="System.Data.DataSet"/> .
      For example, <see cref="System.Data.Common.DbDataAdapter.Update"/>
      might execute a DELETE statement, followed by an INSERT
      statement, and then another
      DELETE statement, due to the ordering of the rows in the <see cref="System.Data.DataTable"/>.</para>
			<para>It should be noted that these statements are not performed as a batch
      process; each row is updated individually.
      An application can call the <see cref="System.Data.DataSet.GetChanges"/> method in
      situations where you must control the sequence of statement types (for example,
      INSERTs before UPDATEs). For more information, see
      <see topic="cpconUpdatingDatabaseWithDataAdapterDataSet"/>.</para>
			<para> If INSERT, UPDATE, or DELETE statements have not been
      specified, the <see cref="System.Data.Common.DataAdapter.Update"/>
      method generates an exception. However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
      or <see cref="System.Data.OleDb.OleDbCommandBuilder"/> object to
      automatically generate SQL statements for single-table updates if you set the
      <see langword="SelectCommand "/>property of a .NET Framework data
      provider. Then, any
      additional SQL statements that you do not set are generated by
      the CommandBuilder. This generation
      logic requires key column information to be present in the <see cref="System.Data.DataSet"/>. For
      more information see <see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Update"/> method supports scenarios
   where the <see cref="System.Data.DataSet"/> contains
   multiple <see cref="System.Data.DataTable"/> objects whose names
   differ only by case. When multiple tables with the same name,
   but different case, exist in a
<see langword="DataSet"/> 
, <see cref="System.Data.Common.DbDataAdapter.Update"/> performs
a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet ds = new DataSet();
ds.Tables.Add("aaa");
ds.Tables.Add("AAA");
adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.
adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.
adapter.Update(ds, "Aaa"); // Results in an exception.
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.Update"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Update"/>
method retrieves rows from the table listed in
the first mapping before performing an update. The <see cref="System.Data.Common.DbDataAdapter.Update"/> then refreshes the row using the
value of the <see cref="System.Data.IDbCommand.UpdatedRowSource"/> property. Any additional rows returned are ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
command. After a row updates successfully, the changes to that row are
accepted.</para>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>
, the order of
execution is as follows:</para>
			<list type="number"><item>
					<term>      The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>      The command executes.</term>
				</item>
				<item>
					<term>      If the command is set to
      <see langword="FirstReturnedRecord"/>
   , then the first returned
   result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<para>Each command associated with
   
   the <see cref="System.Data.Common.DbDataAdapter"/> usually has a
   parameters collection associated with it. Parameters are mapped to the current
   row through the <see langword="SourceColumn "/>and <see langword="SourceVersion "/>properties of a .NET Framework data provider's <see langword="Parameter "/>class.
<see langword="SourceColumn "/>refers to a <see cref="System.Data.DataTable"/> column that
   the <see cref="System.Data.Common.DbDataAdapter"/> references to obtain parameter values for the current row.</para>
			<para><see langword="SourceColumn "/>refers to the unmapped column name before any table mappings
have been applied. If <see langword="SourceColumn "/>refers to a nonexistent column, the action
taken depends on one of the following <see cref="System.Data.MissingMappingAction"/> values.</para>
			<list type="table">
				<listheader>
					<term>Enumeration Value</term>
					<description>Action Taken</description>
				</listheader>
				<item>
					<term>
						<see langword="MissingMappingAction.Passthrough"/></term>
					<description>Use
      the source column names and table names in the <see cref="System.Data.DataSet"/>
      if no mapping
      is present.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Ignore"/></term>
					<description>A <see cref="System.SystemException"/> is generated. When the mappings are
explicitly set, a missing mapping for an input parameter is usually the
result of an error.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Error"/></term>
					<description>A <see cref="System.SystemException"/> is generated.</description>
				</item>
			</list>
			<para>The <see langword="SourceColumn "/>property is also used to map the value for
output or input/output parameters back to the <see langword="DataSet"/>. An
exception is generated if it refers to a nonexistent column.</para>
			<para>The <see langword="SourceVersion "/>property of a .NET Framework data provider's
<see langword="Parameter "/>class determines whether to use the 
<SpecialLocalizableItem kind="UIElement">Original</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Current</SpecialLocalizableItem>, or <SpecialLocalizableItem kind="UIElement">Proposed</SpecialLocalizableItem> 
version of the column value. This capability is often used to include
original values in the WHERE clause of an UPDATE statement to check for
optimistic concurrency violations.</para>
			<note type="note">
   If an
error occurs while updating a row, an exception is thrown and execution of
the update is discontinued. To continue the update operation without
generating exceptions when an error is encountered, set the
<see cref="System.Data.Common.DataAdapter.ContinueUpdateOnError"/> 
property to <see langword="true"/> before calling <see cref="System.Data.Common.DbDataAdapter.Update"/>. You may also
respond to errors on a per-row basis within the <see langword="RowUpdated"/> event of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> or
<see cref="System.Data.OleDb.OleDbDataAdapter"/>. To continue
the update operation without generating an exception within the <see langword="RowUpdated"/>
event, set the <see cref="System.Data.Common.RowUpdatedEventArgs.Status"/> property of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> to <see cref="System.Data.UpdateStatus.Continue"/>.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/> , to <see cref="System.Data.Common.DbDataAdapter.Update"/> the data source. This example assumes that
   you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/>.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.Update3" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.Update4">
		<summary>
			<para>Calls the respective INSERT, UPDATE, or DELETE
      statements for each inserted, updated, or deleted row in the specified array of <see cref="System.Data.DataRow"/>
      objects.</para>
		</summary>
		<param name="dataRows">An array of <see cref="System.Data.DataRow"/> objects used to update the data source.</param>
		<param name="tableMapping">The <see cref="System.Data.IDataAdapter.TableMappings"/> collection to use.</param>
		<returns>
			<para>The number of rows successfully updated from the <see cref="System.Data.DataSet"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.DataSet"/> is invalid.</exception>
		<exception cref="System.InvalidOperationException"><para>The source table is invalid.</para></exception>
		<exception cref="System.SystemException"><para>No <see cref="System.Data.DataRow"/> exists to update.</para>
			<para>-or-</para>
			<para> No <see cref="System.Data.DataTable"/> exists to update. </para>
			<para>-or-</para>
			<para> No <see cref="System.Data.DataSet"/> exists to use as a source.</para></exception>
		<exception cref="System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
		<remarks>
			<para> When an application
      calls the <see cref="System.Data.Common.DbDataAdapter.Update"/>
      method, the <see cref="System.Data.Common.DbDataAdapter"/>
      
      examines the <see cref="System.Data.DataRow.RowState"/> property, and executes
      the required INSERT, UPDATE, or DELETE statements iteratively for each row, based
      on the order of the indexes configured in the <see cref="System.Data.DataSet"/> .
      For example, <see cref="System.Data.Common.DbDataAdapter.Update"/>
      might execute a DELETE statement, followed by an INSERT
      statement, and then another
      DELETE statement, due to the ordering of the rows in the <see cref="System.Data.DataTable"/>.</para>
			<para>It should be noted that these statements are not performed as a batch
      process; each row is updated individually.
      An application can call the <see cref="System.Data.DataSet.GetChanges"/> method in
      situations where you must control the sequence of statement types (for example,
      INSERTs before UPDATEs). For more information, see
      <see topic="cpconUpdatingDatabaseWithDataAdapterDataSet"/>.</para>
			<para>If INSERT, UPDATE, or DELETE statements have not been specified, the <see cref="System.Data.Common.DataAdapter.Update"/> method generates an exception.
   However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/> or <see cref="System.Data.OleDb.OleDbCommandBuilder"/> object to automatically generate SQL
   statements for single-table updates if you set the <see langword="SelectCommand "/>property of a .NET Framework data
   provider. Then, any additional SQL statements that you
   do not set are generated by the CommandBuilder. This generation logic requires
   key column information to be present in the <see cref="System.Data.DataSet"/>. For more information see
<see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Update"/>
method retrieves rows from the table listed in
the first mapping before performing an update. The <see cref="System.Data.Common.DbDataAdapter.Update"/> then refreshes the row using the
value of the <see cref="System.Data.IDbCommand.UpdatedRowSource"/>
property. Any additional rows returned are ignored.</para>
			<para>After any data is loaded back into the <see cref="System.Data.DataSet"/>, the <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised, allowing
the user to inspect the reconciled <see cref="System.Data.DataSet"/> row and any output parameters returned by the
command. After a row updates successfully, the changes to that row are
accepted.</para>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>
, the order of
execution is as follows:</para>
			<list type="number"><item>
					<term>      The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>      The command executes.</term>
				</item>
				<item>
					<term>      If the command is set to
      <see langword="FirstReturnedRecord"/>
   , then the first returned
   result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>      The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
			<para>Each command associated with
   
   the <see cref="System.Data.Common.DbDataAdapter"/> usually has a
   parameters collection associated with it. Parameters are mapped to the current
   row through the <see langword="SourceColumn "/>and <see langword="SourceVersion "/>properties of a .NET Framework data provider's <see langword="Parameter "/>class.
<see langword="SourceColumn "/>refers to a <see cref="System.Data.DataTable"/> column that
   the <see cref="System.Data.Common.DbDataAdapter"/> references to obtain parameter values for the current row.</para>
			<para><see langword="SourceColumn "/>refers to the unmapped column name before any table mappings
have been applied. If <see langword="SourceColumn "/>refers to a nonexistent column, the action
taken depends on one of the following <see cref="System.Data.MissingMappingAction"/> values.</para>
			<list type="table">
				<listheader>
					<term>Enumeration Value</term>
					<description>Action Taken</description>
				</listheader>
				<item>
					<term>
						<see langword="MissingMappingAction.Passthrough"/></term>
					<description>Use
      the source column names and table names in the <see cref="System.Data.DataSet"/>
      if no mapping
      is present.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Ignore"/></term>
					<description>A <see cref="System.SystemException"/> is generated. When the mappings are
explicitly set, a missing mapping for an input parameter is usually the
result of an error.</description>
				</item>
				<item>
					<term>
						<see langword="MissingMappingAction.Error"/></term>
					<description>A <see cref="System.SystemException"/> is generated.</description>
				</item>
			</list>
			<para>The <see langword="SourceColumn "/>property is also used to map the value for
output or input/output parameters back to the <see langword="DataSet"/>. An
exception is generated if it refers to a nonexistent column.</para>
			<para>The <see langword="SourceVersion "/>property of a .NET Framework data provider's
<see langword="Parameter "/>class determines whether to use the 
<SpecialLocalizableItem kind="UIElement">Original</SpecialLocalizableItem>, <SpecialLocalizableItem kind="UIElement">Current</SpecialLocalizableItem>, or <SpecialLocalizableItem kind="UIElement">Proposed</SpecialLocalizableItem> 
version of the column value. This capability is often used to include
original values in the WHERE clause of an UPDATE statement to check for
optimistic concurrency violations.</para>
			<note type="note">
   If an
error occurs while updating a row, an exception is thrown and execution of
the update is discontinued. To continue the update operation without
generating exceptions when an error is encountered, set the
<see cref="System.Data.Common.DataAdapter.ContinueUpdateOnError"/> 
property to <see langword="true"/> before calling <see cref="System.Data.Common.DbDataAdapter.Update"/>. You may also
respond to errors on a per-row basis within the <see langword="RowUpdated"/> event of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> or
<see cref="System.Data.OleDb.OleDbDataAdapter"/>. To continue
the update operation without generating an exception within the <see langword="RowUpdated"/>
event, set the <see cref="System.Data.Common.RowUpdatedEventArgs.Status"/> property of the <see cref="System.Data.Common.RowUpdatedEventArgs"/> to <see cref="System.Data.UpdateStatus.Continue"/>.
</note>
		</remarks>
	</doc><doc for="DbDataAdapter.Fill4">
		<summary>
			<para>Adds or refreshes rows in a specified range in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/> and source table names, command string, and command behavior.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<param name="startRecord">The zero-based record number to start with.</param>
		<param name="maxRecords">The maximum number of records to retrieve.</param>
		<param name="srcTable">The name of the source table to use for table mapping. </param>
		<param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The source table is invalid.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="startRecord"/> parameter was less than 0.</para>
			<para> -or-</para>
			<para> The <paramref name="maxRecords"/> parameter was less than 0. </para></exception>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
operation then adds the rows to destination <see cref="System.Data.DataTable"/> objects in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> objects if they do not already exist. When creating
<see cref="System.Data.DataTable"/> objects, the <see cref="System.Data.Common.DbDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para> If the <see cref="System.Data.Common.DbDataAdapter"/> encounters duplicate columns while populating
a <see cref="System.Data.DataTable"/>, it generates
names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a
separate table. Additional result sets are named by appending integral values to
the specified table name (for example, "Table", "Table1", "Table2", and so on).
Applications
should use caution when using column and table names to ensure that conflicts with these
naming patterns do not occur.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.Common.DbDataAdapter.Fill"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para> You can use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When handling batch SQL statements that
   return multiple results, the implementation of <see cref="System.Data.Common.DbDataAdapter.Fill"/>
   and <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>
   for a .NET Framework data provider retrieves schema information for only the first result.
   
</note>
			<note type="inotes">
   This
   overload of
   the <see cref="System.Data.IDataAdapter.Fill"/> method is protected and is
   designed for use by a .NET Framework data provider.
</note>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.FillSchema"/>
	</doc><doc for="DbDataAdapter.Fill">
		<overload>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those
   in the data source.</para>
		</overload>
		<summary>
			<para>Adds or refreshes rows in a <see cref="System.Data.DataTable"/> to match those
   in the data source using the <see cref="System.Data.DataTable"/> name.</para>
		</summary>
		<param name="dataTable">A <see cref="System.Data.DataTable"/> to fill with records and, if necessary, schema.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataTable"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/>
operation then
adds the rows to the specified destination <see cref="System.Data.DataTable"/> object in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> object if it does not already exist. When creating a
<see cref="System.Data.DataTable"/> object, the <see cref="System.Data.Common.DbDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>
, appropriate primary keys and constraints are also created.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object
encounters duplicate columns while populating a <see cref="System.Data.DataTable"/>, it will generate names for the
subsequent columns, using the pattern "columnname1", "columnname2",
"columnname3", and so on. If the incoming data contains unnamed columns, they
are placed in the <see cref="System.Data.DataSet"/>
according to the pattern "Column1", "Column2", and so
on.</para>
			<para> When the query specified returns multiple results, each
   result set is placed in a separate table. Additional result sets are named by
   appending integral values to the specified table name (for example, "Table",
   "Table1", "Table2", and so on). Because no table is created for
   a query that does not return rows, if you were to process an insert query followed
   by a select query, the table created for the select query would
   be named "Table", because it is the first table created. Applications
   should use caution when using column and table names to ensure that conflicts
   with these naming patterns do not occur.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<para>You can use the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method multiple times on the
same <see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows are merged
with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>. </para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/> does not set
a <see cref="System.Data.DataTable.PrimaryKey"/> value for the resulting
<see cref="System.Data.DataTable"/>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.FillSchema"/>
	</doc><doc for="DbDataAdapter.Fill1">
		<summary>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/> name, and creates
   a <see cref="System.Data.DataTable"/> named "Table".</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method retrieves the data from the data source
   using a SELECT statement. The <see cref="System.Data.IDbConnection"/> object associated with the
   select command must be valid, but it does not need to be open. If
   the <see cref="System.Data.IDbConnection"/> is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened to retrieve
   data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains open.</para>
			<para>If an error is encountered while populating the data set, rows added prior to
   the occurrence of the error remain in the data set. The remainder of the
   operation is aborted.</para>
			<para>If a command does not return any rows, no tables are added to the
<see cref="System.Data.DataSet"/>, and no exception is raised.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object encounters duplicate columns while
populating a <see cref="System.Data.DataTable"/>, it will generate
names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/>
according to the pattern
"Column1", "Column2", and so on.</para>
			<para>When the query specified returns multiple
   results, the result set for each row returning query is placed in a
   separate table. Additional result sets are named by appending integral values to
   the specified table name (for example, "Table", "Table1", "Table2", and so on).
   Because no table is created for a query that does not return rows, if you were
   to process an insert query followed by a select query, the table created
   for the select query would be named "Table", because it is
   the first table created. Applications should use caution when using column and
   table names to ensure that conflicts with these naming patterns do not
   occur.
   </para>
			<para>When the SELECT statement used to populate
   the <see cref="System.Data.DataSet"/>
   returns
   multiple results, such as a batch SQL statements, if one of the results contains
   an error, all subsequent results are skipped and not added to the <see cref="System.Data.DataSet"/>.</para>
			<para>When using subsequent <see cref="System.Data.Common.DbDataAdapter.Fill"/> calls to refresh the contents of the
<see cref="System.Data.DataSet"/>,
two conditions must be met:</para>
			<list type="number"><item>
					<term>
      The SQL statement should match the one initially used
      to populate the <see cref="System.Data.DataSet"/>.</term>
				</item>
				<item>
					<term>
      The Key column information must be present.</term>
				</item>
			</list>
			<para> If primary key information is
   present, any duplicate rows are reconciled and only appears once in the <see cref="System.Data.DataTable"/> that
   corresponds to the <see cref="System.Data.DataSet"/>. Primary key information may be set either through
<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, by specifying the <see cref="System.Data.DataTable.PrimaryKey"/> property of the <see cref="System.Data.DataTable"/>, or by setting the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> property to <see langword="AddWithKey"/>
.</para>
			<para>If the<see langword=" SelectCommand"/> returns the
results of an OUTER JOIN, the<see langword="DataAdapter"/>
does not set a<see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting<see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
		</remarks>
	</doc><doc for="DbDataAdapter.Fill2">
		<summary>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/> and <see cref="System.Data.DataTable"/> names.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<param name="srcTable">The name of the source table to use for table mapping. </param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<exception cref="System.SystemException">The source table was invalid.</exception>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method retrieves the data from the data source using a SELECT statement.
   The <see cref="System.Data.IDbConnection"/> object associated with the select command must
   be valid, but it does not need to be open. If the <see cref="System.Data.IDbConnection"/> is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened
   to retrieve data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains
   open.</para>
			<para>If a command does not return any rows, no tables are added to the
<see cref="System.Data.DataSet"/>
, and no exception is raised.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object encounters duplicate columns while
populating a <see cref="System.Data.DataTable"/>, it will generate
names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern
"Column1", "Column2", and so on.</para>
			<para> When the query specified returns multiple results, each result set is placed in a separate table.
   Additional result sets are named by appending integral values to the specified
   table name (for example, "Table", "Table1", "Table2", and so on). Since no
   table is created for a query that does not return rows, if you were to process
   an insert query followed by a select query, the table created for the select
   query would be named "Table", because it is the first table created. Applications
   should use caution when using column and table names to ensure that conflicts
   with these naming patterns do not occur.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.Common.DbDataAdapter.Fill"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para>If an error is encountered while populating the data set, rows added prior to
   the occurrence of the error remain in the data set. The remainder of the
   operation is aborted.</para>
			<para>When the SELECT statement used to populate
   the <see cref="System.Data.DataSet"/>
   returns
   multiple results, such as a batch SQL statements, be aware of the following:</para>
			<list type="bullet"><item>
					<term>
      
      If one of the results contains an error,
      all subsequent results are skipped and not added to the <see cref="System.Data.DataSet"/>.</term>
				</item>
			</list>
			<para>When using subsequent <see cref="System.Data.Common.DbDataAdapter.Fill"/> calls to refresh the contents
of the <see cref="System.Data.DataSet"/>, two conditions must be met:</para>
			<list type="number"><item>
					<term>
      
      The SQL statement should match the one initially used to populate the
   <see cref="System.Data.DataSet"/>.</term>
				</item>
				<item>
					<term>
      
      The Key column information must be present. If primary key information is present,
      any duplicate rows are reconciled and only appear once in the <see cref="System.Data.DataTable"/> that
      corresponds to the <see cref="System.Data.DataSet"/>. Primary key information may be set either through
   <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, by specifying the <see cref="System.Data.DataTable.PrimaryKey"/> property of the <see cref="System.Data.DataTable"/>, or by setting the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> property to <see langword="AddWithKey"/> .</term>
				</item>
			</list>
			<para>If the <see langword="SelectCommand"/> returns the results of an OUTER
JOIN, the <see langword="DataAdapter"/> does not set a
<see cref="System.Data.DataTable.PrimaryKey"/> value for the 
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<note type="inheritinfo">
   When
   overriding <see cref="System.Data.Common.DbDataAdapter.Fill"/> in a derived class, be sure to call the base
   class's <see cref="System.Data.Common.DbDataAdapter.Fill"/> method.
   
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/>, to fill a <see cref="System.Data.DataSet"/> with rows from
   the <SpecialLocalizableItem kind="UIElement">categories</SpecialLocalizableItem> table. This example assumes that you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/>
.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.Fill2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter.Fill3">
		<summary>
			<para>Adds or refreshes rows in a specified range in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/> and <see cref="System.Data.DataTable"/> names.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<param name="startRecord">The zero-based record number to start with.</param>
		<param name="maxRecords">The maximum number of records to retrieve.</param>
		<param name="srcTable">The name of the source table to use for table mapping. </param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<exception cref="System.SystemException">The <see cref="System.Data.DataSet"/> was invalid.</exception>
		<exception cref="System.InvalidOperationException"><para>The source table was invalid.</para>
			<para>-or-</para>
			<para>The connection was invalid.</para></exception>
		<exception cref="System.InvalidCastException">The connection could not be found.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="startRecord"/> parameter was less than 0.</para>
			<para> -or-</para>
			<para> The <paramref name="maxRecords"/> parameter was less than 0. </para></exception>
		<remarks>
			<para>A <paramref name="maxRecords"/>
value of 0 gets all records found after the start record. If <paramref name="maxRecords"/>
is greater than the number of remaining rows,
only the remaining rows are returned and no error is issued.</para>
			<para> If the corresponding select command is a statement
   returning multiple results, <see cref="System.Data.Common.DbDataAdapter.Fill"/>
   only applies <paramref name="maxRecords"/> to the first
   result.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method retrieves the data from the data source using a SELECT statement.
The <see cref="System.Data.IDbConnection"/> object associated with the SELECT statement must
be valid, but it does not need to be open. If the <see cref="System.Data.IDbConnection"/> is closed before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it is opened
to retrieve data, then closed. If the connection is open before <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called, it remains
open.</para>
			<para>If a command does not return any rows, no tables are added to the
<see cref="System.Data.DataSet"/>,
   but no exception is raised.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object encounters duplicate columns while
populating a <see cref="System.Data.DataTable"/>, it will generate
names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern
"Column1", "Column2", and so on.</para>
			<para> When the query specified returns multiple results, each result set is placed in a separate table.
   Additional result sets are named by appending integral values to the specified
   table name (for example, "Table", "Table1", "Table2", and so on). Since no
   table is created for a query that does not return rows, if you were to process
   an insert query followed by a select query, the table created for the select
   query would be named "Table", because it is the first table created. Applications
   should use caution when using column and table names to ensure that conflicts
   with these naming patterns do not occur.</para>
			<para>The <see cref="System.Data.Common.DbDataAdapter.Fill"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.Common.DbDataAdapter.Fill"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.Common.DbDataAdapter.Fill"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para>If an error is encountered while populating the data set, rows added prior to
   the occurrence of the error remain in the data set. The remainder of the
   operation is aborted.</para>
			<para>When the SELECT statement used to populate
   the <see cref="System.Data.DataSet"/>
   returns
   multiple results, such as a batch SQL statements, be aware of the following:</para>
			<list type="bullet"><item>
					<term>
      
      When processing multiple results from a batch SQL
      statement, <paramref name="maxRecords"/> only applies to the first
      result. The same is true for rows containing chaptered results (.NET Framework
      Data Provider for OLE DB only). The top level result is limited by <paramref name="maxRecords"/>, but all child rows are added.</term>
				</item>
				<item>
					<term>
      
      If one of the results contains an error,
      all subsequent results are skipped and not added to the <see cref="System.Data.DataSet"/>.</term>
				</item>
			</list>
			<para>When using subsequent <see cref="System.Data.Common.DbDataAdapter.Fill"/> calls to refresh the contents
of the <see cref="System.Data.DataSet"/>, two conditions must be met:</para>
			<list type="number"><item>
					<term>
      
      The SQL statement should match the one initially used to populate the
   <see cref="System.Data.DataSet"/>.</term>
				</item>
				<item>
					<term>
      
      The Key column information must be present.</term>
				</item>
			</list>
			<para> If primary key information is present, any
   duplicate rows will be reconciled and only appear once in the <see cref="System.Data.DataTable"/> that
   corresponds to the <see cref="System.Data.DataSet"/>. Primary key information may be set either through
<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, by specifying the <see cref="System.Data.DataTable.PrimaryKey"/> property of the <see cref="System.Data.DataTable"/>, or by setting the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> property to <see langword="AddWithKey"/> .</para>
			<para>If the <see langword="SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<note type="note">
   When
   handling batch SQL statements that return multiple results, the
   implementation of <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve
   schema information for multiple results, use <see cref="System.Data.Common.DbDataAdapter.Fill"/> with the <see cref="System.Data.MissingSchemaAction"/> set to <see langword="AddWithKey"/>.
   
</note>
			<note type="note">
   
   The <see langword="DataSet"/> will not contain more than the number of
   records indicated by <paramref name="maxRecords"/>. However, the
   entire resultset generated by the query is still returned from the server.
</note>
			<note type="inheritinfo">
   When
   overriding <see cref="System.Data.Common.DbDataAdapter.Fill"/> in a derived class, be sure to call the base
   class's <see cref="System.Data.Common.DbDataAdapter.Fill"/> method.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Data.OleDb.OleDbDataAdapter"/>, to fill a <see cref="System.Data.DataSet"/> with 15 rows, beginning
   at row 10, from the
<SpecialLocalizableItem kind="UIElement">categories</SpecialLocalizableItem> table. This example assumes that you have created an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and a <see cref="System.Data.DataSet"/> .</para>
			<codelink SampleID="Classic WebData DbDataAdapter.Fill3 Example" SnippetID="1"/>
		</example>
	</doc><doc for="DbDataAdapter">
		<summary>
			<para>Aids implementation
      of the <see cref="System.Data.IDbDataAdapter"/> interface. Inheritors of <see cref="System.Data.Common.DbDataAdapter"/> implement a set of functions to provide
      strong typing, but inherit most of the functionality needed to
      fully implement a DataAdapter.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Common.DbDataAdapter"/> class inherits from the <see cref="System.Data.Common.DataAdapter"/> class and helps a class implement a
   DataAdapter designed for use with a relational database. </para>
			<para>An application does not create an instance of the <see cref="System.Data.Common.DbDataAdapter"/> interface directly, but
creates an instance of a class that inherits <see cref="System.Data.IDbDataAdapter"/>
and <see cref="System.Data.Common.DbDataAdapter"/>. </para>
			<para>Classes that inherit <see cref="System.Data.Common.DbDataAdapter"/> must implement the inherited members, and typically
define additional members to add provider-specific functionality. For example,
the <see cref="System.Data.Common.DbDataAdapter"/>
class defines the <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property, and the <see cref="System.Data.Common.DbDataAdapter"/> interface defines
eight overloads of the <see cref="System.Data.IDataAdapter.Fill"/> method. In turn, the <see cref="System.Data.OleDb.OleDbDataAdapter"/> class inherits the <see cref="System.Data.Common.DbDataAdapter.Fill"/>
method, and also defines two additional overloads of <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> that take an ADO Recordset object
as a parameter.</para>
			<note type="inheritinfo">
   When
   you inherit from the <see cref="System.Data.Common.DbDataAdapter"/> class, it is
   recommended that you implement the following constructors:
</note>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> PrvDataAdapter()</term>
					<description>Initializes a new
         instance of the PrvDataAdapter
         class.</description>
				</item>
				<item>
					<term> PrvDataAdapter(PrvCommand selectCommand)</term>
					<description>Initializes a new instance
         of the PrvDataAdapter class with
         the specified SQL SELECT statement.</description>
				</item>
				<item>
					<term> PrvDataAdapter(string selectCommandText, string selectConnectionString)</term>
					<description>Initializes a new
         instance of the PrvDataAdapter
         class with an SQL SELECT statement and a connection
         string.</description>
				</item>
				<item>
					<term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</term>
					<description>Initializes a new
         instance of the PrvDataAdapter
         class with an
         SQL SELECT statement and a PrvConnection object.</description>
				</item>
			</list>
To
promote consistency among .NET Framework data
providers, you should name the inheriting class in the form
<paramref name="Prv"/>DataAdapter where <paramref name="Prv "/>is 
the uniform prefix given to all classes in a specific .NET Framework data provider
namespace. For example, <paramref name="Sql"/>
is
the prefix of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> class in the
System.Data.SqlClient namespace.
</remarks>
		<seealso cref="System.Data.Common.DataAdapter"/>
		<seealso cref="System.Data.IDbCommand"/>
		<seealso cref="System.Data.IDbConnection"/>
	</doc></docs>
