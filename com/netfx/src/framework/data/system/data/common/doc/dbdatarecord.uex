<docs>
	<doc for="DbDataRecord.FieldCount">
		<summary>
			<para>
       Indicates the number of
       fields within the current record. This property is read-only.
    </para>
		</summary>
		<value>
			<para>
       The number of fields within the current record.
    </para>
		</value>
		<exception cref="System.NotSupportedException">
    Not connected to a data source to read from.
 </exception>
	</doc>
	<doc for="DbDataRecord.GetName">
		<summary>
			<para>
       Returns the name of the specified column.
    </para>
		</summary>
		<param name="i">
    The column ordinal.
 </param>
		<returns>
			<para>
       The name of the specified column.
    </para>
		</returns>
	</doc>
	<doc for="DbDataRecord.GetDataTypeName">
		<summary>
			<para>
       Returns the name of the back-end data type.
    </para>
		</summary>
		<param name="i">
    The column ordinal.
 </param>
		<returns>
			<para>
       The name of the back-end data type.
    </para>
		</returns>
	</doc>
	<doc for="DbDataRecord.GetFieldType">
		<summary>
			<para>
       Returns the <see cref="System.Type"/>
       that is the data type of the object.
    </para>
		</summary>
		<param name="i">
    The column ordinal.
 </param>
		<returns>
			<para>
       The <see cref="System.Type"/>
       that is the data type of the object.
    </para>
		</returns>
	</doc>
	<doc for="DbDataRecord.GetOrdinal">
		<summary>
			<para>
       Returns the column ordinal, given the name of the column.
    </para>
		</summary>
		<param name="name">
    The name of the column.
 </param>
		<returns>
			<para>
       The column ordinal.
    </para>
		</returns>
	</doc>
	<doc for="DbDataRecord.this">
		<overload>
			<para>
       Indicates that value from a column in its
       native format. This property is read-only.
    </para>
		</overload>
		<summary>
			<para>
       Indicates the value at
       the specified column in its native format given the column ordinal. This
       property is read-only.
    </para>
		</summary>
		<param name="i">
    The column ordinal.
 </param>
		<value>
			<para>
       The value at the specified column in its native format.
    </para>
		</value>
	</doc>
	<doc for="DbDataRecord.this1">
		<summary>
			<para>
       Indicates the value at
       the specified column in its native format given the column name. This
       property is read-only.
    </para>
		</summary>
		<param name="name">
    The column name.
 </param>
		<value>
			<para>
       The value at the specified column in its native format.
    </para>
		</value>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetAttributes">
		<summary>
     Retrieves an array of member attributes for the given object.
 </summary>
		<returns>
     the array of attributes on the class.  This will never be null.
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetClassName">
		<summary>
     Retrieves the class name for this object.  If null is returned,
     the type name is used.
 </summary>
		<returns>
     The class name for the object, or null if the default will be used.
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetComponentName">
		<summary>
     Retrieves the name for this object.  If null is returned,
     the default is used.
 </summary>
		<returns>
     The name for the object, or null if the default will be used.
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetConverter">
		<summary>
      Retrieves the type converter for this object.
 </summary>
		<returns>
     A TypeConverter.  If null is returned, the default is used.
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetDefaultEvent">
		<summary>
     Retrieves the default event.
 </summary>
		<returns>
     the default event, or null if there are no
     events
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetDefaultProperty">
		<summary>
     Retrieves the default property.
 </summary>
		<returns>
     the default property, or null if there are no
     properties
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetEditor">
		<summary>
      Retrieves the an editor for this object.
 </summary>
		<returns>
     An editor of the requested type, or null.
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetEvents1">
		<summary>
     Retrieves an array of events that the given component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.  The returned array of events will be
     filtered by the given set of attributes.
 </summary>
		<param name="attributes">
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the event does not have an instance of that attribute's
     class, this will still include the event if the
     Attribute is the same as it's Default property.
 </param>
		<returns>
     an array of events this component surfaces that match
     the given set of attributes..
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetProperties">
		<summary>
     Retrieves an array of properties that the given component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.
 </summary>
		<returns>
     an array of properties this component surfaces.
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetProperties1">
		<summary>
     Retrieves an array of properties that the given component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.  The returned array of properties will be
     filtered by the given set of attributes.
 </summary>
		<param name="attributes">
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the property does not have an instance of that attribute's
     class, this will still include the property if the
     Attribute is the same as it's Default property.
 </param>
		<returns>
     an array of properties this component surfaces that match
     the given set of attributes..
 </returns>
	</doc>
	<doc for="DbDataRecord.ICustomTypeDescriptor.GetEvents">
		<internalonly/>
		<overload>
			<para>Retrieves an array of events that the given component instance provides. </para>
		</overload>
		<summary>
			<para>Retrieves an array of events that the given component instance
      provides. This may differ from the set of events the class
      provides. If the component is sited, the site may add or remove
      additional events.</para>
		</summary>
		<returns>
			<para>an array of events this component surfaces.</para>
		</returns>
	</doc><doc for="DbDataRecord.GetGuid">
		<summary>
			<para> Returns the GUID value of the specified field.
      </para>
		</summary>
		<param name="i">The index of the field to return. </param>
		<returns>
			<para> The guid value of the specified field.
      </para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>. </exception>
	</doc><doc for="DbDataRecord.ICustomTypeDescriptor.GetPropertyOwner">
		<internalonly/>
		<summary>
			<para>Retrieves the object that directly depends on this value being edited. This is generally
      the object that is required for the PropertyDescriptor's GetValue and SetValue methods.
      If a null value is passed for the PropertyDescriptor, the ICustomComponent
      descripotor implemementation should return the default object, that is the main
      object that exposes the properties and attributes,</para>
		</summary>
		<param name="pd">The PropertyDescriptor to return the owner for. This call should return an object such that the call "pd.GetValue(GetPropertyOwner(pd));" will generally succeed. If a null value is passed for pd, the main object that owns the properties and attributes should be returned. </param>
		<returns>
			<para>valueOwner</para>
		</returns>
	</doc><doc for="DbDataRecord">
		<summary>
			<para>Implements <see cref="System.Data.IDataRecord"/> and
<see cref="System.ComponentModel.ICustomTypeDescriptor"/>, and provides data binding support
   for <see cref="System.Data.Common.DbEnumerator"/>.</para>
		</summary>
	</doc><doc for="DbDataRecord.GetData">
		<nodoc/>
		<summary>
			<para> Not currently supported.
      </para>
		</summary>
	</doc>
	<doc for="DbDataRecord.GetValue">
		<summary>
			<para> Returns the value at the specified column in its native format.
      </para>
		</summary>
		<param name="i">The column ordinal. </param>
		<returns>
			<para>The value to return.</para>
		</returns>
	</doc>
	<doc for="DbDataRecord.GetBoolean">
		<summary>
			<para>       Returns the value of the specified column as a boolean.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>
				<see langword="true"/> if the boolean is <see langword="true"/>; otherwise,
   <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>       No conversions are performed; therefore the data retrieved must already be a
      boolean.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetByte">
		<summary>
			<para>       Returns the value of the specified column as a byte.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are performed; therefore the data retrieved must already be a
      byte.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetBytes">
		<summary>
			<para>       Returns
      the value of the specified column as a byte array.
      </para>
		</summary>
		<param name="i">
   column ordinal.
   </param>
		<param name=" buffer">
   buffer to copy data into.
   </param>
		<param name=" length">
   max length to copy into the buffer.
   </param>
		<param name=" bufferIndex">
   point to start from within the buffer.
   </param>
		<param name=" dataIndex">
   point to start from within the source data.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No
      conversions are performed; therefore the data retrieved must already be a byte
      array.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetChar">
		<summary>
			<para>       Returns the value of the specified column as a character.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are performed; therefore the data retrieved must already be a
      character.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetChars">
		<summary>
			<para>       Returns
      the value of the specified column as a character array.
      </para>
		</summary>
		<param name="i">
   column ordinal.
   </param>
		<param name=" buffer">
   buffer to copy data into.
   </param>
		<param name=" length">
   max length to copy into the buffer.
   </param>
		<param name=" bufferIndex">
   point to start from within the buffer.
   </param>
		<param name=" dataIndex">
   point to start from within the source data.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No
      conversions are performed; therefore the data retrieved must already be a character
      array.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetInt16">
		<summary>
			<para>       Returns the
      value of the specified column as a 16-bit signed integer.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions
      are performed; therefore the data retrieved must already be a 16-bit signed
      integer.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetInt32">
		<summary>
			<para>       Returns the
      value of the specified column as a 32-bit signed integer.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions
      are performed; therefore the data retrieved must already be a 32-bit signed
      integer.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetInt64">
		<summary>
			<para>       Returns the
      value of the specified column as a 64-bit signed integer.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions
      are performed; therefore the data retrieved must already be a 64-bit signed
      integer.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetFloat">
		<summary>
			<para>       Returns the value of the specified column as a single-precision floating point number.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are
      performed; therefore the data retrieved must already be a single-precision floating point
      number.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetDouble">
		<summary>
			<para>       Returns the value of the specified column as a double-precision floating point number.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are
      performed; therefore the data retrieved must already be a double-precision floating point
      number.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetString">
		<summary>
			<para>       Returns the value of the specified column as a string.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are performed; therefore the data retrieved must already be a
      string.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetDecimal">
		<summary>
			<para>       Returns the value of the specified column as
      a <see cref="System.Decimal"/>
      object.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.Decimal"/>
      object.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetDateTime">
		<summary>
			<para>       Returns the value of the specified column as
      a <see cref="System.DateTime"/>
      object.
      </para>
		</summary>
		<param name="i">
   The column ordinal.
   </param>
		<returns>
			<para>       The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para>       No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.DateTime"/>
      object.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.GetValues">
		<summary>
			<para>       Returns all the attribute fields in the collection for the current
      record.
      </para>
		</summary>
		<param name="values">
   An array of <see cref="System.Object"/> to copy the attribute fields into.
   </param>
		<returns>
			<para>       The number of instances of <see cref="System.Object"/> in the array.
   </para>
		</returns>
		<remarks>
			<para>       Using this method may be more efficient for most applications then retrieving
      each field individually.
      </para>
		</remarks>
	</doc>
	<doc for="DbDataRecord.IsDBNull">
		<summary>
			<para> Used to indicate non-existent values.
      </para>
		</summary>
		<param name="i">The column ordinal. </param>
		<returns>
			<para><see langword="true"/> if the
   specified column is equivalent to <see cref="System.DBNull"/> ;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Call this method to check for null column values before calling the typed get
      methods (for example, <see cref="System.Data.SqlClient.SqlDataReader.GetByte"/>, <see cref="System.Data.SqlClient.SqlDataReader.GetChar"/>, and so on) to avoid
      raising an error.</para>
		</remarks>
	</doc>
</docs>
