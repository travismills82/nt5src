<docs>
	<doc for="DBDataPermissionAttribute">
		<summary>
			<para>Associates a security action with a custom security attribute.</para>
		</summary>
	</doc><doc for="DBDataPermission.Copy">
		<summary>
			<para>Creates and returns an identical copy of the current permission object.</para>
		</summary>
		<returns>
			<para>A copy of the current permission object.</para>
		</returns>
		<remarks>
			<para>A copy of a permission object represents the same access 
      to resources as the original permission object.</para>
		</remarks>
	</doc><doc for="DBDataPermission.IsSubsetOf">
		<summary>
			<para>Returns a value indicating whether the current permission object
      is a subset of the specified permission object.</para>
		</summary>
		<param name="target">A permission object that is to be tested for the subset relationship. This object must be of the same type as the current permission object.</param>
		<returns>
			<para><see langword="True "/>if the 
   current permission object is a
   subset of the specified permission object; otherwise <see langword="false"/> .</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is an object that is not of the same type as the current permission object.</exception>
		<remarks>
			<para>The current permission object is a subset of the specified permission object 
      if the current permission object specifies a set of operations that is wholly
      contained by the specified permission object. For example, a permission that
      represents access to C:\example.txt is a subset of a permission that represents
      access to C:\. If this method returns <see langword="true"/>, the current permission object
      represents no more access to the protected resource than does the specified
      permission object.</para>
		</remarks>
	</doc><doc for="DBDataPermission.FromXml">
		<summary>
			<para>Reconstructs a security object with a specified state 
      from an XML encoding.</para>
		</summary>
		<param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
		<remarks>
			<para>Custom code that extends security objects needs to implement the ToXml and 
   <see langword="FromXml"/> methods to make the objects security-encodable.</para>
		</remarks>
	</doc><doc for="DBDataPermission.ToXml">
		<summary>
			<para>Creates an XML encoding of the security object and its current state.</para>
		</summary>
		<returns>
			<para>An XML encoding of the security object, including any state information.</para>
		</returns>
		<remarks>
			<para>Custom code that extends security objects needs to 
      implement the <see cref="System.Data.Common.DBDataPermission.ToXml"/> and
   <see cref="System.Data.Common.DBDataPermission.FromXml"/> 
   methods to make the objects security-encodable.</para>
		</remarks>
	</doc><doc for="DBDataPermission.connectionStringRestrictions;">
		<summary>
			<para>Contains a collection of security restrictions 
      related to connection strings.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Common.DBDataPermission.connectionStringRestrictions"/> field is intended for 
   the use of those implementing their own data permission classes.</para>
		</remarks>
	</doc><doc for="DBDataPermission.Union">
		<summary>
			<para> Returns a new permission object that is the union of
      the current and specified permission objects.</para>
		</summary>
		<param name="target">A permission object to combine with the current permission object. It must be of the same type as the current permission object.</param>
		<returns>
			<para>A new permission object that represents the union of the
      current permission object and the specified permission object.</para>
		</returns>
		<exception cref="System.NotSupportedException">The <paramref name="other"/> parameter is not a null reference (<see langword="Nothing"/> in Visual Basic). This method is only supported at this level when passed a null reference (<see langword="Nothing"/>).</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Data.Common.DBDataPermission.Union"/> is a permission
   that represents all the operations represented by both the current permission
   object and the specified permission object. Any demand that passes either
   permission passes their union.</para>
		</remarks>
	</doc><doc for="DBDataPermission.Intersect">
		<summary>
			<para>Returns a new permission object representing the intersection of
      the current permission object and the specified permission object.</para>
		</summary>
		<param name="target">A permission object to intersect with the current permission object. It must be of the same type as the current permission object.</param>
		<returns>
			<para>A new permission object that represents the intersection
      of the current permission object and the specified permission object. This new
      permission object is a null reference (<see langword="Nothing"/> in Visual Basic) if the
      intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not a null reference (<see langword="Nothing"/> in Visual Basic) and is not an instance of the same class as the current permission object.</exception>
		<remarks>
			<para>The intersection of two permissions is a permission that describes the set of
      operations they both describe in common. Only a demand that passes both original
      permissions will pass the intersection.</para>
		</remarks>
	</doc><doc for="DBDataPermissionAttribute.DBDataPermissionAttribute">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Common.DBDataPermissionAttribute"/> class.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/> values representing an action that can be performed using declarative security.</param>
		<returns>
			<para> A <see cref="System.Data.Common.DBDataPermissionAttribute"/> object.</para>
		</returns>
	</doc>
	<doc for="DBDataPermission.IsUnrestricted">
		<summary>
			<para>Returns a value indicating whether the permission can be
      represented as unrestricted without any knowledge of the permission semantics.</para>
		</summary>
		<returns>
			<para><see langword="True "/>if the permission can be represented as
   unrestricted.</para>
		</returns>
	</doc>
	<doc for="DBDataPermission">
		<summary>
			<para> Enables a .NET Framework data provider to ensure that a user has a
      security level adequate for accessing data.
      </para>
		</summary>
	</doc>
	<doc for="DBDataPermission.CreateInstance">
		<summary>
			<para>Creates a new instance of a DataPermission class.</para>
		</summary>
		<returns>
			<para>A new DataPermission object.</para>
		</returns>
	</doc>
	<doc for="DBDataPermission.DBDataPermission">
		<overload>
			<para>Initializes a new instance of a 
      DataPermission class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of a 
      DataPermission class.</para>
		</summary>
	</doc>
	<doc for="DBDataPermission.DBDataPermission1">
		<summary>
			<para>Initializes a new instance of a 
      DataPermission class with the specified <see cref="System.Security.Permissions.PermissionState"/>
      value.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/> values.</param>
	</doc>
	<doc for="DBDataPermission.DBDataPermission2">
		<summary>
			<para>Initializes a new instance of a DataPermission class 
      with the specified <see cref="System.Security.Permissions.PermissionState"/> value and a value indicating
      whether a blank password
      is allowed.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/> values.</param>
		<param name="allowBlankPassword">Indicates whether a blank password is allowed.</param>
		<remarks>
			<para>The <see cref="System.Security.Permissions.PermissionState"/> enumeration takes precedence
   over the <see cref="System.Data.Common.DBDataPermission.AllowBlankPassword"/> property. Therefore, if you
   set set <see cref="System.Data.Common.DBDataPermission.AllowBlankPassword"/> to
<see langword="false"/>, you must also set <see cref="System.Security.Permissions.PermissionState"/> to <see langword="None"/> 
to prevent a user from making a connection using a blank password.</para>
		</remarks>
	</doc>
	<doc for="DBDataPermission.DBDataPermission3">
		<summary>
			<para>Initializes a new instance of a DataPermission class using an 
      existing DataPermission.</para>
		</summary>
		<param name="permission">An existing DataPermission used to create a new DataPermission.</param>
	</doc>
	<doc for="DBDataPermission.DBDataPermission4">
		<summary>
			<para>Initializes a new instance of a DataPermission class with the 
      specified DataPermissionAttribute.</para>
		</summary>
		<param name="permissionAttribute">A security action associated with a custom security attribute.</param>
	</doc>
	<doc for="KeyRestrictionBehavior">
		<summary>
			<para> Identifies a list of connection string parameters
      identified by the <see cref="System.Data.Common.DBDataPermissionAttribute.KeyRestrictions"/>
      property that are either
      allowed or not allowed.</para>
		</summary>
	</doc>
	<doc for="DBDataPermissionAttribute.KeyRestrictionBehavior">
		<summary>
			<para>Identifies whether the list of connection string
      parameters identified by the <see cref="System.Data.Common.DBDataPermissionAttribute.KeyRestrictions"/>
      property are the only
      additional connection string parameters allowed.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.KeyRestrictionBehavior"/> values.</para>
		</value>
	</doc>
	<doc for="KeyRestrictionBehavior.AllowOnly">
		<summary>
			<para>Default. Identifies the only additional connection
      string parameters that are allowed.</para>
		</summary>
	</doc>
	<doc for="KeyRestrictionBehavior.PreventUsage">
		<summary>
			<para> Identifies additional connection string
      parameters that are not allowed.</para>
		</summary>
	</doc>
	<doc for="DBDataPermission.Clear">
		<summary>
			<para>Removes all permissions that were previous added using 
      the <see cref="System.Data.Common.DBDataPermission.Add"/>   
   method.</para>
		</summary>
	</doc>
	<doc for="DBDataPermission.AllowBlankPassword">
		<summary>
			<para>Gets a value indicating whether a blank password is allowed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a blank password is allowed; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Security.Permissions.PermissionState"/> enumeration takes precedence
   over the <see cref="System.Data.Common.DBDataPermission.AllowBlankPassword"/> property. Therefore,
   if you set <see cref="System.Data.Common.DBDataPermission.AllowBlankPassword"/> to
<see langword="false"/>, you must also set <see cref="System.Security.Permissions.PermissionState"/> to <see langword="None"/>
to prevent a user from making a connection using a blank password. </para>
		</remarks>
	</doc>
	<doc for="DBDataPermission.AddWithAllow">
		<summary>
			<para>Adds access for the specified connection string to the
      existing state of the permission.</para>
		</summary>
		<param name="connectionString">A permitted connection string.</param>
		<param name=" restrictions">String that identifies connection string parameters that are allowed or disallowed.</param>
		<param name=" behavior">One of the <see cref="System.Data.KeyRestrictionBehavior"/> values.</param>
		<remarks>
			<para>This method can be useful when implementing</para>
			<list type="bullet"><item>
					<term>
         a .NET Framework data provider.</term>
				</item>
				<item>
					<term>
         an API that must assert for data access permission.</term>
				</item>
				<item>
					<term>
         an administrative tool or installation program that must modify security
         policy.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="DBDataPermissionAttribute.AllowBlankPassword">
		<summary>
			<para>Gets or sets a value indicating whether a blank password is allowed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a blank password is allowed; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="DBDataPermissionAttribute.ConnectionString">
		<summary>
			<para>Gets or sets a permitted connection string.</para>
		</summary>
		<value>
			<para>A permitted connection string.</para>
		</value>
		<remarks>
			<para>Multiple connection strings may be identified. You may also provide
      additional connection string restrictions using KeyRestrictions.</para>
		</remarks>
	</doc>
	<doc for="DBDataPermissionAttribute.KeyRestrictions">
		<summary>
			<para>Gets or sets connection string parameters that are allowed or disallowed.</para>
		</summary>
		<value>
			<para>One or more connection string parameters that are allowed or disallowed.</para>
		</value>
		<remarks>
			<para>Connection string parameters are identified in the form
      &lt;parameter name&gt;=. Multiple parameters can be specified, delimited using a
      semi-colon (;). The connection string parameters listed may be identified as
      either the only additional parameters allowed or additional parameters that are
      not allowed using the <see cref="System.Data.KeyRestrictionBehavior"/>
      
      property.</para>
			<para>If no key restrictions are specified, and the
   <see cref="System.Data.KeyRestrictionBehavior"/> property is set to
   <see langword="AllowOnly"/>
   , then no additional
   connection string parameters are allowed.</para>
			<para>If no key restrictions are specified, and the
<see cref="System.Data.KeyRestrictionBehavior"/> property is set to 
<see langword="PreventUsage"/>, then additional 
   connection string parameters are allowed. If more than one rule is set for the
   same connection string, the
   more restrictive rule is
   selected during the permission check.</para>
		</remarks>
	</doc></docs>
