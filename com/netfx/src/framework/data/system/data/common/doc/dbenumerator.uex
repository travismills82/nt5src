<docs>
	<doc for="DbEnumerator.DbEnumerator">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.Common.DbEnumerator"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Common.DbEnumerator"/> class using the specified 
<see langword="DataReader"/> .</para>
		</summary>
		<param name="reader">The <see langword="DataReader"/> through which to iterate.</param>
	</doc><doc for="DbEnumerator.DbEnumerator1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Common.DbEnumerator"/> class using the specified 
<see langword="DataReader"/>, and indicates whether to automatically close the 
<see langword="DataReader"/> after iterating through its data.</para>
		</summary>
		<param name="reader">The <see langword="DataReader"/> through which to iterate.</param>
		<param name=" closeReader"><see langword="true"/> to automatically close the <see langword="DataReader"/> after iterating through its data; otherwise, <see langword="false"/>.</param>
	</doc><doc for="DbEnumerator.Current">
		<summary>
			<para> Gets the current element in the collection.</para>
		</summary>
		<value>
			<para> The current element in the collection.</para>
		</value>
		<exception cref="System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element .</exception>
		<remarks>
			<para>After an enumerator is created or after a <see cref="System.Data.Common.DbEnumerator.Reset"/>, <see cref="System.Data.Common.DbEnumerator.MoveNext"/> must be called to advance the enumerator to the first 
   element of the collection before reading the value of <see cref="System.Data.Common.DbEnumerator.Current"/>; otherwise, <see cref="System.Data.Common.DbEnumerator.Current"/> is undefined.
<see cref="System.Data.Common.DbEnumerator.Current"/> also throws an exception if the last call to <see cref="System.Data.Common.DbEnumerator.MoveNext"/> returned false, which indicates the end of the collection.
<see cref="System.Data.Common.DbEnumerator.Current"/> does not move the position of the enumerator and consecutive calls to <see cref="System.Data.Common.DbEnumerator.Current"/> return the same object until either <see cref="System.Data.Common.DbEnumerator.MoveNext"/> or <see cref="System.Data.Common.DbEnumerator.Reset"/> is called.
   An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements,
   the enumerator is irrecoverably invalidated and the next call to <see cref="System.Data.Common.DbEnumerator.MoveNext"/> or <see cref="System.Data.Common.DbEnumerator.Reset"/> generates an <see cref="System.InvalidOperationException"/>. If the collection is modified between
<see cref="System.Data.Common.DbEnumerator.MoveNext"/> and <see cref="System.Data.Common.DbEnumerator.Current"/>, <see cref="System.Data.Common.DbEnumerator.Current"/> returns the element to which it
   is set, even if the enumerator is already invalidated.</para>
		</remarks>
	</doc><doc for="DbEnumerator.Reset">
		<summary>
			<para>Sets the enumerator to its initial position, which is before the first 
      element in the collection.</para>
		</summary>
		<exception cref="System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
		<remarks>
			<para>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, 
      the enumerator is irrecoverably invalidated and the next call to <see cref="System.Data.Common.DbEnumerator.MoveNext"/> or <see cref="System.Data.Common.DbEnumerator.Reset"/> throws an <see cref="System.InvalidOperationException"/>.</para>
		</remarks>
	</doc><doc for="DbEnumerator">
		<summary>
			<para>Exposes the <see cref="System.Collections.IEnumerable.GetEnumerator"/> method, which supports a
   simple iteration over a collection by a .NET Framework data provider.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Common.DbEnumerator"/> class is implemented by a .NET Framework
   data provider to provide data binding support.</para>
			<para>By design, the <see cref="System.Data.Common.DbEnumerator"/> object is intended for
use with only one resultset. For example, if you execute a batch statement
containing two SQL SELECT statements that return different schemas, the
second statement might not retun the entire schema. To avoid this situation,
obtain a <see cref="System.Data.Common.DbEnumerator"/> for each resultset, and then call the
<see langword="NextResult"/> 
method of a .NET Framework data provider DataReader object. </para>
		</remarks>
	</doc>
	<doc for="DbEnumerator.MoveNext">
		<summary>
			<para>Advances the enumerator to the next element of the collection.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the enumerator was successfully advanced to the next 
   element; <see langword="false"/> if the enumerator has passed the end of the
   collection.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
		<remarks>
			<para>After an enumerator is created or after a call to <see cref="System.Data.Common.DbEnumerator.Reset"/>, an enumerator is positioned before the first element
   of the collection, and the first call to <see cref="System.Data.Common.DbEnumerator.MoveNext"/> moves the enumerator over the first element of the collection.
   After the end of the collection is passed, subsequent calls to <see cref="System.Data.Common.DbEnumerator.MoveNext"/> return false until <see cref="System.Data.Common.DbEnumerator.Reset"/> is called.
   An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements,
   the enumerator is irrecoverably invalidated and the next call to <see cref="System.Data.Common.DbEnumerator.MoveNext"/> or
<see cref="System.Data.Common.DbEnumerator.Reset"/> throws an <see cref="System.InvalidOperationException"/>.</para>
		</remarks>
	</doc>
</docs>
