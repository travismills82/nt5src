<docs>
   <doc for="Nodes">
 <summary>
     ExpressionParser: expression node types
 </summary>
   </doc>
   <doc for="ExpressionParser.Empty">
 <summary>
     Operand situations for parser
 </summary>
   </doc>
   <doc for="ExpressionParser.MaxPredicates">
 <summary>
     UNDONE: we should be more flexible: the following consts should be config..
 </summary>
   </doc>
   <doc for="ExpressionParser.ParseAggregateArgument">
 <summary>
     parse the argument to an Aggregate function.
     the syntax is
          Func(child[(relation_name)].column_name)
     When the function is called we have already parsed the Aggregate name, and open paren
 </summary>
   </doc>
   <doc for="ExpressionParser.NodePop">
 <summary>
     NodePop - Pop an operand node from the node stack.
 </summary>
   </doc>
   <doc for="ExpressionParser.NodePeek">
 <summary>
     NodePeek - Peek at the top node.
 </summary>
   </doc>
   <doc for="ExpressionParser.NodePush">
 <summary>
     Push an operand node onto the node stack
 </summary>
   </doc>
   <doc for="ExpressionParser.BuildExpression">
 <summary>
     Builds expression tree for higher-precedence operator to be used as left
     operand of current operator. May cause errors - always do ErrorCheck() upin return.
 </summary>
   </doc>
   <doc for="ExpressionParser.ScanNumeric">
 <summary>
     ScanNumeric - parse number.

     In format: [digit|.]*{[e|E]{[+|-]}{digit*}}

     Further checking is done by constant parser.

 </summary>
   </doc>
   <doc for="ExpressionParser.ScanName">
 <summary>
     Just a string of alphanumeric characters.
 </summary>
   </doc>
   <doc for="ExpressionParser.ScanName1">
 <summary>
      recognize bracketed identifiers.
      Special case: we are using '\' character to escape '[' and ']' only, so '\' by itself  is not an escape
 </summary>
   </doc>
   <doc for="ExpressionParser.ScanDate">
 <summary>
     Just read the string between '#' signs, and parse it later
 </summary>
   </doc>
   <doc for="ExpressionParser.IsWhiteSpace">
 <summary>
     is the character a white space character?
     Consider using CharacterInfo().IsWhiteSpace(ch) (System.Globalization)
 </summary>
   </doc>
   <doc for="ExpressionParser.IsAlphaNumeric">
 <summary>
     is the character an alphanumeric?
 </summary>
   </doc>
   <doc for="ExpressionParser.IsHexChar">
 <summary>
     is the character an hex value
 </summary>
   </doc>
   <doc for="ExpressionParser.IsAlpha">
 <summary>
     is the character an alpha?
 </summary>
   </doc>
   <doc for="Tokens">
 <summary>
     Tokens
 </summary>
   </doc>
   <doc for="OperatorInfo">
 <summary>
     Operator stack element
 </summary>
   </doc>
</docs>

