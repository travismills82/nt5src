<docs>
	<doc for="OleDbConnection.IntegratedSecurity">
		<summary>
			<para>Gets or sets the isolation level used for local transactions.</para>
		</summary>
		<value>
			<para>One of the
    <see cref="System.Data.IsolationLevel"/> values. The default value 
       is <see langword="ReadCommitted"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The value set is not one of the <see cref="System.Data.IsolationLevel"/> values.</exception>
		<exception cref="System.InvalidOperationException">The property is set or retrieved when the connection is in any state but an open state.</exception>
		<remarks>
			<para>If the connection is closed, the <see cref="System.Data.OleDb.OleDbTransaction.IsolationLevel"/> property is set to
 <see langword="ReadCommitted"/>.</para>
			<para>The <see cref="System.Data.OleDb.OleDbTransaction.IsolationLevel"/> is set on the underlying OLE DB provider
 when <see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/> is called. If the OLE DB
 provider does not support the indicated <see cref="System.Data.OleDb.OleDbTransaction.IsolationLevel"/>, an error will occur at that time.</para>
			<para>The <see cref="System.Data.OleDb.OleDbTransaction.IsolationLevel"/> can not be changed while a
 transaction is in progress.</para>
			<note type="note">
    This is the only property other
    than <see cref="System.Data.OleDb.OleDbConnection.Database"/>
    that can be set when the connection is open.
 </note>
			<note type="note">
    The <see cref="System.Data.OleDb.OleDbTransaction.IsolationLevel"/> property can be set or retrieved
    only when the connection is open. Trying to access <see cref="System.Data.OleDb.OleDbTransaction.IsolationLevel"/> while the connection is in any
    other state will result in an <see cref="System.InvalidOperationException"/>.
 </note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbConnection.IntegratedSecurity Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Database"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.DataSource"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.UserId"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Password"/>
	</doc>
	<doc for="OleDbConnection.Password">
		<summary>
			<para>Gets or sets the password to use when connecting.</para>
		</summary>
		<value>
			<para>The password to use when
       connecting.
       The default value is an empty string.</para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is <see cref="System.Data.OleDb.OleDbConnection.Open"/>. <see cref="System.Data.OleDb.OleDbConnection.Close"/> the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.Password"/>
 property overwrites the corresponding property within the connection string.</para>
			<para>This property is read-only while
    the connection is open.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbConnection.Password Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Database"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.DataSource"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.UserId"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
	</doc>
	<doc for="OleDbConnection.Properties">
		<summary>
			<para>Gets the initialization and authorization properties
       when the connection is closed. Gets the session and data source
       information when the connection is open.</para>
		</summary>
		<value>
			<para>The OleDb property settings for the connection.</para>
		</value>
		<remarks>
			<para>The property settings in this collection override the
       cooresponding property settings in the connection string and will change any
       matching, strongly-typed properties in the connection object. However,
       the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> property is not modified by the
       changes made to the <see cref="System.Data.OleDb.OleDbConnection.Properties"/>
       collection. If the connection is closed, the available properties
       are enumerated before a physical connection to the database is
       established. This property does not support persistance.</para>
		</remarks>
		<example>
			<para>The following example displays the names of the <see cref="System.Data.OleDb.OleDbPropertyCollection"/>
 for the given <see cref="System.Data.OleDb.OleDbConnection"/> .</para>
			<codelink SampleID="Classic WebData OleDbConnection.Properties Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbConnection.UserId">
		<summary>
			<para>Gets or sets the user ID to use when connecting.</para>
		</summary>
		<value>
			<para>The user ID to use
       when connecting. The default value is an empty string.</para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is <see cref="System.Data.OleDb.OleDbConnection.Open"/>. <see cref="System.Data.OleDb.OleDbConnection.Close"/> the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.UserId"/>
 property overwrites the cooresponding property within the connection string.</para>
			<para>This property is read-only while
    the connection is open.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbConnection.Password Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Database"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.DataSource"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Password"/>
	</doc>
	<doc for="OleDbConnection.CreateProvider">
		<summary>
     uses the OLE DB Core components to create the provider from the connection string
 </summary>
	</doc>
	<doc for="OleDbConnection.CreateSession">
		<summary>
		</summary>
	</doc>
	<doc for="OleDbConnection.GetLiteralInformation">
		<summary>
			<para>
       Spec indicates to be marke Internal? (claims it not to be public)
    </para>
		</summary>
		<param name="literal">
    a value that indicates the literal to get information on.
 </param>
	</doc>
	<doc for="OleDbConnection.GetSchemaTable">
		<summary>
			<para>
       Spec indicates Internal-only? (not listed as Public method)
    </para>
		</summary>
		<param name="schema">
    A schema to insert into the data table.
 </param>
		<param name="restrictions">
    The restrictions on how to get the schema.
 </param>
		<exception cref="System.SystemException">
    The tableType passed was not a assignable to the <see cref="System.Data.DataTable"/>.
 </exception>
	</doc>
	<doc for="OleDbConnection.ResetProperties">
		<summary>
			<para>
       Resets the connection properties collection from the provider.
    </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.OleDb.OleDbConnection.ResetProperties"/> in a derived class, be sure to
       call the base class's <see cref="System.Data.OleDb.OleDbConnection.ResetProperties"/> method.
    </note>
		</remarks>
		<example>
			<para>
       The following example refreshes its <see cref="System.Data.OleDb.OleDbConnection.Properties"/> and displays them.
       To accomplish this, the method is passed an <see cref="System.Data.OleDb.OleDbConnection"/> object.
    </para>
			<codelink SampleID="Classic WebData OleDbConnection.ResetProperties Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.Properties"/>
	</doc>
	<doc for="OleDbConnection.ResetState">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OleDbConnection.SupportSchemaTable">
		<summary>
			<para>
       Internal only? Spec seems to indicate so.
    </para>
			<para>
       Indicates whether the database schema is supported or
       not.
    </para>
		</summary>
		<param name="schema">
    A Globally Unique Identifier (Guid) of the database schema.
 </param>
		<param name="support">
    A reference to a value indicating the support requested.
 </param>
		<returns>
			<para>
				<see langword="true"/> if the schema is supported,
       otherwise <see langword="false"/> .
    </para>
		</returns>
	</doc>
	<doc for="OleDbConnection.OnInfoMessage">
		<summary>
			<para>Raises the <see cref="System.Data.OleDb.OleDbInfoMessageEventArgs"/> event.</para>
		</summary>
		<param name="imevent">An <see cref="System.Data.OleDb.OleDbInfoMessageEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler through a delegate. For
      more information, see <see topic="cpconProvidingEventFunctionality"/>.
      </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.OleDb.OleDbConnection.OnInfoMessage"/> in a derived class, be sure to
      call the base class's <see cref="System.Data.OleDb.OleDbConnection.OnInfoMessage"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbConnection.OnStateChange"/>
	</doc>
	<doc for="OleDbConnection.OnStateChange">
		<summary>
			<para>Raises the <see cref="System.Data.StateChangeEventArgs"/> event.</para>
		</summary>
		<param name="scevent">A <see cref="System.Data.StateChangeEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event-handling method
      through the delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OleDb.OleDbConnection.OnStateChange"/> in a derived class, be
      sure to call the base class's <see cref="System.Data.OleDb.OleDbConnection.OnStateChange"/>
      method.
      
   </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbConnection.OnInfoMessage"/>
	</doc>
	<doc for="OleDbConnection.CreateCommand">
		<summary>
			<para>Creates and returns an <see cref="System.Data.OleDb.OleDbCommand"/> object associated with
   the <see cref="System.Data.OleDb.OleDbConnection"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OleDb.OleDbCommand"/> object. </para>
		</returns>
	</doc>
	<doc for="OleDbConnection.GetOleDbLiteralInformation">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OleDbConnection.OleDbConnection">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbConnection"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbConnection"/>
class.</para>
		</summary>
		<remarks>
			<para>When a new instance of <see cref="System.Data.OleDb.OleDbConnection"/> is created, the read/write properties are set 
   to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/></term>
					<description>empty string
         ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.Database"/></term>
					<description>empty
         string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.DataSource"/></term>
					<description>empty
         string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by 
   using the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.OleDb.OleDbConnection"/>
.</para>
			<codelink SampleID="Classic WebData OleDbConnection.OleDbConnection Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbConnection.OleDbConnection1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbConnection"/>
class with the specified connection string.</para>
		</summary>
		<param name="connectionString">The connection used to open the database.</param>
		<remarks>
			<para>When a new instance of <see cref="System.Data.OleDb.OleDbConnection"/> is created, the read/write properties are set 
   to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/></term>
					<description><paramref name="connectionString"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.Database"/></term>
					<description>empty
      string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbConnection.DataSource"/></term>
					<description>empty
      string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by 
   using the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.OleDb.OleDbConnection"/>
.</para>
			<codelink SampleID="Classic WebData OleDbConnection.OleDbConnection1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbConnection.ConnectionTimeout">
		<summary>
			<para> Gets the time to wait while trying to establish a
      connection before terminating the attempt and generating an error.</para>
		</summary>
		<value>
			<para>The time (in seconds) to
      wait
      for a connection to open. The default value is 15 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The value set is less than 0.</exception>
		<remarks>
			<para>A value of 0 indicates no limit, and should be avoided in
      a <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
      because an attempt to connect will wait
      indefinitely.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and sets some of its properties in the connection string.</para>
			<codelink SampleID="Classic WebData OleDbConnection.ConnectionTimeout Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Database"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.DataSource"/>
	</doc><doc for="OleDbConnection.IDbConnection.BeginTransaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbConnection.IDbConnection.BeginTransaction1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbConnection.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbConnection.IDbConnection.CreateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbConnection.InfoMessage">
		<summary>
			<para>Occurs when the provider sends a warning or an informational message.</para>
		</summary>
		<remarks>
			<para>Clients that want to process warnings or informational messages sent by the
      server should create an <see cref="System.Data.OleDb.OleDbInfoMessageEventHandler"/> delegate to listen to this
      event.</para>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.InfoMessage"/> event fires when a message
   with low severity is returned from the data source. Low severity messages
   are those that do not result in an exception. For Microsoft SQL Server, this
   includes error messages with a severity of 10 or less</para>
			<para>For more information and an example, see <see topic="cpconworkingwithconnectionevents"/>.</para>
		</remarks>
	</doc><doc for="OleDbConnection.StateChange">
		<summary>
			<para>Occurs when the state of the connection changes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.StateChange"/> event fires whenever
   the <see cref="System.Data.OleDb.OleDbConnection.State"/>
   changes
   from closed to opened, or from opened to closed. <see cref="System.Data.OleDb.OleDbConnection.StateChange"/> fires immediately after
   the <see cref="System.Data.OleDb.OleDbConnection"/> transitions. </para>
			<para>If an event handler throws an exception from within the <see cref="System.Data.OleDb.OleDbConnection.StateChange"/>
event, the exception propagates to the caller of the <see cref="System.Data.OleDb.OleDbConnection.Open"/> or <see cref="System.Data.OleDb.OleDbConnection.Close"/> method.</para>
			<para>The <see langword="StateChange"/> event is not raised 
unless you explicitly call <see langword="Close"/> or <see langword="Dispose"/>.
For more information, see <see topic="cpconWorkingWithConnectionEvents"/>.</para>
		</remarks>
	</doc><doc for="OleDbConnection.Database">
		<summary>
			<para> Gets the name of the current database or the database to be used after a connection is opened.</para>
		</summary>
		<value>
			<para> The name of the
      current database or the name of the database to be used after a connection is opened. The
      default value is an empty string.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.Database"/> property updates
   dynamically. If you change the current database
   using a SQL statement or the <see cref="System.Data.OleDb.OleDbConnection.ChangeDatabase"/>
   method, an informational message is sent
   and the property is updated automatically.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OleDbConnection.Database Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.ChangeDatabase"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.DataSource"/>
	</doc>
	<doc for="OleDbConnection.Provider">
		<summary>
			<para> Gets the name of the OLE DB provider specified in the 
      "Provider= " clause of the connection string.</para>
		</summary>
		<value>
			<para>The name of the provider as specified in the "Provider= 
      " clause of the connection string. The default
      value is an empty string.</para>
		</value>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OleDbConnection.Provider Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbConnection.ReleaseObjectPool">
		<summary>
			<para>Indicates that the <see cref="System.Data.OleDb.OleDbConnection"/> object pool can be released
   when the last underlying connection is released.</para>
		</summary>
		<remarks>
			<para><see langword="ReleaseObjectPool"/>
can be called to free resources that would otherwise be reserved for pooled <see cref="System.Data.OleDb.OleDbConnection"/> objects. You might
want to call this method if, for example, the connection object will not be used
again for the period of time that OLE DB services would normally keep pooled
connections active. Note that calling the method alone does not actually release
the active
connections that exist in the pool.</para>
			<para>The following must occur before the pool is finally disposed: </para>
			<list type="number"><item>
					<term>
      Call <see langword="Close"/> to
      return the connection object to the pool.</term>
				</item>
				<item>
					<term>
      Allow each connection object to time out of the pool.</term>
				</item>
				<item>
					<term>
      Call <see langword="ReleaseObjectPool"/>.</term>
				</item>
				<item>
					<term>
      Invoke garbage collection.</term>
				</item>
			</list>
			<para>Conversely, if you call <see langword="Close"/> on all active connections, and
invoke garbage collection, but do not call <see langword="ReleaseObjectPool"/>,
the resources reserved for the pooled objects will remain available. </para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> , opens it, displays some of its properties,
   closes the connection and releases the object pool to conserve resources.</para>
			<codelink SampleID="Classic WebData OleDbConnection.ReleaseObjectPool Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbConnection.DataSource">
		<summary>
			<para> Gets the server name or file name of the data source.</para>
		</summary>
		<value>
			<para>The server name or file name of
      the data source. The default value is an empty string.</para>
		</value>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OleDbConnection.DataSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.Database"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
	</doc>
	<doc for="OleDbConnection.ChangeDatabase">
		<summary>
			<para>Changes the current database for an open <see cref="System.Data.OleDb.OleDbConnection"/> .</para>
		</summary>
		<param name="value">The database name.</param>
		<exception cref="System.ArgumentException">The database name is not valid.</exception>
		<exception cref="System.InvalidOperationException">The connection is not open.</exception>
		<exception cref="System.Data.OleDb.OleDbException">Cannot change the database.</exception>
		<remarks>
			<para>The value supplied in the <paramref name="database "/>parameter
   must be a valid database name. The <paramref name="database "/>
   parameter cannot contain a null value, an empty string, or a
   string with only blank characters.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OleDbConnection.Database Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.Database"/>
	</doc>
	<doc for="OleDbConnection.Close">
		<summary>
			<para>Closes the connection to the data source. This is the preferred method of closing any open connection.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.Close"/>
method rolls back any pending transactions. It then
releases the connection to the connection
pool, or closes the connection if connection pooling is disabled.
If <see cref="System.Data.OleDb.OleDbConnection.Close"/> is called while handling a <see cref="System.Data.OleDb.OleDbConnection.StateChange"/>
event, no additional <see cref="System.Data.OleDb.OleDbConnection.StateChange"/> events are fired.</para>
			<para>An application can call <see cref="System.Data.OleDb.OleDbConnection.Close"/> more than one time. No
exception is generated.</para>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/>, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData OleDbConnection.Close Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.Open"/>
	</doc>
	<doc for="OleDbConnection.EnlistDistributedTransaction">
		<summary>
			<para>Enlists in the specified transaction as a distributed transaction.</para>
		</summary>
		<param name="transaction">A reference to an existing transaction in which to enlist.</param>
		<remarks>
			<para>You can enlist in an existing distributed transaction
      using the <see cref="System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction"/>
      method if auto-enlistment is disabled. Enlisting in an existing distributed
      transaction ensures that, if the transaction is committed or rolled back,
      modifications made by the code at the data source are also committed or rolled
      back. For more information about distributed transactions, see
      <see topic="cpconenlistingindistributedtransaction"/>.</para>
			<note type="caution">
				<see cref="System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction"/> returns an exception if the 
   <see cref="System.Data.OleDb.OleDbConnection"/> has 
      already started a transaction using
   <see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>. However, if 
      the transaction is a local transaction started at the data source (for
      example, by explicity executing the BEGIN TRANSACTION statement using an
   <see cref="System.Data.OleDb.OleDbCommand"/> object), 
   <see cref="System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction"/> rolls back the local 
      transaction and enlists in the existing distributed transaction as requested.
      You will not receive notice that the local transaction was rolled back, and are
      responsible for managing any local transactions not started using
   <see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>. 
   </note>
		</remarks>
	</doc>
	<doc for="OleDbConnection.Open">
		<summary>
			<para>Opens a database connection with the property
      settings specified by the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> .</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para> The connection is already open.</para></exception>
		<exception cref="System.Data.OleDb.OleDbException">A connection-level error occurred while opening the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection"/> draws an open connection
   from the connection pool if one is available. Otherwise, it establishes a new
   connection to the data
   source.
   </para>
			<note type="note">
   If the <see cref="System.Data.OleDb.OleDbConnection"/> goes out of scope, it is not closed.
   Therefore, you must explicitly close the connection by calling <see cref="System.Data.OleDb.OleDbConnection.Close"/> or <see cref="System.Data.OleDb.OleDbConnection.Dispose"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/>
, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData OleDbConnection.Close Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.Close"/>
	</doc>
	<doc for="OleDbConnection.ServerVersion">
		<summary>
			<para> Gets a string containing
      the version of the server to which the client is connected.</para>
		</summary>
		<value>
			<para> The version of the connected server. </para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed. </exception>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.ServerVersion"/> property maps to the OLE DB
   DBPROP_DBMSVER property. If <see cref="System.Data.OleDb.OleDbConnection.ServerVersion"/> is not
   supported by the underlying
   OLE DB provider, an empty string is returned.</para>
			<para>The version is of the form ##.##.####, where the first two digits are the
   major version, the next two digits are the minor version, and the last four
   digits are the release version. The provider must render the product version in
   this form but can also append the product-specific version—for example,
   "04.01.0000 Rdb 4.1". The string is of the form major.minor.build, where major
   and minor are exactly two digits and build is exactly four digits.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OleDbConnection.ServerVersion Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbConnection.State">
		<summary>
			<para>Gets the current state of the connection.</para>
		</summary>
		<value>
			<para>A bitwise combination of the <see cref="System.Data.ConnectionState"/> values. The default is <see langword="Closed"/>.</para>
		</value>
		<remarks>
			<para>The allowed state changes are:</para>
			<list type="bullet"><item>
					<term>
         From <see langword="Closed"/> to
         <see langword="Open"/>, using the <see langword="Open"/> method of the connection object.</term>
				</item>
				<item>
					<term>
         From <see langword="Open"/> to
         <see langword="Closed"/>, using either the <see langword="Close"/> method or the <see langword="Dispose"/> method of the connection object.</term>
				</item>
			</list>
			<note type="note">
   Calling the <see cref="System.Data.OleDb.OleDbConnection.State"/> property increases
   application overhead because each
   call results in a call to the OLE DB DBPROP_CONNECTIONSTATUS
   property for an open connection.
</note>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class, <see cref="System.Data.OleDb.OleDbConnection"/>, sets its <see cref="System.Data.IDbConnection.ConnectionString"/>, and displays its <see cref="System.Data.OleDb.OleDbConnection.State"/>.</para>
			<codelink SampleID="Classic WebData OleDbConnection.State Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbConnection.GetOleDbSchemaTable">
		<summary>
			<para>Returns schema information from a data source as indicated by a GUID, and after applying the specified restrictions.</para>
		</summary>
		<param name="schema">One of the <see cref="System.Data.OleDb.OleDbSchemaGuid"/> values that specifies the schema table to return.</param>
		<param name="restrictions"><para>An <see cref="System.Object"/> array of restriction values. These are applied in the order of the restriction columns. That is, the first restriction value applies to the first restriction column, the second restriction value applies to the second restriction column, and so on. </para></param>
		<returns>
			<para>A <see cref="System.Data.DataTable"/> containing the requested schema information.</para>
		</returns>
		<exception cref="System.Data.OleDb.OleDbException">The specified set of restrictions is invalid.</exception>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.OleDb.OleDbConnection"/> is closed.</exception>
		<exception cref="System.ArgumentException"><para>The specified schema rowset is not supported by the OLE DB provider.</para>
			<para>or</para>
			<para>The <paramref name="schema"/> parameter contains a value of <see cref="System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals"/> and the <paramref name="restrictions"/> parameter contains one or more restrictions. </para></exception>
		<remarks>
			<para>The schema table is returned as a <see cref="System.Data.DataTable"/> that has the same format as the OLE DB schema
   rowset specified by the
   the <paramref name="schema "/>
   parameter. Use the <paramref name="restrictions
   "/>parameter to filter the rows to be
   returned in the <see cref="System.Data.DataTable"/> (for example, by specifying restrictions
   for tablename, type, owner, or schema). When you pass values in
   the array, include empty strings or nulls for array elements that do not contain
   values. If you pass an empty array to <paramref name="restrictions "/>,
   all rows (one for each table) are returned in default order. Values in the array
   correspond to the order of the columns in the source table and <see cref="System.Data.DataTable"/>. Each element in the restrictions array is
   compared to the content of the corresponding column in the schema rowset. For
   example, the first element in the restrictions array is compared to first
   column in the rowset. If a restriction element is not null, only rows from the
   schema rowset that exactly match the value of the restriction are
   added to the resulting <see cref="System.Data.DataTable"/>.</para>
			<para> The <see cref="System.Data.OleDb.OleDbConnection"/> method calls the underlying OLE DB IDBSchemaRowset::GetRowset
method using standard common language runtime conversion rules.
For more information, see <see topic="cpconCOMDataTypes"/>.</para>
			<para>You can retrieve information about literals by using <see cref="System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals"/>,
which provides information equivalent to calling the OLE DB
IDBInfo::GetLiteralInfo interface, or the ADO
<see langword="Connection.OpenSchema"/> method with the 
<see langword="adSchemaDBInfoLiterals "/> constant.</para>
		</remarks>
		<example>
			<para>The following sample returns a list of tables in a database.</para>
			<codelink SampleID="Classic WebData OleDbConnection.GetOleDbSchemaTable Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbSchemaGuid"/>
	</doc>
	<doc for="OleDbConnection.BeginTransaction">
		<overload>
			<para>Begins a database transaction.</para>
		</overload>
		<summary>
			<para>Begins a database transaction with the current <see cref="System.Data.IsolationLevel"/>
value.</para>
		</summary>
		<param name="isolationLevel">The transaction isolation level for this connection.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para>You must explicitly commit
      or roll back the transaction using the <see cref="System.Data.OleDb.OleDbTransaction.Commit"/> or <see cref="System.Data.OleDb.OleDbTransaction.Rollback"/> method. To ensure that the
      .NET Framework Data Provider for OLE DB transaction management model performs correctly,
      avoid using other transaction management models, such as those provided by the data source.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and an <see cref="System.Data.OleDb.OleDbTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>, a <see cref="System.Data.OleDb.OleDbTransaction.Commit"/>, and <see cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OleDbConnection.BeginTransaction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbTransaction.Commit"/>
		<seealso cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
	</doc>
	<doc for="OleDbConnection.BeginTransaction1">
		<summary>
			<para>Begins a database transaction.</para>
		</summary>
		<returns>
			<para>An object representing the new transaction. </para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para>You must explicitly commit or roll back the transaction
      using the <see cref="System.Data.OleDb.OleDbTransaction.Commit"/>
      or <see cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
      method. To ensure that the .NET Framework Data Provider for OLE DB transaction management
      model performs correctly, avoid using other transaction management models, such as those provided
      by the data source.</para>
			<note type="note">
      If you do not specify an isolation level, the default isolation level for the underlying provider is used. To specify an isolation level
      with the <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> method, use the overload that
      takes the <paramref name="isolationLevel"/> parameter.
      
   </note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and an <see cref="System.Data.OleDb.OleDbTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>, a <see cref="System.Data.OleDb.OleDbTransaction.Commit"/>, and <see cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OleDbConnection.BeginTransaction1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbConnection.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OleDb.OleDbConnection"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OleDb.OleDbConnection"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Data.OleDb.OleDbConnection"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.Dispose"/> method calls <see cref="System.Data.OleDb.OleDbConnection.Close"/>, and removes
the <see cref="System.Data.OleDb.OleDbConnection"/> from the connection pool.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OleDbConnection.Dispose Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbConnection">
		<summary>
			<para>Represents an open connection to a data source.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Data.OleDb.OleDbConnection"/>
object represents a unique connection to a data source. In the
case of a client/server database system, it is equivalent to a network connection
to the server. Depending on the functionality supported by the native OLE DB provider,
some methods, or properties of an <see cref="System.Data.OleDb.OleDbConnection"/> object may not be available.</para>
			<para>When you create an instance of <see cref="System.Data.OleDb.OleDbConnection"/> , all properties are
set to their initial values. For a list of these values, see the <see cref="System.Data.OleDb.OleDbConnection"/> constructor.</para>
			<para> If the <see cref="System.Data.OleDb.OleDbConnection"/> goes out of scope, it is not closed.
Therefore, you must explicitly close the connection by calling <see cref="System.Data.OleDb.OleDbConnection.Close"/> or <see cref="System.Data.OleDb.OleDbConnection.Dispose"/>.</para>
			<note type="note">
   To deploy
   high-performance applications, you need to use connection pooling. When you use
   the .NET Framework Data Provider for OLE DB, you do not need to enable connection pooling
   because the provider manages this automatically. For more information about
   using connection pooling with the .NET Framework Data Provider for OLE DB, see
<see topic="cpconconnectionpoolingforoledbnetdataprovider"/>.
</note>
			<para>If a fatal <see cref="System.Data.OleDb.OleDbException"/> (for example, a SQL Server severity level of
20 or greater) is
generated by the method executing an <see cref="System.Data.OleDb.OleDbCommand"/>, the <see cref="System.Data.OleDb.OleDbConnection"/>, the connection may be closed. However,
the user can reopen the connection and continue.</para>
			<para>An application that creates an instance of the <see cref="System.Data.OleDb.OleDbConnection"/> object can require all direct and
indirect callers to have adequate permission to the code by setting
declarative or imperative security demands. <see cref="System.Data.OleDb.OleDbConnection"/> makes security demands using the <see cref="System.Data.OleDb.OleDbPermission"/>
object. Users can verify that their code has adequate permissions by using
the <see cref="System.Data.OleDb.OleDbPermissionAttribute"/>
object. Users and administrators can also use the <see topic="cpgrfcodeaccesssecuritypolicyutilitycaspolexe"/> to modify security
policy at the machine, user, and enterprise levels. For more information, see
<see topic="cpconsecuringyourapplication"/>.</para>
			<para>For more information about handling warning and informational messages from the
   data server, see <see topic="cpconworkingwithconnectionevents"/>.</para>
			<note type="note">
   The <see cref="System.Data.OleDb.OleDbConnection"/> object does not support setting or retrieving dynamic properties specific to an OLE DB provider. Only properties that can be passed in the connection string for the OLE DB provider are supported.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.OleDb.OleDbCommand"/>
and a <see cref="System.Data.OleDb.OleDbConnection"/>. The
<see cref="System.Data.OleDb.OleDbConnection"/> is opened and set as the<see cref="System.Data.OleDb.OleDbCommand.Connection"/> for the<see cref="System.Data.OleDb.OleDbCommand"/> . The example then calls<see cref="System.Data.OleDb.OleDbCommand.ExecuteNonQuery"/> , and closes the connection. To accomplish this, the <see cref="System.Data.OleDb.OleDbCommand.ExecuteNonQuery"/> 
is passed a connection string and a query string that is an SQL INSERT statement.</para>
			<codelink SampleID="Classic WebData OleDbConnection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter"/>
		<seealso cref="System.Data.OleDb.OleDbCommand"/>
	</doc><doc for="OleDbConnection.ConnectionString">
		<summary>
			<para>Gets or sets the string used to open a database.</para>
		</summary>
		<value>
			<para>The OLE DB provider connection string that includes the data source name, and
      other parameters needed to establish the initial connection. The default value
      is an empty string.</para>
		</value>
		<exception cref="System.ArgumentException">An invalid connection string argument has been supplied or a required connection string argument has not been supplied. </exception>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> is designed to match OLE DB
   connection string format as closely as possible with the following
   exceptions:</para>
			<list type="bullet"><item>
					<term>
      
      The "Provider = <paramref name="value"/>"
      clause is required. However, you cannot use "Provider = MSDASQL" because the
      .NET Framework Data Provider for OLE DB does not support the OLE DB Provider for ODBC
      (MSDASQL). To access ODBC data sources, use
      the <see cref="System.Data.Odbc.OdbcConnection"/> object, which is in the System.Data.Odbc
      namespace.</term>
				</item>
				<item>
					<term>
      
      Unlike OLE DB or ADO, the connection string that is
      returned is the same as the user-set <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>, minus security
      
      information if Persist Security Info is set to <see langword="false"/> (default). The .NET Framework Data Provider for OLE DB
      does not persist or return the password in a connection string unless you set
      the Persist Security Info keyword to <see langword="true "/>(not recommended).
      To maintain the highest level of security, it is strongly recommended that you
      use the Integrated Security keyword with Persist Security Info set to
   <see langword="false"/>.</term>
				</item>
			</list>
			<para>You can use the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> property to connect to a variety of data sources, including a Microsoft Data Link (UDL). The following example illustrates several possible connection strings.</para>
			<code>
"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=yes"
"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\bin\LocalAccess40.mdb"
"Provider=SQLOLEDB;Data Source=MySQLServer;Integrated Security=SSPI"
</code>
			<para>The <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> property can be set only when
the connection is closed. Many of the connection string values have
corresponding read-only properties. When the connection string is set, all of
these properties are updated, except when an error is detected. In this case,
none of the properties are updated. <see cref="System.Data.OleDb.OleDbConnection"/> properties return only
those settings contained in the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> .</para>
			<para> Resetting the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> on a closed connection resets 
all connection string values (and related properties), including the password.
For example, if you set a connection string that includes "Initial Catalog=
northwind", and then reset the connection string to "Provider=
SQLOLEDB;Data Source=

MySQLServer;IntegratedSecurity=SSPI",
the <see cref="System.Data.OleDb.OleDbConnection.Database"/> property is no longer set to
northwind. (The <paramref name="Initial Catalog"/> value of the connection string
corresponds to the <see langword="Database"/>
property.)</para>
			<para>A preliminary validation of the connection string is
   performed when the property is set. If values for the Provider, Connect Timeout,
   Persist Security Info, or OLE DB Services are included in the string, these
   values are checked.
   When an application calls the <see cref="System.Data.OleDb.OleDbConnection.Open"/> method, the connection string is fully
   validated. If the connection string contains invalid or unsupported properties, a
   runtime exception, such as <see cref="System.ArgumentException"/>
   , is generated at that time.</para>
			<para>The basic format of a connection string consists of a series of keyword/value
   pairs separated by semicolons. The equal sign (= ) connects each keyword and its
   value. To include values that contain a semicolon, single-quote character, or
   double-quote character, the value must be enclosed in double quotes. If the
   value contains both a semicolon and a double-quote character, the value can be
   enclosed in single quotes. The single quote is also useful if the value begins
   with a double-quote character. Conversely, the double quote can be used if the
   value begins with a single quote. If the value contains both single-quote and
   double-quote characters, the quote character used to enclose the value must be
   doubled each time it occurs within the value.</para>
			<para> To include preceding or trailing spaces in the string value,
   the value must be enclosed in either single quotes or double
   quotes. Any leading or trailing spaces around integer, Boolean, or enumerated values are
   ignored, even if enclosed in quotes. However, spaces within a string literal keyword or
   value are preserved. Single or double quotes may be used within a connection string
   without using delimiters (for example, Data Source=
   
   my'Server or Data Source=
   
   my"Server) unless a quote
   character is the first or last character in the value. </para>
			<para>To include an equal sign (=) in a keyword or value, it must be preceded
   by another equal sign. For example, in the hypothetical connection string </para>
			<code>
"key==word=value"
</code>
			<para>the keyword is "key=word" and the value is "value".</para>
			<para>If a specific keyword in a keyword= value pair occurs multiple times in a
   connection string, the last occurrence listed is used in the value set.</para>
			<para>Keywords are not case sensitive.</para>
			<para> To reference a UDL, add a
   reference to the UDL to the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> in the form "File Name =
   myfile.udl". If more than one UDL is specified in the connection string, only
   the last occurrence is loaded. If you
   specify a UDL, and subsequently call the <see cref="System.Data.OleDb.OleDbConnection"/>
   object to retrieve the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
   , the <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/> contains the reference to the
   UDL file, not the contents of the file. Connection strings that contain
   UDLs are parsed each time the <see cref="System.Data.OleDb.OleDbConnection"/> is opened. Because this can
   affect performance, a <see cref="System.Data.OleDb.OleDbConnection.ConnectionString"/>
   
   that does not reference a UDL is recommended.</para>
			<note type="caution">
   In this release, the application should
   use caution when constructing a connection string based on user input (for
   example when retrieving user ID and password information from a dialog box, and
   appending it to the connection string). The application should ensure that a
   user cannot embed extra connection string parameters in these values (for
   example, entering a password as "validpassword;database=
   
   somedb" in an attempt to attach to a different database). If you
   use the Extended Properties connection string parameter for OLE DB connections, avoid passing
   user IDs and passwords because you should avoid storing user IDs and
   passwords in clear text if at all possible, and because the
   default setting of Persist Security Info=
   
   false does not affect the Extended
   Properties parameter.
   
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and sets some of its properties in the connection string.</para>
			<codelink SampleID="Classic WebData OleDbConnection.DataSource Example" SnippetID="1"/>
		</example>
	</doc></docs>
