<docs>
	<doc for="OleDbTransaction.Finalize">
		<summary>
			<para>Frees resources before the <see cref="System.Data.OleDb.OleDbTransaction"/> is reclaimed by the Garbage Collector.</para>
		</summary>
	</doc>
	<doc for="OleDbTransaction.IsolationLevel">
		<summary>
			<para>Specifies the <see cref="System.Data.IsolationLevel"/>
for this transaction.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.IsolationLevel"/> for this transaction. The default is 
<see langword="ReadCommitted"/>.</para>
		</value>
		<remarks>
			<para>Parallel transactions are not supported. Therefore, 
      the <see cref="System.Data.IsolationLevel"/> applies to the entire transaction.</para>
		</remarks>
	</doc>
	<doc for="OleDbTransaction.IDbTransaction.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbTransaction.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbTransaction">
		<summary>
			<para> Represents an SQL transaction to be made at a data source. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The
      application creates an <see cref="System.Data.OleDb.OleDbTransaction"/> object by calling <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> on
      the <see cref="System.Data.OleDb.OleDbConnection"/> object. All subsequent operations associated with the
      transaction (for example, committing or aborting the transaction), are performed
      on the <see cref="System.Data.OleDb.OleDbTransaction"/> object.</para>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter"/>
		<seealso cref="System.Data.OleDb.OleDbConnection"/>
	</doc><doc for="OleDbTransaction.Connection">
		<summary>
			<para>Gets the <see cref="System.Data.OleDb.OleDbConnection"/> object associated with the transaction, or
<see langword="null"/> if the transaction is no longer valid. </para>
		</summary>
		<value>
			<para>The <see cref="System.Data.OleDb.OleDbConnection"/> object associated with the transaction.</para>
		</value>
		<remarks>
			<para> A single application may have multiple database
      connections, each with zero or more transactions. This property enables you to
      determine the connection object associated with a particular transaction created
      by <see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>
      .</para>
		</remarks>
	</doc><doc for="OleDbTransaction.Begin">
		<overload>
			<para>Initiates a nested database transaction.</para>
		</overload>
		<summary>
			<para>Initiates a nested database
      transaction and specifies the
      isolation level to use for the new transaction.
      </para>
		</summary>
		<param name="isolevel">The isolation level to use for the transaction.</param>
		<returns>
			<para>A nested database transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Nested transactions are not supported.</exception>
		<remarks>
			<para>The new transaction is nested within the current transaction.</para>
		</remarks>
	</doc><doc for="OleDbTransaction.Begin1">
		<summary>
			<para>Initiates a nested database transaction.
      </para>
		</summary>
		<returns>
			<para>A nested database transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Nested transactions are not supported.</exception>
		<remarks>
			<para>The new transaction is nested within the current transaction.</para>
		</remarks>
	</doc><doc for="OleDbTransaction.Commit">
		<summary>
			<para> Commits the database transaction.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and an <see cref="System.Data.OleDb.OleDbTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>, a <see cref="System.Data.OleDb.OleDbTransaction.Commit"/>, and <see cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OleDbConnection.BeginTransaction1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>
		<seealso cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
	</doc>
	<doc for="OleDbTransaction.Rollback">
		<summary>
			<para> Rolls back a transaction from a pending state.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para> The transaction can only be rolled back from a pending state (after <see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/> has been called, but before
<see cref="System.Data.OleDb.OleDbTransaction.Commit"/> is called).
   </para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/> and an <see cref="System.Data.OleDb.OleDbTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>, a <see cref="System.Data.OleDb.OleDbTransaction.Commit"/>, and <see cref="System.Data.OleDb.OleDbTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OleDbConnection.BeginTransaction1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbTransaction.Commit"/>
		<seealso cref="System.Data.OleDb.OleDbTransaction.Begin"/>
		<seealso cref="System.Data.OleDb.OleDbConnection.BeginTransaction"/>
	</doc>
</docs>
