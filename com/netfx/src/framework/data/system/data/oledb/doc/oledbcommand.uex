<docs>
	<doc for="OleDbCommand.Properties">
		<summary>
			<para>Gets the collection of <see cref="System.Data.OleDb.OleDbPropertyCollection"/>.</para>
		</summary>
		<value>
			<para>The OleDb property settings for the command.</para>
		</value>
		<remarks>
			<para>The caller must call <see cref="System.Data.OleDb.OleDbConnection.Open"/> method of the
 <see cref="System.Data.OleDb.OleDbCommand.Connection"/>
 property.</para>
		</remarks>
		<example>
			<para>The following example
       displays the names of the <see cref="System.Data.OleDb.OleDbPropertyCollection"/> for the given <see cref="System.Data.OleDb.OleDbCommand"/>
       .</para>
			<codelink SampleID="Classic WebData OleDbCommand.Properties Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbProperty"/>
	</doc>
	<doc for="OleDbCommand.ICloneable.Clone">
		<summary>
			<para>Creates a cloned instance of this instance.</para>
		</summary>
		<returns>
			<para>Returns an <see cref="System.Object"/> that is a clone of this instance.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbCommand.Connection"/> is not cloned, but instead shared.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>, clones it, executes it, then
    cancels the execution. To accomplish this, the method is passed a string that is
    a SQL Select statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ICloneable.Clone Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbCommand.ResetProperties">
		<summary>
			<para>
       Resets all <see cref="System.Data.OleDb.OleDbCommand"/> properties to their defaults.
    </para>
		</summary>
		<remarks>
			<para>
       This method will reset the collection, but not its values.
    </para>
			<para>
       The caller must call <see cref="System.Data.OleDb.OleDbConnection.Open"/> method of the <see cref="System.Data.OleDb.OleDbCommand.Connection"/>
       property.
    </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.OleDb.OleDbCommand.ResetProperties"/> in a derived class, be sure to call
       the base class's <see cref="System.Data.OleDb.OleDbCommand.ResetProperties"/> method.
    </note>
		</remarks>
		<example>
			<para>
       The following example refreshes its <see cref="System.Data.OleDb.OleDbCommand.Properties"/> and displays them.
       To accomplish this, the method is passed an <see cref="System.Data.OleDb.OleDbCommand"/> object.
    </para>
			<codelink SampleID="Classic WebData OleDbCommand.ResetProperties Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbCommand.ExecuteRow">
		<summary>
			<para>Executes the query, and returns an <see cref="System.Data.IDataRecord"/>IDataRecord 
      containing a single row returned by the query.</para>
		</summary>
	</doc>
	<doc for="OleDbCommand.ExecuteStream">
		<summary>
			<para>Executes the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> against the <see cref="System.Data.OleDb.OleDbConnection"/> and returns the results as an XML stream.</para>
		</summary>
	</doc>
	<doc for="OleDbCommand.CreateParameters">
		<summary>
			<para> Refreshes the collection of <see cref="System.Data.OleDb.OleDbCommand.Parameters"/> for the
   command.
   </para>
		</summary>
		<remarks>
			<para> The caller must call Connection.Open
      </para>
		</remarks>
	</doc>
	<doc for="OleDbCommand.CreateParameter">
		<summary>
			<para>Creates
      a new instance of an <see cref="System.Data.OleDb.OleDbParameter"/> object. </para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OleDb.OleDbParameter"/> object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbCommand.CreateParameter"/> method is a strongly-typed version of 
<see cref="System.Data.IDbCommand.CreateParameter"/>.</para>
		</remarks>
	</doc>
	<doc for="OleDbCommand.ResetCommandTimeout">
		<summary>
			<para> Resets the <see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/> property to the default value.
   </para>
		</summary>
		<remarks>
			<para>The default value of the <see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/> is 30 
   seconds.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/> , sets the <see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/>, displays the property, resets the <see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/>
, and displays the property
again. To accomplish this, the method is passed a string that is a SQL Select
statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ResetCommandTimeout Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbCommand.ResetParameters">
		<summary>
			<para> Clears the <see cref="System.Data.OleDb.OleDbCommand.Parameters"/> property.
   </para>
		</summary>
	</doc>
	<doc for="OleDbCommand.CommandTimeout">
		<summary>
			<para> Gets or sets the wait time before
      terminating an attempt to execute a command and generating an error.</para>
		</summary>
		<value>
			<para> The time (in seconds) to wait for the command
      to execute. The default is 30 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The property value assigned is less than 0.</exception>
		<remarks>
			<para>A value of 0 indicates no limit, and should be avoided
      in a <see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/> because an attempt to execute
      a command will wait indefinitely.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.OleDbCommand1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbCommand.Connection"/>
		<seealso cref="System.Data.OleDb.OleDbCommand.CommandText"/>
		<seealso cref="System.Data.IDbCommand.CommandType"/>
		<seealso cref="System.Data.IDbCommand.CommandTimeout"/>
	</doc>
	<doc for="OleDbCommand.OleDbCommand2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbCommand"/> class with the text of the query and an
<see cref="System.Data.OleDb.OleDbConnection"/> .</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<param name="connection">An <see cref="System.Data.OleDb.OleDbConnection"/> that represents the connection to a data source.</param>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Data.OleDb.OleDbCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandText"/>
					</term>
					<description>
						<paramref name="cmdText"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/>
					</term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.IDbCommand.CommandType"/>
					</term>
					<description>
						<see langword="Text"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.Connection"/>
					</term>
					<description>A
   new <see cref="System.Data.OleDb.OleDbConnection"/> that is the
   value for the
<paramref name="connection"/> 
parameter.</description>
				</item>
			</list>
			<para> You can change the value for any of these parameters by
   setting the related property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.OleDbCommand2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.Connection">
		<summary>
			<para>Gets or sets the <see cref="System.Data.OleDb.OleDbConnection"/>
used by this instance of the <see cref="System.Data.OleDb.OleDbCommand"/>.</para>
		</summary>
		<value>
			<para>The connection to a data source. The default value is
   <see langword="null"/> .</para>
		</value>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.OleDb.OleDbCommand.Connection"/> property was changed while a transaction was in progress.</exception>
		<remarks>
			<para>You cannot set the <see cref="System.Data.OleDb.OleDbCommand.Connection"/>, <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> and <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> properties if the current
   connection is performing an execute or fetch operation. </para>
			<para>If you set <see cref="System.Data.OleDb.OleDbCommand.Connection"/> while a 
transaction is in progress and the <see cref="System.Data.OleDb.OleDbCommand.Transaction"/> property is not
null, an <see cref="System.InvalidOperationException"/> is generated. If the <see cref="System.Data.OleDb.OleDbCommand.Transaction"/> property is not null and the
transaction has already been committed or rolled back, <see cref="System.Data.OleDb.OleDbCommand.Transaction"/> is set to null.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.Connection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbCommand.CommandText"/>
		<seealso cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/>
		<seealso cref="System.Data.IDbCommand.CommandType"/>
	</doc><doc for="OleDbCommand.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OleDb.OleDbCommand"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OleDb.OleDbCommand"/> and optionally releases the managed 
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method. 
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.Data.OleDb.OleDbCommand"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OleDbCommand.Dispose Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.OleDbCommand1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbCommand"/> class with the text of the query.</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Data.OleDb.OleDbCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandText"/>
					</term>
					<description>
						<paramref name="cmdText"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/>
					</term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.IDbCommand.CommandType"/>
					</term>
					<description>
						<see langword="Text"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.Connection"/>
					</term>
					<description>null</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.OleDbCommand1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.OleDbCommand3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbCommand"/> class with the text of the query, an
<see cref="System.Data.OleDb.OleDbConnection"/>, and the <see cref="System.Data.OleDb.OleDbCommand.Transaction"/> .</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<param name="connection">An <see cref="System.Data.OleDb.OleDbConnection"/> that represents the connection to a data source.</param>
		<param name="transaction">The transaction in which the <see cref="System.Data.OleDb.OleDbCommand"/> executes.</param>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Data.OleDb.OleDbCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandText"/></term>
					<description><paramref name="cmdText"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.IDbCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.Connection"/></term>
					<description>A
 new <see cref="System.Data.OleDb.OleDbConnection"/> that is the
 value for the <paramref name="connection"/> parameter.</description>
				</item>
			</list>
			<para> You can change the value for any of these parameters by
 setting the related property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.OleDbCommand3" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.IDbCommand.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbCommand.IDbCommand.Parameters">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbCommand.IDbCommand.Transaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbCommand.IDbCommand.CreateParameter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbCommand.IDbCommand.ExecuteReader">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbCommand.IDbCommand.ExecuteReader1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbCommand.Cancel">
		<summary>
			<para>Attempts to cancel the execution of an <see cref="System.Data.OleDb.OleDbCommand"/> .</para>
		</summary>
		<remarks>
			<para>If there is nothing to cancel, nothing happens. However, 
      if there is a command in process, and the attempt to cancel fails, no exception is generated.</para>
		</remarks>
		<example>
			<para>The
      following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>, executes it, then cancels the
      execution. To accomplish this, the method is passed a string that is a SQL
      Select statement and a string to use to connect
      to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.Cancel Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.OleDbCommand">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbCommand"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbCommand"/>
class.</para>
		</summary>
		<remarks>
			<para>The base constructor initializes all fields to their 
      default values. The following table shows initial property values for an instance of <see cref="System.Data.OleDb.OleDbCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandText"/></term>
					<description>empty
            string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OleDb.OleDbCommand.Connection"/></term>
					<description>null</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets
some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.OleDbCommand Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.Transaction">
		<summary>
			<para>Gets or sets the <see cref="System.Data.OleDb.OleDbTransaction"/> within which the <see cref="System.Data.OleDb.OleDbCommand"/>
executes.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.OleDb.OleDbTransaction"/>. The default value is
<see langword="null"/>.
   </para>
		</value>
		<remarks>
			<para>You cannot set the <see cref="System.Data.OleDb.OleDbCommand.Transaction"/> property if it is already set to a
   specific value, and the command is in the process of executing. If you set the
   transaction property to an <see cref="System.Data.OleDb.OleDbTransaction"/> object that is not connected
   to the same <see cref="System.Data.OleDb.OleDbConnection"/> as the <see cref="System.Data.OleDb.OleDbCommand"/> object, an exception will be
   thrown the next time you attempt to execute a statement.</para>
		</remarks>
	</doc>
	<doc for="OleDbCommand.UpdatedRowSource">
		<summary>
			<para> Gets or sets how command results are applied to the <see cref="System.Data.DataRow"/> when used
   by the <see cref="System.Data.Common.DbDataAdapter.Update"/> method of the <see cref="System.Data.Common.DbDataAdapter"/>.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.UpdateRowSource"/> values.</para>
		</value>
		<exception cref="System.ArgumentException">The value entered was not one of the <see cref="System.Data.UpdateRowSource"/> values.</exception>
		<remarks>
			<para>The default <see cref="System.Data.UpdateRowSource"/> value is <see langword="Both"/> unless the command 
   is automatically generated (as in the case of the <see cref="System.Data.OleDb.OleDbCommandBuilder"/> ), in which case the default is
<see langword="None"/>.</para>
			<para>For more information about using the <see cref="System.Data.OleDb.OleDbCommand.UpdatedRowSource"/> property, see <see topic="cpconusingparameterswithdataadapters"/>.</para>
		</remarks>
	</doc>
	<doc for="OleDbCommand.CommandText">
		<summary>
			<para> Gets or
      sets the SQL statement or stored procedure to execute at the data source.</para>
		</summary>
		<value>
			<para> The
      SQL statement or stored procedure to execute. The
      default value is an empty string.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.IDbCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> property should be set to the 
   name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters.
   The command executes this stored procedure when
   you call one of the Execute methods.</para>
			<para>When <see cref="System.Data.IDbCommand.CommandType"/> is set to
<see langword="TableDirect"/>, the <see cref="System.Data.IDbCommand.CommandText"/> property should 
be set to the name of the table or tables to be accessed. The user may be
required to use escape character syntax if any of the tables
named contain any special characters. All rows and columns of the named
table or tables will be returned when you call one of the Execute methods.</para>
			<para>You cannot set
   the <see cref="System.Data.OleDb.OleDbCommand.Connection"/>, <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> and <see cref="System.Data.OleDb.OleDbCommand.CommandText"/>
   
   properties if the
   current connection is performing an execute or fetch operation.</para>
			<para>The OLE DB .NET Provider does not support named
   parameters for passing parameters to an SQL Statement or a stored procedure
   called by an <see cref="System.Data.OleDb.OleDbCommand"/> when <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> is
   set to <see langword="Text"/>
   . In this case, the question mark (?) placeholder must be used.
   For example:</para>
			<para>SELECT * FROM Customers WHERE CustomerID = ?</para>
			<para>As a result, the order in which <see cref="System.Data.OleDb.OleDbParameter"/> objects are added to the <see cref="System.Data.OleDb.OleDbParameterCollection"/>
must directly correspond to the position of the question
mark placeholder for the parameter.</para>
			<para> For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.CommandText Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbCommand.Connection"/>
		<seealso cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/>
		<seealso cref="System.Data.IDbCommand.CommandType"/>
	</doc>
	<doc for="OleDbCommand.CommandType">
		<summary>
			<para>Gets or sets a value indicating how the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> property is interpreted.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.CommandType"/> values. The default is <see cref="System.Data.CommandType.Text"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The value was not a valid <see cref="System.Data.CommandType"/> .</exception>
		<remarks>
			<para>When you set the <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> property to
<see langword="StoredProcedure"/>, you should set the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> 
property to the name of the stored procedure. The command executes this stored
procedure when you call one of the Execute methods.</para>
			<para>The <see cref="System.Data.OleDb.OleDbCommand.Connection"/>, <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> and <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> properties cannot be set if the
current connection is performing an execute or fetch operation. </para>
			<para>The OLE DB .NET Provider does not support named
   parameters for passing parameters to an SQL Statement or a stored procedure
   called by an <see cref="System.Data.OleDb.OleDbCommand"/> when
<see cref="System.Data.OleDb.OleDbCommand.CommandType"/> is 
   set to <see cref="System.Data.CommandType.Text"/>. In this case, the question
   mark (?) placeholder must be used. For example:</para>
			<para>SELECT * FROM Customers WHERE CustomerID = ?</para>
			<para>As a result, the order in which <see cref="System.Data.OleDb.OleDbParameter"/> objects are added to the
<see cref="System.Data.OleDb.OleDbParameterCollection"/> must directly 
correspond to the position of the question mark placeholder for the
parameter. For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class <see cref="System.Data.OleDb.OleDbCommand"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbCommand.CommandType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.IDbCommand.CommandText"/>
		<seealso cref="System.Data.IDbCommand.UpdatedRowSource"/>
	</doc>
	<doc for="OleDbCommand.Parameters">
		<summary>
			<para> Gets the <see cref="System.Data.OleDb.OleDbParameterCollection"/> .</para>
		</summary>
		<value>
			<para>The parameters of the SQL statement or stored procedure. The default is an empty collection.</para>
		</value>
		<remarks>
			<para>The OLE DB .NET Provider does not support named parameters for passing
      parameters to an SQL Statement or a stored procedure called by an <see cref="System.Data.OleDb.OleDbCommand"/> when <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> is set to <see langword="Text"/>
      . In this case, the question mark (?) placeholder must be used. For example:</para>
			<para>SELECT * FROM Customers WHERE CustomerID = ?</para>
			<para>As a result, the order in which <see cref="System.Data.OleDb.OleDbParameter"/> objects are added to the
<see cref="System.Data.OleDb.OleDbParameterCollection"/> must directly 
   correspond to the position of the question mark placeholder
   for the parameter in the command text.</para>
			<note type="note">
   If the parameters in the collection
   do not match the requirements of the query to be executed, an error may
   result.
</note>
For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.
</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/> and displays its parameters. To
   accomplish this, the method is passed an <see cref="System.Data.OleDb.OleDbConnection"/>, a query string that is a
   SQL SELECT statement, and an array of <see cref="System.Data.OleDb.OleDbParameter"/>
   objects.</para>
			<codelink SampleID="Classic WebData OleDbCommand.Parameters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbParameter"/>
	</doc>
	<doc for="OleDbCommand.ExecuteReader1">
		<summary>
			<para>Sends the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> to the <see cref="System.Data.OleDb.OleDbCommand.Connection"/>, and builds an <see cref="System.Data.OleDb.OleDbDataReader"/> using one of the <see cref="System.Data.CommandBehavior"/> values.</para>
		</summary>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/>values.</param>
		<returns>
			<para>An <see cref="System.Data.OleDb.OleDbDataReader"/> object.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Cannot execute a command within a transaction context that differs from the context in which the connection was originally enlisted.</exception>
		<remarks>
			<para>When you specify <see cref="System.Data.CommandBehavior.SingleRow"/> with the <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/> method of the <see cref="System.Data.OleDb.OleDbCommand"/> object, the .NET Framework Data Provider
   for OLE DB performs binding using the OLE DB IRow interface if it
   is available. Otherwise, it uses the IRowset interface. If your SQL statement is
   expected to return only a single row, specifying <see cref="System.Data.CommandBehavior.SingleRow"/> can also improve application
   performance.</para>
			<para>When the <see cref="System.Data.IDbCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/>
property should be set to the name of the stored procedure. The
command executes this stored procedure when you call <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/>.</para>
			<para>The <see cref="System.Data.OleDb.OleDbDataReader"/> supports a special mode that enables large binary
values to be read efficiently. For more information, see the
<see langword="SequentialAccess"/> setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para>While the <see cref="System.Data.OleDb.OleDbDataReader"/> is in use, the
associated <see cref="System.Data.OleDb.OleDbConnection"/> is busy serving the <see cref="System.Data.OleDb.OleDbDataReader"/>.
While in this state, no other operations can be performed on the <see cref="System.Data.OleDb.OleDbConnection"/> other
than closing it. This is the case until you call the <see cref="System.Data.OleDb.OleDbDataReader.Close" qualify="true"/> method. If the
<see cref="System.Data.OleDb.OleDbDataReader"/> is
created with <see cref="System.Data.CommandBehavior"/> set to <see langword="CloseConnection"/>, closing the
<see cref="System.Data.OleDb.OleDbDataReader"/> 
closes the connection automatically.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/> , then executes it by passing a string
   that is a Transact-SQL SELECT statement, and a string to use to connect to the
   data source. <see cref="System.Data.CommandBehavior"/> is set to <see cref="System.Data.CommandBehavior.CloseConnection"/>.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ExecuteReader2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbCommand.ExecuteReader">
		<overload>
			<para> Sends the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> to the <see cref="System.Data.OleDb.OleDbCommand.Connection"/> and builds an <see cref="System.Data.OleDb.OleDbDataReader"/>.</para>
		</overload>
		<summary>
			<para>Sends the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> to the <see cref="System.Data.OleDb.OleDbCommand.Connection"/> and builds an <see cref="System.Data.OleDb.OleDbDataReader"/> .</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OleDb.OleDbDataReader"/> object.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Cannot execute a command within a transaction context that differs from the context in which the connection was originally enlisted.</exception>
		<remarks>
			<para>When the <see cref="System.Data.IDbCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> property should 
   be set to the name of the stored procedure. The command executes this stored
   procedure when you call <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/>.</para>
			<para>While the <see cref="System.Data.OleDb.OleDbDataReader"/> is in use, the associated <see cref="System.Data.OleDb.OleDbConnection"/> is busy serving the <see cref="System.Data.OleDb.OleDbDataReader"/>. While in this state, no other operations can
be performed on the <see cref="System.Data.OleDb.OleDbConnection"/> other than closing it. This is the case until
the <see cref="System.Data.OleDb.OleDbDataReader.Close"/> method of the <see cref="System.Data.OleDb.OleDbDataReader"/> is called.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
, then executes it by passing a string that is
an SQL SELECT statement, and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ExecuteReader1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbCommand.Prepare">
		<summary>
			<para>Creates a prepared (or compiled) version of the command on the data
      source.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>The <see cref="System.Data.OleDb.OleDbCommand.Connection"/> is not set.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OleDb.OleDbCommand.Connection"/> is not open.</para></exception>
		<remarks>
			<para> If the <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> property is set to
<see langword="TableDirect"/>, <see cref="System.Data.OleDb.OleDbCommand.Prepare"/> does nothing. 
   If <see cref="System.Data.OleDb.OleDbCommand.CommandType"/> is set to <see langword="StoredProcedure"/>, the call
   to <see cref="System.Data.OleDb.OleDbCommand.Prepare"/> should succeed, although it may result in a no-op.</para>
			<para>Before you call <see cref="System.Data.OleDb.OleDbCommand.Prepare"/>, specify
the data type of each parameter in the statement to be prepared. For each
parameter that has a variable length data type, you must set
the <see cref="System.Data.OleDb.OleDbParameter.Size"/> property to the maximum size
needed. <see cref="System.Data.OleDb.OleDbCommand.Prepare"/>
returns an error if these conditions are not met.</para>
			<para>If you call an Execute method after calling
<see cref="System.Data.OleDb.OleDbCommand.Prepare"/>, any parameter value that is 
   larger than the value specified by the <see cref="System.Data.OleDb.OleDbParameter.Size"/>
   property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.</para>
			<para>Output parameters (whether prepared
   or not) must have a user-specified data type. If you specify a variable length
   data type, you must also specify the maximum <see cref="System.Data.OleDb.OleDbParameter.Size"/>
   .</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/> and
   opens the connection. The example then prepares a stored procedure on the data
   source by passing a string that is a SQL Select statement and a string to use to
   connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.Prepare Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.DesignTimeVisible">
		<summary>
			<para> Gets or sets a value indicating whether the command object should be visible in
      a customized Windows Forms Designer control.</para>
		</summary>
		<value>
			<para> A value indicating whether the command object should be visible in a
      control. The default is <see langword="true"/>.</para>
		</value>
	</doc><doc for="OleDbCommand">
		<summary>
			<para>Represents an SQL statement or stored procedure to execute against a data source.</para>
		</summary>
		<remarks>
			<para>When an instance of <see cref="System.Data.OleDb.OleDbCommand"/> is created, the read/write properties are
   set to their initial values. For a list of these values, see the <see cref="System.Data.OleDb.OleDbCommand"/>
   constructor.</para>
			<para><see cref="System.Data.OleDb.OleDbCommand"/>
features the
following methods executing commands at a data source:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/></term>
					<description> Executes commands that return
      rows. <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/> may not have the desired
      effect if used to execute commands such as SQL SET
      statements. </description>
				</item>
				<item>
					<term><see cref="System.Data.OleDb.OleDbCommand.ExecuteNonQuery"/></term>
					<description>Executes commands such as SQL INSERT, DELETE,
   UPDATE, and SET statements.</description>
				</item>
				<item>
					<term><see cref="System.Data.OleDb.OleDbCommand.ExecuteScalar"/></term>
					<description>Retrieves a single value (for example, an aggregate
   value) from a database.</description>
				</item>
			</list>
			<para>You can reset the <see cref="System.Data.OleDb.OleDbCommand.CommandText"/> property and reuse
the <see cref="System.Data.OleDb.OleDbCommand"/> object. However, you must close
the <see cref="System.Data.OleDb.OleDbDataReader"/> before you
can execute a new or previous command.</para>
			<para>If a fatal <see cref="System.Data.OleDb.OleDbException"/> (for example, a SQL Server severity level of
20 or greater) is
generated by the method executing an <see cref="System.Data.OleDb.OleDbCommand"/>, the <see cref="System.Data.OleDb.OleDbConnection"/>, the connection may be closed. However, the
user can reopen the connection and continue.</para>
			<para>When querying an Oracle database using the Microsoft OLE DB Provider for 
   Oracle (MSDAORA) and the OLE DB .NET Data Provider, using the LIKE clause to
   query values in fixed-length fields may not return all expected matches. For
   example, if a table in an Oracle database contain a field named "Field1" that is
   defined as char(3), and you enter the value "a" into a row of that table, the
   following code will fail to return the row.</para>
			<code lang="VB">Dim sql As String = "SELECT * FROM Table1 WHERE Field1 LIKE ?"
Dim cmd As OleDbCommand = New OleDbCommand(sql, oracleConn)
cmd.Parameters.Add("@p1", OleDbType.Char, 3).Value = "a"
Dim dr As OleDbDataReader = cmd.ExecuteReader()
</code>
			<code lang="C#">string sql = "SELECT * FROM Table1 WHERE Field1 LIKE ?";
OleDbCommand cmd = new OleDbCommand(sql, oracleConn);
cmd.Parameters.Add("@p1", OleDbType.Char, 3).Value = "a";
OleDbDataReader dr = cmd.ExecuteReader();
</code>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.OleDb.OleDbCommand"/>,
   along <see cref="System.Data.OleDb.OleDbDataAdapter"/> and <see cref="System.Data.OleDb.OleDbConnection"/> , to select rows from an
   Access database. The filled <see cref="System.Data.DataSet"/>
   is then returned. The example is passed an initialized <see cref="System.Data.DataSet"/>, a connection
   string, a query string that is an SQL SELECT statement, and a string that is the name of the source database table.</para>
			<codelink SampleID="Classic WebData OleDbCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter"/>
		<seealso cref="System.Data.OleDb.OleDbConnection"/>
	</doc><doc for="OleDbCommand.ExecuteNonQuery">
		<summary>
			<para> Executes a SQL statement against the <see cref="System.Data.OleDb.OleDbCommand.Connection"/> and returns the number of rows
   affected.</para>
		</summary>
		<returns>
			<para>The number of rows affected.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The connection does not exist.</para>
			<para>-or-</para>
			<para>The connection is not open.</para>
			<para>-or-</para>Cannot execute a command within a transaction context that differs from the context in which the connection was originally enlisted.</exception>
		<remarks>
			<para>You can use the <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> to perform catalog operations
   (for example, querying the structure of a database or creating database objects
   such as tables), or to change the data in a database without using
   a <see cref="System.Data.DataSet"/> by executing
   UPDATE, INSERT, or DELETE statements.</para>
			<para>Although the <see cref="System.Data.OleDb.OleDbCommand.ExecuteNonQuery"/> does not return any rows, any
output parameters or return values mapped to parameters are populated with
data.</para>
			<para> For UPDATE, INSERT, and DELETE statements, the return 
   value is the
   number of rows affected by the command. For all other types of statements,
   the return value is -1. If a rollback occurs, the return value is also
   -1.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and then executes it using <see cref="System.Data.OleDb.OleDbCommand.ExecuteNonQuery"/> . The example is passed a string that is an SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ExecuteNonQuery Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbCommand.ExecuteScalar">
		<summary>
			<para>Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
		</summary>
		<returns>
			<para>The first column of the first row in the result set, or a null reference if the result set is empty.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Cannot execute a command within a transaction context that differs from the context in which the connection was originally enlisted.</exception>
		<remarks>
			<para>Use the <see cref="System.Data.OleDb.OleDbCommand.ExecuteScalar"/> method to retrieve a single
   value (for example, an aggregate value) from a data source. This requires less
   code than using the <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value using the data returned by an <see cref="System.Data.OleDb.OleDbDataReader"/> . </para>
			<para>A typical <see cref="System.Data.OleDb.OleDbCommand.ExecuteScalar"/> query can be formatted as in the following C# example:</para>
			<code>
CommandText = "select count(*) from region";
Int32 count = (int32) ExecuteScalar();
</code>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbCommand"/>
and then executes it using <see cref="System.Data.OleDb.OleDbCommand.ExecuteScalar"/> . The
example is passed a string that is an SQL statement that returns an aggregate result, and
a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OleDbCommand.ExecuteScalar" SnippetID="1"/>
		</example>
	</doc></docs>
