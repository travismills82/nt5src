<docs>
	<doc for="OleDbDataReader.GetStream">
		<summary>
			<para>
       Not currently supported.
    </para>
		</summary>
	</doc>
	<doc for="OleDbDataReader.GetDefaultStream">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OleDbDataReader.CreateAccessors">
		<summary>
     Create the dbBindings and accessor for the rowset
     If a column is not listed (i.e. filtered out) in the columnsInfo we don't get the data for the column

     databuffer layout has all the length and status fields first followed by all the values at the end of the buffer
          { Length  (size=4), Status  (size=4) } (repeat for all columns)
          Value   (variable size, buffered to start on a 16-byte boundary)
 </summary>
	</doc>
	<doc for="OleDbDataReader.GetRowHandles">
		<summary>
		</summary>
	</doc>
	<doc for="OleDbDataReader.GetRowDataFromHandle">
		<summary>
		</summary>
	</doc>
	<doc for="OleDbDataReader.ReleaseRowHandles">
		<summary>
 release the row handles obtained earlier
 </summary>
	</doc>
	<doc for="OleDbDataReader.GetFieldType">
		<summary>
			<para>Gets the <see cref="System.Type"/>
that is the data type of the object.</para>
		</summary>
		<param name="index">The zero-based column ordinal. </param>
		<returns>
			<para>The <see cref="System.Type"/>
that is the data type of the object.</para>
		</returns>
	</doc>
	<doc for="OleDbDataReader.GetDataTypeName">
		<summary>
			<para>Gets the name of the source data type.</para>
		</summary>
		<param name="index">The zero-based column ordinal. </param>
		<returns>
			<para>The name of the back-end data type.</para>
		</returns>
	</doc>
	<doc for="OleDbDataReader.GetName">
		<summary>
			<para>Gets the name of the specified column.</para>
		</summary>
		<param name="index">The zero-based column ordinal. </param>
		<returns>
			<para>The name of the specified column.</para>
		</returns>
		<seealso cref="System.Data.OleDb.OleDbDataReader.GetOrdinal"/>
	</doc>
	<doc for="OleDbDataReader.Finalize">
		<summary>
			<para>Frees resources before the <see cref="System.Data.OleDb.OleDbDataReader"/> is reclaimed by the 
   Garbage Collector.</para>
		</summary>
	</doc>
	<doc for="OleDbDataReader.Read">
		<summary>
			<para>Advances the <see cref="System.Data.OleDb.OleDbDataReader"/>
to the next record.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more rows; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default position of the <see cref="System.Data.OleDb.OleDbDataReader"/> is prior to the first record.
   Therefore, you must call <see cref="System.Data.OleDb.OleDbDataReader.Read"/>
   to
   begin accessing any data.</para>
			<para>While the <see cref="System.Data.OleDb.OleDbDataReader"/> is in use, the 
associated <see cref="System.Data.OleDb.OleDbConnection"/> is
busy serving it until you call <see cref="System.Data.OleDb.OleDbDataReader.Close"/> .</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/>, an <see cref="System.Data.OleDb.OleDbCommand"/>, and an <see cref="System.Data.OleDb.OleDbDataReader"/>. The example reads through the data, writing it out to the console. Finally, the example closes the <see cref="System.Data.OleDb.OleDbDataReader"/>, then the <see cref="System.Data.OleDb.OleDbConnection"/>.</para>
			<codelink SampleID="Classic WebData IDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbDataReader.IsClosed">
		<summary>
			<para> Indicates whether the data reader
      is closed.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if
   the <see cref="System.Data.OleDb.OleDbDataReader"/> is closed;
   otherwise, <see langword="false"/> .
   </para>
		</value>
		<remarks>
			<para><see cref="System.Data.OleDb.OleDbDataReader.IsClosed"/> 
and <see cref="System.Data.OleDb.OleDbDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.OleDb.OleDbDataReader"/> is closed. </para>
		</remarks>
	</doc><doc for="OleDbDataReader.Depth">
		<summary>
			<para> Gets a value indicating the depth of nesting for the current row.</para>
		</summary>
		<value>
			<para> The depth of nesting for the current row.</para>
		</value>
		<remarks>
			<para>The outermost table has a depth of zero.</para>
		</remarks>
	</doc><doc for="OleDbDataReader.GetIndexTable">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataReader.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataReader.IDataRecord.GetData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataReader.NextResult">
		<summary>
			<para> Advances the data reader to the next result, when reading the results of
      batch SQL statements.
      </para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more result sets; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Used to process multiple results, which can be generated by executing
      batch SQL statements.
      </para>
			<para> By default, the data reader is positioned on the first result.
      </para>
		</remarks>
	</doc><doc for="OleDbDataReader.RecordsAffected">
		<summary>
			<para> Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</para>
		</summary>
		<value>
			<para>The number of rows changed, inserted, or deleted; 0
      if no rows were affected or the statement failed; and -1 for SELECT statements.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.OleDb.OleDbDataReader.RecordsAffected"/>
property is not set until all rows are read and you close the <see cref="System.Data.OleDb.OleDbDataReader"/>.</para>
			<para>The value of this property is cumulative. For example, if two records are 
   inserted in batch mode, the value of <see langword="RecordsAffected"/> will be
   two.</para>
			<para><see cref="System.Data.OleDb.OleDbDataReader.IsClosed"/>
and <see cref="System.Data.OleDb.OleDbDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.OleDb.OleDbDataReader"/> is closed.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.Dispose">
		<internalonly/>
		<summary>
			<para>Releases the resources consumed by this <see cref="System.Data.OleDb.OleDbDataReader"/>.</para>
		</summary>
	</doc>
	<doc for="OleDbDataReader.GetValue">
		<overload>
			<para>Gets the value of the specified column in its native format.</para>
		</overload>
		<summary>
			<para> Gets the
      value of the column at the specified ordinal in its native format.</para>
		</summary>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value to return.</para>
		</returns>
		<remarks>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetValues">
		<summary>
			<para> Gets all the attribute columns in the current
      row.</para>
		</summary>
		<param name="values">An array of <see cref="System.Object"/> into which to copy the attribute columns.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, the <see cref="System.Data.OleDb.OleDbDataReader.GetValues"/> method provides an efficient means for retrieving all columns, rather than retrieving
   each column individually.</para>
			<para>You can pass an <see cref="System.Object"/> array that contains fewer than the
number of columns contained in the resulting row. Only the amount of data
the <see cref="System.Object"/> array
holds is copied to the array. You can also pass an <see cref="System.Object"/>
array whose length is more than the
number of columns contained in the resulting row.</para>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader">
		<summary>
			<para> Provides a way of reading
      a forward-only stream of data rows from a data source. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para>To create an <see cref="System.Data.OleDb.OleDbDataReader"/> , you must call
   the <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/> method of the <see cref="System.Data.OleDb.OleDbCommand"/>
   
   object, rather than directly using a constructor.</para>
			<para>While the <see cref="System.Data.OleDb.OleDbDataReader"/> is in use, the
associated <see cref="System.Data.OleDb.OleDbConnection"/> is busy serving the <see cref="System.Data.OleDb.OleDbDataReader"/>
, and no other operations can be performed on the <see cref="System.Data.OleDb.OleDbConnection"/>
other
than closing it. This is the case until the <see cref="System.Data.OleDb.OleDbDataReader.Close"/> method of the <see cref="System.Data.OleDb.OleDbDataReader"/> is called. For
example, you cannot retrieve output parameters until after you call
<see cref="System.Data.OleDb.OleDbDataReader.Close"/> .</para>
			<para>Changes made to a resultset by another process or thread while data is being
   read may be visible to the user of the <see langword="OleDbDataReader"/>.
   However, the precise behavior is timing dependent.</para>
			<para><see cref="System.Data.OleDb.OleDbDataReader.IsClosed"/> and <see cref="System.Data.OleDb.OleDbDataReader.RecordsAffected"/> are the
only properties that you can call after the <see cref="System.Data.OleDb.OleDbDataReader"/> is closed. Though the
<see cref="System.Data.OleDb.OleDbDataReader.RecordsAffected"/> property may be accessed at 
any time while the <see cref="System.Data.OleDb.OleDbDataReader"/> exists, always call <see cref="System.Data.OleDb.OleDbDataReader.Close"/> before returning the value of <see cref="System.Data.OleDb.OleDbDataReader.RecordsAffected"/>
to ensure an accurate return value.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/>, an <see cref="System.Data.OleDb.OleDbCommand"/>,
   and an <see cref="System.Data.OleDb.OleDbDataReader"/>. The example reads through the data, writing it
   out to the console. Finally, the example closes the <see cref="System.Data.OleDb.OleDbDataReader"/>,
   then the <see cref="System.Data.OleDb.OleDbConnection"/>.</para>
			<codelink SampleID="Classic WebData OleDbDataReader Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbDataReader.GetDouble">
		<summary>
			<para>Gets the value of the specified column as a double-precision floating point number.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are
      performed, therefore the data retrieved must already be a double-precision floating point
      number.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc><doc for="OleDbDataReader.GetFloat">
		<summary>
			<para>Gets the value of the specified column as a single-precision floating point number.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are
      performed, therefore the data retrieved must already be a single-precision floating point
      number.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc><doc for="OleDbDataReader.FieldCount">
		<summary>
			<para> Gets the number of columns in the current row.
      </para>
		</summary>
		<value>
			<para> When not positioned in a valid recordset, 0; otherwise the number of columns
      in the current record. The default is -1.
      </para>
		</value>
		<exception cref="System.NotSupportedException">There is no current connection to a data source . </exception>
		<remarks>
			<para>After executing a query that does not return rows, <see cref="System.Data.OleDb.OleDbDataReader.FieldCount"/>
returns 0. </para>
		</remarks>
	</doc><doc for="OleDbDataReader.IsDBNull">
		<summary>
			<para> Gets a value indicating whether the column contains non-existent or missing values.
      </para>
		</summary>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para><see langword="true"/> if the specified
   column value is equivalent to <see cref="System.DBNull"/> ;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Call this method to check for null column values before calling the typed get methods
      (for example, <see cref="System.Data.OleDb.OleDbDataReader.GetByte"/>, <see cref="System.Data.OleDb.OleDbDataReader.GetChar"/>, and so on) to avoid raising an
      error.</para>
		</remarks>
	</doc><doc for="OleDbDataReader.GetData">
		<nodoc/>
		<summary>
			<para> Not currently supported.
      </para>
		</summary>
		<param name="ordinal">The zero-based column ordinal. </param>
	</doc><doc for="OleDbDataReader.this">
		<overload>
			<para> Gets the value of
      a column in its native format.
      </para>
		</overload>
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column ordinal.
      </para>
		</summary>
		<param name="index">The column ordinal. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="OleDbDataReader.this1">
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column name.
      </para>
		</summary>
		<param name="name">The column name. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">No column with the specified name was found.</exception>
		<remarks>
			<para>A case-sensitive lookup is performed first. If it fails, a second
      case-insensitive search is made.</para>
			<para>This method is kana-width insensitive.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.HasRows">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.OleDb.OleDbDataReader"/> contains one or more rows.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.OleDb.OleDbDataReader"/> contains one or more rows;
   otherwise <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="OleDbDataReader.Close">
		<summary>
			<para>Closes the <see cref="System.Data.OleDb.OleDbDataReader"/> object.</para>
		</summary>
		<remarks>
			<para>You must explicitly call the <see cref="System.Data.OleDb.OleDbDataReader.Close"/> method when you are through
   using the <see cref="System.Data.OleDb.OleDbDataReader"/> to use the
   associated <see cref="System.Data.OleDb.OleDbConnection"/> for any other purpose.</para>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbConnection"/>, an <see cref="System.Data.OleDb.OleDbCommand"/>, and an <see cref="System.Data.OleDb.OleDbDataReader"/>. The example reads through the data, writing it out to the console. Finally, the example closes the <see cref="System.Data.OleDb.OleDbDataReader"/>, then the <see cref="System.Data.OleDb.OleDbConnection"/>.</para>
			<codelink SampleID="Classic WebData IDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OleDbDataReader.GetBoolean">
		<summary>
			<para>Gets the value of the specified column as a Boolean.</para>
		</summary>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the column.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a Boolean or an exception is
      generated.</para>
			<para> Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetByte">
		<summary>
			<para>Gets the value of the specified column as a byte.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a byte.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      byte.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetBytes">
		<summary>
			<para> Reads a stream of bytes from the specified column offset into
      the
      buffer as an array starting at the given buffer offset.</para>
		</summary>
		<param name="ordinal">The zero-based column ordinal. </param>
		<param name=" dataIndex">The index within the field from which to begin the read operation. </param>
		<param name=" buffer">The buffer into which to read the stream of bytes. </param>
		<param name=" bufferIndex">The index for <paramref name="buffer"/> to begin the read operation. </param>
		<param name=" length">The maximum length to copy into the buffer. </param>
		<returns>
			<para>The actual number of bytes read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.OleDb.OleDbDataReader.GetBytes"/>
returns the number of available bytes in the field. In most cases this is the
exact length of the field. However, the number returned may be less than the
true length of the field if <see langword="GetBytes"/> has already been used to
obtain bytes from the field. This may be the case, for example, when the
OleDbDataReader is reading a large data structure into a buffer. For more
information, see the <see langword="SequentialAccess"/>
setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para>
   If you pass a buffer
   that is <see langword="null"/>, <see cref="System.Data.OleDb.OleDbDataReader.GetBytes"/>
   returns the length of the field in
   bytes.</para>
			<para>No conversions are performed; therefore the data retrieved must already be a
   byte array.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetChars">
		<summary>
			<para>Reads a stream of characters from the specified column offset
      into the buffer as an array starting at the given buffer offset.</para>
		</summary>
		<param name="ordinal">The zero-based column ordinal. </param>
		<param name=" dataIndex">The index within the row from which to begin the read operation. </param>
		<param name=" buffer">The buffer into which to copy data. </param>
		<param name=" bufferIndex">The index for <paramref name="buffer"/> to begin the read operation. </param>
		<param name=" length">The number of characters to read. </param>
		<returns>
			<para>The actual number of characters read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.OleDb.OleDbDataReader.GetChars"/> returns the number of
   available characters in the field. In most cases this is the exact length of the
   field. However, the number returned may be less than the true length of the
   field if <see langword="GetChars"/> has already been used to
   obtain characters from the field. This may be the case, for example, when the
<see cref="System.Data.OleDb.OleDbDataReader"/> 
is
reading a large data structure into a buffer. For more information, see the
<see langword="SequentialAccess"/> setting for <see cref="System.Data.CommandBehavior"/>. </para>
			<para>
   If you pass a buffer
   that is <see langword="null"/>, <see cref="System.Data.OleDb.OleDbDataReader.GetChars"/> returns the length of the
   field in characters.</para>
			<para>No
   conversions are performed; therefore the data retrieved must already be a character
   array.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetChar">
		<summary>
			<para>Gets the value of the specified column as a character.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      character.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetDateTime">
		<summary>
			<para>Gets the value of the specified column as
      a <see cref="System.DateTime"/>
      object.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.DateTime"/>
      object.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetDecimal">
		<summary>
			<para>Gets the value of the specified column as
      a <see cref="System.Decimal"/>
      object.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.Decimal"/>
      object.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetGuid">
		<summary>
			<para>Gets the value of the specified column as a globally-unique identifier (GUID).</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No
      conversions are performed; therefore the data retrieved must already be a globally-unique
      identifier.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetInt16">
		<summary>
			<para>Gets the
      value of the specified column as a 16-bit signed integer.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions
      are performed; therefore the data retrieved must already be a 16-bit signed
      integer.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetInt32">
		<summary>
			<para>Gets the
      value of the specified column as a 32-bit signed integer.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions
      are performed; therefore the data retrieved must already be a 32-bit signed
      integer.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetInt64">
		<summary>
			<para>Gets the
      value of the specified column as a 64-bit signed integer.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions
      are performed; therefore the data retrieved must already be a 64-bit signed
      integer.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetString">
		<summary>
			<para>Gets the value of the specified column as a string.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      string.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetTimeSpan">
		<summary>
			<para>Gets the value of the specified column as
      a <see cref="System.TimeSpan"/>
      object.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="ordinal">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.TimeSpan"/>
      object.</para>
			<para>Call <see cref="System.Data.OleDb.OleDbDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="OleDbDataReader.GetOrdinal">
		<summary>
			<para>Gets the column ordinal, given the name of the column.</para>
		</summary>
		<param name="name">The name of the column.</param>
		<returns>
			<para>The zero-based column ordinal.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The name specified is not a valid column name.</exception>
		<remarks>
			<para><see langword="GetOrdinal"/> performs a case-sensitive lookup first. If it
   fails, a second case-insensitive search is made.</para>
			<para><see langword="GetOrdinal"/> is kana-width insensitive.</para>
			<para>Because ordinal-based lookups are more efficient than named lookups, it is
   inefficient to call <see langword="GetOrdinal"/> within a loop. Save time by
   calling <see langword="GetOrdinal"/> once and assigning the results to an integer
   variable for use within the loop.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Data.OleDb.OleDbDataReader.GetOrdinal"/> 
method.</para>
			<codelink SampleID="Classic WebData OleDbDataReader.GetOrdinal" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataReader.GetName"/>
	</doc><doc for="OleDbDataReader.GetSchemaTable">
		<summary>
			<para>Returns a <see cref="System.Data.DataTable"/> that describes the column metadata
   of the <see cref="System.Data.OleDb.OleDbDataReader"/>. </para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.DataTable"/> that describes the column metadata.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.OleDb.OleDbDataReader"/> is closed.</exception>
		<remarks>
			<para> The <see cref="System.Data.OleDb.OleDbDataReader.GetSchemaTable"/> method maps to the OLE DB
   IColumnsRowset::GetColumnsRowset method, and returns metadata about each column
   in the following order:</para>
			<list type="table">
				<listheader>
					<term>DataReader Column</term>
					<description>OLE DB Column ID </description>
					<description>Description</description>
				</listheader>
				<item>
					<term> ColumnName</term>
					<description>DBCOLUMN_NAME</description>
					<description> The name of the column; this might not be unique. If this cannot be determined, a null value is returned. This name always reflects the most recent renaming of the column in the current view or command text.</description>
				</item>
				<item>
					<term> ColumnOrdinal</term>
					<description>DBCOLUMN_NUMBER</description>
					<description>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other columns are numbered starting with one. This column cannot contain a null value.</description>
				</item>
				<item>
					<term> ColumnSize</term>
					<description>DBCOLUMN_COLUMNSIZE</description>
					<description>The maximum possible length of a value in the column. For columns that use a fixed-length data type, this is the size of the data type. </description>
				</item>
				<item>
					<term> NumericPrecision</term>
					<description>DBCOLUMN_PRECISION</description>
					<description>If
         DbType is a numeric data type, this is the maximum precision of the column. The precision of columns with a data type of DBTYPE_DECIMAL or DBTYPE_NUMERIC depends on the definition of the column. If DbType is not a numeric data type, this is a null value.</description>
				</item>
				<item>
					<term> NumericScale</term>
					<description>DBCOLUMN_SCALE</description>
					<description>If
         DbType is DBTYPE_DECIMAL or DBTYPE_NUMERIC, this is the number of digits to the right of the decimal point. Otherwise, this is a null value.</description>
				</item>
				<item>
					<term> DataType</term>
					<description>None</description>
					<description>Maps to the .NET Framework type of the
         column.</description>
				</item>
				<item>
					<term> ProviderType</term>
					<description>DBCOLUMN_TYPE</description>
					<description>The indicator of the column's data type. If the data type of the column varies from row to row, this must be DBTYPE_VARIANT. This column cannot contain a null value. </description>
				</item>
				<item>
					<term> IsLong</term>
					<description>DBCOLUMNFLAGS_ISLONG</description>
					<description>
						<para> The provider sets DBCOLUMNFLAGS_ISLONG if the
            column contains a Binary Long Object (BLOB) that contains very long data.
            The definition of very long data is
            provider-specific. The setting of this flag corresponds to the value of
            the IS_LONG column in the PROVIDER_TYPES rowset for the data
            type.</para></description>
				</item>
				<item>
					<term> AllowDBNull</term>
					<description>DBCOLUMNFLAGS_ISNULLABLE</description>
					<description>
						<para>The provider sets DBCOLUMNFLAGS_ISNULLABLE if the consumer can set the column to a null value, or if the provider
               cannot determine whether or not the consumer can set the column to
               a null value. A column may contain null values, even if it cannot be
               set to a null value.</para></description>
				</item>
				<item>
					<term> IsReadOnly</term>
					<description>DBCOLUMNFLAGS_WRITE</description>
					<description>
						<para><see langword="true"/> if the column cannot be modified;
               otherwise <see langword="false"/>. The column is assumed to be writable if
               the provider has set either the DBCOLUMNFLAGS_WRITE or
               DBCOLUMNFLAGS_WRITEUNKNOWN flag.</para></description>
				</item>
				<item>
					<term> IsRowVersion</term>
					<description>DBCOLUMNFLAGS_ISROWID</description>
					<description>
						<para>The provider sets DBCOLUMNFLAGS_ISROWID if the column contains a persistent row
                  identifier that cannot be written to, and has no meaningful value except
                  to identity the row.</para></description>
				</item>
				<item>
					<term> IsUnique</term>
					<description>DBCOLUMN_ISUNIQUE</description>
					<description>VARIANT_TRUE: No two rows in the base table-the table returned in BaseTableName-can have the same value in this column. IsUnique is guaranteed to be VARIANT_TRUE if the column constitutes a key by itself or if there is a constraint of type UNIQUE that applies only to this column. VARIANT_FALSE: The column can contain duplicate values in the base table. The default of this column is VARIANT_FALSE.</description>
				</item>
				<item>
					<term> IsKey</term>
					<description>DBCOLUMN_KEYCOLUMN</description>
					<description>VARIANT_TRUE: The column is one of a set of columns in the rowset that, taken together, uniquely identify the row. The set of columns with IsKey set to VARIANT_TRUE must uniquely identify a row in the rowset. There is no requirement that this set of columns is a minimal set of columns. This set of columns may be generated from a base table primary key, a unique constraint or a unique index. VARIANT_FALSE-The column is not required to uniquely identify the row.</description>
				</item>
				<item>
					<term> IsAutoIncrement</term>
					<description>DBCOLUMN_ISAUTOINCREMENT</description>
					<description>VARIANT_TRUE: The column assigns values to new rows in fixed increments. VARIANT_FALSE: The column does not assign values to new rows in fixed increments. The default of this column is VARIANT_FALSE.</description>
				</item>
				<item>
					<term> BaseSchemaName</term>
					<description>DBCOLUMN_BASESCHEMANAME</description>
					<description>The name of the schema in the data store that contains the column. A null value if the base schema name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseCatalogName</term>
					<description>DBCOLUMN_BASECATALOGNAME</description>
					<description>The name of the catalog in the data store that contains the column. A null value if the base catalog name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseTableName</term>
					<description>DBCOLUMN_BASETABLENAME</description>
					<description>The name of the table or view in the data store that contains the column. A null value if the base table name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseColumnName</term>
					<description>DBCOLUMN_BASECOLUMNNAME</description>
					<description>The name of the column in the data store. This might be different than the column name returned in the ColumnName column if an alias was used. A null value if the base column name cannot be determined or if the rowset column is derived, but not identical to, a column in the data store. The default of this column is a null value.</description>
				</item>
			</list>
			<note type="note">
            To ensure that metadata
            columns return the correct information, you must call <see cref="System.Data.OleDb.OleDbCommand.ExecuteReader"/> with the <paramref name="behavior"/> parameter
            set to <SpecialLocalizableItem kind="UIElement">KeyInfo</SpecialLocalizableItem> . Otherwise, some of the columns in the schema table may return default, null, or incorrect data.
         
      </note>
		</remarks>
	</doc></docs>
