<docs>
	<doc for="OleDbDataAdapter.CreateRowUpdatedEvent">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="OleDbDataAdapter.CreateRowUpdatingEvent">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="OleDbDataAdapter.OnRowUpdated">
		<overload>
			<para>
       Raises the <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> event.
    </para>
		</overload>
		<summary>
			<para>
       Raises the <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> event using an <see cref="System.Data.OleDb.OleDbRowUpdatedEventArgs"/>
       object.
    </para>
		</summary>
		<param name="ruevent">
    An <see cref="System.Data.OleDb.OleDbRowUpdatedEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
       .
    </para>
			<note type="inheritinfo">
       When
       overriding <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> in a derived class, be sure
       to call the base class's <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> method.
    </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/>
	</doc>
	<doc for="OleDbDataAdapter.OnRowUpdating">
		<overload>
			<para>
       Raises the <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> event.
    </para>
		</overload>
		<summary>
			<para>
       Raises the <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> event using an <see cref="System.Data.OleDb.OleDbRowUpdatingEventArgs"/>
       object.
    </para>
		</summary>
		<param name="ruevent">
    An <see cref="System.Data.OleDb.OleDbRowUpdatingEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
       .
    </para>
			<note type="inheritinfo">
       When
       overriding <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> in a derived class, be sure
       to call the bases class's <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> method.
    </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/>
	</doc>
	<doc for="OleDbDataAdapter.OleDbDataAdapter">
		<overload>
			<para>Initializes a new
      instance of the <see cref="System.Data.OleDb.OleDbDataAdapter"/>
      class.</para>
		</overload>
		<summary>
			<para>Initializes a new
      instance of the <see cref="System.Data.OleDb.OleDbDataAdapter"/>
      class.</para>
		</summary>
		<remarks>
			<para>When you create an instance of <see cref="System.Data.OleDb.OleDbDataAdapter"/>, the following read/write properties
   are set to the
   following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of
   its properties.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.OleDbDataAdapter Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="OleDbDataAdapter.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OleDb.OleDbDataAdapter"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OleDb.OleDbDataAdapter"/> and optionally releases the managed 
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method. 
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.Data.OleDb.OleDbDataAdapter"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>. </para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.Dispose Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbDataAdapter.IDbDataAdapter.DeleteCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataAdapter.IDbDataAdapter.InsertCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataAdapter.IDbDataAdapter.SelectCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataAdapter.IDbDataAdapter.UpdateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OleDbDataAdapter.OnRowUpdating1">
		<summary>
			<para> Raises the <see cref="System.Data.OleDb.OleDbDataAdapter.RowUpdating"/> event using a <see cref="System.Data.Common.RowUpdatingEventArgs"/>
object.</para>
		</summary>
		<param name="value">A <see cref="System.Data.Common.RowUpdatingEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
      .
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> in a derived class, be sure
      to call the bases class's <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/>
	</doc><doc for="OleDbDataAdapter.RowUpdated">
		<summary>
			<para>Occurs during <see cref="System.Data.Common.DbDataAdapter.Update"/> after a command is executed against the data
   source.
   The attempt to update is made, so the event fires.</para>
		</summary>
		<remarks>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>, there are two events that
   occur per data row updated. The order of execution is as follows:</para>
			<list type="number">
				<item>
					<term>The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>The command executes.</term>
				</item>
				<item>
					<term>If the command is set to FirstReturnedRecord, then the first returned
      result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is
   raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows the <see cref="System.Data.OleDb.OleDbDataAdapter.RowUpdating"/>
 and <see cref="System.Data.OleDb.OleDbDataAdapter.RowUpdated"/> events in use.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.RowUpdated Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbDataAdapter.RowUpdating">
		<summary>
			<para>Occurs during <see cref="System.Data.Common.DbDataAdapter.Update"/> before a command is
   executed against the data source. The attempt to update is made, so the event
   fires.</para>
		</summary>
		<remarks>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>, there are two events that
   occur per data row updated. The order of execution is as follows:</para>
			<list type="number">
				<item>
					<term>The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>The command executes.</term>
				</item>
				<item>
					<term>If the command is set to FirstReturnedRecord, then the first returned
      result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is
   raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows the <see cref="System.Data.OleDb.OleDbDataAdapter.RowUpdating"/>
 and <see cref="System.Data.OleDb.OleDbDataAdapter.RowUpdated"/> events in use.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.RowUpdated Example" SnippetID="1"/>
		</example>
	</doc><doc for="OleDbDataAdapter.OnRowUpdated1">
		<summary>
			<para> Raises the <see cref="System.Data.OleDb.OleDbDataAdapter.RowUpdated"/> event using a <see cref="System.Data.Common.RowUpdatedEventArgs"/>
object.</para>
		</summary>
		<param name="value">A <see cref="System.Data.Common.RowUpdatedEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> in a derived class, be sure
      to call the base class's <see cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdated"/> method.
      
      </note>
		</remarks>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.OnRowUpdating"/>
	</doc>
	<doc for="OleDbDataAdapter.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OleDbDataAdapter.DeleteCommand">
		<summary>
			<para>Gets or sets an SQL statement or stored procedure for deleting records from the data set.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OleDb.OleDbCommand"/> used during <see cref="System.Data.Common.DbDataAdapter.Update"/> to delete records in the data
   source that correspond to deleted rows in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/> can be generated
   automatically if you set the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property and use the
<see cref="System.Data.OleDb.OleDbCommandBuilder"/>.
   Then, any additional commands that you do not set are generated by the
<see cref="System.Data.OleDb.OleDbCommandBuilder"/>. This generation logic requires key column information to be
   present in the <see cref="System.Data.DataSet"/>. For more information
   see <see topic="cpconAutomaticallyGeneratedCommands"/>.</para>
			<para>When <see cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/> is assigned to a previously created <see cref="System.Data.OleDb.OleDbCommand"/>,
the <see cref="System.Data.OleDb.OleDbCommand"/> is not cloned. The <see cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/> maintains a reference to the previously
created <see cref="System.Data.OleDb.OleDbCommand"/>
object.</para>
		</remarks>
		<example>
			<para>The following example creates an
      <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/> properties. It assumes
      you have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.DeleteCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="OleDbDataAdapter.InsertCommand">
		<summary>
			<para>Gets or sets an SQL statement or stored procedure used to insert new records into the data source.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OleDb.OleDbCommand"/> used during <see cref="System.Data.Common.DbDataAdapter.Update"/> to insert records in the data
   source that correspond to new rows in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> can be generated
   automatically if you set the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property and use the <see cref="System.Data.OleDb.OleDbCommandBuilder"/>.
   Then, any additional commands that you do not set are generated by the
<see cref="System.Data.OleDb.OleDbCommandBuilder"/>. This generation logic requires key column information to be
   present in the <see cref="System.Data.DataSet"/>. For more information
   see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> is assigned to a previously created <see cref="System.Data.OleDb.OleDbCommand"/>,
the <see cref="System.Data.OleDb.OleDbCommand"/> is not cloned. The <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> maintains a reference to the previously
created <see cref="System.Data.OleDb.OleDbCommand"/>
object.</para>
			<note type="note">
   If execution of this command returns rows,
   these rows may be added to the <see cref="System.Data.DataSet"/> depending on how you set the <see cref="System.Data.OleDb.OleDbCommand.UpdatedRowSource"/> property of the <see cref="System.Data.OleDb.OleDbCommand"/> object.
   
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> properties. It assumes you
   have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.InsertCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="OleDbDataAdapter.SelectCommand">
		<summary>
			<para>Gets or sets an SQL statement
      or stored procedure used to select records in the data source.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OleDb.OleDbCommand"/> that is used during <see cref="System.Data.Common.DbDataAdapter.Fill"/> to select records from data
   source for placement in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> is assigned to a previously created <see cref="System.Data.OleDb.OleDbCommand"/>,
   the <see cref="System.Data.OleDb.OleDbCommand"/> is not cloned. The <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> maintains a reference to the previously
   created <see cref="System.Data.OleDb.OleDbCommand"/>
   object.</para>
			<para>If the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
does not return any rows, no tables are added to the
<see cref="System.Data.DataSet"/>, and no exception is raised.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets the
<see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/> properties. It assumes 
   you have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData DbDataAdapter.SelectCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="OleDbDataAdapter.UpdateCommand">
		<summary>
			<para>Gets or sets an SQL
      statement or stored procedure used to update records in the data source.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OleDb.OleDbCommand"/> used during <see cref="System.Data.Common.DbDataAdapter.Update"/> to update records in the data
   source that correspond to modified rows in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/> can be generated
   automatically if you set the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property and use the <see cref="System.Data.OleDb.OleDbCommandBuilder"/>.
   Then, any additional commands that you do not set are generated by the
<see cref="System.Data.OleDb.OleDbCommandBuilder"/>. This generation logic requires key column information to be
   present in the <see cref="System.Data.DataSet"/>. For more information
   see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/> is assigned to a previously created <see cref="System.Data.OleDb.OleDbCommand"/>,
the <see cref="System.Data.OleDb.OleDbCommand"/> is not cloned. The <see cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/> maintains a reference to the previously
created <see cref="System.Data.OleDb.OleDbCommand"/>
object.</para>
			<note type="note">
   If execution of this command returns rows,
   these rows may be merged with the <see cref="System.Data.DataSet"/> depending on how you set the
<see cref="System.Data.OleDb.OleDbCommand.UpdatedRowSource"/> property of the <see cref="System.Data.OleDb.OleDbCommand"/> object.
   
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> and <see cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/> properties. It assumes
   you have already created an <see cref="System.Data.OleDb.OleDbConnection"/> object.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.UpdateCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
	</doc>
	<doc for="OleDbDataAdapter">
		<summary>
			<para> Represents a set of data commands and a
      database connection that are used to fill the <see cref="System.Data.DataSet"/>
      and update the data source.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.OleDb.OleDbDataAdapter"/> serves as a
   bridge between a <see cref="System.Data.DataSet"/> and data source for retrieving and saving
   data. The <see cref="System.Data.OleDb.OleDbDataAdapter"/> provides this bridge by using <see cref="System.Data.Common.DbDataAdapter.Fill"/> to load data from the data source
   into the <see cref="System.Data.DataSet"/> , and
   using <see cref="System.Data.Common.DbDataAdapter.Update"/>
   to send changes made in the <see cref="System.Data.DataSet"/>
   back to the data
   source.</para>
			<para>When the <see cref="System.Data.OleDb.OleDbDataAdapter"/> fills a <see cref="System.Data.DataSet"/> , it will create the necessary tables and columns
for the returned data if they do not already exist. However, primary key
information will not be included in the implicitly created schema unless the
<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> 
property is set to <see cref="System.Data.MissingSchemaAction.AddWithKey"/>
. You may also have the <see cref="System.Data.OleDb.OleDbDataAdapter"/> create the schema of the <see cref="System.Data.DataSet"/> , including primary
key information, before filling it with data using <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>. For more information, see <see topic="cpconaddingexistingconstraintstodataset"/>
.</para>
			<para> Note that
   some OLE DB providers, including the MSDataShape provider, do not return base
   table or primary key information. As a result, the <see cref="System.Data.OleDb.OleDbDataAdapter"/> cannot properly set the
<see cref="System.Data.DataTable.PrimaryKey"/> 
property on any created <see cref="System.Data.DataTable"/> . In such cases you should explicitly specify
primary keys for tables in the <see cref="System.Data.DataSet"/>
.</para>
			<para> The <see cref="System.Data.OleDb.OleDbDataAdapter"/>also includes the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>, <see cref="System.Data.OleDb.OleDbDataAdapter.InsertCommand"/>, <see cref="System.Data.OleDb.OleDbDataAdapter.DeleteCommand"/>, <see cref="System.Data.OleDb.OleDbDataAdapter.UpdateCommand"/>,
and <see cref="System.Data.Common.DataAdapter.TableMappings"/>
properties to facilitate the loading and updating of data.</para>
			<para>When you create an instance of <see cref="System.Data.OleDb.OleDbDataAdapter"/> , properties are
set to their initial values. For a list of these values, see the <see cref="System.Data.OleDb.OleDbDataAdapter"/> constructor.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.OleDb.OleDbCommand"/> , <see cref="System.Data.OleDb.OleDbDataAdapter"/> and <see cref="System.Data.OleDb.OleDbConnection"/>, to select records from an Access data
   source, and populate a <see cref="System.Data.DataSet"/> with
   the selected rows. The filled <see cref="System.Data.DataSet"/> is then returned. To accomplish this, the method is
   passed an initialized <see cref="System.Data.DataSet"/>
   , a connection string, and a query string that is an SQL
   SELECT statement.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OleDb.OleDbConnection"/>
		<seealso cref="System.Data.OleDb.OleDbCommand"/>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataTable"/>
	</doc>
	<doc for="OleDbDataAdapter.OleDbDataAdapter1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OleDb.OleDbDataAdapter"/> class with the specified <see cref="System.Data.OleDb.OleDbCommand"/> as the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property.</para>
		</summary>
		<param name="selectCommand">An <see cref="System.Data.OleDb.OleDbCommand"/> that is a SELECT statement or stored procedure, and is set as the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OleDb.OleDbDataAdapter"/> .</param>
		<remarks>
			<para>This implementation of the <see cref="System.Data.OleDb.OleDbDataAdapter"/> constructor sets the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
property to the value specified in the <paramref name="selectCommand"/>
parameter.</para>
			<para>When you create an instance of <see cref="System.Data.OleDb.OleDbDataAdapter"/>, the following read/write properties are set to the
following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc>
	<doc for="OleDbDataAdapter.OleDbDataAdapter2">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.OleDb.OleDbDataAdapter"/> class with a <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
      .</para>
		</summary>
		<param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OleDb.OleDbDataAdapter"/>.</param>
		<param name="selectConnectionString">The connection string.</param>
		<remarks>
			<para>When you create an instance of <see cref="System.Data.OleDb.OleDbDataAdapter"/>, the following read/write properties are set to the
   following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="OleDbDataAdapter.OleDbDataAdapter3">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.OleDb.OleDbDataAdapter"/> class with a <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/>
      .</para>
		</summary>
		<param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OleDb.OleDbDataAdapter"/>.</param>
		<param name="selectConnection">An <see cref="System.Data.OleDb.OleDbConnection"/> that represents the connection.</param>
		<remarks>
			<para>This implementation of the <see cref="System.Data.OleDb.OleDbDataAdapter"/> opens and closes an <see cref="System.Data.OleDb.OleDbConnection"/> if it is not already open. This can be
   useful in an application that must call the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method for two or more
<see cref="System.Data.OleDb.OleDbDataAdapter"/> objects. If 
   the <see cref="System.Data.OleDb.OleDbConnection"/> is already
   open, you must explicitly call <see cref="System.Data.OleDb.OleDbConnection.Close"/> or <see cref="System.Data.OleDb.OleDbConnection.Dispose"/> to close it.</para>
			<para>When you create an instance of <see cref="System.Data.OleDb.OleDbDataAdapter"/>, the following read/write properties are set to the
following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of either of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OleDb.OleDbDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="OleDbDataAdapter.Fill">
		<overload>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those in an ADO
<see langword="Recordset "/>or <see langword="Record"/> object. </para>
		</overload>
		<summary>
			<para>Adds or refreshes rows in a <see cref="System.Data.DataTable"/> to match those in an ADO <see langword="Recordset "/>or <see langword="Record"/>
object using the specified <see cref="System.Data.DataTable"/> and ADO
objects.</para>
		</summary>
		<param name="dataTable">A <see cref="System.Data.DataTable"/> to fill with records and, if necessary, schema.</param>
		<param name="ADODBRecordSet">An ADO <see langword="Recordset"/> or <see langword="Record"/> object. </param>
		<returns>
			<para>The number of rows successfully refreshed to the <see cref="System.Data.DataTable"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The link between ActiveX Data Objects (ADO) and ADO.NET is
      a one-way operation in that you can copy data from ADO to the <see cref="System.Data.DataSet"/> , but any updates to the data must be handled by ADO.NET. For more information, see
      <see topic="cpconfillingdatasetwithadorecordset"/>.</para>
			<para> This overload of the
      <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> method does not close
      the input <see langword="Recordset "/>on completion of the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> operation.</para>
			<para>When handling batch SQL statements that return multiple results, this
      implementation of <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> and <see cref="System.Data.Common.DbDataAdapter.FillSchema"/> for the OLE DB .NET Data
      Provider retrieves schema information for only the first result.</para>
			<para>The <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/>
operation
adds the rows to the specified destination <see cref="System.Data.DataTable"/> object in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> object if it does not already exist. When creating a
<see cref="System.Data.DataTable"/> object, the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para> You can use the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>. If primary key information is present, any duplicate rows are reconciled and
only appear once in the <see cref="System.Data.DataTable"/> that corresponds to the <see cref="System.Data.DataSet"/>. Primary
key information may be set either through <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, by
specifying the <see cref="System.Data.DataTable.PrimaryKey"/> property of the <see cref="System.Data.DataTable"/>, or by
setting the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> property to
<see langword="AddWithKey"/>.</para>
			<para>If the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> returns the
results of an OUTER JOIN, the <see langword="DataAdapter"/>
does not set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<para>To function properly with the .NET Framework Data Provider for OLE DB, <see langword="AddWithKey "/>requires that the native OLE DB provider obtains necessary primary key
information by setting the DBPROP_UNIQUEROWS property, and then determines which
columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the
IColumnsRowset. As an alternative, the user may explicitly set the primary key
constraints on each <see cref="System.Data.DataTable"/>. This ensures that incoming records that match
existing records are updated instead of appended. </para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> encounters duplicate columns while
populating a <see cref="System.Data.DataTable"/>, it generates names for the subsequent
columns, using the pattern "columnname1", "columnname2", "columnname3", and so
on. Empty column names are added to the <see cref="System.Data.DataTable"/>, using an empty string for the
first column, followed by "1", "2", "3", and so on for the subsequent empty
columns.</para>
			<para>Values in ADO <see langword="Recordset "/>or <see langword="Record "/>objects are converted to common language runtime types for storage in
the <see cref="System.Data.DataSet"/>. For more information on the
mappings between ADO and common language runtime types, see <see topic="cpconAccessingADOFromADONET"/>.</para>
			<note type="caution">
   
   This overload of the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> method does not implicitly
   call <see langword="Close"/> on the ADO object when the fill operation is
   complete. Therefore, always call <see langword="Close"/> when you are finished
   using ADO <see langword="Recordset"/> or <see langword="Record"/> objects. This
   ensures that the underlying connection to a data source is released in a timely
   manner, and also prevents possible access violations due to unmanaged ADO objects being reclaimed by garbage collection when existing references still exist.
</note>
			<para>The following example uses an <see cref="System.Data.OleDb.OleDbDataAdapter"/> to fill a <see cref="System.Data.DataTable"/> using an
ADO <see langword="Recordset"/>. This example assumes that you have created an
ADO <see langword="RecordSet"/>.</para>
			<code lang="VB">Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()
    Dim custDS As DataSet = New DataSet
    Dim custTable As DataTable = New DataTable("Customers")
    custTable.Columns.Add("CustomerID", Type.GetType("System.String"))
    custTable.Columns.Add("CompanyName", Type.GetType("System.String"))
    custDS.Tables.Add(custTable)

    'Use ADO objects from ADO library (msado15.dll) imported
    ' as .NET library ADODB.dll using TlbImp.exe
    Dim adoConn As ADODB.Connection = New ADODB.Connection()
    Dim adoRS As ADODB.Recordset = New ADODB.Recordset()

    adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)
    adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)

    custDA.Fill(custTable, adoRS)

    adoRS.Close()
    adoConn.Close()
</code>
			<code lang="C#">OleDbDataAdapter custDA = new OleDbDataAdapter();
    DataSet custDS = new DataSet();
    DataTable custTable = new DataTable("Customers");
    custTable.Columns.Add("CustomerID", typeof(String));
    custTable.Columns.Add("CompanyName", typeof(String));
    custDS.Tables.Add(custTable);

    //Use ADO objects from ADO library (msado15.dll) imported
    //  as .NET library ADODB.dll using TlbImp.exe
    ADODB.Connection adoConn = new ADODB.Connection();
    ADODB.Recordset adoRS = new ADODB.Recordset();

    adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);
    adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);

    custDA.Fill(custTable, adoRS);

    adoRS.Close();
    adoConn.Close();
</code>
		</remarks>
		<seealso cref="System.Data.Common.DbDataAdapter.FillSchema"/>
	</doc><doc for="OleDbDataAdapter.Fill1">
		<summary>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those in an ADO <see langword="Recordset"/> or <see langword="Record"/> object using
   the specified <see cref="System.Data.DataSet"/>, ADO object, and source table name.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<param name="ADODBRecordSet">An ADO <see langword="Recordset"/> or <see langword="Record"/> object. </param>
		<param name="srcTable">The source table used for the table mappings.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<exception cref="System.SystemException">The source table was invalid.</exception>
		<remarks>
			<para>The link between ActiveX Data Objects (ADO) and ADO.NET
      is a one-way operation in that you can copy data from ADO to the <see cref="System.Data.DataSet"/>, but any updates to the data must be handled by
      ADO.NET. For more information, see
      <see topic="cpconfillingdatasetwithadorecordset"/>.</para>
			<para> The <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> method iterates through
   multiple results by calling the <see langword="NextRecordset "/>method on the
<see langword="Recordset"/>, closing the input <see langword="Recordset "/>on
   completion of the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> operation.</para>
			<para>The <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> operation adds the rows to
the specified destination <see cref="System.Data.DataTable"/> object in the <see cref="System.Data.DataSet"/>, creating the <see cref="System.Data.DataTable"/> object if
it does not already exist. When creating a <see cref="System.Data.DataTable"/> object, the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> operation normally creates
only column name metadata. However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property is set to
<see langword="AddWithKey"/> 
, appropriate primary keys
and constraints are also created.</para>
			<para> If primary key information is present,
   any duplicate rows are reconciled and only appear once in the <see cref="System.Data.DataTable"/> that
   corresponds to the <see cref="System.Data.DataSet"/>. Primary key information may be set either through
<see cref="System.Data.Common.DbDataAdapter.FillSchema"/>, by specifying the <see cref="System.Data.DataTable.PrimaryKey"/> property of the <see cref="System.Data.DataTable"/>, or by setting the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> property to <see langword="AddWithKey"/>.</para>
			<para> To function properly with the .NET Framework Data Provider for OLE
   DB, <see langword="AddWithKey "/>requires that the native OLE DB
   provider obtains necessary primary key information by setting the
   DBPROP_UNIQUEROWS property, and then determines which columns are primary key
   columns by examining DBCOLUMN_KEYCOLUMN in the IColumnsRowset. As an
   alternative, the user may explicitly set the primary key constraints on each
<see cref="System.Data.DataTable"/>. This ensures that 
   incoming records that match existing records are updated instead of
   appended.
   </para>
			<para>If the <see cref="System.Data.OleDb.OleDbDataAdapter.SelectCommand"/> returns the results of
an OUTER JOIN, the <see langword="DataAdapter"/> does not
set a <see cref="System.Data.DataTable.PrimaryKey"/> value for the
resulting <see cref="System.Data.DataTable"/>. You must explicitly
define the primary key to ensure that duplicate rows are resolved correctly. For
more information, see <see topic="cpcondefiningprimarykeyfortable"/>.</para>
			<para>If the <see langword="Recordset "/>is closed prior to the beginning of the
<see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/>operation, no error results. 
This is required for handling of multiple results, because queries that do not
return rows are indicated by a closed <see langword="Recordset"/>. The <see cref="System.Data.OleDb.OleDbDataAdapter"/> simply calls <see langword="NextRecordset "/>on the closed <see langword="Recordset "/>and continues processing.</para>
			<para>If an error is encountered while populating the data set, rows added prior to
   the occurrence of the error remain in the <see cref="System.Data.DataSet"/>. The remainder of the operation is
   aborted.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object encounters duplicate columns while
populating a <see cref="System.Data.DataTable"/>, it will generate names for the
subsequent columns, using the pattern "columnname1", "columnname2",
"columnname3", and so on. If the incoming data contains unnamed columns, they
are placed in the <see cref="System.Data.DataSet"/>according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/>each result set is placed in a
separate table. Additional result sets are named by appending integral values to
the specified table name (for example, "Table", "Table1", "Table2", and so on.).
Applications should use caution when using column and table names to ensure that
conflicts with these naming patterns does not occur.</para>
			<para>Values in ADO <see langword="Recordset "/>or <see langword="Record "/>objects are converted to common language runtime types for storage in
the <see cref="System.Data.DataSet"/>
. For more
information on the mappings between ADO and common language runtime types, see
<see topic="cpconAccessingADOFromADONET"/>.</para>
			<note type="note">
   
   This overload of the <see cref="System.Data.OleDb.OleDbDataAdapter.Fill"/> method implicitly calls
<see langword="Close"/> on the ADO object when the fill operation is complete. 
</note>
			<para>The following example uses an <see cref="System.Data.OleDb.OleDbDataAdapter"/> to fill a <see cref="System.Data.DataSet"/> using an ADO <see langword="Recordset "/>that is an ADO <see langword="Record "/>object. This example assumes
that you have created an ADO <see langword="RecordSet "/>and <see langword="Record "/>object.</para>
			<code lang="VB">Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()
    Dim custDS As DataSet = New DataSet

    'Use ADO objects from ADO library (msado15.dll) imported
    ' as .NET library ADODB.dll using TlbImp.exe
    Dim adoConn As ADODB.Connection = New ADODB.Connection()
    Dim adoRS As ADODB.Recordset = New ADODB.Recordset()

    adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)
    adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)

    custDA.Fill(custDS, adoRS, "Customers")

    adoConn.Close()
</code>
			<code lang="C#">OleDbDataAdapter custDA = new OleDbDataAdapter();
    DataSet custDS = new DataSet();

    //Use ADO objects from ADO library (msado15.dll) imported
    // as .NET library ADODB.dll using TlbImp.exe
    ADODB.Connection adoConn = new ADODB.Connection();
    ADODB.Recordset adoRS = new ADODB.Recordset();

    adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);
    adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);

    custDA.Fill(custDS, adoRS, "Customers");

    adoConn.Close();
</code>
		</remarks>
	</doc></docs>
