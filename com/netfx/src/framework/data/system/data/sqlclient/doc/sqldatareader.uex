<docs>
	<doc for="SqlDataReader.HasMoreRows">
		<summary>
			<para>
       Indicates whether there are more rows to retrieve. This property is
       read-only.
    </para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if there are more rows to
       retrieve; otherwise, <see langword="false"/> .
    </para>
		</value>
	</doc>
	<doc for="SqlDataReader.HasMoreResults">
		<summary>
			<para>
       Indicates
       whether there are more results to retrieve when processing batch SQL statements.
       This property is read-only.
    </para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if more results exist to be read; otherwise,
    <see langword="false"/>.
    </para>
		</value>
		<seealso cref="System.Data.SqlClient.SqlDataReader.NextResult"/>
	</doc>
	<doc for="SqlDataReader.Finalize">
		<summary>
		</summary>
	</doc>
	<doc for="SqlDataReader.SetObjectBuffer">
		<summary>
			<para>
       Sets the buffer used to store data as the data reader advances.
    </para>
		</summary>
		<remarks>
			<para>
       Use of this method avoids extra copies of the data being read, which may
       result in increased performance.
    </para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetFieldType">
		<summary>
			<para>Gets the <see cref="System.Type"/>
that is the data type of the object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The <see cref="System.Type"/>
that is the data type of the object.</para>
		</returns>
	</doc>
	<doc for="SqlDataReader.GetDataTypeName">
		<summary>
			<para>Gets the name of the source data type.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The name of the back-end data type.</para>
		</returns>
	</doc>
	<doc for="SqlDataReader.GetSqlBit">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlBit"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlBit"/>.</para>
		</returns>
	</doc>
	<doc for="SqlDataReader.GetName">
		<summary>
			<para>Gets the name of the specified column.</para>
		</summary>
		<param name="i">The zero-based column ordinal.</param>
		<returns>
			<para>The name of the specified column.</para>
		</returns>
		<seealso cref="System.Data.SqlClient.SqlDataReader.GetOrdinal"/>
	</doc>
	<doc for="SqlDataReader.GetStream">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
	</doc>
	<doc for="SqlDataReader.GetSqlValues">
		<summary>
			<para> Gets all the attribute columns in the current
      row.</para>
		</summary>
		<param name="values">An array of <see cref="System.Object"/> to copy the attribute columns into.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, the <see cref="System.Data.SqlClient.SqlDataReader.GetValues"/> method provides an 
   efficient means for retrieving all columns, rather than retrieving each column
   individually.</para>
You can pass an <see cref="System.Object"/> array that contains fewer than the
number of columns contained in the resulting row. Only the amount of data
the <see cref="System.Object"/> array
holds is copied to the array. You can also pass an <see cref="System.Object"/> array whose
length is more than the number of columns contained in the resulting row.
</remarks>
	</doc><doc for="SqlDataReader.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlDataReader.GetIndexTable">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlDataReader.IDisposable.Dispose">
		<internalonly/>
		<summary>
			<para>Releases the resources consumed by this <see cref="System.Data.SqlClient.SqlDataReader"/> .</para>
		</summary>
	</doc>
	<doc for="SqlDataReader.GetValues">
		<summary>
			<para>Gets all attribute columns in the collection for the current
      row.</para>
		</summary>
		<param name="values">An array of <see cref="System.Object"/> into which to copy the attribute columns.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, this method provides an efficient means for retrieving all columns, rather than retrieving
      each column individually.</para>
			<para>You can pass an <see cref="System.Object"/> array that contains fewer than the number of columns
   contained in the resulting row. Only the amount of data the <see cref="System.Object"/> array holds is
   copied to the array. You can also pass an <see cref="System.Object"/> array whose length is more than the
   number of columns contained in the resulting row.</para>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetValue">
		<summary>
			<para>Gets the value of the specified column in its native format.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.SqlClient.SqlDataReader.GetValue"/>returns data using the .NET Framework types.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.Read">
		<summary>
			<para>Advances the <see cref="System.Data.SqlClient.SqlDataReader"/>
to the next record.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more rows; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default position of the <see cref="System.Data.SqlClient.SqlDataReader"/> is prior to the first record. Therefore,
   you must call <see cref="System.Data.SqlClient.SqlDataReader.Read"/>
   to begin accessing any data.</para>
			<para>Only one <see langword="SqlDataReader"/> per associated <see cref="System.Data.SqlClient.SqlConnection"/> may be open at a time, and any attempt to open another
will fail until the first one is closed. Similarly, while the <see langword="SqlDataReader"/> is in use, the
associated <see langword="SqlConnection"/> is busy
serving it until you call <see cref="System.Data.SqlClient.SqlDataReader.Close"/> .</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>, a <see cref="System.Data.SqlClient.SqlCommand"/>,
   and a <see cref="System.Data.SqlClient.SqlDataReader"/>. The example reads through the data, writing it
   out to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
   then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlDataReader.IsClosed">
		<summary>
			<para> Gets a value indicating whether the data reader
      is closed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   the <see cref="System.Data.SqlClient.SqlDataReader"/> is closed;
   otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para><see cref="System.Data.SqlClient.SqlDataReader.IsClosed"/>
and <see cref="System.Data.SqlClient.SqlDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.SqlClient.SqlDataReader"/> is closed. </para>
		</remarks>
	</doc><doc for="SqlDataReader.RecordsAffected">
		<summary>
			<para> Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.</para>
		</summary>
		<value>
			<para>The number of rows changed, inserted, or deleted; 0
      if no rows were affected or the statement failed; and -1 for SELECT statements.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlDataReader.RecordsAffected"/> property is not set until
   all rows are read and you close the <see cref="System.Data.SqlClient.SqlDataReader"/>.</para>
			<para>The value of this property is cumulative. For example, if two records are
   inserted in batch mode, the value of <see langword="RecordsAffected"/> will
   be two.</para>
			<para><see cref="System.Data.SqlClient.SqlDataReader.IsClosed"/>
and <see cref="System.Data.SqlClient.SqlDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.SqlClient.SqlDataReader"/> is closed. </para>
		</remarks>
	</doc><doc for="SqlDataReader.GetFloat">
		<summary>
			<para>Gets the value of the specified column as a single-precision floating point number.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are
      performed, therefore the data retrieved must already be a single-precision floating point
      number.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc><doc for="SqlDataReader.GetDouble">
		<summary>
			<para>Gets the value of the specified column as a double-precision floating point number.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are
      performed, therefore the data retrieved must already be a double-precision floating point
      number.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc><doc for="SqlDataReader">
		<summary>
			<para> Provides a means of reading
      a forward-only stream of rows from a SQL Server database. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para>To create a <see cref="System.Data.SqlClient.SqlDataReader"/>, you must call
   the <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/> method of the <see cref="System.Data.SqlClient.SqlCommand"/>
   
   object, rather than directly using a constructor.</para>
			<para>While the <see cref="System.Data.SqlClient.SqlDataReader"/> is in use, the
associated <see cref="System.Data.SqlClient.SqlConnection"/> is busy serving the <see cref="System.Data.SqlClient.SqlDataReader"/>
, and no other operations can be performed on the <see cref="System.Data.SqlClient.SqlConnection"/>
other than closing it. This is the case until the <see cref="System.Data.SqlClient.SqlDataReader.Close"/> method of the <see cref="System.Data.SqlClient.SqlDataReader"/> is
called. For example, you cannot retrieve output parameters until after you call
<see cref="System.Data.SqlClient.SqlDataReader.Close"/>
.</para>
			<para>Changes made to a resultset by another process or thread while data is being
   read may be visible to the user of the <see langword="SqlDataReader"/>. However,
   the precise behavior is timing dependent.</para>
			<para><see cref="System.Data.SqlClient.SqlDataReader.IsClosed"/>
and <see cref="System.Data.SqlClient.SqlDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.SqlClient.SqlDataReader"/> is closed. Though the
<see cref="System.Data.SqlClient.SqlDataReader.RecordsAffected"/> property may be accessed at 
any time while the <see cref="System.Data.SqlClient.SqlDataReader"/> exists, always call <see cref="System.Data.SqlClient.SqlDataReader.Close"/> before returning the value
of <see cref="System.Data.SqlClient.SqlDataReader.RecordsAffected"/> to ensure an accurate
return value.</para>
			<note type="note">
   For optimal performance, <see cref="System.Data.SqlClient.SqlDataReader"/>
   avoids creating unnecessary objects or making unnecessary copies of data. As a
   result, multiple calls to methods such as <see cref="System.Data.SqlClient.SqlDataReader.GetValue"/> return a reference to the same object. Use
   caution if you are modifying the underlying value of the objects returned by
   methods such as <see cref="System.Data.SqlClient.SqlDataReader.GetValue"/> .
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>, a <see cref="System.Data.SqlClient.SqlCommand"/>,
   and a <see cref="System.Data.SqlClient.SqlDataReader"/>. The example reads through the data, writing it
   out to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
   then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlDataReader.IEnumerable.GetEnumerator">
		<summary>
			<para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> that can be used to iterate through the collection.</para>
		</returns>
	</doc><doc for="SqlDataReader.FieldCount">
		<summary>
			<para> Gets the number of columns in the current row.</para>
		</summary>
		<value>
			<para>When not positioned in a valid recordset, 0; otherwise the number of columns
      in the current row. The default is -1.</para>
		</value>
		<exception cref="System.NotSupportedException">There is no current connection to an instance of SQL Server.</exception>
		<remarks>
			<para>After executing a query that does not return rows, <see cref="System.Data.SqlClient.SqlDataReader.FieldCount"/> returns 0.</para>
		</remarks>
	</doc><doc for="SqlDataReader.IsDBNull">
		<summary>
			<para> Gets a value indicating whether the column contains non-existent or missing values.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para><see langword="true"/> if the specified
   column value is equivalent to <see cref="System.DBNull"/> ;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>Call this method to check for null column values before calling the typed get methods
      (for example, <see cref="System.Data.SqlClient.SqlDataReader.GetByte"/>, <see cref="System.Data.SqlClient.SqlDataReader.GetChar"/>, and so on) to avoid raising an
      error.</para>
		</remarks>
	</doc><doc for="SqlDataReader.GetData">
		<nodoc/>
		<summary>
			<para> Not currently supported.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
	</doc><doc for="SqlDataReader.this">
		<overload>
			<para> Gets the value of
      a column in its native format.</para>
		</overload>
		<summary>
			<para>
      Gets the value of the specified column in its native format given
      the column ordinal.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<value>
			<para>The value of the specified column in its native format.</para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="SqlDataReader.this1">
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column name.</para>
		</summary>
		<param name="name">The column name.</param>
		<value>
			<para>The value of the specified column in its native format.</para>
		</value>
		<exception cref="System.IndexOutOfRangeException">No column with the specified name was found.</exception>
		<remarks>
			<para>A case-sensitive lookup is performed first.
      If it fails, a second case-insensitive search is made.</para>
			<para>This method is kana-width insensitive.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.NextResult">
		<summary>
			<para>Advances the data reader to the next result, when reading the results of
      batch Transact-SQL statements.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more result sets; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Used to process multiple results, which can be generated by executing
      batch Transact-SQL statements.</para>
			<para>By default, the data reader is positioned on the first result.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.Depth">
		<summary>
			<para> Gets a value indicating the depth of nesting for the current row.</para>
		</summary>
		<value>
			<para> The depth of nesting for the current row.</para>
		</value>
		<remarks>
			<para>The outermost table has a depth of zero. The .NET Framework Data Provider for SQL Server does not support nesting and always returns
      zero.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.HasRows">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.SqlClient.SqlDataReader"/> contains one or more rows.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.SqlClient.SqlDataReader"/> contains one or more rows;
   otherwise <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="SqlDataReader.Close">
		<summary>
			<para>Closes the <see cref="System.Data.SqlClient.SqlDataReader"/> object.</para>
		</summary>
		<remarks>
			<para>You must explicitly call the <see cref="System.Data.SqlClient.SqlDataReader.Close"/> method when you are through
   using the <see cref="System.Data.SqlClient.SqlDataReader"/> to use
   the associated <see cref="System.Data.SqlClient.SqlConnection"/> for any other purpose.</para>
			<para>The <see langword="Close"/> method fills in the values for output
parameters, return values and <see langword="RecordsAffected"/>, increasing the
amount of time it takes to close a <see langword="SqlDataReader"/> that was
used to process a large or complicated query. In cases where the return values
and the number of records affected by a query are not significant, the amount of
time it takes to close the <see langword="SqlDataReader"/> can be reduced by
calling the <see cref="System.Data.SqlClient.SqlCommand.Cancel"/> method of the
associated <see cref="System.Data.SqlClient.SqlCommand"/> object before calling
the <see langword="Close"/> method.</para>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>, a <see langword="SqlCommand"/>,
   and a <see cref="System.Data.SqlClient.SqlDataReader"/>. The example reads through the data, writing it
   out to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
   then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlDataReader.Close Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlDataReader.GetBoolean">
		<summary>
			<para>Gets the value of the specified column as a Boolean.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a Boolean or an exception is
      generated.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetByte">
		<summary>
			<para>Gets the value of the specified column as a byte.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a byte.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      byte.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetBytes">
		<summary>
			<para> Reads a stream of bytes from the specified column
      offset into
      the buffer an array starting at the given buffer offset.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" buffer">The buffer into which to read the stream of bytes. </param>
		<param name=" length">The maximum length to copy into the buffer.</param>
		<param name=" bufferIndex">The index for <paramref name="buffer"/> to begin the read operation. </param>
		<param name=" dataIndex">The index within the field from which to begin the read operation. </param>
		<returns>
			<para>The actual number of bytes read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.SqlClient.SqlDataReader.GetBytes"/> returns the number of
   available bytes in the field. In most cases this is the exact length of the
   field. However, the number returned may be less than the true length of the
   field if <see langword="GetBytes"/> has already been used to obtain bytes from
   the field. This may be the case, for example, if the <see cref="System.Data.SqlClient.SqlDataReader"/> is reading
   a large data structure into a buffer. For more information, see the
<see langword="SequentialAccess"/> setting for <see cref="System.Data.CommandBehavior"/> 
.</para>
			<para>
   If you pass a buffer that is
<see langword="null"/>, <see cref="System.Data.SqlClient.SqlDataReader.GetBytes"/> 
returns the length of the field in bytes.</para>
			<para>No
   conversions are performed; therefore the data retrieved must already be a byte
   array.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetChar">
		<summary>
			<para>Gets the value of the specified column as a single character.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      character.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetChars">
		<summary>
			<para>Reads a stream of characters from the specified column offset
      into the
      buffer as an array starting at the given buffer offset.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" buffer">The buffer into which to copy data. </param>
		<param name=" length">The maximum number of characters to read. </param>
		<param name=" bufferIndex">The index for <paramref name="buffer"/> to begin the read operation. </param>
		<param name=" dataIndex">The index within the row from which to begin the read operation. </param>
		<returns>
			<para>The actual number of characters read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.SqlClient.SqlDataReader.GetChars"/> returns the number of
   available characters in the field. In most cases this is the exact length of the
   field. However, the number returned may be less than the true length of the
   field if <see langword="GetChars"/> has already been used to obtain characters from
   the field. This may be the case, for example, if the <see cref="System.Data.SqlClient.SqlDataReader"/> is reading a large data structure into a
   buffer. For more information, see the <see langword="SequentialAccess"/> setting
   for <see cref="System.Data.CommandBehavior"/>
   .</para>
			<para>The actual number of characters read can be less than
   the requested length, if the end of the field is reached. If you pass a buffer
   that is <see langword="null"/>, <see cref="System.Data.SqlClient.SqlDataReader.GetChars"/> returns the length of the
   field in characters.</para>
			<para>No
   conversions are performed; therefore the data retrieved must already be a character
   array.</para>
			<note type="note">
   You cannot
   use <see cref="System.Data.SqlClient.SqlDataReader.GetChars"/> to read
   a <see langword="VarChar"/> column in chunks
   if <see cref="System.Data.CommandBehavior"/> is set to
<see langword="SequentialAccess"/>. 
</note>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetGuid">
		<summary>
			<para> Gets the value of
      the specified column as a globally-unique identifier (GUID).
      </para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para> The value of the specified column.
      </para>
		</returns>
		<remarks>
			<para> No conversions
      are performed; therefore the data retrieved must already be a guid.
      </para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetInt16">
		<summary>
			<para>Gets the
      value of the specified column as a 16-bit signed integer.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions
      are performed; therefore the data retrieved must already be a 16-bit signed
      integer.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetInt32">
		<summary>
			<para>Gets the
      value of the specified column as a 32-bit signed integer.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions
      are performed; therefore the data retrieved must already be a 32-bit signed
      integer.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetInt64">
		<summary>
			<para>Gets the
      value of the specified column as a 64-bit signed integer.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions
      are performed; therefore the data retrieved must already be a 64-bit signed
      integer.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetString">
		<summary>
			<para>Gets the value of the specified column as a string.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      string.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetDecimal">
		<summary>
			<para>Gets the value of the specified column as
      a <see cref="System.Decimal"/>
      object.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.Decimal"/>
      object.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetDateTime">
		<summary>
			<para>Gets the value of the specified column as
      a <see cref="System.DateTime"/>
      object.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data
      retrieved must already be a <see cref="System.DateTime"/>
      object.</para>
			<para>Call <see cref="System.Data.SqlClient.SqlDataReader.IsDBNull"/> to check for null values
   before calling this method.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlBoolean">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlBoolean"/>.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the column.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a Boolean or an exception is
      generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlBinary">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlBinary"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlBinary"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      binary structure or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlByte">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlByte"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlByte"/>.</para>
		</returns>
		<remarks>
			<para> No conversions are performed; therefore the data retrieved must already be
      a byte or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlInt16">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlInt16"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlInt16"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a 16-bit
      signed integer or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlInt32">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlInt32"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlInt32"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a 32-bit
      signed integer or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlInt64">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlInt64"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlInt64"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      64-bit signed integer or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlSingle">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlSingle"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlSingle"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be
      a single precision floating point number or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlDouble">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlDouble"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlDouble"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a double
      precision floating point number or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlString">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlString"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlString"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be a
      string or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlMoney">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlMoney"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlMoney"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be
      a decimal value or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlDecimal">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlDecimal"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlDecimal"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be
      a decimal value or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlDateTime">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlDateTime"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlDateTime"/>.</para>
		</returns>
		<remarks>
			<para> No conversions are performed; therefore the data retrieved must already
      be a date/time value or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetSqlGuid">
		<summary>
			<para>Gets the value of the specified column as a <see cref="System.Data.SqlTypes.SqlGuid"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A <see cref="System.Data.SqlTypes.SqlGuid"/>.</para>
		</returns>
		<remarks>
			<para>No conversions are performed; therefore the data retrieved must already be
      a guid or an exception is generated.</para>
		</remarks>
	</doc>
	<doc for="SqlDataReader.GetOrdinal">
		<summary>
			<para>Gets the column ordinal, given the name of the column.</para>
		</summary>
		<param name="name">The name of the column.</param>
		<returns>
			<para>The zero-based column ordinal.</para>
		</returns>
		<exception cref="System.IndexOutOfRangeException">The name specified is not a valid column name.</exception>
		<remarks>
			<para><see langword="GetOrdinal"/> performs
   a case-sensitive lookup first. If it
   fails, a second case-insensitive search is made.</para>
			<para><see langword="GetOrdinal"/> is kana-width insensitive.</para>
			<para>Because ordinal-based lookups are more efficient than named lookups, it is
   inefficient to call <see langword="GetOrdinal"/> within a loop. Save time by
   calling <see langword="GetOrdinal"/> once
   and assigning the results to an integer variable for use within the loop.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Data.SqlClient.SqlDataReader.GetOrdinal"/> 
method.</para>
			<codelink SampleID="Classic WebData SqlDataReader.GetOrdinal" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataReader.GetName"/>
	</doc><doc for="SqlDataReader.GetSqlValue">
		<summary>
			<para>Gets an <see cref="System.Object"/> that is a representation of the underlying <see cref="System.Data.SqlDbType"/>
Variant.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>An <see cref="System.Object"/> that is a
   representation of the underlying <see cref="System.Data.SqlDbType"/>
   Variant.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.SqlClient.SqlDataReader.GetSqlValue"/> returns data using the native SQL Server types.
   To retrieve data using the .NET Framework types, see <see cref="System.Data.SqlClient.SqlDataReader.GetValue"/>.</para>
		</remarks>
	</doc><doc for="SqlDataReader.GetSchemaTable">
		<summary>
			<para>Returns a <see cref="System.Data.DataTable"/> that describes the column metadata
   of the <see cref="System.Data.SqlClient.SqlDataReader"/>. </para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.DataTable"/> that describes the column metadata.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.SqlClient.SqlDataReader"/> is closed.</exception>
		<remarks>
			<para> For the <see cref="System.Data.SqlClient.SqlDataReader.GetSchemaTable"/>
method returns metadata about each column
in the following order:</para>
			<list type="table">
				<listheader>
					<term> DataReader Column</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> ColumnName</term>
					<description> The name of the column; this might not be unique. If this cannot be determined, a null value is returned. This name always reflects the most recent renaming of the column in the current view or command text.</description>
				</item>
				<item>
					<term> ColumnOrdinal</term>
					<description>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other columns are numbered starting with one. This column cannot contain a null value.</description>
				</item>
				<item>
					<term> ColumnSize</term>
					<description>The maximum possible length of a value in the column. For columns that use a fixed-length data type, this is the size of the data type. </description>
				</item>
				<item>
					<term> NumericPrecision</term>
					<description> If ProviderType is a numeric data type, this is the maximum precision of the column. The precision depends on the definition of the column. If ProviderType is not a numeric data type, this is a null value.</description>
				</item>
				<item>
					<term> NumericScale</term>
					<description> If ProviderType is is DBTYPE_DECIMAL or DBTYPE_NUMERIC, the number of digits to the right of the decimal point. Otherwise, this is a null value.</description>
				</item>
				<item>
					<term> IsUnique</term>
					<description><see langword="true"/>: No two rows in the base
      table-the table returned in BaseTableName-can have the same value in this
      column. IsUnique is guaranteed to be <see langword="true"/> if the column
      constitutes a key by itself or if there is a constraint of type UNIQUE
      that applies only to this column. <see langword="false"/>: The column can
      contain duplicate values in the base table. The default of this column is
   <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsKey</term>
					<description><see langword="true"/>: The column is one of a set of
   columns in the rowset that, taken together, uniquely identify the row. The
   set of columns with IsKey set to <see langword="true"/> must uniquely
   identify a row in the rowset. There is no requirement that this set of
   columns is a minimal set of columns. This set of columns may be generated
   from a base table primary key, a unique constraint or a unique index.
<see langword="false"/>: The column is not required to uniquely identify the row.</description>
				</item>
				<item>
					<term> BaseServerName</term>
					<description>The name of the instance of Microsoft SQL Server used by the <see cref="System.Data.SqlClient.SqlDataReader"/>.</description>
				</item>
				<item>
					<term> BaseCatalogName</term>
					<description>The name of the catalog in the data store that contains the column. NULL if the base catalog name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseColumnName</term>
					<description>The name of the column in the data store. This might be different than the column name returned in the ColumnName column if an alias was used. A null value if the base column name cannot be determined or if the rowset column is derived, but not identical to, a column in the data store. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseSchemaName</term>
					<description>The name of the schema in the data store that contains the column. A null value if the base schema name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseTableName</term>
					<description>The name of the table or view in the data store that contains the column. A null value if the base table name cannot be determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> DataType</term>
					<description>Maps to the .NET Framework type of the
      column.</description>
				</item>
				<item>
					<term> AllowDBNull</term>
					<description>Set if the consumer can set the column to a null value or if the provider cannot determine whether
      or not the consumer can set the column to a null value.
      Otherwise, not set. A column may contain null values, even if it cannot be
      set to a null value.</description>
				</item>
				<item>
					<term> ProviderType</term>
					<description>The indicator of the column's data type. If the data type of the column varies from row to row, this must be Object. This column cannot contain a null value. </description>
				</item>
				<item>
					<term> IsAliased</term>
					<description><see langword="true"/> if the column name is an alias;
   otherwise <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsExpression</term>
					<description><see langword="true"/> if the column is an expression;
   otherwise <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsIdentity</term>
					<description><see langword="true"/> if the column is an identity
   column; otherwise <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsAutoIncrement</term>
					<description><see langword="true"/>: The column assigns values to
   new rows in fixed increments. <see langword="false"/>: The column does not assign
   values to new rows in fixed increments. The default of this column
   is <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsRowVersion</term>
					<description>Set if the column contains a persistent row
      identifier that cannot be written to, and has no meaningful value except
      to identity the row.</description>
				</item>
				<item>
					<term> IsHidden</term>
					<description><see langword="true"/> if the column is hidden;
   otherwise <see langword="false"/>.</description>
				</item>
				<item>
					<term> IsLong</term>
					<description> Set
      if the column contains a Binary Long Object (BLOB) that contains
      very long data. The definition of very long data is
      provider-specific.</description>
				</item>
				<item>
					<term> IsReadOnly</term>
					<description><see langword="true"/> if
   the column cannot be modified; otherwise
<see langword="false"/>.</description>
				</item>
			</list>
			<note type="note">
   To ensure that metadata columns
   return the correct information, you must call <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/> with
   the <paramref name="behavior"/> parameter set to <SpecialLocalizableItem kind="UIElement">KeyInfo</SpecialLocalizableItem> . Otherwise, some of
the columns in the schema table may return default, null, or incorrect
data.
</note>
		</remarks>
	</doc></docs>
