<docs>
	<doc for="SqlDataAdapter.RowUpdated">
		<summary>
			<para>Occurs during <see cref="System.Data.Common.DbDataAdapter.Update"/> after a command is executed
    against the data source. The attempt to update is made, so the event fires.</para>
		</summary>
		<remarks>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>, there are two events that
    occur per data row updated. The order of execution is as follows:</para>
			<list type="number">
				<item>
					<term>The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>The command executes.</term>
				</item>
				<item>
					<term>If the command is set to FirstReturnedRecord, then the first returned
       result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is
    raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows how to use both the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> and <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/> events.</para>
			<para>The <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> event returns this output:</para>
			<para> event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)</para>
			<para>The <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/> event returns this output:</para>
			<para> event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 
    row=System.Data.DataRow[37] status=0)</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.RowUpdated Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlDataAdapter.RowUpdating">
		<summary>
			<para>Occurs during <see cref="System.Data.Common.DbDataAdapter.Update"/> before a command is
    executed against the data source. The attempt to update is made, so the event fires.</para>
		</summary>
		<remarks>
			<para>When using <see cref="System.Data.Common.DbDataAdapter.Update"/>, there are two events that
    occur per data row updated. The order of execution is as follows:</para>
			<list type="number">
				<item>
					<term>The values in the <see cref="System.Data.DataRow"/> are moved to the parameter values.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>The command executes.</term>
				</item>
				<item>
					<term>If the command is set to FirstReturnedRecord, then the first returned
       result is placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>If there are output parameters, they are placed in the <see cref="System.Data.DataRow"/>.</term>
				</item>
				<item>
					<term>The <see cref="System.Data.Common.DbDataAdapter.OnRowUpdated"/> event is
    raised.<see langword=""/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataRow.AcceptChanges"/> is called.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows how to use both the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> and <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/> events.</para>
			<para>The <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> event returns this 
 output:</para>
			<para> event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)</para>
			<para>The <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/> event returns this 
 output:</para>
			<para> event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 
    row=System.Data.DataRow[37] status=0)</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.RowUpdated Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlDataAdapter.CreateRowUpdatedEvent">
		<internalonly/>
		<summary>
		</summary>
		<param name="dataRow">
		</param>
		<param name="command">
		</param>
		<param name="statementType">
		</param>
		<param name="tableMapping">
		</param>
	</doc>
	<doc for="SqlDataAdapter.CreateRowUpdatingEvent">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
		<param name="dataRow">
		</param>
		<param name="command">
		</param>
		<param name="statementType">
		</param>
		<param name="tableMapping">
		</param>
		<example>
			<para>
       The following example fills a <see cref="System.Data.DataSet"/> with the
       schema only, while filling a <see cref="System.Data.DataTable"/>
       with records, when provided
       a source table.
    </para>
			<codelink SampleID="Classic WebData SqlDataAdapter.CreateRowUpdatingEvent Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlDataAdapter.OnRowUpdated">
		<overload>
			<para>
       Raises the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/> event.
    </para>
		</overload>
		<summary>
			<para>
       Raises the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/>
       event.
    </para>
		</summary>
		<param name="ruevent">
    A <see cref="System.Data.SqlClient.SqlRowUpdatedEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
       .
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdated"/> in a derived class, be sure
       to call the base class's <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdated"/> method.
    </note>
		</remarks>
		<example>
			<para>
       The following example uses this method within a derived class.
    </para>
			<codelink SampleID="Classic WebData SqlDataAdapter.OnRowUpdated Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdating"/>
	</doc>
	<doc for="SqlDataAdapter.OnRowUpdating">
		<overload>
			<para>
       Raises the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> event.
    </para>
		</overload>
		<summary>
			<para>
       Raises the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> event.
    </para>
		</summary>
		<param name="ruevent">
    A <see cref="System.Data.SqlClient.SqlRowUpdatingEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For
       more information, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdating"/> in a derived class, be sure
       to call the base class's <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdating"/> method.
    </note>
		</remarks>
		<example>
			<para>
       The following example uses this method within a derived
       class.
    </para>
			<codelink SampleID="Classic WebData SqlDataAdapter.OnRowUpdated Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdated"/>
	</doc>
	<doc for="SqlDataAdapter.SqlDataAdapter">
		<overload>
			<para>Initializes a new
      instance of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>
      class.</para>
		</overload>
		<summary>
			<para>Initializes a new
      instance of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>
      class.</para>
		</summary>
		<remarks>
			<para>When an instance of <see cref="System.Data.SqlClient.SqlDataAdapter"/> is created, the following read/write properties are set to the
   following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets some of
   its properties.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.SqlDataAdapter Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="SqlDataAdapter.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.SqlClient.SqlDataAdapter"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.SqlClient.SqlDataAdapter"/> and optionally releases the managed 
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method. 
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.Data.SqlClient.SqlDataAdapter"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData SqlDataAdapter.Dispose Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlDataAdapter.OnRowUpdated1">
		<summary>
			<para>Raises the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdated"/> event.</para>
		</summary>
		<param name="value">A <see cref="System.Data.SqlClient.SqlRowUpdatedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For
      more information, see <see topic="cpconProvidingEventFunctionality"/>.</para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdated"/> in a derived class, be sure
      to call the base class's <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdated"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdating"/>
	</doc><doc for="SqlDataAdapter.OnRowUpdating1">
		<summary>
			<para>Raises the <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> event.</para>
		</summary>
		<param name="value">A <see cref="System.Data.SqlClient.SqlRowUpdatingEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For
      more information, see <see topic="cpconProvidingEventFunctionality"/>.</para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdating"/> in a derived class, be sure
      to call the base class's <see cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdating"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.OnRowUpdated"/>
	</doc><doc for="SqlDataAdapter.IDbDataAdapter.DeleteCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="SqlDataAdapter.IDbDataAdapter.InsertCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="SqlDataAdapter.IDbDataAdapter.SelectCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="SqlDataAdapter.IDbDataAdapter.UpdateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="SqlDataAdapter.SqlDataAdapter1">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> class with the specified
   <see cref="System.Data.SqlClient.SqlCommand"/>
   as the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property.</para>
		</summary>
		<param name="selectCommand">A <see cref="System.Data.SqlClient.SqlCommand"/> that is a Transact-SQL SELECT statement or stored procedure and is set as the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>. </param>
		<remarks>
			<para>This implementation of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> constructor sets the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property to the value 
   specified in the <paramref name="selectCommand"/>
   parameter.</para>
			<para>When an instance of <see cref="System.Data.SqlClient.SqlDataAdapter"/> is 
created, the following read/write properties are set to the following initial
values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
			<para>When <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> (or any of the other command properties) is
assigned to a previously created <see cref="System.Data.SqlClient.SqlCommand"/>, the <see cref="System.Data.SqlClient.SqlCommand"/> is
not cloned. The <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> maintains a reference to the
previously created <see cref="System.Data.SqlClient.SqlCommand"/>
object.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.SqlDataAdapter1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc>
	<doc for="SqlDataAdapter.SqlDataAdapter2">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> class with a <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
      and a connection
      string.</para>
		</summary>
		<param name="selectCommandText">A <see cref="System.String"/> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</param>
		<param name="selectConnectionString">The connection string.</param>
		<remarks>
			<para>When an instance of <see cref="System.Data.SqlClient.SqlDataAdapter"/> is created, the following read/write properties are set to the
   following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.SqlDataAdapter2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc>
	<doc for="SqlDataAdapter.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="SqlDataAdapter.SelectCommand">
		<summary>
			<para>Gets or sets a Transact-SQL statement
      or stored procedure used to select records in the data source.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.SqlClient.SqlCommand"/> used
   during <see cref="System.Data.Common.DbDataAdapter.Fill"/> to
   select records from the database for placement in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> is assigned to a previously created <see cref="System.Data.SqlClient.SqlCommand"/>,
   the <see cref="System.Data.SqlClient.SqlCommand"/> is not cloned. The <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> maintains a reference to the previously
   created <see cref="System.Data.SqlClient.SqlCommand"/>
   object.</para>
			<para>If the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
does not return any rows, no tables are added to the
<see cref="System.Data.DataSet"/>, and no exception is raised.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> and <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/> properties. It assumes you 
   have already created a <see cref="System.Data.SqlClient.SqlConnection"/> object.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.SelectCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="SqlDataAdapter.SqlDataAdapter3">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> class with a <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
      and a <see cref="System.Data.SqlClient.SqlConnection"/>
      object.</para>
		</summary>
		<param name="selectCommandText">A <see cref="System.String"/> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</param>
		<param name="selectConnection">A <see cref="System.Data.SqlClient.SqlConnection"/> that represents the connection.</param>
		<remarks>
			<para>This implementation of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> opens and closes
   a <see cref="System.Data.SqlClient.SqlConnection"/> if it is not already open. This can be
   useful in a an application that must call the <see cref="System.Data.Common.DbDataAdapter.Fill"/> method for two or more <see cref="System.Data.SqlClient.SqlDataAdapter"/> objects. If the <see cref="System.Data.SqlClient.SqlConnection"/> is already open, you must explicitly
   call <see cref="System.Data.SqlClient.SqlConnection.Close"/> or <see cref="System.Data.SqlClient.SqlConnection.Dispose"/> to close it.</para>
			<para>When an instance of <see cref="System.Data.SqlClient.SqlDataAdapter"/> is created, the following read/write properties are set to the
following initial values.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of either of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.SqlDataAdapter3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc>
	<doc for="SqlDataAdapter.DeleteCommand">
		<summary>
			<para>Gets or sets a Transact-SQL statement or stored procedure to delete records from the data set.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.SqlClient.SqlCommand"/> used
   during <see cref="System.Data.Common.DbDataAdapter.Update"/> to
   delete records in the database that correspond to deleted rows in
   the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/> can be generated
   automatically if you set the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property and use the <see cref="System.Data.SqlClient.SqlCommandBuilder"/>. Then,
   any additional commands that you do not set are generated by the
<see cref="System.Data.SqlClient.SqlCommandBuilder"/>. This generation logic requires key column information to be
   present in the <see cref="System.Data.DataSet"/>. For more information
   see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/> is assigned to a previously created <see cref="System.Data.SqlClient.SqlCommand"/>,
the <see cref="System.Data.SqlClient.SqlCommand"/> is not cloned. The <see cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/> maintains a reference to the previously
created <see cref="System.Data.SqlClient.SqlCommand"/>
object.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> and <see cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/> properties. It assumes you
   have already created a <see cref="System.Data.SqlClient.SqlConnection"/> object.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.DeleteCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="SqlDataAdapter.InsertCommand">
		<summary>
			<para>Gets or sets a Transact-SQL statement or stored procedure to insert new records into the data source.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.SqlClient.SqlCommand"/> used
   during <see cref="System.Data.Common.DbDataAdapter.Update"/> to
   insert records into the database that correspond to new rows in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/> can be generated
   automatically if you set the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property and use the <see cref="System.Data.SqlClient.SqlCommandBuilder"/>. Then,
   any additional commands that you do not set are generated by the
<see cref="System.Data.SqlClient.SqlCommandBuilder"/>. This generation logic requires key column information to be
   present in the <see cref="System.Data.DataSet"/>. For more information
   see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/> is assigned to a previously created <see cref="System.Data.SqlClient.SqlCommand"/>,
the <see cref="System.Data.SqlClient.SqlCommand"/> is not cloned. The <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/> maintains a reference to the previously
created <see cref="System.Data.SqlClient.SqlCommand"/>
object.</para>
			<note type="note">
   If execution of this command returns rows,
   these rows may be added to the <see cref="System.Data.DataSet"/> depending on how you set the <see cref="System.Data.SqlClient.SqlCommand.UpdatedRowSource"/> property of the <see cref="System.Data.SqlClient.SqlCommand"/>object.
   
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> and <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/> properties. It assumes you
   have already created a <see cref="System.Data.SqlClient.SqlConnection"/> object.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.InsertCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="SqlDataAdapter.UpdateCommand">
		<summary>
			<para>Gets or sets a Transact-SQL
      statement or stored procedure used to update records in the data source.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.SqlClient.SqlCommand"/> used
   during <see cref="System.Data.Common.DbDataAdapter.Update"/> to
   update records in the database that correspond to modified rows in the <see cref="System.Data.DataSet"/>
   .</para>
		</value>
		<remarks>
			<para>During <see cref="System.Data.Common.DbDataAdapter.Update"/> , if this property is not
   set and primary key information is present in the <see cref="System.Data.DataSet"/>
   , the <see cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/> can be generated
   automatically if you set the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property and use the <see cref="System.Data.SqlClient.SqlCommandBuilder"/>. Then,
   any additional commands that you do not set are generated by the
<see cref="System.Data.SqlClient.SqlCommandBuilder"/>. This generation logic requires key column information to be
   present in the <see cref="System.Data.DataSet"/>. For more information
   see <see topic="cpconAutomaticallyGeneratedCommands"/>
   .</para>
			<para>When <see cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/> is assigned to a previously created <see cref="System.Data.SqlClient.SqlCommand"/>,
the <see cref="System.Data.SqlClient.SqlCommand"/> is not cloned. The <see cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/> maintains a reference to the previously
created <see cref="System.Data.SqlClient.SqlCommand"/>
object.</para>
			<note type="note">
   If execution of this command returns rows,
   the updated rows may be merged with the <see cref="System.Data.DataSet"/> depending on how you set the
<see cref="System.Data.SqlClient.SqlCommand.UpdatedRowSource"/> property of the <see cref="System.Data.SqlClient.SqlCommand"/>object.
   
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlDataAdapter"/> and sets the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> and <see cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/> properties. It assumes you
   have already created a <see cref="System.Data.SqlClient.SqlConnection"/> object.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter.UpdateCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
	</doc>
	<doc for="SqlDataAdapter">
		<summary>
			<para>Represents a set of data commands and a database
      connection that are used to fill the <see cref="System.Data.DataSet"/> and update a SQL Server database.
      This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.SqlClient.SqlDataAdapter"/> ,
   serves as a bridge between a <see cref="System.Data.DataSet"/> and SQL Server for retrieving and saving data. The <see cref="System.Data.SqlClient.SqlDataAdapter"/> provides this bridge
   by mapping <see cref="System.Data.Common.DbDataAdapter.Fill"/>, which changes the data in
   the <see cref="System.Data.DataSet"/> to match the data in the data source, and <see cref="System.Data.Common.DbDataAdapter.Update"/>, which changes the data in the data source to
   match the data in the <see cref="System.Data.DataSet"/> , using the appropriate Transact-SQL statements against
   the data
   source.</para>
			<para>When the <see cref="System.Data.SqlClient.SqlDataAdapter"/> fills a
<see cref="System.Data.DataSet"/> , it will create the 
necessary tables and columns for the returned data if they do not already exist.
However, primary key information will not be included in the implicitly created
schema unless the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/>
property is set to <see cref="System.Data.MissingSchemaAction.AddWithKey"/> . You may also have the <see cref="System.Data.SqlClient.SqlDataAdapter"/> create the schema
of the <see cref="System.Data.DataSet"/> , including primary key
information, before filling it with data using <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>. For more information, see
<see topic="cpconaddingexistingconstraintstodataset"/>.</para>
			<para><see cref="System.Data.SqlClient.SqlDataAdapter"/> is used in conjunction with <see cref="System.Data.SqlClient.SqlConnection"/>
and <see cref="System.Data.SqlClient.SqlCommand"/> to increase
performance when connecting to a Microsoft SQL Server database. </para>
			<para> The<see cref="System.Data.SqlClient.SqlDataAdapter"/> also includes the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>, <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/>, <see cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/>, <see cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/>, and <see cref="System.Data.Common.DataAdapter.TableMappings"/> properties to facilitate the
loading and updating of data.</para>
			<para>When an instance of <see cref="System.Data.SqlClient.SqlDataAdapter"/> is created, the read/write properties
are set to initial values. For a list of these values, see the <see cref="System.Data.SqlClient.SqlDataAdapter"/> constructor.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.SqlClient.SqlCommand"/>
, <see cref="System.Data.SqlClient.SqlDataAdapter"/> and <see cref="System.Data.SqlClient.SqlConnection"/> , to
select records from a database, and populate a <see cref="System.Data.DataSet"/> with the
selected rows. The filled <see cref="System.Data.DataSet"/> is then returned. To accomplish this, the method is
passed an initialized <see cref="System.Data.DataSet"/>, a connection string, and a query string that is a
Transact-SQL SELECT
statement.</para>
			<codelink SampleID="Classic WebData SqlDataAdapter Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection"/>
		<seealso cref="System.Data.SqlClient.SqlCommand"/>
		<seealso cref="System.Data.DataSet"/>
		<seealso cref="System.Data.DataTable"/>
	</doc></docs>
