<docs>
	<doc for="SqlCommand.ICloneable.Clone">
		<summary>
			<para>Creates a cloned instance of this instance.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Object"/> that is a clone of this instance.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlCommand.Connection"/> is
    not cloned, but instead shared.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> , clones it, then executes it. To accomplish this, the method is passed a string that is a Transact-SQL SELECT statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ICloneable.Clone Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlCommand.ExecuteRow">
		<summary>
			<para>Executes the query, and returns an <see cref="System.Data.IDataRecord"/>IDataRecord 
      containing a single row returned by the query.
</para>
		</summary>
	</doc>
	<doc for="SqlCommand.ExecuteStream">
		<summary>
			<para>Executes the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> against the <see cref="System.Data.SqlClient.SqlConnection"/> and returns the results as an XML stream.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> must contain a
   Transact-SQL FOR XML clause.
   </para>
		</remarks>
	</doc>
	<doc for="SqlCommand.CommandTimeout">
		<summary>
			<para>Gets or sets the wait time before terminating
      the attempt to execute a command and generating an error.</para>
		</summary>
		<value>
			<para> The time (in seconds) to wait for the command to execute. The
      default is 30 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The property value assigned is less than 0.</exception>
		<remarks>
			<para>A value of 0 indicates no limit, and should be avoided 
      in a <see cref="System.Data.OleDb.OleDbCommand.CommandTimeout"/> because an attempt to execute a
      command will wait indefinitely.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.</para>
			<codelink SampleID="Classic WebData IDbCommand.CommandTimeout Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandText"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.Connection"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandType"/>
	</doc>
	<doc for="SqlCommand.CreateParameter">
		<summary>
			<para>Creates
      a new instance of a <see cref="System.Data.SqlClient.SqlParameter"/> object. </para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.SqlClient.SqlParameter"/> object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlCommand.CreateParameter"/> method is a strongly-typed version of 
<see cref="System.Data.IDbCommand.CreateParameter"/>.</para>
		</remarks>
	</doc>
	<doc for="SqlCommand.ResetParameters">
		<summary>
			<para>Clears the <see cref="System.Data.SqlClient.SqlCommand.Parameters"/> property.</para>
		</summary>
	</doc>
	<doc for="SqlCommand.SqlCommand1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommand"/> class with the text of the query.
   </para>
		</summary>
		<param name="cmdText">The text of the query. </param>
		<remarks>
			<para> When an instance of <see cref="System.Data.SqlClient.SqlCommand"/> is created, the following read/write
   properties are set to initial values.
   </para>
			<list type="table">
				<listheader>
					<term> Properties</term>
					<description> Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandText"/>
					</term>
					<description>
						<paramref name="cmdText"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
					</term>
					<description> 30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandType"/>
					</term>
					<description>
						<see langword="CommandType.Text"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.Connection"/>
					</term>
					<description> null</description>
				</item>
			</list>
			<para> You can change the value for any of these properties through a separate call
   to the property.
   </para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.
   </para>
			<codelink SampleID="Classic WebData SqlCommand.SqlCommand1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlCommand.ResetCommandTimeout">
		<summary>
			<para>Resets the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/> property to its default value.</para>
		</summary>
		<remarks>
			<para>The default value of the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/> is 30
   seconds.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> , sets the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>, displays the property, resets the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
, and displays the
property again. In the example, the application passes a string that is a SQL Select
statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ResetCommandTimeout Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.ExecuteResultset">
		<summary>
			<para>Reserved for future use.</para>
		</summary>
		<param name="options">Reserved for future use.</param>
		<returns>
			<para>Reserved for future use.</para>
		</returns>
	</doc><doc for="SqlCommand.Connection">
		<summary>
			<para>Gets or sets the <see cref="System.Data.SqlClient.SqlConnection"/> used by this instance of the
<see cref="System.Data.SqlClient.SqlCommand"/> .</para>
		</summary>
		<value>
			<para>The connection to a data source. The default value is
   <see langword="null"/> .</para>
		</value>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.SqlClient.SqlCommand.Connection"/> property was changed while a transaction was in progress.</exception>
		<remarks>
			<para> If you set <see cref="System.Data.SqlClient.SqlCommand.Connection"/> while a transaction is in 
   progress and the <see cref="System.Data.SqlClient.SqlCommand.Transaction"/> property is not null, an <see cref="System.InvalidOperationException"/> is generated. If the <see cref="System.Data.SqlClient.SqlCommand.Transaction"/>
   property is not null and the transaction has already been committed or rolled
   back, <see cref="System.Data.SqlClient.SqlCommand.Transaction"/> is set to null.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData SqlCommand.Connection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandText"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandType"/>
	</doc><doc for="SqlCommand.ISqlCommand.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.IDbCommand.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.IDbCommand.Transaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.ISqlCommand.Transaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.IDbCommand.Parameters">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.ISqlCommand.Parameters">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.IDbCommand.CreateParameter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.ISqlCommand.CreateParameter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.ISqlCommand.ExecuteReader">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.IDbCommand.ExecuteReader">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.ISqlCommand.ExecuteReader1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.IDbCommand.ExecuteReader1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlCommand.Cancel">
		<summary>
			<para>Attempts to cancel the execution of a <see cref="System.Data.SqlClient.SqlCommand"/>.</para>
		</summary>
		<remarks>
			<para>If there is nothing to cancel, nothing happens. However, 
      if there is a command in process, and the attempt to cancel fails, no exception
      is generated.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of the <see cref="System.Data.SqlClient.SqlCommand.Cancel"/> method.</para>
			<codelink SampleID="Classic WebData SqlCommand.Cancel" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.Transaction">
		<summary>
			<para>Gets or sets the <see cref="System.Data.SqlClient.SqlTransaction"/> within which the <see cref="System.Data.SqlClient.SqlCommand"/>
executes.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.SqlClient.SqlTransaction"/>. The default
   value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>You cannot set the <see cref="System.Data.SqlClient.SqlCommand.Transaction"/> property if it is already set to a
   specific value, and the command is in the process of executing. If you set the
   transaction property to a <see cref="System.Data.SqlClient.SqlTransaction"/> object that is not connected
   to the same <see cref="System.Data.SqlClient.SqlConnection"/> as the <see cref="System.Data.SqlClient.SqlCommand"/> object, an exception will be
   thrown the next time you attempt to execute a statement.</para>
		</remarks>
	</doc>
	<doc for="SqlCommand.ExecuteReader1">
		<summary>
			<para>Sends the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> to the <see cref="System.Data.SqlClient.SqlCommand.Connection"/>, and builds a <see cref="System.Data.SqlClient.SqlDataReader"/> using one of the <see cref="System.Data.CommandBehavior"/>values.</para>
		</summary>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>A <see cref="System.Data.SqlClient.SqlDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>When the <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> property 
   should be set to the name of the stored procedure. The command executes this
   stored procedure when you call <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/>.</para>
			<para>The <see cref="System.Data.SqlClient.SqlDataReader"/> supports a special mode that enables large binary
values to be read efficiently. For more information, see the
<see langword="SequentialAccess"/> setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para>While the <see cref="System.Data.SqlClient.SqlDataReader"/> is in use,
the associated <see cref="System.Data.SqlClient.SqlConnection"/> is
busy serving the <see cref="System.Data.SqlClient.SqlDataReader"/>.
While in this state, no other operations can be performed on the <see cref="System.Data.SqlClient.SqlConnection"/> other than closing it. This is the case
until you call the <see cref="System.Data.SqlClient.SqlDataReader.Close" qualify="true"/> method. If the
<see cref="System.Data.SqlClient.SqlDataReader"/>is created with <see cref="System.Data.CommandBehavior"/> set to <see langword="CloseConnection"/>, closing 
the <see cref="System.Data.SqlClient.SqlDataReader"/> closes the connection automatically.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> , then executes it by passing a string
   that is a Transact-SQL SELECT statement, and a string to use to connect to the
   data source. <see cref="System.Data.CommandBehavior"/> is set to <see cref="System.Data.CommandBehavior.CloseConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlCommand.ExecuteReader2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlCommand.UpdatedRowSource">
		<summary>
			<para> Gets or sets how command results are applied to the <see cref="System.Data.DataRow"/> when used
   by the <see cref="System.Data.Common.DbDataAdapter.Update"/> method of the <see cref="System.Data.Common.DbDataAdapter"/>.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.UpdateRowSource"/> values.</para>
		</value>
		<exception cref="System.ArgumentException">The value entered was not one of the <see cref="System.Data.UpdateRowSource"/> values.</exception>
		<remarks>
			<para>The default <see cref="System.Data.UpdateRowSource"/> value is <see langword="Both"/> 
unless the command is automatically generated (as in the case of the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> ), in which case
the default is <see langword="None"/>.</para>
			<para>For more information about using the <see cref="System.Data.SqlClient.SqlCommand.UpdatedRowSource"/> property, see <see topic="cpconusingparameterswithdataadapters"/>.</para>
		</remarks>
	</doc>
	<doc for="SqlCommand.CommandText">
		<summary>
			<para>Gets or sets the Transact-SQL statement or stored procedure to execute at the data source.</para>
		</summary>
		<value>
			<para>The Transact-SQL statement or stored procedure to execute. The default is an empty string.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> property should be set to the 
   name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters.
   The command executes this stored procedure when
   you call one of the Execute methods.</para>
			<para>The .NET Framework Data Provider for SQL Server does not support the
   question mark (?) placeholder for passing parameters to a Transact-SQL statement
   or a stored procedure called by a command of <see langword="CommandType.Text"/>. In this case, named parameters must be
   used. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = @CustomerID
</code>
			<para> For more information see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.</para>
			<codelink SampleID="Classic WebData SqlCommand.CommandText Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlCommand.Connection"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandType"/>
	</doc>
	<doc for="SqlCommand.CommandType">
		<summary>
			<para>Gets or sets a value indicating how the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> property is to be interpreted.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.CommandType"/> values. The default is <see langword="Text"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The value was not a valid <see cref="System.Data.CommandType"/> .</exception>
		<remarks>
			<para>When you set the <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> property to
<see langword="StoredProcedure"/>, you should set the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> 
property to the name of the stored procedure. The command executes this stored
procedure when you call one of the Execute methods.</para>
			<para>The .NET Framework Data Provider for SQL Server does not support the
   question mark (?) placeholder for passing parameters to a SQL Statement or a
   stored procedure called with a <see cref="System.Data.SqlClient.SqlCommand.CommandType"/>
   of <see cref="System.Data.CommandType.Text"/>. In this case, named
   parameters must be used. For example:</para>
			<para>SELECT * FROM Customers WHERE CustomerID =
   @CustomerID</para>
			<para>For more information see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.</para>
			<codelink SampleID="Classic WebData IDbCommand.CommandTimeout Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandText"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlCommand.Connection"/>
	</doc>
	<doc for="SqlCommand.Parameters">
		<summary>
			<para> Gets the <see cref="System.Data.SqlClient.SqlParameterCollection"/>
.</para>
		</summary>
		<value>
			<para> The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</para>
		</value>
		<remarks>
			<para>The .NET Framework Data Provider for SQL Server does not support the question
      mark (?) placeholder for passing parameters to a SQL Statement or a stored
      procedure called by a Command of CommandType.Text. In this case, named
      parameters must be used. For example:</para>
			<para>SELECT * FROM Customers WHERE CustomerID =
      @CustomerID</para>
			<note type="note">
      If the parameters in the collection
      do not match the requirements of the query to be executed, an error may
      result.
      </note>
			<para>For more information see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and displays its parameters.
   To accomplish this, the method is passed a <see cref="System.Data.SqlClient.SqlConnection"/> , a query string that is a
   Transact-SQL SELECT statement, and an array of <see cref="System.Data.SqlClient.SqlParameter"/> objects.</para>
			<codelink SampleID="Classic WebData IDbCommand.Parameters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlParameter"/>
	</doc>
	<doc for="SqlCommand.ExecuteXmlReader">
		<summary>
			<para>Sends the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> to the <see cref="System.Data.SqlClient.SqlCommand.Connection"/> and builds an <see cref="System.Xml.XmlReader"/> object.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Xml.XmlReader"/> object.</para>
		</returns>
		<exception cref="System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0.</exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> property
   usually specifies a Transact-SQL statement with a valid FOR XML
   clause. However, <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> can also specify a
   statement that returns <see langword="ntext "/>data containing valid XML.</para>
			<para>A typical <see cref="System.Data.SqlClient.SqlCommand.ExecuteXmlReader"/>
query can be formatted as in the following C# example:</para>
			<code>
SqlCommand mySqlCommand = new SqlCommand("select * from customers FOR XML AUTO, XMLDATA", mySqlConnection);
</code>
			<note type="note">
   This type
   of query only works with Microsoft SQL Server 2000 or later. For details see Guidelines for Using the FOR XML Clause in SQL Server Books Online.
</note>
			<para>While the <see cref="System.Xml.XmlReader"/> is in use, the associated <see cref="System.Data.SqlClient.SqlConnection"/> is busy serving the <see cref="System.Xml.XmlReader"/>. While in this state, no other operations can
be performed on the <see cref="System.Data.SqlClient.SqlConnection"/> other than closing it. This is the case until
the <see cref="System.Xml.XmlReader.Close"/> method of the <see cref="System.Xml.XmlReader"/> is called.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and then executes it
   using <see cref="System.Data.SqlClient.SqlCommand.ExecuteXmlReader"/> . The example is
   passed a string that is a Transact-SQL FOR XML SELECT statement,
   and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ExecuteXmlReader" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlCommand.ExecuteReader">
		<overload>
			<para> Sends the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> to the
<see cref="System.Data.SqlClient.SqlCommand.Connection"/> and builds a <see cref="System.Data.SqlClient.SqlDataReader"/>.</para>
		</overload>
		<summary>
			<para>Sends the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> to the <see cref="System.Data.SqlClient.SqlCommand.Connection"/> and builds a <see cref="System.Data.SqlClient.SqlDataReader"/>.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.SqlClient.SqlDataReader"/> object.</para>
		</returns>
		<exception cref="System.Exception">The command could not be executed.</exception>
		<exception cref="System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0.</exception>
		<remarks>
			<para>When the <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/>
property should be set to the name of the stored procedure.
The command executes this stored procedure when you call <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/>.</para>
			<para>While the <see cref="System.Data.SqlClient.SqlDataReader"/> is in use, the associated <see cref="System.Data.SqlClient.SqlConnection"/> is busy serving the <see cref="System.Data.SqlClient.SqlDataReader"/>. While in this state, no other operations can
be performed on the <see cref="System.Data.SqlClient.SqlConnection"/> other than closing it. This is the case until
the <see cref="System.Data.SqlClient.SqlDataReader.Close"/> method of the <see cref="System.Data.SqlClient.SqlDataReader"/> is called.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> , then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ExecuteReader Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlCommand">
		<summary>
			<para> Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>When an instance of <see cref="System.Data.SqlClient.SqlCommand"/> is created, the read/write properties are
   set to their initial values. For a list of these values, see the <see cref="System.Data.SqlClient.SqlCommand"/> constructor.</para>
			<para><see cref="System.Data.SqlClient.SqlCommand"/> features the following methods for executing
commands at a SQL Server database:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/></term>
					<description>Executes commands that return rows. For increased
      performance, <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/> invokes commands using
      the Transact-SQL sp_executesql system stored procedure. As a result,
   <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/> may not have the desired
      effect if used to execute commands such as Transact-SQL SET
      statements. </description>
				</item>
				<item>
					<term><see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/></term>
					<description>Executes commands such as Transact-SQL INSERT, DELETE,
   UPDATE, and SET statements.</description>
				</item>
				<item>
					<term><see cref="System.Data.SqlClient.SqlCommand.ExecuteScalar"/></term>
					<description>Retrieves a single value (for example, an aggregate
   value) from a database.</description>
				</item>
				<item>
					<term><see cref="System.Data.SqlClient.SqlCommand.ExecuteXmlReader"/></term>
					<description>Sends the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> to the
<see cref="System.Data.SqlClient.SqlCommand.Connection"/> and builds an <see cref="System.Xml.XmlReader"/> 
object.</description>
				</item>
			</list>
			<para>You can reset the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> property and reuse
the <see cref="System.Data.SqlClient.SqlCommand"/> object. However, you must close
the <see cref="System.Data.SqlClient.SqlDataReader"/> before you
can execute a new or previous command.</para>
			<para>If a <see cref="System.Data.SqlClient.SqlException"/> is generated
by the method executing a <see cref="System.Data.SqlClient.SqlCommand"/>, the <see cref="System.Data.SqlClient.SqlConnection"/> remains open when the severity level is
19 or less. When the severity level is 20 or greater, the server usually
closes the <see cref="System.Data.SqlClient.SqlConnection"/>. However, the user can reopen the
connection and continue.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>, a <see cref="System.Data.SqlClient.SqlCommand"/>,
   and a <see cref="System.Data.SqlClient.SqlDataReader"/>. The example reads through the data, writing it
   to the console. Finally, the example closes the <see cref="System.Data.SqlClient.SqlDataReader"/>,
   then the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
			<codelink SampleID="Classic WebData SqlCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter"/>
		<seealso cref="System.Data.SqlClient.SqlConnection"/>
	</doc>
	<doc for="SqlCommand.DesignTimeVisible">
		<summary>
			<para> Gets or sets a value indicating whether the command object should be visible in
      a Windows Forms Designer control.</para>
		</summary>
		<value>
			<para> A value indicating whether the command object should be visible in a
      control. The default is <see langword="true"/>.</para>
		</value>
	</doc><doc for="SqlCommand.Prepare">
		<summary>
			<para> Creates a prepared version of the command on an instance of SQL
      Server.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>The <see cref="System.Data.SqlClient.SqlCommand.Connection"/> is not set.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.SqlClient.SqlCommand.Connection"/> is not <see cref="System.Data.SqlClient.SqlConnection.Open"/> .</para></exception>
		<remarks>
			<para> 
      If <see cref="System.Data.SqlClient.SqlCommand.CommandType"/> is set to <see langword="StoredProcedure"/>, the call
      to <see cref="System.Data.SqlClient.SqlCommand.Prepare"/> should succeed, although it may result in a no-op.</para>
			<para>Before you call <see cref="System.Data.SqlClient.SqlCommand.Prepare"/>, specify
   the data type of each parameter in the statement to be prepared. For each
   parameter that has a variable length data type, you must set
   the <see cref="System.Data.SqlClient.SqlParameter.Size"/> property to the maximum size
   needed. <see cref="System.Data.SqlClient.SqlCommand.Prepare"/> returns an error if these
   conditions are not met. </para>
			<para>If you call an Execute method after calling
<see cref="System.Data.SqlClient.SqlCommand.Prepare"/>, any parameter value that is 
   larger than the value specified by the <see cref="System.Data.SqlClient.SqlParameter.Size"/> property is
   automatically truncated to the original specified size of the parameter, and no
   truncation errors are returned.</para>
			<para>Output parameters (whether
   prepared or not) must have a user-specified data type. If you specify a variable
   length data type, you must also specify the maximum <see cref="System.Data.SqlClient.SqlParameter.Size"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of the <see cref="System.Data.SqlClient.SqlCommand.Prepare"/> method.</para>
			<codelink SampleID="Classic WebData SqlCommand.Prepare" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.ExecuteNonQuery">
		<summary>
			<para> Executes a Transact-SQL statement against the connection and returns the number of rows affected.</para>
		</summary>
		<returns>
			<para>The number of rows affected.</para>
		</returns>
		<exception cref="System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0.</exception>
		<remarks>
			<para>You can use the <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> to perform catalog operations
   (for example, querying the structure of a database or creating database objects
   such as tables), or to change the data in a database without using a <see cref="System.Data.DataSet"/> by executing
   UPDATE, INSERT, or DELETE statements.</para>
			<para>Although the <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> does not return any rows, any
output parameters or return values mapped to parameters are populated with
data.</para>
			<para> For UPDATE, INSERT, and DELETE statements, the return 
   value is the
   number of rows affected by the command. For all other types of statements,
   the return value is -1. If a rollback occurs, the return value is also
   -1.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and then executes it using <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> . The example is passed a string that is a Transact-SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ExecuteNonQuery Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.SqlCommand">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommand"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommand"/> class.
   </para>
		</summary>
		<remarks>
			<para> The base constructor initializes all fields to their
      default values. The following table shows initial property values for an instance of <see cref="System.Data.SqlClient.SqlCommand"/>
      .</para>
			<list type="table">
				<listheader>
					<term> Properties</term>
					<description> Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandText"/></term>
					<description> empty
            string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/></term>
					<description> 30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandType"/></term>
					<description><see langword="CommandType.Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.Connection"/></term>
					<description> Null</description>
				</item>
			</list>
			<para> You can change the value for any of these properties through a separate call
   to the property.
   </para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.
   </para>
			<codelink SampleID="Classic WebData IDbCommand.CommandTimeout Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.SqlCommand2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommand"/> class with the text of the query and a <see cref="System.Data.SqlClient.SqlConnection"/> .</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<param name="connection">A <see cref="System.Data.SqlClient.SqlConnection"/> that represents the connection to an instance of SQL Server.</param>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Data.SqlClient.SqlCommand"/>
.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandText"/></term>
					<description><paramref name="cmdText"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandType"/></term>
					<description><see langword="CommandType.Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.Connection"/></term>
					<description>A new <see cref="System.Data.SqlClient.SqlConnection"/> that is
   the value for the <paramref name="connection"/> parameter.</description>
				</item>
			</list>
			<para> You can change the value for any of these parameters by
   setting the related property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.</para>
			<codelink SampleID="Classic WebData SqlCommand.SqlCommand2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.SqlCommand3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommand"/> class with the text of the query, a <see cref="System.Data.SqlClient.SqlConnection"/>,
   and the <see cref="System.Data.SqlClient.SqlTransaction"/>.</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<param name="connection">A <see cref="System.Data.SqlClient.SqlConnection"/> that represents the connection to an instance of SQL Server.</param>
		<param name="transaction">The <see cref="System.Data.SqlClient.SqlTransaction"/> in which the <see cref="System.Data.SqlClient.SqlCommand"/> executes.</param>
		<remarks>
			<para>The following table shows initial property values for an
      instance of <see cref="System.Data.SqlClient.SqlCommand"/>
      .</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandText"/></term>
					<description><paramref name="cmdText"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.CommandType"/></term>
					<description><see langword="CommandType.Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlCommand.Connection"/></term>
					<description>A new <see cref="System.Data.SqlClient.SqlConnection"/> that is
   the value for the <paramref name="connection"/> parameter.</description>
				</item>
			</list>
			<para> You can change the value for any of these parameters by
   setting the related property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and sets some of its
   properties.</para>
			<codelink SampleID="Classic WebData SqlCommand.SqlCommand3" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommand.ExecuteScalar">
		<summary>
			<para>Executes the query, and returns the first column of the
      first row in the result set returned by the query. Extra columns or rows are
      ignored.</para>
		</summary>
		<returns>
			<para>The first column of the first row in the result set, or a null reference if the result set is empty.</para>
		</returns>
		<exception cref="System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0.</exception>
		<remarks>
			<para>Use the <see cref="System.Data.SqlClient.SqlCommand.ExecuteScalar"/> method to retrieve a
   single value (for example, an aggregate value) from a database. This requires less
   code than using the <see cref="System.Data.SqlClient.SqlCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value using the data returned by a <see cref="System.Data.SqlClient.SqlDataReader"/>.</para>
			<para>A typical <see cref="System.Data.SqlClient.SqlCommand.ExecuteScalar"/> query can be formatted as in the following C# example:</para>
			<code>
cmd.CommandText = "select count(*) from region";
Int32 count = (int32) cmd.ExecuteScalar();
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and then executes it
   using <see cref="System.Data.SqlClient.SqlCommand.ExecuteScalar"/> . The example is passed a
   string that is a Transact-SQL statement that returns an aggregate result,
   and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData SqlCommand.ExecuteScalar" SnippetID="1"/>
		</example>
	</doc></docs>
