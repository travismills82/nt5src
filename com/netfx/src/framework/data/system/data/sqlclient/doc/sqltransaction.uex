<docs>
	<doc for="SqlTransaction.GetServerTransactionLevel">
		<summary> Returns the transaction nesting level from the server.
 </summary>
	</doc>
	<doc for="SqlTransaction.Finalize">
		<summary>
			<para>Frees resources before the <see cref="System.Data.SqlClient.SqlTransaction"/> is reclaimed by the Garbage Collector.</para>
		</summary>
	</doc>
	<doc for="SqlTransaction.IsolationLevel">
		<summary>
			<para>Specifies the <see cref="System.Data.IsolationLevel"/>
for this transaction.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.IsolationLevel"/> for this transaction. The default is 
<see langword="ReadCommitted"/>.</para>
		</value>
		<remarks>
			<para>Parallel transactions are not supported. Therefore, 
      the <see cref="System.Data.IsolationLevel"/> applies to the entire transaction.</para>
		</remarks>
	</doc>
	<doc for="SqlTransaction.Dispose1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlTransaction">
		<summary>
			<para> Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The
      application creates a <see cref="System.Data.SqlClient.SqlTransaction"/> object by calling <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> on
      the <see cref="System.Data.SqlClient.SqlConnection"/> object. All subsequent operations associated with the
      transaction (for example, committing or aborting the transaction), are performed
      on the <see cref="System.Data.SqlClient.SqlTransaction"/> object.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> , <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter"/>
		<seealso cref="System.Data.SqlClient.SqlConnection"/>
	</doc><doc for="SqlTransaction.Rollback1">
		<overload>
			<para> Rolls back
      a transaction from a pending state.
      </para>
		</overload>
		<summary>
			<para> Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.
      </para>
		</summary>
		<param name="transactionName">The name of the transaction to rollback, or the savepoint to which to rollback. </param>
		<exception cref="System.ArgumentException">No transaction name was be specified. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method is equivalent to
   the Transact-Sql ROLLBACK TRANSACTION statement. For more information, see SQL
   Server Books Online.</para>
			<para> The transaction can only be rolled back from a pending state
   (after <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> has been called, but
   before <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> is called).
   </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> , <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Commit"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Save"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>
	</doc><doc for="SqlTransaction.IDbTransaction.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlTransaction.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.SqlClient.SqlTransaction"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.SqlClient.SqlTransaction"/> and optionally releases the managed
   resources.</para>
		</summary>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the private 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Data.SqlClient.SqlTransaction"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlTransaction"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData SqlTransaction.Dispose Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlTransaction.Connection">
		<summary>
			<para>Gets the <see cref="System.Data.SqlClient.SqlConnection"/> object associated with the transaction,
   or <see langword="null"/> if the transaction is no longer valid. </para>
		</summary>
		<value>
			<para>The <see cref="System.Data.SqlClient.SqlConnection"/> object associated with the 
   transaction.</para>
		</value>
		<remarks>
			<para> A single application may have multiple database connections, each with zero or more transactions.
      This property enables you to determine the connection
      object associated with a particular transaction created by <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>.</para>
		</remarks>
	</doc><doc for="SqlTransaction.Rollback">
		<overload>
			<para>Rolls back a transaction from a pending state.</para>
		</overload>
		<summary>
			<para> Rolls back a transaction from a pending state.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method is equivalent to the Transact-Sql ROLLBACK TRANSACTION
   statement. For more information, see SQL Server Books Online.</para>
			<para> The transaction can only be rolled back from a pending state (after <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> has been called, but before
<see cref="System.Data.SqlClient.SqlTransaction.Commit"/> is called).</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/> , <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Commit"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>
	</doc>
	<doc for="SqlTransaction.Save">
		<summary>
			<para> Creates a savepoint in the transaction that can be used to roll back a portion of
      the transaction, and specifies the savepoint name.
      </para>
		</summary>
		<param name="savePointName">The name of the savepoint. </param>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para><see cref="System.Data.SqlClient.SqlTransaction.Save"/> method is equivalent to
   the Transact-SQL SAVE TRANSACTION statement. For more information, see
   SQL Server Books Online.</para>
			<para>The value used in the <paramref name="savePoint
   "/>parameter can be the same value used in the <paramref name="transactionName"/> parameter of some implementations of
   the <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>
   method.</para>
			<para>Savepoints offer a mechanism to roll back portions of transactions. You
   create a savepoint using the <see cref="System.Data.SqlClient.SqlTransaction.Save"/> method, and then later
   call the <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method to roll back to the savepoint instead of rolling back
   to the start of the transaction.</para>
			<para>Savepoints are useful in situations where errors are unlikely to occur. The
   use of a savepoint to roll back part of a transaction in the case of an
   infrequent error can be more efficient than having each transaction test to see
   if an update is valid before making the update. Updates and rollbacks are
   expensive operations, so savepoints are effective only if the probability of
   encountering the error is low and the cost of checking the validity of an update
   beforehand is relatively high.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>, <see cref="System.Data.SqlClient.SqlTransaction.Save"/>, <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlTransaction.Save Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Commit"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>
	</doc>
	<doc for="SqlTransaction.Commit">
		<summary>
			<para> Commits the database transaction.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> method is equivalent to
   the Transact-Sql COMMIT TRANSACTION statement. For more information, see
   SQL Server Books Online.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Save"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
	</doc>
</docs>
