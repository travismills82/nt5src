<docs>
   <doc for="TdsParser">
 <summary> The TdsParser Object controls reading/writing to the netlib, parsing the tds,
          and surfacing objects to the user.

 </summary>
   </doc>
   <doc for="TdsParser.TdsParser">
 <summary> TdsParser constructor
 </summary>
   </doc>
   <doc for="TdsParser.Connect">
 <summary> TdsParser connection procedure to establish netlib connection.
 </summary>
 <param name='host'>Hostname of server.</param>
 <param name='protocol'></param>
 <param name='connHandler'></param>
 <param name='timeout'></param>
 <exception cref='System.OutOfMemoryException'>- Unable to allocate memory</exception>
   </doc>
   <doc for="TdsParser.Disconnect">
 <summary> Used to close the connection and then free the memory allocated for the netlib connection.
 </summary>
   </doc>
   <doc for="TdsParser.ThrowExceptionAndWarning">
 <summary>  Function that will call the connection handler on the local error(s) or warning(s).
 </summary>
   </doc>
   <doc for="TdsParser.ProcessNetlibError">
 <summary>  Function that will throw the appropriate exception based on the short passed into it.
 </summary>
 <param name='errno'>
         Short indicating from the netlib which error occurred.
 </param>
   </doc>
   <doc for="TdsParser.SetOutBufferSize">
 <summary> Takes packet size as argument and then sets the size of the out buffer based on that.
 </summary>
 <param name='size'>
        Size of packet.
 </param>
 <exception cref='System.OutOfMemoryException'>
        - unable to create the buffer
 </exception>
   </doc>
   <doc for="TdsParser.SetInBufferSize">
 <summary> Takes packet size as argument and then sets the size of the in buffer based on that.
 </summary>
 <param name='size'>
        Size of packet.
 </param>
 <exception cref='System.OutOfMemoryException'>
        - unable to create the buffer
 </exception>
   </doc>
   <doc for="TdsParser.FlushBuffer">
 <summary> Dumps contents of buffer to socket.
 </summary>
 <exception cref='System.OutOfMemoryException'>
         - unable to allocate memory
 </exception>
   </doc>
   <doc for="TdsParser.ReadBuffer">
 <summary> Wrapper function that calls the function that reads as much as possible from the netlib
        and inserts it into the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadNetlib">
 <summary>
 </summary>
   </doc>
   <doc for="TdsParser.ProcessHeader">
 <summary> Processes the tds header that is present in the buffer
 </summary>
   </doc>
   <doc for="TdsParser.WriteByte">
 <summary> Takes in a single byte and writes it to the buffer.  If the buffer is full, it is flushed
        and then the buffer is re-initialized in flush() and then the byte is put in the buffer.
 </summary>
 <param name='b'>
        Individual byte to be written.
 </param>
   </doc>
   <doc for="TdsParser.ReadByte">
 <summary> Takes no arguments and returns a byte from the buffer.  If the buffer is empty, it is filled
        before the byte is returned.
 </summary>
   </doc>
   <doc for="TdsParser.ReadByteArray">
 <summary> Takes a byte array, an offset, and a len and fills the array from the offset to len number of
        bytes from the in buffer.
 </summary>
 <param name='buff'>
        Byte array to be filled with bytes from the buffer.
 </param>
 <param name='offset'>
        Location in the array where writing will begin.
 </param>
 <param name='len'>
        Number of bytes to be written to the byte array that is passed in.
 </param>
   </doc>
   <doc for="TdsParser.WriteChar">
 <summary> Takes a char and writes it as a char.
 </summary>
 <param name='ch'>
        Char to be written.
 </param>
   </doc>
   <doc for="TdsParser.ReadChar">
 <summary> Returns a char from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadShort">
 <summary> Returns a short from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadUnsignedShort">
 <summary> Returns an unsigned short from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadInt">
 <summary> Returns an int from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadFloat">
 <summary> Returns a float from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadLong">
 <summary> Returns a long from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.ReadDouble">
 <summary> Returns a double from the in buffer.
 </summary>
   </doc>
   <doc for="TdsParser.SkipBytes">
 <summary> Reads bytes from the buffer but doesn't return them, in effect simply deleting them.
 </summary>
 <param name='num'>
        Number of bytes to be skipped.
 </param>
   </doc>
   <doc for="TdsParser.Run">
 <summary> main parse loop for the top-level tds tokens, calls back into the I*Handler interfaces
 </summary>
   </doc>
   <doc for="TdsParser.ProcessError">
 <summary> Processes the error from the wire
 </summary>
   </doc>
   <doc for="TdsParser.ProcessMetaData">
 <summary> fills in the col meta data structures, allocates an array of ColMetaData classes
 </summary>
   </doc>
   <doc for="TdsParser.FlushBufferOOB">
 <summary> Dumps contents of buffer to OOB write (currently only used for attentions.  There is no body for this message
        Doesn't touch this.outBytesUsed
 </summary>
   </doc>
   <doc for="TdsParser.TdsLogin">
 <summary> writes the login record to the wire after computing lengths, offsets, etc.
 </summary>
   </doc>
   <doc for="TdsParser.SSPIData">
 <summary> Private function that provides SSPI data and length.
 </summary>
   </doc>
   <doc for="TdsParser.ProcessSSPI">
 <summary> Private helper function that takes token length and processes SSPI.
 </summary>
   </doc>
   <doc for="TdsParser.SSPIError">
 <summary> Private helper function that takes info about failure and throws proper exception
 </summary>
   </doc>
   <doc for="TdsParser.InitSSPISession">
 <summary> Private helper function that initializes the SSPI session and package.
 </summary>
   </doc>
   <doc for="TdsParser.TermSSPISession">
 <summary> Private helper function that terminates the SSPI session and package.
 </summary>
   </doc>
   <doc for="TdsParser.GetDTCAddress">
 <summary> Obtains the Address of the DTC address from the server.
 </summary>
   </doc>
   <doc for="TdsParser.PropagateDistributedTransaction">
 <summary> Propagate the dtc cookie to the server, enlisting the connection.  We pass in
           the length because the buffer size is not always guaranteed to be equal to the
           length of the actual transaction cookie.
 </summary>
   </doc>
   <doc for="TdsParser.TdsExecuteRPC">
 <summary> Executes the given parameterized command or RPC
 </summary>
   </doc>
</docs>

