<docs>
	<doc for="SqlConnection.IntegratedSecurity">
		<summary>
			<para>
       Retrieves whether the connection was opened using integrated security.
    </para>
		</summary>
		<value>
			<para>
       True means the user logged in via intergrated security.
       default value is false.
    </para>
		</value>
		<remarks>
			<note type="note">
          This property is read-only.
       </note>
		</remarks>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.DataSource"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.UserId"/>
	</doc>
	<doc for="SqlConnection.Password">
		<summary>
			<para>Gets or sets the password to use when connecting.</para>
		</summary>
		<value>
			<para>The password to use when connecting. The
       default value is an empty string.</para>
		</value>
		<exception cref="System.InvalidOperationException">
			<para>The connection is broken.</para>
			<para>-or-</para>
			<para>The connection is open. You must first close the connection.</para>
		</exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.Password"/>
 property overwrites the corresponding property within the connection string.</para>
			<para>Retrieval of the <see cref="System.Data.SqlClient.SqlConnection.Password"/> is limited by the
 PersistSecurityInfo setting in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>.</para>
			<note type="note">
    This property is read-only while
    the connection is open.
 </note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and sets some of its
    properties.</para>
			<codelink SampleID="Classic WebData SqlConnection.Password Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.DataSource"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.UserId"/>
	</doc>
	<doc for="SqlConnection.UserId">
		<summary>
			<para>Gets or sets the user ID to use when connecting.</para>
		</summary>
		<value>
			<para>The user ID to use when connecting.
       The default value is an empty string.</para>
		</value>
		<exception cref="System.InvalidOperationException">
			<para>The connection is open. You must first close the connection.</para>
			<para>-or-</para> The connection is broken.</exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.UserId"/>
 property overwrites the cooresponding property within the connection string.</para>
			<note type="note">
    This property is read-only while
    the connection is open.
 </note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and sets some of its
    properties.</para>
			<codelink SampleID="Classic WebData SqlConnection.Password Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.DataSource"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Password"/>
	</doc>
	<doc for="SqlConnection.ICloneable.Clone">
		<summary>
			<para>
       Creates a new instance of the object initialized with the current connection
       string.
    </para>
		</summary>
		<remarks>
			<para>
       The new instance will be in a closed state.
    </para>
		</remarks>
		<example>
			<para>
       The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>, displays some
       of its read-only properties,
       then clones the connection.
    </para>
			<codelink SampleID="Classic WebData SqlConnection.ICloneable.Clone Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlConnection.Finalize">
		<summary>
			<para>
       Performs any final actions, then disposes of the object.
    </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
       When
       overriding <see cref="System.Data.SqlClient.SqlConnection.Finalize"/> in a derived class, be sure to call the base
       class's <see cref="System.Data.SqlClient.SqlConnection.Finalize"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="SqlConnection.AdapterAdd">
		<summary>
		</summary>
		<param name="adapter">
		</param>
	</doc>
	<doc for="SqlConnection.ExecuteTransaction">
		<summary> Internal code for common transaction related work.
 </summary>
	</doc>
	<doc for="SqlConnection.OnEnvChange">
		<summary> SQLENVCHANGE environment change token handler implementation for IConnection handler.
 </summary>
	</doc>
	<doc for="SqlConnection.OnError">
		<summary>
		</summary>
	</doc>
	<doc for="SqlConnection.OnInfoMessage">
		<summary>
			<para>
       Raises the <see cref="System.Data.SqlClient.SqlInfoMessageEventArgs"/> event.
    </para>
		</summary>
		<param name="imevent">
    A <see cref="System.Data.SqlClient.SqlInfoMessageEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event-handling method
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>
       .
    </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Data.SqlClient.SqlConnection.OnInfoMessage"/> in a derived class, be sure to
       call the base class's <see cref="System.Data.SqlClient.SqlConnection.OnInfoMessage"/> method.
    </note>
		</remarks>
		<example>
			<para>
       The following example uses this method within a derived class.
    </para>
		</example>
	</doc>
	<doc for="SqlConnection.CreateCommand">
		<summary>
			<para>Creates and returns a <see cref="System.Data.SqlClient.SqlCommand"/> object associated with
   the <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Data.SqlClient.SqlCommand"/> object. </para>
		</returns>
	</doc>
	<doc for="SqlConnection.ServerVersion">
		<summary>
			<para> Gets a string containing the version of the instance of SQL Server to which the client is connected.
      </para>
		</summary>
		<value>
			<para> 
      The version of the instance of SQL Server.
   </para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed. </exception>
		<remarks>
			<para>The version is of the form ##.##.####, where the first two digits are the
      major version, the next two digits are the minor version, and the last four
      digits are the release version. The string is of the form major.minor.build,
      where major and minor are exactly two digits and build is exactly four digits. </para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData ISqlConnection.ServerVersion Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlConnection.WorkstationId">
		<summary>
			<para>Gets a string
      that identifies the database client.
      </para>
		</summary>
		<value>
			<para>A string that identifies the database client. If not 
      specified, the name of the client computer. If neither
      is specified, the value is an empty string.</para>
		</value>
		<remarks>
			<para>The string typically contains the network name of the
      client. The <see cref="System.Data.SqlClient.SqlConnection.WorkstationId"/>
      property corresponds to the <see langword="Workstation ID "/>
      connection string property.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData SqlConnection.WorkstationId Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SQLDebugging">
		<summary>
			<para>Included to support debugging applications. Not intended for direct use.</para>
		</summary>
	</doc><doc for="SqlConnection.DataSource">
		<summary>
			<para> Gets the name of the instance of SQL Server to which to connect.</para>
		</summary>
		<value>
			<para>The name of the instance of SQL Server to which to
      connect. The default value is an empty string.</para>
		</value>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData SqlConnection.DataSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
	</doc><doc for="SqlConnection.SqlConnection">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlConnection"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlConnection"/> class.</para>
		</summary>
		<remarks>
			<para>When a new instance of <see cref="System.Data.SqlClient.SqlConnection"/> is created, the read/write properties are 
   set to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/></term>
					<description>empty
         string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.Database"/></term>
					<description>empty string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.DataSource"/></term>
					<description>empty string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by using 
   the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens a <see cref="System.Data.SqlClient.SqlConnection"/>
.</para>
			<codelink SampleID="Classic WebData SqlConnection.SqlConnection Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlConnection.SqlConnection1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlConnection"/> class when given a string containing the connection string.</para>
		</summary>
		<param name="connectionString">The connection used to open the SQL Server database.</param>
		<remarks>
			<para>When a new instance of <see cref="System.Data.SqlClient.SqlConnection"/> is created, the read/write properties are
   set to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/></term>
					<description><paramref name="connectionString"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.Database"/></term>
					<description>empty string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.SqlClient.SqlConnection.DataSource"/></term>
					<description>empty string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by
   using the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens a <see cref="System.Data.SqlClient.SqlConnection"/>
.</para>
			<codelink SampleID="Classic WebData SqlConnection.SqlConnection1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlConnection.ConnectionTimeout">
		<summary>
			<para> Gets the time to wait while trying to establish a connection before
      terminating the attempt and generating an error.</para>
		</summary>
		<value>
			<para>The time (in seconds) to wait for a connection to open. The default value is
      15 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The value set is less than 0.</exception>
		<remarks>
			<para>A value of 0 indicates no limit, and should be avoided in
      a <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/> because an attempt
      to connect will wait indefinitely.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and sets some of its properties in the connection
   string.</para>
			<codelink SampleID="Classic WebData SqlConnection.ConnectionTimeout Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.DataSource"/>
	</doc><doc for="SqlConnection.IDbConnection.BeginTransaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.ISqlConnection.BeginTransaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.IDbConnection.BeginTransaction1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.ISqlConnection.BeginTransaction1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.ISqlConnection.BeginTransaction2">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.ISqlConnection.BeginTransaction3">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.IDbConnection.CreateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.ISqlConnection.CreateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SQLDebugging.ISQLDebug.SQLDebug">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SQLDebugging.dwpidDebuggee,">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SqlConnection.InfoMessage">
		<summary>
			<para> Occurs when SQL Server returns a warning or informational message.
      </para>
		</summary>
		<remarks>
			<para>Clients that want to process warnings or informational messages sent by the
      server should create an <see cref="System.Data.SqlClient.SqlInfoMessageEventHandler"/> delegate to listen to
      this event.</para>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.InfoMessage"/> event fires when a message with a severity of 10 or less is
   returned by Sql Server. Messages with a severity between 11 and 20 raise an
   error and messages with a severity over 20 will cause the connection to
   close.</para>
			<para>For more information and an example, see <see topic="cpconworkingwithconnectionevents"/>.</para>
		</remarks>
	</doc><doc for="SqlConnection.StateChange">
		<summary>
			<para>Occurs when the state of the connection changes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.StateChange"/> event fires whenever the
<see cref="System.Data.SqlClient.SqlConnection.State"/> 
changes from closed to opened, or from opened to closed. <see cref="System.Data.SqlClient.SqlConnection.StateChange"/> fires immediately after
the <see cref="System.Data.SqlClient.SqlConnection"/> transitions.</para>
			<para>If an event handler throws an exception from within the <see cref="System.Data.SqlClient.SqlConnection.StateChange"/> event, the exception
propagates to the caller
of the <see cref="System.Data.SqlClient.SqlConnection.Open"/> or <see cref="System.Data.SqlClient.SqlConnection.Close"/> method.</para>
			<para>The <see langword="StateChange"/> event is not raised 
unless you explicitly call <see langword="Close"/> or <see langword="Dispose"/> . For more information, see <see topic="cpconWorkingWithConnectionEvents"/>.</para>
		</remarks>
	</doc><doc for="SqlConnection.Database">
		<summary>
			<para> Gets the name of the current database or the database to be used after
      a connection is opened.</para>
		</summary>
		<value>
			<para> The name of the current database
      or the name of the database to be used after a connection is opened. The default value
      is an empty string.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.Database"/> property updates
   dynamically. If you change the current database
   using a Transact-SQL statement or the <see cref="System.Data.SqlClient.SqlConnection.ChangeDatabase"/>
   method, an informational message is sent
   and the property is updated automatically.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData SqlConnection.Database Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.ChangeDatabase"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.DataSource"/>
	</doc>
	<doc for="SqlConnection.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.SqlClient.SqlConnection"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.SqlClient.SqlConnection"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Data.SqlClient.SqlConnection"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.Dispose"/> method calls <see cref="System.Data.SqlClient.SqlConnection.Close"/>, and returns
the <see cref="System.Data.SqlClient.SqlConnection"/> to the connection pool.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData SqlConnection.Dispose Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlConnection.BeginTransaction1">
		<summary>
			<para>Begins a database transaction with the specified isolation level.</para>
		</summary>
		<param name="iso">The isolation level under which the transaction should run.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para> This command maps to the SQL
      Server implementation of BEGIN TRANSACTION.</para>
			<para>You must explicitly commit or roll back the transaction
      using the <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> or <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method. To ensure that the
      .NET Framework Data Provider for SQL Server transaction management model performs correctly,
      avoid using other transaction management models, such as the one provided
      by SQL Server.</para>
			<note type="note">
      After a transaction is committed or rolled
      back, the isolation level of the transaction persists for all subsequent
      commands that are in autocommit mode (the Microsoft SQL Server default). This
      can produce unexpected results, such as an isolation level of <see langword="Repeatable read"/> persisting and locking other users out of a row. To reset the
      isolation level to the default (<see langword="Read committed"/>
      
      ), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement,
      or call <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction" qualify="true"/> followed immediately by <see cref="System.Data.SqlClient.SqlTransaction.Commit" qualify="true"/>. For more information
      about isolation levels, see SQL Server Books Online.
      
      </note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>, a <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlConnection.BeginTransaction2">
		<overload>
			<para>Begins a database transaction.</para>
		</overload>
		<summary>
			<para>Begins a database transaction with the specified transaction name.</para>
		</summary>
		<param name="transactionName">The name of the transaction.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported. </exception>
		<remarks>
			<para> This command maps to the SQL Server implementation
      of BEGIN TRANSACTION.</para>
			<para>The value in the <paramref name="transactionName"/> parameter can be used in later calls to
<see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> 
and in the <paramref name="savePoint "/>parameter of the <see cref="System.Data.SqlClient.SqlTransaction.Save"/>
method.</para>
			<para>You must explicitly commit or roll back the transaction
   using the <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> or <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method. To ensure that the
   .NET Framework Data Provider for SQL Server transaction management model performs correctly,
   avoid using other transaction management models, such as the one provided
   by SQL Server.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>, a <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Commit"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Save"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
	</doc>
	<doc for="SqlConnection.BeginTransaction3">
		<summary>
			<para>Begins a database transaction with the specified isolation level and
      transaction name.</para>
		</summary>
		<param name="iso">The isolation level under which the transaction should run.</param>
		<param name="transactionName">The name of the transaction.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para>This command maps to the SQL Server implementation of BEGIN TRANSACTION.</para>
			<para>The value in the <paramref name="transactionName"/> parameter can be used in later calls to
<see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> 
and in the <paramref name="savePoint "/>parameter of the <see cref="System.Data.SqlClient.SqlTransaction.Save"/> method.</para>
			<para>You must explicitly commit or roll back the transaction
   using the <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> or <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method. To ensure that the
   .NET Framework Data Provider for SQL Server transaction management model performs correctly,
   avoid using other transaction management models, such as the one provided
   by SQL Server.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>, a <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction3 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlConnection.Close">
		<summary>
			<para>Closes the connection to the database. This is the
      preferred method of closing any open connection.</para>
		</summary>
		<exception cref="System.Data.SqlClient.SqlException">The connection-level error that occurred while opening the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.Close"/>
method rolls back any pending transactions. It then
releases the connection to the connection pool, or
closes the connection if connection pooling is disabled.</para>
			<para>An application can call <see cref="System.Data.SqlClient.SqlConnection.Close"/> more than one time. No
exception is generated.</para>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>
, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData SqlConnection.Open Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.Open"/>
	</doc>
	<doc for="SqlConnection">
		<summary>
			<para> Represents an open connection to a SQL Server database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Data.SqlClient.SqlConnection"/> object represents a unique session
   to a SQL Server data source. In the case of a client/server database system,
   it is equivalent to a network connection to the server. <see cref="System.Data.SqlClient.SqlConnection"/>
   is used in conjunction with <see cref="System.Data.SqlClient.SqlDataAdapter"/> and <see cref="System.Data.SqlClient.SqlCommand"/> to increase
   performance when connecting to a Microsoft SQL Server database.
   For all third-party SQL server products, as well as other OLE DB-supported
   data sources, use <see cref="System.Data.OleDb.OleDbConnection"/>.</para>
			<para>When you create an instance of <see cref="System.Data.SqlClient.SqlConnection"/>, all properties are
set to their initial values. For a list of these values, see the <see cref="System.Data.SqlClient.SqlConnection"/> constructor.</para>
			<para> If the <see cref="System.Data.SqlClient.SqlConnection"/> goes out of scope, it is
not closed. Therefore, you must explicitly close the connection by calling <see cref="System.Data.SqlClient.SqlConnection.Close"/> or <see cref="System.Data.SqlClient.SqlConnection.Dispose"/>.</para>
			<note type="note">
   To deploy high-performance applications, you need
   to use connection pooling. When you use the .NET Framework Data Provider for SQL Server, you
   do not need to enable connection pooling because the provider manages this
   automatically, although you can modify some settings. For more information about
   using connection pooling with the .NET Framework Data Provider for SQL Server, see
<see topic="cpconconnectionpoolingforsqlservernetdataprovider"/>.
</note>
			<para>If a <see cref="System.Data.SqlClient.SqlException"/> is generated
by the method executing a <see cref="System.Data.SqlClient.SqlCommand"/>, the <see cref="System.Data.SqlClient.SqlConnection"/> remains open when the severity level is
19 or less. When the severity level is 20 or greater, the server usually
closes the <see cref="System.Data.SqlClient.SqlConnection"/>.
However, the user can reopen the connection and continue.</para>
			<para>An application that creates an instance of the <see cref="System.Data.SqlClient.SqlConnection"/> object can require all direct and
indirect callers to have adequate permission to the code by setting declarative
or imperative security demands. <see cref="System.Data.SqlClient.SqlConnection"/> makes security demands using the <see cref="System.Data.SqlClient.SqlClientPermission"/> object. Users
can verify that their code has adequate permissions by using the <see cref="System.Data.SqlClient.SqlClientPermissionAttribute"/> object. Users
and administrators can also use the <see topic="cpgrfcodeaccesssecuritypolicyutilitycaspolexe"/> to modify security policy at the
machine, user, and enterprise levels. For more information, see <see topic="cpconsecuringyourapplication"/>.</para>
			<note type="note">
   If you are using Microsoft .NET Framework
   version 1.0, the <see langword="FullTrust"/>
   
   named permission set is required to
   connect to SQL Server using <see cref="System.Data.SqlClient.SqlConnection.Open"/>. This requirement does not
   apply if you are using .NET Framework version 1.1. For more information,
   see <see topic="cpconrequestingpermissions"/> and <see topic="cpconnamedpermissionsets"/>.
</note>
			<para> For more information about handling warning and informational messages
   from the server, see <see topic="cpconworkingwithconnectionevents"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlCommand"/> and a <see cref="System.Data.SqlClient.SqlConnection"/>. The <see cref="System.Data.SqlClient.SqlConnection"/> is opened and set as
   the <see cref="System.Data.SqlClient.SqlCommand.Connection"/> for the <see cref="System.Data.SqlClient.SqlCommand"/> . The
   example then calls <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> ,
   and closes the connection. To accomplish this,
   the <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> is passed a connection string and a query string that is
   a Transact-SQL INSERT statement.</para>
			<codelink SampleID="Classic WebData SqlConnection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlDataAdapter"/>
		<seealso cref="System.Data.SqlClient.SqlCommand"/>
	</doc>
	<doc for="SqlConnection.Open">
		<summary>
			<para>Opens a database connection with the property
      settings specified by the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>Cannot open a connection without specifying a data source or server.</para>
			<para>or</para>
			<para>The connection is already open.</para></exception>
		<exception cref="System.Data.SqlClient.SqlException">A connection-level error occurred while opening the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection"/> draws an open connection from the
   connection pool if one is available. Otherwise, it establishes a new connection
   to an instance of SQL Server.</para>
			<note type="note">
   If the <see cref="System.Data.SqlClient.SqlConnection"/> goes out of scope, it is
   not closed. Therefore, you must explicitly close the connection by calling <see cref="System.Data.SqlClient.SqlConnection.Close"/> or <see cref="System.Data.SqlClient.SqlConnection.Dispose"/>.
</note>
			<note type="note">
   If you specify a port number when trying to connect to an instance of SQL Server and using a protocol other than TCP/IP, the <see cref="System.Data.SqlClient.SqlConnection.Open"/> method fails.
</note>
			<note type="note">
   The .NET Framework Data Provider
   for SQL Server requires the Security permission with "Allows calls to unmanaged
   assemblies" enabled (<see cref="System.Security.Permissions.SecurityPermission"/>
   with <see cref="System.Security.Permissions.SecurityPermissionFlag"/> set to
<see langword="UnmanagedCode"/> 
) to open a <see cref="System.Data.SqlClient.SqlConnection"/> with SQL
Debugging enabled.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData SqlConnection.Open Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.Close"/>
	</doc>
	<doc for="SqlConnection.EnlistDistributedTransaction">
		<summary>
			<para>Enlists in the specified transaction as a distributed transaction.</para>
		</summary>
		<param name="transaction">A reference to an existing transaction in which to enlist.</param>
		<remarks>
			<para>You can enlist in an existing distributed transaction
      using the <see cref="System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction"/>
      method if auto-enlistment is disabled. Enlisting in an existing distributed
      transaction ensures that, if the transaction is committed or rolled back,
      modifications made by the code at the data source are also committed or rolled
      back. For more information about distributed transactions, see
      <see topic="cpconenlistingindistributedtransaction"/>.</para>
			<note type="caution">
				<see cref="System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction"/> returns an exception if the 
   <see cref="System.Data.SqlClient.SqlConnection"/> has 
      already started a transaction using
   <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>. However, if 
      the transaction is a local transaction started at the data source (for
      example, by explicity executing the BEGIN TRANSACTION statement using an
   <see cref="System.Data.SqlClient.SqlCommand"/> object), 
   <see cref="System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction"/> rolls back the local 
      transaction and enlists in the existing distributed transaction as requested.
      You will not receive notice that the local transaction was rolled back, and are
      responsible for managing any local transactions not started using
   <see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>. 
   </note>
		</remarks>
	</doc>
	<doc for="SqlConnection.State">
		<summary>
			<para> Gets the current state of the
      connection.</para>
		</summary>
		<value>
			<para>A bitwise combination of the <see cref="System.Data.ConnectionState"/> values. The default is
<see langword="Closed"/>.</para>
		</value>
		<remarks>
			<para>The allowed state changes are:</para>
			<list type="bullet"><item>
					<term>
         From <see langword="Closed"/> to <see langword="Open"/>, using the
         <see langword="Open"/> method of the connection object.</term>
				</item>
				<item>
					<term>
         From <see langword="Open"/> to <see langword="Closed"/>, using either the
         <see langword="Close"/> method or the <see langword="Dispose"/> method of the connection object.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/>and displays some
   of its read-only properties.</para>
			<codelink SampleID="Classic WebData ISqlConnection.ServerVersion Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlConnection.ChangeDatabase">
		<summary>
			<para>Changes the current database for an open
   <see cref="System.Data.SqlClient.SqlConnection"/>.</para>
		</summary>
		<param name="database">The name of the database to use in place of the current database.</param>
		<exception cref="System.ArgumentException">The database name is not valid.</exception>
		<exception cref="System.InvalidOperationException">The connection is not open.</exception>
		<exception cref="System.Data.SqlClient.SqlException">Cannot change the database.</exception>
		<remarks>
			<para>The value supplied in the <paramref name="database "/>parameter
   must be a valid database name. The <paramref name="database "/>
   parameter cannot contain a null value, an empty string, or a
   string with only blank characters.</para>
			<para>When you are using connection pooling against SQL Server
   2000, and you close the connection, it is returned to the connection pool. The
   next time the connection is retrieved from the pool used, the reset connection
   request piggybacks on the first round trip to the server and executes before the
   user performs any operations. From the time you return a connection to the
   connection pool after calling the <see cref="System.Data.SqlClient.SqlConnection.ChangeDatabase"/> method, until the time the
   connection is retrieved, the connection remains active on the database. This
   will prevent you from dropping the database because the connection is still
   active.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData SqlConnection.Database Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
	</doc>
	<doc for="SqlConnection.BeginTransaction">
		<overload>
			<para>Begins a database transaction.</para>
		</overload>
		<summary>
			<para> Begins a database transaction.</para>
		</summary>
		<returns>
			<para> An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported. </exception>
		<remarks>
			<para> This command maps to the SQL Server implementation
      of BEGIN TRANSACTION.</para>
			<para>You must explicitly commit or roll back the transaction
      using the <see cref="System.Data.SqlClient.SqlTransaction.Commit"/> or <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/> method. To ensure that the
      .NET Framework Data Provider for SQL Server transaction management model performs correctly,
      avoid using other transaction management models, such as the one provided
      by SQL Server.</para>
			<note type="note">
      If you do not specify an isolation level, the default isolation level is used. To specify an isolation level
      with the <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> method, use the overload that
      takes the <paramref name="iso"/> parameter.
      
      </note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and a <see cref="System.Data.SqlClient.SqlTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.SqlClient.SqlConnection.BeginTransaction"/>, a <see cref="System.Data.SqlClient.SqlTransaction.Commit"/>, and <see cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData SqlConnection.BeginTransaction Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Commit"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Save"/>
		<seealso cref="System.Data.SqlClient.SqlTransaction.Rollback"/>
	</doc>
	<doc for="SqlConnection.PacketSize">
		<summary>
			<para>Gets the size
      (in bytes) of network packets used to communicate with an instance of SQL
      Server.</para>
		</summary>
		<value>
			<para>The size (in bytes) of network packets. The default value is 8192.</para>
		</value>
		<remarks>
			<para> If an application performs bulk copy operations, or sends 
      or receives large amounts of <SpecialLocalizableItem kind="UIElement">text</SpecialLocalizableItem> or <SpecialLocalizableItem kind="UIElement">image</SpecialLocalizableItem>
   data, a packet size larger than the
   default may improve efficiency because it results in fewer network read and
   write operations. If an application sends and receives small amounts of
   information, you can set the packet size to 512 bytes (using the Packet Size
   value in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
   
   ), which is sufficient for most data transfer operations. For most
   applications, the default packet size is best.</para>
			<para><see cref="System.Data.SqlClient.SqlConnection.PacketSize"/> may be a value in the
range of 512 and 32767 bytes. An exception is generated if the value is outside
of this range.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> , including setting the packet size, and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData SqlConnection.PacketSize Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlConnection.ConnectionString">
		<summary>
			<para> Gets or sets the string used to open a SQL Server database.</para>
		</summary>
		<value>
			<para> The connection string that includes
      the source database name, and other parameters needed to establish the initial
      connection. The default value is an empty string.</para>
		</value>
		<exception cref="System.ArgumentException">An invalid connection string argument has been supplied, or a required connection string argument has not been supplied. </exception>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/> is similar to an OLE
   DB connection string, but is not identical. Unlike OLE DB or ADO, the connection string that is
   returned is the same as the user-set <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>, minus security information
   
   if the Persist Security Info value is set to <see langword="false"/> (default). The
   .NET Framework Data Provider for SQL Server does not persist or return the password in a
   connection string unless you set Persist Security Info to <see langword="true"/>.</para>
			<para>You can use the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/> property to connect to
a database. The following example illustrates a typical connection string.</para>
			<code>
"Persist Security Info=False;Integrated Security=SSPI;database=northwind;server=mySQLServer"
</code>
			<para>The <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/> property can be set only
when the connection is closed. Many of the connection string values have
corresponding read-only properties. When the connection string is set, all of
these properties are updated, except when an error is detected. In this case,
none of the properties are updated. <see cref="System.Data.SqlClient.SqlConnection"/> properties return
only those settings contained in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>.</para>
			<para>To connect to a local machine, specify "(local)" for the server. (You must
   always specify a server.)</para>
			<para>Resetting the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/> on a closed connection 
resets all connection string values (and related properties) including the
password. For example, if you set a connection string that includes "Database=

northwind", and then reset the connection string to "Data
Source=myserver;Integrated Security=SSPI", the <see cref="System.Data.SqlClient.SqlConnection.Database"/> property is no longer set
to northwind.</para>
			<para>The connection string is parsed immediately after being
   set. If errors in syntax are found when parsing, a runtime exception, such as
<see cref="System.ArgumentException"/>, is generated. Other errors can be found
   only when an attempt is made to open the connection.</para>
			<para> The basic format of a connection string
   consists of a series of keyword/value pairs separated by semicolons. The
   equal sign (= ) connects each keyword and
   its value. To include values that contain a semicolon, single-quote character,
   or double-quote character, the value must
   be enclosed in
   double quotes. If the value contains both a semicolon and a
   double-quote character, the value can be enclosed
   in single quotes. The single quote is
   also useful if the value begins with a double-quote character. Conversely, the double
   quote can be used
   if the value
   begins
   with a single
   quote. If the value contains
   both single-quote and double-quote characters, the quote character used to enclose
   the
   value must be doubled each time it occurs within the value.</para>
			<para>To include preceding or trailing spaces in the string
   value, the value must be enclosed in either single quotes or double
   quotes. Any leading or trailing spaces around integer, Boolean, or
   enumerated values are ignored, even if enclosed in quotes. However, spaces
   within a string literal keyword or value are preserved. Using .NET Framework
   version 1.1, single or double quotes may be used within a connection string
   without using delimiters (for example, Data Source=
   
   my'Server or Data Source=
   
   my"Server), unless a quote
   character is the first or last character in the value. </para>
			<para>To include an equal sign (=) in a keyword or value, it must be preceded
   by another equal sign. For example, in the hypothetical connection string </para>
			<code>
"key==word=value"
</code>
			<para>the keyword is "key=word" and the value is "value".</para>
			<para>If a specific keyword in a keyword= value pair occurs multiple times in a connection string, the last occurrence
   listed is used in the value set.</para>
			<para>Keywords are not case sensitive.</para>
			<list type="bullet"></list>
			<para>The following table lists the valid names for keyword values within the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>.</para>
			<list type="table">
				<listheader>
					<term>Name</term>
					<description>Default</description>
					<description>Description</description>
				</listheader>
				<item>
					<term>
						<para>Application Name</para></term>
					<description></description>
					<description>The name of the application, or '.Net SqlClient Data Provider' if no application name is provided.</description>
				</item>
				<item>
					<term>
						<para>AttachDBFilename</para>
						<para>-or-</para>
						<para>extended properties</para>
						<para>-or-</para>
						<para>Initial File Name</para></term>
					<description></description>
					<description>
						<para>The name of
                  the primary file, including the full path name, of an attachable
                  database.</para>
						<para>The database name must be specified with the
                  keyword 'database'.</para></description>
				</item>
				<item>
					<term>
						<para>Connect Timeout</para>
						<para>-or-</para>
						<para>Connection Timeout</para></term>
					<description>15</description>
					<description>The length of time (in seconds) to
                     wait for a connection to the server before terminating the attempt and generating an
                     error.</description>
				</item>
				<item>
					<term>
						<para>Current Language</para></term>
					<description></description>
					<description>The SQL Server Language record name.</description>
				</item>
				<item>
					<term>
						<para>Data Source</para>
						<para>-or-</para>
						<para>Server</para>
						<para>-or-</para>
						<para>Address</para>
						<para>-or-</para>
						<para>Addr</para>
						<para>-or-</para>
						<para>Network Address</para></term>
					<description></description>
					<description>The
                           name or network address of the instance of SQL Server to which to connect.</description>
				</item>
				<item>
					<term>
						<para>Encrypt</para></term>
					<description>'false'</description>
					<description>When
                           <see langword="true"/>, SQL Server uses SSL encryption for all data sent
                              between the client and server if the server has a certificate installed.
                              Recognized values are <see langword="true"/>, <see langword="false"/>,
                           <see langword="yes"/>, and <see langword="no"/>
                           .</description>
				</item>
				<item>
					<term>
						<para>Initial Catalog</para>
						<para>-or-</para>
						<para>Database</para></term>
					<description></description>
					<description>The name of the database.</description>
				</item>
				<item>
					<term>
						<para>Integrated
                                 Security</para>
						<para>-or-</para>
						<para>Trusted_Connection</para></term>
					<description>'false'</description>
					<description>
						<para>When <SpecialLocalizableItem kind="UIElement">false</SpecialLocalizableItem>, User
                                 ID and Password are specified in the connection. When <SpecialLocalizableItem kind="UIElement">true</SpecialLocalizableItem>, the current Windows account credentials are used for authentication.</para>
						<para>Recognized values are <see langword="true"/>,
                           <see langword="false"/>, <see langword="yes"/>,
                           <see langword="no"/>, and <see langword="sspi "/>(strongly recommended),
                              which is equivalent to <see langword="true"/> .</para></description>
				</item>
				<item>
					<term>
						<para>Network
                                 Library</para>
						<para>-or-</para>
						<para>Net</para></term>
					<description>'dbmssocn'</description>
					<description>
						<para> The
                                    network library used to establish a connection to an instance
                                    of SQL Server. Supported values include dbnmpntw (Named Pipes), dbmsrpcn
                                    (Multiprotocol), dbmsadsn (Apple Talk), dbmsgnet (VIA), dbmslpcn (Shared Memory) and dbmsspxn (IPX/SPX), and dbmssocn
                                    (TCP/IP).</para>
						<para> The corresponding network DLL must be installed on the
                                    system to which you connect. If you do not specify a network and you use a local server (for example, "." or "(local)"), shared memory is used.</para></description>
				</item>
				<item>
					<term>
						<para>Packet Size</para></term>
					<description>8192</description>
					<description>Size in bytes of the network packets used to communicate with an instance of SQL Server.</description>
				</item>
				<item>
					<term>
						<para>Password</para>
						<para>-or-</para>
						<para>Pwd</para></term>
					<description></description>
					<description>The password for the SQL Server account logging on
                                          (Not recommended. To maintain the highest level of security, it is
                                          strongly recommended that you use the Integrated Security or Trusted_Connection keyword instead.).</description>
				</item>
				<item>
					<term>
						<para>Persist Security Info</para></term>
					<description>'false'</description>
					<description> When
                                             set to <see langword="false "/>or <see langword="no"/>
                                             (strongly recommended), security-sensitive information, such
                                             as the password, is not returned as part of the connection if the connection
                                             is open or has ever been in an open
                                             state. Resetting the
                                             connection string resets all connection string values including the
                                             password. Recognized values are <see langword="true"/>,
                                          <see langword="false"/>, <see langword="yes"/>, and
                                          <see langword="no"/>
                                          .</description>
				</item>
				<item>
					<term>
						<para>User ID</para></term>
					<description></description>
					<description> The SQL Server login account (Not recommended. To
                                             maintain the highest level of security, it is strongly recommended that
                                             you use the Integrated Security or Trusted_Connection keyword instead.).</description>
				</item>
				<item>
					<term>
						<para>Workstation ID</para></term>
					<description>the local computer name</description>
					<description> The name of the workstation connecting to SQL Server.</description>
				</item>
			</list>
			<para>The following table lists the valid names for connection pooling values within the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>.
                                       For more information about connection pooling, see <see topic="cpconconnectionpoolingforsqlservernetdataprovider"/>.</para>
			<list type="table">
				<listheader>
					<term>Name</term>
					<description>Default</description>
					<description>Description</description>
				</listheader>
				<item>
					<term>
						<para>Connection Lifetime</para></term>
					<description>0</description>
					<description>
						<para>When a connection is returned to the pool, its
                                                   creation time is compared with the current time, and the connection is
                                                   destroyed if that time span (in seconds) exceeds the value specified by
                                                <see langword="Connection Lifetime"/> . This is useful in clustered configurations to force load balancing between a running server and a server just brought online. </para>
						<para>A value of zero (0) causes pooled connections to have the maximum connection timeout.</para></description>
				</item>
				<item>
					<term>
						<para>Connection Reset</para></term>
					<description>'true'</description>
					<description> Determines whether the database connection is
                                                      reset when being drawn from the pool. For Microsoft SQL Server version 7.0,
                                                      setting to <see langword="false"/>
                                                      avoids making an additional server round trip when obtaining a connection, but you must be aware that the connection state, such as database context, is not being reset.</description>
				</item>
				<item>
					<term>
						<para>Enlist</para></term>
					<description>'true'</description>
					<description>When
                                                      <see langword="true"/> , the pooler automatically
                                                         enlists the connection in the creation thread's current transaction
                                                         context. Recognized values are <see langword="true"/>,
                                                      <see langword="false"/>, <see langword="yes"/>, and
                                                      <see langword="no"/>.</description>
				</item>
				<item>
					<term>
						<para>Max Pool Size</para></term>
					<description>100</description>
					<description>The maximum number of connections allowed in the pool.</description>
				</item>
				<item>
					<term>
						<para>Min Pool Size</para></term>
					<description>0</description>
					<description>The minimum number of connections allowed in the pool.</description>
				</item>
				<item>
					<term>
						<para>Pooling</para></term>
					<description>'true'</description>
					<description>When
                                                               <see langword="true"/> , the <see langword="SQLConnection"/> object is drawn from the
                                                                  appropriate pool, or if necessary, is created and added to the appropriate
                                                                  pool. Recognized values are <see langword="true"/>, <see langword="false"/>,
                                                               <see langword="yes"/>, and <see langword="no"/>.</description>
				</item>
			</list>
			<para> When setting keyword or connection pooling values
                                                            that require a Boolean value, you can use 'yes' instead of 'true',
                                                            and 'no' instead of 'false'. Integer values are represented as strings.</para>
			<note type="note">
                                                            The .NET
                                                            Framework Data Provider for SQL
                                                            Server uses its own protocol to communicate with SQL Server. Therefore, it
                                                            does not support the use of an ODBC data source name (DSN) when
                                                            connecting to SQL Server because it does not add an ODBC layer.
                                                            
                                                         </note>
			<note type="caution">
                                                            In this
                                                            release, the application should use caution when constructing a
                                                            connection string based on user input (for example when retrieving user ID
                                                            and password information from a dialog box, and appending it to the connection
                                                            string). The application should ensure that a user cannot embed
                                                            extra connection string parameters in these values (for example, entering a
                                                            password as "validpassword;database=somedb" in an attempt to attach to a
                                                            different database).
                                                            
                                                         </note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Data.SqlClient.SqlConnection"/> and sets some of its
                                                         properties.</para>
			<codelink SampleID="Classic WebData SqlConnection.ConnectionString Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.SqlClient.SqlConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.Database"/>
		<seealso cref="System.Data.SqlClient.SqlConnection.DataSource"/>
	</doc></docs>
