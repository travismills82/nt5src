<docs>
	<doc for="SqlCommandBuilder.SqlCommandBuilder2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> class with associated <see cref="System.Data.SqlClient.SqlDataAdapter"/> 
and <see cref="System.Data.SqlClient.SqlCommand"/>objects.</para>
		</summary>
		<param name="adapter">The name of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</param>
		<param name="sourceCommand">The name of the <see cref="System.Data.SqlClient.SqlCommand"/>.</param>
	</doc>
	<doc for="SqlCommandBuilder.SourceCommand">
		<summary>
			<para>Gets or sets the text associated with an associated 
   <see cref="System.Data.SqlClient.SqlCommand"/> to obtain metadata required to automatically generate an INSERT, DELETE, or
      UPDATE statement.</para>
		</summary>
	</doc>
	<doc for="SqlCommandBuilder.ShouldPersistSourceCommand">
		<summary>
			<para>Indicates whether the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> of the <see cref="System.Data.SqlClient.SqlCommand"/> should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Data.SqlClient.SqlCommand.CommandText"/> should be persisted; otherwise, 
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
   <see cref="System.Data.SqlClient.SqlCommandBuilder"/> or creating your own control incorporating the
   <see cref="System.Data.SqlClient.SqlCommandBuilder"/>.</para>
		</remarks>
	</doc>
	<doc for="SqlCommandBuilder.SqlCommandBuilder">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> 
class.</para>
		</summary>
	</doc>
	<doc for="SqlCommandBuilder.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> and optionally releases the managed 
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method. 
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.Data.SqlClient.SqlCommandBuilder"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.SqlClient.SqlCommandBuilder"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData SqlCommandBuilder.Dispose Example" SnippetID="1"/>
		</example>
	</doc><doc for="SqlCommandBuilder.RefreshSchema">
		<summary>
			<para>Refreshes the database schema information used to generate INSERT, UPDATE, or DELETE statements.</para>
		</summary>
		<remarks>
			<para>An application should
 call <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/>
 whenever the SELECT statement associated with the <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
 changes.</para>
			<para>An application should call <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/> whenever the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> value of the <see cref="System.Data.SqlClient.SqlDataAdapter"/> changes.</para>
		</remarks>
	</doc><doc for="SqlCommandBuilder.DataAdapter">
		<summary>
			<para> Gets or sets a <see cref="System.Data.SqlClient.SqlDataAdapter"/> object for which Transact-SQL statements are
   automatically generated.</para>
		</summary>
		<value>
			<para>A <see cref="System.Data.SqlClient.SqlDataAdapter"/> object.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlCommandBuilder"/> registers itself as a 
   listener for <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> events that are generated
   by the <see cref="System.Data.SqlClient.SqlDataAdapter"/> specified in this property.</para>
			<para>When you create a new instance <see cref="System.Data.SqlClient.SqlCommandBuilder"/> , any existing <see cref="System.Data.SqlClient.SqlCommandBuilder"/> associated with this <see cref="System.Data.SqlClient.SqlDataAdapter"/> is released.</para>
		</remarks>
	</doc><doc for="SqlCommandBuilder.SqlCommandBuilder1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> class with the associated <see cref="System.Data.SqlClient.SqlDataAdapter"/>
object.</para>
		</summary>
		<param name="adapter">The name of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</param>
		<remarks>
			<para>The <see cref="System.Data.SqlClient.SqlCommandBuilder"/> registers itself as a listener for <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/> events that are generated by 
   the <see cref="System.Data.SqlClient.SqlDataAdapter"/> specified in this property.</para>
			<para>When you create a new instance <see cref="System.Data.SqlClient.SqlCommandBuilder"/> , any existing 
<see cref="System.Data.SqlClient.SqlCommandBuilder"/> associated with 
this<see cref="System.Data.SqlClient.SqlDataAdapter"/> is released.</para>
		</remarks>
	</doc><doc for="SqlCommandBuilder.QuotePrefix">
		<summary>
			<para>Gets or sets the beginning character or characters to use when specifying SQL Server database objects (for example, tables or
      columns) whose names contain characters such as spaces or reserved tokens.</para>
		</summary>
		<value>
			<para>The beginning character or characters to use. The default is an empty
      string.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>This property cannot be changed after an insert, update, or delete command has been generated.</para></exception>
		<remarks>
			<para>Database objects in instances of SQL Server 2000 and SQL
      Server version 7.0 can contain any valid Microsoft Windows NT速 or Microsoft
      Windows速 2000 characters, including spaces, commas, and semicolons. To
      accommodate this capability, use the <see cref="System.Data.SqlClient.SqlCommandBuilder.QuotePrefix"/> and <see cref="System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix"/>
      properties to specify delimiters such as a left bracket and a right
      bracket to encapsulate the object name.</para>
			<note type="note">
      Although you cannot change the
   <see cref="System.Data.OleDb.OleDbCommandBuilder.QuotePrefix"/> or <see cref="System.Data.OleDb.OleDbCommandBuilder.QuoteSuffix"/> properties after an
      insert, update, or delete operation has been generated, you can change their
      settings after calling the <see langword="Update"/> method of a DataAdapter.
      
   </note>
		</remarks>
	</doc>
	<doc for="SqlCommandBuilder.QuoteSuffix">
		<summary>
			<para>Gets or sets the ending character or characters to use when specifying SQL Server database objects (for example, tables
      or columns) whose names contain characters such as spaces or reserved tokens.</para>
		</summary>
		<value>
			<para>The ending character or characters to use. The default is an empty
      string.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>This property cannot be changed after an insert, update, or delete command has been generated.</para></exception>
		<remarks>
			<para>Database objects in instances of SQL Server 2000 and SQL Server version 7.0
      can contain any valid Microsoft Windows NT速 or Microsoft Windows速 2000
      characters, including spaces, commas, and semicolons. To
      accommodate this capability, use the <see cref="System.Data.SqlClient.SqlCommandBuilder.QuotePrefix"/> and <see cref="System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix"/>
      properties to specify delimiters such as a left bracket and a right
      bracket to encapsulate the object name.</para>
			<note type="note">
      Although you cannot change the
   <see cref="System.Data.OleDb.OleDbCommandBuilder.QuotePrefix"/> or <see cref="System.Data.OleDb.OleDbCommandBuilder.QuoteSuffix"/> properties after an
      insert, update, or delete operation has been generated, you can change their
      settings after calling the <see langword="Update"/> method of a DataAdapter.
      
   </note>
		</remarks>
	</doc>
	<doc for="SqlCommandBuilder">
		<summary>
			<para> Automatically generates
      single-table commands used to reconcile changes made to a <see cref="System.Data.DataSet"/> with the associated SQL Server database. This
      class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.SqlClient.SqlDataAdapter"/> does not automatically generate the
   Transact-SQL statements required to reconcile changes made to a <see cref="System.Data.DataSet"/> with the associated
   instance of SQL Server. However, you can create a <see cref="System.Data.SqlClient.SqlCommandBuilder"/> object to automatically generate
   Transact-SQL statements for single-table updates if you set the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
   property of the <see cref="System.Data.SqlClient.SqlDataAdapter"/>. Then, any
   additional Transact-SQL statements that you do not set are generated by
   the <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
   
   .</para>
			<para> The <see cref="System.Data.SqlClient.SqlCommandBuilder"/> registers
itself as
a listener for <see cref="System.Data.SqlClient.SqlDataAdapter.RowUpdating"/>
events whenever you set the <see cref="System.Data.SqlClient.SqlCommandBuilder.DataAdapter"/> property. You can only
associate one <see cref="System.Data.SqlClient.SqlDataAdapter"/> or <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
object with each other at one time.</para>
			<para> To generate INSERT, UPDATE, or DELETE statements,
   the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> uses the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> property to retrieve a
   required set of metadata automatically. If you change the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> after
   
   the metadata has is retrieved (for example,
   after the first update), you should call the <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/>
   
   method to update the metadata.</para>
			<para>The <see langword="SelectCommand"/> must also return at
least one primary key or unique column. If none are present, an
<paramref name="InvalidOperation"/> exception is generated, 
and the commands are not generated.</para>
			<para> The <see cref="System.Data.SqlClient.SqlCommandBuilder"/> also uses the <see cref="System.Data.SqlClient.SqlCommand.Connection"/>,
<see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>, and <see cref="System.Data.SqlClient.SqlCommand.Transaction"/> properties
referenced by the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/>
. The user should call <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/> if any of these
properties are modified,
or if the <see cref="System.Data.SqlClient.SqlDataAdapter.SelectCommand"/> itself is
replaced. Otherwise the <see cref="System.Data.SqlClient.SqlDataAdapter.InsertCommand"/>
, <see cref="System.Data.SqlClient.SqlDataAdapter.UpdateCommand"/>
, and <see cref="System.Data.SqlClient.SqlDataAdapter.DeleteCommand"/>
properties retain their previous values.</para>
			<para> If you call <see cref="System.ComponentModel.Component.Dispose"/>, the <see cref="System.Data.SqlClient.SqlCommandBuilder"/> is
disassociated from the <see cref="System.Data.SqlClient.SqlDataAdapter"/>
, and the generated commands are no longer used.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.SqlClient.SqlCommand"/>,
   along <see cref="System.Data.SqlClient.SqlDataAdapter"/> and <see cref="System.Data.SqlClient.SqlConnection"/>, to select rows from a data source.
   The example is passed an initialized <see cref="System.Data.DataSet"/>, a connection string, a query
   string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The
   example then creates a <see cref="System.Data.SqlClient.SqlCommandBuilder"/>
   .</para>
			<codelink SampleID="Classic WebData SqlCommandBuilder" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SqlCommandBuilder.GetInsertCommand">
		<summary>
			<para> Gets the automatically generated <see cref="System.Data.SqlClient.SqlCommand"/> object required to perform insertions on the
   database.</para>
		</summary>
		<returns>
			<para>The automatically generated <see cref="System.Data.SqlClient.SqlCommand"/> object required to perform insertions.</para>
		</returns>
		<remarks>
			<para>An application can use the <see cref="System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand"/> method for
   informational or troubleshooting purposes because it returns the <see cref="System.Data.SqlClient.SqlCommand"/>
   object
   to be executed.
   </para>
			<para>You can also use <see cref="System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand"/> as the basis of a
modified command. For example, you might call <see cref="System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand"/> and modify the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/> value, and then explicitly
set that on the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</para>
			<para>After the Transact-SQL statement is first generated, the application must explicitly
   call <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/> if it changes
   the statement in any way. Otherwise, the <see cref="System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand"/> will
   be still be using information from the previous statement, which might not be
   correct. The Transact-SQL statements are first generated either when the application
   calls <see cref="System.Data.Common.DbDataAdapter.Update"/> or <see cref="System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand"/>.</para>
			<para>For more information, see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
	</doc>
	<doc for="SqlCommandBuilder.GetUpdateCommand">
		<summary>
			<para> Gets the automatically generated <see cref="System.Data.SqlClient.SqlCommand"/> object required to perform updates on the
   database.</para>
		</summary>
		<returns>
			<para>The automatically generated <see cref="System.Data.SqlClient.SqlCommand"/> object required to perform updates.</para>
		</returns>
		<remarks>
			<para>An application can use the <see cref="System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand"/> method for
   informational or troubleshooting purposes because it returns the <see cref="System.Data.SqlClient.SqlCommand"/>
   object
   to be executed.
   </para>
			<para>You can also use <see cref="System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand"/> as the basis of a
modified command. For example, you might call <see cref="System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand"/> and modify the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
value, and then explicitly set that on the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</para>
			<para>After the Transact-SQL statement is first generated, the application must
   explicitly call <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/> if it changes
   the statement in any way. Otherwise, the <see cref="System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand"/> will be still be using
   information from the previous statement, which might not be correct. The
   Transact-SQL statements are first generated either when the application calls
<see cref="System.Data.Common.DbDataAdapter.Update"/> or 
<see cref="System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand"/>.</para>
			<para>For more information, see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
	</doc>
	<doc for="SqlCommandBuilder.GetDeleteCommand">
		<summary>
			<para>Gets the automatically generated <see cref="System.Data.SqlClient.SqlCommand"/> object required to perform deletions on
   the database.</para>
		</summary>
		<returns>
			<para>The automatically generated <see cref="System.Data.SqlClient.SqlCommand"/> object required to perform deletions.</para>
		</returns>
		<remarks>
			<para>An application can use the <see cref="System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand"/> method for
   informational or troubleshooting purposes because it returns the <see cref="System.Data.SqlClient.SqlCommand"/>
   object
   to be executed.
   </para>
			<para>You can also use <see cref="System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand"/> as the basis of a
modified command. For example, you might call <see cref="System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand"/> and modify the <see cref="System.Data.SqlClient.SqlCommand.CommandTimeout"/>
value, and then explicitly set that on the <see cref="System.Data.SqlClient.SqlDataAdapter"/>.</para>
			<para>After the SQL statement is first generated, the
   application must explicitly call <see cref="System.Data.SqlClient.SqlCommandBuilder.RefreshSchema"/> if it changes the
   statement in any way. Otherwise, the <see cref="System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand"/> will be still be using
   information from the previous statement, which might not be correct. The SQL
   statements are first generated either when the application calls <see cref="System.Data.Common.DbDataAdapter.Update"/> or <see cref="System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand"/>.</para>
			<para>For more information, see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
	</doc>
	<doc for="SqlCommandBuilder.DeriveParameters">
		<summary>
			<para> Retrieves
      parameter information from the stored procedure specified in the
   <see cref="System.Data.SqlClient.SqlCommand"/> and
      populates the <see cref="System.Data.SqlClient.SqlCommand.Parameters"/> collection of the specified <see cref="System.Data.SqlClient.SqlCommand"/> object.</para>
		</summary>
		<param name="command">The <see cref="System.Data.SqlClient.SqlCommand"/> referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the <see cref="System.Data.SqlClient.SqlCommand.Parameters"/> collection of the <see cref="System.Data.SqlClient.SqlCommand"/>.</param>
		<exception cref="System.InvalidOperationException"><para>The command text is not a valid stored procedure name.</para></exception>
		<remarks>
			<para><see langword="DeriveParameters "/>overwrites any existing parameter
   information for the <see langword="SqlDbCommand"/>.</para>
			<para><see langword="DeriveParameters"/> requires an extra call to
the database to obtain the information. If the parameter information is known in
advance, it is more efficient to populate the parameters collection by setting
the information explicitly.</para>
			<para>You can only use <see langword="DeriveParameters"/> with stored procedures. You cannot use <see langword="DeriveParameters"/> to populate 
the <see cref="System.Data.SqlClient.SqlParameterCollection"/> with arbitrary Transact-SQL statements, such as a parameterized SELECT statement.</para>
			<para>For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
	</doc></docs>
