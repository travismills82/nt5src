<docs>
	<doc for="OdbcCommandBuilder.OdbcCommandBuilder">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommandBuilder"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommandBuilder"/>
class.</para>
		</summary>
		<remarks>
			<para>The base constructor initializes all fields to their default values.</para>
		</remarks>
	</doc><doc for="OdbcCommandBuilder.RefreshSchema">
		<summary>
			<para>Refreshes the database schema information used to generate INSERT, UPDATE, or DELETE statements.</para>
		</summary>
		<remarks>
			<para> You should call <see cref="System.Data.Odbc.OdbcCommandBuilder.RefreshSchema"/> whenever
   the <see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/> value of the
<see cref="System.Data.Odbc.OdbcDataAdapter"/> changes.</para>
		</remarks>
	</doc><doc for="OdbcCommandBuilder.OdbcCommandBuilder1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommandBuilder"/> class with the associated <see cref="System.Data.Odbc.OdbcDataAdapter"/>
object.</para>
		</summary>
		<param name="adapter">An <see cref="System.Data.Odbc.OdbcDataAdapter"/> object to associate with this <see cref="System.Data.Odbc.OdbcCommandBuilder"/>.</param>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcCommandBuilder"/> registers itself as a listener for <see cref="System.Data.Odbc.OdbcDataAdapter.RowUpdating"/> events that are generated by
   the <see cref="System.Data.Odbc.OdbcDataAdapter"/> specified in this property.</para>
			<para>When you create a new instance of <see cref="System.Data.Odbc.OdbcCommandBuilder"/>, any existing <see cref="System.Data.Odbc.OdbcCommandBuilder"/> associated with this <see cref="System.Data.Odbc.OdbcDataAdapter"/> is released.</para>
		</remarks>
	</doc><doc for="OdbcCommandBuilder.DataAdapter">
		<summary>
			<para> Gets or sets an <see cref="System.Data.Odbc.OdbcDataAdapter"/> object for which this
<see cref="System.Data.Odbc.OdbcCommandBuilder"/> object will generate
   SQL statements.</para>
		</summary>
		<value>
			<para> An <see cref="System.Data.Odbc.OdbcDataAdapter"/> object that is associated with this
<see cref="System.Data.Odbc.OdbcCommandBuilder"/>.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Data.Odbc.OdbcCommandBuilder"/> registers itself as a
   listener for <see cref="System.Data.Odbc.OdbcDataAdapter.RowUpdating"/> events that are generated by the
<see cref="System.Data.Odbc.OdbcDataAdapter"/> specified in 
   this property.</para>
			<para>When you create a new instance of
<see cref="System.Data.Odbc.OdbcCommandBuilder"/>, any existing <see cref="System.Data.Odbc.OdbcCommandBuilder"/>associated with this 
<see cref="System.Data.Odbc.OdbcDataAdapter"/> is released.</para>
		</remarks>
	</doc><doc for="OdbcCommandBuilder.QuotePrefix">
		<summary>
			<para>Gets or sets the beginning character or characters to use when working with database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.</para>
		</summary>
		<value>
			<para>The beginning character or characters to use. The default is an empty string. </para>
		</value>
		<exception cref="System.InvalidOperationException"><para>This property cannot be changed after an insert, update, or delete command has been generated.</para></exception>
		<remarks>
			<para>Some data sources may contain objects whose names
      include characters such as spaces, commas, and semicolons. To accommodate this,
      use the <see cref="System.Data.Odbc.OdbcCommandBuilder.QuotePrefix"/> and <see cref="System.Data.Odbc.OdbcCommandBuilder.QuoteSuffix"/> properties to specify delimiters, such as a left and right bracket, that will encapsulate the object name.</para>
			<note type="note">
      Although you cannot change the
   <see cref="System.Data.Odbc.OdbcCommandBuilder.QuotePrefix"/> or <see cref="System.Data.Odbc.OdbcCommandBuilder.QuoteSuffix"/> properties after
      an insert, update, or delete command has been generated, you can change their
      settings after calling the <see langword="Update"/> method
      of an <see cref="System.Data.Odbc.OdbcDataAdapter"/>.
      
   </note>
		</remarks>
	</doc>
	<doc for="OdbcCommandBuilder.QuoteSuffix">
		<summary>
			<para>Gets or sets the ending character or characters to use when working with database objects, (for example, tables or columns), whose names contain characters such as spaces or reserved tokens.</para>
		</summary>
		<value>
			<para>The ending character or characters to use. The default is an empty
      string.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>This property cannot be changed after an insert, update, or delete command has been generated.</para></exception>
		<remarks>
			<para> Some data sources may contain objects whose names
      include characters such as spaces, commas, and semicolons. To accommodate this,
      use the <see cref="System.Data.Odbc.OdbcCommandBuilder.QuotePrefix"/> and <see cref="System.Data.Odbc.OdbcCommandBuilder.QuoteSuffix"/>
      properties to specify delimiters, such as a left and right bracket, that will encapsulate the object name. </para>
			<note type="note">
      Although you cannot change the
   <see cref="System.Data.Odbc.OdbcCommandBuilder.QuotePrefix"/> or <see cref="System.Data.Odbc.OdbcCommandBuilder.QuoteSuffix"/> properties after an
      insert, update, or delete operation has been generated, you can change their
      settings after calling the <see langword="Update"/> method
      of an <see cref="System.Data.Odbc.OdbcDataAdapter"/>.
      
   </note>
		</remarks>
	</doc>
	<doc for="OdbcCommandBuilder.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.Odbc.OdbcCommandBuilder"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged and, optionally, the managed
      resources used by the <see cref="System.Data.Odbc.OdbcCommandBuilder"/>.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, the method releases all resources held by any managed 
objects that this <see cref="System.Data.Odbc.OdbcCommand"/> references. It does this by invoking the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>. </para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcCommandBuilder"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OdbcCommandBuilder.Dispose" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommandBuilder">
		<summary>
			<para>Automatically generates single-table commands used to
      reconcile changes made to a <see cref="System.Data.DataSet"/> with the associated data source. This
      class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcDataAdapter"/> does not automatically generate the SQL
   statements required to reconcile changes made to a <see cref="System.Data.DataSet"/> associated with the data source.
   However, you can create an <see cref="System.Data.Odbc.OdbcCommandBuilder"/> object that generates SQL statements for
   single-table updates by setting the <see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/> property of the
<see cref="System.Data.Odbc.OdbcDataAdapter"/>. 
   Then, the <see cref="System.Data.Odbc.OdbcCommandBuilder"/> generates any additional SQL statements that
   you do not set.</para>
			<para>The relationship between an OdbcDataAdapter and its
   corresponding <see cref="System.Data.Odbc.OdbcCommandBuilder"/> is always one-to-one. To create this
   correspondence, you set the <see cref="System.Data.Odbc.OdbcDataAdapter"/> property of the
<see cref="System.Data.Odbc.OdbcCommandBuilder"/> object. This causes the 
<see cref="System.Data.Odbc.OdbcCommandBuilder"/> to register itself as a listener, which 
   produces the output of <see cref="System.Data.Odbc.OdbcDataAdapter.RowUpdating"/> events that affect the
<see cref="System.Data.DataSet"/>.</para>
			<para>To generate INSERT, UPDATE, or DELETE statements,
   the <see cref="System.Data.Odbc.OdbcCommandBuilder"/> uses the <see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/>
   property to retrieve a required
   set of metadata. If you change the value of <see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/>
   after
   the metadata has been retrieved
   (for example, after the first update), you then should call the <see cref="System.Data.Odbc.OdbcCommandBuilder.RefreshSchema"/> method to
   update the metadata.</para>
			<note type="note">
   If the SELECT statement assigned to the
<see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/> 
property uses aliased column names, the resulting INSERT, UPDATE, and DELETE
statements may be inaccurate or fail. If the underlying ODBC driver cannot
provide the proper base column name for the alias column name (using the
SQL_DESC_BASE_COLUMN_NAME value of <see langword="SQLColAttribute"/> ), the
alias name could be used in the generated INSERT, UPDATE, and
DELETE statements. For example, the Microsoft ODBC Driver for Oracle returns the alias name as the base column name. Therefore, the generated
INSERT, UPDATE, and DELETE statements would result in errors.
</note>
			<para>The <see cref="System.Data.Odbc.OdbcCommandBuilder"/> also uses the <see cref="System.Data.Odbc.OdbcCommand.Connection"/>, <see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>, and <see cref="System.Data.Odbc.OdbcCommand.Transaction"/> properties referenced by the
<see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/>. The user should call 
<see cref="System.Data.Odbc.OdbcCommandBuilder.RefreshSchema"/> if any of these properties 
are modified, or if the value of the <see cref="System.Data.Odbc.OdbcDataAdapter.SelectCommand"/> property itself is changed.
Otherwise the <see cref="System.Data.Odbc.OdbcDataAdapter.InsertCommand"/>, <see cref="System.Data.Odbc.OdbcDataAdapter.UpdateCommand"/>, and <see cref="System.Data.Odbc.OdbcDataAdapter.DeleteCommand"/> properties retain their previous values.</para>
			<para>If you call <see cref="System.Data.Common.DbDataAdapter.Dispose"/>, the <see cref="System.Data.Odbc.OdbcCommandBuilder"/> is
disassociated from the <see cref="System.Data.Odbc.OdbcDataAdapter"/>, and the generated commands are no
longer used.</para>
		</remarks>
		<example>
			<para> The following example uses <see cref="System.Data.Odbc.OdbcCommand"/>, along with <see cref="System.Data.Odbc.OdbcDataAdapter"/> and <see cref="System.Data.Odbc.OdbcConnection"/>, to select rows from a data source.
   The example is passed an initialized <see cref="System.Data.DataSet"/>, a connection string, a query
   string that is an SQL SELECT statement, and a string that is the name of the data source table. The
   example then creates an <see cref="System.Data.Odbc.OdbcCommandBuilder"/>.</para>
			<codelink SampleID="Classic WebData OdbcCommandBuilder" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommandBuilder.GetInsertCommand">
		<summary>
			<para>Gets the automatically generated <see cref="System.Data.Odbc.OdbcCommand"/> object required to perform insertions at
   the data source.</para>
		</summary>
		<returns>
			<para>The automatically generated <see cref="System.Data.Odbc.OdbcCommand"/> object required to perform insertions.</para>
		</returns>
		<remarks>
			<para> You can use the <see cref="System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand"/> method for informational or
   troubleshooting purposes because it returns the <see cref="System.Data.Odbc.OdbcCommand"/>
   object to be executed.
   </para>
			<para> You can also use <see cref="System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand"/> as the basis of a
modified command. For example, you might call <see cref="System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand"/> and modify the
<see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/> value, and
then explicitly set that on the <see cref="System.Data.Odbc.OdbcDataAdapter"/>.</para>
			<para> After the SQL statement is first
   generated, you must explicitly call <see cref="System.Data.Odbc.OdbcCommandBuilder.RefreshSchema"/> if it
   changes the statement in any way. Otherwise, the <see cref="System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand"/> still will be using
   information from the previous statement, which might not be correct.
   The SQL statements are first generated when the application calls either <see cref="System.Data.Common.DbDataAdapter.Update"/>
   or <see cref="System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand"/>.</para>
			<para>For more information, see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
	</doc>
	<doc for="OdbcCommandBuilder.GetUpdateCommand">
		<summary>
			<para>Gets the automatically generated <see cref="System.Data.Odbc.OdbcCommand"/> object required to perform updates at the
   data source.</para>
		</summary>
		<returns>
			<para>The automatically generated <see cref="System.Data.Odbc.OdbcCommand"/> object required to perform updates.</para>
		</returns>
		<remarks>
			<para> You can use the <see cref="System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand"/> method for informational or
   troubleshooting purposes because it returns the <see cref="System.Data.Odbc.OdbcCommand"/>
   object
   to be executed.
   </para>
			<para>You can also use <see cref="System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand"/> as the basis of a
modified command. For example, you might call<see cref="System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand"/> and modify the<see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>
value, and then explicitly set that on the<see cref="System.Data.Odbc.OdbcDataAdapter"/>.</para>
			<para>After the SQL statement is first generated,
you must explicitly call
<see cref="System.Data.Odbc.OdbcCommandBuilder.RefreshSchema"/> if it changes the 
statement in any way. Otherwise, the<see cref="System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand"/> still will be using
information from the previous statement, which might not be correct. The SQL
statements are first generated when the application calls either
<see cref="System.Data.Common.DbDataAdapter.Update"/> or <see cref="System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand"/>.</para>
			<para>For more information, see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
	</doc>
	<doc for="OdbcCommandBuilder.GetDeleteCommand">
		<summary>
			<para>Gets the automatically generated <see cref="System.Data.Odbc.OdbcCommand"/> object required to perform deletions at the
   data source.</para>
		</summary>
		<returns>
			<para>The automatically generated <see cref="System.Data.Odbc.OdbcCommand"/> object required to perform deletions.</para>
		</returns>
		<remarks>
			<para> You can use the <see cref="System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand"/> method for informational or
   troubleshooting purposes because it returns the <see cref="System.Data.Odbc.OdbcCommand"/>
   object
   to be executed.
   </para>
			<para>You can also use <see cref="System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand"/> as the basis of a
modified command. For example, you might call <see cref="System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand"/> and modify the <see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>
value, and then explicitly set that on the <see cref="System.Data.Odbc.OdbcDataAdapter"/>.</para>
			<para> After the SQL statement is first generated,
   you must explicitly call <see cref="System.Data.Odbc.OdbcCommandBuilder.RefreshSchema"/> if it changes the
   statement in any way. Otherwise, the <see cref="System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand"/> still will be
   using information from the previous statement, which might not be correct. The
   SQL statements are first generated when the application calls either <see cref="System.Data.Common.DbDataAdapter.Update"/> or <see cref="System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand"/>.</para>
			<para>For more information, see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
	</doc>
	<doc for="OdbcCommandBuilder.DeriveParameters">
		<summary>
			<para> Retrieves
      parameter information from the stored procedure specified in the
   <see cref="System.Data.Odbc.OdbcCommand"/> and
      populates the <see cref="System.Data.Odbc.OdbcCommand.Parameters"/> collection of the specified <see cref="System.Data.Odbc.OdbcCommand"/> object.</para>
		</summary>
		<param name="command">The <see cref="System.Data.Odbc.OdbcCommand"/> referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the <see cref="System.Data.Odbc.OdbcCommand.Parameters"/> collection of the <see cref="System.Data.Odbc.OdbcCommand"/>.</param>
		<exception cref="System.InvalidOperationException"><para>The underlying ODBC driver does not support returning stored procedure parameter information, or the command text is not a valid stored procedure name, or the <see cref="System.Data.CommandType"/> specified was not <see langword="CommandType.StoredProcedure"/>.</para></exception>
		<remarks>
			<para><see langword="DeriveParameters "/>overwrites any existing parameter
   information for the <see cref="System.Data.Odbc.OdbcCommand"/>.</para>
			<para><see langword="DeriveParameters"/> requires an extra call to
the datasource to obtain the information. If the parameter information is known in
advance, it is more efficient to populate the parameters collection by setting
the information explicitly.</para>
			<para>You can only use <see langword="DeriveParameters"/> with 
stored procedures. You cannot use <see langword="DeriveParameters"/> to populate the
<see cref="System.Data.Odbc.OdbcParameterCollection"/> with arbitrary Transact-SQL statements, such 
as a parameterized SELECT statement.</para>
			<para>For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
		</remarks>
	</doc></docs>
