<docs>
	<doc for="OdbcCommand.IDbCommand.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.IDbCommand.Parameters">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.IDbCommand.Transaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.IDbCommand.CreateParameter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.IDbCommand.ExecuteReader">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.IDbCommand.ExecuteReader1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcCommand.Cancel">
		<summary>
			<para>Attempts to cancel the execution of an <see cref="System.Data.Odbc.OdbcCommand"/>.</para>
		</summary>
		<remarks>
			<para>If there is nothing to cancel, nothing happens. However,
      if there is a command in process, and the attempt to cancel fails, no exception is generated.</para>
		</remarks>
		<example>
			<para>The
      following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>, executes it, then cancels the
      execution. To accomplish this, the method is passed a string that is an SQL
      SELECT statement and a string to use to connect
      to the data source.</para>
			<codelink SampleID="Classic WebData OdbcCommand.Cancel" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcCommand.ResetCommandTimeout">
		<summary>
			<para> Resets the <see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/> property to the default value.
   </para>
		</summary>
		<remarks>
			<para>The default value of the <see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/> is 30
   seconds.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>, sets the <see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>, displays the property, resets the <see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>
, and displays the property
again. To accomplish this, the method is passed a string that is an SQL SELECT
statement and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OdbcCommand.ResetCommandTimeout" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcCommand.OdbcCommand">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommand"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommand"/>
class.</para>
		</summary>
		<remarks>
			<para>The base constructor initializes all fields to their
      default values. The following table shows initial property values for an
      instance of <see cref="System.Data.Odbc.OdbcCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.CommandText"/></term>
					<description>empty
         string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.Connection"/></term>
					<description>null</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets
some of its properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.OdbcCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcDataAdapter"/>
		<seealso cref="System.Data.Odbc.OdbcConnection"/>
	</doc>
	<doc for="OdbcCommand.OdbcCommand1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommand"/> class with the text of the query.</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.OdbcCommand1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.Transaction">
		<summary>
			<para>Gets or sets
      the <see cref="System.Data.Odbc.OdbcTransaction"/> within which the <see cref="System.Data.Odbc.OdbcCommand"/> executes.
      </para>
		</summary>
		<value>
			<para>An <see cref="System.Data.Odbc.OdbcTransaction"/>. The default is a null value.
   </para>
		</value>
		<remarks>
			<para>You cannot set the <see cref="System.Data.Odbc.OdbcCommand.Transaction"/> property if it is
   already set to a specific value, and the command is in the process of executing.
   If you set the transaction property to an <see cref="System.Data.Odbc.OdbcTransaction"/> object that is not connected
   to the same <see cref="System.Data.Odbc.OdbcConnection"/> as the <see cref="System.Data.Odbc.OdbcCommand"/> object, an exception will be thrown the next time you attempt to execute a statement.</para>
		</remarks>
	</doc>
	<doc for="OdbcCommand.OdbcCommand2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommand"/> class with the text of the query and an
<see cref="System.Data.Odbc.OdbcConnection"/> object.</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<param name="connection">An <see cref="System.Data.Odbc.OdbcConnection"/> object that represents the connection to a data source.</param>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.OdbcCommand2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.OdbcCommand3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcCommand"/> class with the text of the query, an
<see cref="System.Data.Odbc.OdbcConnection"/> object, and the <see cref="System.Data.Odbc.OdbcCommand.Transaction"/>.</para>
		</summary>
		<param name="cmdText">The text of the query.</param>
		<param name="connection">An <see cref="System.Data.Odbc.OdbcConnection"/> object that represents the connection to a data source.</param>
		<param name="transaction">The transaction in which the <see cref="System.Data.Odbc.OdbcCommand"/> executes.</param>
		<remarks>
			<para>The following table shows initial property values for an instance of this implementation of the <see cref="System.Data.Odbc.OdbcCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.CommandText"/></term>
					<description><paramref name="cmdText"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcCommand.Connection"/></term>
					<description>A
   new <see cref="System.Data.Odbc.OdbcConnection"/> that is the
   value for the <paramref name="connection"/> parameter.</description>
				</item>
			</list>
			<para> You can change the value for any of these parameters by
   setting the related property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.OdbcCommand3" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.CommandTimeout">
		<summary>
			<para> Gets or sets the wait time before
      terminating an attempt to execute a command and generating an error.</para>
		</summary>
		<value>
			<para> The time (in seconds) to wait for the command
      to execute. The default is 30 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The property value assigned is less than 0.</exception>
		<remarks>
			<para>A value of zero (0) specifies no limit to the wait time,
      rather than no wait time,
      and therefore should be avoided.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.OdbcCommand1" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcCommand.Connection"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandText"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandType"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>
	</doc>
	<doc for="OdbcCommand.Connection">
		<summary>
			<para>Gets or sets the <see cref="System.Data.Odbc.OdbcConnection"/>
used by this instance of the <see cref="System.Data.Odbc.OdbcCommand"/>.</para>
		</summary>
		<value>
			<para>The connection to a data source. The default is a null
      value.</para>
		</value>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.Odbc.OdbcCommand.Connection"/> property was changed while a transaction was in progress.</exception>
		<remarks>
			<para>You cannot set the <see cref="System.Data.Odbc.OdbcCommand.Connection"/>, <see cref="System.Data.Odbc.OdbcCommand.CommandType"/>, and <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> properties if the current
   connection is performing an execute or fetch operation. </para>
			<para>If you set <see cref="System.Data.Odbc.OdbcCommand.Connection"/> while a
transaction is in progress and the <see cref="System.Data.Odbc.OdbcCommand.Transaction"/> property is not
null, an <see cref="System.InvalidOperationException"/> is generated. If you set
<see cref="System.Data.Odbc.OdbcCommand.Connection"/> after the transaction has been 
committed or rolled back, and the <see cref="System.Data.Odbc.OdbcCommand.Transaction"/> property is not null, the
<see cref="System.Data.Odbc.OdbcCommand.Transaction"/> property is then set to a null value.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.Connection" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandText"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandType"/>
	</doc>
	<doc for="OdbcCommand.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.Odbc.OdbcCommand"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged and, optionally, the managed
      resources used by the <see cref="System.Data.Odbc.OdbcCommand"/>
      object.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, the method releases all resources held by any managed 
objects that this <see cref="System.Data.Odbc.OdbcCommand"/> references. It does this by invoking the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>. </para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OdbcCommand.Dispose" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.CreateParameter">
		<summary>
			<para>Creates
      a new instance of an <see cref="System.Data.Odbc.OdbcParameter"/> object. </para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.Odbc.OdbcParameter"/> object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcCommand.CreateParameter"/> method is a strongly-typed
   version of <see cref="System.Data.IDbCommand.CreateParameter"/>.</para>
		</remarks>
	</doc>
	<doc for="OdbcCommand.UpdatedRowSource">
		<summary>
			<para>Gets or sets a value that specifies how the
   <see langword="Update"/> method should apply command results to the
   <see langword="DataRow"/>.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Data.UpdateRowSource"/> values.</para>
		</value>
		<exception cref="System.ArgumentException">The value entered was not one of the <see cref="System.Data.UpdateRowSource"/> values.</exception>
		<remarks>
			<para>The default <see cref="System.Data.UpdateRowSource"/> value is <see langword="Both"/>
unless the command is automatically generated (as in the case of the <see cref="System.Data.Odbc.OdbcCommandBuilder"/> ), in which case the default is
<see langword="None"/>.</para>
			<para>For more information about using the <see cref="System.Data.Odbc.OdbcCommand.UpdatedRowSource"/> property, see <see topic="cpconusingparameterswithdataadapters"/>.</para>
		</remarks>
	</doc>
	<doc for="OdbcCommand">
		<summary>
			<para>Represents an SQL statement or stored procedure to execute against a data source. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcCommand"/> class provides the following methods for
   executing commands against a data
   source:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/></term>
					<description> Executes commands that return
      rows. </description>
				</item>
				<item>
					<term><see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/></term>
					<description>Executes commands such as SQL INSERT,
   DELETE, UPDATE, and SET statements.</description>
				</item>
				<item>
					<term><see cref="System.Data.Odbc.OdbcCommand.ExecuteScalar"/></term>
					<description>Retrieves a single value (for example, an aggregate
   value) from a database.</description>
				</item>
			</list>
			<para>You can reset the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> property and reuse 
the <see cref="System.Data.Odbc.OdbcCommand"/> object. However, you must close
the <see cref="System.Data.Odbc.OdbcDataReader"/> before you
can execute a new or previous command.</para>
			<para>If execution of the command results in a fatal
<see cref="System.Data.Odbc.OdbcException"/> 
(for example, a SQL Server severity level of 20 or greater), the
<see cref="System.Data.Odbc.OdbcConnection"/> may 
close. However, the user can reopen the connection and continue.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/> method of
<see cref="System.Data.Odbc.OdbcCommand"/>, 
   along with <see cref="System.Data.Odbc.OdbcDataReader"/> and <see cref="System.Data.Odbc.OdbcConnection"/>, to select rows from a table.</para>
			<codelink SampleID="Classic WebData OdbcCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcDataAdapter"/>
		<seealso cref="System.Data.Odbc.OdbcConnection"/>
	</doc>
	<doc for="OdbcCommand.CommandType">
		<summary>
			<para>Gets or sets a value indicating how the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> property is interpreted.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.CommandType"/> values. The default is <see langword="Text"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The value was not a valid <see cref="System.Data.CommandType"/>.</exception>
		<remarks>
			<para>When the <see cref="System.Data.Odbc.OdbcCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, you should set the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> 
property to the full ODBC call syntax. The command then executes this stored
procedure when you call one of the Execute methods (for example, <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/> or <see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/>
).</para>
			<para>The <see cref="System.Data.Odbc.OdbcCommand.Connection"/>, <see cref="System.Data.Odbc.OdbcCommand.CommandType"/> and <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> properties cannot be set if the
current connection is performing an execute or fetch operation. </para>
			<para>The .NET Framework Data Provider for ODBC does not support passing
   named parameters to an SQL statement or to a stored procedure called by an
<see cref="System.Data.Odbc.OdbcCommand"/>. In either of these cases,
   use the question mark (?) placeholder. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = ?
</code>
			<para> The order in which <see cref="System.Data.Odbc.OdbcParameter"/> objects are added to the
<see cref="System.Data.Odbc.OdbcParameterCollection"/> must directly 
correspond to the position of the question mark placeholder for the
parameter.</para>
			<para>For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.</para>
			<note type="note">
   The .NET Framework Data Provider for ODBC does not support
   the
<see cref="System.Data.CommandType"/> setting of 
<see langword="TableDirect"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class <see cref="System.Data.Odbc.OdbcCommand"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.CommandType" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandText"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.UpdatedRowSource"/>
	</doc>
	<doc for="OdbcCommand.Parameters">
		<summary>
			<para> Gets the <see cref="System.Data.Odbc.OdbcParameterCollection"/>.</para>
		</summary>
		<value>
			<para>The parameters of the SQL statement or stored procedure. The default is an empty collection.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.Odbc.OdbcCommand.CommandType"/> is set to <see langword="Text"/>, the
   .NET Framework Data Provider for ODBC does not support passing named parameters to an SQL
   statement or to a stored procedure called by an <see cref="System.Data.Odbc.OdbcCommand"/>. In either of these cases, use the question mark (?) placeholder. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = ?
</code>
The order in which <see cref="System.Data.Odbc.OdbcParameter"/> objects are added to the
<see cref="System.Data.Odbc.OdbcParameterCollection"/> must directly 
correspond to the position of the question mark placeholder
for the parameter in the command text. For more information, see <see topic="cpconUsingStoredProceduresWithCommand"/>.
<note type="note">
   If the parameters in the collection
   do not match the requirements of the query to be executed, an error may
   result.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/> and displays its parameters. To
   accomplish this, the method is passed an <see cref="System.Data.Odbc.OdbcConnection"/>, a query string that is an
   SQL SELECT statement, and an array of <see cref="System.Data.Odbc.OdbcParameter"/>
   objects.</para>
			<codelink SampleID="Classic WebData OdbcCommand.Parameters" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcParameter"/>
	</doc>
	<doc for="OdbcCommand.CommandText">
		<summary>
			<para> Gets or
      sets the SQL statement or stored procedure to execute against the data source.</para>
		</summary>
		<value>
			<para> The SQL
      statement or stored procedure to execute. The default
      value is an empty string ("").</para>
		</value>
		<remarks>
			<para> When the <see cref="System.Data.IDbCommand.CommandType"/> property is
   set to <see langword="StoredProcedure"/>, the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/>
   property should be set using standard ODBC stored
   procedure escape sequences. Setting the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/>
   
   to the name of the stored procedure does not function as it does for other .NET Framework data providers.</para>
			<para>A number of language features, such as outer joins and scalar function calls,
   are commonly implemented by data sources. Even the syntax for these features
   tends to be data source-specific. Because of this, ODBC defines escape sequences
   that contain standard syntax for the following language features:</para>
			<list type="bullet"><item>
					<term>
      Date, time, timestamp, and datetime interval literals</term>
				</item>
				<item>
					<term>
      Scalar functions such as numeric, string, and data
      type conversion functions</term>
				</item>
				<item>
					<term>
      LIKE predicate escape character</term>
				</item>
				<item>
					<term>
      Outer joins</term>
				</item>
				<item>
					<term>
      Procedure calls</term>
				</item>
			</list>
			<para> The escape
   sequence used by ODBC is as follows: </para>
			<code>
{extension}
</code>
			<para>This escape sequence is recognized and parsed by ODBC drivers, which then
   replace any escape sequences with data source-specific grammar. </para>
			<para>A procedure is an executable object stored at the data source. Generally, it
   is one or more SQL statements that have been precompiled. The escape sequence
   for calling a procedure is </para>
			<code>
{[?=]call procedure-name[([parameter][,[parameter]]...)]}
</code>
			<para>where <paramref name="procedure-name"/> specifies the name of a
procedure and <paramref name="parameter"/>
specifies a procedure parameter. </para>
			<para>The command executes this stored procedure when you call one of the Execute
   methods (for example, <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/> or <see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/>). </para>
			<para>You cannot set
   the <see cref="System.Data.Odbc.OdbcCommand.Connection"/>, <see cref="System.Data.Odbc.OdbcCommand.CommandType"/> and <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> properties
   if the current connection is performing an execute or fetch
   operation. </para>
			<para>The ODBC .NET Provider does not support named parameters for passing
   parameters to an SQL statement or a stored procedure called by an <see cref="System.Data.Odbc.OdbcCommand"/>
   when <see cref="System.Data.Odbc.OdbcCommand.CommandType"/> is set to <see langword="Text"/>.
   In this case, the question mark (?) placeholder must be used. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = ?
</code>
			<para>As a result, the order in which <see cref="System.Data.Odbc.OdbcParameter"/> objects are added to the
<see cref="System.Data.Odbc.OdbcParameterCollection"/> must directly correspond to the position of 
the question mark placeholder for the parameter. </para>
			<para>If a parameter contains a null value, the .NET Framework Data Provider for
   ODBC still binds that parameter, but uses a default parameter, if one has
   been defined using SQL_DEFAULT_PARAM, in place of the null value. (For example,
   the <see cref="System.Data.Odbc.OdbcParameterCollection"/>:</para>
			<code>
{1, null, 2}
</code>
			<para> passed into the
<see cref="System.Data.Odbc.OdbcCommand.CommandText"/> 
property: </para>
			<code>
{ call sp(?, ?, ?) }
</code>
			<para>results in the .NET Framework Data Provider for ODBC binding the first
   parameter to the value 1, the third parameter to the value 2, and the second
   parameter as SQL_DEFAULT_PARAM. This behavior is driver-dependent, however. If
   the driver does not support this functionality, simply do not pass in a value
   for the parameter. For example, use the <see cref="System.Data.Odbc.OdbcParameterCollection"/> :</para>
			<code>
{1, 2}
</code>
			<para> and set the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> property to:</para>
			<code>
{ call sp(?, null, ?) }
</code>
			<note type="note">
   If
   a parameter is omitted, the comma delimiting it from other parameters must
   still appear. If an input or input/output parameter is omitted, the procedure uses
   the default value of the parameter. Another way to specify the default value of
   an input or input/output parameter is to set the value of the
   length/indicator buffer bound to the parameter to SQL_DEFAULT_PARAM.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OdbcCommand.CommandText" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcCommand.Connection"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandTimeout"/>
		<seealso cref="System.Data.Odbc.OdbcCommand.CommandType"/>
	</doc>
	<doc for="OdbcCommand.Prepare">
		<summary>
			<para> Creates a prepared (or compiled) version of the command at the data
      source.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>The <see cref="System.Data.Odbc.OdbcCommand.Connection"/> is not set.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.Odbc.OdbcCommand.Connection"/> is not <see cref="System.Data.Odbc.OdbcConnection.Open"/>.</para></exception>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcCommand.Prepare"/> method calls the ODBC 
<see langword="SQLPrepare"/> 
function. Depending on the capabilities of the underlying ODBC driver and
data source, parameter information (such as data types) may be checked when
the statement is prepared (if all parameters have been bound), or when it
is executed (if not all parameters have been bound). For maximum interoperability,
an application should unbind all parameters that applied to a previous SQL
statement before preparing a new SQL statement on the same <see cref="System.Data.Odbc.OdbcCommand"/>. This prevents errors that are
due to previous parameter information being applied to
the new SQL statement. </para>
			<para>If you call an Execute method after calling
<see cref="System.Data.Odbc.OdbcCommand.Prepare"/>, any parameter value that is 
   larger than the value specified by the <see cref="System.Data.Odbc.OdbcParameter.Size"/> property is
   automatically truncated to the original specified size of the parameter, and no
   truncation errors are returned.</para>
			<para>Output parameters (whether prepared or
   not) must have a user-specified data type. If you specify a variable length data
   type, you must also specify the maximum <see cref="System.Data.Odbc.OdbcParameter.Size"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/> and
   opens the connection. The example then prepares a stored procedure on the data
   source by passing a string that is an SQL SELECT statement and a string to use to
   connect to the data source.</para>
			<codelink SampleID="Classic WebData OdbcCommand.Prepare" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.ExecuteReader">
		<overload>
			<para> Sends the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> to the <see cref="System.Data.Odbc.OdbcCommand.Connection"/> and builds an <see cref="System.Data.Odbc.OdbcDataReader"/>.</para>
		</overload>
		<summary>
			<para>Sends the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> to the <see cref="System.Data.Odbc.OdbcCommand.Connection"/> and builds an <see cref="System.Data.Odbc.OdbcDataReader"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.Odbc.OdbcDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>You should set the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> property to the
   full ODBC call syntax for stored procedures. The command executes this stored
   procedure when you call <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/>.</para>
			<para>While the <see cref="System.Data.Odbc.OdbcDataReader"/> is in use, the associated <see cref="System.Data.Odbc.OdbcConnection"/> is busy serving the <see cref="System.Data.Odbc.OdbcDataReader"/>. While in this state, no other operations can
be performed on the <see cref="System.Data.Odbc.OdbcConnection"/> other than closing it. This is the case until
the <see cref="System.Data.Odbc.OdbcDataReader.Close"/> method of the <see cref="System.Data.Odbc.OdbcDataReader"/>
is called.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
, then executes it by passing a string that is
an SQL SELECT statement, and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OdbcCommand.ExecuteReader1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.ExecuteReader1">
		<summary>
			<para>Sends the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> to the <see cref="System.Data.Odbc.OdbcCommand.Connection"/>, and builds an <see cref="System.Data.Odbc.OdbcDataReader"/> using one of the
<see langword="CommandBehavior"/> values.</para>
		</summary>
		<param name="behavior">One of the <see langword="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>An <see cref="System.Data.Odbc.OdbcDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>If you expect your SQL statement to return only a single
      row, specifying <see langword="SingleRow"/> as the
      <see cref="System.Data.CommandBehavior"/> value may improve application performance.</para>
			<para>You should set the <see cref="System.Data.Odbc.OdbcCommand.CommandText"/> property to the
   full ODBC call syntax for stored procedures. The command executes this stored
   procedure when you call <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/>.</para>
			<para>The <see cref="System.Data.Odbc.OdbcDataReader"/> supports a special mode that enables large binary
values to be read efficiently. For more information, see the
<see langword="SequentialAccess"/> setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<note type="note">
   The <see langword="SequentialAccess"/> value of
<see cref="System.Data.CommandBehavior"/> is not a limiting setting; it simply means that you will have at least sequential
   access to the <see cref="System.Data.Odbc.OdbcDataReader"/>. For example, when using the SQL Server ODBC Driver in <see langword="SequentialAccess"/> mode,
   you can still navigate to the first column of an <see cref="System.Data.Odbc.OdbcDataReader"/> row after having read through all the other columns sequentially.
</note>
			<para>While the <see cref="System.Data.Odbc.OdbcDataReader"/> is in use, the associated
<see cref="System.Data.Odbc.OdbcConnection"/> 
is busy serving the <see cref="System.Data.Odbc.OdbcDataReader"/>. While in this state, no other operations can
be performed on the <see cref="System.Data.Odbc.OdbcConnection"/> other
than closing it. This is the case until you call
the <see cref="System.Data.Odbc.OdbcDataReader.Close" qualify="true"/> method. If the
<see cref="System.Data.Odbc.OdbcDataReader"/>is created with <see cref="System.Data.CommandBehavior"/> set to <see langword="CloseConnection"/>, closing 
the <see cref="System.Data.Odbc.OdbcDataReader"/> closes the connection automatically.</para>
		</remarks>
		<example>
			<para>The following example creates an
      <see cref="System.Data.Odbc.OdbcCommand"/>,
      then executes it by passing a string that is an SQL SELECT statement, and a
      string to use to connect to the data source. <see cref="System.Data.CommandBehavior"/> is then set to <see cref="System.Data.CommandBehavior.CloseConnection"/>.</para>
			<codelink SampleID="Classic WebData OdbcCommand.ExecuteReader2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcCommand.DesignTimeVisible">
		<summary>
			<para> Gets or sets a value indicating whether the command object should be visible in
      a customized interface control.</para>
		</summary>
		<value>
			<para><see langword="true"/>, if the command object should be
   visible in a control; otherwise <see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
	</doc><doc for="OdbcCommand.ExecuteNonQuery">
		<summary>
			<para> Executes an SQL statement against the <see cref="System.Data.Odbc.OdbcCommand.Connection"/> and returns the number of rows
   affected.</para>
		</summary>
		<returns>
			<para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The connection does not exist.</para>
			<para>-or-</para>
			<para>The connection is not open.</para></exception>
		<remarks>
			<para> You can use <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/> to perform catalog operations
   (for example, querying the structure of a database or creating database objects
   such as tables); or to change the data in a database, without using a
<see cref="System.Data.DataSet"/>
, by executing UPDATE, INSERT, or DELETE statements.</para>
			<para> You can also use <see cref="System.Data.SqlClient.SqlCommand.ExecuteNonQuery"/>
to execute multiple SQL statements if the underlying ODBC driver supports this functionality. In this case, the return value is the number of rows affected by all statements in the command.</para>
			<para> Although <see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/> does not return any rows, any
output parameters or return values mapped to parameters are populated with
data.</para>
			<para>For UPDATE, INSERT, and DELETE statements, the return value is the number of 
   rows affected by the command. For all other types of statements, the return
   value is -1. If a rollback occurs, the return value is also -1.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/> and
   then executes it by using <see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/>. The example is passed a string that is an SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OdbcCommand.ExecuteNonQuery" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcCommand.ExecuteScalar">
		<summary>
			<para>Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
		</summary>
		<returns>
			<para>The first column of the first row in the result set, or a null reference if the result set is empty.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Data.Odbc.OdbcCommand.ExecuteScalar"/> method to retrieve a single
   value (for example, an aggregate value) from a data source. This requires less
   code than using the <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value from the data returned by an <see cref="System.Data.Odbc.OdbcDataReader"/>. </para>
			<para>A typical <see cref="System.Data.Odbc.OdbcCommand.ExecuteScalar"/> query can be formatted as in the following C# example:</para>
			<code>
CommandText = "select count(*) from region";
Int32 count = (int32) ExecuteScalar();
</code>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/>
and then executes it using <see cref="System.Data.Odbc.OdbcCommand.ExecuteScalar"/>. The
example is passed a string that is an SQL statement that returns an aggregate result, and
a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OdbcCommand.ExecuteScalar" SnippetID="1"/>
		</example>
	</doc></docs>
