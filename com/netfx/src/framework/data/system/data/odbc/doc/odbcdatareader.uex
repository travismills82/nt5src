<docs>
	<doc for="OdbcDataReader.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcDataReader.GetIndexTable">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcDataReader.Depth">
		<summary>
			<para> Gets a value indicating the depth of nesting for the current row.</para>
		</summary>
		<value>
			<para> The depth of nesting for the current row.</para>
		</value>
		<remarks>
			<para>The outermost table has a depth of zero.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.Dispose">
		<summary>
			<para>Frees resources before the <see cref="System.Data.Odbc.OdbcDataReader"/> is reclaimed by the
   Garbage Collector.</para>
		</summary>
	</doc><doc for="OdbcDataReader.GetFieldType">
		<summary>
			<para>Gets the <see cref="System.Type"/>
that is the data type of the object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The <see cref="System.Type"/>
that is the data type of the object.</para>
		</returns>
	</doc><doc for="OdbcDataReader.GetName">
		<summary>
			<para>Gets the name of the specified column.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A string that is the name of the specified column.</para>
		</returns>
		<seealso cref="System.Data.Odbc.OdbcDataReader.GetOrdinal"/>
	</doc><doc for="OdbcDataReader.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcDataReader.GetValue">
		<overload>
			<para>Gets the value of the specified column in its native format.</para>
		</overload>
		<summary>
			<para> Gets the
      value of the column at the specified ordinal in its native format.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value to return.</para>
		</returns>
		<remarks>
			<para> This method returns <see cref="System.DBNull"/> for
   null database columns.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetByte">
		<summary>
			<para>Gets the value of the specified column as a byte.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a byte.</para>
		</returns>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
      calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetBoolean">
		<summary>
			<para>Gets the value of the specified column as a Boolean.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A Boolean that is the value of the column.</para>
		</returns>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
      calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetGuid">
		<summary>
			<para>Gets the value of the specified column as a globally-unique identifier (GUID).</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a GUID.</para>
		</returns>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
      calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetValues">
		<summary>
			<para> Gets all the attribute columns in the current
      row.</para>
		</summary>
		<param name="values">An array of type <see cref="System.Object"/> into which to copy the attribute columns.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, the <see cref="System.Data.Odbc.OdbcDataReader.GetValues"/> method provides an efficient means for retrieving all columns, rather than retrieving
   each column individually.</para>
			<para>You can pass an <see cref="System.Object"/> array that contains fewer than the
number of columns contained in the resulting row. Only the amount of data
the <see cref="System.Object"/> array
holds is copied to the array. You can also pass an <see cref="System.Object"/>
array whose length is more than the
number of columns contained in the resulting row.</para>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetChar">
		<summary>
			<para>Gets the value of the specified column as a character.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a character.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetInt16">
		<summary>
			<para>Gets the
      value of the specified column as a 16-bit signed integer.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 16-bit signed 
      integer.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetInt32">
		<summary>
			<para>Gets the
      value of the specified column as a 32-bit signed integer.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 32-bit signed 
      integer.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetInt64">
		<summary>
			<para>Gets the
      value of the specified column as a 64-bit signed integer.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 64-bit signed 
      integer.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetFloat">
		<summary>
			<para> Gets the value of the specified column as a single-precision floating-point number.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a single-precision 
      floating-point number.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.GetDouble">
		<summary>
			<para>Gets the value of the specified column as a double-precision floating point number.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a double-precision 
      floating point number.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc><doc for="OdbcDataReader.FieldCount">
		<summary>
			<para> Gets the number of columns in the current row.
      </para>
		</summary>
		<value>
			<para> When not positioned in a valid record set, 0; otherwise the number of columns
      in the current record. The default is -1.
      </para>
		</value>
		<exception cref="System.NotSupportedException">There is no current connection to a data source. </exception>
		<remarks>
			<para>After executing a query that does not return rows, <see cref="System.Data.Odbc.OdbcDataReader.FieldCount"/>
returns 0. </para>
		</remarks>
	</doc><doc for="OdbcDataReader.Read">
		<summary>
			<para>Advances the <see cref="System.Data.Odbc.OdbcDataReader"/>
to the next record.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more rows; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default position of the <see cref="System.Data.Odbc.OdbcDataReader"/> is prior to the first record.
   Therefore, you must call <see cref="System.Data.Odbc.OdbcDataReader.Read"/>
   to
   begin accessing any data.</para>
			<para>While the <see cref="System.Data.Odbc.OdbcDataReader"/> is in use, the
associated <see cref="System.Data.Odbc.OdbcConnection"/> is
busy serving it until you call <see cref="System.Data.Odbc.OdbcDataReader.Close"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/>, an <see cref="System.Data.Odbc.OdbcCommand"/>, and an <see cref="System.Data.Odbc.OdbcDataReader"/>. The example reads through the data, writing it out to the console. Finally, the example closes the <see cref="System.Data.Odbc.OdbcDataReader"/>, then the <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
			<codelink SampleID="Classic WebData IDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcDataReader.IsDBNull">
		<summary>
			<para> Gets a value indicating whether the column contains non-existent or missing values.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para><see langword="true"/> if the specified
   column value is equivalent to <see cref="System.DBNull"/> ;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>To avoid raising an error, call this method to check for null column values before calling
      the typed Get methods (for example,
      <see cref="System.Data.Odbc.OdbcDataReader.GetByte"/>, <see cref="System.Data.Odbc.OdbcDataReader.GetChar"/>, and so on).</para>
		</remarks>
	</doc><doc for="OdbcDataReader.NextResult">
		<summary>
			<para> Advances the the <see cref="System.Data.Odbc.OdbcDataReader"/> to the next result, when reading the results of
   batch SQL statements.
   </para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more result sets; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Used to process multiple results, which can be generated by executing
      batch SQL statements.
      </para>
			<para> By default, the <see cref="System.Data.Odbc.OdbcDataReader"/> is positioned on the first result.
   </para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.IsClosed">
		<summary>
			<para> Indicates whether the <see cref="System.Data.Odbc.OdbcDataReader"/>
is closed.
</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   the <see cref="System.Data.Odbc.OdbcDataReader"/> is closed;
   otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para><see cref="System.Data.Odbc.OdbcDataReader.IsClosed"/>
and <see cref="System.Data.Odbc.OdbcDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.Odbc.OdbcDataReader"/> is closed. </para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.this">
		<overload>
			<para> Gets the value of
      a column in its native format.
      </para>
		</overload>
		<summary>
			<para>      Gets the value of the specified column in its native format given
      the column ordinal.
      </para>
		</summary>
		<param name="i">The column ordinal. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="OdbcDataReader.this1">
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column name.
      </para>
		</summary>
		<param name="value">The column name. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">No column with the specified name was found.</exception>
		<remarks>
			<para>A case-sensitive lookup is performed first. If it fails, a second
      case-insensitive search is made.</para>
			<para>This method is kana-width insensitive.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetBytes">
		<summary>
			<para> Reads a stream of bytes from the specified column offset into
      the
      buffer as an array, starting at the given buffer offset.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" dataIndex">The index within the field where the read operation is to begin. </param>
		<param name=" buffer">The buffer into which to read the stream of bytes. </param>
		<param name=" bufferIndex">The index where <paramref name="buffer"/> is to begin the write operation. </param>
		<param name=" length">The number of bytes to read. </param>
		<returns>
			<para>The actual number of bytes read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.Odbc.OdbcDataReader.GetBytes"/> returns the number of available
   bytes in the field. In most cases this is the exact length of the field.
   However, the number returned may be less than the true length of the field if
<see langword="GetBytes"/> has already been used to obtain bytes from the field. 
   This may be the case, for example, if the <see cref="System.Data.Odbc.OdbcDataReader"/> is reading a large data
   structure into a buffer. For more
information, see the <see langword="SequentialAccess"/>
setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para> If you pass a buffer that is
   a null value, <see cref="System.Data.Odbc.OdbcDataReader.GetBytes"/>
   returns the length of the field in bytes.</para>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader">
		<summary>
			<para> Provides a way of reading
      a forward-only stream of data rows from a data source. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para>To create an <see cref="System.Data.Odbc.OdbcDataReader"/>, you must call
   the <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/> method of the <see cref="System.Data.Odbc.OdbcCommand"/>
   
   object, rather than directly using a constructor.</para>
			<para>While the <see cref="System.Data.Odbc.OdbcDataReader"/> is in use, the
associated <see cref="System.Data.Odbc.OdbcConnection"/> is busy serving the <see cref="System.Data.Odbc.OdbcDataReader"/>
, and no other operations can be performed on the <see cref="System.Data.Odbc.OdbcConnection"/>
other
than closing it. This is the case until the <see cref="System.Data.Odbc.OdbcDataReader.Close"/> method of the <see cref="System.Data.Odbc.OdbcDataReader"/> is called. For example, you cannot retrieve
output parameters until after you call <see cref="System.Data.Odbc.OdbcDataReader.Close"/>.</para>
			<para>Changes made to a resultset by another process or thread while data is being
   read may be visible to the user of the <see cref="System.Data.Odbc.OdbcDataReader"/>. However,
   the precise behavior is both driver and timing dependent.</para>
			<para><see cref="System.Data.Odbc.OdbcDataReader.IsClosed"/> and <see cref="System.Data.Odbc.OdbcDataReader.RecordsAffected"/> are the
only properties that you can call after the <see cref="System.Data.Odbc.OdbcDataReader"/> is closed. In some cases, you must call <see cref="System.Data.Odbc.OdbcDataReader.Close"/> before you can call <see cref="System.Data.Odbc.OdbcDataReader.RecordsAffected"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/>, an <see cref="System.Data.Odbc.OdbcCommand"/>,
   and an <see cref="System.Data.Odbc.OdbcDataReader"/>. The example reads through the data, writing it
   out to the console. Finally, the example closes the <see cref="System.Data.Odbc.OdbcDataReader"/>,
   then the <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
			<codelink SampleID="Classic WebData OdbcDataReader" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcDataReader.RecordsAffected">
		<summary>
			<para> Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</para>
		</summary>
		<value>
			<para>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected, or the statement failed.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcDataReader.RecordsAffected"/>
property is not set until all rows are read and you close the <see cref="System.Data.Odbc.OdbcDataReader"/>.</para>
			<para>The value of this property is cumulative. For example, if
   two records are inserted in batch mode, the value
   of <see cref="System.Data.Odbc.OdbcDataReader.RecordsAffected"/>
   will be 2.</para>
			<para><see cref="System.Data.Odbc.OdbcDataReader.IsClosed"/>
and <see cref="System.Data.Odbc.OdbcDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.Odbc.OdbcDataReader"/> is closed.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetDateTime">
		<summary>
			<para>Gets the value of the specified column as a 
   <see cref="System.DateTime"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a
   <see cref="System.DateTime"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying
      capabilities of the ODBC driver. If the conversion is not supported then the
      method call will
      fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetDecimal">
		<summary>
			<para>Gets the value of the specified column as a
   <see cref="System.Decimal"/>
   object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a
   <see cref="System.Decimal"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetString">
		<summary>
			<para>Gets the value of the specified column as a 
   <see cref="System.String"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 
   <see cref="System.String"/> .</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
			<para>Call <see cref="System.Data.Odbc.OdbcDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetDate">
		<summary>
			<para>Gets the value of the specified column as a
   <see cref="System.DateTime"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a
   <see cref="System.DateTime"/> object.</para>
		</returns>
	</doc>
	<doc for="OdbcDataReader.GetTime">
		<summary>
			<para>Gets the value of the specified column as a
   <see cref="System.TimeSpan"/>
   object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a
   <see cref="System.TimeSpan"/> object.</para>
		</returns>
	</doc>
	<doc for="OdbcDataReader.HasRows">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.Odbc.OdbcDataReader"/> contains one or more rows.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.Odbc.OdbcDataReader"/> contains one or more rows;
   otherwise <see langword="false"/>.</para>
		</value>
		<remarks>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetDataTypeName">
		<nodoc/>
		<summary>
			<para>Gets the name of the source data type.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The name of the source data type.</para>
		</returns>
	</doc>
	<doc for="OdbcDataReader.Close">
		<summary>
			<para>Closes the <see cref="System.Data.Odbc.OdbcDataReader"/> object.</para>
		</summary>
		<remarks>
			<para>You must explicitly call the <see cref="System.Data.Odbc.OdbcDataReader.Close"/> method when you are finished
   using the <see cref="System.Data.Odbc.OdbcDataReader"/> to use the
   associated <see cref="System.Data.Odbc.OdbcConnection"/> for any other purpose.</para>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/>, an <see cref="System.Data.Odbc.OdbcCommand"/>, and an <see cref="System.Data.Odbc.OdbcDataReader"/>. The example reads through the data, writing it out to the console. Finally, the example closes the <see cref="System.Data.Odbc.OdbcDataReader"/>, then the <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
			<codelink SampleID="Classic WebData IDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcDataReader.GetChars">
		<summary>
			<para>Reads a stream of characters from the specified column offset
      into the buffer as an array, starting at the given buffer offset.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" dataIndex">The index within the row where the read operation is to begin. </param>
		<param name=" buffer">The buffer into which to copy data. </param>
		<param name=" bufferIndex">The index where <paramref name="buffer"/> is to begin the write operation.</param>
		<param name=" length">The number of characters to read. </param>
		<returns>
			<para>The actual number of characters read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.Odbc.OdbcDataReader.GetChars"/> returns the number of
   available characters in the field. In most cases this is the exact length of the
   field. However, the number returned may be less than the true length of the
   field if <see cref="System.Data.Odbc.OdbcDataReader.GetChars"/> has already been used to obtain characters from
   the field. This may be the case, for example, if the <see cref="System.Data.Odbc.OdbcDataReader"/> is reading a large data structure into a
   buffer. For more
   information, see the <see langword="SequentialAccess"/>
   setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para> If you pass a buffer that
   is a null value, <see cref="System.Data.Odbc.OdbcDataReader.GetChars"/>
   returns the length of the field in characters.</para>
			<para>Conversions are performed based on the underlying capabilities of the ODBC driver. If the conversion is not supported then the method call will fail.</para>
		</remarks>
	</doc>
	<doc for="OdbcDataReader.GetData">
		<summary>
			<para> Not currently supported.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>Not currently supported.</para>
		</returns>
	</doc>
	<doc for="OdbcDataReader.GetOrdinal">
		<summary>
			<para>Gets the column ordinal, given the name of the column.</para>
		</summary>
		<param name="value">The name of the column.</param>
		<returns>
			<para>The zero-based column ordinal.</para>
		</returns>
		<remarks>
			<para><see langword="GetOrdinal"/> performs a case-sensitive lookup first. If it
   fails, a second case-insensitive search is made.</para>
			<para><see langword="GetOrdinal"/> is kana-width insensitive.</para>
			<para>Because ordinal-based lookups are more efficient than named lookups, it is
   inefficient to call <see langword="GetOrdinal"/> within a loop. Instead,
   call <see langword="GetOrdinal"/> once and then assign the results to an integer
   variable for use within the loop.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Data.Odbc.OdbcDataReader.GetOrdinal"/> 
method.</para>
			<codelink SampleID="Classic WebData OdbcDataReader.GetOrdinal" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcDataReader.GetName"/>
	</doc><doc for="OdbcDataReader.GetSchemaTable">
		<summary>
			<para>Returns a <see langword="DataTable"/> that describes the column metadata
   of the <see cref="System.Data.Odbc.OdbcDataReader"/>. </para>
		</summary>
		<returns>
			<para>A <see langword="DataTable"/> that describes the column metadata.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.Odbc.OdbcDataReader"/> is closed.</exception>
		<remarks>
			<para> The <see cref="System.Data.Odbc.OdbcDataReader.GetSchemaTable"/>
method returns metadata about each column
in the following order:</para>
			<list type="table">
				<listheader>
					<term> DataReader Column</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> ColumnName</term>
					<description> The name of the column; this might not be unique. If the column name cannot be determined, a null value is returned. This name always reflects the most recent naming of the column in the current view or command text.</description>
				</item>
				<item>
					<term> ColumnOrdinal</term>
					<description>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other columns are numbered starting with 1. This column cannot contain a null value.</description>
				</item>
				<item>
					<term> ColumnSize</term>
					<description>The maximum possible length of a value in the column. For columns that use a fixed-length data type, this is the size of the data type. </description>
				</item>
				<item>
					<term> NumericPrecision</term>
					<description> If
      <see cref="System.Data.DbType"/> is a numeric data
         type, this is the maximum precision of the column. The precision depends
         on the definition of the column. If <see cref="System.Data.DbType"/> is not a numeric data type, this is a null
         value. If the underlying ODBC driver returns a precision value for a
         non-numeric data type, this value is used in the schema table.</description>
				</item>
				<item>
					<term> NumericScale</term>
					<description> If
      <see cref="System.Data.DbType"/>
      is is <see cref="System.Data.DbType.Decimal"/>, the number
      of digits to the right of the decimal point. Otherwise, this is a null
      value. If the underlying ODBC driver returns a precision value for a non-numeric data type, this value is used in the schema table.</description>
				</item>
				<item>
					<term> DataType</term>
					<description>Maps to the common language runtime type of
   <see cref="System.Data.DbType"/>.</description>
				</item>
				<item>
					<term> ProviderType</term>
					<description>The underlying driver type.</description>
				</item>
				<item>
					<term> IsLong</term>
					<description><see langword="true"/> if the column contains a Binary Long Object (BLOB)
   that contains very long data. The definition of very long data is
   driver-specific.</description>
				</item>
				<item>
					<term> AllowDBNull</term>
					<description><see langword="true"/> if the consumer can set the
   column to a null value or if the driver cannot determine
   whether the consumer can set the column to a null value.
   Otherwise, <see langword="false"/>. A column may contain null
   values, even if it cannot be set to a null value.</description>
				</item>
				<item>
					<term> IsReadOnly</term>
					<description><see langword="true"/> if
   the column cannot be modified; otherwise
<see langword="false"/>.</description>
				</item>
				<item>
					<term> IsRowVersion</term>
					<description>Set if the column contains a persistent row identifier
      that cannot be written to, and has no meaningful value except to identity
      the row.</description>
				</item>
				<item>
					<term> IsUnique</term>
					<description><see langword="true"/>: No two rows in the base
   table-the table returned in BaseTableName-can have the same value in this
   column. IsUnique is guaranteed to be <see langword="true"/> if the column
   constitutes a key by itself or if there is a constraint of type UNIQUE
   that applies only to this column. <see langword="false"/>: The column can
   contain duplicate values in the base table. The default for this column is
<see langword="false"/>.</description>
				</item>
				<item>
					<term> IsKey</term>
					<description><see langword="true"/>: The column is one of a set of
   columns in the rowset that, taken together, uniquely identify the row. The
   set of columns with IsKey set to <see langword="true"/> must uniquely
   identify a row in the rowset. There is no requirement that this set of
   columns is a minimal set of columns. This set of columns may be generated
   from a base table primary key, a unique constraint or a unique index.
<see langword="false"/> : The column is not required to uniquely identify the row.</description>
				</item>
				<item>
					<term> IsAutoIncrement</term>
					<description><see langword="true"/> if the column assigns values to
   new rows in fixed increments; otherwise <see langword="false"/>. The
   default for this column is <see langword="false"/>.</description>
				</item>
				<item>
					<term> BaseSchemaName</term>
					<description>The name of the schema in the data source that contains the column.
      NULL if the base catalog name cannot be determined. The default for this
      column is a null value.</description>
				</item>
				<item>
					<term> BaseCatalogName</term>
					<description>The name of the catalog in the data store that
      contains the column. NULL if the base catalog name cannot be determined.
      The default for this column is a null value.</description>
				</item>
				<item>
					<term> BaseTableName</term>
					<description>The name of the table or view in the data store that
      contains the column. A null value if the base table name cannot be
      determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseColumnName</term>
					<description> The name of the column in the data store. This might
      be different than the column name returned in the ColumnName column if
      an alias was used. A null value if the base column name cannot be
      determined or if the rowset column is derived, but not identical to, a column in
      the data store. The default for this column is a null value.</description>
				</item>
			</list>
			<para>A row will be returned for every column in the results set.</para>
			<para> The .NET Framework Data
   Provider for ODBC assumes that metadata information is available from an
   ODBC driver after one of SQLPrepare, SQLExecute, or SQLExecuteDirect
   functions are called. For "SchemaOnly" command behavior to work correctly,
   SQLPrepare must return the necessary metadata information. Not all ODBC Drivers
   support this function or return metadata information. In such cases, part or all
   of the information in the SchemaTable will be missing. After calling SQLPrepare, The data provider calls the
   ODBC SQLColAttribute function to find the metadata information related to each
   column in the query results (for example, IsLong, IsUnique, AllowDBNull,
   BaseTableName, BaseColumnName). If the underlying driver does not return some of this information, the corresponding values in the SchemaTable will not be set correctly.</para>
			<para> The .NET Framework Data
   Provider for ODBC also calls SQLPrimaryKeys to retrieve the key information for every
   table. If the underlying ODBC driver does not support this function, the
   data provider calls SQLStatistics and chooses one of the unique indexes as the primary key for the table. This may not always give the desired results.</para>
			<para><see cref="System.Data.Odbc.OdbcCommandBuilder"/> needs the correct identification
of the primary keys of the table in order to work properly. If the BaseTableName
is not returned for every column in the query results, the .NET Framework Data Provider for
ODBC attempts to parse the SQL statement to find the table names involved in the query.
This works with UPDATE, INSERT, DELETE and simple SELECT statements, but not
with stored procedures or SELECT statements based on joins. In cases where some
or all of the schema information is missing from this table, the
<see cref="System.Data.Odbc.OdbcCommandBuilder"/> will not work correctly, since it does not have enough schema information to automatically generate the correct INSERT, UPDATE, or DELETE statements.</para>
			<para><see langword="Note[note]"/> To ensure that metadata
columns return the correct information, you must call <see cref="System.Data.Odbc.OdbcCommand.ExecuteReader"/> with the <paramref name="behavior"/> parameter
set to <SpecialLocalizableItem kind="UIElement">KeyInfo</SpecialLocalizableItem> . Otherwise, some of the columns in the schema table may return default, null, or incorrect data.</para>
			<note type="note">
   The Microsoft Jet ODBC driver always returns unique index and primary key columns as nullable regardless of whether they are nullable or not. The driver also does not return primary key information; it only returns a list of unique indexes and their columns, including primary key columns, without differentiating among them.
</note>
		</remarks>
	</doc></docs>
