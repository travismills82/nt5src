<docs>
	<doc for="OdbcTransaction.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcTransaction.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.Odbc.OdbcTransaction"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.Odbc.OdbcTransaction"/> and optionally releases the managed
 resources.</para>
		</summary>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
 set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Data.Odbc.OdbcTransaction"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
 overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
 objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Data.Odbc.OdbcTransaction"/> and then disposes of it.
 </para>
			<codelink SampleID="Classic WebData OdbcTransaction.Dispose" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcTransaction.IDbTransaction.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcTransaction.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcTransaction.Connection">
		<summary>
			<para>Specifies the <see cref="System.Data.Odbc.OdbcConnection"/> object associated with the transaction. </para>
		</summary>
		<value>
			<para>The <see cref="System.Data.Odbc.OdbcConnection"/> object associated with the transaction.</para>
		</value>
		<remarks>
			<para> A single application may have multiple data source connections, each with zero
      or more transactions. This property enables you to
      determine the connection object associated with a particular transaction.</para>
		</remarks>
	</doc><doc for="OdbcTransaction">
		<summary>
			<para> Represents an SQL transaction to be made at a data source. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The
      application creates an <see cref="System.Data.Odbc.OdbcTransaction"/> object by calling <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> on
      the <see cref="System.Data.Odbc.OdbcConnection"/> object. All subsequent operations associated with the
      transaction (for example, committing or aborting the transaction), are performed
      on the <see cref="System.Data.Odbc.OdbcTransaction"/> object.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and an <see cref="System.Data.Odbc.OdbcTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>, <see cref="System.Data.Odbc.OdbcTransaction.Commit"/>, and <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OdbcConnection.BeginTransaction" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcDataAdapter"/>
		<seealso cref="System.Data.Odbc.OdbcConnection"/>
	</doc><doc for="OdbcTransaction.IsolationLevel">
		<summary>
			<para>Specifies the <see cref="System.Data.IsolationLevel"/>
for this transaction.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.IsolationLevel"/> for this transaction. The default depends on the 
   underlying ODBC driver.</para>
		</value>
		<remarks>
			<para>Parallel transactions are not supported. Therefore,
      the <see cref="System.Data.IsolationLevel"/> applies to the entire transaction.</para>
		</remarks>
	</doc>
	<doc for="OdbcTransaction.Commit">
		<summary>
			<para> Commits the database transaction.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and an <see cref="System.Data.Odbc.OdbcTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> , <see cref="System.Data.Odbc.OdbcTransaction.Commit"/>, and <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OdbcConnection.BeginTransaction1" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>
		<seealso cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
	</doc>
	<doc for="OdbcTransaction.Rollback">
		<summary>
			<para> Rolls back a transaction from a pending state.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para> The transaction can be rolled back only from a pending state (after <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> has been called, but before
<see cref="System.Data.Odbc.OdbcTransaction.Commit"/> is called).
   </para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and an <see cref="System.Data.Odbc.OdbcTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>, <see cref="System.Data.Odbc.OdbcTransaction.Commit"/>, and <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OdbcConnection.BeginTransaction1" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcTransaction.Commit"/>
		<seealso cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>
	</doc>
</docs>
