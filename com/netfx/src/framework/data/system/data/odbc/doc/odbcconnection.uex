<docs>
	<doc for="OdbcConnection.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcConnection.CreateCommand">
		<summary>
			<para>Creates and returns an <see cref="System.Data.Odbc.OdbcCommand"/> object associated with
   the <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.Odbc.OdbcCommand"/> object. </para>
		</returns>
	</doc><doc for="OdbcConnection.OdbcConnection">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcConnection"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcConnection"/>
class.</para>
		</summary>
		<remarks>
			<para>When a new instance of <see cref="System.Data.Odbc.OdbcConnection"/> is created, the read/write properties are set
 to the following initial values unless they are specifically set using their
 associated keywords in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
 property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/></term>
					<description>empty string
 ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcConnection.Database"/></term>
					<description>empty
 string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by
 using the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
 property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.Odbc.OdbcConnection"/>
.</para>
			<codelink SampleID="Classic WebData OdbcConnection.OdbcConnection" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcConnection.IDbConnection.BeginTransaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcConnection.IDbConnection.BeginTransaction1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcConnection.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcConnection.IDbConnection.CreateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OdbcConnection.StateChange">
		<summary>
			<para>Occurs when the state of the connection changes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcConnection.StateChange"/> event is raised immediately after
   the <see cref="System.Data.Odbc.OdbcConnection.State"/>
   changes from <see langword="Closed"/> to <see langword="Opened"/>, or from
<see langword="Opened"/> to <see langword="Closed"/>. </para>
			<para>If an event handler throws an exception from within the <see cref="System.Data.Odbc.OdbcConnection.StateChange"/>
event, the exception propagates to the caller of the <see cref="System.Data.Odbc.OdbcConnection.Open"/> or <see cref="System.Data.Odbc.OdbcConnection.Close"/> method.</para>
		</remarks>
	</doc><doc for="OdbcConnection.Open">
		<summary>
			<para>Opens a connection to a data source with the property
      settings specified by the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para> The connection is already open.</para></exception>
		<exception cref="System.Data.Odbc.OdbcException">A connection-level error occurred while opening the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcConnection"/> draws an open
   connection from the connection pool if one is available. Otherwise, it establishes a
   new connection to the
   data source.
   </para>
			<note type="note">
   If the <see cref="System.Data.Odbc.OdbcConnection"/> goes out of scope, the
   connection it represents does not close automatically. Therefore, you must
   explicitly close the connection by calling <see cref="System.Data.Odbc.OdbcConnection.Close"/> or <see cref="System.Data.Odbc.OdbcConnection.Dispose"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/>
, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData OdbcConnection.Close" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.Close"/>
	</doc>
	<doc for="OdbcConnection.InfoMessage">
		<summary>
			<para>Occurs when the ODBC driver sends a warning or an informational message.</para>
		</summary>
		<remarks>
			<para>Clients that want to process warnings or informational messages sent by the
      server should create an <see cref="System.Data.Odbc.OdbcInfoMessageEventHandler"/> delegate to listen to this
      event.</para>
		</remarks>
	</doc>
	<doc for="OdbcConnection.OdbcConnection1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.Odbc.OdbcConnection"/>
class with the specified connection string.</para>
		</summary>
		<param name="connectionString">The connection used to open the data source.</param>
		<remarks>
			<para>When a new instance of <see cref="System.Data.Odbc.OdbcConnection"/> is created, the read/write properties are set
   to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/></term>
					<description><paramref name="connectionString"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Odbc.OdbcConnection.Database"/></term>
					<description>empty
      string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by
   using the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.Odbc.OdbcConnection"/>
.</para>
			<codelink SampleID="Classic WebData OdbcConnection.OdbcConnection1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcConnection.ChangeDatabase">
		<summary>
			<para>Changes the current database associated with an open <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
		</summary>
		<param name="value">The database name.</param>
		<exception cref="System.ArgumentException">The database name is not valid.</exception>
		<exception cref="System.InvalidOperationException">The connection is not open.</exception>
		<exception cref="System.Data.Odbc.OdbcException">Cannot change the database.</exception>
		<remarks>
			<para> The <paramref name="value"/> 
parameter must contain a valid database name, and cannot contain a null value, an empty string (""), or a string with only blank characters.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and
   changes the current database.
   </para>
			<codelink SampleID="Classic WebData OdbcConnection.Database" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.Database"/>
	</doc>
	<doc for="OdbcConnection.Database">
		<summary>
			<para> Gets the name of the current database or the database to be used after a connection is opened.</para>
		</summary>
		<value>
			<para>The name of the current database. The default value is an empty string ("") until the connection is opened.</para>
		</value>
		<remarks>
			<para>Initially, the <see cref="System.Data.Odbc.OdbcConnection.Database"/> property is set in the
   connection string. The <see cref="System.Data.Odbc.OdbcConnection.Database"/> property can be updated by
   using the <see cref="System.Data.Odbc.OdbcConnection.ChangeDatabase"/>
   method. If you change the current database
   using an SQL statement or the <see cref="System.Data.Odbc.OdbcConnection.ChangeDatabase"/> method, an informational message is sent and then the property is updated.</para>
			<para>Retrieving the <see cref="System.Data.Odbc.OdbcConnection.Database"/> property is equivalent
to calling the ODBC function <see langword="SQLGetInfo"/> with the
<paramref name="Attribute"/> parameter set to SQL_ATTR_CURRENT_CATALOG.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and
   changes the current database.
   </para>
			<codelink SampleID="Classic WebData OdbcConnection.Database" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.ChangeDatabase"/>
		<seealso cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
		<seealso cref="System.Data.Odbc.OdbcConnection.ConnectionTimeout"/>
	</doc>
	<doc for="OdbcConnection.DataSource">
		<summary>
			<para> Gets the server name or file name of the data source.</para>
		</summary>
		<value>
			<para> The server name or file name of the data source. The default value
      is an empty string ("") until the connection is opened.</para>
		</value>
		<remarks>
			<para>Retrieving the <see cref="System.Data.Odbc.OdbcConnection.DataSource"/> property is equivalent
   to calling the ODBC function <see langword="SQLGetInfo"/> with the
<paramref name="InfoType"/> parameter set to SQL_SERVER_NAME.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and displays the
   backend data source name.
   </para>
			<codelink SampleID="Classic WebData OdbcConnection.DataSource" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.ConnectionTimeout"/>
		<seealso cref="System.Data.Odbc.OdbcConnection.Database"/>
		<seealso cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
	</doc>
	<doc for="OdbcConnection.ServerVersion">
		<summary>
			<para>Gets a string containing the version of the server to which the client is connected.</para>
		</summary>
		<value>
			<para> The version of the connected server. The default value 
      is an empty string ("") until the connection is opened. </para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed. </exception>
		<remarks>
			<para>If <see cref="System.Data.Odbc.OdbcConnection.ServerVersion"/> is not supported by the underlying ODBC driver, an empty string ("") is returned.</para>
			<para>The <see cref="System.Data.Odbc.OdbcConnection.ServerVersion"/> property takes the form '##.##.####,' where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The driver must render the product version in this form but can also append the product-specific version as a string (for example, "04.01.0000 Rdb 4.1"). This string takes the form 'major.minor.build' where major and minor are exactly two digits and build is exactly four digits.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and displays the <see cref="System.Data.Odbc.OdbcConnection.ServerVersion"/>.
   </para>
			<codelink SampleID="Classic WebData OdbcConnection.ServerVersion" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcConnection.DriverName">
		<summary>
			<para>Gets the name of the ODBC driver specified for the current connection.</para>
		</summary>
		<value>
			<para>The name of the ODBC driver, which typically is the 
      driver dynamic-link library (DLL) name (for example, Sqlsrv32.dll). The default value is an empty string ("") until the connection is opened.</para>
		</value>
		<remarks>
			<para>Retrieving the <see cref="System.Data.Odbc.OdbcConnection.Driver"/> property is equivalent
   to calling the ODBC function <see langword="SQLGetInfo"/> with the
<paramref name="InfoType"/> parameter set to SQL_DRIVER_NAME.</para>
		</remarks>
		<example>
			<para>The following example creates an
   <see cref="System.Data.Odbc.OdbcConnection"/> and displays the name of the specified ODBC driver.</para>
			<codelink SampleID="Classic WebData OdbcConnection.Driver" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcConnection.State">
		<summary>
			<para>Gets the current state of the connection.</para>
		</summary>
		<value>
			<para>A bitwise combination of the
   <see cref="System.Data.ConnectionState"/> values. The default is <see langword="Closed"/>.</para>
		</value>
		<remarks>
			<para>The allowed state changes are:</para>
			<list type="bullet"><item>
					<term>
         
         From <see langword="Closed"/> to
      <see langword="Open"/>, using the <see cref="System.Data.Odbc.OdbcConnection.Open"/> method.</term>
				</item>
				<item>
					<term>
         
         From <see langword="Open"/> to
      <see langword="Closed"/>, using either the <see cref="System.Data.Odbc.OdbcConnection.Close"/> or <see cref="System.Data.Odbc.OdbcConnection.Dispose"/> method.</term>
				</item>
			</list>
			<note type="note">
   Calling the <see cref="System.Data.Odbc.OdbcConnection.State"/> property on an open connection increases application overhead because each such call results in a SQL_ATTR_CONNECTION_DEAD call to the underlying ODBC driver to determine if the connection is still valid.
</note>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class, <see cref="System.Data.Odbc.OdbcConnection"/>, sets its <see cref="System.Data.IDbConnection.ConnectionString"/>, and displays its <see cref="System.Data.Odbc.OdbcConnection.State"/>.</para>
			<codelink SampleID="Classic WebData OdbcConnection.State" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcConnection.ReleaseObjectPool">
		<summary>
			<para>Indicates that the ODBC Driver Manager environment handle can be released when
      the last underlying connection is released.</para>
		</summary>
		<remarks>
			<para><see langword="ReleaseObjectPool"/>
can be called to release the ODBC environment
handle. You might want to call this method if, for example, the connection object will not
be used again. When all connections in the environment are closed, the environment can
be disposed. Note that calling the method alone does not actually release
the active
connections that exist in the environment.</para>
			<para>The following must occur before the environment is finally disposed: </para>
			<list type="number"><item>
					<term>
      Call <see cref="System.Data.Odbc.OdbcConnection.Close"/> to release the <see cref="System.Data.Odbc.OdbcConnection"/> object from
      the environment.</term>
				</item>
				<item>
					<term>
      Allow each connection object to time out.</term>
				</item>
				<item>
					<term>
      Call <see cref="System.Data.Odbc.OdbcConnection.ReleaseObjectPool"/>.</term>
				</item>
				<item>
					<term>
      Invoke garbage collection.</term>
				</item>
			</list>
			<para>Conversely, if you call <see cref="System.Data.Odbc.OdbcConnection.Close"/> on all active connections, and
invoke garbage collection, but do not call <see cref="System.Data.Odbc.OdbcConnection.ReleaseObjectPool"/>, the resources reserved for the environment will remain available. </para>
			<para>After an environment handle is released, a request for a
   new <see cref="System.Data.Odbc.OdbcConnection"/> creates a new environment.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/>, opens it, displays some of its properties,
   closes the connection and releases the object pool to conserve resources.</para>
			<codelink SampleID="Classic WebData OdbcConnection.ReleaseObjectPool" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcConnection">
		<summary>
			<para>Represents an open connection to a data source.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Data.Odbc.OdbcConnection"/> object represents a unique connection to a data source created by
   using a connection string or ODBC data source name (DSN). In the case of
   a client/server database system, it is equivalent to a network connection to
   the server. Depending on the functionality supported by the native ODBC
   driver, some methods or properties of an <see cref="System.Data.Odbc.OdbcConnection"/> object may not be available.</para>
			<para> The <see cref="System.Data.Odbc.OdbcConnection"/> object uses native resources such as ODBC
environment and connection handles. You should always explicitly close any open
<see cref="System.Data.Odbc.OdbcConnection"/> 
objects by calling <see cref="System.Data.Odbc.OdbcConnection.Close"/> or <see cref="System.Data.Odbc.OdbcConnection.Dispose"/> before the
<see cref="System.Data.Odbc.OdbcConnection"/> 
object goes out of scope. Not doing so leaves the freeing of these native
resources to garbage collection, which may not free them immediately. This, in
turn, may eventually cause the underlying driver to run out of resources or
reach a maximum limit, resulting in sporadic failures. For example, you might
encounter <see langword="Maximum Connections"/>-related errors while a number of
connections are waiting to be deleted by the garbage collector. Explicitly
closing the connections by calling <see cref="System.Data.Odbc.OdbcConnection.Close"/> or <see cref="System.Data.Odbc.OdbcConnection.Dispose"/> allows a more efficient use of native resources, enhancing scalability and improving overall application performance.</para>
			<note type="note">
   To deploy high-performance
   applications, you often need to use connection pooling. However, when you use
   the .NET Framework Data Provider for ODBC, you do not need to enable connection pooling
   because the provider manages this automatically. For more information about enabling and disabling connection pooling, see the Microsoft Open Database Connectivity (ODBC) documentation.
</note>
			<para>If one of the Execute methods of the
<see cref="System.Data.Odbc.OdbcCommand"/> class 
   results in a fatal <see cref="System.Data.Odbc.OdbcException"/> (for example, a SQL Server severity level of
   20 or greater), the <see cref="System.Data.Odbc.OdbcConnection"/> may close. However, the user can reopen the connection and continue.</para>
			<para>An application that creates an instance of the
<see cref="System.Data.Odbc.OdbcConnection"/> 
object can require all direct and indirect callers to have adequate permission
to the code by setting declarative or imperative security demands.
<see cref="System.Data.Odbc.OdbcConnection"/> 
creates security demands by using the <see cref="System.Data.Odbc.OdbcPermission"/> object. Users can
verify that their code has adequate permissions by using the
<see cref="System.Data.Odbc.OdbcPermissionAttribute"/>
object. Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security
policy at the machine, user, and enterprise levels. For more information, see
<see topic="cpconsecuringyourapplication"/>.</para>
			<para>For more information about handling warning and informational messages from the
   data source, see <see topic="cpconworkingwithconnectionevents"/>.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcCommand"/> and an
<see cref="System.Data.Odbc.OdbcConnection"/>.
   The <see cref="System.Data.Odbc.OdbcConnection"/> is opened and set as the <see cref="System.Data.Odbc.OdbcCommand.Connection" qualify="true"/> property. The example then calls
<see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/>, and closes the connection. To
   accomplish this, the <see cref="System.Data.Odbc.OdbcCommand.ExecuteNonQuery"/>
   is passed a connection string and a query string that is an SQL INSERT statement.</para>
			<codelink SampleID="Classic WebData OdbcConnection" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcDataAdapter"/>
		<seealso cref="System.Data.Odbc.OdbcCommand"/>
	</doc>
	<doc for="OdbcConnection.BeginTransaction1">
		<summary>
			<para>Begins a transaction at the data source with the specified <see cref="System.Data.IsolationLevel"/>
value.</para>
		</summary>
		<param name="isolevel">The transaction isolation level for this connection. If you do not specify an isolation level, the default isolation level for the driver is used.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">A transaction is currently active. Parallel transactions are not supported.</exception>
		<remarks>
			<para> To commit or roll back the transaction, you must
      explicitly use the <see cref="System.Data.Odbc.OdbcTransaction.Commit"/> or <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
      methods.</para>
			<para>To ensure that the .NET Framework Data Provider for ODBC transaction management model performs correctly, avoid using other transaction management models, such as those provided by the data source.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and an <see cref="System.Data.Odbc.OdbcTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>, <see cref="System.Data.Odbc.OdbcTransaction.Commit"/>, and <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OdbcConnection.BeginTransaction" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcTransaction.Commit"/>
		<seealso cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
	</doc>
	<doc for="OdbcConnection.ConnectionTimeout">
		<summary>
			<para>Gets or sets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</para>
		</summary>
		<value>
			<para>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</para>
		</value>
		<exception cref="System.ArgumentException">The value set is less than 0.</exception>
		<remarks>
			<para>Unlike the .NET Framework data providers for SQL Server and OLE DB, the .NET Framework Data Provider for ODBC does not support setting this property as a connection string value,
      because it is not a valid ODBC connection keyword. To specify a connection timeout, set the <see cref="System.Data.Odbc.OdbcConnection.ConnectionTimeout"/> property before calling <see cref="System.Data.Odbc.OdbcConnection.Open"/>.
      This is equivalent to setting the ODBC <see langword="SQLSetConnectAttr"/>
      SQL_ATTR_LOGIN_TIMOUT attribute.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and sets the <see cref="System.Data.Odbc.OdbcConnection.ConnectionTimeout"/> property.</para>
			<codelink SampleID="Classic WebData OdbcConnection.ConnectionTimeout" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
		<seealso cref="System.Data.Odbc.OdbcConnection.Database"/>
	</doc>
	<doc for="OdbcConnection.Close">
		<summary>
			<para>Closes the connection to the data source. This is the preferred method of closing any open connection.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcConnection.Close"/>
method rolls back any pending transactions. It then releases the connection to
the connection pool, or closes the connection if connection pooling is disabled.
If <see cref="System.Data.Odbc.OdbcConnection.Close"/> is called while handling a
<see cref="System.Data.Odbc.OdbcConnection.StateChange"/>
event, no additional <see cref="System.Data.Odbc.OdbcConnection.StateChange"/> events are fired.</para>
			<para>An application can call <see cref="System.Data.Odbc.OdbcConnection.Close"/> more than one time without generating an exception.</para>
			<note type="note">
   When you use the .NET Framework Data Provider for ODBC, you do not need to enable connection pooling because the ODBC Driver Manager manages this automatically. For more information about enabling and disabling connection pooling, see the Microsoft Open Database Connectivity (ODBC) documentation.
</note>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/>, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData OdbcConnection.Close" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.Odbc.OdbcConnection.Open"/>
	</doc>
	<doc for="OdbcConnection.EnlistDistributedTransaction">
		<summary>
			<para>Enlists in the specified transaction as a distributed transaction.</para>
		</summary>
		<param name="transaction">A reference to an existing transaction in which to enlist.</param>
		<remarks>
			<para>You can enlist in an existing distributed transaction
      using the <see cref="System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction"/>
      method if auto-enlistment is disabled. Enlisting in an existing distributed
      transaction ensures that, if the transaction is committed or rolled back,
      modifications made by the code at the data source are also committed or rolled
      back. For more information about distributed transactions, see
   <see topic="cpconenlistingindistributedtransaction"/>.</para>
			<note type="caution">
				<see cref="System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction"/> returns an exception if the 
   <see cref="System.Data.Odbc.OdbcConnection"/> has 
      already started a transaction using
   <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>. However, if 
      the transaction is a local transaction started at the data source (for
      example, by explicity executing the BEGIN TRANSACTION statement using an
   <see cref="System.Data.Odbc.OdbcCommand"/> object), 
   <see cref="System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction"/> rolls back the local 
      transaction and enlists in the existing distributed transaction as requested.
      You will not receive notice that the local transaction was rolled back, and are
      responsible for managing any local transactions not started using
   <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>. 
   </note>
		</remarks>
	</doc>
	<doc for="OdbcConnection.BeginTransaction">
		<overload>
			<para>Begins a transaction at the data source.</para>
		</overload>
		<summary>
			<para>Begins a transaction at the data source.</para>
		</summary>
		<returns>
			<para>An object representing the new transaction. </para>
		</returns>
		<exception cref="System.InvalidOperationException">A transaction is currently active. Parallel transactions are not supported.</exception>
		<remarks>
			<para>To commit or roll back the transaction, you must
      explicitly use the <see cref="System.Data.Odbc.OdbcTransaction.Commit"/> or <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/> methods. </para>
			<para>To ensure that the .NET Framework Data Provider for ODBC transaction management model performs correctly, avoid using other transaction management models, such as those provided by the data source.</para>
			<note type="note">
      If you do not specify an isolation level, the default isolation level for the driver is used. To specify an isolation level
      with the <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> method, use the overload that
      takes the <paramref name="isolevel"/> parameter.
      
   </note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and an <see cref="System.Data.Odbc.OdbcTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/>, <see cref="System.Data.Odbc.OdbcTransaction.Commit"/>, and <see cref="System.Data.Odbc.OdbcTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OdbcConnection.BeginTransaction1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OdbcConnection.ConnectionString">
		<summary>
			<para>Gets or sets the string used to open a data source.</para>
		</summary>
		<value>
			<para>The ODBC driver connection string that includes settings, such as the data source name, needed to establish the initial
      connection. The default value is an empty string (""). The maximum
      length is 1024 characters.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
property is designed to match ODBC connection string format as closely as
possible. The <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/> can be set only when the
connection is closed, and once set it is passed, unchanged, to the Driver
Manager and the underlying driver. Therefore, the syntax for the
<see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/> needs
to exactly match what the Driver Manager and underlying driver
support.</para>
			<para>You can use the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/> property to connect to a
variety of data sources, including an ODBC data source name (DSN). The following example illustrates several possible connection strings.</para>
			<code>
"Driver={SQL Server};Server=MyServer;Trusted_Connection=yes;Database=Northwind;"
"Driver={Microsoft ODBC for Oracle};Server=ORACLE8i7;Persist Security Info=False;Trusted_Connection=yes"
"Driver={Microsoft Access Driver (*.mdb)};DBQ=c:\bin\nwind.mdb"
"Driver={Microsoft Excel Driver (*.xls)};DBQ=c:\bin\book1.xls"
"Driver={Microsoft Text Driver (*.txt; *.csv)};DBQ=c:\bin"
"DSN=dsnname"
</code>
			<note type="note">
   The .NET Framework Data Provider for ODBC does not
   support the Persist Security Info keyword that is supported by other .NET Framework data providers. However, the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/> property behaves as though
   Persist Security Info were set to <see langword="false"/>.
   This means
   that it is not possible to retrieve the password from the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/> property if the connection has been opened. When the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/> property
   is read from an <see cref="System.Data.Odbc.OdbcConnection"/> object that has been opened, the connection string is returned minus the
   password. It is not possible to alter this behavior; therefore, if the application requires
   the password, store it separately before calling <see cref="System.Data.Odbc.OdbcConnection.Open"/>.
</note>
			<para>Many of the settings specified in the string have
   corresponding read-only properties (for example, SERVER=MyServer, which corresponds to the <see cref="System.Data.Odbc.OdbcConnection.DataSource"/> property). All
   of these properties are updated after the connection is opened, except when an
   error is detected. In this case, none of the properties are updated.
<see cref="System.Data.Odbc.OdbcConnection"/> properties (such as <see cref="System.Data.Odbc.OdbcConnection.Database"/>) return only default settings or 
   those settings specified in the
<see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>.</para>
			<para> In the Microsoft .NET Framework version 1.0, validation of the connection string does not occur until an application calls the <see cref="System.Data.Odbc.OdbcConnection.Open"/> method. It is
the responsibility of the underlying ODBC driver to validate the connection string. If
the connection string
contains invalid or unsupported properties, the driver may raise an <see cref="System.Data.Odbc.OdbcException"/> at runtime.</para>
			<para>However, in the .NET Framework version 1.1, some basic validation of the connection string
   occurs as soon as you set the <see cref="System.Data.Odbc.OdbcConnection.ConnectionString"/>
   property. At that time, the data provider verifies that the connection string
   meets the "keyword=value;..." format, but it does not verify whether keywords or
   values are valid. The remaining verification is performed by the underlying ODBC
   driver when the application calls the <see cref="System.Data.Odbc.OdbcConnection.Open"/>
   method.</para>
			<para>An ODBC connection string has the following syntax:</para>
			<code>
connection-string ::= empty-string[;] | attribute[;] | attribute; connection-string
empty-string ::=
attribute ::= attribute-keyword=attribute-value | DRIVER=[{]attribute-value[}]
attribute-keyword ::= DSN | UID | PWD
 | driver-defined-attribute-keyword
attribute-value ::= character-string
driver-defined-attribute-keyword ::= identifier
</code>
			<para> where <paramref name="character-string"/> has zero or more
characters; <paramref name="identifier"/> has one or more characters;
<paramref name="attribute-keyword"/> is not case-sensitive; <paramref name="attribute-value"/> may be case-sensitive; and the value 
of the DSN keyword does not consist solely of blanks.</para>
			<para> Because of connection string and initialization file
   grammar, keywords and attribute values that contain the characters
<see langword="[]{}(),;?*=!@"/> not enclosed with braces should be avoided. The value of the DSN keyword cannot consist only of blanks and should not contain leading blanks. Because of the grammar of the system information, keywords and data source names cannot contain the backslash (\) character.</para>
			<para>Applications do not have to add braces around the
   attribute value after the DRIVER keyword unless the attribute contains a semicolon (;), in which case the braces are required. If the attribute value that the driver receives includes braces, the driver should not remove them but they should be part of the returned connection string.</para>
			<para>A DSN or connection string value enclosed with braces
   ({}) containing any of the characters <see langword="[]{}(),;?*=!@"/> is passed intact to the driver. However, when using these characters in a keyword, the Driver Manager returns an error when working with file DSNs, but passes the connection string to the driver for regular connection strings. Avoid using embedded braces in a keyword value.</para>
			<para>The connection string may include any number of
   driver-defined keywords. Because the DRIVER keyword does not use information from the system, the driver must define enough keywords so that a driver can connect to a data source using only the information in the connection string. The driver defines which keywords are required to connect to the data source.</para>
			<para>If any keywords are repeated in the connection string,
   the driver uses the value associated with the first occurrence of the keyword.
   If the DSN and DRIVER keywords are included in the same connection string, the Driver Manager and the driver use whichever keyword appears first.</para>
			<para>To include an equal sign (=) in a keyword or value, it must be preceded
   by another equal sign. For example, in the hypothetical connection string </para>
			<code>
"key==word=value"
</code>
			<para>the keyword is "key=word" and the value is "value".</para>
			<note type="note">
   If an ODBC driver supports connection strings longer than 1024 characters, you can use a data source name (DSN) to exceed the maximum length limitation.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and sets some of its properties in the connection string.</para>
			<codelink SampleID="Classic WebData OdbcConnection.DataSource" SnippetID="1"/>
		</example>
	</doc><doc for="OdbcConnection.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged and, optionally, the managed
      resources used by the <see cref="System.Data.Odbc.OdbcConnection"/>.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, the method releases all resources held by any managed 
objects that this <see cref="System.Data.Odbc.OdbcCommand"/> references. It does this by invoking the
<see langword="Dispose()"/> method of each referenced object.</para>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.Odbc.OdbcConnection"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OdbcConnection.Dispose" SnippetID="1"/>
		</example>
	</doc></docs>
