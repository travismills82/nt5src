//------------------------------------------------------------------------------
/// <copyright file="IVsProjectCfg.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsProject.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [
    ComImport(),Guid("2DBDF061-439B-4822-9727-CA3ED918B658"),
    InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown),
    CLSCompliant(false)
    ]
    interface IVsProjectCfg
    {
        // from IVsCfg
        
        //if you support platforms, then in addition to supporting IVsConfigProvider2
        //you should also return your config name like "Debug|Win32"
        void get_DisplayName(out string pbstrDisplayName);
        void get_IsDebugOnly(out bool pfIsDebugOnly);
        void get_IsReleaseOnly(out bool pfIsReleaseOnly);
        
        // from IVsProjectCfg
    
        // obsolete method
        void EnumOutputs([MarshalAs(UnmanagedType.Interface)] out object ppIVsEnumOutputs);
        // obsolete method
        void OpenOutput(string szOutputCanonicalName, [MarshalAs(UnmanagedType.Interface)] out object ppIVsOutput);
    
        // obsolete method
        void get_ProjectCfgProvider([MarshalAs(UnmanagedType.Interface)] out object ppIVsProjectCfgProvider);
    
        // This is a property rather than an alternate interface on the project configuration
        // object to enable project configurations to make the buildable project configuration
        // a separate object.
        void get_BuildableProjectCfg([MarshalAs(UnmanagedType.Interface)] out object ppIVsBuildableProjectCfg);
    
        //
        void get_CanonicalName(out string pbstrCanonicalName);
    
        // obsolete method
        void get_Platform(out Guid pguidPlatform);
        // obsolete method
        void get_IsPackaged(out bool pfIsPackaged);
    
        // Obsolete method
        void get_IsSpecifyingOutputSupported(out bool pfIsSpecifyingOutputSupported);
    
        // Obsolete method
        void get_TargetCodePage(out uint puiTargetCodePage);
    
        // Obsolete method
        void get_UpdateSequenceNumber(out long puliUSN);
    
        // The RootURL property is the root URL for the project outputs.  Essentially,
        // if an output's project-relative path is required, it's computed by removing
        // the RootURL from its DeploySourceURL.  As is the case for DeploySourceURL
        // values, the convention is that paths that are in the local filesystem
        // begin with the eight characters: "file:///".
        void get_RootURL(out string pbstrRootURL);
    }
}

