//------------------------------------------------------------------------------
/// <copyright file="IVsTextLines.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsTextLines.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [ComImport(),Guid("ECF3E19D-149C-43AA-80C2-D0A46946DAA3"), CLSCompliantAttribute(false), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
    internal interface IVsTextLines {

        void LockBuffer();

        void UnlockBuffer();

        void InitializeContent(
            [MarshalAs(UnmanagedType.LPWStr)] 
            string pszText,
            int iLength);

        void GetStateFlags(
            out int pdwReadOnlyFlags);

        void SetStateFlags(int dwReadOnlyFlags);

        void GetPositionOfLine(
            int iLine,
            out int piPosition);

        void GetPositionOfLineIndex(
            int iLine,
            int iIndex,
            out int piPosition);

        void GetLineIndexOfPosition(
            int iPosition,
            out int piLine,
            out int piColumn);

        void GetLengthOfLine(
            int iLine,
            out int piLength);

        void GetLineCount(
            out int piLineCount);

        void GetSize(out int piLength);

        void GetLanguageServiceID();

        void SetLanguageServiceID(ref Guid guidLangService);

        void GetUndoManager(out IOleUndoManager ppUndoManager);

        void AdviseTextBufferEvents(
            [MarshalAs(UnmanagedType.Interface)] 
            object psink,
            out int pdwCookie);

        void UnadviseTextBufferEvents(int dwCookie);

        void AdviseCompoundActionEvents(
            [MarshalAs(UnmanagedType.Interface)] 
            object psink,
            out int pdwCookie);

        void UnadviseCompoundActionEvents(int dwCookie);

        void Reload(int fUndoable);

        void Reserved2();

        void Reserved3();

        void Reserved4();

        void Reserved5();

        void Reserved6();

        void Reserved7();

        void Reserved8();

        void Reserved9();

        void Reserved10();

        void GetMarkerData(
            int iTopLine,
            int iBottomLine,
            out IntPtr pMarkerData);

        void ReleaseMarkerData(IntPtr pMarkerData);

        void GetLineData(
            int iLine,
            out IntPtr pLineData,
            out IntPtr pMarkerData);

        void ReleaseLineData(IntPtr pLineData);

        void GetLineText(
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pszBuf);

        void CopyLineText(
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            [MarshalAs(UnmanagedType.BStr)] 
            string pszBuf,
            out int pcchBuf);

        void ReplaceLines(
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            string pszText,
            int iNewLen,
            out _TextSpan pChangedSpan);

        void CanReplaceLines(
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            int iNewLen);

        void CreateLineMarker(
            int iMarkerType,
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            [MarshalAs(UnmanagedType.Interface)] 
            object pClient,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppMarker);

        void EnumMarkers(
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            int iMarkerType,
            int dwFlags,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppEnum);

        void FindMarkerByLineIndex(
            int iMarkerType,
            int iStartingLine,
            int iStartingIndex,
            int dwFlags,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppMarker);

        void AdviseTextLinesEvents(
            [MarshalAs(UnmanagedType.Interface)] 
            object psink,
            out int pdwCookie);

        void UnadviseTextLinesEvents(int dwCookie);

        void GetPairExtents(
            _TextSpan pSpanIn,
            out _TextSpan pSpanOut);

        void ReloadLines(
            int iStartLine,
            int iStartIndex,
            int iEndLine,
            int iEndIndex,
            string pszText,
            int iNewLen,
            out _TextSpan pChangedSpan);

        void IVsTextLinesReserved1(
            int iLine,
            IntPtr pLineData,
            int fAttributes);

        void GetLineDataEx(
            int dwFlags,
            int iLine,
            int iStartIndex,
            int iEndIndex,
            IntPtr pLineData,
            IntPtr pMarkerData);

        void ReleaseLineDataEx(IntPtr pLineData);

        void CreateEditPoint(
            int iLine,
            int iIndex,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppEditPoint);

    }
}
