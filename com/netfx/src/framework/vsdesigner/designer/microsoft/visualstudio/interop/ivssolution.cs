//------------------------------------------------------------------------------
/// <copyright file="IVsSolution.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsSolution.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [ComImport(),Guid("7F7CD0DB-91EF-49DC-9FA9-02D128515DD4"), CLSCompliantAttribute(false), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
    internal interface IVsSolution {

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetProjectEnum(
            int grfEnumFlags,
            ref Guid rguidEnumOnlyThisType);

        void CreateProject(
            ref Guid rguidProjectType, 
            [MarshalAs(UnmanagedType.LPWStr)]
            string lpszMoniker,
            [MarshalAs(UnmanagedType.LPWStr)]
            string lpszLocation, 
            [MarshalAs(UnmanagedType.LPWStr)]
            string lpszName, 
            int grfCreateFlags,
            ref Guid iidProject,
            out IVsProject ppProject);

        void GenerateUniqueProjectName(
            [MarshalAs(UnmanagedType.LPWStr)] 
            string lpszRoot,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrProjectName);

        void GetProjectOfGuid(
            ref Guid rguidProjectID,
            out IVsHierarchy ppHierarchy);

        void GetGuidOfProject(
            IVsHierarchy pHierarchy,
            ref Guid pguidProjectID);

        void GetSolutionInfo(
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrSolutionDirectory,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrSolutionFile,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrUserOptsFile);

        int AdviseSolutionEvents(IVsSolutionEvents pSink);

        void UnadviseSolutionEvents(int dwCookie);

        void SaveSolutionElement(
            int grfSaveOpts,
            IVsHierarchy pHier,
            int docCookie);

        void CloseSolutionElement(
            int grfCloseOpts,
            IVsHierarchy pHier,
            int docCookie);

        void GetProjectOfProjref(
            [MarshalAs(UnmanagedType.BStr)] 
            string pszProjref,
            out IVsHierarchy ppHierarchy,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrUpdatedProjref,
            out int puprUpdateReason);

        void GetProjrefOfProject(
            IVsHierarchy pHierarchy,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrProjref);

        void GetProjectInfoOfProjref(
            [MarshalAs(UnmanagedType.BStr)] 
            string pszProjref,
            int propid,
            ref Object pobj);

        void AddVirtualProject(
            IVsHierarchy pHierarchy,
            int grfAddVPFlags);

        void GetItemOfProjref(
            [MarshalAs(UnmanagedType.BStr)] 
            string pszProjref,
            out IVsHierarchy ppHierarchy,
            out int pitemid,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrUpdatedProjref,
            out int puprUpdateReason);

        void GetProjrefOfItem(
            IVsHierarchy pHierarchy,
            int itemid,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrProjref);

        void GetItemInfoOfProjref(
            [MarshalAs(UnmanagedType.BStr)] 
            string pszProjref,
            int propid,
            ref Object pobj);

        void GetProjectOfUniqueName(
            [MarshalAs(UnmanagedType.BStr)] 
            string pszUniqueName,
            out IVsHierarchy ppHierarchy);

        void GetUniqueNameOfProject(
            IVsHierarchy pHierarchy,
            [MarshalAs(UnmanagedType.BStr)] 
            out string pbstrUniqueName);

        void GetProperty(
            int propid,
            ref Object pobj);

        void SetProperty(
            int _propid,
            [MarshalAs(UnmanagedType.Struct)] 
            Object _obj);

        void OpenSolutionFile(
            int grfOpenOpts,
            [MarshalAs(UnmanagedType.BStr)] 
            string pszFileName);

        void QueryEditSolutionFile(out int pdwEditResult);
    }
}
