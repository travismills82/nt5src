//------------------------------------------------------------------------------
/// <copyright file="IVsMenuEditor.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsMenuEditor.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [
    ComImport, 
    ComVisible(true), 
    Guid("6FBCB271-B391-4F80-B560-45E650DEF0A7"), 
    InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown),
    CLSCompliant(false)
    ]
    internal interface IVsMenuEditor {

        // pIMIParent and pIMIInsertAfter can be NULL for first item in top level
        // menu.  Otherwise, only pIMIParent or pIMIInsertAfter can be valid
        [PreserveSig]
            int AddMenuItem(
            IVsMenuItem pIMI,
            IVsMenuItem pIMIParent,
            IVsMenuItem pIMIInsertAfter);

        // Must be called by IMenuEditorSite if any property known by IVsMenuEditor
        // changes on any menu item
        [PreserveSig]
            int OnChange(
            IVsMenuItem pIMI,
            int PropId);

        // Called whenever the selection changes. If pIMI is NULL, no menu item
        // is selected.  If Non NULL, it points to the item to be selected.
        // Only one item can be selected at a time from outside MenuDesinger.
        // This method does NOT set focus to the item; see the SetFocus method
        // below for that behavior.
        [PreserveSig]
            int SelectionChange(IntPtr pIMI);

        // Called to obtain the bounding rect for or a specific menu item
        // (pmi != NULL) or the bounding rect for all currently displayed
        // menu windows (pmi == NULL).
        //
        // fForScrolling = TRUE if getting an item rect for the purposes of
        // scrolling it into view, in this case the Designer includes the
        // items Popup rect and next item rect since these items may not yet
        // be know by the Site, and thus no way to obtain their rects for
        // making them visible.
        [PreserveSig]
            int GetItemRect(
            IVsMenuItem pIMI,
            [Out] 
            tagRECT prc,
            int fForScrolling);

        // Can be used by the site to change the size of the host when the user
        // wishes to remove the menu.  This allows the Site an easy way to
        // determine how much to decrease the size of the host by.
        [PreserveSig]
            int GetHeight(out int piHeight);

        // Should be the first thing called in the Destination windows WNDPROC
        // to allow the Menu designer to process a few selected messages required
        // to correctly position, paint, and activate the menus, since the menus
        // occupy NonClient space:
        //
        //	WM_NCHITTEST
        //	WM_NCCALCSIZE
        //	WM_NCPAINT
        //	WM_MOVE
        //
        // If Filter() returns S_OK, Destination window should return *plResult
        [PreserveSig]
            int Filter(
            int hwnd,
            int uMsg,
            int wParam,
            int lParam,
            out int plResult);

        [PreserveSig]
            int IsActive(out bool plResult); 

        // Returns the current UI state of the Menu Editor, giving the site a
        // mechanism to know if the ME has any UI operations in progress.
        [PreserveSig]
            int GetUIState(out int pState);

        [PreserveSig]
            int DeleteMenuItem(IVsMenuItem pIMI);

        // Same as SelectionChange, except this method also sets focus to the
        // selected item.
        [PreserveSig]
            int SelectionChangeFocus(IVsMenuItem pIMI);
    }
}
