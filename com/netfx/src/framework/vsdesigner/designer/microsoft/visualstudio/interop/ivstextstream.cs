//------------------------------------------------------------------------------
/// <copyright file="IVsTextStream.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsTextStream.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [ComImport(),Guid("D3AF020B-A862-4D22-B373-20F1B30B7D9E"), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown), CLSCompliant(false)]
    internal interface IVsTextStream {

        void LockBuffer();

        void UnlockBuffer();

        void InitializeContent(
            [MarshalAs(UnmanagedType.LPWStr)] 
            string pszText,
            int iLength);

        void GetStateFlags(out int pdwReadOnlyFlags);

        void SetStateFlags(int dwReadOnlyFlags);

        void GetPositionOfLine(
            int iLine,
            out int piPosition);

        void GetPositionOfLineIndex(
            int iLine,
            int iIndex,
            out int piPosition);

        void GetLineIndexOfPosition(
            int iPosition,
            out int piLine,
            out int piColumn);

        void GetLengthOfLine(
            int iLine,
            out int piLength);

        void GetLineCount(
            out int piLineCount);

        void GetSize(out int piLength);


        void GetLanguageServiceID(ref Guid pguidLangService);

        void SetLanguageServiceID(ref Guid guidLangService);

        IOleUndoManager GetUndoManager();

        void AdviseTextBufferEvents(
            [MarshalAs(UnmanagedType.Interface)] 
            object psink,
            out int pdwCookie);

        void UnadviseTextBufferEvents(
            int dwCookie);

        void AdviseCompoundActionEvents(
            [MarshalAs(UnmanagedType.Interface)] 
            object psink,
            out int pdwCookie);

        void UnadviseCompoundActionEvents(
            int dwCookie);

        void Reload(int fUndoable);

        void Reserved2();

        void Reserved3();

        void Reserved4();

        void Reserved5();

        void Reserved6();

        void Reserved7();

        void Reserved8();

        void Reserved9();

        void Reserved10();

        void GetStream(
            int iPos,
            int iLength,
            IntPtr pszStream);

        void ReplaceStream(
            int iPos,
            int iOldLen,
            [MarshalAs(UnmanagedType.LPWStr)] 
            string text,
            int iNewLen);

        void CanReplaceStream(
            int iPos,
            int iOldLen,
            int iNewLen);

        void CreateStreamMarker(
            int iMarkerType,
            int iPos,
            int iLength,
            [MarshalAs(UnmanagedType.Interface)] 
            object pClient,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppMarker);

        void EnumMarkers(
            int iPos,
            int iLen,
            int iMarkerType,
            int dwFlags,
            [MarshalAs(UnmanagedType.Interface)]
            out object ppEnum);

        void FindMarkerByPosition(
            int iMarkerType,
            int iStartingPos,
            int dwFlags,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppMarker);

        void AdviseTextStreamEvents(
            IVsTextStreamEvents psink,
            out int pdwCookie);

        void UnadviseTextStreamEvents(int dwCookie);

        void ReloadStream(
            int iPos,
            int iOldLen,
            [MarshalAs(UnmanagedType.LPWStr)] 
            string pszText,
            int iNewLen);

        void CreateEditPoint(
            int iPosition,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppEditPoint);
    }
}
