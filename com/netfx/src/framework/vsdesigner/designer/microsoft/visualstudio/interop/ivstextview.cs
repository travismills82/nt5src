//------------------------------------------------------------------------------
/// <copyright file="IVsTextView.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsTextView.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [
    ComImport(),Guid("BB23A14B-7C61-469A-9890-A95648CED5E6"),
    InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown),
    CLSCompliant(false)
    ]
    internal interface IVsTextView {

        void Initialize(
            IVsTextLines pBuffer,
            IntPtr hwndParent,
            int InitFlags,
            ref int pInitView);

        void CloseView();

        void GetCaretPos(
            out int piLine,
            out int piColumn);

        void SetCaretPos(
            int iLine,
            int iColumn);

        void GetSelectionSpan(out _TextSpan pSpan);

        void GetSelection(
            out int piAnchorLine,
            out int piAnchorCol,
            out int piEndLine,
            out int piEndCol);

        void SetSelection(
            int iAnchorLine,
            int iAnchorCol,
            int iEndLine,
            int iEndCol);

        [PreserveSig]
            int GetSelectionMode();

        void SetSelectionMode(int iSelMode);

        void ClearSelection(int fMoveToAnchor);

        void CenterLines(
            int iTopLine,
            int iCount);

        void GetSelectedText(
            [MarshalAs(UnmanagedType.BStr)]
            out string bstrText);

        void GetSelectionDataObject(out NativeMethods.IOleDataObject ppIDataObject);

        void GetTextStream(
            int iTopLine,
            int iTopCol,
            int iBottomLine,
            int iBottomCol,
            [MarshalAs(UnmanagedType.BStr)]
            out string pbstrText);

        void GetBuffer(out IVsTextLines ppBuffer);

        void SetBuffer(IVsTextLines pBuffer);

        [PreserveSig]
            IntPtr GetWindowHandle();

        void GetScrollInfo(
            int iBar,
            out int piMinUnit,
            out int piMaxUnit,
            out int piVisibleUnits,
            out int piFirstVisibleUnit);

        void SetScrollPosition(
            int iBar,
            int iFirstVisibleUnit);

        void AddCommandFilter(
            NativeMethods.IOleCommandTarget pNewCmdTarg,
            out NativeMethods.IOleCommandTarget ppNextCmdTarg);

        void RemoveCommandFilter(
            NativeMethods.IOleCommandTarget pCmdTarg);

        void UpdateCompletionStatus(
            [MarshalAs(UnmanagedType.Interface)]
            object pCompSet,
            int dwFlags);


        void UpdateTipWindow(
            [MarshalAs(UnmanagedType.Interface)]
            object pTipWindow,
            int dwFlags);


        void GetWordExtent(
            int iLine,
            int iCol,
            int dwFlags,
            out _TextSpan pSpan);

        void RestrictViewRange(
            int iMinLine,
            int iMaxLine,
            [MarshalAs(UnmanagedType.Interface)]
            object pClient);

        void ReplaceTextOnLine(
            int iLine,
            int iStartCol,
            int iCharsToReplace,
            [MarshalAs(UnmanagedType.LPWStr)]
            string pszNewText,
            int iNewLen);

        void GetLineAndColumn(
            int iPos,
            out int piLine,
            out int piIndex);

        void GetNearestPosition(
            int iLine,
            int iCol,
            out int piPos,
            out int piVirtualSpaces);

        void UpdateViewFrameCaption();

        void CenterColumns(
            int iLine,
            int iLeftCol,
            int iColCount);

        void EnsureSpanVisible(_TextSpan span);

        void PositionCaretForEditing(
            int iLine,
            int cIndentLevels);

        // Client pixel coordinates of the specified line and column

        tagPOINT GetPointOfLineColumn(int iLine, int iCol);

        // Pixel height of a line

        int GetLineHeight();

        void HighlightMatchingBrace(int dwFlags, int cSpans, [MarshalAs(UnmanagedType.LPArray)] _TextSpan[] rgBaseSpans); 

        // To send explicit focus to the window.  Reglar send focus messages post a GimmeFocus message.  This directly sends it.

        void SendExplicitFocus();
    }
}
