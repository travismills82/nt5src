//------------------------------------------------------------------------------
/// <copyright file="IVsTextManager.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IVsTextManager.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop {

    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using System;

    [ComImport(),Guid("909F83E3-B3FC-4BBF-8820-64378744B39B"), CLSCompliantAttribute(false), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
    internal interface IVsTextManager {

        void RegisterView(
            [MarshalAs(UnmanagedType.Interface)] 
            object pView,
            IVsTextBuffer pBuffer);

        void UnregisterView(
            [MarshalAs(UnmanagedType.Interface)] 
            object pView);

        void EnumViews(
            IVsTextBuffer pBuffer,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppEnum);

        void CreateSelectionAction(
            IVsTextBuffer pBuffer,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppAction);

        void MapFilenameToLanguageSID(
            [MarshalAs(UnmanagedType.LPWStr)] 
            string pszFileName,
            ref Guid pguidLangSID);

        void RegisterMarkerType(
            [MarshalAs(UnmanagedType.Interface)] 
            object pMarkerType,
            out int piMarkerTypeID);

        void GetMarkerTypeInterface(
            int iMarkerTypeID,
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppMarkerType);

        void GetMarkerTypeCount(
            out int piMarkerTypeCount);

        [PreserveSig]
            int GetActiveView(
            int fMustHaveFocus,
            IVsTextBuffer pBuffer,
            out IVsTextView view);

        void GetUserPreferences(
            IntPtr pViewPrefs,
            IntPtr pFramePrefs,
            IntPtr pLangPrefs,
            IntPtr pColorPrefs);

        void SetUserPreferences(
            IntPtr pViewPrefs,
            IntPtr pFramePrefs,
            IntPtr pLangPrefs,
            IntPtr pColorPrefs);

        void SetFileChangeAdvise(
            [MarshalAs(UnmanagedType.LPWStr)] 
            string pszFileName,
            int fStart);

        void SuspendFileChangeAdvise(
            [MarshalAs(UnmanagedType.LPWStr)] 
            string pszFileName,
            int fSuspend);

        void NavigateToPosition(
            IVsTextBuffer pBuffer,
            ref Guid guidDocViewType,
            int iPos,
            int iLen);

        void NavigateToLineAndColumn(
            IVsTextBuffer pBuffer,
            ref Guid guidDocViewType,
            int iStartRow,
            int iStartIndex,
            int iEndRow,
            int iEndIndex);

        int GetBufferSccStatus(IVsUserData pBufData);

        void RegisterBuffer(IVsTextBuffer pBuffer);

        void UnregisterBuffer(IVsTextBuffer pBuffer);

        void EnumBuffers(
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppEnum);

        void GetPerLanguagePreferences(out IntPtr pLangPrefs);

        void SetPerLanguagePreferences(IntPtr pLangPrefs);

        bool AttemptToCheckOutBufferFromScc(IVsUserData pBufData);

        void GetShortcutManager(
            [MarshalAs(UnmanagedType.Interface)] 
            out object ppShortcutMgr);

        void RegisterIndependentView(
            [MarshalAs(UnmanagedType.Interface)] 
            object pUnk,
            IVsTextBuffer pBuffer);

        void UnregisterIndependentView(
            [MarshalAs(UnmanagedType.Interface)] 
            object pUnk,
            IVsTextBuffer pBuffer);

        void IgnoreNextFileChange(
            IVsTextBuffer pBuffer);

        void AdjustFileChangeIgnoreCount(
            IVsTextBuffer pBuffer,
            int bIgnore);

        int GetBufferSccStatus2(
            [MarshalAs(UnmanagedType.LPWStr)]
            string fileName,
            ref bool pCheckedIn); // returns status flags VsQueryEditResult

        int AttemptToCheckOutBufferFromScc2(
            [MarshalAs(UnmanagedType.LPWStr)]
            string fileName,
            ref bool pCheckeOutSuccess // VSQueryEditResult
            ); 

        [return: MarshalAs(UnmanagedType.Interface)]
            object /*IVsEnumGUID*/ EnumLanguageServices();
    }
}
