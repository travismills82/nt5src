//------------------------------------------------------------------------------
/// <copyright file="IHTMLDocument2.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>                                                                
//------------------------------------------------------------------------------

//---------------------------------------------------------------------------
// IHTMLDocument2.cs
//---------------------------------------------------------------------------
// WARNING: this file autogenerated
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corporation   All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Interop.Trident {

    using System;
    using System.Runtime.InteropServices;

    [ComVisible(true),Guid("332C4425-26CB-11D0-B483-00C04FD90119"), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsDual)]
    internal interface IHTMLDocument2 {

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetScript();


        IHTMLElementCollection GetAll();


        IHTMLElement GetBody();


        IHTMLElement GetActiveElement();


        IHTMLElementCollection GetImages();


        IHTMLElementCollection GetApplets();


        IHTMLElementCollection GetLinks();


        IHTMLElementCollection GetForms();


        IHTMLElementCollection GetAnchors();


        void SetTitle(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetTitle();


        IHTMLElementCollection GetScripts();


        void SetDesignMode(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetDesignMode();

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetSelection();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetReadyState();

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetFrames();


        IHTMLElementCollection GetEmbeds();


        IHTMLElementCollection GetPlugins();


        void SetAlinkColor(

            Object p);


        Object GetAlinkColor();


        void SetBgColor(

            Object p);


        Object GetBgColor();


        void SetFgColor(

            Object p);


        Object GetFgColor();


        void SetLinkColor(

            Object p);


        Object GetLinkColor();


        void SetVlinkColor(

            Object p);


        Object GetVlinkColor();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetReferrer();

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetLocation();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetLastModified();


        void SetUrl(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetUrl();


        void SetDomain(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetDomain();


        void SetCookie(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetCookie();


        void SetExpando(

            bool p);


        bool GetExpando();


        void SetCharset(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetCharset();


        void SetDefaultCharset(
            [In,MarshalAs(UnmanagedType.BStr)]
            string p);

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetDefaultCharset();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetMimeType();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetFileSize();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetFileCreatedDate();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetFileModifiedDate();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetFileUpdatedDate();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetSecurity();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetProtocol();

        [return: MarshalAs(UnmanagedType.BStr)]
            string GetNameProp();


        void DummyWrite(

            int psarray);


        void DummyWriteln(

            int psarray);

        [return: MarshalAs(UnmanagedType.Interface)]
            object Open(
            [In,MarshalAs(UnmanagedType.BStr)]
            string Url,

            Object name,

            Object features,

            Object replace);


        void Close();


        void Clear();


        bool QueryCommandSupported(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);


        bool QueryCommandEnabled(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);


        bool QueryCommandState(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);


        bool QueryCommandIndeterm(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);

        [return: MarshalAs(UnmanagedType.BStr)]
            string QueryCommandText(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);


        Object QueryCommandValue(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);


        bool ExecCommand(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID,

            bool showUI,

            Object value);


        bool ExecCommandShowHelp(
            [In,MarshalAs(UnmanagedType.BStr)]
            string cmdID);


        IHTMLElement CreateElement(
            [In,MarshalAs(UnmanagedType.BStr)]
            string eTag);


        void SetOnhelp(

            Object p);


        Object GetOnhelp();


        void SetOnclick(

            Object p);


        Object GetOnclick();


        void SetOndblclick(

            Object p);


        Object GetOndblclick();


        void SetOnkeyup(

            Object p);


        Object GetOnkeyup();


        void SetOnkeydown(

            Object p);


        Object GetOnkeydown();


        void SetOnkeypress(

            Object p);


        Object GetOnkeypress();


        void SetOnmouseup(

            Object p);


        Object GetOnmouseup();


        void SetOnmousedown(

            Object p);


        Object GetOnmousedown();


        void SetOnmousemove(

            Object p);


        Object GetOnmousemove();


        void SetOnmouseout(

            Object p);


        Object GetOnmouseout();


        void SetOnmouseover(

            Object p);


        Object GetOnmouseover();


        void SetOnreadystatechange(

            Object p);


        Object GetOnreadystatechange();


        void SetOnafterupdate(

            Object p);


        Object GetOnafterupdate();


        void SetOnrowexit(

            Object p);


        Object GetOnrowexit();


        void SetOnrowenter(

            Object p);


        Object GetOnrowenter();


        void SetOndragstart(

            Object p);


        Object GetOndragstart();


        void SetOnselectstart(

            Object p);


        Object GetOnselectstart();


        IHTMLElement ElementFromPoint(

            int x,

            int y);

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetParentWindow();

        [return: MarshalAs(UnmanagedType.Interface)]
            object GetStyleSheets();


        void SetOnbeforeupdate(

            Object p);


        Object GetOnbeforeupdate();


        void SetOnerrorupdate(

            Object p);


        Object GetOnerrorupdate();

        [return: MarshalAs(UnmanagedType.BStr)]
            string toString();


        IHTMLStyleSheet CreateStyleSheet(
            [In,MarshalAs(UnmanagedType.BStr)]
            string bstrHref,

            int lIndex);

    }
}
