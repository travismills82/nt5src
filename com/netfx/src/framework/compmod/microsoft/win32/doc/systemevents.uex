<docs>
	<doc for="SystemEvents.SystemEvents">
		<summary>
     This class is static, there is no need to ever create it.
 </summary>
	</doc>
	<doc for="SystemEvents.DisplaySettingsChanged">
		<summary>
			<para>Occurs when the user changes the display settings.</para>
		</summary>
	</doc>
	<doc for="SystemEvents.EventsThreadShutdown">
		<summary>
			<para>Occurs before the thread that listens for system events is terminated.
           Delegates will be invoked on the events thread.</para>
		</summary>
	</doc>
	<doc for="SystemEvents.InstalledFontsChanged">
		<summary>
			<para>Occurs when the user adds fonts to or removes fonts from the system.</para>
		</summary>
	</doc>
	<doc for="SystemEvents.LowMemory">
		<summary>
			<para>Occurs when the system is running out of available RAM.</para>
		</summary>
	</doc>
	<doc for="SystemEvents.PaletteChanged">
		<summary>
			<para>Occurs when the user switches to an application that uses a different 
       palette.</para>
		</summary>
	</doc>
	<doc for="SystemEvents.PowerModeChanged">
		<summary>
			<para>Occurs when the user suspends or resumes the system.</para>
		</summary>
		<seealso cref="Microsoft.Win32.PowerModeChangedEventArgs"/>
		<seealso cref="Microsoft.Win32.PowerModeChangedEventHandler"/>
		<seealso cref="Microsoft.Win32.PowerModes"/>
	</doc>
	<doc for="SystemEvents.SessionEnded">
		<summary>
			<para>Occurs when the user is logging off or shutting down the system.</para>
		</summary>
		<seealso cref="Microsoft.Win32.SessionEndedEventArgs"/>
		<seealso cref="Microsoft.Win32.SessionEndedEventHandler"/>
		<seealso cref="Microsoft.Win32.SessionEndReasons"/>
	</doc>
	<doc for="SystemEvents.TimeChanged">
		<summary>
			<para>Occurs when the user changes the time on the system clock.</para>
		</summary>
	</doc>
	<doc for="SystemEvents.TimerElapsed">
		<summary>
			<para>Occurs when a windows timer interval has expired.</para>
		</summary>
		<seealso cref="Microsoft.Win32.TimerElapsedEventArgs"/>
		<seealso cref="Microsoft.Win32.TimerElapsedEventHandler"/>
	</doc>
	<doc for="SystemEvents.UserPreferenceChanged">
		<summary>
			<para>Occurs when a user preference has changed.</para>
		</summary>
		<seealso cref="Microsoft.Win32.UserPreferenceChangedEventArgs"/>
		<seealso cref="Microsoft.Win32.UserPreferenceChangedEventHandler"/>
		<seealso cref="Microsoft.Win32.UserPreferenceCategory"/>
	</doc>
	<doc for="SystemEvents.ConsoleHandlerProc">
		<summary>
      Console handler we add in case we are a console application or a service.
      Without this we will not get end session events.
 </summary>
	</doc>
	<doc for="SystemEvents.CreateBroadcastWindow">
		<summary>
      Goes through the work to register and create a window.
 </summary>
	</doc>
	<doc for="SystemEvents.CreateTimer">
		<summary>
			<para>Creates a new window timer asociated with the
       system events window.</para>
		</summary>
		<param name="interval">Specifies the interval between timer notifications. </param>
		<returns>
			<para>The ID number of the new timer.</para>
		</returns>
		<exception cref="System.ArgumentException">The interval is less than or equal to zero.</exception>
		<exception cref="System.Exception">The timer could not be created.</exception>
	</doc>
	<doc for="SystemEvents.EnsureSystemEvents">
		<summary>
        Creates the static resources needed by system events.
        </summary>
	</doc>
	<doc for="SystemEvents.InvokeMarshaledCallbacks">
		<summary>
     Called on the control's owning thread to perform the actual callback.
     This empties this control's callback queue, propagating any excpetions
     back as needed.
 </summary>
	</doc>
	<doc for="SystemEvents.InvokeOnEventsThread">
		<summary>
			<para> Executes the given delegate on the thread that listens for system events.</para>
		</summary>
		<param name="method">An event handler that listens for system events.</param>
		<remarks>
			<para>You can use this method any time that you need to handle a 
       system event that is not exposed otherwise by the <see cref="Microsoft.Win32.SystemEvents"/>
       class.</para>
			<para>When you call this method, a delegate will be invoked by the thread that your 
       application is using to process system events.</para>
		</remarks>
	</doc>
	<doc for="SystemEvents.KillTimer">
		<summary>
			<para>Kills the timer specified by the given id.</para>
		</summary>
		<param name="timerId">The id number for the timer to kill.</param>
		<exception cref="System.Exception">The timer could not be destroyed.</exception>
	</doc>
	<doc for="SystemEvents.OnCreateTimer">
		<summary>
      Callback that handles the create timer
      user message.
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnGenericEvent">
		<summary>
      Handler for any event that fires a standard EventHandler delegate.
 </summary>
		<param name="eventKey">
      The event key to use.
 </param>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnKillTimer">
		<summary>
      Callback that handles the kill timer
      user message.        
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnPowerModeChanged">
		<summary>
      Handler for WM_POWERBROADCAST.
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnSessionEnded">
		<summary>
      Handler for WM_ENDSESSION.
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnSessionEnding">
		<summary>
      Handler for WM_QUERYENDSESSION.
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnUserPreferenceChanged">
		<summary>
      Handler for WM_SETTINGCHANGE and WM_SYSCOLORCHANGE.
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.OnTimerElapsed">
		<summary>
      Handler for WM_TIMER.
 </summary>
		<param name="msg">
      The Win32 message that occurred.
 </param>
		<param name="wParam">
      The Win32 wParam parameter of the message.
 </param>
		<param name="lParam">
      The Win32 lParam parameter of the message.
 </param>
	</doc>
	<doc for="SystemEvents.QueueEvent">
		<summary>
      Queues the given event onto the event queue.
 </summary>
		<param name="evt">
      The event to queue.
 </param>
	</doc>
	<doc for="SystemEvents.WindowProc">
		<summary>
      A standard Win32 window proc for our broadcast window.
 </summary>
	</doc>
	<doc for="SystemEvents.WindowThreadProc">
		<summary>
      This is the method that runs our window thread.  This method
      creates a window and spins up a message loop.  The window
      is made visible with a size of 0, 0, so that it will trap
      global broadcast messages.
 </summary>
	</doc>
	<doc for="SystemEvents.SystemEvent">
		<summary>
      This class is a single entry on our system event
      queue.
 </summary>
	</doc>
	<doc for="SystemEvents.SystemEvent.SystemEvent">
		<summary>
      Creates a new system event.  The arguments array
      is owned by SystemEvent after this call (no copy
      is made).
 </summary>
	</doc>
	<doc for="SystemEvents">
		<summary>
			<para> Provides a
 set of global system events to callers. This
 class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>System events are things such as shutdown notifications and changes to user
 preferences. </para>
			<para>When a system event is raised calls back the corresponding delegate from a
 different thread. Therefore, you should make the call thread-safe. </para>
			<para>If you need to call a system event that is not exposed as a member of this
 class, you can use the <see cref="Microsoft.Win32.SystemEvents.InvokeOnEventsThread"/> method.</para>
			<note type="note">
 Do not perform time-consuming
 processing in a system event notification because it might prevent other
 applications from functioning.
 
 </note>
		</remarks>
	</doc><doc for="SystemEvents.UserPreferenceChanging">
		<summary>
			<para>Occurs when a user preference is changing.</para>
		</summary>
		<seealso cref="Microsoft.Win32.UserPreferenceChangingEventArgs"/>
		<seealso cref="Microsoft.Win32.UserPreferenceChangingEventHandler"/>
		<seealso cref="Microsoft.Win32.UserPreferenceCategory"/>
	</doc>
	<doc for="SystemEvents.SessionEnding">
		<summary>
			<para>Occurs when the user is trying to log off or shutdown the system.</para>
		</summary>
		<remarks>
			<para>This is a cancellable event. Setting the <see cref="Microsoft.Win32.SessionEndingEventArgs.Cancel"/> property to
<see langword="false"/> will request that the session continues to run. It
   provides no guarantee that the session will not end.</para>
			<para>If you are using <see cref="Microsoft.Win32.SystemEvents.SessionEnding"/>in a Windows form to detect a 
system logoff or reboot, there is no deterministic way to decide whether
the <see cref="System.Windows.Forms.Form.Closing"/> event will fire before this event. </para>
			<para>If you want to perform some special tasks before <see cref="System.Windows.Forms.Form.Closing"/> is fired, you need to 
ensure that <see cref="Microsoft.Win32.SystemEvents.SessionEnding"/>fires before
<see cref="System.Windows.Forms.Form.Closing"/>. To do this, you need to trap 
the <c>WM_QUERYENDSESSION</c>
in the form by overriding the <c>WndProc</c> function. The following example demonstrates how to do
this in a deterministic way,</para>
			<code lang="VB">Private Shared WM_QUERYENDSESSION As Integer = &amp;H11
Private Shared systemShutdown As Boolean = False

Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)
    If m.Msg = WM_QUERYENDSESSION Then
        MessageBox.Show("queryendsession: this is a logoff, shutdown, or reboot")
        systemShutdown = True
    End If
    ' If this is WM_QUERYENDSESSION, the closing event should be fired in the base WndProc
    MyBase.WndProc(m)
End Sub 'WndProc 

Private Sub Form1_Closing(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing
    If (systemShutdown) Then
    ' reset the variable since they may cancel the shutdown
        systemShutdown = False

        If (DialogResult.Yes = _
                MessageBox.Show("My application", "Would you care to save your work before logging off?", MessageBoxButtons.YesNo)) Then
                e.Cancel = True
        Else
                e.Cancel = False
        End If

    End If
End Sub
</code>
		</remarks>
		<seealso cref="Microsoft.Win32.SessionEndingEventArgs"/>
		<seealso cref="Microsoft.Win32.SessionEndingEventHandler"/>
		<seealso cref="Microsoft.Win32.SessionEndReasons"/>
	</doc>
</docs>
