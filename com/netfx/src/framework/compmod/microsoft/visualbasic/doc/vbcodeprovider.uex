<docs>
	<doc for="VBCodeProvider.CreateCompiler">
		<summary>
			<para> Gets an instance of the Visual Basic code compiler.</para>
		</summary>
		<returns>
			<para>An instance of the Visual Basic <see cref="System.CodeDom.Compiler.ICodeCompiler"/>
implementation.</para>
		</returns>
		<seealso cref="System.CodeDom.Compiler.ICodeCompiler"/>
	</doc>
	<doc for="VBCodeGenerator">
		<summary>
			<para>
       Visual Basic 7 Code Generator.
    </para>
		</summary>
	</doc>
	<doc for="VBCodeGenerator.FileExtension">
		<summary>
			<para>
       Gets or the file extension to use for source files.
    </para>
		</summary>
	</doc>
	<doc for="VBCodeGenerator.CompilerName">
		<summary>
			<para>
       Gets the name of the compiler exe
    </para>
		</summary>
	</doc>
	<doc for="VBCodeGenerator.NullToken">
		<summary>
			<para>
       Gets the token that is used to represent <see langword="null"/>.
    </para>
		</summary>
		<returns>
			<para>
       The token that is used to represent <see langword="null"/>.
    </para>
		</returns>
	</doc>
	<doc for="VBCodeGenerator.QuoteSnippetString">
		<summary>
			<para>
       Provides conversion to formatting with escape codes.
    </para>
		</summary>
		<param name="value">
    The string to convert.
 </param>
		<returns>
			<para>
       The converted string.
    </para>
		</returns>
	</doc>
	<doc for="VBCodeGenerator.OutputDirection">
		<summary>
			<para>
       Generates code for the specified CodeDom based field direction
       representation.
    </para>
		</summary>
		<param name="dir">
    A <see cref="System.CodeDom.FieldDirection"/> that indicates the nature of the field to generate code for.
 </param>
		<seealso cref="System.CodeDom.FieldDirection"/>
	</doc>
	<doc for="VBCodeGenerator.OutputMemberAccessModifier">
		<summary>
			<para>
       Generates code for the specified CodeDom based member
       access modifier representation.
    </para>
		</summary>
		<param name="attributes">
    A <see cref="System.CodeDom.MemberAttributes"/> that indicates the member access modifiers to generate code for.
 </param>
		<seealso cref="System.CodeDom.MemberAttributes"/>
	</doc>
	<doc for="VBCodeGenerator.OutputMemberScopeModifier">
		<summary>
			<para>
       Generates code for the specified CodeDom based member scope modifier
       representation.
    </para>
		</summary>
		<param name="attributes">
    A <see cref="System.CodeDom.MemberAttributes"/> that indicates the member scope modifier to generate code for.
 </param>
		<seealso cref="System.CodeDom.MemberAttributes"/>
	</doc>
	<doc for="VBCodeGenerator.OutputOperator">
		<summary>
			<para>
       Generates code for the specified CodeDom based operator
       representation.
    </para>
		</summary>
		<param name="op">
    A <see cref="System.CodeDom.CodeBinaryOperatorType"/> that indicates the operator to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeBinaryOperatorType"/>
	</doc>
	<doc for="VBCodeGenerator.OutputType">
		<summary>
			<para>
       Generates code for the specified CodeDom based return type
       representation.
    </para>
		</summary>
		<param name="typeRef">
    The type to generate code for.
 </param>
	</doc>
	<doc for="VBCodeGenerator.OutputTypeAttributes">
		<summary>
			<para>
       Generates code for the specified CodeDom based type attributes
       representation.
    </para>
		</summary>
		<param name="attributes">
    A <see cref="System.CodeDom.TypeAttributes"/> that indicates the type attributes to generate code for.
 </param>
		<seealso cref="System.CodeDom.TypeAttributes"/>
	</doc>
	<doc for="VBCodeGenerator.OutputTypeNamePair">
		<summary>
			<para>
       Generates code for the specified CodeDom based type name pair
       representation.
    </para>
		</summary>
		<param name="typeRef">
    The type of the variable.
 </param>
		<param name=" name">
    The name of the variable.
 </param>
		<remarks>
			<para>
       This is commonly used for variable declarations.
    </para>
		</remarks>
	</doc>
	<doc for="VBCodeGenerator.GenerateIterationStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based for loop statement
       representation.
    </para>
		</summary>
		<param name="e">
    A CodeForLoopStatement that indicates the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeIterationStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GeneratePrimitiveExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based primitive expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodePrimitiveExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodePrimitiveExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateThrowExceptionStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based throw exception statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeThrowExceptionStatement"/> that indicates the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeThrowExceptionStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateArrayCreateExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based array creation expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeArrayCreateExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeArrayCreateExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateBaseReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based base reference expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeBaseReferenceExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeBaseReferenceExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateCastExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based cast expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeCastExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeCastExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateDelegateCreateExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based delegate creation expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeDelegateCreateExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeDelegateCreateExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateFieldReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based field reference expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeFieldReferenceExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeFieldReferenceExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateIndexerExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based indexer expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeIndexerExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeIndexerExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateSnippetExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based code snippet expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeSnippetExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeSnippetExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateMethodInvokeExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based method invoke
       expression.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMethodInvokeExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMethodInvokeExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateDelegateInvokeExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based delegate invoke
       expression.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeDelegateInvokeExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeDelegateInvokeExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateObjectCreateExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based object creation
       expression.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeObjectCreateExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeObjectCreateExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateParameterDeclarationExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom
       based parameter declaration expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeParameterDeclarationExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeParameterDeclarationExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateThisReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based this reference expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeThisReferenceExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeThisReferenceExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateExpressionStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based method invoke statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeExpressionStatement"/> that indicates the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeExpressionStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateMethodReturnStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based method return statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMethodReturnStatement"/> that indicates the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMethodReturnStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateConditionStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based if statement representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeConditionStatement"/> that indicates the if statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeConditionStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateTryCatchFinallyStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based try catch finally statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTryCatchFinallyStatement"/> that indicates the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeTryCatchFinallyStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateAssignStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based assignment statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeAssignStatement"/> that indicates the assignment statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAssignStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateVariableDeclarationStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom variable declaration statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeVariableDeclarationStatement"/> that indicates the variable declaration to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeVariableDeclarationStatement"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateLinePragmaStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based line pragma start
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeLinePragma"/> that indicates the line pragma start to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeLinePragma"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateLinePragmaEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based line pragma end
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeLinePragma"/> that indicates the line pragma end to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeLinePragma"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateField">
		<summary>
			<para>
       Generates code for the specified CodeDom based member
       field representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMemberField"/> that indicates the field to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMemberField"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateSnippetMember">
		<summary>
			<para>
       Generates code for
       the specified CodeDom based snippet member representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeSnippetTypeMember"/> that indicates the member to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeSnippetTypeMember"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateMethod">
		<summary>
			<para>
       Generates code for the specified CodeDom based member method
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMemberMethod"/> that indicates the method to generate code for.
 </param>
		<param name="c">
		</param>
		<seealso cref="System.CodeDom.CodeMemberMethod"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateProperty">
		<summary>
			<para>
       Generates code for the specified CodeDom based member property
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMemberProperty"/> that indicates the property to generate code for.
 </param>
		<param name="c">
		</param>
		<seealso cref="System.CodeDom.CodeMemberProperty"/>
	</doc>
	<doc for="VBCodeGenerator.GeneratePropertyReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based property reference
       expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodePropertyReferenceExpression"/> that indicates the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodePropertyReferenceExpression"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateConstructor">
		<summary>
			<para>
       Generates code for the specified CodeDom based constructor
       representation.
    </para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeConstructor"/> that indicates the constructor to generate code for.</param>
		<param name="c"></param>
		<seealso cref="System.CodeDom.CodeConstructor"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateTypeConstructor">
		<summary>
			<para>
       Generates code for the specified CodeDom based class constructor
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTypeConstructor"/> that indicates the class constructor to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeTypeConstructor"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateTypeStart">
		<summary>
			<para>
       Generates code for the CodeDom based class start representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the class start to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateTypeEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based class end
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the class end to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateNamespace">
		<summary>
			<para>
       Generates code for the CodeDom based namespace representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateNamespaceStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based namespace representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateNamespaceEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based namespace representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateNamespaceImport">
		<summary>
			<para>
       Generates code for the specified CodeDom based namespace import
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespaceImport"/> that indicates the namespace import to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespaceImport"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateAttributeDeclarationsStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based attribute block start
       representation.
    </para>
		</summary>
		<param name="attributes">
    A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> that indicates the attribute block to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="VBCodeGenerator.GenerateAttributeDeclarationsEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based attribute block end
       representation.
    </para>
		</summary>
		<param name="attributes">
    A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> that indicates the attributes to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="VBCodeGenerator.IsValidIdentifier">
		<summary>
			<para>
       Gets whether the specified identifier is valid.
    </para>
		</summary>
		<param name="value">
    The value to test for validity.
 </param>
		<returns>
			<para>
				<see langword="true"/> if the identifier is valid; otherwise, 
    <see langword="false"/>.
    </para>
		</returns>
	</doc>
	<doc for="VBCodeProvider.FileExtension">
		<summary>
			<para> Gets the file name extension to use when creating source code
      files.</para>
		</summary>
		<value>
			<para>The file name extension to use for generated source code files.</para>
		</value>
		<remarks>
			<para>This file name extension is usually the extension used by the language's
      source code files.</para>
		</remarks>
	</doc><doc for="VBCodeProvider.CreateGenerator">
		<overload>
			<para>Gets an instance of the Visual Basic code generator.</para>
		</overload>
		<summary>
			<para> Gets an instance of the Visual Basic code generator.</para>
		</summary>
		<returns>
			<para>An instance of the Visual Basic <see cref="System.CodeDom.Compiler.ICodeGenerator"/>
implementation.</para>
		</returns>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator"/>
	</doc>
	<doc for="VBCodeProvider.LanguageOptions">
		<summary>
			<para>Gets or sets a language features identifier.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.Compiler.LanguageOptions"/> that indicates special
   features of the language.</para>
		</value>
		<seealso cref="System.CodeDom.Compiler.LanguageOptions"/>
	</doc>
	<doc for="VBCodeProvider">
		<summary>
			<para> Provides access to instances of the Visual Basic code generator and code compiler.</para>
		</summary>
		<remarks>
			<para>This interface provides methods that can be used to retrieve instances of the
      Visual Basic <see cref="System.CodeDom.Compiler.ICodeGenerator"/> and <see cref="System.CodeDom.Compiler.ICodeCompiler"/> implementations.</para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator"/>
		<seealso cref="System.CodeDom.Compiler.ICodeCompiler"/>
		<seealso cref="System.CodeDom"/>
		<seealso cref="System.CodeDom.Compiler"/>
	</doc>
	<doc for="VBCodeProvider.GetConverter">
		<summary>
			<para>Gets a <see cref="System.ComponentModel.TypeConverter"/> for the specified type of object.</para>
		</summary>
		<param name="type">The type of object to retrieve a type converter for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter"/> for the specified type.</para>
		</returns>
		<remarks>
			<para>A derived class can override this method to provide
      specific types of type converters for specific data types.</para>
		</remarks>
	</doc>
</docs>
