<docs>
	<doc for="IDesignerHost.TransactionDescription">
		<summary>
			<para> Gets the description of the current transaction.
      </para>
		</summary>
		<value>
			<para> A description of the current transaction.
      </para>
		</value>
		<remarks>
			<para> The description is the last description
      specified with <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction"/>
      .
      </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction"/>
	</doc><doc for="IDesignerHost.DestroyComponent">
		<summary>
			<para> Destroys the specified component and removes it from the designer container.
      </para>
		</summary>
		<param name="component">The component to destroy. </param>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.CreateComponent"/>
		<seealso cref="System.ComponentModel.IComponent"/>
	</doc><doc for="IDesignerHost.RootComponent">
		<summary>
			<para> Gets the instance of the base class used as the root component for the current design.
      </para>
		</summary>
		<value>
			<para> The instance of the root component class.
      </para>
		</value>
		<remarks>
			<para> This base class is typically a <see cref="T:System.Windows.Forms.Form"/>
or <see cref="T:System.Windows.Forms.UserControl"/>
instance; it defines the class for which the user's derived class extends.</para>
		</remarks>
	</doc><doc for="IDesignerHost.LoadComplete">
		<summary>
			<para> Occurs when this designer completes loading its document.</para>
		</summary>
		<remarks>
			<para> This event occurs after a designer completes loading its document.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.Loading"/>
	</doc><doc for="IDesignerHost.RootComponentClassName">
		<summary>
			<para> Gets the fully qualified name of the class being designed.
      </para>
		</summary>
		<value>
			<para> The fully qualified name of the base component class.
      </para>
		</value>
	</doc><doc for="IDesignerHost.Activated">
		<summary>
			<para> Occurs when this designer is activated.
      </para>
		</summary>
		<remarks>
			<para> A designer is activated before it is displayed.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.Deactivated"/>
	</doc><doc for="IDesignerHost.Deactivated">
		<summary>
			<para> Occurs when this designer is deactivated.</para>
		</summary>
		<remarks>
			<para> A designer is deactivated just before it is no longer displayed.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.Activated"/>
	</doc><doc for="IDesignerHost.TransactionClosed">
		<summary>
			<para> Adds an event handler for the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/> event.
   </para>
		</summary>
		<remarks>
			<para> This event occurs after a transaction is closed.</para>
			<para>A transaction can sometimes change multiple values. The transaction methods
      provide a way to prevent performance and flicker problems by avoiding repetitive
      processing. These methods defer processing until after the transaction has
      closed.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionOpened"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/>
	</doc><doc for="IDesignerHost.TransactionClosing">
		<summary>
			<para>Adds an event handler for the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosing"/> event.</para>
		</summary>
		<remarks>
			<para> This event occurs just before a transaction
      is completed.</para>
			<para> A transaction can sometimes change
      multiple values. The transaction methods provide a way
      to prevent performance and flicker problems by
      avoiding repetitive processing. These methods defer processing until after the
      transaction has closed.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionOpened"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/>
	</doc><doc for="IDesignerHost.TransactionOpened">
		<summary>
			<para>Adds an event handler for the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpened"/> event.</para>
		</summary>
		<remarks>
			<para> This event occurs when a transaction has begun.</para>
			<para> A transaction can sometimes change multiple values. The transaction
      methods provide a way to prevent performance and flicker problems by avoiding
      repetitive processing. These methods defer processing until after the transaction
      has closed.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionClosing"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/>
	</doc><doc for="IDesignerHost.Loading">
		<summary>
			<para> Gets a value indicating whether the designer host
      is currently loading the document.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the designer host is currently
   loading the document; otherwise, <see langword="false"/>.
   </para>
		</value>
	</doc><doc for="IDesignerHost.TransactionOpening">
		<summary>
			<para> Adds an event handler for the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/> event.
 </para>
		</summary>
		<remarks>
			<para> This event occurs when a transaction is
 about to begin.
 </para>
			<para> This method allows designer host clients to perform
 operations before other handlers are notified that a transaction has begun.
 The specified handler is called only when the first call to <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction"/> is
 made. Subsequent calls do not generate this event until all transaction objects have been
 disposed. </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionOpened"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionClosing"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/>
	</doc><doc for="IDesignerHost.GetType">
		<overload>
			<para> Gets an instance of the specified type.
 </para>
		</overload>
		<summary>
			<para> Gets an instance of the specified, fully qualified type 
 name.
 </para>
		</summary>
		<param name="typeName">The name of the type to load. </param>
		<returns>
			<para> The type object for the specified type name, or <see langword="null"/> if the type cannot be found.
 </para>
		</returns>
	</doc><doc for="IDesignerHost.Activate">
		<summary>
			<para> Activates the designer that this host is hosting.
      </para>
		</summary>
		<remarks>
			<para>Designers should be activated before they display their user interface.</para>
		</remarks>
	</doc>
	<doc for="IDesignerHost.CreateComponent">
		<overload>
			<para> Creates a component of the specified type and adds it to the design document.
      </para>
		</overload>
		<summary>
			<para> Creates a component of the specified type and adds it to the design document.
      </para>
		</summary>
		<param name="componentClass">The type of the component to create. </param>
		<returns>
			<para> The newly created component.
      </para>
		</returns>
		<remarks>
			<para> If the type cannot be resolved into an object that
      implements <see cref="System.ComponentModel.IComponent"/> , an exception is thrown.
      </para>
			<para>This method does not specify a name for the component. The method
      creates the component and adds it to the designer container.</para>
		</remarks>
		<seealso cref="System.ComponentModel.IComponent"/>
	</doc>
	<doc for="IDesignerHost.CreateComponent1">
		<summary>
			<para> Creates a component of the specified type and name, and adds it to the design document.
      </para>
		</summary>
		<param name="componentClass">The type of the component to create. </param>
		<param name="name">The name for the component. </param>
		<returns>
			<para> The newly created component.
      </para>
		</returns>
		<remarks>
			<para>If the type cannot be resolved into an object that implements <see cref="System.ComponentModel.IComponent"/> , an exception is thrown. </para>
			<para>This method creates the component and adds it to the designer container.</para>
		</remarks>
		<seealso cref="System.ComponentModel.IComponent"/>
	</doc>
	<doc for="IDesignerHost.CreateTransaction">
		<overload>
			<para>Creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that
   can encapsulate event
   sequences to improve performance
   and enable undo and redo support functionality.</para>
		</overload>
		<summary>
			<para>Creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that
   can encapsulate event
   sequences to improve
   performance and enable undo and redo support functionality.</para>
		</summary>
		<returns>
			<para> A new instance of <see cref="System.ComponentModel.Design.DesignerTransaction"/> . When 
   you complete the steps in your transaction, you should
   call <see cref="System.ComponentModel.Design.DesignerTransaction.Commit"/>
   on this object.</para>
		</returns>
		<remarks>
			<para>This method creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that can
   be used to encapsulate a series of operations. Designer transactions
   can improve performance, reduce flicker caused by multiple updates during a
   process of operations, and enable most operations to be undone. </para>
			<para>Lengthy operations that involve multiple components can raise many events.
   These events can cause side effects, such as flicker or degraded performance.
   When operating on multiple components at one time, or setting multiple
   properties on a single component, you can improve performance by performing
   these changes within a transaction. Some operations handle the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/> and <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/>
   events and
   perform work only when a transaction is not in progress. For
   more information on using transactions, see the documentation for <see cref="System.ComponentModel.Design.DesignerTransaction"/>.</para>
		</remarks>
	</doc>
	<doc for="IDesignerHost.CreateTransaction1">
		<overload>
			<para>Creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that
   can encapsulate event sequences to improve
   performance and enable undo and redo support functionality, using the specified transaction
   description.</para>
		</overload>
		<summary>
			<para>Creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that
   can encapsulate event sequences to improve
   performance and enable undo and redo support functionality, using the specified transaction
   description.</para>
		</summary>
		<param name="description">A title or description for the newly created transaction.</param>
		<returns>
			<para> A new <see cref="System.ComponentModel.Design.DesignerTransaction"/> . When 
   you have completed the
   steps in your transaction, you should call <see cref="System.ComponentModel.Design.DesignerTransaction.Commit"/> on this
   object.</para>
		</returns>
		<remarks>
			<para>This method creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that can
   be used to encapsulate a series of operations. Designer transactions
   can improve performance, reduce flicker caused by multiple updates during a
   process of operations, and enable most operations to be undone. </para>
			<para>Lengthy operations that involve multiple components can raise many events.
   These events can cause side effects, such as flicker or degraded performance.
   When operating on multiple components at one time, or setting multiple
   properties on a single component, you can improve performance by performing
   these changes within a transaction. Some operations handle the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/> and <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/> events and perform
   work only when a transaction is not in progress. For more information on using
   transactions, see the documentation for <see cref="System.ComponentModel.Design.DesignerTransaction"/>.</para>
		</remarks>
	</doc>
	<doc for="IDesignerHost.GetDesigner">
		<summary>
			<para>Gets the designer instance that contains the specified component.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to retrieve the designer for.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.Design.IDesigner"/> , or <see langword="null"/>
if there is no designer for the specified component.</para>
		</returns>
	</doc>
	<doc for="IDesignerHost">
		<summary>
			<para> Provides an interface for managing
      designer transactions and components.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.IDesignerHost"/> is an interface that works with the
   .NET
   Framework forms designer architecture to provide support for designer transaction
   and component management.
   </para>
			<para> The .NET Framework does
   not provide
   an implementation of this interface. The interface is implemented by
   development tools that support designers.
   </para>
			<note type="cnotes">
   To obtain an implementation of <see cref="System.ComponentModel.Design.IDesignerHost"/> from a development environment,
   call <see cref="System.ComponentModel.Component.GetService"/> while
   your component is active in design mode, passing the type
   of <see cref="System.ComponentModel.Design.IDesignerHost"/> to request an <see cref="System.ComponentModel.Design.IDesignerHost"/>
   service interface.
</note>
			<para><see cref="System.ComponentModel.Design.IDesignerHost"/>
provides the
following members
related to designer state:</para>
			<list type="bullet"><item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.Loading"/> property indicates
      whether a designer or document is being loaded.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.Activated"/> event occurs when
      a designer is activated before display.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.Deactivated"/> event occurs when
      a designer is deactivated.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.LoadComplete"/> event occurs after
      a document is loaded.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.Activate"/> method activates the
      designer.</term>
				</item>
			</list>
			<para><see cref="System.ComponentModel.Design.IDesignerHost"/> provides the
following members related
to managing components:</para>
			<list type="bullet"><item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.Container"/> property indicates
      the container for the designer host.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.RootComponent"/> property indicates
      the base class for the root component.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.RootComponentClassName"/> property indicates
      the name of the class of the root component.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.CreateComponent"/> method creates the
      specified type of component.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.DestroyComponent"/> method destroys
      the specified component.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.GetDesigner"/> method gets the
      designer associated with a specified component.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.GetType"/> method gets an instance
      of the type with the specified
      
      name.</term>
				</item>
			</list>
			<para><see cref="System.ComponentModel.Design.IDesignerHost"/> provides the following members
related to managing transactions: </para>
			<list type="bullet"><item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.InTransaction"/> property indicates
      whether the designer is in a transaction.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.TransactionDescription"/> property indicates
      the current transaction description.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/> event occurs when
      a transaction has been completed.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosing"/> event occurs when
      a transaction is about to be completed.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpened"/> event occurs when
      a transaction has begun.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/> event occurs when
      a transaction is about to begin.</term>
				</item>
				<item>
					<term>
      
      The <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction"/> method creates and returns a new
      transaction.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example code demonstrates how to obtain the <see cref="System.ComponentModel.Design.IDesignerHost"/> service interface from a designer 
   or sited component.</para>
			<codelink SampleID="DesignerHostAcquisition" SnippetID="1"/>
			<para>The following example code demonstrates using
 the <see cref="System.ComponentModel.Design.IDesignerHost"/> interface to list project
 components.</para>
			<codelink SampleID="IDesignerHostExample" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesignerEventService"/>
		<seealso cref="System.ComponentModel.Design.IDesignerOptionService"/>
	</doc>
	<doc for="IDesignerHost.InTransaction">
		<summary>
			<para> Gets a value indicating whether the designer host is currently in a transaction.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a transaction is in progress; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="IDesignerHost.Container">
		<summary>
			<para> Gets the container for this designer host.
      </para>
		</summary>
		<value>
			<para> The <see cref="System.ComponentModel.IContainer"/> for this host.
   </para>
		</value>
		<remarks>
			<para> This <see cref="System.ComponentModel.IContainer"/> contains the 
   components of the current design mode document. You can list or access
   any of the components of the current design mode document through
   the <see cref="System.ComponentModel.IContainer.Components"/> member of this <see cref="System.ComponentModel.IContainer"/>.
   </para>
		</remarks>
	</doc>
</docs>
