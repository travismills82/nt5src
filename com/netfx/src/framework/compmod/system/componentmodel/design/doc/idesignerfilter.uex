<docs>
	<doc for="IDesignerFilter">
		<summary>
			<para> Provides an interface that enables a designer to access and filter
      the dictionaries of a <see cref="System.ComponentModel.TypeDescriptor"/>
      that stores the property, attribute,
      and event descriptors that a component designer can expose to the
      design-time environment.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.IDesignerFilter"/>
enables a designer to filter the set of property, attribute,
and event descriptors that its associated component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>. The methods of this interface whose names begin with <see langword="Pre"/><paramref name=" "/>are called immediately before the methods whose names begin with
<see langword="Post"/>.</para>
			<para> If you want to add attribute, event, or property
   descriptors, use a <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes"/>, <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterEvents"/>, or <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterProperties"/> method.</para>
			<para> If you want to change or remove attribute, event, or property descriptors,
   use a <see cref="System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes"/>, <see cref="System.ComponentModel.Design.IDesignerFilter.PostFilterEvents"/>, or <see cref="System.ComponentModel.Design.IDesignerFilter.PostFilterProperties"/>
   method.</para>
		</remarks>
		<example>
			<para> The following example demonstrates an override of <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterProperties"/> that adds a
   property of the designer to the Properties window when the designer's control is
   selected at design time. See the example for the <see cref="T:System.Windows.Forms.Design.ControlDesigner"/> class for a complete designer
   example that uses the <see cref="System.ComponentModel.Design.IDesignerFilter"/>
   interface.</para>
			<codelink SampleID="ControlDesignerExample" SnippetID="2"/>
		</example>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService"/>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
	</doc>
	<doc for="IDesignerFilter.PostFilterEvents">
		<summary>
			<para> When overridden in a
      derived class, allows a designer to change or remove items from the set of events that
      it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="events">The <see cref="System.ComponentModel.EventDescriptor"/> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.</param>
		<remarks>
			<para> This method provides a way to change or
      remove items within the dictionary of events that are exposed through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of events are the names of
      the events. The objects are of type <see cref="System.ComponentModel.EventDescriptor"/>. This method is called immediately after <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterEvents"/>.</para>
			<note type="inotes">
      You can directly filter the dictionary that is accessible
      through the <paramref name="events"/>
      
      parameter, or you
      can leave it unchanged. If you are overriding this method, call the base
      implementation after you perform your own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents"/>
	</doc>
	<doc for="IDesignerFilter.PostFilterProperties">
		<summary>
			<para> When overridden in a derived class, allows a designer to
      change or remove items from the set of properties that it exposes through a
   <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="properties">The <see cref="System.ComponentModel.PropertyDescriptor"/> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.</param>
		<remarks>
			<para> This method provides a way to change or
      remove items within the dictionary of properties that are exposed through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of properties are the names
      of the properties. The objects are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method is called immediately after <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterProperties"/>.</para>
			<note type="inotes">
      You can directly filter the dictionary that is
      accessible through the <paramref name="properties"/> parameter, or you can leave it unchanged. If
      you are overriding this method, call the base implementation after you perform
      your own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties"/>
	</doc>
	<doc for="IDesignerFilter.PreFilterEvents">
		<summary>
			<para> When overridden in a derived class, allows a designer to add
      items to the set of events that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="events">The <see cref="System.ComponentModel.EventDescriptor"/> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.</param>
		<remarks>
			<para> This method provides a way to add items to the dictionary of events that a
      designer exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of events are the names of the events. The objects
      are of type <see cref="System.ComponentModel.EventDescriptor"/>. This method is called immediately before <see cref="System.ComponentModel.Design.IDesignerFilter.PostFilterEvents"/>.</para>
			<note type="inotes">
      You can directly modify the
      dictionary that is accessible through the <paramref name="events"/> parameter, or you can leave it unchanged. If you
      are overriding this method, call the base implementation before you perform your
      own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents"/>
	</doc>
	<doc for="IDesignerFilter.PreFilterProperties">
		<summary>
			<para> When overridden in a derived class, allows a designer to add items
      to the set of properties that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="properties">The <see cref="System.ComponentModel.PropertyDescriptor"/> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.</param>
		<remarks>
			<para> This method provides a way to add items to the dictionary of properties
      that a designer exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of properties are the names of the properties. The
      objects are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method is called immediately before <see cref="System.ComponentModel.Design.IDesignerFilter.PostFilterProperties"/>.</para>
			<note type="inotes">
      You can directly modify the
      dictionary that is accessible through the <paramref name="properties"/> parameter, or you can leave it unchanged. If
      you are overriding this method, call the base implementation before you perform
      your own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties"/>
	</doc>
	<doc for="IDesignerFilter.PostFilterAttributes">
		<summary>
			<para> When overridden in a derived
      class, allows a designer to change or remove items
      from the set of attributes that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="attributes">The <see cref="System.Attribute"/> objects for the class of the component. The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeID"/> values of the attributes.</param>
		<remarks>
			<para> This method provides a way to change or remove items within the dictionary of
      attributes that the associated component of
      the designer implementing this interface exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of attributes are the type IDs
      of the attributes. The objects are of type <see cref="System.Attribute"/>. This method is called immediately after <see cref="System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes"/>.</para>
			<para>The type ID of an attribute can be any object. By default, <see cref="System.Attribute"/> returns
   its <see cref="System.Type"/> as the value of its <see cref="P:System.Attribute.TypeID"/> property. You can check the
<see cref="P:System.Attribute.TypeID"/> of an attribute in the dictionary for equivalence with a known <see cref="P:System.Attribute.TypeID"/> for an attribute to
   identify it, or use <see cref="System.Reflection"/> to identify the attribute
   object itself.
   </para>
			<para>When an attribute that has the same
<see cref="P:System.Attribute.TypeID"/> as an existing or inherited 
   attribute is added to a component, the new attribute replaces the old
   attribute. For
   many attributes, a new attribute of the same type will replace any previous
   attribute of the type. However, some types of attributes return a <see cref="P:System.Attribute.TypeID"/>
that distinguishes the attribute selectively. For example, in
order to provide different types of simultaneously active designers for a type,
such as an <see cref="System.ComponentModel.Design.IRootDesigner"/> and an <see cref="System.ComponentModel.Design.IDesigner"/>, the <see cref="System.ComponentModel.DesignerAttribute"/> class returns
a <see cref="P:System.Attribute.TypeID"/>
that uniquely identifies both
the attribute and the base designer type. The <see cref="System.ComponentModel.DesignerAttribute"/> constructor allows you to specify
the base designer type of the designer in addition to its
specific type, and <see cref="System.ComponentModel.DesignerAttribute"/>
returns a <see cref="P:System.Attribute.TypeID"/> that reflects
this. Therefore when you add a new <see cref="System.ComponentModel.DesignerAttribute"/>
with a base
designer type of the same type as the base designer type of an existing
<see cref="System.ComponentModel.DesignerAttribute"/>, the old attribute is replaced with the 
new attribute.</para>
			<note type="inotes">
   You can directly filter the
   dictionary that is accessible through the <paramref name="attributes"/> parameter, or you
   can leave it unchanged. If you are overriding this method, call the base
   implementation after you perform your own filtering.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes"/>
	</doc>
	<doc for="IDesignerFilter.PreFilterAttributes">
		<summary>
			<para> When overridden in a derived class, allows a designer to
      add items to the set of attributes that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="attributes">The <see cref="System.Attribute"/> objects for the class of the component. The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeID"/> values of the attributes.</param>
		<remarks>
			<para> This method provides a way to add items to the dictionary of
      attributes that the associated component of the designer implementing this
      interface exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of attributes are the type IDs of the attributes.
      The objects are of type <see cref="System.Attribute"/>. This method is called immediately after <see cref="System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes"/>.</para>
			<para>The type ID of an attribute can be any object. By default, <see cref="System.Attribute"/> returns its
<see cref="System.Type"/> as the 
   value of its <see cref="P:System.Attribute.TypeID"/> property. You can check the <see cref="P:System.Attribute.TypeID"/> of an attribute
   in the dictionary for equivalence with a known <see cref="P:System.Attribute.TypeID"/>
   for an attribute to identify it, or use <see cref="System.Reflection"/> to identify the attribute object
   itself.</para>
			<para>When an attribute that has the same <see cref="P:System.Attribute.TypeID"/> as an existing or inherited
attribute is added to a component, the new attribute replaces the old attribute.
For many attributes, a new attribute of the same type will replace any
previous attribute of the type. However, some types of attributes return
a <see cref="P:System.Attribute.TypeID"/> that distinguishes the attribute selectively.
For example, in order to provide different types of simultaneously active
designers for a type, such as an <see cref="System.ComponentModel.Design.IRootDesigner"/> and an <see cref="System.ComponentModel.Design.IDesigner"/>, the <see cref="System.ComponentModel.DesignerAttribute"/> class returns a <see cref="P:System.Attribute.TypeID"/>
that uniquely identifies both the
attribute and the base designer type. The <see cref="System.ComponentModel.DesignerAttribute"/> constructor allows you to specify the
base designer type of the designer in addition to its specific type, and <see cref="System.ComponentModel.DesignerAttribute"/> returns a <see cref="P:System.Attribute.TypeID"/> that reflects this. Therefore
when you add a new <see cref="System.ComponentModel.DesignerAttribute"/> with a base designer type of the same
type as the base designer type of an existing <see cref="System.ComponentModel.DesignerAttribute"/>, the old attribute is replaced with the
new attribute.</para>
			<note type="inotes">
   You can directly
   filter the dictionary that is accessible through the <paramref name="attributes"/>
   parameter, or you can leave it unchanged. If you are overriding this method,
   call the base implementation after you perform your own filtering.
</note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes"/>
	</doc>
</docs>
