<docs>
	<doc for="IMenuCommandService.RemoveCommand">
		<summary>
			<para> Removes the specified
      standard menu command from the menu.
      </para>
		</summary>
		<param name="command">The <see cref="System.ComponentModel.Design.MenuCommand"/> to remove. </param>
		<remarks>
			<para>This method removes the specified <see cref="System.ComponentModel.Design.MenuCommand"/> if it is 
   found. This method does not raise an exception or return a value if the
   specified <see cref="System.ComponentModel.Design.MenuCommand"/> is not found. Use
   the <see cref="System.ComponentModel.Design.IMenuCommandService.FindCommand"/> method to determine whether
   a <see cref="System.ComponentModel.Design.MenuCommand"/> matching a
   specified <see cref="System.ComponentModel.Design.CommandID"/> is located on a menu.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.MenuCommand"/>
	</doc>
	<doc for="IMenuCommandService.RemoveVerb">
		<summary>
			<para>Removes the specified designer verb from the collection of global designer verbs.</para>
		</summary>
		<param name="verb">The <see cref="System.ComponentModel.Design.DesignerVerb"/> to remove.</param>
		<remarks>
			<para>This method removes the specified global designer verb if it
      is within the global designer verbs collection. You can add a designer verb
      to the global designer verbs collection using the <see cref="System.ComponentModel.Design.IMenuCommandService.AddVerb"/>
      method.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerVerb"/>
	</doc>
	<doc for="IMenuCommandService">
		<summary>
			<para> 
      Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some
      types of context menus.</para>
		</summary>
		<remarks>
			<para> This interface provides methods to:</para>
			<list type="bullet"><item>
					<term>
         
         Find, invoke, add and remove global designer verb
         commands.</term>
				</item>
				<item>
					<term>
         
         Find, invoke, add and remove standard menu commands.</term>
				</item>
				<item>
					<term>
         
         Alter the event handlers associated with standard
         menu commands.</term>
				</item>
				<item>
					<term>
         
         Display a context menu of standard commands that is associated with a menu
      <see cref="System.ComponentModel.Design.CommandID"/>.</term>
				</item>
			</list>
			<para> Designer verbs represent custom-defined commands that
   are listed on the shortcut menu in design mode. A designer verb
   can provide a specified text label. Each designer verb is automatically
   assigned a unique <see cref="System.ComponentModel.Design.CommandID"/>.
   A designer can provide designer verbs through its <see cref="System.ComponentModel.Design.IDesigner.Verbs"/>
   property, but these are only available when the designer's component is currently selected. Global
   designer verbs are designer verb commands
   that can be accessed from a design-mode shortcut menu regardless of
   the selected component. This interface allows you to manage the set of global designer verbs
   that are available in design mode. </para>
			<para> You can add a global
   designer verb using the <see cref="System.ComponentModel.Design.IMenuCommandService.AddVerb"/> method, and
   you
   can remove a global designer verb using the <see cref="System.ComponentModel.Design.IMenuCommandService.RemoveVerb"/> method.
   You can invoke a designer verb using the <see cref="System.ComponentModel.Design.IMenuCommandService.GlobalInvoke"/> method if you
   know the <see cref="System.ComponentModel.Design.CommandID"/> of the
   verb. The <see cref="System.ComponentModel.Design.IMenuCommandService.Verbs"/>
   property of this interface contains the current set of designer verb commands
   to display in a shortcut menu. This set of designer verb commands consists of all global
   designer verbs and any designer verbs offered by the designer of any currently
   selected component. This set of verbs is updated each time a component with a
   designer offering designer verb commands is selected or
   deselected. </para>
			<para> Menu commands are limited to the set of predefined
   standard commands. Most of the predefined standard commands are defined in the
<see cref="System.ComponentModel.Design.StandardCommands"/> and <see cref="T:System.Windows.Forms.Design.MenuCommands"/> 
enumerations. You can add, remove,
and invoke menu commands, and search for menu commands that have been
added to a menu using methods of this interface. </para>
			<para> You can add a standard menu command using the <see cref="System.ComponentModel.Design.IMenuCommandService.AddCommand"/> method, and remove a standard menu command
using the <see cref="System.ComponentModel.Design.IMenuCommandService.RemoveCommand"/> method.
You can attach an event handler to a predefined standard menu command by
following the procedure detailed in the documentation for the <see cref="System.ComponentModel.Design.IMenuCommandService.AddCommand"/> method. You
can retrieve a menu command by <see cref="System.ComponentModel.Design.CommandID"/> if it has been added to a menu using the
<see cref="System.ComponentModel.Design.IMenuCommandService.FindCommand"/> 
method. You can invoke a menu command or designer verb command by
<see cref="System.ComponentModel.Design.CommandID"/> using the <see cref="System.ComponentModel.Design.IMenuCommandService.GlobalInvoke"/> method.</para>
			<note type="note">
   
   An attempt to add a menu command with an
   already existing <see cref="System.ComponentModel.Design.CommandID"/> will throw an <see cref="System.InvalidOperationException"/> . When
   adding a menu command, be sure to check that it is not already on a menu using
   the <see cref="System.ComponentModel.Design.IMenuCommandService.FindCommand"/> method, or use
   exception handling wisely.
</note>
			<note type="note">
   A menu command can be added to a menu, and have
   its <see cref="System.ComponentModel.Design.MenuCommand.Visible"/> or <see cref="System.ComponentModel.Design.MenuCommand.Enabled"/> properties set to
<see langword="false"/>. If you cannot visually locate a 
   menu command that has been added on a menu, one of these properties may have
   been set to <see langword="false"/>.
</note>
			<para>You can show certain standard shortcut menus containing menu commands at a
   specified location using the <see cref="System.ComponentModel.Design.IMenuCommandService.ShowContextMenu"/> method. The
   documentation for this method contains a table listing the command IDs that
   specify the valid menus to show.</para>
		</remarks>
		<example>
			<para> This example demonstrates using
      the <see cref="System.ComponentModel.Design.IMenuCommandService"/> to add
      a <see cref="System.ComponentModel.Design.MenuCommand"/>.</para>
			<codelink SampleID="MenuCommand Example" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.MenuCommand"/>
		<seealso cref="System.ComponentModel.Design.DesignerVerb"/>
		<seealso cref="System.ComponentModel.Design.CommandID"/>
		<seealso cref="T:System.Windows.Forms.Design.MenuCommands"/>
		<seealso cref="System.ComponentModel.Design.StandardCommands"/>
	</doc>
	<doc for="IMenuCommandService.Verbs">
		<summary>
			<para>Gets or sets an
      array of the designer verbs that are currently available.</para>
		</summary>
		<value>
			<para>An array of type <see cref="System.ComponentModel.Design.DesignerVerb"/> that indicates the designer verbs
   that are currently available.</para>
		</value>
		<remarks>
			<para> The set of currently available designer verbs consists of all
      global designer verbs, which are added by the <see cref="System.ComponentModel.Design.IMenuCommandService.AddVerb"/> method on this
      interface, and individual designer verbs, which are offered by the <see cref="System.ComponentModel.Design.IDesigner.Verbs"/> property
      of individual designers. If the name of a
      global verb conflicts with the name of a designer verb, the designer-provided designer verb takes
      precedence.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerVerbCollection"/>
		<seealso cref="System.ComponentModel.Design.IDesigner.Verbs"/>
	</doc>
	<doc for="IMenuCommandService.AddVerb">
		<summary>
			<para>Adds the specified designer verb to the set of global designer verbs.</para>
		</summary>
		<param name="verb">The <see cref="System.ComponentModel.Design.DesignerVerb"/> to add.</param>
		<remarks>
			<para> Designers of components that
      provide designer verbs should use the <see cref="System.ComponentModel.Design.IDesigner.Verbs"/> property of
      their designer rather than calling this method. This method adds a global
      designer verb that can be accessed from the right-click shortcut menu in design mode regardless
      of the currently selected component.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerVerb"/>
	</doc>
	<doc for="IMenuCommandService.FindCommand">
		<summary>
			<para>Searches for the specified command ID and returns the
      menu command associated with it.</para>
		</summary>
		<param name="commandID">The <see cref="System.ComponentModel.Design.CommandID"/> to search for.</param>
		<returns>
			<para>The <see cref="System.ComponentModel.Design.MenuCommand"/> associated with the command ID, or
<see langword="null"/>
if no command is found.</para>
		</returns>
		<seealso cref="System.ComponentModel.Design.CommandID"/>
	</doc>
	<doc for="IMenuCommandService.GlobalInvoke">
		<summary>
			<para>Invokes a menu or designer verb command matching the specified command ID.</para>
		</summary>
		<param name="commandID">The <see cref="System.ComponentModel.Design.CommandID"/> of the command to search for and execute.</param>
		<returns>
			<para><see langword="true"/> if the command was found and invoked successfully; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method searches for a menu command or designer
      verb with a <see cref="System.ComponentModel.Design.CommandID"/> matching the specified <see cref="System.ComponentModel.Design.CommandID"/>.
      This method first searches within the designer
      verbs collection consisting of global and active
      designer-provided verbs before continuing the search, if necessary, through the
      global environment command service. If a
      matching menu command or designer verb is located, the command
      is invoked.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.CommandID"/>
	</doc>
	<doc for="IMenuCommandService.AddCommand">
		<summary>
			<para>Adds the specified standard menu command to the menu.</para>
		</summary>
		<param name="command">The <see cref="System.ComponentModel.Design.MenuCommand"/> to add.</param>
		<exception cref="System.InvalidOperationException">When the <see cref="System.ComponentModel.Design.CommandID"/> of the specified <see cref="System.ComponentModel.Design.MenuCommand"/> is already present on a menu.</exception>
		<remarks>
			<para>The <see cref="T:System.Windows.Forms.Design.MenuCommands"/> and <see cref="System.ComponentModel.Design.StandardCommands"/> enumerations contain <see cref="System.ComponentModel.Design.CommandID"/>
identifiers for predefined standarard commands and menu commands that are already associated with a
location on a particular menu.</para>
			<note type="note">
   An attempt to add a menu command with
   an already existing <see cref="System.ComponentModel.Design.CommandID"/> will throw an <see cref="System.InvalidOperationException"/> . When adding a menu command, be sure to check
   that it is not already on a menu using the <see cref="System.ComponentModel.Design.IMenuCommandService.FindCommand"/> method, or use
   exception handling wisely.
   
</note>
			<para>You can attach an event handler to a predefined menu command with the
   following procedure:</para>
			<list type="number"><item>
					<term>
      
      If the menu command to link with an event handler has been added to a
      menu, or is located with the <see cref="System.ComponentModel.Design.IMenuCommandService.FindCommand"/> method,
      consider whether you wish to restore this menu command later, and whether you
      want to invoke the current event handler from your new event handler. If your
      code might restore the menu command or chain the invocation of event handlers,
      be sure to store a reference to the menu command somewhere.</term>
				</item>
				<item>
					<term>
      
      Ensure that any previously existing menu command with the same <see cref="System.ComponentModel.Design.CommandID"/> has been removed from the menu
      using the <see cref="System.ComponentModel.Design.IMenuCommandService.RemoveCommand"/> method.</term>
				</item>
				<item>
					<term>
      
      Create a new <see cref="System.ComponentModel.Design.MenuCommand"/> and specify your event handler
      in the constructor, along with a <see cref="System.ComponentModel.Design.CommandID"/> representing the
      command to add. Each standard menu command is associated with
      a predefined menu location where it is added to. The supported command IDs are
      defined in the <see cref="System.ComponentModel.Design.StandardCommands"/> and <see cref="T:System.Windows.Forms.Design.MenuCommands"/> enumerations.</term>
				</item>
				<item>
					<term>
      
      If you want to invoke any preexisting event handler for the menu command,
      call the <see cref="System.ComponentModel.Design.MenuCommand.Invoke"/> method of the menu
      command you have replaced on the menu from the event handler that handles the
      invoke event of your menu command.</term>
				</item>
				<item>
					<term>
      
      If you are interested in restoring the event handler
      of a preexisting menu command that you have replaced, add the stored,
      preexisting menu command after you remove the replacement menu command you
      created. You may want to add this behavior to
      the <see langword="Dispose"/>
      
      method for your type.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.Design.MenuCommand"/>
		<seealso cref="System.ComponentModel.Design.CommandID"/>
	</doc>
	<doc for="IMenuCommandService.ShowContextMenu">
		<summary>
			<para> Shows the specified shortcut menu at the specified
      location.</para>
		</summary>
		<param name="menuID">The <see cref="System.ComponentModel.Design.CommandID"/> for the shortcut menu to show.</param>
		<param name="x">The x-coordinate at which to display the menu, in screen coordinates.</param>
		<param name="y">The y-coordinate at which to display the menu, in screen coordinates.</param>
		<remarks>
			<para>The <see cref="System.ComponentModel.Design.IMenuCommandService.ShowContextMenu"/> method can display
   any of the following Visual Studio .NET shortcut menus containing menu
   commands at a specifed point:</para>
			<list type="table">
				<listheader>
					<term>Menu</term>
					<description> CommandID</description>
				</listheader>
				<item>
					<term> The
         context menu displayed for a
         container</term>
					<description><see cref="F:System.Windows.Forms.Design.MenuCommands.ContainerMenu"/></description>
				</item>
				<item>
					<term> The
      context menu displayed for the component
      tray</term>
					<description><see cref="F:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu"/></description>
				</item>
				<item>
					<term> The
      context menu displayed for a
      selection</term>
					<description><see cref="F:System.Windows.Forms.Design.MenuCommands.SelectionMenu"/></description>
				</item>
				<item>
					<term> The
      context menu displayed for a tray
      selection</term>
					<description><see cref="F:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu"/></description>
				</item>
			</list>
			<para> This method can also display other registered context menus.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.CommandID"/>
	</doc>
</docs>
