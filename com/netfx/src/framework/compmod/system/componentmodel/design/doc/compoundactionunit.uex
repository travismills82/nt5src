<docs>
   <doc for="CompoundActionUnit">
 <summary>
    <para>Represents a series of action units that should be treated as a single
       atomic action. Undoing or redoing this action will cause all of the
       child actions to be done or undone in the appropriate order.</para>
 </summary>
 <seealso cref='System.ComponentModel.Design.IUndoService'/>
 <seealso cref='System.ComponentModel.Design.IActionUnit'/>
   </doc>
   <doc for="CompoundActionUnit.CompoundActionUnit">
 <overload>
    <para>
       Initializes an instance of the <see cref='System.ComponentModel.Design.CompoundActionUnit'/> class.
    </para>
 </overload>
 <summary>
    <para>
       Initializes an instance of the <see cref='System.ComponentModel.Design.CompoundActionUnit'/> class.
    </para>
 </summary>
 <param name='description'>
    A description of the event or events.
 </param>
   </doc>
   <doc for="CompoundActionUnit.CompoundActionUnit1">
 <summary>
 <para>Initializes an instance of the <see cref='System.ComponentModel.Design.CompoundActionUnit'/> class 
    using the specified description and actions.</para>
 </summary>
 <param name='description'>Description of the event or events.</param>
 <param name='actions'>Array of <see cref='System.ComponentModel.Design.IActionUnit'/> events.</param>
   </doc>
   <doc for="CompoundActionUnit.CompoundActionUnit2">
 <summary>
 <para>Initializes an instance of the <see cref='System.ComponentModel.Design.CompoundActionUnit'/> class.</para>
 </summary>
 <param name='description'>Description of the event or events.</param>
 <param name='actions'>An array of <see cref='System.ComponentModel.Design.IActionUnit'/> events.</param>
 <param name='state'>Describes the action with an <see cref='System.ComponentModel.Design.ActionType'/>.</param>
   </doc>
   <doc for="CompoundActionUnit.CanAddChildren">
 <summary>
    <para>Gets or sets a value indicating whether this compound action is in a state that can recieve child actions.</para>
 </summary>
 <value>
 <para><see langword='true'/> if children 
    can be added; otherwise, <see langword='false'/>
    .</para>
 </value>
   </doc>
   <doc for="CompoundActionUnit.ChildCount">
 <summary>
    <para> Gets the current number of child actions this compound action contains.</para>
 </summary>
 <value>
    <para>The current number of child actions.</para>
 </value>
   </doc>
   <doc for="CompoundActionUnit.Description">
 <summary>
    <para>Gets or sets the description for this action unit.</para>
 </summary>
 <value>
    <para>A description of the action encapsulated in this action unit.</para>
 </value>
   </doc>
   <doc for="CompoundActionUnit.NextActionType">
 <summary>
    <para> 
       Gets the current next action's undo or redo type.</para>
 </summary>
 <value>
    <para>The current state, ActionType.Undo or ActionType.Redo.</para>
 </value>
 <remarks>
    <para>This indicates the type of operation that will be performed on the next 
       call to <see cref='System.ComponentModel.Design.CompoundActionUnit.DoAction'/>. The return value is either
       ActionType.Undo or ActionType.Redo.</para>
 </remarks>
   </doc>
   <doc for="CompoundActionUnit.Add">
 <summary>
    <para>Adds a child unit to this compound event. Child units will be executed in the
       order added and undone in the reverse order.
       If this compound action is in a state that it cannot accept children, an exception is thrown.</para>
 </summary>
 <param name='childAction'>The <see cref='System.ComponentModel.Design.IActionUnit'/> child to add.</param>
 <seealso cref='System.ComponentModel.Design.CompoundActionUnit.CanAddChildren'/>
   </doc>
   <doc for="CompoundActionUnit.DoAction">
 <summary>
 <para>Performs the action encapsulated in this <see cref='System.ComponentModel.Design.IActionUnit'/> 
 .</para>
 </summary>
 <returns>
 <para><see langword='true'/> If the action 
    was successfully carried out; otherwise, <see langword='false'/> .</para>
 </returns>
 <remarks>
    <para>The implementation should automatcially toggle between 
       being an "undo" or "redo" action each time <see cref='System.ComponentModel.Design.CompoundActionUnit.DoAction'/> is called.</para>
 </remarks>
   </doc>
   <doc for="CompoundActionUnit.GetChild">
 <summary>
    <para> 
       Gets the child
       at position index.</para>
 </summary>
 <param name='index'>The index of the child to retrieve. The first child added is index zero.</param>
 <returns>
 <para>An <see cref='System.ComponentModel.Design.IActionUnit'/> indicating the child of the 
    specified index.</para>
 </returns>
 <exception cref='System.ArgumentException'>When index is less than zero or greater than the number of children.</exception>
 <remarks>
    <para>If index is less than zero or greater than the number of children, an 
       ArgumentException is thrown. Index zero correpsonds to the first child added to
       the compound action.</para>
 </remarks>
   </doc>
   <doc for="CompoundActionUnit.GetChildren">
 <summary>
    <para>Gets an array of child actions, if any exist. Otherwise a zero-length array is returned.</para>
 </summary>
 <returns>
    <para>An array which has had its length determined by the number of child items.</para>
 </returns>
   </doc>
   <doc for="CompoundActionUnit.Remove">
 <summary>
    <para> Removes the specified child item
       from the compound action unit.</para>
 </summary>
 <param name='childAction'>The <see cref='System.ComponentModel.Design.IActionUnit'/> action to remove.</param>
 <exception cref='System.ArgumentException'>When this action is not the parent of the child action.</exception>
 <remarks>
    <para>If this action is not the parent of the child action, an ArgumentException is 
       thrown.</para>
 </remarks>
   </doc>
</docs>

