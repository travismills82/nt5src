<docs>
	<doc for="IComponentChangeService.ComponentAdded">
		<summary>
			<para>Occurs when a component has been added.</para>
		</summary>
		<remarks>
			<para>This event occurs during load and when new components are created
      by the user, after the component has been sited.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentAdding"/>
		<seealso cref="System.ComponentModel.Design.ComponentEventHandler"/>
	</doc>
	<doc for="IComponentChangeService.ComponentAdding">
		<summary>
			<para>Occurs when a component is in the process of being added.</para>
		</summary>
		<remarks>
			<para>This event occurs during load and when the user creates a new component. You
      can cancel the process of adding a component by throwing an exception here.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentAdded"/>
		<seealso cref="System.ComponentModel.Design.ComponentEventHandler"/>
	</doc>
	<doc for="IComponentChangeService.ComponentChanging">
		<summary>
			<para>Occurs when a component is in the process of being changed.</para>
		</summary>
		<remarks>
			<para> This event occurs before the component is actually
      changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event
      does not occur during form load and unload, because changes are expected at this time. </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/>
		<seealso cref="System.ComponentModel.Design.ComponentChangingEventHandler"/>
	</doc>
	<doc for="IComponentChangeService.ComponentRemoved">
		<summary>
			<para>Occurs when a component has been removed.</para>
		</summary>
		<remarks>
			<para>This event occurs during unload and when a component is deleted by the user. The
      event occurs before the site has been removed from the component.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentRemoving"/>
		<seealso cref="System.ComponentModel.Design.ComponentEventHandler"/>
	</doc>
	<doc for="IComponentChangeService.ComponentRemoving">
		<summary>
			<para>Occurs when a component is in the process of being removed.</para>
		</summary>
		<remarks>
			<para>This event occurs during unload and when the user deletes a component. You can
      cancel the process of removing a component by throwing an exception here.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentRemoved"/>
		<seealso cref="System.ComponentModel.Design.ComponentEventHandler"/>
	</doc>
	<doc for="IComponentChangeService.ComponentRename">
		<summary>
			<para> Occurs when a component is renamed.</para>
		</summary>
		<remarks>
			<para>This event occurs after the <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event when
   a component has been renamed.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ComponentRenameEventHandler"/>
	</doc>
	<doc for="IComponentChangeService.OnComponentChanged">
		<summary>
			<para>Announces to the component change service that a particular component has changed.</para>
		</summary>
		<param name="component">The component that has changed.</param>
		<param name="member">The member that has changed. This is <see langword="null"/> if this change is not related to a single member.</param>
		<param name="oldValue">The old value of the member. This is valid only if the member is not <see langword="null"/>.</param>
		<param name="newValue">The new value of the member. This is valid only if the member is not <see langword="null"/>.</param>
		<remarks>
			<para> This method raises the <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/>
event.</para>
			<para>Most designers that ship with the .NET Framework
   SDK, as well as the Visual Studio .NET design-time environment, typically raise
   this event for you when a component in a project is changed, so most of the time you do
   not need to explicitly call this method. The appropriate <see cref="System.ComponentModel.Design.IComponentChangeService"/> events are automatically raised
   when a <see cref="System.ComponentModel.PropertyDescriptor"/> is used to change a property value
   or components are added or removed from the <see cref="System.ComponentModel.Design.IDesignerHost"/> container.</para>
			<para>Before calling <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged"/>
, first call <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging"/> to
indicate that a component is about to change, and make the change. Then
call <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged"/> to raise
the <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event.</para>
			<note type="inotes">
   
   This event allows the implementer to do any post-processing that is needed after
   a property change. For example, a designer typically updates the source code that sets
   the property with the new value.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
	</doc>
	<doc for="IComponentChangeService.OnComponentChanging">
		<summary>
			<para>Announces to the component change service that a particular component is changing.</para>
		</summary>
		<param name="component">The component that is about to change.</param>
		<param name="member">The member that is changing. This is <see langword="null"/> if this change is not related to a single member.</param>
		<remarks>
			<para>This method raises the <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanging"/>
event.</para>
			<para> Most designers included with the .NET
   Framework SDK, as well as the Visual Studio .NET design-time environment, typically raise this event automatically, so most of the time, you do
   not need to explicitly call this method. The appropriate <see cref="System.ComponentModel.Design.IComponentChangeService"/> events are automatically raised
   when a <see cref="System.ComponentModel.PropertyDescriptor"/> is used to change a property value
   or components are added or removed from the <see cref="System.ComponentModel.Design.IDesignerHost"/> container.</para>
			<note type="inotes">
   This
   method throws an exception if the property cannot be changed. This is not intended to
   validate the values of a particular property. Instead, it is intended to provide
   a global method of preventing a component from changing. For example, if a
   designer file is checked into source code control, this event's handler would
   typically throw an exception if the user refused to check out the file.
</note>
		</remarks>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
	</doc>
	<doc for="IComponentChangeService">
		<summary>
			<para>Provides an interface to add and remove the event
      handlers for events that add, change, remove or rename components,
      and provides methods to raise a <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> or <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanging"/>
      event.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.IComponentChangeService"/>
provides an interface
that can be used to indicate the methods that handle the following
events: </para>
			<list type="bullet"><item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentAdded"/>, raised 
      when a component is added.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentAdding"/>, raised 
      when a component is about to be added.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/>, raised 
      when a component is changed.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanging"/>, raised 
      when a component is about to be changed.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentRemoved"/>, raised 
      when a component is removed.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentRemoving"/>, raised 
      when a component is about to be removed.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.Design.IComponentChangeService.ComponentRename"/> , raised when a component is renamed.</term>
				</item>
			</list>
			<para>Typically, the design environment raises these component add, change, remove, or rename
   events. Designers should call the methods of this interface when
   using <see cref="System.ComponentModel.Design.DesignerTransaction"/> objects to provide undo and redo
   functionality for design-time actions that affect components. More
   information is available in the documentation for <see cref="System.ComponentModel.Design.DesignerTransaction"/>.
   Generally, only the root designer handles these change notifications.</para>
			<para>This service also provides methods that raise a
   component changed event or component changing event. A <see cref="System.ComponentModel.PropertyDescriptor"/>
   or a component can indicate that a component
   has changed or is changing with the <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged"/> and <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging"/> methods,
   respectively.</para>
		</remarks>
		<example>
			<para>This following example demonstrates how to use
      the <see cref="System.ComponentModel.Design.IComponentChangeService"/>
      interface to receive notifications about the addition of, removal of, and
      changes to components in design mode.</para>
			<codelink SampleID="IComponentChangeServiceSample2" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.ComponentEventHandler"/>
		<seealso cref="System.ComponentModel.Design.ComponentChangedEventHandler"/>
		<seealso cref="System.ComponentModel.Design.ComponentChangingEventHandler"/>
		<seealso cref="System.ComponentModel.Design.ComponentRenameEventHandler"/>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction"/>
	</doc>
	<doc for="IComponentChangeService.ComponentChanged">
		<summary>
			<para>Occurs when a component has been changed.</para>
		</summary>
		<remarks>
			<para>This event occurs when any component on the form changes. This
      event will not occur during form load and unload, because changes are expected at this time.</para>
			<note type="tip">
      A <see cref="System.ComponentModel.Design.DesignerTransaction"/> can raise multiple <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> events.
      Some <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event
      handlers can interfere with with expected sequences of events, such as if your
      code alters the values of properties while a transaction is occurring.
      A <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event
      handler can also impair performance if it draws after each change while
      a <see cref="System.ComponentModel.Design.DesignerTransaction"/> is in
      progress. In order to allow a <see cref="System.ComponentModel.Design.DesignerTransaction"/> in
      process to complete without interruption or interference by your <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/>
      
      event handler, you can test the state of the <see cref="System.ComponentModel.Design.IDesignerHost.InTransaction"/> property, and
      defer handling the change events until the completion of the transaction
      by adding a <see cref="System.ComponentModel.Design.DesignerTransactionCloseEventHandler"/> which will raise
      your <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event
      handler and remove itself upon completion
      
      of the transaction.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanging"/>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentRename"/>
		<seealso cref="System.ComponentModel.Design.ComponentChangedEventHandler"/>
	</doc>
</docs>
