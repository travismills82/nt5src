<docs>
	<doc for="DesignerTransaction.IDisposable.Dispose">
		<summary>
     Private implementation of IDisaposable.
     When a transaction is disposed it is
     committed.
 </summary>
	</doc>
	<doc for="DesignerTransaction.DesignerTransaction">
		<overload>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.Design.DesignerTransaction"/> 
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.Design.DesignerTransaction"/> class with no
   description.</para>
		</summary>
	</doc>
	<doc for="DesignerTransaction.Cancel">
		<summary>
			<para>Cancels the transaction and attempts to roll back the
      changes made by the events of the transaction.</para>
		</summary>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction.OnCancel"/>
	</doc><doc for="DesignerTransaction.DesignerTransaction1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.Design.DesignerTransaction"/> class using the
   specified transaction description.</para>
		</summary>
		<param name="description">A description for this transaction.</param>
		<remarks>
			<para> This constructor initializes the
      transaction with the specified description.</para>
		</remarks>
	</doc><doc for="DesignerTransaction.Description">
		<summary>
			<para> Gets a description for the transaction.</para>
		</summary>
		<value>
			<para>A description for the transaction.</para>
		</value>
		<remarks>
			<para>A transaction can have a description that is useful in identifying the
 nature of the operation or operations.</para>
		</remarks>
	</doc><doc for="DesignerTransaction.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.ComponentModel.Design.DesignerTransaction"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.ComponentModel.Design.DesignerTransaction"/> and 
   optionally releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the 
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.ComponentModel.Design.DesignerTransaction"/> references. This method invokes
the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc>
	<doc for="DesignerTransaction.Canceled">
		<summary>
			<para> Gets a value indicating whether the transaction was canceled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the transaction was canceled; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When a designer transaction is canceled, the transaction processing mechanism 
      attempts to roll back the changes that have been made so far in the transaction.
      Whether this succeeds is dependent upon such factors as the type of each
      operation, whether other operations interfered with any of the involved
      code's state, and whether a sequence of expected operations failed to complete. </para>
		</remarks>
	</doc>
	<doc for="DesignerTransaction.OnCancel">
		<summary>
			<para>Raises the <see langword="Cancel "/> event.</para>
		</summary>
		<remarks>
			<para>When a designer transaction is canceled, the transaction processing mechanism 
      attempts to roll back the changes that have been made so far in the transaction.
      Whether this succeeds is dependent upon such factors as the type of each
      operation, whether other operations interfered with any of the involved code's
      state, and whether a sequence of expected operations failed to complete. </para>
			<note type="inheritinfo">
      When implemented in a
      derived class, this method cancels a transaction.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction.Cancel"/>
	</doc>
	<doc for="DesignerTransaction.Committed">
		<summary>
			<para> Gets a value indicating whether the transaction was committed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the transaction was committed; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para> When a designer transaction is committed, the transaction is
      considered complete, and does not track further changes.</para>
		</remarks>
	</doc>
	<doc for="DesignerTransaction.Commit">
		<summary>
			<para> Commits this transaction.</para>
		</summary>
		<remarks>
			<para>When a designer transaction is committed, the transaction is considered 
      complete, and does not track further changes.</para>
			<para>Once a transaction has been committed, further calls to this method do 
      nothing. Always call this method after creating a transaction, to ensure that
      the transaction closes properly.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction.OnCommit"/>
	</doc>
	<doc for="DesignerTransaction.OnCommit">
		<summary>
			<para> Raises the <see langword="Commit "/>
event.</para>
		</summary>
		<remarks>
			<para>When a designer transaction is committed, the transaction is considered
      complete, and does not track further changes.</para>
			<note type="inheritinfo">
      When implemented
      in a derived class,
      this method performs work associated with processing the transaction.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.DesignerTransaction.Commit"/>
	</doc>
	<doc for="DesignerTransaction">
		<summary>
			<para> Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.</para>
		</summary>
		<remarks>
			<para> Transactions can track actions that can be
      undone later. Changes made during a transaction can be reversed
      by cancelling a transaction, which automatically attempts to reverse each change by
      setting each changed property to its pre-change value. Transactions can also
      improve performance during a series of operations by deferring updates to the display until the completion
      of the transaction.</para>
			<para> When a transaction is
      in progress, some components defer their processing until the transaction has completed
      by listening to the <see cref="System.ComponentModel.Design.IDesignerHost.TransactionOpening"/> and <see cref="System.ComponentModel.Design.IDesignerHost.TransactionClosed"/> events. The Properties
      window, for example, does not update its display after a transaction has opened
      until the transaction has closed.</para>
			<para> To use transactions for undoable or multiple operations,
      have your designer create a <see cref="System.ComponentModel.Design.DesignerTransaction"/>
      for each operation or series of operations which
      should be undoable. Be careful not to perform actions outside the transactions that might prevent
      a sequence of undo events from completing
      successfully. </para>
			<para> You
      can obtain a new <see cref="System.ComponentModel.Design.DesignerTransaction"/> by
      calling the <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction"/>
      method of an <see cref="System.ComponentModel.Design.IDesignerHost"/>. Be
      sure to obtain each <see cref="System.ComponentModel.Design.DesignerTransaction"/> from the
      active <see cref="System.ComponentModel.Design.IDesignerHost"/> in order to correctly integrate
      with the designer transaction processing mechanism, rather
      than creating a new <see cref="System.ComponentModel.Design.DesignerTransaction"/>
      directly. </para>
			<para> To perform
      an action within a transaction, you must
      first create a transaction. Then you must call the <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging"/> method
      before each
      change
      or set of changes occurs, and
      the <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged"/> method
      after
      each change or set of changes occur. Finally, complete and
      close the transaction by calling the <see cref="System.ComponentModel.Design.DesignerTransaction.Commit"/> method.</para>
			<note type="note">
      
      When making
      changes to property values, use the <see cref="System.ComponentModel.PropertyDescriptor.SetValue"/> method of a <see cref="System.ComponentModel.PropertyDescriptor"/> , which calls the component
      change methods of the <see cref="System.ComponentModel.Design.IComponentChangeService"/>
      and
      creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> representing the
      change automatically.
      
   </note>
			<para>To perform a transaction:
      </para>
			<list type="number"><item>
					<term>
         
         Call <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction"/> to obtain
         a <see cref="System.ComponentModel.Design.DesignerTransaction"/> that
         can be used to control the transaction.</term>
				</item>
				<item>
					<term>
         
         Within a <see langword="try"/>
         block,
         for each action that you want to track with a <see cref="System.ComponentModel.Design.DesignerTransaction"/>, call the
      <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging"/>
      event, make the change or changes, then call the
   <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged"/> event to 
      signal that the change or changes have been made.</term>
				</item>
				<item>
					<term>
      
      To complete the transaction, call <see cref="System.ComponentModel.Design.DesignerTransaction.Commit"/> from within
      a <see langword="finally"/>
      block.</term>
				</item>
			</list>
			<para>In C#, you can use the <see langword="using"/> statement rather than a
<see langword="try...finally"/> 
block, such as in the following example.</para>
			<code>
using (host.CreateTransaction() {

// do work here

}
</code>
			<para> To cancel and attempt to roll back a transaction before
   it has been committed, call the <see cref="System.ComponentModel.Design.DesignerTransaction.Cancel"/> method. When the <see cref="System.ComponentModel.Design.DesignerTransaction.Cancel"/> method is invoked, the actions
   tracked by the <see cref="System.ComponentModel.Design.DesignerTransaction"/> are reversed to attempt to roll
   back the changes. To undo actions which occurred as part of earlier
   transactions, you must use the undo command provided by the development
   environment. </para>
		</remarks>
		<example>
			<para> The following example program demonstrates how to create
      a <see cref="System.ComponentModel.Design.DesignerTransaction"/>
      from a designer. The designer can
      optionally display notifications about designer transaction events. To run this sample, compile the source
      code into a class library, add a reference to the compiled DLL to a project and
      add the component in the library to the Toolbox by right-clicking the
      toolbox, clicking <see langword="Customize Toolbox"/>, and selecting the .dll
      file that contains the DTComponent sample. Add an instance of the DTComponent to
      a form while in design mode, and a message box appears asking whether you would
      like to receive designer transaction event notifications. You may toggle these
      notifications using the shortcut menu that appears when you right-click an
      instance of the DTComponent. Transactions are created when you change values
      using the Properties window. You can also have the designer perform a
      transaction by clicking <see langword="Perform Example Transaction"/>
      
      on the shortcut menu
      for the component.</para>
			<codelink SampleID="DesignerTransaction Sample" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.IDesignerHost"/>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="DesignerTransaction.Finalize">
		<summary>
			<para>Releases the resources associated with this object. This override commits this transaction if
      it was not already committed.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/> and cleans up resources by calling
<see langword="Dispose(false)"/>. Override <see langword="Dispose(Boolean)"/> to 
   customize the cleanup.</para>
			<para>Application code should not call this method; an object's
<see langword="Finalize"/> method is automatically invoked during garbage 
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/> method.</para>
			<para>For more information, see <see topic="cpconfinalizemethodscdestructors"/>,
<see topic="cpconcleaningupunmanagedresources"/>, and 
<see topic="cpconoverridingfinalizemethod"/>. </para>
		</remarks>
	</doc>
</docs>
