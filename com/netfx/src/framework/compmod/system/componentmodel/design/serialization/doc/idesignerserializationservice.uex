<docs>
	<doc for="IDesignerSerializationService.Deserialize">
		<summary>
			<para>Deserializes the specified serialization data object and
      returns a collection of objects represented by that
      data.</para>
		</summary>
		<param name="serializationData">An object consisting of serialized data.</param>
		<returns>
			<para>An <see cref="System.Collections.ICollection"/> of objects rebuilt from the specified
   serialization data object.</para>
		</returns>
	</doc><doc for="IDesignerSerializationService.Serialize">
		<summary>
			<para> Serializes the specified collection of objects and stores them in a
      serialization data object.</para>
		</summary>
		<param name="objects">A collection of objects to serialize.</param>
		<returns>
			<para>An object that contains the serialized state of the specified
      collection of objects.</para>
		</returns>
		<remarks>
			<para> The returned object fully supports run-time serialization.</para>
			<para> The object returned from this method contains
      live references to objects in the collection. This object can then be passed to any
      run-time serialization mechanism. The object itself serializes components the
      same way designers write source for them, by storing their state, property by
      property.</para>
		</remarks>
	</doc><doc for="IDesignerSerializationService">
		<summary>
			<para> Provides
      an
      interface that
      can invoke serialization and deserialization.</para>
		</summary>
		<remarks>
			<para> This service provides
      methods
      to convert a collection of objects to a serializable object that represents them,
      and to convert serialization data to the object or objects that it
      represents.</para>
			<para> All components that support a designer must support serialization
      of each component's type. This occurs when the designer
      scans the public properties, methods, and events of each type and represents
      these within a type descriptor.</para>
			<para> This interface uses the technique of scanning members
      to convert a collection of components into a single object that
      supports run-time serialization. This does not necessarily provide for the serialization of
      custom types that belong to the class. Many objects require a custom serializer to have
      their values serialized at run time. To specify a serializer for a custom
      type, use a <see cref="System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"/> attribute or
      implement an <see cref="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"/>
		<seealso cref="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider"/>
	</doc>
</docs>
