<docs>
	<doc for="ICompoundActionUnit">
		<summary>
			<para>
       Represents a series of action units that should be treated as a single atomic
       action.
    </para>
		</summary>
		<remarks>
			<para>
       Undoing or redoing this action will cause all of the child actions to be done
       or undone in the appropriate order.
    </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IUndoService"/>
		<seealso cref="System.ComponentModel.Design.IActionUnit"/>
	</doc>
	<doc for="ICompoundActionUnit.CanAddChildren">
		<summary>
			<para>Gets or sets a value indicating whether
       or not this compound action is in a state that can recieve child actions.</para>
		</summary>
		<value>
			<para><see langword="true"/> if children 
    can be added; otherwise <see langword="false"/>.</para>
		</value>
		<seealso cref="System.ComponentModel.Design.ICompoundActionUnit.Add"/>
	</doc>
	<doc for="ICompoundActionUnit.ChildCount">
		<summary>
			<para>
       Gets the current number of child actions this compound action contains.
    </para>
		</summary>
		<returns>
			<para>
       The current number of child actions contained in this compound action.
    </para>
		</returns>
	</doc>
	<doc for="ICompoundActionUnit.GetChildren">
		<summary>
			<para>
       Gets
       an array of the child actions, if any exist.
    </para>
		</summary>
		<returns>
			<para>
       An array of type <see cref="System.ComponentModel.Design.IActionUnit"/>
       that represents the child items. If no child actions
       exist, a zero-length array is returned.
    </para>
		</returns>
		<seealso cref="System.ComponentModel.Design.ICompoundActionUnit.GetChild"/>
	</doc>
	<doc for="ICompoundActionUnit.Add">
		<summary>
			<para> Adds a child unit to this compound event.
      </para>
		</summary>
		<param name="childAction">The <see cref="System.ComponentModel.Design.IActionUnit"/> child to add. </param>
		<remarks>
			<para> Child units will be executed in the order added and
      undone in the reverse order. If this compound action is in a state so that it cannot
      accept children, an exception is thrown.
      </para>
		</remarks>
	</doc><doc for="ICompoundActionUnit.GetChild">
		<summary>
			<para>Gets the child action at
      the specified index.</para>
		</summary>
		<param name="index">The zero-based index of the child to retrieve.</param>
		<returns>
			<para>The <see cref="System.ComponentModel.Design.IActionUnit"/> at the specified index.</para>
		</returns>
		<exception cref="T:System.ArgumentException">The index is less than zero or greater than the number of children.</exception>
		<remarks>
			<para>If the specified index is less than zero or greater than 
      the number of children, an <see cref="System.ArgumentException"/>
      is thrown. Index zero correpsonds to the first child added to
      the compound action.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ICompoundActionUnit.GetChildren"/>
	</doc><doc for="ICompoundActionUnit.Remove">
		<summary>
			<para> Removes a child item from this compound action.
      </para>
		</summary>
		<param name="childAction">The <see cref="System.ComponentModel.Design.IActionUnit"/> action to remove. </param>
		<exception cref="System.ArgumentException">The child to remove is not a child of the compound action. </exception>
		<remarks>
			<para> If this action is not the parent of the child action, 
      an <see cref="System.ArgumentException"/> is
      thrown.
      </para>
		</remarks>
	</doc></docs>
