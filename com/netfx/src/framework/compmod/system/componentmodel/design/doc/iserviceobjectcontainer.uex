<docs>
	<doc for="IServiceContainer.AddService1">
		<summary>
			<para>Adds the specified service to the service container, and optionally
      promotes the service to any parent service containers.</para>
		</summary>
		<param name="serviceType">The type of service to add.</param>
		<param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType"/> parameter. </param>
		<param name="promote"><see langword="true"/> to promote this request to any parent service containers; otherwise, <see langword="false"/>.</param>
	</doc><doc for="IServiceContainer.AddService3">
		<summary>
			<para> Adds the specified service to the service container, and optionally
 promotes the service to parent service containers.</para>
		</summary>
		<param name="serviceType">The type of service to add.</param>
		<param name="callback"> A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
		<param name="promote"><see langword="true"/> to promote this request to any parent service containers; otherwise, <see langword="false"/>.</param>
	</doc><doc for="IServiceContainer.AddService">
		<overload>
			<para>Adds the specified service to the service container.</para>
		</overload>
		<summary>
			<para>Adds the specified service to the service container.</para>
		</summary>
		<param name="serviceType">The type of service to add.</param>
		<param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType"/> parameter.</param>
		<example>
			<para>The following example illustrates how to add a service to 
      an <see cref="System.ComponentModel.Design.IServiceContainer"/>
      .</para>
			<codelink SampleID="ServiceContainerExample" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IServiceContainer.AddService2">
		<summary>
			<para>Adds the specified service to the service container.</para>
		</summary>
		<param name="serviceType">The type of service to add.</param>
		<param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
		<example>
			<para>The following example illustrates how to add a service to 
      an <see cref="System.ComponentModel.Design.IServiceContainer"/>
      .</para>
			<codelink SampleID="ServiceContainerExample" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IServiceContainer.RemoveService">
		<overload>
			<para>Removes the specified service type from the service container.</para>
		</overload>
		<summary>
			<para>Removes the specified service type from the service container.</para>
		</summary>
		<param name="serviceType">The type of service to remove.</param>
		<example>
			<para>The following example illustrates how to remove a service from an 
   <see cref="System.ComponentModel.Design.IServiceContainer"/>.</para>
			<codelink SampleID="ServiceContainerExample" SnippetID="4"/>
		</example>
	</doc>
	<doc for="IServiceContainer">
		<summary>
			<para>Provides a container for services.</para>
		</summary>
		<remarks>
			<para> A service container is, by definition, a service
      provider. In addition to providing services, it also provides a mechanism for
      adding and removing services. Services are a foundation of the .NET
      Framework design-time architecture. Services provide design-time objects access to specific features
      and methods implemented by a service object that provides a service or
      services.</para>
			<para>To obtain a service at design time, call the <see cref="System.ComponentModel.Component.GetService"/>
method of a component sited in design mode. Designers and other objects can
add or remove services at design time
through the <see cref="System.ComponentModel.Design.IDesignerHost"/>
interface.</para>
			<para>Service containers can be contained by other
   service containers, forming a tree of service containers. By default,
   the <see cref="System.ComponentModel.Design.IServiceContainer"/>
   interface adds services to
   the closest service container. When a service is added, it can be added with
   instructions to promote it. When a service is promoted, it is added to any parent service
   container, on up until the top of the service container tree is reached. This
   allows a designer to provide a global service that other objects in the process
   can use.</para>
		</remarks>
		<example>
			<codelink SampleID="IServiceContainerExample" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.IDesignerHost"/>
		<seealso cref="System.IServiceProvider"/>
	</doc>
	<doc for="IServiceContainer.RemoveService1">
		<summary>
			<para> Removes the specified service type from
      the service container, and optionally promotes the service to parent service containers.</para>
		</summary>
		<param name="serviceType">The type of service to remove.</param>
		<param name="promote"><see langword="true"/> to promote this request to any parent service containers; otherwise, <see langword="false"/>.</param>
		<example>
			<codelink SampleID="ServiceContainerExample" SnippetID="4"/>
		</example>
	</doc>
</docs>
