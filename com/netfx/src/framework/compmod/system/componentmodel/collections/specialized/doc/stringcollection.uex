<docs>
    <doc for="StringCollection">
        <summary>
            <para>Represents a collection of strings.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type
   are safe for multithreaded operations. Instance members are not guaranteed to be
   thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for
   a <see cref="System.Collections.Specialized.StringCollection" />, but derived classes can create
   their own synchronized versions of the <see cref="System.Collections.Specialized.StringCollection" /> using the
<see cref="System.Collections.Specialized.StringCollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
        </threadsafe>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
            <para>String comparisons are case-sensitive.</para>
            <para>Indexes in this collection are zero-based.</para>
        </remarks>
    </doc><doc for="StringCollection.this">
        <summary>
            <para>Gets or sets the element at the specified index.</para>
        </summary>
        <param name="index">
            <para> The zero-based index of the entry to get or set.</para>
        </param>
        <value>
            <para> The element at the specified index.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.Specialized.StringCollection.Count" />.</para></exception>
<remarks>
            <para>This property provides the ability to access a specific element in the
      collection by using the following syntax: <c>myCollection[index]</c>.</para>
            <para><see cref="System.Collections.Specialized.StringCollection" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
    </doc><doc for="StringCollection.Count">
        <summary>
            <para>Gets the number of strings contained in the
 <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <value>
            <para>The number of strings contained in the
 <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </value>
    </doc><doc for="StringCollection.IList.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether
      the <see cref="System.Collections.Specialized.StringCollection" /> is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.Specialized.StringCollection" /> is read-only; otherwise,
   <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="StringCollection.IList.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.StringCollection" /> has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.Specialized.StringCollection" /> has a fixed size;
   otherwise, <see langword="false" />. The default is <see langword="false" />. </para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="StringCollection.Add">
        <summary>
            <para> Adds a string to the end of the
   <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The string to add to the end of the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index at which the new element is inserted.</para>
        </returns>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.AddRange" />
        <seealso cref="System.Collections.Specialized.StringCollection.IsReadOnly" />
    </doc><doc for="StringCollection.AddRange">
        <summary>
            <para>Copies the elements of a string array to the end of the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">An array of strings to add to the end of the <see cref="System.Collections.Specialized.StringCollection" />. The array itself can not be <see langword="null" /> but it can contain elements that are <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.Add" />
        <seealso cref="System.Collections.Specialized.StringCollection.IsReadOnly" />
    </doc><doc for="StringCollection.Clear">
        <summary>
            <para>Removes all the strings from the 
    <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection.Count" /> is set to zero.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
    </doc><doc for="StringCollection.Contains">
        <summary>
            <para>Determines whether the specified string is in the
   <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The string to locate in the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</param>
        <returns>
            <para><see langword="true" /> if
<paramref name="value" /> is found in the <see cref="System.Collections.Specialized.StringCollection" />;
   otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.Collections.Specialized.StringCollection.Contains" /> method can confirm the existence of a string
   before performing further operations.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringCollection.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />. String
comparisons are case-sensitive.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.IndexOf" />
    </doc><doc for="StringCollection.CopyTo">
        <summary>
            <para>Copies the entire <see cref="System.Collections.Specialized.StringCollection" /> values to a 
   one-dimensional array of strings, starting at the specified
   index of the
   target array.</para>
        </summary>
        <param name="array">
            <para>The one-dimensional array of strings that is the destination of the elements copied from <see cref="System.Collections.Specialized.StringCollection" />. The <see cref="System.Array" /> must have zero-based indexing.</para>
        </param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.Specialized.StringCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.Specialized.StringCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type. </para>
            <para>The elements are copied to the <see cref="System.Array" /> in the same order in which the enumerator of the <see cref="System.Collections.Specialized.StringCollection" />
iterates through the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </remarks>
        <seealso cref="System.Array" />
        <seealso cref="System.Collections.Specialized.StringCollection.GetEnumerator" />
    </doc><doc for="StringCollection.GetEnumerator">
        <summary>
            <para>Returns a <see cref="System.Collections.Specialized.StringEnumerator" /> that can iterate through
   the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <returns>
            <para> A <see cref="System.Collections.Specialized.StringEnumerator" /> for the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </returns>
        <remarks>
            <para>Enumerators are intended to be used only to read data in
      the collection. Enumerators cannot be used to modify the underlying
      collection.</para>
            <para> The enumerator does not have exclusive access to the collection.</para>
            <para>When an enumerator is created, it takes a snapshot of the current state
      of the collection. If changes are made to the collection, such as adding,
      modifying or deleting elements, the snapshot gets out of sync and the enumerator
      throws an <see cref="System.InvalidOperationException" />. Two enumerators created from the same collection
      at the same time can have different snapshots of the collection.</para>
            <para>The enumerator is in an invalid state if it is positioned before the first
      element in the collection or after the last element in the collection. Whenever
      the enumerator is in an invalid state, calling <see cref="System.Collections.IEnumerator.Current" /> throws an
      exception.</para>
            <para>Initially, the enumerator is positioned before the first element in the
      collection. <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back
      to this position. Therefore, after an enumerator is created or after a <see cref="System.Collections.IEnumerator.Reset" />, <see cref="System.Collections.IEnumerator.MoveNext" /> must be called
      to advance the enumerator to the first element of the collection before reading
      the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until
   either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
            <para>After the end of the collection is passed, the enumerator is again in an
   invalid state and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
   Calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception if the last
   call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="StringCollection.IndexOf">
        <summary>
            <para>Searches for the specified string and returns the zero-based index of the first occurrence within
      the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The string to locate. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of
   <paramref name="value" /> in the
   <see cref="System.Collections.Specialized.StringCollection" />, if found; otherwise, -1.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringCollection.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />. String comparisons
are case-sensitive.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.Contains" />
    </doc><doc for="StringCollection.Insert">
        <summary>
            <para>Inserts a string into the <see cref="System.Collections.Specialized.StringCollection" /> at the specified
   index.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> is inserted.</param>
        <param name="value">The string to insert. The value can be <see langword="null" />.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> greater than <see cref="System.Collections.Specialized.StringCollection.Count" />.</para></exception>
<remarks>
            <para>Duplicate strings are allowed in <see cref="System.Collections.Specialized.StringCollection" />.</para>
            <para>If <paramref name="index" /> is equal to <see cref="System.Collections.Specialized.StringCollection.Count" />, <paramref name="value" />
is added to the end of <see cref="System.Collections.Specialized.StringCollection" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accomodate the new element.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
        <seealso cref="System.Collections.Specialized.StringCollection.Add" />
    </doc><doc for="StringCollection.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.StringCollection" /> is read-only.</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection" /> implements the <see cref="System.Collections.Specialized.StringCollection.IsReadOnly" /> property
   because it is required by the <see cref="T:System.Collections.IList" qualify="true" /> interface.</para>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            <para>A <see cref="System.Collections.Specialized.StringCollection" /> instance is always writable.</para>
        </remarks>
    </doc><doc for="StringCollection.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the
   <see cref="System.Collections.Specialized.StringCollection" />
   is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection" /> implements the <see cref="System.Collections.Specialized.StringCollection.IsSynchronized" /> property 
   because it is required by the <see cref="T:System.Collections.ICollection" qualify="true" /> interface.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows
   how to lock the collection using the <see cref="System.Collections.Specialized.StringCollection.SyncRoot" /> during the
   entire enumeration:</para>
            <code lang="C#">StringCollection myCollection = new StringCollection();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New StringCollection()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.SyncRoot" />
    </doc><doc for="StringCollection.Remove">
        <summary>
            <para> Removes the first occurrence of a specific string from the
   <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The string to remove from the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</param>
        <remarks>
            <para>Duplicate strings are allowed in <see cref="System.Collections.Specialized.StringCollection" />. Only the first
   occurrence is removed. To remove all occurrences of the specified string,
   use <c>RemoveAt(IndexOf(value))</c>
repeatedly while <see cref="System.Collections.Specialized.StringCollection.IndexOf" /> does not return
-1.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringCollection.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />. String comparisons
are case-sensitive.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc><doc for="StringCollection.RemoveAt">
        <summary>
            <para>Removes the string at the specified index of the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="index">The zero-based index of the string to remove.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.Specialized.StringCollection.Count" />.</para></exception>
<remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc><doc for="StringCollection.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </value>
        <remarks>
            <para> Derived classes can provide their own synchronized version of the <see cref="System.Collections.Specialized.StringCollection" /> using the <see cref="System.Collections.Specialized.StringCollection.SyncRoot" /> property.
   The synchronizing code must perform operations on the <see cref="System.Collections.Specialized.StringCollection.SyncRoot" /> of the <see cref="System.Collections.Specialized.StringCollection" />,
   not directly on the <see cref="System.Collections.Specialized.StringCollection" />. This ensures proper operation of collections that are derived from other objects.
   Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.Specialized.StringCollection" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Specialized.StringCollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">StringCollection myCollection = new StringCollection();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New StringCollection()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.IsSynchronized" />
    </doc><doc for="StringCollection.IList.this">
        <summary>
            <para>Gets or sets the element at the specified index.</para>
        </summary>
        <param name="index">The zero-based index of the element to get or set.</param>
        <value>
            <para>The element at the specified index.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.Specialized.StringCollection.Count" />.</para></exception>
<remarks>
            <para>This property provides the ability to access a specific element in the
      collection by using the following syntax: <c>myCollection[index]</c>.</para>
            <para><see cref="System.Collections.Specialized.StringCollection" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
    </doc><doc for="StringCollection.IList.Add">
        <summary>
            <para>Adds an object to the end of the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to be added to the end of the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The <see cref="System.Collections.Specialized.StringCollection" /> index at which the <paramref name="value" /> has
   been added.</para>
        </returns>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.Specialized.StringCollection" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.Specialized.StringCollection" /> has a fixed size.</para></exception>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringCollection" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
            <para>If <see cref="System.Collections.Specialized.StringCollection.Count" /> already equals
the capacity, the capacity of the list is
doubled by automatically reallocating
the internal array and copying the existing elements to the new
array before the new element is added.</para>
            <para>If <see cref="System.Collections.Specialized.StringCollection.Count" /> is less than
the capacity, this method is an O(1)
operation. If the capacity needs to be increased to accommodate the
new element, this method becomes an O(<paramref name="n" />) operation, where <paramref name="n" /> is
<see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.Insert" />
        <seealso cref="M:System.Collections.IList.Remove" />
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
    </doc><doc for="StringCollection.IList.Contains">
        <summary>
            <para>Determines whether an element is in the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">
            <para>The <see cref="System.Object" /> to locate in the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</para>
        </param>
        <returns>
            <para><see langword="true" /> if <paramref name="value" /> is found in the <see cref="System.Collections.Specialized.StringCollection" />;
   otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringCollection.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
            <para> This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.IndexOf" />
    </doc><doc for="StringCollection.IList.IndexOf">
        <summary>
            <para>Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="System.Collections.Specialized.StringCollection" />, if found; otherwise, -1.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.Collections.Specialized.StringCollection" /> is searched forward starting at the first element and ending at the last element.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringCollection.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.Contains" />
    </doc><doc for="StringCollection.IList.Insert">
        <summary>
            <para>Inserts an element into the <see cref="System.Collections.Specialized.StringCollection" />
at the specified index.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
        <param name="value">
            <para>The <see cref="System.Object" /> to insert. The value can be <see langword="null" />.</para>
        </param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is greater than <see cref="System.Collections.Specialized.StringCollection.Count" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.Specialized.StringCollection" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.Specialized.StringCollection" /> has a fixed size.</para></exception>
<remarks>
            <para>If <see cref="System.Collections.Specialized.StringCollection.Count" /> already equals
   the capacity, the
   capacity of the list is doubled by automatically reallocating the internal
   array before the new element is inserted.</para>
            <para>If <paramref name="index" /> is equal to <see cref="System.Collections.Specialized.StringCollection.Count" />, <paramref name="value" /> is added to the end of
<see cref="System.Collections.Specialized.StringCollection" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accomodate the new element.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.Add" />
        <seealso cref="M:System.Collections.IList.Remove" />
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
    </doc><doc for="StringCollection.IList.Remove">
        <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to remove from the <see cref="System.Collections.Specialized.StringCollection" />. The value can be <see langword="null" />.</param>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.Specialized.StringCollection" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.Specialized.StringCollection" /> has a fixed size.</para></exception>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringCollection.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringCollection.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.Add" />
        <seealso cref="M:System.Collections.IList.Insert" />
        <seealso cref="System.Collections.Specialized.StringCollection.Count" />
    </doc><doc for="StringCollection.ICollection.CopyTo">
        <summary>
            <para>Copies the entire <see cref="System.Collections.Specialized.StringCollection" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the specified index of the target array.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.Specialized.StringCollection" />. The <see cref="System.Array" /> must have zero-based indexing. </param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.Specialized.StringCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.Specialized.StringCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type. </para>
            <para>This method uses <see cref="System.Array.Copy" qualify="true" /> to copy the elements.</para>
        </remarks>
    </doc><doc for="StringCollection.IEnumerable.GetEnumerator">
        <summary>
            <para>Returns a <see cref="System.Collections.IEnumerator" /> that can iterate through
   the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <returns>
            <para> A <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </returns>
        <remarks>
            <para>Enumerators are intended to be used only to read data in
      the collection. Enumerators cannot be used to modify the underlying
      collection.</para>
            <para> The enumerator does not have exclusive access to the collection.</para>
            <para>When an enumerator is created, it takes a snapshot of the current state
      of the collection. If changes are made to the collection, such as adding,
      modifying or deleting elements, the snapshot gets out of sync and the enumerator
      throws an <see cref="System.InvalidOperationException" />. Two enumerators created from the same collection
      at the same time can have different snapshots of the collection.</para>
            <para>The enumerator is in an invalid state if it is positioned before the first
      element in the collection or after the last element in the collection. Whenever
      the enumerator is in an invalid state, calling <see cref="System.Collections.IEnumerator.Current" /> throws an
      exception.</para>
            <para>Initially, the enumerator is positioned before the first element in the
      collection. <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back
      to this position. Therefore, after an enumerator is created or after a <see cref="System.Collections.IEnumerator.Reset" />, <see cref="System.Collections.IEnumerator.MoveNext" /> must be called
      to advance the enumerator to the first element of the collection before reading
      the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until
   either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
            <para>After the end of the collection is passed, the enumerator is again in an
   invalid state and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
   Calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception if the last
   call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="StringEnumerator">
        <summary>
            <para>Supports a simple iteration over a <see cref="System.Collections.Specialized.StringCollection" />.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type
   are safe for multithreaded operations. Instance members are not guaranteed to be
   thread-safe.</para>
        </threadsafe>
        <remarks>
            <para>Enumerators only allow reading the data in the collection.
      Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
   <see cref="System.Collections.Specialized.StringEnumerator.Reset" /> also brings the enumerator back to this position.
      At this position, calling <see cref="System.Collections.Specialized.StringEnumerator.Current" /> throws an exception.
      Therefore, you must call <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
      before reading the value of <see cref="System.Collections.Specialized.StringEnumerator.Current" />.</para>
            <para><see cref="System.Collections.Specialized.StringEnumerator.Current" /> returns the same object until either <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> or <see cref="System.Collections.Specialized.StringEnumerator.Reset" /> is called.
<see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> sets <see cref="System.Collections.Specialized.StringEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> returns <see langword="false" />.
If the last call to <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.Specialized.StringEnumerator.Current" /> throws an exception.
To set <see cref="System.Collections.Specialized.StringEnumerator.Current" /> to the first element of the collection again,
you can call <see cref="System.Collections.Specialized.StringEnumerator.Reset" /> followed by <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
   If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
   and the next call to <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> or <see cref="System.Collections.Specialized.StringEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />.
   If the collection is modified between <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> and <see cref="System.Collections.Specialized.StringEnumerator.Current" />,
<see cref="System.Collections.Specialized.StringEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerable" />
        <seealso cref="System.Collections.IEnumerator" />
        <seealso cref="System.Collections.Specialized.StringCollection" />
    </doc><doc for="StringEnumerator.Current">
        <summary>
            <para>Gets the current element in the collection.</para>
        </summary>
        <value>
            <para>The current element in the collection.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The enumerator is positioned before the first element of the collection or after the last element.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a <see cref="System.Collections.Specialized.StringEnumerator.Reset" />, <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> must be called to advance the
   enumerator to the first element of the collection before reading the value of
<see cref="System.Collections.Specialized.StringEnumerator.Current" />; otherwise, <see cref="System.Collections.Specialized.StringEnumerator.Current" /> is undefined.</para>
            <para><see cref="System.Collections.Specialized.StringEnumerator.Current" /> also throws an exception if the
last call to <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> returned <see langword="false" />,
which indicates the end of the collection.</para>
            <para><see cref="System.Collections.Specialized.StringEnumerator.Current" /> does not move the position of
the enumerator and consecutive calls to <see cref="System.Collections.Specialized.StringEnumerator.Current" /> return the
same object until either <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> or <see cref="System.Collections.Specialized.StringEnumerator.Reset" /> is called.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
   If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
   and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />.
   If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
<see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringEnumerator.MoveNext" />
        <seealso cref="System.Collections.Specialized.StringEnumerator.Reset" />
        <seealso cref="System.Collections.IEnumerator.Current" qualify="true" />
    </doc><doc for="StringEnumerator.MoveNext">
        <summary>
            <para>Advances the enumerator to the next element of the collection.</para>
        </summary>
        <returns>
            <para><see langword="true" /> if the enumerator was successfully advanced to the next element;
<see langword="false" /> if the enumerator has passed the end of the collection.</para>
        </returns>
        <exception cref="System.InvalidOperationException"><para>The collection was modified after the enumerator was created.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a call to <see cref="System.Collections.Specialized.StringEnumerator.Reset" />, an
   enumerator is positioned before the first element of the collection, and the
   first call to <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" />
   moves the enumerator over the first element of the collection.</para>
            <para>After the end of the collection is passed, subsequent calls to <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" />
return <see langword="false" /> until <see cref="System.Collections.Specialized.StringEnumerator.Reset" /> is called.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
   If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
   and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />.
   If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
<see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringEnumerator.Current" />
        <seealso cref="System.Collections.Specialized.StringEnumerator.Reset" />
        <seealso cref="System.Collections.IEnumerator.MoveNext" qualify="true" />
    </doc><doc for="StringEnumerator.Reset">
        <summary>
            <para>Sets the enumerator to its initial position, which is before
       the first element in the collection.</para>
        </summary>
        <exception cref="System.InvalidOperationException"><para>The collection was modified after the enumerator was created.</para></exception>
        <remarks>
            <para><see cref="System.Collections.Specialized.StringEnumerator.Reset" /> moves the
    enumerator to the beginning of the collection, before the first
    element. After <see cref="System.Collections.Specialized.StringEnumerator.Reset" />, <see cref="System.Collections.Specialized.StringEnumerator.MoveNext" /> must be
    called to advance the enumerator to the first element of the collection before
    reading the value of <see cref="System.Collections.Specialized.StringEnumerator.Current" />.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringEnumerator.MoveNext" />
        <seealso cref="System.Collections.Specialized.StringEnumerator.Current" />
        <seealso cref="System.Collections.IEnumerator.Reset" qualify="true" />
    </doc>
</docs>
