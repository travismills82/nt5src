<docs>
    <doc for="HybridDictionary">
        <summary>
            <para>Implements <see langword="IDictionary" /> by using a <see cref="System.Collections.Specialized.ListDictionary" /> while the collection is small,
   and then switching to
   a <see cref="System.Collections.Hashtable" /> when the collection gets large.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type
   are safe for multithreaded operations. Instance members are not guaranteed to be
   thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for
   a <see cref="System.Collections.Specialized.HybridDictionary" />, but derived classes can create their own
   synchronized versions of the <see cref="System.Collections.Specialized.HybridDictionary" /> using the <see cref="System.Collections.Specialized.HybridDictionary.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
        </threadsafe>
        <remarks>
            <para> This class is recommended for cases where the number of
      elements in a dictionary is unknown. It takes advantage of the improved
      performance of a <see cref="System.Collections.Specialized.ListDictionary" /> with
      small collections, and offers the flexibility of switching to a
   <see cref="System.Collections.Hashtable" /> which handles larger collections better than
   <see cref="System.Collections.Specialized.ListDictionary" />.</para>
            <para>If the initial size of the collection is greater than the optimal size for a
   <see cref="System.Collections.Specialized.ListDictionary" />, the collection is stored in a 
   <see cref="System.Collections.Hashtable" /> right away to avoid the overhead of copying 
      elements from the <see cref="System.Collections.Specialized.ListDictionary" /> to a <see cref="System.Collections.Hashtable" />.</para>
            <para> The constructor accepts a Boolean parameter that
      allows the user to specify whether the
      collection ignores the case when comparing strings. If the collection is
      case-sensitive, it uses the key's implementations of <see cref="System.Object.GetHashCode" qualify="true" />
      and <see cref="System.Object.Equals" qualify="true" />. If the collection is case-insensitive, it
      performs a simple ordinal case-insensitive comparison, which obeys the casing
      rules of the invariant culture only. By default, the collection is
      case-sensitive. For more information on the invariant culture, see
   <see cref="System.Globalization.CultureInfo" qualify="true" />.</para>
            <para>A key cannot be <see langword="null" />, but a value can.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary" />
        <seealso cref="System.Collections.Specialized.ListDictionary" />
        <seealso cref="System.Collections.Hashtable" />
        <seealso cref="System.Collections.CaseInsensitiveHashCodeProvider" />
        <seealso cref="System.Object.GetHashCode" qualify="true" />
        <seealso cref="System.Object.Equals" qualify="true" />
    </doc><doc for="HybridDictionary.HybridDictionary1">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.Specialized.HybridDictionary" /> class.</para>
        </overload>
        <summary>
            <para>Creates an empty case-sensitive <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <remarks>
            <para>By default, the collection is case-sensitive and uses the key's 
 implementation of <see cref="System.Object.GetHashCode" qualify="true" /> as the hash code provider and the key's
 implementation of <see cref="System.Object.Equals" qualify="true" /> as the comparer.</para>
            <para>The comparer determines whether two keys are equal. Every key in a <see cref="System.Collections.Specialized.HybridDictionary" /> must be unique.</para>
        </remarks>
    </doc><doc for="HybridDictionary.HybridDictionary2">
        <summary>
            <para> Creates a case-sensitive <see cref="System.Collections.Specialized.HybridDictionary" /> with the specified initial size.</para>
        </summary>
        <param name="initialSize">The approximate number of entries that the <see cref="System.Collections.Specialized.HybridDictionary" /> can initially contain.</param>
        <remarks>
            <para>If the initial size of the collection is greater than the optimal size for a 
 <see cref="System.Collections.Specialized.ListDictionary" />, the collection is stored in a 
 <see cref="System.Collections.Hashtable" /> right away to avoid the overhead of copying 
 elements from the <see cref="System.Collections.Specialized.ListDictionary" /> to the <see cref="System.Collections.Hashtable" />.</para>
            <para>By default, the collection is case-sensitive and uses the key's 
 implementation of <see cref="System.Object.GetHashCode" qualify="true" /> as the hash code provider and the key's
 implementation of <see cref="System.Object.Equals" qualify="true" /> as the comparer.</para>
            <para>The comparer determines whether two keys are equal. Every key in a <see cref="System.Collections.Specialized.HybridDictionary" /> must be unique.</para>
        </remarks>
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.Object.Equals" qualify="true" />
    </doc><doc for="HybridDictionary.HybridDictionary3">
        <summary>
            <para>Creates an empty <see cref="System.Collections.Specialized.HybridDictionary" /> with the specified case sensitivity.</para>
        </summary>
        <param name="caseInsensitive">A Boolean that denotes whether the <see cref="System.Collections.Specialized.HybridDictionary" /> is case-insensitive.</param>
        <remarks>
            <para>If <paramref name="caseInsensitive" /> is <see langword="false" />, the
   collection uses the key's implementations of <see cref="System.Object.GetHashCode" qualify="true" /> and <see cref="System.Object.Equals" qualify="true" />. If <paramref name="caseInsensitive" /> is
<see langword="true" />, the collection performs a simple ordinal case-insensitive comparison, which obeys
   the casing rules of the invariant culture only. For more information
   on the invariant culture, see <see cref="System.Globalization.CultureInfo" qualify="true" />.</para>
        </remarks>
    </doc><doc for="HybridDictionary.HybridDictionary4">
        <summary>
            <para> Creates a <see cref="System.Collections.Specialized.HybridDictionary" /> with the specified initial size and case sensitivity.</para>
        </summary>
        <param name="initialSize">The approximate number of entries that the <see cref="System.Collections.Specialized.HybridDictionary" /> can initially contain.</param>
        <param name=" caseInsensitive">A Boolean that denotes whether the <see cref="System.Collections.Specialized.HybridDictionary" /> is case-insensitive.</param>
        <remarks>
            <para>If the initial size of the collection is greater than the optimal size for a
   <see cref="System.Collections.Specialized.ListDictionary" />, the collection is stored in a
   <see cref="System.Collections.Hashtable" /> right away to avoid the overhead of copying
      elements from the <see cref="System.Collections.Specialized.ListDictionary" /> to the <see cref="System.Collections.Hashtable" />.</para>
            <para>If <paramref name="caseInsensitive" /> is <see langword="false" />, the
   collection uses the key's implementations of <see cref="System.Object.GetHashCode" qualify="true" /> and <see cref="System.Object.Equals" qualify="true" />. If <paramref name="caseInsensitive" /> is
<see langword="true" />, the collection performs a simple ordinal case-insensitive comparison, which obeys
   the casing rules of the invariant culture only. For more information
   on the invariant culture, see <see cref="System.Globalization.CultureInfo" qualify="true" />.</para>
        </remarks>
    </doc><doc for="HybridDictionary.this">
        <summary>
            <para>Gets or sets the value associated with the specified key.</para>
        </summary>
        <param name="key">The key whose value to get or set.</param>
        <value>
            <para>The value associated with the specified key.
      If the specified key is not found, attempting to get it returns <see langword="null" />,
      and attempting to set it creates a new entry using the specified key.</para>
        </value>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>This property provides the ability to access a specific element in the collection by using the following syntax: <c>myCollection[key]</c>.</para>
            <para>When setting this property, if the specified key already exists in the <see cref="System.Collections.Specialized.HybridDictionary" />, the value is replaced;
   otherwise, a new element is created. In contrast, the <see cref="System.Collections.Specialized.HybridDictionary.Add" /> method does not modify existing elements.</para>
            <para>A key cannot be <see langword="null" />, but a value can.
 To distinguish between <see langword="null" /> that is returned because the specified key is not found
 and <see langword="null" /> that is returned because the value of the specified key is <see langword="null" />,
 use the <see cref="System.Collections.Specialized.HybridDictionary.Contains" /> method
 to determine if the key exists in the list.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.HybridDictionary.Add" />
    </doc><doc for="HybridDictionary.Count">
        <summary>
            <para>Gets the number of key-and-value pairs contained in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <value>
            <para>The number of key-and-value pairs contained in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </value>
    </doc><doc for="HybridDictionary.Keys">
        <summary>
            <para>Gets an <see cref="System.Collections.ICollection" /> containing the keys in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the keys in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the values in the <see cref="System.Collections.ICollection" /> is unspecified,
   but it is the same order as the associated values in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.Specialized.HybridDictionary.Values" /> method.</para>
            <para>The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the keys
 in the original <see cref="System.Collections.Specialized.HybridDictionary" />.
 Therefore, changes to the <see cref="System.Collections.Specialized.HybridDictionary" />
 continue to be reflected in the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.Specialized.HybridDictionary.Values" />
    </doc><doc for="HybridDictionary.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.HybridDictionary" /> is read-only.</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.HybridDictionary" /> implements the <see cref="System.Collections.Specialized.HybridDictionary.IsReadOnly" /> property
 because it is required by the <see cref="T:System.Collections.IDictionary" qualify="true" /> interface.</para>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="HybridDictionary.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.HybridDictionary" /> has a fixed size.</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.HybridDictionary" /> implements the <see cref="System.Collections.Specialized.HybridDictionary.IsFixedSize" /> property
 because it is required by the <see cref="T:System.Collections.IDictionary" qualify="true" /> interface.</para>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="HybridDictionary.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.HybridDictionary" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.HybridDictionary" /> implements the <see cref="System.Collections.Specialized.HybridDictionary.IsSynchronized" /> property
   because it is required by the <see cref="T:System.Collections.ICollection" qualify="true" /> interface.</para>
            <para> 
   Derived classes can provide a synchronized version of the <see cref="System.Collections.Specialized.HybridDictionary" /> using the <see cref="System.Collections.Specialized.HybridDictionary.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows
   how to lock the collection using the <see cref="System.Collections.Specialized.HybridDictionary.SyncRoot" /> during the entire
   enumeration:</para>
            <code lang="C#">HybridDictionary myCollection = new HybridDictionary();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New HybridDictionary()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Specialized.HybridDictionary.SyncRoot" />
    </doc><doc for="HybridDictionary.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </value>
        <remarks>
            <para> Derived classes can provide their own synchronized version of the <see cref="System.Collections.Specialized.HybridDictionary" /> using the <see cref="System.Collections.Specialized.HybridDictionary.SyncRoot" /> property.
   The synchronizing code must perform operations on the <see cref="System.Collections.Specialized.HybridDictionary.SyncRoot" /> of the <see cref="System.Collections.Specialized.HybridDictionary" />,
   not directly on the <see cref="System.Collections.Specialized.HybridDictionary" />. This ensures proper operation of collections that are derived from other objects.
   Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.Specialized.HybridDictionary" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe 
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows 
   how to lock the collection using the <see cref="System.Collections.Specialized.HybridDictionary.SyncRoot" /> during the entire
   enumeration:</para>
            <code lang="C#">HybridDictionary myCollection = new HybridDictionary();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New HybridDictionary()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Specialized.HybridDictionary.IsSynchronized" />
    </doc><doc for="HybridDictionary.Values">
        <summary>
            <para>Gets an <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the values in the <see cref="System.Collections.ICollection" /> is unspecified,
   but it is the same order as the associated keys in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.Specialized.HybridDictionary.Keys" /> method.</para>
            <para>The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the values
 in the original <see cref="System.Collections.Specialized.HybridDictionary" />.
 Therefore, changes to the <see cref="System.Collections.Specialized.HybridDictionary" />
 continue to be reflected in the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.Specialized.HybridDictionary.Keys" />
    </doc><doc for="HybridDictionary.Add">
        <summary>
            <para>Adds an entry with the specified key and value into the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <param name="key">The key of the entry to add.</param>
        <param name=" value">The value of the entry to add. The value can be <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="key" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><para>An entry with the same key already exists in the <see cref="System.Collections.Specialized.HybridDictionary" />.</para></exception>
<remarks>
            <para>An object that has no correlation between its state and its hash code value should typically not be used as the key.
      For example, String objects are better than StringBuilder objects for use as keys.</para>
            <para>A key cannot be <see langword="null" />, but a value can.</para>
            <para>The <see cref="System.Collections.Specialized.HybridDictionary.this" /> property can also be used to add new elements
by setting the value of a key that does not exist in the <see cref="System.Collections.Specialized.HybridDictionary" />.
For example: <c>myCollection["myNonexistentKey"] = myValue</c>.
However, if the specified key already exists in the <see cref="System.Collections.Specialized.HybridDictionary" />,
setting the <see cref="System.Collections.Specialized.HybridDictionary.this" /> property overwrites the old value.
In contrast, the <see cref="System.Collections.Specialized.HybridDictionary.Add" /> method does not modify existing elements.</para>
            <para>When the number of elements becomes greater than the optimal size for a
<see cref="System.Collections.Specialized.ListDictionary" />, the elements are copied from 
   the <see cref="System.Collections.Specialized.ListDictionary" /> to a <see cref="System.Collections.Hashtable" />. However, this
   only happens once. If the collection is already stored in a <see cref="System.Collections.Hashtable" />
   and the number of elements falls below the optimal size for a <see cref="System.Collections.Specialized.ListDictionary" />, the collection remains in the
<see cref="System.Collections.Hashtable" />.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.HybridDictionary.Remove" />
        <seealso cref="System.Collections.Specialized.HybridDictionary.this" />
        <seealso cref="System.Collections.IDictionary.Add" qualify="true" />
    </doc><doc for="HybridDictionary.Clear">
        <summary>
            <para>Removes all entries from the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.Specialized.HybridDictionary.Count" /> is set to zero.</para>
            <para>If the collection is already stored in a <see cref="System.Collections.Hashtable" />, the collection remains in 
the <see cref="System.Collections.Hashtable" />. </para>
        </remarks>
        <seealso cref="System.Collections.IDictionary.Clear" qualify="true" />
    </doc><doc for="HybridDictionary.Contains">
        <summary>
            <para>Determines whether the <see cref="System.Collections.Specialized.HybridDictionary" /> contains a specific key.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.Specialized.HybridDictionary" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.Specialized.HybridDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>This implementation is close to O(1) in most cases.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary" />
    </doc><doc for="HybridDictionary.CopyTo">
        <summary>
            <para>Copies the <see cref="System.Collections.Specialized.HybridDictionary" /> entries to a one-dimensional <see cref="System.Array" /> instance at the specified index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the <see cref="System.Collections.DictionaryEntry" /> objects copied from <see cref="System.Collections.Specialized.HybridDictionary" />. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <param name=" index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.Specialized.HybridDictionary" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.Specialized.HybridDictionary" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The elements are copied to the <see cref="System.Array" /> in the same order in which the enumerator iterates through the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
            <para>To copy only the keys in the <see cref="System.Collections.Specialized.HybridDictionary" />, use <c>HybridDictionary.Keys.CopyTo</c>.</para>
            <para>To copy only the values in the <see cref="System.Collections.Specialized.HybridDictionary" />, use <c>HybridDictionary.Values.CopyTo</c>.</para>
        </remarks>
        <seealso cref="System.Array" />
        <seealso cref="System.Collections.DictionaryEntry" />
        <seealso cref="System.Collections.Specialized.HybridDictionary.GetEnumerator" />
    </doc><doc for="HybridDictionary.GetEnumerator1">
        <overload>
            <para>Returns an enumerator that can iterate through the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </overload>
        <summary>
            <para>Returns an <see cref="System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IDictionaryEnumerator" /> for the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="HybridDictionary.GetEnumerator2">
        <summary>
            <para>Returns an <see cref="System.Collections.IEnumerator" /> that can iterate through the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="HybridDictionary.Remove">
        <summary>
            <para>Removes the entry with the specified key from the <see cref="System.Collections.Specialized.HybridDictionary" />.</para>
        </summary>
        <param name="key">The key of the entry to remove.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>If the <see cref="System.Collections.Specialized.HybridDictionary" /> does not contain an element with the specified key,
the <see cref="System.Collections.Specialized.HybridDictionary" /> remains unchanged. No exception is thrown.</para>
            <para>If the collection is already stored in a 
<see cref="System.Collections.Hashtable" /> and 
 the number of elements falls below the optimal size for a <see cref="System.Collections.Specialized.ListDictionary" />, the collection remains in the
<see cref="System.Collections.Hashtable" /> to avoid the 
 overhead of copying elements from the <see cref="System.Collections.Hashtable" /> back to a <see cref="System.Collections.Specialized.ListDictionary" />
 . </para>
        </remarks>
        <seealso cref="System.Collections.Specialized.HybridDictionary.Add" />
        <seealso cref="System.Collections.IDictionary.Remove" qualify="true" />
    </doc>
</docs>
