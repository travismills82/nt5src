<docs>
    <doc for="StringDictionary">
        <summary>
            <para>Implements a hashtable with the key strongly typed to be
      a string rather than an object. </para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type
   are safe for multithreaded operations. Instance members are not guaranteed to be
   thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for
   a <see cref="System.Collections.Specialized.StringDictionary" />, but derived classes can create
   their own synchronized versions of the <see cref="System.Collections.Specialized.StringDictionary" /> using the
<see cref="System.Collections.Specialized.StringDictionary.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>A key cannot be <see langword="null" />, but a value can.</para>
            <para>The key is handled in a case-insensitive manner; it is translated to
   lower case before it is used with the string dictionary.</para>
        </remarks>
        <seealso cref="System.Collections.Hashtable" />
    </doc><doc for="StringDictionary.StringDictionary">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Specialized.StringDictionary" /> class.</para>
        </summary>
    </doc><doc for="StringDictionary.Count">
        <summary>
            <para>Gets the number of key-and-value pairs in the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </summary>
        <value>
            <para>The number of key-and-value pairs in the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </value>
    </doc><doc for="StringDictionary.IsSynchronized">
        <summary>
            <para>Gets a value that indicates whether access to the <see cref="System.Collections.Specialized.StringDictionary" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to
   the <see cref="System.Collections.Specialized.StringDictionary" /> is synchronized
   (thread-safe); otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A <see cref="System.Collections.Specialized.StringDictionary" /> instance is not synchronized. 
   Derived classes can provide a synchronized version of the <see cref="System.Collections.Specialized.StringDictionary" /> using the <see cref="System.Collections.Specialized.StringDictionary.SyncRoot" />
   property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe 
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows
   how to lock the collection using the <see cref="System.Collections.Specialized.StringDictionary.SyncRoot" /> during the
   entire enumeration:</para>
            <code lang="C#">StringDictionary myCollection = new StringDictionary();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New StringDictionary()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
    </doc><doc for="StringDictionary.this">
        <summary>
            <para>Gets or sets the value associated with the specified key.</para>
        </summary>
        <param name="key">The key whose value to get or set.</param>
        <value>
            <para>The value associated with the specified key. If the
      specified key is not found, Get returns <see langword="null" />, and Set creates a
      new entry with the specified key.</para>
        </value>
        <exception cref="System.NullReferenceException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The key is handled in a case-insensitive manner; it is translated to
      lower case before it is used.</para>
            <para>A key cannot be <see langword="null" />, but a value can.
 To distinguish between <see langword="null" /> that is returned because the specified key is not found
 and <see langword="null" /> that is returned because the value of the specified key is <see langword="null" />,
 use the <see cref="System.Collections.Specialized.StringDictionary.ContainsKey" /> method
 to determine if the key exists in the list.</para>
        </remarks>
    </doc><doc for="StringDictionary.Keys">
        <summary>
            <para>Gets a collection of keys in the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> that provides the keys in the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the keys in the <see cref="System.Collections.ICollection" /> is unspecified, but it is the same order as
   the associated values in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.Specialized.StringDictionary.Values" /> method.</para>
            <para>The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the keys
 in the original <see cref="System.Collections.Specialized.StringDictionary" />.
 Therefore, changes to the <see cref="System.Collections.Specialized.StringDictionary" />
 continue to be reflected in the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
    </doc><doc for="StringDictionary.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to
      the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Object" /> that can be used
   to synchronize access to the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </value>
        <remarks>
            <para>Derived classes can provide their own synchronized version of the <see cref="System.Collections.Specialized.StringDictionary" /> using the <see cref="System.Collections.Specialized.StringDictionary.SyncRoot" /> property. The 
   synchronizing code must perform operations on the <see cref="System.Collections.Specialized.StringDictionary.SyncRoot" /> of the <see cref="System.Collections.Specialized.StringDictionary" />, not directly on the <see cref="System.Collections.Specialized.StringDictionary" />. This ensures proper operation
   of collections that are derived from other objects. Specifically, it maintains
   proper synchronization with other threads that might be simultaneously modifying
   the <see cref="System.Collections.Specialized.StringDictionary" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe 
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows 
   how to lock the collection using the <see cref="System.Collections.Specialized.StringDictionary.SyncRoot" /> during the
   entire enumeration:</para>
            <code lang="C#">StringDictionary myCollection = new StringDictionary();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New StringDictionary()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
    </doc><doc for="StringDictionary.Values">
        <summary>
            <para>Gets a collection of values in the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> that provides the values in the <see cref="System.Collections.Specialized.StringDictionary" /> 
.</para>
        </value>
        <remarks>
            <para>The order of the values in the <see cref="System.Collections.ICollection" /> is unspecified, but it is the same
   order as the associated keys in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.Specialized.StringDictionary.Keys" /> method.</para>
            <para>The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the values
 in the original <see cref="System.Collections.Specialized.StringDictionary" />.
 Therefore, changes to the <see cref="System.Collections.Specialized.StringDictionary" />
 continue to be reflected in the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
    </doc><doc for="StringDictionary.Add">
        <summary>
            <para>Adds an entry with the specified key and value into the
   <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </summary>
        <param name="key">The key of the entry to add.</param>
        <param name=" value">The value of the entry to add. The value can be <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
<exception cref="System.ArgumentException">An entry with the same key already exists in the <see cref="System.Collections.Specialized.StringDictionary" />.</exception>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.Specialized.StringDictionary" /> is read-only.</exception>
        <remarks>
            <para>The key is handled in a case-insensitive manner; it is translated to lower case before it is
      added to the string dictionary.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringDictionary.Remove" />
    </doc><doc for="StringDictionary.Clear">
        <summary>
            <para>Removes all entries from the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </summary>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.Specialized.StringDictionary" /> is read-only.</exception>
    </doc><doc for="StringDictionary.ContainsKey">
        <summary>
            <para>Determines if the <see cref="System.Collections.Specialized.StringDictionary" /> contains a specific key.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.Specialized.StringDictionary" />.</param>
        <returns>
            <para><see langword="true" /> if the
<see cref="System.Collections.Specialized.StringDictionary" /> contains an entry with the specified key;
   otherwise, <see langword="false" />.</para>
        </returns>
<exception cref="System.ArgumentNullException">The key is <see langword="null" />.</exception>
        <remarks>
            <para>This implementation is an O(1) operation.</para>
            <para>The key is handled in a case-insensitive manner; it is translated to
      lower case before it is used.</para>
        </remarks>
    </doc><doc for="StringDictionary.ContainsValue">
        <summary>
            <para>Determines if the <see cref="System.Collections.Specialized.StringDictionary" /> contains a specific value.</para>
        </summary>
        <param name="value">The value to locate in the <see cref="System.Collections.Specialized.StringDictionary" />. The value can be <see langword="null" />.</param>
        <returns>
            <para><see langword="true" /> if the
<see cref="System.Collections.Specialized.StringDictionary" /> contains an element with the specified value;
   otherwise, <see langword="false" />. </para>
        </returns>
        <remarks>
            <para>The values of the elements of the StringDictionary are compared to the
      specified value using the <see cref="System.Object.Equals" qualify="true" /> method.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.Specialized.StringDictionary.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Specialized.StringDictionary.Count" />.</para>
        </remarks>
    </doc><doc for="StringDictionary.CopyTo">
        <summary>
            <para>Copies the string dictionary values to a one-dimensional <see cref="System.Array" /> instance at the
   specified index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the values copied from the <see cref="System.Collections.Specialized.StringDictionary" />.</param>
        <param name=" index">The index in the array where copying begins.</param>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para>The number of elements in the <see cref="System.Collections.Specialized.StringDictionary" /> is greater than the available space from <paramref name="index" /> to the end of <paramref name="array" />.</para></exception>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />. </exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</exception>
<remarks>
            <para><see cref="System.Collections.Specialized.StringDictionary.CopyTo" /> copies objects
   that can be typecast to <see cref="System.Collections.DictionaryEntry" qualify="true" />. <see cref="System.Collections.DictionaryEntry" />
   contains both the key and the
   value.</para>
            <para>The elements copied to the <see cref="System.Array" /> are sorted in the same order that the enumerator
iterates through the <see cref="System.Collections.Specialized.StringDictionary" />.</para>
        </remarks>
        <example>
            <para>The following code example shows how a StringDictionary
      can be copied to an array.</para>
            <codelink SampleID="System.Collections.Specialized.StringDictionary.CopyTo" SnippetID="1" />
        </example>
    </doc><doc for="StringDictionary.GetEnumerator">
        <summary>
            <para>Returns an enumerator that can iterate through the string dictionary.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> that can iterate through the string dictionary.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
    </doc><doc for="StringDictionary.Remove">
        <summary>
            <para>Removes the entry with the specified key from the string dictionary.</para>
        </summary>
        <param name="key">The key of the entry to remove.</param>
<exception cref="System.ArgumentNullException">The key is <see langword="null" />.</exception>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.Specialized.StringDictionary" /> is read-only.</exception>
        <remarks>
            <para>The key is handled in a case-insensitive manner; it is translated to lower case
 before it is used to find the entry to remove from the string dictionary.</para>
        </remarks>
        <seealso cref="System.Collections.Specialized.StringDictionary.Add" />
    </doc>
</docs>
