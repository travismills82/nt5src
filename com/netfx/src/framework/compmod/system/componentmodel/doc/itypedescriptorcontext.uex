<docs>
	<doc for="ITypeDescriptorContext.PropertyDescriptor">
		<summary>
			<para>Gets the <see cref="System.ComponentModel.PropertyDescriptor"/> 
that describes the given context item.</para>
		</summary>
		<value>
			<para>The <see cref="System.ComponentModel.PropertyDescriptor"/> that describes the given context item.
   This returns <see langword="null "/>if there is no <see cref="System.ComponentModel.PropertyDescriptor"/> responsible for the
   call.</para>
		</value>
	</doc><doc for="ITypeDescriptorContext.OnComponentChanging">
		<summary>
			<para>Returns a value indicating whether this object can be changed.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if this object can be changed; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Use this method before changing an instance of an object to see whether it can be changed.
      When <see langword="false"/> is returned, do not change the object.</para>
		</remarks>
	</doc><doc for="ITypeDescriptorContext.OnComponentChanged">
		<summary>
			<para>Raises the <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/>
event.</para>
		</summary>
		<remarks>
			<para> Use this method to send notification that an instance of an object has changed.</para>
		</remarks>
	</doc><doc for="ITypeDescriptorContext">
		<summary>
			<para> Provides information about the context information of a component, for
      example, the container that it is in and its <see cref="System.ComponentModel.PropertyDescriptor"/>
      . The primary use of this interface is in type conversion.
      </para>
		</summary>
		<remarks>
			<para> This interface is typically used at design time to provide
      information about a design-time container.
      </para>
			<note type="note">
      Do not
      rely on the presence of this interface when you design a type converter.
      If a particular interface, property, or service is necessary but not available,
      the type converter should return <see langword="null"/> rather than throw an exception.
      This interface's properties can return <see langword="null"/> at
      any time, and you should plan for this.
      
   </note>
			<para> The <see cref="System.ComponentModel.ITypeDescriptorContext.Instance"/> property
   returns the instance of the object invoking this interface. For example, if a type
   converter is given an instance of a <see cref="T:System.Drawing.Color"/> to convert, and you need to know what the
   color is used for before you perform the operation, <see cref="System.ComponentModel.ITypeDescriptorContext.Instance"/> returns the
   actual instance of the control using the color. Then you can query the control for further
   information about its services and its <see cref="System.ComponentModel.ITypeDescriptorContext.Container"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="ITypeDescriptorContext.Container">
		<summary>
			<para>Gets the container representing this <see cref="System.ComponentModel.TypeDescriptor"/> request.</para>
		</summary>
		<value>
			<para>An <see cref="System.ComponentModel.IContainer"/> with the set of objects for this 
<see cref="System.ComponentModel.TypeDescriptor"/> 
. It returns <see langword="null "/>if there is no container, or if the
<see cref="System.ComponentModel.TypeDescriptor"/> 
does not use outside objects.</para>
		</value>
	</doc>
	<doc for="ITypeDescriptorContext.Instance">
		<summary>
			<para>Gets the instance of the object that is connected with 
 this <see cref="System.ComponentModel.TypeDescriptor"/> request.</para>
		</summary>
		<value>
			<para> The instance that invokes the method on the 
 <see cref="System.ComponentModel.TypeDescriptor"/> object. This
 returns <see langword="null "/>if there is no instance responsible for the
 call.</para>
		</value>
	</doc>
</docs>
