<docs>
	
	<doc for="BaseNumberConverter.ConvertFrom">
		<nodoc/>
		<summary>
			<para>Converts the given value object to a 64-bit signed integer object.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name=" culture"></param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.Exception">The conversion could not be performed.</exception>
		<remarks>
			<para>This converter can only convert a 64-bit signed integer object to and from a
      string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="BaseNumberConverter.ConvertTo">
		<nodoc/>
		<summary>
			<para>Converts the given value object to a 64-bit signed integer object using the
      arguments.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType"><para>The <see cref="System.Type"/> to convert the value to.</para></param>
		<param name=" culture"></param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType "/>is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>This converter can only convert a 64-bit signed integer object to and from a
      string. This implementation calls <see cref="System.Object.ToString"/> on the object if the object is valid
      and if the destination type is string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="BaseNumberConverter.CanConvertFrom">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can convert an object in the
      given source type to a 64-bit signed integer object using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from.</param>
		<returns>
			<para><see langword="true "/>if this object can perform the conversion; otherwise,
<see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>This converter can only convert a 64-bit signed integer object to and from a
      string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="BaseNumberConverter.CanConvertTo">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="BaseNumberConverter">
		<summary>
			<para>Provides a base type converter for nonfloating point numerical types.</para>
		</summary>
		<remarks>
			<note type="caution">
      You should never access a type converter
      directly. Instead, call the appropriate converter by using <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
      in the <see cref="System.ComponentModel.TypeConverter"/> base class.
      
   </note>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
		</remarks>
		<example>
			<para>For an example of a converter for a specific data type
      that inherits from <see cref="System.ComponentModel.BaseNumberConverter"/>
      , see the example section of each of the classes listed at
   <see topic="frlrfsystemcomponentmodelbasenumberconverterclasshierarchy" title="BaseNumberConverter Hierarchy"/>.</para>
		</example>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
</docs>
