<docs>
	<doc for="EditorAttribute.EditorAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.EditorAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.EditorAttribute"/> class with the default editor, which is
    no editor.</para>
		</summary>
	</doc>
	<doc for="EditorAttribute.EditorAttribute3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.EditorAttribute"/> class with the type and the base 
    type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of the editor.</param>
		<param name="baseType">
			<para> The <see cref="System.Type"/> of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor"/>.</para>
		</param>
		<remarks>
			<para>The <see cref="System.Type"/> represented by the <paramref name="type"/> parameter must either derive from or
    implement the base class.</para>
			<para>The <paramref name="baseType"/> parameter is used as a key to find a
 particular editor, because a data type can have more than one editor associated
 with it.</para>
		</remarks>
	</doc>
	<doc for="EditorAttribute.TypeId">
		<internalonly/>
		<summary>
			<para>
       This defines a unique ID for this attribute type. It is used
       by filtering algorithms to identify two attributes that are
       the same type. For most attributes, this just returns the
       Type instance for the attribute. EditorAttribute overrides
       this to include the type of the editor base type.
    </para>
		</summary>
	</doc>
	<doc for="EditorAttribute.GetHashCode">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="EditorAttribute.Equals">
		<nodoc/>
		<summary>
			<para>Returns whether the value of the given object is equal
      to the current <see cref="System.ComponentModel.EditorAttribute"/> .</para>
		</summary>
		<param name="obj">The object to test the value equality of.</param>
		<returns>
			<para>
				<see langword="true"/> if the value of the given object
   is equal to that of the current; otherwise, <see langword="false"/> .</para>
		</returns>
	</doc>
	<doc for="EditorAttribute.EditorTypeName">
		<summary>
			<para>Gets the name of the editor class in the <see cref="System.Type.AssemblyQualifiedName" qualify="true"/> format.</para>
		</summary>
		<value>
			<para>The name of the editor class in the <see cref="System.Type.AssemblyQualifiedName" qualify="true"/> format.</para>
		</value>
	</doc>
	<doc for="EditorAttribute">
		<summary>
			<para>Specifies the editor to use to change a property. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>When editing the property, a visual designer should create a new instance of
 the specified editor through a dialog box or drop-down window.</para>
			<para>Use the <see cref="System.ComponentModel.EditorAttribute.EditorBaseTypeName"/> property to find this
 editor's base type. The only available base type is <see cref="T:System.Drawing.Design.UITypeEditor"/>.</para>
			<para>Use the <see cref="System.ComponentModel.EditorAttribute.EditorTypeName"/> property to get the name
of the type of editor associated with this attribute.</para>
			<para>For general information on using attributes. see <see topic="cpconAttributesOverview"/> and <see topic="cpconExtendingMetadataUsingAttributes"/>. For more information on
design-time attributes, see <see topic="cpconattributesdesign-timesupport"/>.</para>
		</remarks>
		<example>
			<para>The following example creates the <c>MyImage</c> class. The class is
 marked with an <see cref="System.ComponentModel.EditorAttribute"/> that specifies the <see cref="T:System.Drawing.Design.ImageEditor"/> as its editor.</para>
			<codelink SampleID="Classic EditorAttribute Example" SnippetID="1"/>
			<para>The next example creates an instance of the <c>MyImage</c>
class. Then it gets the
attributes for the class, and prints the name of the editor used by <c>myNewImage</c>.</para>
			<codelink SampleID="Classic EditorAttribute Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EditorAttribute.EditorAttribute1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.EditorAttribute"/> class with the type name and base type
 name of the editor.
 </para>
		</summary>
		<param name="typeName"><para> The fully qualified type name of the editor. </para></param>
		<param name="baseTypeName"><para>The fully qualified type name of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor"/>. </para></param>
		<remarks>
			<para>The <paramref name="typeName"/> parameter must be in
 the <see cref="System.Type.AssemblyQualifiedName" qualify="true"/>format.</para>
			<para> The <see cref="System.Type"/> represented by the <paramref name="typeName"/> parameter must either derive from
or implement the base class.</para>
			<para> The <see cref="System.Type"/> represented by the <paramref name="baseTypeName"/> parameter is used as a key to find a 
particular editor, because a data type can have more than one editor associated
with it. This can be any class but is typically <see cref="T:System.Drawing.Design.UITypeEditor"/> or <see cref="System.ComponentModel.ComponentEditor"/>
.</para>
		</remarks>
	</doc>
	<doc for="EditorAttribute.EditorAttribute2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.EditorAttribute"/> class with the type name and the base
 type.</para>
		</summary>
		<param name="typeName">The fully qualified type name of the editor.</param>
		<param name="baseType"><para> The <see cref="System.Type"/> of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor"/>. </para></param>
		<remarks>
			<para>The <paramref name="typeName"/> parameter must be in the <see cref="System.Type.AssemblyQualifiedName" qualify="true"/> format.</para>
			<para>The <see cref="System.Type"/> represented by the <paramref name="typeName"/> must either derive from or
implement the base class.</para>
			<para>The <paramref name="baseType"/> parameter is used as a key to find a
particular editor, because a data type can have more than one editor associated with it.</para>
		</remarks>
	</doc>
	<doc for="EditorAttribute.EditorBaseTypeName">
		<summary>
			<para> Gets the name of the base class or interface serving as a lookup key for this editor.
 </para>
		</summary>
		<value>
			<para> The name of the base class or interface serving as a lookup key for this editor.
 </para>
		</value>
		<remarks>
			<para>This is an assembly qualified type name. This version of the .NET 
 Framework provides both <see cref="T:System.Drawing.Design.UITypeEditor"/> and <see cref="System.ComponentModel.ComponentEditor"/> as valid base classes, but any value is
 valid here.</para>
		</remarks>
	</doc>
</docs>
