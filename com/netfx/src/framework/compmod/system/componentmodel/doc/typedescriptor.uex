<docs>
	<doc for="TypeDescriptor.ComNativeDescriptorHandler">
		<summary>
		</summary>
	</doc>
	<doc for="TypeDescriptor.AddEditorTable">
		<summary>
			<para>Adds an editor table for the given editor base type.
       Typically, editors are specified as metadata on an object. If no metadata for a
       requested editor base type can be found on an object, however, the
       TypeDescriptor will search an editor
       table for the editor type, if one can be found.</para>
		</summary>
		<param name="editorBaseType">The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.</param>
		<param name="table">The table to add.</param>
		<remarks>
			<para>Once an editor table has been added to TypeDescriptor, it cannot be removed
       and is owned by the TypeDescriptor. TypeDescriptor may freely make modifications
       to this table.</para>
			<para>The format for an editor table uses data types as keys and editors as values.
       The value portion of an entry in the table represents an editor instance. It can
       have one of three values. If it contains a string, TypeDescriptor will assume
       this is a fully-qualified name of a Type, and then load the Type for the object.
       If it contains a type, this type will be created to obtain an editor instance.
       Finally, the value portion may contain an actual editor instance. If
       TypeDescriptor needed to resolve an editor to an instance, it will store the
       instance back into the table for future use.</para>
		</remarks>
	</doc>
	<doc for="TypeDescriptor.CreateDesigner">
		<summary>
			<para>Creates an instance of the designer associated with the 
       specified component and the type of designer to create.</para>
		</summary>
		<param name="component"><para> An <see cref="System.ComponentModel.IComponent"/> that specifies the component to associate with the designer.</para></param>
		<param name="designerBaseType">A <see cref="System.Type"/> that represents the type of designer to create.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.Design.IDesigner"/> that is an instance of the 
    designer for the component,
    or <see langword="null"/>
    if no designer can be found.</para>
		</returns>
		<remarks>
			<para>If this method cannot find a valid <see cref="System.ComponentModel.DesignerAttribute"/>, it
    searches up the class hierarchy for a designer. If it cannot find a designer in
    the class hierarchy, it returns <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.IComponent"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="TypeDescriptor.GetCustomAttributes">
		<summary>
     Querying custom attributes is very expensive, so we cache them
     here.
 </summary>
	</doc>
	<doc for="TypeDescriptor.GetCustomAttributes1">
		<summary>
     Querying custom attributes is very expensive, so we cache them
     here.
 </summary>
	</doc>
	<doc for="TypeDescriptor.GetDefaultEvent">
		<overload>
			<para>
       Gets the default event
       for a component.
    </para>
		</overload>
		<summary>
			<para>
       Gets
       the default event for the specified
       type of component.
    </para>
		</summary>
		<param name="componentType">
    A <see cref="System.Type"/> that represents the type of component to get the event for.
 </param>
		<returns>
			<para>
       An <see cref="System.ComponentModel.EventDescriptor"/> with the default event, or <see langword="null "/> if there are no
       events.
    </para>
		</returns>
		<remarks>
			<para>
       Call this version of this method only when you do not
       have an instance of the object.
    </para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetDefaultEvent1">
		<summary>
			<para>Gets the default event for the specified component.</para>
		</summary>
		<param name="component">The component to get the event for.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptor"/> with the default event, or <see langword="null "/> if there are no
    events.</para>
		</returns>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetDefaultProperty">
		<overload>
			<para>
       Gets the default
       property for a
       component.
    </para>
		</overload>
		<summary>
			<para>
       Gets the default
       property for the
       specified type of component.
    </para>
		</summary>
		<param name="componentType">
    A <see cref="System.Type"/> that represents the class to get the property for.
 </param>
		<returns>
			<para>
       A <see cref="System.ComponentModel.PropertyDescriptor"/> with the
       default property, or <see langword="null "/> if there are no
       properties.
    </para>
		</returns>
		<remarks>
			<para>
       Call this version of this method only when you do not
       have an instance of the object.
    </para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetDefaultProperty1">
		<summary>
			<para>Gets the default property for the specified 
       component.</para>
		</summary>
		<param name="component">The component to get the default property for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptor"/> with the
    default property, or <see langword="null "/> if there are no
    properties.</para>
		</returns>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetEditorTable">
		<summary> 
      Retrieves a default editor table for the given editor base type. 
 </summary>
		<param name="editorBaseType"> 
      The editor base type to get the table for. 
 </param>
		<returns> 
     A hashtable containing an editor table for the requested base 
     type.  If no table could be found, this will return null. 
 </returns>
	</doc>
	<doc for="TypeDescriptor.GetEvents">
		<overload>
			<para> Gets the collection of
       events.</para>
		</overload>
		<summary>
			<para>Gets the collection of events for a specified type of component.</para>
		</summary>
		<param name="componentType">A <see cref="System.Type"/> that represents the component to get events for.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptorCollection"/> with the events for this component.</para>
		</returns>
		<remarks>
			<para>Call this version of this method only when you do not
       have an instance of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptorCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetProperties">
		<overload>
			<para>Gets the collection of properties.</para>
		</overload>
		<summary>
			<para> Gets the collection of properties for a specified type of
       component.</para>
		</summary>
		<param name="componentType">A <see cref="System.Type"/> that represents the component to get properties for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
    properties for a specified type of component.</para>
		</returns>
		<remarks>
			<para>Call this version of this method only when you do not
       have an instance of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
	</doc>
	<doc for="TypeDescriptor.SortDescriptorArray">
		<summary>
			<para>
       Sorts descriptors by name of the descriptor.
    </para>
		</summary>
		<param name="infos">
			<para>An <see cref="System.Collections.IList"/> that contains the descriptors to sort. </para>
		</param>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Collections.IList"/>
	</doc>
	<doc for="TypeDescriptor.GetDefaultEvent2">
		<summary>
			<para> Gets the default event for a component with a custom type descriptor.
      </para>
		</summary>
		<param name="component">The component to get the event for. </param>
		<param name=" noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para> An <see cref="System.ComponentModel.EventDescriptor"/> with the default event, or <see langword="null "/> if there are no
   events.
   </para>
		</returns>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.GetDefaultProperty2">
		<summary>
			<para>Gets the default property for the specified component with a custom type
      descriptor.</para>
		</summary>
		<param name="component">The component to get the default property for.</param>
		<param name=" noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptor"/> with the
   default property, or <see langword="null "/> if there are no
   properties.</para>
		</returns>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.CreateEvent">
		<overload>
			<para>Creates a new event descriptor that is identical to an existing event descriptor.</para>
		</overload>
		<summary>
			<para> Creates a new event descriptor that is identical to 
      an existing event descriptor by dynamically generating
      descriptor information from a specified event on a type.</para>
		</summary>
		<param name="componentType">The type of the component the event lives on.</param>
		<param name="name">The name of the event.</param>
		<param name="type">The type of the delegate that handles the event.</param>
		<param name="attributes">The attributes for this event.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptor"/> that is bound to a type.</para>
		</returns>
	</doc><doc for="TypeDescriptor.CreateProperty">
		<overload>
			<para>Creates a new property descriptor that is identical to an existing property
      descriptor.</para>
		</overload>
		<summary>
			<para>Creates a new property descriptor that is identical to 
      an existing property descriptor by dynamically generating
      descriptor information from a specified property on a type.</para>
		</summary>
		<param name="componentType">The type of the component the property lives on. </param>
		<param name="name">The name of the property. </param>
		<param name="type">The type of the property. </param>
		<param name="attributes">The attributes for this property. </param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptor"/> that is bound to a type.</para>
		</returns>
	</doc><doc for="TypeDescriptor.GetEvents3">
		<summary>
			<para> Gets the collection of events for a specified type of
      component using a specified array of attributes
      as a filter.</para>
		</summary>
		<param name="componentType">A <see cref="System.Type"/> that represents the component to get events for.</param>
		<param name="attributes">An array of type <see cref="System.Attribute"/> that you can use as a filter.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptorCollection"/> with the
   events that match the specified attributes
   for this component.</para>
		</returns>
		<remarks>
			<para>Call this version of this method only when you do not
      have an instance of the object.</para>
			<para>The <paramref name="attributes"/> parameter array can have a mix of
<see cref="System.Type"/> and
<see cref="System.Attribute"/> objects. Filtering is
   defined by the
   following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      event that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If an event does not have an <see cref="System.Attribute"/> of the same class, the event is not included
      in the returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the event must be an exact match or it is
      not included in the returned array.</term>
				</item>
				<item>
					<term>
      
      If an <see cref="System.Attribute"/> instance is specified and it
      is the default event, it is included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the event.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptorCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="TypeDescriptor.GetProperties3">
		<summary>
			<para> Gets the collection of properties for a specified type of
      component using a specified array of attributes as a filter.</para>
		</summary>
		<param name="componentType">A <see cref="System.Type"/> that represents the component to get properties for.</param>
		<param name="attributes"><para>An array of type <see cref="System.Attribute"/> to use as a filter. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
   properties that match the specified attributes
   for this type of component.</para>
		</returns>
		<remarks>
			<para>Call this version of this method only when you do not have an instance of the
      object.</para>
			<para>The <paramref name="attributes"/> parameter array can have a mix of
<see cref="System.Type"/> and
<see cref="System.Attribute"/> objects. Filtering is
   defined by the
   following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If a property does not have an <see cref="System.Attribute"/> of the same class, the property is not included in the
      returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match or it is not
      included in the returned array.</term>
				</item>
				<item>
					<term>
      
      If an <see cref="System.Attribute"/> instance is specified and it
      is the default property, it is included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="TypeDescriptor">
		<summary>
			<para>Provides information about the properties and events
      for a component. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> All the methods in this class are
   <see langword="static"/>.
      You cannot create an instance of this class. </para>
			<para> You can set property and
      event values two different ways: specify them in the component class or change them
      at design time. Because you can set these values two ways, the overloaded methods
      in this class take two different types of parameters. A method can take the type
      of class or an instance of an object. At design
      time, these two kinds of methods can be
      different; at run time, they are usually the same.</para>
			<para>When you want to access <see cref="System.ComponentModel.TypeDescriptor"/> information and you have an instance of
   the object, use the method that calls for a component. Use the method that calls
   for
   the type of the class method only when
   you do not have an instance of the object.</para>
			<para>For more information about reflection, see
<see topic="cpconDiscoveringTypeInformationatRunTime"/>. </para>
		</remarks>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeDescriptor.CreateEvent1">
		<summary>
			<para> Creates a new event descriptor that is identical to an
      existing event descriptor, when passed the existing <see cref="System.ComponentModel.EventDescriptor"/>
      .</para>
		</summary>
		<param name="componentType">The type of the component the event lives on. </param>
		<param name="oldEventDescriptor">The existing event information. </param>
		<param name="attributes">The new attributes. </param>
		<returns>
			<para>A new <see cref="System.ComponentModel.EventDescriptor"/> that has merged the specified metadata
   attributes with the existing metadata attributes.</para>
		</returns>
	</doc><doc for="TypeDescriptor.GetAttributes">
		<overload>
			<para>Gets the collection of attributes.</para>
		</overload>
		<summary>
			<para> Gets the
      collection of attributes for the specified type of component.</para>
		</summary>
		<param name="componentType">A <see cref="System.Type"/> that represents the class of the component for which to get the attribute.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.AttributeCollection"/> with the attributes
   for the type of the component. If the component is <see langword="null"/>,
   this method returns an empty collection.</para>
		</returns>
		<remarks>
			<para>Call this version of this method only when you do not
      have an instance of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.AttributeCollection"/>
	</doc><doc for="TypeDescriptor.GetAttributes2">
		<summary>
			<para>Gets a collection of attributes for the specified
      component and a Boolean indicating that a custom type descriptor has been
      created.</para>
		</summary>
		<param name="component">The component for which you want to get attributes.</param>
		<param name="noCustomTypeDesc"><para>
				<see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>An <see cref="System.ComponentModel.AttributeCollection"/> with the
   attributes for the component. If the component
   is <see langword="null"/>, this method returns an empty collection.</para>
		</returns>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.AttributeCollection"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.GetConverter1">
		<summary>
			<para>Gets a type converter for the type of the specified component with a custom type
      descriptor.</para>
		</summary>
		<param name="component">A component to get the converter for.</param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter"/> for the specified component,
   or <see langword="null "/>if a <see cref="System.ComponentModel.TypeConverter"/> cannot be found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The specified component is <see langword="null"/>.</exception>
		<remarks>
			<para> This method looks for the appropriate type converter by trying
      to find a <see cref="System.ComponentModel.TypeConverterAttribute"/>.
      If it cannot find a <see cref="System.ComponentModel.TypeConverterAttribute"/>,
      it traverses the base class hierarchy of the class until it finds a primitive
      type.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.GetConverter2">
		<summary>
			<para>Gets a type converter for the specified type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of component to get the converter for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter"/> for
   the specified type, or <see langword="null "/>if a <see cref="System.ComponentModel.TypeConverter"/> cannot be found.</para>
		</returns>
		<remarks>
			<para>Call this version of this method only when you do not have an instance of the
      object.</para>
			<para>This method looks for the appropriate type converter by looking for a <see cref="System.ComponentModel.TypeConverterAttribute"/>. If it cannot find a <see cref="System.ComponentModel.TypeConverterAttribute"/>, it traverses the base class hierarchy of
   the class until it finds a primitive type.</para>
		</remarks>
	</doc><doc for="TypeDescriptor.GetEditor">
		<overload>
			<para>Gets an editor with the specified base type.</para>
		</overload>
		<summary>
			<para>Gets an editor with the specified base type for the
      specified component.</para>
		</summary>
		<param name="component">The component to get the editor for.</param>
		<param name="editorBaseType">A <see cref="System.Type"/> that represents the base type of the editor you want to find.</param>
		<returns>
			<para> An instance of the editor that can be cast to the specified
      editor type.
      This returns <see langword="null "/>
      if no editor of the requested type can be found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> You can define multiple editors for a property. You use this
      method to select the editor you want to use.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeDescriptor.GetEditor2">
		<summary>
			<para>Gets an editor with the specified base type for the specified type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type to get the editor for.</param>
		<param name="editorBaseType">A <see cref="System.Type"/> that represents the base type of the editor you are trying to find.</param>
		<returns>
			<para>An instance of the editor object that can be cast to the
      given base type. This returns <see langword="null "/>
      if no editor of the requested type can be found.</para>
		</returns>
		<remarks>
			<para> You can define multiple editors for a type. You use this method to
      select the one you want to use.</para>
			<para>Call this version of this method only when you do not
      have an instance of the object.</para>
		</remarks>
	</doc><doc for="TypeDescriptor.GetEditor1">
		<summary>
			<para>Gets an editor with the specified base type and with a custom type descriptor for the
      specified component.</para>
		</summary>
		<param name="component">The component to get the editor for.</param>
		<param name="editorBaseType">A <see cref="System.Type"/> that represents the base type of the editor you want to find.</param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>An instance of the editor that can be cast to the specified
      editor type. This returns <see langword="null "/>if no editor of the
      requested type can be found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> You can define multiple editors for a property. You use this method
      to select the editor you want to use.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.GetEvents4">
		<summary>
			<para> Gets the collection of events for a specified component
      using a specified array of attributes
      as a filter.</para>
		</summary>
		<param name="component">A component to get the events for.</param>
		<param name="attributes">An array of type <see cref="System.Attribute"/> that you can use as a filter.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptorCollection"/> with the
   events that match the specified attributes for this component.</para>
		</returns>
		<remarks>
			<para>The events for the <paramref name="component"/> 
parameter can differ from the events of a class,
because the site can add or remove events if the <paramref name="component"/>
parameter
is sited.</para>
			<para>The <paramref name="attributes "/>array can have a mix of
<see cref="System.Type"/> and
<see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      event that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If an event does not have an <see cref="System.Attribute"/> of the same class, the event is not included in the
      returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the event must be an exact match or it is not
      included in the returned array.</term>
				</item>
				<item>
					<term>
      
      If an <see cref="System.Attribute"/> instance is specified and it
      is the default event, it is included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the event.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptorCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="TypeDescriptor.GetProperties2">
		<summary>
			<para>Gets the collection of properties for a specified
      component using the default type descriptor.</para>
		</summary>
		<param name="component">A component to get the properties for.</param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
   properties for a specified component.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The properties for the <paramref name="component"/> parameter can differ from the properties of a
   class, because the site can add or remove properties if the <paramref name="component"/>
   
   parameter
   is sited.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.GetProperties5">
		<summary>
			<para> Gets the collection of properties for a specified component using a specified array
      of attributes as a filter and using a
      custom type descriptor.</para>
		</summary>
		<param name="component">A component to get the properties for.</param>
		<param name="attributes"><para>An array of type <see cref="System.Attribute"/> to use as a filter. </para></param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
   events that match the specified attributes for the specified component.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> The properties for a component can differ from
      the properties of a class, because the site can add or remove properties if the component
      is sited.</para>
			<para>The <paramref name="attributes "/>array can have a mix of
<see cref="System.Type"/> and
<see cref="System.Attribute"/> objects. Filtering is
   defined by the
   following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If a property does not have an <see cref="System.Attribute"/> of the same class, the property is not included in the
      returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match or it is not
      included in the returned array.</term>
				</item>
				<item>
					<term>
      
      If a <see cref="System.Attribute"/> instance is specified and it
      is the default property, it is included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="TypeDescriptor.GetProperties4">
		<summary>
			<para> Gets the collection of properties for a specified
      component using a specified array of attributes
      as a filter.</para>
		</summary>
		<param name="component">A component to get the properties for.</param>
		<param name="attributes"><para>An array of type <see cref="System.Attribute"/> to use as a filter. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
   properties that match the specified attributes for the specified component. </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The properties for the <paramref name="component"/> parameter can differ from the properties of a
   class, because the site can add or remove properties if the <paramref name="component"/>
   
   parameter
   is sited.</para>
			<para>The <paramref name="attributes"/> parameter array is used to
filter the array. The <paramref name="attributes"/> parameter can have a mix of <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If a property does not have an <see cref="System.Attribute"/> of the same class, the property is not included in the
      returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match or it is not
      included in the returned array.</term>
				</item>
				<item>
					<term>
      
      If an <see cref="System.Attribute"/> instance is specified and
      it is the default property, it is included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="TypeDescriptor.Refresh2">
		<summary>
			<para>Clears the properties and events for the specified
 module from the
 cache.</para>
		</summary>
		<param name="module">The <see cref="System.Reflection.Module"/> that represents the module to refresh. Each <see cref="System.Type"/> in this module will be refreshed.</param>
		<remarks>
			<para>Properties and events are cached by <see cref="System.ComponentModel.TypeDescriptor"/> for speed. Typically, they
 are constant for the lifetime of an object. However, extender providers and designers
 can change the set of properties on an object. If they do, they can call this
 method to clear the property and event descriptors of the object. This
 method is used only at design time. It is not used during run time.</para>
			<para>Before you make a call to <see cref="System.ComponentModel.TypeDescriptor.Refresh"/> to clear the cache, you 
need to call <see cref="System.ComponentModel.TypeDescriptor.GetProperties"/>for the specific module to
cache the information first.</para>
			<para> This method also raises a <see cref="System.ComponentModel.TypeDescriptor.Refreshed"/> event to notify
all classes that want to be notified when the property set of a component
changes.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.TypeDescriptor.Refreshed"/>
		<seealso cref="System.Reflection.Module"/>
	</doc>
	<doc for="TypeDescriptor.Refresh3">
		<summary>
			<para>Clears the properties and events for the specified
 assembly from the
 cache.</para>
		</summary>
		<param name="assembly">The <see cref="System.Reflection.Assembly"/> that represents the assembly to refresh. Each <see cref="System.Type"/> in this assembly will be refreshed.</param>
		<remarks>
			<para>Properties and events are cached by <see cref="System.ComponentModel.TypeDescriptor"/> for speed. Typically, they
 are constant for the lifetime of an object. However, extender providers and designers
 can change the set of properties on an object. If they do, they can call this
 method to clear the property and event descriptors of the object. This
 method is used only at design time. It is not used during run time.</para>
			<para>Before you make a call to <see cref="System.ComponentModel.TypeDescriptor.Refresh"/> to clear the cache, you 
need to call <see cref="System.ComponentModel.TypeDescriptor.GetProperties"/>for the specific assembly
to cache the information first.</para>
			<para>This method also raises a <see cref="System.ComponentModel.TypeDescriptor.Refreshed"/> event to notify all
classes that want to be notified when the property set of a component
changes.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.TypeDescriptor.Refreshed"/>
		<seealso cref="System.Reflection.Module"/>
	</doc>
	<doc for="TypeDescriptor.GetProperties1">
		<summary>
			<para>Gets the collection of properties for a specified
 component.</para>
		</summary>
		<param name="component">A component to get the properties for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
 properties for the specified component.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The properties for a component can differ from the
 properties of a class, because the site can
 add or remove properties if the component is sited.</para>
		</remarks>
		<example>
			<para>For an example on this method, see the sample in <see cref="System.ComponentModel.AttributeCollection.Contains"/></para>
		</example>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
	</doc>
	<doc for="TypeDescriptor.GetAttributes1">
		<summary>
			<para>Gets the collection of attributes for the specified
 component.</para>
		</summary>
		<param name="component">The component for which you want to get attributes.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.AttributeCollection"/> with the
 attributes for the component. If the component
 is <see langword="null"/>, this method returns an empty collection.</para>
		</returns>
		<example>
			<para>For an example on this method, see the sample in <see cref="System.ComponentModel.AttributeCollection.Matches"/></para>
		</example>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.AttributeCollection"/>
	</doc>
	<doc for="TypeDescriptor.GetConverter">
		<overload>
			<para>Gets a type converter for a component.</para>
		</overload>
		<summary>
			<para>Gets a type converter for the type of the specified
 component.</para>
		</summary>
		<param name="component">A component to get the converter for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter"/> for the specified component,
 or <see langword="null "/>if a <see cref="System.ComponentModel.TypeConverter"/> cannot be found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The specified component is <see langword="null"/>.</exception>
		<remarks>
			<para>This method looks for the appropriate type converter by
 looking for a <see cref="System.ComponentModel.TypeConverterAttribute"/>.
 If it cannot find a <see cref="System.ComponentModel.TypeConverterAttribute"/>,
 it traverses the base class hierarchy of the class until it finds a primitive
 type.</para>
		</remarks>
		<example>
			<para>For an example on using this method, see the sample in <see cref="System.ComponentModel.TypeConverter"/>.</para>
		</example>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.CreateProperty1">
		<summary>
			<para> Creates a new property descriptor that is identical to an
 existing property descriptor, when passed the existing <see cref="System.ComponentModel.PropertyDescriptor"/>
 .</para>
		</summary>
		<param name="componentType">The type of the component the property lives on. </param>
		<param name="oldPropertyDescriptor">The existing property descriptor. </param>
		<param name="attributes">The new attributes for this property. </param>
		<returns>
			<para>A new <see cref="System.ComponentModel.PropertyDescriptor"/> has the specified metadata attributes
 merged with the existing metadata attributes.</para>
		</returns>
		<example>
			<para>For an example on this method, see the sample in <see topic="cpconwebformsdataboundcontroldesignersample"/>.</para>
		</example>
	</doc>
	<doc for="TypeDescriptor.Refreshed">
		<summary>
			<para>Occurs when the <see cref="System.ComponentModel.TypeDescriptor.Refreshed"/> event is raised for a component.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>For an example on using this event, see the sample in <see cref="System.ComponentModel.RefreshEventHandler"/>.</para>
		</example>
	</doc>
	<doc for="TypeDescriptor.GetClassName">
		<overload>
			<para>Gets the name of the class for the specified component. </para>
		</overload>
		<summary>
			<para>Gets the name of the class for the specified component using the default type descriptor. </para>
		</summary>
		<param name="component"><para>The <see cref="System.Object"/> for which you want the class name.</para></param>
		<returns>
			<para>The name of the class for the specified component.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>Typically, this method returns the full <see cref="System.Type"/> name for the <paramref name="component"/> parameter type. If the
<paramref name="component"/> parameter 
 implements <see cref="System.ComponentModel.ICustomTypeDescriptor"/>,
 it can return an
 alternate name.</para>
			<para>For example, the class name for a button is
<see langword="System.Windows.Forms.Button"/> . </para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetClassName1">
		<summary>
			<para>Gets the name of the class for the specified component
 using a custom type descriptor.</para>
		</summary>
		<param name="component"><para>The <see cref="System.Object"/> for which you want the class name.</para></param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>The name of the class for the specified component. </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>Typically, this method returns the full <see cref="System.Type"/> name for the <paramref name="component"/> parameter type. If the <paramref name="component"/> parameter
 implements <see cref="System.ComponentModel.ICustomTypeDescriptor"/>,
 it can return an
 alternate name.</para>
			<para>For example, the class name for a button is
<see langword="System.Windows.Forms.Button"/>
.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetComponentName">
		<overload>
			<para>Gets the name of the specified component.</para>
		</overload>
		<summary>
			<para>Gets the name of the specified component using the default type descriptor.</para>
		</summary>
		<param name="component"><para>The <see cref="System.Object"/> for which you want the class name.</para></param>
		<returns>
			<para> The name of the specified component. If there is no 
 component name, <see langword="null"/> is returned.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>This method is used at design time to retrieve the name
 of an instance of a component. Typically, this method returns the name for the
 site of the
 component, if one exists.</para>
			<para>For example, the class name for a button is
 <see langword="System.Windows.Forms.Button"/>
 .</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetComponentName1">
		<summary>
			<para> Gets the name of the specified component using a custom
 type descriptor. </para>
		</summary>
		<param name="component"><para>The <see cref="System.Object"/> for which you want the class name.</para></param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>The name of the class for the specified 
 component. If there is no component name, <see langword="null"/> is returned.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="component"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>This method is used at design time to retrieve the name of an instance of a
 component. Typically, this method returns the name for the site of the
 component, if one exists. If the component implements <see cref="System.ComponentModel.ICustomTypeDescriptor"/>, it can
 return an alternate name.</para>
			<para>For example, the class name for a button is
 <see langword="System.Windows.Forms.Button"/>
 .</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetEvents1">
		<summary>
			<para>Gets the collection of events for a specified
 component.</para>
		</summary>
		<param name="component">A component to get the events for.</param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptorCollection"/> with the
 events for this component.</para>
		</returns>
		<remarks>
			<para>Retrieves a collection of events that the given
 <paramref name="component"/> parameter instance provides. This collection can differ from the
 set of events the class provides. If the <paramref name="component"/>
 parameter is
 sited, the site can add or remove additional events.</para>
		</remarks>
		<example>
			<para>For an example on this method, see the sample in <see cref="System.ComponentModel.EventDescriptorCollection.Count"/></para>
		</example>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptorCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetEvents2">
		<summary>
			<para>Gets the collection of events for a specified component with a custom type
 descriptor.</para>
		</summary>
		<param name="component">A component to get the events for.</param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptorCollection"/> with the
 events for this component.</para>
		</returns>
		<remarks>
			<para> Retrieves a collection of events that the given
 <paramref name="component"/> parameter instance provides. This can differ from the set of
 events the class provides. If the <paramref name="component"/> parameter
 is sited,
 the site can add or remove additional events.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptorCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.GetEvents5">
		<summary>
			<para> Gets the collection of events for a specified component
 using a specified array of attributes as a filter and using a custom type
 descriptor.</para>
		</summary>
		<param name="component">A component to get the events for.</param>
		<param name="attributes"><para>An array of type <see cref="System.Attribute"/> to use as a filter. </para></param>
		<param name="noCustomTypeDesc"><para><see langword="true"/> if an instance of <see cref="System.ComponentModel.ICustomTypeDescriptor"/> calls <see cref="System.ComponentModel.TypeDescriptor"/>; otherwise, <see langword="false"/>. </para></param>
		<returns>
			<para>An <see cref="System.ComponentModel.EventDescriptorCollection"/> with the
 events that match the specified attributes
 for this component.</para>
		</returns>
		<remarks>
			<para>The events for the <paramref name="component"/>
parameter can differ from the events of a
class, because the site can add or remove events if the <paramref name="component"/>
parameter
is sited.</para>
			<para>The <paramref name="attributes"/> parameter array can have a mix of
<see cref="System.Type"/> and
<see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
 A <see cref="System.Type"/> object is treated as a wildcard; it matches any
 event that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
 If an event does not have an <see cref="System.Attribute"/> of the same class, the event is not included in the
 returned array.</term>
				</item>
				<item>
					<term>
 If the attribute is an instance of <see cref="System.Attribute"/>, the event must be an exact match or it is not
 included in the returned array.</term>
				</item>
				<item>
					<term>
 If an <see cref="System.Attribute"/> instance is specified and it
 is the default event, it is included in the returned array even if there is
 no instance of the <see cref="System.Attribute"/> in the event.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptorCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc>
	<doc for="TypeDescriptor.Refresh">
		<overload>
			<para>Clears the properties and
 events from the cache.</para>
		</overload>
		<summary>
			<para>Clears the properties and events for the specified
 component from the
 cache.</para>
		</summary>
		<param name="component">A component the properties or events of which have changed.</param>
		<remarks>
			<para>Properties and events are cached by <see cref="System.ComponentModel.TypeDescriptor"/> for speed. Typically, they are constant
 for the lifetime of an object. However, extender providers and designers can change
 the set of properties on an object. If they do, they should call this method
 to clear the property and event descriptors of the object. This method
 is used only at design time. It is not used during run time.</para>
			<para>This method also raises a <see cref="System.ComponentModel.TypeDescriptor.Refreshed"/> event when the properties 
or events of a component change. This event is only raised if there was a prior
call to <see cref="System.ComponentModel.TypeDescriptor.GetProperties"/> or
<see cref="System.ComponentModel.TypeDescriptor.GetEvents"/> 
that cached the information.</para>
		</remarks>
		<example>
			<para>For an example on using this method, see the sample in <see cref="System.ComponentModel.RefreshEventHandler"/>.</para>
		</example>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.TypeDescriptor.Refreshed"/>
	</doc>
	<doc for="TypeDescriptor.Refresh1">
		<summary>
			<para>Clears the properties and events for the specified type
 of component from the
 cache.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type with properties or events that have changed.</param>
		<remarks>
			<para>Call this version of this method only when you do not
 have an instance of the object.</para>
			<para>Properties and events are cached by <see cref="System.ComponentModel.TypeDescriptor"/> for speed. Typically,
 they are constant for the lifetime of an object. However, extender providers and
 designers can change the set of properties on an object. If they do, they can call
 this method to clear the property and event descriptorsof the object. This
 method is used only at design time. It is not used during run time.</para>
			<para>This method also raises a <see cref="System.ComponentModel.TypeDescriptor.Refreshed"/> event 
when the properties or events of a component change. This event is only raised
if there was a prior call to <see cref="System.ComponentModel.TypeDescriptor.GetProperties"/> or
<see cref="System.ComponentModel.TypeDescriptor.GetEvents"/> 
that cached the information.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.TypeDescriptor.Refreshed"/>
	</doc>
</docs>
