<docs>
	<doc for="ITypedList.GetListName">
		<summary>
			<para>Returns the name of the list.</para>
		</summary>
		<param name="listAccessors">An array of <see cref="System.ComponentModel.PropertyDescriptor"/> objects, the list name for which is returned. This can be <see langword="null"/> .</param>
		<returns>
			<para>The name of the list.</para>
		</returns>
	</doc><doc for="ITypedList.GetItemProperties">
		<summary>
			<para>Returns the <see cref="System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item
   used to bind data.</para>
		</summary>
		<param name="listAccessors">An array of <see cref="System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable. This can be <see langword="null"/> .</param>
		<returns>
			<para> The <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
that represents the properties on each item used to bind data.</para>
		</returns>
		<remarks>
			<para>If the <paramref name="listAccessors"/> parameter is not <see langword="null"/>, it
   typically contains a property descriptor that identifies a list of containers to
   retrieve for the object that implements <see cref="System.ComponentModel.ITypedList"/>. For example, a <see cref="T:System.Data.DataSet"/> containing two tables, <c>myCustomers</c> and <c>myOrders</c>, with a relationship between them
called <c>myCustOrders</c>. If you create a <see cref="T:System.Data.DataView"/> object to view <c>myCustomers</c>, then calling the <see cref="System.ComponentModel.ITypedList.GetItemProperties"/> method with
<see langword="null"/> returns the property 
descriptors for the columns in <c>myCustomers</c>. As a result, one of the returned property
descriptors is a property descriptor for <c>myCustOrders</c>, just as calling the <see cref="System.ComponentModel.ITypedList.GetItemProperties"/> method with a list accessor array containing the
property descriptors for <c>myCustOrders</c> will return the property descriptors for <c>myOrders</c>
.</para>
		</remarks>
	</doc><doc for="ITypedList">
		<summary>
			<para>Provides functionality to discover the schema for a 
      bindable list, where the properties available for binding differ from the public
      properties of the object to bind to. For instance, using a <see cref="T:System.Data.DataView"/> object
      that represents a customer table, you want to bind to the properties on the
      customer object that the <see cref="T:System.Data.DataView"/> represents, not the properties of the <see cref="T:System.Data.DataView"/>
      
      .</para>
		</summary>
		<remarks>
			<para> This interface is not required for design-time support of a
      bindable list.</para>
			<para> Binding to data can occur either at run time or in a designer, but there are rules
      for each. At run time, you can bind to data in any of the following: </para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Array"/></term>
				</item>
				<item>
					<term>
         
         Implementer of <see cref="System.Collections.IList"/>, provided the implementer has a strongly
         typed <see cref="System.Collections.IList.this"/> property (that is, the <see cref="System.Type"/> is anything but
      <see cref="System.Object"/>). You
         can accomplish this by making the default implementation of <see cref="System.Collections.IList.this"/>
         private. If you want to create an <see cref="System.Collections.IList"/> that
         follows the rules of a
         strongly typed collection, you should derive from <see cref="System.Collections.CollectionBase"/>.</term>
				</item>
				<item>
					<term>
         
         Implementer of <see cref="System.ComponentModel.ITypedList"/>.</term>
				</item>
			</list>
			<para>In a designer, you can initialize binding to <see cref="System.ComponentModel.Component"/> objects by following the same
rules.</para>
			<para>For more information on binding to a data source, see the 
<see cref="T:System.Windows.Forms.Binding" qualify="true"/>
class.</para>
		</remarks>
	</doc></docs>
