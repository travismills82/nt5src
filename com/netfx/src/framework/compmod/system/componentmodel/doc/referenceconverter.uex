<docs>
	<doc for="ReferenceConverter.ReferenceComparer">
		<summary>
      IComparer object used for sorting references
 </summary>
	</doc>
	<doc for="ReferenceConverter.ReferenceConverter"><nodoc/>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.ReferenceConverter"/> class.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type to associate with this reference converter.</param>
	</doc><doc for="ReferenceConverter.CanConvertFrom"><nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can convert an object in the
      given source type to a reference object using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from.</param>
		<returns>
			<para><see langword="true "/>if this object can perform the conversion; otherwise
   <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="ReferenceConverter.GetStandardValuesExclusive"><nodoc/>
		<summary>
			<para>Gets a value indicating whether the list of standard values returned from
      <see cref="System.ComponentModel.ReferenceConverter.GetStandardValues"/> is an exclusive list. </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true"/> because the <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="System.ComponentModel.ReferenceConverter.GetStandardValues"/> is an exhaustive list of possible values. This method
   never returns <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="ReferenceConverter.GetStandardValuesSupported">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether this object supports a standard set of values
      that can be picked from a list.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true "/>because <see cref="System.ComponentModel.ReferenceConverter.GetStandardValues"/> can be called to find a common set of
   values the object supports. This method never returns <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="ReferenceConverter.IsValueAllowed">
		<summary>
			<para>Returns a value indicating whether a particular value can be added to
      the standard values collection.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides an additional context. </para></param>
		<param name="value">The value to check.</param>
		<returns>
			<para><see langword="true"/> if the value is allowed
   and can be added to the standard values collection; <see langword="false"/> if
   the value cannot be added to the standard values collection.</para>
		</returns>
		<remarks>
			<para>This method is called for each value that matches the type
      associated with this <see cref="System.ComponentModel.ReferenceConverter"/> and for each component found that is of
      the associated type. By default, this method returns <see langword="true"/>, that is, it allows adding the value into the
      standard values collection.</para>
			<note type="inheritinfo">
      Override
      this method when you do not want to add a value to the
      standard values collection.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
	</doc><doc for="ReferenceConverter.ConvertTo">
		<nodoc/>
		<summary>
			<para>Converts the given value object to the reference type
      using the specified context and arguments.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType">The type to convert the object to.</param>
		<param name=" culture"></param>
		<returns>
			<para>The converted object.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType "/>is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>The most
      common types to convert are to and from a string object.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="ReferenceConverter.ConvertFrom">
		<nodoc/>
		<summary>
			<para>Converts the given object to the reference type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name=" culture"></param>
		<returns>
			<para>An <see cref="System.Object"/>
that represents the converted <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.Exception">The conversion could not be performed.</exception>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="ReferenceConverter.GetStandardValues">
		<nodoc/>
		<summary>
			<para>Gets a collection of standard values for the reference data type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set
   of valid values, or <see langword="null"/> if the data type does not support a
   standard set of values.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="ReferenceConverter">
		<summary>
			<para> Provides a type converter to convert object references to and from
      other representations.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ComponentModel.ReferenceConverter"/>
is typically used within the context of sited
components or a design environment. Without a component site or a usable <see cref="System.ComponentModel.ITypeDescriptorContext"/>,
this converter is of little use.</para>
			<para>This converter converts a reference of an object that
   implements <see cref="System.ComponentModel.IComponent"/> and displays its properties in the
   Properties window.</para>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
   You should never create
   an instance of <see cref="System.ComponentModel.ReferenceConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
   
</note>
			<para>This class provides the <see cref="System.ComponentModel.ReferenceConverter.IsValueAllowed"/> method to check
whether a particular value can be added to the standard values collection. If
you do not want to add the value to the collection, override this method.</para>
			<note type="inheritinfo">
   Override <see cref="System.ComponentModel.ReferenceConverter.IsValueAllowed"/> when you do not want
   to add a value to the standard values collection.
   
</note>
		</remarks>
	</doc></docs>
