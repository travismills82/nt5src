<docs>
	<doc for="CollectionConverter.GetProperties"><nodoc/>
		<summary>
			<para>Gets a collection of properties for
      the type of array specified by the value parameter using the specified context and
      attributes.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">An <see cref="System.Object"/> that specifies the type of array to get the properties for.</param>
		<param name="attributes"><para>An array of type <see cref="System.Attribute"/> that will be used as a filter. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for
   this data type, or <see langword="null "/>if there are no properties. This method
   always returns <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<para>The attributes array that you pass in will be used to
   filter the array. The attributes can have a
   mix of <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is defined by the
   following rules:</para>
			<list type="bullet"><item>
					<term>A <see cref="System.Type"/> object will be
   treated as a wildcard; it will match any property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>If a property does not have an <see cref="System.Attribute"/> of the same class, the property will not be included
   in the returned array.</term>
				</item>
				<item>
					<term>If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match or
   it will not be included in the returned array.</term>
				</item>
				<item>
					<term>If a <see cref="System.Attribute"/> instance is
   specified and it is the default property, it will be included in the returned
   array even if there is no instance of the <see cref="System.Attribute"/> in the
   property.</term>
				</item>
			</list>
			<para>Collections do not support properties. Therefore this method always returns
   <see langword="null"/>. </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="CollectionConverter.GetPropertiesSupported">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether this object
      supports properties.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="false "/>because
<see cref="System.ComponentModel.CollectionConverter.GetProperties"/> should not be called to find the
   properties of this object. This method never returns <see langword="true"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<para>Collections do not support properties. Therefore this method always returns
<see langword="false"/>. </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="CollectionConverter.ConvertTo">
		<nodoc/>
		<summary>
			<para>Converts the given
 value object to the
 specified destination type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="value">The <see cref="System.Object"/> to convert. This parameter must inherit from <see cref="System.Collections.ICollection"/>.</param>
		<param name="destinationType">The <see cref="System.Type"/> to convert the value to.</param>
		<param name=" culture"></param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
 the converted value.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The destinationType is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
 about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
 can return <see langword="null"/>.</para>
			<para><see langword="Note[note]"/> The converted result will be shown in the
Property browser. For example, if you are converting a char collection into
a string, it will be displayed as <c>char[] collection</c>.</para>
		</remarks>
	</doc>
	<doc for="CollectionConverter">
		<summary>
			<para>Provides a type converter to convert
      collection objects to and from various other representations.</para>
		</summary>
		<remarks>
			<para> The <see cref="M:System.ComponentModel.TypeConverter.GetProperties"/>
method for this type converter always returns <see langword="null"/>, and the
<see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported"/>
method
always returns <see langword="false"/>.</para>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
   You should never create
   an instance of <see cref="System.ComponentModel.CollectionConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
   
</note>
		</remarks>
	</doc>
</docs>
