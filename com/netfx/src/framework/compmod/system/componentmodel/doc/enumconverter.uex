<docs>
	<doc for="EnumConverter.values">
		<summary>
			<para>
       Provides a <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> that specifies the
       possible values for the enumeration.
    </para>
		</summary>
	</doc>
	<doc for="EnumConverter.type">
		<summary>
			<para>
       Specifies
       the
       type of the enumerator this converter is
       associated with.
    </para>
		</summary>
	</doc>
	<doc for="EnumConverter.Comparer">
		<summary>
			<para>Gets an <see cref="System.Collections.IComparer"/>
 that can
 be used to sort the values of the enumeration.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IComparer"/> for sorting the enumeration values.</para>
		</value>
		<remarks>
			<para>By default, the enumeration values are sorted in the order they appear in
       the file.</para>
			<note type="inheritinfo">
       If you want to sort
       the values into a different order, override this property.
    </note>
		</remarks>
	</doc>
	<doc for="EnumConverter.EnumConverter"><nodoc/>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.EnumConverter"/> class for the given
   type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of enumeration to associate with this enumeration converter.</param>
	</doc><doc for="EnumConverter.EnumType"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="EnumConverter.Values"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="EnumConverter.CanConvertFrom"><nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter
      can convert an object in the given source type to an enumeration object using
      the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This
      converter only can convert an enumeration object to and from a string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="EnumConverter.CanConvertTo"><nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can
      convert an object to the given destination type using the context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type you wish to convert to.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion; otherwise,
   <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method to provide your own conversion requirements.
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="EnumConverter.ConvertFrom"><nodoc/>
		<summary>
			<para>Converts the specified value object to an enumeration object.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="culture">
   An optional culture info.  If not supplied the current culture is assumed.
   </param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/>
that represents the converted <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>This converter only can convert an enumeration object to and from a string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="EnumConverter.ConvertTo"><nodoc/>
		<summary>
			<para>Converts the given
      value object to the
      specified destination type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="culture">
   An optional culture info.  If not supplied the current culture is assumed.
   </param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType">The <see cref="System.Type"/> to convert the value to.</param>
		<returns>
			<para>An <see cref="System.Object"/>
that represents the converted <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType "/>is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>This converter only can convert an enumeration object to and from a string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="EnumConverter.GetStandardValues"><nodoc/>
		<summary>
			<para>Gets a collection of standard values for the data type this validator is
      designed for.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set
   of valid values, or <see langword="null"/> if the data type does not support a
   standard set of values.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="EnumConverter.GetStandardValuesExclusive"><nodoc/>
		<summary>
			<para>Gets a value indicating whether the list of standard values returned from
      <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
   is an exclusive list using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true "/>if the
   <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
returned from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of
possible values; <see langword="false "/>if other values are possible.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="EnumConverter.GetStandardValuesSupported"><nodoc/>
		<summary>
			<para>Gets a value indicating
      whether this object
      supports a standard set of values that can be picked
      from a list using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true"/> because
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find
   a common set of values the object supports. This method never returns
   <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="EnumConverter.IsValid">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether the given object value is valid for this type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to test.</param>
		<returns>
			<para><see langword="true "/>if the specified value is valid
   for this object; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="EnumConverter">
		<summary>
			<para>Provides a type converter to convert <see cref="System.Enum"/>
objects to and from various
other representations.</para>
		</summary>
		<remarks>
			<para>This converter can only convert an enumeration object to and from a string.
      The <see cref="System.ComponentModel.EnumConverter"/> provides the <see cref="System.ComponentModel.EnumConverter.Comparer"/> property to get an <see cref="System.Collections.IComparer"/>
      interface that can be used to sort the values of the enumeration. By default, the
      enumeration values are sorted in the order they appear in the file.</para>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
   You should never create an instance of an
<see cref="System.ComponentModel.EnumConverter"/>
. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
			<note type="inheritinfo">
   If you want to sort
   the values into a different order, override the <see cref="System.ComponentModel.EnumConverter.Comparer"/> property.
   
</note>
		</remarks>
		<example>
			<para>The following sample converts a variable of
      type <see cref="System.Enum"/> to a string, and vice versa. The code segment
      assumes that you have declared an <see cref="System.Enum"/> called <c>Servers</c> and
   that it has the following members,</para>
			<c>
				<para>Windows=1, Exchange=2, BizTalk=3</para>
			</c>
			<codelink SampleID="Converters" SnippetID="12"/>
		</example>
	</doc>
</docs>
