<docs>
	<doc for="IListSource.ContainsListCollection">
		<summary>
			<para>Gets a value indicating whether the collection is a collection
      of <see cref="System.Collections.IList"/> objects.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the collection is a collection of <see cref="System.Collections.IList"/> 
objects; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Using this property in <see cref="T:System.Data.DataSet"/> returns
<see langword="true"/> because the <see cref="T:System.Data.DataSet"/> class contains a collection of 
   collections. Using this property in <see cref="T:System.Data.DataTable"/> returns <see langword="false"/>
   because the <see cref="T:System.Data.DataTable"/> class contains a collection of objects.</para>
		</remarks>
	</doc><doc for="IListSource">
		<summary>
			<para>Provides functionality to an object to return a list that can be bound to a data source.</para>
		</summary>
		<remarks>
			<para> You typically use this interface to return a list that can be
      bound to a data source, from an object that does not implement <see cref="System.Collections.IList"/>
      itself.</para>
			<para> Binding to data can occur at either run time or in a designer,
      but there are rules for each. At run time, you can bind to data in any
      of the following:
      </para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Array"/></term>
				</item>
				<item>
					<term>
         
         Implementer of <see cref="System.Collections.IList"/>, provided the implementer has a strongly
         typed <see cref="System.Collections.IList.this"/> property (that is, the <see cref="System.Type"/> is anything but
      <see cref="System.Object"/>). You
         can accomplish this by making the default implementation of <see cref="System.Collections.IList.this"/>
         private. If you want to create an <see cref="System.Collections.IList"/> that follows the rules of
         a strongly-typed collection, you should derive from <see cref="System.Collections.CollectionBase"/>.</term>
				</item>
				<item>
					<term>
         
         Implementer of <see cref="System.ComponentModel.ITypedList"/>.</term>
				</item>
			</list>
			<para>In a designer, you can initialize binding
   to <see cref="System.ComponentModel.Component"/> objects by following the same
   rules.</para>
			<note type="note">
   Implementers of <see cref="System.ComponentModel.IListSource"/> can return
   an <see cref="System.Collections.IList"/> that contains a collection of <see cref="System.Collections.IList"/>
   objects.
   
</note>
		</remarks>
	</doc><doc for="IListSource.GetList">
		<summary>
			<para> Returns an <see cref="System.Collections.IList"/> that can be bound to a data source
   from
   an object that does not implement an <see cref="System.Collections.IList"/> itself.</para>
		</summary>
		<returns>
			<para> An <see cref="System.Collections.IList"/> that can be bound to a data source
   from
   the object.</para>
		</returns>
	</doc></docs>
