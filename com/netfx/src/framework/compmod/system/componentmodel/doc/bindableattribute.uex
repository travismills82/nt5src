<docs>
	<doc for="BindableAttribute.Equals">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindableAttribute.IsDefaultAttribute">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindableAttribute.GetHashCode">
		<internalonly/>
	</doc>
	<doc for="BindableAttribute.Default">
		<internalonly/>
		<summary>
			<para>Specifies the default value for the <see cref="System.ComponentModel.BindableAttribute"/>,
   which is <see cref="System.ComponentModel.BindableAttribute.No"/>. This
<see langword="static"/> field is
   read-only.</para>
		</summary>
		<remarks>
			<para>When
      you mark a property with this value, this attribute is set to the
      constant member <see cref="System.ComponentModel.BindableAttribute.No"/> . Therefore, when
      you want to check whether the attribute is set to this value in your code, you must
      specify the attribute as <see cref="System.ComponentModel.BindableAttribute.No" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.BindableAttribute"/>
		<seealso cref="System.ComponentModel.BindableAttribute.Yes"/>
		<seealso cref="System.ComponentModel.BindableAttribute.No"/>
	</doc><doc for="BindableAttribute.Bindable">
		<summary>
			<para> Gets a
      value indicating that a property is typically used for binding.</para>
		</summary>
		<value>
			<para><see langword="true "/> if the
   property is typically used for binding; otherwise,
<see langword="false"/>.</para>
		</value>
		<example>
			<para>The following example checks to see whether <c>MyProperty</c>
   is bindable. First the code gets the attributes for <c>MyProperty</c>
by:</para>
			<list type="bullet"><item>
					<term>
      Retrieving a <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with all the
      properties for the object.</term>
				</item>
				<item>
					<term>
      Indexing into the <see cref="System.ComponentModel.PropertyDescriptorCollection"/> to get
      <c>MyProperty</c>.</term>
				</item>
				<item>
					<term>
         Saving the attributes for this property in the attributes
         variable.</term>
				</item>
			</list>
			<para>Then, the code sets <c>myAttribute</c> to the value of the
<see cref="System.ComponentModel.BindableAttribute"/>
in the <see cref="System.ComponentModel.AttributeCollection"/>
and checks whether the property is bindable.</para>
			<para>For this code example to run, you must provide the fully qualified assembly 
   name. For information about how to obtain the fully qualified assembly name, see
<see topic="cpconassemblynames"/>.</para>
			<codelink SampleID="Classic BindableAttribute.Bindable Example" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.BindableAttribute"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.AttributeCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
	</doc>
	<doc for="BindableAttribute">
		<summary>
			<para> Specifies whether a property is typically used for
      binding.</para>
		</summary>
		<remarks>
			<para>You can specify this attribute for multiple properties
      on a control.</para>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.BindableAttribute"/> class with a Boolean 
   value.</para>
			<para> If a property has been marked with the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value 
<see langword="true"/> , then a property
change notification should be raised for that property. This means that
if <see cref="System.ComponentModel.BindableAttribute.Bindable"/> is <see cref="System.ComponentModel.BindableAttribute.Yes"/>, then two-way data binding is supported.
If <see cref="System.ComponentModel.BindableAttribute.Bindable"/> is <see cref="System.ComponentModel.BindableAttribute.No"/> , you can still bind to the property, but it
should not be shown in the default set of
properties to bind to, because it might or might not raise a property change
notification. </para>
			<note type="note">
   When you mark a property the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value
<see langword="true"/><see langword=", "/> the value of this attribute is set
   to the constant member <see cref="System.ComponentModel.BindableAttribute.Yes"/>. For a property marked
   with the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value <see langword="false, "/> the value is <see cref="System.ComponentModel.BindableAttribute.No"/> . Therefore, to
   check the value of this attribute in your code, you must specify the attribute
   as <see cref="System.ComponentModel.BindableAttribute.Yes" qualify="true"/> or <see cref="System.ComponentModel.BindableAttribute.No" qualify="true"/>.
   
</note>
			<note type="caution">
   You can use this
   attribute at design time only. Nothing prevents you from binding to
   any property during run time.
   
</note>
			<para>For more information, see <see topic="cpconAttributesOverview"/> and <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
		</remarks>
		<example>
			<para>The following example marks a property as appropriate to bind data to.</para>
			<codelink SampleID="Classic BindableAttribute Example" SnippetID="1"/>
			<para>The next example shows how to check the value of the
<see cref="System.ComponentModel.BindableAttribute"/> for <c>MyProperty</c> . First, the code gets a
<see cref="System.ComponentModel.PropertyDescriptorCollection"/> with all the properties for the object.
 Next, it indexes into the <see cref="System.ComponentModel.PropertyDescriptorCollection"/> to get <c>MyProperty</c> .
Finally, it returns the attributes for this property and saves them in the
attributes variable. The example presents two different ways to check the value of the <see cref="System.ComponentModel.BindableAttribute"/>. In the 
second code fragment, the example calls the <see cref="System.Object.Equals"/>method. In the last code fragment, the
example uses the <see cref="System.ComponentModel.BindableAttribute.Bindable"/>

property
to check the
value.</para>
			<codelink SampleID="Classic BindableAttribute Example" SnippetID="2"/>
			<para>If you marked a class with the <see cref="System.ComponentModel.BindableAttribute"/>,
use the following code to check the value.</para>
			<codelink SampleID="Classic BindableAttribute Example" SnippetID="3"/>
		</example>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.AttributeCollection"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
	</doc>
	<doc for="BindableAttribute.Yes">
		<summary>
			<para> Specifies that a property is typically used for binding.
      This <see langword="static"/>
      field is read-only. </para>
		</summary>
		<remarks>
			<para>When you mark a property with 
      the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value
   <see langword="true"/>, the value of this attribute is set to the
      constant member <see cref="System.ComponentModel.BindableAttribute.Yes"/>
      . Therefore, to check whether the attribute is set to this value in your code, you must
      specify the attribute as <see cref="System.ComponentModel.BindableAttribute.Yes" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.BindableAttribute"/>
		<seealso cref="System.ComponentModel.BindableAttribute.No"/>
	</doc>
	<doc for="BindableAttribute.No">
		<summary>
			<para> Specifies that a property is not typically used for
      binding. This <see langword="static"/>
      field is read-only.</para>
		</summary>
		<remarks>
			<para>This field is the default setting for this attribute.</para>
			<para>When you mark a property with 
      the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value <see langword="false, "/> the value of this attribute is
      set to the constant member <see cref="System.ComponentModel.BindableAttribute.No"/>
      . Therefore, to check whether the attribute is set to this value in your code, you must
      specify the attribute as <see cref="System.ComponentModel.BindableAttribute.No" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.BindableAttribute"/>
		<seealso cref="System.ComponentModel.BindableAttribute.Yes"/>
	</doc>
	<doc for="BindableAttribute.BindableAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.BindableAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.BindableAttribute"/> class with a
   Boolean value.</para>
		</summary>
		<param name="bindable"><para>
				<see langword="true"/> if a property is typically used for binding; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para></param>
		<remarks>
			<para>When you mark a property with 
      the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value
   <see langword="true"/>, the value of this attribute is set to the
      constant member <see cref="System.ComponentModel.BindableAttribute.Yes"/>. For a property marked
      with the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value
   <see langword="false"/>, the value is <see cref="System.ComponentModel.BindableAttribute.No"/>
   . Therefore, to check the value of this attribute in your code, you
   must specify the attribute as <see cref="System.ComponentModel.BindableAttribute.Yes" qualify="true"/> or <see cref="System.ComponentModel.BindableAttribute.No" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following example marks a property as appropriate to
      bind data to. This code creates a new <see cref="System.ComponentModel.BindableAttribute"/>, sets its value to
   <see cref="System.ComponentModel.BindableAttribute.Yes" qualify="true"/>,
      and binds it to the property.</para>
			<codelink SampleID="Classic BindableAttribute.BindableAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.BindableAttribute"/>
	</doc>
	<doc for="BindableAttribute.BindableAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.BindableAttribute"/> class with
   one of the <see cref="System.ComponentModel.BindableSupport"/> values.</para>
		</summary>
		<param name="flags"><para>One of the <see cref="System.ComponentModel.BindableSupport"/> values.</para></param>
		<remarks>
			<para>When you mark a property with 
      the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value
   <see langword="true"/>, the value of this attribute is set to the
      constant member <see cref="System.ComponentModel.BindableAttribute.Yes"/>. For a property marked
      with the <see cref="M:System.ComponentModel.BindableAttribute.#ctor"/> constructor of the value
   <see langword="false"/>, the value is <see cref="System.ComponentModel.BindableAttribute.No"/>
   . Therefore, to check the value of this attribute in your code, you
   must specify the attribute as <see cref="System.ComponentModel.BindableAttribute.Yes" qualify="true"/> or <see cref="System.ComponentModel.BindableAttribute.No" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following example marks a property as appropriate to
      bind data to. This code creates a new <see cref="System.ComponentModel.BindableAttribute"/>, sets its value to
   <see cref="System.ComponentModel.BindableAttribute.Yes" qualify="true"/>,
      and binds it to the property.</para>
			<codelink SampleID="Classic BindableAttribute.BindableAttribute1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.BindableAttribute"/>
		<seealso cref="System.ComponentModel.BindableSupport"/>
	</doc>
</docs>
