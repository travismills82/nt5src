<docs>
	<doc for="ComponentEditor.EditComponent">
		<overload>
			<para>Edits the component and determines whether the given component was modified.</para>
		</overload>
		<summary>
			<para>Edits the component and returns a value indicating whether the component was modified.</para>
		</summary>
		<param name="component">The component to be edited.</param>
		<returns>
			<para><see langword="true"/> if the component was modified;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method opens an advanced user interface that you can use to edit the component. The default
      implementation opens a dialog box with a collection of
      component editor control objects and a user interface.</para>
		</remarks>
	</doc><doc for="ComponentEditor">
		<summary>
			<para> Provides the base class for a custom component
      editor.</para>
		</summary>
		<remarks>
			<para> A component editor is used to edit a component as a whole and
      can be used to implement a user interface similar to that of the property pages.
      You associate a component editor with a component by using the
   <see cref="System.ComponentModel.EditorAttribute"/> 
   attribute.</para>
			<note type="inheritinfo">
   When you inherit from
   this class, you must override the <see cref="System.ComponentModel.ComponentEditor.EditComponent"/> method.
   
</note>
		</remarks>
	</doc><doc for="ComponentEditor.EditComponent1">
		<summary>
			<para>Edits the component and returns a value indicating whether the component was modified based upon a given context.</para>
		</summary>
		<param name="context">An optional context object that can be used to obtain further information about the edit.</param>
		<param name="component">The component to be edited.</param>
		<returns>
			<para><see langword="true"/> if the component was modified;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> You can override this method to provide a custom editing user interface for a
      component. From within this method you can display a
      dialog box or other type of user interface.</para>
		</remarks>
	</doc></docs>
