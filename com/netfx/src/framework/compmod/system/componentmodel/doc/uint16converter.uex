<docs>
	<doc for="UInt16Converter.TargetType">
		<summary>
 The Type this converter is targeting (e.g. Int16, UInt32, etc.)
 </summary>
	</doc>
	<doc for="UInt16Converter.FromString">
		<summary>
 Convert the given value to a string using the given radix
 </summary>
	</doc>
	<doc for="UInt16Converter.FromString1">
		<summary>
 Convert the given value to a string using the given formatInfo
 </summary>
	</doc>
	<doc for="UInt16Converter.FromString2">
		<summary>
 Convert the given value to a string using the given CultureInfo
 </summary>
	</doc>
	<doc for="UInt16Converter.ToString">
		<summary>
 Convert the given value from a string using the given formatInfo
 </summary>
	</doc>
	<doc for="UInt16Converter">
		<summary>
			<para> Provides a type converter to convert 16-bit unsigned integer objects
      to and from other representations.</para>
		</summary>
		<remarks>
			<para>This converter can only convert a 16-bit unsigned integer object to and from a
      string.</para>
			<para>The <see cref="System.UInt16"/> value type represents unsigned integers with values ranging
   from 0 to 65535. This data type is not supported in Visual Basic.</para>
			<note type="note">
   You should
   never create an instance of a <see cref="System.ComponentModel.UInt16Converter"/>. Instead, call the
<see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of 
<see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples 
   in the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/> .
</note>
		</remarks>
		<example>
			<para> The following example converts a variable of
      type <see cref="System.UInt16"/>
      to a
      string and vice versa.</para>
			<codelink SampleID="Converters" SnippetID="23"/>
		</example>
	</doc>
</docs>
