<docs>
	
	<doc for="MarshalByValueComponent.Events">
		<summary>
			<para>Gets the list of event handlers that are attached to this component.</para>
		</summary>
		<value>
			<para>An <see cref="System.ComponentModel.EventHandlerList"/> that provides the
    delegates for this component.</para>
		</value>
		<seealso cref="System.ComponentModel.MarshalByValueComponent"/>
		<seealso cref="System.ComponentModel.EventHandlerList"/>
	</doc>
	<doc for="MarshalByValueComponent.Container">
		<summary>
			<para>Gets the container for the component.</para>
		</summary>
		<returns>
			<para>An object implementing the <see cref="System.ComponentModel.IContainer"/> interface that
    represents the component's container, or <see langword="null "/>if the component
    does not have a site.</para>
		</returns>
		<seealso cref="System.ComponentModel.MarshalByValueComponent"/>
		<seealso cref="System.ComponentModel.IContainer"/>
	</doc>
	<doc for="MarshalByValueComponent.GetService">
		<summary>
			<para>Gets the implementer of the <see cref="System.IServiceProvider"/>.</para>
		</summary>
		<param name="service">A <see cref="System.Type"/> that represents the type of service you want.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the implementer of the <see cref="System.IServiceProvider"/>.</para>
		</returns>
		<seealso cref="System.ComponentModel.MarshalByValueComponent"/>
		<seealso cref="System.IServiceProvider"/>
	</doc>
	<doc for="MarshalByValueComponent.DesignMode">
		<summary>
			<para>Gets a value indicating whether the component is currently in design mode.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if the component is in design mode; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>If the component does not have a site, this method always returns <see langword="false"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.MarshalByValueComponent"/>
	</doc>
	<doc for="MarshalByValueComponent">
		<summary>
			<para> Implements <see cref="System.ComponentModel.IComponent"/> and provides the base implementation for
   remotable components that are marshaled by value (a copy of the serialized object is passed).</para>
		</summary>
		<remarks>
			<para>A component can be contained in a container. For each
      component in a container, the container creates a site that it uses to manage
      the component. The component interacts with its container primarily through a
      container-provided <see cref="System.ComponentModel.ISite"/>, which is a repository
      of container-specific, per-component information.</para>
			<note type="inheritinfo">
      When you inherit from this class, you can override the
   <see cref="System.ComponentModel.MarshalByValueComponent.Dispose"/>, <see cref="System.ComponentModel.MarshalByValueComponent.Site"/>, and the <see cref="System.ComponentModel.MarshalByValueComponent.GetService"/>
   methods.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.ISite"/>
	</doc><doc for="MarshalByValueComponent.MarshalByValueComponent">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.MarshalByValueComponent"/> class.</para>
		</summary>
		<remarks>
			<para>A component can be contained in a container. For each component in a
      container, the container creates a site that it uses to manage the component.
      The component interacts with its container primarily through a
      container-provided <see cref="System.ComponentModel.ISite"/>, which is a repository of
      container-specific, per-component information.</para>
		</remarks>
		<seealso cref="System.ComponentModel.MarshalByValueComponent"/>
	</doc><doc for="MarshalByValueComponent.Site">
		<summary>
			<para>Gets or sets the site of the component.</para>
		</summary>
		<value>
			<para>An object implementing
      the <see cref="System.ComponentModel.ISite"/> interface that represents the site of the
      component.</para>
		</value>
		<remarks>
			<para> A valid value for this property - that is, the value is not <see langword="null"/>
, indicates that the component has been added to a container.</para>
			<para>When the value of this property is <see langword="null"/>, the property indicates
that the component is being removed from a container. However, this property does
not remove the component from the container.</para>
			<note type="inheritinfo">
   To change this behavior, inherit from this class and get and set in this
   property.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.MarshalByValueComponent"/>
		<seealso cref="System.ComponentModel.ISite"/>
	</doc><doc for="MarshalByValueComponent.Disposed">
		<summary>
			<para>Adds an event handler to listen to the <see cref="System.ComponentModel.MarshalByValueComponent.Disposed"/> event on the component.</para>
		</summary>
		<seealso cref="System.EventHandler"/>
	</doc><doc for="MarshalByValueComponent.Finalize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="MarshalByValueComponent.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.ComponentModel.MarshalByValueComponent"/>.</para>
		</overload>
		<summary>
			<para> Releases all resources used by
      the <see cref="System.ComponentModel.MarshalByValueComponent"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.ComponentModel.MarshalByValueComponent.Dispose"/> allows the resources used by the <see cref="System.ComponentModel.MarshalByValueComponent"/> to be reallocated for other purposes. For more
   information about <see cref="System.ComponentModel.MarshalByValueComponent.Dispose"/>, see
<see topic="cpconCleaningUpUnmanagedResources"/> .</para>
		</remarks>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="MarshalByValueComponent.Dispose2">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.ComponentModel.MarshalByValueComponent"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public
   <see topic="frlrfSystemComponentModelMarshalByValueComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
   <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set
      to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
   <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
   resources held by any managed objects that this <see cref="System.ComponentModel.MarshalByValueComponent"/> references.
   This method invokes the <see langword="Dispose()"/> method of each referenced
   object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc></docs>
