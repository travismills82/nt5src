<docs>
	<doc for="ISynchronizeInvoke">
		<summary>
			<para>Provides a way to synchronously or asynchronously execute a delegate.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ComponentModel.ISynchronizeInvoke"/> interface provides synchronous
   and asynchronous communication between objects about the occurrence of an
   event. Objects that implement this interface can receive notification that an event
   has occurred, and they can respond to queries about the event. In this way,
   clients can make sure that one request has been processed before they submit
   a subsequent request that depends on completion of the first.</para>
			<para>The <see cref="System.ComponentModel.ISynchronizeInvoke"/>
class provides two ways to invoke a process:</para>
			<list type="number"><item>
					<term>
      
      Asynchronously, by using
      the <see cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/> method. <see cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/> starts a
      process and then returns immediately. Use <see cref="System.ComponentModel.ISynchronizeInvoke.EndInvoke"/> to wait until the process started by
   <see cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/> completes.</term>
				</item>
				<item>
					<term>
      
      Synchronously, by using the <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/> method. <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/>
      starts a process, waits until it completes, and then returns. Use <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/> when the
      control's main thread is different from the calling thread to marshal the call to the proper thread.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/>
		<seealso cref="System.ComponentModel.ISynchronizeInvoke.EndInvoke"/>
		<seealso cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/>
	</doc><doc for="ISynchronizeInvoke.InvokeRequired">
		<summary>
			<para>Gets a value indicating whether the caller must call <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/> when calling an object that implements
   this interface.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the caller must call <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/>; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property determines whether the caller must call <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/> when making method calls to an
   object that implements this interface. Such objects are bound to a specific thread
   and are not thread-safe. If you are calling a method from a different thread, you
   must use the <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/>
   method to marshal the call to the proper thread.</para>
		</remarks>
	</doc><doc for="ISynchronizeInvoke.BeginInvoke">
		<summary>
			<para> Executes the delegate on the main thread that this object executes on.
      </para>
		</summary>
		<param name="method">A <see cref="System.Delegate"/> to a method that takes parameters of the same number and type that are contained in <paramref name="args"/> . </param>
		<param name="args">An array of type <see cref="System.Object"/> to pass as arguments to the given method. This can be <see langword="null"/> if no arguments are needed. </param>
		<returns>
			<para> An <see cref="System.IAsyncResult"/> interface that
   represents the asynchronous operation started by calling this method.
   </para>
		</returns>
		<remarks>
			<para> The delegate is called asynchronously, and this
      method returns immediately. You can call this method from any thread. If you need
      the return value from a process started with this method, call <see cref="System.ComponentModel.ISynchronizeInvoke.EndInvoke"/> to get
      the value.
      </para>
			<para> If you need to call the delegate synchronously, use the <see cref="System.ComponentModel.ISynchronizeInvoke.Invoke"/> method instead.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ISynchronizeInvoke.EndInvoke"/>
	</doc><doc for="ISynchronizeInvoke.EndInvoke">
		<summary>
			<para> Waits until the process started by
      calling <see cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/> completes, and then returns
      the value generated by the process.</para>
		</summary>
		<param name="result">An <see cref="System.IAsyncResult"/> interface that represents the asynchronous operation started by calling <see cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/>. </param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the return value generated by the asynchronous operation.</para>
		</returns>
		<remarks>
			<para>This method gets the return value of the asynchronous operation represented
      by the <see cref="System.IAsyncResult"/> passed by this interface. If the asynchronous operation
      has not completed, this method will wait until the result is available.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/>
	</doc><doc for="ISynchronizeInvoke.Invoke">
		<summary>
			<para> Executes the delegate on the main thread that this object
      executes on.</para>
		</summary>
		<param name="method">A <see cref="System.Delegate"/> that contains a method to call, in the context of the thread for the control. </param>
		<param name="args">An array of type <see cref="System.Object"/> that represents the arguments to pass to the given method. This can be <see langword="null"/> if no arguments are needed.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the return value from the delegate being
   invoked, or <see langword="null"/> if the delegate has no return value.</para>
		</returns>
		<remarks>
			<para>Unlike <see cref="System.ComponentModel.ISynchronizeInvoke.BeginInvoke"/> , this
   method operates synchronously, that is,
   it waits until the process completes before returning. Exceptions raised during
   the call are propagated back to the caller.</para>
			<para> Use this method when calling a method from a different thread to
   marshal the call to the proper thread.</para>
		</remarks>
	</doc></docs>
