<docs>
	<doc for="PropertyDescriptor.PropertyDescriptor">
		<overload>
			<para>
       Initializes a new instance of the <see cref="System.ComponentModel.PropertyDescriptor"/> class.
    </para>
		</overload>
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.ComponentModel.PropertyDescriptor"/> class with the specified name and
       attributes.
    </para>
		</summary>
		<param name="name">
    The name of the property.
 </param>
		<param name="attrs">
			<para>An array of type <see cref="System.Attribute"/> that contains the property attributes.</para>
		</param>
		<seealso cref="System.Attribute"/>
	</doc>
	<doc for="PropertyDescriptor.PropertyDescriptor1">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.ComponentModel.PropertyDescriptor"/> class with
       the name and attributes in the specified <see cref="System.ComponentModel.MemberDescriptor"/>.
    </para>
		</summary>
		<param name="descr">
    A <see cref="System.ComponentModel.MemberDescriptor"/> that contains the name of the property and its attributes.
 </param>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
	</doc>
	<doc for="PropertyDescriptor.Converter">
		<summary>
			<para>
       Gets the type converter for this property.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.ComponentModel.TypeConverter"/> that is used to convert the <see cref="System.Type"/>
       of this property.
    </para>
		</value>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="PropertyDescriptor.PropertyType">
		<summary>
			<para>
       When overridden in a derived class,
       gets the type of the property.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.Type"/> that represents
       the type of the property.
    </para>
		</value>
		<remarks>
			<para>
       Typically, this property is implemented through reflection.
    </para>
		</remarks>
	</doc>
	<doc for="PropertyDescriptor.GetHashCode">
		<nodoc/>
		<summary>
			<para> Returns the hash code for this object.
      </para>
		</summary>
		<returns>
			<para>The hash code for this object.</para>
		</returns>
	</doc><doc for="PropertyDescriptor.GetEditor">
		<summary>
			<para> Gets an editor of the specified type.
      </para>
		</summary>
		<param name="editorBaseType"><para> The base type of editor, which is used to differentiate between multiple editors that a property supports.</para></param>
		<returns>
			<para> An instance of the requested editor type, or
   <see langword="null "/> if an editor cannot be found.
      </para>
		</returns>
	</doc><doc for="PropertyDescriptor.Equals">
		<summary>
			<para> Compares this to another object
      to see if they are equivalent.</para>
		</summary>
		<param name="obj">The object to compare to this <see cref="System.ComponentModel.PropertyDescriptor"/> . </param>
		<returns>
			<para><see langword="true "/>if the values 
   are
   equivalent; otherwise, <see langword="false"/>.
   </para>
		</returns>
	</doc><doc for="PropertyDescriptor.PropertyDescriptor2">
		<summary>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.PropertyDescriptor"/> class with
   the name in the specified <see cref="System.ComponentModel.MemberDescriptor"/> and the
   attributes in both the <see cref="System.ComponentModel.MemberDescriptor"/> and the
<see cref="System.Attribute"/> array.
   </para>
		</summary>
		<param name="descr">A <see cref="System.ComponentModel.MemberDescriptor"/> containing the name of the member and its attributes. </param>
		<param name="attrs"><para>An <see cref="System.Attribute"/> array containing the attributes you want to associate with the property.</para></param>
		<remarks>
			<para> This constructor appends the attributes in the <see cref="System.Attribute"/> array to the
   attributes in the <see cref="System.ComponentModel.MemberDescriptor"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="PropertyDescriptor.SerializationVisibility">
		<summary>
			<para> Gets a value
      indicating whether this property should be serialized, as specified in the <see cref="System.ComponentModel.DesignerSerializationVisibilityAttribute"/>.
      </para>
		</summary>
		<value>
			<para> One of
      the <see cref="System.ComponentModel.DesignerSerializationVisibility"/> enumeration
      values that specifies whether this property should be serialized.
      </para>
		</value>
		<seealso cref="System.ComponentModel.DesignerSerializationVisibilityAttribute"/>
		<seealso cref="System.ComponentModel.DesignerSerializationVisibility"/>
	</doc><doc for="PropertyDescriptor.AddValueChanged">
		<summary>
			<para> Enables other objects to be notified when this property changes.</para>
		</summary>
		<param name="component">The component to add the handler for. </param>
		<param name="handler">The delegate to add as a listener. </param>
	</doc><doc for="PropertyDescriptor.CreateInstance">
		<summary>
			<para>Creates an instance of the
      specified type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type to create.</param>
		<returns>
			<para>A new instance of the type.</para>
		</returns>
		<remarks>
			<para><see cref="System.ComponentModel.PropertyDescriptor.CreateInstance"/> looks for a
   constructor that takes the specified
   type. If it finds a constructor,
   the type of the property is passed in.</para>
			<para> Converters and
   editors use this method to create versions of a component. This method enables a single component
   to be reused for more than one type.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="T:System.Drawing.Design.UITypeEditor"/>
	</doc><doc for="PropertyDescriptor.GetChildProperties1">
		<summary>
			<para> Returns a <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
using a specified array of attributes
as a filter.</para>
		</summary>
		<param name="filter">An array of type <see cref="System.Attribute"/> to use as a filter.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
with the properties that match the specified attributes. </para>
		</returns>
		<remarks>
			<para>This method passes <see langword="null"/> for the <paramref name="instance"/>
parameter.</para>
			<para>The properties for the <paramref name="instance"/> parameter can differ from the properties of a
class, because the site can add or remove properties if the <paramref name="instance"/>
parameter
is sited.</para>
			<para> The <paramref name="filter"/> parameter can mix <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If a property does not have an <see cref="System.Attribute"/> of the same class, the property will not be included
      in the returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match to be included in
      the returned array.</term>
				</item>
				<item>
					<term>
      
      If you
      
      specify an <see cref="System.Attribute"/> instance and it is the
      default property, it will be included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="PropertyDescriptor.GetChildProperties2">
		<summary>
			<para> Returns a <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
for
a given object.</para>
		</summary>
		<param name="instance">A component to get the properties for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
with the properties for the specified component. </para>
		</returns>
		<remarks>
			<para>This method passes <see langword="null"/> for the
<paramref name="filter"/> parameter. </para>
			<para>The properties for the <paramref name="instance"/> parameter can differ from the properties of a 
class, because the site can add or remove properties if the <paramref name="instance"/>
parameter
is sited.</para>
			<para> The <paramref name="filter"/> parameter can mix <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/> object is treated as a wildcard; it matches any
      property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If a property does not have an <see cref="System.Attribute"/> of the same class, the property will not be included
      in the returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match to be included in
      the returned array.</term>
				</item>
				<item>
					<term>
      
      If you
      
      specify an <see cref="System.Attribute"/> instance and it is the
      default property, it will be included in the returned array even if there is
      no instance of the <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="PropertyDescriptor.GetTypeFromName">
		<summary>
			<para>Returns a type using its name.</para>
		</summary>
		<param name="typeName"> The assembly-qualified name of the type to retrieve.</param>
		<returns>
			<para>A <see cref="System.Type"/> that matches the
   given type name, or
<see langword="null "/> if a match cannot be found.</para>
		</returns>
		<remarks>
			<para>To find the appropriate type, this method first checks
      the assembly of the type that this <see cref="System.ComponentModel.PropertyDescriptor"/>
      references. If it does not find the type
      in the assembly, it calls <see cref="System.Type.GetType" qualify="true"/>.</para>
		</remarks>
	</doc><doc for="PropertyDescriptor.RemoveValueChanged">
		<summary>
			<para> Enables other objects to be notified when this property changes.</para>
		</summary>
		<param name="component">The component to remove the handler for. </param>
		<param name="handler">The delegate to remove as a listener. </param>
	</doc><doc for="PropertyDescriptor">
		<summary>
			<para>Provides an abstraction of a property on a class.</para>
		</summary>
		<remarks>
			<para>A description of a property consists of a name, its attributes, the component
 class that the property is associated with, and the type of the property.</para>
			<para><see cref="System.ComponentModel.PropertyDescriptor"/> provides the
 following properties and methods:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.Converter"/> contains 
 the <see cref="System.ComponentModel.TypeConverter"/> for this property.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.IsLocalizable"/> indicates whether 
 this property should be localized.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.GetEditor"/> returns an editor of
 the specified type.</term>
				</item>
			</list>
			<para><see cref="System.ComponentModel.PropertyDescriptor"/> also provides the
following <see langword="abstract "/>properties and
methods:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.ComponentType"/> contains the type of 
 component this property is bound to.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.IsReadOnly"/> indicates whether 
 this property is read-only.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.PropertyType"/> gets the type of the 
 property.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.CanResetValue"/> indicates whether 
 resetting the component changes the value of the component.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.GetValue"/> returns the current 
 value of the property on a component.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.ResetValue"/> resets the value for 
 this property of the component.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.SetValue"/> sets the value of 
 the component to a different value.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.PropertyDescriptor.ShouldSerializeValue"/>
 indicates whether the value of this property needs to be
 persisted.</term>
				</item>
			</list>
			<para>Typically, the <see langword="abstract "/>members are implemented through reflection. For more information about
reflection, see <see topic="cpconDiscoveringTypeInformationatRunTime"/>. </para>
		</remarks>
		<example>
			<para>The following example is built upon the example in
 the <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
 class. It prints the information (category, description, display name) of the
 Text of a button in a text box. It assumes that <c>button1</c> and <c>textbox1</c>
 have been instantiated on a form. </para>
			<codelink SampleID="PropertyDescriptor" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.DefaultValueAttribute"/>
	</doc>
	<doc for="PropertyDescriptor.GetChildProperties3">
		<summary>
			<para> Returns a <see cref="System.ComponentModel.PropertyDescriptorCollection"/> for a given
 object using a specified array of attributes
 as a filter.</para>
		</summary>
		<param name="instance">A component to get the properties for.</param>
		<param name="filter">An array of type <see cref="System.Attribute"/> to use as a filter.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the
 properties that match the specified attributes for the specified component. </para>
		</returns>
		<remarks>
			<para>The properties for the <paramref name="instance"/> parameter can differ from the properties of a
 class, because the site can add or remove properties if the <paramref name="instance"/>
 
 parameter
 is sited.</para>
			<para> The <paramref name="filter"/> parameter can mix <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
 
 A <see cref="System.Type"/> object is treated as a wildcard; it matches any
 property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
 
 If a property does not have an <see cref="System.Attribute"/> of the same class, the property will not be included
 in the returned array.</term>
				</item>
				<item>
					<term>
 
 If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match to be included in
 the returned array.</term>
				</item>
				<item>
					<term>
 
 If you
 
 specify an <see cref="System.Attribute"/> instance and it is the
 default property, it will be included in the returned array even if there is
 no instance of the <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
			<para>Generally, child properties should be returned by implementing the <see cref="System.ComponentModel.TypeConverter.GetProperties"/> member of the <see cref="System.ComponentModel.TypeConverter"/> returned from this property, however. </para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
	</doc>
	<doc for="PropertyDescriptor.IsReadOnly">
		<summary>
			<para> When overridden in
 a derived class, gets a value
 indicating whether this property is read-only.
 </para>
		</summary>
		<value>
			<para><see langword="true "/>if the 
 property is read-only; otherwise,
<see langword="false "/> .
 </para>
		</value>
		<seealso cref="System.ComponentModel.ReadOnlyAttribute"/>
	</doc>
	<doc for="PropertyDescriptor.GetChildProperties">
		<overload>
			<para> Returns a <see cref="System.ComponentModel.PropertyDescriptorCollection"/> .</para>
		</overload>
		<summary>
			<para> Returns the default <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
.</para>
		</summary>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/>
. </para>
		</returns>
		<remarks>
			<para>This method passes <see langword="null"/> for both the <paramref name="instance"/>
parameter and the <paramref name="filter"/> parameter.</para>
			<para>The properties for the <paramref name="instance"/> parameter can differ from the properties of
a class, because the container can add or remove properties if the <paramref name="instance"/>
parameter
is sited.</para>
			<para> The <paramref name="filter"/> parameter can mix <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is
defined by the
following rules:</para>
			<list type="bullet"><item>
					<term>
 
 A <see cref="System.Type"/> object is treated as a wildcard; it matches any
 property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
 
 If a property does not have an <see cref="System.Attribute"/> of the same class, the property will not be included
 in the returned array.</term>
				</item>
				<item>
					<term>
 
 If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match to be included in
 the returned array.</term>
				</item>
				<item>
					<term>
 
 If you
 
 specify an <see cref="System.Attribute"/> and it is
 the default property, it will be included in the returned array, even if there
 is no instance of <see cref="System.Attribute"/> in the property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.EventDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.Attribute"/>
	</doc>
	<doc for="PropertyDescriptor.OnValueChanged">
		<summary>
			<para>Raises the ValueChanged event that you implemented.</para>
		</summary>
		<param name="component">The object that raises the event.</param>
		<param name=" e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>This method should be called by your property descriptor implementation when the
 property value has changed.</para>
		</remarks>
	</doc>
	<doc for="PropertyDescriptor.CanResetValue">
		<summary>
			<para> When overridden in a derived class, returns
 whether resetting an object changes its value.</para>
		</summary>
		<param name="component"><para> The component to test for reset capability.</para></param>
		<returns>
			<para><see langword="true "/> if
 resetting the component changes its value;
 otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Typically, this method
 is implemented through reflection.</para>
			<note type="inheritinfo">
 When overridden in a derived class, this method looks
 for a <see cref="System.ComponentModel.DefaultValueAttribute"/> . If it finds one, it
 compares the value of the attribute with the property's current value. It returns
 <see langword="true "/>when the default value
 does not match the property's current value.
 If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for
 a "ShouldPersistMyProperty" method that you need to implement yourself. If this
 is found, <see cref="System.ComponentModel.PropertyDescriptor.CanResetValue"/> returns what
 "ShouldPersistMyProperty" returns. Otherwise, it looks for a "ResetMyProperty"
 method that you need to implement yourself. If this is found,
 <see cref="System.ComponentModel.PropertyDescriptor.CanResetValue"/> returns <see langword="true"/>
 . If it cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, a
 "ShouldPersistMyProperty" method, or a "ResetMyProperty" method, then it returns <see langword="false"/>
 .
 
</note>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="PropertyDescriptor.GetValue">
		<summary>
			<para> When overridden in a derived class, gets the current
 value
 of the
 property on a component.
 </para>
		</summary>
		<param name="component">The component with the property for which to retrieve the value. </param>
		<returns>
			<para> The value of a property for a given component.
 </para>
		</returns>
		<remarks>
			<para> Typically, this method is implemented through reflection.
 </para>
			<para> This method automatically calls the pre-change
 method, <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging"/>, and post-change
 method, <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged"/>, of the <see cref="System.ComponentModel.Design.IComponentChangeService"/>.</para>
			<note type="inheritinfo">
 When you override this method, it gets the current value of
 the property by invoking a "GetMyProperty" method that you need to implement. An
 exception in that method should pass through.
 </note>
		</remarks>
	</doc>
	<doc for="PropertyDescriptor.ResetValue">
		<summary>
			<para> When overridden in a derived class, resets the value for this
 property
 of the component
 to the default value.
 </para>
		</summary>
		<param name="component"><para>The component with the property value that is to be reset to the default value. </para></param>
		<remarks>
			<para> Typically, this method is implemented through reflection.
 </para>
			<para> This method determines the value to reset the
 property to in the following order of precedence:
 </para>
			<list type="number"><item>
					<term>
 
 There is a shadowed property for this property.</term>
				</item>
				<item>
					<term>
 
 There is a <see cref="System.ComponentModel.DefaultValueAttribute"/> for this
 property.</term>
				</item>
				<item>
					<term>
 
 There is a "ResetMyProperty" method that you
 have implemented, where "MyProperty" is the name of the property you pass to
 it.</term>
				</item>
			</list>
			<para>This method creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> 
automatically in the following order:</para>
			<list type="number"><item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction" qualify="true"/>
 
 to
 create a new <see cref="System.ComponentModel.Design.DesignerTransaction"/>
 object to represent the changes.</term>
				</item>
				<item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging" qualify="true"/> to
 indicate that the transaction has begun and the changes are about to occur.</term>
				</item>
				<item>
					<term>
 
 The method resets the property to the value
 determined by this method's checking order.</term>
				</item>
				<item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged" qualify="true"/> to
 indicate that the changes have occured.</term>
				</item>
				<item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.DesignerTransaction.Commit" qualify="true"/>
 
 to indicate
 that the transaction is completed.</term>
				</item>
			</list>
			<para>The purpose of the transaction is to support
<see langword="Undo"/> and <see langword="Redo"/> functionality. </para>
			<note type="inheritinfo">
 When overridden in a derived class, this method looks for a <see cref="System.ComponentModel.DefaultValueAttribute"/>. If it finds
 one, it sets the value of the property to the <see cref="System.ComponentModel.DefaultValueAttribute"/>
 it found.
 If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for
 a "ResetMyProperty" method that you need to implement. If this is
 found, <see cref="System.ComponentModel.PropertyDescriptor.ResetValue"/> invokes it.
 If <see cref="System.ComponentModel.PropertyDescriptor.ResetValue"/> cannot find a
<see cref="System.ComponentModel.DefaultValueAttribute"/> or a "ResetMyProperty" method that you 
 implemented, then it does
 not perform an operation.
</note>
			<para>
			</para>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="PropertyDescriptor.SetValue">
		<summary>
			<para> When overridden in a derived class, sets the value of
 the component to a different value.
 </para>
		</summary>
		<param name="component"><para>The component with the property value that is to be set.</para></param>
		<param name="value">The new value. </param>
		<remarks>
			<para> Typically, this method is implemented through reflection.
 </para>
			<para>This method creates a <see cref="System.ComponentModel.Design.DesignerTransaction"/> automatically in
 the following order:</para>
			<list type="number"><item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.IDesignerHost.CreateTransaction" qualify="true"/>
 to create a new <see cref="System.ComponentModel.Design.DesignerTransaction"/>
 object to represent the changes.</term>
				</item>
				<item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanging" qualify="true"/> to
 indicate that the transaction has begun and the changes are about to occur.</term>
				</item>
				<item>
					<term>
 
 The method resets the property to the value
 determined by this method's checking order.</term>
				</item>
				<item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.IComponentChangeService.OnComponentChanged" qualify="true"/> to
 indicate that the changes have occurred.</term>
				</item>
				<item>
					<term>
 
 The method calls <see cref="System.ComponentModel.Design.DesignerTransaction.Commit" qualify="true"/>
 to indicate that the transaction is complete.</term>
				</item>
			</list>
			<para>The purpose of the transaction is to support
<see langword="Undo"/> and <see langword="Redo"/> functionality.</para>
			<note type="inheritinfo">
 When you override this method, it should set the value of
 the property by invoking the appropriate "SetMyProperty" method that you need to
 implement. If the value specified is invalid, the component should throw an
 exception, which is passed up. You should design the property so that a
 "GetMyProperty" method (that you have implemented) following a "SetMyProperty"
 method returns the value passed in when the "SetMyProperty" method does not throw an exception.
</note>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="PropertyDescriptor.ShouldSerializeValue">
		<summary>
			<para> When overridden in a derived class, determines a value indicating whether the
 value of
 this property needs to be persisted.</para>
		</summary>
		<param name="component"><para>The component with the property to be examined for persistence. </para></param>
		<returns>
			<para><see langword="true "/>if the property should be persisted;
 otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Typically, this method is implemented through reflection.</para>
			<note type="inheritinfo">
 When overridden in a derived class, this method returns
 <see langword="true "/> if the current value of the property is different from
 its
 default value. It looks for a default value by first looking for a
 <see cref="System.ComponentModel.DefaultValueAttribute"/>.
 If the method finds this attribute, it compares
 the value of the attribute with the property's current value.
 If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for
 a "ShouldSerializeMyProperty" method that you need to implement. If it is
 found, <see cref="System.ComponentModel.PropertyDescriptor.ShouldSerializeValue"/>
 invokes it.
 If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/> or a
 "ShouldSerializeMyProperty" method, it cannot create
 optimizations and it returns <see langword="true"/>.
 </note>
			<para>
			</para>
		</remarks>
	</doc>
	<doc for="PropertyDescriptor.ComponentType">
		<summary>
			<para> When overridden in a derived class, gets the type of the
      component this property
      is bound to.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Type"/> that represents
   the type of component this property is bound to. When <see cref="System.ComponentModel.PropertyDescriptor.GetValue"/> or <see cref="System.ComponentModel.PropertyDescriptor.SetValue"/> are invoked, the
   object specified might be an
   instance of this type.
   </para>
		</value>
		<remarks>
			<para> Typically, this property is implemented through reflection.
      </para>
		</remarks>
	</doc>
	<doc for="PropertyDescriptor.IsLocalizable">
		<summary>
			<para> Gets a value
      indicating whether this property should be localized, as
      specified in the <see cref="System.ComponentModel.LocalizableAttribute"/>.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the member 
   is marked with the <see cref="M:System.ComponentModel.LocalizableAttribute.#ctor"/> constructor of the
   value<see langword=" "/>
				<see langword="true"/>
; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> When a property is marked with the 
   <see cref="M:System.ComponentModel.LocalizableAttribute.#ctor"/> constructor of the 
      value<see langword=" true"/> and used in a
      visual designer, its values are saved in a resource file. If
      you mark a property with the attribute and then set
      the property in code,
      resource files are not used.
      </para>
		</remarks>
		<seealso cref="System.ComponentModel.LocalizableAttribute"/>
	</doc>
</docs>
