<docs>
	<doc for="EventDescriptor.EventDescriptor">
		<overload>
			<para>
       Initializes a new instance of the <see cref="System.ComponentModel.EventDescriptor"/> class.
    </para>
		</overload>
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.ComponentModel.EventDescriptor"/> class with the
       specified name and attribute
       array.
    </para>
		</summary>
		<param name="name">
    The name of the event.
 </param>
		<param name="attrs">
			<para>An array of type <see cref="System.Attribute"/> that contains the event attributes.</para>
		</param>
	</doc>
	<doc for="EventDescriptor.EventDescriptor1">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.ComponentModel.EventDescriptor"/> class with the name and attributes in
       the specified <see cref="System.ComponentModel.MemberDescriptor"/>
       .
    </para>
		</summary>
		<param name="descr">
    A <see cref="System.ComponentModel.MemberDescriptor"/> that contains the name of the event and its attributes.
 </param>
	</doc>
	<doc for="EventDescriptor.EventType">
		<summary>
			<para>
       When overridden in a derived
       class, gets the type of delegate for the event.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.Type"/> that represents
       the type of delegate for the event.
    </para>
		</value>
		<remarks>
			<para>
       Typically, this property
       is implemented through reflection.
    </para>
		</remarks>
		<seealso cref="System.ComponentModel.EventDescriptor.ComponentType"/>
		<seealso cref="System.ComponentModel.EventDescriptor.IsMulticast"/>
	</doc>
	<doc for="EventDescriptor.AddEventHandler">
		<summary>
			<para>When overridden in
      a derived class,
      binds the event to the component.</para>
		</summary>
		<param name="component">A component that provides events to the delegate.</param>
		<param name="value"><para> A delegate that represents the method that handles the event.</para></param>
		<remarks>
			<para>Typically, this method is implemented through reflection. For more information on reflection, see
   <see topic="cpconDiscoveringTypeInformationatRunTime"/>. </para>
			<para>For more information about delegates, see <see topic="cpconEventsDelegates"/>.</para>
			<note type="inheritinfo">
   When you override this method, it should add the delegate
   to the component's event list by invoking the appropriate <c>add_myHandler</c> method.

</note>
		</remarks>
		<seealso cref="System.ComponentModel.EventDescriptor.AddEventHandler"/>
	</doc><doc for="EventDescriptor.RemoveEventHandler">
		<summary>
			<para>When
      overridden
      in a derived class, unbinds the delegate from the
      component
      so that the delegate will no
      longer receive events from the component.</para>
		</summary>
		<param name="component"><para> The component that the delegate is bound to.</para></param>
		<param name="value">The delegate to unbind from the component.</param>
		<remarks>
			<para>Typically, this method is implemented through reflection. For more information on reflection, see
   <see topic="cpconDiscoveringTypeInformationatRunTime"/>. </para>
			<para>For more information about delegates, see <see topic="cpconEventsDelegates"/>.</para>
			<note type="inheritinfo">
   When you override this method, it should remove the
   delegate from the component's event list by invoking the appropriate <c>remove_myHandler</c> method.

</note>
		</remarks>
		<seealso cref="System.ComponentModel.EventDescriptor.AddEventHandler"/>
	</doc><doc for="EventDescriptor.EventDescriptor2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.EventDescriptor"/> class with
   the name in the specified <see cref="System.ComponentModel.MemberDescriptor"/> and the
   attributes in both the <see cref="System.ComponentModel.MemberDescriptor"/> and the <see cref="System.Attribute"/>
   array.</para>
		</summary>
		<param name="descr">A <see cref="System.ComponentModel.MemberDescriptor"/> that has the name of the member and its attributes.</param>
		<param name="attrs"><para>An <see cref="System.Attribute"/> array with the attributes you want to add to this event description.</para></param>
		<remarks>
			<para>This constructor appends the attributes in the <see cref="System.Attribute"/> array to the attributes in the <see cref="System.ComponentModel.MemberDescriptor"/>.</para>
		</remarks>
	</doc><doc for="EventDescriptor.ComponentType">
		<summary>
			<para> When overridden in
      a
      derived class, gets the type of component this event is bound to.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Type"/> that represents
   the type of component the
   event is bound to.
   </para>
		</value>
		<remarks>
			<para> Typically, this property
      is implemented through reflection.
      </para>
		</remarks>
		<seealso cref="System.ComponentModel.EventDescriptor.EventType"/>
		<seealso cref="System.ComponentModel.EventDescriptor.IsMulticast"/>
	</doc><doc for="EventDescriptor.IsMulticast">
		<summary>
			<para> When overridden in a derived class, gets a value
      indicating whether the event delegate is a multicast
      delegate.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the event
   delegate is multicast; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> Typically, this property
      is implemented through reflection.
      </para>
			<para> 
      A multicast delegate differs from a regular delegate in that it can contain
      references to more than just one method. Methods in a multicast delegate are
      executed synchronously when the delegate is invoked, in the order in which
      they appear. If one of the called methods raises an exception, then the
      delegate ceases and the exception is propagated to the delegate caller. </para>
		</remarks>
		<seealso cref="System.ComponentModel.EventDescriptor.EventType"/>
		<seealso cref="System.ComponentModel.EventDescriptor.ComponentType"/>
	</doc><doc for="EventDescriptor">
		<summary>
			<para>Provides information about an event.</para>
		</summary>
		<remarks>
			<para> An <see cref="System.ComponentModel.EventDescriptor"/> consists of a name, its attributes, the component that the event
 is bound to, the event delegate, the type of delegate, and whether the delegate is multicast.</para>
			<para><see cref="System.ComponentModel.EventDescriptor"/>
provides the following <see langword="abstract"/> properties and methods:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.ComponentModel.EventDescriptor.ComponentType"/>contains the type of the 
 component this event is declared on.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.EventDescriptor.EventType"/> contains the type of 
 delegate for the event.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.EventDescriptor.IsMulticast"/> contains a value 
 indicating whether the event delegate is a multicast delegate.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.EventDescriptor.AddEventHandler"/> binds the event to a 
 component.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.EventDescriptor.RemoveEventHandler"/> unbinds the delegate
 from the component so that the delegate no longer receives events from the component.</term>
				</item>
			</list>
			<para>For more information on events, see <see topic="cpconProvidingEventFunctionality"/>. For more information about
reflection, see <see topic="cpconDiscoveringTypeInformationatRunTime"/>. </para>
		</remarks>
		<example>
			<para>The following example is built upon the example in
 the <see cref="System.ComponentModel.EventDescriptorCollection"/>
 class. It prints the information (category,
 description, display name) of each event on a button in a text box. It
 assumes that button1 and textbox1 have been instantiated on a form. </para>
			<codelink SampleID="EventDescriptor" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
		<seealso cref="System.Attribute"/>
	</doc>
</docs>
