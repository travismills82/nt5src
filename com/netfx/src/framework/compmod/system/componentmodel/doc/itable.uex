<docs>
	<doc for="IBindingList.SupportsSearching">
		<summary>
			<para> Gets whether the list supports searching using 
      the <see cref="System.ComponentModel.IBindingList.Find"/> method.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the list supports searching using the <see cref="System.ComponentModel.IBindingList.Find"/> method; otherwise, 
<see langword="false"/>.</para>
		</value>
	</doc><doc for="IBindingList.SupportsSorting">
		<summary>
			<para> Gets whether the list supports sorting.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the list supports sorting; otherwise, 
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If this property is <see langword="true"/>, then <see cref="System.ComponentModel.IBindingList.IsSorted"/>, <see cref="System.ComponentModel.IBindingList.SortProperty"/>, <see cref="System.ComponentModel.IBindingList.SortDirection"/>, <see cref="System.ComponentModel.IBindingList.ApplySort"/>, and <see cref="System.ComponentModel.IBindingList.RemoveSort"/> are supported.</para>
		</remarks>
	</doc><doc for="IBindingList.AllowEdit">
		<summary>
			<para>Gets whether you can update items in the list.</para>
		</summary>
		<value>
			<para><see langword="true"/> if you can update the items in the list; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc><doc for="IBindingList.SortDirection">
		<summary>
			<para> Gets the direction of the sort.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.ComponentModel.ListSortDirection"/> values.</para>
		</value>
		<exception cref="System.NotSupportedException">This property is not supported.</exception>
		<remarks>
			<para> This property is supported if <see cref="System.ComponentModel.IBindingList.SupportsSorting"/> is <see langword="true"/> ; 
   otherwise, this property throws a <see cref="System.NotSupportedException"/>
   .</para>
		</remarks>
	</doc><doc for="IBindingList.ListChanged">
		<summary>
			<para>Occurs when the list changes or an item in the list changes.</para>
		</summary>
		<remarks>
			<para>This event is raised only if the <see cref="System.ComponentModel.IBindingList.SupportsChangeNotification"/> property is 
<see langword="true"/>.</para>
		</remarks>
	</doc><doc for="IBindingList.AllowNew">
		<summary>
			<para>Gets whether you can add items to the list using <see cref="System.ComponentModel.IBindingList.AddNew"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if you can add items
   to the list using <see cref="System.ComponentModel.IBindingList.AddNew"/>; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Collections.IList.IsFixedSize" qualify="true"/> or <see cref="System.Collections.IList.IsReadOnly" qualify="true"/> is <see langword="true"/> , this property returns <see langword="false"/>.</para>
		</remarks>
	</doc><doc for="IBindingList.AllowRemove">
		<summary>
			<para> Gets whether you can remove items from the list,
      using <see cref="System.Collections.IList.Remove"/> or <see cref="System.Collections.IList.RemoveAt"/>
      .</para>
		</summary>
		<value>
			<para><see langword="true"/> if you can remove items from the list;
   otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Collections.IList.IsFixedSize" qualify="true"/> or <see cref="System.Collections.IList.IsReadOnly" qualify="true"/> is
<see langword="true"/> , this property returns 
<see langword="false"/>.</para>
			<note type="note">
   If <see cref="System.ComponentModel.IBindingList.AllowRemove"/> returns
<see langword="false"/> , <see cref="System.Collections.IList.Remove" qualify="true"/> and <see cref="System.Collections.IList.RemoveAt" qualify="true"/> throw a <see cref="System.NotSupportedException"/> 
.
</note>
		</remarks>
	</doc><doc for="IBindingList.IsSorted">
		<summary>
			<para> Gets whether the items in the list are sorted.</para>
		</summary>
		<value>
			<para><see langword="true"/> if <see cref="System.ComponentModel.IBindingList.ApplySort"/> has been called
   and <see cref="System.ComponentModel.IBindingList.RemoveSort"/> has not been called; otherwise,
<see langword="false"/>.</para>
		</value>
		<exception cref="System.NotSupportedException">This property is not supported.</exception>
		<remarks>
			<para> This property is supported if <see cref="System.ComponentModel.IBindingList.SupportsSorting"/> is
<see langword="true"/> ; otherwise, this property 
   throws a <see cref="System.NotSupportedException"/>
   .</para>
			<para>If <see cref="System.ComponentModel.IBindingList.IsSorted"/> returns <see langword="true"/>, items 
are added or removed in the order of the sort.</para>
		</remarks>
	</doc><doc for="IBindingList.SortProperty">
		<summary>
			<para> Gets the <see cref="System.ComponentModel.PropertyDescriptor"/> that is being used
   for sorting.</para>
		</summary>
		<value>
			<para>The <see cref="System.ComponentModel.PropertyDescriptor"/> that is being
   used for sorting.</para>
		</value>
		<exception cref="System.NotSupportedException">This property is not supported.</exception>
		<remarks>
			<para> This property is supported if <see cref="System.ComponentModel.IBindingList.SupportsSorting"/> is <see langword="true"/> ;
   otherwise, this property throws a <see cref="System.NotSupportedException"/>
   .</para>
		</remarks>
	</doc><doc for="IBindingList.SupportsChangeNotification">
		<summary>
			<para> Gets whether a <see cref="System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or
   an item in the list changes.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a <see cref="System.ComponentModel.IBindingList.ListChanged"/> 
event is raised when the list changes or when
an item changes; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para> Objects in the list must notify the list when they change, so the
      list can raise a <see cref="System.ComponentModel.IBindingList.ListChanged"/> event.</para>
		</remarks>
	</doc><doc for="IBindingList.Find">
		<summary>
			<para>Returns the index of the row that has the given <see cref="System.ComponentModel.PropertyDescriptor"/>.</para>
		</summary>
		<param name="property">The <see cref="System.ComponentModel.PropertyDescriptor"/> to search on.</param>
		<param name=" key">The value of the <paramref name="property"/> parameter to search for.</param>
		<returns>
			<para>The index of the row that has the given <see cref="System.ComponentModel.PropertyDescriptor"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>This method will select the first row where the value of the <paramref name="property"/> parameter equals the value of the
<paramref name="key "/>parameter.</para>
			<para>This method is supported if <see cref="System.ComponentModel.IBindingList.SupportsSearching"/>
is <see langword="true"/> , otherwise this method
throws a <see cref="System.NotSupportedException"/>.</para>
		</remarks>
	</doc><doc for="IBindingList.AddIndex">
		<summary>
			<para>Adds the <see cref="System.ComponentModel.PropertyDescriptor"/> to the indexes used for searching.</para>
		</summary>
		<param name="property">The <see cref="System.ComponentModel.PropertyDescriptor"/> to add to the indexes used for searching.</param>
		<remarks>
			<para>The list must support this method. However, support for this method can be a
      nonoperation.</para>
		</remarks>
	</doc>
	<doc for="IBindingList.RemoveIndex">
		<summary>
			<para>Removes the <see cref="System.ComponentModel.PropertyDescriptor"/> from the indexes used for searching.</para>
		</summary>
		<param name="property">The <see cref="System.ComponentModel.PropertyDescriptor"/> to remove from the indexes used for searching.</param>
		<remarks>
			<para>The list must support this method. However, support for this method can be a nonoperation.</para>
		</remarks>
	</doc>
	<doc for="IBindingList">
		<summary>
			<para>Provides the features required to support both complex
      and simple scenarios when binding to a data source.</para>
		</summary>
		<remarks>
			<para>This interface is implemented by the <see cref="T:System.Data.DataView"/> class. Implementation of a method
   should exhibit the same behavior as the implementation of that method in
   the <see cref="T:System.Data.DataView"/> class.</para>
			<para>When you call the <see cref="System.ComponentModel.IBindingList.ApplySort"/> or <see cref="System.ComponentModel.IBindingList.RemoveSort"/> methods, you should raise a <see cref="System.ComponentModel.IBindingList.ListChanged"/> 
event with the <see cref="System.ComponentModel.ListChangedType.Reset"/>enumeration. </para>
			<para>When you call the <see cref="System.ComponentModel.IBindingList.AddNew"/>method, you
should raise a <see cref="System.ComponentModel.IBindingList.ListChanged"/>
event with the <see cref="System.ComponentModel.ListChangedType.ItemAdded"/>
enumeration carrying the appropriate index. The added row is in a state where pressing
the ESC on a DataGrid control can remove the new row. Raising the <see cref="System.ComponentModel.IBindingList.ListChanged"/> event with the <see cref="System.ComponentModel.ListChangedType.ItemAdded"/>
enumeration a second time on this row
indicates that the item is now a row not in the "new" state. </para>
			<para>When you remove an item or call the <see cref="System.ComponentModel.IEditableObject.CancelEdit"/> method on a new
row (if that row implements <see cref="System.ComponentModel.IEditableObject"/>), you should
raise a <see cref="System.ComponentModel.IBindingList.ListChanged"/> event with the <see cref="System.ComponentModel.ListChangedType.ItemDeleted"/>
enumeration carrying the appropriate index. </para>
		</remarks>
		<example>
			<para>The following example provides a simple implementation of the <see cref="System.ComponentModel.IBindingList"/> interface. The <c>CustomerList</c> class stores customer
information in a list. This example assumes that you have used the <c>Customer</c> class that can be found in
the example in the <see cref="System.ComponentModel.IEditableObject"/>
class.</para>
			<codelink SampleID="Binding_Editable" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IBindingList.AddNew">
		<summary>
			<para>Adds a new item to the list.</para>
		</summary>
		<returns>
			<para>The item added to the list.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>This method is supported only if <see cref="System.ComponentModel.IBindingList.AllowNew"/> is
<see langword="true"/> ; otherwise, a <see cref="System.NotSupportedException"/> is 
   thrown.</para>
			<para>Implementing this method means that the <see cref="System.ComponentModel.IBindingList"/> list must understand the type of objects
to add to the list and must understand how to create a new instance of that
type. For example, if you have a collection of <c>myCustomer</c> objects, the <see cref="System.ComponentModel.IBindingList.AddNew"/> method should add a new <c>myCustomer</c> object to the list.</para>
			<note type="note">
   If the objects in this list implement
   the <see cref="System.ComponentModel.IEditableObject"/> interface, calling the <see cref="System.ComponentModel.IEditableObject.CancelEdit"/> method should
   discard an object, not add it to the list, when the object was created
   using the <see cref="System.ComponentModel.IBindingList.AddNew"/>
   method. The object should only be
   added to the list when the <see cref="System.ComponentModel.IEditableObject.EndEdit" qualify="true"/>
   
   method is called. Therefore, you must sychronize the object and the list carefully.
</note>
			<para>When this method is called, you should raise
   a <see cref="System.ComponentModel.IBindingList.ListChanged"/>
   event with the <see cref="System.ComponentModel.ListChangedType.ItemAdded"/>
   enumeration carrying the appropriate index. The added row is in a state
   where hitting Esc on a DataGrid control can remove the new row. Raising the
<see cref="System.ComponentModel.IBindingList.ListChanged"/> 
event with the <see cref="System.ComponentModel.ListChangedType.ItemAdded"/>
enumeration a second time on this row indicates that the item is now a
normal row (not in new state).</para>
		</remarks>
	</doc>
	<doc for="IBindingList.ApplySort">
		<summary>
			<para>Sorts the list based on a <see cref="System.ComponentModel.PropertyDescriptor"/> and a <see cref="System.ComponentModel.ListSortDirection"/>
.</para>
		</summary>
		<param name="property">The <see cref="System.ComponentModel.PropertyDescriptor"/> to sort by.</param>
		<param name=" direction">One of the <see cref="System.ComponentModel.ListSortDirection"/> values.</param>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>If items are added or removed, these items are placed in
      the order of the sort.</para>
			<para> This method is supported if <see cref="System.ComponentModel.IBindingList.SupportsSorting"/> is <see langword="true"/>
; otherwise, this method throws a <see cref="System.NotSupportedException"/>
.</para>
			<para>When you call this method, you should raise a <see cref="System.ComponentModel.IBindingList.ListChanged"/> 
event with the <see cref="System.ComponentModel.ListChangedType.Reset"/>enumeration. </para>
		</remarks>
	</doc>
	<doc for="IBindingList.RemoveSort">
		<summary>
			<para>Removes any sort applied using <see cref="System.ComponentModel.IBindingList.ApplySort"/> .</para>
		</summary>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para> This property is supported if <see cref="System.ComponentModel.IBindingList.SupportsSorting"/> is <see langword="true"/> ;
   otherwise, this property throws a <see cref="System.NotSupportedException"/>
   .</para>
			<para>When you call this method, you should raise a <see cref="System.ComponentModel.IBindingList.ListChanged"/> 
event with the <see cref="System.ComponentModel.ListChangedType.Reset"/>enumeration. </para>
		</remarks>
	</doc>
</docs>
