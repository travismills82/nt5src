<docs>
	<doc for="AttributeCollection.CopyTo">
		<summary>
			<para>Copies the collection to an array, starting at the specified index.</para>
		</summary>
		<param name="array">The <see cref="System.Array"/> to copy the collection to.</param>
		<param name=" index">The index to start from.</param>
		<seealso cref="System.Attribute"/>
	</doc>
	<doc for="AttributeCollection.GetDefaultAttribute">
		<summary>
			<para>Returns the default <see cref="System.Attribute"/> of a given <see cref="System.Type"/> .</para>
		</summary>
		<param name="attributeType">The <see cref="System.Type"/> of the attribute to retrieve.</param>
		<returns>
			<para>An <see cref="System.Attribute"/> .</para>
		</returns>
	</doc>
	<doc for="AttributeCollection.Empty">
		<summary>
			<para>Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.</para>
		</summary>
	</doc><doc for="AttributeCollection.AttributeCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.AttributeCollection"/> class.</para>
		</summary>
		<param name="attributes">An array of type <see cref="System.Attribute"/> that provides the attributes for this collection.</param>
		<example>
			<para>The following example creates a new <see cref="System.ComponentModel.AttributeCollection"/> using the
   attributes on <c>button1</c>. It
assumes that <c>button1</c>
has been created on a form.</para>
			<codelink SampleID="Classic AttributeCollection.AttributeCollection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc><doc for="AttributeCollection.Count">
		<summary>
			<para> Gets the number of attributes.
      </para>
		</summary>
		<value>
			<para> The number of attributes.
      </para>
		</value>
		<remarks>
			<para> You can use the <see cref="System.ComponentModel.AttributeCollection.Count"/> property
   to set the limits of a loop that iterates through a collection of objects. If
   the collection is zero-based, be sure to use <c>Count - 1</c>
as the upper boundary
of the loop.</para>
		</remarks>
		<example>
			<para> The following example uses the <see cref="System.ComponentModel.AttributeCollection.Count"/> property to print the
   number of properties on <c>button1</c> in a text box. It assumes that <c>button1</c> and <c>textBox1</c>
have been
created on a form.</para>
			<codelink SampleID="Classic AttributeCollection.Count Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc><doc for="AttributeCollection.this">
		<overload>
			<para> Gets the attribute with the
      specified index.
      </para>
		</overload>
		<summary>
			<para> Gets the attribute with the specified index
      number.
      </para>
		</summary>
		<param name="index">The zero-based index of <see cref="System.ComponentModel.AttributeCollection"/>. </param>
		<value>
			<para> The <see cref="System.Attribute"/> with the specified index number.
   </para>
		</value>
		<remarks>
			<para> The index
      number is zero-based. Therefore, you must subtract one from the
      numerical position of a particular <see cref="System.Attribute"/> to access that <see cref="System.Attribute"/>. For example, to get the third <see cref="System.Attribute"/>, you need to specify <c>myColl[2]</c>.
   </para>
		</remarks>
		<example>
			<para> The following example uses the <see cref="System.ComponentModel.AttributeCollection.this"/> property to
   print the name of the <see cref="System.Attribute"/> specified by the
   index number in a text box. Because the index number is zero-based, this example prints
   the name of the second <see cref="System.Attribute"/> in a text box. It assumes <c>button1</c> and <c>textBox1</c>
have
been created on a form.</para>
			<codelink SampleID="Classic AttributeCollection.this Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc><doc for="AttributeCollection.Contains1">
		<summary>
			<para> Determines whether this attribute collection contains all
      the specified attributes
      in the attribute array.</para>
		</summary>
		<param name="attributes">An array of type <see cref="System.Attribute"/> to find in the collection.</param>
		<returns>
			<para><see langword="true "/>if the
   collection contains all the attributes; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This collection has the specified array of attributes if
      all
      the
      specified attribute types exist in the collection and if each attribute in the
      specified array is the same as an attribute in the collection.</para>
		</remarks>
		<example>
			<para>The following example compares the attributes
      in <c>button1</c>
   and <c>textBox1</c>
to see whether
the attributes for the button are contained in the attributes for the text box.
It assumes that both <c>button1</c> and <c>textBox1</c>
have been created on a form.</para>
			<codelink SampleID="Classic AttributeCollection.Contains1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc><doc for="AttributeCollection.GetEnumerator">
		<summary>
			<para>Gets an enumerator for this collection.</para>
		</summary>
		<returns>
			<para>An enumerator of type <see cref="System.Collections.IEnumerator"/>.</para>
		</returns>
		<example>
			<para>The following example gets an enumerator for the
      attributes on <c>button1</c>. It
   uses the enumerator to print the names of the attributes in the collection. It
   assumes that <c>button1</c>
and <c>textBox1</c>
have been created on a form.</para>
			<codelink SampleID="Classic AttributeCollection.GetEnumerator Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.Collections.IEnumerator"/>
	</doc><doc for="AttributeCollection.Matches1">
		<summary>
			<para> Determines whether the attributes
      in the specified array are
      the same as the attributes in the collection.</para>
		</summary>
		<param name="attributes">An array of <see cref="System.CodeDom.MemberAttributes"/> to compare with the attributes in this collection.</param>
		<returns>
			<para><see langword="true "/>if all the
   attributes
   in the array
   are contained in the collection and have the same values as the
   attributes in the collection; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>An attribute can provide support for matching.</para>
		</remarks>
		<example>
			<para>The following example compares the attributes in a
      button and a text box to see whether they match. It assumes that <c>button1</c> and <c>textBox1</c>
   have been created on a
   form.</para>
			<codelink SampleID="Classic AttributeCollection.Matches1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc><doc for="AttributeCollection.ICollection.Count">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AttributeCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AttributeCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AttributeCollection.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AttributeCollection.Contains">
		<overload>
			<para>Determines whether this collection of attributes has the specified attribute or
      array of attributes.</para>
		</overload>
		<summary>
			<para>Determines whether this collection of attributes has the
      specified attribute.</para>
		</summary>
		<param name="attribute"><para>An <see cref="System.Attribute"/> to find in the collection.</para></param>
		<returns>
			<para><see langword="true "/>if the
   collection contains the attribute or is the default attribute for the type of
   attribute;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This collection has the specified attribute if the specified
      type of attribute exists in the collection, and if the value of the
      specified attribute
      is the same as the
      value
      of the instance of the attribute in
      the collection.</para>
			<para>The difference between <see cref="System.ComponentModel.AttributeCollection.Matches"/> and
<see cref="System.ComponentModel.AttributeCollection.Contains"/>is that 
<see cref="System.ComponentModel.AttributeCollection.Matches"/> calls 
   the <see cref="System.Attribute.Match"/> method on an attribute, and
<see cref="System.ComponentModel.AttributeCollection.Contains"/> calls 
   the <see cref="System.Object.Equals"/> method. </para>
			<para>For most attributes these methods do the same thing. For attributes that may
   have multiple flags, however, <see cref="System.Attribute.Match"/> is typically implemented so that it
   returns <see langword="true"/> if any of the flags are satisified. For
   example, consider a data binding attribute with the Boolean flags "SupportsSql",
   "SupportsOleDb" and "SupportsXml". This attribute may be present on a property
   that supports all three data binding approaches. It will often be the case that
   a programmer only needs to know if a particlar approach is available, not all
   three. So a programmer could use <see cref="System.Attribute.Match"/> with an instance of the attribute
   containing only the flags he/she needs.</para>
		</remarks>
		<example>
			<para>The following example checks to see whether the collection
      has a <see cref="System.ComponentModel.BrowsableAttribute"/> set to <see langword="true"/>. It assumes that <c>button1</c> and <c>textBox1</c>
   have been created on a
   form.</para>
			<codelink SampleID="Classic AttributeCollection.Contains Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc><doc for="AttributeCollection.Matches">
		<overload>
			<para> Determines whether a specified attribute or array of
      attributes is the same as an attribute or array of attributes
      in the collection.</para>
		</overload>
		<summary>
			<para> Determines whether a specified attribute
      is the same as an attribute
      in the collection.</para>
		</summary>
		<param name="attribute">An instance of <see cref="System.Attribute"/> to compare with the attributes in this collection.</param>
		<returns>
			<para><see langword="true "/>if the
   attribute is contained within the collection and has
   the same value as the attribute in the collection; otherwise,
<see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>An attribute can provide
      support for matching.</para>
			<para>The difference between <see cref="System.ComponentModel.AttributeCollection.Matches"/> and
<see cref="System.ComponentModel.AttributeCollection.Contains"/>is that 
<see cref="System.ComponentModel.AttributeCollection.Matches"/> calls 
   the <see cref="System.Attribute.Match"/> method on an attribute, and
<see cref="System.ComponentModel.AttributeCollection.Contains"/> calls 
   the <see cref="System.Object.Equals"/> method. </para>
			<para>For most attributes these methods do the same thing. For attributes that may
   have multiple flags, however, <see cref="System.Attribute.Match"/> is typically implemented so that it
   returns <see langword="true"/> if any of the flags are satisified. For
   example, consider a data binding attribute with the Boolean flags "SupportsSql",
   "SupportsOleDb" and "SupportsXml". This attribute may be present on a property
   that supports all three data binding approaches. It will often be the case that
   a programmer only needs to know if a particlar approach is available, not all
   three. So a programmer could use <see cref="System.Attribute.Match"/> with an instance of the attribute
   containing only the flags he/she needs.</para>
		</remarks>
		<example>
			<para>The following example verifies that the <see cref="System.ComponentModel.BrowsableAttribute"/> is a member
   of the collection and that it has been set to <see langword="true"/>. It assumes that <c>button1</c> and <c>textBox1</c>
have been created on a
form.</para>
			<codelink SampleID="Classic AttributeCollection.Matches Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.BrowsableAttribute"/>
	</doc><doc for="AttributeCollection">
		<summary>
			<para>Represents a collection of attributes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ComponentModel.AttributeCollection"/>
class
is read-only; it does not implement methods to add or remove attributes. You
must inherit from this class to implement these methods.</para>
			<para>Use the <see cref="System.ComponentModel.AttributeCollection.Count"/> property to
find the number of attributes
that exist in the collection.</para>
			<para>You can also use the methods of this class to query
   the collection about its contents.
   Call <see cref="System.ComponentModel.AttributeCollection.Contains"/> to verify that
   a specified attribute or attribute array exists in
   the collection.
   Call <see cref="System.ComponentModel.AttributeCollection.Matches"/> to verify that
   a specified attribute or array of attributes exists in the collection, and that
   the values of the specified attributes are the same as the values in the
   collection.</para>
			<para>While most attributes have default values, it is not
   required. If an attribute has no default value, <see langword="null"/>
   is returned from the indexed property that takes a type. When
   defining your own attributes, you can declare a default value by either providing
   a constructor that takes no arguments, or defining a public static field of your
   attribute type named "Default".</para>
		</remarks>
		<example>
			<para> When using attributes, verify that an attribute has
      been set, or access its value. The first example checks to see whether the <see cref="System.ComponentModel.BrowsableAttribute"/> has been set
      in this collection. It assumes that <c>button1</c> and <c>textBox1</c>. The second example gets the actual value of the <see cref="System.ComponentModel.DescriptionAttribute"/> for a button.
   It assumes that <c>button1</c> and <c>textBox1</c> have been created on a form.</para>
			<codelink SampleID="Classic AttributeCollection Example" SnippetID="1"/>
			<codelink SampleID="Classic AttributeCollection Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.BrowsableAttribute"/>
		<seealso cref="System.ComponentModel.DescriptionAttribute"/>
	</doc>
	<doc for="AttributeCollection.this1">
		<summary>
			<para>Gets the attribute
      with the specified type.</para>
		</summary>
		<param name="attributeType">The <see cref="System.Type"/> of the <see cref="System.Attribute"/> to get from the collection.</param>
		<value>
			<para>The <see cref="System.Attribute"/> with the specified type or, if the
   attribute does not exist, the default value for the attribute
   type.</para>
		</value>
		<remarks>
			<para>If the attribute does not exist in the collection, this
      property returns the default value for the attribute type.</para>
		</remarks>
		<example>
			<para>The following example gets the <see cref="System.ComponentModel.DesignerAttribute"/> from the collection and prints its value.
   It assumes that <c>button1</c>
and <c>textBox1</c>
have been created on a
form.</para>
			<para>For this code example to run, you must provide the fully 
   qualified assembly name. For information about how to obtain the fully qualified
   assembly name, see <see topic="cpconassemblynames"/>
   .</para>
			<codelink SampleID="Classic AttributeCollection.this1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Attribute"/>
	</doc>
</docs>
