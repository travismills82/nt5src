<docs>
	<doc for="IContainer.Add">
		<overload>
			<para>Adds the specified component to the <see cref="System.ComponentModel.IContainer"/>.</para>
		</overload>
		<summary>
			<para>Adds the specified <see cref="System.ComponentModel.IComponent"/> to the <see cref="System.ComponentModel.IContainer"/>
at the end of the list.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to add.</param>
		<remarks>
			<para> 
 The new <see cref="System.ComponentModel.IComponent"/> is added at the end of the list. </para>
		</remarks>
	</doc><doc for="IContainer.Remove">
		<summary>
			<para>Removes a component from the <see cref="System.ComponentModel.IContainer"/>.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to remove.</param>
		<remarks>
			<note type="inheritinfo">
 When you inherit from
 the <see cref="System.ComponentModel.IContainer.Remove"/> method, you must also remove the
 <see cref="System.ComponentModel.ISite"/>, if any, associated with this <see cref="System.ComponentModel.IComponent"/>.
 
 </note>
		</remarks>
	</doc><doc for="IContainer.Add1">
		<summary>
			<para>Adds the specified <see cref="System.ComponentModel.IComponent"/> to the <see cref="System.ComponentModel.IContainer"/>
at the end of the list, and assigns a name to the component.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to add.</param>
		<param name="name"> The unique, case-insensitive name to assign to the component. <para>-or-</para>
			<para><see langword="null"/> that leaves the component unnamed.</para></param>
		<remarks>
			<para> The new <see cref="System.ComponentModel.IComponent"/> is added at the end of the list. </para>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.ComponentModel.IContainer.Add"/>, you must assure that <paramref name="name"/>, if
   not <see langword="null"/>, is unique for this <see cref="System.ComponentModel.IContainer"/>.
   
</note>
		</remarks>
	</doc><doc for="IContainer.Components">
		<summary>
			<para>Gets all the components in the <see cref="System.ComponentModel.IContainer"/>.</para>
		</summary>
		<value>
			<para>A collection of <see cref="System.ComponentModel.IComponent"/> objects that represents all the components in the <see cref="System.ComponentModel.IContainer"/>.</para>
		</value>
		<remarks>
			<para>For a list of all members of this type, see <see topic="frlrfsystemcomponentmodelcomponentcollectionmemberstopic"/>
.</para>
		</remarks>
	</doc><doc for="IContainer">
		<summary>
			<para>Provides
      functionality for containers. Containers are objects that logically contain zero or more components.</para>
		</summary>
		<remarks>
			<para>Containers are objects that encapsulate and track zero or
      more components. In this context, containment refers to logical containment, not
      visual containment. You can use components and containers in a variety of scenarios, including scenarios that are both visual and not visual.</para>
			<note type="inotes">
      To be a container, the class must implement the <see cref="System.ComponentModel.IContainer"/> interface,
      which supports methods for adding, removing, and retrieving components.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="ContainerExmpl" SnippetID="2"/>
		</example>
		<seealso cref="System.ComponentModel.Component"/>
		<seealso cref="System.ComponentModel.IComponent"/>
		<seealso cref="System.ComponentModel.Container"/>
	</doc></docs>
