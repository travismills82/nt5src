<docs>
	<doc for="Container.Remove">
		<summary>
			<para> Removes a component from the <see cref="System.ComponentModel.Container"/>
.</para>
		</summary>
		<param name="component">The component to remove. </param>
		<remarks>
			<para> This method can be overridden by a derived class.
      </para>
		</remarks>
		<seealso cref="System.ComponentModel.Container.Add"/>
	</doc><doc for="Container.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.ComponentModel.Container"/>.</para>
		</overload>
		<summary>
			<para> Releases all resources used by the <see cref="System.ComponentModel.Container"/>.</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.ComponentModel.Container.Dispose"/> allows the resources used by 
   the <see cref="System.ComponentModel.Container"/> to be reallocated for other purposes. For
   more information about <see cref="System.ComponentModel.Container.Dispose"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
	</doc><doc for="Container.Dispose1">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.ComponentModel.Container"/>
and optionally releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
 releases all resources held by any managed objects that this <see cref="System.ComponentModel.Container"/>
 references. This method invokes the <see langword="Dispose()"/> method of each
 referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
 overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
 objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelContainerClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.ComponentModel.Container"/>
references. This method invokes the <see langword="Dispose()"/> method of each
referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
 overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
 objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
	</doc><doc for="Container.Add">
		<overload>
			<para> Adds a <see cref="System.ComponentModel.Component"/> to the <see cref="System.ComponentModel.Container"/>.</para>
		</overload>
		<summary>
			<para> Adds the specified <see cref="System.ComponentModel.Component"/> to the <see cref="System.ComponentModel.Container"/>
. The component is unnamed.</para>
		</summary>
		<param name="component">The component to add. </param>
		<remarks>
			<para> This method can be overridden by a derived class.
 </para>
			<para> 
 The new <see cref="System.ComponentModel.Component"/>
 is added to the end of the list.
 </para>
		</remarks>
		<seealso cref="System.ComponentModel.Container.Remove"/>
	</doc><doc for="Container.CreateSite">
		<summary>
			<para>Creates a site <see cref="System.ComponentModel.ISite"/> for the given <see cref="System.ComponentModel.IComponent"/>
and assigns the given name to the site.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to create a site for.</param>
		<param name="name">The name to assign to <paramref name="component"/>; or <see langword="null"/> to skip the name assignment.</param>
		<returns>
			<para>The newly created site.</para>
		</returns>
		<remarks>
			<para>If <paramref name="name"/> is <see langword="null"/> the <see cref="System.ComponentModel.IComponent"/> is added to the <see cref="System.ComponentModel.Container"/> without an identifying name.</para>
			<para>This method can be overridden by a derived class. Implementors wishing to 
 override <see cref="System.ComponentModel.Container.CreateSite"/> can provide a custom implementation
 through a class implementing <see cref="System.ComponentModel.ISite"/>.</para>
		</remarks>
	</doc><doc for="Container">
		<summary>
			<para>Encapsulates zero or more components. </para>
		</summary>
		<remarks>
			<para> The <see cref="System.ComponentModel.Container"/>
class is the default
implementation for the <see cref="System.ComponentModel.IContainer"/> interface.</para>
			<para> Containers are objects that encapsulate and track zero
   or more components. In this context, containment refers to logical containment, not visual containment.
   You can use components and containers in a variety of scenarios, including scenarios that are both visual and not
   visual.
   </para>
			<para> The components in a container are tracked in a first-in,
   first-out list,
   which also defines
   the order of the components within the container. Added components are appended to the end of the
   list.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.IContainer"/>
		<seealso cref="System.ComponentModel.IComponent"/>
		<seealso cref="System.ComponentModel.Component"/>
	</doc><doc for="Container.Add1">
		<summary>
			<para> Adds the specified <see cref="System.ComponentModel.Component"/> to the <see cref="System.ComponentModel.Container"/> and assigns it a
   name.
   </para>
		</summary>
		<param name="component">The component to add. </param>
		<param name="name"><para>The unique, case insensitive name to assign to the component.</para>
			<para>-or-</para>
			<para><see langword="null"/> that leaves the component unnamed.</para></param>
		<exception cref="System.ArgumentException">The <paramref name="name"/> parameter is a duplicate.</exception>
		<remarks>
			<para> This method can be overridden by a derived class.
      </para>
			<para> The new <see cref="System.ComponentModel.Component"/>
is added to the end of the list.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Container.Remove"/>
	</doc><doc for="Container.GetService">
		<summary>
			<para>Gets the service object of the specified type, if it is available.</para>
		</summary>
		<param name="service">The <see cref="System.Type"/> of the service to retrieve.</param>
		<returns>
			<para>An <see cref="System.Object"/> 
implementing the requested service, or <see langword="null"/> if the service cannot be resolved.</para>
		</returns>
		<remarks>
			<para>The default implementation of this method returns 
   <see langword="null"/>. Implementors can override this 
      method to provide a custom implementation to return a service object. For
      more information, see <see cref="System.IServiceProvider.GetService" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.IServiceProvider" qualify="true"/>
	</doc><doc for="Container.Components">
		<summary>
			<para> Gets all the components in the <see cref="System.ComponentModel.Container"/>.</para>
		</summary>
		<value>
			<para> A collection that contains the components in the <see cref="System.ComponentModel.Container"/>.</para>
		</value>
		<remarks>
			<para> This method can be overridden by a derived class.
      </para>
			<para> The components in the collection are stored in the same
      order as they were added to the <see cref="System.ComponentModel.Container"/>.
      </para>
		</remarks>
	</doc><doc for="Container.Finalize">
		<summary>
			<para>Releases unmanaged resources and performs other cleanup operations before the
   <see cref="System.ComponentModel.Container"/> is reclaimed by garbage collection. </para>
		</summary>
		<remarks>
			<para>Calls <see cref="System.ComponentModel.Component.Dispose"/> with the <paramref name="disposing"/>
parameter set to <see langword="false"/> to free unmanaged resources. </para>
			<para>This method overrides <see cref="M:System.Object.Finalize" qualify="true"/>. Application code should not call this method;
an object's <see cref="M:System.Object.Finalize"/> method is automatically invoked during garbage
collection, unless finalization by the garbage collector has been disabled by a
call to the <see cref="M:System.GC.SuppressFinalize" qualify="true"/> method. </para>
			<para>For more information about <see cref="System.Object.Finalize" qualify="true"/> and <see cref="System.ComponentModel.Container.Dispose"/>, see <see topic="cpconfinalizemethodscdestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>. </para>
		</remarks>
	</doc>
</docs>
