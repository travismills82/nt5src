<docs>
	<doc for="CultureInfoConverter.DefaultCultureString">
		<summary>
      Retrieves the "default" name for our culture.
 </summary>
	</doc>
	<doc for="CultureInfoConverter.CultureComparer">
		<summary>
      IComparer object used for sorting CultureInfos
 </summary>
	</doc>
	<doc for="CultureInfoConverter.CanConvertFrom"><nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can
      convert an object in the given source type to a <see cref="System.Globalization.CultureInfo"/>
      object using
      the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This converter can only convert a <see cref="System.Globalization.CultureInfo"/> object to and from a
   string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="CultureInfoConverter.CanConvertTo"><nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can
      convert an object to the given destination type using the context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type you wish to convert to.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion; otherwise,
   <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method to provide your own conversion requirements.
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="CultureInfoConverter.GetStandardValuesExclusive"><nodoc/>
		<summary>
			<para>Gets a value indicating whether the list of standard values returned from
      <see cref="System.ComponentModel.CultureInfoConverter.GetStandardValues"/> is an exclusive list. </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="false "/>because the <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned <see cref="System.ComponentModel.CultureInfoConverter.GetStandardValues"/> is not an exhaustive list of possible
   values; that is, other values are possible. This method never returns
   <see langword="true"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<para>When the list is not exclusive, then there are other valid values besides the list
   of standard values that <see cref="System.ComponentModel.CultureInfoConverter.GetStandardValues"/> provides.</para>
		</remarks>
	</doc><doc for="CultureInfoConverter.GetStandardValuesSupported">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether this object supports a
      standard set of values that can be picked from a list using the specified
      context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true"/> because <see cref="System.ComponentModel.CultureInfoConverter.GetStandardValues"/> should be called to find a common set of
   values the object supports. This method never returns <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="CultureInfoConverter.ConvertFrom">
		<nodoc/>
		<summary>
			<para>Converts the specified value object to a <see cref="System.Globalization.CultureInfo"/>
object.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="culture"></param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<exception cref="System.ArgumentException">Invalid culture provided in <paramref name="value "/>parameter.</exception>
		<remarks>
			<para>This converter can only convert a <see cref="System.Globalization.CultureInfo"/> object to and from a
   string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="CultureInfoConverter.ConvertTo">
		<nodoc/>
		<summary>
			<para>Converts the given
      value object to the
      specified destination type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType">The <see cref="System.Type"/> to convert the value to.</param>
		<param name="culture"></param>
		<returns>
			<para>An <see cref="System.Object"/>
that represents the converted <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType "/>is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>This converter can only convert a <see cref="System.Globalization.CultureInfo"/> object to and from a
   string.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="CultureInfoConverter.GetStandardValues">
		<nodoc/>
		<summary>
			<para>Gets a collection of standard values collection for a
   <see cref="System.Globalization.CultureInfo"/>
   object using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> containing a standard set of valid
   values, or <see langword="null "/>if the data type does not support a standard
   set of values.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="CultureInfoConverter">
		<summary>
			<para>Provides a type converter to convert <see cref="System.Globalization.CultureInfo"/>
objects to and from various other representations.</para>
		</summary>
		<remarks>
			<para>This converter can only convert a <see cref="System.Globalization.CultureInfo"/> object to and from a
 string.</para>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
 You should never create
 an instance of <see cref="System.ComponentModel.CultureInfoConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
 in the <see cref="System.ComponentModel.TypeConverter"/> base class.
 
</note>
		</remarks>
		<example>
			<para>The following sample converts a variable of
 type <see cref="System.Globalization.CultureInfo"/> to a string, and vice versa. First it
 constructs a <see cref="System.Globalization.CultureInfo"/>
 variable using the Greek
 culture (represented by "el') and converts it to the string "Greek". Then it converts the
 string "Russian" to the CultureInfo representation "ru".</para>
			<codelink SampleID="Converters" SnippetID="8"/>
		</example>
	</doc>
</docs>
