<docs>
	<doc for="LicenseManager.CacheProvider">
		<summary>
     Caches the provider, both in the instance cache, and the type
     cache.
 </summary>
	</doc>
	<doc for="LicenseManager.GetCachedNoLicenseProvider">
		<summary>
     Determines if type was actually cached to have _no_ provider,
     as opposed to not being cached.
 </summary>
		<returns>
     Returns true if the type was cahced to have _no_ provider.
 </returns>
	</doc>
	<doc for="LicenseManager.GetCachedProvider">
		<summary>
     Retrieves a cached instance of the provider associated with the
     specified type.
 </summary>
	</doc>
	<doc for="LicenseManager.GetCachedProviderInstance">
		<summary>
     Retrieves a cached instance of the provider of the specified
     type.
 </summary>
	</doc>
	<doc for="LicenseManager.GetLicenseInteropHelperType">
		<summary>
     Retrieves the typehandle of the interop helper
 </summary>
	</doc>
	<doc for="LicenseManager.ValidateInternal">
		<summary>
     Internal validation helper.
 </summary>
	</doc>
	<doc for="LicenseManager.ValidateInternalRecursive">
		<summary>
     Since we want to walk up the entire inheritance change, when not 
     give an instance, we need another helper method to walk up
     the chain...
 </summary>
	</doc>
	<doc for="LicenseManager.CreateWithContext">
		<overload>
			<para>Creates an instance of an object type with a license context.</para>
		</overload>
		<summary>
			<para> Creates an instance of the
      specified
      type, given a context in which you can use the licensed instance.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type to create.</param>
		<param name="creationContext">A <see cref="System.ComponentModel.LicenseContext"/> that specifies when you can use the licensed instance.</param>
		<returns>
			<para>An instance of the specified type.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.ComponentModel.LicenseContext"/> you specify as the
<paramref name="creationContext"/> parameter is used as the <see cref="System.ComponentModel.LicenseManager.CurrentContext"/> for the life of this
<see cref="System.ComponentModel.License"/>. This method blocks all
   other threads in the <see cref="T:System.AppDomain"/> from modifying the <see cref="System.ComponentModel.LicenseManager.CurrentContext"/>, allowing
<see cref="System.ComponentModel.LicenseManager.CreateWithContext"/> to behave as an atomic
   operation.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc>
	<doc for="LicenseManager.IsLicensed">
		<summary>
			<para> Returns whether the given type has a valid license.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> to find a valid license for.</param>
		<returns>
			<para>
				<see langword="true"/> if the given type is licensed;
   otherwise, <see langword="false"/> .</para>
		</returns>
	</doc>
	<doc for="LicenseManager.IsValid">
		<overload>
			<para>Determines whether a valid license can be granted.</para>
		</overload>
		<summary>
			<para>Determines whether a valid license can be granted for the specified type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of object that requests the <see cref="System.ComponentModel.License"/>.</param>
		<returns>
			<para>
				<see langword="true "/>if a valid license can be granted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>
				<see cref="System.ComponentModel.LicenseManager.IsValid"/> returns <see langword="true "/>when the type is
   either not licensed, or is licensed and the license is valid.</para>
			<para>This method does not throw a <see cref="System.ComponentModel.LicenseException"/> when it cannot grant a
valid <see cref="System.ComponentModel.License"/>.
The <see cref="System.ComponentModel.LicenseManager.Validate"/> method throws exceptions.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc>
	<doc for="LicenseManager.LockContext">
		<summary>
			<para>Prevents changes being made to the current <see cref="System.ComponentModel.LicenseContext"/> of
   the given object.</para>
		</summary>
		<param name="contextUser">The object whose current context you want to lock.</param>
		<remarks>
			<para>Use the <see cref="System.ComponentModel.LicenseContext"/> to get
   the <see cref="System.ComponentModel.License"/> of an object. This method locks the
<see cref="System.ComponentModel.LicenseContext"/>, preventing the <see cref="System.ComponentModel.License"/> 
from being retrieved.</para>
		</remarks>
	</doc>
	<doc for="LicenseManager.UnlockContext">
		<summary>
			<para> Allows changes to be made to the current <see cref="System.ComponentModel.LicenseContext"/> of the given object.</para>
		</summary>
		<param name="contextUser">The object whose current context you want to unlock.</param>
		<remarks>
			<para>Use the <see cref="System.ComponentModel.LicenseContext"/> to get
   the <see cref="System.ComponentModel.License"/> of an object. This method unlocks the
<see cref="System.ComponentModel.LicenseContext"/>, allowing the <see cref="System.ComponentModel.License"/> 
to be retrieved.</para>
		</remarks>
	</doc>
	<doc for="LicenseManager.Validate">
		<overload>
			<para>Determines whether a license can be granted.</para>
		</overload>
		<summary>
			<para>Determines whether a license can be granted for the specified type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of object that requests the license.</param>
		<exception cref="System.ComponentModel.LicenseException">
			<para>A <see cref="System.ComponentModel.License"/> cannot be granted.</para>
		</exception>
		<remarks>
			<para>This method throws a <see cref="System.ComponentModel.LicenseException"/> when a valid <see cref="System.ComponentModel.License"/>
cannot be granted. <see cref="System.ComponentModel.LicenseManager.IsValid"/> does not throw an
exception.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc>
	<doc for="LicenseManager.CurrentContext">
		<summary>
			<para>Gets or sets the current <see cref="System.ComponentModel.LicenseContext"/>, which specifies when you can use the licensed
   object.</para>
		</summary>
		<value>
			<para>A <see cref="System.ComponentModel.LicenseContext"/> that
   specifies when you can use the licensed object.</para>
		</value>
		<remarks>
			<para>When the user requests a valid <see cref="System.ComponentModel.License"/>, the user must give the context in
   which the <see cref="System.ComponentModel.License"/> is valid to the <see cref="System.ComponentModel.LicenseProvider.GetLicense" qualify="true"/> method. The <see cref="System.ComponentModel.LicenseContext"/> returned by this property should be passed to
   all <see cref="System.ComponentModel.LicenseProvider"/> classes. </para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicenseManager.UsageMode">
		<summary>
			<para>Gets the <see cref="System.ComponentModel.LicenseUsageMode"/> which
   specifies when you can use the licensed object for the <see cref="System.ComponentModel.LicenseManager.CurrentContext"/>.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.ComponentModel.LicenseUsageMode"/> values, as specified in the <see cref="System.ComponentModel.LicenseManager.CurrentContext"/>.</para>
		</value>
		<remarks>
			<para>If this property cannot find a <see cref="System.ComponentModel.LicenseManager.CurrentContext"/> value, it returns
<see langword="LicenseUsageMode.Runtime"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.LicenseManager.CurrentContext"/>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicenseManager.CreateWithContext1">
		<summary>
			<para> Creates an instance of the specified type
      with the specified arguments, given a context in which you can
      use the licensed instance.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type to create.</param>
		<param name="creationContext">A <see cref="System.ComponentModel.LicenseContext"/> that specifies when you can use the licensed instance.</param>
		<param name="args">An array of type <see cref="System.Object"/> that represents the arguments for the type.</param>
		<returns>
			<para>An instance of the specified type with the given array of
      arguments.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.ComponentModel.LicenseContext"/> you specify as the <paramref name="creationContext"/> parameter is used as the <see cref="System.ComponentModel.LicenseManager.CurrentContext"/> for the life of this
<see cref="System.ComponentModel.License"/>. This method
   blocks all other threads in the <see cref="T:System.AppDomain"/> from modifying the <see cref="System.ComponentModel.LicenseManager.CurrentContext"/>, allowing <see cref="System.ComponentModel.LicenseManager.CreateWithContext"/> to behave as an atomic
   operation.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicenseManager.IsValid1">
		<summary>
			<para>Determines whether a valid license can be granted for the
      specified instance of the type. This method creates a valid <see cref="System.ComponentModel.License"/>. </para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of object that requests the license.</param>
		<param name="instance">An object of the specified type or a type derived from the specified type.</param>
		<param name="license"><para>When this method returns, it contains a <see cref="System.ComponentModel.License"/> that is a valid license or <see langword="null"/>, if a valid license cannot be granted.</para></param>
		<returns>
			<para><see langword="true "/>if a valid <see cref="System.ComponentModel.License"/>
can be granted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para><see cref="System.ComponentModel.LicenseManager.IsValid"/> returns <see langword="true "/>when the <paramref name="type"/> 
parameter is not licensed,
or when it is licensed and the <paramref name="license"/> parameter is valid.</para>
			<para>This method does not throw a <see cref="System.ComponentModel.LicenseException"/> when it cannot grant a valid <see cref="System.ComponentModel.License"/>.
The <see cref="System.ComponentModel.LicenseManager.Validate"/> method throws exceptions.</para>
			<para>If the <paramref name="license "/> parameter is not <see langword="null "/>after this call, the object asking for a
<see cref="System.ComponentModel.License"/> must dispose of
the license by calling the <see cref="System.ComponentModel.License.Dispose"/> method when
the object is disposed of or finalized.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicenseManager.Validate1">
		<summary>
			<para>Determines whether a license can be granted for the instance of the specified type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> that represents the type of object that wants the license.</param>
		<param name="instance">An <see cref="System.Object"/> of the specified type or a type derived from the specified type.</param>
		<returns>
			<para>A valid <see cref="System.ComponentModel.License"/>.</para>
		</returns>
		<exception cref="System.ComponentModel.LicenseException"><para>The type is licensed, but a <see cref="System.ComponentModel.License"/> could not be granted.</para></exception>
		<remarks>
			<para>This method throws a <see cref="System.ComponentModel.LicenseException"/> when a valid <see cref="System.ComponentModel.License"/>
cannot be granted. <see cref="System.ComponentModel.LicenseManager.IsValid"/>
does not throw an exception.</para>
			<para> All objects
   asking for a <see cref="System.ComponentModel.License"/> must dispose of
   the license by calling the <see cref="System.ComponentModel.License.Dispose"/>
   method when the object is disposed of or finalized.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicenseManager">
		<summary>
			<para>Provides properties and methods to add a license
 to a component and to manage a <see cref="System.ComponentModel.LicenseProvider"/>. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.LicenseManager"/> provides the following <see langword="static"/> properties:
<see cref="System.ComponentModel.LicenseManager.CurrentContext"/> and <see cref="System.ComponentModel.LicenseManager.UsageMode"/>. The class also provides
 the following <see langword="static"/> methods: <see cref="System.ComponentModel.LicenseManager.CreateWithContext"/>, <see cref="System.ComponentModel.LicenseManager.IsValid"/>,
<see cref="System.ComponentModel.LicenseManager.Validate"/>.</para>
			<para>When you create a component that you want to license, you must:</para>
			<list type="number"><item>
					<term>
 Specify the <see cref="System.ComponentModel.LicenseProvider"/> by marking the component with a <see cref="System.ComponentModel.LicenseProviderAttribute"/>.</term>
				</item>
				<item>
					<term>
 Call <see cref="System.ComponentModel.LicenseManager.Validate"/> or <see cref="System.ComponentModel.LicenseManager.IsValid"/> in the constructor of the
 component. <see cref="System.ComponentModel.LicenseManager.Validate"/> throws a <see cref="System.ComponentModel.LicenseException"/> when it tries
 to create an instance without a valid license. <see cref="System.ComponentModel.LicenseManager.IsValid"/> does not throw an
 exception.</term>
				</item>
				<item>
					<term>
						<see cref="System.ComponentModel.License.Dispose"/> any license that is granted when the component is disposed or finalized.</term>
				</item>
			</list>
			<para>For more information on licensing, see <see topic="cpconLicensingComponentsControls"/>.</para>
		</remarks>
		<example>
			<para>This example creates a licensed control using the <see cref="System.ComponentModel.LicenseManager.Validate"/> method. It uses a <see cref="System.ComponentModel.LicenseProvider"/> that is
 implemented by the <see cref="System.ComponentModel.LicFileLicenseProvider"/> class.</para>
			<codelink SampleID="Classic LicenseManager Example" SnippetID="1"/>
			<para>
			</para>
		</example>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc>
</docs>
