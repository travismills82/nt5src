<docs>
	<doc for="LicFileLicenseProvider.GetKey">
		<summary>
			<para>Returns a key for the specified type.</para>
		</summary>
		<param name="type">The object type to return the key.</param>
		<returns>
			<para>A confirmation that the <paramref name="type"/> parameter is licensed.</para>
		</returns>
	</doc>
	<doc for="LicFileLicenseProvider">
		<summary>
			<para>Provides an implementation of a <see cref="System.ComponentModel.LicenseProvider"/>. The provider works in a
   similar fashion to the Microsoft .NET Framework standard licensing module.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.ComponentModel.LicFileLicenseProvider"/>
offers <see cref="System.ComponentModel.LicFileLicenseProvider.GetLicense"/> and <see cref="System.ComponentModel.LicFileLicenseProvider.IsKeyValid"/> methods. The <see cref="System.ComponentModel.LicFileLicenseProvider.IsKeyValid"/> method
determines whether the <see cref="System.ComponentModel.License.LicenseKey"/>
retrieved by the <see cref="System.ComponentModel.LicFileLicenseProvider.GetLicense"/> method is valid. When
you inherit from this class, you can override the <see cref="System.ComponentModel.LicFileLicenseProvider.IsKeyValid"/> method to provide your own validation
logic. </para>
			<para> This class exists to provide similar licensing functionality to
   COM licensing and uses text license files.</para>
			<para>For more information on licensing, see <see topic="cpconLicensingComponentsControls"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a licensed control using the <see cref="System.ComponentModel.LicenseManager.Validate"/>
method. It uses <see cref="System.ComponentModel.LicFileLicenseProvider"/> for the
license manager.</para>
			<codelink SampleID="Classic LicenseManager Example" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseManager"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicFileLicenseProvider.GetLicense">
		<summary>
			<para>Returns a license for the instance of the
      component, if one is available .</para>
		</summary>
		<param name="context">A <see cref="System.ComponentModel.LicenseContext"/> that specifies where you can use the licensed object.</param>
		<param name="type">A <see cref="T:System.Type"/> that represents the component requesting the <see cref="System.ComponentModel.License"/>.</param>
		<param name="instance">An object that requests the <see cref="System.ComponentModel.License"/>.</param>
		<param name="allowExceptions"><see langword="true"/> if a <see cref="System.ComponentModel.LicenseException"/> should be thrown when a component cannot be granted a license; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>A valid <see cref="System.ComponentModel.License"/>. If this method cannot find a valid
<see cref="System.ComponentModel.License"/> or a valid 
<paramref name="context"/> parameter, it returns <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>At design time, the <see cref="System.ComponentModel.LicFileLicenseProvider.GetLicense"/> method looks for a
   license file named <c>myClassName.LIC</c>, where <c>myClassName</c>
is the <see cref="P:System.Type.FullName"/> of the component to create.
This file must be in the same directory as the .dll file that contains the component.</para>
			<para>Next, this method checks the first line of the license file against a key specified in the <see cref="System.ComponentModel.LicFileLicenseProvider.IsKeyValid"/> method. If the key is valid, this
line is used as the <see cref="System.ComponentModel.License.LicenseKey"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseManager"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc><doc for="LicFileLicenseProvider.IsKeyValid">
		<summary>
			<para>Determines whether the key that the <see cref="System.ComponentModel.LicFileLicenseProvider.GetLicense"/> method retrieves is valid
   for the specified type.</para>
		</summary>
		<param name="key">The <see cref="System.ComponentModel.License.LicenseKey"/> to check.</param>
		<param name="type"><para>A <see cref="System.Type"/> that represents the component requesting the <see cref="System.ComponentModel.License"/>. </para></param>
		<returns>
			<para><see langword="true "/>if the key is a valid <see cref="System.ComponentModel.License.LicenseKey"/> for the
   specified type; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method checks the key against the phrase: " <c>myClassName is a licensed component.</c>",
   where <c>myClassName</c> is
the <see cref="System.Type.FullName"/> of the component you want to create.</para>
			<note type="inheritinfo">
   When you inherit from this class, you can override this method to provide your own validation
   logic.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.License"/>
		<seealso cref="System.ComponentModel.LicenseContext"/>
		<seealso cref="System.ComponentModel.LicenseException"/>
		<seealso cref="System.ComponentModel.LicenseManager"/>
		<seealso cref="System.ComponentModel.LicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseProviderAttribute"/>
		<seealso cref="System.ComponentModel.LicFileLicenseProvider"/>
		<seealso cref="System.ComponentModel.LicenseUsageMode"/>
	</doc></docs>
