<docs>
	<doc for="TypeConverter.GetConvertFromException">
		<summary>
			<para> Returns an exception to throw when a conversion cannot
       be performed.</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to convert, or <see langword="null"/> if the object is not available.</param>
		<returns>
			<para>An <see cref="System.Exception"/> that represents 
    the exception to throw when a conversion cannot be performed. </para>
		</returns>
		<exception cref="System.NotSupportedException">Automatically thrown by this method.</exception>
	</doc>
	<doc for="TypeConverter.GetConvertToException">
		<summary>
			<para> Returns an exception to throw when a conversion cannot
       be performed.</para>
		</summary>
		<param name="value">
			<para>The <see cref="System.Object"/> to convert, or <see langword="null"/> if the object is not available. </para>
		</param>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type the conversion was trying to convert to.</param>
		<returns>
			<para>An <see cref="System.Exception"/> 
 that represents the exception to throw when a conversion cannot be
 performed.</para>
		</returns>
		<exception cref="System.NotSupportedException">Automatically thrown by this method.</exception>
	</doc>
	<doc for="TypeConverter.GetCreateInstanceSupported">
		<overload>
			<para> Returns whether changing a value on this
       object requires a call to <see cref="System.ComponentModel.TypeConverter.CreateInstance"/>
       to create a new value.</para>
		</overload>
		<summary>
			<para> Returns whether changing a value on this 
       object requires a call to <see cref="System.ComponentModel.TypeConverter.CreateInstance"/>
       to create a new value.</para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if changing a 
    property on this object requires a call to <see cref="System.ComponentModel.TypeConverter.CreateInstance"/> to create a new value; otherwise,
 <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="TypeConverter.GetPropertiesSupported">
		<overload>
			<para> Returns whether this object supports properties.</para>
		</overload>
		<summary>
			<para> Returns whether this object supports properties.</para>
		</summary>
		<returns>
			<para>
				<see langword="true "/>if <see cref="System.ComponentModel.TypeConverter.GetProperties"/> should be called to find the properties 
    of this object; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
    <see langword="false"/>. </para>
		</remarks>
	</doc>
	<doc for="TypeConverter.GetStandardValuesSupported">
		<overload>
			<para> Returns whether this object supports a standard set of values
       that can be picked from a list.</para>
		</overload>
		<summary>
			<para> Returns whether this object supports a standard set of values
       that can be picked from a list.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> should be 
    called to find a common set of values the object supports; otherwise,
 <see langword="false"/>. </para>
		</returns>
	</doc>
	<doc for="TypeConverter.SimplePropertyDescriptor.IsReadOnly">
		<summary>
			<para>
       Gets a
       value indicating whether this property is read-only.
    </para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the property is read-only; <see langword="false "/>if 
       the property is read/write.
    </para>
		</value>
		<seealso cref="System.ComponentModel.ReadOnlyAttribute"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeConverter.SimplePropertyDescriptor.PropertyType">
		<summary>
			<para>
       Gets the type of the property.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.Type"/> that
       represents the type of the property.
    </para>
		</value>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator for this collection.</para>
		</summary>
		<returns>
			<para>An enumerator of type <see cref="System.Collections.IEnumerator"/>.</para>
		</returns>
		<seealso cref="System.Collections.IEnumerator"/>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.ICollection.Count">
		<summary>
      Retrieves the count of objects in the collection.
 </summary>
		<seealso cref="System.Collections.ICollection"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.ICollection.IsSynchronized">
		<summary>
      Determines if this collection is synchronized.
      The ValidatorCollection is not synchronized for
      speed.  Also, since it is read-only, there is
      no need to synchronize it.
 </summary>
		<seealso cref="System.Collections.ICollection"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.ICollection.SyncRoot">
		<summary>
      Retrieves the synchronization root for this
      collection.  Because we are not synchronized,
      this returns null.
 </summary>
		<seealso cref="System.Collections.ICollection"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.ICollection.CopyTo">
		<summary>
      Copies the contents of this collection to an array.
 </summary>
		<param name="array">
      The array to copy to.
 </param>
		<param name="index">
      The index in the array where copying should begin.
 </param>
		<seealso cref="System.Collections.ICollection"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.IEnumerable.GetEnumerator">
		<summary>
      Retrieves a new enumerator that can be used to
      iterate over the values in this collection.
 </summary>
		<returns>
      A new enumerator.
 </returns>
		<seealso cref="System.Collections.IEnumerable"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.StandardValuesCollection">
		<summary>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
class.</para>
		</summary>
		<param name="values">An <see cref="System.Collections.ICollection"/> that represents the objects to put into the collection. </param>
		<seealso cref="System.Collections.ICollection"/>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.CopyTo">
		<summary>
			<para>Copies the contents of this collection to an array.</para>
		</summary>
		<param name="array">An <see cref="System.Array"/> that represents the array to copy to.</param>
		<param name="index">The index to start from. </param>
		<remarks>
			<para>The index number is zero-based. Therefore, you must subtract one from the
      numerical position of a particular <see cref="System.Object"/> to access that <see cref="System.Object"/>. For example, to
      get the third <see cref="System.Object"/>, you need to specify <c>myColl[2]</c>.</para>
		</remarks>
		<seealso cref="System.Array"/>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="TypeConverter.CanConvertTo">
		<overload>
			<para> Returns whether this converter can convert the object to the specified
      type.</para>
		</overload>
		<summary>
			<para> Returns whether this converter can convert the object to the specified
      type.</para>
		</summary>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type you want to convert to.</param>
		<returns>
			<para>
				<see langword="true "/>if this converter can perform the conversion; otherwise,
<see langword="false"/>. </para>
		</returns>
	</doc>
	<doc for="TypeConverter.ConvertFrom">
		<overload>
			<para> Converts the given value to the type of this converter.</para>
		</overload>
		<summary>
			<para> Converts the given
      value to the type of this converter.</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection.Count">
		<summary>
			<para> Gets the number of objects in the collection.
      </para>
		</summary>
		<value>
			<para> The number of objects in the
      collection.
      </para>
		</value>
		<remarks>
			<para> The <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection.Count"/> 
property can be used to set the limits of a loop that
iterates through a collection of objects. Since collection is zero-based, be sure to use <c>Count - 1</c>
as the upper bound of the
loop.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="TypeConverter.CanConvertFrom1">
		<summary>
			<para> Returns
      whether this converter can convert an object of the given type to the type of this converter, using
      the specified context.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you want to convert from.</param>
		<returns>
			<para>
				<see langword="true "/>if this converter can perform the conversion; otherwise,
<see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. It never returns
   <see langword="true"/>. </para>
			<note type="inheritinfo">
      Override this method to provide your own conversion
      requirements.
      
   </note>
			<para>Use the <paramref name="context"/> parameter to extract additional information
   about the environment from which this converter is invoked. This parameter can be
<see langword="null"/>, so always check it. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.CanConvertTo1">
		<summary>
			<para> Returns whether this converter
      can convert the object to the specified type, using the specified context.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type you want to convert to.</param>
		<returns>
			<para>
				<see langword="true "/>if this converter can perform the conversion; otherwise,
<see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method to provide your own conversion requirements.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.GetCreateInstanceSupported1">
		<summary>
			<para> Returns whether changing a value on this object requires a
      call to <see cref="System.ComponentModel.TypeConverter.CreateInstance"/> to create a new value,
      using the specified context.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<returns>
			<para>
				<see langword="true "/>if changing a property on this object requires a call
   to <see cref="System.ComponentModel.TypeConverter.CreateInstance"/> to create a new value;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. </para>
			<note type="inheritinfo">
      Override this method
      if the type you want to convert must re-create the object to change its value.
      
   </note>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.ConvertFrom1">
		<summary>
			<para> Converts the given object to the type of this converter, using the specified context and culture information.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="culture">The <see cref="System.Globalization.CultureInfo"/> to use as the current culture.</param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<note type="inheritinfo">
      Override this method
      to provide your own conversion requirements.
      
   </note>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.ConvertFromInvariantString">
		<overload>
			<para> Converts the value to a type of this converter, using the invariant culture.</para>
		</overload>
		<summary>
			<para> Converts the given string to the type of this converter, using the invariant culture.</para>
		</summary>
		<param name="text">The <see cref="System.String"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted text.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
	</doc>
	<doc for="TypeConverter.ConvertFromInvariantString1">
		<summary>
			<para> Converts the given string to the type of this converter, using the invariant culture.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="text">The <see cref="System.String"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted text.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
	</doc>
	<doc for="TypeConverter.ConvertFromString1">
		<summary>
			<para>Converts the given text to an object, using the specified context.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="text">The <see cref="System.String"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted text.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para> An exception is raised if the string cannot be
      converted into the appropriate object. The default implementation always returns
   <see langword="null"/>.</para>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.ConvertFromString2">
		<summary>
			<para>Converts the given text to an object, using the
      specified context and culture information.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="culture">A <see cref="System.Globalization.CultureInfo"/> object. If <see langword="null"/> is passed, the current culture is assumed. </param>
		<param name="text">The <see cref="System.String"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted text.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para> An exception is raised if the string cannot be
      converted into the appropriate object. The default implementation always returns
   <see langword="null"/>.</para>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.ConvertTo">
		<overload>
			<para> Converts the given value object to the specified type.</para>
		</overload>
		<summary>
			<para> Converts
      the given value object to the specified type, using the arguments.</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType">The <see cref="System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>The most common type to convert to and from is a
      string object. This implementation calls <see cref="System.Object.ToString"/>
      on the object, if the object is valid and if the
      destination type is string.</para>
		</remarks>
	</doc>
	<doc for="TypeConverter.ConvertTo1">
		<summary>
			<para> Converts the given value object
      to the specified type, using the specified context and culture information.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<param name="culture">A <see cref="System.Globalization.CultureInfo"/> object. If <see langword="null"/> is passed, the current culture is assumed. </param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType">The <see cref="System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>The most common types to convert are to and from a
      string object. This implementation calls <see cref="System.Object.ToString"/>
      on the object if the object is valid and
      if the destination type is string.</para>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method
   to provide your own conversion requirements.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.GetPropertiesSupported1">
		<summary>
			<para> Returns whether this object supports properties, using the
      specified context.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<returns>
			<para>
				<see langword="true "/>if <see cref="System.ComponentModel.TypeConverter.GetProperties"/> should be called to find the properties
   of this object; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. </para>
			<note type="inheritinfo">
      Override this method
      if the type you want to convert supports properties.
      
   </note>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.GetStandardValuesSupported1">
		<summary>
			<para> Returns whether this object
      supports a standard set of values that can be picked
      from a list, using the specified context.</para>
		</summary>
		<param name="context">
			<para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para>
		</param>
		<returns>
			<para>
				<see langword="true"/> if <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> should be
   called to find a common set of values the object supports; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. </para>
			<para>Use the <paramref name="context"/> 
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method
   if the type you want to convert supports standard values.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.CanConvertFrom">
		<overload>
			<para> Returns whether this converter can
      convert an object of one type to the type of this converter.</para>
		</overload>
		<summary>
			<para> Returns whether this converter can
      convert an object of the given type to the type of this converter.</para>
		</summary>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you want to convert from.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the
   conversion; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. It never returns <see langword="true"/>.</para>
		</remarks>
	</doc><doc for="TypeConverter.ConvertToInvariantString">
		<overload>
			<para>Converts the specified value to a culture-invariant string representation.</para>
		</overload>
		<summary>
			<para>Converts the specified value to a culture-invariant string representation.</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>A <see cref="System.String"/> that represents the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information about
   the environment from which this converter is being invoked. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<para>Depending on the implementation of the value formatter, it might be possible to
   pass the returned string back into the value formatter to re-create an instance
   of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeConverter.ConvertToInvariantString1">
		<summary>
			<para>Converts the specified value to a culture-invariant string representation, using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>A <see cref="System.String"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<para>Depending on the implementation of the value formatter, it might be possible to
   pass the returned string back into the value formatter to re-create an instance
   of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeConverter.ConvertToString1">
		<summary>
			<para>Converts the given value to a string representation, using the given context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<para>Depending on the implementation of the value formatter, it might be possible to
   pass the returned string back into the value formatter to re-create an instance
   of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeConverter.ConvertToString2">
		<summary>
			<para>Converts the given value to a string representation, using the specified context and culture information.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="culture">A <see cref="System.Globalization.CultureInfo"/> object. If <see langword="null"/> is passed, the current culture is assumed. </param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<para>Depending on the implementation of the value formatter, it might be possible to
   pass the returned string back into the value formatter to re-create an instance
   of the object.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeConverter.CreateInstance">
		<overload>
			<para>Re-creates an <see cref="System.Object"/> given a set of property values for the object.</para>
		</overload>
		<summary>
			<para>Re-creates an <see cref="System.Object"/> given a set of property values for the object.</para>
		</summary>
		<param name="propertyValues"><para>An <see cref="System.Collections.IDictionary"/> that represents a dictionary of new property values.</para></param>
		<returns>
			<para>An <see cref="System.Object"/>
representing the given <see cref="System.Collections.IDictionary"/>, or <see langword="null"/> if the object cannot be created. This method
always returns <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>Use this method for objects that are immutable, but for which you
      want to provide changeable properties.</para>
			<para>The dictionary provided by the <paramref name="propertyValues "/>parameter has a series of name/value
   pairs, one for each property returned from <see cref="System.ComponentModel.TypeConverter.GetProperties"/>.</para>
		</remarks>
		<seealso cref="System.Collections.IDictionary"/>
	</doc><doc for="TypeConverter.GetProperties">
		<overload>
			<para> Returns a collection of properties for the type of array specified by the value
      parameter.</para>
		</overload>
		<summary>
			<para> Returns a collection of properties for the type of array specified by the value
      parameter.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> that specifies the type of array for which to get properties.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for
   this data type, or <see langword="null "/>if there are no properties.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="null"/>. </para>
			<para> By default, a type does not return properties. An easy
      implementation of this method can call <see cref="System.ComponentModel.TypeDescriptor.GetProperties"/> for the
      correct data type.</para>
		</remarks>
	</doc><doc for="TypeConverter.GetProperties1">
		<summary>
			<para> Returns a collection of
      properties for the type of array specified by the value parameter, using the specified
      context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">An <see cref="System.Object"/> that specifies the type of array for which to get properties.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for
   this data type, or <see langword="null "/>if there are no properties.</para>
		</returns>
		<remarks>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<para>As implemented in this class, this method always returns
<see langword="null"/>. </para>
			<para> By default, a type does not return properties. An easy
   implementation of this method can call <see cref="System.ComponentModel.TypeDescriptor.GetProperties"/> for the
   correct data type.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeConverter.GetProperties2">
		<summary>
			<para> Returns a collection of properties for
      the type of array specified by the value parameter, using the specified context and
      attributes.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">An <see cref="System.Object"/> that specifies the type of array for which to get properties.</param>
		<param name="attributes"><para>An array of type <see cref="System.Attribute"/> that is used as a filter.</para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for
   this data type, or <see langword="null "/>if there are no properties.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="null"/>. </para>
			<note type="inheritinfo">
      Override this
      method if the type you want to convert supports properties.
      
   </note>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<para> The attributes array is used to filter the array.
   The attributes can have a
   mix of <see cref="System.Type"/> and <see cref="System.Attribute"/> objects. Filtering is defined by the
   following rules:</para>
			<list type="bullet"><item>
					<term>
      
      A <see cref="System.Type"/>
      object is treated as a wildcard; it matches a property that has the <see cref="System.Type"/> in its set of attributes.</term>
				</item>
				<item>
					<term>
      
      If a property does not have an <see cref="System.Attribute"/> of the same class, the property is not included in the
      returned array.</term>
				</item>
				<item>
					<term>
      
      If the attribute is an instance of <see cref="System.Attribute"/>, the property must be an exact match or it is
      not included in the returned array.</term>
				</item>
				<item>
					<term>
      
      If an <see cref="System.Attribute"/>
      instance is specified and it is the default property, it is included in the returned
      array even if there is no instance of the <see cref="System.Attribute"/> in the
      property.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
		<seealso cref="System.Attribute"/>
	</doc><doc for="TypeConverter.GetStandardValues">
		<overload>
			<para> Returns a
      collection of standard values for the data type this type converter is
      designed for.</para>
		</overload>
		<summary>
			<para> Returns a collection of standard values from the default context for the data type this type
      converter is designed for.</para>
		</summary>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> containing a standard set of valid
   values, or <see langword="null "/>
   if the data type
   does not support a standard set of values.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="null"/>. </para>
		</remarks>
	</doc><doc for="TypeConverter.GetStandardValuesExclusive">
		<overload>
			<para> Returns whether the collection of standard values returned from
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list. </para>
		</overload>
		<summary>
			<para> Returns whether the collection of standard values returned from
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list. </para>
		</summary>
		<returns>
			<para><see langword="true "/>if the
<see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
returned from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of
possible values; <see langword="false "/>if other values are possible.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. </para>
			<para>If the list is exclusive, such as in an enumeration data type, then no
      other values are valid. If the list is not exclusive, then other valid values might
      exist in addition to the list of standard values that <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
      provides.</para>
		</remarks>
	</doc><doc for="TypeConverter.GetStandardValuesExclusive1">
		<summary>
			<para> Returns whether the collection of standard values returned from
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive
      list of possible values, using the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true "/>if the
<see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
returned from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of
possible values; <see langword="false "/>if other values are possible.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns
   <see langword="false"/>. </para>
			<para>If the list is exclusive, such as in an enumeration data
      type, then no other values are valid. If the list is not exclusive, then other
      valid values might exist in addition to the list of standard values that <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> provides.</para>
			<note type="inheritinfo">
      Override this method
      if the type you want to convert supports standard values.
      
   </note>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeConverter.IsValid">
		<overload>
			<para> Returns whether the given value object is valid for this type.</para>
		</overload>
		<summary>
			<para> Returns whether the given value object is valid for this type.</para>
		</summary>
		<param name="value">The object to test for validity.</param>
		<returns>
			<para><see langword="true "/>if the specified value is valid for this object;
   otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="TypeConverter.SortProperties">
		<summary>
			<para>Sorts a collection of properties.</para>
		</summary>
		<param name="props">A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> that has the properties to sort.</param>
		<param name="names"><para> An array of names in the order you want the properties to appear in the collection.</para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> that contains the sorted properties.</para>
		</returns>
		<remarks>
			<para>All properties in the collection that are not already in
      the array of names are added alphabetically to the end. If the
   <paramref name="names"/>
   parameter is an empty array or <see langword="null"/>
   , all the properties in the collection are sorted alphabetically.</para>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="TypeConverter.SimplePropertyDescriptor.SimplePropertyDescriptor">
		<overload>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
class.</para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
class.</para>
		</summary>
		<param name="componentType">A <see cref="System.Type"/> that represents the type of component to which this property descriptor binds. </param>
		<param name="name">The name of the property. </param>
		<param name="propertyType">A <see cref="System.Type"/> that represents the data type for this property. </param>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeConverter.SimplePropertyDescriptor.SimplePropertyDescriptor1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/> class.
   </para>
		</summary>
		<param name="componentType"><para>A <see cref="System.Type"/> that represents the type of component to which this property descriptor binds. </para></param>
		<param name="name">The name of the property. </param>
		<param name="propertyType">A <see cref="System.Type"/> that represents the data type for this property. </param>
		<param name="attributes"><para>An <see cref="System.Attribute"/> array with the attributes to associate with the property.</para></param>
		<seealso cref="System.Attribute"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeConverter.SimplePropertyDescriptor.ComponentType">
		<summary>
			<para> Gets the type of component to which this
      property description binds.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Type"/> that 
   represents the type of component to which this property binds.</para>
		</value>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeConverter.SimplePropertyDescriptor.CanResetValue">
		<summary>
			<para> Returns whether resetting the
      component changes the value of the component.</para>
		</summary>
		<param name="component"><para> The component to test for reset capability.</para></param>
		<returns>
			<para><see langword="true "/> if
   resetting the component changes the value of the component; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method looks for a <see cref="System.ComponentModel.DefaultValueAttribute"/> . If it finds one, it compares the value of
   the attribute with the current value of the property. It returns <see langword="true "/>when the default value does not match the current value of the property. If
   this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for
   a <c>ShouldSerializeMyProperty</c> method. If it finds a <c>ShouldSerializeMyProperty</c> method, it returns
what <c>ShouldSerializeMyProperty</c> returns. If this method cannot find a
<c>ShouldSerializeMyProperty</c> 
method, it looks for a <c>ResetMyProperty</c> method. If it finds a <c>ResetMyProperty</c> method, it returns <see langword="true"/>. If
this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, a <c>ShouldSerializeMyProperty</c> method,
or a <c>ResetMyProperty</c> method, then it returns <see langword="false"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeConverter.SimplePropertyDescriptor.ResetValue">
		<summary>
			<para>Resets the value for this property
      of the component.</para>
		</summary>
		<param name="component"><para>The component with the property value to be reset. </para></param>
		<remarks>
			<para>This method looks for a <see cref="System.ComponentModel.DefaultValueAttribute"/>. If it finds
   one, it sets the value of the property to the value
   specified in the attribute. If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for
   a <c>ResetMyProperty</c> method. If
it finds a <c>ResetMyProperty</c> method, it invokes it. If this method cannot
find a <see cref="System.ComponentModel.DefaultValueAttribute"/> or a <c>ResetMyProperty</c>
method, then it does not perform an operation.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue">
		<summary>
			<para> Returns whether the value of this property can persist.</para>
		</summary>
		<param name="component"><para>The component with the property that is to be examined for persistence. </para></param>
		<returns>
			<para><see langword="true "/>if the value of the property can
   persist; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented
      in this class, this method returns
   <see langword="false"/>.</para>
			<note type="inheritinfo">
      When overridden in a derived class, this method returns
   <see langword="true "/> if the current value of the property is different from its
      default value. It looks for a default value by first looking for a <see cref="System.ComponentModel.DefaultValueAttribute"/>. If
      the method finds this attribute, it compares the
      value of the attribute with the current value of the property. If this
      method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for
      a <c>ShouldSerializeMyProperty</c>
   method. If this method finds a <c>ShouldSerializeMyProperty</c> method, it invokes it. If this method
cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/> or
a <c>ShouldSerializeMyProperty</c> method, it cannot create optimizations
and it returns <see langword="true"/>.
</note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc><doc for="TypeConverter.StandardValuesCollection.this">
		<summary>
			<para> Gets the object at the specified index number.</para>
		</summary>
		<param name="index">The zero-based index of the <see cref="System.Object"/> to get from the collection.</param>
		<value>
			<para>The <see cref="System.Object"/>
with the specified index.</para>
		</value>
		<remarks>
			<para>The index number is zero-based. Therefore, you must subtract one from the
      numerical position of a particular <see cref="System.Object"/> to
      access that <see cref="System.Object"/>. For example, to get the third <see cref="System.Object"/>, you need to specify <c>myColl[2]</c>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="TypeConverter.CreateInstance1">
		<summary>
			<para>Creates an instance of the Type that this <see cref="System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the
 object.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="propertyValues"><para>An <see cref="System.Collections.IDictionary"/> of new property values.</para></param>
		<returns>
			<para>An <see cref="System.Object"/>
representing the given <see cref="System.Collections.IDictionary"/>, or <see langword="null"/> if
the object cannot be created. This method always returns <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>Use this method for objects that are immutable, but for which you
 want to provide changeable properties.</para>
			<note type="inheritinfo">
 Override this method
 if the type you want to convert must re-create the object to change its value.
 
 </note>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<para>The dictionary provided by the <paramref name="propertyValues "/>parameter has a series of name/value
pairs, one for each property returned from <see cref="System.ComponentModel.TypeConverter.GetProperties"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
		<seealso cref="System.Collections.IDictionary"/>
	</doc>
	<doc for="TypeConverter.IsValid1">
		<summary>
			<para> Returns whether the given value object is valid for this type and for the specified context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="value">The <see cref="System.Object"/> to test for validity.</param>
		<returns>
			<para><see langword="true "/>if the specified value is valid
 for this object; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>As implemented in this class, this method always returns <see langword="true"/>.</para>
			<para>Use the <paramref name="context"/>
parameter to extract additional information about the environment from
which this converter is invoked. This parameter can be <see langword="null"/>, so always check it. Also, properties on the
context object can return <see langword="null"/>.</para>
			<note type="inheritinfo">
 Override this method
 if the type you want to convert supports standard values that can be
 validated.
 
</note>
		</remarks>
		<example>
			<para>For an example on this function, see the sample in <see cref="System.ComponentModel.TypeConverter"/>.</para>
		</example>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.ConvertToString">
		<overload>
			<para>Converts the specified value to a string representation.</para>
		</overload>
		<summary>
			<para>Converts the specified value to a string representation.</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
 the converted value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>Depending on the implementation of the value formatter, it might be possible to
 pass the returned string back into the value formatter to re-create an instance
 of the object.</para>
		</remarks>
		<example>
			<para>For an example on this function, see the sample in <see cref="System.ComponentModel.TypeConverter"/>.</para>
		</example>
	</doc>
	<doc for="TypeConverter.ConvertFromString">
		<overload>
			<para>Converts the specified text to an object.</para>
		</overload>
		<summary>
			<para>Converts the specified text to an object.</para>
		</summary>
		<param name="text">The text representation of the object to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the converted text.</para>
		</returns>
		<exception cref="System.NotSupportedException"><para>The string could not be converted into the appropriate object. </para></exception>
		<remarks>
			<para>The default implementation always returns <see langword="null"/>. </para>
		</remarks>
		<example>
			<para>For an example on this function, see the sample in <see cref="System.ComponentModel.TypeConverter"/>.</para>
		</example>
	</doc>
	<doc for="TypeConverter.GetStandardValues1">
		<summary>
			<para> Returns a collection of standard values for the data type this type converter is designed for when provided with a
 format context.</para>
		</summary>
		<param name="context"><para> An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <see langword="null"/> . </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set
 of valid values, or <see langword="null"/> if the data type does not support a
 standard set of values.</para>
		</returns>
		<remarks>
			<para>As implemented in <see cref="System.ComponentModel.TypeConverter"/> , this method always returns
<see langword="null"/>. </para>
			<note type="inheritinfo">
 Override this method
 if the type you want to convert supports standard values.
 
</note>
		</remarks>
		<example>
			<para>For an example on this function, see the sample in <see cref="System.ComponentModel.TypeConverter"/>.</para>
		</example>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="TypeConverter.StandardValuesCollection">
		<summary>
			<para>Represents a collection of values.</para>
		</summary>
		<remarks>
			<para> This is a simple collection class that takes an array
 of values and converts it to a collection. It is lightweight and is well
 suited for use in <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
 .</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="TypeConverter.SimplePropertyDescriptor">
		<summary>
			<para> Represents an <see langword="abstract "/>
class that provides
properties for objects that do not have
properties.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      When you inherit from <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>, you must
      override the <see cref="System.ComponentModel.PropertyDescriptor.GetValue"/> and <see cref="System.ComponentModel.PropertyDescriptor.SetValue"/>
      methods.
      
   </note>
		</remarks>
		<example>
			<para>For an example on this class, see the example in <see cref="System.ComponentModel.PropertyDescriptor"/>.</para>
		</example>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="TypeConverter">
		<summary>
			<para> Provides a unified way of converting types of values to
      other types, as well as for accessing standard values and subproperties.</para>
		</summary>
		<remarks>
			<para>The most common type of converter is one that converts to and from a text representation.
      The type converter for a class is bound to the
      class with a <see cref="System.ComponentModel.TypeConverterAttribute"/> .
      Unless this attribute is
      overridden, all classes that inherit from this class use the same type converter as the base
      class.</para>
			<note type="note">
      Never access a type
      converter directly. Instead, access the appropriate converter by using <see cref="System.ComponentModel.TypeDescriptor"/> . For more information, see the code examples
      provided.
      
   </note>
			<note type="inheritinfo">
      Inherit from <see cref="System.ComponentModel.TypeConverter"/> to implement your own conversion
      requirements. When you inherit from this class,
      you can override the following methods:
      
   </note>
			<list type="bullet"><item>
					<term>
						<para>To support custom type conversion, override the following methods: <see cref="System.ComponentModel.TypeConverter.CanConvertFrom"/>, <see cref="System.ComponentModel.TypeConverter.CanConvertTo"/>, <see cref="System.ComponentModel.TypeConverter.ConvertFrom"/>, and <see cref="System.ComponentModel.TypeConverter.ConvertTo"/>.</para></term>
				</item>
				<item>
					<term>
						<para>To convert types that must re-create the object to
            change its value, override <see cref="System.ComponentModel.TypeConverter.CreateInstance"/> and <see cref="System.ComponentModel.TypeConverter.GetCreateInstanceSupported"/>.</para></term>
				</item>
				<item>
					<term>
						<para>To convert types that support properties, override
            <see cref="System.ComponentModel.TypeConverter.GetProperties"/> and <see cref="System.ComponentModel.TypeConverter.GetPropertiesSupported"/>. If the
               class you are converting does not have properties, and you
               need to implement properties, you can use the <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/> class as a base for
               implementing the property descriptors. When you inherit from
            <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>, you must override the <see cref="System.ComponentModel.PropertyDescriptor.GetValue"/> and <see cref="System.ComponentModel.PropertyDescriptor.SetValue"/>
            methods.</para></term>
				</item>
				<item>
					<term>
						<para>To convert types that support standard values, override the following
               methods: <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>, <see cref="System.ComponentModel.TypeConverter.GetStandardValuesExclusive"/>, <see cref="System.ComponentModel.TypeConverter.GetStandardValuesSupported"/> and <see cref="System.ComponentModel.TypeConverter.IsValid"/>.</para></term>
				</item>
			</list>
			<para>For more information about type converters, see
      <see topic="cpconImplementingTypeConverter"/> or <see topic="cpconGeneralizedTypeConversion"/> .</para>
		</remarks>
		<example>
			<para> The following example shows how to create an instance
         of a type converter and bind it to a class. The class implementing the
         converter,<c>MyClassConverter</c>
      , must inherit from the <see cref="System.ComponentModel.TypeConverter"/> class.</para>
			<codelink SampleID="Classic TypeConverter Example" SnippetID="1"/>
			<para> When you have a property that
 has an enumeration, check to see whether an enumeration value is valid before setting the property. The next
 code example assumes that an enumeration called <c>MyPropertyEnum</c>
 has been
 declared.</para>
			<codelink SampleID="Classic TypeConverter Example" SnippetID="2"/>
			<para> Another common type converter usage is to convert
 an object to a string. The following example prints out the name of the <see cref="T:System.Drawing.Color"/> stored in the variable <c>c</c>
.</para>
			<codelink SampleID="Classic TypeConverter Example" SnippetID="3"/>
			<para>You can also use a type converter to convert a value from its name, as shown in the next code example.</para>
			<codelink SampleID="Classic TypeConverter Example" SnippetID="4"/>
			<para> In this example, you can use a type converter to print out the set of standard values
 that the object supports.</para>
			<codelink SampleID="Classic TypeConverter Example" SnippetID="5"/>
		</example>
		<seealso cref="System.ComponentModel.TypeConverterAttribute"/>
		<seealso cref="System.ComponentModel.PropertyDescriptorCollection"/>
		<seealso cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>
		<seealso cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
	</doc>
</docs>
