<docs>
	<doc for="ByteConverter.TargetType">
		<summary>
 The Type this converter is targeting (e.g. Int16, UInt32, etc.)
 </summary>
	</doc>
	<doc for="ByteConverter.FromString">
		<summary>
 Convert the given value to a string using the given radix
 </summary>
	</doc>
	<doc for="ByteConverter.FromString1">
		<summary>
 Convert the given value to a string using the given formatInfo
 </summary>
	</doc>
	<doc for="ByteConverter.FromString2">
		<summary>
 Convert the given value to a string using the given CultureInfo
 </summary>
	</doc>
	<doc for="ByteConverter.ToString">
		<summary>
 Convert the given value from a string using the given formatInfo
 </summary>
	</doc>
	<doc for="ByteConverter">
		<summary>
			<para>Provides a
 type converter to convert 8-bit unsigned
 integer objects to and from various other representations.</para>
		</summary>
		<remarks>
			<para>This converter can only
 convert an 8-bit unsigned integer to and from a string.</para>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
 You should never create an
 instance of a <see cref="System.ComponentModel.ByteConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
 in the <see cref="System.ComponentModel.TypeConverter"/> base class.
 
</note>
		</remarks>
		<example>
			<para>The following example declares and initializes an 8-bit unsigned integer and a
 string. The code then converts each of them to the other's type,
 respectively.</para>
			<codelink SampleID="Converters" SnippetID="4"/>
		</example>
	</doc>
</docs>
