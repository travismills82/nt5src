<docs>
  <doc for="TypeConverterAttribute.Default">
    <internalonly />
    <summary>
      <para> Specifies the type to use as
       a converter for the object this attribute is bound to. This
    <see langword="static " />field is read-only. </para>
    </summary>
    <seealso cref="System.ComponentModel.TypeConverter" />
  </doc>
  <doc for="TypeConverterAttribute.TypeConverterAttribute">
    <overload>
      <para>
       Initializes a new instance of the <see cref="System.ComponentModel.TypeConverterAttribute" /> class.
    </para>
    </overload>
    <summary>
      <para>
       Initializes a new instance of the <see cref="System.ComponentModel.TypeConverterAttribute" /> class with the
       default type converter, which
       is an
       empty string ("").
    </para>
    </summary>
    <remarks>
      <para>
       The class that provides the data conversion must inherit from <see cref="System.ComponentModel.TypeConverter" />.
    </para>
    </remarks>
    <seealso cref="System.ComponentModel.TypeConverter" />
  </doc>
  <doc for="TypeConverterAttribute.TypeConverterAttribute1">
    <summary>
      <para>Initializes a new instance of the <see cref="System.ComponentModel.TypeConverterAttribute" /> class, using 
    the specified type as the data converter for the object this attribute
    is bound
    to.</para>
    </summary>
    <param name="type">
      <para>A <see cref="System.Type" /> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.</para>
    </param>
    <remarks>
      <para>The class
       that provides the data conversion must inherit from <see cref="System.ComponentModel.TypeConverter" />.</para>
    </remarks>
    <seealso cref="System.ComponentModel.TypeConverter" />
  </doc>
  <doc for="TypeConverterAttribute.TypeConverterAttribute2">
    <summary>
      <para>Initializes a new instance of the <see cref="System.ComponentModel.TypeConverterAttribute" /> class, using 
    the specified type name as the data converter for the object this attribute is bound to.</para>
    </summary>
    <param name="typeName">
      <para> The fully qualified name of the class to use for data conversion for the object this attribute is bound to.</para>
    </param>
    <remarks>
      <para>The class that provides the data conversion must inherit from <see cref="System.ComponentModel.TypeConverter" />.</para>
    </remarks>
    <seealso cref="System.ComponentModel.TypeConverter" />
  </doc>
  <doc for="TypeConverterAttribute.ConverterTypeName">
    <summary>
      <para>Gets the fully qualified type name of the <see cref="System.Type" />
 to use as a converter for the object this attribute
 is bound to.</para>
    </summary>
    <value>
      <para>The fully qualified type name of the <see cref="System.Type" /> to use as a converter for the object 
    this attribute is bound to, or an
    empty string ("") if none exists. The default value is an
    empty string ("").</para>
    </value>
    <seealso cref="System.ComponentModel.TypeConverter" />
  </doc>
  <doc for="TypeConverterAttribute">
    <summary>
      <para>Specifies what type to use as
      a converter for the object
      this
      attribute is bound to. This class cannot
      be inherited.</para>
    </summary>
    <remarks>
      <para>The class you use for conversion must inherit from
   <see cref="System.ComponentModel.TypeConverter" />. Use the
   <see cref="System.ComponentModel.TypeConverterAttribute.ConverterTypeName" /> property to get the
      name of the class that provides the data
      conversion for the object this attribute is bound to.</para>
      <para>For more information about attributes, see <see topic="cpconAttributesOverview" /> and <see topic="cpconExtendingMetadataUsingAttributes" />. For more information about type
   converters, see the <see cref="System.ComponentModel.TypeConverter" /> base
   class and <see topic="cpconImplementingTypeConverter" />.</para>
    </remarks>
    <example>
      <para>The following example tells <c>MyClass</c> to use the type converter called <c>MyClassConverter</c>. This example
   assumes that <c>MyClassConverter</c>
has been implemented elsewhere. The class implementing the converter (<c>MyClassConverter</c>) must inherit
from the <see cref="System.ComponentModel.TypeConverter" /> class.</para>
      <codelink SampleID="Classic TypeConverterAttribute Example" SnippetID="1" />
      <para>The next example creates an instance of <c>MyClass</c>. Then it gets the
attributes for the class, and prints the name of the type converter used by
<c>MyClass</c>.</para>
      <codelink SampleID="Classic TypeConverterAttribute Example" SnippetID="2" />
    </example>
    <seealso cref="System.ComponentModel.TypeConverter" />
  </doc>
  <doc for="TypeConverterAttribute.GetHashCode">
    <nodoc />
    <summary>
      <para>[To be supplied.]</para>
    </summary>
  </doc>
  <doc for="TypeConverterAttribute.Equals">
    <summary>
      <para>Returns whether the value of the given object is equal 
      to the current <see cref="System.ComponentModel.TypeConverterAttribute" /> .</para>
    </summary>
    <param name="obj">The object to test the value equality of.</param>
    <returns>
      <para>
        <see langword="true" /> if the value of the given object
   is equal to that of the current; otherwise, <see langword="false" /> .</para>
    </returns>
  </doc>
</docs>