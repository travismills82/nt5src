<docs>
	<doc for="TypeListConverter">
		<summary>
			<para>Provides a type
       converter that can be used to populate a list box with available types.</para>
		</summary>
		<remarks>
			<para>You must provide the list of types to the
       constructor of this <see langword="abstract "/>
       class.</para>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and 
 <see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
    You should never create an
    instance of a <see cref="System.ComponentModel.TypeListConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
    in the <see cref="System.ComponentModel.TypeConverter"/> base class.
 </note>
			<note type="inheritinfo">
    When you inherit from
 <see cref="System.ComponentModel.TypeListConverter"/> , you can override the following 
    methods:
 </note>
			<list type="bullet"><item>
					<term>
						<para>To support custom type conversion, override the following methods: <see cref="System.ComponentModel.TypeConverter.CanConvertFrom"/>, <see cref="System.ComponentModel.TypeConverter.CanConvertTo"/>, <see cref="System.ComponentModel.TypeConverter.ConvertFrom"/>, and <see cref="System.ComponentModel.TypeConverter.ConvertTo"/>.</para></term>
				</item>
				<item>
					<term>
						<para>To convert types that must re-create the object to change its value, 
          override <see cref="System.ComponentModel.TypeConverter.CreateInstance"/> and <see cref="System.ComponentModel.TypeConverter.GetCreateInstanceSupported"/>.</para></term>
				</item>
				<item>
					<term>
						<para>To convert types that support properties, override <see cref="System.ComponentModel.TypeConverter.GetProperties"/> and <see cref="System.ComponentModel.TypeConverter.GetPropertiesSupported"/>. If the class you are 
          converting does not have properties, and you need to implement properties, you
          can use the <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/> class as a base for
          implementing the property descriptors. When you inherit from <see cref="System.ComponentModel.TypeConverter.SimplePropertyDescriptor"/>, you must override the
       <see cref="System.ComponentModel.PropertyDescriptor.GetValue"/> and <see cref="System.ComponentModel.PropertyDescriptor.SetValue"/> methods.</para></term>
				</item>
				<item>
					<term>
						<para>To convert types that support standard values, override <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>, <see cref="System.ComponentModel.TypeConverter.GetStandardValuesExclusive"/>, <see cref="System.ComponentModel.TypeConverter.GetStandardValuesSupported"/> and <see cref="System.ComponentModel.TypeConverter.IsValid"/>. </para></term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="TypeListConverter.TypeListConverter"><nodoc/>
		
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.TypeListConverter"/> class using
   the type array as the available types.</para>
		</summary>
		<param name="types"><para>The array of type <see cref="System.Type"/> to use as the available types.</para></param>
		<remarks>
			<para>The types provided in the <paramref name="types "/> parameter can be used to populate a list box with the
   available types.</para>
		</remarks>
	</doc><doc for="TypeListConverter.CanConvertFrom"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="TypeListConverter.CanConvertTo"><nodoc/>
		
		<summary>
			<para>Gets a value indicating whether this converter can
      convert an object to the given destination type using the context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type you wish to convert to.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion; otherwise,
   <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method to provide your own conversion requirements.
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="TypeListConverter.ConvertFrom"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="TypeListConverter.ConvertTo"><nodoc/>
		
		<summary>
			<para>Converts the given value object to the specified destination type.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</para></param>
		<param name="culture">
   An optional culture info.  If not supplied the current culture is assumed.
   </param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<param name="destinationType">The <see cref="System.Type"/> to convert the value to.</param>
		<returns>
			<para>An <see cref="System.Object"/>
that represents the converted <paramref name="value"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="destinationType "/>is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The conversion could not be performed.</exception>
		<remarks>
			<para>The most common types to convert
      are to and from a string object.</para>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="TypeListConverter.GetStandardValuesExclusive"><nodoc/>
		
		<summary>
			<para>Gets a value indicating whether the list of standard values returned from
      <see cref="System.ComponentModel.TypeListConverter.GetStandardValues"/> is an exclusive list. </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true "/>because the <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="System.ComponentModel.TypeListConverter.GetStandardValues"/> is an exhaustive list of possible values.
   This method never returns <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<para>When the list is exclusive, then no other values are valid besides the list
   of standard values <see cref="System.ComponentModel.TypeListConverter.GetStandardValues"/> provides.</para>
		</remarks>
	</doc><doc for="TypeListConverter.GetStandardValuesSupported">
		<nodoc/>
		
		<summary>
			<para>Gets a value indicating whether this object supports a
      standard set of values that can be picked from a list using the specified
      context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true"/> because <see cref="System.ComponentModel.TypeListConverter.GetStandardValues"/> should be called to find a common set of
   values the object supports. This method never
   returns <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc><doc for="TypeListConverter.GetStandardValues">
		<nodoc/>
		
		<summary>
			<para>Gets a collection of standard values for the data type this validator is
      designed for.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set
   of valid values, or <see langword="null"/> if the data type does not support a
   standard set of values.</para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
	</doc></docs>
