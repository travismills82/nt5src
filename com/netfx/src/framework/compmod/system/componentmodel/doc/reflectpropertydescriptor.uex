<docs>
   <doc for="ReflectPropertyDescriptor">
 
 <summary>
    <para>
       ReflectPropertyDescriptor defines a property. Properties are the main way that a user can
       set up the state of a component.
       The ReflectPropertyDescriptor class takes a component class that the property lives on,
       a property name, the type of the property, and various attributes for the
       property.
       For a property named XXX of type YYY, the associated component class is
       required to implement two methods of the following
       form:
    </para>
    <code>
 public YYY GetXXX();
     public void SetXXX(YYY value);
    </code>
    The component class can optionally implement two additional methods of
    the following form:
    <code>
 public boolean ShouldSerializeXXX();
     public void ResetXXX();
    </code>
    These methods deal with a property's default value. The ShouldSerializeXXX()
    method returns true if the current value of the XXX property is different
    than it's default value, so that it should be persisted out. The ResetXXX()
    method resets the XXX property to its default value. If the ReflectPropertyDescriptor
    includes the default value of the property (using the DefaultValueAttribute),
    the ShouldSerializeXXX() and ResetXXX() methods are ignored.
    If the ReflectPropertyDescriptor includes a reference to an editor
    then that value editor will be used to
    edit the property. Otherwise, a system-provided editor will be used.
    Various attributes can be passed to the ReflectPropertyDescriptor, as are described in
    Attribute.
    ReflectPropertyDescriptors can be obtained by a user programmatically through the
    ComponentManager.
 </summary>
 <seealso cref='System.ComponentModel.MemberDescriptor'/>
 <seealso cref='System.Attribute'/>
 <seealso cref='System.ComponentModel.DefaultValueAttribute'/>
   </doc>
   <doc for="ReflectPropertyDescriptor.ReflectPropertyDescriptor">
 
 <summary>
    The main constructor for ReflectPropertyDescriptors.
 </summary>
 <param name='componentClass'>The type of the component the property lives on.</param>
 <param name='name'>The name of the property.</param>
 <param name='type'>The type of the property.</param>
 <param name='attributes'>The attributes of the property.</param>
   </doc>
   <doc for="ReflectPropertyDescriptor.ReflectPropertyDescriptor1">
 
 <summary>
    A constructor for ReflectPropertyDescriptors that have no attributes.
 </summary>
 <param name='componentClass'>The type of the component the property lives on.</param>
 <param name='name'>The name of the property.</param>
 <param name='type'>The type of the property.</param>
   </doc>
   <doc for="ReflectPropertyDescriptor.ReflectPropertyDescriptor2">
 
 <summary>
    A constructor for ReflectPropertyDescriptors that have no attributes.
 </summary>
 <param name='componentClass'>The type of the component the property lives on.</param>
 <param name='name'>The name of the property.</param>
 <param name='type'>The type of the property.</param>
 <param name='propInfo'>The the prop info for the property.</param>
 <param name='getMethod'>The get method for the property.</param>
 <param name='setMethod'>The set method of the property.</param>
 <param name='attrs'>The array of extra attributes.</param>
   </doc>
   <doc for="ReflectPropertyDescriptor.ReflectPropertyDescriptor3">
 
 <summary>
     A constructor for ReflectPropertyDescriptors that creates an extender property.
 </summary>
 <param name='componentClass'>
     The type of the component the property lives on.
 </param>
 <param name='name'>
     The name of the property.
 </param>
 <param name='type'>
     The type of the property.
 </param>
 <param name='receiverType'>
     The receiver type of the extender.
 </param>
 <param name='getMethod'>
     The get method for the property.
 </param>
 <param name='setMethod'>
     The set method of the property.
 </param>
 <param name='attrs'>
     The array of extra attributes.
 </param>
   </doc>
   <doc for="ReflectPropertyDescriptor.ReflectPropertyDescriptor4">
 
 <summary>
     This constructor takes an existing ReflectPropertyDescriptor and modifies it by merging in the
     passed-in attributes.
 </summary>
 <param name='componentClass'>The type of the component the property lives on.</param>
 <param name='oldReflectPropertyDescriptor'>The existing property info.</param>
 <param name='attributes'>The new attributes.</param>
   </doc>
   <doc for="ReflectPropertyDescriptor.ComponentType">
 
 <summary>
    Retrieves the type of the component this PropertyDescriptor is bound to.
 </summary>
 <returns>
    the type of component.
 </returns>
   </doc>
   <doc for="ReflectPropertyDescriptor.DefaultValue">
 
 <summary>
    Retrieves the default value for this property.
 </summary>
   </doc>
   <doc for="ReflectPropertyDescriptor.IsExtender">
 <summary>
     Determines if this property is an extender property.
 </summary>
   </doc>
   <doc for="ReflectPropertyDescriptor.IsReadOnly">
 
 <summary>
    Indicates whether this property is read only.
 </summary>
 <returns>
    whether this property is read only.
 <see cref='ReflectPropertyDescriptor'/>
 </returns>
   </doc>
   <doc for="ReflectPropertyDescriptor.PropertyType">
 
 <summary>
    Retrieves the type of the property.
 </summary>
 <returns>
    type of property.
 </returns>
 <seealso cref='ReflectPropertyDescriptor'/>
   </doc>
   <doc for="ReflectPropertyDescriptor.AddValueChanged">
 
 <summary>
 </summary>
   </doc>
   <doc for="ReflectPropertyDescriptor.CanResetValue">
 
 <summary>
    Indicates whether reset will change the value of the component.  If there
    is a DefaultValueAttribute, then this will return true if getValue returns
    something different than the default value.  If there is a reset method and
    a shouldPersist method, this will return what shouldPersist returns.
    If there is just a reset method, this always returns true.  If none of these
    cases apply, this returns false.
 </summary>
 <param name='component'>The component who's property's value we should test for resetability.</param>
 <seealso cref='ReflectPropertyDescriptor'/>
   </doc>
   <doc for="ReflectPropertyDescriptor.FillMethods">
 
 <summary>
    This fills the get and set method fields of the property info.  It is shared
    by the various constructors.
 </summary>
   </doc>
   <doc for="ReflectPropertyDescriptor.FillAttributes">
 
 <summary>
 </summary>
   </doc>
   <doc for="ReflectPropertyDescriptor.GetGetMethod">
 
   </doc>
   <doc for="ReflectPropertyDescriptor.GetSetMethod">
 
   </doc>
   <doc for="ReflectPropertyDescriptor.GetShouldSerializeMethod">
 
   </doc>
   <doc for="ReflectPropertyDescriptor.GetResetMethod">
 
   </doc>
   <doc for="ReflectPropertyDescriptor.GetValue">
 
 <summary>
    Retrieves the current value of the property on component,
    invoking the getXXX method.  An exception in the getXXX
    method will pass through.
 </summary>
 <param name='component'>The component who's property's value will be retrieved.</param>
 <returns>
    the value of the property for the given component.
 <see cref='ReflectPropertyDescriptor'/>
 </returns>
   </doc>
   <doc for="ReflectPropertyDescriptor.OnValueChanged">
 <summary>
     This should be called by your property descriptor implementation
     when the property value has changed.
 </summary>
   </doc>
   <doc for="ReflectPropertyDescriptor.RemoveValueChanged">
 <summary>
     Allows interested objects to be notified when this property changes.
 </summary>
 <param name='component'>
     The component to remove the handler for.
 </param>
 <param name='handler'>
     The handler to remove.
 </param>
   </doc>
   <doc for="ReflectPropertyDescriptor.ResetValue">
 
 <summary>
    Will reset the default value for this property on the component.  If
    there was a default value passed in as a DefaultValueAttribute, that
    value will be set as the value of the property on the component.  If
    there was no default value passed in, a ResetXXX method will be looked
    for.  If one is found, it will be invoked.  If one is not found, this
    is a nop.
 </summary>
 <param name='component'>The component who's property's value should be reset.</param>
 <seealso cref='ReflectPropertyDescriptor'/>
   </doc>
   <doc for="ReflectPropertyDescriptor.SetValue">
 
 <summary>
    This will set value to be the new value of this property on the
    component by invoking the setXXX method on the component.  If the
    value specified is invalid, the component should throw an exception
    which will be passed up.  The component designer should design the
    property so that getXXX following a setXXX should return the value
    passed in if no exception was thrown in the setXXX call.
 </summary>
 <param name='component'>The component to set the property's value on.</param>
 <param name='value'>The new value for the property on the component.</param>
 <seealso cref='ReflectPropertyDescriptor'/>
   </doc>
   <doc for="ReflectPropertyDescriptor.ShouldSerializeValue">
 
 <summary>
    <para>Indicates whether the value of this property needs to be persisted. In
       other words, it indicates whether the state of the property is distinct
       from when the component is first instantiated. If there is a default
       value specified in this ReflectPropertyDescriptor, it will be compared against the
       property's current value to determine this. If there is't, the
       shouldPersistXXX method is looked for and invoked if found. If both
       these routes fail, true will be returned.
       If this returns false, a tool should not persist this property's value.</para>
 </summary>
 <param name='component'>who's property should be examined for persistance.</param>
 <returns>
    <para>whether the property should be persisted.
       </para>
 </returns>
   </doc>
</docs>

