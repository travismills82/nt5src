<docs>
    <doc for="ListDictionary">
        <summary>
            <para>Implements <see langword="IDictionary" /> using a singly linked list. Recommended for collections that typically contain 10 items or less.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type
   are safe for multithreaded operations. Instance members are not guaranteed to be
   thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for
   a <see cref="System.Collections.Specialized.ListDictionary" />, but derived classes can create their own
   synchronized versions of the <see cref="System.Collections.Specialized.ListDictionary" /> using the <see cref="System.Collections.Specialized.ListDictionary.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>This is a simple implementation of <see cref="System.Collections.IDictionary" /> using a singly linked list.
   It is smaller and faster than a <see cref="System.Collections.Hashtable" /> if the number of elements is 10 or less.
   This should not be used if performance is important for large numbers of elements.</para>
            <para>Members, such as <see cref="System.Collections.Specialized.ListDictionary.this" />, <see cref="System.Collections.Specialized.ListDictionary.Add" />, <see cref="System.Collections.Specialized.ListDictionary.Remove" />, and <see cref="System.Collections.Specialized.ListDictionary.Contains" /> are O(<paramref name="n" />) operations,
where <paramref name="n" /> is <see cref="System.Collections.Specialized.ListDictionary.Count" />.</para>
            <para>A key cannot be <see langword="null" />, but a value can.</para>
            <para lang="VB, C#">The <see langword="foreach" /> statement of the C# language (<see langword="for each" /> in Visual Basic) 
 requires the type of each element in the collection.
 Since each element of the <see cref="System.Collections.Specialized.ListDictionary" /> is a key-and-value pair,
 the element type is not the type of the key or the type of the value.
 Instead, the element type is <see cref="System.Collections.DictionaryEntry" />.
 For example:</para>
            <code lang="C#">foreach (DictionaryEntry myDE in myListDictionary) {...}
</code>
            <code lang="VB">Dim myDE As DictionaryEntry
For Each myDE In myListDictionary
   ...
Next myDE
</code>
            <para lang="VB, C#">The <see langword="foreach" /> statement is a wrapper around the enumerator,
 which only allows reading from, not writing to, the collection.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary2" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IDictionary" />
        <seealso cref="System.Collections.Hashtable" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="ListDictionary.ListDictionary">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.Specialized.ListDictionary" /> class.</para>
        </overload>
        <summary>
            <para>Creates an empty <see cref="System.Collections.Specialized.ListDictionary" /> using the default comparer.</para>
        </summary>
        <remarks>
            <para>The comparer determines whether two keys are equal. Every key in a <see cref="System.Collections.Specialized.ListDictionary" /> must be unique.
   The default comparer is the key's implementation of <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary2" SnippetID="1" />
        </example>
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="ListDictionary.ListDictionary1">
        <summary>
            <para>Creates an empty <see cref="System.Collections.Specialized.ListDictionary" /> using the specified comparer.</para>
        </summary>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="System.Object.Equals" qualify="true" />. </para>
        </param>
        <remarks>
            <para>The comparer determines whether two keys are equal. Every key in a <see cref="System.Collections.Specialized.ListDictionary" /> must be unique.
   The default comparer is the key's implementation of <see cref="System.Object.Equals" qualify="true" />.</para>
            <para>The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</para>
        </remarks>
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.Object.Equals" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="ListDictionary.this">
        <summary>
            <para>Gets or sets the value associated with the specified key.</para>
        </summary>
        <param name="key">The key whose value to get or set.</param>
        <value>
            <para>The value associated with the specified key.
      If the specified key is not found, attempting to get it returns <see langword="null" />,
      and attempting to set it creates a new entry using the specified key.</para>
        </value>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>This property provides the ability to access a specific element in the collection by using the following syntax: <c>myCollection[key]</c>.</para>
            <para>When setting this property, if the specified key already exists in the <see cref="System.Collections.Specialized.ListDictionary" />, the value is replaced;
   otherwise, a new element is created. In contrast, the <see cref="System.Collections.Specialized.ListDictionary.Add" /> method does not modify existing elements.</para>
            <para>A key cannot be <see langword="null" />, but a value can.
 To distinguish between <see langword="null" /> that is returned because the specified key is not found
 and <see langword="null" /> that is returned because the value of the specified key is <see langword="null" />,
 use the <see cref="System.Collections.Specialized.ListDictionary.Contains" /> method
 to determine if the key exists in the list.</para>
            <para>This is an O(<paramref name="n" />) operation, where <paramref name="n" /> is
<see cref="System.Collections.Specialized.ListDictionary.Count" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Enumerator" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Specialized.ListDictionary.Add" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="ListDictionary.Count">
        <summary>
            <para>Gets the number of key-and-value pairs contained in the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <value>
            <para>The number of key-and-value pairs contained in the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </value>
        <remarks>
            <para>This is an O(1) operation.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Enumerator" SnippetID="1" />
        </example>
    </doc><doc for="ListDictionary.Keys">
        <summary>
            <para>Gets an <see cref="System.Collections.ICollection" /> containing the keys in the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the keys in the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the values in the <see cref="System.Collections.ICollection" /> is unspecified,
   but it is the same order as the associated values in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.Specialized.ListDictionary.Values" /> method.</para>
            <para>The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the keys
 in the original <see cref="System.Collections.Specialized.ListDictionary" />.
 Therefore, changes to the <see cref="System.Collections.Specialized.ListDictionary" />
 continue to be reflected in the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Enumerator" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.Specialized.ListDictionary.Values" />
    </doc><doc for="ListDictionary.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.ListDictionary" /> is read-only.</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.ListDictionary" /> implements the <see cref="System.Collections.Specialized.ListDictionary.IsReadOnly" /> property
   because it is required by the <see cref="T:System.Collections.IDictionary" qualify="true" /> interface.</para>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="ListDictionary.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.ListDictionary" /> has a fixed size.</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.ListDictionary" /> implements the <see cref="System.Collections.Specialized.ListDictionary.IsFixedSize" /> property
   because it is required by the <see cref="T:System.Collections.IDictionary" qualify="true" /> interface.</para>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="ListDictionary.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.Specialized.ListDictionary" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para>This property always returns <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Specialized.ListDictionary" /> implements the <see cref="System.Collections.Specialized.ListDictionary.IsSynchronized" /> property
 because it is required by the <see cref="T:System.Collections.ICollection" qualify="true" /> interface.</para>
            <para>Derived classes can provide a synchronized version of
   the <see cref="System.Collections.Specialized.ListDictionary" /> using the <see cref="System.Collections.Specialized.ListDictionary.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows
   how to lock the collection using the <see cref="System.Collections.Specialized.ListDictionary.SyncRoot" /> during the entire
   enumeration:</para>
            <code lang="C#">ListDictionary myCollection = new ListDictionary();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ListDictionary()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Specialized.ListDictionary.SyncRoot" />
    </doc><doc for="ListDictionary.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </value>
        <remarks>
            <para> Derived classes can provide their own synchronized version of the <see cref="System.Collections.Specialized.ListDictionary" /> using the <see cref="System.Collections.Specialized.ListDictionary.SyncRoot" /> property.
   The synchronizing code must perform operations on the <see cref="System.Collections.Specialized.ListDictionary.SyncRoot" /> of the <see cref="System.Collections.Specialized.ListDictionary" />,
   not directly on the <see cref="System.Collections.Specialized.ListDictionary" />. This ensures proper operation of collections that are derived from other objects.
   Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.Specialized.ListDictionary" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe 
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
            <para lang="VB, C#">The following code example shows 
   how to lock the collection using the <see cref="System.Collections.Specialized.ListDictionary.SyncRoot" /> during the entire
   enumeration:</para>
            <code lang="C#">ListDictionary myCollection = new ListDictionary();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ListDictionary()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Specialized.ListDictionary.IsSynchronized" />
    </doc><doc for="ListDictionary.Values">
        <summary>
            <para>Gets an <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the values in the <see cref="System.Collections.ICollection" /> is unspecified,
   but it is the same order as the associated keys in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.Specialized.ListDictionary.Keys" /> method.</para>
            <para>The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the values
 in the original <see cref="System.Collections.Specialized.ListDictionary" />.
 Therefore, changes to the <see cref="System.Collections.Specialized.ListDictionary" />
 continue to be reflected in the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Enumerator" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.Specialized.ListDictionary.Keys" />
    </doc><doc for="ListDictionary.Add">
        <summary>
            <para>Adds an entry with the specified key and value into the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <param name="key">The key of the entry to add.</param>
        <param name=" value">The value of the entry to add. The value can be <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="key" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><para>An entry with the same key already exists in the <see cref="System.Collections.Specialized.ListDictionary" />.</para></exception>
<remarks>
            <para>An object that has no correlation between its state and its hash code value should typically not be used as the key.
      For example, String objects are better than StringBuilder objects for use as keys.</para>
            <para>The <see cref="System.Collections.Specialized.ListDictionary.this" /> property can also be used to add new elements
   by setting the value of a key that does not exist in the <see cref="System.Collections.Specialized.ListDictionary" />.
   For example: <c>myCollection["myNonexistentKey"] = myValue</c>.
However, if the specified key already exists in the <see cref="System.Collections.Specialized.ListDictionary" />,
setting the <see cref="System.Collections.Specialized.ListDictionary.this" /> property overwrites the old value.
In contrast, the <see cref="System.Collections.Specialized.ListDictionary.Add" /> method does not modify existing elements.</para>
            <para>This is an O(<paramref name="n" />) operation, where <paramref name="n" /> is
<see cref="System.Collections.Specialized.ListDictionary.Count" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_AddRemove" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Specialized.ListDictionary.Remove" />
        <seealso cref="System.Collections.Specialized.ListDictionary.this" />
        <seealso cref="System.Collections.IDictionary.Add" qualify="true" />
    </doc><doc for="ListDictionary.Clear">
        <summary>
            <para>Removes all entries from the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.Specialized.ListDictionary.Count" /> is set to zero.</para>
            <para>This is an O(1) operation.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_AddRemove" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IDictionary.Clear" qualify="true" />
    </doc><doc for="ListDictionary.Contains">
        <summary>
            <para>Determines whether the <see cref="System.Collections.Specialized.ListDictionary" /> contains a specific key.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.Specialized.ListDictionary" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.Specialized.ListDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>This is an O(<paramref name="n" />) operation, where <paramref name="n" /> is 
<see cref="System.Collections.Specialized.ListDictionary.Count" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Contains" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IDictionary" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="ListDictionary.CopyTo">
        <summary>
            <para>Copies the <see cref="System.Collections.Specialized.ListDictionary" /> entries to a one-dimensional <see cref="System.Array" /> instance at the specified index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the <see cref="System.Collections.DictionaryEntry" /> objects copied from <see cref="System.Collections.Specialized.ListDictionary" />. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <param name=" index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.IndexOutOfRangeException">
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para></exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.Specialized.ListDictionary" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.Specialized.ListDictionary" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The elements are copied to the <see cref="System.Array" /> in the same order in which the enumerator iterates through the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
            <para>To copy only the keys in the <see cref="System.Collections.Specialized.ListDictionary" />, use <c>ListDictionary.Keys.CopyTo</c>.</para>
            <para>To copy only the values in the <see cref="System.Collections.Specialized.ListDictionary" />, use <c>ListDictionary.Values.CopyTo</c>.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_CopyTo" SnippetID="1" />
        </example>
        <seealso cref="System.Array" />
        <seealso cref="System.Collections.DictionaryEntry" />
        <seealso cref="System.Collections.Specialized.ListDictionary.GetEnumerator" />
    </doc><doc for="ListDictionary.GetEnumerator">
        <summary>
            <para>Returns an <see cref="System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IDictionaryEnumerator" /> for the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Enumerator" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="ListDictionary.IEnumerable.GetEnumerator">
        <summary>
            <para>Returns an <see cref="System.Collections.IEnumerator" /> that can iterate through the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_Enumerator" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="ListDictionary.Remove">
        <summary>
            <para>Removes the entry with the specified key from the <see cref="System.Collections.Specialized.ListDictionary" />.</para>
        </summary>
        <param name="key">The key of the entry to remove.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <remarks>
            <para>If the <see cref="System.Collections.Specialized.ListDictionary" /> does not contain an element with the specified key,
   the <see cref="System.Collections.Specialized.ListDictionary" /> remains unchanged. No exception is thrown.</para>
            <para>This is an O(<paramref name="n" />) operation, where <paramref name="n" /> is 
<see cref="System.Collections.Specialized.ListDictionary.Count" />.</para>
        </remarks>
        <example>
            <codelink SampleID="System.Collections.Specialized.ListDictionary_AddRemove" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Specialized.ListDictionary.Add" />
        <seealso cref="System.Collections.IDictionary.Remove" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc>
</docs>
