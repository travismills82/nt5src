<docs>
	<doc for="CollectionsUtil.CreateCaseInsensitiveHashtable">
		<overload>
			<para>Creates a new instance of the <see cref="System.Collections.Hashtable"/> class that ignores the case of strings.</para>
		</overload>
		<summary>
			<para>Creates a new case-insensitive instance of the <see cref="System.Collections.Hashtable"/> class with the default initial capacity.</para>
		</summary>
		<returns>
			<para>A new case-insensitive instance of the <see cref="System.Collections.Hashtable"/> class with the default initial capacity.</para>
		</returns>
		<remarks>
			<para>The new <see cref="System.Collections.Hashtable"/> instance uses the default load factor, the <see cref="System.Collections.CaseInsensitiveHashCodeProvider"/>, and the <see cref="System.Collections.CaseInsensitiveComparer"/>.</para>
		</remarks>
		<seealso cref="System.Collections.Hashtable"/>
		<seealso cref="System.Collections.CaseInsensitiveHashCodeProvider"/>
		<seealso cref="System.Collections.CaseInsensitiveComparer"/>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
	</doc><doc for="CollectionsUtil.CreateCaseInsensitiveHashtable1">
		<summary>
			<para>Creates a new case-insensitive instance of the <see cref="System.Collections.Hashtable"/> class with the specified initial capacity.</para>
		</summary>
		<param name="capacity">The approximate number of entries that the <see cref="System.Collections.Hashtable"/> can initially contain.</param>
		<returns>
			<para>A new case-insensitive instance of the <see cref="System.Collections.Hashtable"/> class with the specified initial capacity.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
		<remarks>
			<para>The new <see cref="System.Collections.Hashtable"/> instance uses the default load factor, the <see cref="System.Collections.CaseInsensitiveHashCodeProvider"/>, and the <see cref="System.Collections.CaseInsensitiveComparer"/>.</para>
		</remarks>
		<seealso cref="System.Collections.Hashtable"/>
		<seealso cref="System.Collections.CaseInsensitiveHashCodeProvider"/>
		<seealso cref="System.Collections.CaseInsensitiveComparer"/>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
	</doc><doc for="CollectionsUtil.CreateCaseInsensitiveHashtable2">
		<summary>
			<para>Copies the entries from the specified dictionary to a new case-insensitive instance of the <see cref="System.Collections.Hashtable"/> class
   with the same initial capacity as the number of entries copied.</para>
		</summary>
		<param name="d">The <see cref="System.Collections.IDictionary"/> to copy to a new case-insensitive <see cref="System.Collections.Hashtable"/>.</param>
		<returns>
			<para>A new case-insensitive instance of the <see cref="System.Collections.Hashtable"/> class containing the entries from the specified <see cref="System.Collections.IDictionary"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="d"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The new <see cref="System.Collections.Hashtable"/> instance uses the default load factor, the <see cref="System.Collections.CaseInsensitiveHashCodeProvider"/>, and the <see cref="System.Collections.CaseInsensitiveComparer"/>.</para>
		</remarks>
		<seealso cref="System.Collections.Hashtable"/>
		<seealso cref="System.Collections.IDictionary"/>
		<seealso cref="System.Collections.CaseInsensitiveHashCodeProvider"/>
		<seealso cref="System.Collections.CaseInsensitiveComparer"/>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
	</doc><doc for="CollectionsUtil.CreateCaseInsensitiveSortedList">
		<summary>
			<para>Creates a new instance of the <see cref="System.Collections.SortedList"/> class that ignores the case of strings.</para>
		</summary>
		<returns>
			<para>A new instance of the <see cref="System.Collections.SortedList"/> class that ignores the case of strings.</para>
		</returns>
		<remarks>
			<para>The new <see cref="System.Collections.SortedList"/> instance is sorted according to the <see cref="System.Collections.CaseInsensitiveComparer"/>.</para>
		</remarks>
		<seealso cref="System.Collections.SortedList"/>
		<seealso cref="System.Collections.CaseInsensitiveComparer"/>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
	</doc><doc for="CollectionsUtil">
		<summary>
			<para>Creates collections that ignore the case in strings.</para>
		</summary>
		<threadsafe>
			<para>A <see cref="System.Collections.Hashtable"/> can safely support one writer and multiple 
   readers concurrently. To support multiple writers, all operations must be done
   through the wrapper returned by the <see cref="System.Collections.Hashtable.Synchronized"/> method.</para>
			<para>A <see cref="System.Collections.SortedList"/> can safely support multiple readers 
concurrently, as long as the collection is not modified. To guarantee the thread
safety of the <see cref="System.Collections.SortedList"/>, all operations must be done through the
wrapper returned by the <see cref="System.Collections.SortedList.Synchronized"/> method. </para>
			<para>Enumerating through a collection is intrinsically not a thread-safe 
   procedure. Even when a collection is synchronized, other threads could still
   modify the collection, which causes the enumerator to throw an exception. To
   guarantee thread safety during enumeration, you can either lock the collection
   during the entire enumeration or catch the exceptions resulting from changes
   made by other threads.</para>
		</threadsafe>
		<remarks>
			<para>These methods generate a case-insensitive instance of the collection using case-insensitive implementations of the hash code provider and the comparer.
      The resulting instance can be used like any other instances of that class, although it may behave differently.</para>
			<para>For example, suppose two objects with the keys "hello" and "HELLO" are to be added to a hash table.
      A case-sensitive hash table would create two different entries;
      whereas, a case-insensitive hash table would throw an exception when adding the second object.</para>
		</remarks>
		<seealso cref="System.Collections"/>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
	</doc></docs>
