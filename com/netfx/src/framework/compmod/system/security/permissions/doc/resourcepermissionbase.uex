<docs>
	<doc for="ResourcePermissionBase.ResourcePermissionBase1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ResourcePermissionBase.SetAccess">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ResourcePermissionBase.ResourcePermissionBase2">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.ResourcePermissionBase"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.ResourcePermissionBase"/> class.</para>
		</summary>
	</doc><doc for="ResourcePermissionBase.ResourcePermissionBase">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.ResourcePermissionBase"/> class 
 with the specified level of access to resources at creation.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/> values.</param>
	</doc><doc for="ResourcePermissionBase.Copy">
		<summary>
			<para>Creates and returns an identical copy of the current 
 permission object.</para>
		</summary>
		<returns>
			<para>A copy of the current permission object.</para>
		</returns>
		<remarks>
			<para>A copy of the permission object represents the same 
 access to resources as the original permission object.</para>
		</remarks>
	</doc><doc for="ResourcePermissionBase.FromXml">
		<summary>
			<para>Reconstructs a security object with a specified state 
 from an XML encoding.</para>
		</summary>
		<param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
	</doc><doc for="ResourcePermissionBase.Intersect">
		<summary>
			<para>Creates and returns a permission object that is the 
 intersection of the current permission object and a target permission object.</para>
		</summary>
		<param name="target">A permission object of the same type as the current permission object.</param>
		<returns>
			<para>A new permission object that represents the intersection of the current 
 object and the specified target. This object is <see langword="null"/> if the
 intersection is empty.</para>
		</returns>
		<exception cref="T:System.ArgumentException">The target permission object is not of the same type as the current permission object.</exception>
		<remarks>
			<para>The intersection of two permission objects is a permission that describes the 
 set of operations they both hold in common. Specifically, it represents the
 minimum permissions required for a demand to pass both permissions.</para>
		</remarks>
	</doc><doc for="ResourcePermissionBase.ToXml">
		<summary>
			<para>Creates and returns an XML encoding of the security 
 object and its current state.</para>
		</summary>
		<returns>
			<para>An XML encoding of the security object, including any state information.</para>
		</returns>
	</doc><doc for="ResourcePermissionBase.TagNames">
		<summary>
			<para>Gets or sets an array of strings that identify the 
      resource you are protecting.</para>
		</summary>
		<value>
			<para>An array of strings that identify the resource you are 
      trying to protect.</para>
		</value>
		<exception cref="T:System.ArgumentNullException">The property value is <see langword="null"/>.</exception>
		<exception cref="T:System.ArgumentException">The length of the array is 0.</exception>
		<remarks>
			<note type="inheritinfo">
      When you inherit
      from <see cref="System.Security.Permissions.ResourcePermissionBase"/>,
      you must set this property. For an example of an implementation
      of this class, see <see cref="T:System.Diagnostics.PerformanceCounterPermission"/>. In <see cref="T:System.Diagnostics.PerformanceCounterPermission"/>, the <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames"/> property is set privately to "Machine" and
      "Category".
      
   </note>
		</remarks>
	</doc><doc for="ResourcePermissionBase.Any"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResourcePermissionBase.Local">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResourcePermissionBase.IsUnrestricted">
		<summary>
			<para> Gets a value
      indicating whether the permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if permission is unrestricted;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>An unrestricted permission object represents access to any and
      all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="ResourcePermissionBase.Clear">
		<summary>
			<para>Clears the permission of the added permission entries.</para>
		</summary>
	</doc><doc for="ResourcePermissionBase.AddAccess">
		<summary>
			<para>Adds a permission entry to the permission.</para>
		</summary>
		<param name="entry">The <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> to add.</param>
		<exception cref="T:System.ArgumentNullException">The specified <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> is <see langword="null"/>.</exception>
		<exception cref="T:System.InvalidOperationException"><para>The number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" qualify="true"/> property is not equal to the number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames" qualify="true"/> property.</para>
			<para>-or-</para>
			<para>The <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> is already included in the permission.</para></exception>
		<seealso cref="System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess"/>
	</doc><doc for="ResourcePermissionBase.GetAccess">
		<summary>
			<para>Returns an array of the <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> objects added to this permission.</para>
		</summary>
		<returns>
			<para>An array of <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> objects that were added to this permission.</para>
		</returns>
		<remarks>
			<para>Use <see cref="System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess"/> and <see cref="System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess"/> to add and remove permission 
   entries to this permission.</para>
		</remarks>
		<seealso cref="System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess"/>
		<seealso cref="System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess"/>
		<seealso cref="System.Security.Permissions.ResourcePermissionBaseEntry"/>
	</doc><doc for="ResourcePermissionBase.IsSubsetOf">
		<summary>
			<para>Determines whether the current permission object is a
      subset of the specified permission.</para>
		</summary>
		<param name="target">A permission object that is to be tested for the subset relationship.</param>
		<returns>
			<para><see langword="true"/> if the current permission object is a subset of the
   specified permission object; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The current permission object is a subset of the specified permission object
      if the current permission object specifies a set of operations that is wholly
      contained by the specified permission object. For example, a permission that
      represents access to C:\Example.txt is a subset of a permission that represents
      access to C:\. If this method returns <see langword="true"/>, the current
      permission object represents no more access to the protected resource than does
      the specified permission object.</para>
			<para>This method always returns <see langword="false"/>
when the specified permission object is of a different type than that of
the current permission object.</para>
		</remarks>
	</doc><doc for="ResourcePermissionBase.Union">
		<summary>
			<para>Creates a permission object that combines the current
      permission object and the target permission object.</para>
		</summary>
		<param name="target">A permission object to combine with the current permission object. It must be of the same type as the current permission object.</param>
		<returns>
			<para>A new permission object that represents the union of the
      current permission object and the specified permission object.</para>
		</returns>
		<exception cref="T:System.ArgumentException">The <paramref name="target"/> permission object is not of the same type as the current permission object.</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.ResourcePermissionBase.Union"/> is a permission that
   represents all the operations represented by both the current permission object
   and the specified permission object. Any demand that passes either permission
   passes their union.</para>
		</remarks>
	</doc><doc for="ResourcePermissionBase.RemoveAccess">
		<summary>
			<para>Removes a permission entry from the permission.</para>
		</summary>
		<param name="entry">The <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> to remove.</param>
		<exception cref="T:System.ArgumentNullException">The specified <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> is <see langword="null"/>.</exception>
		<exception cref="T:System.InvalidOperationException"><para>The number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" qualify="true"/> property is not equal to the number of elements in the <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames" qualify="true"/> property.</para>
			<para>-or-</para>
			<para>The <see cref="System.Security.Permissions.ResourcePermissionBaseEntry"/> is not in the permission.</para></exception>
		<seealso cref="System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess"/>
	</doc><doc for="ResourcePermissionBase.PermissionAccessType">
		<summary>
			<para>Gets or sets an enumeration value that describes the
      types of access that you are giving the resource.</para>
		</summary>
		<value>
			<para>An enumeration value that is derived from <see cref="T:System.Type"/> and describes the
   types of access that you are giving the resource.</para>
		</value>
		<exception cref="T:System.ArgumentNullException">The property value is <see langword="null"/>.</exception>
		<exception cref="T:System.ArgumentException">The property value is not an enumeration value.</exception>
		<remarks>
			<note type="inheritinfo">
      When you inherit
      from <see cref="System.Security.Permissions.ResourcePermissionBase"/>,
      you must set this property. For an example of an implementation
      of this class, see <see cref="T:System.Diagnostics.PerformanceCounterPermission"/> . In <see cref="T:System.Diagnostics.PerformanceCounterPermission"/>,
      the <see cref="System.Security.Permissions.ResourcePermissionBase.PermissionAccessType"/> property is
      privately set to the type of <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"/>.
      
   </note>
		</remarks>
	</doc><doc for="ResourcePermissionBase">
		<summary>
			<para>Allows control of code access security permissions.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      When you inherit
      from <see cref="System.Security.Permissions.ResourcePermissionBase"/>, you must provide at
      least three constructors, set two properties, and provide a third
      property. The required constructors are: a default constructor, one that takes a
   <see cref="T:System.Security.Permissions.PermissionState"/> as a parameter, and as many as
      needed that take values for the properties. The properties that need to be
      set are <see cref="System.Security.Permissions.ResourcePermissionBase.PermissionAccessType"/>
      and <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames"/>. The third property that is needed
      is one that returns the permission entries. For an example of an implementation
      of this class, see <see cref="T:System.Diagnostics.PerformanceCounterPermission"/>. In <see cref="T:System.Diagnostics.PerformanceCounterPermission"/>, the <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames"/> property is set privately to
      "Machine" and "Category", the <see cref="System.Security.Permissions.ResourcePermissionBase.PermissionAccessType"/> property is
      privately set to the type of <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"/>, and the <see cref="M:System.Diagnostics.PerformanceCounterPermission.PermissionEntries"/> property returns the permission
      entries.
      
   </note>
		</remarks>
		<example>
			<para>The following example inherits from the <see cref="System.Security.Permissions.ResourcePermissionBase"/> class. 
   4 kinds of constructors are implemented. The example also provides an
   implementation of a class called <c>MailslotPermissionEntry</c>. The <see cref="System.Security.Permissions.ResourcePermissionBase.PermissionAccessType"/> property is
then privately set to the type of <c>MailslotPermissionEntry</c>
. The <see cref="System.Security.Permissions.ResourcePermissionBase.TagNames"/> property is
set privately to "Name" and "Machine".</para>
			<codelink SampleID="ResourcePermissionBase" SnippetID="1"/>
		</example>
	</doc>
</docs>
