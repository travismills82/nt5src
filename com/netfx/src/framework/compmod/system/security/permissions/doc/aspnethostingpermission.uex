<docs>
	<doc for="AspNetHostingPermission.Copy">
		<summary>
			<para>When implemented by a derived class, creates and returns 
      an identical copy of the current permission object.</para>
		</summary>
		<returns>
			<para>A copy of the current permission object.</para>
		</returns>
	</doc>
	<doc for="AspNetHostingPermission.IsUnrestricted">
		<summary>
			<para>Returns a value indicating whether unrestricted access to the 
      resource protected by the current permission is allowed.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if unrestricted use of the 
   resource protected by the permission is allowed; otherwise,
<see langword="false"/> 
.</para>
		</returns>
	</doc>
	<doc for="AspNetHostingPermissionLevel.Minimal">
		<summary>
			<para>Indicates that features protected with a demand for 
      the <see langword="Minimal"/> level will succeed. This level allows code to
      execute but not to interact with resources present on the system. This level is
      granted by configuring at least the <see langword="Minimal"/> trust level
      using the <see topic="gngrfTrustSection"/>
      
      section in a
      configuration file.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermissionLevel.Low">
		<summary>
			<para>Indicates that features protected with a demand for any 
      level less than or equal to the <see langword="Low"/>
      level will succeed. This level is intended to allow read-only access
      to limited resources in a constrained environment. This level is granted by specifying
      the <see langword="Low"/> trust level in the
   <see topic="gngrfTrustSection"/>
   
   section in a
   configuration file.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermissionLevel.Unrestricted">
		<summary>
			<para> 
      Indicates that all demands for permission to
      use all features of an application will be granted. This is equivalent
      to granting <see langword="Full"/> trust level in the
   <see topic="gngrfTrustSection"/> 
   section in a configuration file.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermissionAttribute">
		<summary>
			<para>Allows security actions for <see cref="System.Web.AspNetHostingPermission"/> to 
   be applied to code using declarative security. This class cannot be inherited.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermission.ToXml">
		<summary>
			<para>Creates an XML encoding of the security object and its current state.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Security.SecurityElement"/> containing the XML encoding of the security object, including any state information.</para>
		</returns>
	</doc>
	<doc for="AspNetHostingPermission.Union">
		<summary>
			<para>Creates a permission that is the union of the current 
      permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
		<returns>
			<para> An <see cref="System.Security.IPermission"/> that represents the union of the current permission and the 
   specified permission.</para>
		</returns>
		<exception cref="ArgumentException"><paramref name="target"/>is not an <see cref="System.Web.AspNetHostingPermission"/>.</exception>
	</doc>
	<doc for="AspNetHostingPermission.Intersect">
		<summary>
			<para>When implemented by a derived class, creates and returns 
      a permission that is the intersection of the current permission and the
      specified permission.</para>
		</summary>
		<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
		<returns>
			<para>An <see cref="System.Security.IPermission"/> that represents the intersection of the current permission 
   and the specified permission. The new permission is <see langword="null"/>
   if the intersection is empty.</para>
		</returns>
		<exception cref="ArgumentException"><paramref name="target"/>is not an <see cref="System.Web.AspNetHostingPermission"/>.</exception>
	</doc>
	<doc for="AspNetHostingPermissionLevel.None">
		<summary>
			<para> Indicates that no permission is granted. All demands for <see cref="System.Web.AspNetHostingPermission"/> 
will fail.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermissionAttribute.Level">
		<summary>
			<para>Gets or sets the current hosting permission level.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Web.ASPNetHostingPermissionLevel"/> enumeration values.</para>
		</value>
	</doc>
	<doc for="AspNetHostingPermissionAttribute.AspNetHostingPermissionAttribute">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.AspNetHostingPermissionAttribute"/> class.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/> enumeration values.</param>
	</doc>
	<doc for="AspNetHostingPermissionLevel">
		<summary>
			<para> Specifies the trust level that is granted to an
      ASP.NET Web application.</para>
		</summary>
		<remarks>
			<para> 
      See <see topic="cpconASPNETCodeAccessSecurity"/>
      for detailed information about
      
      the permissions that are granted
      to each trust level. </para>
			<para> 
      The members of this enumeration define application
      security levels ranging from full trust (the application is unconstrained by code
      access security) to minimal trust (the application has permission only to
      execute). You set the trust level for an ASP.NET resource with the
   <see topic="gngrfTrustSection"/> configuration element in a 
      Web.config or Machine.config file. </para>
			<para>If you want to lock security policy for a specific server or Web
      site, use the <see topic="gngrfLocationElement"/> element in conjunction with
      the <see langword="allowOverride=false"/>
      attribute to ensure that trust policy settings cannot be
      overridden locally.</para>
		</remarks>
	</doc>
	<doc for="AspNetHostingPermissionLevel.Medium">
		<summary>
			<para>Indicates that features protected with a demand for any
      level less than or equal to the <see langword="Medium"/>
      level will succeed. This level is granted by configuring at least
      the <see langword="Medium"/> trust level in the
   <see topic="gngrfTrustSection"/> section in
      a configuration file.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermissionLevel.High">
		<summary>
			<para>Indicates that features protected with a demand for any
      level less than or equal to the <see langword="High"/> trust
      level will succeed.
      This level is intended for highly trusted managed-code applications that need to
      use most of the managed permissions that support semi-trusted access. It
      does not grant some of the highest permissions (for example, the ability to call
      into native code), but it does provide a way to run trusted applications with least
      privilege or to provide some level of constraints for highly trusted
      applications. This level is granted by configuring at least
      the <see langword="High"/> trust level in the <see topic="gngrfTrustSection"/>
      
      section in a configuration file.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermissionAttribute.CreatePermission">
		<summary>
			<para>Creates a new <see cref="System.Web.AspNetHostingPermission"/> with the permission level previously set by the <see cref="System.Web.AspNetHostingPermissionAttribute.Level"/> property.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Web.IPermission"/> that is the new <see cref="System.Web.AspNetHostingPermission"/>.</para>
		</returns>
	</doc>
	<doc for="AspNetHostingPermission">
		<summary>
			<para> Controls access
      permissions in ASP.NET hosted environments.</para>
		</summary>
	</doc>
	<doc for="AspNetHostingPermission.AspNetHostingPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Web.AspNetHostingPermission"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.AspNetHostingPermission"/> class with the specified <see cref="System.Security.Permissions.PermissionState"/> 
enumeration value.</para>
		</summary>
		<param name="state">A <see cref="System.Security.Permissions.PermissionState"/> enumeration value.</param>
	</doc>
	<doc for="AspNetHostingPermission.AspNetHostingPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.AspNetHostingPermission"/> class with the specified permission level.</para>
		</summary>
		<param name="level">An <see cref="System.Web.AspNetHostingPermissionLevel"/> enumeration value.</param>
	</doc>
	<doc for="AspNetHostingPermission.Level">
		<summary>
			<para>Gets or sets the current hosting permission level for an ASP.NET application.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Web.ASPNetHostingPermissionLevel"/> enumeration values.</para>
		</value>
	</doc>
	<doc for="AspNetHostingPermission.IsSubsetOf">
		<summary>
			<para> Returns a value indicating whether
      the current permission is a subset of the specified permission.</para>
		</summary>
		<param name="target">The <see cref="System.Security.IPermission"/> to combine with the current permission. It must be of the same type as the current IPermission.</param>
		<returns>
			<para><see langword="true "/>if the
   current <see cref="System.Security.IPermission"/> is a subset of the
   specified <see langword="IPermission"/>
   ; otherwise, <see langword="false"/>
   .</para>
		</returns>
		<exception cref="ArgumentException"><paramref name="target"/>is not an <see cref="System.Web.AspNetHostingPermission"/> object.</exception>
	</doc>
	<doc for="AspNetHostingPermission.FromXml">
		<summary>
			<para>Reconstructs a security object with a specified state from
      an XML encoding.</para>
		</summary>
		<param name="securityElement">The <see cref="System.Security.SecurityElement"/> containing the XML encoding to use to reconstruct the security object.</param>
		<exception cref="ArgumentNullException"><paramref name="securityElement"/>is null.</exception>
		<exception cref="ArgumentException"><para>The <see cref="System.Security.securityElement.Tag"/> attribute of <paramref name="securityElement"/> is not <see langword="IPermission"/>
			</para>
			<para><see langword="-"/>or-</para>
			<para> The class <see cref="System.Security.securityElement.Attribute"/> of <paramref name="securityElement"/> is null or an empty string. </para></exception>
	</doc>
</docs>
