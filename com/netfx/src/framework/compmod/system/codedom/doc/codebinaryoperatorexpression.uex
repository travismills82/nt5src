<docs>
	<doc for="CodeBinaryOperatorExpression.CodeBinaryOperatorExpression">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeBinaryOperatorExpression"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeBinaryOperatorExpression"/> class.</para>
		</summary>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.CodeBinaryOperatorType"/>
	</doc>
	<doc for="CodeBinaryOperatorExpression.Equals">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="CodeBinaryOperatorExpression.GetHashCode">
		<nodoc/>
	</doc>
	<doc for="CodeBinaryOperatorExpression.CodeBinaryOperatorExpression1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeBinaryOperatorExpression"/> class
   using the specified
   parameters.</para>
		</summary>
		<param name="left">The <see cref="System.CodeDom.CodeExpression"/> on the left of the operator.</param>
		<param name=" op">A <see cref="System.CodeDom.CodeBinaryOperatorType"/> indicating the type of operator.</param>
		<param name=" right">The <see cref="System.CodeDom.CodeExpression"/> on the right of the operator.</param>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeBinaryOperatorExpression.Right">
		<summary>
			<para> Gets or
      sets the code expression on the right of the operator.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeExpression"/> 
that indicates the right
operand.</para>
		</value>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeBinaryOperatorExpression.Left">
		<summary>
			<para> Gets or sets
      the code expression on the left of the operator.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeExpression"/> 
that indicates the left
operand.</para>
		</value>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeBinaryOperatorExpression">
		<summary>
			<para>Represents an expression that consists of a binary operation between two expressions.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.CodeBinaryOperatorExpression"/> can be used to 
   represent code expressions that include a binary operator. Some examples of
   binary operators are equality (<see langword="=="/>), addition
   (<see langword="+"/>), and bitwise
   (<see langword="|"/>
   ) operators. The <see cref="System.CodeDom.CodeBinaryOperatorType"/> enumeration
   represents a set of basic, commonly used binary
   
   operators that are supported in many languages. </para>
		</remarks>
		<example>
			<para>This example demonstrates use of a <see cref="System.CodeDom.CodeBinaryOperatorExpression"/> to add two numbers together.</para>
			<codelink SampleID="CodeBinaryOperatorExpression" SnippetID="2"/>
		</example>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.CodeBinaryOperatorType"/>
	</doc>
	<doc for="CodeBinaryOperatorExpression.Operator">
		<summary>
			<para> Gets or sets
      the operator in the binary operator expression.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeBinaryOperatorType"/> that indicates the type of operator in the
   expression.</para>
		</value>
		<remarks>
			<para> A binary operator performs an evaluation on two 
      operands. Some examples of binary operators are equality (<see langword="=="/>),
      addition (<see langword="+"/>), and bitwise (<see langword="|"/>
      
      ) operators. Many commonly used binary operators can
      be found in the <see cref="System.CodeDom.CodeBinaryOperatorType"/>
      enumeration.</para>
		</remarks>
		<seealso cref="System.CodeDom.CodeBinaryOperatorType"/>
	</doc>
</docs>
