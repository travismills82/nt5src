<docs>
	<doc for="CodeSnippetExpression.CodeSnippetExpression">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeSnippetExpression"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeSnippetExpression"/> class.</para>
		</summary>
	</doc>
	<doc for="CodeSnippetExpression.Equals">
		<nodoc/>
	</doc>
	<doc for="CodeSnippetExpression.GetHashCode">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="CodeSnippetExpression.Value">
		<summary>
			<para> Gets or sets the literal string of code.</para>
		</summary>
		<value>
			<para>The literal string.</para>
		</value>
		<remarks>
			<para>This can contain code or comments.</para>
		</remarks>
	</doc>
	<doc for="CodeSnippetExpression">
		<summary>
			<para>Represents a literal expression.</para>
		</summary>
		<remarks>
			<para>A literal expression stores the code of an expression as a literal code fragment. The CodeDOM does
      not translate literal code fragments. Literal code fragments are stored and output just
      as they are. CodeDOM objects that contain literal code are provided so developers can encapsulate
      code that is already in the target language.</para>
			<para>The <see cref="System.CodeDom.CodeSnippetExpression.Value"/> property contains the literal code for this
   snippet expression.</para>
		</remarks>
		<example>
			<codelink SampleID="CodeDomSampleBatch" SnippetID="9"/>
		</example>
	</doc>
	<doc for="CodeSnippetExpression.CodeSnippetExpression1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeSnippetExpression"/> class using the specified literal
   expression.</para>
		</summary>
		<param name="value">The literal expression to represent.</param>
		<example>
			<codelink SampleID="CodeDomSampleBatch" SnippetID="9"/>
		</example>
	</doc>
</docs>
