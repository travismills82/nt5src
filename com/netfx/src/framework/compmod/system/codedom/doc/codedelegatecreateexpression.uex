<docs>
	<doc for="CodeDelegateCreateExpression.CodeDelegateCreateExpression">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeDelegateCreateExpression"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeDelegateCreateExpression"/> class.</para>
		</summary>
	</doc>
	<doc for="CodeDelegateCreateExpression.DelegateType">
		<summary>
			<para> Gets or sets the data type of the delegate.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeTypeReference"/> that indicates the data type of the delegate.</para>
		</value>
	</doc>
	<doc for="CodeDelegateCreateExpression.Equals">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="CodeDelegateCreateExpression.GetHashCode">
		<nodoc/>
	</doc>
	<doc for="CodeDelegateCreateExpression">
		<summary>
			<para>Represents an expression that creates a delegate.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.CodeDelegateCreateExpression"/> represents code that
   creates a delegate.<see cref="System.CodeDom.CodeDelegateCreateExpression"/> is often used with <see cref="System.CodeDom.CodeAttachEventStatement"/> or <see cref="System.CodeDom.CodeRemoveEventStatement"/> to represent
   an event handler to attach or remove from an event.</para>
			<para>The <see cref="System.CodeDom.CodeDelegateCreateExpression.DelegateType"/> property specifies the type of
delegate to create. The <see cref="System.CodeDom.CodeDelegateCreateExpression.TargetObject"/> property indicates
the object that contains the event-handler method. The <see cref="System.CodeDom.CodeDelegateCreateExpression.MethodName"/> property indicates
the name of the event-handler method
whose method signature
matches the method signature of the delegate.</para>
			<para>In C#, a delegate creation expression is typically of 
   the following form: <c>new
   EventHandler(this.HandleEventMethod).</c> In Visual Basic, a delegate
creation expression is typically of the following form: <c>AddressOf Me.HandleEventMethod</c>
.</para>
		</remarks>
		<example>
			<para>The following example code uses a <see cref="System.CodeDom.CodeDelegateCreateExpression"/> to create a delegate.</para>
			<codelink SampleID="CodeAttachEventStatementExample" SnippetID="3"/>
		</example>
	</doc>
	<doc for="CodeDelegateCreateExpression.CodeDelegateCreateExpression1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeDelegateCreateExpression"/> class.</para>
		</summary>
		<param name="delegateType">A <see cref="System.CodeDom.CodeTypeReference"/> that indicates the data type of the delegate.</param>
		<param name=" targetObject">A <see cref="System.CodeDom.CodeExpression"/> that indicates the object containing the event-handler method.</param>
		<param name=" methodName">The name of the event-handler method.</param>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeDelegateCreateExpression.TargetObject">
		<summary>
			<para> Gets or sets the object that contains the event-handler method.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeExpression"/> that indicates the object containing the event-handler method.</para>
		</value>
	</doc>
	<doc for="CodeDelegateCreateExpression.MethodName">
		<summary>
			<para> Gets or sets the name of the event handler method.</para>
		</summary>
		<value>
			<para> The name of the event handler method.</para>
		</value>
	</doc>
</docs>
