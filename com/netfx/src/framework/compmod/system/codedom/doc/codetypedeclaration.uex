<docs>
	<doc for="CodeTypeDeclaration.CodeTypeDeclaration">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeTypeDeclaration"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeTypeDeclaration"/> class.</para>
		</summary>
	</doc>
	<doc for="CodeTypeDeclaration.Equals">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="CodeTypeDeclaration.GetHashCode">
		<nodoc/>
	</doc>
	<doc for="CodeTypeDeclaration.PopulateBaseTypes">
		<summary>
			<para> Occurs when the <see cref="System.CodeDom.CodeTypeDeclaration.BaseTypes"/> collection is accessed for the first time.
 </para>
		</summary>
	</doc><doc for="CodeTypeDeclaration.PopulateMembers">
		<summary>
			<para> Occurs when the <see cref="System.CodeDom.CodeTypeDeclaration.Members"/> collection is accessed for the first time.
 </para>
		</summary>
	</doc><doc for="CodeTypeDeclaration.CodeTypeDeclaration1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeTypeDeclaration"/> class with the specified name.</para>
		</summary>
		<param name="name">The name for the new type.</param>
	</doc>
	<doc for="CodeTypeDeclaration.IsClass">
		<summary>
			<para> Gets or
      sets a value indicating whether
      the type is a class or reference type.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the type is 
   a class or reference type;
   otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CodeTypeDeclaration.IsStruct">
		<summary>
			<para> Gets or
      sets a value indicating whether
      the types is a value type (struct).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the type is
   a value type; otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CodeTypeDeclaration.IsEnum">
		<summary>
			<para> Gets or sets a
      value indicating whether the type is an enumeration.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the type
   is an enumeration; otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CodeTypeDeclaration.IsInterface">
		<summary>
			<para> Gets or sets a
      value indicating whether the type is an interface.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the type is an interface; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CodeTypeDeclaration.Members">
		<summary>
			<para> Gets the collection of class members for the represented type.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeTypeMemberCollection"/> that indicates the class members.</para>
		</value>
		<seealso cref="System.CodeDom.CodeTypeMemberCollection"/>
	</doc>
	<doc for="CodeTypeDeclaration.TypeAttributes">
		<summary>
			<para> Gets or sets the attributes of the type.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.TypeAttributes"/> that indicates the attributes of the
   type.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Reflection.TypeAttributes"/> property contains the same type of values
   used by <see cref="System.Reflection"/> when investigating a type at run
   time. Many of these flags do not correspond to the type declaration syntax
   for some languages. As a result, only the following flags are significant
   to <see cref="System.CodeDom.CodeTypeDeclaration"/>: <see cref="System.Reflection.TypeAttributes.Class"/>, <see cref="System.Reflection.TypeAttributes.Interface"/>, <see cref="System.Reflection.TypeAttributes.Abstract"/>, <see cref="System.Reflection.TypeAttributes.Sealed"/>, <see cref="System.Reflection.TypeAttributes.Public"/>, <see cref="System.Reflection.TypeAttributes.NotPublic"/>, <see cref="System.Reflection.TypeAttributes.NestedPublic"/>, and <see cref="System.Reflection.TypeAttributes.NestedPrivate"/>. </para>
			<note type="note">
   Some of the flags such as <see cref="System.Reflection.TypeAttributes.Abstract"/> overlap with the meaning of flags in the the
<see cref="System.CodeDom.CodeTypeMember.Attributes"/> property of <see cref="System.CodeDom.CodeTypeDeclaration"/> that is inherited
   from <see cref="System.CodeDom.CodeTypeMember"/>. The <see cref="System.CodeDom.CodeTypeMember.Attributes"/> property is a side-effect of the <see cref="System.CodeDom.CodeTypeDeclaration"/> class inheriting from <see cref="System.CodeDom.CodeTypeMember"/>
   so that classes can be nested. The flags in the <see cref="System.CodeDom.CodeTypeDeclaration.TypeAttributes"/> property should be used
   instead of the flags in the <see cref="System.CodeDom.CodeTypeMember.Attributes"/>
   
   property.
</note>
		</remarks>
		<seealso cref="System.Reflection.TypeAttributes"/>
	</doc><doc for="CodeTypeDeclaration.BaseTypes">
		<summary>
			<para> Gets
      the base types of the type.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeTypeReferenceCollection"/> that indicates the base types of the type.</para>
		</value>
		<seealso cref="System.CodeDom.CodeTypeReferenceCollection"/>
	</doc>
	<doc for="CodeTypeDeclaration">
		<summary>
			<para>Represents a type declaration for a class,
      structure, interface or enumeration.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.CodeTypeDeclaration"/> can be used to 
   represent code that declares a class, structure, interface, or
   enumeration. <see cref="System.CodeDom.CodeTypeDeclaration"/>
   can be used to
   declare a type that is nested within another type. </para>
			<para>The <see cref="System.CodeDom.CodeTypeDeclaration.BaseTypes"/> property specifies the base type or base
types of the type being declared. The <see cref="System.CodeDom.CodeTypeDeclaration.Members"/> property contains the type
members, which can include methods, fields, properties, comments and other
types. The <see cref="System.CodeDom.CodeTypeDeclaration.TypeAttributes"/>
property indicates the <see cref="System.Reflection.TypeAttributes"/> values for the type
declaration, which indicate the type category of the type. The <see cref="System.CodeDom.CodeTypeDeclaration.IsClass"/>, <see cref="System.CodeDom.CodeTypeDeclaration.IsStruct"/>, <see cref="System.CodeDom.CodeTypeDeclaration.IsEnum"/> and <see cref="System.CodeDom.CodeTypeDeclaration.IsInterface"/> methods respectively indicate
whether the type
is a class, structure, enumeration, or interface type. </para>
			<note type="note">
   Some
   programming
   languages only support the
   declaration of reference types, or classes. To check a language-specific CodeDOM
   code generator for support for declaring interfaces, enumerations
   or value types, call the <see cref="System.CodeDom.Compiler.ICodeGenerator.Supports"/> method to test for the
   appropriate <see cref="System.CodeDom.Compiler.GeneratorSupport"/>
   flags. <see cref="System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces"/> indicates support for
   interfaces, <see cref="System.CodeDom.Compiler.GeneratorSupport.DeclareEnums"/> indicates support for
   enumerations, and <see cref="System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes"/>
   
   indicates support for
   value types such as
   structures.
</note>
		</remarks>
		<example>
			<para>This example demonstrates using a <see cref="System.CodeDom.CodeTypeDeclaration"/> to declare a type.</para>
			<codelink SampleID="CodeTypeDeclarationExample" SnippetID="2"/>
		</example>
		<seealso cref="System.CodeDom.CodeTypeDeclarationCollection"/>
	</doc>
</docs>
