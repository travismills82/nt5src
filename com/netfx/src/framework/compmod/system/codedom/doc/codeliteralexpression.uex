<docs>
   <doc for="CodeSnippetExpression">
 <summary>
    <para>Represents a literal expression.</para>
 </summary>
 <remarks>
    <para>A literal expression stores an expression as a literal string, or literal snippet. The 
       CodeDOM does not translate literal snippets. Literal snippets are stored and
       output as-is. Literal snippet objects are provided for the encapsulization of
       code that is already in the target language.</para>
 </remarks>
   </doc>
   <doc for="CodeSnippetExpression.CodeSnippetExpression">
 <overload>
 <para>Initializes a new instance of the <see cref='System.CodeDom.CodeSnippetExpression'/> class.</para>
 </overload>
 <summary>
 <para>Initializes a new instance of the <see cref='System.CodeDom.CodeSnippetExpression'/> class.</para>
 </summary>
   </doc>
   <doc for="CodeSnippetExpression.CodeSnippetExpression1">
 <summary>
 <para>Initializes a new instance of the <see cref='System.CodeDom.CodeSnippetExpression'/> class using the specified literal
    expression.</para>
 </summary>
 <param name='value'>The literal expression to represent.</param>
   </doc>
   <doc for="CodeSnippetExpression.Value">
 <summary>
    <para> Gets or sets the literal string of code.</para>
 </summary>
 <value>
    <para>The literal string.</para>
 </value>
 <remarks>
    <para>This can be code, text, or comments.</para>
 </remarks>
   </doc>
   <doc for="CodeSnippetExpression.Equals">
 <nodoc/>
   </doc>
   <doc for="CodeSnippetExpression.GetHashCode">
 <nodoc/>
 <summary>
 </summary>
   </doc>
</docs>

