<docs>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class.</para>
		</summary>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the specified array data type and initializers.</para>
		</summary>
		<param name="createType">The data type of the array to create.</param>
		<param name=" initializers">An array of expressions to use to initialize the array.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CreateType">
		<summary>
			<para> 
       Gets or sets the type of array to create.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeTypeReference"/> that indicates the type of the array.</para>
		</value>
	</doc>
	<doc for="CodeArrayCreateExpression.SizeExpression">
		<summary>
			<para>Gets or sets the expression that indicates the size of the array.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeExpression"/> that indicates the size of the array.</para>
		</value>
		<remarks>
			<para>The size of the array can be represented with a <see cref="System.CodeDom.CodeExpression"/>.</para>
		</remarks>
	</doc>
	<doc for="CodeArrayCreateExpression.Equals">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether the specified Object is the same instance as 
       the current Object.</para>
		</summary>
		<param name="obj">The object to test for equality.</param>
		<returns>
			<para><see langword="true"/> if the specified object is the same instance as the 
    current object; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="CodeArrayCreateExpression.GetHashCode">
		<nodoc/>
		<summary>
			<para>Serves as a hash function for a particular type, suitable for use in hashing 
       algorithms and data structures like a hash table.</para>
		</summary>
		<returns>
			<para>A hash code for the current object.</para>
		</returns>
		<remarks>
			<para>Overrides Object's <see cref="System.Object.GetHashCode"/> method.</para>
		</remarks>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression1">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> 
class using the specified array data type and initialization
expressions.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> 
class using the specified array data
type and initialization expressions.</para>
		</summary>
		<param name="createType">A <see cref="System.CodeDom.CodeTypeReference"/> that indicates the data type of the array to create.</param>
		<param name=" initializers"> An array of expressions to use to initialize the array.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the specified array data type
   name and initializers.</para>
		</summary>
		<param name="createType">The name of the data type of the array to create.</param>
		<param name=" initializers">An array of expressions to use to initialize the array.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the 
   specified array data type and number of indexes
   for the array.</para>
		</summary>
		<param name="createType">A <see cref="System.CodeDom.CodeTypeReference"/> indicating the data type of the array to create.</param>
		<param name=" size">The number of indexes of the array to create.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression5">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the 
   specified array data type name
   and number of indexes for the array.</para>
		</summary>
		<param name="createType">The name of the data type of the array to create.</param>
		<param name=" size">The number of indexes of the array to create.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression7">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the 
   specified array data type and
   code expression indicating the number of indexes
   for the array.</para>
		</summary>
		<param name="createType">A <see cref="System.CodeDom.CodeTypeReference"/> indicating the data type of the array to create.</param>
		<param name="size">An expression that indicates the number of indexes of the array to create.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression8">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using 
   the specified array data type name and code expression indicating the number of indexes for
   the array.</para>
		</summary>
		<param name="createType">The name of the data type of the array to create.</param>
		<param name=" size">An expression that indicates the number of indexes of the array to create.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression9">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the specified 
   array data type and code expression indicating the number of indexes for the
   array.</para>
		</summary>
		<param name="createType">The data type of the array to create.</param>
		<param name=" size">An expression that indicates the number of indexes of the array to create.</param>
	</doc>
	<doc for="CodeArrayCreateExpression.Initializers">
		<summary>
			<para> 
      Gets the initializers with which to initialize the array.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeExpressionCollection"/> that indicates the initialization values.</para>
		</value>
	</doc>
	<doc for="CodeArrayCreateExpression.Size">
		<summary>
			<para> Gets or sets the number of indexes in the array.</para>
		</summary>
		<value>
			<para>The number of indexes in the array.</para>
		</value>
	</doc>
	<doc for="CodeArrayCreateExpression.CodeArrayCreateExpression6">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeArrayCreateExpression"/> class using the
   specified array data type and number of indexes for the array.</para>
		</summary>
		<param name="createType">The data type of the array to create.</param>
		<param name=" size">The number of indexes of the array to create.</param>
	</doc>
	<doc for="CodeArrayCreateExpression">
		<summary>
			<para> Represents an expression that creates an array.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.CodeArrayCreateExpression"/> can be used to represent a code expression that
   creates an array. Expressions that
   create an array should specify either a number of elements, or
   a list of expressions to use to initialize the
   array. </para>
			<para>Most arrays can be initialized immediately following declaration.
   The <see cref="System.CodeDom.CodeArrayCreateExpression.Initializers"/>
   property can be set to the expression to use to initialize
   the array. </para>
			<para> A 
<see cref="System.CodeDom.CodeArrayCreateExpression"/> only directly 
   supports creating single-dimension arrays. If a
   language allows arrays within arrays, it is possible to create multi-dimensional arrays by
   nesting a <see cref="System.CodeDom.CodeArrayCreateExpression"/> within a
<see cref="System.CodeDom.CodeArrayCreateExpression"/>. Not all languages support arrays of arrays. You 
   can check whether an <see cref="System.CodeDom.Compiler.ICodeGenerator"/>
   for a language declares support for nested arrays
   by calling <see cref="System.CodeDom.Compiler.ICodeGenerator.Supports"/> with the <see cref="System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays"/> flag.</para>
		</remarks>
		<example>
			<para>The following code uses a <see cref="System.CodeDom.CodeArrayCreateExpression"/> to create an array of integers
   with
   10 indexes.</para>
			<codelink SampleID="CodeArrayCreateExpressionSnippet" SnippetID="1"/>
		</example>
		<seealso cref="System.CodeDom.CodeObjectCreateExpression"/>
	</doc>
</docs>
