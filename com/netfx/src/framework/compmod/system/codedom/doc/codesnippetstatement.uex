<docs>
	<doc for="CodeSnippetStatement.CodeSnippetStatement">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeSnippetStatement"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeSnippetStatement"/> class.</para>
		</summary>
	</doc>
	<doc for="CodeSnippetStatement.Value">
		<summary>
			<para> Gets or sets the literal code fragment statement.
      </para>
		</summary>
		<value>
			<para> The literal code fragment statement.
      </para>
		</value>
	</doc><doc for="CodeSnippetStatement">
		<summary>
			<para>Represents a statement using a literal code fragment.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.CodeSnippetStatement"/>
can represent a statement using a literal
code fragment that will be included directly in the source without modification.</para>
			<para>A <see cref="System.CodeDom.CodeSnippetStatement"/> stores a section of
code exactly in its original format as a string. The CodeDOM does not translate
literal code fragments. Literal code fragments are stored and output in their
original format. CodeDOM objects that contain literal code are provided so
developers can encapsulate code that is already in the target language.</para>
			<para>The <see cref="System.CodeDom.CodeSnippetStatement.Value"/> property contains the literal code for the
snippet statement.</para>
		</remarks>
		<example>
			<codelink SampleID="CodeDomSampleBatch" SnippetID="10"/>
		</example>
	</doc>
	<doc for="CodeSnippetStatement.CodeSnippetStatement1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeSnippetStatement"/> class using the specified
   code fragment.</para>
		</summary>
		<param name="value">The literal code fragment of the statement to represent.</param>
		<example>
			<codelink SampleID="CodeDomSampleBatch" SnippetID="10"/>
		</example>
	</doc>
</docs>
