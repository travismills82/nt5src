<docs>
   <doc for="CodeSnippetCompileUnit">
 <summary>
    <para>Represents a literal block of code to compile.</para>
 </summary>
 <remarks>
 <para><see cref='System.CodeDom.CodeSnippetCompileUnit'/> can represent 
    a literal block of code that will be included directly in the source without modification.</para>
 <para>A literal block of code stores a block of code as a literal string, 
    or literal snippet. The CodeDOM does not translate literal snippets. Literal
    snippets are stored and output as-is. Literal snippet objects are provided for
    the encapsulization of code that is already in the target language.</para>
 </remarks>
   </doc>
   <doc for="CodeSnippetCompileUnit.CodeSnippetCompileUnit">
 <summary>
 <para>Initializes a new instance of the <see cref='System.CodeDom.CodeSnippetCompileUnit'/> class.</para>
 </summary>
 <param name='value'>The literal code block to represent.</param>
   </doc>
   <doc for="CodeSnippetCompileUnit.Value">
 <summary>
    <para> 
       Gets or sets the literal code block to represent.</para>
 </summary>
 <value>
    <para> 
       The
       literal code block of the snippet.</para>
 </value>
   </doc>
   <doc for="CodeSnippetCompileUnit.LinePragma">
 <summary>
    <para>Gets or sets the line and file information about where the code block is located in the source code.</para>
 </summary>
 <value>
 <para>A <see cref='System.CodeDom.CodeLinePragma'/> that indicates the position of the code block.</para>
 </value>
 <seealso cref='System.CodeDom.CodeLinePragma'/>
   </doc>
   <doc for="CodeSnippetCompileUnit.Equals">
 <nodoc/>
   </doc>
   <doc for="CodeSnippetCompileUnit.GetHashCode">
 <nodoc/>
 <summary>
 </summary>
   </doc>
</docs>

