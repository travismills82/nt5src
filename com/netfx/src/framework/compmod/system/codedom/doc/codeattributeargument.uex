<docs>
	<doc for="CodeAttributeArgument.CodeAttributeArgument">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeAttributeArgument"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeAttributeArgument"/> class.</para>
		</summary>
	</doc>
	<doc for="CodeAttributeArgument.CodeAttributeArgument1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeAttributeArgument"/> class using the specified value.</para>
		</summary>
		<param name="value">A <see cref="System.CodeDom.CodeExpression"/> that represents the value of the argument.</param>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeAttributeArgument.Equals">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="CodeAttributeArgument.GetHashCode">
		<nodoc/>
	</doc>
	<doc for="CodeAttributeArgument.CodeAttributeArgument2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.CodeAttributeArgument"/> class using the specified name and
   value.</para>
		</summary>
		<param name="name">The name of the attribute property the argument applies to.</param>
		<param name=" value">A <see cref="System.CodeDom.CodeExpression"/> that represents the value of the argument.</param>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeAttributeArgument.Name">
		<summary>
			<para>Gets or sets the name of the attribute.</para>
		</summary>
		<value>
			<para>The name of the attribute property the argument is for.</para>
		</value>
	</doc>
	<doc for="CodeAttributeArgument.Value">
		<summary>
			<para>Gets or sets the value for the attribute argument.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.CodeExpression"/> that indicates the value for the attribute argument.</para>
		</value>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc>
	<doc for="CodeAttributeArgument">
		<summary>
			<para> Represents an argument used in a metadata attribute declaration.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.CodeAttributeArgument"/> can be used to
   represent either the value for a
   single argument of an attribute constructor, or a value with which
   to initialize a property of the attribute.</para>
			<para> The <see cref="System.CodeDom.CodeAttributeArgument.Value"/>
property indicates the value of the argument. The <see cref="System.CodeDom.CodeAttributeArgument.Name"/> property, when
used, indicates the name of a property of the attribute to which to assign
the value. </para>
			<para> Attribute declarations are frequently initialized with a
   number of arguments that are passed into the constructor of the attribute at run
   time. To provide arguments to the constructor for an attribute, add a <see cref="System.CodeDom.CodeAttributeArgument"/> for each argument to the <see cref="System.CodeDom.CodeAttributeDeclaration.Arguments"/> collection of a <see cref="System.CodeDom.CodeAttributeDeclaration"/>. Only the <see cref="System.CodeDom.CodeAttributeArgument.Value"/> property
   of each <see cref="System.CodeDom.CodeAttributeArgument"/> needs to be initialized. The order of
   arguments within the collection must correspond to the order of arguments
   in the method signature of the constructor for the attribute.</para>
			<para> You can also
   set properties of the attribute that are not available through the
   constructor by providing a <see cref="System.CodeDom.CodeAttributeArgument"/> that indicates the
   name of the property to set, along with the value to set.</para>
		</remarks>
		<example>
			<para>The following code creates a <see cref="System.CodeDom.CodeAttributeArgument"/> that declares an attribute named
<paramref name="current_page"/> with a value of 0:</para>
			<code lang="C#">CodeTypeDeclaration class1 = new CodeTypeDeclaration("MyClass");

class1.CustomAttributes.Add( new CodeAttributeDeclaration("System.Obsolete", new CodeAttributeArgument( new CodePrimitiveExpression("This class is obsolete.") )) );

// A C# code generator produces the following source code for the preceeding example code:

// [Obsolete("This class is obsolete.")]
// public class class1 {
// }
</code>
			<code lang="VB">Dim class1 As New CodeTypeDeclaration("MyClass")

class1.CustomAttributes.Add( Dim New CodeAttributeDeclaration("System.Obsolete", new CodeAttributeArgument( Dim New CodePrimitiveExpression("This class is obsolete.") )) )

' A Visual Basic code generator produces the following source code for the preceeding example code:

' &lt;Obselete("This class is obsolete.")&gt; _
' Public Class class1
' End Class
</code>
		</example>
		<seealso cref="System.CodeDom.CodeAttributeDeclaration"/>
		<seealso cref="System.CodeDom.CodeAttributeArgumentCollection"/>
	</doc>
</docs>
