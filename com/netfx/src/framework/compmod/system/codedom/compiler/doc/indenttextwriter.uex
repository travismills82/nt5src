<docs>
	<doc for="IndentedTextWriter.IndentedTextWriter">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.IndentedTextWriter"/> class using the specified
    text writer and default tab string.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.IndentedTextWriter"/> class using the specified
    text writer and default tab string.</para>
		</summary>
		<param name="writer">The <see cref="System.IO.TextWriter"/> to use for output.</param>
		<seealso cref="System.IO.TextWriter"/>
	</doc>
	<doc for="IndentedTextWriter.IndentedTextWriter1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.IndentedTextWriter"/> class using the specified
    text writer and tab string.</para>
		</summary>
		<param name="writer">The <see cref="System.IO.TextWriter"/> to use for output.</param>
		<param name=" tabString">The tab string to use for indentation.</param>
		<seealso cref="System.IO.TextWriter"/>
	</doc>
	<doc for="IndentedTextWriter.NewLine">
		<summary>
			<para>Gets or sets the new line character to use.</para>
		</summary>
		<value>
			<para>The new line character to use.</para>
		</value>
	</doc>
	<doc for="IndentedTextWriter.Indent">
		<summary>
			<para>Gets or sets the number of spaces to indent.</para>
		</summary>
		<value>
			<para>The number of spaces to indent.</para>
		</value>
	</doc>
	<doc for="IndentedTextWriter.Close">
		<summary>
			<para>
       Closes the document being written to.
    </para>
		</summary>
	</doc>
	<doc for="IndentedTextWriter.Flush">
		<summary>
			<para>Flushes the stream.</para>
		</summary>
		<remarks>
			<para>This clears the stream of any data.</para>
		</remarks>
	</doc>
	<doc for="IndentedTextWriter.Write">
		<overload>
			<para>Writes the specified string to the text stream.</para>
		</overload>
		<summary>
			<para>Writes the specified string
       to the text stream.</para>
		</summary>
		<param name="s">The string to write.</param>
	</doc>
	<doc for="IndentedTextWriter.Write2">
		<summary>
			<para>
       Writes a character to the text stream.
    </para>
		</summary>
		<param name="value">
    The character to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.Write3">
		<summary>
			<para>
       Writes a
       character array to the text stream.
    </para>
		</summary>
		<param name="buffer">
    The character array to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.Write4">
		<summary>
			<para>
       Writes a subarray
       of characters to the text stream.
    </para>
		</summary>
		<param name="buffer">
    The character array to write data from.
 </param>
		<param name=" index">
    Starting index in the buffer.
 </param>
		<param name=" count">
    The number of characters to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.Write7">
		<summary>
			<para>
       Writes the text representation of an integer to the text stream.
    </para>
		</summary>
		<param name="value">
    The integer to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.Write8">
		<summary>
			<para>
       Writes the text representation of an 8-byte integer to the text stream.
    </para>
		</summary>
		<param name="value">
    The 8-byte integer to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.Write9">
		<summary>
			<para>
       Writes the text representation of an object
       to the text stream.
    </para>
		</summary>
		<param name="value">
    The object to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.Write10">
		<summary>
			<para>Writes out a formatted string, using the same semantics as specified.</para>
		</summary>
		<param name="format">The formatting string.</param>
		<param name=" arg0">The object to write into the formatted string.</param>
	</doc>
	<doc for="IndentedTextWriter.Write11">
		<summary>
			<para>Writes out a formatted string,
       using the same semantics as specified.</para>
		</summary>
		<param name="format">The formatting string to use.</param>
		<param name=" arg0">The first object to write into the formatted string. </param>
		<param name=" arg1">The second object to write into the formatted string.</param>
	</doc>
	<doc for="IndentedTextWriter.Write12">
		<summary>
			<para>Writes out a formatted string,
       using the same semantics as specified.</para>
		</summary>
		<param name="format">The formatting string to use.</param>
		<param name=" arg">The argument array to output.</param>
	</doc>
	<doc for="IndentedTextWriter.WriteLineNoTabs">
		<summary>
			<para>
       Writes the specified
       string to a line without tabs.
    </para>
		</summary>
		<param name="s">
    The string to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.WriteLine1">
		<summary>
			<para>
       Writes a line terminator.
    </para>
		</summary>
	</doc>
	<doc for="IndentedTextWriter.WriteLine2">
		<summary>
			<para>
       Writes the text representation of a Boolean, followed by a line terminator, to
       the text stream.
    </para>
		</summary>
		<param name="value">
    The Boolean to write.
 </param>
	</doc>
	<doc for="IndentedTextWriter.WriteLine3">
		<summary>
			<para> Writes a character, followed by a line terminator, to the 
       text stream.</para>
		</summary>
		<param name="value">The character to write.</param>
	</doc>
	<doc for="IndentedTextWriter.WriteLine4">
		<summary>
			<para>Writes a character array, followed by a line terminator, to 
       the text stream.</para>
		</summary>
		<param name="buffer">The character array to write.</param>
	</doc>
	<doc for="IndentedTextWriter.Write1">
		<summary>
			<para> Writes the text representation of a Boolean value to the text stream.
      </para>
		</summary>
		<param name="value">The Boolean value to write. </param>
	</doc><doc for="IndentedTextWriter.Write5">
		<summary>
			<para> Writes the text representation of a Double to the text stream.
      </para>
		</summary>
		<param name="value">The <see langword="double"/> to write. </param>
	</doc><doc for="IndentedTextWriter.Write6">
		<summary>
			<para> Writes the text representation of
      a Single to the text
      stream.
      </para>
		</summary>
		<param name="value">The <see langword="single"/> to write. </param>
	</doc><doc for="IndentedTextWriter.WriteLine">
		<overload>
			<para> Writes the specified string, followed by a line terminator,
      to the text stream.
      </para>
		</overload>
		<summary>
			<para> Writes the specified string, followed by
      a line terminator, to the text stream.
      </para>
		</summary>
		<param name="s">The string to write. </param>
	</doc><doc for="IndentedTextWriter.WriteLine6">
		<summary>
			<para>Writes the text representation of a Double, followed by a line terminator, to the text stream.</para>
		</summary>
		<param name="value">The <see langword="double"/> to write.</param>
	</doc><doc for="IndentedTextWriter.WriteLine5">
		<summary>
			<para>Writes a subarray of characters, followed by a line
      terminator, to the text stream.</para>
		</summary>
		<param name="buffer">The character array to write data from.</param>
		<param name=" index">Starting index in the buffer.</param>
		<param name=" count">The number of characters to write.</param>
	</doc><doc for="IndentedTextWriter.WriteLine7">
		<summary>
			<para>Writes the text representation of a Single, followed by a
      line terminator, to the text stream.</para>
		</summary>
		<param name="value">The <see langword="single"/> to write.</param>
	</doc><doc for="IndentedTextWriter.WriteLine8">
		<summary>
			<para>Writes the text representation of an integer, followed by
      a line terminator, to the text stream.</para>
		</summary>
		<param name="value">The integer to write.</param>
	</doc><doc for="IndentedTextWriter.WriteLine9">
		<summary>
			<para> Writes the text representation of an 8-byte
      integer, followed by a line terminator, to the text stream.</para>
		</summary>
		<param name="value">The 8-byte integer to write.</param>
	</doc><doc for="IndentedTextWriter.WriteLine10">
		<summary>
			<para>Writes the text representation of an object, followed by a
      line terminator, to the text stream.</para>
		</summary>
		<param name="value">The object to write.</param>
	</doc><doc for="IndentedTextWriter.WriteLine11">
		<summary>
			<para>Writes out a formatted string, followed by a line
      terminator, using the same semantics as specified.</para>
		</summary>
		<param name="format">The formatting string.</param>
		<param name=" arg0">The object to write into the formatted string.</param>
	</doc><doc for="IndentedTextWriter.WriteLine12">
		<summary>
			<para>Writes out a formatted string, followed by a line
      terminator, using the same semantics as specified.</para>
		</summary>
		<param name="format">The formatting string to use.</param>
		<param name=" arg0">The first object to write into the formatted string.</param>
		<param name=" arg1">The second object to write into the formatted string.</param>
	</doc><doc for="IndentedTextWriter.WriteLine13">
		<summary>
			<para>Writes out a formatted string, followed by a line
      terminator, using the same semantics as specified.</para>
		</summary>
		<param name="format">The formatting string to use.</param>
		<param name=" arg">The argument array to output.</param>
	</doc><doc for="IndentedTextWriter.WriteLine14">
		<summary>
			<para>Writes the text representation of a UInt32, followed by a line terminator, to the text stream.</para>
		</summary>
		<param name="value">A UInt32 to output.</param>
	</doc><doc for="IndentedTextWriter">
		<summary>
			<para>Provides a text writer that can indent new lines by a tab string token.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.Compiler.IndentedTextWriter"/> extends a <see cref="System.IO.TextWriter"/> 
by providing methods that insert a tab string and track
the current indentation level. Text formatted with multiple indentation levels
is useful for generated code, so this class is used by CodeDOM code
generator implementations.</para>
			<para>The tab string is the string that each indentation consists of. Typically the tab string contains white space.</para>
		</remarks>
	</doc>
	<doc for="IndentedTextWriter.DefaultTabString">
		<summary>
			<para>Gets or sets the default tab string.</para>
		</summary>
		<remarks>
			<para>The default tab string consists of a single white space. (" ")</para>
		</remarks>
	</doc>
	<doc for="IndentedTextWriter.Encoding">
		<summary>
			<para> Gets the encoding for the text writer to use.</para>
		</summary>
		<value>
			<para>An <see cref="System.Text.Encoding"/> that indicates the encoding for the text writer to use.</para>
		</value>
	</doc>
	<doc for="IndentedTextWriter.InnerWriter">
		<summary>
			<para> Gets the <see cref="System.IO.TextWriter"/> to use.</para>
		</summary>
		<value>
			<para>The <see cref="System.IO.TextWriter"/> to use.</para>
		</value>
	</doc>
	<doc for="IndentedTextWriter.OutputTabs">
		<summary>
			<para>Outputs the tab string once for each level of indentation 
      according to the <see cref="System.CodeDom.Compiler.IndentedTextWriter.Indent"/> property.</para>
		</summary>
	</doc>
</docs>
