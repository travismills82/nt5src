<docs>
	<doc for="CodeGenerator.Indent">
		<summary>
			<para>Gets or sets the amount of spaces to indent each indentation level.</para>
		</summary>
		<value>
			<para>The number of spaces to indent for each indentation level.</para>
		</value>
		<remarks>
			<para>Segments of code are commonly indented for ease of recognition.</para>
		</remarks>
	</doc>
	<doc for="CodeGenerator.NullToken">
		<summary>
			<para>
       Gets the token that represents <see langword="null"/>.
    </para>
		</summary>
		<returns>
			<para>
       The token that represents <see langword="null"/>.
    </para>
		</returns>
	</doc>
	<doc for="CodeGenerator.GenerateTypes">
		<summary>
			<para> Generates code for the specified namespace and the classes it
       contains.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate classes for.</param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="CodeGenerator.GenerateCompileUnit">
		<summary>
			<para> Generates code for the
       specified compile unit.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
		<seealso cref="System.CodeDom.CodeCompileUnit"/>
	</doc>
	<doc for="CodeGenerator.GenerateNamespace">
		<summary>
			<para> Generates code for the
       specified namespace.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="CodeGenerator.GenerateNamespaceImports">
		<summary>
			<para> Generates code for the specified namespace
       import.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace import to generate code for.</param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="CodeGenerator.GenerateStatement">
		<summary>
			<para> 
       Generates code for the specified statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateStatements">
		<summary>
			<para> Generates code for the specified statement collection.</para>
		</summary>
		<param name="stms">A <see cref="System.CodeDom.CodeStatementCollection"/> that indicates the statements to generate code for.</param>
		<seealso cref="System.CodeDom.CodeStatementCollection"/>
	</doc>
	<doc for="CodeGenerator.OutputAttributeDeclarations">
		<summary>
			<para>Generates code for the specified attribute declaration collection.</para>
		</summary>
		<param name="attributes">A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> that indicates the attributes to generate code for.</param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="CodeGenerator.OutputType">
		<summary>
			<para>
       Generates code for the specified type.
    </para>
		</summary>
		<param name="typeRef">
    The type to generate code for.
 </param>
	</doc>
	<doc for="CodeGenerator.OutputTypeNamePair">
		<summary>
			<para>
       Generates code for the specified object type and name pair.
    </para>
		</summary>
		<param name="typeRef">
    The type.
 </param>
		<param name=" name">
    The name for the object.
 </param>
	</doc>
	<doc for="CodeGenerator.OutputIdentifier">
		<summary>
			<para>Outputs the specified identifier.</para>
		</summary>
		<param name="ident">The identifier to output.</param>
	</doc>
	<doc for="CodeGenerator.OutputExpressionList">
		<overload>
			<para>Generates code for the specified expression list.</para>
		</overload>
		<summary>
			<para>Generates code for the specified expression list.</para>
		</summary>
		<param name="expressions">A <see cref="System.CodeDom.CodeExpressionCollection"/> that indicates the expressions to generate code for.</param>
		<seealso cref="System.CodeDom.CodeExpressionCollection"/>
	</doc>
	<doc for="CodeGenerator.OutputOperator">
		<summary>
			<para>
       Generates code for the specified operator.
    </para>
		</summary>
		<param name="op">
    A <see cref="System.CodeDom.CodeBinaryOperatorType"/> that indicates the operator to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeBinaryOperatorType"/>
	</doc>
	<doc for="CodeGenerator.OutputParameters">
		<summary>
			<para>
       Generates code for the specified parameters.
    </para>
		</summary>
		<param name="parameters">
    A <see cref="System.CodeDom.CodeParameterDeclarationExpressionCollection"/> that indicates the parameter declaration expressions to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeParameterDeclarationExpressionCollection"/>
	</doc>
	<doc for="CodeGenerator.GenerateArrayCreateExpression">
		<summary>
			<para> Generates code for the specified array creation
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeArrayCreateExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeArrayCreateExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateBaseReferenceExpression">
		<summary>
			<para> Generates code for the specified base reference
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeBaseReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeBaseReferenceExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateBinaryOperatorExpression">
		<summary>
			<para> Generates code for the specified binary
       operator expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeBinaryOperatorExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeBinaryOperatorExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateCastExpression">
		<summary>
			<para> Generates code for the specified cast
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCastExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeCastExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateDelegateCreateExpression">
		<summary>
			<para> Generates code for the specified delegate creation
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeDelegateCreateExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeDelegateCreateExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateFieldReferenceExpression">
		<summary>
			<para> Generates code for the specified field
       reference expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeFieldReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeFieldReferenceExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateIndexerExpression">
		<summary>
			<para> Generates code for the specified indexer
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeIndexerExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeIndexerExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateMethodInvokeExpression">
		<summary>
			<para> Generates code for the specified method invoke
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMethodInvokeExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeMethodInvokeExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateDelegateInvokeExpression">
		<summary>
			<para> Generates code for the specified delegate invoke
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeDelegateInvokeExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeDelegateInvokeExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateObjectCreateExpression">
		<summary>
			<para> Generates code for
       the specified object creation expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeObjectCreateExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeObjectCreateExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateParameterDeclarationExpression">
		<summary>
			<para> Generates code for
       the specified parameter declaration expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeParameterDeclarationExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeParameterDeclarationExpression"/>
	</doc>
	<doc for="CodeGenerator.GeneratePrimitiveExpression">
		<summary>
			<para> Generates code for the specified primitive
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodePrimitiveExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodePrimitiveExpression"/>
	</doc>
	<doc for="CodeGenerator.GeneratePropertyReferenceExpression">
		<summary>
			<para> Generates code for the specified property
       reference expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodePropertyReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodePropertyReferenceExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateThisReferenceExpression">
		<summary>
			<para> Generates code for the specified this reference
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeThisReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeThisReferenceExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateTypeReferenceExpression">
		<summary>
			<para> Generates code for the specified type reference
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeTypeReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeTypeReferenceExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateTypeOfExpression">
		<summary>
			<para> Generates code for the specified type of
       expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeTypeOfExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeTypeOfExpression"/>
	</doc>
	<doc for="CodeGenerator.GenerateThrowExceptionStatement">
		<summary>
			<para> Generates code for the specified throw exception
       statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeThrowExceptionStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeThrowExceptionStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateCommentStatement">
		<summary>
			<para> Generates code for the specified comment
       statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCommentStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeCommentStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateMethodReturnStatement">
		<summary>
			<para> Generates code for the specified method return
       statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMethodReturnStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeMethodReturnStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateAssignStatement">
		<summary>
			<para> Generates code for the specified assignment
       statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeAssignStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeAssignStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateAttachEventStatement">
		<summary>
			<para> Generates code for the specified attach event
       statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeAttachEventStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeAttachEventStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateVariableDeclarationStatement">
		<summary>
			<para> Generates code for the specified variable declaration
       statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeVariableDeclarationStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeVariableDeclarationStatement"/>
	</doc>
	<doc for="CodeGenerator.GenerateLinePragmaStart">
		<summary>
			<para> Generates code for the specified line pragma
       start.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeLinePragma"/> that indicates the start of the line pragma to generate code for.</param>
		<seealso cref="System.CodeDom.CodeLinePragma"/>
	</doc>
	<doc for="CodeGenerator.GenerateLinePragmaEnd">
		<summary>
			<para> Generates code for the specified line pragma
       end.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeLinePragma"/> that indicates the end of the line pragma to generate code for.</param>
		<seealso cref="System.CodeDom.CodeLinePragma"/>
	</doc>
	<doc for="CodeGenerator.GenerateField">
		<summary>
			<para> Generates code for the specified member
       field.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMemberField"/> that indicates the field to generate code for.</param>
		<seealso cref="System.CodeDom.CodeMemberField"/>
	</doc>
	<doc for="CodeGenerator.GenerateTypeConstructor">
		<summary>
			<para> Generates code for the specified class
       constructor.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeTypeConstructor"/> that indicates the class constructor to generate code for.</param>
		<seealso cref="System.CodeDom.CodeTypeConstructor"/>
	</doc>
	<doc for="CodeGenerator.GenerateTypeStart">
		<summary>
			<para> Generates code for the specified start class.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the start of the class to generate code for.</param>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc>
	<doc for="CodeGenerator.GenerateTypeEnd">
		<summary>
			<para> Generates code for the specified end class.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the end of the class to generate code for.</param>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc>
	<doc for="CodeGenerator.GenerateNamespaceImport">
		<summary>
			<para> Generates code for the specified namespace
       import.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespaceImport"/> that indicates the namespace import to generate code for.</param>
		<seealso cref="System.CodeDom.CodeNamespaceImport"/>
	</doc>
	<doc for="CodeGenerator.GenerateAttributeDeclarationsStart">
		<summary>
			<para> Generates code for the specified attribute block
       start.</para>
		</summary>
		<param name="attributes">A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> that indicates the start of the attribute block to generate code for.</param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="CodeGenerator.GenerateAttributeDeclarationsEnd">
		<summary>
			<para> Generates code for the specified attribute block
       end.</para>
		</summary>
		<param name="attributes">A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> that indicates the end of the attribute block to generate code for.</param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="CodeGenerator.GenerateExpression">
		<summary>
			<para> Generates code for the specified code expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeExpression"/> that indicates the code expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeExpression"/>
	</doc><doc for="CodeGenerator.OutputAttributeArgument">
		<summary>
			<para>Outputs an argument in an attribute block.</para>
		</summary>
		<param name="arg">A <see cref="System.CodeDom.CodeAttributeArgument"/> that indicates the attribute argument to generate code for.</param>
		<seealso cref="System.CodeDom.CodeAttributeArgument"/>
	</doc><doc for="CodeGenerator.GenerateDecimalValue">
		<summary>
			<para>Generates code for the specified decimal value.</para>
		</summary>
		<param name="d">The decimal value to generate code for.</param>
	</doc><doc for="CodeGenerator.GenerateExpressionStatement">
		<summary>
			<para> Generates code for the
      specified expression statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeExpressionStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeExpressionStatement"/>
	</doc><doc for="CodeGenerator.GenerateRemoveEventStatement">
		<summary>
			<para> Generates code for the specified remove event
      statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeRemoveEventStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeRemoveEventStatement"/>
	</doc><doc for="CodeGenerator.GenerateNamespaces">
		<summary>
			<para> Generates code for the namespaces in the specified compile unit.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate namespaces for.</param>
		<seealso cref="System.CodeDom.CodeCompileUnit"/>
	</doc><doc for="CodeGenerator.OutputDirection">
		<summary>
			<para> Generates code for the specified <see cref="System.CodeDom.FieldDirection"/>.
   </para>
		</summary>
		<param name="dir">A <see cref="System.CodeDom.FieldDirection"/> enumeration value indicating the attribute of the field. </param>
		<seealso cref="System.CodeDom.FieldDirection"/>
	</doc><doc for="CodeGenerator.OutputFieldScopeModifier">
		<summary>
			<para>Outputs a field scope modifier that corresponds to the specified
      attributes.</para>
		</summary>
		<param name="attributes">A <see cref="System.CodeDom.MemberAttributes"/> enumeration value indicating the attributes.</param>
		<seealso cref="System.CodeDom.MemberAttributes"/>
	</doc><doc for="CodeGenerator.OutputMemberAccessModifier">
		<summary>
			<para> Generates code for the specified member access modifier.
      </para>
		</summary>
		<param name="attributes">A <see cref="System.CodeDom.MemberAttributes"/> enumeration value indicating the member access modifier to generate code for. </param>
		<seealso cref="System.CodeDom.MemberAttributes"/>
	</doc><doc for="CodeGenerator.OutputMemberScopeModifier">
		<summary>
			<para> Generates code for the specified member scope modifier.
      </para>
		</summary>
		<param name="attributes">A <see cref="System.CodeDom.MemberAttributes"/> enumeration value indicating the member scope modifier to generate code for. </param>
		<seealso cref="System.CodeDom.MemberAttributes"/>
	</doc><doc for="CodeGenerator.OutputTypeAttributes">
		<summary>
			<para> Generates code for the specified type attributes.
      </para>
		</summary>
		<param name="attributes">A <see cref="System.Reflection.TypeAttributes"/> enumeration value indicating the type attributes to generate code for. </param>
		<param name=" isStruct"><see langword="true"/> if the type is a struct; otherwise, <see langword="false"/>.</param>
		<param name=" isEnum"><see langword="true"/> if the type is an enum; otherwise, <see langword="false"/>.</param>
		<seealso cref="System.Reflection.TypeAttributes"/>
	</doc><doc for="CodeGenerator.OutputExpressionList1">
		<summary>
			<para>Generates code for the specified expression list.</para>
		</summary>
		<param name="expressions">A <see cref="System.CodeDom.CodeExpressionCollection"/> that indicates the expressions to generate code for.</param>
		<param name=" newlineBetweenItems"><see langword="true"/> to insert a new line after each item; otherwise, <see langword="false"/>.</param>
		<seealso cref="System.CodeDom.CodeExpressionCollection"/>
	</doc><doc for="CodeGenerator.ContinueOnNewLine">
		<summary>
			<para> Generates a line-continuation character and outputs the specified string on a new line.</para>
		</summary>
		<param name="st">The string to write on the new line.</param>
		<remarks>
			<note type="inotes">
      When
      implementing
      a code generator
      for a
      language that supports
      a line-continuation character (for example, Visual Basic), this method should output the
      line-continuation character before it outputs a newline character.
      
   </note>
		</remarks>
	</doc><doc for="CodeGenerator.GenerateArgumentReferenceExpression">
		<summary>
			<para> Generates code for the specified argument reference
      expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeArgumentReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeArgumentReferenceExpression"/>
	</doc><doc for="CodeGenerator.GenerateVariableReferenceExpression">
		<summary>
			<para> Generates code for the specified variable reference
      expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeVariableReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeVariableReferenceExpression"/>
	</doc><doc for="CodeGenerator.GenerateArrayIndexerExpression">
		<summary>
			<para> Generates code for the specified array indexer
      expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeArrayIndexerExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeArrayIndexerExpression"/>
	</doc><doc for="CodeGenerator.GenerateMethodReferenceExpression">
		<summary>
			<para> Generates code for the specified method reference
      expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMethodReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeMethodReferenceExpression"/>
	</doc><doc for="CodeGenerator.GenerateEventReferenceExpression">
		<summary>
			<para> Generates code for the specified event reference
      expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeEventReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeEventReferenceExpression"/>
	</doc><doc for="CodeGenerator.GenerateDirectionExpression">
		<summary>
			<para> Generates code for the specified direction
      expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeDirectionExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeDirectionExpression"/>
	</doc><doc for="CodeGenerator.GeneratePropertySetValueReferenceExpression">
		<summary>
			<para> Generates code for the specified property set value
      reference expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodePropertySetValueReferenceExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodePropertySetValueReferenceExpression"/>
	</doc><doc for="CodeGenerator.GenerateIterationStatement">
		<summary>
			<para> Generates code for the specified iteration
      statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeIterationStatement"/> that indicates the statement to generate code for.</param>
		<remarks>
			<para>For most languages, this method will generate code for a <see langword="for"/> loop or a <see langword="while"/> loop.</para>
		</remarks>
		<seealso cref="System.CodeDom.CodeIterationStatement"/>
	</doc><doc for="CodeGenerator.GenerateCommentStatements">
		<summary>
			<para> Generates code for the specified comment
      statements.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCommentStatementCollection"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeCommentStatementCollection"/>
	</doc><doc for="CodeGenerator.GenerateComment">
		<summary>
			<para> Generates code for the specified comment.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeComment"/> to generate code for.</param>
		<seealso cref="System.CodeDom.CodeComment"/>
	</doc><doc for="CodeGenerator.GenerateConditionStatement">
		<summary>
			<para> Generates code for the specified conditional
      statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeConditionStatement"/> that indicates the statement to generate code for.</param>
		<remarks>
			<para>For most languages, this method will generate code for an <see langword="if"/> statement.</para>
		</remarks>
		<seealso cref="System.CodeDom.CodeConditionStatement"/>
	</doc><doc for="CodeGenerator.GenerateTryCatchFinallyStatement">
		<summary>
			<para> Generates code for the specified
   <see langword="try...catch...finally"/>
   statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeTryCatchFinallyStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeTryCatchFinallyStatement"/>
	</doc><doc for="CodeGenerator.GenerateGotoStatement">
		<summary>
			<para> Generates code for the specified <see langword="goto"/>
statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeGotoStatement"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeGotoStatement"/>
	</doc><doc for="CodeGenerator.GenerateEvent">
		<summary>
			<para> Generates code for the specified
      event.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMemberEvent"/> that indicates the member event to generate code for.</param>
		<param name=" c">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the type of the object that this event occurs on.</param>
		<seealso cref="System.CodeDom.CodeMemberEvent"/>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc><doc for="CodeGenerator.GenerateEntryPointMethod">
		<summary>
			<para> Generates code for the specified entry point
      method.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeEntryPointMethod"/> that indicates the entry point for the code.</param>
		<param name=" c">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the code that declares the type.</param>
		<seealso cref="System.CodeDom.CodeEntryPointMethod"/>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc><doc for="CodeGenerator.GenerateMethod">
		<summary>
			<para> Generates code for the specified
      method.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMemberMethod"/> that indicates the member method to generate code for.</param>
		<param name=" c">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the type of the object that this method occurs on.</param>
		<seealso cref="System.CodeDom.CodeMemberMethod"/>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc><doc for="CodeGenerator.GenerateProperty">
		<summary>
			<para> Generates code for the specified
      property.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeMemberProperty"/> that indicates the property to generate code for.</param>
		<param name=" c">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the type of the object that this property occurs on.</param>
		<seealso cref="System.CodeDom.CodeMemberProperty"/>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc><doc for="CodeGenerator.GenerateConstructor">
		<summary>
			<para> Generates code for the specified
      constructor.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeConstructor"/> that indicates the constructor to generate code for.</param>
		<param name=" c">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the type of the object that this constructor constructs.</param>
		<seealso cref="System.CodeDom.CodeConstructor"/>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc><doc for="CodeGenerator.GenerateCompileUnitStart">
		<summary>
			<para> Generates code for the start of a compile
      unit.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
		<seealso cref="System.CodeDom.CodeCompileUnit"/>
	</doc><doc for="CodeGenerator.GenerateCompileUnitEnd">
		<summary>
			<para> Generates code for the end of a compile
      unit.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeCompileUnit"/> that indicates the compile unit to generate code for.</param>
		<seealso cref="System.CodeDom.CodeCompileUnit"/>
	</doc><doc for="CodeGenerator.GenerateNamespaceStart">
		<summary>
			<para> Generates code for the start of a
      namespace.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc><doc for="CodeGenerator.GenerateNamespaceEnd">
		<summary>
			<para> Generates code for the end of a
      namespace.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for.</param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc><doc for="CodeGenerator.Supports">
		<summary>
			<para>Gets a value indicating whether the specified code generation support is provided.</para>
		</summary>
		<param name="support">A <see cref="System.CodeDom.Compiler.GeneratorSupport"/> that indicates the type of code generation support to test for.</param>
		<returns>
			<para><see langword="true"/> if the specified code generation support is provided;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.CodeDom.Compiler.GeneratorSupport"/>
	</doc><doc for="CodeGenerator.GetTypeOutput">
		<summary>
			<para> Gets the name of the
      specified data type.</para>
		</summary>
		<param name="value">A <see cref="System.CodeDom.CodeTypeReference"/> of the type to return the name of.</param>
		<returns>
			<para>The name of the data type reference.</para>
		</returns>
		<seealso cref="System.CodeDom.CodeTypeReference"/>
	</doc><doc for="CodeGenerator.QuoteSnippetString">
		<summary>
			<para> Converts the specified string by formatting it with escape codes.
      </para>
		</summary>
		<param name="value">The string to convert. </param>
		<returns>
			<para> The converted string.
      </para>
		</returns>
		<remarks>
			<para>This method returns a modified version of the specified 
      string that has been formatted with escape code characters. For
      example, <c>/"</c> might be
   used to represent <c>"</c>
. These escape codes are used to
replace elements of the specified string that might otherwise conflict with
language syntax.</para>
		</remarks>
	</doc><doc for="CodeGenerator.GenerateDoubleValue">
		<summary>
			<para>Generates code for a double-precision floating point number.</para>
		</summary>
		<param name="d">The <see cref="System.Double"/> value to generate code for.</param>
	</doc><doc for="CodeGenerator.GenerateSingleFloatValue">
		<summary>
			<para>Generates code for a single-precision floating point number.</para>
		</summary>
		<param name="s">The <see cref="System.Single"/> value to generate code for.</param>
	</doc><doc for="CodeGenerator.GenerateSnippetCompileUnit">
		<summary>
			<para> Outputs the code of the specified literal code fragment compile unit.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeSnippetCompileUnit"/> that indicates the literal code fragment compile unit to generate code for.</param>
		<seealso cref="System.CodeDom.CodeSnippetCompileUnit"/>
	</doc><doc for="CodeGenerator.GenerateSnippetExpression">
		<summary>
			<para> Outputs the code of the specified literal code
      fragment expression.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeSnippetExpression"/> that indicates the expression to generate code for.</param>
		<seealso cref="System.CodeDom.CodeSnippetExpression"/>
	</doc><doc for="CodeGenerator.GenerateSnippetStatement">
		<summary>
			<para> Outputs the code of the specified literal code fragment
      statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeSnippetStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeSnippetStatement"/>
	</doc><doc for="CodeGenerator.GenerateSnippetMember">
		<summary>
			<para> Outputs the code of the specified literal code fragment class
      member.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeSnippetTypeMember"/> that indicates the member to generate code for.</param>
		<seealso cref="System.CodeDom.CodeSnippetTypeMember"/>
	</doc><doc for="CodeGenerator.GenerateLabeledStatement">
		<summary>
			<para> Generates code for the specified labeled
 statement.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeLabeledStatement"/> that indicates the statement to generate code for.</param>
		<seealso cref="System.CodeDom.CodeLabeledStatement"/>
	</doc><doc for="CodeGenerator.IsValidIdentifier">
		<summary>
			<para> Gets a value indicating whether the specified value is a valid identifier.</para>
		</summary>
		<param name="value"> The value to test for conflicts with valid identifiers.</param>
		<returns>
			<para><see langword="true"/> if the value is a valid identifer; otherwise,
<see langword="false"/>.</para>
		</returns>
	</doc><doc for="CodeGenerator.ICodeGenerator.Supports">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.GenerateCodeFromType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.GenerateCodeFromExpression">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.GenerateCodeFromCompileUnit">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.GenerateCodeFromNamespace">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.GenerateCodeFromStatement">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.IsValidIdentifier">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.ValidateIdentifier">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.CreateEscapedIdentifier">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.CreateValidIdentifier">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.ICodeGenerator.GetTypeOutput">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CodeGenerator.CreateValidIdentifier">
		<summary>
			<para>Creates a valid identifier for the specified value.</para>
		</summary>
		<param name="value">A string to create a valid identifier for.</param>
		<returns>
			<para>A valid identifier for the value.</para>
		</returns>
		<remarks>
			<para><see cref="System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier"/> tests whether the
   identifer conflicts with reserved or language keywords, and returns a valid
   identifier name that does not conflict. Ususally the returned
   identifier will remain basically the same but will be slightly modified
   to differentiate the identifier from the keyword.</para>
			<note type="note">
   The default implementation of this method
   does not alter any identifier
   that does not match
   a list of reserved or language keywords.
</note>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier"/>
	</doc>
	<doc for="CodeGenerator.CurrentTypeName">
		<summary>
			<para> Gets the current class name.
      </para>
		</summary>
		<value>
			<para> The current class name.
      </para>
		</value>
	</doc>
	<doc for="CodeGenerator.CurrentMember">
		<summary>
			<para> Gets the current member of the class.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.CodeDom.CodeTypeMember"/> that indicates the current member of the
   class.
   </para>
		</value>
		<seealso cref="System.CodeDom.CodeTypeMember"/>
	</doc>
	<doc for="CodeGenerator.CurrentMemberName">
		<summary>
			<para> Gets the current member name.</para>
		</summary>
		<value>
			<para> The name of the current member.</para>
		</value>
		<seealso cref="System.CodeDom.Compiler.CodeGenerator.CurrentMemberName"/>
	</doc>
	<doc for="CodeGenerator.IsCurrentInterface">
		<summary>
			<para> Gets a value indicating whether the current object being
      generated is an interface.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the current object is an interface;
   otherwise, <see langword="false"/>.
   </para>
		</value>
	</doc>
	<doc for="CodeGenerator.IsCurrentClass">
		<summary>
			<para> Gets a value indicating whether the current object being generated
      is a class.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the current object is a class; otherwise,
<see langword="false"/>.
   </para>
		</value>
	</doc>
	<doc for="CodeGenerator.IsCurrentStruct">
		<summary>
			<para> Gets a value indicating whether the current object being generated is a value
      type or struct.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the 
   current object is a value type or struct;
   otherwise, <see langword="false"/>.
   </para>
		</value>
	</doc>
	<doc for="CodeGenerator.IsCurrentEnum">
		<summary>
			<para> Gets a value indicating whether the current object being generated
      is an enumeration.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the current object is an enumeration;
   otherwise, <see langword="false"/>.
   </para>
		</value>
	</doc>
	<doc for="CodeGenerator.IsCurrentDelegate">
		<summary>
			<para> Gets a value indicating whether the current object being generated
      is a delegate.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the current object is a delegate;
   otherwise, <see langword="false"/>.
   </para>
		</value>
	</doc>
	<doc for="CodeGenerator.Output">
		<summary>
			<para> Gets the <see cref="System.IO.TextWriter"/>
to use for output.</para>
		</summary>
		<value>
			<para> The <see cref="System.IO.TextWriter"/>
to use for output.</para>
		</value>
		<seealso cref="System.IO.TextWriter"/>
	</doc>
	<doc for="CodeGenerator.Options">
		<summary>
			<para> Gets the options to be used by the code generator.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.Compiler.CodeGeneratorOptions"/> object that indicates the options for the code
   generator to use.</para>
		</value>
	</doc>
	<doc for="CodeGenerator.CreateEscapedIdentifier">
		<summary>
			<para>Creates an escaped identifier for the specified value.</para>
		</summary>
		<param name="value">The string to create an escaped identifier for.</param>
		<returns>
			<para>The escaped identifier for the value.</para>
		</returns>
		<remarks>
			<para><see cref="System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier"/> tests whether the
   identifer conflicts with reserved or language keywords, and returns an
   equivalent name with language-specific escape code formatting. Ususally the returned identifier will remain basically
   the same but will have
   
   escape code formatting added to differentiate the
   identifier from the keyword. </para>
			<note type="note">
   The default implementation of this method does
   not alter any identifier that does not match a list of reserved or language
   keywords.
</note>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier"/>
	</doc><doc for="CodeGenerator">
		<summary>
			<para>Provides an example implementation of the <see cref="System.CodeDom.Compiler.ICodeGenerator"/> 
interface. This class is abstract.</para>
		</summary>
		<remarks>
			<para>This is a useful base class for code generators to derive from. Code generators
      are capable of rendering source code in a specific language according to the structure of a Code Document Object Model (CodeDOM) graph.
      This class provides many functions and methods to generate specific types of code from a CodeDOM graph.</para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator"/>
		<seealso cref="System.CodeDom.Compiler.CodeCompiler"/>
	</doc>
	<doc for="CodeGenerator.ValidateIdentifier">
		<summary>
			<para>Throws an exception if the specified string is not a valid identifier.</para>
		</summary>
		<param name="value">The identifier to test for validity as an identifier.</param>
		<exception cref="System.ArgumentException">If the specified identifier is invalid or conflicts with reserved or language keywords.</exception>
	</doc>
	<doc for="CodeGenerator.IsValidLanguageIndependentIdentifier">
		<summary>
			<para> Gets a value indicating whether the specified string is
      a valid identifier.
      </para>
		</summary>
		<param name="value">The string to test for validity. </param>
		<returns>
			<para><see langword="true"/> if the
   specified string is a valid identifier; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para> This method checks the specified string to ensure that it does not contain certain characters
      that can be used to escape an identifier
      field. The <see cref="System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers"/> method calls this method
      to perform string validation. Calling the <see cref="System.CodeDom.Compiler.CodeGenerator.CodeGenerator.ValidateIdentifiers"/> method and passing a <see cref="System.CodeDom.CodeCompileUnit"/>
      before generating code from it can prevent the use of certain character sequences
      to include hidden code within an identifier field. </para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers"/>
	</doc>
	<doc for="CodeGenerator.ValidateIdentifiers">
		<summary>
			<para> Attempts to validate each
      identifier field contained in the specified <see cref="System.CodeDom.CodeObject"/> or <see cref="CodeDom"/>
      
      tree.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeObject"/> to test for invalid identifiers.</param>
		<exception cref="System.ArgumentException">The specified <see cref="System.CodeDom.CodeObject"/> contains an invalid identifier.</exception>
		<remarks>
			<para>It is possible for the identifier fields of <see cref="System.CodeDom.CodeObject"/> objects to contain field escape
   characters and hidden code which can allow security violations. This
   method checks the literal fields of each <see cref="System.CodeDom.CodeObject"/> in a <see cref="CodeDom"/> tree for characters
   which could be used to hide code, and throws an exception if an
   identifier field contains an invalid character.</para>
			<para>This method calls the <see cref="System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndepenedentIdentifier"/> method to validate each
identifier in the specified <see cref="System.CodeDom.CodeObject"/> or <see cref="CodeDom"/> tree, and throws an exception if an
identifier is invalid or contains invalid characters. </para>
			<para>Call this method and pass it the <see cref="System.CodeDom.CodeCompileUnit"/> containing the code graph to
generate before generating code to block the use of certain character
sequences that can be used to include hidden code within an identifier
field. This method is not called automatically by any generate code
methods.</para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier"/>
	</doc>
</docs>
