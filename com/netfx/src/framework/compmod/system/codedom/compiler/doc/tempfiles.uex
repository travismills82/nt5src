<docs>
	<doc for="TempFileCollection.CopyTo">
		<summary>
			<para>Copies the members of the collection to the specified string,
      beginning at the specified index.</para>
		</summary>
		<param name="fileNames">The array of strings to copy to.</param>
		<param name=" start">The index of the array to begin copying to.</param>
	</doc>
	<doc for="TempFileCollection.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.ICollection.CopyTo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.ICollection.Count">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.Delete">
		<summary>
			<para> Deletes the temporary files within this collection that were not marked to be kept.</para>
		</summary>
	</doc>
	<doc for="TempFileCollection.TempDir">
		<summary>
			<para> Gets the temporary directory to store the temporary files
      in.</para>
		</summary>
		<value>
			<para> The temporary directory to store the temporary files in.</para>
		</value>
	</doc>
	<doc for="TempFileCollection.AddFile">
		<summary>
			<para> Adds the specified file to the collection, using the
      specified value indicating whether to keep the file after the collection is
      disposed or when the <see cref="System.CodeDom.Compiler.TempFileCollection.Delete"/>
      method is called.</para>
		</summary>
		<param name=" fileName">The name of the file to add to the collection.</param>
		<param name="keepFile"><see langword="true"/> if the file should be kept after use; <see langword="false"/> if the file should be deleted.</param>
	</doc>
	<doc for="TempFileCollection.TempFileCollection">
		<overload>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.TempFileCollection"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.TempFileCollection"/> class with default values.</para>
		</summary>
		<remarks>
			<para> This is a default constructor that initializes the 
      collection with default settings. By default, this temporary files collection
      will store the files in a default temporary directory and will delete the
      temporary
      files after
      they have been generated and used.</para>
		</remarks>
	</doc>
	<doc for="TempFileCollection.TempFileCollection1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.TempFileCollection"/> class using 
   the specified temporary directory that is
   set to delete the temporary files
   after their generation and use, by
   default.</para>
		</summary>
		<param name="tempDir">A path to the temporary directory to use for storing the temporary files.</param>
	</doc>
	<doc for="TempFileCollection.TempFileCollection2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.TempFileCollection"/> class using 
   the specified temporary directory
   and specified value indicating whether to keep or delete the temporary files after
   their generation and use, by default.</para>
		</summary>
		<param name="tempDir">A path to the temporary directory to use for storing the temporary files.</param>
		<param name=" keepFiles"><see langword="true"/> if the temporary files should be kept after use; <see langword="false"/> if the temporary files should be deleted.</param>
	</doc>
	<doc for="TempFileCollection.AddExtension">
		<overload>
			<para> Adds a file name with the specified file name extension to the collection.</para>
		</overload>
		<summary>
			<para>Adds a file name with the specified file name extension to the
      collection.</para>
		</summary>
		<param name="fileExtension">The file name extension for the auto-generated temporary file name to add to the collection.</param>
		<returns>
			<para>A file name with the specified extension that was just added to the
      collection.</para>
		</returns>
		<remarks>
			<para>This method returns a file name with the specified extension that has been added to the
      temporary files collection. Other code must still create the file before it can be used.</para>
			<para>This method can be called only once for each file name extension since it
      will return the same name if called with the same extension.</para>
		</remarks>
	</doc>
	<doc for="TempFileCollection.AddExtension1">
		<summary>
			<para>Adds a file name with the specified file name extension to the collection,
      using the specified value indicating whether the file should be deleted or
      retained.</para>
		</summary>
		<param name="fileExtension">The file name extension for the auto-generated temporary file name to add to the collection.</param>
		<param name=" keepFile"><see langword="true"/> if the file should be kept after use; <see langword="false"/> if the file should be deleted.</param>
		<returns>
			<para> A file name with the specified extension that was just added to the collection.</para>
		</returns>
		<remarks>
			<para>This method returns a file name with the specified extension that has been
      added to the temporary files collection. Other code must still create the
      file before it can be used.</para>
			<para>This method can be called only once for each file name extension since it
      will return the same name if called with the same extension.</para>
		</remarks>
	</doc>
	<doc for="TempFileCollection.GetEnumerator">
		<summary>
			<para>Gets an enumerator that can enumerate the members of the collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> that contains the collection's members.</para>
		</returns>
	</doc>
	<doc for="TempFileCollection.Count">
		<summary>
			<para> Gets the number of files in the collection.</para>
		</summary>
		<value>
			<para>The number of files in the collection.</para>
		</value>
	</doc>
	<doc for="TempFileCollection.KeepFiles">
		<summary>
			<para> Gets or sets a value indicating whether to keep the 
      files, by default, when the <see cref="System.CodeDom.Compiler.TempFileCollection.Delete"/> method is called or the
      collection is disposed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the files should be kept; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="TempFileCollection">
		<summary>
			<para> Represents a collection of temporary files.</para>
		</summary>
		<remarks>
			<para><see cref="System.CodeDom.Compiler.TempFileCollection"/> can be used to
   generate unique file names and to keep track of a list of
   files. This can be useful to <see cref="System.CodeDom.Compiler.ICodeCompiler"/> implementers
   when managing a list of compiler-generated intermediate files,
   which are sometimes deleted after
   use. </para>
			<para>To specify a directory to generate unique temporary file names in, use an appropriately
   overloaded constructor. You can also use a constructor overload
   to indicate whether files added to the collection should, if not specified
   otherwise when using the <see cref="System.CodeDom.Compiler.TempFileCollection.AddFile"/> or <see cref="System.CodeDom.Compiler.TempFileCollection.AddExtension"/> methods, be deleted when the collection
   is disposed or the <see cref="System.CodeDom.Compiler.TempFileCollection.Delete"/> method is called.</para>
			<para>A file in any directory can be added to an instance
   of <see cref="System.CodeDom.Compiler.TempFileCollection"/> using the <see cref="System.CodeDom.Compiler.TempFileCollection.AddFile"/>
   method. </para>
			<para> To generate a unique name for a temporary file of a particular
   file extension, call <see cref="System.CodeDom.Compiler.TempFileCollection.AddExtension"/> and specifiy the extension
   of the file name to generate. The <see cref="System.CodeDom.Compiler.TempFileCollection.AddExtension"/> method will return a string
   consisting of a full path to a file name of the specified
   extension in the directory specified by the <see cref="System.CodeDom.Compiler.TempFileCollection.TempDir"/>
   property. The <see cref="System.CodeDom.Compiler.TempFileCollection.AddExtension"/> method will only return one
   unique file name per file name
   extension.</para>
			<para>Both the <see cref="System.CodeDom.Compiler.TempFileCollection.AddFile"/> and <see cref="System.CodeDom.Compiler.TempFileCollection.AddExtension"/> methods have
overloads that allow you to specify whether the files should be deleted when the
collection is disposed or the <see cref="System.CodeDom.Compiler.TempFileCollection.Delete"/> method is called. </para>
			<para>The <see cref="System.CodeDom.Compiler.TempFileCollection.Delete"/> method will delete
all the files in the collection except those that are marked to be kept.</para>
			<para>The <see cref="System.CodeDom.Compiler.TempFileCollection.BasePath"/> property indicates a full
path to the base file name, without a file name extension, used to generate the
file names returned by the <see cref="System.CodeDom.Compiler.TempFileCollection.AddExtension"/> method.</para>
		</remarks>
	</doc>
	<doc for="TempFileCollection.BasePath">
		<summary>
			<para> Gets the full path to the base file name, without a file
      name extension, on the temporary directory path,
      that is used to generate temporary file names for the collection.</para>
		</summary>
		<value>
			<para> The full path to the base file name, without a file name
      extension, on the temporary directory path, that is used to generate temporary file names for the collection.</para>
		</value>
		<exception cref="System.Security.SecurityException">If the <see cref="System.CodeDom.Compiler.TempFileCollection.BasePath"/> property has not been set or is set to <see langword="null"/>, and <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess"/> is not granted for the temporary directory indicated by the <see cref="System.CodeDom.Compiler.TempFileCollection.TempDir"/> property.</exception>
	</doc>
	<doc for="TempFileCollection.Finalize">
		<summary>
			<para>Attempts to delete the temporary files before this object is reclaimed by garbage collection.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/> and cleans up resources by calling 
<see langword="Dispose(false)"/>. Override <see langword="Dispose(Boolean)"/> to 
   customize the cleanup.</para>
			<para>Application code should not call this method; an object's 
<see langword="Finalize"/> method is automatically invoked during garbage 
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/> method.</para>
			<para>For more information, see <see topic="cpconFinalizeMethodscDestructors"/>, 
<see topic="cpconCleaningUpUnmanagedResources"/>, and 
<see topic="cpconOverridingFinalizeMethod"/>. </para>
		</remarks>
	</doc>
	<doc for="TempFileCollection.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.CodeDom.Compiler.TempFileCollection"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.CodeDom.Compiler.TempFileCollection"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the 
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.CodeDom.Compiler.TempFileCollection"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc>
</docs>
