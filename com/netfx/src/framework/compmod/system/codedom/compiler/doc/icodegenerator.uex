<docs>
	<doc for="ICodeGenerator.CreateEscapedIdentifier">
		<summary>
			<para>Creates an escaped identifier for the specified value.</para>
		</summary>
		<param name="value">The string to create an escaped identifier for.</param>
		<returns>
			<para> The escaped identifier for the value.</para>
		</returns>
		<remarks>
			<para><see cref="System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier"/> tests whether the 
   identifier conflicts with reserved or language keywords, and returns an
   equivalent name with language-specific escape code formatting. Usually the
   returned identifier will remain basically the same but will have escape code
   formatting added to differentiate the identifier from the keyword. </para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier"/>
	</doc>
	<doc for="ICodeGenerator.CreateValidIdentifier">
		<summary>
			<para>Creates a valid identifier for the specified value.</para>
		</summary>
		<param name="value">The string to generate a valid identifier for.</param>
		<returns>
			<para>A valid identifier for the specified value.</para>
		</returns>
		<remarks>
			<para><see cref="System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier"/> tests whether the
   identifier conflicts with reserved or language keywords, and returns a valid
   identifier name that does not conflict. Usually the returned identifier will
   remain basically the same but will be slightly modified to differentiate the
   identifier from the keyword. </para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier"/>
	</doc><doc for="ICodeGenerator.GetTypeOutput">
		<summary>
			<para>Gets the type indicated by the specified <see cref="System.CodeDom.CodeTypeReference"/>.</para>
		</summary>
		<param name="type">A <see cref="System.CodeDom.CodeTypeReference"/> that indicates the type to return.</param>
		<returns>
			<para>A text representation of the specified type for the 
      language this code generator is designed to generate code in. For example,
      in Visual Basic, passing in type System.Int32 will return "Integer".</para>
		</returns>
	</doc>
	<doc for="ICodeGenerator.GenerateCodeFromExpression">
		<summary>
			<para>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs
      it to the specified text writer.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeExpression"/> that indicates the expression to generate code for. </param>
		<param name="w">The <see cref="System.IO.TextWriter"/> to output code to.</param>
		<param name=" o">A <see cref="System.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
		<seealso cref="System.IO.TextWriter"/>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.Compiler.CodeGeneratorOptions"/>
	</doc>
	<doc for="ICodeGenerator.GenerateCodeFromStatement">
		<summary>
			<para> Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it
      to the specified text writer using the specified options.</para>
		</summary>
		<param name=" e">A <see cref="System.CodeDom.CodeStatement"/> containing the CodeDOM elements to translate.</param>
		<param name="w">The <see cref="System.IO.TextWriter"/> to output code to.</param>
		<param name="o">A <see cref="System.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
		<seealso cref="System.IO.TextWriter"/>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.Compiler.CodeGeneratorOptions"/>
	</doc>
	<doc for="ICodeGenerator.GenerateCodeFromNamespace">
		<summary>
			<para>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified
      text writer using the specified options.</para>
		</summary>
		<param name="e">A <see cref="System.CodeDom.CodeNamespace"/> that indicates the namespace to generate code for. </param>
		<param name="w">The <see cref="System.IO.TextWriter"/> to output code to.</param>
		<param name=" o">A <see cref="System.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
		<seealso cref="System.IO.TextWriter"/>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.Compiler.CodeGeneratorOptions"/>
	</doc>
	<doc for="ICodeGenerator.GenerateCodeFromCompileUnit">
		<summary>
			<para> Generates code for the specified Code Document
      Object Model (CodeDOM) compilation unit and outputs it to the specified
      text writer using the specified options.</para>
		</summary>
		<param name=" e">A <see cref="System.CodeDom.CodeCompileUnit"/> to generate code for.</param>
		<param name="w">The <see cref="System.IO.TextWriter"/> to output code to.</param>
		<param name="o">A <see cref="System.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
		<seealso cref="System.IO.TextWriter"/>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.Compiler.CodeGeneratorOptions"/>
	</doc>
	<doc for="ICodeGenerator.GenerateCodeFromType">
		<summary>
			<para>Generates code for the specified Code
      Document Object Model (CodeDOM) type declaration and outputs it to
      the specified text writer using the specified options.</para>
		</summary>
		<param name=" e">A <see cref="System.CodeDom.CodeTypeDeclaration"/> that indicates the type to generate code for.</param>
		<param name="w">The <see cref="System.IO.TextWriter"/> to output code to.</param>
		<param name="o">A <see cref="System.CodeDom.Compiler.CodeGeneratorOptions"/> that indicates the options to use for generating code.</param>
		<seealso cref="System.IO.TextWriter"/>
		<seealso cref="System.CodeDom.CodeExpression"/>
		<seealso cref="System.CodeDom.Compiler.CodeGeneratorOptions"/>
	</doc>
	<doc for="ICodeGenerator.Supports">
		<summary>
			<para>Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="System.CodeDom.Compiler.GeneratorSupport"/> object.</para>
		</summary>
		<param name="supports">The capabilities to test the generator for.</param>
		<returns>
			<para><see langword="true"/> if the specified capabilities are
   supported; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method can be called with a number of <see cref="System.CodeDom.Compiler.GeneratorSupport"/> flags at
   once to test for a set of capabilities by joining a set of appropriate capability flags
   together with a binary "Or" operator (|).</para>
		</remarks>
	</doc>
	<doc for="ICodeGenerator">
		<summary>
			<para>Defines an interface for generating code.</para>
		</summary>
		<remarks>
			<para> Developers of compilers can implement this interface to
      allow people to dynamically generate code in a particular language. This can be
      used for a variety of purposes, such as creating code-generating wizards,
      creating dynamic assemblies with content that can be debugged, and for templated
      documents with
      embedded code, such as ASP.NET.</para>
			<para>An <see cref="System.CodeDom.Compiler.ICodeGenerator"/> implementation is 
   typically obtained through a call to the <see cref="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"/> method of <see cref="System.CodeDom.Compiler.CodeDomProvider"/>.</para>
		</remarks>
		<example>
			<para>The following example uses an <see cref="System.CodeDom.Compiler.ICodeGenerator"/> implementation to
   generate source code based on the structure of a CodeDOM source code
   model. The source code model is contained within a <see cref="System.CodeDom.CodeCompileUnit"/>
   that must be supplied to this method. A <see cref="System.CodeDom.Compiler.CodeDomProvider"/> for the target language must also
   be supplied to this method. For a larger code example that provides a
   source code model and a user interface, see the code example for
   the <see cref="System.CodeDom.Compiler.CodeDomProvider"/> class.</para>
			<codelink SampleID="CodeDomExample" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ICodeGenerator.IsValidIdentifier">
		<summary>
			<para>Gets a value that indicates whether the
      specified value is a valid identifier for the current language.</para>
		</summary>
		<param name="value">The value to test for being a valid identifier.</param>
		<returns>
			<para><see langword="true"/> if the
<paramref name="value"/> parameter is a valid identifier; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> 
      This method tests whether an identifier is
      valid. When implementing <see cref="System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier"/> in a derived class,
      design the method to test the value passed to it, and return
   <see langword="true"/> only if the value fits the rules of the language and does not conflict with a
      keyword.</para>
		</remarks>
	</doc>
	<doc for="ICodeGenerator.ValidateIdentifier">
		<summary>
			<para> 
      Throws an exception if the specified value is not a valid identifier.</para>
		</summary>
		<param name="value">The identifier to validate.</param>
		<exception cref="System.ArgumentException">The identifier is not valid.</exception>
		<remarks>
			<para> Rather than returning a value, this
      method throws an exception if the specified identifier is not valid
      according to the method implementation. Typically, the exception is an <see cref="T:System.ArgumentException"/>
      . This method enables a code generator that implements this method
      to produce an informative error message based upon the value of an
      invalid identifier.</para>
		</remarks>
	</doc>
</docs>
