<docs>
	<doc for="CodeDomProvider.LanguageOptions">
		<summary>
			<para>Gets or sets a language features identifier.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.Compiler.LanguageOptions"/> that indicates special features of the 
   language.</para>
		</value>
	</doc><doc for="CodeDomProvider.FileExtension">
		<summary>
			<para> Gets or sets the default file
      name extension to use for source code files in the current language.</para>
		</summary>
		<value>
			<para> A file name
      extension corresponding to the extension of the source files of the current
      language. The base implementation always returns <see cref="System.String.Empty"/>
      .</para>
		</value>
		<remarks>
			<para>This property is used by code generators and code compilers to indicate what
      file extensions should be generated or used.</para>
		</remarks>
	</doc>
	<doc for="CodeDomProvider.CreateGenerator">
		<overload>
			<para>When implemented in a derived class, creates a new code generator.</para>
		</overload>
		<summary>
			<para>When implemented in a derived class, creates a new code generator.</para>
		</summary>
		<returns>
			<para> An <see cref="System.CodeDom.Compiler.ICodeGenerator"/> that can be used to
   generate <see cref="System.CodeDom"/> based source code representations.</para>
		</returns>
	</doc>
	<doc for="CodeDomProvider.CreateGenerator1">
		<summary>
			<para>When implemented in a derived class, creates a new code generator using the specified <see cref="System.IO.TextWriter"/> for
   output.</para>
		</summary>
		<param name="output">A <see cref="System.IO.TextWriter"/> to use to output.</param>
		<returns>
			<para> An <see cref="System.CodeDom.Compiler.ICodeGenerator"/> that can be used to
   generate <see cref="System.CodeDom"/>
   based source code representations.</para>
		</returns>
		<remarks>
			<para> This method uses the specified <see cref="System.IO.TextWriter"/>
for output. This method supports more optimized code generation that
incrementally updates the source code.</para>
		</remarks>
		<seealso cref="System.IO.TextWriter"/>
	</doc>
	<doc for="CodeDomProvider.CreateGenerator2">
		<summary>
			<para>When implemented in a derived class, creates a new code generator using the specified file name for output.</para>
		</summary>
		<param name="fileName">The file name to output to.</param>
		<returns>
			<para> An <see cref="System.CodeDom.Compiler.ICodeGenerator"/> that can be used to
   generate <see cref="System.CodeDom"/>
   based source code representations.</para>
		</returns>
		<remarks>
			<para>This method uses the specified file name for output.</para>
		</remarks>
	</doc>
	<doc for="CodeDomProvider.CreateCompiler">
		<summary>
			<para>When implemented in a derived class, creates a new code compiler.</para>
		</summary>
		<returns>
			<para> An <see cref="System.CodeDom.Compiler.ICodeCompiler"/> that can be used for compilation
   of <see cref="System.CodeDom"/> based source code representations.</para>
		</returns>
	</doc>
	<doc for="CodeDomProvider.CreateParser">
		<summary>
			<para>When implemented in a derived class, creates a new code parser.</para>
		</summary>
		<returns>
			<para> An <see cref="System.CodeDom.Compiler.ICodeParser"/> that can be
   used to parse source code. The base implementation always returns
<see langword="null"/>.</para>
		</returns>
	</doc>
	<doc for="CodeDomProvider.GetConverter">
		<summary>
			<para>Gets a <see cref="System.ComponentModel.TypeConverter"/> for the specified data type.</para>
		</summary>
		<param name="type">The type of object to retrieve a type converter for.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.TypeConverter"/> for the specified type, 
   or <see langword="null"/> if a <see cref="System.ComponentModel.TypeConverter"/> for the specified type cannot be found.</para>
		</returns>
		<remarks>
			<para>A derived class can override this method to provide specific types of type
      converters for specific data types.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="CodeDomProvider">
		<summary>
			<para>Provides a base class for <see cref="System.CodeDom.Compiler.CodeDomProvider"/> implementations.
   This class is abstract.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.CodeDom.Compiler.CodeDomProvider"/> can be used
   to create and retrieve instances of code generators and code compilers. Code
   generators can be used to generate code in a particular language, and code
   compilers can be used to compile code into assemblies.</para>
			<para>A <see cref="System.CodeDom.Compiler.CodeDomProvider"/> implementation 
typically provides code generation and/or code compilation interfaces for
generating code and managing compilation for a single programming language.
Several languages are supported by <see cref="System.CodeDom.Compiler.CodeDomProvider"/> implementations that
ship with the .NET Framework SDK. These languages include C#, Visual Basic,
Managed C++, J#.NET, and JScript. Developers or compiler vendors can implement
the <see cref="System.CodeDom.Compiler.ICodeGenerator"/> and <see cref="System.CodeDom.Compiler.ICodeCompiler"/> interfaces and provide a <see cref="System.CodeDom.Compiler.CodeDomProvider"/>

that extends CodeDom support to other programming languages. </para>
		</remarks>
		<example>
			<para>The following example program can generate and compile
      source code based on a CodeDOM model of a program that prints "Hello World"
      using the <see langword="System.Console"/>
      class. A Windows Forms user interface is provided.
      The user can select the target programming langauge from several
      selections: C#, Visual Basic, and JScript. </para>
			<codelink SampleID="CodeDomExample" SnippetID="1"/>
		</example>
	</doc>
</docs>
