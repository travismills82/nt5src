<docs>
	<doc for="CompilerParameters.CompilerParameters">
		<overload>
    Initializes a new instance of the <see cref="System.CodeDom.Compiler.CompilerParameters"/> class.
 </overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.CompilerParameters"/> class.</para>
		</summary>
	</doc>
	<doc for="CompilerParameters.GenerateInMemory">
		<summary>
			<para>Gets or sets a value indicating whether to generate the output in memory.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the 
    compiler should generate the output in memory; otherwise,
 <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CompilerParameters.OutputAssembly">
		<summary>
			<para>Gets or sets the name of the output assembly.</para>
		</summary>
		<value>
			<para>The name of the output assembly.</para>
		</value>
	</doc>
	<doc for="CompilerParameters.IncludeDebugInformation">
		<summary>
			<para>Gets or sets a value indicating whether to include debug information in the compiled
       executable.</para>
		</summary>
		<value>
			<para><see langword="true"/> if debug information should be generated; otherwise, 
 <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CompilerParameters.TreatWarningsAsErrors">
		<summary>
			<para>Gets or sets a value indicating whether to treat warnings as errors.</para>
		</summary>
		<value>
			<para><see langword="true"/> if warnings should be treated as errors; otherwise, 
 <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="CompilerParameters.UserToken">
		<summary>
			<para> Gets or sets the user token to use when creating the compiler process.</para>
		</summary>
		<value>
			<para>The user token to use.</para>
		</value>
	</doc>
	<doc for="CompilerParameters.TempFiles">
		<summary>
			<para> Gets or sets the temporary files to use.</para>
		</summary>
		<value>
			<para>A <see cref="System.CodeDom.Compiler.TempFileCollection"/> that
   indicates the temporary files to use.</para>
		</value>
	</doc><doc for="CompilerParameters.ReferencedAssemblies">
		<summary>
			<para> Gets or sets the assemblies referenced by the current project.</para>
		</summary>
		<value>
			<para>A <see cref="T:System.Collections.Specialized.StringCollection"/> that contains the assembly names that are referenced by
   the source to compile.</para>
		</value>
		<remarks>
			<para>The string collection should consist of, or include, the assemblies referenced
      by the current project.</para>
		</remarks>
		<seealso cref="T:System.Collections.Specialized.StringCollection"/>
	</doc><doc for="CompilerParameters.MainClass">
		<summary>
			<para>Gets or sets the name of the main class.</para>
		</summary>
		<value>
			<para>The name of the main class.</para>
		</value>
		<remarks>
			<para> The main class contains the entry point for the program.</para>
		</remarks>
	</doc><doc for="CompilerParameters.WarningLevel">
		<summary>
			<para> Gets or sets the warning level at which the compiler aborts compilation.</para>
		</summary>
		<value>
			<para> The warning level at which the compiler aborts compilation.</para>
		</value>
	</doc><doc for="CompilerParameters.Win32Resource">
		<summary>
			<para>Gets or sets the filename of a Win32 resource file
      to link into the compiled assembly. </para>
		</summary>
		<value>
			<para>A Win32Resource resource file that will be linked into the compiled assembly.</para>
		</value>
		<remarks>
			<para>Not all languages support Win32Resource files, so you should test a code generator for this support before linking a resource
      file by calling the <see cref="System.CodeDom.Compiler.ICodeGenerator.Supports"/> method with the flag <see cref="System.CodeDom.Compiler.GeneratorSupport.Win32Resources"/>.</para>
		</remarks>
	</doc>
	<doc for="CompilerParameters.GenerateExecutable">
		<summary>
			<para>Gets or sets a value indicating whether to generate an executable.</para>
		</summary>
		<value>
			<para><see langword="true"/> if an executable should be generated; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If the value of this property is <see langword="false"/>, a DLL will be generated. By default, the 
   value of this property is <see langword="false"/> .</para>
		</remarks>
	</doc>
	<doc for="CompilerParameters.CompilerOptions">
		<summary>
			<para> Gets or sets the optional additional-command line
      arguments string to use when invoking the compiler.</para>
		</summary>
		<value>
			<para>Any additional command line arguments for the compiler.</para>
		</value>
		<remarks>
			<para>An <see cref="System.CodeDom.Compiler.ICodeCompiler"/> typically includes this string
   on the command line when invoking a command-line
   compiler. By default, this property contains an empty string.</para>
		</remarks>
	</doc>
	<doc for="CompilerParameters.Evidence">
		<summary>
			<para> Specifies an evidence object that represents the security policy
      permissions to grant the compiled assembly.</para>
		</summary>
		<value>
			<para>An <see cref="System.Security.Policy.Evidence"/> 
object that represents the security policy permissions
to grant the compiled assembly.</para>
		</value>
		<seealso cref="System.Security.Policy.Evidence"/>
	</doc>
	<doc for="CompilerParameters.CompilerParameters1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.CompilerParameters"/> class using the
   specified assembly names.</para>
		</summary>
		<param name="assemblyNames">The names of the assemblies to reference.</param>
	</doc>
	<doc for="CompilerParameters.CompilerParameters2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.CompilerParameters"/> class using the specified assembly
   names and output file name.</para>
		</summary>
		<param name="assemblyNames">The names of the assemblies to reference.</param>
		<param name=" outputName">The output file name.</param>
	</doc>
	<doc for="CompilerParameters.CompilerParameters3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.CodeDom.Compiler.CompilerParameters"/> class using
   the specified assembly
   names, output name, and a value indicating whether to include debug information.</para>
		</summary>
		<param name="assemblyNames">The names of the assemblies to reference.</param>
		<param name=" outputName">The output file name.</param>
		<param name=" includeDebugInformation"><see langword="true"/> if debug information should be included; <see langword="false"/> if debug information should be excluded.</param>
	</doc>
	<doc for="CompilerParameters">
		<summary>
			<para> Represents the parameters used to invoke a compiler.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.CodeDom.Compiler.CompilerParameters"/> object
   represents the settings and options for an <see cref="System.CodeDom.Compiler.ICodeCompiler"/>
   interface. </para>
			<para>If you are compiling an executable program, you must set the <see cref="System.CodeDom.Compiler.CompilerParameters.GenerateExecutable"/> property to <see langword="true"/>. When
the <see cref="System.CodeDom.Compiler.CompilerParameters.GenerateExecutable"/> is set to
<see langword="false"/>, the compiler will generate a class library. 
By default, a new <see cref="System.CodeDom.Compiler.CompilerParameters"/> is initialized with
its <see cref="System.CodeDom.Compiler.CompilerParameters.GenerateExecutable"/> property set to
<see langword="false"/>. If you are compiling an executable from a CodeDOM graph, a <see cref="System.CodeDom.CodeEntryPointMethod"/> must be defined
in the graph. If there are multiple code entry points, you can indicate the class that defines the entry
point to use by setting the name of the class to the <see cref="System.CodeDom.Compiler.CompilerParameters.MainClass"/> property.</para>
			<para>You can specify a file name for the output assembly in the <see cref="System.CodeDom.Compiler.CompilerParameters.OutputAssembly"/> property. Otherwise,
a default output file name will be used. To include debug information in a generated assembly, set the <see cref="System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation"/> property to
<see langword="true"/>. If your project references any assemblies, you must specify the assembly
names as items in a <see cref="System.Collections.Specialized.StringCollection"/> set to the <see cref="System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies"/> property of the
<see cref="System.CodeDom.Compiler.CompilerParameters"/> used when 
invoking compilation.</para>
			<para>You can compile an assembly that is written to memory rather than disk by
   setting the <see cref="System.CodeDom.Compiler.CompilerParameters.GenerateInMemory"/> property to
<see langword="true"/>. When an assembly is generated in memory, your code can 
   obtain a reference to the generated assembly from the <see cref="System.CodeDom.Compiler.CompilerResults.CompiledAssembly"/> property of a <see cref="System.CodeDom.Compiler.CompilerResults"/>. If an assembly is written to disk, you
   can obtain the path to the generated assembly from the <see cref="System.CodeDom.Compiler.CompilerResults.PathToAssembly"/> property of a <see cref="System.CodeDom.Compiler.CompilerResults"/>.</para>
			<para>To specify a warning level at which to halt compilation,
   set the <see cref="System.CodeDom.Compiler.CompilerParameters.WarningLevel"/> property to an integer
   that represents the warning level at which to halt compilation. You can also
   configure the compiler to halt compilation if warnings are encountered by
   setting the <see cref="System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors"/> property to
<see langword="true"/>.</para>
			<para>To specify a custom command-line arguments string to use when invoking the
   compilation process, set the string in the <see cref="System.CodeDom.Compiler.CompilerParameters.CompilerOptions"/> property. If a Win32 security token is required to invoke the compiler process, specify
   the token in the <see cref="System.CodeDom.Compiler.CompilerParameters.UserToken"/> property. To link a Win32 resource file into the compiled assembly, specify the name of
   the Win32 resource file in the <see cref="System.CodeDom.Compiler.CompilerParameters.Win32Resource"/> property. </para>
			<note type="note">
   When building an executable, be
   sure to set the <see cref="System.CodeDom.Compiler.CompilerParameters.GenerateExecutable"/> property to <see langword="true"/>. The default value
   of this property is <see langword="false"/>, which causes the compiler
   to generate a class library.
</note>
		</remarks>
		<example>
			<codelink SampleID="CompilerParametersExample" SnippetID="1"/>
		</example>
	</doc>
</docs>
