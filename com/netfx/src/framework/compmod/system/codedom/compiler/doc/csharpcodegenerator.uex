<docs>
	<doc for="CSharpCodeProvider">
		<summary>
			<para> Provides access to instances of the C# code generator and code compiler.</para>
		</summary>
		<remarks>
			<para>This interface provides methods that can be used to retrieve instances of 
       the C# <see cref="System.CodeDom.Compiler.ICodeGenerator"/> and <see cref="System.CodeDom.Compiler.ICodeCompiler"/> implementations.</para>
		</remarks>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator"/>
		<seealso cref="System.CodeDom.Compiler.ICodeCompiler"/>
	</doc>
	<doc for="CSharpCodeProvider.CreateGenerator">
		<overload>
			<para> Gets an instance of the C# code generator.</para>
		</overload>
		<summary>
			<para> Gets an instance of the C# code generator.</para>
		</summary>
		<returns>
			<para> An instance of the C# <see cref="System.CodeDom.Compiler.ICodeGenerator"/> implementation.</para>
		</returns>
		<seealso cref="System.CodeDom.Compiler.ICodeGenerator"/>
	</doc>
	<doc for="CSharpCodeProvider.CreateCompiler">
		<summary>
			<para> Gets an instance of the C# code compiler.</para>
		</summary>
		<returns>
			<para> An instance of the C# <see cref="System.CodeDom.Compiler.ICodeCompiler"/> implementation.</para>
		</returns>
		<seealso cref="System.CodeDom.Compiler.ICodeCompiler"/>
	</doc>
	<doc for="CSharpCodeGenerator">
		<summary>
			<para>
       C# (C Sharp) Code Generator.
    </para>
		</summary>
		<seealso cref="System.CodeDom.CodeGenerator"/>
	</doc>
	<doc for="CSharpCodeGenerator.FileExtension">
		<summary>
			<para>
       Gets
       or sets the file extension to use for source files.
    </para>
		</summary>
		<value>
			<para>
       The file extension to use for source files.
    </para>
		</value>
	</doc>
	<doc for="CSharpCodeGenerator.CompilerName">
		<summary>
			<para>
       Gets or
       sets the name of the compiler executable.
    </para>
		</summary>
		<value>
			<para>
       The name of the compiler executable program.
    </para>
		</value>
	</doc>
	<doc for="CSharpCodeGenerator.NullToken">
		<summary>
			<para>
       Gets the token used to represent <see langword="null"/>.
    </para>
		</summary>
		<returns>
			<para>
       The token used to represent <see langword="null"/>.
    </para>
		</returns>
	</doc>
	<doc for="CSharpCodeGenerator.QuoteSnippetStringCStyle">
		<summary>
			<para>
       Provides conversion to C-style formatting with escape codes.
    </para>
		</summary>
		<returns>
			<para>
       The converted string.
    </para>
		</returns>
	</doc>
	<doc for="CSharpCodeGenerator.QuoteSnippetString">
		<summary>
			<para>
       Provides conversion to formatting with escape codes.
    </para>
		</summary>
		<param name="value">
    The string to convert.
 </param>
		<returns>
			<para>
       The converted string.
    </para>
		</returns>
	</doc>
	<doc for="CSharpCodeGenerator.ProcessCompilerOutputLine">
		<summary>
			<para>
       Processes the <see cref="System.CodeDom.Compiler.CompilerResults"/> returned from compilation.
    </para>
		</summary>
		<param name="results">
    A <see cref="System.CodeDom.Compiler.CompilerResults"/> indicating the results of compilation.
 </param>
		<param name=" line">
		</param>
	</doc>
	<doc for="CSharpCodeGenerator.CmdArgsFromParameters">
		<summary>
			<para>
       Gets the command arguments from the specified <see cref="System.CodeDom.Compiler.CompilerParameters"/>.
    </para>
		</summary>
		<param name="options">
    A <see cref="System.CodeDom.Compiler.CompilerParameters"/> indicating the options to compile with.
 </param>
		<returns>
			<para>
       The command arguments.
    </para>
		</returns>
	</doc>
	<doc for="CSharpCodeGenerator.OutputType">
		<summary>
			<para>
       Sets the output type.
    </para>
		</summary>
		<param name="typeRef">
    The name of the type to output.
 </param>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateArrayCreateExpression">
		<summary>
			<para>
       Generates code for
       the specified CodeDom based array creation expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeArrayCreateExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeArrayCreateExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateBaseReferenceExpression">
		<summary>
			<para>
       Generates
       code for the specified CodeDom based base reference expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeBaseReferenceExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeBaseReferenceExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateCastExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based cast expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeCastExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeCastExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateDelegateCreateExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based delegate creation
       expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeDelegateCreateExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeDelegateCreateExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateFieldReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based field reference expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeFieldReferenceExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeFieldReferenceExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateIndexerExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based indexer expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeIndexerExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeIndexerExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateSnippetExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based snippet expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeSnippetExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeSnippetExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateMethodInvokeExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based method invoke expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMethodInvokeExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMethodInvokeExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateDelegateInvokeExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based delegate invoke
       expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeDelegateInvokeExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeDelegateInvokeExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateObjectCreateExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based object creation expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeObjectCreateExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeObjectCreateExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GeneratePrimitiveExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based primitive expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodePrimitiveExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodePrimitiveExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateThisReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based this reference expression
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeThisReferenceExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeThisReferenceExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateExpressionStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based method invoke statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeExpressionStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeExpressionStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateIterationStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based for loop statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeIterationStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeIterationStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateThrowExceptionStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based throw exception statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeThrowExceptionStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeThrowExceptionStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateMethodReturnStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based method return statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMethodReturnStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMethodReturnStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateConditionStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based if statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeConditionStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeConditionStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateTryCatchFinallyStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based try catch finally
       statement representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTryCatchFinallyStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeTryCatchFinallyStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateAssignStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based assignment statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeAssignStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAssignStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateAttachEventStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based attach event statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeAttachEventStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAttachEventStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateRemoveEventStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based detach event statement
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeRemoveEventStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeRemoveEventStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateVariableDeclarationStatement">
		<summary>
			<para>
       Generates code for the specified CodeDom based variable declaration
       statement representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeVariableDeclarationStatement"/> indicating the statement to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeVariableDeclarationStatement"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateLinePragmaStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based line pragma start
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeLinePragma"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeLinePragma"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateLinePragmaEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based line pragma end
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeLinePragma"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeLinePragma"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateField">
		<summary>
			<para>
       Generates code for the specified CodeDom
       based field representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMemberField"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMemberField"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateSnippetMember">
		<summary>
			<para>
       Generates code for the specified CodeDom based snippet class member
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeSnippetTypeMember"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeSnippetTypeMember"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateMethod">
		<summary>
			<para>
       Generates code for the specified CodeDom based member method
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMemberMethod"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMemberMethod"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateProperty">
		<summary>
			<para>
       Generates code for the specified CodeDom based property representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeMemberProperty"/> indicating the property to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeMemberProperty"/>
	</doc>
	<doc for="CSharpCodeGenerator.GeneratePropertyReferenceExpression">
		<summary>
			<para>
       Generates code for the specified CodeDom based property reference
       expression representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodePropertyReferenceExpression"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodePropertyReferenceExpression"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateConstructor">
		<summary>
			<para>
       Generates code for the specified CodeDom based constructor
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeConstructor"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeConstructor"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateTypeConstructor">
		<summary>
			<para>
       Generates code for the specified CodeDom based class constructor
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTypeConstructor"/> indicating the class constructor to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeTypeConstructor"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateTypeStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based class start
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTypeDeclaration"/> indicating the start class.
 </param>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateTypeEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based class end representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeTypeDeclaration"/> indicating the end class.
 </param>
		<seealso cref="System.CodeDom.CodeTypeDeclaration"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateNamespaceStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based namespace start
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespace"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateNamespaceEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based namespace end
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespace"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespace"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateNamespaceImport">
		<summary>
			<para>
       Generates code for the specified CodeDom based namespace import
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeNamespaceImport"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeNamespaceImport"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateAttributeDeclarationsStart">
		<summary>
			<para>
       Generates code for the specified CodeDom based attribute block start
       representation.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="CSharpCodeGenerator.GenerateAttributeDeclarationsEnd">
		<summary>
			<para>
       Generates code for the specified CodeDom based attribute block end
       representation.
    </para>
		</summary>
		<param name="attributes">
    A <see cref="System.CodeDom.CodeAttributeDeclarationCollection"/> indicating the expression to generate code for.
 </param>
		<seealso cref="System.CodeDom.CodeAttributeDeclarationCollection"/>
	</doc>
	<doc for="CSharpCodeGenerator.IsValidIdentifier">
		<summary>
			<para>
       Gets whether the specified value is a valid identifier.
    </para>
		</summary>
		<param name="value">
    The value to test for validity as an identifier.
 </param>
	</doc>
	<doc for="CSharpCodeProvider.FileExtension">
		<summary>
			<para> Gets or sets the file 
      name extension to use when creating source code files.</para>
		</summary>
		<value>
			<para>The file name extension to use for generated source code files.</para>
		</value>
		<remarks>
			<para>This file name extension is usually the extension used by the language's source 
      code files.</para>
		</remarks>
	</doc></docs>
