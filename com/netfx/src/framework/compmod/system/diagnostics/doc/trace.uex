<docs>
	<doc for="Trace.Fail">
		<overload>
			<para>Emits an error message.</para>
		</overload>
		<summary>
			<para>Emits the specified error message.</para>
		</summary>
		<param name="message">A message to emit.</param>
		<remarks>
			<para>The default behavior for the default trace listener is to output the <paramref name="message"/> parameter to a
    message box when the application runs in user-interface mode, and to the <see cref="System.Diagnostics.TraceListener"/> instances in the <see cref="System.Diagnostics.Trace.Listeners"/> collection. You can customize this
    behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to,
    or by removing one from, the <see cref="System.Diagnostics.Trace.Listeners"/> collection.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Diagnostics.Trace.Fail"/> method to print a message
    during exception handling.</para>
			<codelink SampleID="Classic Trace.Fail Example" SnippetID="1"/>
			<para>You can also use the <see cref="System.Diagnostics.Trace.Fail"/> method in a switch statement.</para>
			<codelink SampleID="Classic Trace.Fail Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Fail1">
		<summary>
			<para>Emits an error message, and a detailed error message.</para>
		</summary>
		<param name="message">A message to emit.</param>
		<param name="detailMessage">A detailed message to emit.</param>
		<remarks>
			<para>The default behavior is for the default trace listener to output the <paramref name="message"/> parameter and the
 <paramref name="detailedMessage"/> parameter to a message box when the application runs in user-interface mode,
    and to the <see cref="System.Diagnostics.TraceListener"/> instances in the <see cref="System.Diagnostics.Trace.Listeners"/>
    collection. You can
    customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or by removing one from, the
 <see cref="System.Diagnostics.Trace.Listeners"/>
 collection.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Diagnostics.Trace.Fail"/> method to print a message during
    exception handling.</para>
			<codelink SampleID="Classic Trace.Fail1 Example" SnippetID="1"/>
			<para>You can also use the <see cref="System.Diagnostics.Trace.Fail"/> method in a switch statement.</para>
			<codelink SampleID="Classic Trace.Fail1 Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.IndentLevel">
		<summary>
			<para>Gets or sets the indent level.</para>
		</summary>
		<value>
			<para>The indent level. The default is zero.</para>
		</value>
		<remarks>
			<para> This property is stored on per-thread/per-request basis.</para>
		</remarks>
		<example>
			<para>The following example increments and decrements the indent level and emits
      tracing messages.</para>
			<codelink SampleID="Classic Trace.IndentLevel Example" SnippetID="1"/>
			<para>This example produces the following output:</para>
			<codelink SampleID="Classic Trace.IndentLevel Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Trace.IndentSize"/>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Indent">
		<summary>
			<para>Increases the current <see cref="System.Diagnostics.Trace.IndentLevel"/> by one.</para>
		</summary>
		<example>
			<para>The following example increments and decrements the
      indent level and emits tracing messages.</para>
			<codelink SampleID="Classic Trace.IndentLevel Example" SnippetID="1"/>
			<para>This example produces the following output:</para>
			<codelink SampleID="Classic Trace.IndentLevel Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Trace.Unindent"/>
		<seealso cref="System.Diagnostics.Trace.IndentLevel"/>
		<seealso cref="System.Diagnostics.Trace.IndentSize"/>
	</doc>
	<doc for="Trace.Unindent">
		<summary>
			<para>Decreases the current <see cref="System.Diagnostics.Trace.IndentLevel"/> by one.</para>
		</summary>
		<example>
			<para>The following example increments and decrements the
      indent level and emits tracing messages.</para>
			<codelink SampleID="Classic Trace.IndentLevel Example" SnippetID="1"/>
			<para>This example produces the following output:</para>
			<codelink SampleID="Classic Trace.IndentLevel Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Trace.Indent"/>
		<seealso cref="System.Diagnostics.Trace.IndentLevel"/>
		<seealso cref="System.Diagnostics.Trace.IndentSize"/>
	</doc>
	<doc for="Trace.IndentSize">
		<summary>
			<para>Gets or sets the number of spaces in an indent.</para>
		</summary>
		<value>
			<para>The number of spaces in an indent. The default is four.</para>
		</value>
		<remarks>
			<para> A <see cref="System.Diagnostics.TextWriterTraceListener"/> interprets this number as spaces.
   An <see cref="T:System.Diagnostics.EventLogTraceListener"/> ignores this value.</para>
			<para>This property is stored on per-thread/per-request basis.</para>
			<para>To set the <see cref="System.Diagnostics.Trace.AutoFlush"/> and <see cref="System.Diagnostics.Trace.IndentSize"/> for <see cref="System.Diagnostics.Trace"/> ,
you can also edit the configuration file that corresponds to the name of
your application. The configuration file should be formatted like the following
example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;trace autoflush="false" indentsize="3" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<seealso cref="System.Diagnostics.Trace.IndentLevel"/>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Listeners">
		<summary>
			<para>Gets the collection of listeners that is monitoring the trace output.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.TraceListenerCollection"/> that represents a collection of type <see cref="System.Diagnostics.TraceListener"/> monitoring the trace output.</para>
		</value>
		<remarks>
			<para>The listeners produce formatted output from the trace output. By default, the
      collection contains an instance of the <see cref="System.Diagnostics.DefaultTraceListener"/> class. If you
      want to remove the default listener, call the <see cref="M:System.Diagnostics.TraceListenerCollection.Remove"/> method, and pass it the
      instance of the <see cref="System.Diagnostics.DefaultTraceListener"/>. To redirect
      output to the console window, add an instance of the <see cref="System.Diagnostics.TextWriterTraceListener"/> that uses the <see langword="Console.Out "/>stream.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TextWriterTraceListener"/> that outputs to the console screen. The code
   then adds the new listener to the <see cref="System.Diagnostics.Trace.Listeners"/>.</para>
			<codelink SampleID="Classic Trace.Listeners Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Write">
		<overload>
			<para>Writes information about the trace to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
collection.</para>
		</overload>
		<summary>
			<para>Writes a message to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
collection.</para>
		</summary>
		<param name="message">
			<para>A message to write. </para>
		</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs the
second error message on the same line as the first message.
A line terminator follows the second message.</para>
			<codelink SampleID="Classic Trace.Write Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Write1">
		<summary>
			<para>Writes the value of the object's <see cref="System.Object.ToString"/>
method to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>
   generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/>
or higher, the example outputs the first name of the <paramref name="value"/> parameter to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs a message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.Write1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Write2">
		<summary>
			<para>Writes a category name and a message to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>
   generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Verbose"/>, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Error"/> or higher, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.Write2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Write3">
		<summary>
			<para>Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/> method to the trace listeners
      in the <see cref="System.Diagnostics.Trace.Listeners"/> collection.</para>
		</summary>
		<param name="value">
			<para>An <see cref="System.Object"/> name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</para>
		</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>
   generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Verbose"/>, the example outputs the name of the <c>myObject</c> and the <c>category</c> to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>
class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Error"/> or higher, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.Write3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLine">
		<overload>
			<para> Writes information about the trace to the trace
      listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection.</para>
		</overload>
		<summary>
			<para> Writes a message to the
      trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
      collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.Write Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLine1">
		<summary>
			<para>Writes the value of the object's <see cref="System.Object.ToString"/> method to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
collection.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the name of the
object on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteLine1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLine2">
		<summary>
			<para> Writes a category name and message to the trace
      listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
      
      collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message and the <c>
category</c>
on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteLine2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLine3">
		<summary>
			<para>Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/>
   method to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
   collection.</para>
		</summary>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteLine3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteIf">
		<overload>
			<para>Writes information about the trace to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection if a condition is
<see langword="true"/>.</para>
		</overload>
		<summary>
			<para>Writes a message to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection
   if a condition is <see langword="true"/>.</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="message">
			<para>A message to write. </para>
		</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/> you do not call <see cref="System.Diagnostics.Trace.Write"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteIf Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteIf1">
		<summary>
			<para>Writes the value of the object's <see cref="System.Object.ToString"/>
method to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection if a condition is
<see langword="true"/>. </para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false "/> you do not
call <see cref="System.Diagnostics.Trace.Write"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>
   generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/> or higher, the example outputs the first name of the value parameter to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs a message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteIf1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteIf2">
		<summary>
			<para>Writes a category name and message to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/>
collection if a condition is <see langword="true"/>.</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="message">
			<para>A message to write. </para>
		</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/> you do not
call <see cref="System.Diagnostics.Trace.Write"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This
can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>
   generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Verbose"/>, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Error"/> or higher, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteIf2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteIf3">
		<summary>
			<para>Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/> method to the trace
      listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection
      if a condition is <see langword="true"/>.</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/> you do not
call <see cref="System.Diagnostics.Trace.Write"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteIf"/>, even
when <c>mySwitch.TraceError</c> is <see langword="false "/>
and no tracing output is produced. This
can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>
   generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Verbose"/>, the example outputs the name of the <c>myObject</c> and the <c>category</c> to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>
class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Error"/> or higher, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteIf3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLineIf">
		<overload>
			<para> Writes information about the trace to the trace
      listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection if a condition is
   <see langword="true"/>.</para>
		</overload>
		<summary>
			<para> Writes a message to the trace listeners in the
   <see cref="System.Diagnostics.Trace.Listeners"/> collection if a condition is
   <see langword="true"/>
   .</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="message">
			<para>A message to write. </para>
		</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteLineIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false "/>
you do not
call <see cref="System.Diagnostics.Trace.WriteLine"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteLineIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This
can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteIf Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLineIf1">
		<summary>
			<para>Writes the value of the object's <see cref="System.Object.ToString"/> method to the
   trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection
   if a condition is
<see langword="true"/> 
.</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteLineIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false "/>
you do not
call <see cref="System.Diagnostics.Trace.WriteLine"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteLineIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This
can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the name of the
object on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteLineIf1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLineIf2">
		<summary>
			<para> Writes a category name and message to the trace
      listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection if a condition is
   <see langword="true"/> .</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="message">
			<para>A message to write. </para>
		</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteLineIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false "/>
you do not
call <see cref="System.Diagnostics.Trace.WriteLine"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteLineIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This
can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message and the <c>
category</c>
on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteLineIf2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.WriteLineIf3">
		<summary>
			<para>Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/>
   method to the trace listeners in the <see cref="System.Diagnostics.Trace.Listeners"/> collection if a condition is <see langword="true"/>
   .</para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="value">An <see cref="System.Object"/> whose name is sent to the <see cref="System.Diagnostics.Trace.Listeners"/>.</param>
		<param name="category">
			<para>A category name used to organize the output. </para>
		</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group
output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace
listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Trace.WriteLineIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to <see langword="false"/> you do not
call <see cref="System.Diagnostics.Trace.WriteLine"/>. The second example always calls
<see cref="System.Diagnostics.Trace.WriteLineIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This
can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Trace.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>
generalSwitch</c>
.
This switch is set outside the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Trace.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Trace.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Trace.WriteLineIf3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Trace.Assert1">
		<summary>
			<para>Checks for a condition, and displays a message if the condition is
   <see langword="false"/>. </para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/> . </para></param>
		<param name="message"><para>A message to display. </para></param>
		<remarks>
			<para>Typically, you use <see cref="Assert"/> to identify logic errors during program
   development. <see cref="Assert"/> will evaluate the <paramref name="condition"/> parameter. If the result is <see langword="false"/>, it sends diagnostic messages to the <see cref="Listeners"/>.</para>
The default behavior
displays a message box when the application runs in user-interface mode, and to output the message
to the default trace output. You can customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or removing
one from, the <see cref="System.Diagnostics.Trace.Listeners"/>
collection.
<para> To set an assert, you can also edit the configuration file that
   corresponds to the name of your application. Within this file, you can enable
   and disable the assert or set the name of its log file. The configuration
   file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
   &lt;system.diagnostics&gt;
      &lt;switches&gt;
         &lt;add name="mySwitch" value="4"/&gt;
      &lt;/switches&gt;
      &lt;trace autoflush="false" indentsize="4"/&gt;
      &lt;assert assertuienabled="true" logfilename=".\TraceLog.txt"/&gt;
   &lt;/system.diagnostics&gt;
&lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para>The following example checks to see that the <c>type</c> parameter is valid. If the <c>type</c> passed in is <see langword="null"/>, the
<see cref="System.Diagnostics.Trace.Assert"/>
outputs a message.</para>
			<codelink SampleID="Classic Trace.Assert1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc><doc for="Trace.Assert2">
		<summary>
			<para>Checks for a condition, and displays both messages if the condition
      is <see langword="false"/>. </para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/> . </para></param>
		<param name="message"><para>A message to display.</para></param>
		<param name="detailMessage">A detailed message to display.</param>
		<remarks>
			<para>Typically, you use <see cref="Assert"/> to identify logic errors during program
   development. <see cref="Assert"/> will evaluate the
   condition. If the result is <see langword="false"/>, it sends diagnostic messages to the <see cref="Listeners"/>. </para>
			<para> The default behavior is to display a
   message box when the application runs in user-interface mode, and to output the message
   to the default trace output. You can customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or removing
   one from, the <see cref="System.Diagnostics.Trace.Listeners"/>
   collection.</para>
			<para> To set an assert, you can also edit the configuration file that
   corresponds to the name of your application. Within this file, you can enable
   and disable the assert or set the name of its log file. The configuration
   file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
   &lt;system.diagnostics&gt;
      &lt;switches&gt;
         &lt;add name="mySwitch" value="4"/&gt;
      &lt;/switches&gt;
      &lt;trace autoflush="false" indentsize="4"/&gt;
      &lt;assert assertuienabled="true" logfilename=".\TraceLog.txt"/&gt;
   &lt;/system.diagnostics&gt;
&lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para>The following example checks to see that the <c>type</c> parameter is valid. If the <c>type</c> passed in is <see langword="null"/>, the
<see cref="System.Diagnostics.Trace.Assert"/>
outputs a message.</para>
			<codelink SampleID="Classic Trace.Assert2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc><doc for="Trace.AutoFlush">
		<summary>
			<para>Gets or sets whether <see cref="System.Diagnostics.Trace.Flush"/> should be called on the <see cref="System.Diagnostics.Trace.Listeners"/> after every write.</para>
		</summary>
		<value>
			<para><see langword="true "/>if <see cref="System.Diagnostics.Trace.Flush"/> is called on the <see cref="System.Diagnostics.Trace.Listeners"/> after every write; otherwise,
<see langword="false"/>. </para>
		</value>
		<remarks>
			<para>The default is <see langword="false"/>.</para>
			<para>Flushing the stream will not flush its underlying 
   encoder unless you explicitly call <see cref="System.Diagnostics.Trace.Flush"/> or <see cref="System.Diagnostics.Trace.Close"/>.
   Setting <see cref="System.Diagnostics.Trace.AutoFlush"/> to <see langword="true"/> means that data will be flushed from
   the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next
   block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character
   or characters.</para>
			<para>To set the <see cref="System.Diagnostics.Trace.AutoFlush"/> and <see cref="System.Diagnostics.Trace.IndentSize"/> for <see cref="System.Diagnostics.Trace"/> ,
you can also edit the configuration file that corresponds to the name of
your application. The configuration file should be formatted like the following
example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;trace autoflush="false" indentsize="3" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc><doc for="Trace.Flush">
		<summary>
			<para>Flushes the output buffer, and causes buffered data to
      be written to the <see cref="System.Diagnostics.Trace.Listeners"/>.</para>
		</summary>
		<remarks>
			<para>Flushing the stream will not flush its underlying 
   encoder unless you explicitly call <see cref="System.Diagnostics.Trace.Flush"/> or <see cref="System.Diagnostics.Trace.Close"/>.
   Setting <see cref="System.Diagnostics.Trace.AutoFlush"/> to <see langword="true"/> means that data will be flushed from
   the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next
   block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character
   or characters.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TextWriterTraceListener"/> named <c>myTextListener</c>. <c>myTextListener</c> uses a <see cref="System.IO.StreamWriter"/> called <c>myOutputWriter</c> to write to a file named <c>TestFile.txt</c>
. The example creates the file, stream
and text writer, writes one line of text to the file, and then flushes and closes the output.</para>
			<codelink SampleID="Classic Trace.Flush Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc><doc for="Trace.Close">
		<summary>
			<para>Flushes the output buffer, and then closes the <see cref="System.Diagnostics.Trace.Listeners"/>.</para>
		</summary>
		<remarks>
			<para>Use this method when the output is going to a file, such as
      to the <see cref="System.Diagnostics.TextWriterTraceListener"/>.</para>
			<para>Flushing the stream will not flush its underlying 
      encoder unless you explicitly call <see cref="System.Diagnostics.Trace.Flush"/> or <see cref="System.Diagnostics.Trace.Close"/>.
      Setting <see cref="System.Diagnostics.Trace.AutoFlush"/> to <see langword="true"/> means that data will be flushed from
      the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next
      block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character
      or characters.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TextWriterTraceListener"/> named <c>myTextListener</c>. <c>myTextListener</c> uses a <see cref="System.IO.StreamWriter"/> called <c>myOutputWriter</c> to write to a file named <c>TestFile.txt</c>. 
The example creates the file, stream
and text writer, writes one line of text to the file, and then flushes and closes the output.</para>
			<codelink SampleID="Classic Trace.Flush Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc><doc for="Trace">
		<summary>
			<para>Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>You can use the properties and methods in
      the <see cref="System.Diagnostics.Trace"/> class to instrument release builds.
      Instrumentation allows you to monitor the health of your application running in
      real-life settings. Tracing helps you isolate problems and fix them without disturbing
      a running system.</para>
			<note type="note">
      To enable
      debugging in C#, add the <see langword="/d:TRACE"/> flag to the compiler command
      line when you compile your code, or you can add <see langword="#define TRACE"/>
      to the top of your file. In Visual Basic, add the <see langword="/d:TRACE=True"/>
      flag to the compiler command line. To provide equivalent funtionality in the
      Managed Extensions for C++, you must enclose calls to methods of this class in a
   <see langword="#ifdef TRACE ... #endif"/> block. This syntax is 
      compiler-specific. If you are using a compiler other than the ones specified
      above, you must refer to the compiler's documentation to enable conditional
      compiling because of the conditional compilation attributes placed on the
      methods of the <see cref="System.Diagnostics.Trace"/> class.
      
   </note>
			<para> In Visual Studio .NET projects, <see cref="System.Diagnostics.Trace"/> is enabled by default. Therefore, code
   is generated for all <see cref="System.Diagnostics.Trace"/>
   methods in both release and debug builds. This allows an end user to turn
   on tracing to help identify the problem without the program having to be recompiled. By
   contrast, <see cref="System.Diagnostics.Debug"/> is
   disabled in release builds by default, so no executable
   code is generated for <see cref="System.Diagnostics.Debug"/> methods. To
   disable <see cref="System.Diagnostics.Trace"/>, see the Visual Studio .NET documentation.</para>
			<para> This class provides methods to display an <see cref="System.Diagnostics.Trace.Assert"/> dialog
box, and to emit an assertion that will always <see cref="System.Diagnostics.Trace.Fail"/>. This
class provides write methods in the following variations: <see cref="System.Diagnostics.Trace.Write"/>,
<see cref="System.Diagnostics.Trace.WriteLine"/>, <see cref="System.Diagnostics.Trace.WriteIf"/>, and <see cref="System.Diagnostics.Trace.WriteLineIf"/>.</para>
			<para>The <see cref="System.Diagnostics.BooleanSwitch"/> and <see cref="System.Diagnostics.TraceSwitch"/> classes provide means
to dynamically control the tracing output. You can modify the values of
these switches without recompiling your application. For information on using
the configuration file to set a switch, see the <see cref="System.Diagnostics.Switch"/> class and TraceSwitch Configuration topic in
the
Visual Studio .NET documentation.</para>
			<para>You can customize the tracing output's target by adding
<see cref="System.Diagnostics.TraceListener"/> instances to or removing instances from the
<see cref="System.Diagnostics.Trace.Listeners"/> collection. By default, trace output is
   emitted using the <see cref="System.Diagnostics.DefaultTraceListener"/>
   class.</para>
			<para>The <see cref="System.Diagnostics.Trace"/> class provides properties to get or set the
level of <see cref="System.Diagnostics.Trace.Indent"/>, the <see cref="System.Diagnostics.Trace.IndentSize"/>, and whether to <see cref="System.Diagnostics.Trace.AutoFlush"/> after each
write.</para>
			<para>To set the <see cref="System.Diagnostics.Trace.AutoFlush"/> and <see cref="System.Diagnostics.Trace.IndentSize"/> for <see cref="System.Diagnostics.Trace"/> , you can edit
the configuration file that corresponds to the name of your application.
The configuration file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
   &lt;system.diagnostics&gt;
      &lt;trace autoflush="false" indentsize="3" /&gt;
   &lt;/system.diagnostics&gt;
&lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Diagnostics.Trace"/> to
   indicate the beginning and the end of a program's execution. The example also
   uses <see cref="System.Diagnostics.Trace.Indent"/> and <see cref="System.Diagnostics.Trace.Unindent"/> to distinguish the tracing output.</para>
			<codelink SampleID="Classic Trace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Switch"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="T:System.Diagnostics.EventLogTraceListener"/>
		<seealso cref="System.Diagnostics.TraceListenerCollection"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc><doc for="Trace.Assert">
		<overload>
			<para>Checks for a condition, and displays a message if the
      condition
      is <see langword="false"/>.</para>
		</overload>
		<summary>
			<para>Checks for a condition, and outputs the call stack if the
      condition
      is <see langword="false"/>.</para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/> . </para></param>
		<remarks>
			<para><see cref="System.Diagnostics.Trace.Assert"/>
outputs the call stack with
file and line number for each line in the call stack.</para>
			<para>Typically, you use <see cref="System.Diagnostics.Trace.Assert"/> to identify logic errors during program
development. <see cref="System.Diagnostics.Trace.Assert"/> will evaluate the <paramref name="condition"/>.
If the result is <see langword="false"/>, it sends diagnostic messages to the <see cref="System.Diagnostics.Trace.Assert"/>.</para>
			<para> The default behavior
   displays a message box when the application runs in user-interface mode, and to output the message
   to the default trace output. You can customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or removing
   one from, the <see cref="System.Diagnostics.Trace.Listeners"/> collection.</para>
			<para> To set an assert, you can also edit the configuration file that
   corresponds to the name of your application. Within this file, you can enable
   and disable the assert or set the name of its log file. The configuration
   file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
   &lt;system.diagnostics&gt;
      &lt;switches&gt;
         &lt;add name="mySwitch" value="4"/&gt;
      &lt;/switches&gt;
      &lt;trace autoflush="false" indentsize="4"/&gt;
      &lt;assert assertuienabled="true" logfilename=".\TraceLog.txt"/&gt;
   &lt;/system.diagnostics&gt;
&lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para>The following example creates an index for an array. Then some action is
      performed that sets the value of the index. Next the code calls <see cref="System.Diagnostics.Trace.Assert"/> to verify the index value is
      valid. If it is not valid, the <see cref="System.Diagnostics.Trace.Assert"/> outputs the call stack.</para>
			<codelink SampleID="Classic Trace.Assert Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
</docs>
