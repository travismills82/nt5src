<docs>
	<doc for="Debug.Indent">
		<summary>
			<para>Increases the current <see cref="System.Diagnostics.Debug.IndentLevel"/> by one.</para>
		</summary>
		<example>
			<para>The following example sets the indent level and emits debugging messages.</para>
			<codelink SampleID="Classic Debug.IndentLevel Example" SnippetID="1"/>
			<para>This example produces the following output:</para>
			<codelink SampleID="Classic Debug.IndentLevel Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug.Unindent"/>
		<seealso cref="System.Diagnostics.Debug.IndentLevel"/>
		<seealso cref="System.Diagnostics.Debug.IndentSize"/>
	</doc>
	<doc for="Debug.Unindent">
		<summary>
			<para>Decreases the current <see cref="System.Diagnostics.Debug.IndentLevel"/> by one.</para>
		</summary>
		<example>
			<para>The following example sets the indent level and emits debugging messages.</para>
			<codelink SampleID="Classic Debug.IndentLevel Example" SnippetID="1"/>
			<para>This example produces the following output:</para>
			<codelink SampleID="Classic Debug.IndentLevel Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug.Indent"/>
		<seealso cref="System.Diagnostics.Debug.IndentLevel"/>
		<seealso cref="System.Diagnostics.Debug.IndentSize"/>
	</doc>
	<doc for="Debug.Listeners">
		<summary>
			<para>Gets
      the collection of listeners that is monitoring the debug
      output.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.TraceListenerCollection"/> representing a collection of type <see cref="System.Diagnostics.TraceListener"/> that monitors the debug output.</para>
		</value>
		<remarks>
			<para>The listeners produce formatted output from the debug output.
      By default, the collection contains an instance of the <see cref="System.Diagnostics.DefaultTraceListener"/>
      class. To remove the default listener, call the <see cref="M:System.Diagnostics.TraceListenerCollection.Remove"/> method, and pass it the instance of the
   <see cref="System.Diagnostics.DefaultTraceListener"/>. To redirect
      output to the console window, add an instance of the <see cref="System.Diagnostics.TextWriterTraceListener"/> that uses the <see langword="Console.Out "/> stream.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TextWriterTraceListener"/> that outputs to the console screen. The code
   then adds the new listener to the <see cref="System.Diagnostics.Debug.Listeners"/>.</para>
			<codelink SampleID="Classic Debug.Listeners Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLine">
		<overload>
			<para> Writes information about the debug to the trace
      listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection.</para>
		</overload>
		<summary>
			<para>Writes a message followed by a line terminator to the trace listeners in the
   <see cref="System.Diagnostics.Debug.Listeners"/>
   collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs
the second error message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLine Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Write">
		<overload>
			<para>Writes information about the debug to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection.</para>
		</overload>
		<summary>
			<para>Writes a message to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>
   .</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/>
or higher, the example outputs the first error message to the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener
to the <see cref="System.Diagnostics.Debug.Listeners"/> collection,
see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to <see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. A line terminator follows the
second message.</para>
			<codelink SampleID="Classic Debug.Write Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteIf">
		<overload>
			<para>Writes information about the debug to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection if a condition is
<see langword="true"/>. </para>
		</overload>
		<summary>
			<para>Writes a message to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection
   if a condition is
<see langword="true"/>. </para>
		</summary>
		<param name="condition">
			<para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> . </para>
		</param>
		<param name="message">
			<para>A message to write. </para>
		</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Debug.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/>, you do not call <see cref="System.Diagnostics.Debug.Write"/>. The second example always calls
<see cref="System.Diagnostics.Debug.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/> and no tracing
output is produced. This can result in unnecessary execution of arbitrarily complex
code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs
the second error message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteIf Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLineIf">
		<overload>
			<para> Writes information about the debug to the trace
      listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection if a condition is
   <see langword="true"/>. </para>
		</overload>
		<summary>
			<para> Writes a message to the trace listeners in the
   <see cref="System.Diagnostics.Debug.Listeners"/> collection if a condition is
   <see langword="true"/>
   .</para>
		</summary>
		<param name="condition">
			<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</param>
		<param name="message">A message to write.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Debug.WriteLineIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/>,<see langword=" "/>
you do not
call <see cref="System.Diagnostics.Debug.WriteLine"/>. The second example always calls
<see cref="System.Diagnostics.Debug.WriteLineIf"/>,
even when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/> and no tracing output is produced. This can result in
unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs
the second error message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLineIf Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.AutoFlush">
		<summary>
			<para>Gets or sets a value indicating whether <see cref="System.Diagnostics.Debug.Flush"/> should be called on the
<see cref="System.Diagnostics.Debug.Listeners"/>
after every write.</para>
		</summary>
		<value>
			<para><see langword="true "/>if <see cref="System.Diagnostics.Debug.Flush"/>
is called on the <see cref="System.Diagnostics.Debug.Listeners"/> after every write; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The default is <see langword="false"/>.</para>
			<para>Flushing the stream will not flush its underlying
   encoder unless you explicitly call <see cref="System.Diagnostics.Debug.Flush"/> or <see cref="System.Diagnostics.Debug.Close"/>.
   Setting <see cref="System.Diagnostics.Debug.AutoFlush"/> to <see langword="true"/> means that data will be flushed from
   the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next
   block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character
   or characters.</para>
			<para>To set the <see cref="System.Diagnostics.Debug.AutoFlush"/> and <see cref="System.Diagnostics.Debug.IndentSize"/> for <see cref="System.Diagnostics.Debug"/>
, you can also edit the configuration file corresponding to the name of
your application. The configuration file should be formatted like the following
example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;trace autoflush="true" indentsize="7" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Assert1">
		<summary>
			<para>Checks for a condition and displays a message if the condition is
   <see langword="false"/>. </para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/> . </para></param>
		<param name="message"><para>A message to display.</para></param>
		<remarks>
			<para>Typically, <see cref="System.Diagnostics.Debug.Assert"/> is used to identify logic errors
   during program development. <see cref="System.Diagnostics.Debug.Assert"/>
   evaluates the condition. If the result is <see langword="false"/>, it sends diagnostic messages to the <see cref="System.Diagnostics.Debug.Listeners"/>. </para>
			<para> The default behavior displays a message box
   when the application runs in user-interface mode, and outputs the message to
   the default trace output. You can customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to,
   or removing one from, the <see cref="System.Diagnostics.Debug.Listeners"/>
   collection.</para>
			<para> To set an assert, you can also edit the configuration
   file corresponding to the name of your application. Within this file, you can enable
   and disable the assert or set the name of its log file. The configuration
   file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para> The following example checks whether the <c>type</c> parameter is valid. If the <c>type</c> passed in is <see langword="null"/> ,
<see cref="System.Diagnostics.Trace.Assert"/>
outputs a message.</para>
			<codelink SampleID="Classic Debug.Assert1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Assert2">
		<summary>
			<para> Checks for a condition and displays both specified messages if the condition
      is <see langword="false"/>. </para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/> . </para></param>
		<param name="message">A message to display.</param>
		<param name="detailMessage">A detailed message to display.</param>
		<remarks>
			<para>Typically, <see cref="System.Diagnostics.Debug.Assert"/> is used to identify logic errors
   during program development. <see cref="System.Diagnostics.Debug.Assert"/>
   evaluates the condition. If the result is <see langword="false"/>, it sends diagnostic messages to the <see cref="System.Diagnostics.Debug.Listeners"/>. </para>
			<para> The default behavior displays a message box
   when the application runs in user-interface mode, and outputs the message to
   the default trace output. You can customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to,
   or removing one from, the <see cref="System.Diagnostics.Debug.Listeners"/>
   collection.</para>
			<para> To set an assert, you can also edit the configuration
   file corresponding to the name of your application. Within this file, you can enable
   and disable the assert or set the name of its log file. The configuration
   file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para> The following example checks whether the <c>type</c> parameter is valid. If the <c>type</c> passed in is <see langword="null"/>, the
<see cref="System.Diagnostics.Trace.Assert"/>
outputs a message.</para>
			<codelink SampleID="Classic Debug.Assert2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.IndentLevel">
		<summary>
			<para>Gets or sets
      the indent level.</para>
		</summary>
		<value>
			<para>The indent level. The default is 0.</para>
		</value>
		<remarks>
			<para><see cref="System.Diagnostics.Debug"/> stores 
   this property on a per-thread/per-request basis.</para>
		</remarks>
		<example>
			<para>The following example sets the indent level and emits
      debugging messages.</para>
			<codelink SampleID="Classic Debug.IndentLevel Example" SnippetID="1"/>
			<para>This example produces the following output:</para>
			<codelink SampleID="Classic Debug.IndentLevel Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug.IndentSize"/>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.IndentSize">
		<summary>
			<para>Gets or sets the number of spaces in an indent.</para>
		</summary>
		<value>
			<para>The number of spaces in an indent. The default is four.</para>
		</value>
		<remarks>
			<para> A <see cref="System.Diagnostics.TextWriterTraceListener"/> interprets this number as spaces.
   An <see cref="T:System.Diagnostics.EventLogTraceListener"/>
   ignores this value.</para>
			<para><see cref="System.Diagnostics.Debug"/> stores 
this property on a per-thread/per-request basis.</para>
			<para>To set the <see cref="System.Diagnostics.Debug.AutoFlush"/> and <see cref="System.Diagnostics.Debug.IndentSize"/> for <see cref="System.Diagnostics.Debug"/>
, you can also edit the configuration file corresponding to the name of
your application. The configuration file should be formatted like the following
example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;trace autoflush="true" indentsize="7" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<seealso cref="System.Diagnostics.Debug.IndentLevel"/>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Flush">
		<summary>
			<para> Flushes the output buffer and causes buffered
      data to write to the <see cref="System.Diagnostics.Debug.Listeners"/>
      collection.</para>
		</summary>
		<remarks>
			<para>Flushing the stream will not flush its underlying
      encoder unless you explicitly call <see cref="System.Diagnostics.Debug.Flush"/> or <see cref="System.Diagnostics.Debug.Close"/>.
      Setting <see cref="System.Diagnostics.Debug.AutoFlush"/> to <see langword="true"/> means that data will be flushed from
      the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next
      block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character
      or characters.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TextWriterTraceListener"/> named <c>myTextListener</c>. <c>myTextListener</c> uses a <see cref="System.IO.StreamWriter"/> called <c>myOutputWriter</c> to write to a file named <c>TestFile.txt</c>
. The example creates the file, stream,
and text writer, writes one line of text to the file, and then flushes and closes the output.</para>
			<codelink SampleID="Classic Debug.Close Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Close">
		<summary>
			<para>Flushes the output buffer and then closes the <see cref="System.Diagnostics.Debug.Listeners"/>
.</para>
		</summary>
		<remarks>
			<para> Use this method when the output goes to a file, such as
      to the <see cref="System.Diagnostics.TextWriterTraceListener"/>.</para>
			<para>Flushing the stream will not flush its underlying
      encoder unless you explicitly call <see cref="System.Diagnostics.Debug.Flush"/> or <see cref="System.Diagnostics.Debug.Close"/>.
      Setting <see cref="System.Diagnostics.Debug.AutoFlush"/> to <see langword="true"/> means that data will be flushed from
      the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next
      block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character
      or characters.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TextWriterTraceListener"/> named <c>myTextListener</c>. <c>myTextListener</c> uses a <see cref="System.IO.StreamWriter"/> called <c>myOutputWriter</c> to write to a file named <c>TestFile.txt</c>
. The example creates the file, stream,
and text writer, writes one line of text to the file, and then flushes and closes the output.</para>
			<codelink SampleID="Classic Debug.Close Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Fail">
		<overload>
			<para>Emits an error message.</para>
		</overload>
		<summary>
			<para>Emits the specified error message.</para>
		</summary>
		<param name="message">A message to emit.</param>
		<remarks>
			<para> The default behavior is that the <see cref="System.Diagnostics.DefaultTraceListener"/> outputs the message to a message box when the
   application is running in user-interface mode and to the <see cref="System.Diagnostics.TraceListener"/> instances in the <see cref="System.Diagnostics.Debug.Listeners"/> collection. You can
   customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or removing one from, the <see cref="System.Diagnostics.Debug.Listeners"/>
   collection.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Diagnostics.Debug.Fail"/> method to print a message
   during exception handling.</para>
			<codelink SampleID="Classic Debug.Fail Example" SnippetID="1"/>
			<para>You can also use the <see cref="System.Diagnostics.Debug.Fail"/> method in a switch statement.</para>
			<codelink SampleID="Classic Debug.Fail Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Fail1">
		<summary>
			<para>Emits an error message and a detailed error message.</para>
		</summary>
		<param name="message">A message to emit.</param>
		<param name="detailMessage">A detailed message to emit.</param>
		<remarks>
			<para> The default behavior is that the <see cref="System.Diagnostics.DefaultTraceListener"/>
outputs the message to a message box when the application is running in
user-interface mode and to the <see cref="System.Diagnostics.TraceListener"/> instances in the <see cref="System.Diagnostics.Debug.Listeners"/> collection. You can customize this
behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or removing one from, the <see cref="System.Diagnostics.Debug.Listeners"/>
collection.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Diagnostics.Debug.Fail"/> method to print a message during
   exception handling.</para>
			<codelink SampleID="Classic Debug.Fail1 Example" SnippetID="1"/>
			<para>You can also use the <see cref="System.Diagnostics.Debug.Fail"/> method in a switch statement.</para>
			<codelink SampleID="Classic Debug.Fail1 Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Write1">
		<summary>
			<para> Writes the value of the object's <see cref="System.Object.ToString"/>
method to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection.</para>
		</summary>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/>
or higher, the example outputs the first error message to the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener
to the <see cref="System.Diagnostics.Debug.Listeners"/> collection,
see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>
class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to <see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. A line terminator follows the
second message.</para>
			<codelink SampleID="Classic Debug.Write Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Write2">
		<summary>
			<para>Writes a category name and message
      to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>Use the <paramref name="category"/> parameter to group output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/>
or higher, the example outputs the first error message to the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener
to the <see cref="System.Diagnostics.Debug.Listeners"/> collection,
see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>
class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to <see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. A line terminator follows the
second message.</para>
			<codelink SampleID="Classic Debug.Write Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Write3">
		<summary>
			<para> Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/> method to the trace
      listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection.</para>
		</summary>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>Use the <paramref name="category"/> parameter to group output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named
   <c>generalSwitch</c>
   . This
   switch is set outside of the code
   sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/> or
higher, the example outputs the first error message to the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener
to the <see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>
class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to <see langword="Verbose"/>
, the example outputs the second error message on the same line as the
first message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.Write Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLine1">
		<summary>
			<para> Writes the value of the object's <see cref="System.Object.ToString"/>
method to the
trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/>
collection.</para>
		</summary>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs the
name of the object on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLine1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLine2">
		<summary>
			<para> Writes a category name and message to the trace
      listeners in the <see cref="System.Diagnostics.Debug.Listeners"/>
      collection.</para>
		</summary>
		<param name="message">A message to write.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message and the <c>category</c>
on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLine2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLine3">
		<summary>
			<para> Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/>
   method to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/>
   collection.</para>
		</summary>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of
   <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message on the same line as the first message. The second
message is followed by a line terminator.</para>
			<codelink SampleID="Classic Debug.WriteLine3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteIf1">
		<summary>
			<para> Writes the value of the object's <see cref="System.Object.ToString"/>
method to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/>
collection if a condition is
<see langword="true"/>. </para>
		</summary>
		<param name="condition"><see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</param>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Debug.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/>,
you do not
call <see cref="System.Diagnostics.Debug.Write"/>. The second example always calls
<see cref="System.Diagnostics.Debug.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/> and no tracing
output is produced. This can result in unnecessary execution of arbitrarily complex
code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named
   <c>generalSwitch</c>
   . This
   switch is set outside of the code
   sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error"/> or higher, the example outputs the first name of the value parameter to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs a message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteIf1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteIf2">
		<summary>
			<para>Writes a category name and message
      to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/>
      collection if a condition is
   <see langword="true"/>. </para>
		</summary>
		<param name="condition"><see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</param>
		<param name="message"><para>A message to write. </para></param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Debug.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/>, you do not call <see cref="System.Diagnostics.Debug.Write"/>. The second example always calls
<see cref="System.Diagnostics.Debug.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named
   <c>generalSwitch</c>
   . This
   switch is set outside of the code
   sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Verbose"/>, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Error"/> or higher, the example outputs
the second error message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteIf2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteIf3">
		<summary>
			<para> Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/>
   method to the trace
   listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection if a condition is
<see langword="true"/>. </para>
		</summary>
		<param name="condition"><see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</param>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category"/> parameter can be used to group output messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.Write"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the performance penalty of instrumenting
   your application by using <see langword="If...Then "/>statements instead of using
<see cref="System.Diagnostics.Debug.WriteIf"/> statements. The following two code
   examples send the same debugging message. However, the first example is much
   faster when tracing is off, because if <c>mySwitch.TraceError</c>
evaluates to
<see langword="false"/>, you do not call <see cref="System.Diagnostics.Debug.Write"/>. The second example always calls
<see cref="System.Diagnostics.Debug.WriteIf"/>, even
when <c>mySwitch.TraceError</c><see langword=" "/>is <see langword="false "/>
and no tracing output is produced.
This can result in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.Write("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/> named
   <c>generalSwitch</c>
   . This
   switch is set outside of the code
   sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Verbose"/>, the example outputs the name of the <c>myObject</c> and the <c>category</c> to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/>
class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Error"/> or higher, the example outputs
the second error message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteIf3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLineIf1">
		<summary>
			<para> Writes the value of the object's <see cref="System.Object.ToString"/>
method to the
trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection if a condition is
<see langword="true"/> 
.</para>
		</summary>
		<param name="condition"><see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</param>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the
   performance penalty of instrumenting your application by using <see langword="If...Then "/>statements instead of using <see cref="System.Diagnostics.Debug.WriteLineIf"/> statements. The
   following two code examples send the same debugging message. However, the first
   example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to
<see langword="false"/>,<see langword=" "/>you do not call <see cref="System.Diagnostics.Debug.WriteLine"/>.
The second example always calls <see cref="System.Diagnostics.Debug.WriteLineIf"/>, even when <c>mySwitch.TraceError</c><see langword=" "/>is
<see langword="false "/> and no tracing output is produced. This can result
in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs the
name of the object on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLineIf1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLineIf2">
		<summary>
			<para> Writes
      a category name and message to the trace
      listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection if a condition is
   <see langword="true"/>
   .</para>
		</summary>
		<param name="condition"><see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</param>
		<param name="message">A message to write.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category "/>parameter can be used to group output
messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the
   performance penalty of instrumenting your application by using <see langword="If...Then "/>statements instead of using <see cref="System.Diagnostics.Debug.WriteLineIf"/> statements. The
   following two code examples send the same debugging message. However, the first
   example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to
<see langword="false"/>,<see langword=" "/>you do not call <see cref="System.Diagnostics.Debug.WriteLine"/>.
The second example always calls <see cref="System.Diagnostics.Debug.WriteLineIf"/>, even when <c>mySwitch.TraceError</c><see langword=" "/>is
<see langword="false "/> and no tracing output is produced. This can result
in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/>, the example outputs the second error
message and the <c>category</c>
on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLineIf2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.WriteLineIf3">
		<summary>
			<para> Writes a category name and the value of the object's
   <see cref="System.Object.ToString"/>
   method to the trace listeners in the <see cref="System.Diagnostics.Debug.Listeners"/> collection
   if a condition is <see langword="true"/>
   .</para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to cause a message to be written; otherwise, <see langword="false"/> .</para></param>
		<param name="value">An object whose name is sent to the <see cref="System.Diagnostics.Debug.Listeners"/>.</param>
		<param name="category">A category name used to organize the output.</param>
		<remarks>
			<para>By default, the output is written to an instance of <see cref="System.Diagnostics.DefaultTraceListener"/>.</para>
			<para>The <paramref name="category "/>parameter can be used to group output
messages.</para>
			<para>This method calls the <see cref="System.Diagnostics.TraceListener.WriteLine"/> method of the trace listener.</para>
			<note type="inotes">
   You can minimize the
   performance penalty of instrumenting your application by using <see langword="If...Then "/>statements instead of using <see cref="System.Diagnostics.Debug.WriteLineIf"/> statements. The
   following two code examples send the same debugging message. However, the first
   example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to
<see langword="false"/>,<see langword=" "/>you do not call <see cref="System.Diagnostics.Debug.WriteLine"/>.
The second example always calls <see cref="System.Diagnostics.Debug.WriteLineIf"/>, even when <c>mySwitch.TraceError</c><see langword=" "/>is
<see langword="false "/> and no tracing output is produced. This can result
in unnecessary execution of arbitrarily complex code.
</note>
			<para>First example.</para>
			<code>
if(mySwitch.TraceError) 
    Debug.WriteLine("aNumber = " + aNumber + " out of range");
</code>
			<para>Second example.</para>
			<code>
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");
</code>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Diagnostics.TraceSwitch"/>
named <c>generalSwitch</c>
. This
switch is set outside of the code
sample.</para>
			<para>If the switch is set to the <see cref="System.Diagnostics.TraceLevel"/><see langword="Error "/>or higher, the example outputs the first error message to
the <see cref="System.Diagnostics.Debug.Listeners"/>. For information on adding a listener to the
<see cref="System.Diagnostics.Debug.Listeners"/> collection, see the <see cref="T:System.Diagnostics.TraceListenerCollection"/> class.</para>
			<para>Then, if the <see cref="System.Diagnostics.TraceLevel"/> is set to
<see langword="Verbose"/> , the example outputs
the second error message on the same line as the first
message. A line terminator follows the second message.</para>
			<codelink SampleID="Classic Debug.WriteLineIf3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug">
		<summary>
			<para> Provides a set of methods and properties that help debug your code. This
      class
      cannot be inherited.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>If you use methods in the <see cref="System.Diagnostics.Debug"/> class to print debugging information and check
   your logic with assertions, you can make your code more robust without impacting the
   performance and code size
   of your shipping product.</para>
			<para>In Visual Studio .NET projects, creating a debug build enables <see cref="System.Diagnostics.Debug"/> . For information
on
how to disable <see cref="System.Diagnostics.Debug"/>, see the Visual
Studio
.NET documentation.</para>
			<para>In contrast, in
   Visual Studio .NET projects, <see cref="System.Diagnostics.Trace"/> is enabled by default for both release and
   debug builds, so code is generated for all trace methods in both release and debug builds. Therefore, you can use <see cref="System.Diagnostics.Trace"/> to instrument
   release builds.</para>
			<para> This class provides methods to display an <see cref="System.Diagnostics.Debug.Assert"/> dialog box, and to emit an assertion 
that will always fail. This
class provides write methods in the following variations: <see cref="System.Diagnostics.Debug.Write"/>, <see cref="System.Diagnostics.Debug.WriteLine"/>, <see cref="System.Diagnostics.Debug.WriteIf"/> and <see cref="System.Diagnostics.Debug.WriteLineIf"/>.</para>
			<para>The <see cref="System.Diagnostics.BooleanSwitch"/> and <see cref="System.Diagnostics.TraceSwitch"/> classes provide means
to dynamically control the tracing output. You can modify the values of
these switches without recompiling your application. For information on using
the configuration file to set a switch, see the <see cref="System.Diagnostics.Switch"/> class and the TraceSwitch Configuration topic in
the
Visual Studio .NET documentation.</para>
			<para>You can customize the tracing output's target by adding <see cref="System.Diagnostics.TraceListener"/> instances to or
removing instances from the <see cref="System.Diagnostics.Debug.Listeners"/>
collection. By default, the <see cref="System.Diagnostics.DefaultTraceListener"/> class emits
trace output.</para>
			<para> You
   can modify the level of indentation using the <see cref="System.Diagnostics.Debug.Indent"/> method or the <see cref="System.Diagnostics.Debug.IndentLevel"/>
   property. To modify the indent spacing, use the <see cref="System.Diagnostics.Debug.IndentSize"/> property. You can specify whether to
   automatically flush the output buffer after each write
   by setting the <see cref="System.Diagnostics.Debug.AutoFlush"/> property
   to <see langword="true"/> .</para>
			<para>To set the <see cref="System.Diagnostics.Debug.AutoFlush"/> and <see cref="System.Diagnostics.Debug.IndentSize"/> for <see cref="System.Diagnostics.Debug"/> , you can edit
the configuration file corresponding to the name of your application. The
configuration file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;trace autoflush="true" indentsize="7" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
			<note type="note">
   To enable debugging in C#, add the <see langword="/d:DEBUG"/> flag to the compiler command line when you compile your code, or add <see langword="#define DEBUG"/> to
   the top of your file. In Visual Basic, add the <see langword="/d:DEBUG=True"/> flag to the compiler command line.
   To provide equivalent functionality in the Managed Extensions for C++, you must enclose calls to methods of this class in a <see langword="#ifdef DEBUG ... #endif"/> block.
   
   This syntax is compiler-specific. If you are using a compiler other than the ones specified above, you must refer to the compiler's documentation to enable
   conditional compiling because of the conditional compilation attributes placed on the methods of <see cref="System.Diagnostics.Debug"/>.
   
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Diagnostics.Debug"/> to indicate the beginning and end of a
   program's execution. The example also uses <see cref="System.Diagnostics.Debug.Indent"/> and <see cref="System.Diagnostics.Debug.Unindent"/> to distinguish the tracing output.</para>
			<codelink SampleID="Classic Debug Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.Switch"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="T:System.Diagnostics.EventLogTraceListener"/>
		<seealso cref="System.Diagnostics.TraceListenerCollection"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
	<doc for="Debug.Assert">
		<overload>
			<para>Checks for a condition and displays a message if the condition is <see langword="false"/>.</para>
		</overload>
		<summary>
			<para>Checks for a condition and outputs the call stack if the condition is <see langword="false"/>.</para>
		</summary>
		<param name="condition"><para>
				<see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/> . </para></param>
		<remarks>
			<para><see cref="System.Diagnostics.Debug.Assert"/>
outputs the call stack with
file and line numbers for each line in the call stack.</para>
			<para>Typically, <see cref="System.Diagnostics.Debug.Assert"/> is used to identify logic errors during program
development. <see cref="System.Diagnostics.Debug.Assert"/> evaluates the condition.
If the result is <see langword="false"/>, it sends diagnostic messages to the <see cref="System.Diagnostics.Debug.Listeners"/>. </para>
			<para> The default behavior
   displays a message box when the application runs in user-interface mode, and outputs the message
   to the default trace output. You can customize this behavior by adding a <see cref="System.Diagnostics.TraceListener"/> to, or removing
   one from, the <see cref="System.Diagnostics.Debug.Listeners"/>
   collection.</para>
			<para> To set an assert, you can also edit the configuration
   file corresponding to the name of your application. Within this file, you can enable
   and disable the assert or set the name of its log file. The configuration
   file should be formatted like the following example:</para>
			<code>
&lt;configuration&gt;
    &lt;system.diagnostics&gt;
       &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
    &lt;/system.diagnostics&gt;
 &lt;/configuration&gt;
</code>
		</remarks>
		<example>
			<para>The following example creates an index for an array. Then some action is
      performed that sets the value of the index. Next the code calls <see cref="System.Diagnostics.Debug.Assert"/> to confirm the index value
      is valid. If it is not valid, <see cref="System.Diagnostics.Debug.Assert"/> outputs the call stack.</para>
			<codelink SampleID="Classic Debug.Assert Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Debug"/>
		<seealso cref="System.Diagnostics.Trace"/>
		<seealso cref="System.Diagnostics.BooleanSwitch"/>
		<seealso cref="System.Diagnostics.TraceSwitch"/>
		<seealso cref="System.Diagnostics.TraceListener"/>
		<seealso cref="System.Diagnostics.DefaultTraceListener"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
		<seealso cref="System.Diagnostics.ConditionalAttribute"/>
	</doc>
</docs>
