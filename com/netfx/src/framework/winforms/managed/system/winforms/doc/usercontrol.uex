<docs>
	<doc for="UserControl.OnCreateControl">
		<nodoc/>
		<summary>
			<para> Raises the CreateControl event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UserControl.OnCreateControl"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UserControl.OnCreateControl"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UserControl.OnCreateControl"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
	</doc>
	<doc for="UserControl.OnMouseDown">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.WndProc">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.Load">
		<summary>
			<para>Occurs before the control becomes visible for the first time.</para>
		</summary>
		<remarks>
			<para>You can use this event to perform tasks such as allocating resources used by the
      control.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.UserControl.OnLoad"/>
		<seealso cref="System.Windows.Forms.Form.Load" qualify="true"/>
	</doc>
	<doc for="UserControl.Text">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.UserControl">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.UserControl"/> class.</para>
		</summary>
		<remarks>
			<para>You do not typically create an instance of <see cref="System.Windows.Forms.UserControl"/>. To create your own user
   control class, inherit from the <see cref="System.Windows.Forms.UserControl"/> class.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the <see cref="System.Windows.Forms.UserControl"/>
derived class, <c>MyCustomerInfoUserControl</c>, which was created in the example section of the <see cref="System.Windows.Forms.UserControl"/>
class overview. The user control is added to a <see cref="System.Windows.Forms.Panel"/> control and has its <see cref="System.Windows.Forms.Control.Dock"/>
property set to <see cref="System.Windows.Forms.DockStyle.Fill" qualify="true"/>. The <see cref="System.Windows.Forms.Panel"/> is
then added to a <see cref="System.Windows.Forms.Form"/> . </para>
			<codelink SampleID="Classic UserControl.UserControl Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UserControl.OnLoad">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.UserControl.Load"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.UserControl.Load"/> event occurs after the control is created, but before the control becomes
   visible for the first time.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UserControl.OnLoad"/> method also allows derived classes
to handle the event without attaching a delegate. This is the preferred
technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.UserControl.OnLoad"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UserControl.OnLoad"/> method so that registered delegates
   receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.UserControl.Load"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="UserControl.TextChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl">
		<summary>
			<para> Provides an empty control that can be used
      to create other controls.</para>
		</summary>
		<remarks>
			<para>By extending <see cref="System.Windows.Forms.ContainerControl"/>, <see cref="System.Windows.Forms.UserControl"/> inherits all
   the standard positioning and mnemonic-handling code that is necessary in a user
   control.</para>
			<para>The <see cref="System.Windows.Forms.UserControl"/> gives you
the ability to create controls that can be used in multiple places within
an application or organization. You can include all the code needed for validation of
common data you ask the user to input; some examples of this are e-mail addresses
(see Example section), telephone numbers, and postal codes. Another
efficient use of the user control is to simply preload a <see cref="System.Windows.Forms.ComboBox"/>
or <see cref="System.Windows.Forms.ListBox"/> with static items you commonly use in
almost every application; some examples of this are countries/regions, cities, states,
and office locations.</para>
			<note type="note">
   You might consider creating
   a namespace that contains several classes of user controls and compiling
   it into one DLL. This DLL can be referenced and distributed with the application
   or all applications within an organization. This gives you the ability to
   reference the user control in many applications and save time laying out and coding
   the contained elements of the user control. A user control also gives
   you consistency within or across applications; for example, all address
   information input blocks will all have the same appearance and behavior. Consistency gives
   your application a more polished and professional appearance.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.UserControl"/> that can be reused
   in multiple applications to get user information. This example adds
   several <see cref="System.Windows.Forms.Label"/> controls, <see cref="System.Windows.Forms.TextBox"/> controls and an <see cref="System.Windows.Forms.ErrorProvider"/> object to the <see cref="System.Windows.Forms.UserControl"/> to gather the user's
   information. Additionally, the user's e-mail address is validated in the
<see cref="System.Windows.Forms.Control.Validating"/> event of the <see cref="System.Windows.Forms.TextBox"/> 
and the <see cref="System.Windows.Forms.ErrorProvider"/> object is used to give the user feedback
if the data fails validation. The code is intended to be compiled into
a DLL for reference in other applications. </para>
			<codelink SampleID="Classic UserControl Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ContainerControl"/>
		<seealso cref="System.Windows.Forms.Form"/>
	</doc>
</docs>
