<docs>
	<doc for="AccessibleEvents.ParentChange">
		<summary>
			<para>An object has a new parent object. Server applications 
      send this event for their accessible objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemDragDropStart">
		<summary>
			<para>An application is about to enter drag-and-drop mode. 
      Applications that support drag-and-drop operations must send this event; the
      system does not.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemDragDropEnd">
		<summary>
			<para>An application is about to exit drag-and-drop mode. 
      Applications that support drag-and-drop operations must send this event; the
      system does not.</para>
		</summary>
	</doc><doc for="AccessibleEvents.NameChange">
		<summary>
			<para>An object's <see cref="System.Windows.Forms.AccessibleObject.Name"/> property changed. The system sends this
   event for the following user interface elements: check box, cursor, list view
   control, push button, radio button, status bar control, tree view control, and
   window object. Server applications send this event for their accessible objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.DescriptionChange">
		<summary>
			<para>An object's <see cref="System.Windows.Forms.AccessibleObject.Description"/> property changed. Server
   applications send this event for their accessible objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.Destroy">
		<summary>
 An object was destroyed. The system sends this event for
 the following user interface elements: caret, header control, list view control,
 tab control, toolbar control, tree view control, and window object. Server
 applications send this event for their accessible objects. This event may or may
 not be sent for child objects. However, clients can assume that all the children
 of an object have been destroyed when the parent object sends this event.
</summary>
	</doc><doc for="AccessibleEvents.Focus">
		<summary>
 An object has received the keyboard focus. The system
 sends this event for the following user interface elements: list view control,
 menu bar, shortcut menu, switch window, tab control, tree view control, and window
 object. Server applications send this event for their accessible objects.
</summary>
	</doc><doc for="AccessibleEvents.SelectionAdd">
		<summary>
 An item within a container object was added to the
 selection. The system sends this event for the following user interface
 elements: list box, list view control, and tree view control. Server
 applications send this event for their accessible objects. This event signals
 that a child has been added to an existing selection.
</summary>
	</doc><doc for="AccessibleEvents.SelectionRemove">
		<summary>
 An item within a container object was removed from the
 selection. The system sends this event for the following user interface
 elements: list box, list view control, and tree view control. Server
 applications send this event for their accessible objects. This event signals
 that a child has been removed from an existing selection.
</summary>
	</doc><doc for="AccessibleEvents.SystemForeground">
		<summary>
			<para>The foreground window changed. The system sends this 
 event even if the foreground window is changed to another window in the same
 thread. Server applications never
 
 send this event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMenuEnd">
		<summary>
 A menu from the menu bar was closed. The system sends
 this event for standard menus. Servers send this event for custom menus.
</summary>
	</doc><doc for="AccessibleEvents.SystemSwitchStart">
		<summary>
			<para> The user pressed ALT+TAB, which activates the
 switch window. If only one application is running when the user presses ALT+TAB,
 the system raises the <see langword="SwitchEnd"/> event without a corresponding
 <see langword="SwitchStart"/> event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.ValueChange">
		<summary>
			<para>An object's <see cref="System.Windows.Forms.AccessibleObject.Value"/> property changed. The 
 system raises the <see langword="ValueChange"/>
 event for the following user interface elements: edit control, header
 control, hot key control, progress bar control, scroll bar, slider control, and
 up-down control. Server applications send this event for their accessible objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.HelpChange">
		<summary>
			<para>An object's <see cref="System.Windows.Forms.AccessibleObject.Help"/> property changed. Server applications
   send this event for their accessible objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.AcceleratorChange">
		<summary>
			<para>An object's <see cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/> property changed. Server
   applications send the event for their accessible objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemContextHelpStart">
		<summary>
   A window entered context-sensitive Help mode. The system
   does not send the event consistently. 
</summary>
	</doc><doc for="AccessibleEvents.SystemContextHelpEnd">
		<summary>
   A window exited context-sensitive Help mode. The system
   does not send the event consistently. 
</summary>
	</doc><doc for="AccessibleEvents.Reorder">
		<summary>
			<para> A container object has added, removed, or
      reordered its children. The system sends this event for the following
      user interface elements: header control, list view control, toolbar control, and window object. Server applications
      send this event as appropriate for their accessible objects. This event is also sent by
      a parent window when the z order for the child windows changes.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SelectionWithin">
		<summary>
			<para>Numerous selection changes occurred within a container object.
      The system sends this event for list boxes. Server applications send this
      event for their accessible objects. This event can be sent when the selected
      items within a control have changed substantially. This event informs the
      client that many selection changes have occurred. This is preferable to sending
      several <see langword="SelectionAdd"/>
      or <see langword="SelectionRemove"/>
      
      events.</para>
		</summary>
	</doc><doc for="AccessibleEvents.StateChange">
		<summary>
			<para> An object's state has changed. The system
      sends the event for the following user interface elements: check box, combo
      box, header control, push button, radio button, scroll bar, toolbar control,
      tree view control, up-down control, and window object. Server applications send
      the event for their accessible objects. For example, a state change can occur
      when a button object has been pressed or released, or when
      
      an object is being enabled or disabled. The system
      does not send the event consistently. </para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemSound">
		<summary>
			<para>A sound was played. The system sends this event when a
      system sound, such as for menus, is played, even if no sound is audible. This
      might be caused by lack of a sound file or sound card. Servers send this event
      if a custom user interface element generates a sound.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMenuPopupStart">
		<summary>
   A shortcut menu was displayed. The system sends this event
   for standard menus. Servers send this event for custom menus. The system does
   not send the event consistently. 
</summary>
	</doc><doc for="AccessibleEvents.SystemMenuPopupEnd">
		<summary>
   A shortcut menu was closed. The system sends this event
   for standard menus. Servers send this event for custom menus. When a shortcut menu
   is closed, the client receives this message followed almost immediately by the
<see langword="SystemMenuEnd"/> event. The system does not 
   send the event consistently. 
</summary>
	</doc><doc for="AccessibleEvents.SystemCaptureEnd">
		<summary>
			<para> A window has lost mouse capture. The system
      sends the event; servers never send this event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMoveSizeStart">
		<summary>
			<para> A window is being moved or resized. The system
      sends the event; servers never send this event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMoveSizeEnd">
		<summary>
			<para> The movement or resizing of a window is finished. The system sends the
      event; servers never send this event. </para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemDialogStart">
		<summary>
   A dialog box was displayed. The system sends
   the event for standard dialog boxes. Servers send this event for custom
   dialog boxes. The system does not send the event consistently. 
</summary>
	</doc><doc for="AccessibleEvents.SystemDialogEnd">
		<summary>
			<para> A dialog box was closed. The system does not send the
      event for standard dialog boxes. Servers send this event for custom dialog
      boxes. The system does not send the event consistently. </para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemScrollingEnd">
		<summary>
			<para>Scrolling has ended on a scroll bar. The system sends this event for scroll 
      bars attached to a window and for standard scroll bar controls. Servers send
      this event for custom scroll bars.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemSwitchEnd">
		<summary>
			<para>The user released ALT+TAB. The system sends the
   <see langword="SwitchEnd"/> event; servers never send this
      event. If only one application is running when the user presses ALT+TAB, the
      system sends the <see langword="SwitchEnd"/> event without a corresponding
   <see langword="SwitchStart"/>
   
   event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMinimizeStart">
		<summary>
			<para> A window object is about to be
      minimized or maximized. The system sends the event; servers never send this event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMinimizeEnd">
		<summary>
			<para> A window object was minimized or
      maximized. The system sends the event; servers never send this event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemCaptureStart">
		<summary>
			<para> A window is being moved or resized. The system sends
      the event; servers never send this event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemScrollingStart">
		<summary>
			<para> Scrolling has started on a scroll bar. The
      system sends the event for scroll bars attached to a window
      
      and for standard scroll
      bar controls. Servers send this event for custom scroll bars.</para>
		</summary>
	</doc><doc for="AccessibleEvents.Hide">
		<summary>
			<para> 
      An
      object
      
      is hidden. The system sends the event for the following
      user interface elements: caret and cursor. Server applications send the event for their
      accessible objects. When the event is generated for a parent object,
      all child objects have already been hidden. Therefore, server
      applications do not need to send the event for the child objects. The
      system does not send the event consistently. </para>
		</summary>
	</doc><doc for="AccessibleEvents.Selection">
		<summary>
			<para> An accessible object within a container object
      has been selected. This event signals a single selection. Either a child has been
      selected in a container that previously did not contain any selected children, or
      the selection has changed from one child to another.</para>
		</summary>
	</doc><doc for="AccessibleEvents.LocationChange">
		<summary>
			<para> An object has changed location, shape,
      or size. The system sends this event for the following user interface
      elements: caret and window object. Server applications send this event for
      their accessible objects. This event is generated in response to the top-level object
      within the object hierarchy that has changed, not for any children it might
      contain. For example, if the user resizes a window, the system sends this notification
      for the window, but not for the menu bar, title bar, scroll bars, or other
      objects that have also changed. The system does not send this event for
      every non-floating child window when the parent moves. However, if an
      application explicitly resizes child windows as a result of being resized, the system sends multiple
      events for the resized children. If an object's <see cref="System.Windows.Forms.AccessibleObject.State"/> property is set to
   <see cref="System.Windows.Forms.AccessibleStates.Floating" qualify="true"/>
   , servers should send a location change
   event whenever the object changes location. If an object
   does not have this state, servers should raise this event when the object moves
   relative to its parent.</para>
		</summary>
	</doc><doc for="AccessibleEvents.Create">
		<summary>
			<para>An object was created. The operating system sends the event for
      the following user interface elements: caret, header control, list view control,
      tab control, toolbar control, tree view control, and window object. Server
      applications send this event for their accessible objects. Servers must send
      this event for all an object's child objects before sending the event for the
      parent object. Servers must ensure that all child objects are fully created and
      ready to accept calls from clients when the parent object sends the event.</para>
		</summary>
	</doc><doc for="AccessibleEvents.Show">
		<summary>
			<para>A hidden object is being shown. The system sends this
      event for the following user interface elements: caret, cursor, and window
      object. Server applications send this event for their accessible objects.
      Clients can assume that, when this event is sent by a parent object, all child
      objects have already been displayed. Therefore, server applications do not need
      to send this event for the child objects.</para>
		</summary>
	</doc><doc for="AccessibleEvents.DefaultActionChange">
		<summary>
			<para>An object's <see cref="System.Windows.Forms.AccessibleObject.DefaultAction"/> property changed. The
   system sends this event for dialog boxes. Server applications send this event
   for their accessible objects. Therefore, server applications do not need to send
   this event for the child objects. Hidden objects have a state
   of <see cref="System.Windows.Forms.AccessibleStates.Invisible" qualify="true"/>, and shown objects do not. Events of type
<see langword="AccessibleEvents.Hide"/> indicate that a state of 
<see cref="System.Windows.Forms.AccessibleStates.Invisible" qualify="true"/> has been set. Therefore, servers do not 
   need to send the <see langword="AccessibleEvents.StateChange"/>
   event in
   this case.</para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemAlert">
		<summary>
			<para> 
      An alert was generated. Server applications send this event whenever an important
      user interface change has occurred that a user might need to know about. The system
      does not send the event consistently for dialog box objects. </para>
		</summary>
	</doc><doc for="AccessibleEvents.SystemMenuStart">
		<summary>
			<para> A menu item on the menu bar was selected. The
      system sends this event for standard menus. Servers send this event for custom
      menus. The system might raise more than one <see langword="MenuStart"/> event that
      might or might not have a corresponding <see langword="MenuEnd"/>
      
      event.</para>
		</summary>
	</doc>
	<doc for="AccessibleEvents">
		<summary>
			<para>Specifies events that are reported by accessible
      applications.</para>
		</summary>
		<remarks>
			<para> The operating system and accessibility server applications generate accessibility events in response to changes in the user interface.</para>
			<para>This enumeration is used by <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control"/>.</para>
			<para>For additional information on the accessibility application, search for "Microsoft Active
   Accessibility" in the MSDN Library.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.AccessibleEvents"/> enumeration with the <see cref="System.Windows.Forms.Control.AccessibilityNotifyClients"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="5"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleNavigation"/>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
		<seealso cref="System.Windows.Forms.AccessibleRole"/>
		<seealso cref="System.Windows.Forms.AccessibleSelection"/>
		<seealso cref="System.Windows.Forms.AccessibleStates"/>
	</doc>
</docs>
