<docs>
	<doc for="BindingContext.ICollection.Count">
		<summary>
			<para>Gets the total number of <see cref="System.Windows.Forms.CurrencyManager"/> objects managed by the <see cref="System.Windows.Forms.BindingContext"/>
 .</para>
		</summary>
		<value>
			<para>The number of data sources managed by the <see cref="System.Windows.Forms.BindingContext"/>
 .</para>
		</value>
		<example>
			<para>The following example returns the number of <see cref="System.Windows.Forms.CurrencyManager"/>
 objects managed by the <see cref="System.Windows.Forms.BindingContext"/>.</para>
			<codelink SampleID="Classic BindingContext.ICollection.Count Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BindingContext.ICollection.CopyTo">
		<summary>
			<para>Copies the elements of the collection into a specified array, starting
       at the collection index.</para>
		</summary>
		<param name="ar">An <see cref="T:System.Array"/> to copy into.</param>
		<param name=" index">The collection index to begin copying from.</param>
		<example>
			<codelink SampleID="Classic BindingContext.ICollection.CopyTo Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BindingContext.IsReadOnly">
		<internalonly/>
		<summary>
			<para>
       Gets a value indicating whether the collection is read-only.
    </para>
		</summary>
		<value>
			<para>
				<see langword="true"/>, if the collection is read-only; 
       otherwise, <see langword="false"/>.
    </para>
		</value>
		<remarks>
			<para>
       The property is derived from <see cref="System.Collections.ICollection"/>, and is overridden to always return
       false.
    </para>
		</remarks>
	</doc>
	<doc for="BindingContext.ICollection.IsSynchronized">
		<summary>
			<para>
       Gets a value indicating whether the collection is synchronized.
    </para>
		</summary>
		<value>
			<para>
				<see langword="true"/>, if the collection is thread-safe; otherwise, 
    <see langword="false"/>. 
    </para>
		</value>
		<remarks>
			<para>
       The property is derived from <see cref="System.Collections.ICollection"/>, and is overridden to always return false.
    </para>
		</remarks>
	</doc>
	<doc for="BindingContext.ICollection.SyncRoot">
		<summary>
			<para>Gets an object to use for synchronization (thread safety).</para>
		</summary>
		<value>
			<para>The property is derived from <see cref="System.Collections.ICollection"/>, and is overridden to always return 
 <see langword="null"/> 
 .</para>
		</value>
	</doc>
	<doc for="BindingContext.AddCore">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindingContext.ClearCore">
		<internalonly/>
		<summary>
			<para>Clears the collection.</para>
		</summary>
	</doc>
	<doc for="BindingContext.HashKey">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindingContext.HashKey.GetHashCode">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindingContext.HashKey.Equals">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindingContext.OnCollectionChanged">
		<internalonly/>
		<summary>
    This method is called whenever the collection changes.  Overriders
    of this method should call the base implementation of this method.
 </summary>
		<param name="ccevent">
    The event information.
 </param>
	</doc>
	<doc for="BindingContext.RemoveCore">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="BindingContext.BindingContext">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.BindingContext"/> class.</para>
		</summary>
		<remarks>
			<para> Create a new <see cref="System.Windows.Forms.BindingContext"/> and set it to the <see cref="System.Windows.Forms.BindingContext"/> property of an object that inherits from
<see cref="System.Windows.Forms.Control"/> when you want 
   to have multiple <see cref="System.Windows.Forms.BindingManagerBase"/>
   instances for the same data source.</para>
			<para>For example, if you have two <see cref="System.Windows.Forms.BindingManagerBase"/> objects (from two
different <see cref="System.Windows.Forms.BindingContext"/> objects), you can set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> properties of each <see cref="System.Windows.Forms.BindingManagerBase"/> to different values causing each set of
data-bound controls will display different values from the same data
source. </para>
		</remarks>
		<example>
			<para>The following example creates two new <see cref="System.Windows.Forms.BindingContext"/> objects, and assigns each object to the
<see cref="System.Windows.Forms.BindingContext"/> property of a <see cref="System.Windows.Forms.GroupBox"/> 
control. <see langword="GroupBox1 "/>contains <see langword="TextBox1"/>, and
<see langword="GroupBox2 "/>contains <see langword="TextBox2"/> (which is accomplished by using the 
<see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> method of the 
<see cref="System.Windows.Forms.Control.ControlCollection"/>). The example then adds <see cref="System.Windows.Forms.Binding"/>
objects to the two <see cref="System.Windows.Forms.TextBox"/> controls, binding each to the same data
source and data member. The example also shows two event handlers that use the
<see cref="System.Windows.Forms.BindingContext"/> from the <see cref="System.Windows.Forms.GroupBox"/> controls to set the 
<see cref="System.Windows.Forms.BindingManagerBase.Position"/> property on different <see cref="System.Windows.Forms.BindingManagerBase"/> objects.</para>
			<codelink SampleID="Classic BindingContext.BindingContext Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase"/>
	</doc>
	<doc for="BindingContext.CollectionChanged"><nodoc/>
		<summary>
			<para> Occurs when the collection has changed.
      </para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.ComponentModel.CollectionChangeEventHandler"/> delegate to the <see cref="System.Windows.Forms.BindingContext.CollectionChanged"/> event.</para>
			<codelink SampleID="Classic BindingContext.CollectionChanged Example" SnippetID="1"/>
		</example>
	</doc><doc for="BindingContext.Clear">
		<summary>
			<para>Clears the collection of any <see cref="System.Windows.Forms.BindingManagerBase"/> 
objects.</para>
		</summary>
	</doc><doc for="BindingContext.Contains">
		<overload>
			<para>Gets a value indicating whether the <see cref="System.Windows.Forms.BindingContext"/> contains the specified <see cref="System.Windows.Forms.BindingManagerBase"/>
.</para>
		</overload>
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Windows.Forms.BindingContext"/> contains the <see cref="System.Windows.Forms.BindingManagerBase"/> associated with
   the specified
   data source.</para>
		</summary>
		<param name="dataSource">An <see cref="System.Object"/> that represents the data source.</param>
		<returns>
			<para><see langword="true"/>, if the <see cref="System.Windows.Forms.BindingContext"/> contains the
   specified <see cref="System.Windows.Forms.BindingManagerBase"/>
   ; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>See the <see cref="System.Windows.Forms.Binding"/> class for a list of possible data sources
   and details on creating bindings between controls and data sources.</para>
			<para> See the <see cref="System.Windows.Forms.BindingContext.this"/> property for details on
returning a <see cref="System.Windows.Forms.BindingManagerBase"/> object using
only a data source.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.BindingContext.Contains"/> method to determine whether
   a <see cref="System.Windows.Forms.BindingManagerBase"/> exists for
   each control on a form. The example passes each <see cref="System.Data.DataTable"/> in a
<see cref="System.Data.DataSet"/> 
to the method.</para>
			<codelink SampleID="Classic BindingContext.Contains Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingContext.this"/>
	</doc><doc for="BindingContext.Contains1">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Windows.Forms.BindingContext"/> contains the <see cref="System.Windows.Forms.BindingManagerBase"/> associated with
   the specified data source and data member.</para>
		</summary>
		<param name="dataSource">An <see cref="System.Object"/> that represents the data source. </param>
		<param name=" dataMember">The information needed to resolve to a specific <see cref="System.Windows.Forms.BindingManagerBase"/>.</param>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Windows.Forms.BindingContext"/> contains the
   specified <see cref="System.Windows.Forms.BindingManagerBase"/>
   ; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>See the <see cref="System.Windows.Forms.Binding"/> class for a list of possible data sources and
   for details on creating bindings between controls and data sources.</para>
			<para>See the <see cref="System.Windows.Forms.BindingContext.this"/> property for details on
returning a <see cref="System.Windows.Forms.BindingManagerBase"/>
object using a data source and data member.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.BindingContext.Contains"/> method to test whether a
   specific <see cref="System.Windows.Forms.BindingManagerBase"/> exists before attempting to get it through
   the <see cref="System.Windows.Forms.BindingContext.this"/> property.</para>
			<codelink SampleID="Classic BindingContext.Contains1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingContext.this"/>
	</doc><doc for="BindingContext.Remove">
		<summary>
			<para> Deletes the <see cref="System.Windows.Forms.BindingManagerBase"/>
associated with the specified data source.</para>
		</summary>
		<param name="dataSource">The data source associated with the <see cref="System.Windows.Forms.BindingManagerBase"/> to remove. </param>
	</doc><doc for="BindingContext.Add">
		<summary>
			<para> Adds the <see cref="System.Windows.Forms.BindingManagerBase"/>
associated with a specific data source
to the collection.</para>
		</summary>
		<param name="dataSource">The <see cref="System.Object"/> associated with the <see cref="System.Windows.Forms.BindingManagerBase"/> .</param>
		<param name=" listManager">The <see cref="System.Windows.Forms.BindingManagerBase"/> to add.</param>
	</doc><doc for="BindingContext">
		<summary>
			<para>Manages the collection of <see cref="System.Windows.Forms.BindingManagerBase"/> objects for any object that inherits from the
<see cref="System.Windows.Forms.Control"/> class.</para>
		</summary>
		<remarks>
			<para>Each object that inherits from the <see cref="System.Windows.Forms.Control"/> class can have a single <see cref="System.Windows.Forms.BindingContext"/> object. That
<see cref="System.Windows.Forms.BindingContext"/> manages the <see cref="System.Windows.Forms.BindingManagerBase"/> objects for that control and 
   any contained controls. Use the <see cref="System.Windows.Forms.BindingContext"/> to create or return
   the <see cref="System.Windows.Forms.BindingManagerBase"/>
   for a data source used by the contained data-bound controls. Most commonly, you use the <see cref="System.Windows.Forms.Form"/> class's <see cref="System.Windows.Forms.BindingContext"/> to return <see cref="System.Windows.Forms.BindingManagerBase"/> objects for the
   data-bound controls on the form. If you use a container control, such as a
<see cref="System.Windows.Forms.GroupBox"/>, <see cref="System.Windows.Forms.Panel"/>, or <see cref="System.Windows.Forms.TabControl"/>, 
   to contain data-bound controls, you can create a <see cref="System.Windows.Forms.BindingContext"/> for just that
   container control and its controls. This allows
   each part of your form to be managed by its own <see cref="System.Windows.Forms.BindingManagerBase"/>
   object. See the <see cref="M:System.Windows.Forms.BindingContext.#ctor"/> constructor for more details on creating
   multiple <see cref="System.Windows.Forms.BindingManagerBase"/>
   objects for the same
   data source.</para>
			<para>To return a particular <see cref="System.Windows.Forms.BindingManagerBase"/> object, you
must pass one of the following parameters to the <see cref="System.Windows.Forms.BindingContext.this"/>
property:</para>
			<list type="bullet"><item>
					<term>
      
      Just the data source, if the desired <see cref="System.Windows.Forms.BindingManagerBase"/>
      does not require a navigation path. For
      example, if the <see cref="System.Windows.Forms.BindingManagerBase"/> manages a set of <see cref="System.Windows.Forms.Binding"/>
      objects that use an <see cref="System.Collections.ArrayList"/> or <see cref="System.Data.DataTable"/> as the <see cref="System.Windows.Forms.Binding.DataSource"/>, no
      navigation path is required. (See below for more information about creating a
      navigation path.)</term>
				</item>
				<item>
					<term>
      
      The data source and navigation path. A navigation
      path (set to the <see cref="System.Windows.Forms.BindingContext.this"/>
      
      property's <paramref name="dataMember "/>
      
      parameter) is required when the <see cref="System.Windows.Forms.BindingManagerBase"/> manages a set of
   <see cref="System.Windows.Forms.Binding"/> objects for
      which the data source contains
      multiple objects. For example, a <see cref="System.Data.DataSet"/> can contain several <see cref="System.Data.DataTable"/> objects
      linked by <see cref="System.Data.DataRelation"/> objects. In such a case, the navigation path is
      required to enable the <see cref="System.Windows.Forms.BindingContext"/> to return the correct <see cref="System.Windows.Forms.BindingManagerBase"/>
      
      .</term>
				</item>
			</list>
			<para>See the <see cref="System.Windows.Forms.Binding"/> class for a list of possible data sources.</para>
			<para>Because the <see cref="System.Windows.Forms.BindingManagerBase"/> class is abstract,
the <see cref="System.Type"/>
of the returned object is either a <see cref="System.Windows.Forms.CurrencyManager"/> or a <see cref="System.Windows.Forms.PropertyManager"/>. If the data source is an object that can
return only a single property (instead of a list of objects), the <see cref="System.Type"/>
will be a
<see cref="System.Windows.Forms.PropertyManager"/>. For example, if you specify a <see cref="System.Windows.Forms.TextBox"/> as 
the data source, a <see cref="System.Windows.Forms.PropertyManager"/> will be
returned. On the other hand, if the data source is an object that implements
<see cref="System.Collections.IList"/> or <see cref="System.ComponentModel.IBindingList"/>, a <see cref="System.Windows.Forms.CurrencyManager"/> will be returned.</para>
			<para>If the desired <see cref="System.Windows.Forms.BindingManagerBase"/> manages a list, the
navigation path must also end with a list. For example, the C# code below binds
a <see cref="System.Windows.Forms.TextBox"/> control to the
order date in a table of orders by adding new <see cref="System.Windows.Forms.Binding"/>
object to the <see cref="System.Windows.Forms.ControlBindingsCollection"/>
. The navigation path includes the <see cref="System.Data.DataTable.TableName"/>, the <see cref="System.Data.DataRelation.RelationName"/>, and the <see cref="System.Data.DataColumn.ColumnName"/>. The second
line uses the <see cref="System.Windows.Forms.BindingContext"/>to return a <see cref="System.Windows.Forms.BindingManagerBase"/> -- retrieved by passing the <see cref="System.Data.DataTable.TableName"/>
and <see cref="System.Data.DataRelation.RelationName"/> (which
resolves to a list) to the <see cref="System.Windows.Forms.BindingContext.this"/> property.</para>
			<code>
/* Create a new Binding object and add to the ControlBindingsColllection.
The navigation path (Customers.custOrders.OrderDate) used to 
create a Binding ends with a property. */
textBox1.DataBindings.Add
("Text", dataSet1, "Customers.custToOrders.OrderDate");

/* The navigation path (Customers.custToOrders) used to 
return the BindingManagerBase ends with a list. */
BindingManagerBase bmOrders = 
this.BindingContext[dataSet1, "Customers.custToOrders"];
</code>
			<para>When returning a <see cref="System.Windows.Forms.BindingManagerBase"/> , you should use the same data
source as the <see cref="System.Windows.Forms.Binding"/> and modify only the navigation path. The
following C# code seems to return the same <see cref="System.Windows.Forms.BindingManagerBase"/>, but the results are different:</para>
			<code>
BindingManagerBase bmCustomers = this.BindingContext
[myDataSet, "Customers"];

// This returns a different BindingManagerBase:
BindingManagerBase bmOther = this.BindingContext
[myDataSet.Tables[Customers], ""];

// This line returns true.
Console.WriteLine(bmCustomers != bmOther);
</code>
			<para>For each object passed to the <see cref="System.Windows.Forms.BindingContext"/>, a different <see cref="System.Windows.Forms.BindingManagerBase"/> object is returned. In the example above,
the objects passed to the <see cref="System.Windows.Forms.BindingContext.this"/> property are different,
and therefore the <see cref="System.Windows.Forms.BindingManagerBase"/> returned for each object is
different.</para>
			<note type="note">
   When using the <see cref="System.Windows.Forms.BindingContext.this"/> property, the <see cref="System.Windows.Forms.BindingContext"/> will create a new <see cref="System.Windows.Forms.BindingManagerBase"/> if one does not already exist. This can
   lead to some confusion, as the returned object may not manage the list (or any
   list) that you intend. To prevent returning an invalid <see cref="System.Windows.Forms.BindingManagerBase"/>
   
   , use the <see cref="System.Windows.Forms.BindingContext.Contains"/> method to determine if the
   desired <see cref="System.Windows.Forms.BindingManagerBase"/> already
   exists.
</note>
		</remarks>
		<example>
			<para>The following example creates four <see cref="System.Windows.Forms.Binding"/> objects to bind
   five controls--a <see cref="System.Windows.Forms.DateTimePicker"/> and four <see cref="System.Windows.Forms.TextBox"/> controls--to several data
   sources. The <see cref="System.Windows.Forms.BindingContext"/> is then used to get the <see cref="System.Windows.Forms.BindingManagerBase"/> for each data source.</para>
			<codelink SampleID="Classic BindingContext Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase"/>
		<seealso cref="System.Windows.Forms.Binding"/>
		<seealso cref="System.Windows.Forms.BindingsCollection"/>
	</doc><doc for="BindingContext.this">
		<overload>
			<para> Gets a <see cref="System.Windows.Forms.BindingManagerBase"/> .</para>
		</overload>
		<summary>
			<para>Gets the <see cref="System.Windows.Forms.BindingManagerBase"/> that is
   associated with the specified data source.</para>
		</summary>
		<param name="dataSource">The data source associated with a particular <see cref="System.Windows.Forms.BindingManagerBase"/>.</param>
		<value>
			<para>A <see cref="System.Windows.Forms.BindingManagerBase"/> for the specified data source.</para>
		</value>
		<remarks>
			<para> Use this overload if the <see cref="System.Windows.Forms.BindingManagerBase"/> you want does not require a
   navigation path. For example, if the <see cref="System.Windows.Forms.BindingManagerBase"/> manages a set of <see cref="System.Windows.Forms.Binding"/>
   objects that use an <see cref="System.Collections.ArrayList"/> or <see cref="System.Data.DataTable"/> as the <see cref="System.Windows.Forms.Binding.DataSource"/>, no navigation path is
   required.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.BindingContext.this"/> property will always return a <see cref="System.Windows.Forms.BindingManagerBase"/>, and never
   return <see langword="null"/> .
</note>
			<para>See the <see cref="System.Windows.Forms.Binding"/> class for a list of possible data sources and for
details on creating bindings between controls and data sources.</para>
		</remarks>
		<example>
			<para>The following example returns three <see cref="System.Windows.Forms.BindingManagerBase"/> objects: one for a <see cref="System.Data.DataView"/>, one for an
<see cref="System.Collections.ArrayList"/>, and one for the 
<see cref="System.Windows.Forms.Binding.DataSource"/> of a <see cref="System.Windows.Forms.Binding"/> object that belongs to a 
<see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic BindingContext.this Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingsCollection"/>
		<seealso cref="System.Windows.Forms.Binding"/>
	</doc><doc for="BindingContext.IEnumerable.GetEnumerator">
		<internalonly/>
		<summary>
			<para>Gets an enumerator for the collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> for the collection.</para>
		</returns>
		<remarks>
			<para>The <see cref="T:System.Collections.IEnumerator"/> returned by System.Windows.Forms.BindingContext.GetEnumerator allows you to a simple ForEach-style iteration
   over the collection managed by the <see cref="System.Windows.Forms.BindingContext"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the BindingContext.GetEnumerator method to reuturn an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="System.Windows.Forms.BindingContext"/>.</para>
			<codelink SampleID="Classic BindingContext.IEnumerable.GetEnumerator Example" SnippetID="1"/>
		</example>
	</doc><doc for="BindingContext.this1">
		<summary>
			<para>Gets a <see cref="System.Windows.Forms.BindingManagerBase"/> that is associated with the specified data source and
   data member.</para>
		</summary>
		<param name="dataSource">The data source associated with a particular <see cref="System.Windows.Forms.BindingManagerBase"/>.</param>
		<param name="dataMember">A navigation path containing the information that resolves to a specific <see cref="System.Windows.Forms.BindingManagerBase"/>.</param>
		<value>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase"/> for the specified data source and data member.</para>
		</value>
		<exception cref="System.Exception">A child list can't be created for the specified <paramref name="dataMember"/> . </exception>
		<remarks>
			<para>Use this overload when the <see cref="System.Windows.Forms.BindingManagerBase"/> manages a set of <see cref="System.Windows.Forms.Binding"/> objects for
   which the data source contains multiple objects. For example, a <see cref="System.Data.DataSet"/> can contain
   several <see cref="System.Data.DataTable"/> objects linked by <see cref="System.Data.DataRelation"/> objects. In such a case, the navigation path is
   required to enable the <see cref="System.Windows.Forms.BindingContext"/> to return the correct <see cref="System.Windows.Forms.BindingManagerBase"/> . </para>
			<note type="note">
   The <see cref="System.Windows.Forms.BindingContext.this"/> property will always return a <see cref="System.Windows.Forms.BindingManagerBase"/>, and never
   return <see langword="null"/> .
</note>
			<para> See the <see cref="System.Windows.Forms.Binding"/> class for a list of possible data sources
and for details on creating bindings between
controls and data sources.</para>
			<para>If the desired <see cref="System.Windows.Forms.BindingManagerBase"/> manages a list, the navigation path must
also end with a list. For example, the C# code below binds a <see cref="System.Windows.Forms.TextBox"/>
control to the order date in a table of orders. The navigation path includes the
<see cref="System.Data.DataTable.TableName"/>, the <see cref="System.Data.DataRelation.RelationName"/>, and the <see cref="System.Data.DataColumn.ColumnName"/>. However, the <see cref="System.Windows.Forms.BindingManagerBase"/> must be retrieved using only the <see cref="System.Data.DataTable.TableName"/> 
and <see cref="System.Data.DataRelation.RelationName"/> (which resolves to a list).</para>
			<code>
// The navigation path for a Binding ends with a property.
textBox1.DataBindings.Add
("Text", dataSet1, "Customers.custToOrders.OrderDate");

// The navigation path for the BindingManagerBase ends with a list.
BindingManagerBase bmOrders = this.BindingContext
[dataSet1, "Customers.custToOrders"];
</code>
			<para>When returning a <see cref="System.Windows.Forms.BindingManagerBase"/> , you should use the same data source as
the <see cref="System.Windows.Forms.Binding"/> and modify only the navigation path. </para>
Use the <see cref="System.Windows.Forms.BindingContext.Contains"/> method to determine if the
desired <see cref="System.Windows.Forms.BindingManagerBase"/> already exists.
</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.BindingContext"/> to return <see cref="System.Windows.Forms.BindingManagerBase"/> objects that manage <see cref="System.Windows.Forms.Binding"/> objects that are bound to a data source
   that contains multiple objects. In each case, the specified data member is
   used to resolve to the correct object. </para>
			<codelink SampleID="Classic BindingContext.this1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingsCollection"/>
		<seealso cref="System.Windows.Forms.Binding"/>
	</doc>
</docs>
