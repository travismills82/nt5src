<docs>
	<doc for="ToolBar.buttonSize">
		<summary>
     The size of a button in the ToolBar
 </summary>
	</doc>
	<doc for="ToolBar.requestedSize">
		<summary>
     This is used by our autoSizing support.
 </summary>
	</doc>
	<doc for="ToolBar.DDARROW_WIDTH">
		<summary>
     This represents the width of the drop down arrow we have if the
     dropDownArrows property is true.  this value is used by the ToolBarButton
     objects to compute their size
 </summary>
	</doc>
	<doc for="ToolBar.wrappable">
		<summary>
     ToolBar buttons can "wrap" to the next line when the ToolBar becomes
     too narrow to include all buttons on the same line. Wrapping occurs on
     separation and nongroup boundaries. This controls whether this is
     turned on.
 </summary>
	</doc>
	<doc for="ToolBar.appearance">
		<summary>
     Indicates what our appearance will be.  This will either be normal
     or flat.
 </summary>
	</doc>
	<doc for="ToolBar.borderStyle">
		<summary>
     Indicates whether or not we have a border
 </summary>
	</doc>
	<doc for="ToolBar.buttons">
		<summary>
     The array of buttons we're working with.
 </summary>
	</doc>
	<doc for="ToolBar.buttonCount">
		<summary>
     The number of buttons we're working with
 </summary>
	</doc>
	<doc for="ToolBar.dropDownArrows">
		<summary>
     Indicates if dropdown buttons will have little arrows next to them
     when we display them.
 </summary>
	</doc>
	<doc for="ToolBar.textAlign">
		<summary>
     Indicates if text captions should go underneath images in buttons or
     to the right of them
 </summary>
	</doc>
	<doc for="ToolBar.divider">
		<summary>
     Controls whether we will display a divider at the top of the ToolBar.
 </summary>
	</doc>
	<doc for="ToolBar.showToolTips">
		<summary>
     Controls whether or not we'll show tooltips for individual buttons
 </summary>
	</doc>
	<doc for="ToolBar.autoSize">
		<summary>
     Controls whether or not the control will foce it's height based on the
     Image height
 </summary>
	</doc>
	<doc for="ToolBar.imageList">
		<summary>
     The ImageList object that contains the main images for our control.
 </summary>
	</doc>
	<doc for="ToolBar.updateCount">
		<summary>
     Used by beginUpdate/endUpdate
 </summary>
	</doc>
	<doc for="ToolBar.maxWidth">
		<summary>
     The maximum width of buttons currently being displayed.  This is needed
     by our autoSizing code.  If this value is -1, it needs to be recomputed.
 </summary>
	</doc>
	<doc for="ToolBar.BackColor">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.CreateParams">
		<summary>
     Returns the parameters needed to create the handle.  Inheriting classes
     can override this to provide extra functionality.  They should not,
     however, forget to get base.CreateParams first to get the struct
     filled up with the basic info.
 </summary>
	</doc>
	<doc for="ToolBar.Dock">
		<summary>
			<para>
       Sets the way in which this ToolBar is docked to its parent. We need to
       override this to ensure autoSizing works correctly
    </para>
		</summary>
	</doc>
	<doc for="ToolBar.ForeColor">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.PreferredHeight">
		<summary>
     The preferred height for this ToolBar control.  This is
     used by the AutoSizing code.
 </summary>
	</doc>
	<doc for="ToolBar.PreferredWidth">
		<summary>
     The preferred width for this ToolBar control.  This is
     used by AutoSizing code.
     NOTE!!!!!!!!! This function assumes it's only going to get called
     if the control is docked left or right [ie, it really
     just returns a max width]
 </summary>
	</doc>
	<doc for="ToolBar.RightToLeft">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.Site">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.Text">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.AdjustSize">
		<summary>
     Adjusts the height or width of the ToolBar to make sure we have enough
     room to show the buttons.
 </summary>
	</doc>
	<doc for="ToolBar.BeginUpdate">
		<summary>
     This routine lets us change a bunch of things about the toolbar without
     having each operation wait for the paint to complete.  This must be
     matched up with a call to endUpdate().
 </summary>
	</doc>
	<doc for="ToolBar.CreateHandle">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.DetachImageList">
		<summary>
     Resets the imageList to null.  We wire this method up to the imageList's
     Dispose event, so that we don't hang onto an imageList that's gone away.
 </summary>
	</doc>
	<doc for="ToolBar.Dispose">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.EndUpdate">
		<summary>
     This routine lets us change a bunch of things about the toolbar without
     having each operation wait for the paint to complete.  This must be
     matched up with a call to beginUpdate().
 </summary>
	</doc>
	<doc for="ToolBar.ForceButtonWidths">
		<summary>
     Forces the button sizes based on various different things.  The default
     ToolBar button sizing rules are pretty primitive and this tends to be
     a little better, and lets us actually show things like DropDown Arrows
     for ToolBars
 </summary>
	</doc>
	<doc for="ToolBar.Insert">
		<summary>
		</summary>
		<param name="index">
		</param>
		<param name=" button">
		</param>
	</doc>
	<doc for="ToolBar.InsertButton">
		<summary>
			<para>Inserts a button at a given location on the toolbar control.</para>
		</summary>
		<param name="index">The indexed location of the <see cref="System.Windows.Forms.ToolBarButton"/> in the collection.</param>
		<param name="value">The <see cref="System.Windows.Forms.ToolBarButton"/> to insert into the <see cref="System.Windows.Forms.ToolBar"/> .</param>
		<exception cref="System.ArgumentException">
			<para>The <paramref name="value "/>parameter is <see langword="null"/>. </para>
			<para>-or- </para>
			<para> The <paramref name="index "/>parameter is less than zero.</para>
			<para> -or-</para>
			<para>The <paramref name="index "/>parameter is greater than the number of buttons in the collection and the collection of buttons is not <see langword="null"/>.</para>
		</exception>
		<remarks>
			<para> The index of the toolbar button is a zero-based index. When a button is 
       inserted, the index values of the buttons that follow are incremented. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.InternalAddButton">
		<summary>
     Adds a button to the ToolBar
 </summary>
	</doc>
	<doc for="ToolBar.InternalSetButton">
		<summary>
     Changes the data for a button in the ToolBar, and then does the appropriate
     work to update the ToolBar control.
 </summary>
		<param name="index">
     The index at which to update the button.
 </param>
		<param name="value">
     The new value for this button.
 </param>
		<param name="recreate">
     Whether we need to recreate the handle.
 </param>
		<param name="updateText">
     Indicates if the Text property was changed.
 </param>
	</doc>
	<doc for="ToolBar.OnButtonDropDown">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> 
 event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ToolBar.OnButtonDropDown"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.ToolBar.OnButtonDropDown"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.ToolBar.OnButtonDropDown"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ToolBar.ButtonDropDown"/>
		<seealso cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/>
	</doc>
	<doc for="ToolBar.OnHandleCreated">
		<summary>
			<para>
       Overridden from the control class so we can add all the buttons
       and do whatever work needs to be done.
       Don't forget to call base.OnHandleCreated.
    </para>
		</summary>
		<param name="e">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
	</doc>
	<doc for="ToolBar.OnResize">
		<summary>
			<para>
       The control is being resized. Make sure the width/height are correct.
    </para>
		</summary>
		<param name="e">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
	</doc>
	<doc for="ToolBar.OnFontChanged">
		<summary>
			<para>
       Overridden to ensure that the buttons and the control resize properly
       whenever the font changes.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> that contains the event data.
 </param>
	</doc>
	<doc for="ToolBar.RealizeButtons">
		<summary>
     Sets all the button data into the ToolBar control
 </summary>
	</doc>
	<doc for="ToolBar.RemoveAt">
		<summary>
		</summary>
		<param name="index">
		</param>
	</doc>
	<doc for="ToolBar.ResetButtonSize">
		<summary>
			<para> Resets the toolbar buttons to the minimum 
       size. </para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.ToolBar"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.ToolBar"/>. You can use the <see cref="System.Windows.Forms.ToolBar.ShouldSerializeButtonSize"/> 
    method to determine whether the property
    value has changed from its default.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ToolBar.ButtonSize"/>
		<seealso cref="System.Windows.Forms.ToolBar.ShouldSerializeButtonSize"/>
	</doc>
	<doc for="ToolBar.SetBoundsCore">
		<summary>
     Overrides Control.setBoundsCore to enforce autoSize.
 </summary>
	</doc>
	<doc for="ToolBar.ShouldSerializeButtonSize">
		<summary>
			<para>Determines if the <see cref="System.Windows.Forms.ToolBar.ButtonSize"/> property needs to be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed 
    from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.ToolBar"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.ToolBar"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ToolBar.ButtonSize"/>
		<seealso cref="System.Windows.Forms.ToolBar.ResetButtonSize"/>
	</doc>
	<doc for="ToolBar.ToString">
		<summary>
     Returns a string representation for this control.
 </summary>
		<returns>
     String
 </returns>
	</doc>
	<doc for="ToolBar.UpdateButtons">
		<summary>
     Updates all the information in the ToolBar.  Tragically, the win32
     control is pretty flakey, and the only real choice here is to recreate
     the handle and re-realize all the buttons.  Very lame.
 </summary>
	</doc>
	<doc for="ToolBar.WmNotifyDropDown">
		<summary>
     The button clicked was a dropdown button.  If it has a menu specified,
     show it now.  Otherwise, fire an onButtonDropDown event.
 </summary>
	</doc>
	<doc for="ToolBar.WmReflectCommand">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.WndProc">
		<summary>
		</summary>
	</doc>
	<doc for="ToolBar.BackgroundImage">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Add">
		<overload>
			<para>Adds a new toolbar button to the end of the toolbar button collection.</para>
		</overload>
		<summary>
			<para>Adds a the specified toolbar button to
      the end of the toolbar button collection.</para>
		</summary>
		<param name="button">The <see cref="System.Windows.Forms.ToolBarButton"/> to be added after all existing buttons.</param>
		<returns>
			<para>The zero-based index value of the <see cref="System.Windows.Forms.ToolBarButton"/> added to the collection. </para>
		</returns>
		<remarks>
			<para>You can also add new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the collection by using the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert"/> methods, or the other version of the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> method.</para>
			<para>To remove a <see cref="System.Windows.Forms.ToolBarButton"/> that you have previously added, use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/> , <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> methods.</para>
		</remarks>
		<example>
			<para>The following example adds a new <see cref="System.Windows.Forms.ToolBarButton"/> control to
   a an existing <see cref="System.Windows.Forms.ToolBar"/> with existing buttons. The toolbar button will
   be added to the end of the <see cref="System.Windows.Forms.ToolBar.Buttons" qualify="true"/> collection.</para>
			<codelink SampleID="Classic ToolBar.ToolBarButtonCollection.Add Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/>
	</doc>
	<doc for="ToolBar.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.this">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.Contains">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.ICollection.CopyTo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.IndexOf">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.Insert">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBarButtonCollection.IList.Remove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.OnPaint">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.AutoSize">
		<summary>
			<para> Gets or sets a value indicating whether the toolbar
      adjusts its size automatically, based on the size of the buttons and the
      dock style.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   toolbar adjusts its size automatically, based on the size
   of the buttons and dock style; otherwise, <see langword="false"/>. The default is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Windows.Forms.ToolBar.AutoSize"/> is set to <see langword="true"/> , the <see cref="System.Windows.Forms.ToolBar"/> control sizes itself to accommodate the
   toolbar buttons, based upon the button size, the number of <see cref="System.Windows.Forms.ToolBarButton"/>
   objects it contains, and the <see cref="System.Windows.Forms.DockStyle"/> of the toolbar.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DockStyle"/>
		<seealso cref="System.Windows.Forms.ToolBar.ButtonSize"/>
	</doc>
	<doc for="ToolBar.BorderStyle">
		<summary>
			<para> Gets or sets
      the border style of the toolbar control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.BorderStyle"/>values. The default is
<see langword="BorderStyle.None"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="System.Windows.Forms.BorderStyle"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar"/> can take on a
   sunken, three-dimensional appearance when the <see cref="System.Windows.Forms.BorderStyle"/> property is
   set to <see langword="BorderStyle.Fixed3D"/>. To display a flat thin border
   around the toolbar control, set the <see cref="System.Windows.Forms.BorderStyle"/> property to
<see langword="BorderStyle.FixedSingle"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BorderStyle"/>
	</doc>
	<doc for="ToolBar.Divider">
		<summary>
			<para> Gets or sets a value indicating
      whether the toolbar displays a divider.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if the toolbar displays a divider; otherwise, <see langword="false"/>. The default is
<see langword="true"/>
.</para>
		</value>
		<remarks>
			<para>Dividers are displayed to help distinguish the toolbar
      from adjacent controls, such as menus. A divider is displayed as a raised edge
      along the top of the <see cref="System.Windows.Forms.ToolBar"/>
      control.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ToolBar.TextAlign">
		<summary>
			<para> Gets or sets the alignment of text in relation to each
      image displayed on
      the toolbar button controls.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ToolBarTextAlign"/> values. The default is
<see langword="ToolBarTextAlign.Underneath"/>
.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="System.Windows.Forms.ToolBarTextAlign"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBarButton.Text"/> can be aligned underneath or to
   the right of the image displayed on the <see cref="System.Windows.Forms.ToolBarButton"/> controls.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarTextAlign"/>
	</doc>
	<doc for="ToolBar.ButtonDropDown">
		<summary>
			<para>Occurs when a drop-down style <see cref="System.Windows.Forms.ToolBarButton"/> or its down arrow is clicked.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
		<seealso cref="System.Windows.Forms.ToolBarAppearance"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.IsReadOnly">
		<summary>
			<para> Gets a value indicating whether the collection is read-only.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the collection is read-only; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Add1">
		<summary>
			<para>Adds a new toolbar button to the end of the toolbar button collection with the specified <see cref="System.Windows.Forms.ToolBarButton.Text" qualify="true"/> property value.</para>
		</summary>
		<param name="text">The text to display on the new <see cref="System.Windows.Forms.ToolBarButton"/> .</param>
		<returns>
			<para>The zero-based index value of the <see cref="System.Windows.Forms.ToolBarButton"/> added to the collection. </para>
		</returns>
		<remarks>
			<para>You can also add new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the collection by using the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert"/> methods, or the other version of the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> method.</para>
			<para>To remove a <see cref="System.Windows.Forms.ToolBarButton"/> that you have previously added, use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/> , <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> methods.</para>
		</remarks>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and 
   adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>.
   This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.AddRange">
		<summary>
			<para>Adds a collection of toolbar buttons to this toolbar button collection.</para>
		</summary>
		<param name="buttons">The collection of <see cref="System.Windows.Forms.ToolBarButton"/> controls to add to this <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> contained in an array. </param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBarButton"/> objects contained in the <paramref name="nodes"/>
array are appended to the end of the collection.</para>
			<para>You can use method to quickly add a group of previouly
   created <see cref="System.Windows.Forms.ToolBarButton"/> objects to the collection instead of
   manually adding each <see cref="System.Windows.Forms.ToolBarButton"/> to the collection using the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> method.</para>
			<para>To remove a <see cref="System.Windows.Forms.ToolBarButton"/> that you have previously added, use the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/>, <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> methods.</para>
		</remarks>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Contains">
		<summary>
			<para>Determines if the specified toolbar button is a member of the collection.</para>
		</summary>
		<param name="button">The <see cref="System.Windows.Forms.ToolBarButton"/> to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Windows.Forms.ToolBarButton"/>
is a member of the collection; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>This method enables you to determine whether a <see cref="System.Windows.Forms.ToolBarButton"/>
is member of the collection before attempting to perform operations on the
<see cref="System.Windows.Forms.ToolBarButton"/>. You can use this method to confirm that a 
<see cref="System.Windows.Forms.ToolBarButton"/> has been added to or is still a 
member of the collection.</para>
		</remarks>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Insert">
		<summary>
			<para> Inserts an existing toolbar button in the toolbar button collection at the specified location.</para>
		</summary>
		<param name="index">The indexed location within the collection to insert the toolbar button. </param>
		<param name="button">The <see cref="System.Windows.Forms.ToolBarButton"/> to insert. </param>
		<remarks>
			<para>You can also add new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the collection by using
   the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange"/> methods.</para>
			<para>To remove a <see cref="System.Windows.Forms.ToolBarButton"/> that you have previously added, use the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/>, <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> methods.</para>
		</remarks>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Remove">
		<summary>
			<para>Removes a given button from the toolbar button collection.</para>
		</summary>
		<param name="button">The <see cref="System.Windows.Forms.ToolBarButton"/> to remove from the collection.</param>
		<remarks>
			<para>To remove toolbar buttons from the collection, use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt"/>, or
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> methods. </para>
			<para>To add new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the collection, use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> , <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert"/>
methods.</para>
		</remarks>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator that can be used to iterate through the toolbar button collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> object that represents the tree node collection.</para>
		</returns>
		<example>
			<para>The following example removes an existing <see cref="System.Windows.Forms.ToolBarButton"/> from a <see cref="System.Windows.Forms.ToolBar"/> control if it exists and adds and inserts four new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the <see cref="System.Windows.Forms.ToolBar"/>. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.ToolBar"/> control on it.</para>
			<codelink SampleID="ToolBar" SnippetID="2"/>
		</example>
		<seealso cref="System.Collections.IEnumerator"/>
	</doc>
	<doc for="ToolBar.BackColorChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.BackgroundImageChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.ForeColorChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.ImeModeChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.RightToLeftChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.TextChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection">
		<summary>
			<para>Encapsulates a collection of <see cref="System.Windows.Forms.ToolBarButton"/> controls for use by the
<see cref="System.Windows.Forms.ToolBar"/> class. </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> is a zero-based
   indexed collection used by the <see cref="System.Windows.Forms.ToolBar"/> class
   to hold all the <see cref="System.Windows.Forms.ToolBarButton"/>
   controls assigned to the toolbar. Use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> method to add individual buttons and the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/> method to delete them. Call
   the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> method to remove all
   the buttons from the collection.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.ToolBar"/> and three <see cref="System.Windows.Forms.ToolBarButton"/> controls.
   The toolbar buttons are assigned to the
   toolbar and the toolbar is added to the form. This code assumes that a <see cref="System.Windows.Forms.Form"/>
   has already been created.</para>
			<codelink SampleID="Classic ToolBar.Buttons Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.this">
		<summary>
			<para>Gets or sets the toolbar button at the specified indexed location in the
      toolbar button collection.</para>
		</summary>
		<param name="index">The indexed location of the <see cref="System.Windows.Forms.ToolBarButton"/> in the collection.</param>
		<value>
			<para>A <see cref="System.Windows.Forms.ToolBarButton"/> that represents the toolbar button at the
   specified indexed location. </para>
		</value>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="index"/> value is <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>The <paramref name="index "/>value is less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="index "/>value is greater than the number of buttons in the collection, and the collection of buttons is not <see langword="null"/>.</para></exception>
		<remarks>
			<para> To assign <see cref="System.Windows.Forms.ToolBarButton"/> controls to a specific location, or to retrieve them from the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> , you can reference the collection
   object with a specific index value. The index value of the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> is a zero-based
   index.</para>
		</remarks>
		<example>
			<para>The following example replaces the last toolbar
      button on a toolbar. This code assumes that a <see cref="System.Windows.Forms.ToolBar"/> and at least one <see cref="System.Windows.Forms.ToolBarButton"/> have been created. The example gets the
      number of buttons on the toolbar and replaces the last button with a newly
      created one. The <paramref name="index"/> value of the toolbar button
      being replaced is set to the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/>
      property, minus one, since the <see cref="System.Windows.Forms.ToolBarButton"/> collection is a zero-based index.</para>
			<codelink SampleID="Classic ToolBar.ToolBarButtonCollection.this Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Clear">
		<summary>
			<para>Removes
      all buttons from the toolbar button collection.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> method
   iterates through the collection and
   removes all toolbar buttons assigned to the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/>
   .</para>
			<para> To remove an individual toolbar button from the collection,
   use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt"/> methods. </para>
			<para> To
   add new <see cref="System.Windows.Forms.ToolBarButton"/> objects to the collection, use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> , <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert"/> methods.</para>
		</remarks>
		<example>
			<para>The following example displays the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/> of the <see cref="System.Windows.Forms.ToolBar.Buttons"/> before and after the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> method is called. This code assumes a <see cref="System.Windows.Forms.ToolBar"/> with at least one <see cref="System.Windows.Forms.ToolBarButton"/> has been created.</para>
			<codelink SampleID="Classic ToolBar.ToolBarButtonCollection.Count Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.this"/>
	</doc>
	<doc for="ToolBar.ToolBar">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ToolBar"/> class.</para>
		</summary>
		<remarks>
			<para> A newly created toolbar control is
      empty; add <see cref="System.Windows.Forms.ToolBarButton"/> controls
      by setting the <see cref="System.Windows.Forms.ToolBar.Buttons"/> property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> and three <see cref="System.Windows.Forms.ToolBarButton"/> controls. The toolbar buttons are assigned to the button collection, the collection is assigned to the toolbar, and the toolbar is added to the form. On the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> event of the toolbar, the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs.Button"/> property of the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> is evaluated, and the appropriate dialog box opened. This code assumes that a <see cref="System.Windows.Forms.Form"/> , an <see cref="System.Windows.Forms.OpenFileDialog"/>, a <see cref="System.Windows.Forms.SaveFileDialog"/>, and a <see cref="System.Windows.Forms.PrintDialog"/> have been created.</para>
			<codelink SampleID="Classic ToolBar.ToolBar Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
		<seealso cref="System.Windows.Forms.ToolBar.Buttons"/>
	</doc>
	<doc for="ToolBar.Appearance">
		<summary>
			<para>Gets or set the value that determines the appearance of a toolbar control and
      its buttons.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ToolBarAppearance"/> values. The default is
<see langword="ToolBarAppearance.Normal"/>
.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="System.Windows.Forms.ToolBarAppearance"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar.Appearance"/> property affects the appearance of the
   buttons assigned to the toolbar. When the appearance is set to
<see langword="ToolBarAppearance.Normal"/> ,
   the toolbar's buttons appear three-dimensional and raised. Set the <see cref="System.Windows.Forms.ToolBar.Appearance"/> property of the toolbar to
<see langword="ToolBarAppearance.Flat"/> to give the toolbar's 
   buttons a flat appearance. As the mouse pointer moves over the flat buttons,
   they appear raised and three-dimensional. Separators on a <see cref="System.Windows.Forms.ToolBar"/>
   with the <see cref="System.Windows.Forms.ToolBar.Appearance"/> property set to <see cref="System.Windows.Forms.ToolBarAppearance.Flat"/>
   appear as etched lines rather than spaces between the
   raised buttons. The flat style buttons give your
   application a more Web-like look.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarAppearance"/>
	</doc>
	<doc for="ToolBar.ButtonSize">
		<summary>
			<para>Gets or sets
      the size of the buttons on the toolbar control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> object
   that represents the size of the <see cref="System.Windows.Forms.ToolBarButton"/> controls on the toolbar. The default size
   has a width of 24 pixels and a height of 22 pixels, or large enough to
   accommodate the <see cref="System.Drawing.Image"/>
   and
   text, whichever is greater.</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="System.Drawing.Size.Width"/> or <see cref="System.Drawing.Size.Height"/> property of the <see cref="System.Drawing.Size"/> object is less than 0.</exception>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.ToolBar.ButtonSize"/> is not set, it is set to
   its default. Alternatively, a <see cref="System.Drawing.Size"/>
   is computed to accommodate the largest <see cref="System.Drawing.Image"/> and text
   assigned to the <see cref="System.Windows.Forms.ToolBarButton"/> controls.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Size"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.DefaultImeMode">
		<summary>
			<para>Gets the default Input Method Editor (IME) mode supported by this control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<remarks>
			<para>As implemented in the <see cref="System.Windows.Forms.ToolBar"/> class, this property always returns the <see cref="System.Windows.Forms.ImeMode.Disable" qualify="true"/>
value.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ImeMode"/>
	</doc>
	<doc for="ToolBar.DropDownArrows">
		<summary>
			<para>Gets or sets a value indicating whether drop-down buttons on a
      toolbar display down arrows.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if drop-down toolbar buttons display down arrows; otherwise, <see langword="false"/>. The default is <see langword="false"/>
.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Windows.Forms.ToolBar.DropDownArrows"/> is set to <see langword="false "/> , no down arrows display on drop-down
   style toolbar buttons. When the user clicks the drop-down button on the toolbar,
   the menu drops down for selection. When the drop-down arrow is displayed, the
   user must press
   the down arrow to display the menu. </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c>
have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButtonStyle"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.ImageSize">
		<summary>
			<para>Gets the size of the images in the image list assigned to the
      toolbar.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> 
that represents the size of the images (in
the <see cref="System.Windows.Forms.ImageList"/>) assigned to the <see cref="System.Windows.Forms.ToolBar"/> .</para>
		</value>
		<seealso cref="System.Windows.Forms.ImageList"/>
		<seealso cref="System.Drawing.Size"/>
	</doc>
	<doc for="ToolBar.ImeMode">
		<summary>
			<para>Gets or sets the Input Method Editor (IME) mode supported by this control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<seealso cref="System.Windows.Forms.ImeMode"/>
		<seealso cref="System.Windows.Forms.ToolBar.DefaultImeMode"/>
	</doc>
	<doc for="ToolBar.ButtonClick">
		<summary>
			<para>Occurs when a <see cref="System.Windows.Forms.ToolBarButton"/> on the <see cref="System.Windows.Forms.ToolBar"/> is clicked.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> and three <see cref="System.Windows.Forms.ToolBarButton"/> controls. The toolbar buttons are assigned to the button collection, the collection is assigned to the toolbar, and the toolbar is added to the form. On the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> event of the toolbar, the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs.Button"/> property of the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> is evaluated, and the appropriate dialog box opened. This code assumes that a <see cref="System.Windows.Forms.Form"/> , an <see cref="System.Windows.Forms.OpenFileDialog"/>, a <see cref="System.Windows.Forms.SaveFileDialog"/>, and a <see cref="System.Windows.Forms.PrintDialog"/> have been created.</para>
			<codelink SampleID="Classic ToolBar.ToolBar Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
		<seealso cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.IndexOf">
		<summary>
			<para>Retrieves the index of the specified toolbar button in the collection.</para>
		</summary>
		<param name="button">The <see cref="System.Windows.Forms.ToolBarButton"/> to locate in the collection.</param>
		<returns>
			<para>The zero-based index of the item found in the collection;
      otherwise, -1.</para>
		</returns>
		<remarks>
			<para>This method gives you easy access to the index value of the <see cref="System.Windows.Forms.ToolBarButton"/> in the collection. The index value allows
   you to easily determine which <see cref="System.Windows.Forms.ToolBarButton"/> was clicked on the
<see cref="System.Windows.Forms.ToolBar"/>. The <see cref="System.Windows.Forms.ToolBarButton"/> clicked can be determined by evaluating the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf"/> value of 
   the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs.Button" qualify="true"/> property. </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> and three <see cref="System.Windows.Forms.ToolBarButton"/> controls. The toolbar buttons are assigned to the button collection, the collection is assigned to the toolbar, and the toolbar is added to the form. On the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> event of the toolbar, the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs.Button"/> property of the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> is evaluated, and the appropriate dialog box opened. This code assumes that a <see cref="System.Windows.Forms.Form"/> , an <see cref="System.Windows.Forms.OpenFileDialog"/>, a <see cref="System.Windows.Forms.SaveFileDialog"/>, and a <see cref="System.Windows.Forms.PrintDialog"/> have all been created.</para>
			<codelink SampleID="Classic ToolBar.ToolBarButtonCollection.IndexOf Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/>
	</doc>
	<doc for="ToolBar">
		<summary>
			<para>Represents a Windows toolbar.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.ToolBar"/> controls are used to display <see cref="System.Windows.Forms.ToolBarButton"/> controls
   that can appear as a standard button, a toggle-style button, or a drop-down
   style button. You can assign images to the buttons by creating an <see cref="System.Windows.Forms.ImageList"/>
   , assigning it to the <see cref="System.Windows.Forms.ToolBar.ImageList"/> property of
   the toolbar, and
   assigning the image index value to the <see cref="System.Windows.Forms.ToolBarButton.ImageIndex"/>
   property each <see cref="System.Windows.Forms.ToolBarButton"/>
   . You can then assign text to be displayed underneath or to the right of
   the image by setting the <see cref="System.Windows.Forms.ToolBarButton.Text"/> property of the <see cref="System.Windows.Forms.ToolBarButton"/>.</para>
			<para> Set the <see cref="System.Windows.Forms.ToolBar.Appearance"/> property of the toolbar
to <see cref="System.Windows.Forms.ToolBarAppearance.Flat"/>to give the toolbar and its
buttons a flat appearance. As the mouse pointer moves over the buttons, their
appearance changes to three-dimensional. Toolbar buttons can be divided into
logical groups by using separators. A separator is a toolbar button with the
<see cref="System.Windows.Forms.ToolBarButton.Style"/> property set to
<see langword="ToolBarButtonStyle.Separator"/> . Button separators appear as
lines rather than spaces between the buttons when the toolbar has a flat
appearance. If the <see cref="System.Windows.Forms.ToolBar.Appearance"/> property is set to <see cref="System.Windows.Forms.ToolBarAppearance.Normal"/> , the toolbar buttons appear raised and three-dimensional.</para>
			<para>If the <see cref="System.Windows.Forms.ToolBar.ButtonSize"/> is not set, a <see cref="System.Drawing.Size"/> object is computed within the class
to set it by default. The computed size will accommodate the largest image and
text assigned to the <see cref="System.Windows.Forms.ToolBarButton"/> controls.</para>
			<para>To create a collection of <see cref="System.Windows.Forms.ToolBarButton"/> controls to display on the
<see cref="System.Windows.Forms.ToolBar"/>, add the buttons individually by using the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> or <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert"/> methods of the
<see cref="System.Windows.Forms.ToolBar.Buttons"/>
property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> and three <see cref="System.Windows.Forms.ToolBarButton"/> controls. The toolbar buttons are assigned to the
   button collection, the collection is assigned to the toolbar, and the toolbar
   is added to the form. On the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> event of the toolbar, the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs.Button"/> property of the <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> is evaluated, and the appropriate dialog box opened. This code assumes that a <see cref="System.Windows.Forms.Form"/> , an <see cref="System.Windows.Forms.OpenFileDialog"/>, a <see cref="System.Windows.Forms.SaveFileDialog"/>, and a <see cref="System.Windows.Forms.PrintDialog"/> have been created.</para>
			<codelink SampleID="Classic ToolBar.ToolBar Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.ImageList">
		<summary>
			<para> Gets or sets the collection of images available to the toolbar button
      controls.</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.ImageList"/>
that contains images available to the <see cref="System.Windows.Forms.ToolBarButton"/> controls. The
default is <see langword="null"/>
.</para>
		</value>
		<remarks>
			<para>If you create an <see cref="System.Windows.Forms.ImageList"/> and assign it to the <see cref="System.Windows.Forms.ToolBar.ImageList"/> property, you can assign
   an image from the collection to the <see cref="System.Windows.Forms.ToolBarButton"/> controls by assigning the image's index value to
   the <see cref="System.Windows.Forms.ToolBarButton.ImageIndex"/> property of the toolbar button.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an
<see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> 
have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ImageList"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.ShowToolTips">
		<summary>
			<para> Gets or sets a value indicating whether the toolbar displays
      a ToolTip for each button.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the toolbar 
   display a ToolTip for each button; otherwise, <see langword="false"/>. The default is <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para> To set the text displayed by the ToolTip, set the <see cref="System.Windows.Forms.ToolBarButton.ToolTipText"/> property of each <see cref="System.Windows.Forms.ToolBarButton"/>
on the <see cref="System.Windows.Forms.ToolBar"/> . To cause the ToolTip
to display as the user moves the mouse pointer over the toolbar button, set
the <see cref="System.Windows.Forms.ToolBar.ShowToolTips"/> property to <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolTip"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.OnButtonClick">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/>
event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ToolBar.OnButtonClick"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ToolBar.OnButtonClick"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.ToolBar.OnButtonClick"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.ToolBar.ButtonClick"/>
		<seealso cref="System.Windows.Forms.ToolBarButtonClickEventArgs"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.Count">
		<summary>
			<para> Gets the number of buttons in the toolbar button collection.</para>
		</summary>
		<value>
			<para> The number of the <see cref="System.Windows.Forms.ToolBarButton"/> controls assigned
   to the toolbar.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/> property holds the actual number of <see cref="System.Windows.Forms.ToolBarButton"/> controls assigned
   to the collection. It is common to use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/> property value as
   the upper bounds of a loop to iterate through a collection. The index value of a collection is a zero-based index, so you must subtract one from the looping variable otherwise you
   will exceed the upper bounds of the collection and throw an exception. </para>
		</remarks>
		<example>
			<para>The following example displays the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/> of the <see cref="System.Windows.Forms.ToolBar.Buttons"/> before and after the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> method is called. This code assumes that a <see cref="System.Windows.Forms.ToolBar"/> with at least one <see cref="System.Windows.Forms.ToolBarButton"/> has been created.</para>
			<codelink SampleID="Classic ToolBar.ToolBarButtonCollection.Count Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.ToolBarButtonCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> class and assigns it to the specified toolbar.</para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.ToolBar"/> that is the parent of the collection of <see cref="System.Windows.Forms.ToolBarButton"/> controls.</param>
		<remarks>
			<para> You do not typically create a <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> and 
   explicitly call its constructor. By referencing the <see cref="System.Windows.Forms.ToolBar.Buttons"/> property of the <see cref="System.Windows.Forms.ToolBar"/>
   control, a <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> is created. You can then gain
   access to its properties and methods, and assign <see cref="System.Windows.Forms.ToolBarButton"/>
   controls to the collection. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
	</doc>
	<doc for="ToolBar.TabStop">
		<internalonly/>
	</doc>
	<doc for="ToolBar.Buttons">
		<summary>
			<para> Gets the collection of <see cref="System.Windows.Forms.ToolBarButton"/>
controls assigned to the toolbar control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> that
   contains a
   collection of <see cref="System.Windows.Forms.ToolBarButton"/>
   controls.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar.Buttons"/> property is a zero-based
   indexed collection used to hold all the <see cref="System.Windows.Forms.ToolBarButton"/>
   controls assigned to the toolbar. Since the property is read-only, it
   can not be assigned a collection of toolbar buttons directly. Toolbar buttons
   can be added or removed by using the methods inherited from the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> class. Use the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/> method to add individual buttons and the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/> method to delete a button. Call the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> method to
   remove all the buttons from the collection.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.ToolBar"/> and three <see cref="System.Windows.Forms.ToolBarButton"/> controls. The toolbar buttons are assigned to the toolbar and the toolbar is added to the form. This code assumes that a <see cref="System.Windows.Forms.Form"/> has already been created.</para>
			<codelink SampleID="Classic ToolBar.Buttons Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/>
	</doc>
	<doc for="ToolBar.Wrappable">
		<summary>
			<para> Gets
      or sets a value
      indicating whether the toolbar buttons wrap to the next line if the
      toolbar becomes too small to display all the buttons
      on the same line.</para>
		</summary>
		<value>
			<para><see langword="true "/>
if the toolbar buttons wrap to another
line if the toolbar becomes too small to display all the buttons on the same
line; otherwise, <see langword="false"/>. The default value is
<see langword="true"/>
.</para>
		</value>
		<remarks>
			<para>Toolbar buttons can be divided into logical groups by using separators. A
      separator is a toolbar button with the <see cref="System.Windows.Forms.ToolBarButton.Style"/> property set to
      <see langword="ToolBarButtonStyle.Separator"/>. If the <see cref="System.Windows.Forms.ToolBar.Wrappable"/> property is set to <see langword="true "/> and the toolbar becomes
      too small to display all the buttons on the same line, the toolbar is
      broken into additional lines, with the breaks occurring at the separators. This ensures
      that button groups stay together. Toolbar buttons that are not in a group can
      be separated when the toolbar wraps. The toolbar can become too small to display
      all its buttons on the same line if its parent <see cref="System.Windows.Forms.Form"/>
      is resized.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.ToolBar"/> control, sets some of its common properties, and adds it to a <see cref="System.Windows.Forms.Form"/>. Delegates are also added to the <see cref="System.Windows.Forms.ToolBar.ButtonClick"/> and <see cref="System.Windows.Forms.ToolBar.ButtonDropDown"/> events. This example assumes a <see cref="System.Windows.Forms.ToolBar"/> named <c>toolBar1</c> and an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c> have been declared.</para>
			<codelink SampleID="ToolBar" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBarButtonStyle"/>
	</doc>
	<doc for="ToolBar.ToolBarButtonCollection.RemoveAt">
		<summary>
			<para>Removes a given button from the toolbar button collection.</para>
		</summary>
		<param name="index">The indexed location of the <see cref="System.Windows.Forms.ToolBarButton"/> in the collection.</param>
		<exception cref="System.ArgumentOutOfRangeException"><para>The <paramref name="index "/>value is less than 0, or it is greater than the number of buttons in the collection.</para></exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove"/> method removes
   the <see cref="System.Windows.Forms.ToolBarButton"/> at the specified
   location in the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> . If you want to remove all <see cref="System.Windows.Forms.ToolBarButton"/> controls from the collection, use the
<see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/> method.</para>
		</remarks>
		<example>
			<para>The following example removes the last <see cref="System.Windows.Forms.ToolBarButton"/>
on a <see cref="System.Windows.Forms.ToolBar"/>. The index value of the toolbar button being
removed is set equal to the <see cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count"/> property, minus one,
since the <see cref="System.Windows.Forms.ToolBarButton"/> collection is a
zero-based index.</para>
			<codelink SampleID="Classic ToolBar.ToolBarButtonCollection.RemoveAt Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear"/>
		<seealso cref="System.Windows.Forms.ToolBarButton"/>
		<seealso cref="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add"/>
	</doc>
</docs>
