<docs>
	<doc for="MouseButtons.Left">
		<summary>
			<para>
       
       The left mouse button was pressed.
       
    </para>
		</summary>
	</doc>
	<doc for="MouseButtons.None">
		<summary>
			<para>
       
       No mouse button was pressed.
       
    </para>
		</summary>
	</doc>
	<doc for="MouseButtons.Right">
		<summary>
			<para>
       
       The right mouse button was pressed.
       
    </para>
		</summary>
	</doc>
	<doc for="MouseButtons.Middle">
		<summary>
			<para>
       
       The middle mouse button was pressed.
       
    </para>
		</summary>
	</doc>
	<doc for="MouseButtons.XButton1">
		<summary>
			<para>The first XButton was pressed. </para>
			<para>With Windows 2000, Microsoft is introducing support for the Microsoft 
       IntelliMouse Explorer, which is a mouse with five buttons. The two new mouse
       buttons (XBUTTON1 and XBUTTON2) provide backward/forward navigation. </para>
		</summary>
	</doc>
	<doc for="MouseButtons.XButton2">
		<summary>
			<para>The second XButton was pressed. </para>
			<para>With Windows 2000, Microsoft is introducing support for the Microsoft 
       IntelliMouse Explorer, which is a mouse with five buttons. The two new mouse
       buttons (XBUTTON1 and XBUTTON2) provide backward/forward navigation. </para>
		</summary>
	</doc>
	<doc for="MouseButtons">
		<summary>
			<para> Specifies constants that define which mouse button was pressed.
      </para>
		</summary>
		<remarks>
			<para> This enumeration is used by many classes, including
      <see cref="System.Windows.Forms.AxHost"/>,
      <see cref="System.Windows.Forms.Control"/>, <see cref="System.Windows.Forms.DataGrid"/>, <see cref="System.Windows.Forms.Form"/>, <see cref="System.Windows.Forms.RadioButton"/>,
      <see cref="System.Windows.Forms.Splitter"/>, <see cref="System.Windows.Forms.StatusBar"/>, and <see cref="System.Windows.Forms.UpDownBase"/>.
      </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.GetCharFromPosition"/> method to obtain a character from the contents of a <see cref="System.Windows.Forms.RichTextBox"/> given its control coordinates. The example code uses coordinates located in the <see cref="System.Windows.Forms.MouseEventArgs"/> object passed as a parameter to the event handler to determine the location in the control to obtain the character. The character is then displayed in a <see cref="System.Windows.Forms.MessageBox"/> if it is not a space character. This example assumes that a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> has been created and that the example code is connected to the <see cref="System.Windows.Forms.Control.MouseDown"/> event of the <see cref="System.Windows.Forms.RichTextBox"/>.</para>
			<codelink SampleID="RichTextBox.GetCharAtIndex" SnippetID="1"/>
			<para> The following example demonstrates using different mouse 
events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
 to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
 the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
 each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
 the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
 like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
 displayed on the screen is additional information about the mouse from
 the <see cref="System.Windows.Forms.SystemInformation"/> class.
 </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
	</doc>
</docs>
