<docs>
	<doc for="AccessibleObject.systemIAccessible">
		<summary>
			<para>Indicates the <see langword="IAccessible "/>interface used by this <see cref="System.Windows.Forms.AccessibleObject"/>.</para>
		</summary>
		<remarks>
			<para>By default, this is <see langword="null"/>.</para>
		</remarks>
	</doc>
	<doc for="AccessibleObject.systemIEnumVariant">
		<summary>
			<para>Indicates the 
    <see langword="Microsoft.Win32.Interop.IEnumVariant "/>used by this <see cref="System.Windows.Forms.AccessibleObject"/>.</para>
		</summary>
		<remarks>
			<para>By default, this is <see langword="null"/>.</para>
		</remarks>
	</doc>
	<doc for="AccessibleObject.IAccessible.accDoDefaultAction">
		<summary>
			<para>
       Perform the default action
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accHitTest">
		<summary>
			<para>
       Perform a hit test
       
    </para>
		</summary>
		<param name="xLeft">
		</param>
		<param name="yTop">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accLocation">
		<summary>
			<para>
       The location of the Accessible object
    </para>
		</summary>
		<param name="pxLeft">
		</param>
		<param name="pyTop">
		</param>
		<param name="pcxWidth">
		</param>
		<param name="pcyHeight">
		</param>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accNavigate">
		<summary>
			<para>
       Navigate to another accessible object.
       
    </para>
		</summary>
		<param name="navDir">
		</param>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accSelect">
		<summary>
			<para>
       Select an accessible object.
       
    </para>
		</summary>
		<param name="flagsSelect">
		</param>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accChild">
		<summary>
			<para>
       Returns a child Accessible object
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accChildCount">
		<summary>
      Return the number of children
 </summary>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accDefaultAction">
		<summary>
			<para>
       Return the default action
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accDescription">
		<summary>
			<para>
       Return the object or child description
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.GetAccessibleChild">
		<summary>
      Returns the appropriate child from the Accessible Child Collection, if available
 </summary>
	</doc>
	<doc for="AccessibleObject.IAccessible.accFocus">
		<summary>
      Return the object or child focus
 </summary>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accHelp">
		<summary>
			<para>
       Return help for this accessible object.
       
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accHelpTopic">
		<summary>
			<para>
       Return the object or child help topic
    </para>
		</summary>
		<param name="pszHelpFile">
		</param>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accKeyboardShortcut">
		<summary>
			<para>
       Return the object or child keyboard shortcut
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accName">
		<summary>
			<para>
       Return the object or child name
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accParent">
		<summary>
      Return the parent object
 </summary>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accRole">
		<summary>
			<para>
       The role property describes an object's purpose in terms of its
       relationship with sibling or child objects.
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.accSelection">
		<summary>
      Return the object or child selection
 </summary>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accState">
		<summary>
			<para>
       Return the object or child state
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.get_accValue">
		<summary>
			<para>
       Return the object or child value
    </para>
		</summary>
		<param name="childID">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.set_accName">
		<summary>
			<para>
       Set the object or child name
    </para>
		</summary>
		<param name="childID">
		</param>
		<param name="newName">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.IAccessible.set_accValue">
		<summary>
			<para>
       Set the object or child value
    </para>
		</summary>
		<param name="childID">
		</param>
		<param name="newValue">
		</param>
		<keyword term=""/>
	</doc>
	<doc for="AccessibleObject.ValidateChildID">
		<summary>
      Make sure that the childID is valid.
 </summary>
	</doc>
	<doc for="AccessibleObject.UseStdAccessibleObjects"><nodoc/>
		<overload>
			<para>Associates an object with an an instance of an <see cref="System.Windows.Forms.AccessibleObject"/>.</para>
		</overload>
		<summary>
			<para>Associates an object with an an instance of an <see cref="System.Windows.Forms.AccessibleObject"/> based on the handle of the object.</para>
		</summary>
		<param name="handle">An <see cref="System.IntPtr"/> that contains the handle of the object.</param>
		<remarks>
			<para>Server applications can call this function when they contain a custom UI
      object that is similar to a system-provided object. Server applications call
      CreateStdAccessibleObject and override the IAccessible methods and properties as
      needed to match their custom object. This approach saves server developers the
      work of fully implementing all the IAccessible properties and methods. This
      function is similar to CreateStdAccessibleProxy, except that
      CreateStdAccessibleProxy allows you to specify the class name as a parameter
      whereas CreateStdAccessibleObject uses the class name associated with the hwnd. </para>
			<para>Calling this version of the UseStdAccessible is the same
      as calling the two parameter version with an objid of CLIENT.</para>
		</remarks>
	</doc><doc for="AccessibleObject.UseStdAccessibleObjects1"><nodoc/>
		<summary>
			<para>Associates an object with an an instance of an <see cref="System.Windows.Forms.AccessibleObject"/> based on the handle and the object id of
   the object.</para>
			<para>Creates an accessible object with the methods and properties for the
   specified type of system-provided user interface element.</para>
		</summary>
		<param name="handle">An <see cref="System.IntPtr"/> that contains the handle of the object.</param>
		<param name=" objid">An Int that defines the type of object that the <paramref name="handle"/> parameter refers to.</param>
		<remarks>
			<para> Server applications can
      call this function when they contain a custom UI object that is
      similar to a system-provided object. Server applications call CreateStdAccessibleObject and override
      the IAccessible methods and properties as needed
      to match their custom object. This approach saves server developers the
      work of fully implementing all the IAccessible properties and methods. </para>
			<para>Valid <paramref name="objid"/> values.</para>
			<list type="table">
				<listheader>
					<term>Object</term>
					<description>Value</description>
					<description>Description</description>
				</listheader>
				<item>
					<term> ALERT </term>
					<description> 0xFFFFFFF6</description>
					<description> Refers to a message associated with a window
         or application.</description>
				</item>
				<item>
					<term> CARET </term>
					<description>0xFFFFFFF8</description>
					<description>Refers to the text insertion bar (caret) in the window. </description>
				</item>
				<item>
					<term> CLIENT </term>
					<description>0xFFFFFFFC</description>
					<description> Refers to the window's client area. In most cases, the operating system controls the frame elements, and the client object contains all elements that the application controls.</description>
				</item>
				<item>
					<term> CURSOR</term>
					<description>0xFFFFFFF7</description>
					<description>Refers to the mouse pointer. There is only one mouse pointer in the system and it is not a child of a window.</description>
				</item>
				<item>
					<term> HSCROLL</term>
					<description>0xFFFFFFFA</description>
					<description>Refers to the window's horizontal scroll bar. </description>
				</item>
				<item>
					<term> MENU</term>
					<description>0xFFFFFFFD</description>
					<description>Refers to the window's menu bar.</description>
				</item>
				<item>
					<term> SIZEGRIP </term>
					<description>0xFFFFFFF9</description>
					<description>Refers to the window's size grip, an optional frame component located at the lower right corner of the window frame. </description>
				</item>
				<item>
					<term> SOUND </term>
					<description>0xFFFFFFF5</description>
					<description>Refers to a sound object. Sound objects do not have screen locations or children, but do have name and state attributes. They are children of the application playing the sound. </description>
				</item>
				<item>
					<term> SYSMENU </term>
					<description>0xFFFFFFFF</description>
					<description>Refers to the window's system menu. </description>
				</item>
				<item>
					<term> TITLEBAR </term>
					<description>0xFFFFFFFE</description>
					<description>Refers to the window's title bar. </description>
				</item>
				<item>
					<term> VSCROLL</term>
					<description>0xFFFFFFFB</description>
					<description> Refers to the window's vertical scroll bar. </description>
				</item>
				<item>
					<term> WINDOW </term>
					<description>0x00000000</description>
					<description>Refers to the window itself rather than to a child object. </description>
				</item>
			</list>
		</remarks>
	</doc><doc for="IReflect.GetMethod">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetMethod1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetMethods">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetField">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetFields">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetProperty">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetProperty1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetProperties">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetMember">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.GetMembers">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.InvokeMember">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IReflect.UnderlyingSystemType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AccessibleObject.GetFocused">
		<summary>
			<para> Retrieves the object that has the keyboard focus.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Windows.Forms.AccessibleObject"/> that specifies the currently focused
   child. This method returns the calling object if the object itself is focused.
   Returns <see langword="null"/>
   if no
   object has focus. </para>
		</returns>
		<exception cref="T:System.Runtime.InteropServices.COMException"> The control cannot be retrieved.</exception>
		<remarks>
			<para>The concept of keyboard focus is related to that of an
      active window. An active window is the foreground window in which the user is
      working. The object with the keyboard focus is either the active window or a
      child object of the active window.</para>
			<para>Only one object or item within a container can have the
      focus at any one time. The object with the keyboard focus is not necessarily the
      selected object.</para>
			<note type="inheritinfo">
      All objects that can
      receive the keyboard focus must support this property.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.GetChild"/>
	</doc><doc for="AccessibleObject.GetSelected">
		<summary>
			<para> Retrieves the currently selected child.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Windows.Forms.AccessibleObject"/> that represents the currently selected
   child. This method returns the calling object if the object itself is selected.
   Returns <see langword="null"/>
   if is no child is currently selected and the object itself does not have
   focus. </para>
		</returns>
		<exception cref="T:System.Runtime.InteropServices.COMException">The selected child cannot be retrieved.</exception>
		<remarks>
			<note type="inheritinfo">
      All objects that can
      be selected should support this property.
      
   </note>
		</remarks>
	</doc><doc for="AccessibleObject.HitTest">
		<summary>
			<para>Retrieves the child object at the specified screen coordinates.</para>
		</summary>
		<param name="x">The horizontal screen coordinate.</param>
		<param name="y">The vertical screen coordinate.</param>
		<returns>
			<para>An <see cref="System.Windows.Forms.AccessibleObject"/> that represents the child object at the
   given screen coordinates. This method returns the calling object if the object itself is at the location specified. Returns <see langword="null"/> if no object is at the tested location.</para>
		</returns>
		<exception cref="T:System.Runtime.InteropServices.COMException"> The control cannot be hit tested.</exception>
		<remarks>
			<para>For nonrectangular objects such as list view items, the
      coordinates of the object's bounding rectangle retrieved by <see cref="System.Windows.Forms.AccessibleObject.Bounds"/> can fail if tested with <see cref="System.Windows.Forms.AccessibleObject.HitTest"/>, because <see cref="System.Windows.Forms.AccessibleObject.HitTest"/>
      determines the object's boundaries on a
      pixel-by-pixel basis.</para>
			<note type="inheritinfo">
      All visual objects
      must support this method; sound objects do not support it.
      
      </note>
		</remarks>
	</doc><doc for="AccessibleObject.AccessibleObject">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.AccessibleObject"/> class.</para>
		</summary>
		<remarks>
			<para>Typically, when you use this method to create an accessible object, you are providing
      your own implementations of the properties and methods of the class to
      provide functionality specific to your application.</para>
		</remarks>
	</doc><doc for="AccessibleObject.Value">
		<summary>
			<para> Gets or sets the value of an accessible object.</para>
		</summary>
		<value>
			<para>The value of an accessible object, or <see langword="null "/>if the object has no value
   set.</para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The value cannot be set or retrieved.</exception>
		<remarks>
			<para>Typically, the <see cref="System.Windows.Forms.AccessibleObject.Value"/> property represents visual information
   contained by the object. Not all objects support the <see cref="System.Windows.Forms.AccessibleObject.Value"/> property.</para>
			<para>In most cases, the <see cref="System.Windows.Forms.AccessibleObject.Value"/> property is used to tell the client about
what visual information an object contains. For example, the value for an edit
control is the text it contains, but a menu item has no value.</para>
			<para>The <see cref="System.Windows.Forms.AccessibleObject.Value"/> property can provide
hierarchical information in cases such as a tree view control. Although the
parent object in the tree view control does not provide information in
the <see cref="System.Windows.Forms.AccessibleObject.Value"/> property, each item within the control has
a zero-based value that represents its level within the hierarchy. Top-level
items have a value of zero, second-level items have a value of one, and so on.</para>
			<note type="note">
   The values returned from scroll bar
   and trackbar accessible objects indicate percentages, so they are integers
   between 0 and 100, inclusive.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
	</doc><doc for="AccessibleObject.DoDefaultAction">
		<summary>
			<para> Performs the default action associated with this accessible object.</para>
		</summary>
		<exception cref="T:System.Runtime.InteropServices.COMException">The default action for the control cannot be performed.</exception>
		<remarks>
			<para>Clients can retrieve the object's default action by
      inspecting an object's <see cref="System.Windows.Forms.AccessibleObject.DefaultAction"/> property. A client can use automation
      (if supported) instead of <see cref="System.Windows.Forms.AccessibleObject.DoDefaultAction"/> to perform an object's default action.
      However, <see cref="System.Windows.Forms.AccessibleObject.DoDefaultAction"/>
      
      provides an easy way to perform an object's most
      commonly used action.</para>
			<note type="inheritinfo">
      The default action performed by system-provided user
      interface elements depends on the keyboard state. That is, if a modifier key
      such as SHIFT, ALT, or CTRL is down (either by a user action or
      programmatically) when <see cref="System.Windows.Forms.AccessibleObject.DoDefaultAction"/>
      
      is called, the default action might
      not be the same as when those keys are not down. Not all objects
      have a default action.
      
   </note>
		</remarks>
	</doc><doc for="AccessibleObject.GetHelpTopic">
		<summary>
			<para> Gets an identifier for a Help topic identifier and the path to the Help file associated
      with this accessible object.</para>
		</summary>
		<param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
		<returns>
			<para>An identifier for a Help topic, or -1 if there is no Help topic. On return, the <paramref name="fileName
      "/> parameter contains
      the path to the Help file associated with this accessible object.</para>
		</returns>
		<exception cref="T:System.Runtime.InteropServices.COMException">The Help topic for the control cannot be retrieved.</exception>
		<remarks>
			<para>To display help for the <see cref="System.Windows.Forms.AccessibleObject"/> using the Windows Help 
   system, you can pass the file name and topic ID to the appropriate <see cref="System.Windows.Forms.Help.ShowHelp" qualify="true"/> method of <see cref="System.Windows.Forms.Help"/>.</para>
			<note type="inheritinfo">
   Not all objects need
   to support this property.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help" qualify="true"/>
	</doc><doc for="AccessibleObject.KeyboardShortcut">
		<summary>
			<para> Gets the shortcut key or access
      key for the accessible object.</para>
		</summary>
		<value>
			<para> The shortcut key or access key for the accessible
      object, or <see langword="null "/> if there is no shortcut key associated with the
      object. </para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The shortcut for the control cannot be retrieved.</exception>
		<remarks>
			<para> An access key, also known as a
      mnemonic, is an underlined character in the text of a menu, menu item, label of a button,
      or some other control. For example, a user can display a menu by pressing the
      ALT key while also pressing the indicated underlined key, such as ALT+F, to open
      the <see langword="File"/>
      
      menu. To use the access key of a menu item, the
      menu containing the item must be active. Controls such as toolbar buttons
      and menu items often have an associated shortcut key. A menu item can
      have both an access key and a shortcut key associated with it. If the value
      of the <see cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
      
      property is a single character, you can assume it is
      an access key.</para>
			<note type="inheritinfo">
      
      All objects that have a shortcut key or access key should support this property.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc><doc for="AccessibleObject.UnsafeNativeMethods.IEnumVariant.Clone"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AccessibleObject.UnsafeNativeMethods.IEnumVariant.Next"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AccessibleObject.UnsafeNativeMethods.IEnumVariant.Reset"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AccessibleObject.UnsafeNativeMethods.IEnumVariant.Skip">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AccessibleObject.DefaultAction">
		<summary>
			<para> Gets a string that describes the default action of the object. Not all objects have a default action.</para>
		</summary>
		<value>
			<para>A description of the default action for an object, or
   <see langword="null "/> if this object has no default action.</para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The default action for the control cannot be retrieved.</exception>
		<remarks>
			<para>The string describes the action that is performed on an object, not what the
      object does as a result. That is, a toolbar button that prints a document has a
      default action of "Press" rather than "Prints the current document." Do not
      confuse an object's default action with its value. </para>
			<note type="inheritinfo">
      The default implementation returns the accessible
      object's default action if the object wraps a system control that has a
      default action; otherwise, it returns
   <see langword="null"/>. Only controls that perform actions should
      support this method. Not all objects have default actions, and some objects
      might have a default action that is related to its <see cref="System.Windows.Forms.AccessibleObject.Value"/>
      property, such as in
      the following examples: A selected check box has a default action of "Uncheck" and
      a value of "Checked." A cleared check box has a default action of "Check" and
      a value of "Unchecked." A button labeled "Print" has a default action of
      "Press," with no value. A static text control or an edit control that shows
      "Printer" has no default action, but would have a value of "Printer." An
      object's <see cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
      
      property should be a verb or a short verb
      phrase.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject.Description">
		<summary>
			<para>Gets a string that describes the visual appearance of
      the specified object. Not all objects have a description.</para>
		</summary>
		<value>
			<para>A description of the object's visual appearance to the
      user, or <see langword="null "/>if the object does not
      have a description.</para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The description for the control cannot be retrieved.</exception>
		<remarks>
			<para>This property describes the object's visual appearance to the user. </para>
			<note type="inheritinfo">
      The default implementation returns the accessible
      object's description if the object wraps a system
      control; otherwise, it returns <see langword="null"/>. The description is typically used to provide
      greater context for low-vision or blind users. It can also be used for context
      searching or other applications. Servers need to support the <see cref="System.Windows.Forms.AccessibleObject.Description"/> property if the description is not
      obvious, or if it is redundant based on the object's <see cref="System.Windows.Forms.AccessibleObject.Name"/>, <see cref="System.Windows.Forms.AccessibleObject.Role"/>, <see cref="System.Windows.Forms.AccessibleObject.State"/>, and <see cref="System.Windows.Forms.AccessibleObject.Value"/> properties. For example, a button with
      "OK" does not need additional information, but a button that shows a picture of
      a cactus would. The <see cref="System.Windows.Forms.AccessibleObject.Name"/>, <see cref="System.Windows.Forms.AccessibleObject.Role"/>, and perhaps <see cref="System.Windows.Forms.AccessibleObject.Help"/> properties for the cactus button describe
      its purpose, but the <see cref="System.Windows.Forms.AccessibleObject.Description"/>
      
      property conveys information that is less tangible, like "A
      button that shows a picture of a cactus".
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject.Help">
		<summary>
			<para> Gets a description of what the object does or how the object is used.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> that contains the description of what the
   object does or how the object is used. Returns <see langword="null"/> if no help
   is defined.</para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The help string for the control cannot be retrieved.</exception>
		<remarks>
			<note type="inheritinfo">
      Not all objects
      need to support this property. Typically, this property contains ToolTip style information that
      is used either to describe what the object does or how to use it. For example,
      the <see cref="System.Windows.Forms.AccessibleObject.Help"/> property for a toolbar button that shows a
      printer might be "Prints the current document." The text for the <see cref="System.Windows.Forms.AccessibleObject.Help"/> property does not have to be unique within
      the user interface. Servers do not need to support the <see cref="System.Windows.Forms.AccessibleObject.Help"/> property if other
      properties provide sufficient information about the object's purpose and what
      actions the object might
      
      perform.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject">
		<summary>
			<para> Provides information that accessibility applications use to adjust an application's UI for users
      with impairments.</para>
		</summary>
		<remarks>
			<para> Accessibility applications can adjust features of the application to improve
      usability for users with disabilities. </para>
			<para>For users who are visually impaired, you can adjust software and operating
      system features to comply with their needs. For example, you can enlarge text
      and images and render them with a contrast. In addition, you can accommodate
      color-blindness with the appropriate use of colors. For users who are severely
      visually impaired, computers are accessible with screen review aids that
      translate on-screen text to speech or to a dynamic, refreshable, Braille
      display. </para>
			<para>For users who are hard of hearing, you can design programs that use visual
      cues, such as a flashing toolbar; or you can display spoken messages as text.
      For example, when turned on, the <see langword="SoundSentry"/> feature, an
      accessibility option in Control Panel, provides a visual warning whenever the
      system makes an alarm sound. </para>
			<para>For users with motion disabilities, you can design controls that refine or
      eliminate keyboard and mouse use, thereby improving computer accessibility.
      Control Panel offers assistance. For example, one alternative is to use the
      numeric keypad instead of the mouse for navigation. Another option, called
      <see langword="StickyKeys"/>, enables users who cannot hold down two or more keys
      at a time (such as CTRL+P) to get the same result by typing one key at a time. </para>
			<para>For users with cognitive and language disabilities, you can design software
      programs to better accommodate their needs. For example, using conspicuous or
      cued sequencing, uncomplicated displays, fewer words, and a reading level
      targeted to elementary school standards can benefit these users. </para>
			<para>For users with seizure disorders, you can design software programs to
      eliminate seizure provoking patterns. </para>
			<para>For an overview on accessibility, including additional information on accessibility applications, see the documentation for Microsoft
      Accessibility in the MSDN library or at the Microsoft Web
      site.</para>
			<note type="inheritinfo">
      When you inherit from this class, you can override all the
      members.
      
      </note>
			<note type="note">
      To use the <see cref="System.Windows.Forms.AccessibleObject"/>, you must add a reference to the
      <see langword="Accessibility"/> assembly installed with the .NET Framework.
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AccessibleObject.Bounds">
		<summary>
			<para> Gets the location and size of the accessible object.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/>
that represents the bounds of the accessible object.</para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The bounds of control cannot be retrieved.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AccessibleObject.Bounds"/> property retrieves the object's bounding rectangle in screen coordinates. If the object has
   a nonrectangular shape, then this property represents the smallest rectangle that completely
   encompasses the entire object region. Therefore, for nonrectangular objects such
   as list view items, the coordinates of the object's bounding rectangle can
   fail, if tested, by calling the <see cref="System.Windows.Forms.AccessibleObject.HitTest"/> method, because <see cref="System.Windows.Forms.AccessibleObject.HitTest"/> determines the object's boundaries on a
   pixel-by-pixel basis. </para>
			<note type="inheritinfo">
   The default implementation returns the accessible object's bounding rectangle if the object wraps a system control; otherwise, it returns <see cref="System.Drawing.Rectangle.Empty" qualify="true"/>.
   All
   visible
   accessible objects must support this method. Sound objects do not support this
   method.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.AccessibleObject.Bounds"/> property. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="6"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject.GetChild">
		<summary>
			<para> Retrieves the accessible child corresponding to the specified
      index.</para>
		</summary>
		<param name="index">The zero-based index of the accessible child.</param>
		<returns>
			<para>An <see cref="System.Windows.Forms.AccessibleObject"/> that represents the accessible child corresponding to the specified index.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      All accessible objects must support this property. If the
      method is not overridden, it returns <see langword="null"/>.
      Override this method when an accessible object needs to
      provide custom accessible children. If the index is invalid, then this method should return
      <see langword="null"/>. When you override this method, you must also override
      <see cref="System.Windows.Forms.AccessibleObject.GetChildCount"/>.
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="4"/>
		</example>
	</doc>
	<doc for="AccessibleObject.GetChildCount">
		<summary>
			<para> Retrieves the number of children
      belonging to an accessible object.</para>
		</summary>
		<returns>
			<para>The number of children belonging to an accessible object.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      All objects must support this property. The default implementation returns -1. Override this method when an accessible object needs to
      provide custom accessible children. When you override this method, you must also
      override <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> .
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code demonstrates shows overriding the <see cref="System.Windows.Forms.AccessibleObject.GetChildCount"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="4"/>
		</example>
	</doc>
	<doc for="AccessibleObject.Name">
		<summary>
			<para> Gets or sets the object name.</para>
		</summary>
		<value>
			<para>The object name, or <see langword="null "/>if the property has not been set.</para>
		</value>
		<exception cref="T:System.Runtime.InteropServices.COMException">The name of the control cannot be retrieved or set.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AccessibleObject.Name"/> property is a string used
   by clients to identify, find, or announce an object for the user. To access the
   name of a child object, you must first call <see cref="System.Windows.Forms.AccessibleObject.GetChild"/>
   with the index of the child whose name you are retrieving.</para>
			<note type="inheritinfo">
   All objects should support this property. An object's name
   should be intuitive so that users understand the object's meaning or purpose.
   Also, ensure that the <see langword="Name"/>
   
   property is unique relative to any sibling
   objects in the parent. Navigation within tables presents especially difficult
   problems for some users. Therefore, server developers should make table cell
   names as descriptive as possible. For example, you might create a cell
   name by combining the names of the row and column it occupies, such as
   "A1." However, it is generally better to use more descriptive names, such as
   "Karin, February." Many objects, such as icons, menus, check boxes, combo boxes,
   and other controls, have labels that are displayed to users. Any
   label displayed to users should be used for the object's <see cref="System.Windows.Forms.AccessibleObject.Name"/> property. For more information, see
   the <see cref="System.Windows.Forms.AccessibleObject.Name"/>
   
   Property.
</note>
			<para>If you are using menu or button text for
   the <see cref="System.Windows.Forms.AccessibleObject.Name"/> property, strip out the
   ampersands (&amp;) that mark the keyboard access keys. </para>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.AccessibleObject.Name"/> property. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="6"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject.Navigate">
		<summary>
			<para>Navigates to another accessible object.</para>
		</summary>
		<param name="navdir">One of the <see cref="System.Windows.Forms.AccessibleNavigation"/> values.</param>
		<returns>
			<para>An <see cref="System.Windows.Forms.AccessibleObject"/> that represents one
   of the <see cref="System.Windows.Forms.AccessibleNavigation"/> values. </para>
		</returns>
		<exception cref="T:System.Runtime.InteropServices.COMException">The navigation attempt fails.</exception>
		<remarks>
			<para>Navigation, both spatial and logical, is always
      restricted to the user interface elements within a container. With spatial
      navigation, clients can navigate only to a sibling of the starting object.
      Depending on the navigational flag used with logical navigation, clients can
      navigate to either a child or to a sibling of the starting object. This method
      does not change the selection or focus. To change the focus or to select an
      object, use <see cref="System.Windows.Forms.AccessibleObject.Select"/>. The <see cref="System.Windows.Forms.AccessibleObject.Navigate"/>
      
      method retrieves only user interface elements that have a
      defined screen location.</para>
			<note type="inheritinfo">
      
      All visual objects must support this method. If an object
      has the state <see cref="System.Windows.Forms.AccessibleStates.Invisible" qualify="true"/>,
      navigation
      to this hidden object might fail. Some system-defined interface elements such as menus, menu
      items, and pop-up menus allow navigation to objects that are not visible.
      However, other system-defined user interface elements do not support this. If possible, servers should support navigation
      to objects that are not visible, but this support is not required and clients should
      not expect it.
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code demonstrates shows overriding the <see cref="System.Windows.Forms.AccessibleObject.Navigate"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="6"/>
		</example>
	</doc>
	<doc for="AccessibleObject.Parent">
		<summary>
			<para>Gets the parent of an accessible object.</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.AccessibleObject"/> that represents the parent of an
   accessible object, or <see langword="null"/> if there is no parent
   object.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      All objects should
      support this property.
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.AccessibleObject.Parent"/> property. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="6"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject.Role">
		<summary>
			<para> Gets the role of this accessible object.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.AccessibleRole"/> values, or <see cref="System.Windows.Forms.AccessibleRole.None" qualify="true"/> if no role has been
   specified.</para>
		</value>
		<remarks>
			<para>The role of the object helps describe the function of the object.</para>
			<note type="inheritinfo">
      All objects should
      support this property.
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.AccessibleObject.Role"/> property. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.State"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
	<doc for="AccessibleObject.Select">
		<summary>
			<para> Modifies the selection or moves the keyboard focus of the accessible object.
      </para>
		</summary>
		<param name="flags">One of the <see cref="System.Windows.Forms.AccessibleSelection"/> values. </param>
		<exception cref="T:System.Runtime.InteropServices.COMException">The selection cannot be performed.</exception>
		<remarks>
			<para>Applications can use this method to perform complex selection operations.</para>
			<para>The following describes which <see cref="System.Windows.Forms.AccessibleSelection"/> values to specify when
   calling <see cref="System.Windows.Forms.AccessibleObject.Select"/> to perform complex selection
   operations.</para>
			<list type="table">
				<listheader>
					<term>Operation</term>
					<description>Flag Combination</description>
				</listheader>
				<item>
					<term> To simulate a click</term>
					<description><see cref="System.Windows.Forms.AccessibleSelection.TakeFocus" qualify="true"/>
						<see langword="OR"/>
						<see cref="System.Windows.Forms.AccessibleSelection.TakeSelection" qualify="true"/></description>
				</item>
				<item>
					<term> To select a target item by simulating CTRL + click </term>
					<description><see cref="System.Windows.Forms.AccessibleSelection.TakeFocus" qualify="true"/>
						<see langword="OR"/>
						<see cref="System.Windows.Forms.AccessibleSelection.AddSelection" qualify="true"/></description>
				</item>
				<item>
					<term> To cancel selection of a target item by simulating CTRL + click </term>
					<description><see cref="System.Windows.Forms.AccessibleSelection.TakeFocus" qualify="true"/>
						<see langword="OR"/>
						<see cref="System.Windows.Forms.AccessibleSelection.RemoveSelection" qualify="true"/></description>
				</item>
				<item>
					<term> To simulate SHIFT + click</term>
					<description><see cref="System.Windows.Forms.AccessibleSelection.TakeFocus" qualify="true"/>
						<see langword="OR"/>
						<see cref="System.Windows.Forms.AccessibleSelection.ExtendSelection" qualify="true"/></description>
				</item>
				<item>
					<term> To select a range of objects and put focus on the last object</term>
					<description>Specify <see cref="System.Windows.Forms.AccessibleSelection.TakeFocus" qualify="true"/>on the starting
   object to set the selection anchor. Then call <see cref="System.Windows.Forms.AccessibleObject.Select"/> again and specify
<see cref="System.Windows.Forms.AccessibleSelection.TakeFocus" qualify="true"/>
						<see langword="OR"/>
						<see cref="System.Windows.Forms.AccessibleSelection.ExtendSelection" qualify="true"/>
on the last object. </description>
				</item>
				<item>
					<term> To deselect all objects</term>
					<description>Specify <see cref="System.Windows.Forms.AccessibleSelection.TakeSelection" qualify="true"/> on any object. This
   flag deselects all selected objects except the one just selected.
   Then call <see cref="System.Windows.Forms.AccessibleObject.Select"/> again and specify
<see cref="System.Windows.Forms.AccessibleSelection.RemoveSelection" qualify="true"/> 
on the same object.</description>
				</item>
			</list>
			<note type="inheritinfo">
   All objects that can
   be selected or receive the keyboard focus must support this method.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code demonstrates shows overriding the <see cref="System.Windows.Forms.AccessibleObject.Select"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="6"/>
		</example>
	</doc>
	<doc for="AccessibleObject.State">
		<summary>
			<para>Gets
      the state of this accessible object.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.AccessibleStates"/> values, or <see cref="System.Windows.Forms.AccessibleStates.None" qualify="true"/>, if no state has
   been set.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      All objects should
      support this property.
      
      </note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.AccessibleObject.State"/> property. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.Bounds"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Value"/>
	</doc>
</docs>
