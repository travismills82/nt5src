<docs>
	<doc for="TextBoxBase.borderStyle">
		<summary>
     The current border for this edit control.
 </summary>
	</doc>
	<doc for="TextBoxBase.maxLength">
		<summary>
     Controls the maximum length of text in the edit control.
 </summary>
	</doc>
	<doc for="TextBoxBase.requestedHeight">
		<summary>
     Used by the autoSizing code to help figure out the desired height of
     the edit box.
 </summary>
	</doc>
	<doc for="TextBoxBase.TextBoxBase">
		<summary>
     Creates a new TextBox control.  Uses the parent's current font and color
     set.
     Note: If you change this constructor, be sure to change the one below in the
     exact same way.
 </summary>
	</doc>
	<doc for="TextBoxBase.AcceptsTab">
		<summary>
			<para>Gets or sets
       a value indicating whether pressing the TAB key
       in a multiline text box control types
       a TAB character in the control instead of moving the focus to the next control
       in the tab order.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if users can enter tabs in a multiline text box using the 
    TAB key; <see langword="false"/> if pressing the TAB key moves
    the focus. The default is <see langword="false"/>
    .</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/> property is set to
 <see langword="true"/>
 , the user must press CTRL+TAB
 to move the focus to the next control in the tab order.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to create a multiline <see cref="System.Windows.Forms.TextBox"/> control with vertical scroll bars. This example also uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline text box control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBoxBase.AcceptsTab Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBox.AcceptsReturn"/>
	</doc>
	<doc for="TextBoxBase.AcceptsTabChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>
	</doc>
	<doc for="TextBoxBase.AutoSize">
		<summary>
			<para> Gets or sets a
       value indicating whether
       the height of the control automatically adjusts when the font assigned to
       the control is changed.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the height of the control automatically adjusts when 
    the font is changed; otherwise, <see langword="false"/>. The default is
 <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Multiline text
       box controls ignore this property setting. When
       this property is set to <see langword="true"/>
       , the text box
       control resizes its height based on the size of the font assigned to the
       control. You can use this property to ensure that the user can read text
       assigned to a single-line version of
       the control regardless of the font.</para>
		</remarks>
	</doc>
	<doc for="TextBoxBase.AutoSizeChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.AutoSize"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.AutoSize"/>
	</doc>
	<doc for="TextBoxBase.BackColor">
		<summary>
			<para>Gets or sets
       the background color of the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Color"/> that represents the background of the
    control.</para>
		</value>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.TextBoxBase.BackColor"/> property to change the background 
    color of the text control to blend into the color
    scheme of your forms.</para>
			<para> 
    To change the color of the text within the control, use the <see cref="System.Windows.Forms.TextBoxBase.ForeColor"/> property. When setting the <see cref="System.Windows.Forms.TextBoxBase.BackColor"/> property of your text control, ensure that the
    color you choose does not cause the text of the control to disappear. For example,
    if the <see cref="System.Windows.Forms.TextBoxBase.BackColor"/> and <see cref="System.Windows.Forms.TextBoxBase.ForeColor"/> properties are both set to
 <see langword="Color.Black"/>, the text within your textbox control 
    will not be visible.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.ForeColor"/>
	</doc>
	<doc for="TextBoxBase.BackgroundImage">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.BorderStyleChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.BorderStyle"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.BorderStyle"/>
	</doc>
	<doc for="TextBoxBase.CanUndo">
		<summary>
			<para>Gets a value
       indicating whether the user can undo the previous operation in a text box control.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the user can undo the 
    previous operation performed in a text box control; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>If this method returns <see langword="true"/>, you can call
    the <see cref="System.Windows.Forms.TextBoxBase.Undo"/> method to undo the last operation
    in a text box. You can use this method in the <see cref="System.Windows.Forms.MenuItem.Popup"/> event of a <see cref="System.Windows.Forms.MenuItem"/>, or in code that manages the state of buttons
    on a <see cref="System.Windows.Forms.ToolBar"/> to enable or disable the
    ability to undo the previous operation in a text box control.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.CanUndo Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Cut"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Copy"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Undo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Clear"/>
	</doc>
	<doc for="TextBoxBase.CreateParams">
		<nodoc/>
		<summary>
			<para>
       Returns the parameters needed to create the handle. Inheriting classes
       can override this to provide extra functionality. They should not,
       however, forget to call base.getCreateParams() first to get the struct
       filled up with the basic info.
    </para>
		</summary>
		<seealso cref="System.Windows.Forms.CreateParams"/>
	</doc>
	<doc for="TextBoxBase.ForeColor">
		<summary>
			<para>Gets or sets the foreground color of the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Color"/> that represents the control's foreground
    color.</para>
		</value>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.TextBoxBase.ForeColor"/> property to change the color 
    of the text within the control to match the text of other controls on your
    form. You can also use this property to highlight a specific text box that
    contains an invalid value. </para>
			<para>To change the background color of the control, use the <see cref="System.Windows.Forms.TextBoxBase.BackColor"/> property. When setting the <see cref="System.Windows.Forms.TextBoxBase.ForeColor"/> property of your text control, ensure that the color 
 you choose does not cause the text of the control to disappear. For example,
 if the <see cref="System.Windows.Forms.TextBoxBase.ForeColor"/> and <see cref="System.Windows.Forms.TextBoxBase.BackColor"/> properties are both set to
 <see langword="Color.Black"/> , the text within your textbox 
 control will not be visible.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.BackColor"/>
	</doc>
	<doc for="TextBoxBase.HideSelection">
		<summary>
			<para>Gets or sets a value indicating whether the selected
       text in the text box control remains highlighted when the control loses focus.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the selected text does not 
    appear highlighted when the text box control loses focus; <see langword="false"/>,
    if the selected text remains highlighted when the text box control loses
    focus. The default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>You can use this property to keep
       text highlighted in a text box control while another form or a dialog box has
       focus, such as a spelling checker dialog box.</para>
		</remarks>
	</doc>
	<doc for="TextBoxBase.HideSelectionChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.HideSelection"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.HideSelection"/>
	</doc>
	<doc for="TextBoxBase.Lines">
		<summary>
			<para>Gets or
       sets the lines of text in a text box control.</para>
		</summary>
		<value>
			<para>An array of strings that contains the text in
       a text box control.</para>
		</value>
		<remarks>
			<para>Each element in the array becomes a line of text in the
       text box control. If the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property of the text box control is
       set to <see langword="true"/> and a newline character appears in
       the text, the text following the newline character is added to a new element in
       the array and displayed on a separate line.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to extract all strings of 
    text from a multiline text box control and displays them using the <see cref="System.Diagnostics.Debug.WriteLine" qualify="true"/>
    method. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control has been
    created, named <c>textBox1</c>,
 and that it has been filled with lines of text.</para>
			<codelink SampleID="Classic TextBoxBase.Lines Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Text"/>
	</doc>
	<doc for="TextBoxBase.Modified">
		<summary>
			<para>Gets or sets a value that indicates that the text box control has been modified by the user since
       the control was created or its contents were last set.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the control's contents have 
    been modified; otherwise, <see langword="false"/>. The default is
 <see langword="false"/> .</para>
		</value>
		<remarks>
			<para> You can use this property to determine if the user has
       modified the contents of the text box control. You can also set this property in
       code to indicate that changes were made to the text box control by the
       application. This property can be used by validation and data-saving methods to determine
       if changes were made in a text box control so the changed contents can be validated or
       saved.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.Control.TextChanged"/> event for a <see cref="System.Windows.Forms.TextBox"/>, a derived class, to determine if the contents of the <see cref="System.Windows.Forms.TextBox"/>
 control have changed since the control was filled with data. The example uses a
 string to store the original contents of the control and compares it against the
 contents of the <see cref="System.Windows.Forms.TextBox"/> to determine if the contents have
 changed. If the contents have changed, the <see cref="System.Windows.Forms.TextBoxBase.Modified"/>
 property is set to <see langword="true"/>. Otherwise, it is reset to
 <see langword="false"/> 
 . This example assumes that
 a <see cref="System.Windows.Forms.TextBox"/> control
 named <c>textBox1</c> has been
 created and that a <see langword="String "/>variable
 named <c>originalText</c>
 has been created to store the original text for
 the <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic TextBoxBase.Modified Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBase.ModifiedChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.Modified"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Modified"/>
	</doc>
	<doc for="TextBoxBase.MultilineChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Multiline"/>
	</doc>
	<doc for="TextBoxBase.PreferredHeight">
		<summary>
			<para>Gets the preferred
       height for a single-line text box.</para>
		</summary>
		<value>
			<para>The preferred height of a single-line
       text box.</para>
		</value>
		<remarks>
			<para>The size returned by this property is based
       on the font height and border style of the text box. You can use
       this property to determine the appropriate size of the text box to ensure that text
       is properly displayed in the control. The value returned by this property is in
       pixels.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>
 , a derived class,
 to create a text box that can properly display text using a 20-point Arial
 font with a single border. This example uses the <see cref="System.Windows.Forms.TextBoxBase.PreferredHeight"/> property to determine the
 appropriate height of the control after the font and <see cref="System.Windows.Forms.TextBoxBase.BorderStyle"/> have been
 assigned.</para>
			<codelink SampleID="Classic TextBoxBase.PreferredHeight Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.AutoSize"/>
	</doc>
	<doc for="TextBoxBase.ReadOnly">
		<summary>
			<para>Gets or sets a value indicating whether text in the text box is read-only.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if 
    the text box is read-only; otherwise, <see langword="false"/>. The default
    is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>When this property is set to <see langword="true"/> , the contents of the control cannot be 
    changed by the user at runtime. With this property set to <see langword="true"/>,
    you can still set the value of the <see cref="System.Windows.Forms.TextBoxBase.Text"/>
    property in code. You can use this feature
    instead of disabling the control with the <see cref="System.Windows.Forms.Control.Enabled"/>
    property to allow the contents to be copied.</para>
		</remarks>
	</doc>
	<doc for="TextBoxBase.ReadOnlyChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBoxBase.ReadOnly"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.ReadOnly"/>
	</doc>
	<doc for="TextBoxBase.SelectedText">
		<summary>
			<para>Gets or sets a value indicating the currently selected text in the control.</para>
		</summary>
		<value>
			<para>A string that represents the currently selected text in the text
       box.</para>
		</value>
		<remarks>
			<para>You can assign text to this property to change
       the text currently selected in the text box. If no text is currently selected in the
       text box, this property returns a zero-length string.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectedText Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectionStart"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectionLength"/>
	</doc>
	<doc for="TextBoxBase.WindowText">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.WordWrap">
		<summary>
			<para> Indicates whether a
       multiline text box control automatically wraps words to the beginning of the next
       line when necessary.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the 
    multiline text box control wraps words; <see langword="false"/> if the text box
    control automatically scrolls horizontally when the user types past the right
    edge of the control. The default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>If this property is set to <see langword="true"/>, horizontal scroll bars are not displayed 
    regardless of the <see cref="System.Windows.Forms.TextBox.ScrollBars"/> property
    setting.</para>
			<note type="note">
    In the derived class, <see cref="System.Windows.Forms.TextBox"/>, text
    within the control will always wrap regardless of the property setting of this
    property unless the <see cref="System.Windows.Forms.TextBox.TextAlign"/>
    property is set to
 <see langword="HorizontalAlignment.Left"/>.
 </note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to create a multiline <see cref="System.Windows.Forms.TextBox"/> control with vertical scroll bars. This example also uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline text box control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBoxBase.AcceptsTab Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBase.AdjustHeight">
		<summary>
     Adjusts the height of a single-line edit control to match the height of
     the control's font.
 </summary>
	</doc>
	<doc for="TextBoxBase.Clear">
		<summary>
			<para>Clears all text from the text box control.</para>
		</summary>
		<remarks>
			<para>You can use this method to clear the contents of the control instead of 
       assigning the <see cref="System.Windows.Forms.TextBoxBase.Text"/> property an empty string.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/> , a derived class, to create an event handler 
    for the <see cref="System.Windows.Forms.Control.TextChanged"/> event. The code within the event
    handler restricts data to numbers. After text has been entered in the control,
    the code determines if the text entered is a number. If the text is not a number,
    the code clears the text from the control and a <see cref="System.Windows.Forms.MessageBox"/> is displayed to alert the user that only
    numbers are accepted. The example assumes that a <see langword="Boolean"/>
    variable named <c>flag</c>
 and a <see cref="System.Windows.Forms.TextBox"/> control
 called <c>textBox1</c> are defined outside of
 this method. This example demonstrates how to use a flag variable to avoid a
 cascading event in the <see cref="System.Windows.Forms.Control.TextChanged"/> event.</para>
			<codelink SampleID="Classic TextBoxBase.Clear Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Cut"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Copy"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.CanUndo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.ClearUndo"/>
	</doc>
	<doc for="TextBoxBase.ClearUndo">
		<summary>
			<para>Clears information about the most recent operation
       from the undo buffer of the text box.</para>
		</summary>
		<remarks>
			<para>You can use this method to prevent an undo operation from repeating, based on
       the state of your application.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Cut"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Copy"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.CanUndo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Clear"/>
	</doc>
	<doc for="TextBoxBase.Copy">
		<summary>
			<para>Copies the current selection in the text box to the Clipboard.</para>
		</summary>
		<remarks>
			<para>You can use this method, instead of using the <see cref="System.Windows.Forms.Clipboard"/>
 class, to copy text in the text box and place it in the Clipboard.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Cut"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Undo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.CanUndo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Clear"/>
	</doc>
	<doc for="TextBoxBase.Cut">
		<summary>
			<para>Moves the current selection in the text box to the Clipboard.</para>
		</summary>
		<remarks>
			<para>This method will only cut text from the text box if text 
       is selected in the control. You can use this method, instead of using the
    <see cref="System.Windows.Forms.Clipboard"/> class, to copy text in the text box and move it to the
       Clipboard.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Undo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Copy"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.CanUndo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Clear"/>
	</doc>
	<doc for="TextBoxBase.OnAutoSizeChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBoxBase.AutoSizeChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnAutoSizeChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnAutoSizeChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnAutoSizeChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.AutoSize"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.AutoSizeChanged"/>
	</doc>
	<doc for="TextBoxBase.OnAcceptsTabChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTabChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.AcceptsTabChanged"/>
	</doc>
	<doc for="TextBoxBase.OnBorderStyleChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBoxBase.BorderStyleChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnBorderStyleChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnBorderStyleChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnBorderStyleChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.BorderStyle"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.BorderStyleChanged"/>
	</doc>
	<doc for="TextBoxBase.OnHideSelectionChanged">
		<summary>
			<para>Raise the <see cref="System.Windows.Forms.TextBoxBase.HideSelectionChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnHideSelectionChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnHideSelectionChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnHideSelectionChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.HideSelection"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.HideSelectionChanged"/>
	</doc>
	<doc for="TextBoxBase.OnModifiedChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBoxBase.ModifiedChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnModifiedChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnModifiedChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnModifiedChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Modified"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.ModifiedChanged"/>
	</doc>
	<doc for="TextBoxBase.OnMultilineChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBoxBase.MultilineChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnMultilineChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnMultilineChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnMultilineChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Multiline"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.MultilineChanged"/>
	</doc>
	<doc for="TextBoxBase.OnReadOnlyChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBoxBase.ReadOnlyChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.OnReadOnlyChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBoxBase.OnReadOnlyChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.TextBoxBase.OnReadOnlyChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.ReadOnly"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.ReadOnlyChanged"/>
	</doc>
	<doc for="TextBoxBase.ResetCursor">
		<summary>
			<para>
       Resets the <see cref="System.Windows.Forms.Control.Cursor"/> property to its default value.
    </para>
		</summary>
		<remarks>
			<para>
       You typically use this method if you are either creating a designer for a text box control or creating your own control incorporating the <see cref="System.Windows.Forms.TextBoxBase"/> class. You can use
       the <see cref="System.Windows.Forms.TextBoxBase.ShouldSerializeCursor"/> method to determine whether the property value has changed from its default.
    </para>
		</remarks>
	</doc>
	<doc for="TextBoxBase.SetBoundsCore">
		<summary>
    Overrides Control.setBoundsCore to enforce autoSize.
 </summary>
	</doc>
	<doc for="TextBoxBase.SetWordWrapInternal">
		<summary>
     RichTextBox overwrites this.
 </summary>
	</doc>
	<doc for="TextBoxBase.ShouldSerializeCursor">
		<summary>
			<para> Indicates whether the <see cref="System.Windows.Forms.Control.Cursor"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; otherwise, <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para> You typically use this method if you are creating either a designer for
       a text box control or your own control incorporating <see cref="System.Windows.Forms.TextBoxBase"/>.</para>
		</remarks>
	</doc>
	<doc for="TextBoxBase.ToString">
		<summary>
    Provides some interesting information for the TextBox control in
    String form.
 </summary>
		<returns>
    String
 </returns>
	</doc>
	<doc for="TextBoxBase.Undo">
		<summary>
			<para>Undoes the last edit operation in the text box.</para>
		</summary>
		<remarks>
			<para>This method will undo the last clipboard or text change operation performed
       in the text box control if the <see cref="System.Windows.Forms.TextBoxBase.CanUndo"/> property
       returns <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Cut"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Copy"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.CanUndo"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Clear"/>
	</doc>
	<doc for="TextBoxBase.WmReflectCommand">
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.WmSetFont">
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.WndProc">
		<summary>
    The edits window procedure.  Inheritng classes can override this
    to add extra functionality, but should not forget to call
    base.wndProc(m); to ensure the combo continues to function properly.
 </summary>
		<param name="m">
    A Windows Message Object.
 </param>
	</doc>
	<doc for="TextBoxBase.CreateAccessibilityInstance">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBaseAccessibleObject.public class TextBoxBaseAccessibleObject : ControlAccessibleObject {">
		<summary>
			<para>To be supplied...</para>
		</summary>
	</doc>
	<doc for="TextBoxBase.ProcessDialogKey">
		<nodoc/>
	</doc>
	<doc for="TextBoxBaseAccessibleObject.public override string Name {">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBase.BorderStyle">
		<summary>
			<para>Gets or sets the border type
      of the text box control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.BorderStyle"/> that represents the border type of the text box
   control. The default is <see langword="Fixed3D"/>
   .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">A value that is not within the range of valid values for the enumeration was assigned to the property.</exception>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.TextBoxBase.BorderStyle"/> property
   to create borderless and flat style controls, in addition to the default
   three-dimensional control.</para>
			<note type="note">
   The derived class, <see cref="System.Windows.Forms.RichTextBox"/>, does not support
   the <see langword="BorderStyle.FixedSingle"/> style. This style will cause
   the borderstyle to use the <see langword="BorderStyle.Fixed3D"/> style
   instead.
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>
, a derived class, to create a text box that can properly display text using 20-point Arial with a single border. This example uses the <see cref="System.Windows.Forms.TextBoxBase.PreferredHeight"/> property to determine the appropriate height of the control after the font and <see cref="System.Windows.Forms.TextBoxBase.BorderStyle"/> have been assigned to the control.</para>
			<codelink SampleID="Classic TextBoxBase.BorderStyle Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBase.Paste">
		<summary>
			<para>Replaces the current selection in the text box with the contents of the Clipboard.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.TextBoxBase.Paste"/>
method will only paste text into the control if text is currently
stored in the Clipboard. Once your application exits, any content stored in the
Clipboard is removed.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for reading from the Clipboard. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionClipboard.AllClipboard" qualify="true"/>.</permission>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBaseAccessibleObject">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBaseAccessibleObject.TextBoxBaseAccessibleObject">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBaseAccessibleObject.Name">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBase.CreateHandle">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.IsInputKey">
		<nodoc/>
		<summary>
   Overridden to handle TAB key.
   </summary>
	</doc>
	<doc for="TextBoxBase.OnHandleCreated">
		<nodoc/>
		<summary>
   Overridden to update the newly created handle with the settings of the
   MaxLength and PasswordChar properties.
   </summary>
	</doc>
	<doc for="TextBoxBase.OnHandleDestroyed">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.OnFontChanged">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="TextBoxBase.SelectAll">
		<summary>
			<para>Selects all text in the text box.</para>
		</summary>
		<remarks>
			<para>This method enables you to select all text within the
      control. You can use this method inconjunction with the <see cref="System.Windows.Forms.TextBoxBase.Cut"/>
      method, which requires text to be selected in the control, to cut the entire contents of the control and
      paste them into the Clipboard.</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to determine if any text is
   selected in the control. If no text is selected, a call is made to
   the <see cref="System.Windows.Forms.TextBoxBase.SelectAll"/>
   method before copying the contents of the control
   to the Clipboard. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> has been created
   named <c>textBox1</c>
.</para>
			<codelink SampleID="Classic TextBoxBase.SelectAll Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBase.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBase.ScrollToCaret">
		<summary>
			<para>Scrolls the contents of the control to the current caret position.</para>
		</summary>
		<remarks>
			<para>This method enables you to scroll the contents of the 
      control until the caret is within the visibile region of the control. If the
      caret is positioned below the visible region of the control, the <see cref="System.Windows.Forms.TextBoxBase.ScrollToCaret"/> method will scroll the contents of the
      control until the caret is visible at the bottom of the control. If the caret is
      positioned above the visible region of the control, this method scrolls the contents of the control
      until the caret is visible at the top of the control. You can use this
      method in a multiline text box to ensure that the current text entry point is
      within the visible region of the control.</para>
			<note type="note">
      This method has no effect if the control
      does not have focus or if
      the caret is already positioned in the
      visible region of the control.
      
   </note>
		</remarks>
	</doc><doc for="TextBoxBase.SelectionLength">
		<summary>
			<para>Gets or sets the number of characters selected in the text
      box.</para>
		</summary>
		<value>
			<para>The number of characters selected in the text box.</para>
		</value>
		<exception cref="System.ArgumentException">The value assigned to the property is less than zero.</exception>
		<remarks>
			<para>You can use this property to determine if any characters
      are currently selected in the text box control before performing operations on
      the selected text. When the value of the <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/> property is set to a value that is larger than
      the number of characters within the text of the control, the value of the
   <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/> property is set to the entire length of text
      within the control minus the value of the <see cref="System.Windows.Forms.TextBoxBase.SelectionStart"/> property (if any value is specified for the
   <see cref="System.Windows.Forms.TextBoxBase.SelectionStart"/>
   property).</para>
			<note type="note">
   You can programmatically move the caret within the
   text box by setting the <see cref="System.Windows.Forms.TextBoxBase.SelectionStart"/> to the position within
   the text box where you want the caret to move to and set the <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/>
   property to a value of zero (0). The text box
   must have focus in order for the caret to be moved.
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectionStart"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectedText"/>
	</doc><doc for="TextBoxBase.Select">
		<overload>
			<para>Selects text within the control.</para>
		</overload>
		<summary>
			<para>Selects a range of text in the text box.</para>
		</summary>
		<param name="start">The position of the first character in the current text selection within the text box.</param>
		<param name="length">The number of characters to select.</param>
		<exception cref="System.ArgumentException">The value assigned to either the <paramref name="start"/> parameter or the <paramref name="length"/> parameter is less than zero.</exception>
		<remarks>
			<para>If you want to set the start position to the first
      character in the control's text, set the <paramref name="start"/> parameter to 0. You
      can use this method to select a substring of text, such as when searching
      through the text of the control and replacing information.</para>
			<note type="note">
      You can programmatically move the caret within the
      text box by setting the <paramref name="start"/> parameter to the position within the text
      box where you want the caret to move to and set the <paramref name="length"/> parameter to a
      value of zero (0). The text box must have focus in order for the caret to be
      moved.
   </note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to search the contents of
   the control for the instance of the word "fox". If found, the code selects the
   word in the control using the <see cref="System.Windows.Forms.TextBoxBase.Select"/> method. This
   example assumes that a <see cref="System.Windows.Forms.TextBox"/> named <c>textBox1</c> has been created
and its <see cref="System.Windows.Forms.TextBoxBase.Text"/> property contains the sentence "The
quick brown fox jumps over the lazy dog.".</para>
			<codelink SampleID="Classic TextBoxBase.Select Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectAll"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectionLength"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectionStart"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectedText"/>
	</doc><doc for="TextBoxBase.OnPaint">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="TextBoxBase.Text">
		<summary>
			<para>Gets or sets
      the current text in the text box.</para>
		</summary>
		<value>
			<para>The text displayed in the control.</para>
		</value>
		<remarks>
			<para>To display multiple lines of text in a text box, set
      the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property to <see langword="true"/>.
      To read or set the text of a multiline text box, use the <see cref="System.Windows.Forms.TextBoxBase.Lines"/> property. The amount of text that can be
      entered in the <see cref="System.Windows.Forms.RichTextBox"/>
      control is limited only by available system
      memory.</para>
		</remarks>
		<platnote platform="Win98, WinMe">The amount of text that can be stored in the <see cref="System.Windows.Forms.TextBoxBase.Text"/> property is limited to 65KB of memory for the <see cref="System.Windows.Forms.TextBox"/> control.
</platnote>
		<platnote platform="NT4, Win2K, Win2KPro, Win2KSvr, Win2KADC, WinXP">The amount of text that can be stored in the <see cref="System.Windows.Forms.TextBoxBase.Text"/> property is limited to the amount available system memory.
</platnote>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to create a multiline <see cref="System.Windows.Forms.TextBox"/> control with vertical scroll bars. This example also uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline text box control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBoxBase.AcceptsTab Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Lines"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Multiline"/>
	</doc><doc for="TextBoxBase.BackgroundImageChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBoxBase.MaxLength">
		<summary>
			<para>Gets or sets the maximum number of characters
      the user can type or paste into the text box control.</para>
		</summary>
		<value>
			<para>The number of
      characters that can be entered into the control. The default is 32767.</para>
		</value>
		<exception cref="System.ArgumentException">The value assigned to the property is less than 0.</exception>
		<remarks>
			<para> You can
      use this property to restrict the length of text entered in the control for values
      such as postal codes and telephone numbers, or to restrict the length of
      text entered when the data is to be entered in a database. You can limit the text
      entered into the control to the maximum length of the corresponding field in the
      database.</para>
			<note type="note">
      In code, you can set the
      value of the <see cref="System.Windows.Forms.TextBoxBase.Text"/>
      property to a value that has a length greater than the
      value specified by the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/>
      property. This property
      only affects text entered into the control at run time.
      
   </note>
		</remarks>
		<platnote platform="NT4, Win2K, Win2KPro, Win2KSvr, Win2KADC, WinXP">For single line text box controls, if the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/> property is set to 0, the maximum number of characters the user can enter is 2147483646 or an amount based on available memory, whichever is smaller. For multiline text box controls, the maximum number of characters the user can enter is 4294967295 or an amount based on available memory, whichever is smaller.
</platnote>
		<platnote platform="Win9x, Win95, Win98, WinMe">For single line text box controls, if the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/> property is set to 0, the maximum number of characters the user can enter is 32,766 or an amount based on available memory, whichever is smaller. For multiline text box controls, the maximum number of characters the user can enter is 65,535 or an amount based on available memory, whichever is smaller.
</platnote>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.TextBox"/>, to create a text box that is used to accept a password. This example uses the <see cref="System.Windows.Forms.TextBox.CharacterCasing"/> property to change all characters typed to uppercase and the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/> property to restrict the password length to eight characters. This example also uses the <see cref="System.Windows.Forms.TextBox.TextAlign"/> property to center the password in the <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic TextBoxBase.MaxLength Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBase">
		<summary>
			<para>Implements the basic functionality required by text controls.</para>
		</summary>
		<remarks>
			<para>This class implements the core features of text
      manipulation controls, such as <see cref="System.Windows.Forms.TextBox"/> and <see cref="System.Windows.Forms.RichTextBox"/>. These include text
      selection, Clipboard functionality, multiline text control support, and many
      events.</para>
			<note type="inheritinfo">
      You do not typically inherit from
      <see cref="System.Windows.Forms.TextBoxBase"/>. To create your own text control class, inherit
      from <see cref="System.Windows.Forms.TextBox"/> or <see cref="System.Windows.Forms.RichTextBox"/>.
      
      </note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to
   create a multiline <see cref="System.Windows.Forms.TextBox"/> control with vertical scroll bars. This example
   also uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline text box
   control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBoxBase.AcceptsTab Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBox"/>
		<seealso cref="System.Windows.Forms.RichTextBox"/>
		<keyword term="text box"/>
		<keyword term="text manipulation"/>
	</doc>
	<doc for="TextBoxBase.SelectionStart">
		<summary>
			<para>Gets or sets the starting
      point of text selected in the text
      box.</para>
		</summary>
		<value>
			<para>The
      starting position of text selected in the text box.</para>
		</value>
		<exception cref="System.ArgumentException">The value assigned to the property is less than zero.</exception>
		<remarks>
			<para> If no text is selected in the control,
      this property indicates the insertion point for new text. If you set this property
      to a location beyond the length of the text in the control, the
      selection start position will be placed after the last character. When text is selected
      in the text box control, changing this property might decrease the value of
      the <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/>
      property. If the remaining text in the control after the position indicated by
      the <see cref="System.Windows.Forms.TextBoxBase.SelectionStart"/> property is less than the value of the <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/> property, the value of the <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/> property is automatically decreased. The value
      of the <see cref="System.Windows.Forms.TextBoxBase.SelectionStart"/> property never causes an increase in the
   <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/>
   property.</para>
			<note type="note">
   You can programmatically move the caret within
   the text box by setting the <see cref="System.Windows.Forms.TextBoxBase.SelectionStart"/> to the position within
   the text box where you want the caret to move to and set the <see cref="System.Windows.Forms.TextBoxBase.SelectionLength"/> property to a value of zero (0). The text
   box must have focus in order for the caret to be
   moved.
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class. It provides <see cref="System.Windows.Forms.MenuItem.Click"/> event handlers for <see cref="System.Windows.Forms.MenuItem"/> objects that perform Cut, Copy, Paste, and Undo operations. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> control named <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic TextBoxBase.SelectionLength Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBoxBase.TextLength">
		<summary>
			<para>Gets the length of text in the control.</para>
		</summary>
		<value>
			<para>The number of characters contained in the text of the control.</para>
		</value>
		<remarks>
			<para>You can use this property to determine the number of
      characters in a string for tasks such as searching for specific strings of text
      within the text of the control, where knowledge of the total number of
      characters is needed.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.TextBoxBase.AppendText"/> method and the <see cref="System.Windows.Forms.TextBoxBase.TextLength"/> property to copy text from one <see cref="System.Windows.Forms.TextBox"/> to another. This example assumes that two <see cref="System.Windows.Forms.TextBox"/> controls named, <c>textBox1</c> and <c>textBox2</c>, have been added to a form and that <c>textBox1</c> has text assigned to its <see cref="System.Windows.Forms.Control.Text"/> property.</para>
			<codelink SampleID="TextBoxBase.AppendText" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Text"/>
	</doc>
	<doc for="TextBoxBase.AppendText">
		<summary>
			<para>Appends text to the current text of text box.</para>
		</summary>
		<param name="text">The text to append to the current contents of the text box.</param>
		<remarks>
			<para>You can use this method to add text to the existing text in the control
      instead of using the concatenation operator (+) to concatenate text to the
   <see cref="System.Windows.Forms.TextBoxBase.Text"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.TextBoxBase.AppendText"/> method and the <see cref="System.Windows.Forms.TextBoxBase.TextLength"/> property to copy text from one <see cref="System.Windows.Forms.TextBox"/> to 
   another. This example assumes that two <see cref="System.Windows.Forms.TextBox"/> controls named, <c>textBox1</c> and <c>textBox2</c>, have been added to a form
and that <c>textBox1</c> has text
assigned to its <see cref="System.Windows.Forms.Control.Text"/> property.</para>
			<codelink SampleID="TextBoxBase.AppendText" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Copy"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
	</doc>
	<doc for="TextBoxBase.Click">
		<summary>
			<para>Occurs when the text box is clicked.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="TextBoxBase.Multiline">
		<summary>
			<para>Gets or sets a value indicating whether this
      is a multiline text box control.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is a multiline text box control;
   otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>A multiline text box allows you to display more than one
      line of text in the control. If the <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> property is set
      to <see langword="true"/>, text entered into the multiline text box is wrapped to
      the next line in the control. If the <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> property is set
      to <see langword="false"/> ,
      text entered into the multiline text box control will be displayed on the same
      line until a newline character is entered.</para>
			<para>You can add scroll bars to a text box using the <see cref="System.Windows.Forms.TextBox.ScrollBars"/>
property to display horizontal and/or vertical scroll bars. This allows the user to scroll through the text that
extends beyond the dimensions of the control.</para>
			<note type="note">
   This property is set to
<see langword="false"/> by default for all derived classes, with the exception of
   the <see cref="System.Windows.Forms.RichTextBox"/> control.
   
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Windows.Forms.TextBox"/>, a derived class, to create a multiline <see cref="System.Windows.Forms.TextBox"/> control with vertical scroll bars. This example also uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline text box control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBoxBase.AcceptsTab Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Lines"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.WordWrap"/>
		<seealso cref="System.Windows.Forms.TextBox.ScrollBars"/>
	</doc>
</docs>
