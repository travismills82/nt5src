<docs>
	<doc for="KeysConverter.KeyNames">
		<summary>
  Access to a lookup table of name/value pairs for keys.  These are localized
  names.
 </summary>
	</doc>
	<doc for="KeysConverter.Compare">
		<summary>
			<para>Compares two key values for equivalence.</para>
		</summary>
		<param name="a">An <see cref="System.Object"/> that represents the first key to compare.</param>
		<param name="b">An <see cref="System.Object"/> that represents the second key to compare.</param>
		<returns>
			<para> An integer indicating the relationship between 
       the to comparands.</para>
			<list type="table"><listheader>
					<term>Value Type</term>
					<description>Condition</description>
				</listheader>
				<item>
					<term> A 
          negative integer.</term>
					<description><paramref name="a"/> is less than <paramref name="b"/>.</description>
				</item>
				<item>
					<term> zero</term>
					<description><paramref name="a"/> equals <paramref name="b"/>.</description>
				</item>
				<item>
					<term> A positive integer.</term>
					<description><paramref name="a"/> is greater than <paramref name="b"/>.</description>
				</item>
			</list>
		</returns>
		<remarks>
			<para>This method uses <see cref="System.String.Compare" qualify="true"/> to 
    compare the two objects.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.KeysConverter"/>
	</doc>
	<doc for="KeysConverter.GetStandardValuesExclusive">
		<nodoc/>
		<summary>
    Determines if the list of standard values returned from
    GetStandardValues is an exclusive list.  If the list
    is exclusive, then no other values are valid, such as
    in an enum data type.  If the list is not exclusive,
    then there are other valid values besides the list of
    standard values GetStandardValues provides.
 </summary>
		<param name="context">A formatter context.  This object can be used to extract additional information
    about the environment this converter is being invoked from.  This may be null,
    so you should always check.  Also, properties on the context object may also
    return null.</param>
		<returns>
    True if the collection returned from GetStandardValues
    is an exhaustive list of possible values, or false if
    other values are possible.  The default for this method
    always returns false;
 </returns>
	</doc>
	<doc for="KeysConverter">
		<summary>
			<para>Provides a <see cref="System.ComponentModel.TypeConverter"/> to convert <see cref="System.Windows.Forms.Keys"/> objects to and from
   other representations.</para>
		</summary>
		<seealso cref="System.ComponentModel.TypeConverter"/>
		<seealso cref="System.Windows.Forms.Keys"/>
	</doc><doc for="KeysConverter.GetStandardValues">
		<internalonly/>
		<overload>
			<para>Returns a collection of standard values for the data type that
 this type converter is designed for.</para>
		</overload>
		<summary>
			<para>Returns a collection of standard values for the data type that this type converter is designed for when provided with a format context.</para>
		</summary>
		<param name="context">An ITypeDescriptorContext that provides a format context, which can be used to extract additional information about the environment this converter is being invoked from. This parameter or properties of this parameter can be null .</param>
		<returns>
			<para>A StandardValuesCollection that holds a standard set of 
 valid values, or null if the data type does not
 support a standard set of values.</para>
		</returns>
		<remarks>
			<para>The collection returned contains the values of the keys
 that can be converted.</para>
		</remarks>
	</doc>
	<doc for="KeysConverter.GetStandardValuesSupported">
		<internalonly/>
		<overload>
			<para>Gets a value indicating whether this object supports a standard set of
 values that can be picked from a list.</para>
		</overload>
		<summary>
			<para>Gets a value indicating whether this object supports a standard set of values
 that can be picked from a list.</para>
		</summary>
		<param name="context">An ITypeDescriptorContext that provides a format context, which can be used to extract additional information about the environment this converter is being invoked from. This parameter or properties of this parameter can be null. </param>
		<returns>
			<para>Always returns <see langword="true"/>
.</para>
		</returns>
	</doc>
	<doc for="KeysConverter.CanConvertFrom">
		<internalonly/>
		<overload>
			<para>Gets a value indicating whether this converter can convert an object in
      the Specified source type to the native type of the converter.</para>
		</overload>
		<summary>
			<para>Gets a value indicating whether this converter can convert an object in the specified source type to the native
      type of the converter using the specified context.</para>
		</summary>
		<param name="context">An ITypeDescriptorContext that provides a format context, which can be used to extract additional information about the environment this converter is being invoked from. This parameter or properties of this parameter can be null .</param>
		<param name="sourceType">The type to convert from.</param>
		<returns>
			<para><see langword="true"/> if this object can perform the
   conversion; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> Override this method
      to provide your own conversion requirements.
      </para>
			<para>The context can be used to extract additional information
      about the environment this converter is being invoked from. This may be null ,
      so you should always check. Also, properties on the context object may also
      return null.</para>
		</remarks>
	</doc>
	<doc for="KeysConverter.ConvertFrom">
		<internalonly/>
		<overload>
			<para>Converts the specified object to the native type of the converter.</para>
		</overload>
		<summary>
			<para>Converts the specified object to the converter's native type.</para>
		</summary>
		<param name="context">An ITypeDescriptorContext that provides a format context, which can be used to extract additional information about the environment this converter is being invoked from. This parameter or properties of this parameter can be null .</param>
		<param name=" culture">A CultureInfo object to provide locale information.</param>
		<param name="value">The object to convert.</param>
		<returns>
			<para>An Object that represents
      the converted <paramref name="value"/>
      .</para>
		</returns>
		<exception cref="T:System.SystemException"><para>An invalid key combination was supplied.</para>
			<para>-or-</para>
			<para>An invalid key name was supplied.</para></exception>
		<remarks>
			<para>The context parameter can be used to extract additional
      information about the environment this converter is being invoked from. This may
      be <see langword="null"/>, so you should always check. Also,
      properties on the context object may also return null
      .</para>
		</remarks>
	</doc>
	<doc for="KeysConverter.ConvertTo">
		<internalonly/>
		<overload>
			<para> Converts the specified object to the specified destination type.</para>
		</overload>
		<summary>
			<para>Converts the specified object to the specified destination type.</para>
		</summary>
		<param name="context">An ITypeDescriptorContext that provides a format context, which can be used to extract additional information about the environment this converter is being invoked from. This parameter or properties of this parameter can be null .</param>
		<param name=" culture">A CultureInfo object to provide locale information.</param>
		<param name="value">The object to convert.</param>
		<param name="destinationType">The type to convert the object to.</param>
		<returns>
			<para>An Object
      that represents the converted <paramref name="value"/>.</para>
		</returns>
		<remarks>
			<para> Override this method
      to provide your own coversion requirements.
      </para>
			<para>The context parameter can be used to extract addtional
      information about the environment this converter is being invoked from. This may
      be null, so you should always check for this return value. Also, properties on
      the context object may also return null.</para>
		</remarks>
	</doc>
</docs>
