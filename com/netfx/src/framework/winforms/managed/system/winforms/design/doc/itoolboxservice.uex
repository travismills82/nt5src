<docs>
   <doc for="IToolboxService">
 <summary>
    <para> 
       Provides access to the toolbox in the development environment.</para>
 </summary>
 <remarks>
    <para>Provides designers the ability to configure what tools on the toolbox are 
       available.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.CategoryNames">
 <summary>
    <para>Gets the names of all the tool categories currently on the toolbox.</para>
 </summary>
 <returns>
    <para>An string array of category names.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.SelectedCategory">
 <summary>
    <para>Gets the name of the currently selected tool category from the toolbox.</para>
 </summary>
 <returns>
    <para>The name of the currently selected category.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.AddCreator">
 <overload>
    <para>Adds a new toolbox item creator.</para>
 </overload>
 <summary>
    <para>Adds a new toolbox item creator.</para>
 </summary>
 <param name='creator'>The toolbox item creator.</param>
 <param name='format'>The data format this creator responds to. If a creator responds to more than one format, call <see cref='System.Windows.Forms.Design.IToolboxService.AddCreator'/> more than once. It is an error to add more than one creator for the same format.</param>
 <remarks>
    <para>A toolbox item creator is used to handle data formats other than the standard 
       native format of the toolbox service. Normally, the standard toolbox service
       format should be used, as it provides ample opportunity for customization in an
       object-oriented way. However, there are times when a legacy data format may need
       to be supported. A toolbox item creator is the mechanism by which these legacy
       data formats may be converted into toolbox items.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.ToolboxItemCreatorCallback'/>
   </doc>
   <doc for="IToolboxService.AddCreator1">
 <summary>
    <para> 
       Adds a new toolbox
       item creator.</para>
 </summary>
 <param name='creator'>The toolbox item creator.</param>
 <param name='format'>The data format this creator responds to. If a creator responds to more than one format, call <see cref='System.Windows.Forms.Design.IToolboxService.AddCreator'/> more than once. It is an error to add more than one creator for the same format.</param>
 <param name='host'>The designer host to associate with this creator. If not supplied or null, this creator will be available to all designers. If a designer host is supplied, the creator will only be available to designers in the given host.</param>
 <remarks>
    <para>A toolbox item creator is used to handle data formats other than the standard 
       native format of the toolbox service. Normally, the standard toolbox service
       format should be used, as it provides ample opportunity for customization in an
       object-oriented way. However, there are times when a legacy data format may need
       to be supported. A toolbox item creator is the mechanism by which these legacy
       data formats may be converted into toolbox items.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.ToolboxItemCreatorCallback'/>
   </doc>
   <doc for="IToolboxService.AddLinkedTool">
 <overload>
    <para>Adds a new tool to the toolbox under the default category.</para>
 </overload>
 <summary>
    <para>Adds a new tool to the toolbox under the default category.</para>
 </summary>
 <param name='toolboxItem'>The toolbox item to add.</param>
 <param name='host'>The designer host this tool is linked to.</param>
 <remarks>
    <para>This tool will be "linked" to the specified designer host. A linked tool is removed from 
       the toolbox when the project that owns the designer is closed. It is automatically
       re-added when the project is opened again.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.AddLinkedTool1">
 <summary>
    <para> 
       Adds a
       new tool to the toolbox under the specified category.</para>
 </summary>
 <param name='toolboxItem'>The toolbox item to add.</param>
 <param name='category'>The category under which to add the tool.</param>
 <param name='host'>The designer host this tool is linked to.</param>
 <remarks>
    <para>This tool will be "linked" to the specified designer host. A linked tool is removed from 
       the toolbox when the project that owns the designer is closed. It is automatically
       re-added when the project is opened again.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.AddTool">
 <overload>
    <para>Adds a new tool to the toolbox under the default category.</para>
 </overload>
 <summary>
    <para> 
       Adds a new tool
       to the toolbox under the default category.</para>
 </summary>
 <param name='toolboxItem'>The tool to add.</param>
 <remarks>
    <para>Exceptions will be thrown if the tool already exists or if you are adding a 
       class that should not be placed on the toolbox. For a class to exist on the
       toolbox, it must be a .NET Framework component and have a ToolboxItemAttribute
       set.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.AddTool1">
 <summary>
    <para>Adds a new tool to the toolbox under the specified category.</para>
 </summary>
 <param name='toolboxItem'>The tool to add.</param>
 <param name='category'>The category under which to add the tool.</param>
 <remarks>
    <para>Exceptions will be thrown if the tool already exists or if you are adding a 
       class that should not be placed on the toolbox. For a class to exist on the
       toolbox, it must be a .NET Framework component and have a ToolboxItemAttribute
       set.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.GetDataObjectForTool">
 <summary>
    <para>Gets a data object representing the specified toolbox item.</para>
 </summary>
 <returns>
 <para>An <see cref='System.Windows.Forms.IDataObject'/> containing the tool.</para>
 </returns>
 <remarks>
    <para>The data object can then be used to save the item to the clipboard, or for 
       drag and drop.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.GetSelectedTool">
 <summary>
    <para>Gets the currently selected tool.</para>
 </summary>
 <returns>
    <para>The class of the currently selected tool, or 
    <see langword='null'/> if no tool
       is selected.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.GetSelectedTool1">
 <summary>
    <para>Gets the currently selected tool.</para>
 </summary>
 <param name='host'> The designer host that is making this request.</param>
 <returns>
    <para>The class of the currently selected tool, or 
    <see langword='null'/> if no tool
       is selected.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.GetToolboxItem">
 <summary>
    <para>Gets a toolbox item from a data object.</para>
 </summary>
 <param name='dataObject'>The data object that contains the toolbox item.</param>
 <returns>
    <para> The toolbox item that is inside the data 
       object, or <see langword='null'/>
       if the data object doesn't contain a toolbox item.</para>
 </returns>
 <remarks>
    <para>This is useful if you are implementing your own drag and drop functionality 
       for toolbox items.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IToolboxService.IsToolboxItem'/>
   </doc>
   <doc for="IToolboxService.GetToolboxItem1">
 <summary>
    <para>Gets a toolbox item from a data object.</para>
 </summary>
 <param name='dataObject'>The data object that contains the toolbox item.</param>
 <param name='host'> The designer host that is making this request.</param>
 <returns>
    <para> The toolbox item that is inside the data 
       object, or <see langword='null'/>
       if the data object doesn't contain a toolbox item.</para>
 </returns>
 <remarks>
    <para>This is useful if you are implementing your own drag and drop functionality 
       for toolbox items.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IToolboxService.IsToolboxItem'/>
   </doc>
   <doc for="IToolboxService.GetTools">
 <overload>
    <para>Gets all .NET Framework tools on the toolbox.</para>
 </overload>
 <summary>
    <para>Gets all .NET Framework tools on the toolbox.</para>
 </summary>
 <returns>
    <para>An array of class objects representing all .NET Framework components that are
       currently on the toolbox.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.GetTools1">
 <overload>
    <para>Gets all .NET Framework tools on the toolbox.</para>
 </overload>
 <summary>
    <para>Gets all .NET Framework tools on the toolbox.</para>
 </summary>
 <param name='host'> The designer host that is making this request.</param>
 <returns>
    <para>An array of class objects representing all .NET Framework components that are
       currently on the toolbox.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.GetTools2">
 <summary>
    <para>Gets all .NET Framework tools on the specified toolbox category.</para>
 </summary>
 <param name='category'>The category name to retrieve the tools from.</param>
 <returns>
    <para>An array of class objects representing all .NET Framework components that are
       currently on the toolbox category.</para>
 </returns>
 <remarks>
    <para>An exception is thrown if category is not a valid category name.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.GetTools3">
 <summary>
    <para>Gets all .NET Framework tools on the specified toolbox category.</para>
 </summary>
 <param name='category'>The category name to retrieve the tools from.</param>
 <param name='host'> The designer host that is making this request.</param>
 <returns>
    <para>An array of class objects representing all .NET Framework components that are
       currently on the toolbox category.</para>
 </returns>
 <remarks>
    <para>An exception is thrown if category is not a valid category name.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.IsToolboxItem">
 <summary>
    <para>Gets a value indicating whether the specified data object is a toolbox item.</para>
 </summary>
 <param name='dataObject'>The data object to inspect.</param>
 <returns>
 <para><see langword='true'/> if the data object contains a 
    toolbox item object; otherwise, <see langword='false'/>.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.IsToolboxItem1">
 <summary>
    <para>Gets a value indicating whether the specified data object is a toolbox item.</para>
 </summary>
 <param name='dataObject'>The data object to inspect.</param>
 <param name='host'> The designer host that is making this request.</param>
 <returns>
 <para><see langword='true'/> if the data object contains a 
    toolbox item object; otherwise, <see langword='false'/>.</para>
 </returns>
   </doc>
   <doc for="IToolboxService.Refresh">
 <summary>
    <para> Refreshes the state of the toolbox items.</para>
 </summary>
   </doc>
   <doc for="IToolboxService.ResetDefaultTools">
 <summary>
    <para>Causes the toolbox to reset to its default contents.</para>
 </summary>
   </doc>
   <doc for="IToolboxService.RemoveCreator">
 <overload>
    <para>Removes a previously added toolbox creator.</para>
 </overload>
 <summary>
    <para>Removes a previously added toolbox creator.</para>
 </summary>
 <param name='format'>The data format for the creator to remove. </param>
   </doc>
   <doc for="IToolboxService.RemoveCreator1">
 <summary>
      Removes a previously added toolbox creator.
 </summary>
 <param name='format'>
      The data format for the creator to remove.  
 </param>
 <param name='host'>
     The designer host that this creator is associated with.
 </param>
   </doc>
   <doc for="IToolboxService.RemoveTool">
 <overload>
    <para>Removes the specified tool from the toolbox.</para>
 </overload>
 <summary>
    <para>Removes the specified tool from the toolbox.</para>
 </summary>
 <param name='toolboxItem'>The tool to remove.</param>
 <remarks>
    <para>This will throw an exception if the tool does not exist on the toolbox.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.RemoveTool1">
 <summary>
    <para>Removes the specified tool from the toolbox.</para>
 </summary>
 <param name='toolboxItem'>The tool to remove.</param>
 <param name='category'>The category (tab) which contains the component</param>
 <remarks>
    <para>This will throw an exception if the tool does not exist on the toolbox.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.SelectedToolUsed">
 <summary>
    <para>Notifies the toolbox that the selected tool has been used.</para>
 </summary>
 <remarks>
    <para>Generally after a tool is selected and used, it is automatically 
       unselected.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.SetCursor">
 <summary>
    <para>Sets the current application's cursor to a cursor that represents the 
       currently selected tool.</para>
 </summary>
 <returns>
 <para><see langword='true'/> if the cursor was set to the 
    currently selected tool, <see langword='false'/>
    if there is no tool selected and the cursor was set
    to the standard windows cursor.</para>
 </returns>
 <remarks>
    <para>If no tool is selected this will default to the standard Windows cursor.</para>
 </remarks>
   </doc>
   <doc for="IToolboxService.SetSelectedTool">
 <summary>
    <para> 
       Sets the currently selected tool in the toolbox.</para>
 </summary>
 <param name='toolboxItem'>The tool to select on the toolbox.</param>
 <remarks>
    <para>This will throw an exception if the class you are requesting is not on the 
       toolbox.</para>
 </remarks>
   </doc>
</docs>

