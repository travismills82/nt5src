<docs>
	<doc for="GiveFeedbackEventHandler">
		<summary>
			<para> Represents the method that handles the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
   of a <see cref="System.Windows.Forms.Control"/>.
   </para>
		</summary>
		<param name="sender">The source of the event. </param>
		<param name="e">A <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> that contains the event data. </param>
		<remarks>
			<para> When you create a <see cref="System.Windows.Forms.GiveFeedbackEventHandler"/> delegate, you identify the method that will
   handle the event. To associate the event with your event handler, add an
   instance of the delegate to the event. The event handler is called
   whenever the event occurs, unless you remove the delegate. For more information
   about handling events with delegates, see <see topic="cpconEventsDelegates"/>.
   </para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.GiveFeedbackEventHandler"/> delegate with the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnGiveFeedback"/>
		<seealso cref="System.Windows.Forms.Control.GiveFeedback"/>
		<seealso cref="System.Windows.Forms.GiveFeedbackEventArgs"/>
	</doc>
</docs>
