<docs>
	<doc for="ListBox.CreateParams">
		<summary>
     Retrieves the parameters needed to create the handle.  Inheriting classes
     can override this to provide extra functionality.  They should not,
     however, forget to call base.getCreateParams() first to get the struct
     filled up with the basic info.
 </summary>
		<seealso cref="System.Windows.Forms.CreateParams"/>
	</doc>
	<doc for="ListBox.Click">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ListBox.Insert">
		<summary>
		</summary>
	</doc>
	<doc for="ListBox.RefreshItems">
		<summary>
 Reparses the objects, getting new text strings for them.
 </summary>
	</doc>
	<doc for="ListBox.RefreshItem">
		<summary>
 Reparses the object at the given index, getting new text string for it.
 </summary>
	</doc>
	<doc for="ListBox.RemoveAt">
		<summary>
		</summary>
	</doc>
	<doc for="ListBox.SendInsertMessage">
		<summary>
     Sends an LB_ADDSTRING or LB_INSERTSTRING message to the list box. Since
     adding an item to the list box may cause a WM_MEASUREITEM message to be
     sent, we need some special logic here to allow the WM_MEASUREITEM
     handler to do the actual updating of the items array. This is done so
     that the new item can be properly inserted into the items array before
     we fire the onMeasureItem event.
 </summary>
	</doc>
	<doc for="ListBox.SetBoundsCore">
		<summary>
     Overrides Control.SetBoundsCore to remember the requestedHeight.
 </summary>
	</doc>
	<doc for="ListBox.ToString">
		<summary>
     Returns a string representation for this control.
 </summary>
		<returns>
     String
 </returns>
	</doc>
	<doc for="ListBox.WmReflectCommand">
		<summary>
		</summary>
	</doc>
	<doc for="ListBox.WmReflectDrawItem">
		<summary>
		</summary>
	</doc>
	<doc for="ListBox.WmReflectMeasureItem">
		<summary>
		</summary>
	</doc>
	<doc for="ListBox.OnDrawItemHandler">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnMeasureItemHandler">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.BackgroundImage">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.BorderStyle">
		<nodoc/>
		<summary>
   Retrieves the current border style.  Values for this are taken from
   The System.Windows.Forms.BorderStyle enumeration.
   </summary>
		<returns>
   the current border style.
   </returns>
		<seealso cref="System.Windows.Forms.BorderStyle"/>
	</doc>
	<doc for="ListBox.WndProc">
		<nodoc/>
		<summary>
   The list's window procedure.  Inheriting classes can override this
   to add extra functionality, but should not forget to call
   base.wndProc(m); to ensure the list continues to function properly.
   </summary>
		<param name="m">
   A Windows Message Object.
   </param>
	</doc>
	<doc for="ListBox.OnChangeUICues">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnHandleCreated">
		<nodoc/>
		<summary>
   We need to know when the window handle has been created so we can
   set up a few things, like column width, etc!  Inheriting classes should
   not forget to call base.OnHandleCreated().
   </summary>
	</doc>
	<doc for="ListBox.OnHandleDestroyed">
		<nodoc/>
		<summary>
   Overridden to make sure that we set up and clear out items
   correctly.  Inheriting controls should not forget to call
   base.OnHandleDestroyed()
   </summary>
	</doc>
	<doc for="ListBox.OnFontChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnResize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnSelectedIndexChanged">
		<nodoc/>
		<summary>
   Actually goes and fires the selectedIndexChanged event.  Inheriting controls
   should use this to know when the event is fired [this is preferable to
   adding an event handler on yourself for this event].  They should,
   however, remember to call base.OnSelectedIndexChanged(e); to ensure the event is
   still fired to external listeners
   </summary>
		<param name="e">
   Event object with the details
   </param>
	</doc>
	<doc for="ListBox.ResetForeColor">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.ForeColor"/> property to its default value.</para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating 
      a designer for the <see cref="System.Windows.Forms.ListBox"/> or creating your own control incorporating
      the <see cref="System.Windows.Forms.ListBox"/>. You can use the <see cref="System.Windows.Forms.ListBox.ShouldSerializeForeColor"/> method to determine whether the property
      value has changed from its default.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ShouldSerializeForeColor"/>
	</doc>
	<doc for="ListBox.ShouldSerializeBackColor">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.BackColor"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; 
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
   <see cref="System.Windows.Forms.ListBox"/> or creating your own control incorporating 
      the <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ResetBackColor"/>
	</doc>
	<doc for="ListBox.ShouldSerializeForeColor">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.ForeColor"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; 
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
   <see cref="System.Windows.Forms.ListBox"/> or creating your own control incorporating 
      the <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ResetForeColor"/>
	</doc>
	<doc for="ListBox.ResetBackColor">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.BackColor"/> property to its default value.</para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
   <see cref="System.Windows.Forms.ListBox"/> or creating your own control incorporating 
      the <see cref="System.Windows.Forms.ListBox"/>. You can use the <see cref="System.Windows.Forms.ListBox.ShouldSerializeBackColor"/> method to determine whether the property
      value has changed from its default.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ShouldSerializeBackColor"/>
	</doc>
	<doc for="ListBox.SelectedIndexCollection.IsReadOnly">
		<summary>
			<para> Gets a value indicating whether the collection is read-only.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the collection is read-only;
   otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>This property is always <see langword="true "/>for this collection. The items in this collection are modified only by 
   the <see cref="System.Windows.Forms.ListBox"/>
   control. </para>
		</remarks>
	</doc>
	<doc for="ListBox.ObjectCollection.CopyTo">
		<overload>
			<para>Copies the entire collection into an existing array at a specified location 
      within the array.</para>
		</overload>
		<summary>
			<para>Copies the entire collection into an existing array of 
      objects at a specified location within the array.</para>
		</summary>
		<param name="dest">The object array in which the items from the collection are copied to.</param>
		<param name=" arrayIndex">The location within the destination array to copy the items from the collection to.</param>
		<remarks>
			<para>You can use this method to combine the items from multiple collections into a 
      single array. You can then use this array to populate the contents of another
   <see cref="System.Windows.Forms.ListBox"/> control using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</para>
		</remarks>
	</doc>
	<doc for="ListBox.ObjectCollection.CopyTo1">
		<summary>
			<para>Copies the entire collection into an existing array at a 
      specified location within the array.</para>
		</summary>
		<param name="dest">An <see cref="System.Array"/> representing the array to copy the contents of the collection to.</param>
		<param name="arrayIndex">The location within the destination array to copy the items from the collection to.</param>
		<remarks>
			<para>You can use this method to combine the items from multiple collections into a 
      single array. You can then use this array to populate the contents of another
   <see cref="System.Windows.Forms.ListBox"/> control using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</para>
		</remarks>
	</doc>
	<doc for="ListBox.SelectedObjectCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator that can be used to iterate 
      through the selected item collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> object that represents the item 
   collection.</para>
		</returns>
	</doc>
	<doc for="ListBox.ItemArray">
		<nodoc/>
		<summary>
			<para> Gets or sets an array containing all items in the list box.</para>
		</summary>
		<value>
			<para> An zero-based array of objects (typically <see cref="System.String"/> objects) representing the
   items in the control.</para>
		</value>
		<remarks>
			<para>Items in the array are in the order they appear in the list box. If the
   <see cref="System.Windows.Forms.ListBox"/> contains no items, this property returns
      an empty array. If the <see cref="System.Windows.Forms.ListBox.Sorted"/> property of the control
      is set to <see langword="true"/>, the items are inserted into the list alphabetically.
      Otherwise, the items are inserted in the order they occur in the array. </para>
		</remarks>
	</doc>
	<doc for="ListBox.ItemCount">
		<nodoc/>
		<summary>
			<para>Gets or sets the number of items in the control.</para>
		</summary>
		<value>
			<para> The number of items in the control.</para>
		</value>
		<remarks>
			<para>The index for a list box is zero-based. As a result, the value returned
      by this property is one greater than the index value of the last item in
      the list. </para>
		</remarks>
	</doc>
	<doc for="ListBox.SetItemsCore">
		<nodoc/>
		<summary>
			<para>Clears the contents of the <see cref="System.Windows.Forms.ListBox"/> and adds the specified items to the control.</para>
		</summary>
		<param name="value"> An array of objects to insert into the control. </param>
	</doc>
	<doc for="ListBox.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.EndUpdate">
		<summary>
			<para>Resumes painting the <see cref="System.Windows.Forms.ListBox"/>
control after painting is suspended by the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/>method.</para>
		</summary>
		<remarks>
			<para>The preferred way to add items to the <see cref="System.Windows.Forms.ListBox"/> is
   to use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class (through the <see cref="System.Windows.Forms.ListBox.Items"/> property of the <see cref="System.Windows.Forms.ListBox"/>).
   This enables you to add an array of items to the list at one time. However, if
   you want to add items one at a time using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class, you can use the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> method to prevent the control from
   repainting the <see cref="System.Windows.Forms.ListBox"/> each time an item is added to the list.
   Once you have completed the task of adding items to the list, call the <see cref="System.Windows.Forms.ListBox.EndUpdate"/> method to enable the <see cref="System.Windows.Forms.ListBox"/> to
   repaint. This way of adding items can prevent flickered drawing of the <see cref="System.Windows.Forms.ListBox"/>
   
   when a large number of items are being added to
   the list.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ListBox.EndUpdate"/> methods while adding five thousand items to a <see cref="System.Windows.Forms.ListBox"/>. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> control, named <c>listBox1</c>, has been added to a <see cref="System.Windows.Forms.Form"/> and that this method is placed within the form and called from it.</para>
			<codelink SampleID="Classic ListBox.BeginUpdate Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.BeginUpdate"/>
	</doc>
	<doc for="ListBox.SelectedIndexCollection.CopyTo">
		<summary>
			<para>Copies the entire collection into an existing array at a
      specified location within the array.</para>
		</summary>
		<param name="dest">The destination array.</param>
		<param name="index">The index in the destination array at which storing begins.</param>
		<remarks>
			<para>You can use this method to combine the selected indexes from multiple collections into
      a single array.</para>
		</remarks>
	</doc>
	<doc for="ListBox.ObjectCollection.Clear">
		<summary>
			<para>Removes all items from the collection.</para>
		</summary>
		<remarks>
			<para>When you remove items from the list, all information 
      about the deleted items is lost. To remove a single item from the <see cref="System.Windows.Forms.ListBox"/>,
      use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> or <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/>
      method. </para>
		</remarks>
	</doc>
	<doc for="ListBox.BackColor">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.ForeColor">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnMeasureItem">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ListBox.MeasureItem"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MeasureItemEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ListBox.OnMeasureItem"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ListBox.OnMeasureItem"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ListBox.OnMeasureItem"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.MeasureItem"/>
	</doc>
	<doc for="ListBox.OnDataSourceChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnDisplayMemberChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnParentChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.SetItemCore">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.SelectedObjectCollection.SelectedObjectCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> class.</para>
		</summary>
		<param name="owner">A <see cref="System.Windows.Forms.ListBox"/> representing the owner of the collection.</param>
		<remarks>
			<para>An instance of this class cannot be created without associating it with a
   <see cref="System.Windows.Forms.ListBox"/> control.</para>
		</remarks>
	</doc>
	<doc for="ListBox.SelectedObjectCollection.Contains">
		<summary>
			<para>Determines whether the specified item is located within the collection.</para>
		</summary>
		<param name="selectedObject">An object representing the item to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the specified item is located in the collection;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection.Contains"/> method enables you to determine whether an item from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class is a member of the
   selected items stored in the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/>. You can use this to determine if a specific item in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>
   is selected.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.SelectedObjectCollection.IndexOf"/>
	</doc><doc for="ListBox.SelectedObjectCollection.IndexOf">
		<summary>
			<para>Returns the index within the collection of the specified item.</para>
		</summary>
		<param name="selectedObject">An object representing the item to locate in the collection.</param>
		<returns>
			<para>The zero-based index of the item in the collection; otherwise, -1.</para>
		</returns>
		<remarks>
			<para>Once you know that an item is located within the collection (using the
   <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection.Contains"/> method), you can use the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection.IndexOf"/> method to determine where a
      specific item within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> for the <see cref="System.Windows.Forms.ListBox"/> is
      stored within the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.SelectedObjectCollection.Contains"/>
	</doc><doc for="ListBox.NoMatches">
		<summary>
			<para> Specifies that no matches are found during a search.</para>
		</summary>
		<remarks>
			<para>This constant is returned by the <see cref="System.Windows.Forms.ListBox.FindString"/> , <see cref="System.Windows.Forms.ListBox.FindStringExact"/>, and <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> methods when no matching values
   are found in a search.</para>
		</remarks>
	</doc><doc for="ListBox.ListBox">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ListBox"/> class.</para>
		</summary>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.ListBox"/> control that displays multiple items in columns and can have more than one item selected in the control's list. The code for the example adds 50 items to the <see cref="System.Windows.Forms.ListBox"/> using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class and then selects three items from the list using the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method. The code then displays values from the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> collection (through the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property) and the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> (through the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property). This example assumes that the code is located in and called from a <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Classic ListBox Example" SnippetID="1"/>
		</example>
	</doc><doc for="ListBox.DefaultItemHeight">
		<summary>
			<para>Specifies the default item height for an owner-drawn <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
	</doc><doc for="ListBox.ItemHeight">
		<summary>
			<para> Gets or sets the height of an item in the <see cref="System.Windows.Forms.ListBox"/>
.</para>
		</summary>
		<value>
			<para> The height, in pixels, of an item in the control.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property is set to
<see langword="DrawMode.OwnerDrawFixed"/>, all items have the same height. When 
   the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property is set to
<see langword="DrawMode.OwnerDrawVariable"/>, the <see cref="System.Windows.Forms.ListBox.ItemHeight"/> property specifies the height of each item 
   added to the <see cref="System.Windows.Forms.ListBox"/>. Because each item in an owner-drawn list
   can have a different height, you can use the <see cref="System.Windows.Forms.ListBox.GetItemHeight"/> method to get the height of a specific
   item in the <see cref="System.Windows.Forms.ListBox"/>. If you use the <see cref="System.Windows.Forms.ListBox.ItemHeight"/>property on a <see cref="System.Windows.Forms.ListBox"/> with items of variable
   height, this property returns the height of the first item in the
   control. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.GetItemHeight"/>
		<seealso cref="System.Windows.Forms.ListBox.DrawMode"/>
	</doc><doc for="ListBox.CreateItemCollection">
		<summary>
			<para>Creates a new instance of the item collection.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> that represents the new item
   collection.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      
      You can override this in your derived classes to provide a different
      collection to store your items.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection"/>
	</doc><doc for="ListBox.GetItemHeight">
		<summary>
			<para>Returns the height of an item in the <see cref="System.Windows.Forms.ListBox"/>
.</para>
		</summary>
		<param name="index">The zero-based index of the item to return the height for. </param>
		<returns>
			<para>The height, in pixels, of the specified item.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">The specified index was outside the range valid values.</exception>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property is not set to
<see langword="DrawMode.OwnerDrawVariable"/>, the value of the index parameter is 
   ignored because all items in a standard <see cref="System.Windows.Forms.ListBox"/> are the same size.
   You can use this property when you are using an owner-drawn <see cref="System.Windows.Forms.ListBox"/> to
   determine the size of any item within the <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.ObjectCollection">
		<overload>
			<para>Initializes a new instance of <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>.</para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.ListBox"/> that owns the collection.</param>
		<remarks>
			<para>You cannot create an instance of this class without associating it with a
   <see cref="System.Windows.Forms.ListBox"/> control.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.ObjectCollection1">
		<summary>
			<para> Initializes a new instance of <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> based on another <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>.
   </para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.ListBox"/> that owns the collection. </param>
		<param name="value">A <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> from which the contents are copied to this collection. </param>
		<remarks>
			<para>You cannot create an instance of this class without 
      associating it with a <see cref="System.Windows.Forms.ListBox"/>
      control. This version of the constructor enables you to use the items specified
      in an existing instance of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class to add items to the
      collection when it is created. You can use this constructor to use the items
      specified in another <see cref="System.Windows.Forms.ListBox"/>
      control with this collection.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.Count">
		<summary>
			<para>Gets the number of items in the collection.</para>
		</summary>
		<value>
			<para>The number of items in the collection</para>
		</value>
		<remarks>
			<para>This property enables you to determine the number of items in the <see cref="System.Windows.Forms.ListBox"/>. You can
   then use this value when you are looping through the values of the collection
   and you need to provide a number of iterations to perform the loop. </para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.IsReadOnly">
		<summary>
			<para>Gets a value indicating whether the collection is read-only.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this collection is read-only; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is always <see langword="false"/> for this collection.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.GetEnumerator">
		<summary>
			<para> Returns an enumerator to use to iterate through
      the item collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> object that represents the item
   collection.</para>
		</returns>
	</doc><doc for="ListBox.SelectedIndexCollection.SelectedIndexCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> class.</para>
		</summary>
		<param name="owner">A <see cref="System.Windows.Forms.ListBox"/> representing the owner of the collection.</param>
		<remarks>
			<para>You cannot create an instance of this class without associating it with a <see cref="System.Windows.Forms.ListBox"/>
control.</para>
		</remarks>
	</doc><doc for="ListBox.SelectedIndexCollection.IndexOf">
		<summary>
			<para>Returns the index within the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> of the specified index from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> of the <see cref="System.Windows.Forms.ListBox"/>.</para>
		</summary>
		<param name="selectedIndex">The zero-based index from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> to locate in this collection.</param>
		<returns>
			<para>The zero-based index in the collection where the
      specified index of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>was located within the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> ;
      otherwise, negative one (-1).</para>
		</returns>
		<remarks>
			<para>Once you know that an item is located within the collection (using the
   <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.Contains"/> method), you can use the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.IndexOf"/> method to
      determine where a specific index position within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> for the <see cref="System.Windows.Forms.ListBox"/> is
      stored within the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndexCollection.Contains"/>
	</doc><doc for="ListBox.ScrollAlwaysVisible">
		<summary>
			<para> Gets or sets a value
      indicating whether the vertical scroll bar is shown at all times.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the vertical scroll bar should always be displayed; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.ScrollAlwaysVisible"/>
property indicates whether a vertical scroll bar is always
displayed, even if the number of items in the <see cref="System.Windows.Forms.ListBox"/> does
not require displaying the vertical scroll bar. By default, a <see cref="System.Windows.Forms.ListBox"/>
only shows a vertical scroll bar when there are enough items to warrant displaying.
For multicolumn list boxes, the <see cref="System.Windows.Forms.ListBox.ScrollAlwaysVisible"/> property indicates that a
horizontal scroll bar is displayed. A vertical scroll bar is never displayed
regardless of the value of this property for a multicolumn <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/>
	</doc><doc for="ListBox.AddItemsCore">
		<nodoc/>
		<summary>
			<para>Adds an array of items to the <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<param name="value">An array of objects to add to the control. </param>
		<remarks>
			<note type="inheritinfo">
      You can use this
      method in your derived classes to add items to the item
      collection.
      
   </note>
		</remarks>
	</doc><doc for="ListBox.BeginUpdate">
		<summary>
			<para>Maintains performance while items are added to the <see cref="System.Windows.Forms.ListBox"/>
one at a time by preventing the control from drawing until the <see cref="System.Windows.Forms.ListBox.EndUpdate"/> method is called.</para>
		</summary>
		<remarks>
			<para>The preferred way to add multiple items to the <see cref="System.Windows.Forms.ListBox"/> is to use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class (through the <see cref="System.Windows.Forms.ListBox.Items"/> property of the <see cref="System.Windows.Forms.ListBox"/>). This
   enables you to add an array of items to the list in a single operation. However, if
   you want to add items one at a time using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class, you can use the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> method to prevent the control from
   repainting the <see cref="System.Windows.Forms.ListBox"/> each time an item is added to the list.
   Once you have completed the task of adding items to the list, call the <see cref="System.Windows.Forms.ListBox.EndUpdate"/> method to enable the <see cref="System.Windows.Forms.ListBox"/> to
   repaint. This way of adding items can prevent flickered drawing of the <see cref="System.Windows.Forms.ListBox"/>
   when a large number of items are being added to the list.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ListBox.EndUpdate"/> methods while adding five thousand items
   to a <see cref="System.Windows.Forms.ListBox"/>. This example assumes that a <see cref="System.Windows.Forms.ListBox"/>
   control, named <c>listBox1</c>, has
been added to a <see cref="System.Windows.Forms.Form"/> and that this method is placed within the
form and called from it.</para>
			<codelink SampleID="Classic ListBox.BeginUpdate Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.EndUpdate"/>
	</doc><doc for="ListBox.Sort">
		<summary>
			<para>Sorts the items in the <see cref="System.Windows.Forms.ListBox"/> alphabetically.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      You can override this method in your derived class to
      provide your own sorting routine. When adding items to a <see cref="System.Windows.Forms.ListBox"/>
      , it is
      more efficient to sort the items first and then add new items.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.Sorted"/>
	</doc><doc for="ListBox.Text">
		<summary>
			<para>Gets or searches for the text of the currently selected item in
      the <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<value>
			<para>The text of the currently selected item in the control.</para>
		</value>
		<remarks>
			<para>When the value of this property is set to a string
      value, the <see cref="System.Windows.Forms.ListBox"/> searches for the item within the <see cref="System.Windows.Forms.ListBox"/> that
      matches the specified text and selects the item. You can also use this property
      to determine which items are currently selected in the <see cref="System.Windows.Forms.ListBox"/>.
      If the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property of the <see cref="System.Windows.Forms.ListBox"/> is
      set to <see langword="SelectionMode.MultiExtended"/> , this property
      returns the text of the first selected item. If the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property of the <see cref="System.Windows.Forms.ListBox"/>
      is not set to <see langword="SelectionMode.None"/> , this property returns
      the text of the first selected item.</para>
		</remarks>
	</doc><doc for="ListBox.MeasureItem">
		<summary>
			<para>Occurs when an owner-drawn <see cref="System.Windows.Forms.ListBox"/> is
   created and the sizes of the list items are determined.</para>
		</summary>
		<remarks>
			<para>You can create an event handler for this event to
      specify the size an item will be made before it is drawn in the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event.
      The event is only raised when the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property is set
   <see langword="DrawMode.OwnerDrawVariable"/> .</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.Contains">
		<summary>
			<para>Determines whether the specified item is located within the collection.</para>
		</summary>
		<param name="value">An object representing the item to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the item is located within the
   collection; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/> method enables
   you to determine whether an object is a member of the collection. Once you know that
   the item is located within the collection, you can use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf"/> method to
   determine where the item is located within the collection.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf"/>
		<seealso cref="System.Windows.Forms.ListBox.FindString"/>
		<seealso cref="System.Windows.Forms.ListBox.FindStringExact"/>
	</doc><doc for="ListBox.ObjectCollection.AddRange">
		<overload>
			<para>Adds a group of items to the list of items for a <see cref="System.Windows.Forms.ListBox"/> .</para>
		</overload>
		<summary>
			<para>Adds an array of items to the list of items for a <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<param name="items">An array of objects to add to the list.</param>
		<remarks>
			<para>This method removes all existing items from the list box
      before inserting the new items. If the <see cref="System.Windows.Forms.ListBox.Sorted"/> property of the <see cref="System.Windows.Forms.ListBox"/> is
      set to <see langword="true"/>, the items are inserted into the list alphabetically.
      Otherwise, the items are inserted in the order that they occur within
      the array. This method is typically passed an array of <see cref="System.String"/> objects, but an array of any type of object can be
      passed to this method. When an object is added to the collection, the <see cref="System.Windows.Forms.ListBox"/>
      first checks to see if the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property of the <see cref="System.Windows.Forms.ListControl"/> class has the name of a member from the
      object specified to reference when obtaining the item text. If the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property does not have a
      member specified, the <see cref="System.Windows.Forms.ListBox"/> then calls the <see cref="System.Object.ToString"/> method of
      the object to obtain the text to display in the list. When using this method to add items to the <see cref="System.Windows.Forms.ListBox"/>, you do not
      need to call the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ListBox.EndUpdate"/> methods to optimize performance.
      When adding items to a <see cref="System.Windows.Forms.ListBox"/> , it is more efficient to sort the items
      first and then add new items. You can
      use this method to add a group of items to the list or to reuse the items stored
      in a different <see cref="System.Windows.Forms.ListBox"/>
      .</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/>
	</doc><doc for="ListBox.ObjectCollection.AddRange1">
		<summary>
			<para>Adds the items of an existing <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> to the list of items in a <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<param name="value">A <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>to load into this collection.</param>
		<remarks>
			<para>This method removes all existing items from the list box
      before inserting the new items. If the <see cref="System.Windows.Forms.ListBox.Sorted"/> property of the <see cref="System.Windows.Forms.ListBox"/> is set to <see langword="true"/>, the items are inserted into the list alphabetically.
      Otherwise, the items are inserted in the order that they occur within
      the array. This method is typically passed an array of <see cref="System.String"/> objects, but an array of any type of object can be
      passed to this method. When an object is added to the collection, the <see cref="System.Windows.Forms.ListBox"/> first checks
      to see if the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property of the <see cref="System.Windows.Forms.ListControl"/> class has the name of a member from the
      object specified to reference when obtaining the item text. If the
   <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property does not have a member specified, 
      the <see cref="System.Windows.Forms.ListBox"/> then calls the <see cref="System.Object.ToString"/> method of the object to obtain the
      text to display in the list.</para>
			<para>When using this method to add items to the <see cref="System.Windows.Forms.ListBox"/>, you do not
   need to call the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ListBox.EndUpdate"/> methods to optimize performance.
   When adding items to a <see cref="System.Windows.Forms.ListBox"/> , it is more efficient to sort the items
   first and then add new items. You can
   use this method to reuse the items stored in a different <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/>
	</doc><doc for="ListBox.ObjectCollection.Insert">
		<summary>
			<para>Inserts an item into the list box at the specified index.</para>
		</summary>
		<param name="index">The zero-based index location where the item is inserted. </param>
		<param name="item">An object representing the item to insert. </param>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>This method enables you to insert an item at a specific 
      position within the <see cref="System.Windows.Forms.ListBox"/>. If the <see cref="System.Windows.Forms.ListBox.Sorted"/> property of the <see cref="System.Windows.Forms.ListBox"/> is
      set to true, the item is added in the correct position within the sorted list
      regardless of the values specified in the <paramref name="index"/> parameter. When an object is added to the collection, the <see cref="System.Windows.Forms.ListBox"/> first checks to see if the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property of the <see cref="System.Windows.Forms.ListControl"/> class has the name of a member from the
      object specified to reference when obtaining the item text. If the
   <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property does not have a member specified, 
      the <see cref="System.Windows.Forms.ListBox"/> then calls the
   <see cref="System.Object.ToString"/> method of 
      the object to obtain the text to display in the list.</para>
		</remarks>
	</doc><doc for="ListBox.SelectedObjectCollection.Count">
		<summary>
			<para>Gets the number of items in the collection.</para>
		</summary>
		<value>
			<para>The number of items in the collection.</para>
		</value>
		<remarks>
			<para>This property enables you to determine the number of selected items in the
   <see cref="System.Windows.Forms.ListBox"/>. You can then use this value when looping through
      the values of the collection and you need to provide a number of iterations
      to perform the loop. Unless the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property of the <see cref="System.Windows.Forms.ListBox"/>is set to <see langword="SelectionMode.MultiSimple"/> or
   <see langword="SelectionMode.MultiExtended"/> , this property always 
      returns a value of zero (0) or one (1) depending on whether you have
      a selected item.</para>
		</remarks>
	</doc><doc for="ListBox.SelectedObjectCollection.this">
		<summary>
			<para>Gets the item at the specified index within the collection.</para>
		</summary>
		<param name="index">The index of the item in the collection to retrieve. </param>
		<value>
			<para>An object representing the item located at the specified index within the
      collection.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> class.</exception>
		<remarks>
			<para>This indexer enables you to get a specific item from the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/>. The item stored in this collection is an
   item within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> of the <see cref="System.Windows.Forms.ListBox"/>
   that represents a selected item in the <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
	</doc><doc for="ListBox.GetItemRectangle">
		<summary>
			<para>Returns the bounding rectangle for an item in the
   <see cref="System.Windows.Forms.ListBox"/>
   .</para>
		</summary>
		<param name="index">The zero-based index of item whose bounding rectangle you want to return. </param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the bounding rectangle for the specified item.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>If the item specified in the <paramref name="index"/> parameter is not visible, the rectangle
   returned by this method will be outside the visible portion of the control. You can
   use this method to determine the size and position of an item within the list.
   To get the height of an item, especially a variable-height owner drawn list item,
   you can use the <see cref="System.Windows.Forms.ListBox.GetItemHeight"/>
   
   method.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.ObjectCollection2">
		<summary>
			<para> Initializes a new instance of <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> containing an array of objects.
   </para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.ListBox"/> that owns the collection. </param>
		<param name="value">An array of objects to add to the collection. </param>
		<remarks>
			<para>You cannot create an instance of this class without
      associating it with a <see cref="System.Windows.Forms.ListBox"/> control.</para>
		</remarks>
	</doc><doc for="ListBox.ObjectCollection.this">
		<summary>
			<para> Gets or sets the item at the specified index within the collection.</para>
		</summary>
		<param name="index">The index of the item in the collection to get or set. </param>
		<value>
			<para>An object representing the item located at the specified index within the
      collection.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>You can use this method to obtain the <see cref="System.Windows.Forms.ListBox"/> item stored at a specific
   location within the collection. To determine the index of a specific item within
   the collection, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf"/> method.</para>
		</remarks>
	</doc><doc for="ObjectCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ObjectCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ObjectCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ObjectCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ObjectCollection.ICollection.CopyTo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.Contains">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.IndexOf">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.Clear">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.Insert">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.Remove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.RemoveAt">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedIndexCollection.IList.this">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.IList.Clear">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.IList.Insert">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.IList.Remove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SelectedObjectCollection.IList.RemoveAt">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ListBox.ObjectCollection.Add">
		<summary>
			<para>Adds an item to the list of items for a <see cref="System.Windows.Forms.ListBox"/>
.</para>
		</summary>
		<param name="item">An object representing the item to add to the collection. </param>
		<returns>
			<para>The zero-based index of the item in the collection.</para>
		</returns>
		<exception cref="System.SystemException">There is insufficient space available to add the new item to the list.</exception>
		<remarks>
			<para> If the <see cref="System.Windows.Forms.ListBox.Sorted"/> property of the <see cref="System.Windows.Forms.ListBox"/> is
   set to <see langword="true"/>, the item is inserted into the list alphabetically.
   Otherwise, the item is inserted at the end of the list. To insert an item into
   the list box at a specific position, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Insert"/>method. To add a set of items to the list box
   in a single operation, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/> method. If you
   want to use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method to add a
   large number of items to the list, use the <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ListBox.EndUpdate"/> methods to prevent the <see cref="System.Windows.Forms.ListBox"/> from
   repainting each time an item is added to the list until all items are added to
   the list. When adding items to a <see cref="System.Windows.Forms.ListBox"/>
   , it is more
   
   efficient to sort the items first and then add
   new items.</para>
			<para> 
   When an object is added to the collection, the <see cref="System.Windows.Forms.ListBox"/>
   first checks to see if the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property of the <see cref="System.Windows.Forms.ListControl"/> class has the name of a member from the
   object specified to reference when obtaining the item text. If the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property does not have a
   member specified, the <see cref="System.Windows.Forms.ListBox"/> then calls the <see cref="System.Object.ToString"/> method
   of the object to obtain the
   text to display in the list.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.ListBox"/> control that displays multiple items in columns and can have more than one item selected in the control's list. The code for the example adds 50 items to the <see cref="System.Windows.Forms.ListBox"/> using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class and then selects three items from the list using the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method. The code then displays values from the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> collection (through the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property) and the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> (through the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property). This example assumes that the code is located in and called from a <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Classic ListBox Example" SnippetID="1"/>
		</example>
	</doc><doc for="ListBox.ObjectCollection.IndexOf">
		<summary>
			<para>Returns the index within the collection of the specified item.</para>
		</summary>
		<param name="value">An object representing the item to locate in the collection.</param>
		<returns>
			<para>The zero-based index where the item is located within the collection; otherwise, negative
      one (-1).</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="value"/> parameter is null.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf"/> method enables you to determine where an 
   item is located within the collection. To determine whether a item is located
   within the collection before calling this method, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/> method.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/>
	</doc><doc for="ListBox.SelectedIndexCollection.this">
		<summary>
			<para> Gets the index value at the specified index within this collection.</para>
		</summary>
		<param name="index">The index of the item in the collection to get. </param>
		<value>
			<para>The index value from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> that is stored at the specified location.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> class.</exception>
		<remarks>
			<para>This indexer enables you to get a specific selected index from the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>. The index stored in the collection is an
   index into the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> of the <see cref="System.Windows.Forms.ListBox"/> that represents a
   selected item in the <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
	</doc><doc for="ListBox.SelectedObjectCollection.IsReadOnly">
		<summary>
			<para>Gets a value indicating whether the collection is read-only.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the collection is read-only; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is always <see langword="true"/> for this collection.</para>
		</remarks>
	</doc><doc for="ListBox.SelectedObjectCollection.CopyTo">
		<summary>
			<para>Copies the entire collection into an existing array at a
      specified location within the array.</para>
		</summary>
		<param name="dest">An <see cref="System.Array"/> representing the array to copy the contents of the collection to.</param>
		<param name="index">The location within the destination array to copy the items from the collection to.</param>
		<remarks>
			<para>You can use this method to combine the selected items from multiple
      collections into a single array.</para>
		</remarks>
	</doc><doc for="ListBox.SelectedObjectCollection">
		<summary>
			<para>Represents the collection of selected items in the
   <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> class stores the selected items in the <see cref="System.Windows.Forms.ListBox"/>. The items stored in the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> are items contained within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class. The <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class stores all items displayed in the <see cref="System.Windows.Forms.ListBox"/>.</para>
			<para>The following table is an example of how the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> stores the items of the <see cref="System.Windows.Forms.ListBox"/> as well as their selection states within an example <see cref="System.Windows.Forms.ListBox"/> .</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
					<description>Selection State Within the ListBox</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>object1</description>
					<description>Unselected</description>
				</item>
				<item>
					<term> 1</term>
					<description>object2</description>
					<description>Selected</description>
				</item>
				<item>
					<term> 2</term>
					<description>object3</description>
					<description>Unselected</description>
				</item>
				<item>
					<term> 3</term>
					<description>object4</description>
					<description>Selected</description>
				</item>
				<item>
					<term> 4</term>
					<description>object5</description>
					<description>Selected</description>
				</item>
			</list>
			<para>Based on the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> demonstrated in the previous table, the
following table demonstrates how the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> would appear. </para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Selected Item from ObjectCollection</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>object2</description>
				</item>
				<item>
					<term> 1</term>
					<description>object4</description>
				</item>
				<item>
					<term> 2</term>
					<description>object5</description>
				</item>
			</list>
			<para>You can use the properties and methods of this class to
   perform a variety of tasks with the collection. The <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection.Contains"/> method enables you to determine whether an item from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class is a member of
   the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/>. Once you know that the item is located within the collection, you can use the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.IndexOf"/> method to determine where a specific item within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> for the <see cref="System.Windows.Forms.ListBox"/> is stored within the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> . </para>
		</remarks>
	</doc><doc for="ListBox.RightToLeft">
		<summary>
			<para>Gets or sets a value indicating whether text displayed
 by the control is displayed from right to left.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.RightToLeft"/> values.</para>
		</value>
		<remarks>
			<para>This property allows your menus to support languages
 that are written from right to left. When this property is set to
 <see langword="true"/> , item text is displayed from right to left instead of the
 default left to right method. </para>
		</remarks>
		<platnote platform="Win98, WinMe">This property has no effect in Windows 98 or Windows Millennium Edition.
</platnote>
	</doc><doc for="ListBox.ObjectCollection">
		<summary>
			<para> Represents the collection of items in a <see cref="System.Windows.Forms.ListBox"/> .
   </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class stores the
   items displayed in the <see cref="System.Windows.Forms.ListBox"/>. There
   are two other collections defined within the <see cref="System.Windows.Forms.ListBox"/> class that enable you to determine
   what items are selected within this collection. The <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> class provides properties and methods
   for determining what items are selected within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>, while the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> class enables you to determine what indexes
   within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> are selected.</para>
			<para>There are a number of ways to add items to the
   collection. The <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method provides the
   ability to add a single object to the collection. To add a number of objects to
   the collection, you create an array of items and assign it to the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/> method. If you
   want to insert an object at a specific location within the collection, you can
   use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Insert"/>
   method. To
   remove items, you can use either the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method or the <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> method if you know where the item is
   located within the collection. The <see cref="System.Windows.Forms.ListBox.ObjectCollection.Clear"/> method enables you to remove all items
   from the collection instead of using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method to remove a single item at a
   time.</para>
			<para>You can also manipulate the items of a <see cref="System.Windows.Forms.ListBox"/> by
using the <see cref="System.Windows.Forms.ListControl.DataSource"/> property. If you use the
<see cref="System.Windows.Forms.ListControl.DataSource"/> property to add items to a 
<see cref="System.Windows.Forms.ListBox"/>, you can view the items in the <see cref="System.Windows.Forms.ListBox"/> 
using the <see cref="System.Windows.Forms.ListBox.Items"/> property but you cannot add or
remove items from the list using the methods of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>
. </para>
			<para>In addition to methods and properties for adding and
   removing items, the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> also provides methods to find
   items within the collection. The <see cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/> method enables you to determine whether
   an object is a member of the collection. Once you know that the item is located
   within the collection, you can use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf"/> method to
   determine where the item is located within the
   collection. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>
	</doc>
	<doc for="ListBox.ObjectCollection.Remove">
		<summary>
			<para> Removes the specified
      object from the collection.</para>
		</summary>
		<param name="value">An object representing the item to remove from the collection. </param>
		<remarks>
			<para>When you remove an item from the list, the indexes
      change for subsequent items in the list. All information about the removed item
      is deleted. You can use this method to remove a specific item from the list by
      specifying the actual item to remove from the list. To specify the index of the
      item to remove instead of the item itself, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> method. To remove
      all items from the list, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Clear"/>
      
      method.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Clear"/>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/>
	</doc>
	<doc for="ListBox.SelectedIndexCollection.Contains">
		<summary>
			<para>Determines whether the specified index is located within the collection.</para>
		</summary>
		<param name="selectedIndex">The index to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the specified index from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> for the <see cref="System.Windows.Forms.ListBox"/>is an item in this
   collection; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.Contains"/> method enables you to determine whether an
   index position from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class is a member of the selected
   indexes stored in the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>. You
   can use this to determine whether a specific item in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>
   is selected.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndexCollection.IndexOf"/>
	</doc>
	<doc for="ListBox.SelectedIndexCollection.GetEnumerator">
		<summary>
			<para> Returns an enumerator to use to iterate through
      the selected indexes collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> object that represents the selected
   indexes collection.</para>
		</returns>
	</doc>
	<doc for="ListBox.BackgroundImageChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.TextChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.OnPaint">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ListBox.SelectedItems">
		<summary>
			<para>Gets a collection containing the currently selected
      items in the <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> containing the currently
   selected items in the control.</para>
		</value>
		<remarks>
			<para>For a multiple-selection <see cref="System.Windows.Forms.ListBox"/> , this property returns a collection containing all items that are selected in the <see cref="System.Windows.Forms.ListBox"/>. For a single-selection <see cref="System.Windows.Forms.ListBox"/> , this property returns a collection containing a single element containing the only selected item in the <see cref="System.Windows.Forms.ListBox"/> . For more information on how to manipulate the items of the collection, see <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> .</para>
			<para>The <see cref="System.Windows.Forms.ListBox"/> class provides a number of ways to
reference selected items. Instead of using the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property to obtain the currently selected
item in a single-selection <see cref="System.Windows.Forms.ListBox"/>, you can use the <see cref="System.Windows.Forms.ListBox.SelectedItem"/> property. If you want to obtain the index
position of an item that is currently selected in the <see cref="System.Windows.Forms.ListBox"/>,
instead of the item itself, use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property. In addition,
you can use the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property if you want to obtain the index
positions of all selected items in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>. </para>
		</remarks>
	</doc>
	<doc for="ListBox.OnSelectedValueChanged">
		<nodoc/>
	</doc>
	<doc for="ListBox.Refresh">
		<nodoc/>
		<summary>
			<para>Forces the control to invalidate its client area and
      immediately redraw itself and any child controls.</para>
		</summary>
	</doc>
	<doc for="ListBox.SetSelected">
		<summary>
			<para> Selects or clears the selection for the specified
      item in a <see cref="System.Windows.Forms.ListBox"/>
      .</para>
		</summary>
		<param name="index">The zero-based index of the item in a <see cref="System.Windows.Forms.ListBox"/> to select or clear the selection for. </param>
		<param name="value"><see langword="true"/> to select the specified item; otherwise, <see langword="false"/> . </param>
		<exception cref="System.ArgumentOutOfRangeException">The specified index was outside the range of valid values.</exception>
		<remarks>
			<para>You can use this property to set the selection of items
      in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>. To select an item in a single-selection
   <see cref="System.Windows.Forms.ListBox"/>, use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.ListBox"/> control that displays multiple items in columns and can have more than one item selected in the control's list. The code for the example adds 50 items to the <see cref="System.Windows.Forms.ListBox"/> using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class and then selects three items from the list using the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method. The code then displays values from the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> collection (through the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property) and the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> (through the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property). This example assumes that the code is located in and called from a <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Classic ListBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndex"/>
	</doc>
	<doc for="ListBox.IndexFromPoint">
		<overload>
			<para>Returns the zero-based index of the item at the specified coordinates.</para>
		</overload>
		<summary>
			<para>Returns the zero-based index of the item
      at the specified coordinates.</para>
		</summary>
		<param name="p">A <see cref="System.Drawing.Point"/> object containing the coordinates used to obtain the item index. </param>
		<returns>
			<para>The zero-based index of the item found at the specified coordinates; returns
   <see langword="ListBox.NoMatches"/> if no match is found.</para>
		</returns>
		<remarks>
			<para> This method enables you to determine which item is located at a
      specific location within the control. You can use this method to determine which
      item within the list is selected when a user right-clicks over the <see cref="System.Windows.Forms.ListBox"/>.
      The location of the cursor can be determined and passed to the <paramref name="p"/>
      parameter of the <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method to determine which item the
      user right-clicked the mouse over. You can then display a shortcut menu to the user
      to provide tasks and features based on the specific item.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to perform drag
      and drop operations using a <see cref="System.Windows.Forms.ListBox"/> control that contains items to drop
      into a <see cref="System.Windows.Forms.RichTextBox"/>
      control. The constructor of the form sets
      the <see cref="System.Windows.Forms.RichTextBox.AllowDrop"/> property to <see langword="true"/> to
      enable drag and drop to occur in the <see cref="System.Windows.Forms.RichTextBox"/>. The example uses the <see cref="System.Windows.Forms.Control.MouseDown"/> event of the <see cref="System.Windows.Forms.ListBox"/>
      to start the drag operation by calling the <see cref="System.Windows.Forms.Control.DoDragDrop"/>
      method. The example uses the
   <see cref="System.Windows.Forms.Control.DragEnter"/> event to determine if an item being dragged into the <see cref="System.Windows.Forms.RichTextBox"/> is a valid data type. The <see cref="System.Windows.Forms.Control.DragDrop"/> event performs the actual
      dropping of a dragged item into the <see cref="System.Windows.Forms.RichTextBox"/> control at the current cursor location
      within the <see cref="System.Windows.Forms.RichTextBox"/> . This example
      assumes that the <see cref="System.Windows.Forms.Control.DragDrop"/> and <see cref="System.Windows.Forms.Control.DragEnter"/> events have been connected to the event
      handlers defined in the example.</para>
			<codelink SampleID="RichTextBox.AllowDrop" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.IndexFromPoint1">
		<summary>
			<para>Returns the zero-based index of the item at the specified coordinates.</para>
		</summary>
		<param name="x">The x coordinate of the location to search. </param>
		<param name="y">The y coordinate of the location to search. </param>
		<returns>
			<para>The zero-based index of the item found at the specified
      coordinates; returns <see langword="ListBox.NoMatches"/>
      if no match is
      found.</para>
		</returns>
		<remarks>
			<para> This method enables you to determine which item that is located at a
      specific location within the control. You can use this method to determine which
      item within the list is selected when a user right-clicks over the <see cref="System.Windows.Forms.ListBox"/>.
      The location of the cursor can be determined and passed to the <paramref name="x"/>
      and <paramref name="y"/> parameters of the <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method to determine
      which item the user right-clicked the mouse over. You can then display a shortcut menu
      to the user to provide tasks and features based on the
      specific item.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to perform drag
      and drop operations using a <see cref="System.Windows.Forms.ListBox"/> control that contains items to drop
      into a <see cref="System.Windows.Forms.RichTextBox"/>
      control. The constructor of the form sets
      the <see cref="System.Windows.Forms.RichTextBox.AllowDrop"/> property to <see langword="true"/> to
      enable drag and drop to occur in the <see cref="System.Windows.Forms.RichTextBox"/>. The example uses the <see cref="System.Windows.Forms.Control.MouseDown"/> event of the <see cref="System.Windows.Forms.ListBox"/>
      to start the drag operation by calling the <see cref="System.Windows.Forms.Control.DoDragDrop"/>
      method. The example uses the
   <see cref="System.Windows.Forms.Control.DragEnter"/> event to determine if an item being dragged into the <see cref="System.Windows.Forms.RichTextBox"/> is a valid data type. The <see cref="System.Windows.Forms.Control.DragDrop"/> event performs the actual
      dropping of a dragged item into the <see cref="System.Windows.Forms.RichTextBox"/> control at the current cursor location
      within the <see cref="System.Windows.Forms.RichTextBox"/> . This example
      assumes that the <see cref="System.Windows.Forms.Control.DragDrop"/> and <see cref="System.Windows.Forms.Control.DragEnter"/> events have been connected to the event
      handlers defined in the example.</para>
			<codelink SampleID="RichTextBox.AllowDrop" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.SelectedIndices">
		<summary>
			<para>Gets a collection that contains the zero-based indexes of all currently
      selected items in the <see cref="System.Windows.Forms.ListBox"/>. </para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>
containing the indexes of the currently selected items in the control. If no
items are currently selected, an empty <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>
is returned.</para>
		</value>
		<remarks>
			<para>For a multiple-selection <see cref="System.Windows.Forms.ListBox"/>
, this property returns a collection containing the indexes to all items
that are selected in the <see cref="System.Windows.Forms.ListBox"/>. For a single-selection <see cref="System.Windows.Forms.ListBox"/>,
this property returns a collection containing a single element containing
the index of the only selected item in the <see cref="System.Windows.Forms.ListBox"/>. For more
information on how to manipulate the items of the collection, see <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>.</para>
			<para>The <see cref="System.Windows.Forms.ListBox"/> class provides a number of ways to
reference selected items. Instead of
using the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property to obtain the index position of
the currently selected item in a single-selection <see cref="System.Windows.Forms.ListBox"/>, you can use the
<see cref="System.Windows.Forms.ListBox.SelectedIndex"/> 
property. If you want to obtain the item that is currently selected in the
<see cref="System.Windows.Forms.ListBox"/>, instead of the index position of the 
item, use the <see cref="System.Windows.Forms.ListBox.SelectedItem"/> property. In addition, you
can use the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property if you want to obtain
all the selected items in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.FindString"/> method to search for all instances of the search text in the items of the <see cref="System.Windows.Forms.ListBox"/>. The example uses the version of the <see cref="System.Windows.Forms.ListBox.FindString"/> method that enables you to specify a starting search index from which to do a continual search of all items in the <see cref="System.Windows.Forms.ListBox"/>. The example also demonstrates how to determine when the <see cref="System.Windows.Forms.ListBox.FindString"/> method begins searching from the top of the list after it reaches the bottom of the list of items to prevent a recursive search. Once items are found in the <see cref="System.Windows.Forms.ListBox"/>, they are selected using the <see cref="System.Windows.Forms.ListBox.SetSelected"/>method.</para>
			<codelink SampleID="ListBox.FindString" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndex"/>
		<seealso cref="System.Windows.Forms.ListBox.SelectedItem"/>
		<seealso cref="System.Windows.Forms.ListBox.SelectedItems"/>
	</doc>
	<doc for="ListBox.FindString1">
		<summary>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ListBox"/> that starts with the specified string.
   The search starts at a specific starting index.</para>
		</summary>
		<param name="s">The text to search for. </param>
		<param name="startIndex">The zero-based index of the item before the first item to be searched. Set to negative one (-1) to search from the beginning of the control. </param>
		<returns>
			<para>The zero-based index of the first item found; returns
   <see langword="ListBox.NoMatches"/>
   if no match is found.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="startIndex"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>The search performed by this method is not
      case-sensitive. The search looks for words that partially match the specified
      search string parameter, <paramref name="s"/>
      . You can use this method to search for the first item that matches the
      specified string at the specified starting index within the list of
      items for the <see cref="System.Windows.Forms.ListBox"/> .
      You can then perform tasks such as
      removing the item that contains the search text by using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method or changing
      the item's text. This method is typically used after a call has been
      made using the version of this method that does not specify a starting index.
      Once an initial item has been found in the list, this method is typically used to
      find further instances of the search text by specifying the index position in
      the <paramref name="startIndex"/> parameter of the item after the first found
      instance of the search text. If you want to perform a search for an exact word
      match instead of a partial match, use the <see cref="System.Windows.Forms.ListBox.FindStringExact"/> method.</para>
			<note type="note">
      When the search reaches the
      bottom of the <see cref="System.Windows.Forms.ListBox"/>, it continues searching from the top of
      the <see cref="System.Windows.Forms.ListBox"/> back to the item specified by the
   <paramref name="startIndex"/> parameter.
      
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use
      the <see cref="System.Windows.Forms.ListBox.FindString"/> method to search for all instances of the
      search text in the items of the <see cref="System.Windows.Forms.ListBox"/>. The example uses the version of the
   <see cref="System.Windows.Forms.ListBox.FindString"/> method 
      that enables you to specify a starting search
      index from which to do a continual search of all items in the <see cref="System.Windows.Forms.ListBox"/>.
      The example also demonstrates how to determine when the <see cref="System.Windows.Forms.ListBox.FindString"/> method begins searching from the top of
      the list after it reaches the bottom of the list of items to prevent a recursive
      search. Once items are found in the <see cref="System.Windows.Forms.ListBox"/>, they are selected using
      the <see cref="System.Windows.Forms.ListBox.SetSelected"/>method.</para>
			<codelink SampleID="ListBox.FindString" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.FindStringExact"/>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/>
	</doc>
	<doc for="ListBox.SelectedIndexCollection">
		<summary>
			<para>Represents the collection containing the indexes to the selected items in a <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> class stores the indexes to the
   selected items in the <see cref="System.Windows.Forms.ListBox"/>. The indexes stored in the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> are index positions within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class. The <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class stores all items displayed in the
<see cref="System.Windows.Forms.ListBox"/>.</para>
			<para>The following table is an example of how the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> stores the items of the <see cref="System.Windows.Forms.ListBox"/> as well as their selection states within an example <see cref="System.Windows.Forms.ListBox"/> .</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
					<description>Selection State Within the ListBox</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>object1</description>
					<description>Unselected</description>
				</item>
				<item>
					<term> 1</term>
					<description>object2</description>
					<description>Selected</description>
				</item>
				<item>
					<term> 2</term>
					<description>object3</description>
					<description>Unselected</description>
				</item>
				<item>
					<term> 3</term>
					<description>object4</description>
					<description>Selected</description>
				</item>
				<item>
					<term> 4</term>
					<description>object5</description>
					<description>Selected</description>
				</item>
			</list>
			<para>Based on the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> example in the previous table, the following table demonstrates how the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> would appear. </para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Index of Selected Item in ObjectCollection</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>1</description>
				</item>
				<item>
					<term> 1</term>
					<description>3</description>
				</item>
				<item>
					<term> 2</term>
					<description>4</description>
				</item>
			</list>
			<para>You can use the properties and methods of this class to
   perform a variety of tasks with the collection. The <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.Contains"/>
   method enables you
   to determine whether an index position from the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class is a member of the selected indexes
   stored in the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>. Once you know that the
   item is located within the collection, you can use the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection.IndexOf"/> method to determine where a
   specific index position within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> for the <see cref="System.Windows.Forms.ListBox"/> is stored. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.FindString"/> method to search for all instances of the search text in the items of the <see cref="System.Windows.Forms.ListBox"/>. The example uses the version of the <see cref="System.Windows.Forms.ListBox.FindString"/> method that enables you to specify a starting search index from which to do a continual search of all items in the <see cref="System.Windows.Forms.ListBox"/>. The example also demonstrates how to determine when the <see cref="System.Windows.Forms.ListBox.FindString"/> method begins searching from the top of the list after it reaches the bottom of the list of items to prevent a recursive search. Once items are found in the <see cref="System.Windows.Forms.ListBox"/>, they are selected using the <see cref="System.Windows.Forms.ListBox.SetSelected"/>method.</para>
			<codelink SampleID="ListBox.FindString" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.SelectedIndexCollection.Count">
		<summary>
			<para>Gets the number of items in the collection.</para>
		</summary>
		<value>
			<para>The number of items in the collection.</para>
		</value>
		<remarks>
			<para>This property enables you to determine the number of selected items in the
   <see cref="System.Windows.Forms.ListBox"/>. You can then use this value when looping through
      the values of the collection and you need to provide a number of iterations
      to perform the loop. Unless the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property of the <see cref="System.Windows.Forms.ListBox"/>is set to <see langword="SelectionMode.MultiSimple"/> or
   <see langword="SelectionMode.MultiExtended"/> , this property always
      returns a value of zero (0) or one (1) depending on whether you have
      a selected item.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.FindString"/> method to search for all instances of the search text in the items of the <see cref="System.Windows.Forms.ListBox"/>. The example uses the version of the <see cref="System.Windows.Forms.ListBox.FindString"/> method that enables you to specify a starting search index from which to do a continual search of all items in the <see cref="System.Windows.Forms.ListBox"/>. The example also demonstrates how to determine when the <see cref="System.Windows.Forms.ListBox.FindString"/> method begins searching from the top of the list after it reaches the bottom of the list of items to prevent a recursive search. Once items are found in the <see cref="System.Windows.Forms.ListBox"/>, they are selected using the <see cref="System.Windows.Forms.ListBox.SetSelected"/>method.</para>
			<codelink SampleID="ListBox.FindString" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.FindString">
		<overload>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ListBox"/> that starts with the specified string. </para>
		</overload>
		<summary>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ListBox"/>
that starts with the specified string.</para>
		</summary>
		<param name="s">The text to search for. </param>
		<returns>
			<para>The zero-based index of the first item found; returns
   <see langword="ListBox.NoMatches"/> if no match is found.</para>
		</returns>
		<remarks>
			<para>The search performed by this method is not
      case-sensitive. The search looks for words that partially match the specified
      search string parameter, <paramref name="s"/>
      . You can use
      this method to search for the first item that matches the specified string. You can
      then perform tasks such as removing the item that contains the search
      text by using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method or changing the
      item's text. Once you have found the specified text, if you want to search for
      other instances of the text in the <see cref="System.Windows.Forms.ListBox"/>, you can use the version
      of the <see cref="System.Windows.Forms.ListBox.FindString"/> method that provides a parameter for
      specifying a starting index within the <see cref="System.Windows.Forms.ListBox"/>. If you want
      to perform a search for an exact word match instead
      of a partial match, use the <see cref="System.Windows.Forms.ListBox.FindStringExact"/> method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.FindString"/> method to search for the first instance of
   a string in a <see cref="System.Windows.Forms.ListBox"/> . If no
   items are found that match the search string <see cref="System.Windows.Forms.ListBox.FindString"/> returns
   a -1 value and the example displays a <see cref="System.Windows.Forms.MessageBox"/>. If an item is found that matches the
   search text, the example uses the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method to select the item
   in the <see cref="System.Windows.Forms.ListBox"/> .</para>
			<codelink SampleID="ListBox.FindString2" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.FindStringExact"/>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/>
	</doc>
	<doc for="ListBox.DrawMode">
		<summary>
			<para> Gets or sets the drawing mode for the control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DrawMode"/> values representing the mode for drawing
   the items of the control. The default is <see langword="DrawMode.Normal"/>
   .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned to the property is not a member of the <see cref="System.Windows.Forms.DrawMode"/> enumeration.</exception>
		<exception cref="System.ArgumentException">A multicolumn <see cref="System.Windows.Forms.ListBox"/> cannot have a variable-sized height.</exception>
		<example>
			<para>The following example demonstrates how to create owner-drawn <see cref="System.Windows.Forms.ListBox"/> 
items. The code uses the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property to specify that the items
drawn are fixed sized and the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event to perform the drawing of
each item into the <see cref="System.Windows.Forms.ListBox"/>. The example code uses the properties and
methods of the <see cref="System.Windows.Forms.DrawItemEventArgs"/> class passed as a parameter to the event
handler to draw the items. This example assumes that a <see cref="System.Windows.Forms.ListBox"/>
control called <c>listBox1</c> has
been added to a form and that the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event is handled
by the event handler defined in the example code. The example also assumes that
items have been added to the <see cref="System.Windows.Forms.ListBox"/> with the text of "Apple", "Orange", and
"Plum" in that order.</para>
			<codelink SampleID="ListBox.DrawMode" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DrawMode"/>
		<seealso cref="System.Windows.Forms.ListBox.DrawItem"/>
		<keyword term="owner-drawn controls"/>
	</doc>
	<doc for="ListBox.DrawItem">
		<summary>
			<para>Occurs when a visual aspect of an owner-drawn <see cref="System.Windows.Forms.ListBox"/> changes.</para>
		</summary>
		<remarks>
			<para>This event is used by an owner-drawn <see cref="System.Windows.Forms.ListBox"/>. The event is only raised when the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property is set to
<see langword="DrawMode.OwnerDrawFixed"/> or 
<see langword="DrawMode.OwnerDrawVariable"/>.
   You can use this event to perform the tasks needed to draw items in the <see cref="System.Windows.Forms.ListBox"/> . If you have a variable-sized item (when
   the <see cref="System.Windows.Forms.ListBox.DrawMode"/>
   property is set to
<see langword="DrawMode.OwnerDrawVariable"/> ), before drawing 
   an item, the <see cref="System.Windows.Forms.ListBox.MeasureItem"/> event
   is raised. You can create an event handler for the <see cref="System.Windows.Forms.ListBox.MeasureItem"/> event to specify the size for the item
   that you are going to draw in your event handler for the <see cref="System.Windows.Forms.ListBox.DrawItem"/>event.</para>
			<para> For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create owner-drawn <see cref="System.Windows.Forms.ListBox"/> items. The code uses the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property to specify that the items drawn are fixed sized and the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event to perform the drawing of each item into the <see cref="System.Windows.Forms.ListBox"/>. The example code uses the properties and methods of the <see cref="System.Windows.Forms.DrawItemEventArgs"/> class passed as a parameter to the event handler to draw the items. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> control called <c>listBox1</c> has been added to a form and that the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event is handled by the event handler defined in the example code. The example also assumes that items have been added to the <see cref="System.Windows.Forms.ListBox"/> with the text of "Apple", "Orange", and "Plum" in that order.</para>
			<codelink SampleID="ListBox.DrawMode" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.OnDrawItem"/>
	</doc>
	<doc for="ListBox.OnDrawItem">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ListBox.DrawItem"/>
event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.DrawItemEventArgs"/>that contains the event data. </param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ListBox.OnDrawItem"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ListBox.OnDrawItem"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ListBox.OnDrawItem"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to create owner-drawn <see cref="System.Windows.Forms.ListBox"/> items. The code uses the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property to specify that the items drawn are fixed sized and the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event to perform the drawing of each item into the <see cref="System.Windows.Forms.ListBox"/>. The example code uses the properties and methods of the <see cref="System.Windows.Forms.DrawItemEventArgs"/> class passed as a parameter to the event handler to draw the items. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> control called <c>listBox1</c> has been added to a form and that the <see cref="System.Windows.Forms.ListBox.DrawItem"/> event is handled by the event handler defined in the example code. The example also assumes that items have been added to the <see cref="System.Windows.Forms.ListBox"/> with the text of "Apple", "Orange", and "Plum" in that order.</para>
			<codelink SampleID="ListBox.DrawMode" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.DrawItem"/>
	</doc>
	<doc for="ListBox.Items">
		<summary>
			<para>Gets the items of the <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> representing the items in the
<see cref="System.Windows.Forms.ListBox"/> .</para>
		</value>
		<remarks>
			<para>This property enables you to obtain a reference to the list of
      items that are currently stored in the <see cref="System.Windows.Forms.ListBox"/>. With this reference, you
      can add items, remove items, and obtain a count of the items in the collection.
      For more information on the tasks that can be performed with the
      item collection, see the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class reference topics.</para>
			<para>You can also manipulate the items of a <see cref="System.Windows.Forms.ListBox"/> by using the <see cref="System.Windows.Forms.ListControl.DataSource"/> property. If you use the <see cref="System.Windows.Forms.ListControl.DataSource"/> property to add items to a <see cref="System.Windows.Forms.ListBox"/>, you
   can view the items in the <see cref="System.Windows.Forms.ListBox"/> using the <see cref="System.Windows.Forms.ListBox.Items"/> property but you cannot add or remove
   items from the list using the methods of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> .</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.ListBox"/> control that displays multiple items in columns and can have more than one item selected in the control's list. The code for the example adds 50 items to the <see cref="System.Windows.Forms.ListBox"/> using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class and then selects three items from the list using the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method. The code then displays values from the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> collection (through the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property) and the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> (through the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property). This example assumes that the code is located in and called from a <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Classic ListBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection"/>
		<keyword term="list box items"/>
	</doc>
	<doc for="ListBox.PreferredHeight">
		<summary>
			<para>Gets the combined height of all items in the <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<value>
			<para>The combined height, in pixels, of all items in the control.</para>
		</value>
		<remarks>
			<para>This property enables you to determine the height that the <see cref="System.Windows.Forms.ListBox"/>
needs to be sized to, in order to display every available item in the list and
to avoid displaying vertical scroll bars. If the amount of items in the <see cref="System.Windows.Forms.ListBox"/> is
large, sizing the control using the value of the <see cref="System.Windows.Forms.ListBox.PreferredHeight"/> property might cause the <see cref="System.Windows.Forms.ListBox"/> to
be sized outside of the client area of the form or container it is located
within.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to set the <see cref="System.Windows.Forms.Control.Size"/> property of a <see cref="System.Windows.Forms.ListBox"/> 
based on the value of the <see cref="System.Windows.Forms.ListBox.PreferredHeight"/> property in order to
display all items in the <see cref="System.Windows.Forms.ListBox"/> without use of scroll bars. This
example assumes that a <see cref="System.Windows.Forms.ListBox"/> control, named <c>listBox1</c>, has been added to a form.</para>
			<codelink SampleID="ListBox.PreferredHeight" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Height"/>
	</doc>
	<doc for="ListBox.SelectedIndex">
		<summary>
			<para> Gets or sets the zero-based index of the currently selected item in
      a <see cref="System.Windows.Forms.ListBox"/>. </para>
		</summary>
		<value>
			<para>A zero-based index of the currently selected item. A value of negative one (-1) is
      returned if no item is selected.</para>
		</value>
		<remarks>
			<para>For a standard <see cref="System.Windows.Forms.ListBox"/> , you can use this property to
   determine the index of the item that is selected in the <see cref="System.Windows.Forms.ListBox"/>
   . If the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property of the <see cref="System.Windows.Forms.ListBox"/> is
   set to either <see langword="SelectionMode.MultiSimple"/> or
<see langword="SelectionMode.MultiExtended "/> (which indicates a 
   multiple-selection <see cref="System.Windows.Forms.ListBox"/>
   ) and multiple items are selected
   in the list, this property can return the index to any selected
   
   item.</para>
			<para> To retrieve a collection
   containing the indexes of all selected items in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>,
   use the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property. If you want to obtain the item
   that is currently selected in the <see cref="System.Windows.Forms.ListBox"/>
   , use the <see cref="System.Windows.Forms.ListBox.SelectedItem"/> property. In addition, you can use the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property to obtain all the
   selected items in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property with the <see cref="System.Windows.Forms.ListBox.TopIndex"/> property to move the currently selected 
   item to the top of the list of items in the display area of the <see cref="System.Windows.Forms.ListBox"/>.
   The example further demonstrates how to remove items using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection" qualify="true"/> class, and how to clear all item
   selection using the <see cref="System.Windows.Forms.ListBox.ClearSelected"/> method. The code first
   moves the currently selected item in the <see cref="System.Windows.Forms.ListBox"/> to the top of the list.
   The code then removes all items before the currently selected item and clears
   all selections in the <see cref="System.Windows.Forms.ListBox"/>. This example assumes that
   a <see cref="System.Windows.Forms.ListBox"/> containing items is added to a form and
   that an item is currently selected in the <see cref="System.Windows.Forms.ListBox"/>.</para>
			<codelink SampleID="ListBox.SelectedIndex" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndices"/>
		<seealso cref="System.Windows.Forms.ListBox.SelectedItems"/>
		<seealso cref="System.Windows.Forms.ListBox.SelectedItem"/>
	</doc>
	<doc for="ListBox.TopIndex">
		<summary>
			<para>Gets or sets the index of the first visible item in the
   <see cref="System.Windows.Forms.ListBox"/>
   .</para>
		</summary>
		<value>
			<para>The zero-based index of the first visible item in the control.</para>
		</value>
		<remarks>
			<para>Initially, the item with the index position zero
      (0) is at the top of the visible region of the <see cref="System.Windows.Forms.ListBox"/>.
      If the contents of the <see cref="System.Windows.Forms.ListBox"/> have been scrolled, another item might be at
      the top of the control's display area. You can use this property to obtain the
      index within the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> for the <see cref="System.Windows.Forms.ListBox"/> of the item that is currently positioned
      at the top of the visible region of the control. You can also use this property
      to position an item in the list at the
      top of the visible region of the control.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property with the <see cref="System.Windows.Forms.ListBox.TopIndex"/> property to move the currently selected item to the top of the list of items in the display area of the <see cref="System.Windows.Forms.ListBox"/>. The example further demonstrates how to remove items using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection" qualify="true"/> class, and how to clear all item selection using the <see cref="System.Windows.Forms.ListBox.ClearSelected"/> method. The code first moves the currently selected item in the <see cref="System.Windows.Forms.ListBox"/> to the top of the list. The code then removes all items before the currently selected item and clears all selections in the <see cref="System.Windows.Forms.ListBox"/>. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> containing items is added to a form and that an item is currently selected in the <see cref="System.Windows.Forms.ListBox"/>.</para>
			<codelink SampleID="ListBox.SelectedIndex" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.ClearSelected">
		<summary>
			<para>Unselects all items in the <see cref="System.Windows.Forms.ListBox"/> .</para>
		</summary>
		<remarks>
			<para>Calling this method is equivalent to setting the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/>
property to negative one (-1). You can use
this method to quickly remove unselect all items in the list.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property with the <see cref="System.Windows.Forms.ListBox.TopIndex"/> property to move the currently selected item to the top of the list of items in the display area of the <see cref="System.Windows.Forms.ListBox"/>. The example further demonstrates how to remove items using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection" qualify="true"/> class, and how to clear all item selection using the <see cref="System.Windows.Forms.ListBox.ClearSelected"/> method. The code first moves the currently selected item in the <see cref="System.Windows.Forms.ListBox"/> to the top of the list. The code then removes all items before the currently selected item and clears all selections in the <see cref="System.Windows.Forms.ListBox"/>. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> containing items is added to a form and that an item is currently selected in the <see cref="System.Windows.Forms.ListBox"/>.</para>
			<codelink SampleID="ListBox.SelectedIndex" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndex"/>
	</doc>
	<doc for="ListBox.ObjectCollection.RemoveAt">
		<summary>
			<para>Removes the item at the specified index within the collection.</para>
		</summary>
		<param name="index">The zero-based index of the item to remove. </param>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>When you remove an item from the list, the indexes
      change for subsequent items in the list. All information about the removed item
      is deleted. You can use this method to remove a specific item from the list by
      specifying the index of the item to remove from the list. To specify the item to
      remove instead of the index to the item, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method. To remove
      all items from the list, use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Clear"/>
      
      method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property with the <see cref="System.Windows.Forms.ListBox.TopIndex"/> property to move the currently selected item to the top of the list of items in the display area of the <see cref="System.Windows.Forms.ListBox"/>. The example further demonstrates how to remove items using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection" qualify="true"/> class, and how to clear all item selection using the <see cref="System.Windows.Forms.ListBox.ClearSelected"/> method. The code first moves the currently selected item in the <see cref="System.Windows.Forms.ListBox"/> to the top of the list. The code then removes all items before the currently selected item and clears all selections in the <see cref="System.Windows.Forms.ListBox"/>. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> containing items is added to a form and that an item is currently selected in the <see cref="System.Windows.Forms.ListBox"/>.</para>
			<codelink SampleID="ListBox.SelectedIndex" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Clear"/>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/>
	</doc>
	<doc for="ListBox.FindStringExact1">
		<summary>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ListBox"/> that exactly matches the specified string.
   The search starts at a specific starting
   index.</para>
		</summary>
		<param name="s">The text to search for. </param>
		<param name="startIndex">The zero-based index of the item before the first item to be searched. Set to negative one (-1) to search from the beginning of the control. </param>
		<returns>
			<para>The zero-based index of the first item found;
      returns <see langword="ListBox.NoMatches"/>
      if no match is found.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="startIndex"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>The search performed by this method is not
      case-sensitive. The search looks for words that exactly match the specified
      search string parameter, <paramref name="s"/>
      . You can use this
      method to search for the first item that matches the specified string at the
      specified starting index within the list of items for the <see cref="System.Windows.Forms.ListBox"/> .
      You can then perform tasks such as removing the item that contains the search
      text using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method or change
      the item's text. This method is typically used after a call has been made using
      the version of this method that does not specify a starting index. Once an
      initial item has been found in the list, this method is typically used to find
      further instances of the search text by specifying the index position in the
   <paramref name="startIndex"/> parameter of the item after the first found instance
      of the search text. If you want to perform a partial word search instead
      of an exact word match, use the <see cref="System.Windows.Forms.ListBox.FindString"/> method.</para>
			<note type="note">
      When the search reaches the
      bottom of the <see cref="System.Windows.Forms.ListBox"/>, it continues searching from the top of
      the <see cref="System.Windows.Forms.ListBox"/> back to the item specified by the
   <paramref name="startIndex"/> parameter.
      
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.FindStringExact"/> method to search for all items in a
<see cref="System.Windows.Forms.ListBox"/> that exactly match the specified search 
   text. The example uses the version of the <see cref="System.Windows.Forms.ListBox.FindStringExact"/> method that enables you to specify a
   starting search index from which to do a continual search of all items in the
<see cref="System.Windows.Forms.ListBox"/>. The example also demonstrates how to 
   determine when the <see cref="System.Windows.Forms.ListBox.FindStringExact"/> method begins searching
   from the top of the list after it reaches the bottom of the list of items, to
   prevent a recursive search. Once items are found in the <see cref="System.Windows.Forms.ListBox"/>,
   they are selected using the <see cref="System.Windows.Forms.ListBox.SetSelected"/>method.</para>
			<codelink SampleID="ListBox.FindStringExact2" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.FindString"/>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/>
	</doc>
	<doc for="ListBox.FindStringExact">
		<overload>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ListBox"/> that exactly matches the specified string. </para>
		</overload>
		<summary>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ListBox"/>
that exactly matches the specified string.</para>
		</summary>
		<param name="s">The text to search for. </param>
		<returns>
			<para>The zero-based index of the first item found; returns
   <see langword="ListBox.NoMatches"/>
   if no match is found.</para>
		</returns>
		<remarks>
			<para> The search performed by this method is not
      case-sensitive. The search looks for an exact match to the words specified in the
      search string parameter, <paramref name="s"/>. You can use this method to search for the first
      item that matches the specified string. You can then perform tasks such as removing
      the item that contains the search text by using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> method or changing
      the item's text. Once you have found the specified text, if you want to search
      for other instances of the text in the <see cref="System.Windows.Forms.ListBox"/>, you can use the version
      of the <see cref="System.Windows.Forms.ListBox.FindStringExact"/> method that provides a parameter for
      specifying a starting index within the <see cref="System.Windows.Forms.ListBox"/>. If you want to perform
      partial word search instead of an exact word match, use the <see cref="System.Windows.Forms.ListBox.FindString"/>
      
      method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.FindStringExact" qualify="true"/> method to search a <see cref="System.Windows.Forms.ListBox"/>
control for an item that exactly matches a specified string. If no items are
found that match the search string, <see cref="System.Windows.Forms.ListBox.FindStringExact"/> returns a -1 value and the example
displays a <see cref="System.Windows.Forms.MessageBox"/>. If an item is found that matches the
search text, the example uses the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method to select
the item in the <see cref="System.Windows.Forms.ListBox"/>.</para>
			<codelink SampleID="ListBox.FindStringExact" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.FindString"/>
		<seealso cref="System.Windows.Forms.ListBox.ObjectCollection.Contains"/>
	</doc>
	<doc for="ListBox.ColumnWidth">
		<summary>
			<para>Gets or sets the width of columns in a multicolumn <see cref="System.Windows.Forms.ListBox"/>.</para>
		</summary>
		<value>
			<para>The width, in pixels, of each column in the control. The default is 0.</para>
		</value>
		<exception cref="System.ArgumentException">A value less than zero is assigned to the property.</exception>
		<remarks>
			<para>If you set the value to zero (0), a default width is
      assigned to each column. If the <see cref="System.Windows.Forms.ListBox"/> is a multicolumn list box, this property
      returns the current width of each column in the list. You can use this property
      to ensure that each column in a multicolumn <see cref="System.Windows.Forms.ListBox"/> can properly display its
      items. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.ColumnWidth"/> and <see cref="System.Windows.Forms.ListBox.MultiColumn"/> properties to create a <see cref="System.Windows.Forms.ListBox"/> control that displays items in multiple columns. This example assumes that a ListBox control, named listBox1, has been added to a form.</para>
			<codelink SampleID="ListBox.ColumnWidth" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.MultiColumn">
		<summary>
			<para> Gets or sets a value indicating whether the <see cref="System.Windows.Forms.ListBox"/>
supports
multiple columns.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the list box supports
   multiple columns; otherwise, <see langword="false"/>. The default is
<see langword="false"/> .</para>
		</value>
		<exception cref="System.ArgumentException">A multicolumn <see cref="System.Windows.Forms.ListBox"/> cannot have a variable-sized height.</exception>
		<remarks>
			<para>A multicolumn list box places items into as many columns
      as are needed to make vertical scrolling unnecessary. The user can use the
      keyboard to navigate to columns that are not currently visible. Set the
   <see cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/> property to <see langword="true"/> to
      display a horizontal scroll bar that allows the user to scroll to columns that
      are not currently shown in the visible region of the <see cref="System.Windows.Forms.ListBox"/>.
      The value of the <see cref="System.Windows.Forms.ListBox.ColumnWidth"/>
      
      property determines the width of each column. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.ColumnWidth"/> and <see cref="System.Windows.Forms.ListBox.MultiColumn"/> properties to create a <see cref="System.Windows.Forms.ListBox"/> 
control that displays items in multiple columns. This example assumes that a
ListBox control, named listBox1, has been added to a form.</para>
			<codelink SampleID="ListBox.ColumnWidth" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/>
		<seealso cref="System.Windows.Forms.ListBox.ColumnWidth"/>
	</doc>
	<doc for="ListBox.GetSelected">
		<summary>
			<para>Returns a value indicating whether the specified item is selected.</para>
		</summary>
		<param name="index">The zero-based index of the item that determines whether it is selected. </param>
		<returns>
			<para><see langword="true"/> if the
   specified item is currently selected in the <see cref="System.Windows.Forms.ListBox"/>; otherwise, <see langword="false"/> .</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the value of the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> property of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class.</exception>
		<remarks>
			<para>You can used this method to quickly determine whether a specified item is
      selected. This method is useful when a specific operation needs to be performed
      when a specific item in a multiple-selection <see cref="System.Windows.Forms.ListBox"/> is selected.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.GetSelected"/> method to determine which items in a 
<see cref="System.Windows.Forms.ListBox"/> are selected in order to select the 
   items that are not selected and deselect the items that are selected. The
   example also demonstrates using the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property to enable a <see cref="System.Windows.Forms.ListBox"/>
   to have more than one selected item and uses the <see cref="System.Windows.Forms.ListBox.Sorted"/> property to demonstrate how to sort
   items in a <see cref="System.Windows.Forms.ListBox"/> automatically. This example assumes that a
<see cref="System.Windows.Forms.ListBox"/>, named <c>listBox1</c>, has been added to a form and that the <c>InitializeMyListBox</c> method defined 
in the example is called from the <see cref="System.Windows.Forms.Form.Load"/> event of
the form.</para>
			<codelink SampleID="ListBox.GetSelected" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.SelectionMode">
		<summary>
			<para> Gets or sets the method in which items are selected in
      the <see cref="System.Windows.Forms.ListBox"/>
      .</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.SelectionMode"/> values. The default is
<see langword="SelectionMode.One"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property enables you to determine how many items in the <see cref="System.Windows.Forms.ListBox"/> a user can select at one time and how the
   user can make multiple-selections. When the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property is set to
<see langword="SelectionMode.MultiExtended"/>, pressing SHIFT and clicking the 
   mouse or pressing SHIFT and one of the arrow keys (UP ARROW, DOWN ARROW, LEFT
   ARROW, and RIGHT ARROW) extends the selection from the previously selected item
   to the current item. Pressing CTRL and clicking the mouse selects or deselects
   an item in the list. When the property is set to
<see langword="SelectionMode.MultiSimple"/>, a
   mouse click or pressing the SPACEBAR selects or deselects an item in the list. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.GetSelected"/> method to determine which items in a <see cref="System.Windows.Forms.ListBox"/> are selected in order to select the items that are not selected and deselect the items that are selected. The example also demonstrates using the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property to enable a <see cref="System.Windows.Forms.ListBox"/> to have more than one selected item and uses the <see cref="System.Windows.Forms.ListBox.Sorted"/> property to demonstrate how to sort items in a <see cref="System.Windows.Forms.ListBox"/> automatically. This example assumes that a <see cref="System.Windows.Forms.ListBox"/>, named <c>listBox1</c>, has been added to a form and that the <c>InitializeMyListBox</c> method defined in the example is called from the <see cref="System.Windows.Forms.Form.Load"/> event of the form.</para>
			<codelink SampleID="ListBox.GetSelected" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.SelectionMode"/>
	</doc>
	<doc for="ListBox.Sorted">
		<summary>
			<para>Gets or sets a value indicating whether the items in the
   <see cref="System.Windows.Forms.ListBox"/>
   are sorted alphabetically.</para>
		</summary>
		<value>
			<para><see langword="true"/> if items in the control are
   sorted; otherwise, <see langword="false"/>. The default is
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>You can use this property to automatically sort items alphabetically in
      a <see cref="System.Windows.Forms.ListBox"/>. As items are added to a sorted <see cref="System.Windows.Forms.ListBox"/> ,
      the items are moved to the appropriate location in the sorted list. When adding
      items to a <see cref="System.Windows.Forms.ListBox"/>, it is more efficient to sort the items first
      and then add new items.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.GetSelected"/> method to determine which items in a <see cref="System.Windows.Forms.ListBox"/> are selected in order to select the items that are not selected and deselect the items that are selected. The example also demonstrates using the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property to enable a <see cref="System.Windows.Forms.ListBox"/> to have more than one selected item and uses the <see cref="System.Windows.Forms.ListBox.Sorted"/> property to demonstrate how to sort items in a <see cref="System.Windows.Forms.ListBox"/> automatically. This example assumes that a <see cref="System.Windows.Forms.ListBox"/>, named <c>listBox1</c>, has been added to a form and that the <c>InitializeMyListBox</c> method defined in the example is called from the <see cref="System.Windows.Forms.Form.Load"/> event of the form.</para>
			<codelink SampleID="ListBox.GetSelected" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.SelectedItem">
		<summary>
			<para>Gets or sets the currently selected item in the <see cref="System.Windows.Forms.ListBox"/>
.</para>
		</summary>
		<value>
			<para>An object that represents the current selection in the control. </para>
		</value>
		<remarks>
			<para>For a standard <see cref="System.Windows.Forms.ListBox"/> , you can use this property
   to determine which item is selected in the <see cref="System.Windows.Forms.ListBox"/>. If the <see cref="System.Windows.Forms.ListBox.SelectionMode"/> property of the <see cref="System.Windows.Forms.ListBox"/> is set to either <see langword="SelectionMode.MultiSimple"/> or
<see langword="SelectionMode.MultiExtended "/> (which indicates a 
   multiple-selection <see cref="System.Windows.Forms.ListBox"/>
   ) and multiple items are selected in the list, this
   property can return any selected item.</para>
			<para> To retrieve a collection containing all selected items in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>, use the
<see cref="System.Windows.Forms.ListBox.SelectedItems"/> property. If 
you want to obtain the index position of the currently selected item in the
<see cref="System.Windows.Forms.ListBox"/>, use the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> 
property. In addition, you can use the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property to obtain all
the selected indexes in a multiple-selection <see cref="System.Windows.Forms.ListBox"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event to search for and select an items in a different <see cref="System.Windows.Forms.ListBox"/> control. The example uses the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event to determine when the selected item in the <see cref="System.Windows.Forms.ListBox"/> is changed. The example code then reads the text of the item using the <see cref="System.Windows.Forms.ListBox.SelectedItem"/> property and calls the <see cref="System.Windows.Forms.ListBox.FindString"/> method on a different <see cref="System.Windows.Forms.ListBox"/> using the text returned by <see cref="System.Windows.Forms.ListBox.SelectedItem"/> in the first <see cref="System.Windows.Forms.ListBox"/>. If an item is found in the other <see cref="System.Windows.Forms.ListBox"/>, the item is selected. This example assumes that two <see cref="System.Windows.Forms.ListBox"/> controls, named <c>listBox1</c> and <c>listBox2</c>, have been added to a form and that both <see cref="System.Windows.Forms.ListBox"/> controls contain items that are identical. 
The example also assumes that the event-handling method defined in the example
is connected to the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event of <c>listBox1</c>.</para>
			<codelink SampleID="ListBox.SelectedIndexChanged" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.SelectedIndexChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.ListBox.SelectedIndex"/> property has changed.</para>
		</summary>
		<remarks>
			<para>You can create an event handler for this event to
      determine when the selected index in the <see cref="System.Windows.Forms.ListBox"/>
      has been changed. This can be useful when you
      need to display information in other controls based on the current selection in
      the <see cref="System.Windows.Forms.ListBox"/>. You can use the event handler for this
      event to load the information in the other controls.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event to search for and select an items in
   a different <see cref="System.Windows.Forms.ListBox"/> control. The example uses the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event to determine when the selected item
   in the <see cref="System.Windows.Forms.ListBox"/> is changed. The example code then reads
   the text of the item using the <see cref="System.Windows.Forms.ListBox.SelectedItem"/> property and calls the
<see cref="System.Windows.Forms.ListBox.FindString"/> method on a different <see cref="System.Windows.Forms.ListBox"/> 
using the text returned by <see cref="System.Windows.Forms.ListBox.SelectedItem"/> in the first <see cref="System.Windows.Forms.ListBox"/>.
If an item is found in the other <see cref="System.Windows.Forms.ListBox"/>, the item is selected. This example
assumes that two <see cref="System.Windows.Forms.ListBox"/> controls, named <c>listBox1</c> and <c>listBox2</c>, have been added to a form and that both <see cref="System.Windows.Forms.ListBox"/> controls contain items that are identical.
The example also assumes that the event-handling method defined in the example
is connected to the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event of <c>listBox1</c>.</para>
			<codelink SampleID="ListBox.SelectedIndexChanged" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.SelectedIndex"/>
	</doc>
	<doc for="ListBox">
		<summary>
			<para> Represents a Windows list box control.
      </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox"/> control enables you to display a
   list of items to the user that the user can select by clicking. A <see cref="System.Windows.Forms.ListBox"/>
   control
   can provide single or multiple selections using the <see cref="System.Windows.Forms.ListBox.SelectionMode"/>
   property. The <see cref="System.Windows.Forms.ListBox"/> also provides the <see cref="System.Windows.Forms.ListBox.MultiColumn"/> property to enable the display of
   items in columns instead of a straight vertical
   list of items. This allows the control
   to display more visible items and prevents the need for the user to
   scroll to an item.</para>
			<para>Typically, Windows handles the task of drawing the items to display in the <see cref="System.Windows.Forms.ListBox"/>.
You can use the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property and handle the <see cref="System.Windows.Forms.ListBox.MeasureItem"/> and <see cref="System.Windows.Forms.ListBox.DrawItem"/> events to provide the ability to
override the automatic drawing that Windows provides and draw the items yourself. You can
use owner-drawn <see cref="System.Windows.Forms.ListBox"/>
controls to display variable-height items, images, or a different color or
font for the text of each item in the list. The <see cref="System.Windows.Forms.ListBox.HorizontalExtent"/> property, <see cref="System.Windows.Forms.ListBox.GetItemHeight"/>, and <see cref="System.Windows.Forms.ListBox.GetItemRectangle"/>
property also provide assistance for drawing your own items.</para>
			<para>In addition to display and selection functionality, the
<see cref="System.Windows.Forms.ListBox"/> also provides features that enable you to 
   efficiently add items to the <see cref="System.Windows.Forms.ListBox"/> and to find text within the items of the
   list. The <see cref="System.Windows.Forms.ListBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ListBox.EndUpdate"/>
   methods enable you to add a large number of items to the <see cref="System.Windows.Forms.ListBox"/>
   without the control being repainted each time an item is added
   to the list. The <see cref="System.Windows.Forms.ListBox.FindString"/> and <see cref="System.Windows.Forms.ListBox.FindStringExact"/>
   methods enable you to search for an item
   in the list that contains a specific search string.</para>
			<para>The <see cref="System.Windows.Forms.ListBox.Items"/>, <see cref="System.Windows.Forms.ListBox.SelectedItems"/>, and <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> properties provide access to the three
collections that are used by the <see cref="System.Windows.Forms.ListBox"/>. The following table outlines the three
collections used by the <see cref="System.Windows.Forms.ListBox"/> and
their use within the control.</para>
			<list type="table">
				<listheader>
					<term>Collection Class</term>
					<description>Use Within The List Box</description>
				</listheader>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ListBox.ObjectCollection"/>
						</para></term>
					<description>
						<para> Contains all items contained in the <see cref="System.Windows.Forms.ListBox"/> control.</para></description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/>
						</para></term>
					<description>
						<para> Contains a collection of the selected items which is a subset of the items contained in the <see cref="System.Windows.Forms.ListBox"/> control.</para></description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/>
						</para></term>
					<description>
						<para> Contains a collection of the selected indexes, which is a subset of the indexes of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/>.
   These indexes specify items that are selected.</para></description>
				</item>
			</list>
			<para>The following three examples illustrate the three indexed collections that the <see cref="System.Windows.Forms.ListBox"/> class supports.</para>
			<para>The following table demonstrates an example of how the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> stores the items of the <see cref="System.Windows.Forms.ListBox"/> as
well as their selection state within an example <see cref="System.Windows.Forms.ListBox"/>.</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
					<description>Selection State Within the ListBox</description>
				</listheader>
				<item>
					<term> 0</term>
					<description> object1</description>
					<description>Unselected</description>
				</item>
				<item>
					<term> 1</term>
					<description> object2</description>
					<description>Selected</description>
				</item>
				<item>
					<term> 2</term>
					<description> object3</description>
					<description>Unselected</description>
				</item>
				<item>
					<term> 3</term>
					<description> object4</description>
					<description>Selected</description>
				</item>
				<item>
					<term> 4</term>
					<description> object5</description>
					<description>Selected</description>
				</item>
			</list>
			<para>Based on the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> demonstrated in the table above, this
table demonstrates how the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> would
appear. </para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
				</listheader>
				<item>
					<term> 0</term>
					<description> object2</description>
				</item>
				<item>
					<term> 1</term>
					<description> object4</description>
				</item>
				<item>
					<term> 2</term>
					<description> object5</description>
				</item>
			</list>
			<para>Based on the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> demonstrated in the table above,
this table demonstrates how the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> would
appear. </para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Index of Item</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>1</description>
				</item>
				<item>
					<term> 1</term>
					<description>3</description>
				</item>
				<item>
					<term> 2</term>
					<description>4</description>
				</item>
			</list>
			<para>The <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class enables you to add items to the
<see cref="System.Windows.Forms.ListBox"/>. The <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method can accept any object when adding a 
member to the <see cref="System.Windows.Forms.ListBox"/>. When an object is being added
to the <see cref="System.Windows.Forms.ListBox"/>, the control uses the text defined in
the <see cref="System.Object.ToString"/> method of the object unless a member name within the
object is specified in the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property. In
addition to adding items using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class you can also add items using the
<see cref="System.Windows.Forms.ListControl.DataSource"/> property of the <see cref="System.Windows.Forms.ListControl"/> class.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.ListBox"/>
control that displays multiple items in columns and can have more than one item
selected in the control's list. The code for the example adds 50 items to the
<see cref="System.Windows.Forms.ListBox"/> using the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ListBox.ObjectCollection"/> class and then selects three items from 
the list using the <see cref="System.Windows.Forms.ListBox.SetSelected"/> method. The code then displays values from
the <see cref="System.Windows.Forms.ListBox.SelectedObjectCollection"/> collection (through the <see cref="System.Windows.Forms.ListBox.SelectedItems"/> property) and the <see cref="System.Windows.Forms.ListBox.SelectedIndexCollection"/> (through the <see cref="System.Windows.Forms.ListBox.SelectedIndices"/> property). This example assumes that the code
is located in and called from a <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Classic ListBox Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ListBox.HorizontalExtent">
		<summary>
			<para>Gets or sets the width by which the horizontal scroll bar of a <see cref="System.Windows.Forms.ListBox"/>
can scroll.</para>
		</summary>
		<value>
			<para>The width, in pixels, that the horizontal scroll bar can scroll the control. The default is zero.</para>
		</value>
		<remarks>
			<para> This property only reports a useful value if the
   <see cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/> property is set to <see langword="true"/>.
      If the width of the <see cref="System.Windows.Forms.ListBox"/> is smaller than the value of this
      property, the horizontal scroll bar horizontally scrolls items in the <see cref="System.Windows.Forms.ListBox"/>.
      If the width of the <see cref="System.Windows.Forms.ListBox"/> is equal to or greater than this value,
      the horizontal scroll bar is hidden. The value of this property is not
      dynamically updated by the <see cref="System.Windows.Forms.ListBox"/>. This property is useful when the items of
      the <see cref="System.Windows.Forms.ListBox"/> are owner-drawn. For example, if the owner
      drawn items of the <see cref="System.Windows.Forms.ListBox"/> are 200 pixels wide, but the <see cref="System.Windows.Forms.ListBox"/> is
      60 pixels wide, the <see cref="System.Windows.Forms.ListBox.HorizontalExtent"/> property would need to be
      set to 200 in order to scroll the right edge of the items into the visible region
      of the
      control.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/> and <see cref="System.Windows.Forms.ListBox.HorizontalExtent"/> properties to display a horizontal scroll bar that shows all item text in the <see cref="System.Windows.Forms.ListBox"/> control. The example also uses the <see cref="System.Windows.Forms.ListBox.IntegralHeight"/> property to ensure that items are not partially displayed due to the size of the <see cref="System.Windows.Forms.ListBox"/> control. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> control, named <c>listBox1</c>, has been added to a form.</para>
			<codelink SampleID="ListView.HorizontalExtent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/>
	</doc>
	<doc for="ListBox.HorizontalScrollbar">
		<summary>
			<para>Gets or sets a value indicating whether a horizontal scroll bar is displayed
      in the control.</para>
		</summary>
		<value>
			<para><see langword="true"/> to display a horizontal scroll bar in the control;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/> property determines whether the <see cref="System.Windows.Forms.ListBox"/> should display a
   horizontal scroll bar when the width of items within the <see cref="System.Windows.Forms.ListBox"/> extend beyond the right edge of the
   control. When this property is set to <see langword="true"/>
   ,
   the scroll bar is automatically displayed based on the width of items in the
<see cref="System.Windows.Forms.ListBox"/>. If the <see cref="System.Windows.Forms.ListBox"/> is an owner-drawn list box, in order 
   to properly display a horizontal scroll bar, you must set the <see cref="System.Windows.Forms.ListBox.HorizontalExtent"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/> and <see cref="System.Windows.Forms.ListBox.HorizontalExtent"/> properties to display a horizontal scroll bar that shows all item text in the <see cref="System.Windows.Forms.ListBox"/> control. The example also uses the <see cref="System.Windows.Forms.ListBox.IntegralHeight"/> property to ensure that items are not partially displayed due to the size of the <see cref="System.Windows.Forms.ListBox"/> control. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> control, named <c>listBox1</c>, has been added to a form.</para>
			<codelink SampleID="ListView.HorizontalExtent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.HorizontalExtent"/>
	</doc>
	<doc for="ListBox.IntegralHeight">
		<summary>
			<para> Gets or
      sets a value indicating whether the control should resize to avoid showing partial
      items.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control resizes so that
   it does not display partial items; otherwise, <see langword="false"/>. The
   default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>When this property is set to <see langword="true"/>, the control automatically resizes to ensure
   that an item is not partially displayed. If you want to maintain the original
   size of the <see cref="System.Windows.Forms.ListBox"/>
   based on the space requirements of your form,
   set this property to <see langword="false"/>. If the <see cref="System.Windows.Forms.ListBox"/> does not
   contain any items, this property has
   no effect.</para>
			<note type="note">
   The integral height is based on
   the height of the <see cref="System.Windows.Forms.ListBox"/>, rather than the client area
   height. As a result, when the <see cref="System.Windows.Forms.ListBox.IntegralHeight"/> property is set
<see langword="true"/>, items can still be partially shown if scroll bars are 
   displayed.
</note>
			<note type="note">
   If the <see cref="System.Windows.Forms.ListBox.DrawMode"/> property is set to
<see langword="DrawMode.OwnerDrawVariable"/>, this property has no 
   effect.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.ListBox.HorizontalScrollbar"/> and <see cref="System.Windows.Forms.ListBox.HorizontalExtent"/> properties to display a horizontal scroll bar that shows all item text in the <see cref="System.Windows.Forms.ListBox"/> control. The example also uses the <see cref="System.Windows.Forms.ListBox.IntegralHeight"/> property to ensure that items are not partially displayed due to the size of the <see cref="System.Windows.Forms.ListBox"/> control. This example assumes that a <see cref="System.Windows.Forms.ListBox"/> control, named <c>listBox1</c>, has been added to a form.</para>
			<codelink SampleID="ListView.HorizontalExtent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox.DrawMode"/>
		<keyword term="automatic sizing"/>
	</doc>
	<doc for="ListBox.UseTabStops">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Windows.Forms.ListBox"/> can recognize and expand tab characters when drawing
   its strings.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control can expand tab
   characters; otherwise, <see langword="false"/>. The default is
<see langword="true"/> .</para>
		</value>
		<example>
			<para>The following example demonstrates how to create a 
   <see cref="System.Windows.Forms.ListBox"/> that displays items with tab 
      characters.</para>
			<codelink SampleID="ListBox.UseTabStops" SnippetID="1"/>
		</example>
	</doc>
</docs>
