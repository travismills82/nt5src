<docs>
	<doc for="DragEventArgs.data">
		<summary>
     The data associated with this event.
 </summary>
	</doc>
	<doc for="DragEventArgs.keyState">
		<summary>
     The current state of the shift, ctrl, and alt keys.
 </summary>
	</doc>
	<doc for="DragEventArgs.x">
		<summary>
     The mouse x location.
 </summary>
	</doc>
	<doc for="DragEventArgs.y">
		<summary>
     The mouse y location.
 </summary>
	</doc>
	<doc for="DragEventArgs.allowedEffect">
		<summary>
     The effect that should be applied to the mouse cursor.
 </summary>
	</doc>
	<doc for="DragEventArgs.DragEventArgs">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.Windows.Forms.DragEventArgs"/> class.
    </para>
		</summary>
		<param name="data">
    The data associated with this event.
 </param>
		<param name="keyState">
    The current state of the SHIFT, CTRL, and ALT keys.
 </param>
		<param name="x">
    The x-coordinate of the mouse cursor in pixels.
 </param>
		<param name="y">
    The y-coordinate of the mouse cursor in pixels.
 </param>
		<param name="allowedEffect">
    One of the <see cref="System.Windows.Forms.DragDropEffects"/> values.
 </param>
		<param name="effect">
    One of the <see cref="System.Windows.Forms.DragDropEffects"/> values.
 </param>
		<seealso cref="System.Windows.Forms.DragDropEffects"/>
		<seealso cref="System.Windows.Forms.IDataObject"/>
	</doc>
	<doc for="DragEventArgs">
		<summary>
			<para>Provides data for the <see cref="System.Windows.Forms.Control.DragDrop"/>, <see cref="System.Windows.Forms.Control.DragEnter"/>, or <see cref="System.Windows.Forms.Control.DragOver"/> event.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.DragDrop"/> event occurs when the user
   completes a drag-and-drop operation by dragging an object over the control and
   then dropping it onto the control by releasing the mouse button. The <see cref="System.Windows.Forms.Control.DragEnter"/> event occurs when the user moves
   the mouse pointer onto the control while dragging an object with the mouse. The
<see cref="System.Windows.Forms.Control.DragOver"/>
event occurs when the user
moves the mouse pointer over the control while dragging an object with the
mouse.</para>
			<para>A <see cref="System.Windows.Forms.DragEventArgs"/> object specifies any data associated with this event;
the current state of
the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the
drag-and-drop effects allowed by the source and target of the drag event.</para>
			<para>For information about the event model,
   see <see topic="cpconEventsDelegates"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
			<para>The following example illustrates how <see cref="System.Windows.Forms.DragEventArgs"/> are passed between the source and target
   of a drag-and-drop operation. In this example, a <see cref="System.Windows.Forms.ListBox"/>
   control is the source of the data, and the <see cref="System.Windows.Forms.RichTextBox"/> control is the target. The example assumes
   that the <see cref="System.Windows.Forms.ListBox"/> control has been populated with a list of
   valid filenames. When the user drags one of the displayed filenames from
   the <see cref="System.Windows.Forms.ListBox"/> control onto the <see cref="System.Windows.Forms.RichTextBox"/> control, the file referenced in the
   filename is opened.</para>
			<para>The operation is initiated in the <see cref="System.Windows.Forms.ListBox"/> control's MouseDown
event. In the <see cref="System.Windows.Forms.RichTextBox.DragEnter"/> event handler, the example uses
the <see cref="System.Windows.Forms.IDataObject.GetDataPresent"/><see langword=" "/>method to verify that the
data is in a format that the <see cref="System.Windows.Forms.RichTextBox"/> control can display and
then sets the <see cref="System.Windows.Forms.DragDropEffects"/> property to specify that data should be
copied from the source control to the target control. Finally, the <see cref="System.Windows.Forms.RichTextBox"/> control's DragDrop event handler uses
the <see cref="System.Windows.Forms.IDataObject.GetData"/> method to retrieve the filename to
open.</para>
			<codelink SampleID="RichTextDragDrop" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DragDropEffects"/>
		<seealso cref="System.Windows.Forms.Control.OnDragDrop"/>
		<seealso cref="System.Windows.Forms.Control.DragDrop"/>
		<seealso cref="System.Windows.Forms.Control.OnDragEnter"/>
		<seealso cref="System.Windows.Forms.Control.DragEnter"/>
		<seealso cref="System.Windows.Forms.Control.OnDragOver"/>
		<seealso cref="System.Windows.Forms.Control.DragOver"/>
	</doc>
	<doc for="DragEventArgs.AllowedEffect">
		<summary>
			<para>Gets which drag-and-drop operations are allowed by the
      originator (or source) of the drag event.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DragDropEffects"/> values.</para>
		</value>
		<remarks>
			<para>When a control initiates a drag-and-drop operation by
      calling the <see cref="System.Windows.Forms.Control.DoDragDrop" qualify="true"/>
      method, it specifies the permissible effects of the
      operation. For example, when
      you drag a file from a source, if the file is read-only (or
      from a read-only storage medium such as a CD), the source will indicate that the file
      can be copied, but not transferred, to the target.</para>
			<para>Before attempting to perform an operation on the dragged data, you should
      examine this property to ensure that the operation is allowed.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.DragDropEffects"/>
	</doc>
	<doc for="DragEventArgs.Data">
		<summary>
			<para> Gets the <see cref="System.Windows.Forms.IDataObject"/> that contains the data associated with this event.</para>
		</summary>
		<value>
			<para>The data associated with this event.</para>
		</value>
		<remarks>
			<para>In the body of your event handler, you can use
      the <see cref="System.Windows.Forms.IDataObject.GetDataPresent"/> method to determine whether the data
      matches the format requirements of the control onto which the data is being
      dragged. You also can specify whether you want to attempt to convert the data to
      meet your format requirements. If the dragged data meets your format
      requirements, use the <see cref="System.Windows.Forms.IDataObject.GetData"/>
      
      method to retrieve the
      data.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.IDataObject"/>
	</doc>
	<doc for="DragEventArgs.Effect">
		<summary>
			<para> Gets or sets the target drop effect in a drag-and-drop operation.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DragDropEffects"/> values.</para>
		</value>
		<remarks>
			<para> By default, the effect applied determines the mouse
      cursor for the target of a drag-and-drop operation. This is useful to provide
      feedback to the user on the operation that will occur. For example, if you press
      the CTRL key when you drag a file from a source, specify <see cref="System.Windows.Forms.DragDropEffects.Copy" qualify="true"/>
      
      to indicate the target will try to perform a copy operation.</para>
			<para> To use custom cursors for a drag operation, see <see cref="System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" qualify="true"/>
.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.DragDropEffects"/>
	</doc>
	<doc for="DragEventArgs.KeyState">
		<summary>
			<para> Gets the current state of the SHIFT, CTRL, and ALT
      keys, as well as the state of the mouse buttons.</para>
		</summary>
		<value>
			<para>The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.</para>
		</value>
		<remarks>
			<para> You can make the effect of a
      drag-and-drop operation to depend on the state of a particular key. For example,
      you may decide to copy or move data depending on whether the CTRL or SHIFT keys
      are pressed during the drag-and-drop operation.</para>
			<para>The bits that are set in the <see cref="System.Windows.Forms.DragEventArgs.KeyState"/> property identify the keys
   or mouse buttons that were pressed during the operation. For example, if the
   left mouse button is pressed, the first bit in the <see cref="System.Windows.Forms.DragEventArgs.KeyState"/>
   property is set.
   You can use the bitwise AND operator to test for a given key state.</para>
			<para>The following table lists the bits that are set for a
   specified event.</para>
			<list type="table">
				<listheader>
					<term>Bit</term>
					<description>Key</description>
				</listheader>
				<item>
					<term> 1</term>
					<description>The left mouse button.</description>
				</item>
				<item>
					<term> 2</term>
					<description>The right mouse button.</description>
				</item>
				<item>
					<term> 4</term>
					<description>The SHIFT key.</description>
				</item>
				<item>
					<term> 8</term>
					<description>The CTRL key.</description>
				</item>
				<item>
					<term> 16</term>
					<description>The middle mouse button.</description>
				</item>
				<item>
					<term> 32</term>
					<description>The ALT key.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
	</doc>
	<doc for="DragEventArgs.X">
		<summary>
			<para> Gets the x-coordinate of the
      mouse
      pointer, in screen coordinates.</para>
		</summary>
		<value>
			<para>The
      x-coordinate of the mouse pointer in pixels.</para>
		</value>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.DragEventArgs.Y"/>
	</doc>
	<doc for="DragEventArgs.Y">
		<summary>
			<para> Gets the y-coordinate of
      the mouse
      pointer, in screen coordinates.</para>
		</summary>
		<value>
			<para>The y-coordinate of the mouse pointer in pixels.</para>
		</value>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.DragEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.DragEventArgs.X"/>
	</doc>
</docs>
