<docs>
	<doc for="NotifyIcon.Finalize">
		<summary>
			<para>
       Cleans up the resources used during garbage
       collection, which occurs when <see cref="System.Windows.Forms.NotifyIcon.Dispose"/> is
       called. This class cannot be inherited.
    </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.NotifyIcon.Finalize"/> in a derived class, be sure to call the base
       class's <see cref="System.Windows.Forms.NotifyIcon.Finalize"/>
       method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.Dispose"/>
	</doc>
	<doc for="NotifyIcon.OnClick">
		<summary>
			<para>
       This method actually raises the Click event. Inheriting classes should
       override this if they wish to be notified of a Click event. (This is far
       preferable to actually adding an event handler.) They should not,
       however, forget to call base.onClick(e); before exiting, to ensure that
       other recipients do actually get the event.
    </para>
		</summary>
		<param name="e">
    This event has no additional information besides the sender.
 </param>
	</doc>
	<doc for="NotifyIcon.OnDoubleClick">
		<summary>
     Inheriting classes should override this method to handle this event.
     Call base.onDoubleClick to send this event to any registered event listeners.
 </summary>
		<param name="e">
     event
 </param>
	</doc>
	<doc for="NotifyIcon.OnMouseDown">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.NotifyIcon.MouseDown"/> event.
       Inheriting classes should override this method to handle this event.
       Call base.onMouseDown to send this event to any registered event listeners.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For an
       overview see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding OnMouseDown in a derived
       class, be sure to call the base class's OnMouseDown
       method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.OnMouseMove"/>
		<seealso cref="System.Windows.Forms.NotifyIcon.OnMouseUp"/>
		<keyword term=""/>
	</doc>
	<doc for="NotifyIcon.OnMouseMove">
		<summary>
			<para>
       Inheriting classes should override this method to handle this event.
       Call base.onMouseMove to send this event to any registered event listeners.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding OnMouseMove in a derived
       class, be sure to call the base class's OnMouseMove method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.OnMouseDown"/>
		<seealso cref="System.Windows.Forms.NotifyIcon.OnMouseUp"/>
	</doc>
	<doc for="NotifyIcon.OnMouseUp">
		<summary>
			<para>
       Inheriting classes should override this method to handle this event.
       Call base.onMouseUp to send this event to any registered event listeners.
    </para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding see OnMouseUp in a derived
       class, be sure to call the base class's OnMouseUp method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.OnMouseDown"/>
		<seealso cref="System.Windows.Forms.NotifyIcon.OnMouseMove"/>
	</doc>
	<doc for="NotifyIcon.ShowContextMenu">
		<summary>
     Shows the context menu for the tray icon.
 </summary>
	</doc>
	<doc for="NotifyIcon.UpdateIcon">
		<summary>
     Updates the icon in the system tray.
 </summary>
	</doc>
	<doc for="NotifyIcon.WmMouseDown">
		<summary>
     Handles the mouse-down event
 </summary>
	</doc>
	<doc for="NotifyIcon.WmMouseMove">
		<summary>
     Handles the mouse-move event
 </summary>
	</doc>
	<doc for="NotifyIcon.WmMouseUp">
		<summary>
     Handles the mouse-up event
 </summary>
	</doc>
	<doc for="NotifyIcon.WndProc">
		<summary>
     The NotifyIcon's window procedure.  Inheriting classes can override this
     to add extra functionality, but should not forget to call
     base.wndProc(msg); to ensure the NotifyIcon continues to function properly.
 </summary>
		<param name="msg">
     A Windows Message Object.
 </param>
	</doc>
	<doc for="NotifyIcon.NotifyIconNativeWindow">
		<summary>
     Defines a placeholder window that the NotifyIcon is attached to.
 </summary>
	</doc>
	<doc for="NotifyIcon.NotifyIconNativeWindow.NotifyIconNativeWindow">
		<summary>
     Create a new NotifyIcon, and bind the window to the NotifyIcon component.
 </summary>
	</doc>
	<doc for="NotifyIcon.NotifyIconNativeWindow.WndProc">
		<summary>
     Pass messages on to the NotifyIcon object's wndproc handler.
 </summary>
	</doc>
	<doc for="NotifyIcon.EVENT_MOUSEDOWN">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.EVENT_MOUSEMOVE">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.EVENT_MOUSEUP">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.EVENT_DOUBLECLICK">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.WM_TASKBARCREATED">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.nextId">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.EVENT_CLICK">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="NotifyIcon.NotifyIcon">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.NotifyIcon"/> class.</para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Windows.Forms.NotifyIcon"/> class.
   </para>
		</summary>
		<remarks>
			<para>When a new <see cref="System.Windows.Forms.NotifyIcon"/> is created, the <see cref="System.Windows.Forms.NotifyIcon.Visible"/> property is set to
<see langword="false."/> You must set the <see cref="System.Windows.Forms.NotifyIcon.Visible"/> property to <see langword="true"/> in order to use the <see cref="System.Windows.Forms.NotifyIcon"/> you created. This instance will exist
   until its container releases it to garbage collection.</para>
		</remarks>
	</doc><doc for="NotifyIcon.Dispose">
		<nodoc/>
		<summary>
			<para> Disposes of the resources (other than memory) used by the
   <see cref="System.Windows.Forms.NotifyIcon"/>.
      </para>
		</summary>
		<remarks>
			<para> Call <see cref="System.Windows.Forms.NotifyIcon.Dispose"/> when you are finished using the
<see cref="System.Windows.Forms.NotifyIcon"/>. The <see cref="System.Windows.Forms.NotifyIcon.Dispose"/> method leaves the
<see cref="System.Windows.Forms.NotifyIcon"/> in an unusable state. After calling <see cref="System.Windows.Forms.NotifyIcon.Dispose"/>, you must release all references to
   the <see cref="System.Windows.Forms.NotifyIcon"/> so the memory
   it was occupying can be reclaimed by garbage collection.
   </para>
			<note type="note">
   Always call <see cref="System.Windows.Forms.NotifyIcon.Dispose"/> before you release your last reference
   to the <see cref="System.Windows.Forms.NotifyIcon"/>. Otherwise, the resources the <see cref="System.Windows.Forms.NotifyIcon"/> is
   using will not be freed until garbage collection calls the <see cref="System.Windows.Forms.NotifyIcon"/>
   object's destructor.
   
</note>
		</remarks>
	</doc><doc for="NotifyIcon.MouseDown">
		<summary>
			<para> Occurs when the user presses the
      mouse button while the pointer is over the icon in the status notification area of the taskbar.</para>
		</summary>
		<remarks>
			<para>For information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.MouseMove"/>
		<seealso cref="System.Windows.Forms.NotifyIcon.MouseUp"/>
	</doc><doc for="NotifyIcon.MouseMove">
		<summary>
			<para>Occurs when the user moves the mouse while the pointer is over the icon in the status notification
      area of the taskbar.</para>
		</summary>
		<remarks>
			<para>For information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.MouseDown"/>
		<seealso cref="System.Windows.Forms.NotifyIcon.MouseUp"/>
	</doc><doc for="NotifyIcon.MouseUp">
		<summary>
			<para>Occurs when the user releases the mouse button while the pointer is over the icon in the
      status notification area of the taskbar.</para>
		</summary>
		<remarks>
			<para>For information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.MouseDown"/>
		<seealso cref="System.Windows.Forms.NotifyIcon.MouseMove"/>
	</doc><doc for="NotifyIcon.Click">
		<summary>
			<para>Occurs when the user clicks the icon in the status area.</para>
		</summary>
		<remarks>
			<para>For information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.NotifyIcon.DoubleClick"/>
	</doc><doc for="NotifyIcon">
		<summary>
			<para> Specifies a component that
      creates an icon in the status area. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> Icons in the status area are short cuts to processes that
      are running in the background of a computer, such as a virus protection program
      or a volume control. These processes do not come with their own user
      interfaces. The <see cref="System.Windows.Forms.NotifyIcon"/> class provides a way to program
      in this functionality. The <see cref="System.Windows.Forms.NotifyIcon.Icon"/> property defines the icon that appears in
      the status area. Pop-up menus for an icon are addressed with the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>
      property. The <see cref="System.Windows.Forms.NotifyIcon.Text"/>
      property assigns ToolTip text. In order
      for the icon to show up in the status area, the <see cref="System.Windows.Forms.NotifyIcon.Visible"/>
      property must be set to <see langword="true"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">to create the <see cref="System.Windows.Forms.NotifyIcon"/> component. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
		<keyword term="TrayIcon"/>
		<keyword term="Tray"/>
	</doc>
	<doc for="NotifyIcon.ContextMenu">
		<summary>
			<para> Gets or sets the shortcut
      menu for the icon.</para>
		</summary>
		<value>
			<para> The <see cref="System.Windows.Forms.ContextMenu"/> for the icon.
   The default value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>The menu is shown when a right-mouse click is performed on
      an icon in the status notification area of the taskbar. Shortcut menus also are known as pop-up
      menus.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ContextMenu"/>
	</doc>
	<doc for="NotifyIcon.DoubleClick">
		<summary>
			<para>Occurs when the user double-clicks the icon in the status notification area of the taskbar.</para>
		</summary>
		<remarks>
			<para>For information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.NotifyIcon.Click"/>
	</doc>
	<doc for="NotifyIcon.Icon">
		<summary>
			<para> Gets or sets the current
      icon.
      </para>
		</summary>
		<value>
			<para> The <see cref="System.Drawing.Icon"/> displayed by the <see cref="System.Windows.Forms.NotifyIcon"/>
component. The default value is <see langword="null"/>
.</para>
		</value>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Icon"/>
	</doc>
	<doc for="NotifyIcon.NotifyIcon1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.NotifyIcon"/>
class with the specified container.</para>
		</summary>
		<param name="container">An <see cref="System.ComponentModel.IContainer"/> that represents the container for the <see cref="System.Windows.Forms.NotifyIcon"/> control.</param>
		<remarks>
			<para>When a new <see cref="System.Windows.Forms.NotifyIcon"/> is created, the <see cref="System.Windows.Forms.NotifyIcon.Visible"/> property is set to
<see langword="false."/> You must set the <see cref="System.Windows.Forms.NotifyIcon.Visible"/> property to 
<see langword="true"/> in order to use the <see cref="System.Windows.Forms.NotifyIcon"/> you created. This 
   instance will exist until its container releases it to garbage collection.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
	</doc>
	<doc for="NotifyIcon.Text">
		<summary>
			<para>Gets or sets the ToolTip text displayed when
      the mouse hovers over a status area icon.</para>
		</summary>
		<value>
			<para>The ToolTip text displayed when the mouse hovers
      over a status area icon.</para>
		</value>
		<exception cref="T:System.ArgumentException">ToolTip text must be less than 64 characters long.</exception>
		<remarks>
			<para>If
      the text is <see langword="null"/> ,
      no ToolTip is displayed.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
	</doc>
	<doc for="NotifyIcon.Visible">
		<summary>
			<para> Gets or sets a value indicating whether the icon is visible in the status notification area of the taskbar.
      </para>
		</summary>
		<value>
			<para><see langword="true "/> if the icon is visible in the status area;
   otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> Since the default value is <see langword="false"/> , in order for the icon to show up
   in the status area, you must set the <see cref="System.Windows.Forms.NotifyIcon.Visible"/> property to <see langword="true "/>
   
   .
   </para>
		</remarks>
		<example>
			<para> The following example demonstrates using the <see cref="System.Windows.Forms.NotifyIcon"/>
class to display an icon for an application in the notification area. The
example demonstrates setting the <see cref="System.Windows.Forms.NotifyIcon.Icon"/>, <see cref="System.Windows.Forms.NotifyIcon.ContextMenu"/>, <see cref="System.Windows.Forms.NotifyIcon.Text"/> and <see cref="System.Windows.Forms.NotifyIcon.Visible"/> properties and handling the <see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event. A <see cref="System.Windows.Forms.ContextMenu"/> with a <see langword="Exit"/> item on it is
assigned to the <see cref="System.Windows.Forms.NotifyIcon.ContextMenu" qualify="true"/> property that allows the
user to close the application. When the NotifyIcon.<see cref="System.Windows.Forms.NotifyIcon.DoubleClick"/> event occurs, the application form is
activated by calling the <see cref="System.Windows.Forms.Form.Activate" qualify="true"/> method.</para>
			<codelink SampleID="System.Windows.Forms.NotifyIcon" SnippetID="1"/>
		</example>
	</doc>
</docs>
