<docs>
	<doc for="ComboBox.CreateParams">
		<summary>
     Returns the parameters needed to create the handle.  Inheriting classes
     can override this to provide extra functionality.  They should not,
     however, forget to call base.CreateParams() first to get the struct
     filled up with the basic info.
 </summary>
	</doc>
	<doc for="ComboBox.ChildWndProc">
		<summary>
     Subclassed window procedure for the edit and list child controls of the
     combo box.
 </summary>
	</doc>
	<doc for="ComboBox.DefChildWndProc">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.Finalize">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.Insert">
		<summary>
     Inserts an item into the combobox at the given index.
 </summary>
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.IsInputKey">
		<summary>
     Determines if keyData is in input key that the control wants.
     Overridden to return true for RETURN and ESCAPE when the combo box is
     dropped down.
 </summary>
	</doc>
	<doc for="ComboBox.RefreshItems">
		<summary>
 Reparses the objects, getting new text strings for them.
 </summary>
	</doc>
	<doc for="ComboBox.RefreshItem">
		<summary>
 Reparses the object at the given index, getting new text string for it.
 </summary>
	</doc>
	<doc for="ComboBox.ReleaseChildWindow">
		<summary>
     Release the ChildWindow object by un-subclassing the child edit and
     list controls and freeing the root of the ChildWindow object.
 </summary>
	</doc>
	<doc for="ComboBox.RemoveAt">
		<summary>
     Removes the given item from our internal array of items
 </summary>
	</doc>
	<doc for="ComboBox.ResetItemHeight">
		<summary>
     Resets the itemHeight property.
 </summary>
	</doc>
	<doc for="ComboBox.SendInsertMessage">
		<summary>
     Sends a CB_ADDSTRING or CB_INSERTSTRING message to the combo box. Since
     adding an item to the combo box may cause a WM_MEASUREITEM message to be
     sent, we need some special logic here to allow the WM_MEASUREITEM
     handler to do the actual updating of the items array. This is done so
     that the new item can be properly inserted into the items array before
     we fire the onMeasureItem event.
 </summary>
	</doc>
	<doc for="ComboBox.ShouldSerializeItemHeight">
		<summary>
     Indicates whether the itemHeight property should be persisted.
 </summary>
		<returns>
     whether the itemHeight property should be persisted.
 </returns>
	</doc>
	<doc for="ComboBox.UpdateDropDownHeight">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.UpdateItemHeight">
		<summary>
     Manufactures a MeasureItemEventArgs for each item in the list to simulate
     the combobox requesting the info. This gives the effect of allowing the
     measureitem info to be updated at anytime.
 </summary>
	</doc>
	<doc for="ComboBox.UpdateText">
		<summary>
     Forces the text to be updated based on the current selection.
 </summary>
	</doc>
	<doc for="ComboBox.WmEraseBkgnd">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.WmParentNotify">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.WmReflectCommand">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.WmReflectDrawItem">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.WmReflectMeasureItem">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.WndProc">
		<summary>
     The comboboxs window procedure.  Inheritng classes can override this
     to add extra functionality, but should not forget to call
     base.wndProc(m); to ensure the combo continues to function properly.
 </summary>
		<param name="m">
     A Windows Message Object.
 </param>
	</doc>
	<doc for="ComboBox.ChildWindow">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.ResetBackColor"><nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.ResetForeColor"><nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.ShouldSerializeBackColor"><nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.ShouldSerializeForeColor">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="Control.DefaultSize"><nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.OnParentBackColorChanged"><nodoc/>
		<summary>
   This method is called by the parent control when any property
   changes on the parent. This can be overriden by inheriting
   classes, however they must call base.OnParentPropertyChanged.
   </summary>
		<param name="e">
   Property change information.
   </param>
	</doc>
	<doc for="ComboBox.OnResize"><nodoc/>
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Resize"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For
      more information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
      When overriding
      <see cref="System.Windows.Forms.Control.OnResize"/> in a derived class, be sure to call the
      base class's <see cref="System.Windows.Forms.Control.OnResize"/> method.
      </note>
			<para>Inheriting classes should override this method to handle this event. Call
      base.onResize to send this event to any registered event listeners.</para>
		</remarks>
	</doc><doc for="ComboBox.OnDisplayMemberChanged"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.OnDataSourceChanged"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.ComboBox">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ComboBox"/> class.</para>
		</summary>
		<remarks>
		</remarks>
	</doc><doc for="ComboBox.DefaultSize"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.DrawItem">
		<summary>
			<para>Occurs when a visual aspect of an 
      owner-drawn <see cref="System.Windows.Forms.ComboBox"/> changes.</para>
		</summary>
		<remarks>
			<para>This event is used by an owner-drawn <see cref="System.Windows.Forms.ComboBox"/>. 
   You can use this event to perform the tasks needed to draw items in the <see cref="System.Windows.Forms.ComboBox"/> . If you have a variable sized item (when
   the <see cref="System.Windows.Forms.ComboBox.DrawMode"/>
   property set to <see cref="System.Windows.Forms.DrawMode.OwnerDrawVariable" qualify="true"/>), before drawing an item, the <see cref="System.Windows.Forms.ComboBox.MeasureItem"/> event is raised. You can create an event
   handler for the <see cref="System.Windows.Forms.ComboBox.MeasureItem"/> event to specify the size
   for the item that you are going to draw in your event handler for
   the <see cref="System.Windows.Forms.ComboBox.DrawItem"/>
   
   event. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="ComboBox.DropDownStyleChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.ComboBox.DropDownStyle"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="ComboBox.SetItemsCore">
		<nodoc/>
		<summary>
			<para>Performs the work of setting the specified items to the combobox</para>
		</summary>
	</doc><doc for="ComboBox.SelectedText">
		<summary>
			<para> Gets or sets the text that is selected in the editable 
      portion of a <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<value>
			<para>A string that represents the currently selected text in the combo box. 
      If <see cref="System.Windows.Forms.ComboBox.DropDownStyle"/> is set to <see cref="System.Windows.Forms.ComboBoxStyle.DropDownList" qualify="true"/>, the return is an empty string ("").</para>
		</value>
		<remarks>
			<para>You can assign text to this property to change the text 
      currently selected in the combo box. If no text is currently selected in the combo box, this
      property returns a zero-length string.</para>
		</remarks>
	</doc><doc for="ComboBox.SelectAll">
		<summary>
			<para>Selects all the text in the editable portion of the 
   <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
	</doc><doc for="Control.BackColor"><nodoc/>
		<summary>
		</summary>
		<value>
			<para>One of the Color values. The default is XXX.</para>
		</value>
	</doc><doc for="TextBoxBase.ForeColor"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.SetItemCore"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.ToString"><nodoc/>
		<summary>
   Provides some interesting info about this control in String form.
   </summary>
		<returns>
   String
   </returns>
	</doc><doc for="ComboBox.ObjectCollection.Clear">
		<summary>
			<para>Removes all items from the <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<remarks>
			<para>When you remove items from the list, all information 
      about the deleted items is lost. To remove a single item from the <see cref="System.Windows.Forms.ComboBox"/>,
      use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Remove"/> or <see cref="System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt"/>method.</para>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.Contains">
		<summary>
			<para>Determines if the specified item is located within the collection.</para>
		</summary>
		<param name="value">An object representing the item to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the item is located within the collection; 
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Contains"/> method enables you to 
   determine if an object is a member of the collection. Once you know that the
   item is located within the collection, you can use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.IndexOf"/> method to determine where the item is
   located within the collection.</para>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator that can be used to iterate through the item 
      collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> object that represents the item 
   collection.</para>
		</returns>
	</doc><doc for="ComboBox.ObjectCollection.IndexOf">
		<summary>
			<para>Retrieves the index within the collection of the specified item.</para>
		</summary>
		<param name="value">An object representing the item to locate in the collection.</param>
		<returns>
			<para>The zero-based index where the item is located within the collection;
      otherwise, -1.</para>
		</returns>
		<exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter was <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ComboBox.ObjectCollection.IndexOf"/> method enables you to
   determine where an item is located within the collection. To determine if an
   item is located within the collection before calling this method, use
   the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Contains"/> method.</para>
		</remarks>
	</doc><doc for="ComboBox.SelectionChangeCommitted">
		<summary>
			<para>Occurs when the selected item has changed and
      that change is committed.</para>
		</summary>
		<remarks>
			<para>You can create a <see cref="System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler
   to provide special handling for the <see cref="System.Windows.Forms.ComboBox"/> when the user changes the
   selected item in the list. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="ChildAccessibleObject">
		<summary>
		</summary>
	</doc><doc for="ChildAccessibleObject.ChildAccessibleObject">
		<summary>
		</summary>
	</doc><doc for="ChildAccessibleObject.Name">
		<summary>
		</summary>
	</doc><doc for="ComboBox.DroppedDown">
		<summary>
			<para> Gets or sets a value indicating whether the combo box is displaying its drop-down
      portion.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the drop-down portion is displayed; otherwise,
<see langword="false"/>. The default is false.</para>
		</value>
	</doc><doc for="ComboBox.IntegralHeight">
		<summary>
			<para>Gets or sets a value indicating whether the control should resize to avoid
      showing partial items.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the list 
   portion can contain only complete items; otherwise,
<see langword="false"/>. The default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>When this property is set to <see langword="true"/> , the control automatically resizes to
   ensure that an item is not partially displayed. If you want to maintain the
   original size of the <see cref="System.Windows.Forms.ComboBox"/> based on the space requirements of your
   form, set this property to <see langword="false"/>
   . If the <see cref="System.Windows.Forms.ComboBox"/> does not contain any
   items, this property has no effect. </para>
			<note type="note">
   If the <see cref="System.Windows.Forms.ComboBox.DrawMode"/> property is set to <see cref="System.Windows.Forms.DrawMode.OwnerDrawVariable" qualify="true"/>, this property has no effect.
   
</note>
		</remarks>
	</doc><doc for="ComboBox.MaxDropDownItems">
		<summary>
			<para> Gets or sets the maximum number of items to be shown
      in the drop-down portion of the <see cref="System.Windows.Forms.ComboBox"/>
      .</para>
		</summary>
		<value>
			<para>The maximum number of items of in the drop-down portion. The minimum for this
      property is 1 and the maximum is 100.</para>
		</value>
		<exception cref="T:System.ArgumentException"><para> The maxium number is set less than one or greater than 100.</para></exception>
	</doc><doc for="ComboBox.MaxLength">
		<summary>
			<para> Gets or sets the maximum number of characters allowed in the editable portion
      of a combo box.</para>
		</summary>
		<value>
			<para>The maximum number of characters the user can enter.
      Values of less than zero are reset to zero.</para>
		</value>
	</doc><doc for="ComboBox.PreferredHeight">
		<summary>
			<para>Gets the preferred height of the <see cref="System.Windows.Forms.ComboBox"/>.</para>
		</summary>
		<value>
			<para>The preferred height, in pixels, of the item area of the
      combo box.</para>
		</value>
		<remarks>
			<para> The preferred height is a value based on the font
      height and an adjustment for the border.</para>
		</remarks>
	</doc><doc for="ComboBox.SelectionLength">
		<summary>
			<para>Gets or sets the number of characters selected in the editable portion of the
      combo box.</para>
		</summary>
		<value>
			<para>The number of characters selected in the combo box.</para>
		</value>
		<exception cref="T:System.ArgumentException">The value was less than zero.</exception>
		<remarks>
			<para>You can use this property to determine whether any characters
      are currently selected in the combo box control before performing operations on
      the selected text. When the value of the <see cref="System.Windows.Forms.ComboBox.SelectionLength"/> property is set to a value that is larger
      than the number of characters within the text of the control, the value of
      the <see cref="System.Windows.Forms.ComboBox.SelectionLength"/> property is set to the entire length of
      text within the control minus the value of the <see cref="System.Windows.Forms.ComboBox.SelectionStart"/> property (if any value is
      specified for the <see cref="System.Windows.Forms.ComboBox.SelectionStart"/>
      property).</para>
		</remarks>
	</doc><doc for="ComboBox.SelectionStart">
		<summary>
			<para>Gets or sets the starting index of text selected in the combo box.</para>
		</summary>
		<value>
			<para>The zero-based index of the first character in the string of
      the current text selection.</para>
		</value>
		<exception cref="T:System.ArgumentException">The value is less than zero.</exception>
		<remarks>
			<para> If no text is selected in the control, this
      property indicates the insertion point for new text. If you set this property to
      a location beyond the length of the text in the control, the selection
      start position is placed after the last character. When text is selected in the
      text box control, changing this property can release the value of
      the <see cref="System.Windows.Forms.ComboBox.SelectionLength"/> property. If the remaining text in the
      control after the position indicated by the <see cref="System.Windows.Forms.ComboBox.SelectionStart"/> property is less than the value of
      the <see cref="System.Windows.Forms.ComboBox.SelectionLength"/> property, the value of the <see cref="System.Windows.Forms.ComboBox.SelectionLength"/> property is automatically decreased. The
      value of the <see cref="System.Windows.Forms.ComboBox.SelectionStart"/> property never causes an
      increase in the <see cref="System.Windows.Forms.ComboBox.SelectionLength"/>
      
      property.</para>
		</remarks>
	</doc><doc for="ComboBox.Sorted">
		<summary>
			<para>Gets or sets a value indicating whether the items in the combo box are sorted.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the combo box is sorted ; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<exception cref="T:System.ArgumentException">An attempt was made to sort a <see cref="System.Windows.Forms.ComboBox"/> that is attached to a data source.</exception>
		<remarks>
			<para>This property specifies whether the <see cref="System.Windows.Forms.ComboBox"/> sorts exisitng
   entries and add new entries to the appropriate sorted position in the
   list. You can use this property to automatically sort items in a <see cref="System.Windows.Forms.ComboBox"/>.
   As items are added to a sorted <see cref="System.Windows.Forms.ComboBox"/> , the items are moved to the appropriate
   location in the sorted list. When you set the property to
<see langword="false,"/> new items are added to the end of the existing list. 
   The sort is case-insensitive and in alphabetically ascending order.</para>
		</remarks>
	</doc><doc for="ComboBox.Text">
		<summary>
			<para>Gets or sets the text associated with this control.</para>
		</summary>
		<value>
			<para>The text associated with this control.</para>
		</value>
		<remarks>
			<para>When setting the <see cref="System.Windows.Forms.ComboBox.Text"/> property, <see langword="null"/> or an
   empty string("") sets the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> to -1.</para>
		</remarks>
	</doc><doc for="ComboBox.AddItemsCore">
		<summary>
			<para> Adds the specified items to the combo box.</para>
		</summary>
		<param name="value">An array of <see cref="System.Object"/> to append to the <see cref="System.Windows.Forms.ComboBox"/> . </param>
		<exception cref="T:System.ArgumentNullException">The value was <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ComboBox.AddItemsCore"/> method allows derived classes to
   provide special behavour when adding items. </para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.ComboBox.AddItemsCore"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.ComboBox.AddItemsCore"/>
   
   method.
</note>
		</remarks>
	</doc><doc for="ComboBox.FindString1">
		<summary>
			<para>Finds the first item after the given index which starts with the given
      string. The search is not case sensitive.</para>
		</summary>
		<param name="s">The <see cref="System.String"/> to search for. </param>
		<param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
		<returns>
			<para> The zero-based index of the first item found;
      returns -1 if no match is found.</para>
		</returns>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The <paramref name="startIndex"/> is less than -1.</para>
			<para>-or-</para>
			<para>The <paramref name="startIndex"/> is greater than the last index in the collection. </para></exception>
		<remarks>
			<para> The search performed by this method is not
      case-sensitive. The <paramref name="s"/>
      parameter is a substring to compare against the text associated with the items in
      the combo box list. The search performs a partial match starting from the beginning
      of the text, returning the first item in the list that matches the specified
      substring. You can then perform tasks, such as removing the item that contains
      the search text using the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Remove"/> method or changing
      the item's text. This method is typically used after a call has been made using
      the version of this method that does not specify a starting index. Once an
      initial item has been found in the list, this method is typically used to find
      further instances of the search text by specifying the index position in the
   <paramref name="startIndex"/> parameter of the item after the first found instance of the
      search text. If you want to perform a search for an exact word match instead of
      a partial match, use the <see cref="System.Windows.Forms.ComboBox.FindStringExact"/> method.</para>
		</remarks>
	</doc><doc for="ComboBox.FindStringExact">
		<overload>
			<para> Finds the item that exactly matches the specified string.</para>
		</overload>
		<summary>
			<para>Finds the first item in the combo box that matches
      the specified string.</para>
		</summary>
		<param name="s">The <see cref="System.String"/> to search for. </param>
		<returns>
			<para> The zero-based index of the first item found;
      returns -1 if no match is found.</para>
		</returns>
		<remarks>
			<para> The search performed by this method is not
      case-sensitive. The <paramref name="s"/> parameter is a string to compare against the
      text associated with the items in the combo box list. The search looks
      for a match starting from the beginning of the text, returning the first
      item in the list that matches the specified substring. You can then perform
      tasks, such as removing the item that contains the search text using the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Remove"/> method or changing
      the item's text. Once you have found the specified text, if you want to search
      for other instances of the text in the <see cref="System.Windows.Forms.ComboBox"/>, you must use the version
      of the <see cref="System.Windows.Forms.ComboBox.FindStringExact"/> method that provides a parameter
      for specifying a starting index within the <see cref="System.Windows.Forms.ComboBox"/>. If you want to perform
      partial word search instead of an exact word match, use the <see cref="System.Windows.Forms.ComboBox.FindString"/>
      
      method. </para>
		</remarks>
	</doc><doc for="ComboBox.FindStringExact1">
		<summary>
			<para>Finds the first item after the specified index that
      matches the specified string.</para>
		</summary>
		<param name="s">The <see cref="System.String"/> to search for. </param>
		<param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
		<returns>
			<para> The zero-based index of the first item found;
      returns -1 if no match is found.</para>
		</returns>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The <paramref name="startIndex"/> is less than -1.</para>
			<para>-or-</para>
			<para>The <paramref name="startIndex"/> is greater than the last index in the collection. </para></exception>
		<remarks>
			<para> The search performed by this method is not
      case-sensitive. The <paramref name="s"/> parameter is a string to compare against the
      text associated with the items in the combo box list. The search looks
      for a match starting from the beginning of the text, returning the first
      item in the list that matches the specified substring. You can then perform
      tasks, such as removing the item that contains the search text using the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Remove"/> method or changing
      the item's text. This method is typically used after a call has been made using
      the version of this method that does not specify a starting index. Once an
      intial item has been found in the list, this method is typically used to find
      further instances of the search text by specifying the index position in the
   <paramref name="startIndex"/> parameter of the item after the first found instance of the
      search text. If you want to perform partial word search instead of an exact word
      match, use the <see cref="System.Windows.Forms.ComboBox.FindString"/> method.</para>
		</remarks>
	</doc><doc for="ComboBox.OnDropDown">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.ComboBox.DropDown"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data. </param>
		<remarks>
			<para> This event is raised each time the drop-down is displayed.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnDropDown"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnDropDown"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnDropDown"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
	</doc><doc for="ComboBox.OnSelectionChangeCommitted">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data. </param>
		<remarks>
			<para> This event is raised when a new item is selected and that change to
      that item is completed. This event is also raised when you set <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/>.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnSelectionChangeCommitted"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnSelectionChangeCommitted"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnSelectionChangeCommitted"/> method so that
   registered delegates receive the event.
</note>
		</remarks>
	</doc><doc for="ComboBox.OnDropDownStyleChanged">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.ComboBox.DropDownStyleChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data. </param>
		<remarks>
			<para>This event is raised when you set <see cref="System.Windows.Forms.ComboBox.DropDownStyle"/> to a new value.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnDropDownStyleChanged"/> method also allows derived
classes to handle the event without attaching a delegate. This is the preferred
technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnDropDownStyleChanged"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnDropDownStyleChanged"/> method so that
   registered delegates receive the event.
</note>
		</remarks>
	</doc><doc for="ComboBox.ShouldSerializeText">
		<summary>
			<para>Determines whether the <see cref="System.Windows.Forms.ComboBox.Text"/> property needs to be persisted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Windows.Forms.ComboBox.Text"/> property value has
   changed from its default; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>For the <see cref="System.Windows.Forms.ComboBox.ShouldSerializeText"/> 
method to return <see langword="true"/> the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> property must have a value of -1.</para>
		</remarks>
	</doc><doc for="ComboBox.DropDown">
		<summary>
			<para>Occurs when the drop-down portion of a <see cref="System.Windows.Forms.ComboBox"/> is shown.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="ComboBox.Select">
		<overload>
			<para>Selects a range of text.</para>
		</overload>
		<summary>
			<para>Selects a range of text in the editable portion of the <see cref="System.Windows.Forms.ComboBox"/>.</para>
		</summary>
		<param name="start">The position of the first character in the current text selection within the text box. </param>
		<param name="length">The number of characters to select.</param>
		<exception cref="T:System.ArgumentException"><para>The <paramref name="start"/> is less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="length"/> is less than zero.</para></exception>
		<remarks>
			<para>If you want to set the start position to the first
      character in the control's text, set the <paramref name="start"/> parameter to zero. You can
      use this method to select a substring of text, such as when searching through
      the text of the control and replacing information.</para>
		</remarks>
	</doc><doc for="ComboBox.BackColor"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.ForeColor"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.OnSelectedIndexChanged"><nodoc/>
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ComboBox.SelectedIndexChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data. </param>
		<remarks>
			<para>This event is raised when you select a new item from the list. This event is
      raised when you set <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/>.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnSelectedIndexChanged"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnSelectedIndexChanged"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnSelectedIndexChanged"/> method so that
   registered delegates receive the event.
</note>
		</remarks>
	</doc><doc for="ComboBox.SelectedItem">
		<summary>
			<para>Gets or sets currently selected item in the <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<value>
			<para>The object that is the currently selected item or <see langword="null"/>
if there is no currently selected item.</para>
		</value>
		<remarks>
			<para>When you set the <see cref="System.Windows.Forms.ComboBox.SelectedItem"/> property to an object, the <see cref="System.Windows.Forms.ComboBox"/> attempts to make that object the currently selected one in the list. If the object
   is found in the list, it is displayed in the edit portion of the <see cref="System.Windows.Forms.ComboBox"/>
   and the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> property is set to the corresponding
   index. If the object does not exist in the list the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/>
   property is left at its current
   value.</para>
		</remarks>
		<example>
			<para>The following example illustrates the usage of the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> and the <see cref="System.Windows.Forms.ComboBox.SelectedItem"/> properties. The example is part of a 
   runnable code sample in the <see cref="System.Windows.Forms.ComboBox"/> class overview.</para>
			<codelink SampleID="ComboBox" SnippetID="5"/>
		</example>
	</doc><doc for="ComboBox.BeginUpdate">
		<summary>
			<para>Maintains performance when items are added to
      the <see cref="System.Windows.Forms.ComboBox"/> one at a time.</para>
		</summary>
		<remarks>
			<para> This method prevents the control from painting until
      the <see cref="System.Windows.Forms.ComboBox.EndUpdate"/>
      method is called.</para>
			<para>The preferred way to add items to the <see cref="System.Windows.Forms.ComboBox"/>
is to use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.AddRange"/> method of the <see cref="System.Windows.Forms.ComboBox.ObjectCollection"/> class (through the <see cref="System.Windows.Forms.ComboBox.Items"/> property of the <see cref="System.Windows.Forms.ComboBox"/>).
This enables you to add an array of items to the list at one time. However, if
you want to add items one at a time using the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ComboBox.ObjectCollection"/> class, you can use the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> method to prevent the control from
repainting the <see cref="System.Windows.Forms.ComboBox"/> each time an item is added to the list.
Once you have completed the task of adding items to the list, call
the <see cref="System.Windows.Forms.ComboBox.EndUpdate"/> method to enable the <see cref="System.Windows.Forms.ComboBox"/>
to repaint. This way of adding items can prevent flicker during the drawing of
the <see cref="System.Windows.Forms.ComboBox"/>
when a large number of items
are being added to the list.</para>
		</remarks>
		<example>
			<para>The following example illustrates the usage of
      the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ComboBox.EndUpdate"/>
      methods. The example is part of a runnable code sample in the <see cref="System.Windows.Forms.ComboBox"/>
      class overview. </para>
			<codelink SampleID="ComboBox" SnippetID="3"/>
		</example>
	</doc><doc for="ComboBox.EndUpdate">
		<summary>
			<para>Resumes painting the <see cref="System.Windows.Forms.ComboBox"/>
control after painting is suspended by the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> method.</para>
		</summary>
		<remarks>
			<para>The preferred way to add items to the <see cref="System.Windows.Forms.ComboBox"/> is to use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.AddRange"/> method of the <see cref="System.Windows.Forms.ComboBox.ObjectCollection"/> class
   (through the <see cref="System.Windows.Forms.ComboBox.Items"/>
   property of the
<see cref="System.Windows.Forms.ComboBox"/>). This enables 
   you to add an array of items to the list at one time. However, if you want to
   add items one at a time using the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/> method of the <see cref="System.Windows.Forms.ComboBox.ObjectCollection"/> class, you can use the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/>
   method to prevent the control from repainting the <see cref="System.Windows.Forms.ComboBox"/> each time an
   item is added to the list. Once you have completed the task of adding items to
   the list, call the <see cref="System.Windows.Forms.ComboBox.EndUpdate"/>
   method to enable the <see cref="System.Windows.Forms.ComboBox"/>
   to repaint. This way of adding items can prevent flickered drawing of
   the <see cref="System.Windows.Forms.ComboBox"/> when a large number of items are being
   added to the list.</para>
		</remarks>
		<example>
			<para>The following example illustrates the usage of the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ComboBox.EndUpdate"/> 
methods. The example is part of a runnable code sample in the <see cref="System.Windows.Forms.ComboBox"/>
class overview.</para>
			<codelink SampleID="ComboBox" SnippetID="3"/>
		</example>
	</doc><doc for="ComboBox.FindString">
		<overload>
			<para>Finds the first item in the <see cref="System.Windows.Forms.ComboBox"/>
that starts with the specified string.</para>
		</overload>
		<summary>
			<para> Finds the first item in the combo box
      that starts with the specified string.</para>
		</summary>
		<param name="s">The <see cref="System.String"/> to search for. </param>
		<returns>
			<para>The zero-based index of the first item found; returns -1 if no match is
      found.</para>
		</returns>
		<remarks>
			<para> The search performed by this method is not
      case-sensitive. The <paramref name="s"/>
      parameter is a substring to compare against the text associated with the items in the combo box list.
      The search performs a partial match starting from the beginning of the text, and
      returning the first item in the list that matches the specified substring. You can
      then perform tasks, such as removing the item that contains the search text using
      the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Remove"/> method or changeing the
      item's text. Once you have found the specified text, if you want to search for
      other instances of the text in the <see cref="System.Windows.Forms.ComboBox"/> , you must use the version
      of the <see cref="System.Windows.Forms.ComboBox.FindString"/> method that provides a parameter for
      specifying a starting index within the <see cref="System.Windows.Forms.ComboBox"/>. If you want to perform a
      search for an exact word match instead of a partial match, use the <see cref="System.Windows.Forms.ComboBox.FindStringExact"/> method.</para>
		</remarks>
		<example>
			<para>The following example illustrates the usage of the <see cref="System.Windows.Forms.ComboBox.FindString"/> method and <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> property. The example is part of a 
   runnable code sample in the <see cref="System.Windows.Forms.ComboBox"/> class overview.</para>
			<codelink SampleID="ComboBox" SnippetID="4"/>
		</example>
	</doc><doc for="ComboBox.ObjectCollection.ObjectCollection">
		<summary>
			<para>Initializes a new instance of <see cref="System.Windows.Forms.ComboBox.ObjectCollection" qualify="true"/> .</para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.ComboBox"/> that owns this object collection.</param>
		<remarks>
			<para>An instance of this class cannot be created without associating it with
      a <see cref="System.Windows.Forms.ComboBox"/> control.</para>
		</remarks>
	</doc><doc for="ComboBox.Dispose">
		<nodoc/>
		<summary>
		</summary>
	</doc><doc for="ComboBox.SelectedIndexChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> property has changed.</para>
		</summary>
		<remarks>
			<para>You can create an event handler for this event to
      determine when the selected index in the <see cref="System.Windows.Forms.ComboBox"/> has been changed. This
      can be useful when you need to display information in other controls based on
      the current selection in the <see cref="System.Windows.Forms.ComboBox"/>
      
      . You can use the event handler for this event to load the information
      in the other controls.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc><doc for="ComboBox.OnSelectedItemChanged">
		<nodoc/>
		<summary>
			<para> Raises the SelectedItemChanged event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data. </param>
		<remarks>
			<para> This event is raised when you select a new item from the
      list. This event is raised when you set <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/>.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnSelectedItemChanged"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnSelectedItemChanged"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnSelectedItemChanged"/> method so that
   registered delegates receive the event.
</note>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.Count">
		<summary>
			<para>Gets the number of items in the collection.</para>
		</summary>
		<value>
			<para> The number of items in the collection.</para>
		</value>
		<remarks>
   This property enables you to determine the number of items in the <see cref="System.Windows.Forms.ComboBox"/>. You
   can use this value when looping through the values of the collection.
</remarks>
	</doc><doc for="ComboBox.ObjectCollection.IsReadOnly">
		<summary>
			<para> Gets a value indicating whether this collection can be modified.</para>
		</summary>
		<value>
			<para>Always <see langword="false"/>.</para>
		</value>
	</doc><doc for="ComboBox.ObjectCollection.AddRange">
		<summary>
			<para>Adds an array of items to the list of items for a <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<param name="items">An array of objects to add to the list.</param>
		<exception cref="T:System.ArgumentNullException">An item in the <paramref name="items"/> parameter was <see langword="null"/>.</exception>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.ComboBox.Sorted"/> property of
   the <see cref="System.Windows.Forms.ComboBox"/> is set to true, the items are inserted
   into the list alphabetically. Otherwise, the items are inserted in the order
   they occur within the array. This method is typically passed an array
   of <see cref="System.String"/> objects, but an array of any type of object can be
   passed to this method. When an object is added to the collection, the method
   calls the object's <see cref="System.Object.ToString"/> method to obtain the string to display in
   the list. When using this method to add items to the collection, you do not need
   to call the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ComboBox.EndUpdate"/> methods to optimize performance.</para>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.this">
		<summary>
			<para>Retrieves the item at the specified index within the collection.</para>
		</summary>
		<param name="index">The index of the item in the collection to retrieve. </param>
		<value>
			<para>An object representing the item located at the specified index within the collection.</para>
		</value>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The index was less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="index"/> was greater than the count of items in the collection.</para></exception>
		<remarks>
			<para>You can use this method to obtain the item at the
      specified location within the collection. You can use <see cref="System.Windows.Forms.ComboBox.ObjectCollection.IndexOf"/> to find the location of an item, or you can
      use the index return from the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/> method.</para>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.CopyTo">
		<summary>
			<para>Copies the entire collection into an existing array of objects at a specified location within the array.</para>
		</summary>
		<param name="dest">The object array to copy the collection to.</param>
		<param name=" arrayIndex">The location in the destination array to copy the collection to. </param>
		<remarks>
			<para>You can use this method to combine the items from multiple collections into a 
      single array. You can then use this array to populate the contents of another
   <see cref="System.Windows.Forms.ComboBox"/> control using the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.AddRange"/> method of the 
   <see cref="System.Windows.Forms.ComboBox.ObjectCollection"/> class.</para>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.Insert">
		<summary>
			<para>Inserts an item into the collection at the specified index.</para>
		</summary>
		<param name="index">The zero-based index location where the item is inserted.</param>
		<param name="item">An object representing the item to insert.</param>
		<returns>
			<para>The zero-based index of the newly added item.</para>
		</returns>
		<exception cref="ArgumentNullException">The <paramref name="item"/> was <see langword="null"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><para>The <paramref name="index"/> was less than zero. </para>
			<para>-or-</para>
			<para>The <paramref name="index"/> was greater than the count of items in the collection.</para></exception>
		<remarks>
			<para> 
      If the <see cref="System.Windows.Forms.ComboBox.sorted"/> property of the
   <see cref="System.Windows.Forms.ComboBox"/> is
      true, the <paramref name="index"/> parameter is ignored. When an
      object is added to the collection, the <see cref="System.Windows.Forms.ComboBox"/> calls the
      object's <see cref="System.Object.ToString"/>
      
      method is to obtain the string to display in the list.</para>
		</remarks>
	</doc><doc for="ComboBox.ObjectCollection.RemoveAt">
		<summary>
			<para>Removes an item from the <see cref="System.Windows.Forms.ComboBox"/> at the specified index.</para>
		</summary>
		<param name="index">The index of the item to remove. </param>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The <paramref name="value"/> parameter was less than zero. </para>
			<para>-or-</para>
			<para>The <paramref name="value"/> parameter was greater than or equal to the count of items in the collection.</para></exception>
	</doc><doc for="ComboBox.ObjectCollection.Remove">
		<summary>
			<para>Removes the specified item from the <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<param name="value">The <see cref="System.Object"/> to remove from the list. </param>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The <paramref name="value"/> parameter was less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="value"/> parameter was greater than or equal to the count of items in the collection.</para></exception>
	</doc>
	<doc for="ComboBox.ObjectCollection.Add">
		<summary>
			<para>Adds an item to the list of items for a <see cref="System.Windows.Forms.ComboBox"/>.</para>
		</summary>
		<param name="item">An object representing the item to add to the collection.</param>
		<returns>
			<para>The zero-based index of the item in the collection.</para>
		</returns>
		<exception cref="T:System.ArgumentNullException">The <paramref name="item"/> parameter was <see langword="null"/>.</exception>
		<remarks>
			<para>This method adds an item to the combo box. If
      the <see cref="System.Windows.Forms.ComboBox.Sorted"/> property of the <see cref="System.Windows.Forms.ComboBox"/> is
      set to <see langword="true"/>
      
      , the item is inserted into the
      list alphabetically. Otherwise, the item is inserted at the end of the
      list.</para>
			<para> A visual representation of the item is displayed in
      the combo box. This content representation is specified by
      the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property. If the <see cref="System.Windows.Forms.ListControl.DisplayMember"/>
      property is <see langword="null"/> , the item's <see langword="ToString"/> method is called to obtain the string
      that is displayed in the combo box; otherwise, the property of the stored object
      as specified by the <see cref="System.Windows.Forms.ListControl.DisplayMember"/> property is displayed. A
   <see cref="System.SystemException"/> occurs if there is insufficient space available
      to store the new item. To add a set of items to the combo box it is best to use
      the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.AddRange"/> method. If you
      choose to use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/>
      
      method to add a number of items to the combo box, use
      the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> method to suspend repainting during your add
      and the <see cref="System.Windows.Forms.ComboBox.EndUpdate"/> method to resume repainting. You
      can use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Insert"/>
      method to specify the location in the list where an item is added. When an
      object is added to the collection, the <see cref="System.Windows.Forms.ComboBox"/> calls the object's <see cref="System.Object.ToString"/>
      
      method to obtain the string to display in the
      list.</para>
		</remarks>
	</doc><doc for="ObjectCollection.ICollection.SyncRoot">
		<summary>
		</summary>
	</doc>
	<doc for="ObjectCollection.ICollection.IsSynchronized">
		<summary>
		</summary>
	</doc>
	<doc for="ObjectCollection.IList.IsFixedSize">
		<summary>
		</summary>
	</doc>
	<doc for="ObjectCollection.IList.Add">
		<summary>
		</summary>
	</doc>
	<doc for="ObjectCollection.ICollection.CopyTo">
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.DrawMode">
		<summary>
			<para> Gets or sets a value indicating whether your code
      or the operating system will handle drawing of elements in the list.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DrawMode"/> enumeration values. The default is <see cref="System.Windows.Forms.DrawMode.Normal" qualify="true"/>.</para>
		</value>
		<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not a valid <see cref="System.Windows.Forms.DrawMode"/> enumeration value.</exception>
		<seealso cref="System.Windows.Forms.DrawMode"/>
		<seealso cref="System.Windows.Forms.ComboBox.DrawItem"/>
		<seealso cref="System.Windows.Forms.ComboBox.MeasureItem"/>
	</doc>
	<doc for="ComboBox.Focused"><nodoc/>
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Windows.Forms.ComboBox"/> has focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this control has focus;
   otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ComboBox.SetBoundsCore"><nodoc/>
		<summary>
			<para>Sets the size and location of the <see cref="System.Windows.Forms.ComboBox"/>
.</para>
		</summary>
		<param name="x">The horizontal location in pixels of the control. </param>
		<param name="y">The vertical location in pixels of the control. </param>
		<param name="width">The width in pixels of the control. </param>
		<param name="height">The height in pixels of the control. </param>
		<param name="specified">One of the <see cref="System.Windows.Forms.BoundsSpecified"/> values. </param>
	</doc>
	<doc for="ComboBox.DropDownWidth">
		<summary>
			<para> Gets or sets the width of the of the drop-down portion of a combo box.</para>
		</summary>
		<value>
			<para> The width, in pixels, of the drop-down box.</para>
		</value>
		<exception cref="T:System.ArgumentException">The specified value is less than one.</exception>
		<remarks>
			<para> If a value has not been set for the <see cref="System.Windows.Forms.ComboBox.DropDownWidth"/>
, this property returns the <see cref="System.Windows.Forms.Control.Width"/> of the combo box.</para>
			<note type="note">
   The width of the
   drop-down cannot be smaller than the <see cref="System.Windows.Forms.ComboBox"/>
   width.
</note>
		</remarks>
	</doc>
	<doc for="ComboBox.DropDownStyle">
		<summary>
			<para> Gets or sets a value specifying the style
      of the combo box.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ComboBoxStyle"/> values. The default is
<see cref="System.Windows.Forms.ComboBoxStyle.DropDown" qualify="true"/> 
.</para>
		</value>
		<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="System.Windows.Forms.ComboBoxStyle"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ComboBox.DropDownStyle"/> property controls the
   interface that is presented to the user. You can enter a value that allows for a simple
   drop-down list box, where the list always displays, a drop-down list box, where the
   text portion is not editable and you must select an arrow to view the drop-down, or
   the default drop-down list box, where the text portion is editable and the user must press
   the arrow key to view the list. To always display a list that the user cannot edit,
   use a <see cref="System.Windows.Forms.ListBox"/>
   control. </para>
		</remarks>
	</doc>
	<doc for="ComboBox.MeasureItem">
		<summary>
			<para> Occurs each time an owner-drawn <see cref="System.Windows.Forms.ComboBox"/> item needs to be drawn and when the sizes
   of the list items are determined.</para>
		</summary>
		<remarks>
			<para> You can create an event handler for this event to specify the size an
      item is made before it is drawn in the <see cref="System.Windows.Forms.ComboBox.DrawItem"/> event.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="ComboBox.ItemHeight">
		<summary>
			<para>Gets or sets the height of an item in the combo box.</para>
		</summary>
		<value>
			<para>The height, in pixels, of an item in the combo box.</para>
		</value>
		<exception cref="T:System.ArgumentException">The item height value is less than zero.</exception>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.ComboBox.DrawMode"/> property is set to <see cref="System.Windows.Forms.DrawMode.OwnerDrawFixed" qualify="true"/>, all items have the same height. When
   the <see cref="System.Windows.Forms.DrawMode"/> property is set to <see cref="System.Windows.Forms.DrawMode.OwnerDrawVariable" qualify="true"/>, the <see cref="System.Windows.Forms.ComboBox.ItemHeight"/> property specifies the height of each item
   added to the <see cref="System.Windows.Forms.ComboBox"/>. Because each item in an owner-drawn list
   can have a different height, you can use the <see cref="System.Windows.Forms.ComboBox.GetItemHeight"/> method to get the height of a specific
   item in the <see cref="System.Windows.Forms.ComboBox"/>. If you use the <see cref="System.Windows.Forms.ComboBox.ItemHeight"/> property on a <see cref="System.Windows.Forms.ComboBox"/>
   with items of variable height, this property returns the height of the first item
   in the control.</para>
			<para>For more information on specifying the height for items in an owner-drawn 
   list, see <see cref="System.Windows.Forms.ComboBox.MeasureItem"/> event.</para>
		</remarks>
	</doc>
	<doc for="ComboBox.GetItemHeight">
		<summary>
			<para>Returns the height of an item in the <see cref="System.Windows.Forms.ComboBox"/>.</para>
		</summary>
		<param name="index">The index of the item to return the height of. </param>
		<returns>
			<para> The height, in pixels, of the item at the specified index.</para>
		</returns>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The <paramref name="index"/> is less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="index"/> is greater than count of items in the list.</para></exception>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.ComboBox.DrawMode"/> property is not set to
<see cref="System.Windows.Forms.DrawMode.OwnerDrawVariable" qualify="true"/> , the 
   value of the <paramref name="index"/> parameter
   is ignored because all items in a standard <see cref="System.Windows.Forms.ComboBox"/> are the same size.
   You can use this property when you are using an owner-drawn <see cref="System.Windows.Forms.ComboBox"/>
   to determine the size of any item within the <see cref="System.Windows.Forms.ComboBox"/>
   
   .</para>
			<para>For more information on specifying the height for items in an owner-drawn 
   list, see <see cref="System.Windows.Forms.ComboBox.MeasureItem"/> event.</para>
		</remarks>
	</doc>
	<doc for="ComboBox.OnDrawItem">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.ComboBox.DrawItem"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.DrawItemEventArgs"/>that contains the event data. </param>
		<remarks>
			<para>This method is called each time an owner-drawn <see cref="System.Windows.Forms.ComboBox"/> item needs to
   be drawn and after <see cref="System.Windows.Forms.ComboBox.OnMeasureItem"/> is
   called. For more information, see <see cref="System.Windows.Forms.ComboBox.DrawItem"/> .</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnDrawItem"/> method also allows derived
classes to handle the event without attaching a delegate. This is the preferred
technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnDrawItem"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnDrawItem"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.DrawItemEventArgs"/>
		<seealso cref="System.Windows.Forms.ComboBox.DrawItem"/>
	</doc>
	<doc for="ComboBox.OnMeasureItem">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.ComboBox.MeasureItem"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.Windows.Forms.MeasureItemEventArgs"/> that was raised. </param>
		<remarks>
			<para>This method is called each time an owner-drawn <see cref="System.Windows.Forms.ComboBox"/>
item needs to be drawn and before <see cref="System.Windows.Forms.ComboBox.OnDrawItem"/> is called. For more information,
see <see cref="System.Windows.Forms.ComboBox.MeasureItem"/> .</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ComboBox.OnMeasureItem"/> method also allows derived
classes to handle the event without attaching a delegate. This is the preferred
technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.ComboBox.OnMeasureItem"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.ComboBox.OnMeasureItem"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.MeasureItemEventArgs"/>
		<seealso cref="System.Windows.Forms.ComboBox.MeasureItem"/>
	</doc>
	<doc for="ComboBox.Items">
		<summary>
			<para> Gets an object representing the collection of the items
      contained in this <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ComboBox.ObjectCollection" qualify="true"/> representing the items in the <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</value>
		<remarks>
			<para>This property enables you to obtain a reference to the list of items that are
      currently stored in the <see cref="System.Windows.Forms.ComboBox"/>. With this reference, you can add items,
      remove items, and obtain a count of the items in the collection. For more
      information on the tasks that can be performed with the item collection, see
      the <see cref="System.Windows.Forms.ComboBox.ObjectCollection" qualify="true"/> class reference topics.</para>
		</remarks>
		<example>
			<codelink SampleID="ComboBox" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ComboBox.ObjectCollection">
		<summary>
			<para>Represents the collection of items in a <see cref="System.Windows.Forms.ComboBox"/> .</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ComboBox.ObjectCollection" qualify="true"/> class encapsulates the items in the
<see cref="System.Windows.Forms.ComboBox"/> . The object collection of a 
   combo box can be used to manage many types of objects, including strings,
   images, and custom business objects.</para>
			<para>You can add items to the collection in several ways.
   The <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/> method adds one object to the
   collection. To add a number of objects to the collection, it is best to create
   an array of items and assign with the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.AddRange"/> method. To insert an object at a
   specific location within the collection, you can use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Insert"/> method. To remove items at a known index
   in the collection you can use either the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Remove"/> method or the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt"/> method. The <see cref="System.Windows.Forms.ComboBox"/>
   method removes all the items from the collection.</para>
			<para>In addition to methods and properties for adding and
   removing items, the <see cref="System.Windows.Forms.ComboBox.ObjectCollection" qualify="true"/> also provides methods to find items within
   the collection. The <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Contains"/> method enables you to determine if an
   object is a member of the collection. Once you know that the item is located
   within the collection, you can use the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.IndexOf"/> method to determine where the item is
   located within the collection.</para>
		</remarks>
	</doc>
	<doc for="ComboBox.OnSelectedValueChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComboBox">
		<summary>
			<para> Represents a
      Windows combo box control.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Windows.Forms.ComboBox"/> displays an editing field combined with a
<see cref="System.Windows.Forms.ListBox"/> , allowing the user to select from the 
   list or to enter new text. The default behaviour of <see cref="System.Windows.Forms.ComboBox"/>
   displays an
   edit field with a hidden drop-down list. The <see cref="System.Windows.Forms.ComboBox.DropDownStyle"/> property determines
   the style of combo box to display. You can enter a value that allows
   for a simple drop-down, where the list always displays, a drop-down list box,
   where the text portion is not editable and you must select an arrow to
   view the drop-down list box, or the default drop-down list
   box, where the text portion is editable and the user must press the arrow key to view the list.
   To always display a list that the user cannot edit, use a <see cref="System.Windows.Forms.ListBox"/>
   control.</para>
			<para>To add objects to the list at run time, assign an array
   of object references with the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.AddRange"/> method. The list then displays the default
   string value for each object. You can add individual objects with
   the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/>
   
   method.</para>
			<para>In addition to display and selection functionality, the <see cref="System.Windows.Forms.ComboBox"/>
also provides features that enable you to efficiently add items to the <see cref="System.Windows.Forms.ComboBox"/>
and to find text within the items of the list. The <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ComboBox.EndUpdate"/>
methods enable you to add a large number of items to the <see cref="System.Windows.Forms.ComboBox"/>
without the control being repainted each time an item is
added to the list. The <see cref="System.Windows.Forms.ComboBox.FindString"/> and <see cref="System.Windows.Forms.ComboBox.FindStringExact"/> methods enable you to search for
an item in the list that contains a specific search string.</para>
			<para>You can use these properties to manage the currently selected
   item in the list, the <see cref="System.Windows.Forms.ComboBox.Text"/> property
   to specify the string displayed in the editing field, the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> property to get or
   set the current item, and the <see cref="System.Windows.Forms.ComboBox.SelectedItem"/> property to
   get or set a reference to
   the object.</para>
		</remarks>
		<example>
			<para>The following example is a complete application illustrating how you can use
      the <see cref="System.Windows.Forms.ComboBox.ObjectCollection.Add"/> method to add items to a <see cref="System.Windows.Forms.ComboBox"/>,
      the <see cref="System.Windows.Forms.ComboBox.FindString"/> method to find items
      in a <see cref="System.Windows.Forms.ComboBox"/>, and the <see cref="System.Windows.Forms.ComboBox.BeginUpdate"/> and <see cref="System.Windows.Forms.ComboBox.EndUpdate"/> methods to add a large number items
      to a <see cref="System.Windows.Forms.ComboBox"/> in an efficient manner.
      </para>
			<codelink SampleID="ComboBox" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ComboBox.BackgroundImage"><hideinheritance/>
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ComboBox.BackgroundImageChanged">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComboBox.OnPaint">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
	</doc>
	<doc for="ComboBox.OnBackColorChanged">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Indicates that a critical property, such as color or font has
      changed.</para>
		</summary>
	</doc>
	<doc for="ComboBox.OnFontChanged">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Indicates that a critical property, such as color or font has
      changed.</para>
		</summary>
	</doc>
	<doc for="ComboBox.OnForeColorChanged">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Indicates that a critical property, such as color or font has
      changed.</para>
		</summary>
	</doc>
	<doc for="ComboBox.OnHandleCreated">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Overridden to make sure all the items and styles get set up correctly.
      Inheriting classes should not forget to call
      base.OnHandleCreated()</para>
		</summary>
	</doc>
	<doc for="ComboBox.OnHandleDestroyed">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>We need to un-subclasses everything here. Inheriting classes should
      not forget to call base.OnHandleDestroyed()</para>
		</summary>
	</doc>
	<doc for="ComboBox.OnKeyPress">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Key press event handler. Overridden to close up the combo box when the
      user presses RETURN or ESCAPE.</para>
		</summary>
	</doc>
	<doc for="ComboBox.SelectedIndex">
		<summary>
			<para>Gets or sets the index specifying the currently selected item.</para>
		</summary>
		<value>
			<para>A zero-based index of the currently selected item. A value of negative one
      (-1) is returned if no item is selected. </para>
		</value>
		<exception cref="T:System.ArgumentOutOfRangeException"><para>The specified index is less than or equal to -2.</para>
			<para>-or-</para>
			<para>The specified index is greater than or equal to the number of items in the combo box.</para></exception>
		<remarks>
			<para>This property indicates the zero-based index of the currently selected
      item in the combo box list. Setting a new index raises the <see cref="System.Windows.Forms.ComboBox.SelectedIndexChanged"/> event.</para>
			<note type="note">
      To deselect the currently selected item, set the <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> to -1.
      
   </note>
		</remarks>
		<example>
			<para>The following example illustrates the usage of the <see cref="System.Windows.Forms.ComboBox.FindString"/> method and <see cref="System.Windows.Forms.ComboBox.SelectedIndex"/> property. The example is part of a
   runnable code sample in the <see cref="System.Windows.Forms.ComboBox"/> class overview.</para>
			<codelink SampleID="ComboBox" SnippetID="4"/>
		</example>
	</doc>
</docs>
