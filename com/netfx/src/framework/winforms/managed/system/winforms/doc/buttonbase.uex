<docs>
	<doc for="ButtonBase.isDefault">
		<summary>
			<para>
       Specifies
       whether a button control is the default button.
       
    </para>
		</summary>
		<remarks>
			<para>
       If <see langword="true"/>
       the button control appears as the default button on the parent form; if
    <see langword="false"/> 
    the
    button control appears normally.
 </para>
		</remarks>
	</doc>
	<doc for="ButtonBase.inButtonUp">
		<summary>
     Whether we are already handling a mouse up event.
 </summary>
	</doc>
	<doc for="ButtonBase.flatStyle">
		<summary>
			<para>
			</para>
			<para>
       This field is true if the mouse button is currently held down over the
       button. This is different from the physical mouse button, however. For a Button
       control, if the mouse is held down and the user moves the mouse cursor off of
       the button, the button pops back up and mouseDown becomes false.
       
    </para>
		</summary>
	</doc>
	<doc for="ButtonBase.mouseDown">
		<summary>
			<para>
       Specifies whether the mouse button is
       in the down state while the mouse pointer is over
       the button
       control.
    </para>
		</summary>
		<remarks>
			<para>
				<see langword="true"/> if the mouse pointer is
       over the button control and the mouse button is down. If the mouse is held
       down and the user moves the mouse pointer off the button, the button returns to its previous
       state and <see cref="System.Windows.Forms.ButtonBase.mouseDown"/> becomes <see langword="false"/>. The
       default value is <see langword="false"/>
       .
    </para>
		</remarks>
	</doc>
	<doc for="ButtonBase.ButtonBase">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ButtonBase"/> class.
 </para>
		</summary>
	</doc>
	<doc for="ButtonBase.OverChangeRectangle">
		<summary>
			<para>Gets the area of the button that changes when the mouse
       pointer passes over it.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the changed area.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
       Consider overriding this property if you override any painting methods. If this method
       is not overridden, the button may not paint correctly or may flicker. Simply
       returning the client rectangle is safe for correct painting but may still cause a flicker.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/>
	</doc>
	<doc for="ButtonBase.DownChangeRectangle">
		<summary>
			<para>Gets the area of the button that changes when the mouse
       pointer passes over it and is pressed.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the changed area. </para>
		</value>
		<remarks>
			<note type="inheritinfo">
       Consider overriding this property if you override any painting methods. If this method is not overridden, the button may not paint correctly or may flicker. Simply returning the client rectangle is safe for correct painting but may still cause a flicker.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/>
	</doc>
	<doc for="ButtonBase.Dispose">
		<summary>
     Removes hooks from the parent, and then calls the base class to perform all other cleanup
 </summary>
	</doc>
	<doc for="ButtonBase.EnableAnimation">
		<summary>
     Enables or disables the animation of images
 </summary>
	</doc>
	<doc for="ButtonBase.OnGotFocus">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.ButtonBase.OnGotFocus"/> event.
    </para>
		</summary>
		<param name="e">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Windows.Forms.ButtonBase.OnGotFocus"/> in an inheriting class, be 
       sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnGotFocus"/> method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnLostFocus"/>
	</doc>
	<doc for="ButtonBase.OnLostFocus">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.ButtonBase.OnLostFocus"/> event.
    </para>
		</summary>
		<param name="e">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For an overview, see XXX.
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnLostFocus"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnLostFocus"/> method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnGotFocus"/>
	</doc>
	<doc for="ButtonBase.OnResize">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.Control.OnResize"/> event.
    </para>
		</summary>
		<param name="e">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnResize"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnResize"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="ButtonBase.OnMouseEnter">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.Control.OnMouseEnter"/> event.
    </para>
		</summary>
		<param name="eventargs">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="caution">
				<see cref="System.Windows.Forms.ButtonBase.OnMouseEnter"/> should not be called if
       the button is disabled. This includes base.OnMouseEnter calls when overriding
       OnMouseEnter in a derived class. If disabling the button in an override of
       OnMouseEnter, call base.OnMouseEnter before disabling or not at all.
    </note>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnMouseEnter"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnMouseEnter"/> method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnMouseLeave"/>
	</doc>
	<doc for="ButtonBase.OnMouseLeave">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.Control.OnMouseLeave"/> event.
    </para>
		</summary>
		<param name="eventargs">
    An <see cref="System.EventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnMouseLeave"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnMouseLeave"/> method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnMouseEnter"/>
	</doc>
	<doc for="ButtonBase.OnMouseMove">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.Control.OnMouseMove"/> event.
    </para>
		</summary>
		<param name="mevent">
    A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="caution">
				<see cref="System.Windows.Forms.ButtonBase.OnMouseMove"/> should not be called if
       the button is disabled. This includes base.OnMouseMove calls when overriding
       OnMouseMove in a derived class. If disabling the button in an override of
       OnMouseMove, call base.OnMouseMove before disabling or not at all.
    </note>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnMouseMove"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnMouseMove"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="ButtonBase.OnMouseDown">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.Control.OnMouseDown"/> event.
    </para>
		</summary>
		<param name="mevent">
    A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="caution">
				<see cref="System.Windows.Forms.ButtonBase.OnMouseDown"/> should not be called if
       the button is disabled. This includes base.OnMouseDown calls when overriding
       OnMouseDown in a derived class. If disabling the button in an override of
       OnMouseDown, call base.OnMouseDown before disabling or not at all.
    </note>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnMouseDown"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnMouseDown"/> method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnMouseUp"/>
	</doc>
	<doc for="ButtonBase.OnMouseUp">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.ButtonBase.OnMouseUp"/> event.
       
    </para>
		</summary>
		<param name="mevent">
    A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For an overview, see XXX.
       
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnMouseUp"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnMouseUp"/> method.
       
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnMouseDown"/>
	</doc>
	<doc for="ButtonBase.PaintControl">
		<summary>
     Central paint dispatcher to one of the three styles of painting.
 </summary>
	</doc>
	<doc for="ButtonBase.DrawFlatBorder">
		<summary>
			<para>Draws a single-pixel border for a flat button control.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface to draw on.</param>
		<param name="r">The <see cref="System.Drawing.Rectangle"/> bounds to draw within.</param>
		<param name="c">The <see cref="System.Drawing.Color"/> with which to draw the border of the button.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the button's border. </para>
		</returns>
		<seealso cref="System.Windows.Forms.ButtonBase.Draw3DBorder"/>
		<seealso cref="System.Windows.Forms.ButtonBase.Draw3DLiteBorder"/>
	</doc>
	<doc for="ButtonBase.GetFaceRectangle">
		<summary>
			<para>Retrieves the <see cref="System.Drawing.Rectangle"/> that represents the button face.</para>
		</summary>
		<param name="client">The <see cref="System.Drawing.Rectangle"/> bounds to draw within.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the button face.</para>
		</returns>
		<remarks>
			<para>You can pass the <see cref="System.Windows.Forms.Control.ClientRectangle"/> property of 
    the control as the <paramref name="client"/> parameter value.</para>
			<para> The return value is typically the client 
    rectangle (excluding the borders and other elements, such as a check box).</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.GetFixedFaceRectangle"/>
	</doc>
	<doc for="ButtonBase.GetFixedFaceRectangle">
		<summary>
			<para>Retrieves the <see cref="System.Drawing.Rectangle"/> that represents the buttons face,
    regardless of the button's state.</para>
		</summary>
		<param name="client">The <see cref="System.Drawing.Rectangle"/> bounds to draw within.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that 
    represents the radio button's face. </para>
		</returns>
		<remarks>
			<para>You can pass the <see cref="System.Windows.Forms.Control.ClientRectangle"/> property of the control as the 
 <paramref name="client "/>parameter value.</para>
			<para>The <see cref="System.Drawing.Rectangle"/> remains constant even after the button state 
 changes.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.GetFaceRectangle"/>
	</doc>
	<doc for="ButtonBase.GetFocusRectangle">
		<summary>
			<para>Retrieves the <see cref="System.Drawing.Rectangle"/> that represents the button's
    focus rectangle.</para>
		</summary>
		<param name="text">The <see cref="System.Drawing.Rectangle"/> occupied by the button's text.</param>
		<param name="image">The <see cref="System.Drawing.Rectangle"/> occupied by the button's image.</param>
		<param name="maxFocus">The largest <see cref="System.Drawing.Rectangle"/> acceptable for drawing the focus rectangle.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that 
    represents the button's focus rectangle. </para>
		</returns>
		<remarks>
			<para>To get the values to pass into this method, you can use the <see cref="System.Windows.Forms.ButtonBase.GetTextRectangle"/> method 
    as the <paramref name="text "/>parameter value, <see cref="System.Windows.Forms.ButtonBase.GetImageRectangle"/> method
    as the <paramref name="image "/>parameter value, and <see cref="System.Windows.Forms.ButtonBase.GetMaxFocusRectangle"/> method
    as the <paramref name="maxFocus "/> parameter value.</para>
			<para>The focus rectangle accounts for any margins separating the focus rectangle 
    from the button's text and image.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.GetTextRectangle"/>
		<seealso cref="System.Windows.Forms.ButtonBase.GetImageRectangle"/>
		<seealso cref="System.Windows.Forms.ButtonBase.GetMaxFocusRectangle"/>
	</doc>
	<doc for="ButtonBase.GetImageRectangle">
		<summary>
			<para>Retrieves the <see cref="System.Drawing.Rectangle"/> occupied by the button's image.</para>
		</summary>
		<param name="client">The button's client rectangle.</param>
		<param name="face">The <see cref="System.Drawing.Rectangle"/> where the button's focus rectangle, text, and image can be painted.</param>
		<param name="imageStart">When this method returns, contains a <see cref="System.Drawing.Point"/> that represents the upper-left corner of the button's image. This parameter is passed uninitialized.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> with the same bounds as the button's image. </para>
		</returns>
		<remarks>
			<para> You can use the <see cref="System.Windows.Forms.ButtonBase.GetFaceRectangle"/> method
    as the value for the <paramref name="face"/> parameter value and the <see cref="System.Windows.Forms.Control.ClientRectangle"/>
    property of the control as the <paramref name="client"/> parameter value.</para>
		</remarks>
	</doc>
	<doc for="ButtonBase.GetMaxFocusRectangle">
		<summary>
			<para>Retrieves the largest <see cref="System.Drawing.Rectangle"/> 
 acceptable
 for drawing the focus rectangle.</para>
		</summary>
		<param name="face">The <see cref="System.Drawing.Rectangle"/> that represents the button face.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> with the 
    same bounds as the largest acceptable focus rectangle.</para>
		</returns>
		<remarks>
			<para>To get the <paramref name="face"/> parameter value to pass into this method, 
    you can use the <see cref="System.Windows.Forms.ButtonBase.GetFaceRectangle"/> or <see cref="System.Windows.Forms.ButtonBase.GetFixedFaceRectangle"/> methods. </para>
			<para>The text and image will use the rectangle returned to adjust and ensure that there is enough space for a focus 
    rectangle.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.GetFaceRectangle"/>
		<seealso cref="System.Windows.Forms.ButtonBase.GetFixedFaceRectangle"/>
	</doc>
	<doc for="ButtonBase.GetTextRectangle">
		<summary>
			<para>Retrieves the <see cref="System.Drawing.Rectangle"/> occupied by the button's text.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface to draw on. </param>
		<param name="maxFocus">The largest <see cref="System.Drawing.Rectangle"/> acceptable for drawing the focus rectangle.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> with the same bounds as the button's text.</para>
		</returns>
		<remarks>
			<para>The difference between <see cref="System.Windows.Forms.ButtonBase.GetTextRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.GetTextRectangleBase"/> is that <see cref="System.Windows.Forms.ButtonBase.GetTextRectangle"/> takes into account if a button is in the 
    pressed state and adjusts the text rectangle. The text rectangle will account
    for the border difference in a pressed button.</para>
			<para>You can use the <see cref="System.Windows.Forms.ButtonBase.GetMaxFocusRectangle"/> method 
 to get
 the <paramref name="maxFocus "/>parameter value.</para>
 The <see cref="System.Drawing.Rectangle"/> returned should fit within the <paramref name="maxFocus
 "/> rectangle and allow for margins, if any.
 </remarks>
	</doc>
	<doc for="ButtonBase.GetTextRectangleBase">
		<summary>
			<para>Retrieves the <see cref="System.Drawing.Rectangle"/> 
 occupied by the button's text.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface to draw on. </param>
		<param name="maxFocus">The largest <see cref="System.Drawing.Rectangle"/> acceptable for drawing the focus rectangle.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> with the same bounds as the button's text.</para>
		</returns>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.ButtonBase.GetMaxFocusRectangle"/> method 
    to get the <paramref name="maxFocus"/> parameter value.</para>
			<para>The <see cref="System.Drawing.Rectangle"/> returned should fit within the <paramref name="maxFocus"/> rectangle and allow for margins, if any.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.GetTextRectangle"/>
		<seealso cref="System.Windows.Forms.ButtonBase.GetMaxFocusRectangle"/>
	</doc>
	<doc for="ButtonBase.DrawBackground">
		<summary>
			<para>Draws the background for the button control.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<param name="r">The <see cref="System.Drawing.Rectangle"/> bounds to draw within.</param>
		<seealso cref="System.Windows.Forms.ButtonBase.DrawImage"/>
	</doc>
	<doc for="ButtonBase.DrawDefaultBorder">
		<overload>
			<para>Draws the default border around the button control. </para>
		</overload>
		<summary>
			<para>Draws the default border around the button control within the specified bounds
       and on the specified surface.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface to draw on.</param>
		<param name="r">The <see cref="System.Drawing.Rectangle"/> dimensions to draw within.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> with the same bounds as the button control.</para>
		</returns>
		<seealso cref="System.Windows.Forms.ButtonBase.Draw3DBorder"/>
		<seealso cref="System.Windows.Forms.ButtonBase.DrawFlatBorder"/>
	</doc>
	<doc for="ButtonBase.DrawDefaultBorder1">
		<summary>
			<para>Draws the default border around the button control within the specified bounds, on the specified surface,
       and with the specified color.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface to draw on.</param>
		<param name="r">The <see cref="System.Drawing.Rectangle"/> dimensions to draw within.</param>
		<param name="c">The <see cref="System.Drawing.Color"/> in which to draw.</param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> with the same bounds as the button control.</para>
		</returns>
		<seealso cref="System.Windows.Forms.ButtonBase.Draw3DBorder"/>
		<seealso cref="System.Windows.Forms.ButtonBase.DrawFlatBorder"/>
	</doc>
	<doc for="ButtonBase.HAlignWithin">
		<summary>
     A <see cref="System.Drawing.Rectangle"/> of the given
     <see cref="System.Drawing.Size"/> aligned left, right, or center within the
     given <see cref="System.Drawing.Rectangle"/> according to the specified
     alignment parameters.
 </summary>
		<param name="alignThis">
     The <see cref="System.Drawing.Size"/> of the
     <see cref="System.Drawing.Rectangle"/> to return.
 </param>
		<param name="withinThis">
     The <see cref="System.Drawing.Rectangle"/> in which to align.
 </param>
		<param name="align">
     The alignment parameters. Only the horizontal component is used.
 </param>
	</doc>
	<doc for="ButtonBase.OnBackColorChanged">
		<summary>
		</summary>
	</doc>
	<doc for="ButtonBase.OnForeColorChanged">
		<summary>
		</summary>
	</doc>
	<doc for="ButtonBase.OnKeyDown">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.ButtonBase.OnKeyUp"/> event.
       
    </para>
		</summary>
		<param name="kevent">
    A <see cref="System.Windows.Forms.KeyEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For an overview, see XXX.
       
    </para>
			<note type="caution">
				<see cref="System.Windows.Forms.ButtonBase.OnKeyDown"/> should not be called if
       the button is disabled. This includes base.OnKeyDown calls when overriding
       OnKeyDown in a derived class. If disabling the button in an override of
       OnKeyDown, call base.OnKeyDown before disabling or not at all.
    </note>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnKeyDown"/> in an inheriting
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnKeyDown"/> method.
       
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnKeyUp"/>
	</doc>
	<doc for="ButtonBase.OnKeyUp">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.ButtonBase.OnKeyUp"/> event.
       
    </para>
		</summary>
		<param name="kevent">
    A <see cref="System.Windows.Forms.KeyEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For an overview, see XXX.
       
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnKeyUp"/> in an inheriting
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnKeyUp"/> method.
       
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnKeyDown"/>
	</doc>
	<doc for="ButtonBase.OnPaint">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.ButtonBase.OnPaint"/> event.
       
    </para>
		</summary>
		<param name="pevent">
    A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler through a delegate. For an overview, see XXX.
       
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnPaint"/> in an inheriting
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnPaint"/> method.
       
    </note>
		</remarks>
	</doc>
	<doc for="ButtonBase.PaintUp">
		<summary>
			<para> Draws a standard style button control in raised state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<param name="borderWidth">The width of the border in pixels.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintUp"/> in a derived class, be sure to
       call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintUp"/> method.
       You might also need to override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintOver">
		<summary>
			<para>Draws a standard style button control in the mouse over state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintOver"/> in a derived class, be sure to
       call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintOver"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintDown">
		<summary>
			<para> Draws a standard style button control in the mouse down state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<param name="borderWidth">The width of the border in pixels.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintDown"/> in a derived
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintDown"/> method.
       You might also need to override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintFlatUp">
		<summary>
			<para> Draws a flat style button control.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/> in a derived class, be sure to call the base
       class's <see cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintFlatOver">
		<summary>
			<para>Draws a flat style button control in the mouse over state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/> in a derived
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintFlatDown">
		<summary>
			<para> Draws a flat style button control in the mouse down state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/> in a derived
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintPopupUp">
		<summary>
			<para> Draws a popup style button control.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/> in a derived
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintPopupOver">
		<summary>
			<para> Draws a popup style button control in the mouse over state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/> in a derived
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/>
	</doc>
	<doc for="ButtonBase.PaintPopupDown">
		<summary>
			<para>Draws a popup style button control in the mouse down state.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/> in a derived
       class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.PaintPopupDown"/> method. You might also need to
       override <see cref="System.Windows.Forms.ButtonBase.OverChangeRectangle"/> and <see cref="System.Windows.Forms.ButtonBase.DownChangeRectangle"/> if necessary.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatOver"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintFlatDown"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupUp"/>
		<seealso cref="System.Windows.Forms.ButtonBase.PaintPopupOver"/>
	</doc>
	<doc for="ButtonBase.PaintPopup">
		<summary>
     Renders the popup style button based upon the current mouse state.
 </summary>
	</doc>
	<doc for="ButtonBase.PaintFlat">
		<summary>
     Renders the flat style button based upon the current mouse state.
 </summary>
	</doc>
	<doc for="ButtonBase.PaintStandard">
		<summary>
     Renders the standard style button based upon the current mouse state.
 </summary>
	</doc>
	<doc for="ButtonBase.VAlignWithin">
		<summary>
     A <see cref="System.Drawing.Rectangle"/> of the given
     <see cref="System.Drawing.Size"/> aligned top, bottom, or middle within the
     given <see cref="System.Drawing.Rectangle"/> according to the specified
     alignment parameters.
 </summary>
		<param name="alignThis">
     The <see cref="System.Drawing.Size"/> of the
     <see cref="System.Drawing.Rectangle"/> to return.
 </param>
		<param name="withinThis">
     The <see cref="System.Drawing.Rectangle"/> in which to align.
 </param>
		<param name="align">
     The alignment parameters. Only the vertical component is used.
 </param>
	</doc>
	<doc for="ButtonBase.OnBackgroundImageChanged">
		<nodoc/>
		<summary>
			<para>Occurs when the background image changes.</para>
		</summary>
	</doc>
	<doc for="ButtonBase.Image">
		<summary>
			<para> Gets or sets the image that is displayed on a button control.</para>
		</summary>
		<value>
			<para>The <see cref="System.Drawing.Image"/> displayed on the button control. The default value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.ButtonBase.Image"/> property is set, the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property
   will be set to <see langword="null"/>, and the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property will be set to its default, -1.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Button"/> and sets some of its common properties. The result will be a flat button with text on the left and an image on the right. This code assumes you have a bitmap image named <c>MyBitMap.bmp</c> stored in the <c>C:\Graphics</c> directory, and a reference to the <see cref="N:System.Drawing" qualify="true"/> namespace is included.</para>
			<codelink SampleID="Classic ButtonBase.FlatStyle Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ImageList"/>
	</doc>
	<doc for="ButtonBase.ImageAlign">
		<summary>
			<para> Gets or sets the alignment of the image on the button control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.ContentAlignment"/> values. The default
   value is <see langword="MiddleCenter"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Drawing.ContentAlignment"/> values.</exception>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Button"/> and sets some of its common properties. The result will be a flat button with text on the left and an image on the right. This code assumes you have a bitmap image named <c>MyBitMap.bmp</c> stored in the <c>C:\Graphics</c> directory, and a reference to the <see cref="N:System.Drawing" qualify="true"/> namespace is included.</para>
			<codelink SampleID="Classic ButtonBase.FlatStyle Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ButtonBase.TextAlign"/>
	</doc>
	<doc for="ButtonBase.TextAlign">
		<summary>
			<para> Gets or sets the alignment of the text on the button control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.ContentAlignment"/> values. The default is
<see langword="MiddleCenter"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Drawing.ContentAlignment"/> values.</exception>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Button"/> and sets some of its common properties. The result will be a flat button with text on the left and an image on the right. This code assumes you have a bitmap image named <c>MyBitMap.bmp</c> stored in the <c>C:\Graphics</c> directory, and a reference to the <see cref="N:System.Drawing" qualify="true"/> namespace is included.</para>
			<codelink SampleID="Classic ButtonBase.FlatStyle Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ButtonBase.ImageAlign"/>
	</doc>
	<doc for="ButtonBase.CreateParams">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ButtonBase.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ButtonBase.anyRight">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.anyLeft">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.anyTop">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.anyBottom">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.anyCenter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.PaintWorker">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.CreateAccessibilityInstance"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.OnTextChanged"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ButtonBase.OnParentChanged"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ButtonBase.OnVisibleChanged"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ButtonBase.WndProc">
		<nodoc/>
		<param name="m"></param>
	</doc><doc for="ButtonBase.Draw3DBorder"><nodoc/>
		<summary>
			<para>Draws the three-dimensional border for a button control.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface to draw on.</param>
		<param name="r">The <see cref="System.Drawing.Rectangle"/> bounds to draw within.</param>
		<param name="width">The width of the border in pixels.</param>
		<param name="raised">
			<see langword="true"/> if the border is raised; otherwise, <see langword="false"/>.</param>
		<remarks>
			<note type="inheritinfo">
      When overriding <see cref="System.Windows.Forms.ButtonBase.Draw3DBorder"/>in a derived class, be sure to
      call the base class's <see cref="System.Windows.Forms.ButtonBase.Draw3DBorder"/> method.
      </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.DrawFlatBorder"/>
		<seealso cref="System.Windows.Forms.ButtonBase.Draw3DLiteBorder"/>
	</doc><doc for="ButtonBase.Draw3DLiteBorder"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.DrawFlatFocus"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.DrawFocus"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.DrawImage"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.DrawText2">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.OnEnabledChanged"><nodoc/>
		<summary>
		</summary>
	</doc><doc for="ButtonBaseAccessibleObject">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBaseAccessibleObject.ButtonBaseAccessibleObject"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBaseAccessibleObject.DoDefaultAction">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ButtonBase.ImeMode">
		<summary>
			<para>Gets or sets the Input Method Editor (IME) mode supported by this control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<seealso cref="System.Windows.Forms.ImeMode"/>
		<seealso cref="System.Windows.Forms.ButtonBase.DefaultImeMode"/>
	</doc><doc for="ButtonBase.ResetFlagsandPaint">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ButtonBase.IsDefault">
		<summary>
			<para>Gets or sets a value indicating whether the button control is the default button.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the button control is the default button; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.ButtonBase.IsDefault"/> property is set to <see langword="true"/>,
   the button is the default button for the <see cref="System.Windows.Forms.Form"/>. This means that the
   button is clicked when the ENTER key is pressed if no other button or
   any other control that captures the ENTER key has focus.</para>
			<para>To specify the default button of a form, set the
<see cref="System.Windows.Forms.Form.AcceptButton"/> property 
   of the form to the desired button.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.AcceptButton"/>
		<keyword term="default button"/>
	</doc>
	<doc for="ButtonBase.ImeModeChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ButtonBase.DefaultImeMode">
		<summary>
			<para>Gets the default Input Method Editor (IME) mode supported by this control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<remarks>
			<para>As implemented in the <see cref="System.Windows.Forms.ButtonBase"/> class, this property always returns the <see cref="System.Windows.Forms.ImeMode.Disable" qualify="true"/>
value.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ImeMode"/>
	</doc>
	<doc for="ButtonBase.ImageIndex">
		<summary>
			<para> Gets or sets the image list index value of the image displayed on the button control.</para>
		</summary>
		<value>
			<para>A zero-based index, which represents the image position in an <see cref="System.Windows.Forms.ImageList"/>. The default is -1.</para>
		</value>
		<exception cref="System.ArgumentException">The assigned value is less than the lower bounds of the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/>.</exception>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> or <see cref="System.Windows.Forms.ButtonBase.ImageList"/> properties are set, the <see cref="System.Windows.Forms.ButtonBase.Image"/> property is set to its default
   value, <see langword="null"/> .</para>
			<note type="note">
   If the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property value
   is changed to <see langword="null"/>, the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property
   returns its default value, -1. However, the assigned <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> value is retained internally
   and used when another <see cref="System.Windows.Forms.ImageList"/> object is assigned to the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property. If the new <see cref="System.Windows.Forms.ImageList"/>
   assigned to the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property has an <see cref="System.Windows.Forms.ImageList.ImageCollection.Count" qualify="true"/> property value
   that is less than or equal to the value assigned to the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property minus one (to account
   for the collection being a zero-based index), the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property value is adjusted to
   one less than the <see cref="System.Windows.Forms.ImageList.ImageCollection.Count"/> property value.
   For example, consider a button control whose <see cref="System.Windows.Forms.ImageList"/> has three images and
   whose <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property is set to 2. If a new
<see cref="System.Windows.Forms.ImageList"/> that has only two images is assigned to 
   the button, the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> value changes to 1.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Button"/> and sets the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> and <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> properties. This code assumes an
<see cref="System.Windows.Forms.ImageList"/> has been created and a minimum of one
<see cref="System.Drawing.Image"/> has been assigned to
   it. This code assumes you have a bitmap image named <c>MyBitMap.bmp</c> stored in the <c>C:\Graphics</c>
directory.</para>
			<codelink SampleID="Classic ButtonBase.ImageIndex Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ImageList"/>
	</doc>
	<doc for="ButtonBase.ImageList">
		<summary>
			<para> Gets or sets the <see cref="System.Windows.Forms.ImageList"/> that contains the <see cref="System.Drawing.Image"/> displayed on a button control.</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.ImageList"/>. The default value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> or <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property is set, the <see cref="System.Windows.Forms.ButtonBase.Image"/> property is set 
<see langword="null"/>, which is its default value.</para>
			<note type="note">
   If the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property value
   is changed to <see langword="null"/>, the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property
   returns its default value, -1. However, the assigned <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> value is retained internally
   and used when another <see cref="System.Windows.Forms.ImageList"/> is assigned to the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property. If the new <see cref="System.Windows.Forms.ImageList"/>
   assigned to the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> property has an <see cref="System.Windows.Forms.ImageList.ImageCollection.Count" qualify="true"/> property value
   that is less than or equal to the value assigned to the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property minus one
   (because the collection is a zero-based index), the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property value is adjusted to
   one less than the <see cref="System.Windows.Forms.ImageList.ImageCollection.Count"/> property value.
   For example, consider a button control whose <see cref="System.Windows.Forms.ImageList"/> has three images and
   whose <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> property is set to 2. If a new
<see cref="System.Windows.Forms.ImageList"/> that has only two images is assigned to 
   the button, the <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> value changes to 1.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Button"/> and sets the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> and <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> properties. This code assumes an <see cref="System.Windows.Forms.ImageList"/> has been created and a minimum of one <see cref="System.Drawing.Image"/> has been assigned to it. This code assumes you have a bitmap image named <c>MyBitMap.bmp</c> stored in the <c>C:\Graphics</c> directory.</para>
			<codelink SampleID="Classic ButtonBase.ImageIndex Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Image"/>
		<seealso cref="System.Windows.Forms.ButtonBase.ImageIndex"/>
	</doc>
	<doc for="ButtonBase">
		<summary>
			<para>Implements the basic functionality common to button controls.</para>
		</summary>
		<remarks>
			<para>You do not typically inherit from <see cref="System.Windows.Forms.ButtonBase"/>. To create your own button class, inherit
   from the <see cref="System.Windows.Forms.Button"/>, <see cref="System.Windows.Forms.CheckBox"/>, or <see cref="System.Windows.Forms.RadioButton"/> class.</para>
			<para>To have the derived button control display an image, set the <see cref="System.Windows.Forms.ButtonBase.Image"/> property or the <see cref="System.Windows.Forms.ButtonBase.ImageList"/> and <see cref="System.Windows.Forms.ButtonBase.ImageIndex"/> properties. The image can be aligned on the
button control by setting the <see cref="System.Windows.Forms.ButtonBase.ImageAlign"/> property. Likewise, to align
the <see cref="System.Windows.Forms.Control.Text"/> displayed on the button control, set the
<see cref="System.Windows.Forms.ButtonBase.TextAlign"/> property.</para>
			<para>The <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property determines the style
and appearance of the control. If the <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property is set to <see cref="System.Windows.Forms.FlatStyle.System" qualify="true"/>, the
user's operating system determines the appearance of the control.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control"/>
		<seealso cref="System.Windows.Forms.Button"/>
		<seealso cref="System.Windows.Forms.CheckBox"/>
		<seealso cref="System.Windows.Forms.RadioButton"/>
	</doc>
	<doc for="ButtonBase.FlatStyle">
		<summary>
			<para> Gets or sets the flat style appearance of the button control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.FlatStyle"/> values. The default value is <see langword="Standard"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Windows.Forms.FlatStyle"/> values.</exception>
		<remarks>
			<para> When the <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property of the <see cref="System.Windows.Forms.RadioButton"/> and <see cref="System.Windows.Forms.CheckBox"/> classes is set to <see cref="System.Windows.Forms.FlatStyle.System" qualify="true"/>, the control is drawn by the user's
   operating system and the check alignment is based upon the
<see langword="CheckAlign"/> and <see cref="System.Windows.Forms.ButtonBase.TextAlign"/> property values. The 
<see langword="CheckAlign"/> property value is not changed, but 
   the appearance of the control can be affected. The check box is horizontally aligned with either the left or right edge of the control (a left or center alignment
   appears left aligned, right remains unchanged), and vertically aligned the same as the descriptive text. For example, if you have a <see cref="System.Windows.Forms.CheckBox"/>
   control with a <see langword="CheckAlign"/> property value of <see cref="System.Drawing.ContentAlignment.MiddleCenter" qualify="true"/> and a <see cref="System.Windows.Forms.ButtonBase.TextAlign"/> property value of <see cref="System.Drawing.ContentAlignment.TopRight" qualify="true"/>, and the <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property value is set to <see cref="System.Windows.Forms.FlatStyle.System"/>, the
   check box alignment will appear to be <see cref="System.Drawing.ContentAlignment.TopLeft" qualify="true"/> while the text alignment remains unchanged.
   </para>
			<note type="note">
   If the <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property is set to
<see langword="FlatStyle.System"/>, any images assigned to the <see cref="System.Windows.Forms.ButtonBase.Image"/> property are not displayed.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Button"/> and sets some of its common properties. The result will be a flat button with text on the left
   and an image on the right. This code assumes you have a bitmap image named <c>MyBitMap.bmp</c> stored in the <c>C:\Graphics</c> directory, and a reference to the <see cref="N:System.Drawing" qualify="true"/> namespace is
included.</para>
			<codelink SampleID="Classic ButtonBase.FlatStyle Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
