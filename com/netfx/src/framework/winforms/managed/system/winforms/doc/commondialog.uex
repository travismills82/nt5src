<docs>
	<doc for="CommonDialog.CommonDialog">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.Windows.Forms.CommonDialog"/> class.
    </para>
		</summary>
		<remarks>
		</remarks>
	</doc>
	<doc for="CommonDialog.HelpRequest">
		<summary>
			<para>
       Occurs when the user clicks the Help button on a common
       dialog box.
    </para>
		</summary>
		<remarks>
			<para>
       For information about handling events, see <see topic="cpconEventsOverview"/>.
    </para>
		</remarks>
		<seealso cref="System.Windows.Forms.CommonDialog.OnHelpRequest"/>
	</doc>
	<doc for="CommonDialog.MoveToScreenCenter">
		<summary>
     Centers the given window on the screen. This method is used by the default
     common dialog hook procedure to center the dialog on the screen before it
     is shown.
 </summary>
	</doc>
	<doc for="CommonDialog.OnHelpRequest">
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.CommonDialog.HelpRequest"/>
       event.
    </para>
		</summary>
		<param name="e">
    An <see cref="System.Windows.Forms.HelpEventArgs"/> that provides the event data.
 </param>
		<remarks>
			<para>
       This
       method is invoked when the Help button is clicked. Inheriting
       classes can override this method to handle the event.
    </para>
		</remarks>
	</doc>
	<doc for="CommonDialog.OwnerWndProc">
		<summary>
			<para>Defines the owner window procedure that is
      overridden to add specific functionality to a common dialog box.</para>
		</summary>
		<param name="hWnd">The window handle of the message to send.</param>
		<param name="msg">The Win32 message to send.</param>
		<param name="wparam">The <paramref name="wparam"/> to send with the message.</param>
		<param name="lparam">The <paramref name="lparam"/> to send with the message.</param>
		<returns>
			<para>The result of the message processing, which is dependent on the message
      sent.</para>
		</returns>
		<remarks>
			<para>Control is transferred here when messages are sent to the owner window of the common dialog
      box. Inheriting classes can override this method to add specific functionality
      to a common dialog box.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for inheriting classes to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="CommonDialog.Reset">
		<summary>
			<para> When overridden in a derived class,
      resets the properties of a common dialog box to their default
      values.
      </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      Inheriting
      classes can override
      this method to reset their properties.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for unmanaged code to call this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode"/></permission>
	</doc>
	<doc for="CommonDialog.RunDialog">
		<summary>
			<para>When overridden in a derived class,
      specifies a common dialog box.</para>
		</summary>
		<param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
		<returns>
			<para><see langword="true"/> if the dialog box
   was successfully run; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method is invoked when the user of a common dialog box calls <see cref="System.Windows.Forms.CommonDialog.ShowDialog"/>, and it must be overridden by inherited
   classes of <see cref="System.Windows.Forms.CommonDialog"/> to implement a specific common dialog box. An implementation of this method should store the <paramref name="hwndOwner"/>parameter in the common dialog box
   structure's <see langword="hwndOwner "/> field.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for unmanaged code to call this method. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode"/></permission>
		<seealso cref="System.Windows.Forms.CommonDialog.ShowDialog"/>
		<seealso cref="System.Windows.Forms.CommonDialog.HookProc"/>
	</doc>
	<doc for="CommonDialog.HookProc">
		<summary>
			<para> Defines the common dialog box hook
      procedure that is overridden to add specific functionality to a common dialog
      box.
      </para>
		</summary>
		<param name="hWnd">The handle to the dialog box window. </param>
		<param name="msg">The message being received. </param>
		<param name="wparam">Additional information about the message. </param>
		<param name="lparam">Additional information about the message. </param>
		<returns>
			<para> A zero value if the default dialog box procedure processes
      the message; a nonzero value if the default dialog box procedure ignores the
      message.
      </para>
		</returns>
		<remarks>
			<para>A
      hook procedure is a mechanism by which a function can intercept
      events before they reach an application. When you override the <see cref="System.Windows.Forms.CommonDialog.HookProc"/> method for a <see cref="System.Windows.Forms.CommonDialog"/> class,
      the operating system invokes your override of the function to post operating
      system messages to the window.</para>
			<para> By default, the hook procedure centers the dialog box on the screen in response
      to a WM_INITDIALOG message.
      </para>
			<note type="inheritinfo">
      Inheriting classes can override this method to add specific
      functionality to a common dialog box. When overriding <see cref="System.Windows.Forms.CommonDialog.HookProc"/> in a derived class, be sure
      to call the base class's <see cref="System.Windows.Forms.CommonDialog.HookProc"/>
      
      method.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for inheriting classes to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates how to override the <see cref="System.Windows.Forms.CommonDialog.HookProc"/> method. The example consists of a
   class that inherits the <see cref="System.Windows.Forms.CommonDialog"/> class. In the class's <see cref="System.Windows.Forms.CommonDialog.HookProc"/> override, the example evaluates
   the method's <paramref name="msg"/>
   parameter against constant values for particular Windows
   messages. If the <paramref name="msg"/> parameter equals the specified constant, the
   example writes trace output identifying the Windows message that was passed
   to the <see cref="System.Windows.Forms.CommonDialog.HookProc"/> method. This example assumes
   that the class in which the <see cref="System.Windows.Forms.CommonDialog.HookProc"/>
   method is declared inherits the <see cref="System.Windows.Forms.CommonDialog"/>
   class.</para>
			<codelink SampleID="HookProc Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CommonDialog">
		<summary>
			<para> Specifies the base class used for displaying
      dialog boxes on the screen.
      </para>
		</summary>
		<remarks>
			<para> Inheritied
      classes are required to implement <see cref="System.Windows.Forms.CommonDialog.RunDialog"/> by invoking <see cref="System.Windows.Forms.CommonDialog.ShowDialog"/> to
      create a specific common dialog box.
      Inherited classes can optionally override <see cref="System.Windows.Forms.CommonDialog.HookProc"/> to implement
      specific dialog box hook functionality.
      </para>
		</remarks>
		<example>
			<para> The following example uses the <see cref="System.Windows.Forms.ColorDialog"/> implementation of <see cref="System.Windows.Forms.CommonDialog"/> and illustrates creating and showing a 
   dialog box. This example assumes that the method is called
   from within an existing form, that has a <see cref="System.Windows.Forms.TextBox"/> and <see cref="System.Windows.Forms.Button"/>
   placed on it. </para>
			<codelink SampleID="Classic ColorDialog Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CommonDialog.ShowDialog1">
		<summary>
			<para> Runs a common dialog box with the specified owner.</para>
		</summary>
		<param name="owner">Any object that implements <see cref="System.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog box.</param>
		<returns>
			<para><see cref="System.Windows.Forms.DialogResult.OK" qualify="true"/>if the user clicks <SpecialLocalizableItem kind="UIElement">OK</SpecialLocalizableItem> in the dialog box; otherwise, <see cref="System.Windows.Forms.DialogResult.Cancel" qualify="true"/><see langword="."/></para>
		</returns>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.CommonDialog.ShowDialog"/> method allows you to specify
   a specific form or control that will own the dialog box that is shown. If you
   use the version of this method that has no parameters, the dialog box being
   shown would be owned automatically by the currently active window of your application.</para>
		</remarks>
		<permission cref="System.Drawing.Printing.PrintingPermission">to print from a <see cref="System.Windows.Forms.PrintDialog"/> . Associated enumeration: <see cref="System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.SafeSubWindows" qualify="true"/></permission>
	</doc>
	<doc for="CommonDialog.ShowDialog">
		<overload>
			<para>Runs a common dialog box.</para>
		</overload>
		<summary>
			<para>Runs a common dialog box with a default owner.</para>
		</summary>
		<returns>
			<para><see cref="System.Windows.Forms.DialogResult.OK" qualify="true"/> if the user clicks <SpecialLocalizableItem kind="UIElement">OK</SpecialLocalizableItem> 
in the dialog box; otherwise, <see cref="System.Windows.Forms.DialogResult.Cancel" qualify="true"/>
				<see langword="."/></para>
		</returns>
		<remarks>
			<para>This method implements <see cref="System.Windows.Forms.CommonDialog.RunDialog"/>.</para>
		</remarks>
		<permission cref="System.Drawing.Printing.PrintingPermission">to print from a <see cref="System.Windows.Forms.PrintDialog"/> . Associated enumeration: <see cref="System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.SafeSubWindows" qualify="true"/></permission>
		<example>
			<para> The following example uses the <see cref="System.Windows.Forms.ColorDialog"/> implementation of <see cref="System.Windows.Forms.CommonDialog"/> and illustrates creating and showing a
   dialog box. This example assumes that the method is called
   from within an existing form, that has a <see cref="System.Windows.Forms.TextBox"/> and <see cref="System.Windows.Forms.Button"/>
   placed on it. </para>
			<codelink SampleID="Classic ColorDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.CommonDialog.RunDialog"/>
		<seealso cref="System.Windows.Forms.DialogResult"/>
	</doc>
</docs>
