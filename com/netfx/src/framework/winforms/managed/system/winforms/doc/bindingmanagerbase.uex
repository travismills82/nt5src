<docs>
	<doc for="BindingManagerBase.onPositionChangedHandler">
		<summary>
			<para>Specifies the event handler for the <see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/> event.</para>
		</summary>
	</doc>
	<doc for="BindingManagerBase.PositionChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.Binding"/>, 
   and adds it to a <see cref="System.Windows.Forms.TextBox"/> control's collection of <see cref="System.Windows.Forms.Binding"/>
   objects. The example then gets the <see cref="System.Windows.Forms.BindingManagerBase"/> for the data source, and
   adds a delegate to the <see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/>
   event.</para>
			<codelink SampleID="Classic BindingManagerBase.PositionChanged Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BindingManagerBase.OnCurrentChanged">
		<summary>
			<para>When overridden in a derived class, raises the <see cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase.OnCurrentChanged"/> method also allows 
   derived classes to handle the event without attaching a delegate. This is the
   preferred technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.BindingManagerBase.OnCurrentChanged"/> in a derived class, be 
   sure to call the base class's <see cref="System.Windows.Forms.BindingManagerBase.OnCurrentChanged"/> method
   so that registered delegates receive the event.
</note>
		</remarks>
	</doc>
	<doc for="BindingManagerBase.onCurrentChangedHandler">
		<summary>
			<para>Specifies the event handler for the <see cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event.</para>
		</summary>
	</doc>
	<doc for="BindingManagerBase.BindingManagerBase">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.BindingManagerBase"/> class.</para>
		</summary>
	</doc>
	<doc for="BindingManagerBase.AddNew">
		<summary>
			<para>When overridden in a derived class, adds a new item to the underlying list.</para>
		</summary>
	</doc>
	<doc for="BindingManagerBase.PullData">
		<summary>
			<para>Pulls data from the data-bound control into the data source.</para>
		</summary>
		<seealso cref="System.Windows.Forms.BindingManagerBase.PushData"/>
	</doc>
	<doc for="BindingManagerBase.PushData">
		<summary>
			<para>Pushes data from the data source into the data-bound control.</para>
		</summary>
		<seealso cref="System.Windows.Forms.BindingManagerBase.PullData"/>
	</doc>
	<doc for="BindingManagerBase.UpdateIsBinding">
		<summary>
			<para>When overridden in a derived class, updates the binding.</para>
		</summary>
	</doc>
	<doc for="BindingManagerBase.Bindings">
		<summary>
			<para>Gets the collection of bindings being managed.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.BindingsCollection"/> that contains the <see cref="System.Windows.Forms.Binding"/> objects managed
   by this <see cref="System.Windows.Forms.BindingManagerBase"/>
   .</para>
		</value>
		<example>
			<para>The following example gets the <see cref="System.Windows.Forms.BindingManagerBase"/> for a specific 
   data source. The example then uses the <see cref="System.Windows.Forms.BindingManagerBase.Bindings"/> property to print information about each
   control bound to the same data source.</para>
			<codelink SampleID="Classic BindingManagerBase.Bindings Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Binding"/>
		<seealso cref="System.Windows.Forms.BindingContext"/>
	</doc>
	<doc for="BindingManagerBase.Current">
		<summary>
			<para>When overridden in a derived class, gets the current object.</para>
		</summary>
		<value>
			<para>An <see cref="System.Object"/> that represents the current object.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase.Current"/> object contains the value
   of
   the current item in the data source. To use the value of the current item,
   you must cast the item to the <see cref="System.Type"/> of the object
   contained by the <see cref="System.Windows.Forms.Binding.DataSource"/>. For example, a <see cref="System.Data.DataTable"/> contains
<see cref="System.Data.DataRowView"/> 
objects. To determine the type of the current object, use the <see cref="System.Object.GetType"/> and
<see cref="System.Type.ToString"/>
methods.</para>
			<note type="note">
   When the <see cref="System.Windows.Forms.Binding.DataSource"/> is a <see cref="System.Data.DataSet"/>, <see cref="System.Data.DataViewManager"/>, or
<see cref="System.Data.DataTable"/>, 
   you are actually binding to a <see cref="System.Data.DataView"/>. Consequently, each <see cref="System.Windows.Forms.BindingManagerBase.Current"/> object is a <see cref="System.Data.DataRowView"/> object.
</note>
		</remarks>
		<example>
			<para>The following example prints the value of the <see cref="System.Windows.Forms.BindingManagerBase.Current"/> object in a <see cref="System.Windows.Forms.BindingManagerBase"/> in the <see cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event.
   The example assumes the data source is a <see cref="System.Data.DataTable"/> containing a <see cref="System.Data.DataColumn"/>
   named "CustName".</para>
			<codelink SampleID="Classic BindingManagerBase.Current Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BindingManagerBase.Count">
		<summary>
			<para>When overridden in a derived class, gets the number of rows managed by the <see cref="System.Windows.Forms.BindingManagerBase"/> .</para>
		</summary>
		<value>
			<para>The number of rows managed by the <see cref="System.Windows.Forms.BindingManagerBase"/> .</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property to determine the last item in the
   list of rows maintained by the <see cref="System.Windows.Forms.BindingManagerBase"/>. To go to the last item,
   set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> property to the <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property value minus one.</para>
		</remarks>
		<example>
			<para>The following example shows four methods
      that set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/>
      property. The MoveNext method increments the property by
      one. The MovePrevious method decrements the property by one. MoveFirst sets the
      property to 0. MoveLast sets the property to the value of the <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property minus one.</para>
			<codelink SampleID="Classic BindingManagerBase.Count Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase.Position"/>
	</doc>
	<doc for="BindingManagerBase.Position">
		<summary>
			<para> When overridden in a derived class, gets or
      sets the position in the underlying list that controls bound to this
      data source point to.</para>
		</summary>
		<value>
			<para>A zero-based index that
      specifies a position in the underlying list.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> to iterate through the underlying list
   maintained by the <see cref="System.Windows.Forms.BindingManagerBase"/>. To go to the first item, set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> to zero. To go to the end of the list, set
   the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> to the value of the <see cref="System.Windows.Forms.BindingManagerBase.Count"/>
   property minus one.</para>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/> event occurs when the
<see cref="System.Windows.Forms.BindingManagerBase.Position"/> property value changes.</para>
		</remarks>
		<example>
			<para>The following example shows four methods
      that set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/>
      property. The MoveNext method increments the property by one.
      The MovePrevious method decrements the property by one. MoveFirst sets the property
      to 0, and MoveLast sets the property to the value of the <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property minus one.</para>
			<codelink SampleID="Classic BindingManagerBase.Count Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BindingManagerBase.CurrentChanged">
		<summary>
			<para>Occurs when the bound value changes.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example prints the value of the <see cref="System.Windows.Forms.BindingManagerBase.Current"/> object 
   in a <see cref="System.Windows.Forms.BindingManagerBase"/> in the <see cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event. The example
   assumes the data source is a <see cref="System.Data.DataTable"/> containing a <see cref="System.Data.DataColumn"/> named "CustName".</para>
			<codelink SampleID="Classic BindingManagerBase.Current Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase.OnCurrentChanged"/>
	</doc>
	<doc for="BindingManagerBase.GetItemProperties1">
		<summary>
			<para>Gets the collection of property descriptors for the
      binding using the specified <see cref="System.Collections.ArrayList"/> .</para>
		</summary>
		<param name=" dataSources">An <see cref="System.Collections.ArrayList"/> containing the data sources.</param>
		<param name="listAccessors">An <see cref="System.Collections.ArrayList"/> containing the table's bound properties.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/>that represents the property descriptors
   for the binding.</para>
		</returns>
		<remarks>
			<para>This method is used by developers creating data-bound controls.</para>
		</remarks>
	</doc><doc for="BindingManagerBase.GetListName">
		<summary>
			<para>When overridden in a derived class, gets the name of the
      list supplying the data for the binding.</para>
		</summary>
		<param name="listAccessors">An <see cref="System.Collections.ArrayList"/> containing the table's bound properties.</param>
		<returns>
			<para>The name of the list supplying the data for the binding.</para>
		</returns>
	</doc><doc for="BindingManagerBase.GetItemProperties">
		<overload>
			<para> Get or sets the list of property descriptors for the data source.</para>
		</overload>
		<summary>
			<para>When overridden in a derived class, gets the collection of property descriptors for the binding.</para>
		</summary>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/>that represents the property descriptors for the binding.</para>
		</returns>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.BindingManagerBase.GetItemProperties"/> method to return a <see cref="System.ComponentModel.PropertyDescriptorCollection"/>. The
   example prints the <see cref="System.ComponentModel.MemberDescriptor.Name"/> and value of the current <see cref="System.Data.DataColumn"/> using
   the <see cref="System.ComponentModel.PropertyDescriptor"/> object's <see cref="System.ComponentModel.PropertyDescriptor.GetValue"/> method.</para>
			<codelink SampleID="Classic BindingManagerBase.GetItemProperties Example" SnippetID="1"/>
		</example>
	</doc><doc for="BindingManagerBase.GetItemProperties2">
		<summary>
			<para> Gets the list of properties of
      the items managed by this <see cref="System.Windows.Forms.BindingManagerBase"/>.</para>
		</summary>
		<param name="listType">The <see cref="System.Type"/> of the bound list.</param>
		<param name=" offset">A counter used to recursively call the method.</param>
		<param name=" dataSources">An <see cref="System.Collections.ArrayList"/> containing the data sources.</param>
		<param name=" listAccessors">An <see cref="System.Collections.ArrayList"/> containing the table's bound properties.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/>that represents the property descriptors
   for the binding.</para>
		</returns>
		<remarks>
			<para>This overload is used by developers creating data-bound
      controls.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.BindingManagerBase.GetItemProperties"/> method to return a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> object for a <see cref="System.Windows.Forms.BindingManagerBase"/>. The
   example then prints out the <see cref="System.ComponentModel.MemberDescriptor.Name"/> and <see cref="System.ComponentModel.PropertyDescriptor.PropertyType"/> of each
<see cref="System.ComponentModel.PropertyDescriptor"/> in the collection.</para>
			<codelink SampleID="Classic BindingManagerBase.GetItemProperties2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="BindingManagerBase.RemoveAt">
		<summary>
			<para>When overridden in a derived class, deletes the row at the specified index from the underlying list.</para>
		</summary>
		<param name="index">The index of the row to delete.</param>
		<exception cref="System.IndexOutOfRangeException">There is no row at the specified <paramref name="index"/>.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase.RemoveAt"/> method relies on the underlying data source to determine how the
   method behaves. (See the <see cref="System.Windows.Forms.Binding"/> class for a list of supported data
   sources). For classes that implement <see cref="System.Collections.IList"/>, <see cref="System.ComponentModel.IBindingList"/>, <see cref="System.ComponentModel.ITypedList"/>, as well as strongly
   typed classes that implement <see cref="System.Collections.IList"/>, the <see cref="System.Windows.Forms.BindingManagerBase.RemoveAt"/> method actually
   deletes the row in the underlying list instead of removing it.</para>
			<para>If the underlying list implements the <see cref="System.ComponentModel.IBindingList"/> interface, the <see cref="System.ComponentModel.IBindingList.AllowRemove"/> property must return
<see langword="true"/>. If the underlying list implements the <see cref="System.Collections.IList"/> 
interface, the <see cref="System.Collections.IList.IsFixedSize"/> property
must return <see langword="false"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="BindingManagerBase_RemoveAt" SnippetID="1"/>
		</example>
	</doc><doc for="BindingManagerBase.SuspendBinding">
		<summary>
			<para>When overridden in a derived class, suspends data binding.</para>
		</summary>
		<remarks>
			<para>
				<see cref="System.Windows.Forms.BindingManagerBase.SuspendBinding"/> and <see cref="System.Windows.Forms.BindingManagerBase.ResumeBinding"/> are two methods that allow the temporary
   suspension and resumption of data binding. You would typically suspend data
   binding if the user must be allowed to make several edits to data fields before
   validation occurs. For example, if one field must be changed in
   accordance with a second, but where validating the first field would cause
   the second field to be in error. </para>
		</remarks>
		<example>
			<codelink SampleID="BindingManagerBase_Suspend_Resume_Binding" SnippetID="2"/>
		</example>
	</doc><doc for="BindingManagerBase.ResumeBinding">
		<summary>
			<para>When overridden in a derived class, resumes data binding.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.BindingManagerBase.SuspendBinding"/> and <see cref="System.Windows.Forms.BindingManagerBase.ResumeBinding"/> are two methods that allow the temporary
   suspension and resumption of data binding. You would typically suspend data
   binding if the user must be allowed to make several edits to data fields before
   validation occurs. For example, if one field must be changed in
   accordance with a second, but where validating the first field would cause
   the second field to be in error. </para>
		</remarks>
		<example>
			<codelink SampleID="BindingManagerBase_Suspend_Resume_Binding" SnippetID="2"/>
		</example>
	</doc><doc for="BindingManagerBase.CancelCurrentEdit">
		<summary>
			<para>When overridden in a derived class, cancels the current edit.</para>
		</summary>
		<remarks>
			<para>This method is supported only if the data source implements the <see cref="System.ComponentModel.IEditableObject"/> interface. If the object does not
   implement the <see cref="System.ComponentModel.IEditableObject"/> interface, changes made to the data will
   not be discarded.</para>
			<para>Calling the <see cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/> method causes the
<see cref="System.Windows.Forms.Binding.Format"/> event to occur.</para>
		</remarks>
		<example>
			<para>The following example demonstrates both the <see cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/> and the <see cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/> methods. When you 
   call the <see cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/> method, changes made to
   the data are rejected. When you call the <see cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/>
   
   method, the changes are kept. </para>
			<codelink SampleID="BindingManagerBase.CancelCurrentEdit Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/>
	</doc>
	<doc for="BindingManagerBase.EndCurrentEdit">
		<summary>
			<para>When overridden in a derived class, ends the current edit.</para>
		</summary>
		<remarks>
			<para>This method is supported only if the data source implements the <see cref="System.ComponentModel.IEditableObject"/>
interface. In that case, changes will be saved. If the object does not
implement the <see cref="System.ComponentModel.IEditableObject"/> interface, changes made to the data will
not be saved.</para>
		</remarks>
		<example>
			<para>The following example demonstrates both the <see cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/> and the <see cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/> methods. When you 
   call the <see cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/> method, changes made to
   the data are rejected. When you call the <see cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/>
   
   method, the changes are kept. </para>
			<codelink SampleID="BindingManagerBase.CancelCurrentEdit Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/>
	</doc>
	<doc for="BindingManagerBase">
		<summary>
			<para>Manages all <see cref="System.Windows.Forms.Binding"/> objects that are bound to the same data
   source and data member. This class is abstract.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase"/>
enables the synchronization of data-bound controls on a Windows form that are
bound to the same data source. (To simple-bind a control to a data source, add
a <see cref="System.Windows.Forms.Binding"/> object to the
control's <see cref="System.Windows.Forms.ControlBindingsCollection"/>, which is accessed through the <see cref="System.Windows.Forms.Control.DataBindings"/> property).
For example, suppose that a form contains two <see cref="System.Windows.Forms.TextBox"/>
controls that are bound to the same data source but to different columns (The
data source might be a <see cref="System.Data.DataTable"/>
that contains customer names, while the columns might contain the
first name and last names). The two controls must be synchronized in order
to display the correct first and last names together for the same customer. The
<see cref="System.Windows.Forms.CurrencyManager"/> 
, which inherits from the <see cref="System.Windows.Forms.BindingManagerBase"/> class,
accomplishes this synchronization by maintaining a pointer to the current item for
the list. The <see cref="System.Windows.Forms.TextBox"/> controls are bound to the current item
so they display the information for the same row. When the current item changes,
the <see cref="System.Windows.Forms.CurrencyManager"/> notifies all the bound controls so that
they can refresh their data. Furthermore, you can set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/>
property
to specify the row in the <see cref="System.Data.DataTable"/> that the controls are
point to. To determine how many rows exist
in the list, use the <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property.</para>
			<para>The <see cref="System.Windows.Forms.CurrencyManager"/> is necessary because
data sources do not necessarily maintain a current-item pointer. For instance,
arrays and <see cref="System.Collections.ArrayList"/> objects can be
data sources, but they do not have a property that returns
the current item. To get the current item, use the <see cref="System.Windows.Forms.BindingManagerBase.Current"/> property.</para>
			<para>The <see cref="System.Windows.Forms.PropertyManager"/> also
inherits from the <see cref="System.Windows.Forms.BindingManagerBase"/> , and it
is used to maintain the current property of an object, rather than the
property of a current object in a list. For this reason, trying to set the
<see cref="System.Windows.Forms.BindingManagerBase.Position"/> or <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property for a <see cref="System.Windows.Forms.PropertyManager"/> 
has no effect.</para>
			<para>To create a <see cref="System.Windows.Forms.BindingManagerBase"/> object, use the <see cref="System.Windows.Forms.BindingContext"/> class--which returns either a <see cref="System.Windows.Forms.CurrencyManager"/> or a <see cref="System.Windows.Forms.PropertyManager"/>, depending on the data source being managed. </para>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.Windows.Forms.BindingManagerBase"/>, you must override the following members:
<see cref="System.Windows.Forms.BindingManagerBase.AddNew"/>, <see cref="System.Windows.Forms.BindingManagerBase.Count"/>, <see cref="System.Windows.Forms.BindingManagerBase.CancelCurrentEdit"/>, <see cref="System.Windows.Forms.BindingManagerBase.Current"/>, <see cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/>, <see cref="System.Windows.Forms.BindingManagerBase.GetItemProperties"/>, <see cref="System.Windows.Forms.BindingManagerBase.OnCurrentChanged"/>, <see cref="System.Windows.Forms.BindingManagerBase.Position"/>, <see cref="System.Windows.Forms.BindingManagerBase.RemoveAt"/>, <see cref="System.Windows.Forms.BindingManagerBase.ResumeBinding"/>, <see cref="System.Windows.Forms.BindingManagerBase.SuspendBinding"/>, and <see cref="System.Windows.Forms.BindingManagerBase.UpdateIsBinding"/>.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.BindingContext"/> to return a <see cref="System.Windows.Forms.BindingManagerBase"/> object for a specific data source. (The
   example assumes you have declared <see langword="myBindingManagerBase "/>in the
   Declarations section of the module.) The example then adds event delegates to the
<see cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/> and <see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/> events. Lastly, the example contains four 
   methods (<see langword="MoveNext"/>, <see langword="MovePrevious"/>,
<see langword="MoveFirst"/>, and <see langword="MoveLast"/> 
) that
increment or decrement the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> property, and set the
<see cref="System.Windows.Forms.BindingManagerBase.Position"/> to the first or last row in the list. 
The last row in the list is determined by using the <see cref="System.Windows.Forms.BindingManagerBase.Count"/> property.</para>
			<codelink SampleID="Classic BindingManagerBase Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
