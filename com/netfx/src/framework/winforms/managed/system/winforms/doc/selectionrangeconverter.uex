<docs>
	<doc for="SelectionRangeConverter.ConvertFrom"><nodoc/>
		<summary>
   Converts the given object to the converter's native type.
   </summary>
		<returns>
   The converted object.  This will throw an excetpion if the converson
   could not be performed.
   </returns>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="SelectionRangeConverter.ConvertTo"><nodoc/>
		<summary>
   Converts the given object to another type.  The most common types to convert
   are to and from a string object.  The default implementation will make a call
   to ToString on the object if the object is valid and if the destination
   type is string.  If this cannot convert to the desitnation type, this will
   throw a NotSupportedException.
   </summary>
		<returns>
   The converted object.
   </returns>
	</doc><doc for="SelectionRangeConverter.CreateInstance"><nodoc/>
		<summary>
   Creates an instance of this type given a set of property values
   for the object.  This is useful for objects that are immutable, but still
   want to provide changable properties.
   </summary>
		<returns>
   The newly created object, or null if the object could not be created.
   The default implementation returns null.
   </returns>
	</doc><doc for="SelectionRangeConverter.GetCreateInstanceSupported"><nodoc/>
		<summary>
   Determines if changing a value on this object should require a call to
   CreateInstance to create a new value.
   </summary>
		<returns>
   Returns true if CreateInstance should be called when a change is
   made to one or more properties of this object.
   </returns>
	</doc><doc for="SelectionRangeConverter.CanConvertFrom">
		<nodoc/>
		<summary>
   Determines if this converter can convert an object in the given source
   type to the native type of the converter.
   </summary>
		<returns>
   True if this object can perform the conversion.
   </returns>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="SelectionRangeConverter.CanConvertTo">
		<nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can
      convert an object to the given destination type using the context.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion; otherwise,
<see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
<see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="SelectionRangeConverter.GetProperties">
		<nodoc/>
		<summary>
			<para>Retrieves the set of properties for this type. By default, a type has
      does not return any properties. An easy implementation of this method
      can just call TypeDescriptor.GetProperties for the correct data type.</para>
		</summary>
		<returns>
			<para>The set of properties that should be exposed for this data type. If no
      properties should be exposed, thsi may return null. The default
      implementation always returns null.</para>
		</returns>
	</doc><doc for="SelectionRangeConverter.GetPropertiesSupported">
		<nodoc/>
		<summary>
			<para>Determines if this object supports properties. By default, this
      is false.</para>
		</summary>
		<returns>
			<para>Returns true if GetProperties should be called to find
      the properties of this object.</para>
		</returns>
	</doc><doc for="SelectionRangeConverter">
		<summary>
			<para>Provides a type converter to convert <see cref="System.Windows.Forms.SelectionRange"/> objects to and from various other
   representations.</para>
		</summary>
		<remarks>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
   You should never
   create a <see cref="System.Windows.Forms.SelectionRangeConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.SelectionRange"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
</docs>
