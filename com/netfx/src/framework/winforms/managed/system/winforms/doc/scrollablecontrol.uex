<docs>
	<doc for="ScrollableControl.ScrollStateAutoScrolling">
		<internalonly/>
		<summary/>
	</doc>
	<doc for="ScrollableControl.ScrollStateHScrollVisible">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollableControl.ScrollStateVScrollVisible">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollableControl.ScrollStateUserHasScrolled">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollableControl.ScrollStateFullDrag">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollableControl.SCROLL_LINE">
		<summary>
     Number of pixels to scroll the client region as a "line" for autoscroll.
 </summary>
	</doc>
	<doc for="ScrollableControl.displayRect">
		<summary>
     Current size of the displayRect.
 </summary>
	</doc>
	<doc for="ScrollableControl.scrollMargin">
		<summary>
     Current margins for autoscrolling.
 </summary>
	</doc>
	<doc for="ScrollableControl.requestedScrollMargin">
		<summary>
     User requested margins for autoscrolling.
 </summary>
	</doc>
	<doc for="ScrollableControl.scrollPosition">
		<summary>
     User requested autoscroll position - used for form creation only.
 </summary>
	</doc>
	<doc for="ScrollableControl.AutoScrollMinSize">
		<summary>
			<para> Gets or sets the minimum size of the auto-scroll.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> object that represents the minimum height and width of the scrollbars in pixels.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/> 
 property is used to manage the screen size allocated
 to the automatic scroll bars.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScroll"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>
	</doc>
	<doc for="ScrollableControl.CreateParams">
		<internalonly/>
		<summary>
			<para>
       Retrieves the CreateParams used to create the window.
       If a subclass overrides this function, it must call the base implementation.
    </para>
		</summary>
		<seealso cref="Control.CreateParams"/>
		<keyword term=""/>
	</doc>
	<doc for="ScrollableControl.DisplayRectangle">
		<internalonly/>
		<summary>
			<para>
       Retreives the current display rectangle. The display rectangle
       is the virtual display area that is used to layout components.
       The position and dimensions of the Form's display rectangle
       change during autoScroll.
    </para>
		</summary>
		<value>
			<para>
       current display rectangle.
    </para>
		</value>
		<keyword term=""/>
	</doc>
	<doc for="ScrollableControl.HScroll">
		<summary>
			<para>Gets or sets a value indicating whether the horizontal scroll bar is visible.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the horizontal scroll bar is visible; otherwise, <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Windows.Forms.ScrollableControl.VScroll"/>
	</doc>
	<doc for="ScrollableControl.VScroll">
		<summary>
			<para> Gets or sets a value indicating whether the vertical scroll bar is visible.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the vertical scroll bar is visible; otherwise, <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Windows.Forms.ScrollableControl.HScroll"/>
	</doc>
	<doc for="ScrollableControl.DockPadding">
		<summary>
			<para>Gets the dock padding settings for all edges of the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> object that represents the padding for all the
    edges of a docked control.</para>
		</value>
		<remarks>
			<para>This property controls the border inside of this control for docked components.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been 
    instantiated on a form, and a class level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPadding Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/>
	</doc>
	<doc for="ScrollableControl.GetScrollState">
		<internalonly/>
		<summary>
			<para>
       Tests a given scroll state bit to determine if it is set.
    </para>
		</summary>
		<param name="bit">
    The scroll state bit to test.
 </param>
		<returns>
			<para>
				<see langword="true"/> if the given bit is set; 
       otherwise, <see langword="false"/> .
    </para>
		</returns>
		<seealso cref="System.Windows.Forms.ScrollableControl.SetScrollState"/>
	</doc>
	<doc for="ScrollableControl.OnLayout">
		<internalonly/>
		<summary>
    Forces the layout of any docked or anchored child controls.
 </summary>
	</doc>
	<doc for="ScrollableControl.OnMouseWheel">
		<internalonly/>
		<summary>
     Handles mouse wheel processing for our scrollbars.
 </summary>
	</doc>
	<doc for="ScrollableControl.OnVisibleChanged">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollableControl.SetVisibleScrollbars">
		<summary>
     Actually displays or hides the horiz and vert autoscrollbars. This will
     also adjust the values of formState to reflect the new state
 </summary>
		<param name="horiz">
     True if the horiz scrollbar should be displayed
 </param>
		<param name="vert">
     True if the vert scrollbar should be displayed
 </param>
		<returns>
     True if the form needs to be re-layed out
 </returns>
	</doc>
	<doc for="ScrollableControl.SetDisplayRectangleSize">
		<summary>
     Sets the width and height of the virtual client area used in
     autoscrolling. This will also adjust the x and y location of the
     virtual client area if the new size forces it.
 </summary>
		<param name="width">
     New width of the virtual client area
 </param>
		<param name="height">
     New height of the virtual client area
 </param>
		<returns>
     True if the form needs to be re-layed out
 </returns>
	</doc>
	<doc for="ScrollableControl.SetScrollState">
		<internalonly/>
		<summary>
			<para>
       Sets a given scroll state bit.
    </para>
		</summary>
		<param name="bit">
    The scroll state bit to set.
 </param>
		<param name="value">
    The value to set the bit.
 </param>
		<seealso cref="System.Windows.Forms.ScrollableControl.GetScrollState"/>
	</doc>
	<doc for="ScrollableControl.ShouldSerializeAutoScrollPosition">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>
 property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the 
 <see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/> property value has changed 
    from its default; otherwise, <see langword="false"/>
    .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the
    <see cref="System.Windows.Forms.ScrollableControl"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.ScrollableControl"/> class. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollMargin"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollMinSize"/>
	</doc>
	<doc for="ScrollableControl.ShouldSerializeAutoScrollMargin">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the 
 <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/> property value has changed from its default; otherwise, <see langword="false"/> 
 .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the <see cref="System.Windows.Forms.ScrollableControl"/> or creating your own control incorporating the <see cref="System.Windows.Forms.ScrollableControl"/> class.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollPosition"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollMinSize"/>
	</doc>
	<doc for="ScrollableControl.ShouldSerializeAutoScrollMinSize">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
 property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the 
 <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/> property value has changed from its default; otherwise, <see langword="false"/> 
 .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the <see cref="System.Windows.Forms.ScrollableControl"/> or creating your own control incorporating the <see cref="System.Windows.Forms.ScrollableControl"/> class.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollPosition"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.ShouldSerializeAutoScrollMargin"/>
	</doc>
	<doc for="ScrollableControl.SyncScrollbars">
		<summary>
     Updates the value of the autoscroll scrollbars based on the current form
     state. This is a one-way sync, updating the scrollbars only.
 </summary>
	</doc>
	<doc for="ScrollableControl.UpdateFullDrag">
		<summary>
     Queries the system to determine the users preference for full drag
     of windows.
 </summary>
	</doc>
	<doc for="ScrollableControl.WmVScroll">
		<summary>
     WM_VSCROLL handler
 </summary>
	</doc>
	<doc for="ScrollableControl.WmHScroll">
		<summary>
     WM_HSCROLL handler
 </summary>
	</doc>
	<doc for="ScrollableControl.WndProc">
		<summary>
    The button's window procedure.  Inheriting classes can override this
    to add extra functionality, but should not forget to call
    base.wndProc(m); to ensure the button continues to function properly.
 </summary>
		<param name="m">
    A Windows Message Object.
 </param>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.DockPaddingEdges">
		<summary>
     Creates a new DockPaddingEdges. The specified owner will
     be notified when the values are changed.
 </summary>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.All">
		<summary>
			<para> 
       Gets or sets the padding width for all edges of a docked control.</para>
		</summary>
		<value>
			<para>The padding width in pixels.</para>
		</value>
		<remarks>
			<para>The
       padding width assigned to this property is applied to all
       edges of the docked control.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form, and a class-level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPaddingEdges Example" SnippetID="1"/>
		</example>
		<seealso cref="ScrollableControl.DockPaddingEdges.Bottom"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Top"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Left"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Right"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.Bottom">
		<summary>
			<para> 
       Gets or sets the padding width for the bottom edge of a docked control.</para>
		</summary>
		<value>
			<para>The padding width in pixels.</para>
		</value>
		<remarks>
			<para>The
       padding width
       assigned to this property is applied only to the bottom edge of the docked control.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form, and a class-level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPaddingEdges Example" SnippetID="1"/>
		</example>
		<seealso cref="ScrollableControl.DockPaddingEdges.All"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Top"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Left"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Right"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.Left">
		<summary>
			<para>Gets or sets the padding width for the left edge of a docked control.</para>
		</summary>
		<value>
			<para>The padding width in pixels.</para>
		</value>
		<remarks>
			<para>The
       padding width assigned to this property is applied only to the left edge of the docked control.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form, and a class-level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPaddingEdges Example" SnippetID="1"/>
		</example>
		<seealso cref="ScrollableControl.DockPaddingEdges.All"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Bottom"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Top"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Right"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.Right">
		<summary>
			<para>Gets or sets the padding width for the right edge of a docked control.</para>
		</summary>
		<value>
			<para>The padding width in pixels.</para>
		</value>
		<remarks>
			<para>The
       padding width assigned to this property is applied only to the right edge of the docked control.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form, and a class-level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPaddingEdges Example" SnippetID="1"/>
		</example>
		<seealso cref="ScrollableControl.DockPaddingEdges.All"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Bottom"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Top"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Left"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.Top">
		<summary>
			<para>Gets or sets the padding width for the top edge of a docked control.</para>
		</summary>
		<value>
			<para>The padding width in pixels.</para>
		</value>
		<remarks>
			<para>The
       padding width assigned to this property is applied only to the top edge of the docked control.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form, and a class-level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPaddingEdges Example" SnippetID="1"/>
		</example>
		<seealso cref="ScrollableControl.DockPaddingEdges.All"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Bottom"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Left"/>
		<seealso cref="ScrollableControl.DockPaddingEdges.Right"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ResetAll">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ResetBottom">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ResetLeft">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ResetRight">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ResetTop">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ShouldSerializeAll">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ShouldSerializeBottom">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ShouldSerializeLeft">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ShouldSerializeRight">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ShouldSerializeTop">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.ToString">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdgesConverter">
		<internalonly/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges.Equals">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ScrollableControl.DockPaddingEdges.GetHashCode">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ScrollableControl.ScaleCore">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DockPaddingEdges.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollableControl.ScrollableControl">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ScrollableControl"/> class.</para>
		</summary>
	</doc>
	<doc for="ScrollableControl.AutoScroll">
		<summary>
			<para> Gets or sets a value indicating whether the container will allow the user to scroll to any controls placed outside of its visible boundaries.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the container allows auto-scrolling; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see langword="true"/>, this property allows the container to have a virtual size that is larger than its visible boundaries.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example evaluates the location of a text box and changes the appearance and behavior of its parent container, the panel control. This example assumes a <see cref="System.Windows.Forms.Panel"/> control, <see cref="System.Windows.Forms.TextBox"/>, and <see cref="System.Windows.Forms.Button"/> have been instantiated. Place the text box on the panel so that it overlaps at least one of the panel's edges. Call this subprocedure on the click of a button to see the difference in the panel's behavior and appearance.</para>
			<codelink SampleID="Classic ScrollableControl.AutoScroll Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
	</doc>
	<doc for="ScrollableControl.SetAutoScrollMargin">
		<summary>
			<para>Sets the size
      of the auto-scroll margins.</para>
		</summary>
		<param name="x">The <see cref="Size.Width"/> value.</param>
		<param name="y">The <see cref="System.Drawing.Size.Height"/> value.</param>
		<remarks>
			<para>The
      margin sets the width and height of the border around each control. This
      margin is used to determine when scroll bars are needed on the container and
      where to scroll to when a control is selected.</para>
			<note type="note">
      If a negative number is passed in as the <paramref name="x "/>or <paramref name="y "/>values, the
      value will be reset to zero.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example evaluates the location of a text box and changes the appearance and behavior of its parent container, the panel control. This example assumes a <see cref="System.Windows.Forms.Panel"/> control, <see cref="System.Windows.Forms.TextBox"/>, and <see cref="System.Windows.Forms.Button"/> have been instantiated. Place the box on the panel so that it overlaps at least one of the panel's edges. Call this subprocedure on the click of a button to see the difference in the panel's behavior and appearance.</para>
			<codelink SampleID="Classic ScrollableControl.SetAutoScrollMargin Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScroll"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdges">
		<summary>
			<para>Determines the border padding for
      docked controls.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> class creates a margin on a
   given edge or all edges of a docked control. You can set the width of this
   margin for each individual edge by setting the following properties: <see cref="ScrollableControl.DockPaddingEdges.Bottom"/>, <see cref="ScrollableControl.DockPaddingEdges.Top"/>, <see cref="ScrollableControl.DockPaddingEdges.Left"/>, <see cref="ScrollableControl.DockPaddingEdges.Right"/>.
   Alternatively, you can set all the edges to the same width simultaneously by
   setting the <see cref="ScrollableControl.DockPaddingEdges.All"/>
   property. If the size of the
   control is too large for its container, the control will be resized to fit
   in the container, minus the specified margin width.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example docks a button in a panel control and cycles through the <see cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/> properties, setting each individually on the click of the button. This code assumes a <see cref="System.Windows.Forms.Panel"/> control and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form, and a class-level member variable named <c>myCounter</c> has been declared as a 32-bit signed integer. This code should be called on the <see cref="System.Windows.Forms.Control.Click"/> event of the button.</para>
			<codelink SampleID="Classic ScrollableControl.DockPaddingEdges Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl"/>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdgesConverter.GetProperties">
		<nodoc/>
		<summary>
   Retrieves the set of properties for this type.  By default, a type has
   does not return any properties.  An easy implementation of this method
   can just call TypeDescriptor.GetProperties for the correct data type.
   </summary>
		<param name="context">
   A type descriptor through which additional context can be provided.
   </param>
		<param name="value">
   The value of the object to get the properties for.
   </param>
		<param name="attributes">
		</param>
		<returns>
   The set of properties that should be exposed for this data type.  If no
   properties should be exposed, thsi can return null.  The default
   implementation always returns null.
   </returns>
	</doc>
	<doc for="ScrollableControl.DockPaddingEdgesConverter.GetPropertiesSupported">
		<nodoc/>
		<summary>
			<para>Determines if this object supports properties. By default, this
      is false.</para>
		</summary>
		<param name="context">A type descriptor through which additional context can be provided. </param>
		<returns>
			<para>Returns true if GetProperties should be called to find
      the properties of this object.</para>
		</returns>
	</doc>
	<doc for="ScrollableControl.AutoScrollMargin">
		<summary>
			<para>Gets or sets the size of the auto-scroll margin.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> object that represents the height and width of the auto-scroll margin in pixels.</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="Size.Height"/> or <see cref="Size.Width"/> value assigned is less than 0.</exception>
		<remarks>
			<para> The auto-scroll margin is the distance
      between any child controls and the edges of the scrollable parent control. The
   <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/> size is added to the
      size of any child controls contained in the scrollable control to determine
      whether or not scroll bars are needed. The <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/> property is evaluated when the
      parent scrollable control is resized or the individual child controls
      are brought into view, and is used to determine if scroll bars need to be
      displayed. Docked controls are excluded from the calculations that determine
      if scroll bars need to be displayed.</para>
			<note type="note">
      
      If a docked control's <see cref="System.Windows.Forms.Control.Dock"/> property is set to <see cref="System.Windows.Forms.DockStyle.Fill" qualify="true"/> , the
      control fills the parent scrollable control and the docked control is
      ignored when using the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
      to determine whether scroll bars are needed.
      
   </note>
			<para> If the distance from the edge of a child
      control to the parent scrollable control is less than the value assigned to the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/> property and the <see cref="System.Windows.Forms.ScrollableControl.AutoScroll"/> property is set to <see langword="true"/> ,
      the appropriate scroll bar is displayed.</para>
			<note type="note">
      It is advisable, when docking controls within a scrollable control, to add a child scrollable control such as a <see cref="System.Windows.Forms.Panel"/> to contain any other controls that might
      require scrolling. The child <see cref="System.Windows.Forms.Panel"/>
      control should be added to the scrollable control and its <see cref="System.Windows.Forms.Control.Dock"/> property set to <see cref="System.Windows.Forms.DockStyle.Fill" qualify="true"/> and its <see cref="System.Windows.Forms.ScrollableControl.AutoScroll"/> property set to <see langword="true"/>. The
   <see cref="System.Windows.Forms.ScrollableControl.AutoScroll"/> property of the parent scrollable control
      should be set to <see langword="false"/>.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.Panel"/> . The example evaluates the location of a text box and changes the appearance and behavior of its parent container, the panel control. This example assumes a <see cref="System.Windows.Forms.Panel"/> control, <see cref="System.Windows.Forms.TextBox"/>, and <see cref="System.Windows.Forms.Button"/> have been instantiated. Place the text box on the panel so that it overlaps at least one of the panel's edges. Call this subprocedure on the click of a button to see the difference in the panel's behavior and appearance.</para>
			<codelink SampleID="Classic ScrollableControl.AutoScroll Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScroll"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.SetAutoScrollMargin"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
	</doc>
	<doc for="ScrollableControl.ScrollControlIntoView">
		<internalonly/>
		<summary>
			<para> Scrolls the
      specified control into view on an auto-scroll enabled control.</para>
		</summary>
		<param name="activeControl">The control to scroll into view.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ScrollableControl.AutoScroll"/> property must be set to
<see langword="true"/>, and at least one of the scroll bars, horizontal or 
   vertical, must also be visible, for the <see cref="System.Windows.Forms.ScrollableControl.ScrollControlIntoView"/> method to have an
   effect. To make the horizontal and vertical
   scroll bars visible, the <see cref="System.Windows.Forms.ScrollableControl.HScroll"/> and <see cref="System.Windows.Forms.ScrollableControl.VScroll"/> properties,
   respectively, must be set to
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example enables auto-scrolling for a form, resizes the form,
      and ensures that a button remains visible after the form is resized. This
      example assumes that you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Button"/> named <c>button2</c> on it.</para>
			<codelink SampleID="Windows.Forms.Control Member5" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScroll"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.HScroll"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.VScroll"/>
	</doc>
	<doc for="ScrollableControl.AdjustFormScrollbars"><nodoc/>
		<summary>
			<para>Adjusts the auto-scroll bars on the container based on the current control positions and the control currently selected.
      </para>
		</summary>
		<param name="displayScrollbars">
			<see langword="true"/> to show the scroll bars; otherwise, <see langword="false"/>.</param>
	</doc>
	<doc for="ScrollableControl.SetDisplayRectLocation"><nodoc/>
		<summary>
   Adjusts the displayRect to be at the offset x, y. The contents of the
   Form is scrolled using Windows.ScrollWindowEx.
   </summary>
		<param name="x">
   X Offset (not delta!)
   </param>
		<param name="y">
   Y Offset (not delta!)
   </param>
	</doc>
	<doc for="ScrollableControl">
		<summary>
			<para>Defines a base class for controls that support auto-scrolling behavior.</para>
		</summary>
		<remarks>
			<para>You do not typically use this class directly. The <see cref="System.Windows.Forms.ContainerControl"/> and <see cref="System.Windows.Forms.Panel"/> classes inherit from this class.</para>
			<para>The <see cref="System.Windows.Forms.ScrollableControl"/> class acts as a base class
for controls that require the ability to scroll. To allow a control to
display scroll bars as needed, set the <see cref="System.Windows.Forms.ScrollableControl.AutoScroll"/> property to
<see langword="true"/> and set the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/> property to the desired size. When the 
control is sized smaller than the specified minimum size, or a child control is
located outside the bounds of the control, the appropriate scroll bars are
displayed.</para>
			<para> To manually override which scroll bars are visible, set the <see cref="System.Windows.Forms.ScrollableControl.VScroll"/> and <see cref="System.Windows.Forms.ScrollableControl.HScroll"/> properties. If either
property is set to <see langword="false"/>, the corresponding scroll bar will not
be visible, even if the <see cref="System.Windows.Forms.ScrollableControl.AutoScroll"/> property is set to <see langword="true"/>.</para>
			<para> When adding controls to a scrollable
   control the x-coordinate and y-coordinate of the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/> must be added to
   or subtracted as an offset from the corresponding coordinates of the <see cref="System.Windows.Forms.Control.Location" qualify="true"/> property of the control being
   added. To add a control above or to the left of the scroll position, the offset
   must be added to the desired location. Alternatively, to add a control below or
   to the right of the scroll position, the offset must be subtracted.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Panel"/>
		<seealso cref="System.Windows.Forms.ContainerControl"/>
	</doc>
	<doc for="ScrollableControl.AutoScrollPosition">
		<summary>
			<para>Gets or sets the location of the auto-scroll position.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Point"/> object that represents the auto-scroll position in pixels.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/> property is used to adjust the position of controls contained on the scrollable control.</para>
			<para>When adding controls to a scrollable control the 
   x-coordinate and y-coordinate of the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/> must be
   added to or subtracted as an offset from the corresponding coordinates of
   the <see cref="System.Windows.Forms.Control.Location" qualify="true"/> property of the control being
   added. To add a control above or to the left of the scroll position, the offset
   must be added to the desired location. Alternatively, to add a control below or
   to the right of the scroll position, the offset must be subtracted.</para>
			<note type="note">
				<see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/> represents the location
   of the scrollable control's display rectangle. The <see cref="System.Drawing.Point.X"/> and <see cref="System.Drawing.Point.Y"/> coordinate
   values retrieved are negative if the control has scrolled away from its
   starting position (0,0). However, when setting this property, you must assign positive
<see cref="System.Drawing.Point.X"/> 
and <see cref="System.Drawing.Point.Y"/> values to scroll away from the starting
position and negative values to move toward it.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ScrollableControl"/> derived class <see cref="System.Windows.Forms.Panel"/> and adds a button to the
   upper left corner of the scrollable area. The example allows for the offset
   determined by the <see cref="System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>. This example
   assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.Panel"/>with a <see cref="System.Windows.Forms.Button"/> on it. To enable auto-scrolling, you should
   place the button outside of the client area of the <see cref="System.Windows.Forms.Panel"/> . </para>
			<codelink SampleID="Windows.Forms.ScrollableControl" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScroll"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
	</doc>
</docs>
