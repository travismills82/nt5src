<docs>
	<doc for="DataObject.DataObject">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/> class, with the specified <see cref="System.Windows.Forms.IDataObject"/>.</para>
		</summary>
		<param name="data">An <see cref="System.Windows.Forms.IDataObject"/> to store.</param>
		<remarks>
			<para>The new instance provides both the <see cref="System.Windows.Forms.IDataObject"/> and the data object interfaces 
    for the specified data.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.DataObject1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/> class, with the specified data object.</para>
		</summary>
		<param name="data">The data object to store.</param>
		<remarks>
			<para>The new instance provides both the <see cref="System.Windows.Forms.IDataObject"/> and the data object'/&gt; interfaces 
    for the specified data. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.GetDistinctStrings">
		<summary>
     Retrieves a list of distinct strings from the array.
 </summary>
	</doc>
	<doc for="DataObject.GetMappedFormats">
		<summary>
     Returns all the "synonyms" for the specified format.
 </summary>
	</doc>
	<doc for="DataObject.GetMappedFormats1">
		<summary>
     Returns all distinct "synonyms" for the each of the formats.
 </summary>
	</doc>
	<doc for="DataObject.GetTymedUseable">
		<summary>
     Returns true if the tymed is useable.
 </summary>
	</doc>
	<doc for="DataObject.GetDataIntoOleStructs">
		<summary>
     Populates Ole datastructs from a Windows Forms dataObject. This is the core
     of Windows Forms to OLE conversion.
 </summary>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleDAdvise">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleDUnadvise">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleEnumDAdvise">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleEnumFormatEtc">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleGetCanonicalFormatEtc">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleGetData">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleGetDataHere">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleQueryGetData">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.UnsafeNativeMethods.IOleDataObject.OleSetData">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
		<seealso cref="NativeMethods.IOleDataObject"/>
	</doc>
	<doc for="DataObject.SaveStreamToHandle">
		<summary>
     Saves stream out to handle.
 </summary>
	</doc>
	<doc for="DataObject.SaveFileListToHandle">
		<summary>
     Saves a list of files out to the handle in HDROP format.
 </summary>
	</doc>
	<doc for="DataObject.SaveStringToHandle">
		<summary>
     Save string to handle. If unicode is set to true
     then the string is saved as unicode, else it is saves as DBCS.
 </summary>
	</doc>
	<doc for="DataObject.FormatEnumerator">
		<summary>
     Part of IOleDataObject, used to interop with OLE.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter">
		<summary>
     OLE Converter.  This class embodies the nastiness required to convert from our
     managed types to standard OLE clipboard formats.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.OleDataObject">
		<summary>
     Returns the data Object we are wrapping
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.GetTymedUseable">
		<summary>
     Returns true if the tymed is useable.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.GetDataFromOleIStream">
		<summary>
     Uses IStream and retrieves the specified format from the bound IOleDataObject.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.GetDataFromHGLOBLAL">
		<summary>
     Retrieves the specified form from the specified hglobal.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.GetDataFromOleHGLOBAL">
		<summary>
     Uses HGLOBALs and retrieves the specified format from the bound IOleDataObject.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.GetDataFromOleOther">
		<summary>
     Retrieves the specified format data from the bound IOleDataObject, from
     other sources that IStream and HGLOBAL... this is really just a place
     to put the "special" formats like BITMAP, ENHMF, etc.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.GetDataFromBoundOleDataObject">
		<summary>
     Extracts a managed Object from the innerData of the specified
     format. This is the base of the OLE to managed conversion.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.ReadByteStreamFromHandle">
		<summary>
     Creates an Stream from the data stored in handle.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.ReadObjectFromHandle">
		<summary>
     Creates a new instance of the Object that has been persisted into the
     handle.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.ReadFileListFromHandle">
		<summary>
     Parses the HDROP format and returns a list of strings using
     the DragQueryFile function.
 </summary>
	</doc>
	<doc for="DataObject.OleConverter.ReadStringFromHandle">
		<summary>
     Creates a string from the data stored in handle. If
     unicode is set to true, then the string is assume to be unicode,
     else DBCS (ASCI) is assumed.
 </summary>
	</doc>
	<doc for="DataObject.DataStore">
		<summary>
		</summary>
	</doc>
	<doc for="DataObject">
		<summary>
			<para>Implements a basic data transfer mechanism.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.DataObject"/>
implements the <see cref="System.Windows.Forms.IDataObject"/> interface,
whose methods provide a format-independent
mechanism for data
transfer.</para>
			<para> A <see cref="System.Windows.Forms.DataObject"/> is typically
used with the <see cref="System.Windows.Forms.Clipboard"/> and
in drag-and-drop operations. The <see cref="System.Windows.Forms.DataObject"/> class provides the recommended
implementation of the <see cref="System.Windows.Forms.IDataObject"/> interface. It is suggested that you use
the <see cref="System.Windows.Forms.DataObject"/>
class rather than implementing <see cref="System.Windows.Forms.IDataObject"/>
yourself.</para>
			<para>Multiple pieces of
   data in different formats can be stored in an instance of <see cref="System.Windows.Forms.DataObject"/>. Data is
   retrieved from the instance by its associated format. Because the target
   application might not be known, you can
   increase the likelihood that the data will be in the appropriate format
   for an application by placing the data in a <see cref="System.Windows.Forms.DataObject"/>
   in multiple formats. See <see cref="System.Windows.Forms.DataFormats"/> for the predefined formats.
   You can implement your own format by creating an instance of the <see cref="System.Windows.Forms.DataFormats.Format"/>
   class.</para>
			<para>To store data in an instance of this class, pass the data
   to the constructor or
   call <see cref="System.Windows.Forms.DataObject.SetData"/>. You can add data in other formats to an instance of this class. If you want the data
   you add always to be retrieved in its native format, call <see cref="System.Windows.Forms.DataObject.SetData"/> with the <paramref name="autoConvert "/>parameter set to
<see langword="false"/>. </para>
			<para>Data can be retrieved from a <see cref="System.Windows.Forms.DataObject"/> in any format which is compatible with
<see cref="System.Windows.Forms.DataObject.GetData"/>. For example, text can be converted to Unicode. To retrieve
data in the format in which it was stored, call <see cref="System.Windows.Forms.DataObject.GetData"/> with the <paramref name="autoConvert"/>
parameter set to <see langword="false"/>.</para>
			<para>To determine what formats the data is stored in, call <see cref="System.Windows.Forms.DataObject.GetFormats"/>.
To determine if a format is available, call <see cref="System.Windows.Forms.DataObject.GetDataPresent"/> with the desired format.</para>
		</remarks>
		<example>
			<para>The following example adds
      data in a <see cref="System.Windows.Forms.DataObject"/>.
      First, a new <see cref="System.Windows.Forms.DataObject"/> is created and a component is stored in it.
      Then, it checks to see if data in the appropriate type exists in the <see cref="System.Windows.Forms.DataObject"/>. The result is
      displayed in a text box. This code assumes <c>textBox1</c>
   has been created.</para>
			<codelink SampleID="Classic DataObject Example" SnippetID="1"/>
			<para>The next example retrieves the data stored in a <see cref="System.Windows.Forms.DataObject"/>.
 First, a new <see cref="System.Windows.Forms.DataObject"/> is created with text
 data. Then, the data is retrieved, specifying its format as a string, and
 displayed in a text box. The data format is automatically converted from text to
 string. This code assumes <c>textBox1</c>
 has been created.</para>
			<codelink SampleID="Classic DataObject Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Clipboard"/>
		<seealso cref="System.Windows.Forms.IDataObject"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
	</doc>
	<doc for="DataObject.DataObject2">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/>
class, which can store arbitrary data.</para>
		</summary>
		<example>
			<para>The following example creates an instance of the <see cref="System.Windows.Forms.DataObject"/> class, and adds
   data to the instance. Then it retrieves and displays the data. This code
   assumes <c>textBox1</c>
has been
created.</para>
			<codelink SampleID="Classic DataObject.DataObject2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.DataObject3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/> class, containing the specified data.</para>
		</summary>
		<param name="data">The data to store.</param>
		<example>
			<para>The following example creates
      an instance of <see cref="System.Windows.Forms.DataObject"/> that contains a
      string. The data is retrieved using its data format. The results are displayed
      in a text box. This code assumes <c>textBox1</c>
   has been created.</para>
			<codelink SampleID="Classic DataObject.DataObject3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.DataObject4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DataObject"/> class, containing the specified data and its
   associated format.</para>
		</summary>
		<param name="format">The class type associated with the data. See <see cref="System.Windows.Forms.DataFormats"/> for the predefined formats.</param>
		<param name="data">The data to store.</param>
		<example>
			<para>The following example creates an instance
      of the <see cref="System.Windows.Forms.DataObject"/> class using a
      string that is specified as the string type. The data is retrieved from the
      instance by specifying its format as text. The results are displayed in a text
      box. This code assumes <c>textBox1</c>
   has
   been created.</para>
			<codelink SampleID="Classic DataObject.DataObject4 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.GetData">
		<overload>
			<para>Returns the data associated with the specified data
      format.</para>
		</overload>
		<summary>
			<para>Returns the data associated with the specified data
      format, using an automated conversion parameter to determine whether to convert
      the data to the format.</para>
		</summary>
		<param name="format">The format of the data to retrieve. See <see cref="System.Windows.Forms.DataFormats"/> for predefined formats.</param>
		<param name="autoConvert"><see langword="true"/> to the convert data to the specified format; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>The data associated with the specified format, or
   <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>If the <paramref name="autoConvert"/> parameter
   is <see langword="true"/> and this method cannot find data
   in the specified format, it attempts to convert the data to the format. If the
   data cannot be converted to the specified format, or if the data was stored
   with the automatic conversion set to <see langword="false"/>,
   this method returns <see langword="null"/>.</para>
			<para>If the <paramref name="autoConvert"/> parameter is <see langword="false"/>, this
method returns data in the specified format, or <see langword="null"/> if no data in this format
can be found. </para>
			<para>To determine whether data is associated with, or can be converted to, a
   format, call <see cref="System.Windows.Forms.DataObject.GetDataPresent"/> before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. Call <see cref="System.Windows.Forms.DataObject.GetFormats"/> for a list of valid formats
   for the data stored in this instance.</para>
			<note type="note">
   Data can be converted to another
   format if it was stored specifying that conversion is allowed, and if the
   requested format is compatible with the stored format. For example, data stored
   as Unicode can be converted to text.
   
</note>
		</remarks>
		<example>
			<para>The following example retrieves the data
      stored in a <see cref="System.Windows.Forms.DataObject"/>, using the
   <paramref name="autoConvert"/> parameter to specify whether to
      convert the data format.</para>
			<para>First, a new <see cref="System.Windows.Forms.DataObject"/> is created with text data. Then the example tries to retrieve the data, specifying its
   format as a string and no format conversion, that is, the
<paramref name="autoConvert"/> parameter is <see langword="false"/>.
   This operation fails because there is no string
   data in the <see cref="System.Windows.Forms.DataObject"/>.</para>
			<para>Next, the example tries to retrieve the data again, with the
<paramref name="autoConvert"/> parameter set to
<see langword="true"/>. This operation succeeds and the results are
   displayed in a <see cref="System.Windows.Forms.MessageBox"/>.</para>
			<para>This code assumes <c>textBox1</c>
has been created.</para>
			<codelink SampleID="Classic DataObject.GetData Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
	<doc for="DataObject.GetData1">
		<summary>
			<para>Returns the data associated with the specified data
      format.</para>
		</summary>
		<param name="format">The format of the data to retrieve. See <see cref="System.Windows.Forms.DataFormats"/> for predefined formats.</param>
		<returns>
			<para>The data associated with the specified format, or
   <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para> If this method cannot find data in
      the specified format, it attempts to convert the data to the format. If the data
      cannot be converted to the specified format, or if the data was stored with automatic
      conversion set to
   <see langword="false"/>, this method returns <see langword="null"/>. </para>
			<para>To determine whether data is associated with, or can be converted to, a
      format, call <see cref="System.Windows.Forms.DataObject.GetDataPresent"/> before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. Call <see cref="System.Windows.Forms.DataObject.GetFormats"/> for a list of valid formats for the
      data stored in this instance.</para>
			<note type="note">
      Data can be converted to another
      format if it was stored specifying that conversion is allowed, and if the
      requested format is compatible with the stored format. For example, data stored
      as Unicode can be converted to text.
      
   </note>
		</remarks>
		<example>
			<para>The following example retrieves the data stored in a <see cref="System.Windows.Forms.DataObject"/>.
   First, a new <see cref="System.Windows.Forms.DataObject"/> is created with
   text data. Then, the data is retrieved, specifying its format as a string, and
   displayed in a text box.</para>
			<para>This code assumes <c>textBox1</c> has been created.</para>
			<codelink SampleID="classic dataobject example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
	<doc for="DataObject.GetData2">
		<summary>
			<para>Returns the data associated with the specified class
      type format.</para>
		</summary>
		<param name="format"><para>A <see cref="System.Type"/> representing the format of the data to retrieve. </para></param>
		<returns>
			<para>The data associated with the specified format, or
   <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>If this method cannot find data in the specified format,
      it attempts to convert the data to the format. If the data cannot be converted
      to the specified format, or if the data was stored with automatic
      conversion set to
   <see langword="false"/>, this method returns <see langword="null"/>. </para>
			<para>To determine whether data is associated with, or can be converted to, a
      format, call <see cref="System.Windows.Forms.DataObject.GetDataPresent"/> before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. Call <see cref="System.Windows.Forms.DataObject.GetFormats"/> for a list of valid formats for the
      data stored in this instance.</para>
			<note type="note">
      Data can be converted to another
      format if it was stored specifying that conversion is allowed, and if the
      requested format is compatible with the stored format. For example, data stored
      as Unicode can be converted to text.
      
   </note>
		</remarks>
		<example>
			<para>The following example retrieves the data stored in a <see cref="System.Windows.Forms.DataObject"/>.
   First, a new <see cref="System.Windows.Forms.DataObject"/> is created with a
   component. Then, the data is retrieved, specifying its type. The type of the
   retrieved data is displayed in a text box.</para>
			<para>This code assumes <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic DataObject.GetData2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Type"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
	<doc for="DataObject.GetDataPresent">
		<overload>
			<para>Determines whether data stored in this instance is
      associated with the specified
      format.</para>
		</overload>
		<summary>
			<para>Determines whether data stored in this instance is
      associated with, or can be converted to, the specified
      format.</para>
		</summary>
		<param name="format">A <see cref="System.Type"/> representing the format to check for.</param>
		<returns>
			<para><see langword="true"/> if data
   stored in this instance is associated with, or can be converted to, the
   specified format; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Call this method to determine whether a format exists
      before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. Call <see cref="System.Windows.Forms.DataObject.GetFormats"/> for the formats that are
      available in this instance.</para>
			<note type="note">
      Data can be converted to another
      format if it was stored specifying that conversion is allowed, and if the
      requested format is compatible with the stored format. For example, data stored
      as Unicode can be converted to text.
      
   </note>
			<note type="note">
      If no data can be retrieved, no
      exception will be thrown. Instead, <see langword="false"/> will be returned.
      
   </note>
		</remarks>
		<example>
			<para>The following example determines whether data of the
      specified type exists in a <see cref="System.Windows.Forms.DataObject"/>, or whether the data can be converted to the
      specified type. The result is displayed in a text box. The code
      assumes <c>textBox1</c>
   has
   been created.</para>
			<codelink SampleID="Classic DataObject.GetDataPresent Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Type"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
	<doc for="DataObject.GetDataPresent1">
		<summary>
			<para>Determines whether data stored in this instance is
      associated with the specified format, using an automatic conversion
      parameter to determine whether to convert the data to the format.</para>
		</summary>
		<param name="format">The format to check for. See <see cref="System.Windows.Forms.DataFormats"/> for predefined formats.</param>
		<param name="autoConvert"><see langword="true"/> to determine whether data stored in this instance can be converted to the specified format; <see langword="false"/> to check whether the data is in the specified format.</param>
		<returns>
			<para><see langword="true "/>if the data
   is in, or can be converted to, the specified format; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Call this method to determine whether a format exists before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. Call <see cref="System.Windows.Forms.DataObject.GetFormats"/> for the formats that are available
   in this instance.</para>
			<para>This method returns <see langword="true "/>when:</para>
			<list type="bullet"><item>
					<term>
						<paramref name="autoConvert"/> parameter is <see langword="true"/> and the data is in a format that can 
      be converted to the appropriate format.</term>
				</item>
				<item>
					<term>
						<paramref name="autoConvert"/> parameter is <see langword="false"/> and the data is in the appropriate format.</term>
				</item>
			</list>
			<para>This method returns <see langword="false"/> when:</para>
			<list type="bullet"><item>
					<term>
						<paramref name="autoConvert"/> parameter is <see langword="true"/> and this method cannot find data in
      the specified format, and it cannot convert data to the specified format, or
      the data was stored with automatic conversion set to
   <see langword="false"/>.</term>
				</item>
				<item>
					<term>
						<paramref name="autoConvert"/> parameter is <see langword="false"/>, and data does not exist in this instance
      in the specified format.</term>
				</item>
			</list>
			<note type="note">
   Data can be converted to another
   format if it was stored specifying that conversion is allowed and if the
   requested format is compatible with the stored format. For example, data stored
   as Unicode can be converted to text.
   
</note>
			<note type="note">
   If no data can be retrieved, no
   exception will be thrown. Instead, <see langword="false"/> will be returned.
   
</note>
		</remarks>
		<example>
			<para>The following example determines whether data currently
      stored in the <see cref="System.Windows.Forms.DataObject"/> is associated with
      a specified format. First, a new instance is initialized with a string,
      specifying its format as text.</para>
			<para>Then the <see cref="System.Windows.Forms.DataObject"/> is queried for data associated
   with the text format, specifying the <paramref name="autoConvert"/> parameter as
<see langword="false"/>. The result of this query is printed in a
   text box.</para>
			<para>Then the <see cref="System.Windows.Forms.DataObject"/> is queried for data associated
with string format, specifying the <paramref name="autoConvert"/> parameter as
<see langword="true"/>. The results are printed in the text
box. This code assumes <c>textBox1</c>
has been
created.</para>
			<codelink SampleID="Classic DataObject.GetDataPresent1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
	<doc for="DataObject.GetDataPresent2">
		<summary>
			<para>Determines whether data stored in this instance is
      associated with, or can be converted to, the specified
      format.</para>
		</summary>
		<param name="format">The format to check for. See <see cref="System.Windows.Forms.DataFormats"/> for predefined formats.</param>
		<returns>
			<para><see langword="true"/> if data
   stored in this instance is associated with, or can be converted to, the
   specified format; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Call this method to determine whether a format exists before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. Call <see cref="System.Windows.Forms.DataObject.GetFormats"/> for the formats that are available
   in this instance.</para>
			<note type="note">
   Data can be converted to another
   format if it was stored specifying that conversion is allowed, and if the
   requested format is compatible with the stored format. For example, data stored
   as Unicode can be converted to text.
   
</note>
			<note type="note">
   If no data can be retrieved, no
   exception will be thrown. Instead, <see langword="false"/> will be returned.
   
</note>
		</remarks>
		<example>
			<para>The following example determines whether data currently
      stored in this <see cref="System.Windows.Forms.DataObject"/>
      is associated with, or can be converted to, a
      specified format. A new instance of <see cref="System.Windows.Forms.DataObject"/> is initialized with a string and its associated format specified as
      text.</para>
			<para>Then
      the examples prints whether text data exists in the <see cref="System.Windows.Forms.DataObject"/>. This code
      assumes <c>textBox1</c> has been
   created.</para>
			<codelink SampleID="Classic DataObject.GetDataPresent2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
	<doc for="DataObject.GetFormats">
		<overload>
			<para>Returns a list of all
      formats that data stored
      in this instance is associated with or can be converted
      to.</para>
		</overload>
		<summary>
			<para> Returns a list of all formats that data stored in this
      instance is associated with or can be converted to, using an automatic
      conversion parameter to
      determine whether to retrieve only native data formats or all formats that the data
      can be converted to.</para>
		</summary>
		<param name="autoConvert"><see langword="true"/> to retrieve all formats that data stored in this instance is associated with, or can be converted to; <see langword="false"/> to retrieve only native data formats.</param>
		<returns>
			<para> An array of type <see cref="System.String"/> , containing a list of all
   formats that are supported by the data stored in this object.</para>
		</returns>
		<remarks>
			<para>Call this method to get the supported data formats before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. See
<see cref="System.Windows.Forms.DataFormats"/> for the predefined formats.</para>
			<note type="note">
   Data can be converted to another
   format if it was stored specifying that conversion is allowed and if the
   requested format is compatible with the stored format. For example, data stored
   as Unicode can be converted to text.
   
</note>
		</remarks>
		<example>
			<para>The following example queries a <see cref="System.Windows.Forms.DataObject"/> for
   the formats associated with its data. The first query
   specifies the <paramref name="autoConvert"/> parameter as
<see langword="false"/>, so only the native format of the data is returned.
   The
   second query specifies
   the <paramref name="autoConvert"/> parameter as
<see langword="true"/>, so the list of formats
   includes the
   formats that
   the data can be converted to.</para>
			<para>This code assumes <c>textBox1</c> has been
created.</para>
			<codelink SampleID="Classic DataObject.GetFormats Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.GetFormats1">
		<summary>
			<para> Returns a list of all formats that data stored in this instance is associated
      with or can be converted to.</para>
		</summary>
		<returns>
			<para> An array of type <see cref="System.String"/> , containing a list of all
   formats that are supported by the data stored in this object.</para>
		</returns>
		<remarks>
			<para>Call this method to get the supported data formats before calling <see cref="System.Windows.Forms.DataObject.GetData"/>. See <see cref="System.Windows.Forms.DataFormats"/>
for the predefined formats.</para>
			<note type="note">
   Data can be converted to another
   format if it was stored specifying that conversion is allowed and if the
   requested format is compatible with the stored format. For example, data stored
   as Unicode can be converted to text.
   
</note>
		</remarks>
		<example>
			<para>The following example queries a <see cref="System.Windows.Forms.DataObject"/> for the formats associated with its data, and
   the formats that the data can be converted to. The resulting list is displayed
   in a text box. This code assumes <c>textBox1</c>
has been created.</para>
			<codelink SampleID="Classic DataObject.GetFormats1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.SetData"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
	</doc>
	<doc for="DataObject.SetData">
		<overload>
			<para>Stores the specified format and data
      in this instance.</para>
		</overload>
		<summary>
			<para>Stores the specified format and data in
      this instance, using the automatic conversion parameter
      to specify whether the
      data can be converted to another format.</para>
		</summary>
		<param name="format">The format associated with the data. See <see cref="System.Windows.Forms.DataFormats"/> for predefined formats.</param>
		<param name="autoConvert"><see langword="true"/> to allow the data to be converted to another format; otherwise, <see langword="false"/>.</param>
		<param name="data">The data to store.</param>
		<remarks>
			<para>If you do not know the format of the target application, you can store data
      in multiple formats using this method.</para>
		</remarks>
		<example>
			<para>The following example stores data in a <see cref="System.Windows.Forms.DataObject"/> and 
   specifies that the data can
   only be retrieved in its native format.</para>
			<para>First, a new <see cref="System.Windows.Forms.DataObject"/>
is created. Data in the Unicode format is stored in the <see cref="System.Windows.Forms.DataObject"/>
, with <paramref name="autoConvert"/>
set to
<see langword="false"/>. </para>
			<para>Then, the <see cref="System.Windows.Forms.DataObject"/>
is queried for the list of available data formats. Only the
Unicode format is returned, although Unicode data can be converted to text and other
formats.</para>
			<para>This code assumes <c>textBox1</c> has been
created.</para>
			<codelink SampleID="Classic DataObject.SetData Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
	</doc>
	<doc for="DataObject.SetData1">
		<summary>
			<para>Stores the specified format and data in this
      instance.</para>
		</summary>
		<param name="format">The format associated with the data. See <see cref="System.Windows.Forms.DataFormats"/> for predefined formats.</param>
		<param name="data">The data to store.</param>
		<remarks>
			<para>If you do not know the format of the target application, you can store data
      in multiple formats using this method.</para>
			<para>Data stored using this method can be converted to a compatible format when it
      is retrieved.</para>
		</remarks>
		<example>
			<para>The following example stores data in a <see cref="System.Windows.Forms.DataObject"/>, specifying its format as Unicode.</para>
			<para>Then the data is retrieved by specifying the text
   format, since the default is to convert the data when the final format is
   compatible. The result is displayed in a text box. This code assumes <c>textBox1</c>
has been created.</para>
			<codelink SampleID="Classic DataObject.SetData1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
	</doc>
	<doc for="DataObject.SetData2">
		<summary>
			<para>Stores the specified data and
      its
      associated class type in this instance.</para>
		</summary>
		<param name="format">A <see cref="System.Type"/> representing the format associated with the data.</param>
		<param name="data">The data to store.</param>
		<remarks>
			<para>If you do not know the format of the target application, you can store data
      in multiple formats using this method.</para>
			<para>Data stored using this method can be converted to a compatible format when it
      is retrieved.</para>
		</remarks>
		<example>
			<para>The following example stores data in a <see cref="System.Windows.Forms.DataObject"/>
using a <see cref="System.Type"/> as the data format. The data
is then retrieved by calling <see cref="System.Windows.Forms.DataObject.GetData"/>
using the <see cref="System.Type"/> to specify the data format.
The result is displayed in a text box.</para>
			<para>This code assumes <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic DataObject.SetData2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataFormats"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="DataObject.SetData3">
		<summary>
			<para>Stores the specified data in
      this instance, using the class of the data for the format.</para>
		</summary>
		<param name="data">The data to store.</param>
		<remarks>
			<para>The data format is
      its class. If you do not know
      the format of the target application, you can store data in multiple formats using this method.</para>
			<para>Data stored using this method
      can be converted to a compatible format when it is retrieved.</para>
		</remarks>
		<example>
			<para>The following example stores
      data in a <see cref="System.Windows.Forms.DataObject"/>.
      First, a new <see cref="System.Windows.Forms.DataObject"/> is created and a component is stored in it.
      Then, the data is retrieved by specifying the class. The result is displayed in
      a text box.</para>
			<para>This code assumes <c>textBox1</c> has been created.</para>
			<codelink SampleID="Classic DataObject.SetData3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DataObject.GetDataPresent"/>
		<seealso cref="System.Windows.Forms.DataObject.GetData"/>
		<seealso cref="System.Windows.Forms.DataObject.GetFormats"/>
	</doc>
</docs>
