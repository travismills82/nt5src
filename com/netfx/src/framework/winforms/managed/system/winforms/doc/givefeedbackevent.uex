<docs>
	<doc for="GiveFeedbackEventArgs.GiveFeedbackEventArgs">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> class.
    </para>
		</summary>
		<param name="effect">
    The type of drag-and-drop operation. Possible values are obtained by applying the bitwise OR (|) operation to the constants defined in the <see cref="System.Windows.Forms.DragDropEffects"/>.
 </param>
		<param name="useDefaultCursors">
			<see langword="true"/> if default pointers are used; otherwise, <see langword="false"/>.
 </param>
	</doc>
	<doc for="GiveFeedbackEventArgs">
		<summary>
			<para>Provides data for the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event, which occurs during a drag
   operation.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.GiveFeedback"/> event occurs during a
   drag operation.
   It allows the source of a drag event to modify the appearance of the mouse
   pointer in order to give the user visual feedback during a drag-and-drop
   operation. A <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/>
   object specifies the type of drag-and-drop operation
   and whether default cursors are used.</para>
			<para>For information about the event model, see <see topic="cpconEventsDelegates"/>
.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="3"/>
		</example>
	</doc>
	<doc for="GiveFeedbackEventArgs.UseDefaultCursors">
		<summary>
   Gets or sets whether drag operation should use the
   default cursors that are associated with drag-drop effects.
</summary>
		<value>
			<para><see langword="true "/>if the default pointers are used; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The system provides default drag-drop cursors for
      different drag-drop operations such as move or copy. If <see cref="System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors"/> is set to <see langword="false"/>, it is the responsibility of the
      event source to set the appropriate cursor.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="3"/>
		</example>
	</doc>
	<doc for="GiveFeedbackEventArgs.Effect">
		<summary>
			<para> Gets the drag-and-drop operation feedback that is displayed.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DragDropEffects"/>
values.</para>
		</value>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> class. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="3"/>
		</example>
	</doc>
</docs>
