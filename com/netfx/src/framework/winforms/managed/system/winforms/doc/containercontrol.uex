<docs>
	<doc for="ContainerControl.activeControl">
		<summary>
     Current active control.
 </summary>
	</doc>
	<doc for="ContainerControl.focusedControl">
		<summary>
     Current focused control. Do not directly edit this value.
 </summary>
	</doc>
	<doc for="ContainerControl.unvalidatedControl">
		<summary>
     The last control that requires validation.  Do not directly edit this value.
 </summary>
	</doc>
	<doc for="ContainerControl.validating">
		<summary>
    Specifies whether we're currently validating.
 </summary>
	</doc>
	<doc for="ContainerControl.BindingContext">
		<summary>
			<para>
       The binding manager for the container control.
    </para>
		</summary>
	</doc>
	<doc for="ContainerControl.ActivateControl">
		<summary>
			<para>Activates a specified control.</para>
		</summary>
		<param name="control">The <see cref="System.Windows.Forms.Control"/> to be activated.</param>
		<returns>
			<para><see langword="true"/> if the control is successfully activated; otherwise, 
 <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method activates the specified <see cref="System.Windows.Forms.Control"/> . The control must be a 
    child of the container control.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.IContainerControl"/>
		<seealso cref="System.Windows.Forms.Control"/>
	</doc>
	<doc for="ContainerControl.AdjustFormScrollbars">
		<summary>
		</summary>
	</doc>
	<doc for="ContainerControl.AssignActiveControl">
		<summary>
     Sets the active control
 </summary>
	</doc>
	<doc for="ContainerControl.FocusActiveControl">
		<summary>
     Assigns focus to the activeControl. If there is no activeControl then
     focus is given to the form.
     package scope for Form
 </summary>
	</doc>
	<doc for="ContainerControl.OnControlRemoved">
		<summary>
    Called when a child control is removed from this control.
 </summary>
		<param name="e">
    Contains the control that has just been removed.
 </param>
	</doc>
	<doc for="ContainerControl.ProcessArrowKey">
		<summary>
     Process an arrowKey press by selecting the next control in the group
     that the activeControl belongs to.
 </summary>
	</doc>
	<doc for="ContainerControl.ProcessDialogChar">
		<summary>
    Processes a dialog character. Overrides Control.processDialogChar().
    This method calls the processMnemonic() method to check if the character
    is a mnemonic for one of the controls on the form. If processMnemonic()
    does not consume the character, then base.processDialogChar() is
    called.
 </summary>
		<param name="charCode">
    character to pre-process.
 </param>
		<returns>
    true to consume the character, false to allow further
    processing.
		</returns>
		<seealso cref="Control.ProcessDialogChar"/>
	</doc>
	<doc for="ContainerControl.ProcessMnemonic">
	</doc>
	<doc for="ContainerControl.ProcessTabKey">
		<summary>
			<para>Selects the next available control and makes it the active control.</para>
		</summary>
		<param name="forward"><see langword="true"/> to cycle forward through the controls in the <see cref="System.Windows.Forms.ContainerControl"/>; otherwise, <see langword="false"/>.</param>
		<returns>
			<para><see langword="true"/> if a control is selected; otherwise, 
 <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>A control with its <see cref="System.Windows.Forms.Control.TabStop"/> property set to <see langword="false "/> cannot be selected, 
    so the next available control will be selected.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.TabStop"/>
	</doc>
	<doc for="ContainerControl.UpdateDefaultButton">
		<summary>
     Updates the default button based on current selection, and the
     acceptButton property.
 </summary>
	</doc>
	<doc for="ContainerControl.UpdateFocusedControl">
		<summary>
     Updates the focusedControl variable by walking towards the
     activeControl variable, firing enter and leave events and validation
     as necessary.
 </summary>
	</doc>
	<doc for="ContainerControl.EnterValidation">
		<summary>
     Validates the last unvalidated control and it's ancestors (up through the ancestor in common
     with enterControl) if enterControl causes validation.
 </summary>
	</doc>
	<doc for="ContainerControl.Validate">
		<summary>
			<para>Validates the last invalidated control and its ancestors up through, but not including, the current control.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if validation is successful; 
    otherwise, <see langword="false"/> .</para>
		</returns>
		<keyword term="validation, Validate method"/>
	</doc>
	<doc for="ContainerControl.ValidateThroughAncestor">
		<summary>
     Validates the last unvalidated control and it's ancestors up through (but not including)  ancestorControl.
 </summary>
		<returns>
 Whether validation was successful.
 </returns>
	</doc>
	<doc for="ContainerControl.WmSetFocus">
		<summary>
     WM_SETFOCUS handler
 </summary>
	</doc>
	<doc for="ContainerControl.WndProc">
		<summary>
		</summary>
	</doc>
	<doc for="ContainerControl.CreateParams"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ContainerControl.OnCreateControl">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ContainerControl.Select">
		<nodoc/>
	</doc><doc for="ContainerControl.Dispose">
		<nodoc/>
		<summary>
			<para>Disposes of the resources (other than memory) used by
      the <see cref="System.Windows.Forms.ContainerControl"/>
      .</para>
		</summary>
		<remarks>
			<para>Call <see cref="System.Windows.Forms.ContainerControl.Dispose"/> when you are finished using
   the <see cref="System.Windows.Forms.ContainerControl"/>. The <see cref="System.Windows.Forms.ContainerControl.Dispose"/> method
   leaves the <see cref="System.Windows.Forms.ContainerControl"/> in an unusable state. After calling <see cref="System.Windows.Forms.ContainerControl.Dispose"/>, you must release all
   references to the <see cref="System.Windows.Forms.ContainerControl"/> so
   the memory it was occupying can be reclaimed by garbage collection. </para>
			<note type="note">
   Always call <see cref="System.Windows.Forms.ContainerControl.Dispose"/> before you release your last
   reference to the <see cref="System.Windows.Forms.ContainerControl"/>. Otherwise, the resources the <see cref="System.Windows.Forms.ContainerControl"/> is using will not be freed until garbage
   collection calls the <see cref="System.Windows.Forms.ContainerControl"/> object's destructor.
   
</note>
		</remarks>
	</doc><doc for="ContainerControl.ProcessDialogKey">
		<internalonly/>
		<summary>
			<para> Processes a
      dialog key. Overrides Control.processDialogKey(). This method implements handling of the TAB,
      LEFT, RIGHT, UP,
      and DOWN keys in dialogs. The method performs no processing on keys
      that include the ALT or CONTROL modifiers. For the TAB key, the
      method selects the next control on the
      form.</para>
		</summary>
		<param name="keyData">key code and modifier flags. </param>
		<returns>
			<para>true to consume the key, false to allow further processing.</para>
		</returns>
	</doc><doc for="ContainerControl.IContainerControl.ActivateControl">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ContainerControl.ContainerControl">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ContainerControl"/>
class.</para>
		</summary>
		<example>
			<para>The following example inherits from the <see cref="System.Windows.Forms.ScrollableControl"/> class and implements the <see cref="System.Windows.Forms.IContainerControl"/> interface. Implementation is added to the
<see cref="System.Windows.Forms.IContainerControl.ActiveControl"/> property and the <see cref="System.Windows.Forms.IContainerControl.ActivateControl"/> 
method. </para>
			<codelink SampleID="IContainerControl Implementation" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ContainerControl.ActiveControl">
		<summary>
			<para> Gets or sets the active control on the container control.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Control"/> that is currently active on
   the <see cref="System.Windows.Forms.ContainerControl"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="System.Windows.Forms.Control"/> assigned could not be activated.</exception>
		<remarks>
			<para> This property activates or retrieves the active control on the
      container control.</para>
		</remarks>
		<example>
			<para>The following example inherits from the <see cref="System.Windows.Forms.ScrollableControl"/> class and implements the <see cref="System.Windows.Forms.IContainerControl"/> interface. Implementation is added to the
<see cref="System.Windows.Forms.IContainerControl.ActiveControl"/> property and the <see cref="System.Windows.Forms.IContainerControl.ActivateControl"/> 
method. </para>
			<codelink SampleID="IContainerControl Implementation" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl"/>
		<seealso cref="System.Windows.Forms.Control"/>
	</doc>
	<doc for="ContainerControl">
		<summary>
			<para>Provides focus management functionality for controls that can function as a container for other controls.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Windows.Forms.ContainerControl"/> represents a control that can function as a
   container for other controls and provides focus management. Controls that
   inherit from this class can track the active control they contain, even when
   the focus moves somewhere within a different container. <see langword=""/></para>
			<para><see cref="System.Windows.Forms.ContainerControl"/> objects provide a
logical boundary for contained controls. The container control can capture the
TAB key press and move focus to the next control in the collection. </para>
			<note type="note">
   The container control does not
   receive focus; the focus is always set to the first child control in the
   collection of contained controls.
   
</note>
			<para> You do not typically inherit directly from
   this class. <see cref="System.Windows.Forms.Form"/>, <see cref="System.Windows.Forms.UserControl"/>, and <see cref="System.Windows.Forms.UpDownBase"/> classes
   inherit from <see cref="System.Windows.Forms.ContainerControl"/>.</para>
		</remarks>
		<example>
			<para>The following example inherits from the <see cref="System.Windows.Forms.ScrollableControl"/> class and implements the <see cref="System.Windows.Forms.IContainerControl"/> interface. Implementation is added to the
<see cref="System.Windows.Forms.IContainerControl.ActiveControl"/> property and the <see cref="System.Windows.Forms.IContainerControl.ActivateControl"/> 
method. </para>
			<codelink SampleID="IContainerControl Implementation" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form"/>
		<seealso cref="System.Windows.Forms.UserControl"/>
		<seealso cref="System.Windows.Forms.UpDownBase"/>
		<seealso cref="System.Windows.Forms.IContainerControl"/>
		<seealso cref="System.Windows.Forms.ScrollableControl"/>
	</doc>
	<doc for="ContainerControl.ParentForm">
		<summary>
			<para> Gets the form that the container control is assigned to.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Form"/>
that the container control
is assigned to.</para>
		</value>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<para>In this example, you create two forms: <c>Form1</c> and <c>Form2</c>.
   You set the <see langword="IsMdiContainer"/>
   property of <c>Form1</c> to
<see langword="true"/> and make it the <see cref="System.Windows.Forms.Form.MdiParent"/> of <c>Form2</c> . Next you create a button, <c>button1</c>, on 
each form. When the button on the parent form is clicked, the event
handler displays the child form. When the button on the child form is
clicked, the event handler displays the <see langword="Name"/> property of its parent form. Use the
following two code segments to overwrite <c>button1</c> event handlers in both forms.</para>
			<codelink SampleID="ParentForm2" SnippetID="1"/>
			<codelink SampleID="ParentForm2" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Form"/>
	</doc>
</docs>
