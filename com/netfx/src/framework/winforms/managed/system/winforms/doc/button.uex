<docs>
	<doc for="Button.dialogResult">
		<summary>
     The dialog result that will be sent to the parent dialog form when
     we are clicked.
 </summary>
	</doc>
	<doc for="Button.OnMouseDown">
		<internalonly/>
		<summary>
			<para>
       Raises the <see cref="System.Windows.Forms.Control.OnMouseDown"/> event.
    </para>
		</summary>
		<param name="mevent">
    A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
       Raising an event invokes the event handler
       through a delegate. For an overview, see <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.ButtonBase.OnMouseDown"/> in an
       inheriting class, be sure to call the base class's <see cref="System.Windows.Forms.ButtonBase.OnMouseDown"/> method.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.ButtonBase.OnMouseUp"/>
	</doc>
	<doc for="Button.PerformClick">
		<summary>
			<para>Generates a <see cref="System.Windows.Forms.Control.Click"/> event for a button.</para>
		</summary>
		<remarks>
			<para>This method can be called to raise the <see cref="System.Windows.Forms.Control.Click"/>
 event.</para>
		</remarks>
		<example>
			<para>The following example generates a <see cref="System.Windows.Forms.Control.Click"/>
 event of a
 <see cref="System.Windows.Forms.Button"/> on alternating <see cref="System.Windows.Forms.Control.Click"/> events of another button. This code assumes that two <see cref="System.Windows.Forms.Button"/> controls have 
 been instantiated on a form and that a member variable named <c>myVar</c> has been declared as a
 32-bit signed integer within the class.</para>
			<codelink SampleID="Classic Button.PerformClick Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Click"/>
	</doc>
	<doc for="Button.NotifyDefault">
		<summary>
			<para> Notifies the <see cref="System.Windows.Forms.Button"/>
whether it is the default button so that it can adjust its appearance
accordingly.</para>
		</summary>
		<param name="value"><see langword="true"/> if the button is to have the appearance of the default button; otherwise, <see langword="false"/>. </param>
		<remarks>
			<para> This method is called by the parent form to notify the
   <see cref="System.Windows.Forms.Button"/>
   
   that it should be set as the default button and to allow it to adjust its appearance
   accordingly. Typically, a button that is the default button for a form has a thicker
   border than other buttons on the form.
   </para>
			<para>Calling the <see cref="System.Windows.Forms.Button.NotifyDefault"/> method only draws the button as a default
button; it does not change its behavior. To make the button behave like a
default button, it must be assigned to the <see cref="System.Windows.Forms.Form.AcceptButton"/> property of the <see cref="System.Windows.Forms.Form"/>.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Button.NotifyDefault"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Button.NotifyDefault"/> method.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.IButtonControl.NotifyDefault" qualify="true"/>
	</doc>
	<doc for="Button.Button">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Button"/>
class.</para>
		</summary>
		<remarks>
			<para>By default the <see cref="System.Windows.Forms.Button"/>
displays no caption.
To specify the caption text, set the <see cref="System.Windows.Forms.Control.Text"/> property.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.Button"/>, sets its <see cref="System.Windows.Forms.Button.DialogResult"/> property to <see cref="System.Windows.Forms.DialogResult.OK" qualify="true"/>, and adds it to a <see cref="System.Windows.Forms.Form"/> .</para>
			<codelink SampleID="Classic Button.Button Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Button"/>
	</doc>
	<doc for="Button">
		<summary>
			<para>Represents a Windows button control.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Windows.Forms.Button"/>
can be clicked by using the mouse, ENTER
key, or SPACEBAR if the button has focus.</para>
			<para>Set the <see cref="System.Windows.Forms.Form.AcceptButton"/> or <see cref="System.Windows.Forms.Form.CancelButton"/> property of a <see cref="System.Windows.Forms.Form"/> to allow users to click a button by pressing the ENTER or
ESC keys even if the button does not have focus. This gives the form the behavior of a dialog box.</para>
			<para>When you display a form using the <see cref="System.Windows.Forms.Form.ShowDialog"/>
method, you can use the <see cref="System.Windows.Forms.Button.DialogResult"/> property of a button to specify the
return value of <see cref="System.Windows.Forms.Form.ShowDialog"/> .</para>
			<para>You can change the button's appearance. For example, to 
   make it appear flat for a Web look, set the <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property to <see cref="System.Windows.Forms.FlatStyle.Flat" qualify="true"/>. The <see cref="System.Windows.Forms.ButtonBase.FlatStyle"/> property can also be set to <see cref="System.Windows.Forms.FlatStyle.Popup" qualify="true"/>, which appears flat until the mouse
   pointer passes over the button; then the button takes on the standard Windows button
   appearance. </para>
			<note type="note">
   If the control that has focus
   accepts and processes the ENTER key press, the <see cref="System.Windows.Forms.Button"/> does
   not process it. For example, if a multiline <see cref="System.Windows.Forms.TextBox"/> or another button has
   focus, that control processes the ENTER key press instead of the accept
   button.
   
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.Button"/>, sets its <see cref="System.Windows.Forms.Button.DialogResult"/> property to <see cref="System.Windows.Forms.DialogResult.OK" qualify="true"/>, and adds it to a <see cref="System.Windows.Forms.Form"/> .</para>
			<codelink SampleID="Classic Button.Button Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ButtonBase"/>
		<seealso cref="System.Windows.Forms.RadioButton"/>
		<seealso cref="System.Windows.Forms.CheckBox"/>
		<seealso cref="System.Windows.Forms.IButtonControl"/>
	</doc>
	<doc for="Button.DialogResult">
		<summary>
			<para>Gets or sets a value that is returned to the parent form when the button is
      clicked.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DialogResult"/> values. The default value is <see langword="None"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Windows.Forms.DialogResult"/> values.</exception>
		<remarks>
			<para>If the value of this property is set to anything other 
      than <see cref="System.Windows.Forms.DialogResult.None" qualify="true"/>, and if
      the parent form was displayed through the <see cref="System.Windows.Forms.Form.ShowDialog"/> method, clicking the button closes the
      parent form without your having to hook up any events. The form's <see cref="System.Windows.Forms.Form.DialogResult"/>
      property is then set to the <see cref="System.Windows.Forms.Button.DialogResult"/> of the button when the button is clicked.</para>
			<para>For example, to create a "Yes/No/Cancel" dialog, simply add three buttons and set
      their <see cref="System.Windows.Forms.Button.DialogResult"/> properties to <see cref="System.Windows.Forms.DialogResult.Yes" qualify="true"/>, <see cref="System.Windows.Forms.DialogResult.No" qualify="true"/>, and <see cref="System.Windows.Forms.DialogResult.Cancel" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.Button"/>, sets its <see cref="System.Windows.Forms.Button.DialogResult"/> property to <see cref="System.Windows.Forms.DialogResult.OK" qualify="true"/>, and adds it to a <see cref="System.Windows.Forms.Form"/> .</para>
			<codelink SampleID="Classic Button.Button Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Button.CreateParams"><nodoc/>
		<internalonly/>
		<summary>
			<para>       This is called when creating a window. Inheriting classes can overide
      this to add extra functionality, but should not forget to first call
      base.CreateParams() to make sure the control continues to work
      correctly.
      </para>
		</summary>
		<value>
			<para>       A CreateParams object with the information for creating
      this Control.
      </para>
		</value>
	</doc>
	<doc for="Button.DoubleClick">
		<nodoc/>
		<internalonly/>
	</doc>
	<doc for="Button.OnClick"><nodoc/>
		<internalonly/>
		<summary>
			<para>       This method actually raises the Click event. Inheriting classes should
      override this if they wish to be notified of a Click event. (This is far
      preferable to actually adding an event handler.) They should not,
      however, forget to call base.onClick(e); before exiting, to ensure that
      other recipients do actually get the event.
      </para>
		</summary>
		<param name="e">
   This event has no additional information besides the sender.
   </param>
	</doc>
	<doc for="Button.OnMouseUp"><nodoc/>
		<internalonly/>
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ButtonBase.OnMouseUp"/> event.</para>
		</summary>
		<param name="mevent">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.ButtonBase.OnMouseDown"/>
	</doc>
	<doc for="Button.ProcessMnemonic"><nodoc/>
		<internalonly/>
		<summary>
			<para>       Lets a control process mnmemonic characters. Inheriting classes can
      override this to add extra functionality, but should not forget to call
      base.ProcessMnemonic(charCode); to ensure basic functionality
      remains unchanged.
      </para>
		</summary>
		<param name="charCode">
   The mnemonic character entered.
   </param>
		<returns>
			<para>       boolean a boolean indicating whether the mnmemonic was
      processsed [consumed] or not.
      </para>
		</returns>
	</doc>
	<doc for="Button.ToString"><nodoc/>
		<internalonly/>
		<summary>
			<para>       Provides some interesting information for the Button control in
      String form.
      </para>
		</summary>
		<returns>
			<para>       A String.
      </para>
		</returns>
	</doc>
	<doc for="Button.WndProc"><nodoc/>
		<summary>
   The button's window procedure.  Inheriting classes can override this
   to add extra functionality, but should not forget to call
   base.wndProc(m); to ensure the button continues to function properly.
   </summary>
		<param name="m">
   A Windows Message Object.
   </param>
	</doc>
</docs>
