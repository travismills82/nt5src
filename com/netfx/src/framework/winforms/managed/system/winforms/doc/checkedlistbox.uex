<docs>
	<doc for="CheckedListBox.killnextselect">
		<summary>
     Decides whether or not to ignore the next LBN_SELCHANGE
     message - used to prevent cursor keys from toggling checkboxes
 </summary>
	</doc>
	<doc for="CheckedListBox.onItemCheck">
		<summary>
     Current listener of the onItemCheck event.
 </summary>
	</doc>
	<doc for="CheckedListBox.checkValues">
		<summary>
     This array holds the checked state of the items.  it's an array of
     shorts for the case where it's a tri-state checkbox.
 </summary>
	</doc>
	<doc for="CheckedListBox.checkOnClick">
		<summary>
     Indicates whether or not we should toggle check state on the first
     click on an item, or whether we should wait for the user to click
     again.
 </summary>
	</doc>
	<doc for="CheckedListBox.flat">
		<summary>
     Should we use 3d checkboxes or flat ones?
 </summary>
	</doc>
	<doc for="CheckedListBox.lastSelected">
		<summary>
     Indicates which item was last selected.  We want to keep track
     of this so we can be a little less aggressive about checking/
     unchecking the items as the user moves around.
 </summary>
	</doc>
	<doc for="CheckedListBox.savedItemChecks">
		<summary>
     Used to store item-check pairs during handle recreation to
     preserve item checkstate.
 </summary>
	</doc>
	<doc for="CheckedListBox.checkedItemCollection">
		<summary>
     The collection of checked items in the CheckedListBox.
 </summary>
	</doc>
	<doc for="CheckedListBox.Insert">
		<summary>
     Adds a new item to our internal array of items with the given check
     state.  We have to maintain these outside of win32 because of
     marshalling issues.
 </summary>
		<param name="index">
     Index at which to insert the item.
 </param>
		<param name="item">
     Value of the item to save away.
 </param>
		<param name="check">
     Initial Checked State for the item.
 </param>
	</doc>
	<doc for="CheckedListBox.Insert1">
		<summary>
     Adds a new item marked as unchecked.
 </summary>
		<param name="index">
     Where to insert it.
 </param>
		<param name="item">
     What to insert.
 </param>
	</doc>
	<doc for="CheckedListBox.InvalidateItem">
		<summary>
     Invalidates the given item in the listbox
 </summary>
	</doc>
	<doc for="CheckedListBox.LbnSelChange">
		<summary>
     A redirected LBN_SELCHANGE message notification.
 </summary>
	</doc>
	<doc for="CheckedListBox.RemoveAt">
		<summary>
     Remove the item at the given index from our internal array of
     items.
 </summary>
	</doc>
	<doc for="CheckedListBox.WmReflectVKeyToItem">
		<summary>
     Handle keyboard input to prevent arrow keys from toggling
     checkboxes in CheckOnClick mode.
 </summary>
	</doc>
	<doc for="CheckedListBox.CheckedListBoxAccessibleObject">
		<summary>
		</summary>
	</doc>
	<doc for="CheckedListBox.CheckedListBoxAccessibleObject.CheckedListBoxAccessibleObject">
		<summary>
		</summary>
	</doc>
	<doc for="CheckedListBox.CheckedListBoxAccessibleObject.GetChild">
		<summary>
		</summary>
	</doc>
	<doc for="CheckedListBox.CheckedListBoxAccessibleObject.GetChildCount">
		<summary>
		</summary>
	</doc>
	<doc for="CheckedListBox.CheckedListBoxItemAccessibleObject">
		<summary>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnHandleDestroyed">
		<nodoc/>
		<summary>
			<para>When the handle is destroyed we should preserce the item-check pairs
      if it is getting recreated...</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnBackColorChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnFontChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnMeasureItem">
		<nodoc/>
		<summary>
			<para>Raises the MeasureItem event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.OnMeasureItem"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.CheckedListBox.OnMeasureItem"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.CheckedListBox.OnMeasureItem"/> method so that registered
   delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="CheckedListBox.Sort">
		<nodoc/>
		<summary>
			<para>Sorts the items in the listbox.</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.public new event EventHandler Click {">
		<summary>
			<para> Occurs
      when an item is clicked.</para>
		</summary>
		<remarks>
			<para>The event handler receives an <see cref="System.Windows.Forms.EventArgs"/> 
containing data related to the <see cref="System.Windows.Forms.CheckedListBox.TextAlignChanged"/> event.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.public new event DrawItemEventHandler DrawItem {">
		<summary>
			<para> Occurs when the checked state
      of an item changes.</para>
		</summary>
		<remarks>
			<para>The event handler receives an <see cref="System.Windows.Forms.DrawItemEventArgs"/> containing data related to the <see cref="System.Windows.Forms.CheckedListBox.DrawItem"/> event.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.public new event MeasureItemEventHandler MeasureItem {">
		<summary>
			<para>Occurs during the owner draw process to provide information 
      on the size of the item.</para>
		</summary>
		<remarks>
			<para>The event handler receives an <see cref="System.Windows.Forms.MeasureItemEventArgs"/> containing data related to the <see cref="System.Windows.Forms.CheckedListBox.MeasureItem"/> event.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.CreateItemCollection">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.CheckedIndexCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator that can be used to iterate 
      through the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/>
      collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> for navigating through the list.</para>
		</returns>
	</doc>
	<doc for="CheckedListBox.CheckedItemCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator that can be used to iterate 
      through the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/>
      collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> for navigating through the list.</para>
		</returns>
	</doc>
	<doc for="CheckedListBox.Click">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.CheckedItemCollection.Count">
		<summary>
			<para> Gets the number of items in the collection.</para>
		</summary>
		<value>
			<para>The number of items in the collection. </para>
		</value>
	</doc>
	<doc for="CheckedListBox.CheckedIndexCollection.IsReadOnly">
		<summary>
			<para>Gets a value indicating whether the collection is read-only.</para>
		</summary>
		<value>
			<para>Always <see langword="true"/>.</para>
		</value>
	</doc>
	<doc for="CheckedListBox.ObjectCollection.Clear">
		<summary>
			<para>Removes all the items from the collection.</para>
		</summary>
		<remarks>
			<para>You can use this method to clear the entire collection of objects from
      the checked list box. To remove an individual object from the collection,
      use the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/> or <see cref="System.Windows.Forms.ListBox.ObjectCollection.RemoveAt"/> methods. To add new objects to the
      collection, use the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection.Add"/> method.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.ItemCheck">
		<summary>
			<para>Occurs when the checked state of an item changes.</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.ObjectCollection.ObjectCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection" qualify="true"/> class.</para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.CheckedListBox"/> that owns the collection.</param>
	</doc>
	<doc for="CheckedListBox.CheckedListBox">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.CheckedListBox"/> class.</para>
		</summary>
		<remarks>
			<para>By default, <see cref="System.Windows.Forms.CheckedListBox"/> uses <see cref="System.Windows.Forms.Control.SetStyle"/> and <see cref="System.Windows.Forms.ControlStyles.ResizeRedraw"/> to specify that the control is redrawn
   when resized.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.CheckOnClick">
		<summary>
			<para>Gets or sets a value indicating whether the check box should be toggled
      when an item is selected.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the check mark is applied immediately;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>
				<see cref="System.Windows.Forms.CheckedListBox.CheckOnClick"/>indicates whether the check
   box should be toggled whenever an item is selected. The default
   behavior is to change the selection on the first click, and
   then have the user click again to apply the check mark. In some instances, however,
   you might prefer have the item checked as soon as it is clicked.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.SelectionMode">
		<summary>
			<para>Gets or sets a value specifying the selection mode.</para>
		</summary>
		<value>
			<para> Either <see cref="System.Windows.Forms.SelectionMode.One" qualify="true"/> or <see cref="System.Windows.Forms.SelectionMode.None" qualify="true"/> .</para>
		</value>
		<exception cref="T:System.ArgumentException">An attempt was made to assign a value that is not <see cref="System.Windows.Forms.SelectionMode.One" qualify="true"/> or <see cref="System.Windows.Forms.SelectionMode.None" qualify="true"/>.</exception>
		<remarks>
			<para> For <see cref="System.Windows.Forms.CheckedListBox"/> objects, multiple selection is not supported.
   You can set the mode to one item or no items.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.SelectionMode"/>
	</doc>
	<doc for="CheckedListBox.ThreeDCheckBoxes">
		<summary>
			<para> Gets or sets a value indicating whether the check
      boxes display as <see cref="System.Windows.Forms.ButtonState.Flat"/> or <see cref="System.Windows.Forms.ButtonState.Normal"/> in appearance.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the check box has a flat appearance;
   otherwise, <see langword="false"/>. The default is <see langword="true"/> .</para>
		</value>
		<seealso cref="System.Windows.Forms.ButtonState"/>
	</doc>
	<doc for="CheckedListBox.OnDrawItem">
		<nodoc/>
		<summary>
			<para>Raises the DrawItem event.</para>
		</summary>
		<param name="e">The <see cref="System.Windows.Forms.DrawItemEventArgs"/> object with the details </param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.OnDrawItem"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.CheckedListBox.OnDrawItem"/> in a derived class, be sure 
   to call the base class's <see cref="System.Windows.Forms.CheckedListBox.OnDrawItem"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
	</doc>
	<doc for="CheckedListBox.CheckedIndexCollection.Contains">
		<summary>
			<para>Determines whether the specified index is located
      in the collection.</para>
		</summary>
		<param name="index">The index to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the
   specified index from the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/> is an item in this collection; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You can use this method to determine whether an index from the <see cref="System.Windows.Forms.CheckedListBox.Items"/> collection is in the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> collection.</para>
		</remarks>
	</doc><doc for="CheckedListBox.CheckedIndexCollection.CopyTo">
		<summary>
			<para> Copies the
      entire collection into an existing array at a specified location
      within the array.</para>
		</summary>
		<param name=" dest">The destination array.</param>
		<param name=" index">The zero-based relative index in <paramref name="dest"/> at which copying begins. </param>
		<exception cref="ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
		<exception cref="RankException"><paramref name="array"/> is multidimensional.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
		<exception cref="ArgumentException"><para><paramref name="index "/> is equal to or greater than the length of array.</para>
			<para>-or- </para>
			<para>The number of elements in the source <see cref="System.Array"/> is greater than the available space from index to the end of the destination <see cref="System.Array"/> . </para></exception>
		<exception cref="ArrayTypeMismatchException">The type of the source <see cref="System.Array"/> cannot be cast automatically to the type of the destination <see cref="System.Array"/> .</exception>
		<remarks>
			<para>You can use this method to combine the selected indexes from multiple
      collections into a single array.</para>
		</remarks>
	</doc><doc for="CheckedListBox.CheckedItemCollection.this">
		<summary>
			<para>Gets an object in the checked items collection.</para>
		</summary>
		<param name="index">An index into the collection of checked items. This collection index corresponds to the index of the checked item.</param>
		<value>
			<para>The object at the specified index. For more information,
      see the examples in the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>
      class overview.</para>
		</value>
		<exception cref="T:System.NotSupportedException">You tried to set the object.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> collection is a subset of
   the objects in the <see cref="System.Windows.Forms.CheckedListBox.Items"/> collection, representing
   only items that are checked. This collection is ordered in ascending order.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection.IndexOf"/>
	</doc><doc for="CheckedListBox.CheckedItemCollection.IndexOf">
		<summary>
			<para> Returns an index into the collection of checked items.</para>
		</summary>
		<param name="item">The object whose index you want to retrieve. This object must belong to the checked items collection.</param>
		<returns>
			<para> The index of the object in the checked item
      collection or -1 if the object is not in the collection. For more information,
      see the examples in the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>
      class overview.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> collection is a subset of
   the objects in the <see cref="System.Windows.Forms.CheckedListBox.Items"/> collection, representing
   only items that are checked. This collection is ordered in ascending order.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection.this"/>
	</doc><doc for="CheckedListBox.CheckedItemCollection.CopyTo">
		<summary>
			<para> Copies the
      entire collection into an existing array at a specified location
      within the array.</para>
		</summary>
		<param name="dest">The destination array.</param>
		<param name=" index">The zero-based relative index in <paramref name="dest"/> at which copying begins. </param>
		<exception cref="ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
		<exception cref="RankException"><paramref name="array"/> is multidimensional.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
		<exception cref="ArgumentException"><para><paramref name="index"/> is equal to or greater than the length of array.</para>
			<para>-or- </para>
			<para>The number of elements in the source <see cref="System.Array"/> is greater than the available space from index to the end of the destination <see cref="System.Array"/> . </para></exception>
		<exception cref="ArrayTypeMismatchException">The type of the source <see cref="System.Array"/> cannot be cast automatically to the type of the destination <see cref="System.Array"/> .</exception>
		<remarks>
			<para>You can use this method to combine the selected indexes from multiple
      collections into a single array.</para>
		</remarks>
	</doc><doc for="CheckedListBox.ObjectCollection.Add1">
		<summary>
			<para>Adds an item to the list of items for a <see cref="System.Windows.Forms.CheckedListBox"/>, specifying the object to
   add and the initial checked value.</para>
		</summary>
		<param name="item">An object representing the item to add to the collection. </param>
		<param name="check">The initial <see cref="System.Windows.Forms.CheckState"/> for the checked portion of the item. </param>
		<returns>
			<para>The index of the newly added item.</para>
		</returns>
		<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="check"/> parameter is not one of the valid <see cref="System.Windows.Forms.CheckState"/> values.</exception>
		<remarks>
			<para>This method adds an item to the checked list box. For an unsorted checked 
      list box, the item is added to the end of the existing list of items. For a
      sorted checked list box, the item is inserted into the list according to its
      sorted position. A <see langword="SystemException"/> occurs if there is
      insufficient space available to store the new item.</para>
		</remarks>
	</doc><doc for="CheckedListBox.CheckedItemCollection.Contains">
		<summary>
			<para> Determines whether the specified item is
      located in the collection.</para>
		</summary>
		<param name="item">An object from the items collection.</param>
		<returns>
			<para><see langword="true"/> if item is in the collection; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method determines if an object from the <see cref="System.Windows.Forms.CheckedListBox.Items"/> collection is in the
<see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> collection.</para>
		</remarks>
	</doc><doc for="CheckedListBox.GetItemChecked">
		<summary>
			<para>Returns a value indicating whether the specified item is
      checked.</para>
		</summary>
		<param name="index">The index of the item.</param>
		<returns>
			<para><see langword="true"/> if the item is checked; otherwise,
<see langword="false"/>
.</para>
		</returns>
		<exception cref="T:System.ArgumentException"><para>The <paramref name="index"/> specified is less than zero.</para>
			<para>-or-</para>
			<para> The <paramref name="index"/> specified is greater than or equal to the count of items in the list.</para></exception>
		<remarks>
			<para><see cref="System.Windows.Forms.CheckedListBox.GetItemChecked"/> returns <see langword="true"/> if the item is <see cref="System.Windows.Forms.CheckState.Checked"/> or <see cref="System.Windows.Forms.CheckState.Indeterminate"/><see langword="."/> To
   determine the specific state the item is in, use the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method.
   </para>
		</remarks>
		<seealso cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>
		<seealso cref="System.Windows.Forms.CheckState"/>
	</doc><doc for="CheckedListBox.CreateParams">
		<nodoc/>
		<summary>
			<para> This property is
      read-only.</para>
		</summary>
		<remarks>
			<para>This is called when creating a window. Inheriting classes can override this
      to add extra functionality, but should not forget to first call
      base.CreateParams() to make sure the control continues to work correctly. </para>
		</remarks>
	</doc><doc for="CheckedListBox.ObjectCollection.Add">
		<overload>
			<para>Adds an item to the list of items for a <see cref="System.Windows.Forms.CheckedListBox"/>.</para>
		</overload>
		<summary>
			<para> Adds an item to the list of items for a <see cref="System.Windows.Forms.CheckedListBox"/> , specifying the object
   to add and whether it is checked.</para>
		</summary>
		<param name="item">An object representing the item to add to the collection.</param>
		<param name="isChecked"><see langword="true"/> to check the item; otherwise, <see langword="false"/> . </param>
		<returns>
			<para>The index of the newly added item.</para>
		</returns>
		<remarks>
			<para> This method adds an item to the list. For a list, the 
      item is added to the end of the existing list of items. For a sorted checked
      list box, the item is inserted into the list according to its sorted position. A
   <see langword="SystemException"/> 
   
   occurs if there is insufficient space available to store
   the new item.</para>
		</remarks>
	</doc><doc for="CheckedListBox.CheckedItemCollection.IsReadOnly">
		<summary>
			<para> Gets a value indicating if the collection is read-only.</para>
		</summary>
		<value>
			<para>Always <see langword="true"/>.</para>
		</value>
	</doc><doc for="CheckedListBox.CheckedIndexCollection.Count">
		<summary>
			<para>Gets the number of checked items.</para>
		</summary>
		<value>
			<para>The number of indexes in the collection.</para>
		</value>
	</doc><doc for="CheckedListBox.CheckedIndexCollection.this">
		<summary>
			<para> Gets the index of a checked item in the <see cref="System.Windows.Forms.CheckedListBox"/>
control.</para>
		</summary>
		<param name="index">An index into the checked indexes collection. This index specifies the index of the checked item you want to retrieve.</param>
		<value>
			<para>The index of the checked item. For more information, see
 the examples in the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
 class overview.</para>
		</value>
		<exception cref="T:System.ArgumentException">
			<para>The <paramref name="index"/> is less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="index"/> is not in the collection.</para>
		</exception>
		<remarks>
			<para>The <paramref name="index"/> parameter is an index into the checked
 indexes collection. The return value is the corresponding indexed value,
 which is the index of the checked item in the items collection.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection.IndexOf"/>
	</doc><doc for="CheckedListBox.CheckedIndexCollection.IndexOf">
		<summary>
			<para> Returns an index into
 the collection of checked indexes.</para>
		</summary>
		<param name="index">The index of the checked item.</param>
		<returns>
			<para> The index that specifies the index of the checked item or
 -1 if the <paramref name="index"/> parameter is not in the checked
 indexes collection. For more information, see the examples in the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
 class overview.</para>
		</returns>
		<remarks>
			<para>The <paramref name="index"/> parameter is the index of a checked
 item in the items collection. The return value is the corresponding index
 into the checked indexes collection.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection.this"/>
	</doc><doc for="CheckedIndexCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.this">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.Clear">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.Insert">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.Remove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.RemoveAt">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.Contains">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedIndexCollection.IList.IndexOf">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.IList.Clear">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.IList.Insert">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.IList.Remove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedItemCollection.IList.RemoveAt">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.DrawMode">
		<hideinheritance/>
		<nodoc/>
		<summary>
			<para>Gets a value indicating the mode for drawing elements of
      the <see cref="System.Windows.Forms.CheckedListBox"/> .</para>
		</summary>
		<value>
			<para>Always <see cref="System.Windows.Forms.DrawMode.Normal" qualify="true"/> .</para>
		</value>
	</doc>
	<doc for="CheckedListBox.OnSelectedIndexChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ListBox.SelectedIndexChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.CheckedListBox.OnSelectedIndexChanged"/> method so
   that registered delegates receive the event.
</note>
		</remarks>
	</doc>
	<doc for="CheckedListBox.ItemHeight">
		<hideinheritance/>
		<nodoc/>
		<summary>
			<para> Gets the height of the item area.</para>
		</summary>
		<value>
			<para>The height, in pixels, of the item area.</para>
		</value>
		<remarks>
			<para>This measurement is based on the font height plus a small margin to provide
      white space around the item.</para>
		</remarks>
	</doc>
	<doc for="CheckedListBox.ObjectCollection">
		<summary>
			<para> Represents the collection of items in a <see cref="System.Windows.Forms.CheckedListBox"/>. </para>
		</summary>
		<remarks>
			<para>The collection is accessed from the parent control, <see cref="System.Windows.Forms.CheckedListBox"/>, by the <see cref="System.Windows.Forms.CheckedListBox.Items"/>
property. To create a collection of objects to display in
the <see cref="System.Windows.Forms.CheckedListBox"/> control, you can add or remove the items
individually by using the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection.Add"/> and <see cref="System.Windows.Forms.ListBox.ObjectCollection.Remove"/>
methods. </para>
		</remarks>
		<example>
			<para>The following example enumerates the items in the <see cref="System.Windows.Forms.CheckedListBox"/>
and checks every other item in the list. The example demonstrates using the
<see cref="System.Windows.Forms.CheckedListBox.Items"/> property to get 
the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/>
to get the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> of
items. </para>
			<para>The example also demonstrates using the
<see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> and <see cref="System.Windows.Forms.CheckedListBox.SetItemChecked"/> methods to set the check 
   state of an item. For every other item that is to be checked, <see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> is called to set the <see cref="System.Windows.Forms.CheckState"/>
   to <see langword="Indeterminate"/>, while <see cref="System.Windows.Forms.CheckedListBox.SetItemChecked"/> is called on the other item to set the
   checked state to <see langword="Checked"/>. </para>
			<codelink SampleID="CheckedListBox" SnippetID="3"/>
		</example>
	</doc>
	<doc for="CheckedListBox.CheckedIndices">
		<summary>
			<para>Collection of checked indexes in this <see cref="System.Windows.Forms.CheckedListBox"/> .</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
collection for the <see cref="System.Windows.Forms.CheckedListBox"/>
.</para>
		</value>
		<remarks>
			<para>The collection of checked indexes is a subset of the indexes into the collection
      of all items in the <see cref="System.Windows.Forms.CheckedListBox"/> control. These indexes specify items in a
      checked or indeterminate state.</para>
		</remarks>
		<example>
			<para>The following example enumerates the checked items in
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      to see what check state an item is in. The example demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> property to get
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>,
      and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>. </para>
			<para>The first loop uses the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method to get the <see cref="System.Windows.Forms.CheckState"/>
of each checked item, given the index of the item. The second loop also uses
<see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>, but uses the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/> 
method to retrieve the index for the item. </para>
			<codelink SampleID="CheckedListBox" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
	</doc>
	<doc for="CheckedListBox.CheckedItems">
		<summary>
			<para>Collection of checked items in this <see cref="System.Windows.Forms.CheckedListBox"/> .</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>
collection for the <see cref="System.Windows.Forms.CheckedListBox"/>.</para>
		</value>
		<remarks>
			<para> The collection is a subset of the objects in
      the <see cref="System.Windows.Forms.CheckedListBox.Items"/> collection, representing
      only those items that are in a state of <see cref="System.Windows.Forms.CheckState.Checked" qualify="true"/> or <see cref="System.Windows.Forms.CheckState.Indeterminate" qualify="true"/>
      . The indexes in this collection are in
      ascending order.</para>
		</remarks>
		<example>
			<para>The following example enumerates the checked items in
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      to see what check state an item is in. The example demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> property to get
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>,
      and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>. </para>
			<para>The first loop uses the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method to get the <see cref="System.Windows.Forms.CheckState"/>
of each checked item, given the index of the item. The second loop also uses
<see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>, but uses the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/> 
method to retrieve the index for the item. </para>
			<codelink SampleID="CheckedListBox" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>
	</doc>
	<doc for="CheckedListBox.GetItemCheckState">
		<summary>
			<para>Returns a value indicating the check state of
      the current item.</para>
		</summary>
		<param name="index">The index of the item to get the checked value of.</param>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.CheckState"/> values.</para>
		</returns>
		<exception cref="T:System.ArgumentException"><para>The <paramref name="index"/> specified is less than zero.</para>
			<para>-or-</para>
			<para> The <paramref name="index"/> specified is greater than or equal to the count of items in the list.</para></exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method provides the ability to get the
<see cref="System.Windows.Forms.CheckState"/> 
value of an item, given the index. If you never set the check state of an item
to <see langword="Indeterminate"/>
, then use the
<see cref="System.Windows.Forms.CheckedListBox.GetItemChecked"/> method.</para>
		</remarks>
		<example>
			<para>The following example enumerates the checked items in
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      to see what check state an item is in. The example demonstrates using the
      <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method
      to set the check state of an item. The example also demonstrates using the
      <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> property to get
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>. </para>
			<para>The first loop uses the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method to get the <see cref="System.Windows.Forms.CheckState"/>
of each checked item, given the index of the item. The second loop also uses
<see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>, but uses the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/> 
method to retrieve the index for the item. </para>
			<codelink SampleID="CheckedListBox" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.CheckedListBox.GetItemChecked"/>
		<seealso cref="System.Windows.Forms.CheckState"/>
	</doc>
	<doc for="CheckedListBox.SetItemCheckState">
		<summary>
			<para> Sets the check state of the item
      at the specified index.</para>
		</summary>
		<param name="index">The index of the item to set the state for. </param>
		<param name="value">One of the <see cref="System.Windows.Forms.CheckState"/> values.</param>
		<exception cref="T:System.ArgumentException"><para>The <paramref name="index"/> specified is less than zero.</para>
			<para>-or-</para>
			<para>The <paramref name="index"/> is greater than or equal to the count of items in the list.</para></exception>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The <paramref name="value"/> is not one of the <see cref="System.Windows.Forms.CheckState"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> method raises the <see cref="System.Windows.Forms.CheckedListBox.ItemCheck"/>
event.</para>
			<para>Items set to <see cref="System.Windows.Forms.CheckState.Indeterminate" qualify="true"/> appear with a
check mark in the check box, but the box is grayed to indicate the indeterminate
status of the checked item.</para>
		</remarks>
		<example>
			<para>The following example enumerates the items in the <see cref="System.Windows.Forms.CheckedListBox"/>
and checks every other item in the list. The example demonstrates using the
<see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> and <see cref="System.Windows.Forms.CheckedListBox.SetItemChecked"/> methods to set the check 
state of an item. For every other item that is to be checked, <see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> is called to set the <see cref="System.Windows.Forms.CheckState"/>
to <see langword="Indeterminate"/>, while <see cref="System.Windows.Forms.CheckedListBox.SetItemChecked"/> is called on the other item to set the
checked state to <see langword="Checked"/>. </para>
			<para> The example also demonstrates using the
<see cref="System.Windows.Forms.CheckedListBox.Items"/> property to get 
   the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/>
   to get the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> of items. </para>
			<codelink SampleID="CheckedListBox" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.CheckState"/>
	</doc>
	<doc for="CheckedListBox.SetItemChecked">
		<summary>
			<para>Sets the item at the specified index to <see cref="System.Windows.Forms.CheckState.Checked" qualify="true"/> .</para>
		</summary>
		<param name="index">The index of the item to set the check state for. </param>
		<param name="value"><see langword="true"/> to set the item as checked; otherwise, <see langword="false"/>.</param>
		<exception cref="T:System.ArgumentException"><para> The index specified is less than zero.</para>
			<para>-or-</para>
			<para>The index is greater than the count of items in the list.</para></exception>
		<remarks>
			<para>When a value of <see langword="true"/> is passed, this method sets the
   checked value of the item to <see cref="System.Windows.Forms.CheckState.Checked"/>. A value of
<see langword="false"/> will set the item to <see cref="System.Windows.Forms.CheckState.Unchecked"/> 
.</para>
		</remarks>
		<example>
			<para>The following example enumerates the items in the <see cref="System.Windows.Forms.CheckedListBox"/>
and checks every other item in the list. The example demonstrates using the
<see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> and <see cref="System.Windows.Forms.CheckedListBox.SetItemChecked"/> methods to set the check 
state of an item. For every other item that is to be checked, <see cref="System.Windows.Forms.CheckedListBox.SetItemCheckState"/> is called to set the <see cref="System.Windows.Forms.CheckState"/>
to <see langword="Indeterminate"/>, while <see cref="System.Windows.Forms.CheckedListBox.SetItemChecked"/> is called on the other item to set the
checked state to <see langword="Checked"/>. </para>
			<para> The example also demonstrates using the
<see cref="System.Windows.Forms.CheckedListBox.Items"/> property to get 
   the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/>
   to get the <see cref="System.Windows.Forms.ListBox.ObjectCollection.Count"/> of items. </para>
			<codelink SampleID="CheckedListBox" SnippetID="3"/>
		</example>
	</doc>
	<doc for="CheckedListBox.CheckedIndexCollection">
		<summary>
			<para>Encapsulates the collection of indexes of checked items (including items in
      an indeterminate state) in a <see cref="System.Windows.Forms.CheckedListBox"/> .</para>
		</summary>
		<remarks>
			<para>The checked indexes collection is a subset of the indexes into the collection
      of all items in the <see cref="System.Windows.Forms.CheckedListBox"/>
      control. These indexes specify items in a checked or indeterminate state.</para>
			<para>The following table is an example of the indexed collection of items in the control (all
      items contained in the control).</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
					<description>Check State</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>object 1</description>
					<description><see cref="System.Windows.Forms.CheckState.Unchecked"/></description>
				</item>
				<item>
					<term> 1</term>
					<description>object 2</description>
					<description><see cref="System.Windows.Forms.CheckState.Checked"/></description>
				</item>
				<item>
					<term> 2</term>
					<description>object 3</description>
					<description><see cref="System.Windows.Forms.CheckState.Unchecked"/></description>
				</item>
				<item>
					<term> 3</term>
					<description>object 4</description>
					<description><see cref="System.Windows.Forms.CheckState.Indeterminate"/></description>
				</item>
				<item>
					<term> 4</term>
					<description>object 5</description>
					<description><see cref="System.Windows.Forms.CheckState.Checked"/></description>
				</item>
			</list>
			<para>Based on the previous
   example, the following table shows the indexed collection of indexes of checked
   items.</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Index of Item</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>1</description>
				</item>
				<item>
					<term> 1</term>
					<description>3</description>
				</item>
				<item>
					<term> 2</term>
					<description>4</description>
				</item>
			</list>
			<para>The <see cref="System.Windows.Forms.CheckedListBox"/> class has two members that allow you to
access the stored indexes, the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection.this"/>
property and the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection.IndexOf"/>
method. </para>
			<para>Based on the previous example, a call to the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection.this"/>
property with a parameter value of 1 returns a value of 3. A call to <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection.IndexOf"/>
with a parameter of 3 returns a value of 1.</para>
		</remarks>
		<example>
			<para>The following example enumerates the checked items in
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      to see what check state an item is in. The example demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method
      to set the check state of an item. The example also demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> property to get
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>,
      and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>. </para>
			<para>The first loop uses the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method to get the <see cref="System.Windows.Forms.CheckState"/>
of each checked item, given the index of the item. The second loop also uses
<see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>, but uses the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/> 
method to retrieve the index for the item. </para>
			<codelink SampleID="CheckedListBox" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedIndices" qualify="true"/>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedItems" qualify="true"/>
		<seealso cref="System.Windows.Forms.CheckedListBox.Items" qualify="true"/>
	</doc>
	<doc for="CheckedListBox.CheckedItemCollection">
		<summary>
			<para>Encapsulates the collection of checked items (including items in an
      indeterminate state) in a <see cref="System.Windows.Forms.CheckedListBox"/> control.</para>
		</summary>
		<remarks>
			<para>The checked items collection is a subset of all items in
      the <see cref="System.Windows.Forms.CheckedListBox"/>
      control; it contains only those items that are in a checked or indeterminate
      state.</para>
			<para>The following table is an example of the indexed collection of items in the control (all
      items contained in the control).</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
					<description>Check State</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>object 1</description>
					<description><see cref="System.Windows.Forms.CheckState.Unchecked"/></description>
				</item>
				<item>
					<term> 1</term>
					<description>object 2</description>
					<description><see cref="System.Windows.Forms.CheckState.Checked"/></description>
				</item>
				<item>
					<term> 2</term>
					<description>object 3</description>
					<description><see cref="System.Windows.Forms.CheckState.Unchecked"/></description>
				</item>
				<item>
					<term> 3</term>
					<description>object 4</description>
					<description><see cref="System.Windows.Forms.CheckState.Indeterminate"/></description>
				</item>
				<item>
					<term> 4</term>
					<description>object 5</description>
					<description><see cref="System.Windows.Forms.CheckState.Checked"/></description>
				</item>
			</list>
			<para>Based on the previous example, the following table shows the indexed collection of the checked items.</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>object 2</description>
				</item>
				<item>
					<term> 1</term>
					<description>object 4</description>
				</item>
				<item>
					<term> 2</term>
					<description>object 5</description>
				</item>
			</list>
			<para>The <see cref="System.Windows.Forms.CheckedListBox"/> class has two members that allow you to access the stored indexes,
the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection.this"/>
property and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection.IndexOf"/>
method. </para>
			<para>Based on the previous example, a call to the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection.this"/>
property with a parameter value of 1 returns object 4. A call to <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection.IndexOf"/>
with a parameter of object 4 returns a value of 1.</para>
		</remarks>
		<example>
			<para>The following example enumerates the checked items in
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      to see what check state an item is in. The example demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method
      to set the check state of an item. The example also demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> property to get
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>,
      and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>. </para>
			<para>The first loop uses the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method to get the <see cref="System.Windows.Forms.CheckState"/>
of each checked item, given the index of the item. The second loop also uses
<see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>, but uses the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/> 
method to retrieve the index for the item. </para>
			<codelink SampleID="CheckedListBox" SnippetID="2"/>
		</example>
	</doc>
	<doc for="CheckedListBox.Items">
		<summary>
			<para> Gets the collection of items in this <see cref="System.Windows.Forms.CheckedListBox"/>.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/> collection representing the
   items in the <see cref="System.Windows.Forms.CheckedListBox"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CheckedListBox.Items"/> property enables you to obtain a reference
   to the list of items that are currently stored in a <see cref="System.Windows.Forms.CheckedListBox"/> control. With this reference, you can add
   items, remove items, and obtain a count of the items in the collection. For more
   information on the tasks that can be performed with the item collection, see
   the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/> class reference topics.</para>
		</remarks>
		<example>
			<para>The following example enumerates the checked items in
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      to see what check state an item is in. The example uses the <see cref="System.Windows.Forms.CheckedListBox.Items"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/> to retrieve the index of an item using
      the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/>
      method. The example also demonstrates using the
   <see cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/> property to get
      the <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>,
      and the <see cref="System.Windows.Forms.CheckedListBox.CheckedItems"/> property to get the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/>. </para>
			<para>The first loop uses the <see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/> method to get the <see cref="System.Windows.Forms.CheckState"/>
of each checked item, given the index of the item. The second loop also uses
<see cref="System.Windows.Forms.CheckedListBox.GetItemCheckState"/>, but uses the <see cref="System.Windows.Forms.ListBox.ObjectCollection.IndexOf" qualify="true"/> 
method to retrieve the index for the item. </para>
			<codelink SampleID="CheckedListBox" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedItems"/>
		<seealso cref="System.Windows.Forms.CheckedListBox.CheckedIndices"/>
	</doc>
	<doc for="CheckedListBox.DisplayMember">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.DataSource">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.CreateAccessibilityInstance">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Constructs the new instance of the accessibility object for this control. Subclasses
      should not call base.CreateAccessibilityObject.</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.DrawItem">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.MeasureItem">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnClick">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Ensures that mouse clicks can toggle...</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnHandleCreated">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>When the handle is created we can dump any cached item-check pairs.</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnItemCheck">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>This is the code that actually fires the itemCheck event. Don't
      forget to call base.onItemCheck() to ensure that itemCheck vents
      are correctly fired for all other keys.</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.OnKeyPress">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>This is the code that actually fires the "keyPress" event. The Checked
      ListBox overrides this to look for space characters, since we
      want to use those to check or uncheck items periodically. Don't
      forget to call base.OnKeyPress() to ensure that KeyPrese events
      are correctly fired for all other keys.</para>
		</summary>
		<param name="e">The KeyPressEventArgs that was fired. </param>
	</doc>
	<doc for="CheckedListBox.ValueMember">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.WmReflectCommand">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>We need to get LBN_SELCHANGE notifications</para>
		</summary>
	</doc>
	<doc for="CheckedListBox.WndProc">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>The listbox's window procedure. Inheriting classes can override this
      to add extra functionality, but should not forget to call
      base.wndProc(m); to ensure the button continues to function properly.</para>
		</summary>
		<param name="m">A Windows Message Object. </param>
	</doc>
	<doc for="ComboBox.DataSourceChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComboBox.DisplayMemberChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComboBox.ValueMemberChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CheckedListBox">
		<summary>
			<para> Displays a <see cref="System.Windows.Forms.ListBox"/> in which a check box is displayed to the left
   of each item.
   </para>
		</summary>
		<remarks>
			<para> This control presents a list of items that the user can navigate by
      using the keyboard or the scrollbar on the right side of the control. The
      user can place a check mark by one or more items and the checked items can
      be navigated with the <see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/> and <see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/>
      . </para>
			<para> To add objects to the list at run time, assign an array of object
      references with the <see cref="System.Windows.Forms.ListBox.ObjectCollection.AddRange"/>
      method. The list then displays the default
      string value for each object. You can add individual items to the list with
      the <see cref="System.Windows.Forms.CheckedListBox.ObjectCollection.Add"/>
      method.
      </para>
			<para>The <see cref="System.Windows.Forms.CheckedListBox"/> object supports three states through
   the <see cref="System.Windows.Forms.CheckState"/> enumeration: <see cref="System.Windows.Forms.CheckState.Checked"/>, <see cref="System.Windows.Forms.CheckState.Indeterminate"/>, and <see cref="System.Windows.Forms.CheckState.Unchecked"/>. You must set the state of <see cref="System.Windows.Forms.CheckState.Indeterminate"/> in the code because the user interface for
   a <see cref="System.Windows.Forms.CheckedListBox"/> does not provide a mechanism to do so. </para>
			<para>If <see cref="System.Windows.Forms.ListBox.UseTabStops"/> is <see langword="true"/>, the 
<see cref="System.Windows.Forms.CheckedListBox"/> will recognize and expand tab characters 
in an item's text, creating columns. However, the tab stops are present and cannot be changed.</para>
			<para>The <see cref="System.Windows.Forms.CheckedListBox"/> class supports 
the following three indexed collections:</para>
			<list type="table">
				<listheader>
					<term>Collection</term>
					<description>Encapsulating Class</description>
				</listheader>
				<item>
					<term> All items contained in the <see cref="System.Windows.Forms.CheckedListBox"/> control.</term>
					<description><see cref="System.Windows.Forms.CheckedListBox.ObjectCollection"/></description>
				</item>
				<item>
					<term> Checked items (including items in an indeterminate
      state), which is a subset of the items contained in the <see cref="System.Windows.Forms.CheckedListBox"/>
      
      control.</term>
					<description><see cref="System.Windows.Forms.CheckedListBox.CheckedItemCollection"/></description>
				</item>
				<item>
					<term> Checked indexes, which is a subset of the
      indexes into the items collection. These indexes specify items in a
      checked or indeterminate state.</term>
					<description><see cref="System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/></description>
				</item>
			</list>
			<para>The following three tables are examples of the
   three indexed collections that the <see cref="System.Windows.Forms.CheckedListBox"/>
   class supports.</para>
			<para>The first table provides an example of the indexed collection of items in the control (all
   items contained in the control).</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
					<description>Check State</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>Object 1</description>
					<description><see cref="System.Windows.Forms.CheckState.Unchecked"/></description>
				</item>
				<item>
					<term> 1</term>
					<description>Object 2</description>
					<description><see cref="System.Windows.Forms.CheckState.Checked"/></description>
				</item>
				<item>
					<term> 2</term>
					<description>Object 3</description>
					<description><see cref="System.Windows.Forms.CheckState.Unchecked"/></description>
				</item>
				<item>
					<term> 3</term>
					<description>Object 4</description>
					<description><see cref="System.Windows.Forms.CheckState.Indeterminate"/></description>
				</item>
				<item>
					<term> 4</term>
					<description>Object 5</description>
					<description><see cref="System.Windows.Forms.CheckState.Checked"/></description>
				</item>
			</list>
			<para>The second table provides an example of the indexed collection of the checked items.</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Item</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>Object 2</description>
				</item>
				<item>
					<term> 1</term>
					<description>Object 4</description>
				</item>
				<item>
					<term> 2</term>
					<description>Object 5</description>
				</item>
			</list>
			<para>The third table provides an example of the indexed collection of indexes of checked items.</para>
			<list type="table">
				<listheader>
					<term>Index</term>
					<description>Index of Item</description>
				</listheader>
				<item>
					<term> 0</term>
					<description>1</description>
				</item>
				<item>
					<term> 1</term>
					<description>3</description>
				</item>
				<item>
					<term> 2</term>
					<description>4</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example illustrates how you can use the
      methods, properties, and collections of a <see cref="System.Windows.Forms.CheckedListBox"/>
      . This is a complete
      sample ready to run once you have copied it to your project. You can check
      and uncheck items, use the text box to add items and once you have clicked the
      save button, clear the checked items.</para>
			<codelink SampleID="Classic CheckedListBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListBox"/>
	</doc>
</docs>
