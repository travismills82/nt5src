<docs>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.QueryService">
 <summary>
      Return in *ppvObj an implementation of interface iid for service
      guidService (same as IServiceProvider::QueryService).
      Return NOERROR if the requested service is supported, otherwise return
      NULL in *ppvObj and an appropriate error (eg E_FAIL, E_NOINTERFACE).
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FDebugMessage">
 <summary>
      Standard FDebugMessage method.
      Since IMsoComponentManager is a reference counted interface, 
      MsoDWGetChkMemCounter should be used when processing the 
      msodmWriteBe message.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FRegisterComponent">
 <summary>
      Register component piComponent and its registration info pcrinfo with
      this component manager.  Return in *pdwComponentID a cookie which will
      identify the component when it calls other IMsoComponentManager
      methods.
      Return TRUE if successful, FALSE otherwise.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FRevokeComponent">
 <summary>
      Undo the registration of the component identified by dwComponentID
      (the cookie returned from the FRegisterComponent method).
      Return TRUE if successful, FALSE otherwise.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FUpdateComponentRegistration">
 <summary>
      Update the registration info of the component identified by
      dwComponentID (the cookie returned from FRegisterComponent) with the
      new registration information pcrinfo.
      Typically this is used to update the idle time registration data, but
      can be used to update other registration data as well.
      Return TRUE if successful, FALSE otherwise.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FOnComponentActivate">
 <summary>
      Notify component manager that component identified by dwComponentID
      (cookie returned from FRegisterComponent) has been activated.
      The active component gets the  chance to process messages before they
      are dispatched (via IMsoComponent::FPreTranslateMessage) and typically
      gets first crack at idle time after the host.
      This method fails if another component is already Exclusively Active.
      In this case, FALSE is returned and SetLastError is set to 
      msoerrACompIsXActive (comp usually need not take any special action
      in this case).
      Return TRUE if successful.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FSetTrackingComponent">
 <summary>
      Called to inform component manager that  component identified by 
      dwComponentID (cookie returned from FRegisterComponent) wishes
      to perform a tracking operation (such as mouse tracking).
      The component calls this method with fTrack == TRUE to begin the
      tracking operation and with fTrack == FALSE to end the operation.
      During the tracking operation the component manager routes messages
      to the tracking component (via IMsoComponent::FPreTranslateMessage)
      rather than to the active component.  When the tracking operation ends,
      the component manager should resume routing messages to the active
      component.  
      Note: component manager should perform no idle time processing during a
              tracking operation other than give the tracking component idle
              time via IMsoComponent::FDoIdle.
      Note: there can only be one tracking component at a time.
      Return TRUE if successful, FALSE otherwise.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.OnComponentEnterState">
 <summary>
      Notify component manager that component identified by dwComponentID
      (cookie returned from FRegisterComponent) is entering the state
      identified by uStateID (msocstateXXX value).  (For convenience when
      dealing with sub CompMgrs, the host can call this method passing 0 for
      dwComponentID.)  
      Component manager should notify all other interested components within
      the state context indicated by uContext (a msoccontextXXX value),
      excluding those within the state context of a CompMgr in rgpicmExclude,
      via IMsoComponent::OnEnterState (see "Comments on State Contexts", 
      above).
      Component Manager should also take appropriate action depending on the 
      value of uStateID (see msocstate comments, above).
      dwReserved is reserved for future use and should be zero.
      
      rgpicmExclude (can be NULL) is an array of cpicmExclude CompMgrs (can
      include root CompMgr and/or sub CompMgrs); components within the state
      context of a CompMgr appearing in this array should NOT be notified of 
      the state change (note: if uContext    is msoccontextMine, the only 
      CompMgrs in rgpicmExclude that are checked for exclusion are those that 
      are sub CompMgrs of this Component Manager, since all other CompMgrs 
      are outside of this Component Manager's state context anyway.)
      
      Note: Calls to this method are symmetric with calls to 
      FOnComponentExitState. 
      That is, if n OnComponentEnterState calls are made, the component is
      considered to be in the state until n FOnComponentExitState calls are
      made.  Before revoking its registration a component must make a 
      sufficient number of FOnComponentExitState calls to offset any
      outstanding OnComponentEnterState calls it has made.
      
      Note: inplace objects should not call this method with
      uStateID == msocstateModal when entering modal state. Such objects
      should call IOleInPlaceFrame::EnableModeless instead.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FOnComponentExitState">
 <summary>
      Notify component manager that component identified by dwComponentID
      (cookie returned from FRegisterComponent) is exiting the state
      identified by uStateID (a msocstateXXX value).  (For convenience when
      dealing with sub CompMgrs, the host can call this method passing 0 for
      dwComponentID.)
      uContext, cpicmExclude, and rgpicmExclude are as they are in 
      OnComponentEnterState.
      Component manager      should notify all appropriate interested components
      (taking into account uContext, cpicmExclude, rgpicmExclude) via
      IMsoComponent::OnEnterState (see "Comments on State Contexts", above). 
      Component Manager should also take appropriate action depending on
      the value of uStateID (see msocstate comments, above).
      Return TRUE if, at the end of this call, the state is still in effect
      at the root of this component manager's state context
      (because the host or some other component is still in the state),
      otherwise return FALSE (ie. return what FInState would return).
      Caller can normally ignore the return value.
      
      Note: n calls to this method are symmetric with n calls to 
      OnComponentEnterState (see OnComponentEnterState comments, above).
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FInState">
 <summary>
      Return TRUE if the state identified by uStateID (a msocstateXXX value)
      is in effect at the root of this component manager's state context, 
      FALSE otherwise (see "Comments on State Contexts", above).
      pvoid is reserved for future use and should be NULL.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FContinueIdle">
 <summary>
      Called periodically by a component during IMsoComponent::FDoIdle.
      Return TRUE if component can continue its idle time processing, 
      FALSE if not (in which case component returns from FDoIdle.) 
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop">
 <summary>
      Component identified by dwComponentID (cookie returned from 
      FRegisterComponent) wishes to push a message loop for reason uReason.
      uReason is one the values from the msoloop enumeration (above).
      pvLoopData is data private to the component.
      The component manager should push its message loop, 
      calling IMsoComponent::FContinueMessageLoop(uReason, pvLoopData)
      during each loop iteration (see IMsoComponent::FContinueMessageLoop
      comments).  When IMsoComponent::FContinueMessageLoop returns FALSE, the
      component manager terminates the loop.
      Returns TRUE if component manager terminates loop because component
      told it to (by returning FALSE from IMsoComponent::FContinueMessageLoop),
      FALSE if it had to terminate the loop for some other reason.  In the 
      latter case, component should perform any necessary action (such as 
      cleanup).
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FCreateSubComponentManager">
 <summary>
      Cause the component manager to create a "sub" component manager, which
      will be one of its children in the hierarchical tree of component
      managers used to maintiain state contexts (see "Comments on State
      Contexts", above).
      piunkOuter is the controlling unknown (can be NULL), riid is the
      desired IID, and *ppvObj returns       the created sub component manager.
      piunkServProv (can be NULL) is a ptr to an object supporting
      IServiceProvider interface to which the created sub component manager
      will delegate its IMsoComponentManager::QueryService calls. 
      (see objext.h or docobj.h for definition of IServiceProvider).
      Returns TRUE if successful.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FGetParentComponentManager">
 <summary>
      Return in *ppicm an AddRef'ed ptr to this component manager's parent
      in the hierarchical tree of component managers used to maintain state
      contexts (see "Comments on State       Contexts", above).
      Returns TRUE if the parent is returned, FALSE if no parent exists or
      some error occurred.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponentManager.FGetActiveComponent">
 <summary>
      Return in *ppic an AddRef'ed ptr to the current active or tracking
      component (as indicated by dwgac (a msogacXXX value)), and
      its registration information in *pcrinfo.  ppic and/or pcrinfo can be
      NULL if caller is not interested these values.  If pcrinfo is not NULL,
      caller should set pcrinfo->cbSize before calling this method.
      Returns TRUE if the component indicated by dwgac exists, FALSE if no 
      such component exists or some error occurred.
      dwReserved is reserved for future use and should be zero.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.FDebugMessage">
 <summary>
      Standard FDebugMessage method.
      Since IMsoComponentManager is a reference counted interface, 
      MsoDWGetChkMemCounter should be used when processing the 
      msodmWriteBe message.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.FPreTranslateMessage">
 <summary>
      Give component a chance to process the message pMsg before it is
      translated and dispatched. Component can do TranslateAccelerator
      do IsDialogMessage, modify pMsg, or take some other action.
      Return TRUE if the message is consumed, FALSE otherwise.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.OnEnterState">
 <summary>  
      Notify component when app enters or exits (as indicated by fEnter)
      the state identified by uStateID (a value from olecstate enumeration).
      Component should take action depending on value of uStateID
       (see olecstate comments, above).

      Note: If n calls are made with TRUE fEnter, component should consider 
      the state to be in effect until n calls are made with FALSE fEnter.
     
     Note: Components should be aware that it is possible for this method to
     be called with FALSE fEnter more    times than it was called with TRUE 
     fEnter (so, for example, if component is maintaining a state counter
     (incremented when this method is called with TRUE fEnter, decremented
     when called with FALSE fEnter), the counter should not be decremented
     for FALSE fEnter if it is already at zero.)  
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.OnAppActivate">
 <summary>  
      Notify component when the host application gains or loses activation.
     If fActive is TRUE, the host app is being activated and dwOtherThreadID
      is the ID of the thread owning the window being deactivated.
      If fActive is FALSE, the host app is being deactivated and 
      dwOtherThreadID is the ID of the thread owning the window being 
      activated.
      Note: this method is not called when both the window being activated
      and the one being deactivated belong to the host app.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.OnLoseActivation">
 <summary>      
      Notify the active component that it has lost its active status because
      the host or another component has become active.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.OnActivationChange">
 <summary> 
      Notify component when a new object is being activated.
      If pic is non-NULL, then it is the component that is being activated.
      In this case, fSameComponent is TRUE if pic is the same component as
      the callee of this method, and pcrinfo is the reg info of pic.
      If pic is NULL and fHostIsActivating is TRUE, then the host is the
      object being activated, and pchostinfo is its host info.
      If pic is NULL and fHostIsActivating is FALSE, then there is no current
      active object.

      If pic is being activated and pcrinfo->grf has the 
      olecrfExclusiveBorderSpace bit set, component should hide its border
      space tools (toolbars, status bars, etc.);
      component should also do this if host is activating and 
      pchostinfo->grfchostf has the olechostfExclusiveBorderSpace bit set.
      In either of these cases, component should unhide its border space
      tools the next time it is activated.

      if pic is being activated and pcrinfo->grf has the
      olecrfExclusiveActivation bit is set, then pic is being activated in
      "ExclusiveActive" mode.  
      Component should retrieve the top frame window that is hosting pic
      (via pic->HwndGetWindow(olecWindowFrameToplevel, 0)).  
      If this window is different from component's own top frame window, 
         component should disable its windows and do other things it would do
         when receiving OnEnterState(olecstateModal, TRUE) notification. 
      Otherwise, if component is top-level, 
         it should refuse to have its window activated by appropriately
         processing WM_MOUSEACTIVATE (but see WM_MOUSEACTIVATE NOTE, above).
      Component should remain in one of these states until the 
      ExclusiveActive mode ends, indicated by a future call to 
      OnActivationChange with ExclusiveActivation bit not set or with NULL
      pcrinfo.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.FDoIdle">
 <summary> 
      Give component a chance to do idle time tasks.  grfidlef is a group of
      bit flags taken from the enumeration of oleidlef values (above),
      indicating the type of idle tasks to perform.  
      Component may periodically call IOleComponentManager::FContinueIdle; 
      if this method returns FALSE, component should terminate its idle 
      time processing and return.  
      Return TRUE if more time is needed to perform the idle time tasks, 
      FALSE otherwise.
      Note: If a component reaches a point where it has no idle tasks
      and does not need FDoIdle calls, it should remove its idle task
      registration via IOleComponentManager::FUpdateComponentRegistration.
      Note: If this method is called on while component is performing a 
      tracking operation, component should only perform idle time tasks that
      it deems are appropriate to perform during tracking.
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.FContinueMessageLoop">
 <summary>         
      Called during each iteration of a message loop that the component
      pushed. uReason and pvLoopData are the reason and the component private 
      data that were passed to IOleComponentManager::FPushMessageLoop.
      This method is called after peeking the next message in the queue
      (via PeekMessage) but before the message is removed from the queue.
      The peeked message is passed in the pMsgPeeked param (NULL if no
      message is in the queue).  This method may be additionally called when
      the next message has already been removed from the queue, in which case
      pMsgPeeked is passed as NULL.
      Return TRUE if the message loop should continue, FALSE otherwise.
      If FALSE is returned, the component manager terminates the loop without
      removing pMsgPeeked from the queue. 
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.FQueryTerminate">
 <summary> 
      Called when component manager wishes to know if the component is in a
      state in which it can terminate.  If fPromptUser is FALSE, component
      should simply return TRUE if it can terminate, FALSE otherwise.
      If fPromptUser is TRUE, component should return TRUE if it can
      terminate without prompting the user; otherwise it should prompt the
      user, either 1.) asking user if it can terminate and returning TRUE
      or FALSE appropriately, or 2.) giving an indication as to why it
      cannot terminate and returning FALSE. 
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.Terminate">
 <summary>     
      Called when component manager wishes to terminate the component's
      registration.  Component should revoke its registration with component
      manager, release references to component manager and perform any
      necessary cleanup. 
 </summary>
   </doc>
   <doc for="UnsafeNativeMethods.IMsoComponent.HwndGetWindow">
 <summary> 
      Called to retrieve a window associated with the component, as specified
      by dwWhich, a olecWindowXXX value (see olecWindow, above).
      dwReserved is reserved for future use and should be zero.
      Component should return the desired window or NULL if no such window
      exists. 
 </summary>
   </doc>
</docs>

