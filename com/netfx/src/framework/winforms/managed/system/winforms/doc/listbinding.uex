<docs>
	<doc for="Binding.OnFormat">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Binding.Format"/> event.</para>
		</summary>
		<param name="cevent">A <see cref="System.Windows.Forms.ConvertEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Binding.OnFormat"/> method also allows derived classes 
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Binding.OnFormat"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Binding.OnFormat"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Binding.Format"/>
		<seealso cref="System.Windows.Forms.Binding.OnParse"/>
		<seealso cref="System.Windows.Forms.Binding.Parse"/>
	</doc>
	<doc for="Binding.OnParse">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Binding.Parse"/> event.</para>
		</summary>
		<param name="cevent">A <see cref="System.Windows.Forms.ConvertEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Binding.OnParse"/> method also allows derived classes 
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Binding.OnParse"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Binding.OnParse"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Binding.Format"/>
		<seealso cref="System.Windows.Forms.Binding.OnFormat"/>
		<seealso cref="System.Windows.Forms.Binding.Parse"/>
	</doc>
	<doc for="Binding.Binding1">
		<nodoc/>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Binding"/> class.</para>
		</summary>
	</doc>
	<doc for="Binding.DataSource">
		<summary>
			<para> Gets the data source for this binding.</para>
		</summary>
		<value>
			<para>An <see cref="System.Object"/> that represents the data source.</para>
		</value>
		<remarks>
			<para>Possible data sources include:</para>
			<list type="bullet">
				<item>
					<term>
						<see cref="T:System.Data.DataSet"/>
					</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataTable"/>
					</term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataView"/>
					</term>
				</item>
				<item>
					<term>
						<see cref="T:System.Data.DataViewManager"/>
					</term>
				</item>
				<item>
					<term>
         
         Any object that implements the <see cref="T:System.Collections.IList"/> interface.</term>
				</item>
				<item>
					<term>
         Any object.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.Binding.DataSource"/> property to return a <see cref="System.Data.DataSet"/>
.</para>
			<codelink SampleID="Classic Binding.DataSource Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Binding.Control">
		<summary>
			<para> Gets the control that the binding belongs to.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Control"/> that the binding belongs to.</para>
		</value>
		<example>
			<para>The following example gets the <see cref="System.Windows.Forms.BindingManagerBase"/> for a specific data source, and prints information about each <see cref="System.Windows.Forms.Binding.Control"/> that is
   bound to the data source. The example uses the
<see cref="System.Windows.Forms.BindingManagerBase.Bindings"/> property of the <see cref="System.Windows.Forms.BindingManagerBase"/> 
to get all controls.</para>
			<codelink SampleID="Classic Binding.Control Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Binding.BindingMemberInfo">
		<summary>
			<para>Gets an object that contains information about this
      binding based on the <paramref name="dataMember"/> parameter in the <see cref="M:System.Windows.Forms.Binding.#ctor"/> constructor.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.BindingMemberInfo"/> that contains
   information about this <see cref="System.Windows.Forms.Binding"/>
   .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.BindingMemberInfo"/> is created from the <paramref name="dataMember
   "/>string passed to the <see cref="M:System.Windows.Forms.Binding.#ctor"/> constructor.</para>
		</remarks>
		<example>
			<para>The following example gets the <see cref="System.Windows.Forms.BindingMemberInfo"/> object
   of each <see cref="System.Windows.Forms.Binding"/> on a form, and
   prints that <see cref="System.Windows.Forms.Binding"/> object's <see cref="System.Windows.Forms.BindingMemberInfo.BindingPath"/>, <see cref="System.Windows.Forms.BindingMemberInfo.BindingField"/>, and <see cref="System.Windows.Forms.BindingMemberInfo.BindingMember"/> , property
   value.</para>
			<codelink SampleID="Classic Binding.BindingMemberInfo Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingsCollection"/>
	</doc>
	<doc for="Binding.BindingManagerBase">
		<summary>
			<para>Gets this binding's <see cref="System.Windows.Forms.BindingManagerBase"/>.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase"/> that manages 
   this <see cref="System.Windows.Forms.Binding"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.BindingManagerBase"/> to iterate through a data-bound list by
   incrementing or decrementing the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> property.
   The <see cref="System.Windows.Forms.BindingManagerBase"/> class is abstract. The <see cref="System.Windows.Forms.CurrencyManager"/> class, which manages data-bound lists,
   inherits from the <see cref="System.Windows.Forms.BindingManagerBase"/> class.</para>
		</remarks>
		<example>
			<para> The following example
      gets the <see cref="System.Windows.Forms.BindingManagerBase"/> of every <see cref="System.Windows.Forms.Binding"/> object on the form, and prints each
   <see cref="System.Windows.Forms.BindingManagerBase"/> object's <see cref="System.Windows.Forms.BindingManagerBase.Position"/>
   property.</para>
			<codelink SampleID="Classic Binding.BindingManagerBase Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Binding.Parse">
		<summary>
			<para>Occurs when the value of a data-bound control changes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Binding.Format"/> and <see cref="System.Windows.Forms.Binding.Parse"/> events allow you
   to create custom formats for displaying data. For example, if the data in a
   table is of type <see cref="System.Decimal"/> , you can display the data in the local currency format
   by setting the <see cref="System.Windows.Forms.ConvertEventArgs.Value"/> property of the <see cref="System.Windows.Forms.ConvertEventArgs"/> object to the formatted value in the
<see cref="System.Windows.Forms.Binding.Format"/> event. You must consequently 
   unformat the displayed value in the <see cref="System.Windows.Forms.Binding.Parse"/> event. </para>
			<para>The <see cref="System.Windows.Forms.Binding.Parse"/> event occurs under the following
conditions: </para>
			<list type="bullet">
				<item>
					<term>
      
      after the
   <see cref="System.Windows.Forms.Control.Validated"/>
   event of the <see cref="System.Windows.Forms.Control"/> object occurs.</term>
				</item>
				<item>
					<term>
      
      when the <see cref="System.Windows.Forms.BindingManagerBase.EndCurrentEdit"/> method of the <see cref="System.Windows.Forms.BindingManagerBase"/> is called.</term>
				</item>
				<item>
					<term>
      
      when the <see cref="System.Windows.Forms.BindingManagerBase.Current"/> object of the <see cref="System.Windows.Forms.BindingManagerBase"/> changes (in other words, when the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> changes).</term>
				</item>
			</list>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.Binding"/>, adds a <see cref="System.Windows.Forms.ConvertEventHandler"/> delegate to
   both the <see cref="System.Windows.Forms.Binding.Parse"/> and
<see cref="System.Windows.Forms.Binding.Format"/> 
events, and adds the <see cref="System.Windows.Forms.Binding"/> to
the <see cref="System.Windows.Forms.BindingsCollection"/> of a <see cref="System.Windows.Forms.TextBox"/> control
through the <see cref="System.Windows.Forms.Control.DataBindings"/>
property. The <see langword="DecimalToCurrencyString "/>event
delegate, added to the <see cref="System.Windows.Forms.Binding.Format"/> event, formats the bound value (a
<see cref="System.Decimal"/> type) as currency using the 
<see cref="System.Decimal.ToString"/> method. The <see langword="CurrencyStringToDecimal "/>event delegate, added to the 
<see cref="System.Windows.Forms.Binding.Parse"/> event, 
converts the value displayed by the control back to the <see cref="System.Decimal"/> type.</para>
			<codelink SampleID="Classic Binding.Parse Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Binding.Format"/>
		<seealso cref="System.Windows.Forms.Binding.OnParse"/>
		<seealso cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/>
		<seealso cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/>
	</doc>
	<doc for="Binding.PropertyName">
		<summary>
			<para> Gets or sets the name of the control's data-bound property.</para>
		</summary>
		<value>
			<para> The name of a control property to bind to.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.Binding.PropertyName"/> to specify the control property that you want
   to bind to a list in a data source. Most commonly, you bind a display property such
   as the <see cref="System.Windows.Forms.Control.Text"/> property of a <see cref="System.Windows.Forms.TextBox"/> control. However,
   because you can bind any property of a control, you can
   programmatically create controls at run time using data from a database.</para>
		</remarks>
		<example>
			<para>The following example prints the <see cref="System.Windows.Forms.Binding.PropertyName"/> value of each <see cref="System.Windows.Forms.Binding"/>
for each control on a form.</para>
			<codelink SampleID="Classic Binding.PropertyName Example" SnippetID="1"/>
		</example>
	</doc><doc for="Binding.Binding">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Binding"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Binding"/> class that simple-binds the
   specified control property to the specified data member of
   the specified data source.</para>
		</summary>
		<param name="propertyName">The name of the control property to bind.</param>
		<param name="dataSource">An <see cref="System.Object"/> that represents the data source.</param>
		<param name="dataMember">The property or list to bind to.</param>
		<exception cref="System.Exception">The <paramref name="propertyName"/> is neither a valid property of a control nor an empty string ("").</exception>
		<remarks>
			<para>You can specify an instance of any of the following
      classes for the data source:</para>
			<list type="bullet"><item>
					<term>
						<see cref="T:System.Data.DataSet"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataTable"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataView"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Data.DataViewManager"/></term>
				</item>
				<item>
					<term>
         
         Any class that implements the <see cref="System.Collections.IList"/> interface.</term>
				</item>
				<item>
					<term>
         
         Any class.</term>
				</item>
			</list>
			<para>See the <see cref="System.Windows.Forms.Binding"/> class for more information about creating
the <paramref name="dataMember"/> string.</para>
		</remarks>
		<example>
			<para> The following example binds
      a <see cref="System.Windows.Forms.TextBox"/> control to a table column in a
   <see cref="T:System.Data.DataSet"/> named myDataSet. The
      example assumes you have declared myDataSet in the Declarations section of the
      module.</para>
			<codelink SampleID="Classic Binding.Binding Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingsCollection"/>
		<seealso cref="System.Windows.Forms.CurrencyManager"/>
	</doc><doc for="Binding.Format">
		<summary>
			<para>Occurs when the property of a control is bound to a data value.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Binding.Format"/> event occurs both when 
   data is pushed from the data source into the control, and when the data is
   pulled from the control into the data source. When the data is pushed from the
   data source into the control, the <see cref="System.Windows.Forms.Binding"/> will use the <see cref="System.Windows.Forms.Binding.Format"/> event to put the formatted data into the
   control. When the data is pushed from the control into the data source, the
<see cref="System.Windows.Forms.Binding"/> will first parse the data using the 
<see cref="System.Windows.Forms.Binding.Parse"/> 



event, then format the data
and push the it into the control.</para>
			<para>The <see cref="System.Windows.Forms.Binding.Format"/> and <see cref="System.Windows.Forms.Binding.Parse"/> events allow you to create custom
formats for displaying data. For example, if the data in a table is of type
<see cref="System.Decimal"/> , you can 
display the data in the local currency format by setting the <see cref="System.Windows.Forms.ConvertEventArgs.Value"/> property of the <see cref="System.Windows.Forms.ConvertEventArgs"/> object to the formatted value in the
<see cref="System.Windows.Forms.Binding.Format"/> event. 
You must consequently unformat the displayed value in the <see cref="System.Windows.Forms.Binding.Parse"/> event. </para>
			<para>The <see cref="System.Windows.Forms.Binding.Format"/> event occurs whenever the <see cref="System.Windows.Forms.BindingManagerBase.Current"/> value of the <see cref="System.Windows.Forms.BindingManagerBase"/> changes,
which includes:</para>
			<list type="bullet"><item>
					<term>
      
      The first time the property is bound.</term>
				</item>
				<item>
					<term>
      
      Any time
      
      the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> changes.</term>
				</item>
				<item>
					<term>
      
      Whenever the data-bound list is sorted or filtered, which
      is accomplished when a <see cref="System.Data.DataView"/> supplies the list.</term>
				</item>
			</list>
			<para>The <see cref="System.Windows.Forms.Binding.Format"/> event also occurs after the
<see cref="System.Windows.Forms.Binding.Parse"/> event. For example, when a control loses 
focus, its contents are parsed. Immediately afterwards, as new data is pushed
into the control, the <see cref="System.Windows.Forms.Binding.Format"/>
event occurs allowing the new contents to be formatted.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.Binding"/>,
   adds a <see cref="System.Windows.Forms.ConvertEventHandler"/> delegate to both the <see cref="System.Windows.Forms.Binding.Parse"/> and <see cref="System.Windows.Forms.Binding.Format"/> events, and adds the <see cref="System.Windows.Forms.Binding"/> to
   the <see cref="System.Windows.Forms.BindingsCollection"/> of a <see cref="System.Windows.Forms.TextBox"/> control through the
<see cref="System.Windows.Forms.Control.DataBindings"/> property. The <see langword="DecimalToCurrencyString "/>event delegate, added to the <see cref="System.Windows.Forms.Binding.Format"/> event, formats the 
   bound value (a <see cref="System.Decimal"/> type) as currency using the <see cref="System.Decimal.ToString"/> method.
   The <see langword="CurrencyStringToDecimal "/>event delegate, added to the <see cref="System.Windows.Forms.Binding.Parse"/> event, converts the value displayed by the
   control back to the <see cref="System.Decimal"/> type.</para>
			<codelink SampleID="Classic Binding.Format Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Binding.Parse"/>
		<seealso cref="System.Windows.Forms.Binding.OnFormat"/>
	</doc><doc for="Binding.IsBinding">
		<summary>
			<para> Gets a value indicating whether the binding is active.
      </para>
		</summary>
		<value>
			<para><see langword="true"/>, if the binding is active; otherwise,
<see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> A binding is active when it meets these conditions: all its properties are set, the user did not call <see cref="System.Windows.Forms.BindingManagerBase.ResumeBinding"/> or <see cref="System.Windows.Forms.BindingManagerBase.SuspendBinding"/> on the <see cref="System.Windows.Forms.BindingManagerBase"/> that the <see cref="System.Windows.Forms.Binding"/> belongs to, and the
      control to which the <see cref="System.Windows.Forms.Binding"/> belongs has been created.
      </para>
		</remarks>
		<example>
			<para>The following example prints the <see cref="System.Windows.Forms.Binding.PropertyName"/> and <see cref="System.Windows.Forms.Binding.IsBinding"/> value for each <see cref="System.Windows.Forms.Binding"/>
on a form.</para>
			<codelink SampleID="Classic Binding.IsBinding Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Binding">
		<summary>
			<para>Represents the simple binding between the property value of an object and
      the property value of a control.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.Binding"/> class to create and maintain a simple
   binding between the property of a control and either the property of an object, or the property of
   the current object in a list of
   objects.</para>
			<para> As an example of the
   first case, you can bind the <see cref="System.Windows.Forms.Control.Text"/> property of a <see cref="System.Windows.Forms.TextBox"/> control
   to the FirstName property of a Customer object. As an example of the
   second case, you can bind the <see cref="System.Windows.Forms.Control.Text"/>
   property of a <see cref="System.Windows.Forms.TextBox"/> control to the FirstName property of a
<see cref="System.Data.DataTable"/> 
containing
customers.</para>
			<para> The <see cref="System.Windows.Forms.Binding"/> class
also enables you to format values for display
through the <see cref="System.Windows.Forms.Binding.Format"/> event and to retrieve formatted
values through the <see cref="System.Windows.Forms.Binding.Parse"/>
event.</para>
			<para>When constructing a <see cref="System.Windows.Forms.Binding"/> instance with the <see cref="M:System.Windows.Forms.Binding.#ctor"/> contructor, you must specify three
items: the name of the control property to bind to, the data source, and the
navigation path that resolves to a list or property in the data source. The
navigation path is also used to create
the object's <see cref="System.Windows.Forms.Binding.BindingMemberInfo"/>. </para>
			<para> First, you must specify name of the control property you want to bind the data to.
   For example, to display data in a <see cref="System.Windows.Forms.TextBox"/> control, specify the <see cref="System.Windows.Forms.TextBoxBase.Text"/> property. Second,
   you can specify an instance of any of the
   following classes as the data source: </para>
			<list type="table">
				<listheader>
					<term>Description</term>
					<description>Example</description>
				</listheader>
				<item>
					<term> Any class that implements <see cref="System.ComponentModel.IBindingList"/> or <see cref="System.ComponentModel.ITypedList"/>. These include: <see cref="System.Data.DataSet"/>, <see cref="System.Data.DataTable"/>, <see cref="System.Data.DataView"/>, or
      <see cref="System.Data.DataViewManager"/>.</term>
					<description>
						<para>A C# example:</para>
						<para><c>DataSet ds = new DataSet("myDataSet");</c></para>
					</description>
				</item>
				<item>
					<term> Any class that implements <see cref="System.Collections.IList"/> to create an indexed collection of
   objects. The collection must be created and filled before creating the
   <see cref="System.Windows.Forms.Binding"/> object. The objects in the list must
   all be of the same type; otherwise an exception will be
   thrown.</term>
					<description>
						<para>A C# example:</para>
						<para><c>ArrayList ar1 = new ArrayList;</c></para>
						<para><c>Customer1 cust1 = new Customer("Louis");</c></para>
						<para><c>ar1.Add(cust1);</c></para>
					</description>
				</item>
				<item>
					<term> Strongly typed <see cref="System.Collections.IList"/> of strongly typed objects </term>
					<description>
						<para>A C# example:</para>
						<para><c>Customer [] custList = new Customer[3];</c></para>
					</description>
				</item>
			</list>
			<para>Third, you must specify the navigation path, which can
   be an empty string (""), a single property name, or a period-delimited hierarchy
   of names. If you set the navigation path to an empty string, the <see cref="System.Object.ToString"/> method
   will be called on the underlying data source object.</para>
			<para>If the data source is a <see cref="System.Data.DataTable"/>, which can
contain multiple <see cref="System.Data.DataColumn"/> objects, the navigation path
must be used to resolve to a specific column.</para>
			<note type="note">
   When the data source is a
<see cref="System.Data.DataSet"/>, 
<see cref="System.Data.DataViewManager"/>, or <see cref="System.Data.DataTable"/>, you are actually binding to a 
<see cref="System.Data.DataView"/>. 
   Consequently, the bound rows are actually <see cref="System.Data.DataRowView"/> objects.
</note>
			<para>A period-delimited navigation path is required when the
   data source is set to an object that contains
   multiple <see cref="System.Data.DataTable"/>
   objects (such as a <see cref="System.Data.DataSet"/> or <see cref="System.Data.DataViewManager"/> ). You can also use a period-delimited navigation path when you bind to an object whose properties return references to
   other objects (such as a class with properties that return
   other class objects). For example, the following navigation paths all describe valid data fields:</para>
			<list type="bullet"><item>
					<term>      "Size.Height"</term>
				</item>
				<item>
					<term>      "Suppliers.CompanyName"</term>
				</item>
				<item>
					<term>      "Regions.regionsToCustomers.CustomerFirstName"</term>
				</item>
				<item>
					<term>      "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"</term>
				</item>
			</list>
			<para> Each member of the path can return either a property
   that resolves to a single value(such as an integer), or a list of values
   (such as an array of strings). Although each member in the path can be a list or
   property, the final member must resolve to a property. Each member builds on the
   previous member: "Size.Height" resolves to the <see cref="System.Drawing.Size.Height"/> for
   the current <see cref="System.Drawing.Size"/>
   
   ; "Regions.regionsToCustomers.CustomerFirstName" resolves
   to the first name for the current customer, where the customer is one of the customers for
   the current
   
   region.</para>
			<para>A <see cref="System.Data.DataRelation"/> returns a
list of values by linking one <see cref="System.Data.DataTable"/> to a second
<see cref="System.Data.DataTable"/> 
in a <see cref="System.Data.DataSet"/> . If the <see cref="System.Data.DataSet"/> contains <see cref="System.Data.DataRelation"/> objects, you can specify the data member as a
<see cref="System.Data.DataTable.TableName"/>
followed by a <see cref="System.Data.DataRelation.RelationName"/>, and then a <see cref="System.Data.DataColumn.ColumnName"/> . For
example, if the <see cref="System.Data.DataTable"/> named "Suppliers" contains a <see cref="System.Data.DataRelation"/> named "suppliers2products", the data member could
be "Suppliers.suppliers2products.ProductName".</para>
			<para> The data source can consist of a set of related classes.
   For example, imagine a set of classes that catalogs solar systems. The class named
   System contains a property named Stars that returns a collection of star
   objects. Each Star object has Name and Mass properties, as well as a Planets property that returns
   a collection of Planet objects. In this system, each planet also
   has Mass and Name properties. Each Planet object further has a Moons property that returns
   a collection of Moon objects, each of which also has Name and Mass properties. If you specify a System object as the data source, you can
   specify any of the following as the data member: </para>
			<list type="bullet"><item>
					<term>      "Stars.Name"</term>
				</item>
				<item>
					<term>      "Stars.Mass"</term>
				</item>
				<item>
					<term>      "Stars.Planets.Name"</term>
				</item>
				<item>
					<term>      "Stars.Planets.Mass"</term>
				</item>
				<item>
					<term>      "Stars.Planets.Moons.Name"</term>
				</item>
				<item>
					<term>      "Stars.Planets.Moons.Mass"</term>
				</item>
			</list>
			<para>Controls that can be
   simple-bound feature a collection of <see cref="System.Windows.Forms.Binding"/> objects in a <see cref="System.Windows.Forms.ControlBindingsCollection"/>, which you can access
   through the control's <see cref="System.Windows.Forms.Control.DataBindings"/> property. You add a <see cref="System.Windows.Forms.Binding"/> object
   to the collection by calling the <see cref="System.Windows.Forms.ControlBindingsCollection.Add"/> method, thereby
   binding a property of the control
   to a property of an object
   (or to a property of the current object in a list).</para>
			<para> You can simple-bind to any object that derives from
   the <see cref="System.Windows.Forms.Control" qualify="true"/> class, for example, the following Windows controls:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Windows.Forms.Button"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.CheckBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.CheckedListBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ComboBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.DateTimePicker"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.DomainUpDown"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.GroupBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.HScrollBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Label"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.LinkLabel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ListBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ListView"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.MonthCalendar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.NumericUpDown"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.PictureBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ProgressBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.RadioButton"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.RichTextBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ScrollBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.StatusBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.TextBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.TreeView"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.VScrollBar"/></term>
				</item>
			</list>
			<note type="note">
   Only the <see cref="System.Windows.Forms.ListControl.SelectedValue"/> property of
   the <see cref="System.Windows.Forms.ComboBox"/> , <see cref="System.Windows.Forms.CheckedListBox"/> , and <see cref="System.Windows.Forms.ListBox"/>
   control is simple
   bound.
   
</note>
			<para> The <see cref="System.Windows.Forms.BindingManagerBase"/> class is an
abstract class that manages
all the <see cref="System.Windows.Forms.Binding"/> objects for a
particular data source and data member.
Classes that derive from <see cref="System.Windows.Forms.BindingManagerBase"/> are the <see cref="System.Windows.Forms.CurrencyManager"/> and the <see cref="System.Windows.Forms.PropertyManager"/>
classes. How a <see cref="System.Windows.Forms.Binding"/>
is managed
depends on whether the <see cref="System.Windows.Forms.Binding"/> is a list binding or a property
binding. For example, if it is a list binding, you can use the <see cref="System.Windows.Forms.BindingManagerBase"/> object to specify a <see cref="System.Windows.Forms.BindingManagerBase.Position"/> in the list; the <see cref="System.Windows.Forms.BindingManagerBase.Position"/>, therefore, determines which item (out of
all items in the list) is actually bound to a control. To return the
appropriate <see cref="System.Windows.Forms.BindingManagerBase"/>
, use the <see cref="System.Windows.Forms.BindingContext"/>.</para>
			<para>To add a new row to a set of controls bound to the same <see cref="System.Windows.Forms.Binding.DataSource"/>, use the <see cref="System.Windows.Forms.BindingManagerBase.AddNew"/> method of the <see cref="System.Windows.Forms.BindingManagerBase"/> class. Use the <see cref="System.Windows.Forms.BindingContext.this"/> property of the <see cref="System.Windows.Forms.BindingContext"/> class to return the appropriate <see cref="System.Windows.Forms.CurrencyManager"/>. To escape the addition of the new row,
use the <see cref="System.Windows.Forms.CurrencyManager.CancelCurrentEdit"/> method.</para>
		</remarks>
		<example>
			<para>The following example creates a Windows Form with
      several controls that demonstrate simple data binding. The example creates a <see cref="System.Data.DataSet"/> with two
      tables named <see langword="Customers "/>and <see langword="Orders"/>, and a <see cref="System.Data.DataRelation"/> named
      <see langword="custToOrders"/>
   . Four controls (a <see cref="System.Windows.Forms.DateTimePicker"/> and three <see cref="System.Windows.Forms.TextBox"/> controls) are data
   bound to columns in the tables. For each
   control, the example creates and adds a <see cref="System.Windows.Forms.Binding"/> to the control
   through the <see cref="System.Windows.Forms.Control.DataBindings"/>
   property. The example returns a <see cref="System.Windows.Forms.BindingManagerBase"/>
   object for each table through the form's <see cref="System.Windows.Forms.BindingContext"/> object. Four <see cref="System.Windows.Forms.Button"/> controls increment or
   decrement the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> property on the <see cref="System.Windows.Forms.BindingManagerBase"/> objects.</para>
			<codelink SampleID="Classic Binding Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingContext"/>
		<seealso cref="System.Windows.Forms.BindingManagerBase"/>
		<seealso cref="System.Windows.Forms.ComboBox"/>
		<seealso cref="System.Windows.Forms.DataGrid"/>
	</doc>
</docs>
