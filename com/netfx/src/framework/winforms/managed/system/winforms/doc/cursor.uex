<docs>
	<doc for="Cursor.Cursor">
		<summary>
     Private constructor. If you want a standard system cursor, use one of the
     definitions in the Cursors class.  The hack is to differentiate from the standard
     for Image descendants which is to take a handle as a one int parameter.
 </summary>
	</doc>
	<doc for="Cursor.DestroyHandle">
		<summary>
    Destroys the Win32 handle of this <see cref="System.Windows.Forms.Cursor"/>, if the
 <see cref="System.Windows.Forms.Cursor"/> 
 owns the handle
 </summary>
		<remarks>
    The default implementation of this method calls
    the appropriate Win32 function to destroy the handle if this object
    currently owns the handle. It does nothing if the object does not currently own
    the handle.
    <note type="inotes">
       Override this method
       to implement any special code necessary to destroy the handle. This method is
       called even if the handle is not owned by this object.
    </note>
		</remarks>
	</doc>
	<doc for="Cursor.DrawImageCore">
		<summary>
     Draws this image to a graphics object.  The drawing command originates on the graphics
     object, but a graphics object generally has no idea how to render a given image.  So,
     it passes the call to the actual image.  This version crops the image to the given
     dimensions and allows the user to specify a rectangle within the image to draw.
 </summary>
		<param name="graphics">
     The graphics object to render to.
 </param>
		<param name="imageRect">
     The rectanglular area of the image to draw.
 </param>
		<param name="targetRect">
     The rectangle to crop to.
 </param>
		<param name="stretch">
     true to stretch the image, false to crop it.
 </param>
	</doc>
	<doc for="Cursor.Initialize">
		<summary>
     Initializes this image for the first time.  This should only be called once.
 </summary>
		<param name="picture">
     The IPicture object to initialize the bitmap with.
 </param>
	</doc>
	<doc for="Cursor.LoadImage">
		<summary>
     Loads an image from a datastream.  This will return a bitmap, icon,
     cursor or metafile object depending on the type of data in the stream.
 </summary>
		<param name="stream">
     The data stream to load from.
 </param>
		<seealso cref="Stream"/>
	</doc>
	<doc for="Cursor.LoadImage1">
		<summary>
     Loads an image from a COM stream.  This will return a bitmap, icon,
     cursor or metafile object depending on the type of data in the stream.
 </summary>
		<param name="stream">
     The COM stream to load from.
 </param>
		<returns>
     an Image object that may be of Bitmap, Icon, Metafile or
     Cursor type.
		</returns>
		<seealso cref="Bitmap"/>
		<seealso cref="Cursor"/>
		<seealso cref="Icon"/>
		<seealso cref="System.Drawing.Imaging.Metafile"/>
	</doc>
	<doc for="Cursor.LoadPicture">
		<summary>
     Loads a picture from the requested stream.
 </summary>
		<param name="stream">
     The stream to load from
 </param>
		<returns>
     an OLE IPicture object
 </returns>
	</doc>
	<doc for="Cursor.GetHashCode">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Cursor.ToString">
		<nodoc/>
		<summary>
			<para>Retrieves a human readable string representing this
   <see cref="System.Windows.Forms.Cursor"/>
   .</para>
		</summary>
		<returns>
			<para>A <see cref="System.String"/> that represents this <see cref="System.Windows.Forms.Cursor"/> .</para>
		</returns>
	</doc><doc for="Cursor.ISerializable.GetObjectData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Cursor.Cursor2">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Windows.Forms.Cursor"/>
class from
the specified file.</para>
		</summary>
		<param name="fileName">The cursor file to load. </param>
		<remarks>
			<para>The
   <paramref name="fileName"/> parameter must reference
      a standard cursor (.cur) file. </para>
			<note type="note">
      Animated cursors (.ani files) are not
      supported by the <see cref="System.Windows.Forms.Cursor"/> class.
      
   </note>
		</remarks>
		<example>
			<para>The following example displays customer information in a <see cref="System.Windows.Forms.TreeView"/> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <see cref="System.Windows.Forms.TreeView"/> is suppressed by using the <see cref="System.Windows.Forms.TreeView.BeginUpdate"/> and <see cref="System.Windows.Forms.TreeView.EndUpdate"/> methods, and a wait <see cref="System.Windows.Forms.Cursor"/> is displayed while the <see cref="System.Windows.Forms.TreeView"/> creates and paints the <see cref="System.Windows.Forms.TreeNode"/> objects. This example assumes you have a Customer object that can hold a collection of Order objects. It also assumes that you have created an instance of a <see cref="System.Windows.Forms.TreeView"/> control on a <see cref="System.Windows.Forms.Form"/> . </para>
			<codelink SampleID="TreeView" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Cursor.Cursor4">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Windows.Forms.Cursor"/> class from the specified data stream.
   </para>
		</summary>
		<param name="stream">The data stream to load the <see cref="System.Windows.Forms.Cursor"/> from. </param>
		<remarks>
			<para> The data stream specified by <paramref name="stream"/> must contain a cursor (.cur) file.</para>
			<note type="note">
   Animated cursors (.ani files) are not supported by the <see cref="System.Windows.Forms.Cursor"/> class.
</note>
		</remarks>
		<example>
			<para> 
      The following example loads a cursor from a <see cref="System.IO.Stream"/> created by the <see cref="System.Windows.Forms.OpenFileDialog.OpenFile"/> method of an <see cref="System.Windows.Forms.OpenFileDialog"/> . When the method
      is called, an <see cref="System.Windows.Forms.OpenFileDialog"/> is displayed to the user and when a .CUR
      file is selected and the dialog closed, the file is opened and the <see cref="System.IO.Stream"/> returned is used to
      create a <see cref="System.Windows.Forms.Cursor"/>.</para>
			<codelink SampleID="CursorFromResource" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.Stream"/>
	</doc>
	<doc for="Cursor.Hide">
		<summary>
			<para> Hides the cursor.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Cursor.Show"/> and <see cref="System.Windows.Forms.Cursor.Hide"/> method calls must be balanced. For every call to the <see cref="System.Windows.Forms.Cursor.Hide"/> method
   there must be a corresponding call to the <see cref="System.Windows.Forms.Cursor.Show"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<para> The following example hides the cursor when the mouse 
      pointer enters the button's client area. Likewise, when the mouse pointer leaves
      the button's client area, the cursor is shown again. This example assumes you
      have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Button"/> named <c>myButton</c> .</para>
			<codelink SampleID="CursorFromResource" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursor.Show"/>
	</doc>
	<doc for="Cursor.Show">
		<summary>
			<para> Displays the cursor.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Cursor.Show"/> and <see cref="System.Windows.Forms.Cursor.Hide"/> method calls must be balanced. For
   every call to the <see cref="System.Windows.Forms.Cursor.Hide"/> method
   there must be a corresponding call to the <see cref="System.Windows.Forms.Cursor.Show"/> method.</para>
		</remarks>
		<example>
			<para> The following example hides the cursor when the mouse pointer enters the button's client area. Likewise, when the mouse pointer leaves the button's client area, the cursor is shown again. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Button"/> named <c>myButton</c> .</para>
			<codelink SampleID="CursorFromResource" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursor.Hide"/>
	</doc>
	<doc for="Cursor.Clip">
		<summary>
			<para> Gets or sets the bounds that represents the
      clipping rectangle for
      the cursor.</para>
		</summary>
		<value>
			<para>The <see cref="System.Drawing.Rectangle"/> that represents the clipping
   rectangle for the <see cref="System.Windows.Forms.Cursor"/>, in screen coordinates.</para>
		</value>
		<remarks>
			<para>A clipped cursor is allowed to move only
      within its clipping rectangle. Generally, the system allows this only if
      the mouse is currently captured. If the cursor is not currently clipped, the
      resulting rectangle contains the dimensions of the entire screen.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to set this property. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<para>The following example creates a cursor from the <see cref="System.Windows.Forms.Cursor.Current"/> cursor's <see cref="System.Windows.Forms.Cursor.Handle"/>, changes its position and clipping rectangle. The result is the cursor will move up and to the left 50 pixels from where it is when the code is executed. Additionally, the cursor's clipping rectangle is changed to the bounds of the form (by default it is the user's whole screen). This example assumes you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Button"/> to call this code when it is clicked.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="1"/>
		</example>
		<keyword term="clipping rectangle"/>
	</doc>
	<doc for="Cursor.Position">
		<summary>
			<para> Gets or
      sets the cursor's position.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Point"/> that represents the
   cursor's position in screen coordinates.</para>
		</value>
		<example>
			<para>The following example creates a cursor from the <see cref="System.Windows.Forms.Cursor.Current"/> cursor's <see cref="System.Windows.Forms.Cursor.Handle"/>, changes its position and clipping rectangle. The result is the cursor will move up and to the left 50 pixels from where it is when the code is executed. Additionally, the cursor's clipping rectangle is changed to the bounds of the form (by default it is the user's whole screen). This example assumes you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Button"/> to call this code when it is clicked.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Point"/>
	</doc>
	<doc for="Cursor.Cursor1">
		<overload>
			<para> Initializes a new instance
      of the <see cref="System.Windows.Forms.Cursor"/> class.
      </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Windows.Forms.Cursor"/> class from the specified Windows handle.
   </para>
		</summary>
		<param name="handle">An <see cref="System.IntPtr"/> that represents the Windows handle of the cursor to create. </param>
		<exception cref="System.ArgumentException"><paramref name="handle"/> is <see cref="System.IntPtr.Zero" qualify="true"/> .</exception>
		<remarks>
			<para> You must free the cursor handle when you are done with
      it. For more information about disposing of resources, see
   <see topic="cpconCleaningUpUnmanagedResources"/>
   .
   </para>
		</remarks>
		<example>
			<para>The following example creates a cursor from the <see cref="System.Windows.Forms.Cursor.Current"/> cursor's <see cref="System.Windows.Forms.Cursor.Handle"/>, changes its position and clipping
   rectangle. The result is the cursor will move up and to the left 50 pixels from
   where it is when the code is executed. Additionally, the cursor's clipping
   rectangle is changed to the bounds of the form (by default it is the user's
   whole screen). This example assumes you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Button"/> to
   call this code when it is clicked.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Cursor.Handle">
		<summary>
			<para> Gets the handle of the cursor.</para>
		</summary>
		<value>
			<para>An <see cref="System.IntPtr"/>
that represents the cursor's handle.</para>
		</value>
		<exception cref="System.Exception">The handle value is <see cref="System.IntPtr.Zero" qualify="true"/> .</exception>
		<remarks>
			<para>This is not a copy of the handle; do not dispose
      of it.</para>
		</remarks>
		<example>
			<para>The following example creates a cursor from the <see cref="System.Windows.Forms.Cursor.Current"/> cursor's <see cref="System.Windows.Forms.Cursor.Handle"/>, changes its position and clipping rectangle. The result is the cursor will move up and to the left 50 pixels from where it is when the code is executed. Additionally, the cursor's clipping rectangle is changed to the bounds of the form (by default it is the user's whole screen). This example assumes you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Button"/> to call this code when it is clicked.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursor.Dispose"/>
	</doc>
	<doc for="Cursor.Size">
		<summary>
			<para>Gets the size of the cursor object.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> that represents the width and
   height of the <see cref="System.Windows.Forms.Cursor"/>.</para>
		</value>
		<example>
			<para>The following example draws the specified cursor on the form in its normal
      size, and in stretched mode, twice its size. This example assumes that you have
      a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Cursor"/> object to pass into the
      method when it is called.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="2"/>
		</example>
		<seealso cref="System.Drawing.Size"/>
	</doc>
	<doc for="Cursor.CopyHandle">
		<summary>
			<para> Copies the handle of this <see cref="System.Windows.Forms.Cursor"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.IntPtr"/> that represents the cursor's handle.</para>
		</returns>
		<remarks>
			<para>The handle created as a result of calling this method
      must be disposed of when you are done with it because it will not
      be disposed of by the garbage collector.</para>
		</remarks>
		<seealso cref="System.IntPtr"/>
		<seealso cref="System.Windows.Forms.Cursor.Dispose"/>
		<seealso cref="System.GC"/>
	</doc>
	<doc for="Cursor.Dispose">
		<summary>
			<para>Releases all resources used by the <see cref="System.Windows.Forms.Cursor"/> .</para>
		</summary>
		<remarks>
			<para>Call <see cref="System.Windows.Forms.Cursor.Dispose"/> when you are finished 
   using the <see cref="System.Windows.Forms.Cursor"/>.
   The <see langword="Dispose"/> method leaves the <see cref="System.Windows.Forms.Cursor"/> in
   an unusable state. After calling <see cref="System.Windows.Forms.Cursor.Dispose"/>, you must release all
   references to the <see cref="System.Windows.Forms.Cursor"/> so the garbage collector can reclaim the
   memory that the <see cref="System.Windows.Forms.Cursor"/> was occupying. For more information,
   see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconImplementingDisposeMethod"/>.</para>
			<note type="note">
   Always call <see cref="System.Windows.Forms.Cursor.Dispose"/> before you release your last reference to
   the <see cref="System.Windows.Forms.Cursor"/>. Otherwise, the resources it is using will
   not be freed until the garbage collector calls the <see cref="System.Windows.Forms.Cursor"/>
   object's <see cref="System.Windows.Forms.Cursor.Finalize"/> method.
</note>
		</remarks>
		<example>
			<para>The following example draws the specified cursor on the form in its normal size, and in stretched mode, twice its size. This example assumes that you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Cursor"/> to pass into the method when it is called.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Cursor.Draw">
		<summary>
			<para> Draws the cursor on the specified surface, within the specified bounds.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface on which to draw the <see cref="System.Windows.Forms.Cursor"/> .</param>
		<param name="targetRect">The <see cref="System.Drawing.Rectangle"/> that represents the bounds of the <see cref="System.Windows.Forms.Cursor"/> .</param>
		<remarks>
			<para>The drawing command originates on the graphics surface represented by the <paramref name="g"/> parameter,
   but a <see cref="System.Drawing.Graphics"/> does not contain information about how to
   render a given image, so it passes the call to the <see cref="System.Windows.Forms.Cursor"/> . The <see cref="System.Windows.Forms.Cursor.Draw"/>
   method crops the image to the given dimensions and allows you to specify a
<see cref="System.Drawing.Rectangle"/> within which to draw the <see cref="System.Windows.Forms.Cursor"/> . This method 
   is typically used if you want to draw the curso on a Graphics surface. For
   example, you might have a dialog that allows the user to select cursors from a
<see cref="System.Windows.Forms.ListBox"/> control, or a group of <see cref="System.Windows.Forms.RadioButton"/> controls.</para>
		</remarks>
		<example>
			<para>The following example draws the specified cursor on the form in its normal size, and in stretched mode, twice its size. This example assumes that you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Cursor"/> object to pass into the method when it is called.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursor.DrawStretched"/>
	</doc>
	<doc for="Cursor.DrawStretched">
		<summary>
			<para>Draws the cursor in a stretched format on the specified
      surface, within the specified bounds.</para>
		</summary>
		<param name="g">The <see cref="System.Drawing.Graphics"/> surface on which to draw the <see cref="System.Windows.Forms.Cursor"/> .</param>
		<param name="targetRect">The <see cref="System.Drawing.Rectangle"/> that represents the bounds of the <see cref="System.Windows.Forms.Cursor"/> .</param>
		<remarks>
			<para>The drawing command originates on the graphics surface represented by the <paramref name="g"/> parameter, but a
<see cref="System.Drawing.Graphics"/> 
object does not contain information about how to render a given image, so it
passes the call to the <see cref="System.Windows.Forms.Cursor"/> object. The <see cref="System.Windows.Forms.Cursor.DrawStretched"/>
method stretches the image to fill the specified
<see cref="System.Drawing.Rectangle"/> when the cursor is drawn.</para>
		</remarks>
		<example>
			<para>The following example draws the specified cursor on the form in its normal size, and in stretched mode, twice its size. This example assumes that you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Cursor"/> object to pass into the method when it is called.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursor.Draw"/>
	</doc>
	<doc for="Cursor.operatorEQ">
		<summary>
			<para> Returns a value indicating whether two
      instances of the <see cref="System.Windows.Forms.Cursor"/> class are equal.</para>
		</summary>
		<altmember cref="System.Windows.Forms.Cursor.Equals"/>
		<param name="left">A <see cref="System.Windows.Forms.Cursor"/> to compare.</param>
		<param name=" right">A <see cref="System.Windows.Forms.Cursor"/> to compare.</param>
		<returns>
			<para><see langword="true"/> if two instances of the <see cref="System.Windows.Forms.Cursor"/> class are equal;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example draws the specified cursor on the form in its normal size, and in stretched mode, twice its size. This example assumes that you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Cursor"/> object to pass into the method when it is called.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="2"/>
		</example>
		<seealso topic="frlrfsystemwindowsformscursorclassop_inequalitytopic" title="Inequality Operator"/>
		<keyword term="equality operator"/>
	</doc>
	<doc for="Cursor.operatorNE">
		<summary>
			<para>Returns a value indicating whether two instances
      of the <see cref="System.Windows.Forms.Cursor"/> class are not equal.</para>
		</summary>
		<altmember cref="System.Windows.Forms.Cursor.Equals"/>
		<param name="left">A <see cref="System.Windows.Forms.Cursor"/> to compare.</param>
		<param name=" right">A <see cref="System.Windows.Forms.Cursor"/> to compare.</param>
		<returns>
			<para><see langword="true"/> if two instances of the <see cref="System.Windows.Forms.Cursor"/> class are not equal;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example draws the specified cursor on the form in its normal size, and in stretched mode, twice its size. This example assumes that you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Cursor"/> to pass into the method when it is called.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="2"/>
		</example>
		<seealso topic="frlrfsystemwindowsformscursorclassop_equalitytopic" title="Equality Operator"/>
		<keyword term="inequality operator"/>
	</doc>
	<doc for="Cursor.Equals">
		<summary>
			<para> Returns a value indicating whether this cursor is equal to the specified <see cref="System.Windows.Forms.Cursor"/> .</para>
		</summary>
		<param name="obj">The <see cref="System.Windows.Forms.Cursor"/> to compare.</param>
		<returns>
			<para><see langword="true"/> if this cursor is equal to the specified <see cref="System.Windows.Forms.Cursor"/>
;
otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example creates a cursor from the <see cref="System.Windows.Forms.Cursor.Current"/> cursor's <see cref="System.Windows.Forms.Cursor.Handle"/>, changes its position and clipping rectangle. The result is the cursor will move up and to the left 50 pixels from where it is when the code is executed. Additionally, the cursor's clipping rectangle is changed to the bounds of the form (by default it is the user's whole screen). This example assumes you have a <see cref="System.Windows.Forms.Form"/> and a <see cref="System.Windows.Forms.Button"/> to call this code when it is clicked.</para>
			<codelink SampleID="System.Windows.Forms.Cursor Members" SnippetID="1"/>
		</example>
		<seealso topic="frlrfsystemwindowsformscursorclassop_inequalitytopic" title="Inequality Operator"/>
		<seealso topic="frlrfsystemwindowsformscursorclassop_equalitytopic" title="Equality Operator"/>
		<keyword term="equality operator"/>
	</doc>
	<doc for="Cursor.Finalize">
		<summary>
			<para>Releases the unmanaged resources and performs other
      cleanup operations before the <see cref="System.Windows.Forms.Cursor"/> is reclaimed by garbage
      collection.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/>.
   Application code should not call this method; an object's <see cref="System.Object.Finalize"/> method is
   automatically invoked during garbage collection, unless finalization by the
   garbage collector has been disabled by a call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   method. For more information, see <see topic="cpconFinalizeMethodscDestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso cref="System.Object.Finalize"/>
		<seealso cref="System.GC.SuppressFinalize"/>
	</doc>
	<doc for="Cursor.Current">
		<summary>
			<para>Gets or sets a cursor object that represents the mouse cursor.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Cursor"/> that
   represents the mouse cursor. The default is <see langword="null"/> if the mouse cursor is
   not visible.</para>
		</value>
		<remarks>
			<para>Setting the <see cref="System.Windows.Forms.Cursor.Current"/> property changes the
   cursor currently displayed, and the application stops listening for mouse events. For
   example, you might set the <see cref="System.Windows.Forms.Cursor.Current"/> property to <see cref="System.Windows.Forms.Cursors.WaitCursor" qualify="true"/> before you start filling a <see cref="System.Windows.Forms.TreeView"/>,
<see cref="System.Windows.Forms.DataGrid"/>, or <see cref="System.Windows.Forms.ListBox"/> control with 
   a large amount of data. After the loop is completed, set this property back to
<see cref="System.Windows.Forms.Cursors.Default" qualify="true"/> to display the appropriate cursor
   for each control. </para>
			<note type="note">
   If you call <see cref="System.Windows.Forms.Application.DoEvents" qualify="true"/> before resetting the <see cref="System.Windows.Forms.Cursor.Current"/>
   property back to the <see cref="System.Windows.Forms.Cursors.Default" qualify="true"/> cursor, the application will resume listening for mouse events and will resume
   displaying the appropriate <see cref="System.Windows.Forms.Cursor"/> for each control in the application.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for safe subwindows to set this property. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.SafeSubWindows" qualify="true"/></permission>
		<example>
			<para>The following example displays customer information in a <see cref="System.Windows.Forms.TreeView"/>
control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each
customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <see cref="System.Windows.Forms.TreeView"/> is suppressed by using
the <see cref="System.Windows.Forms.TreeView.BeginUpdate"/> and <see cref="System.Windows.Forms.TreeView.EndUpdate"/> methods, and a wait <see cref="System.Windows.Forms.Cursor"/> is displayed
while the <see cref="System.Windows.Forms.TreeView"/> creates and paints the <see cref="System.Windows.Forms.TreeNode"/> objects. This
example assumes you have a cursor file named <c>MyWait.cur</c> in the application directory. It
also assumes you have a <c>Customer</c> object that can hold a collection of <c>Order</c>
objects. It also assumes that you have created an instance of a <see cref="System.Windows.Forms.TreeView"/>
control on a <see cref="System.Windows.Forms.Form"/> . </para>
			<codelink SampleID="TreeView" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Application.DoEvents"/>
	</doc>
	<doc for="Cursor">
		<summary>
			<para>Represents the image used to paint the mouse pointer.</para>
		</summary>
		<remarks>
			<para>A cursor is a small picture whose location on the screen
      is controlled by a pointing device, such as a mouse, pen, or trackball. When the
      user moves the pointing device, the operating system moves the cursor
      accordingly.</para>
			<para> Different cursor shapes are used to inform the user what operation
      the mouse will have. For example, when editing or selecting text, a <see cref="System.Windows.Forms.Cursors.IBeam" qualify="true"/> cursor is typically
      displayed. A wait cursor is commonly used to inform the user that a process is
      currently running. Examples of processes you might have the user wait for are opening a
      file, saving a file, or filling a control such as a <see cref="System.Windows.Forms.DataGrid"/>,
      <see cref="System.Windows.Forms.ListBox"/> or <see cref="System.Windows.Forms.TreeView"/> with a large
      amount of data.</para>
			<para> All controls that derive
      from the <see cref="System.Windows.Forms.Control"/> class have a <see cref="System.Windows.Forms.Control.Cursor"/>
      property. To change the cursor displayed by the mouse pointer when it is within
      the bounds of the control, assign a <see cref="System.Windows.Forms.Cursor"/>
      to the <see cref="System.Windows.Forms.Control.Cursor"/> property of the control. Alternatively, you can
      display cursors at the application level by assigning a <see cref="System.Windows.Forms.Cursor"/> to
      the <see cref="System.Windows.Forms.Cursor.Current"/>
      property. For example, if the purpose of your application is to edit a text
      file, you might set the <see cref="System.Windows.Forms.Cursor.Current"/>
      property to <see cref="System.Windows.Forms.Cursors.WaitCursor " qualify="true"/>
      to display a wait
      cursor over the application while the file loads or saves to prevent any mouse
      events from being processed. When the process is complete, set the <see cref="System.Windows.Forms.Cursor.Current"/> property to <see cref="System.Windows.Forms.Cursors.Default" qualify="true"/> for the application to display the
      appropriate cursor over each control type.</para>
			<note type="note">
      If you call <see cref="System.Windows.Forms.Application.DoEvents" qualify="true"/> before resetting the <see cref="System.Windows.Forms.Cursor.Current"/>
      property back to the <see cref="System.Windows.Forms.Cursors.Default" qualify="true"/> cursor,
      the application will resume listening for mouse events and will resume displaying the
      appropriate <see cref="System.Windows.Forms.Cursor"/> for each control in the
      application.
      
      </note>
			<para> Cursor objects can be created from several sources,
      such as the handle of an existing <see cref="System.Windows.Forms.Cursor"/>, a standard <see cref="System.Windows.Forms.Cursor"/> file, a
      resource, or
      a data stream.</para>
			<note type="note">
      The <see cref="System.Windows.Forms.Cursor"/> class does not
      support animated cursors (.ani files) or cursors with colors other than black and
      white.
      
      </note>
			<para>If the image you are using as a cursor is too small, you can
      use the <see cref="System.Windows.Forms.Cursor.DrawStretched"/> method to force the image to fill the bounds
      of the cursor. You can temporarily hide the cursor by calling the
      <see cref="System.Windows.Forms.Cursor.Hide"/> method, and restore it by calling the <see cref="System.Windows.Forms.Cursor.Show"/> method.</para>
		</remarks>
		<example>
			<para> The following example displays a form that demonstrates
      using a custom cursor by using the <see cref="System.Windows.Forms.Cursor.#ctor"/> constructor. The custom <see cref="System.Windows.Forms.Cursor"/> is embedded in the application’s resource file. The
      example assumes that you have a cursor contained in a cursor file named <c>MyCursor.cur</c>. To compile this
   example using the command line, include the following flag:
<see langword="/res:MyCursor.Cur, CustomCursor.MyCursor.Cur"/>
			</para>
			<codelink SampleID="System.Windows.Forms.Cursor" SnippetID="1"/>
			<para>The following example displays customer information in a <see cref="System.Windows.Forms.TreeView"/>
control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each
customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <see cref="System.Windows.Forms.TreeView"/> is suppressed by using
the <see cref="System.Windows.Forms.TreeView.BeginUpdate"/> and <see cref="System.Windows.Forms.TreeView.EndUpdate"/> methods, and a wait <see cref="System.Windows.Forms.Cursor"/> is displayed
while the <see cref="System.Windows.Forms.TreeView"/> creates and paints the <see cref="System.Windows.Forms.TreeNode"/> objects. This
example assumes you have a cursor file named <c>MyWait.cur</c> in the application directory. It also
assumes you have a <c>Customer</c> object that can hold a collection of <c>Order</c>
objects, and that you have created an instance of a <see cref="System.Windows.Forms.TreeView"/>
control on a <see cref="System.Windows.Forms.Form"/> . </para>
			<codelink SampleID="TreeView" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursors"/>
	</doc>
	<doc for="Cursor.Cursor3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Cursor"/> class from the specified resource with the specified resource type.</para>
		</summary>
		<param name="type">The resource <see cref="System.Type"/> .</param>
		<param name="resource">The name of the resource.</param>
		<remarks>
			<para>The following is an example of how to embed a cursor as
      a resource within your application. To embed the resource, reference the resource name followed by a comma, then its full
      assembly path. See the Example section to learn how to load the cursor from
      the embedded resource. </para>
			<code>
Using the C# compiler:
csc /resource:"MyWaitCursor.cur","MyCursors.MyWaitCursor.cur" MyCursor.cs

Using the Visual Basic compiler:
vbc /resource:"MyWaitCursor.cur","MyCursors.MyWaitCursor.cur" MyCursor.vb
      </code>
			<note type="note">
      The resource reference when
      compiling as well as when referencing it in code, is case sensitive for both
      the C# and Visual Basic compilers.
      
      </note>
		</remarks>
		<example>
			<para> The following example displays a form that demonstrates
      using a custom cursor by using the <see cref="System.Windows.Forms.Cursor.#ctor"/> constructor. The custom <see cref="System.Windows.Forms.Cursor"/> is embedded in the application’s resource file. The
      example assumes that you have a cursor contained in a cursor file named <c>MyCursor.cur</c>. To compile this
   example using the command line, include the following flag:
<see langword="/res:MyCursor.Cur, CustomCursor.MyCursor.Cur"/>
			</para>
			<codelink SampleID="System.Windows.Forms.Cursor" SnippetID="1"/>
		</example>
		<seealso topic="vcgrfbuildingfromcommandline" title="Building From the Command Line (C#)"/>
		<seealso topic="vaconbuildingfromcommandline" title="Building From the Command Line (VB)"/>
	</doc>
</docs>
