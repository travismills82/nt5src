<docs>
	<doc for="Control.ControlKeyboardRoutingSwitch">
		<nodoc/>
	</doc>
	<doc for="Control.EventKeyDown">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.KeyDown"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.KeyDown"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventKeyPress">
		<summary>
			<para>XXX. This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Control.EventKeyUp">
		<summary>
			<para>XXX. This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Control.EventMouseDown">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.KeyPress"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.KeyPress"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMouseEnter">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.KeyUp"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.KeyUp"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMouseLeave">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseDown"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseDown"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMouseHover">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseEnter"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseEnter"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMouseMove">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseLeave"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseLeave"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMouseUp">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseHover"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseHover"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMouseWheel">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseMove"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseMove"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventClick">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseUp"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseUp"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventDoubleClick">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.MouseWheel"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.MouseWheel"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventMove">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Click"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Click"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventResize">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.DoubleClick"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.DoubleClick"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventLayout">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Move"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Move"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventGotFocus">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Resize"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Resize"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventLostFocus">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Layout"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventEnabledChanged">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.GotFocus"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.GotFocus"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventEnter">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.LostFocus"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.LostFocus"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventLeave">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.EnabledChanged"/> event in the <see cref="System.ComponentModel.Component.Events"/> collection. This 
    field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.EnabledChanged"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventHandleCreated">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Enter"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Enter"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventHandleDestroyed">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Leave"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Leave"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventVisibleChanged">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.HandleCreated"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.HandleCreated"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventControlAdded">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.HandleDestroyed"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.HandleDestroyed"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventControlRemoved">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.VisibleChanged"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.VisibleChanged"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventChangeUICues">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.ControlAdded"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.ControlAdded"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventSystemColorsChanged">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.ControlRemoved"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.ControlAdded"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventValidating">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.ChangeUICues"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.ChangeUICues"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventValidated">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Validating"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Validating"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.EventStyleChanged">
		<summary>
			<para>Specifies an index used to reference the <see cref="System.Windows.Forms.Control.Validated"/> event in the 
 <see cref="System.ComponentModel.Component.Events"/> collection. This field is read-only.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.Validated"/>
		<seealso cref="System.ComponentModel.Component.Events"/>
	</doc>
	<doc for="Control.ActiveXAmbientBackColor">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXAmbientForeColor">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXAmbientFont">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXEventsFrozen">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXHWNDParent">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXInstance">
		<summary>
      Retrieves the ActiveX control implementation for
      this control.  This will demand create the implementation
      if it does not already exist.
 </summary>
	</doc>
	<doc for="Control.ShouldSerializeBindings">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.DataBindings"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the 
 <see cref="System.Windows.Forms.Control.DataBindings"/> property value has changed from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.DataBindings"/>
		<seealso cref="System.Windows.Forms.Control.ResetBindings"/>
	</doc>
	<doc for="Control.CanAccessProperties">
		<summary>
			<para>Exists only for AxHost to override</para>
		</summary>
	</doc>
	<doc for="Control.CanRaiseEvents">
		<summary>
     Determines if events can be fired on the control.
 </summary>
	</doc>
	<doc for="Control.CreateThreadId">
		<summary>
     Retrieves the Win32 thread ID of the thread that created the
     handle for this control.  If the control's handle hasn't been
     created yet, this method will return the current thread's ID.
 </summary>
		<returns>
     the Win32 thread ID of the thread that created the
     handle for this control, or the current thread ID
     if this control's handle has not yet been created.
 </returns>
	</doc>
	<doc for="Control.InternalHandle">
		<summary>
			<para>Gets the window handle that this control is bound to. </para>
		</summary>
		<value>
			<para>An <see cref="System.IntPtr"/> 
 that contains the window handle of the control.</para>
		</value>
		<remarks>
			<para> This property may return a 
       zero value if the handle has not been created. Unlike the <see cref="System.Windows.Forms.Control.Handle"/>property, this property will not create a handle for the control if a handle is
       not already created.</para>
		</remarks>
	</doc>
	<doc for="Control.IsActiveX">
		<summary>
     Used to tell if this control is being hosted as an ActiveX control.
 </summary>
	</doc>
	<doc for="Control.RenderTransparent">
		<summary>
     Determines if the parent's background will be rendered on the label control.
 </summary>
	</doc>
	<doc for="Control.WindowExStyle">
		<summary>
     The current exStyle of the hWnd
 </summary>
	</doc>
	<doc for="Control.WindowStyle">
		<summary>
     The current style of the hWnd
 </summary>
	</doc>
	<doc for="Control.WindowText">
		<summary>
			<para> 
       Indicates the current text of the Window.</para>
		</summary>
		<remarks>
			<para>If the window has not yet been created, stores it in the control. If the 
       window has been created, stores the text in the underlying win32 control. This
       property should be used whenever you want to get at the win32 control's text.
       For all other cases, use the Text property - but note that this is overridable,
       and any of your code that uses it will use the overridden version in controls
       that subclass your own.</para>
		</remarks>
	</doc>
	<doc for="Control.ActiveXMergeRegion">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXOnFocus">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.ActiveXUpdateBounds">
		<summary>
     Helper method for retrieving an ActiveX property.  We abstract these
     to another method so we do not force JIT the ActiveX codebase.
 </summary>
	</doc>
	<doc for="Control.AssignParent">
		<summary>
     Assigns a new parent control. Sends out the appropriate property change
     notifications for properties that are affected by the change of parent.
 </summary>
		<param name="value">
     The new parent control.
 </param>
	</doc>
	<doc for="Control.CanProcessMnemonic">
		<summary>
			<para>
 The result is true if the control
 is contained in a form and if all of its parent controls are both visible
 and enabled.</para>
		</summary>
	</doc>
	<doc for="Control.CheckParentingCycle">
		<summary>
     Searches the parent/owner tree for bottom to find any instance
     of toFind in the parent/owner tree.
 </summary>
	</doc>
	<doc for="Control.ChildGotFocus">
		<summary>
		</summary>
	</doc>
	<doc for="Control.CreateGraphicsInternal">
		<summary>
     Helper function that avoids security checks for calls made within this class...
 </summary>
	</doc>
	<doc for="Control.EnsureAccessibilityProperties">
		<summary>
     Ensures that the accessibility properites sub-object has been created.
 </summary>
	</doc>
	<doc for="Control.EnsureInheritedProperties">
		<summary>
     Ensures that the inherited properites sub-object has been created.
 </summary>
	</doc>
	<doc for="Control.EnsureRareProperties">
		<summary>
     Ensures that the rare properites sub-object has been created.
 </summary>
	</doc>
	<doc for="Control.Finalize">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="Control.FindFormInternal">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.FindMarshalingControl">
		<summary>
     Attempts to find a control Object that we can use to marshal
     calls.  We must marshal calls to a control with a window
     handle, so we traverse up the parent chain until we find one.
     Failing that, we just return ouselves.
 </summary>
		<returns>
     a Control Object that can be used to marshal a call.
 </returns>
	</doc>
	<doc for="Control.RaiseCreateHandleEvent">
		<summary>
     Used by AxHost to fire the CreateHandle event.
 </summary>
	</doc>
	<doc for="Control.FocusInternal">
		<summary>
    Internal method for setting focus to the control.
    Form overrides this method - because MDI child forms
    need to be focused by calling the MDIACTIVATE message.
 </summary>
	</doc>
	<doc for="Control.GetAxContainer">
		<summary>
     The ActiveX container for this control.
     Package for Form and AxHost
 </summary>
		<returns>
     ActiveX container for this control.
 </returns>
	</doc>
	<doc for="Control.GetState">
		<summary>
     Retrieves the current value of the specified bit in the control's state.
 </summary>
		<param name="flag">
     Bit to check.
 </param>
		<returns>
     true if flag is set in the control's state.
 </returns>
	</doc>
	<doc for="Control.HookMouseEvent">
		<summary>
     Sets up the TrackMouseEvent for listening for the
     mouse leave event.
 </summary>
	</doc>
	<doc for="Control.InitMouseWheelSupport">
		<summary>
     Initializes mouse wheel support. This may involve registering some windows
     messages on older operating systems.
 </summary>
	</doc>
	<doc for="Control.InvokeMarshaledCallbacks">
		<summary>
     Called on the control's owning thread to perform the actual callback.
     This empties this control's callback queue, propagating any excpetions
     back as needed.
 </summary>
	</doc>
	<doc for="Control.IsDescendant">
		<summary>
     Determines if this control is a descendent of the given
     control.  Form may use this method.
 </summary>
		<param name="descendant">
     The control to check.
 </param>
		<returns>
     true if this control is a descendent of the
     given control.
 </returns>
	</doc>
	<doc for="Control.MoveControl">
		<summary>
     Repositions a control in the list.
 </summary>
	</doc>
	<doc for="Control.NotifyInvalidate">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Invalidated"/> event with a specified 
    region of the control to invalidate.</para>
		</summary>
		<param name="invalidatedArea">A <see cref="System.Drawing.Rectangle"/> representing the area to invalidate.</param>
	</doc>
	<doc for="Control.OnHandleCreated">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.HandleCreated"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnHandleCreated"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnHandleCreated"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnHandleCreated"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.HandleCreated"/>
	</doc>
	<doc for="Control.OnHandleDestroyed">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.HandleDestroyed"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnHandleDestroyed"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnHandleDestroyed"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnHandleDestroyed"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.HandleDestroyed"/>
	</doc>
	<doc for="Control.OnDragEnter">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.DragEnter"/> event.</para>
		</summary>
		<param name="drgevent">A <see cref="System.Windows.Forms.DragEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnDragEnter"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnDragEnter"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnDragEnter"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.DragEnter"/>
	</doc>
	<doc for="Control.OnDragOver">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.DragOver"/> event.</para>
		</summary>
		<param name="drgevent">A <see cref="System.Windows.Forms.DragEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnDragOver"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnDragOver"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnDragOver"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.DragOver"/>
	</doc>
	<doc for="Control.OnDragLeave">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.DragLeave"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnDragLeave"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnDragLeave"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnDragLeave"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.DragLeave"/>
	</doc>
	<doc for="Control.OnGiveFeedback">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event.</para>
		</summary>
		<param name="gfbevent">A <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnGiveFeedback"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnGiveFeedback"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnGiveFeedback"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.GiveFeedback"/>
	</doc>
	<doc for="Control.OnGotFocus">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.GotFocus"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnGotFocus"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnGotFocus"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnGotFocus"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.GotFocus"/>
	</doc>
	<doc for="Control.OnInvalidated">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Invalidated"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnInvalidated"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnInvalidated"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnInvalidated"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Invalidated"/>
	</doc>
	<doc for="Control.OnLostFocus">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.LostFocus"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnLostFocus"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnLostFocus"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnLostFocus"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.LostFocus"/>
	</doc>
	<doc for="Control.OnMouseEnter">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseEnter"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseEnter"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnMouseEnter"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnMouseEnter"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseEnter"/>
	</doc>
	<doc for="Control.OnMouseLeave">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseLeave"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseLeave"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnMouseLeave"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnMouseLeave"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseLeave"/>
	</doc>
	<doc for="Control.OnMouseHover">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseHover"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseHover"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnMouseHover"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnMouseHover"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseHover"/>
	</doc>
	<doc for="Control.OnValidated">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Validated"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnValidated"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Control.OnValidated"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Control.OnValidated"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Validated"/>
	</doc>
	<doc for="Control.ProcessUICues">
		<summary>
     Preprocess keys which affect focus indicators and keyboard cues.
 </summary>
		<param name="msg">
     original window message
 </param>
	</doc>
	<doc for="Control.RecreateBrush">
		<summary>
     Recreates the brush used for painting the background of the control.
 </summary>
	</doc>
	<doc for="Control.ResetMouseEventArgs">
		<nodoc/>
		<summary>
			<para>Resets the mouse leave listeners.</para>
		</summary>
	</doc>
	<doc for="Control.SetAcceptDrops">
		<summary>
     Used to actually register the control as a drop target.
 </summary>
	</doc>
	<doc for="Control.SelectNextIfFocused">
		<summary>
     This is called recursively when visibility is changed for a control, this
     forces focus to be moved to a visible control.
 </summary>
	</doc>
	<doc for="Control.ShouldSerializeBackColor">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.BackColor"/> property should be 
    persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.BackColor"/> property value has changed from its default; 
    otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating 
       a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ResetBackColor"/>
		<seealso cref="System.Windows.Forms.Control.BackColor"/>
	</doc>
	<doc for="Control.ShouldSerializeCursor">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.Cursor"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.Cursor"/> property value has changed from its default; 
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ResetCursor"/>
		<seealso cref="System.Windows.Forms.Control.Cursor"/>
	</doc>
	<doc for="Control.ShouldSerializeForeColor">
		<summary>
    Indicates whether the <see cref="System.Windows.Forms.Control.ForeColor"/> property should be persisted.
 </summary>
		<returns>
			<see langword="true"/> if the <see cref="System.Windows.Forms.Control.ForeColor"/> property value has changed from its default; 
    otherwise, <see langword="false"/>.
 </returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ResetForeColor"/>
		<seealso cref="System.Windows.Forms.Control.ForeColor"/>
	</doc>
	<doc for="Control.ShouldSerializeFont">
		<summary>
    Indicates whether the <see cref="System.Windows.Forms.Control.Font"/> property should be persisted.
 </summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.Font"/> 
 property value has changed from its default; otherwise,
 <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating 
       a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ResetFont"/>
		<seealso cref="System.Windows.Forms.Control.Font"/>
	</doc>
	<doc for="Control.ShouldSerializeRightToLeft">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.RightToLeft"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.RightToLeft"/> property value has changed from its default; 
    otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating 
       a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ResetRightToLeft"/>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
	</doc>
	<doc for="Control.ShouldSerializeLocation">
		<summary>
			<para>Determines if the <see cref="System.Windows.Forms.Control.Location"/> property needs to be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.Location"/> property value has changed from its default; 
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Location"/>
	</doc>
	<doc for="Control.ShouldSerializeSize">
		<summary>
			<para>Determines if the <see cref="System.Windows.Forms.Control.Size"/> property needs to be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.Size"/> property value has changed from its default; 
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Size"/>
	</doc>
	<doc for="Control.ShouldSerializeText">
		<summary>
			<para>Determines if the <see cref="System.Windows.Forms.Control.Text"/> property needs to be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.Control.Text"/> property value has changed from its default; 
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ResetText"/>
		<seealso cref="System.Windows.Forms.Control.Text"/>
	</doc>
	<doc for="Control.UnhookMouseEvent">
		<summary>
     Stops listening for the mouse leave event.
 </summary>
	</doc>
	<doc for="Control.UpdateBindings">
		<summary>
     Updates the binding manager bindings when the binding proeprty changes.
     We have the code here, rather than in PropertyChagned, so we don't suck
     in the data assembly if it's not used.
 </summary>
	</doc>
	<doc for="Control.UpdateChildControlIndex">
		<summary>
     Updates the child control's position in the control array to correctly
     reflect it's index.
 </summary>
	</doc>
	<doc for="Control.UpdateChildZOrder">
		<summary>
     Syncs the ZOrder of child control to the index we want it to be.
 </summary>
	</doc>
	<doc for="Control.UpdateRoot">
		<summary>
     Updates the rootRefence in the bound window.
     (Used to prevent visible top-level controls from being garbage collected)
 </summary>
	</doc>
	<doc for="Control.WmCtlColorControl">
		<summary>
     Handles the WM_CTLCOLOR message
 </summary>
	</doc>
	<doc for="Control.WmCommand">
		<summary>
     Handles the WM_COMMAND message
 </summary>
	</doc>
	<doc for="Control.WmContextMenu">
		<summary>
     Handles the WM_CONTEXTMENU message
 </summary>
	</doc>
	<doc for="Control.WmDrawItem">
		<summary>
     WM_DRAWITEM handler
 </summary>
	</doc>
	<doc for="Control.WmEraseBkgnd">
		<summary>
     Handles the WM_ERASEBKGND message
 </summary>
	</doc>
	<doc for="Control.WmGetObject">
		<summary>
     Handles the WM_GETOBJECT message. Used for accessibility.
 </summary>
	</doc>
	<doc for="Control.WmHelp">
		<summary>
     Handles the WM_HELP message
 </summary>
	</doc>
	<doc for="Control.WmInitMenuPopup">
		<summary>
     Handles the WM_INITMENUPOPUP message
 </summary>
	</doc>
	<doc for="Control.WmInputLangChange">
		<summary>
     Handles the WM_INPUTLANGCHANGE message
 </summary>
	</doc>
	<doc for="Control.WmInputLangChangeRequest">
		<summary>
     Handles the WM_INPUTLANGCHANGEREQUEST message
 </summary>
	</doc>
	<doc for="Control.WmMeasureItem">
		<summary>
     WM_MEASUREITEM handler
 </summary>
	</doc>
	<doc for="Control.WmMenuChar">
		<summary>
     Handles the WM_MENUCHAR message
 </summary>
	</doc>
	<doc for="Control.WmMenuSelect">
		<summary>
     Handles the WM_MENUSELECT message
 </summary>
	</doc>
	<doc for="Control.WmChangeUiState">
		<summary>
     Handles the WM_CHANGEUISTATE message
 </summary>
	</doc>
	<doc for="Control.WmCreate">
		<summary>
     Handles the WM_CREATE message
 </summary>
	</doc>
	<doc for="Control.WmCtlColor">
		<summary>
     Handles the WM_CTLCOLOR message
 </summary>
	</doc>
	<doc for="Control.WmDestroy">
		<summary>
     Handles the WM_DESTROY message
 </summary>
	</doc>
	<doc for="Control.WmIMEChar">
		<summary>
     Handles the WM_IMECHAR message
 </summary>
	</doc>
	<doc for="Control.WmKeyChar">
		<summary>
     Handles the WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and
     WM_SYSKEYUP messages.
 </summary>
	</doc>
	<doc for="Control.WmKillFocus">
		<summary>
     Handles the WM_KILLFOCUS message
 </summary>
	</doc>
	<doc for="Control.WmMouseDown">
		<summary>
     Handles the WM_MOUSEDOWN message
 </summary>
	</doc>
	<doc for="Control.WmMouseEnter">
		<summary>
     Handles the WM_MOUSEENTER message
 </summary>
	</doc>
	<doc for="Control.WmMouseLeave">
		<summary>
     Handles the WM_MOUSELEAVE message
 </summary>
	</doc>
	<doc for="Control.WmMouseHover">
		<summary>
     Handles the "WM_MOUSEHOVER" message... until we get actuall OS support
     for this, it is implemented as a custom message.
 </summary>
	</doc>
	<doc for="Control.WmMouseMove">
		<summary>
     Handles the WM_MOUSEMOVE message
 </summary>
	</doc>
	<doc for="Control.WmMouseUp">
		<summary>
     Handles the WM_MOUSEUP message
 </summary>
	</doc>
	<doc for="Control.WmMouseWheel">
		<summary>
     Handles the WM_MOUSEWHEEL message
 </summary>
	</doc>
	<doc for="Control.WmMove">
		<summary>
     Handles the WM_MOVE message.  We must do this in
     addition to WM_WINDOWPOSCHANGED because windows may
     send WM_MOVE directly.
 </summary>
	</doc>
	<doc for="Control.WmNCDestroy">
		<summary>
     Handles the WM_NCDESTROY message
 </summary>
	</doc>
	<doc for="Control.WmNotify">
		<summary>
     Handles the WM_NOTIFY message
 </summary>
	</doc>
	<doc for="Control.WmNotifyFormat">
		<summary>
     Handles the WM_NOTIFYFORMAT message
 </summary>
	</doc>
	<doc for="Control.WmOwnerDraw">
		<summary>
     Handles the WM_OWNERDRAW message
 </summary>
	</doc>
	<doc for="Control.WmPaint">
		<summary>
     Handles the WM_PAINT and WM_PRINTCLIENT messages
 </summary>
	</doc>
	<doc for="Control.WmSetCursor">
		<summary>
     Handles the WM_SETCURSOR message
 </summary>
	</doc>
	<doc for="Control.WmWindowPosChanging">
		<summary>
     Handles the WM_WINDOWPOSCHANGING message
 </summary>
	</doc>
	<doc for="Control.WmParentNotify">
		<summary>
     Handles the WM_PARENTNOTIFY message
 </summary>
	</doc>
	<doc for="Control.WmSetFocus">
		<summary>
     Handles the WM_SETFOCUS message
 </summary>
	</doc>
	<doc for="Control.WmShowWindow">
		<summary>
     Handles the WM_SHOWWINDOW message
 </summary>
	</doc>
	<doc for="Control.WmSysColorChange">
		<summary>
     Handles the WM_SYSCOLORCHANGE message
 </summary>
	</doc>
	<doc for="Control.WmUpdateUIState">
		<summary>
     Handles the WM_UPDATEUISTATE message
 </summary>
	</doc>
	<doc for="Control.WmWindowPosChanged">
		<summary>
     Handles the WM_WINDOWPOSCHANGED message
 </summary>
	</doc>
	<doc for="Control.WndProcException">
		<summary>
      Called when an exception occurs in dispatching messages through
      the main window procedure.
 </summary>
	</doc>
	<doc for="Control.ControlNativeWindow">
		<summary>
		</summary>
	</doc>
	<doc for="Control.ActiveXImpl">
		<summary>
      This class holds all of the state data for an ActiveX control and
      supplies the implementation for many of the non-trivial methods.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.ActiveXImpl">
		<summary>
      Creates a new ActiveXImpl.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.AmbientBackColor">
		<summary>
      Retrieves the ambient back color for the control.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.AmbientFont">
		<summary>
      Retrieves the ambient font for the control.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.AmbientForeColor">
		<summary>
      Retrieves the ambient back color for the control.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.DesignMode">
		<summary>
     Determines if we're in design or run mode.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.EventsFrozen">
		<summary>
      Determines if events should be frozen.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.HWNDParent">
		<summary>
     Provides access to the parent window handle
     when we are UI active
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.LogPixels">
		<summary>
      Retrieves the number of logical pixels per inch on the
      primary monitor.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Advise">
		<summary>
      Implements IOleObject::Advise
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Close">
		<summary>
      Implements IOleObject::Close
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.DoVerb">
		<summary>
      Implements IOleObject::DoVerb
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Draw">
		<summary>
      Implements IViewObject2::Draw.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.DrawChildrenRecursive">
		<summary>
      Draws the given control, and all of its children, to the given hdc within
      the rectangle.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.EnumVerbs">
		<summary>
     Returns a new verb enumerator.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetAdvise">
		<summary>
      Implements IViewObject2::GetAdvise.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetAmbientProperty">
		<summary>
      Helper function to retrieve an ambient property.  Returns false if the
      property wasn't found.
 </summary>
		<param name="dispid">
      The dispid to get the property for.
 </param>
		<param name="obj">
      A object we will fill in with the result of the call.
 </param>
		<returns>
      Returns true if the property was found and filled in.
 </returns>
	</doc>
	<doc for="Control.ActiveXImpl.GetClientSite">
		<summary>
      Implements IOleObject::GetClientSite.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetControlInfo">
		<summary>
		</summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetExtent">
		<summary>
      Implements IOleObject::GetExtent.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetMnemonic">
		<summary>
     Retrieves the mnemonic for the given text.  If the text
     has no mnemonic, this will return -1
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetMnemonicList">
		<summary>
     Searches the control hierarchy of the given control and adds
     the mnemonics for each control to mnemonicList.  Each mnemonic
     is added as a char to the list.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.GetWindow">
		<summary>
      Implements IOleWindow::GetWindow
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.HiMetricToPixel">
		<summary>
      Converts coordinates in HiMetric to pixels.  Used for ActiveX sourcing.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.InPlaceActivate">
		<summary>
      In place activates this Object.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.InPlaceDeactivate">
		<summary>
      Implements IOleInPlaceObject::InPlaceDeactivate.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.IsDirty">
		<summary>
      Implements IPersistStreamInit::IsDirty.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.IsResourceProp">
		<summary>
      Looks at the property to see if it should be loaded / saved as a resource or
      through a type converter.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Load">
		<summary>
      Implements IPersistStorage::Load
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Load1">
		<summary>
      Implements IPersistStreamInit::Load
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Load2">
		<summary>
      Implements IPersistPropertyBag::Load
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.LookupAmbient">
		<summary>
      Simple lookup to find the AmbientProperty corresponding to the given
      dispid.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.MergeRegion">
		<summary>
      Merges the input region with the current clipping region.
      The output is always a region that can be fed directly
      to SetWindowRgn.  The region does not have to be destroyed.
      The original region is destroyed if a new region is returned.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.OnAmbientPropertyChange">
		<summary>
      Implements IOleControl::OnAmbientPropertyChanged
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.OnDocWindowActivate">
		<summary>
      Implements IOleInPlaceActiveObject::OnDocWindowActivate.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.OnFocus">
		<summary>
     Called by Control when it gets the focus.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.PixelToHiMetric">
		<summary>
      Converts coordinates in pixels to HiMetric.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.PreProcessMessageAX">
		<summary>
      This method was added so that we can handle input keys when we're being hosted
     as an active x control.  What we really need to do here is figure out how we can
     get the behavior of our standard key processing to work for the active x scenario
     as well.  See bug#47335
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.QuickActivate">
		<summary>
     Our implementation of IQuickActivate::QuickActivate
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Save">
		<summary>
      Implements IPersistStorage::Save
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Save1">
		<summary>
      Implements IPersistStreamInit::Save
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Save2">
		<summary>
      Implements IPersistPropertyBag::Save
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.SendOnSave">
		<summary>
      Fires the OnSave event to all of our IAdviseSink
      listeners.  Used for ActiveXSourcing.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.SetAdvise">
		<summary>
      Implements IViewObject2::SetAdvise.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.SetClientSite">
		<summary>
      Implements IOleObject::SetClientSite.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.SetExtent">
		<summary>
      Implements IOleObject::SetExtent
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.SetInPlaceVisible">
		<summary>
      Marks our state as in place visible.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.SetObjectRects">
		<summary>
      Implements IOleInPlaceObject::SetObjectRects.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.ShowProperties">
		<summary>
      Shows a property page dialog.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.ThrowHr">
		<summary>
      Throws the given hresult.  This is used by ActiveX sourcing.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.TranslateAccelerator">
		<summary>
     Handles IOleControl::TranslateAccelerator
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.UIDeactivate">
		<summary>
      Implements IOleInPlaceObject::UIDeactivate.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.Unadvise">
		<summary>
      Implements IOleObject::Unadvise
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.UpdateBounds">
		<summary>
     Notifies our site that we have changed our size and location.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.ViewChanged">
		<summary>
      Notifies our view advise sink (if it exists) that the view has
      changed.
 </summary>
	</doc>
	<doc for="Control.ActiveXImpl.IWindowTarget.OnHandleChange">
		<summary>
      Called when the window handle of the control has changed.
 </summary>
		<param name="newHandle">
      The new window handle value.
 </param>
	</doc>
	<doc for="Control.ActiveXImpl.IWindowTarget.OnMessage">
		<summary>
      Called to do control-specific processing for this window.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="Control.ActiveXImpl.PropertyBagStream">
		<summary>
      This is a property bag implementation that sits on a stream.  It can
      read and write the bag to the stream.
 </summary>
	</doc>
	<doc for="Control.ActiveXFontMarshaler">
		<summary>
     This is a marshaler object that knows how to marshal IFont to Font
     and back.
 </summary>
	</doc>
	<doc for="Control.ActiveXVerbEnum">
		<summary>
      Simple verb enumerator.
 </summary>
	</doc>
	<doc for="Control.ActiveXPropPage">
		<summary>
     The property window we display.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty">
		<summary>
      Contains a single ambient property, including DISPID, name and value.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty.AmbientProperty">
		<summary>
      Creates a new, empty ambient property.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty.Name">
		<summary>
      The Windows Forms property name.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty.DispID">
		<summary>
      The DispID for the property.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty.Empty">
		<summary>
      Returns true if this property has not been set.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty.Value">
		<summary>
      The current value of the property.
 </summary>
	</doc>
	<doc for="Control.AmbientProperty.ResetValue">
		<summary>
      Resets the property.
 </summary>
	</doc>
	<doc for="Control.DropTarget">
		<summary>
		</summary>
	</doc>
	<doc for="Control.DropSource">
		<summary>
		</summary>
	</doc>
	<doc for="Control.ThreadMethodEntry">
		<summary>
     Used with BeginInvoke/EndInvoke
 </summary>
	</doc>
	<doc for="Control.DockInfo">
		<summary>
		</summary>
	</doc>
	<doc for="Control.AnchorInfo">
		<summary>
		</summary>
	</doc>
	<doc for="Control.LayoutManager.UpdateAnchorInfo">
		<summary>
     Updates the Anchor information based on the controls current bounds.
     This should only be called when the parent control changes or the
     anchor mode changes.
 </summary>
	</doc>
	<doc for="Control.LayoutComparer">
		<summary>
		</summary>
	</doc>
	<doc for="Control.ControlVersionInfo.CompanyName">
		<summary>
     The company name associated with the component.
 </summary>
	</doc>
	<doc for="Control.ControlVersionInfo.ProductName">
		<summary>
     The product name associated with this component.
 </summary>
	</doc>
	<doc for="Control.ControlVersionInfo.ProductVersion">
		<summary>
     The product version associated with this component.
 </summary>
	</doc>
	<doc for="Control.ControlVersionInfo.GetFileVersionInfo">
		<summary>
     Retrieves the FileVersionInfo associated with the main module for
     the component.
 </summary>
	</doc>
	<doc for="Control.ControlCollection.GetEnumerator">
		<summary>
			<para>Returns an enumerator that can be used to iterate 
      through the control collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> object that represents the control 
   collection.</para>
		</returns>
	</doc>
	<doc for="Control.ShouldSerializeImeMode">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.ImeMode"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed
   from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<seealso cref="System.Windows.Forms.Control.ImeMode"/>
	</doc>
	<doc for="Control.CallWndProc">
		<summary>
			<para>Dispatch the method to this control's <see cref="System.Windows.Forms.Control.WndProc"/> method directly.</para>
		</summary>
		<param name="msg">The message to send </param>
		<param name="wparam">the wparam of the message </param>
		<param name="lparam">the lparam of the message </param>
		<returns>
			<para>The Windows message <see cref="System.Windows.Forms.Message.Result"/>.</para>
		</returns>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc>
	<doc for="Control.ControlCollection.IsReadOnly">
		<summary>
			<para>Gets a value indicating whether the control collection is read-only.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control collection is read-only; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.ContextSensitiveHelp">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.OnFrameWindowActivate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.OnDocWindowActivate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.ResizeBorder">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.EnableModeless">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceObject.ContextSensitiveHelp">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceObject.InPlaceDeactivate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceObject.SetObjectRects">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleInPlaceObject.ReactivateAndUndo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IOleWindow.ContextSensitiveHelp">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersist.GetClassID">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistPropertyBag.InitNew">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistPropertyBag.GetClassID">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistPropertyBag.Load">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistPropertyBag.Save">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStorage.GetClassID">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStorage.InitNew">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStorage.Save">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStorage.SaveCompleted">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStorage.HandsOffStorage">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStreamInit.GetClassID">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStreamInit.Load">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStreamInit.Save">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStreamInit.GetSizeMax">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IPersistStreamInit.InitNew">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IQuickActivate.QuickActivate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IQuickActivate.SetContentExtent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IQuickActivate.GetContentExtent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject.Draw">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject.GetColorSet">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject.Freeze">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject.Unfreeze">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject.SetAdvise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject.GetAdvise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.Draw">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.GetColorSet">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.Freeze">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.Unfreeze">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.SetAdvise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.GetAdvise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.UnsafeNativeMethods.IViewObject2.GetExtent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.ControlFinalization">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.Control5">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.WmDisplayChange">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.IList.Insert">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.IList.Remove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.ControlCollection.Equals">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.ControlCollection.GetHashCode">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.RenderRightToLeft">
		<nodoc/>
	</doc><doc for="Control.Control">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control"/> class with default settings.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control"/> class is the base class for all controls used
   in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically
   not called directly but is instead called by a derived class.</para>
		</remarks>
	</doc><doc for="Control.CreateGraphics1">
		<summary>
			<para>Creates the <see cref="System.Drawing.Graphics"/> object for the control with the specified
   device context handle.</para>
		</summary>
		<param name="dc">The device context handle of the object to create the <see cref="System.Drawing.Graphics"/> object for. </param>
		<returns>
			<para>The <see cref="System.Drawing.Graphics"/> object for the control with the specified
   device context handle.</para>
		</returns>
		<remarks>
			<para>This version wraps an existing Windows HDC. The <see cref="System.Drawing.Graphics"/> object 
   does not claim ownership of the DC; you are responsible for freeing it. The
<see cref="System.Drawing.Graphics"/> 
object is only valid for the duration of the current window's message.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc><doc for="Control.OnNotifyMessage">
		<summary>
			<para>Notifies the control of Windows messages.</para>
		</summary>
		<param name="m">A <see cref="System.Windows.Forms.Message"/> that represents the Windows message. </param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.OnNotifyMessage"/> method is called if the control's
<see cref="System.Windows.Forms.ControlStyles.EnableNotifyMessage" qualify="true"/>
style bit is set. The <see cref="System.Windows.Forms.ControlStyles.EnableNotifyMessage"/>
style allows the control to be notified when the <see cref="System.Windows.Forms.Control.WndProc"/> method receives a Windows message.
This method allows semi-trusted controls to listen for Windows messages
without allowing them
to modify the message.</para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.Control.OnNotifyMessage"/> in a
   derived class, calling the base class's <see cref="System.Windows.Forms.Control.OnNotifyMessage"/> method is not necessary because there is no initial
   implementation.
</note>
		</remarks>
	</doc><doc for="Control.ResetBindings">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.DataBindings"/> property to its default value.</para>
		</summary>
		<remarks>
   You typically use this method if you are either creating a designer for the
<see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.DataBindings"/>
	</doc><doc for="Control.ResetCursor">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.Cursor"/> property to its default value.</para>
		</summary>
		<remarks>
   You typically use this method if you are either creating
   a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.Cursor"/>
	</doc><doc for="Control.ResetFont">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.Font"/>property to its default value.</para>
		</summary>
		<remarks>
   You typically use this method if you are either creating a designer for the
<see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.Font"/>
	</doc><doc for="Control.ResetForeColor">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.ForeColor"/> property to its default value.</para>
		</summary>
		<remarks>
   You typically use this method if you are either creating
   a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.ForeColor"/>
	</doc><doc for="Control.ResetRightToLeft">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.RightToLeft"/> property to its default value.</para>
		</summary>
		<remarks>
   You typically use this method if you are either creating
   a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
	</doc><doc for="Control.ResetText">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.Text"/> property to its default value.</para>
		</summary>
		<remarks>
   You typically use this method if you are either creating
   a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.Text"/>
	</doc><doc for="Control.Dispose">
		<overload>
			<para>Releases all resources used by the <see cref="System.Windows.Forms.Control"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Control"/> and optionally releases the managed
 resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public
 <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
 <see langword="Dispose()"/> invokes the protected
 <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set
 to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
 <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
 resources held by any managed objects that this <see cref="System.Windows.Forms.Control"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
 overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
 objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/> 
.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc>
	<doc for="Control.OnDragDrop">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.DragDrop"/> event.</para>
		</summary>
		<param name="drgevent">A <see cref="System.Windows.Forms.DragEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnDragDrop"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
 <see cref="System.Windows.Forms.Control.OnDragDrop"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnDragDrop"/> method so that registered delegates
 receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.DragDrop"/>
	</doc>
	<doc for="Control.OnChangeUICues">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ChangeUICues"/>
event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.UICuesEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnChangeUICues"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnChangeUICues"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnChangeUICues"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ChangeUICues"/>
		<seealso cref="System.Windows.Forms.UICues"/>
	</doc>
	<doc for="Control.ResetBackColor">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.BackColor"/> property to its default value.</para>
		</summary>
		<remarks>
 You typically use this method if you are either creating
 a designer for the <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating the
<see cref="System.Windows.Forms.Control"/>.
</remarks>
		<seealso cref="System.Windows.Forms.Control.BackColor"/>
	</doc>
	<doc for="Control.ResetImeMode">
		<summary>
			<para>Resets the <see cref="System.Windows.Forms.Control.ImeMode"/> property to its default value.</para>
		</summary>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
 <see cref="System.Windows.Forms.Control"/> or creating your own control incorporating 
 the <see cref="System.Windows.Forms.Control"/>.</para>
		</remarks>
	</doc>
	<doc for="Control.HandleCreated">
		<summary>
			<para>Occurs when a handle is created for the control.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnHandleCreated"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.IsHandleCreated"/>
	</doc>
	<doc for="Control.ControlCollection.ControlCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control.ControlCollection"/> class.</para>
		</summary>
		<param name="owner">A <see cref="System.Windows.Forms.Control"/> representing the control that owns the control collection.</param>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
	</doc>
	<doc for="Control.ControlCollection.GetChildIndex">
		<overload>
			<para>Retrieves the index of a control within the control collection.</para>
		</overload>
		<summary>
			<para>Retrieves the index of the specified child control within the control collection.</para>
		</summary>
		<param name="child">The <see cref="System.Windows.Forms.Control"/> to search for in the control collection.</param>
		<returns>
			<para>A zero-based index value that represents the location of the specified child control within the control collection.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="child "/><see cref="System.Windows.Forms.Control"/> is not in the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</exception>
		<remarks>
			<para>The control with an index value of zero is at the top of the z-order, and higher numbers are closer to the bottom.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.BringToFront"/>
	</doc>
	<doc for="ControlAccessibleObject.DefaultAction"><nodoc/>
		<summary>
			<para>Gets the default action of
 the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> .</para>
		</summary>
		<value>
			<para>The default action of the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/>.</para>
		</value>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.Description"><nodoc/>
		<summary>
			<para>Gets the description of the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> .</para>
		</summary>
		<value>
			<para>The description of the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/>.</para>
		</value>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.Help"><nodoc/>
		<summary>
			<para>Gets the description of what the object does or how the
 object is used.</para>
		</summary>
		<value>
			<para>The description of what the object does or how the object
 is used.</para>
		</value>
		<seealso cref="System.Windows.Forms.Control.QueryAccessibilityHelp"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Help"/>
	</doc>
	<doc for="ControlAccessibleObject.KeyboardShortcut"><nodoc/>
		<summary>
			<para>Gets the object shortcut key or access key for an
 accessible object.</para>
		</summary>
		<value>
			<para>The object shortcut key or access key for an accessible object,
 or <see langword="null"/> if there is no shortcut key associated with the
 object.</para>
		</value>
		<remarks>
			<para>All objects that have a shortcut key or access key should
 support this property.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject.KeyboardShortcut"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.Name"><nodoc/>
		<summary>
			<para>Gets or sets the accessible object name.</para>
		</summary>
		<value>
			<para>The accessible object name.</para>
		</value>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.Role"><nodoc/>
		<summary>
			<para>Gets the role of this accessible object.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.AccessibleRole"/> values.</para>
		</value>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
	</doc>
	<doc for="Control.IsHandleCreated">
		<summary>
			<para>Gets a value indicating whether the control has a handle associated with it.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a handle has been assigned to
 the control; otherwise, <see langword="false"/> .</para>
		</value>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.CreateHandle"/>
	</doc>
	<doc for="Control.ControlCollection.this">
		<summary>
			<para>Indicates the <see cref="System.Windows.Forms.Control"/> at the specified indexed location in the
 collection. </para>
		</summary>
		<param name="index">The index of the control to retrieve from the control collection.</param>
		<value>
			<para>The <see cref="System.Windows.Forms.Control"/> located at the specified index location within the control collection.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> value is less than zero or is greater than or equal to the number of controls in the collection.</exception>
		<remarks>
			<para>To retrieve a <see cref="System.Windows.Forms.Control"/> from the <see cref="System.Windows.Forms.Control.ControlCollection"/> , reference the collection object
 with a specific index value. The index value of the <see cref="System.Windows.Forms.Control.ControlCollection"/> is a zero-based index.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
	</doc>
	<doc for="Control.ControlCollection.IndexOf">
		<summary>
			<para>Retrieves the index of the specified control in the control collection.</para>
		</summary>
		<param name="control">The <see cref="System.Windows.Forms.Control"/> to locate in the collection.</param>
		<returns>
			<para>A zero-based index value that represents the position of
 the specified <see cref="System.Windows.Forms.Control"/> in the <see cref="System.Windows.Forms.Control.ControlCollection"/>
 .</para>
		</returns>
		<remarks>
			<para>If the control is not found in the collection, the
 <see cref="System.Windows.Forms.Control.ControlCollection.IndexOf"/> method
 return value is -1.</para>
		</remarks>
	</doc>
	<doc for="Control.ControlCollection.CopyTo">
		<summary>
			<para>Copies the entire collection into an existing array at a
 specified location within the array.</para>
		</summary>
		<param name="dest">The destination array.</param>
		<param name=" index">The index in the destination array at which storing begins.</param>
		<remarks>
			<note type="caution">
 All the controls in the collection are copied into the array starting at the specified indexed location, overwriting any existing data within the range of objects copied into the array.
 
 </note>
		</remarks>
		<seealso cref="System.Array.Copy" qualify="true"/>
	</doc>
	<doc for="Control.IsAccessible">
		<summary>
			<para> Gets or sets
 a value indicating whether the control is visible to accessibility applications.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is visible to accessibility
 applications; otherwise, <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
	</doc>
	<doc for="Control.MouseButtons">
		<summary>
			<para>Gets a value indicating which of the mouse buttons is in a pressed state.</para>
		</summary>
		<value>
			<para>A bitwise combination of the <see cref="System.Windows.Forms.MouseButtons"/> enumeration values. The default is <see cref="System.Windows.Forms.MouseButtons.None"/> .</para>
		</value>
		<seealso cref="System.Windows.Forms.MouseButtons"/>
	</doc>
	<doc for="Control.Capture">
		<summary>
			<para>Gets or sets a value indicating whether the control has captured the mouse.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control has captured the mouse; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When a control has captured the mouse, it receives mouse
 input whether or not the cursor is within its borders. The mouse is typically only captured during drag operations.</para>
			<para>Only the foreground window can capture the mouse. When a
 background window attempts to do so, the window receives messages only for mouse
 events that occur when the mouse cursor is within the visible portion of
 the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</para>
			<para> When the mouse is captured, shortcut keys do
 not work. </para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to set this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Cursor"/>
	</doc>
	<doc for="Control.DataBindings">
		<summary>
			<para> Gets the data bindings for the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ControlBindingsCollection"/> that contains the <see cref="System.Windows.Forms.Binding"/>
objects for the control.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.Control.DataBindings"/> property to access the
<see cref="System.Windows.Forms.ControlBindingsCollection"/>. By adding <see cref="System.Windows.Forms.Binding"/> objects to the 
 collection, you can bind any property of a control to the property of
 an object.</para>
		</remarks>
		<example>
			<para>The following example adds <see cref="System.Windows.Forms.Binding"/> objects to the <see cref="System.Windows.Forms.ControlBindingsCollection"/> of five controls: four <see cref="System.Windows.Forms.TextBox"/>
controls and a <see cref="System.Windows.Forms.DateTimePicker"/> control. The <see cref="System.Windows.Forms.ControlBindingsCollection"/> is accessed through the <see cref="System.Windows.Forms.Control.DataBindings"/> property of the <see cref="System.Windows.Forms.Control"/>
class.</para>
			<codelink SampleID="Classic Control.DataBindings Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingContext"/>
		<seealso cref="System.Windows.Forms.Binding"/>
		<seealso cref="System.Windows.Forms.BindingManagerBase"/>
	</doc>
	<doc for="Control.Invalidated">
		<summary>
			<para>Occurs when a control's display requires redrawing.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnInvalidated"/>
		<seealso cref="System.Windows.Forms.Control.Invalidate"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.GetHelpTopic">
		<nodoc/>
		<summary>
			<para>Gets an identifier for a Help topic and the path to the
 Help file associated with this accessible object.</para>
		</summary>
		<param name="fileName"><para>When this method returns, contains a string that represents the path to the Help file assciated with this accessible object. This parameter is passed uninitialized.</para></param>
		<returns>
			<para>An identifier for a Help topic, or -1 if there is no Help
 topic. On return, the <paramref name="fileName"/> parameter will contain the path to the
 Help file associated with this accessible object, or <see langword="null"/> if there is no <see langword="IAccessible"/>
 interface specified.</para>
		</returns>
		<remarks>
			<para>Pass the identifier to the WinHelp file specified by the
 <paramref name="fileName"/> parameter to identify the desired Help topic.</para>
		</remarks>
	</doc>
	<doc for="Control.WindowTarget">
		<nodoc/>
		<internalonly/>
		<summary>
			<para>The target of Win32 window messages.</para>
		</summary>
	</doc>
	<doc for="Control.OnHelpRequested">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.HelpRequested"/> event.</para>
		</summary>
		<param name="hevent">A <see cref="System.Windows.Forms.HelpEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnHelpRequested"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnHelpRequested"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnHelpRequested"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.HelpRequested"/>
	</doc>
	<doc for="Control.OnMouseDown">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseDown"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseDown"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnMouseDown"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnMouseDown"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseDown"/>
	</doc>
	<doc for="Control.OnMouseMove">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseMove"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseMove"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnMouseMove"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnMouseMove"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseMove"/>
	</doc>
	<doc for="Control.OnMouseUp">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseUp"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseUp"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnMouseUp"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnMouseUp"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseUp"/>
	</doc>
	<doc for="Control.OnMouseWheel">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseWheel"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMouseWheel"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnMouseWheel"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnMouseWheel"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.MouseWheel"/>
	</doc>
	<doc for="Control.OnSystemColorsChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.SystemColorsChanged"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnSystemColorsChanged"/> method also allows derived classes
 to handle the event without attaching a delegate. This is the preferred
 technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnSystemColorsChanged"/> in a derived class, be sure to 
 call the base class's <see cref="System.Windows.Forms.Control.OnSystemColorsChanged"/> method so that
 registered delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.SystemColorsChanged"/>
	</doc>
	<doc for="Control.OnValidating">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Validating"/>
event.</para>
		</summary>
		<param name="e">A <see cref="System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
 information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnValidating"/> method also allows derived classes to
 handle the event without attaching a delegate. This is the preferred technique
 for handling the event in a derived class.</para>
			<note type="inheritinfo">
 When overriding
<see cref="System.Windows.Forms.Control.OnValidating"/> in a derived class, be sure to call the
 base class's <see cref="System.Windows.Forms.Control.OnValidating"/> method so that registered delegates
 receive the event.
 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Validating"/>
	</doc>
	<doc for="Control.SetBounds">
		<overload>
			<para>Sets the bounds of the control.</para>
		</overload>
		<summary>
			<para>Sets the bounds of the control to the specified location and size.</para>
		</summary>
		<param name="x">The new <see cref="System.Windows.Forms.Control.Left"/> property value of the control.</param>
		<param name="y">The new <see cref="System.Windows.Forms.Control.Right"/> property value of the control.</param>
		<param name="width">The new <see cref="System.Windows.Forms.Control.Width"/> property value of the control.</param>
		<param name="height">The new <see cref="System.Windows.Forms.Control.Height"/> property value of the control.</param>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
		<seealso cref="System.Windows.Forms.Control.SetBoundsCore"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.ChangeUICues">
		<summary>
			<para> Occurs when the focus or keyboard user interface (UI) cues change.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.UICues"/>
		<seealso cref="System.Windows.Forms.Control.OnChangeUICues"/>
	</doc>
	<doc for="Control.UpdateBounds">
		<overload>
			<para>Updates the bounds of the control. </para>
		</overload>
		<summary>
			<para>Updates the bounds of the control with the current size and location. </para>
		</summary>
		<remarks>
			<para>If the new <see cref="System.Windows.Forms.Control.Size"/> of the control is different from
 the previous <see cref="System.Drawing.Size"/>, the <see cref="System.Windows.Forms.Control.SizeChanged"/> event
 is raised. Likewise, if the <see cref="System.Windows.Forms.Control.Location"/> of the control changes, the
<see cref="System.Windows.Forms.Control.LocationChanged"/> event is raised.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Size"/>
		<seealso cref="System.Windows.Forms.Control.Location"/>
	</doc>
	<doc for="Control.UpdateBounds1">
		<summary>
			<para>Updates the bounds of the control with the specified size and location.</para>
		</summary>
		<param name="x">The <see cref="System.Drawing.Point.X"/> coordinate of the control.</param>
		<param name="y">The <see cref="System.Drawing.Point.Y"/> coordinate of the control.</param>
		<param name="width">The <see cref="System.Drawing.Size.Width"/> of the control.</param>
		<param name="height">The <see cref="System.Drawing.Size.Height"/> of the control.</param>
		<remarks>
			<para>If the new <see cref="System.Windows.Forms.Control.Size"/> of the control if different from the previous <see cref="System.Drawing.Size"/>, the <see cref="System.Windows.Forms.Control.SizeChanged"/> event is raised. Likewise, is the <see cref="System.Windows.Forms.Control.Location"/> of the control changes, the <see cref="System.Windows.Forms.Control.LocationChanged"/> event is raised.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Size"/>
		<seealso cref="System.Windows.Forms.Control.Location"/>
	</doc>
	<doc for="Control.UpdateBounds2">
		<summary>
			<para>Updates the bounds of the control with the specified size, location, and
 client size.</para>
		</summary>
		<param name="x">The <see cref="System.Drawing.Point.X"/> coordinate of the control.</param>
		<param name="y">The <see cref="System.Drawing.Point.Y"/> coordinate of the control.</param>
		<param name="width">The <see cref="System.Drawing.Size.Width"/> of the control.</param>
		<param name="height">The <see cref="System.Drawing.Size.Height"/> of the control.</param>
		<param name=" clientWidth">The client <see cref="System.Drawing.Size.Width"/> of the control.</param>
		<param name=" clientHeight">The client <see cref="System.Drawing.Size.Height"/> of the control.</param>
		<remarks>
			<para>If the new <see cref="System.Windows.Forms.Control.Size"/> of the control is different from the previous <see cref="System.Drawing.Size"/>, the <see cref="System.Windows.Forms.Control.SizeChanged"/> event is raised. Likewise, if the <see cref="System.Windows.Forms.Control.Location"/> of the control changes, the <see cref="System.Windows.Forms.Control.LocationChanged"/> event is raised.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Size"/>
		<seealso cref="System.Windows.Forms.Control.Location"/>
		<seealso cref="System.Windows.Forms.Control.ClientRectangle"/>
	</doc>
	<doc for="Control.Disposed">
		<summary>
			<para> Gets a value indicating whether the control has
 been disposed of.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control has been disposed of; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When this property
 returns <see langword="true"/>, the control is disposed of and can no longer be referenced
 as a valid Windows control. Even though the instance of a control is disposed
 of, it is still maintained in memory until it is removed from memory
 through garbage collection. When a control is disposed, you can not call its
 <see cref="System.Windows.Forms.Control.RecreateHandle"/>
 method.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Dispose"/>
		<seealso cref="System.GC"/>
		<seealso cref="System.Windows.Forms.Control.IsHandleCreated"/>
		<seealso cref="System.Windows.Forms.Control.CreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.DestroyHandle"/>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
	</doc>
	<doc for="Control.RecreatingHandle">
		<summary>
			<para>Gets a value indicating whether the control is
 currently re-creating its handle.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is currently
 re-creating its handle; otherwise, <see langword="false"/> .</para>
		</value>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.ToString">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.ResizeRedraw">
		<summary>
			<para>Gets or sets a value indicating whether the control redraws itself when resized.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control redraws itself when
 resized; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ResizeRedraw"/> property value is equivalent to the return
 value of the <see cref="System.Windows.Forms.Control.GetStyle"/> method when passing in the <see cref="System.Windows.Forms.ControlStyles.ResizeRedraw" qualify="true"/> value as a parameter.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.GetStyle"/>
		<seealso cref="System.Windows.Forms.Control.SetStyle"/>
		<seealso cref="System.Windows.Forms.ControlStyles.ResizeRedraw" qualify="true"/>
	</doc>
	<doc for="Control.Site">
		<summary>
			<para>Gets or sets the site of the control.</para>
		</summary>
		<value>
			<para>The <see cref="System.ComponentModel.ISite"/> associated with the <see cref="System.Windows.Forms.Control"/>,
 if any. </para>
		</value>
		<seealso cref="System.ComponentModel.ISite"/>
		<seealso cref="System.ComponentModel.IComponent.Site" qualify="true"/>
	</doc>
	<doc for="Control.ActiveXRegister">
		<summary>
			<para>Registers the control in the Windows system registry as an ActiveX control.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of ActiveX control to register.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="type"/> parameter value is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ActiveXRegister"/> method is called by the Assembly 
   Registration Tool to register a control as an ActiveX control. For more
   information about the Assembly Registration Tool, see <see topic="cpgrfassemblyregistrationtoolregasmexe"/>.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.ComRegisterFunctionAttribute"/>
		<seealso cref="System.Windows.Forms.AxHost"/>
	</doc>
	<doc for="Control.ActiveXUnregister">
		<summary>
			<para>Unregisters the control in the Windows system registry as an ActiveX control.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of ActiveX control to unregister.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="type"/> parameter value is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ActiveXUnregister"/> method is called by the Assembly Registration 
   Tool to unregister a control as an ActiveX control. For more information
   about the Assembly Registration Tool, see <see topic="cpgrfassemblyregistrationtoolregasmexe"/>.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"/>
		<seealso cref="System.Windows.Forms.AxHost"/>
	</doc>
	<doc for="Control.CreateControlsInstance">
		<summary>
			<para> Creates a new instance of the control
      collection for the control.</para>
		</summary>
		<returns>
			<para>A new instance of <see cref="System.Windows.Forms.Control.ControlCollection"/> assigned to the control.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      The base class
      version of this method should not be called by a derived class.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
	</doc>
	<doc for="Control.InvokePaint">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Paint"/> event for the specified control.</para>
		</summary>
		<param name="c">The <see cref="System.Windows.Forms.Control"/> to assign the <see cref="System.Windows.Forms.Control.Paint"/> event to.</param>
		<param name=" e">An <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.Control.OnPaint"/>
		<seealso cref="System.Windows.Forms.Control.Paint"/>
	</doc>
	<doc for="Control.InvokePaintBackground">
		<summary>
			<para>Raises the <see langword="PaintBackground"/> event for the specified control.</para>
		</summary>
		<param name="c">The <see cref="System.Windows.Forms.Control"/> to assign the <see cref="System.Windows.Forms.Control.Paint"/> event to.</param>
		<param name="e">An <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.Control.OnPaintBackground"/>
	</doc>
	<doc for="Control.InvokeOnClick">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Click"/> event for the specified control.</para>
		</summary>
		<param name="toInvoke">The <see cref="System.Windows.Forms.Control"/> to assign the <see cref="System.Windows.Forms.Control.Click"/> event to.</param>
		<param name=" e">An <see cref="System.EventArgs"/> that contains the event data.</param>
	</doc>
	<doc for="Control.ControlAccessibleObject.NotifyClients">
		<overload>
			<para>Notifies accessibility client applications of <see cref="System.Windows.Forms.AccessibleEvents"/>
.</para>
		</overload>
		<summary>
			<para>Notifies accessibility client applications of the specified <see cref="System.Windows.Forms.AccessibleEvents"/> .</para>
		</summary>
		<param name="accEvent">The <see cref="System.Windows.Forms.AccessibleEvents"/> object to notify the accessibility client applications of.</param>
		<remarks>
			<para>You must call the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method for
   each <see cref="System.Windows.Forms.AccessibleEvents"/> object the
   accessibility client applications are to be notified of. The <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method is
   typically called when a property is set or from within an event handler. For
   example, you might call the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/>
   method and pass in <see cref="System.Windows.Forms.AccessibleEvents.Hide" qualify="true"/> from within the event handler for the <see cref="System.Windows.Forms.Control.VisibleChanged" qualify="true"/> event. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleEvents"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.NotifyClients1">
		<summary>
			<para>Notifies the accessibility client applications of the specified <see cref="System.Windows.Forms.AccessibleEvents"/> for the
   specified child control.</para>
		</summary>
		<param name="accEvent">The <see cref="System.Windows.Forms.AccessibleEvents"/> object to notify the accessibility client applications of.</param>
		<param name="childID">The child <see cref="System.Windows.Forms.Control"/> to notify of the accessible event.</param>
		<remarks>
			<para>You must call the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method for
   each <see cref="System.Windows.Forms.AccessibleEvents"/> object the accessibility client
   applications are to be notified of. The <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method is
   typically called when a property is set or from within an event handler. For
   example, you might call the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method
   and pass in <see cref="System.Windows.Forms.AccessibleEvents.Hide" qualify="true"/> from within the event
   handler for the <see cref="System.Windows.Forms.Control.VisibleChanged" qualify="true"/>
   event. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleEvents"/>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
	</doc>
	<doc for="Control.FromHandle">
		<summary>
			<para>Returns the control that is currently associated with the specified handle.</para>
		</summary>
		<param name="handle">The window handle (HWND) to search for.</param>
		<returns>
			<para>A <see cref="System.Windows.Forms.Control"/> that represents the control associated
   with the specified handle; returns <see langword="null"/> if no control with the specified
   handle is found.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.Control.FromChildHandle"/> method 
   if you need to return controls that own more than one handle.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.Parent"/>
	</doc>
	<doc for="Control.GetContainerControl">
		<summary>
			<para>Returns the next <see cref="System.Windows.Forms.ContainerControl"/> up the control's
   chain of parent controls.</para>
		</summary>
		<returns>
			<para> An <see cref="System.Windows.Forms.IContainerControl"/> object, that represents the parent of
   the <see cref="System.Windows.Forms.Control"/>.</para>
		</returns>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.Parent"/>
		<seealso cref="System.Windows.Forms.ContainerControl"/>
		<seealso cref="System.Windows.Forms.IContainerControl"/>
	</doc>
	<doc for="Control.GetNextControl">
		<summary>
			<para>Retrieves the next control forward or back in the tab order of child controls.</para>
		</summary>
		<param name="ctl">The <see cref="System.Windows.Forms.Control"/> to start the search with. </param>
		<param name="forward"><para><see langword="true"/> to search forward in the tab order; <see langword="false"/> to search backward.</para></param>
		<returns>
			<para>The next <see cref="System.Windows.Forms.Control"/> in the tab order.</para>
		</returns>
		<seealso cref="System.Windows.Forms.Control.TabIndex"/>
	</doc>
	<doc for="Control.CausesValidation">
		<summary>
			<para>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false"/>. The default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set 
   to <see langword="false"/> , the <see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<para>The <see cref="System.Windows.Forms.Control.CausesValidation"/> property value is typically set to <see langword="false"/> 
for controls such as a Help button.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Validating"/>
		<seealso cref="System.Windows.Forms.Control.Validated"/>
	</doc>
	<doc for="Control.OnPaintBackground">
		<summary>
			<para>Paints the background of the control.</para>
		</summary>
		<param name="pevent">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.OnPaintBackground"/> method allows derived 
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   Inheriting classes should override this method to handle
   the erase background request from windows.
   When overriding
<see cref="System.Windows.Forms.Control.OnPaintBackground"/> in a derived class it is not necessary to call the
   base class's <see cref="System.Windows.Forms.Control.OnPaintBackground"/>
   method.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.InvokePaintBackground"/>
	</doc>
	<doc for="ControlCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.IList.IsFixedSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.IList.Add">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.IList.Contains">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.IList.IndexOf">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ControlCollection.this">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.HandleDestroyed">
		<summary>
			<para>Occurs when the control's handle is in the process of being destroyed.</para>
		</summary>
		<remarks>
			<para>During the <see cref="System.Windows.Forms.Control.HandleDestroyed"/> event, the control is still a valid
   Windows control and the <see cref="System.Windows.Forms.Control.Handle"/> can be recreated by calling the <see cref="System.Windows.Forms.Control.RecreateHandle"/> method.</para>
			<para>For more information about handling events, see 
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnHandleDestroyed"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.IsHandleCreated"/>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
	</doc>
	<doc for="ControlCollection.IList.this">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.ControlCollection">
		<summary>
			<para>Represents a collection of <see cref="System.Windows.Forms.Control"/> objects</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ControlCollection.Add"/>, <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/>, and <see cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/> methods enable you to add and remove
   individual controls from the collection. You can also use the <see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> or <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> methods to add or remove all the
   controls from the collection.</para>
			<para>You can determine if a <see cref="System.Windows.Forms.Control"/> is
a member of the collection by passing the control into the <see cref="System.Windows.Forms.Control.ControlCollection.Contains"/> method. To get the index value of the
location of a <see cref="System.Windows.Forms.Control"/> in the collection, pass the control into
the <see cref="System.Windows.Forms.Control.ControlCollection.IndexOf"/> method. The collection
can be copied into an array by calling the <see cref="System.Windows.Forms.Control.ControlCollection.CopyTo"/>
method.</para>
		</remarks>
		<example>
			<para>The following example removes a <see cref="System.Windows.Forms.Control"/> from the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> if it is a member of the collection. The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one <see cref="System.Windows.Forms.RadioButton"/> control on a <see cref="System.Windows.Forms.Form"/> . The <see cref="System.Windows.Forms.RadioButton"/> control(s) are added to the <see cref="System.Windows.Forms.Panel"/> control, and the <see cref="System.Windows.Forms.Panel"/>
control added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, the radio button named <c>radioButton2</c> is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control"/>
		<seealso cref="System.Collections.IList"/>
	</doc><doc for="Control.ControlCollection.Count">
		<summary>
			<para>Gets the total number of <see cref="System.Windows.Forms.Control"/> objects in the collection.</para>
		</summary>
		<value>
			<para>The total number of <see cref="System.Windows.Forms.Control"/> objects in the collection.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ControlCollection.Count"/> property holds the number of <see cref="System.Windows.Forms.Control"/>
objects assigned to the collection. You can use the
<see cref="System.Windows.Forms.Control.ControlCollection.Count"/> property value as the upper bounds of a 
loop to iterate through a collection.</para>
			<para>Because the index value of a collection is a zero-based
   index, you must subtract one from the looping variable. If you do not account
   for this, you will exceed the upper bounds of the collection and throw
   an <see cref="System.IndexOutOfRangeException"/> exception.</para>
		</remarks>
		<example>
			<para>The following example removes the first <see cref="System.Windows.Forms.Control"/> in the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> if the count of the collection is greater than zero. The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one other control on a <see cref="System.Windows.Forms.Form"/> . The other control(s) are added to the <see cref="System.Windows.Forms.Panel"/>
control, and the <see cref="System.Windows.Forms.Panel"/> control added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, the first control contained in the panel is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="5"/>
		</example>
	</doc><doc for="Control.ControlCollection.Contains">
		<summary>
			<para>Determines whether the specified control is a member of the collection.</para>
		</summary>
		<param name="control">The <see cref="System.Windows.Forms.Control"/> to locate in the collection.</param>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Windows.Forms.Control"/> is a member of the
   collection; otherwise, <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>This method enables you to determine whether a <see cref="System.Windows.Forms.Control"/> is a member of the
   collection before attempting to perform operations on the <see cref="System.Windows.Forms.Control"/>.
   You can use this method to confirm that a <see cref="System.Windows.Forms.Control"/> has been added to or is
   still a member of the collection.</para>
		</remarks>
		<example>
			<para>The following example removes a <see cref="System.Windows.Forms.Control"/> from the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> if it is a member of the collection. The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one <see cref="System.Windows.Forms.RadioButton"/> control on a <see cref="System.Windows.Forms.Form"/> . The <see cref="System.Windows.Forms.RadioButton"/> control(s) are added to the <see cref="System.Windows.Forms.Panel"/> control, and the <see cref="System.Windows.Forms.Panel"/> control added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, the radio button named <c>radioButton2</c> is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control"/>
	</doc><doc for="Control.ControlCollection.Remove">
		<summary>
			<para>Removes the specified control from the control collection.</para>
		</summary>
		<param name="value">The <see cref="System.Windows.Forms.Control"/> to remove from the <see cref="System.Windows.Forms.Control.ControlCollection"/> .</param>
		<remarks>
			<para>When a <see cref="System.Windows.Forms.Control"/> is removed from the control collection,
   all subsequent controls are moved up one position in the collection. </para>
			<para>You can also remove a <see cref="System.Windows.Forms.Control"/> by using the
<see cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/> or <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> methods. </para>
			<para>To add new <see cref="System.Windows.Forms.Control"/> objects to the collection, use the <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> or <see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> methods. </para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/> method to ensure
   that the
   control is
   removed from the collection.
   
</note>
		</remarks>
		<example>
			<para>The following example removes a <see cref="System.Windows.Forms.Control"/> from the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> if it is a member of the collection. The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one <see cref="System.Windows.Forms.RadioButton"/> control on a <see cref="System.Windows.Forms.Form"/> . The <see cref="System.Windows.Forms.RadioButton"/> control(s) are added to the <see cref="System.Windows.Forms.Panel"/> control, and the <see cref="System.Windows.Forms.Panel"/> control added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, the radio button named <c>radioButton2</c> is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Clear"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Add"/>
	</doc><doc for="Control.ControlCollection.RemoveAt">
		<summary>
			<para>Removes a control from the control collection at the specified indexed
      location.</para>
		</summary>
		<param name="index">The index value of the <see cref="System.Windows.Forms.Control"/> to remove.</param>
		<remarks>
			<para>When a <see cref="System.Windows.Forms.Control"/> is removed from the control collection,
   all subsequent controls are moved up one position in the collection.</para>
			<para>You can also remove a <see cref="System.Windows.Forms.Control"/> that you previously added
by using the <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/> or <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> methods.</para>
			<para>To add new <see cref="System.Windows.Forms.Control"/> objects to the collection, use the <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> or <see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> methods.</para>
		</remarks>
		<example>
			<para>The following example removes the first <see cref="System.Windows.Forms.Control"/> in the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> if the count of the collection is greater than zero. The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one other control on a <see cref="System.Windows.Forms.Form"/> . The other control(s) are added to the <see cref="System.Windows.Forms.Panel"/> control, and the <see cref="System.Windows.Forms.Panel"/> control added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, the first control contained in the panel is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="5"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Remove"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Clear"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Add"/>
	</doc><doc for="Control.ControlCollection.Add">
		<summary>
			<para>Adds the specified control to the control collection.</para>
		</summary>
		<param name="value">The <see cref="System.Windows.Forms.Control"/> to add to the control collection.</param>
		<exception cref="System.Exception">The specified control is a top-level control, or a circular control reference would result if this control were added to the control collection. </exception>
		<exception cref="System.ArgumentException">The object assigned to the <paramref name="value"/> parameter is not a <see cref="System.Windows.Forms.Control"/>.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> method allows you to
   add <see cref="System.Windows.Forms.Control"/> objects to the end of the control collection. </para>
			<para>You can also add new <see cref="System.Windows.Forms.Control"/> objects to the collection by using the
<see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> method. </para>
			<para>To remove a <see cref="System.Windows.Forms.Control"/> that you previously added, use the <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/>, <see cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/>, or <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> methods. </para>
			<note type="note">
   A <see cref="System.Windows.Forms.Control"/> object can only be
   assigned to one <see cref="System.Windows.Forms.Control.ControlCollection"/> at a time. If the <see cref="System.Windows.Forms.Control"/> is already a
   child of another control
   it is removed from that control before it is added to another control.
</note>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> in a derived
   class, be sure to call the base class's <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> method to ensure
   that the control is added to the collection.
</note>
		</remarks>
		<example>
			<para> The following example adds a <see cref="System.Windows.Forms.Control"/> to the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> . The example assumes you have created a <see cref="System.Windows.Forms.Panel"/> 
control and a <see cref="System.Windows.Forms.Button"/> control on a <see cref="System.Windows.Forms.Form"/> . When the button is clicked, a <see cref="System.Windows.Forms.TextBox"/> control is added to the panel's <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Remove"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.AddRange"/>
	</doc><doc for="Control.ControlCollection.AddRange">
		<summary>
			<para>Adds an array of control objects to the collection.</para>
		</summary>
		<param name="controls"><para>An array of <see cref="System.Windows.Forms.Control"/> objects to add to the collection.</para></param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control"/> objects contained in the <paramref name="controls"/> array are appended to the end of
   the collection. </para>
			<para>You can use the <see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> method to quickly add a
group of <see cref="System.Windows.Forms.Control"/> objects to the collection instead of
manually adding each <see cref="System.Windows.Forms.Control"/> to the collection using the <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> method. </para>
			<para>To remove a <see cref="System.Windows.Forms.Control"/> that you previously added, use the <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/>, <see cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/>, or <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> methods. </para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> in a derived 
   class, be sure to call the base class's <see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/>
   method to ensure that the controls are added to the collection.
</note>
		</remarks>
		<example>
			<para> The following example adds two <see cref="System.Windows.Forms.Control"/> objects to the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> . The example assumes you have created a <see cref="System.Windows.Forms.Panel"/> 
control and a <see cref="System.Windows.Forms.Button"/> control on a <see cref="System.Windows.Forms.Form"/>. When the button is clicked, two
<see cref="System.Windows.Forms.RadioButton"/> controls are added to the panel's <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Add"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.CopyTo"/>
	</doc><doc for="Control.Controls">
		<summary>
			<para> Gets the collection of controls contained within the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Control.ControlCollection"/> representing the collection of controls contained within the control.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Windows.Forms.Control"/> can act as a parent to a collection of
   controls. For example, when several controls are added to a <see cref="System.Windows.Forms.Form"/>, each of
   the controls is a member of the <see cref="System.Windows.Forms.Control.ControlCollection"/> object assigned to the <see cref="System.Windows.Forms.Control.Controls"/> property of the form, which is
   derived from the <see cref="System.Windows.Forms.Control"/> class.</para>
			<para>You can manipulate the controls in the <see cref="System.Windows.Forms.Control.ControlCollection"/> object assigned to the <see cref="System.Windows.Forms.Control.Controls"/> property by using the methods available in
the <see cref="System.Windows.Forms.Control.ControlCollection"/> class. </para>
			<para>When adding several controls to a parent control, it is recommended that you call
   the <see cref="System.Windows.Forms.Control.SuspendLayout"/> method before initializing the controls to
   be added. After adding the controls to the parent control, call the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method. Doing so will increase the
   performance of applications with many controls.</para>
		</remarks>
		<example>
			<para>The following example removes a <see cref="System.Windows.Forms.Control"/> from the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> if it is a member of the collection. The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one <see cref="System.Windows.Forms.RadioButton"/> control on a <see cref="System.Windows.Forms.Form"/> . The <see cref="System.Windows.Forms.RadioButton"/> control(s) are added to the <see cref="System.Windows.Forms.Panel"/> control, and the <see cref="System.Windows.Forms.Panel"/> control added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, the radio button named <c>radioButton2</c> is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
		<seealso cref="System.Windows.Forms.Control.CreateControlsInstance"/>
		<seealso cref="System.Windows.Forms.Control.SuspendLayout"/>
		<seealso cref="System.Windows.Forms.Control.ResumeLayout"/>
	</doc><doc for="Control.CreateParams">
		<summary>
			<para>Gets the required creation parameters when the control handle is created.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.CreateParams"/> object that contains the required creation
   parameters when the handle to the control is created.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.CreateParams"/> property should not be overridden and used to adjust the
   properties of your derived control. Properties such as the <see cref="System.Windows.Forms.CreateParams.Caption" qualify="true"/>, <see cref="System.Windows.Forms.CreateParams.Width" qualify="true"/>,
   and <see cref="System.Windows.Forms.CreateParams.Height" qualify="true"/> should be set by the corresponding
   properties in your control such as <see cref="System.Windows.Forms.Control.Text" qualify="true"/>, <see cref="System.Windows.Forms.Control.Width" qualify="true"/> and <see cref="System.Windows.Forms.Control.Height" qualify="true"/>. The
<see cref="System.Windows.Forms.CreateParams"/> object should only be extended when you are 
   wrapping a standard Windows control class or to set styles not provided by the
   Windows Forms namespace. For more information about creating control parameters,
   see the <see langword="CreateWindow"/> and <see langword="CreateWindowEx"/>
   functions and the <see langword="CREATESTRUCT"/>
   structure documentation in the Windows Platform
   SDK reference located in the MSDN Library.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.CreateParams"/> property in a derived class, use the base
   class's <see cref="System.Windows.Forms.Control.CreateParams"/> property to extend the base
   implementation. Otherwise, you must provide all the implementation.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for inheriting classes to call unmanaged code when getting the property value. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code when getting the property value. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<para> The following example extends the <see cref="System.Windows.Forms.Control.CreateParams"/> property of a <see cref="System.Windows.Forms.Button"/>
derived class. The <see cref="System.Windows.Forms.CreateParams.Style" qualify="true"/> property is changed, which causes the button to
display an <see cref="System.Drawing.Icon"/> rather than an <see cref="System.Drawing.Image"/>. This example assumes you have
a class that inherits from the <see cref="System.Windows.Forms.Button"/> class.</para>
			<codelink SampleID="CreateParams" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.CreateParams"/>
	</doc><doc for="Control.Disposing">
		<summary>
			<para>Gets a value indicating whether the control is in the process
      of being disposed of.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control
   is in the process of being disposed of; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When this property returns <see langword="true"/>, the control is in the process of being disposed of. After the
   control is disposed of, it can no longer be referenced as a valid Windows
   control. Even though the instance of a control is disposed of, it is still
   maintained in memory until it is removed from memory through garbage collection.
   When a control is disposed of, you can not call its <see cref="System.Windows.Forms.Control.RecreateHandle"/>
   
   method.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Dispose"/>
		<seealso cref="System.GC"/>
		<seealso cref="System.Windows.Forms.Control.IsHandleCreated"/>
		<seealso cref="System.Windows.Forms.Control.CreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.DestroyHandle"/>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
	</doc><doc for="Control.FontHeight">
		<summary>
			<para> Gets or sets the height of the font of the control.</para>
		</summary>
		<value>
			<para> The height of the <see cref="System.Drawing.Font"/> of the control in pixels.</para>
		</value>
		<remarks>
			<note type="note">
      The <see cref="System.Windows.Forms.Control.FontHeight"/> property should not be set to any
      value other than the control's <see cref="System.Drawing.Font.Height" qualify="true"/> value, or -1. Setting <see cref="System.Windows.Forms.Control.FontHeight"/> to -1 has the effect of clearing
      the cached height value, and the value is recalculated the next time the
      property is referenced.
      
   </note>
		</remarks>
		<seealso cref="System.Drawing.Font.Height" qualify="true"/>
	</doc><doc for="Control.TopLevelControl">
		<summary>
			<para>Gets the parent control that is not parented by another Windows
      Forms control. Typically, this is the outermost <see cref="System.Windows.Forms.Form"/> that the control is contained in.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Control"/> that represents the top-level control that
   contains the current control.</para>
		</value>
		<remarks>
			<para>The top-level control is defined as the parent control that
      is not parented by another Windows Forms control. Typically, this is the outermost
   <see cref="System.Windows.Forms.Form"/> that the control is contained in. For
      example, if the control is contained on an MDI child <see cref="System.Windows.Forms.Form"/>, then the
      top-level control
      is the Multiple Document Interface (MDI) parent <see cref="System.Windows.Forms.Form"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Form"/>
	</doc><doc for="Control.ShowKeyboardCues">
		<summary>
			<para>Gets a value indicating whether the control should
      display keyboard shortcuts.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the user the control should display
   keyboard shortcuts; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For more information on this feature, see the
   <see langword="WM_CHANGEUISTATE"/>, <see langword="WM_QUERYUISTATE"/>, and
   <see langword="WM_UPDATEUISTATE"/> topics located in the Windows Platform SDK in
      the MSDN Library.</para>
		</remarks>
		<platnote platform="Win2K, WinXP">Setting the <see cref="System.Windows.Forms.Control.ShowKeyboardCues"/> property to <see langword="true"/> causes controls to conform to the Windows 2000 behavior that hides keyboard cues until the user performs a keyboard action. 
</platnote>
		<seealso cref="System.Windows.Forms.UICues"/>
		<seealso cref="System.Windows.Forms.Control.ShowFocusCues"/>
		<seealso cref="System.Windows.Forms.Control.ChangeUICues"/>
	</doc><doc for="Control.ShowFocusCues">
		<summary>
			<para> Gets a value indicating whether the control should
      display focus rectangles.</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   the control should display focus rectangles; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For more information on this feature, see the
   <see langword="WM_CHANGEUISTATE"/>, <see langword="WM_QUERYUISTATE"/>, and
   <see langword="WM_UPDATEUISTATE"/> topics located in the Windows Platform SDK
      in the MSDN Library.</para>
			<note type="inheritinfo">
      When overriding the
   <see cref="System.Windows.Forms.Control.ShowFocusCues"/> property in a derived class, use
      the base class's <see cref="System.Windows.Forms.Control.ShowFocusCues"/> property to extend the base
      implementation. Otherwise, you must provide all the implementation.
      
   </note>
		</remarks>
		<platnote platform="Win2K, WinXP">Setting the <see cref="System.Windows.Forms.Control.ShowFocusCues"/> property to <see langword="true"/> causes controls to conform to the Windows 2000 behavior that hides focus cues until the user performs a keyboard action.
</platnote>
		<seealso cref="System.Windows.Forms.UICues"/>
		<seealso cref="System.Windows.Forms.Control.ChangeUICues"/>
		<seealso cref="System.Windows.Forms.Control.ShowKeyboardCues"/>
	</doc><doc for="Control.DefWndProc">
		<summary>
			<para>Sends the specified message to the default window procedure.</para>
		</summary>
		<param name="m">The Windows <see cref="System.Windows.Forms.Message"/> to process. </param>
		<remarks>
			<para>For more information about processing Windows messages, see the
   <see langword="WindowProc"/> function documentation in the Windows Platform SDK
      reference located in the MSDN Library. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for inheriting classes to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.WndProc"/>
	</doc><doc for="Control.EndInvoke">
		<summary>
			<para> Retrieves the return value of the asynchronous operation 
      represented by the <see cref="System.IAsyncResult"/>
      object passed.</para>
		</summary>
		<param name="asyncResult">The <see cref="System.IAsyncResult"/> object that represents a specific invoke asynchronous operation, returned when calling <see cref="System.Windows.Forms.Control.BeginInvoke"/> . </param>
		<returns>
			<para>The <see cref="System.Object"/> generated by the asynchronous operation.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="asyncResult"/> parameter value is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException">The <paramref name="asyncResult"/> object was not created by a preceding call of the <see cref="System.Windows.Forms.Control.BeginInvoke"/> method from the same control. </exception>
		<remarks>
			<para>If the asynchronous operation has not been completed, this function will block until
      the result is available.</para>
			<note type="note">
      There are four methods on a control
      that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you
      should use one of the invoke methods to marshal the call to the control's
      thread.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.BeginInvoke"/>
		<seealso cref="System.Windows.Forms.Control.InvokeRequired"/>
		<seealso cref="System.Windows.Forms.Control.Invoke"/>
	</doc><doc for="Control.FromChildHandle">
		<summary>
			<para> Retrieves the
      control that contains the specified handle.</para>
		</summary>
		<param name="handle">The window handle (HWND) to search for.</param>
		<returns>
			<para>The <see cref="System.Windows.Forms.Control"/> that represents the control associated
   with the specified handle; returns <see langword="null"/> if no control with the specified
   handle is found.</para>
		</returns>
		<remarks>
			<para>This method searches up the window handle parent chain
      until it finds a handle that is associated with a control. This method is more
      reliable than the <see cref="System.Windows.Forms.Control.FromHandle"/> method, because it correctly returns
      controls that own more than one handle.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.Parent"/>
	</doc><doc for="Control.GetChildAtPoint">
		<summary>
			<para>Retrieves the child control that is located at the specified coordinates. </para>
		</summary>
		<param name="pt">A <see cref="System.Drawing.Point"/> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control's client area. </param>
		<returns>
			<para>A <see cref="System.Windows.Forms.Control"/> that
   represents the control that is located at the specified point.</para>
		</returns>
		<remarks>
			<para> If there is no child control at the specified point, the
   <see cref="System.Windows.Forms.Control.GetChildAtPoint"/> method returns
   <see langword="null"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method if the control returned is not a child of the control. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.Parent"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
	</doc><doc for="Control.Invalidate">
		<overload>
			<para>Invalidates a specific region of the control and causes a paint message to be
      sent to the control.</para>
		</overload>
		<summary>
			<para>Invalidates the specified region of the control (adds it to the control's
      update region, which is the area that will be repainted at the next paint
      operation), and causes a paint message to be sent to the control.</para>
		</summary>
		<param name="region">The <see cref="System.Drawing.Region"/> to invalidate.</param>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method does not force a synchronous paint; to force a synchronous paint, call the <see cref="System.Windows.Forms.Control.Update"/> method after calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method. When this method is called with no parameters, the entire client area is added to the update region. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Refresh"/>
		<seealso cref="System.Windows.Forms.Control.Update"/>
	</doc><doc for="Control.Invalidate1">
		<summary>
			<para>Invalidates the specified region of the control (adds it to the control's
      update region, which is the area that will be repainted at the next paint
      operation), and causes a paint message to be sent to the control. Optionally,
      invalidates the child controls assigned to the control.</para>
		</summary>
		<param name="region">The <see cref="System.Drawing.Region"/> to invalidate.</param>
		<param name="invalidateChildren"><see langword="true"/> to invalidate the control's child controls; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method does not force a synchronous paint; to force a synchronous paint, call the <see cref="System.Windows.Forms.Control.Update"/> method after calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method. When this method is called with no parameters, the entire client area is added to the update region. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Refresh"/>
		<seealso cref="System.Windows.Forms.Control.Update"/>
	</doc><doc for="Control.Invalidate3">
		<summary>
			<para> Invalidates a specific region of the control and causes
      a paint message to be sent to the control. Optionally, invalidates the
      child controls assigned to the control.</para>
		</summary>
		<param name="invalidateChildren"><see langword="true"/> to invalidate the control's child controls; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method does not force a synchronous paint;
   to force a synchronous paint, call the <see cref="System.Windows.Forms.Control.Update"/> method after calling the <see cref="System.Windows.Forms.Control.Invalidate"/>
   method. When this method is called with no parameters, the entire client area is
   added to the update region. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Refresh"/>
		<seealso cref="System.Windows.Forms.Control.Update"/>
	</doc><doc for="Control.Invalidate4">
		<summary>
			<para>Invalidates the specified region of the control (adds it to the control's update region,
      which is the area that will be repainted at the next paint operation), and
      causes a paint message to be sent to
      the control.</para>
		</summary>
		<param name="rc">A <see cref="System.Drawing.Rectangle"/> object that represents the region to invalidate. </param>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method does not force a synchronous paint;
   to force a synchronous paint, call the <see cref="System.Windows.Forms.Control.Update"/> method after calling the <see cref="System.Windows.Forms.Control.Invalidate"/>
   method. When this method is called with no parameters, the entire client area is
   added to the update region. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Refresh"/>
		<seealso cref="System.Windows.Forms.Control.Update"/>
	</doc><doc for="Control.Invalidate5">
		<summary>
			<para>Invalidates the specified region of the control (adds it to the control's
      update region, which is the area that will be repainted at the next paint
      operation), and causes a paint message to be sent to the control. Optionally,
      invalidates the child controls assigned to the control.</para>
		</summary>
		<param name="rc">A <see cref="System.Drawing.Rectangle"/> object that represents the region to invalidate. </param>
		<param name="invalidateChildren"><see langword="true"/> to invalidate the control's child controls; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method does not force a synchronous paint; to force a synchronous paint, call the <see cref="System.Windows.Forms.Control.Update"/> method after calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method. When this method is called with no parameters, the entire client area is added to the update region. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Refresh"/>
		<seealso cref="System.Windows.Forms.Control.Update"/>
	</doc><doc for="Control.ControlAccessibleObject.Handle">
		<summary>
			<para>Gets or sets the handle of the accessible object.</para>
		</summary>
		<value>
			<para>An <see cref="System.IntPtr"/> that represents the handle of the control.</para>
		</value>
		<remarks>
			<para>The value of the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.Handle"/> property for the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> is equal to the <see cref="System.Windows.Forms.Control.Handle"/> property of the <see cref="System.Windows.Forms.Control"/> it
   is associated with.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Handle" qualify="true"/>
	</doc><doc for="Control.IsMnemonic">
		<summary>
			<para>Determines if the specified character is the mnemonic character assigned to the control in the
      specified string.</para>
		</summary>
		<param name="charCode">The character to test. </param>
		<param name="text">The string to search. </param>
		<returns>
			<para><see langword="true"/> if the <paramref name="charCode"/> character is the mnemonic
   character assigned to the control; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>The mnemonic character is the character immediately following the first
      instance of "&amp;" in a <see cref="System.String"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.ProcessMnemonic"/>
	</doc><doc for="Control.OnCreateControl">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.CreateControl"/> event.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.OnCreateControl"/> method is called when the control is first created.</para>
			<para>The <see cref="System.Windows.Forms.Control.OnCreateControl"/> method also allows derived classes
to handle the event without attaching a delegate. This is the preferred
technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnCreateControl"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Control.OnCreateControl"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.CreateControl"/>
	</doc><doc for="Control.OnLayout">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Layout"/> event.</para>
		</summary>
		<param name="levent">A <see cref="System.Windows.Forms.LayoutEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>.</para>
			<para>The <see cref="System.Windows.Forms.Control.OnLayout"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnLayout"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnLayout"/> method so that registered
   delegates receive the event and for normal docking and anchoring functions to
   work. Derived classes should override this method to do any
   custom layout logic.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc><doc for="Control.OnResize">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Resize"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnResize"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.Control.OnResize"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnResize"/> method so that registered
   delegates receive the event. The <see cref="System.Windows.Forms.Control.OnResize"/> method can be called during
   construction, so if you override <see cref="System.Windows.Forms.Control.OnResize"/> it can be called before the control
   constructor is called.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Resize"/>
	</doc><doc for="Control.PreProcessMessage">
		<summary>
			<para>Preprocesses input messages within the message loop before they are
      dispatched.</para>
		</summary>
		<param name="msg">A <see cref="System.Windows.Forms.Message"/>, passed by reference, that represents the message to process.</param>
		<returns>
			<para><see langword="true"/> if the message was processed by
   the control; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> This method is only called when the control is hosted in a Windows
      Forms application or as an ActiveX control.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for the immediate caller to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc><doc for="Control.ProcessDialogChar">
		<summary>
			<para>Processes a dialog character.</para>
		</summary>
		<param name="charCode">The character to process.</param>
		<returns>
			<para><see langword="true"/> if the
   character was processed by the control; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method is called during message preprocessing to
      handle dialog characters, such as control mnemonics. This method is called only
      if the <see cref="System.Windows.Forms.Control.IsInputChar"/> method indicates that the control is
      not processing the character. The <see cref="System.Windows.Forms.Control.ProcessDialogChar"/> method simply sends the character to the
      parent's <see cref="System.Windows.Forms.Control.ProcessDialogChar"/> method, or returns <see langword="false"/>
      if the control has no parent. The <see cref="System.Windows.Forms.Form"/> class overrides this method to
      perform actual processing of dialog characters. This method is only called when
      the control is
      
      hosted in a Windows Forms application or as an ActiveX control.</para>
			<note type="inheritinfo">
      When overriding the
   <see cref="System.Windows.Forms.Control.ProcessDialogChar"/> method in a derived class, a control
      should return <see langword="true"/> to indicate that it has processed the character.
      For characters that are not processed by the control, the result of
      calling the base class's <see cref="System.Windows.Forms.Control.ProcessDialogChar"/> method should be
      returned. Controls will seldom, if ever, need to override this method.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc><doc for="Control.ProcessDialogKey">
		<summary>
			<para>Processes a dialog key.</para>
		</summary>
		<param name="keyData">One of the <see cref="System.Windows.Forms.Keys"/> values that represents the key to process.</param>
		<returns>
			<para><see langword="true"/> if the key
   was processed by the control; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method is called during message preprocessing to
      handle dialog characters, such as TAB, RETURN, ESCAPE, and arrow keys. This
      method is called only if the <see cref="System.Windows.Forms.Control.IsInputKey"/> method indicates that the control
      is not processing the key. The <see cref="System.Windows.Forms.Control.ProcessDialogKey"/> simply sends the
      character to the parent's <see cref="System.Windows.Forms.Control.ProcessDialogKey"/> method, or returns
   <see langword="false"/> if the control has no parent. The <see cref="System.Windows.Forms.Form"/> class
      overrides this method to perform actual processing of dialog keys. This method is
      only called when the control is
      
      hosted in a Windows Forms application or as an ActiveX control.</para>
			<note type="inheritinfo">
      When overriding the
   <see cref="System.Windows.Forms.Control.ProcessDialogKey"/> method in a derived class, a control
      should return <see langword="true"/> to indicate that it has processed the key.
      For keys that are not processed by the control, the result of calling the base
      class's <see cref="System.Windows.Forms.Control.ProcessDialogChar"/> method should be returned. Controls will
      seldom, if ever, need to override this method.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc><doc for="Control.ProcessKeyEventArgs">
		<summary>
			<para>Processes a key message and generates the appropriate
      control events.</para>
		</summary>
		<param name="m">A <see cref="System.Windows.Forms.Message"/>, passed by reference, that represents the window message to process.</param>
		<returns>
			<para><see langword="true"/> if the message was processed by the
   control; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>This method is called when a control receives a keyboard
      message. The method is responsible for generating the appropriate key events for
      the message by calling the <see cref="System.Windows.Forms.Control.OnKeyPress"/>, <see cref="System.Windows.Forms.Control.OnKeyDown"/>, or <see cref="System.Windows.Forms.Control.OnKeyUp"/> methods. The <paramref name="m"/> parameter contains the window message that must be
      processed. Possible values for the <see cref="System.Windows.Forms.Message.Msg" qualify="true"/>
      
      property are
      WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IMECHAR.</para>
			<note type="inheritinfo">
      When overriding the
   <see cref="System.Windows.Forms.Control.ProcessKeyEventArgs"/> method in a derived class, a control
      should return <see langword="true"/> to indicate that it has processed the key. For
      keys that are not processed by the control, the result of calling the base
      class's <see cref="System.Windows.Forms.Control.ProcessKeyEventArgs"/> method should be returned. Controls
      will seldom, if ever, need to override this method.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc><doc for="Control.ProcessKeyMessage">
		<summary>
			<para>Processes a keyboard message.</para>
		</summary>
		<param name="m">A <see cref="System.Windows.Forms.Message"/>, passed by reference, that represents the window message to process.</param>
		<returns>
			<para><see langword="true"/> if the message was processed by
   the control; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method is called when a control receives a
      keyboard message. The method first determines whether the control has a parent; if so, it calls
      the parent's <see cref="System.Windows.Forms.Control.ProcessKeyMessage"/> method. If the parent's
   <see cref="System.Windows.Forms.Control.ProcessKeyMessage"/> method does not process the
      message then the <see cref="System.Windows.Forms.Control.ProcessKeyEventArgs"/>
      
      method is called to generate the
      appropriate keyboard events. The <paramref name="m"/> parameter contains the window
      message that must be processed. Possible values for the <see cref="System.Windows.Forms.Message.Msg" qualify="true"/>
      
      property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and
      WM_SYSKEYUP.</para>
			<note type="inheritinfo">
      When overriding the
   <see cref="System.Windows.Forms.Control.ProcessKeyMessage"/>
   method, a control should return <see langword="true"/> to
   indicate that it has processed the key. For keys that are not processed by the
   control, the result of the base class's <see cref="System.Windows.Forms.Control.ProcessKeyEventArgs"/>
   should be returned. Controls
   will seldom, if ever, need to override this method.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.KeyPress"/>
		<seealso cref="System.Windows.Forms.Control.KeyDown"/>
		<seealso cref="System.Windows.Forms.Control.KeyUp"/>
	</doc><doc for="Control.ProcessKeyPreview">
		<summary>
			<para>Previews a keyboard message.</para>
		</summary>
		<param name="m">A <see cref="System.Windows.Forms.Message"/>, passed by reference, that represents the window message to process.</param>
		<returns>
			<para><see langword="true"/> if the message was processed by
   the control; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>This method is called by a child control when the child
      control receives a keyboard message. The child control calls this method before
      generating any keyboard events for the message. If this method returns
   <see langword="true"/>, the child control considers the message processed and
      does not generate any keyboard events. The <paramref name="m"/> parameter contains the window message to preview.
      Possible values for the <see cref="System.Windows.Forms.Message.Msg" qualify="true"/> property are WM_CHAR, WM_KEYDOWN,
      WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP. The <see cref="System.Windows.Forms.Control.ProcessKeyPreview"/> method simply sends the character to
      the parent's <see cref="System.Windows.Forms.Control.ProcessKeyPreview"/> method, or returns <see langword="false"/>
      if the control has no parent. The <see cref="System.Windows.Forms.Form"/>
      class overrides this method to perform actual processing of dialog keys.</para>
			<note type="inheritinfo">
      When overriding the
   <see cref="System.Windows.Forms.Control.ProcessKeyPreview"/> method in a derived class, a
      control should return <see langword="true"/> to indicate that it has processed the key.
      For keys that are not processed by the control, the result of calling the base
      class's <see cref="System.Windows.Forms.Control.ProcessKeyEventArgs"/> method should be returned.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.KeyPress"/>
		<seealso cref="System.Windows.Forms.Control.KeyDown"/>
		<seealso cref="System.Windows.Forms.Control.KeyUp"/>
	</doc><doc for="Control.ProcessMnemonic">
		<summary>
			<para>Processes a mnemonic character.</para>
		</summary>
		<param name="charCode">The character to process.</param>
		<returns>
			<para><see langword="true"/> if the character was processed as
   a mnemonic by the control; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>This method is called to give a control the opportunity to
      process a mnemonic character. The method should determine whether the control is in a state
      to process mnemonics and if whether the given character represents a mnemonic. If
      so, the method should perform the action associated with the mnemonic and return
   <see langword="true"/>. If not, the method should return <see langword="false"/>.
      Implementations of this method often use the <see cref="System.Windows.Forms.Control.IsMnemonic"/>
      method to determine whether the given character matches a mnemonic
      in the control's text. </para>
			<para>For example: </para>
			<code lang="C#">if (CanSelect &amp;&amp; IsMnemonic(charCode, MyControl.Text) {
     // Perform action associated with mnemonic.
     }
   </code>
			<para>This default implementation of the <see cref="System.Windows.Forms.Control.ProcessMnemonic"/> method simply returns
<see langword="false"/> to
   indicate that the control has no mnemonic.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.IsMnemonic"/>
		<seealso cref="System.Windows.Forms.Control.ProcessDialogChar"/>
	</doc><doc for="Control.RectangleToClient">
		<summary>
			<para>Computes the size and location of the specified screen rectangle in client coordinates.</para>
		</summary>
		<param name="r">The screen coordinate <see cref="System.Drawing.Rectangle"/> to convert. </param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the converted <see cref="System.Drawing.Rectangle"/>, <paramref name="r"/>, in client coordinates.</para>
		</returns>
		<seealso cref="System.Drawing.Rectangle"/>
		<seealso cref="System.Windows.Forms.Control.RectangleToScreen"/>
	</doc><doc for="Control.RectangleToScreen">
		<summary>
			<para>Computes the size and location of the specified client rectangle in screen coordinates.</para>
		</summary>
		<param name="r">The screen coordinate <see cref="System.Drawing.Rectangle"/> object to convert. </param>
		<returns>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the converted <see cref="System.Drawing.Rectangle"/>, <paramref name="p"/>, in screen coordinates.</para>
		</returns>
		<seealso cref="System.Drawing.Rectangle"/>
		<seealso cref="System.Windows.Forms.Control.RectangleToClient"/>
	</doc><doc for="Control.Refresh">
		<summary>
			<para>Forces the control to invalidate its client area and immediately redraw
      itself and any child controls.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Windows.Forms.Control.Refresh"/> in a derived class, be sure to
      call the base class's <see cref="System.Windows.Forms.Control.Refresh"/> method so the control and its
      child controls are invalidated and redrawn.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Update"/>
		<seealso cref="System.Windows.Forms.Control.Invalidate"/>
	</doc><doc for="Control.SendToBack">
		<summary>
			<para>Sends the control to the back of the z-order.</para>
		</summary>
		<remarks>
			<para>The control is moved to the back of the z-order. If the
      control is a child of another control, the child control is moved to the back
      of the z-order.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.BringToFront"/>
		<seealso cref="System.Windows.Forms.Control.UpdateZOrder"/>
	</doc><doc for="Control.SetBounds1">
		<summary>
			<para> Sets the specified bounds
      of the control to the specified location and size.</para>
		</summary>
		<param name="x">The new <see cref="System.Windows.Forms.Control.Left"/> property value of the control.</param>
		<param name="y">The new <see cref="System.Windows.Forms.Control.Right"/> property value of the control.</param>
		<param name="width">The new <see cref="System.Windows.Forms.Control.Width"/> property value of the control.</param>
		<param name="height">The new <see cref="System.Windows.Forms.Control.Height"/> property value of the control.</param>
		<param name="specified"><para>A bitwise combination of the <see cref="System.Windows.Forms.BoundsSpecified"/> values. For any parameter not specified, the current value will be used.</para></param>
		<example>
			<para>The following example centers a <see cref="System.Windows.Forms.Form"/> on
   the screen in the <see cref="System.Windows.Forms.Control.Layout"/> event. This will keep the form centered as
   the user resizes it. This example assumes you have created a <see cref="System.Windows.Forms.Form"/> control.</para>
			<codelink SampleID="Control.Layout" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
		<seealso cref="System.Windows.Forms.Control.SetBoundsCore"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc><doc for="Control.Validating">
		<summary>
			<para>Occurs when the control is validating.</para>
		</summary>
		<remarks>
			<para>Focus events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.Enter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.GotFocus"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Leave"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validating"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validated"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.LostFocus"/></term>
				</item>
			</list>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set to
<see langword="false"/> , the
<see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<para>If the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.ComponentModel.CancelEventArgs"/> object is set to <see langword="true"/> in
the <see cref="System.Windows.Forms.Control.Validating"/> event delegate, all events that
would normally occur after the <see cref="System.Windows.Forms.Control.Validating"/> event are
suppressed. </para>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class <see cref="System.Windows.Forms.TextBox"/> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing "@" and "."), the validation fails, an <see cref="System.Windows.Forms.ErrorProvider"/> icon is displayed, and the event is canceled. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> and <see cref="System.Windows.Forms.ErrorProvider"/> control have been created on a form.</para>
			<codelink SampleID="Control.Validating" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnValidating"/>
		<seealso cref="System.Windows.Forms.Control.CausesValidation"/>
		<seealso cref="System.Windows.Forms.Control.Validated"/>
	</doc><doc for="Control.Validated">
		<summary>
			<para>Occurs when the control is finished validating.</para>
		</summary>
		<remarks>
			<para>Focus events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.Enter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.GotFocus"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Leave"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validating"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validated"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.LostFocus"/></term>
				</item>
			</list>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set to
<see langword="false"/> , the
<see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<para>If the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.ComponentModel.CancelEventArgs"/> object is set
to <see langword="true"/> in the <see cref="System.Windows.Forms.Control.Validating"/> event delegate, all events that would
normally occur after the <see cref="System.Windows.Forms.Control.Validating"/> event are
suppressed. </para>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class <see cref="System.Windows.Forms.TextBox"/> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing "@" and "."), the validation fails, an <see cref="System.Windows.Forms.ErrorProvider"/> icon is displayed, and the event is canceled. This example assumes that a <see cref="System.Windows.Forms.TextBox"/> and <see cref="System.Windows.Forms.ErrorProvider"/> control have been created on a form.</para>
			<codelink SampleID="Control.Validating" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnValidated"/>
		<seealso cref="System.Windows.Forms.Control.CausesValidation"/>
		<seealso cref="System.Windows.Forms.Control.Validating"/>
	</doc><doc for="Control.BindingContextChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.BindingContext"/> property changes.</para>
		</summary>
		<remarks>
			<para>To add a new <see cref="System.Windows.Forms.BindingContext"/> to the <see cref="System.Windows.Forms.Control"/>
through the <see cref="System.Windows.Forms.Control.BindingContext"/> property, see the <see cref="M:System.Windows.Forms.BindingContext.#ctor"/> constructor.</para>
			<para>This event is raised if the <see cref="System.Windows.Forms.Control.BindingContext"/> property is changed is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example adds an <see cref="System.EventHandler"/> delegate to the <see cref="System.Windows.Forms.Control.BindingContextChanged"/> event of a <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic Control.BindingContextChanged Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingContext"/>
		<seealso cref="System.Windows.Forms.Binding"/>
		<seealso cref="System.Windows.Forms.BindingManagerBase"/>
		<seealso cref="System.Windows.Forms.Control.OnBindingContextChanged"/>
	</doc><doc for="Control.GotFocus">
		<summary>
			<para>Occurs when the control receives focus.</para>
		</summary>
		<remarks>
			<para>Focus events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.Enter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.GotFocus"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Leave"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validating"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validated"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.LostFocus"/></term>
				</item>
			</list>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set to
<see langword="false"/> , the <see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.Control.GotFocus"/> and <see cref="System.Windows.Forms.Control.LostFocus"/>
   events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows
   messages. Typically, the <see cref="System.Windows.Forms.Control.GotFocus"/> and <see cref="System.Windows.Forms.Control.LostFocus"/>
   events are only used when updating <see cref="System.Windows.Forms.UICues"/> . The
<see cref="System.Windows.Forms.Control.Enter"/> and <see cref="System.Windows.Forms.Control.Leave"/> events should be 
   used for all controls except the <see cref="System.Windows.Forms.Form"/> class, which uses the <see cref="System.Windows.Forms.Form.Activated"/> and <see cref="System.Windows.Forms.Form.Deactivate"/> events.
   For more information about the <see cref="System.Windows.Forms.Control.GotFocus"/> and <see cref="System.Windows.Forms.Control.LostFocus"/> events, see the
<see langword="WM_SETFOCUS"/> and <see langword="WM_KILLFOCUS"/> topics in the 
   Keyboard Input Reference section of the Platform SDK Documentation in the MSDN
   Library.
</note>
			<note type="caution">
   Do not attempt to set focus from within
   the <see cref="System.Windows.Forms.Control.LostFocus"/>
   
   event handler. Doing so can cause your
   application or the operating system to stop responding. For more information
   about the <see cref="System.Windows.Forms.Control.LostFocus"/> event, see
   the <see langword="WM_KILLFOCUS"/> topic in the Keyboard Input Reference
   section, and the <see langword="Message Deadlocks"/> topic in the Messages and
   Message Queues section of the Platform SDK Documentation in the MSDN
   Library.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnGotFocus"/>
	</doc><doc for="Control.LostFocus">
		<summary>
			<para>Occurs when the control loses focus.</para>
		</summary>
		<remarks>
			<para>Focus events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.Enter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.GotFocus"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Leave"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validating"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validated"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.LostFocus"/></term>
				</item>
			</list>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set to
<see langword="false"/> , the <see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<para>If the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.ComponentModel.CancelEventArgs"/> object is set to <see langword="true"/> in
the <see cref="System.Windows.Forms.Control.Validating"/> event delegate, all events that
would normally occur after the <see cref="System.Windows.Forms.Control.Validating"/> event are
suppressed. </para>
			<note type="note">
   The <see cref="System.Windows.Forms.Control.GotFocus"/> and <see cref="System.Windows.Forms.Control.LostFocus"/>
   events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows
   messages. Typically, the <see cref="System.Windows.Forms.Control.GotFocus"/> and <see cref="System.Windows.Forms.Control.LostFocus"/>
   events are only used when updating <see cref="System.Windows.Forms.UICues"/> . The
<see cref="System.Windows.Forms.Control.Enter"/> and <see cref="System.Windows.Forms.Control.Leave"/> events should be 
   used for all controls except the <see cref="System.Windows.Forms.Form"/> class, which uses the <see cref="System.Windows.Forms.Form.Activated"/> and <see cref="System.Windows.Forms.Form.Deactivate"/> events.
   For more information about the <see cref="System.Windows.Forms.Control.GotFocus"/> and <see cref="System.Windows.Forms.Control.LostFocus"/> events, see the
<see langword="WM_SETFOCUS"/> and <see langword="WM_KILLFOCUS"/> topics in the 
   Keyboard Input Reference section of the Platform SDK Documentation in the MSDN
   Library.
</note>
			<note type="caution">
   Do not attempt to set focus from within
   the <see cref="System.Windows.Forms.Control.LostFocus"/>
   
   event handler. Doing so can cause your
   application or the operating system to stop responding. For more information
   about the <see cref="System.Windows.Forms.Control.LostFocus"/> event, see
   the <see langword="WM_KILLFOCUS"/> topic in the Keyboard Input Reference
   section, and the <see langword="Message Deadlocks"/> topic in the Messages and
   Message Queues section of the Platform SDK Documentation in the MSDN
   Library.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/> . </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnLostFocus"/>
	</doc><doc for="Control.CreateControl">
		<summary>
			<para> Forces the creation of the control, including the creation of the handle
      and any child controls.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.CreateControl"/> method forces a handle to be created
   for the control and its child controls. This method is used when you need a
   handle immediately for manipulation of the control or its children; simply
   calling a control's constructor does not create the <see cref="System.Windows.Forms.Control.Handle"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.HandleCreated"/>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
		<seealso cref="System.Windows.Forms.Control.IsHandleCreated"/>
	</doc>
	<doc for="Control.Visible">
		<summary>
			<para>Gets or sets a value indicating whether the control is displayed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is displayed; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<example>
			<para>The following example uses the derived classes <see cref="System.Windows.Forms.VScrollBar"/> and
<see cref="System.Windows.Forms.HScrollBar"/> and sets their <see cref="System.Windows.Forms.Control.Visible"/> property values, based on the size of an
<see cref="System.Drawing.Image"/> being displayed in a <see cref="System.Windows.Forms.PictureBox"/> control. 
   This example assumes that a<see cref="System.Windows.Forms.PictureBox"/> has been created on a form and
   that <see cref="System.Windows.Forms.HScrollBar"/> and <see cref="System.Windows.Forms.VScrollBar"/> controls have been created on the
<see cref="System.Windows.Forms.PictureBox"/> . This code 
   should be called when the image is loaded into the picture box and by the
<see cref="System.Windows.Forms.Control.Resize"/>
event of the
form.</para>
			<codelink SampleID="Classic Control.Visible Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Enabled"/>
		<seealso cref="System.Windows.Forms.Control.CanFocus"/>
		<seealso cref="System.Windows.Forms.Control.Hide"/>
		<seealso cref="System.Windows.Forms.Control.SetVisibleCore"/>
	</doc>
	<doc for="Control.SetTopLevel">
		<summary>
			<para>Sets the control as the top-level control.</para>
		</summary>
		<param name="value"><see langword="true"/> to set the control as the top-level control; otherwise, <see langword="false"/>.</param>
		<exception cref="System.InvalidOperationException">The <paramref name="value"/> parameter is set to <see langword="true"/> and the control is an ActiveX control. </exception>
		<exception cref="System.Exception"><para>The <see cref="System.Windows.Forms.Control.GetTopLevel"/> return value is not equal to the <paramref name="value"/> parameter and the <see cref="System.Windows.Forms.Control.Parent"/> property is not <see langword="null"/> .</para></exception>
		<remarks>
			<para>If you call the <see cref="System.Windows.Forms.Control.SetTopLevel"/> method of a <see cref="System.Windows.Forms.Form"/> and pass in a value of 
<see langword="false"/>, the form will not be visible until you call <see cref="System.Windows.Forms.Control.SetTopLevel"/> again, passing in a value of 
<see langword="true"/> . </para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">to set the control as a top-level control if it is of type <see cref="System.Windows.Forms.Form"/>. This permission is only demanded if the <paramref name="value"/> parameter is <see langword="true"/> and the control is not an ActiveX control. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.UIPermission"><para>to set the control as a top-level control if it is of any type other than <see cref="System.Windows.Forms.Form"/>. This permission is only demanded if the <paramref name="value"/> parameter is <see langword="true"/> and the control is not an ActiveX control. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></para></permission>
		<seealso cref="System.Windows.Forms.Control.GetTopLevel"/>
	</doc>
	<doc for="Control.RecreateHandle">
		<summary>
			<para>Forces the re-creation of the handle for the control.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Control.CreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.DestroyHandle"/>
	</doc>
	<doc for="Control.Invoke">
		<overload>
			<para>Executes a delegate on the thread that owns the control's underlying window
      handle.</para>
		</overload>
		<summary>
			<para> Executes the specified delegate on the thread that
      owns the control's underlying window handle.</para>
		</summary>
		<param name="method">A delegate that contains a method to be called in the control's thread context. </param>
		<returns>
			<para> The return value from the delegate being invoked, or
   <see langword="null"/>
   if the delegate has no return value.</para>
		</returns>
		<remarks>
			<para> 
      If the control's handle does not exist yet, this method searches
      up the control's parent chain until it finds a control or form that does have a
      window handle. If no appropriate handle can be found, the <see cref="System.Windows.Forms.Control.Invoke"/>
      
      method will throw an exception. Exceptions that are raised during the call will be propagated
      back to the caller.</para>
			<note type="note">
      There are four methods on a control
      that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you
      should use one of the invoke methods to marshal the call to the control's
      thread.
      
   </note>
			<para>The delegate can be an instance of <see cref="System.EventHandler"/>, in which
   case the sender parameter will contain this control, and the event parameter
   will contain <see cref="System.EventArgs.Empty" qualify="true"/>. The delegate can also be an instance of <see cref="System.Windows.Forms.MethodInvoker"/>, or any other delegate that takes a void
   parameter list. A call to an <see cref="System.EventHandler"/> or <see cref="System.Windows.Forms.MethodInvoker"/>
   
   delegate will be faster than a call to another type of delegate. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.MethodInvoker"/>
		<seealso cref="System.Windows.Forms.Control.InvokeRequired"/>
	</doc>
	<doc for="Control.Invoke1">
		<summary>
			<para>Executes the specified delegate, on the thread that owns the control's
      underlying window handle, with the specified list of arguments.</para>
		</summary>
		<param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args"/> parameter. </param>
		<param name="args">An array of objects to pass as arguments to the specified method. This parameter can be <see langword="null"/> if the method takes no arguments. </param>
		<returns>
			<para>An <see cref="System.Object"/> that contains the return value from the delegate being invoked, or
<see langword="null"/>
if the delegate has no return value.</para>
		</returns>
		<remarks>
			<para> If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, the <see cref="System.Windows.Forms.Control.Invoke"/> method will throw an exception. Exceptions that are raised during the call will be propagated back to the caller.</para>
			<note type="note">
   There are four methods on a control that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.
</note>
			<para>The delegate can be an instance of <see cref="System.EventHandler"/>, in which case the sender parameter will contain this control, and the event parameter will contain <see cref="System.EventArgs.Empty" qualify="true"/>. The delegate can also be an instance of <see cref="System.Windows.Forms.MethodInvoker"/>, or any other delegate that takes a void parameter list. A call to an <see cref="System.EventHandler"/> or <see cref="System.Windows.Forms.MethodInvoker"/> delegate will be faster than a call to another type of delegate. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.MethodInvoker"/>
		<seealso cref="System.Windows.Forms.Control.InvokeRequired"/>
	</doc>
	<doc for="Control.InvokeGotFocus">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.GotFocus"/> event for the specified
   control.</para>
		</summary>
		<param name=" toInvoke">The <see cref="System.Windows.Forms.Control"/> to assign the event to.</param>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.Control.GotFocus"/>
		<seealso cref="System.Windows.Forms.Control.InvokeLostFocus"/>
	</doc>
	<doc for="Control.InvokeLostFocus">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.LostFocus"/> event for the specified
   control.</para>
		</summary>
		<param name="toInvoke">The <see cref="System.Windows.Forms.Control"/> to assign the event to.</param>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.Control.LostFocus"/>
		<seealso cref="System.Windows.Forms.Control.InvokeGotFocus"/>
	</doc>
	<doc for="Control.RtlTranslateAlignment">
		<overload>
			<para> Converts the current alignment to the appropriate alignment to support
      right-to-left text. </para>
		</overload>
		<summary>
			<para>Converts the specified <see cref="System.Windows.Forms.HorizontalAlignment"/> to the
   appropriate <see cref="System.Windows.Forms.HorizontalAlignment"/>
   to support right-to-left text.</para>
		</summary>
		<param name="align">One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values.</param>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values.</para>
		</returns>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is set to 
<see cref="System.Windows.Forms.RightToLeft.No" qualify="true"/>, the return value is equal to the 
<paramref name="align"/> parameter passed in.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="Control.RtlTranslateAlignment1">
		<summary>
			<para>Converts the specified <see cref="System.Windows.Forms.LeftRightAlignment"/> to the
   appropriate <see cref="System.Windows.Forms.LeftRightAlignment"/> to support right-to-left text.</para>
		</summary>
		<param name="align">One of the <see cref="System.Windows.Forms.LeftRightAlignment"/> values.</param>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.LeftRightAlignment"/> values.</para>
		</returns>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is set to <see cref="System.Windows.Forms.RightToLeft.No" qualify="true"/>, the return value is equal to the 
<paramref name="align"/> parameter passed in.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
		<seealso cref="System.Windows.Forms.LeftRightAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="Control.RtlTranslateAlignment2">
		<summary>
			<para>Converts the specified <see cref="System.Drawing.ContentAlignment"/> to the appropriate <see cref="System.Drawing.ContentAlignment"/> to support right-to-left text.</para>
		</summary>
		<param name="align">One of the <see cref="System.Drawing.ContentAlignment"/> values.</param>
		<returns>
			<para>One of the <see cref="System.Drawing.ContentAlignment"/> values.</para>
		</returns>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is set to <see cref="System.Windows.Forms.RightToLeft.No" qualify="true"/>, the return value is equal to the 
<paramref name="align"/> parameter passed in.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
		<seealso cref="System.Drawing.ContentAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="Control.RtlTranslateHorizontal">
		<summary>
			<para>Converts the specified <see cref="System.Windows.Forms.HorizontalAlignment"/> to the appropriate
<see cref="System.Windows.Forms.HorizontalAlignment"/> to support right-to-left text.</para>
		</summary>
		<param name="align">One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values.</param>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values.</para>
		</returns>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is set to <see cref="System.Windows.Forms.RightToLeft.No" qualify="true"/>, the return value is equal to the 
<paramref name="align"/> parameter passed in.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="Control.RtlTranslateLeftRight">
		<summary>
			<para>Converts the specified <see cref="System.Windows.Forms.LeftRightAlignment"/> to the
   appropriate <see cref="System.Windows.Forms.LeftRightAlignment"/> to support right-to-left text.</para>
		</summary>
		<param name="align">One of the <see cref="System.Windows.Forms.LeftRightAlignment"/> values.</param>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.LeftRightAlignment"/> values.</para>
		</returns>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is set to <see cref="System.Windows.Forms.RightToLeft.No" qualify="true"/>, the return value is equal to the 
<paramref name="align"/> parameter passed in.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
		<seealso cref="System.Windows.Forms.LeftRightAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateAlignment"/>
	</doc>
	<doc for="Control.RtlTranslateContent">
		<summary>
			<para>Converts the specified <see cref="System.Drawing.ContentAlignment"/>
to the appropriate <see cref="System.Drawing.ContentAlignment"/> to support right-to-left text.</para>
		</summary>
		<param name="align">One of the <see cref="System.Drawing.ContentAlignment"/> values.</param>
		<returns>
			<para>One of the <see cref="System.Drawing.ContentAlignment"/> values.</para>
		</returns>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is set to <see cref="System.Windows.Forms.RightToLeft.No" qualify="true"/>, the return value is equal to the 
<paramref name="align"/> parameter passed in.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
		<seealso cref="System.Drawing.ContentAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="Control.ImeMode">
		<summary>
			<para> Gets or sets the Input Method Editor (IME)
      mode of the control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values. The default is <see cref="System.Windows.Forms.ImeMode.Inherit"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="System.Windows.Forms.ImeMode"/> enumeration values.</exception>
		<remarks>
			<para> An input method editor (IME) is a program that allows
      users to enter complex characters and symbols, such as Japanese Kanji
      characters, using a standard keyboard. The <see cref="System.Windows.Forms.Control.ImeMode"/> property is typically set to
   <see cref="System.Windows.Forms.ImeMode.Off" qualify="true"/> for a <see cref="System.Windows.Forms.TextBox"/> control that 
      is intended to only enter numeric values. The <see cref="System.Windows.Forms.Control.ImeMode"/> property value is set to <see cref="System.Windows.Forms.ImeMode.NoControl" qualify="true"/> for the <see cref="System.Windows.Forms.Form"/>
      
      class.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ImeMode"/>
		<seealso cref="System.Windows.Forms.Control.DefaultImeMode"/>
	</doc>
	<doc for="Control.Region">
		<summary>
			<para> Gets or
      sets the window region associated with the control.</para>
		</summary>
		<value>
			<para>The window <see cref="System.Drawing.Region"/>
associated with the control.</para>
		</value>
		<remarks>
			<para> The window region is a<see langword=" "/> collection of pixels within the window where the operating
   system permits drawing. The operating system does not display any portion of a
   window that lies outside of the window region. The coordinates of a control's
   region are relative to the upper-left corner of the control, not the client area
   of the control. </para>
			<note type="note">
   The collection of pixels
   contained with the region can be noncontiguous.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to set this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.ClientRectangle"/>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
	</doc><doc for="Control.IsInputChar">
		<summary>
			<para>Determines if a character is an input character that the control recognizes.</para>
		</summary>
		<param name="charCode">The character to test.</param>
		<returns>
			<para><see langword="true"/> if the character should be sent directly to the control and
   not preprocessed; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method is called during window message preprocessing
      to determine whether the given input character should be preprocessed or sent
      directly to the control. If the <see cref="System.Windows.Forms.Control.IsInputChar"/> method returns
   <see langword="true"/>, the specified character is sent directly to the
      control. However, if the method returns <see langword="false"/>
      , the character is preprocessed and
      only sent to the control if it is not consumed by the preprocessing phase. The preprocessing of a character includes checking whether the character is a
      mnemonic of another control.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.IsInputKey"/>
	</doc>
	<doc for="Control.IsInputKey">
		<summary>
			<para>Determines whether the specified key is a regular
      input key or a special key that requires preprocessing.</para>
		</summary>
		<param name="keyData">One of the <see cref="System.Windows.Forms.Keys"/> values.</param>
		<returns>
			<para><see langword="true"/> if the specified key is a regular
   input key; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> Call the <see cref="System.Windows.Forms.Control.IsInputChar"/> method during window-message 
   preprocessing to determine whether the specified
   key is a regular input key that should be sent directly to the control
   or a special key (such as PAGE UP, PAGE DOWN, ENTER, ESC, TAB, or arrow keys) that
   should preprocessed. In the latter case, the key is sent to the control only if it is not consumed by the preprocessing phase.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Keys"/>
		<seealso cref="System.Windows.Forms.Control.IsInputChar"/>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleControl.GetControlInfo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleControl.OnMnemonic">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleControl.OnAmbientPropertyChange">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleControl.FreezeEvents">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.SetClientSite">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetClientSite">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.SetHostNames">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.Close">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.SetMoniker">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetMoniker">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.InitFromData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetClipboardData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.DoVerb">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.EnumVerbs">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.OleUpdate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.IsUpToDate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetUserClassID">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetUserType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.SetExtent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetExtent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.Advise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.Unadvise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.EnumAdvise">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.GetMiscStatus">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleObject.SetColorScheme">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.GetWindow">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleInPlaceActiveObject.TranslateAccelerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleInPlaceObject.GetWindow">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleInPlaceObject.UIDeactivate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IOleWindow.GetWindow">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IPersistStorage.IsDirty">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IPersistStorage.Load">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.UnsafeNativeMethods.IPersistStreamInit.IsDirty">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Control.BindingContext">
		<summary>
			<para>Gets or sets the <see cref="System.Windows.Forms.BindingContext"/> for the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.BindingContext"/> for the control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.BindingContext"/> object of a <see cref="System.Windows.Forms.Control"/> is used to
   return a single <see cref="System.Windows.Forms.BindingManagerBase"/> object for all data-bound
   controls contained by the <see cref="System.Windows.Forms.Control"/>. The <see cref="System.Windows.Forms.BindingManagerBase"/> object keeps all controls that are
   bound to the same data source synchronized. For example, setting the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> property of the <see cref="System.Windows.Forms.BindingManagerBase"/>
   specifies the item in the
   underlying list that all data-bound controls point to.</para>
			<para>For more information about creating a new <see cref="System.Windows.Forms.BindingContext"/> and assigning it to the <see cref="System.Windows.Forms.Control.BindingContext"/>
property, see the <see cref="M:System.Windows.Forms.BindingContext.#ctor"/> .</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.BindingContext"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.BindingContext"/> property to extend the base 
   implementation. Otherwise, you must provide all the implementation. You are not required to
   override both the <see langword="get"/> and <see langword="set"/>
   accessors of the <see cref="System.Windows.Forms.Control.BindingContext"/>
   property; you can override only one if needed.
   
</note>
		</remarks>
		<example>
			<para>The following example creates four <see cref="System.Windows.Forms.Binding"/> objects to bind five
   controls, a <see cref="System.Windows.Forms.DateTimePicker"/> and four <see cref="System.Windows.Forms.TextBox"/> controls, to several data
   sources. The <see cref="System.Windows.Forms.BindingContext"/> is then used to get the <see cref="System.Windows.Forms.BindingManagerBase"/> for each data source.</para>
			<codelink SampleID="Classic BindingContext Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BindingContextChanged"/>
		<seealso cref="System.Windows.Forms.Binding"/>
		<seealso cref="System.Windows.Forms.BindingManagerBase"/>
	</doc>
	<doc for="Control.Control1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control"/> class with specific text.</para>
		</summary>
		<param name="text">The text displayed by the control.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control"/> class is the base class for all controls
   used in a Windows Forms application. Because this class is not typically used to
   create an instance of the class, this constructor is typically not called
   directly but is instead called by a derived class.</para>
			<para>This version of the <see cref="M:System.Windows.Forms.Control.#ctor"/> constructor sets the
initial <see cref="System.Windows.Forms.Control.Text"/> property value to the <paramref name="text"/>
parameter value.</para>
		</remarks>
	</doc><doc for="Control.Control3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control"/> class as a child control, with specific
   text.</para>
		</summary>
		<param name="parent">The <see cref="System.Windows.Forms.Control"/> to be the parent of the control.</param>
		<param name="text">The text displayed by the control.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control"/> class is the base class for all controls
   used in a Windows Forms application. Because this class is not typically used to
   create an instance of the class, this constructor is typically not called
   directly but is instead called by a derived class.</para>
This version of the <see cref="M:System.Windows.Forms.Control.#ctor"/> constructor sets the initial
<see cref="System.Windows.Forms.Control.Text"/> property value to the <paramref name="text"/> parameter value. The 
constructor also adds the control to the parent control's <see cref="System.Windows.Forms.Control.ControlCollection"/>.
</remarks>
	</doc><doc for="Control.CreateHandle">
		<summary>
			<para> Creates a handle
      for the control.</para>
		</summary>
		<exception cref="System.ObjectDisposedException">The object is in a disposed state.</exception>
		<remarks>
			<para>You typically should not call the <see cref="System.Windows.Forms.Control.CreateHandle"/> method directly. The preferred method is
   to call the <see cref="System.Windows.Forms.Control.CreateControl"/> method, which
   forces a handle to be created for the control and its child controls when
   the control is created.</para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.Control.CreateHandle"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.Control.CreateHandle"/> method to ensure that the handle is
   created.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.CreateControl"/>
		<seealso cref="System.Windows.Forms.Control.DestroyHandle"/>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
	</doc><doc for="Control.DestroyHandle">
		<summary>
			<para> Destroys the handle associated
      with the control.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      When overriding <see cref="System.Windows.Forms.Control.DestroyHandle"/> in a derived class, be sure to call the
      base class's <see cref="System.Windows.Forms.Control.DestroyHandle"/> method to ensure that the handle is
      destroyed.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for inheriting classes to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.CreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
	</doc><doc for="Control.GetTopLevel">
		<summary>
			<para>Determines if the control is a top-level control.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the 
   control is a top-level control; otherwise,
<see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Windows.Forms.Control.SetTopLevel"/>
	</doc><doc for="Control.InitLayout">
		<summary>
			<para>Called after the control has been added to another container.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.InitLayout"/> method is called immediately after adding
   a control to a container. The <see cref="System.Windows.Forms.Control.InitLayout"/> method allows a control
   to initialize its layout state based upon its container. For example, you
   would typically apply anchoring and docking to the control in the <see cref="System.Windows.Forms.Control.InitLayout"/> method.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.InitLayout"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Control.InitLayout"/> method so that the control is
   displayed correctly.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Anchor"/>
		<seealso cref="System.Windows.Forms.Control.Dock"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc><doc for="Control.PerformLayout">
		<overload>
			<para>Forces the control to apply layout logic to child controls.</para>
		</overload>
		<summary>
			<para> Forces the control to apply layout logic to all its child controls.</para>
		</summary>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.SuspendLayout"/> method was called before calling the
<see cref="System.Windows.Forms.Control.PerformLayout"/> method, the <see cref="System.Windows.Forms.Control.Layout"/> event is suppressed.</para>
			<para>The <see cref="System.Windows.Forms.LayoutEventArgs.AffectedControl"/> and <see cref="System.Windows.Forms.LayoutEventArgs.AffectedProperty"/> properties of the <see cref="System.Windows.Forms.LayoutEventArgs"/> object created are set to
<see langword="null"/> if no values were provided when the <see cref="System.Windows.Forms.Control.PerformLayout"/> method was called.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.SuspendLayout"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
		<seealso cref="System.Windows.Forms.Control.ResumeLayout"/>
	</doc><doc for="Control.PerformLayout1">
		<summary>
			<para>Forces the control to apply layout logic to all its child controls.</para>
		</summary>
		<param name="affectedControl">A <see cref="System.Windows.Forms.Control"/> that represents the most recently changed control.</param>
		<param name="affectedProperty">The name of the most recently changed property on the control.</param>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.SuspendLayout"/> method was called before calling the
<see cref="System.Windows.Forms.Control.PerformLayout"/> method, the <see cref="System.Windows.Forms.Control.Layout"/> event is suppressed.</para>
			<para>The <paramref name="affectedControl"/> and <paramref name="affectedProperty"/> parameters can
both be set to <see langword="null"/>. Doing so causes the <see cref="System.Windows.Forms.LayoutEventArgs.AffectedControl"/> and <see cref="System.Windows.Forms.LayoutEventArgs.AffectedProperty"/> properties of the <see cref="System.Windows.Forms.LayoutEventArgs"/> object created to be set to
<see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.SuspendLayout"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
		<seealso cref="System.Windows.Forms.Control.ResumeLayout"/>
	</doc><doc for="Control.ReflectMessage">
		<summary>
			<para>Reflects the specified message to the control that is bound to the specified
      handle. </para>
		</summary>
		<param name="hWnd">An <see cref="System.IntPtr"/> representing the handle of the control to reflect the message to. </param>
		<param name="m">A <see cref="System.Windows.Forms.Message"/> representing the Windows message to reflect.</param>
		<returns>
			<para><see langword="true"/> if the message was reflected;
   otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ReflectMessage"/> method is an infrastructure method and
   typically should not be called from your code.</para>
			<para>If the <paramref name="hWnd"/> parameter does not represent a valid control,
the <see cref="System.Windows.Forms.Control.ReflectMessage"/> method returns <see langword="false"/>.</para>
			<para>Because Windows messages are returned to the top-level
   window, the <see cref="System.Windows.Forms.Control.ReflectMessage"/> method is used to propagate the return
   message to the control that sent the message. For more information about Windows
   messages, see the General Introduction to
   the Common Controls
   topic in the Platform SDK documentation of the MSDN Library. </para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.WndProc"/>
		<seealso cref="System.Windows.Forms.Control.PreProcessMessage"/>
	</doc><doc for="Control.ResumeLayout1">
		<summary>
			<para> Resumes normal layout logic. Optionally forces an
      immediate layout of pending layout requests.</para>
		</summary>
		<param name="performLayout"><para><see langword="true"/> to execute pending layout requests; otherwise, <see langword="false"/>.</para></param>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method forces an immediate layout
   if there are any pending layout requests. When the <paramref name="performLayout"/> parameter is set to
<see langword="true"/>, an immediate layout occurs if there are any 
   pending layout requests.</para>
			<para>The <see cref="System.Windows.Forms.Control.SuspendLayout"/> and <see cref="System.Windows.Forms.Control.ResumeLayout"/> methods are used in tandem to 
suppress multiple <see cref="System.Windows.Forms.Control.Layout"/> events while you adjust multiple
attributes of the control. For example, you would typically call the <see cref="System.Windows.Forms.Control.SuspendLayout"/> method, then set the <see cref="System.Windows.Forms.Control.Size"/>, <see cref="System.Windows.Forms.Control.Location"/>, <see cref="System.Windows.Forms.Control.Anchor"/>, or <see cref="System.Windows.Forms.Control.Dock"/> properties of the
control, and then call the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method to allow the changes to
take effect.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.SuspendLayout"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
		<seealso cref="System.Windows.Forms.Control.PerformLayout"/>
	</doc><doc for="Control.Handle">
		<summary>
			<para> Gets the window handle that the control is bound to.</para>
		</summary>
		<value>
			<para>An <see cref="System.IntPtr"/> that contains the window handle (HWND) of the control.</para>
		</value>
		<remarks>
			<para> The value of the <see cref="System.Windows.Forms.Control.Handle"/> property is a
   Windows HWND. If the handle has not yet been created, referencing this property will force the handle to be
   created.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.CreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.RecreateHandle"/>
		<seealso cref="System.Windows.Forms.Control.IsHandleCreated"/>
	</doc>
	<doc for="Control.InvokeRequired">
		<summary>
			<para> Gets a value indicating whether the caller must call an invoke method when
      making method calls to the control because the
      caller is on a different thread than the one the control was
      created on.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   control's <see cref="System.Windows.Forms.Control.Handle"/>
   was created on a
   different thread than the calling thread (indicating that you must make calls
   to the control through an invoke method); otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>Controls in Windows Forms are bound to a specific thread and are not thread safe.
      Therefore, if you are calling a control's method from a different thread, you must
      use one of the control's invoke methods to marshal the call to the
      proper thread. This property can be used to determine if you must call an invoke
      method, which can be useful if you do not know what thread owns a control. There
      are four methods on a control that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/> and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you should use one of these invoke
      methods when calling from a different thread.</para>
			<para> For more information about multithreaded Windows Forms controls, see <see topic="cpcondevelopingmultithreadedwindowsformscontrol" title="Multithreaded Windows Forms Control Sample"/>
.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Invoke"/>
		<seealso cref="System.Windows.Forms.Control.InvokeGotFocus"/>
		<seealso cref="System.Windows.Forms.Control.InvokeLostFocus"/>
		<seealso cref="System.Windows.Forms.Control.InvokeOnClick"/>
		<seealso cref="System.Windows.Forms.Control.InvokePaint"/>
		<seealso cref="System.Windows.Forms.Control.InvokePaintBackground"/>
	</doc>
	<doc for="Control.Resize">
		<summary>
			<para>Occurs when the control is resized.</para>
		</summary>
		<remarks>
			<para>To determine the <see cref="System.Windows.Forms.Control.Size"/> of the resized control, you can
   cast the <paramref name="sender"/> parameter of the <see cref="System.EventArgs"/> data to a <see cref="System.Windows.Forms.Control"/>
   object and get its <see cref="System.Windows.Forms.Control.Size"/> property (or <see cref="System.Windows.Forms.Control.Height"/> and <see cref="System.Windows.Forms.Control.Width"/> properties
   individually).</para>
			<para>To handle custom layouts, use the <see cref="System.Windows.Forms.Control.Layout"/> event instead of the Resize
event. The <see cref="System.Windows.Forms.Control.Layout"/> event
is raised in response to a <see cref="System.Windows.Forms.Control.Resize"/> event, but also in response to other changes that
affect the layout of the control.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example handles the <see cref="System.Windows.Forms.Control.Resize"/> event of a <see cref="System.Windows.Forms.Form"/>. When the
   form is resized, the event handler ensures that the form stays square (its
<see cref="System.Windows.Forms.Control.Height"/> and <see cref="System.Windows.Forms.Control.Width"/> remain equal).</para>
			<codelink SampleID="WinForms.Control.Resize" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnResize"/>
		<seealso cref="System.Windows.Forms.Control.Size"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.OnQueryContinueDrag">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event.</para>
		</summary>
		<param name="qcdevent">A <see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>After dragging has begun, this method is called repeatedly by the .NET 
      Framework until the drag operation is either canceled or completed.</para>
			<note type="note">
      Override this method if you want to
      change the point at which dragging is canceled or at which a drop occurs.
      
   </note>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnQueryContinueDrag"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnQueryContinueDrag"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnQueryContinueDrag"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.QueryContinueDrag"/>
	</doc>
	<doc for="Control.RightToLeft">
		<summary>
			<para> Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.RightToLeft"/> values. The default is <see cref="System.Windows.Forms.RightToLeft.Inherit"/> .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="System.Windows.Forms.RightToLeft"/> values.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.RightToLeft"/> property is an ambient property. An 
   ambient property is a control property that, if not set, is retrieved from the
   parent control. For example, a <see cref="System.Windows.Forms.Button"/> will have the same <see cref="System.Windows.Forms.Control.BackColor"/> as its parent <see cref="System.Windows.Forms.Form"/> by default. For more
   information about ambient properties, see the <see cref="System.Windows.Forms.AmbientProperties"/> class or the <see cref="System.Windows.Forms.Control"/>
   class overview.</para>
			<para>The <see cref="System.Windows.Forms.Control.RightToLeft"/> property is used for
international applications where the language is written from right
to left, such as Hebrew or Arabic. When this property is set to <see cref="System.Windows.Forms.RightToLeft.Yes" qualify="true"/>
, control elements that include text are displayed from right to left.</para>
			<para>If the control is a top-level control, the user's operating system is queried
   to determine if the control needs to enable right-to-left support. </para>
			<para>The following are a few examples of how control elements are
   affected by the <see cref="System.Windows.Forms.Control.RightToLeft"/> property value of <see cref="System.Windows.Forms.RightToLeft.Yes" qualify="true"/>:</para>
			<list type="bullet"><item>
					<term>
      Vertical
      
      scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <see cref="System.Windows.Forms.Form"/>,
   <see cref="System.Windows.Forms.Panel"/>, multiline <see cref="System.Windows.Forms.TextBox"/>, and <see cref="System.Windows.Forms.RichTextBox"/>).</term>
				</item>
				<item>
					<term>
      Horizontal scroll bars start with the scroll box
      (thumb) right-aligned.</term>
				</item>
				<item>
					<term>
      The check box element alignment, controlled by the
   <see langword="CheckAlign"/>
   
   property, is reversed for <see cref="System.Windows.Forms.CheckBox"/>
   and <see cref="System.Windows.Forms.RadioButton"/> controls.</term>
				</item>
				<item>
					<term>
      Text displayed in the title bar of a <see cref="System.Windows.Forms.Form"/> is right-aligned. The icon and control
      box retain their left and right alignment respectively.</term>
				</item>
				<item>
					<term>
      Items in list box, combo box, and up-down controls
      are right aligned.</term>
				</item>
				<item>
					<term>
      Up and down buttons are left-aligned on <see cref="System.Windows.Forms.NumericUpDown"/> and <see cref="System.Windows.Forms.DomainUpDown"/> controls.</term>
				</item>
				<item>
					<term>
      Menus (<see cref="System.Windows.Forms.MainMenu"/>, <see cref="System.Windows.Forms.MenuItem"/>, and <see cref="System.Windows.Forms.ContextMenu"/>) are displayed right-aligned.</term>
				</item>
				<item>
					<term>
      The alignment of toolbar buttons on a <see cref="System.Windows.Forms.ToolBar"/> control or
      the alignment of text on
      a <see cref="System.Windows.Forms.ToolBarButton"/> is not affected by
      the <see cref="System.Windows.Forms.Control.RightToLeft"/> property.</term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.AxHost"/>
   supports right-to-left alignment;
   however, the effect on an ActiveX control depends on the extent to which the
   control author implemented support for right-to-left display.</term>
				</item>
			</list>
			<note type="note">
   When the <see cref="System.Windows.Forms.Control.RightToLeft"/> property
   value is set to <see cref="System.Windows.Forms.RightToLeft.Yes" qualify="true"/> , the horizontal alignment of
   the control's elements are reversed, yet the elements' alignment values are unchanged. For example, in a <see cref="System.Windows.Forms.TextBox"/>
   control
   with the <see cref="System.Windows.Forms.TextBox.TextAlign"/> property value of <see cref="System.Windows.Forms.HorizontalAlignment.Left" qualify="true"/> ,
   text is displayed right-aligned, but the property value remains <see cref="System.Windows.Forms.HorizontalAlignment.Left" qualify="true"/>. However, if
   the <see cref="System.Windows.Forms.Control.RightToLeft"/> property value is set to <see cref="System.Windows.Forms.RightToLeft.Yes" qualify="true"/> while
   the <see cref="System.Windows.Forms.TextBox.TextAlign"/> property is set to <see cref="System.Windows.Forms.HorizontalAlignment.Right" qualify="true"/>
   , the text is displayed left-aligned.
</note>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.RightToLeft"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.RightToLeft"/> property to extend the base 
   implementation. Otherwise, you must provide all the implementation. You are not required to
   override both the <see langword="get"/> and <see langword="set"/>
   accessors of the <see cref="System.Windows.Forms.Control.RightToLeft"/>
   property; you can override only one if needed.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.RightToLeft"/>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="Control.PointToScreen">
		<summary>
			<para>Computes the location of the specified client point into screen coordinates.</para>
		</summary>
		<param name="p">The client coordinate <see cref="System.Drawing.Point"/> to convert. </param>
		<returns>
			<para>A <see cref="System.Drawing.Point"/> that represents the
   converted <see cref="System.Drawing.Point"/>, <paramref name="p"/>, in screen coordinates.</para>
		</returns>
		<seealso cref="System.Drawing.Point"/>
		<seealso cref="System.Windows.Forms.Control.PointToClient"/>
	</doc>
	<doc for="Control.Select1">
		<summary>
			<para> Activates a child control. Optionally specifies the direction in the tab order
      to select the control from.</para>
		</summary>
		<param name="directed"><see langword="true"/> to specify the direction of the control to select; otherwise, <see langword="false"/>.</param>
		<param name=" forward"><see langword="true"/> to move forward in the tab order; <see langword="false"/> to move backward in the tab order.</param>
		<remarks>
			<para>The <paramref name="directed"/> and <paramref name="forward"/> parameters are used by
   container-style controls. When the <paramref name="directed"/> parameter is set to
<see langword="true"/>, the <paramref name="forward"/> parameter is evaluated to determine 
   which control to select. When <paramref name="forward"/> is set to
<see langword="true"/>, the
   next control in the tab order is selected; when <see langword="false"/>, the previous control
   in the
   tab order is selected.</para>
			<para>The <see cref="System.Windows.Forms.Control.Select"/> method activates the control if the control's <see cref="System.Windows.Forms.ControlStyles.Selectable" qualify="true"/> style bit set to
<see langword="true"/>, it is contained in another control, and all 
its parent controls are both visible and enabled.</para>
			<para> The Windows Forms controls in the following
   list are not selectable. Controls derived from controls in the list will
   also not be selectable.</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Windows.Forms.Label"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Panel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.GroupBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.PictureBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ProgressBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Splitter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.LinkLabel"/> (when there is no link present in
   the control)</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Windows.Forms.ContainerControl"/>
		<seealso cref="System.Windows.Forms.Control.Select"/>
	</doc>
	<doc for="Control.ControlCollection.Clear">
		<summary>
			<para>Removes all controls from the collection.</para>
		</summary>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> method to remove the
   entire collection of controls from a parent control. </para>
			<para>To remove an individual control from the collection, use the <see cref="System.Windows.Forms.Control.ControlCollection.Remove"/> or <see cref="System.Windows.Forms.Control.ControlCollection.RemoveAt"/> methods. </para>
			<para>To add new <see cref="System.Windows.Forms.Control"/> objects to the collection, use the <see cref="System.Windows.Forms.Control.ControlCollection.Add"/> or <see cref="System.Windows.Forms.Control.ControlCollection.AddRange"/> methods. </para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.ControlCollection.Clear"/> in a derived 
   class, be sure to call the base class's <see cref="System.Windows.Forms.Control.ControlCollection.Clear"/>
   method to ensure that all the controls are removed from the collection.
</note>
		</remarks>
		<example>
			<para>The following example removes all the <see cref="System.Windows.Forms.Control"/> objects in the <see cref="System.Windows.Forms.Control.ControlCollection"/> of the derived class <see cref="System.Windows.Forms.Panel"/> . The example assumes you have created a <see cref="System.Windows.Forms.Panel"/>, a <see cref="System.Windows.Forms.Button"/>, and at least one other control on a <see cref="System.Windows.Forms.Form"/> .
   The other control(s) are added to the <see cref="System.Windows.Forms.Panel"/>
   control, and the <see cref="System.Windows.Forms.Panel"/> added to the <see cref="System.Windows.Forms.Form"/> . When the button is clicked, all the controls contained in the panel are removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
			<codelink SampleID="ControlCollection" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Control.Created">
		<summary>
			<para> Gets a value indicating whether the control has been created.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   control has been created; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Created"/> property returns <see langword="true"/> if
   the <see cref="System.Windows.Forms.Control"/> was successfully created even though the
   control's handle might not have been created or recreated yet.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.CreateControl"/>
		<seealso cref="System.Windows.Forms.Control.OnCreateControl"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
	</doc>
	<doc for="Control.DefaultBackColor">
		<summary>
			<para>Gets the default background color of the control.</para>
		</summary>
		<value>
			<para> The default background <see cref="System.Drawing.Color"/> of the control. The default is <see cref="System.Drawing.SystemColors.Control" qualify="true"/> .</para>
		</value>
		<remarks>
			<para>This is the default <see cref="System.Windows.Forms.Control.BackColor"/> property value of a generic top-level control. Derived classes can have different defaults.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.BackColor"/>
		<seealso cref="System.Drawing.Color"/>
		<seealso cref="System.Drawing.SystemColors"/>
	</doc>
	<doc for="Control.DefaultFont">
		<summary>
			<para>Gets the default font of the control.</para>
		</summary>
		<value>
			<para> The default <see cref="System.Drawing.Font"/> of the control. The default value is the <see cref="System.Drawing.FontFamily.GenericSansSerif" qualify="true"/> font currently in use by the user's operating system.</para>
		</value>
		<exception cref="System.ArgumentException">The default font or the regional alternative fonts are not installed on the client computer.</exception>
		<remarks>
			<para> If no <see cref="System.Drawing.FontFamily.GenericSansSerif" qualify="true"/> fonts are
   installed on the user's computer, the DEFAULT_GUI_FONT is used. The
   DEFAULT_GUI_FONT is the default font used by user interface objects such as menus and dialog boxes.</para>
			<para>If no font has been explicitly set for the control, this property returns the font for the
   parent control. If no font has been explicitly set for the control or
   its parent control, this property returns the default graphical user interface (GUI) font </para>
			<para>Derived classes can have a different default font.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Font" qualify="true"/>
		<seealso cref="System.Drawing.Font"/>
	</doc>
	<doc for="Control.DefaultForeColor">
		<summary>
			<para>Gets the default foreground color of the control.</para>
		</summary>
		<value>
			<para> The default foreground <see cref="System.Drawing.Color"/> of the control. The default is <see cref="System.Drawing.SystemColors.ControlText" qualify="true"/> .</para>
		</value>
		<remarks>
			<para>This is the default <see cref="System.Windows.Forms.Control.ForeColor"/> property value of a nonparented control. Derived classes can have
   different defaults.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ForeColor"/>
		<seealso cref="System.Drawing.Color"/>
		<seealso cref="System.Drawing.SystemColors"/>
	</doc>
	<doc for="Control.DisplayRectangle">
		<summary>
			<para>Gets the rectangle that represents the display area of the control. </para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the display area of the
   control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.DisplayRectangle"/> property returns the client rectangle of
   the display area of the control. For the base control class, this is equal to
   the client rectangle. However, inheriting controls might want to change this if
   their client area differs from their display area. The display rectangle is the
   smallest <see cref="System.Drawing.Rectangle"/>
   that encloses a control and is used to lay
   out controls.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.DisplayRectangle"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.DisplayRectangle"/> property to extend the base 
   implementation. Alternatively, you must provide all the implementation.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ClientRectangle"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.Layout">
		<summary>
			<para>Occurs when a control should reposition its child controls.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Layout"/> event occurs when
   child controls are added or removed, when the bounds of the control changes, and
   when other changes occur that can affect the layout of the control. The layout
   event can be suppressed using the <see cref="System.Windows.Forms.Control.SuspendLayout"/> and <see cref="System.Windows.Forms.Control.ResumeLayout"/> methods. Suspending layout allows for
   multiple actions to be performed on a control without having to perform a layout
   for each change. For example, if you resize and move a control, each operation
   would raise a <see cref="System.Windows.Forms.Control.Layout"/>
   
   event. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example centers a <see cref="System.Windows.Forms.Form"/> on the screen in the <see cref="System.Windows.Forms.Control.Layout"/> event. This will keep the form centered as the user resizes it. This example assumes you have created a <see cref="System.Windows.Forms.Form"/> control.</para>
			<codelink SampleID="Control.Layout" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnLayout"/>
		<seealso cref="System.Windows.Forms.Control.InitLayout"/>
		<seealso cref="System.Windows.Forms.Control.SuspendLayout"/>
		<seealso cref="System.Windows.Forms.Control.ResumeLayout"/>
	</doc>
	<doc for="Control">
		<summary>
			<para>Defines the base class for controls, which are components with visual representation.</para>
		</summary>
		<threadsafe>
			<para>Only the following members are safe for multithreaded operations: <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.InvokeRequired"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/>. </para>
		</threadsafe>
		<remarks>
			<para> To create your own
      control class, inherit from the <see cref="System.Windows.Forms.UserControl"/> , <see cref="System.Windows.Forms.Control"/> classes, or from the other
      Windows Forms provided controls.</para>
			<para> The <see cref="System.Windows.Forms.Control"/>
class implements very basic functionality required by classes that display information to the user. It handles user input through the keyboard
and pointing devices. It handles message routing and security. It defines the bounds of a control (its position and size), although it does not implement painting. It
provides a window handle (hWnd).</para>
			<para> Windows Forms controls use ambient properties so
   child controls can appear like their surrounding environment. An ambient property is a
   control property that, if not set, is retrieved from the parent control. If the
   control does not have a <see cref="System.Windows.Forms.Control.Parent"/> and the property is not set, the control
   tries to determine the value of the ambient property through the <see cref="System.Windows.Forms.Control.Site"/> property. If the control is not sited, if the
   site does not support ambient properties, or if the property is not set on the
<see cref="System.Windows.Forms.AmbientProperties"/> object, the control uses its own default
   values. Typically, an ambient property represents a characteristic of a control,
   such as <see cref="System.Windows.Forms.Control.BackColor"/>, that is communicated to a child control.
   For example, a <see cref="System.Windows.Forms.Button"/> will have the same <see cref="System.Windows.Forms.Control.BackColor"/> as its parent <see cref="System.Windows.Forms.Form"/> by default. Ambient
   properties provided by the <see cref="System.Windows.Forms.Control"/> class include: <see cref="System.Windows.Forms.Control.Cursor"/>, <see cref="System.Windows.Forms.Control.Font"/>, <see cref="System.Windows.Forms.Control.BackColor"/> , <see cref="System.Windows.Forms.Control.ForeColor"/>, and <see cref="System.Windows.Forms.Control.RightToLeft"/>. </para>
			<note type="note">
   To make your Windows Forms
   application support Windows XP visual styles, be sure to set the <see langword="FlatStyle"/> property to <see cref="System.Windows.Forms.FlatStyle.System" qualify="true"/> and include a manifest with your
   executable. A manifest is an XML file that is included either as a resource
   within your application executable or as a separate file that resides in the
   same directory as the executable file. For an example of a manifest, see the
   Example section of the <see cref="System.Windows.Forms.FlatStyle"/>
   enumeration. For more information about using the visual
   styles available in Windows XP, see Using Windows XP Visual Styles in the Windows
   Development section of the MSDN Library.
</note>
			<para> Windows Forms has
   accessibility support built in, and provides information about your application that
   allows it to work with accessibility client applications
   such as screen enlarger and reviewer utilities, voice input utilities, on-screen
   keyboards, alternative input devices, and keyboard enhancement utilities. There
   are instances when you will want to provide additional information to
   accessibility client applications. There are two ways of providing this
   additional information. You can set the <see cref="System.Windows.Forms.Control.AccessibleName"/>, <see cref="System.Windows.Forms.Control.AccessibleDescription"/> , <see cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>, and <see cref="System.Windows.Forms.Control.AccessibleRole"/> property values, which will be
   reported to accessibility client applications. This method is typically used to
   provide limited accessibility information for existing controls. Alternatively,
   you can write your own class deriving from the <see cref="System.Windows.Forms.AccessibleObject"/> or <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/>
   classes, providing as much accessibility information as needed.</para>
			<note type="note">
   In order to maintain better performance, you
   should not set the size of a control in its constructor. The preferred
   method is to override the <see cref="System.Windows.Forms.Control.DefaultSize"/> property.
</note>
			<para>The majority of the controls in the <see cref="System.Windows.Forms"/> namespace
use the underlying Windows Common Control as a base to build upon. For more
information about the Windows Common Controls, see the General Introduction to
the Common Controls topic in the Windows Common Controls section of the Platform
SDK documentation in the MSDN Library.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form"/>
		<seealso cref="System.Windows.Forms.ScrollableControl"/>
		<seealso cref="System.Windows.Forms.ContainerControl"/>
		<seealso cref="System.ComponentModel.Component"/>
	</doc>
	<doc for="Control.Control2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control"/> class with specific text, size, and location.</para>
		</summary>
		<param name="text">The text displayed by the control.</param>
		<param name=" left">The <see cref="System.Drawing.Point.X"/> position of the control, in pixels, from the left edge of the control's container. The value is assigned to the <see cref="System.Windows.Forms.Control.Left"/> property.</param>
		<param name=" top">The <see cref="System.Drawing.Point.Y"/> position of the control, in pixels, from the top edge of the control's container. The value is assigned to the <see cref="System.Windows.Forms.Control.Top"/> property.</param>
		<param name=" width">The width of the control, in pixels. The value is assigned to the <see cref="System.Windows.Forms.Control.Width"/> property.</param>
		<param name=" height">The height of the control, in pixels. The value is assigned to the <see cref="System.Windows.Forms.Control.Height"/> property.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control"/> class is the base class for all controls
   used in a Windows Forms application. Because this class is not typically used to
   create an instance of the class, this constructor is typically not called
   directly but is instead called by a derived class.</para>
			<para>This version of the <see cref="M:System.Windows.Forms.Control.#ctor"/> constructor sets the initial
<see cref="System.Windows.Forms.Control.Text"/> property value to the <paramref name="text"/> 
parameter value. The initial <see cref="System.Windows.Forms.Control.Size"/> and <see cref="System.Windows.Forms.Control.Location"/> of the control are determined by the
<paramref name="left"/>, <paramref name="top"/>, <paramref name="width"/> and <paramref name="height"/> parameter 
values.</para>
			<note type="note">
   In order to maintain better performance, you
   should not set the size of a control in its
   constructor. The preferred method is to override the <see cref="System.Windows.Forms.Control.DefaultSize"/> property.
   
</note>
		</remarks>
	</doc>
	<doc for="Control.Control4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control"/>
class as a child control, with specific text, size, and location.</para>
		</summary>
		<param name=" parent">The <see cref="System.Windows.Forms.Control"/> to be the parent of the control.</param>
		<param name="text">The text displayed by the control.</param>
		<param name=" left">The <see cref="System.Drawing.Point.X"/> position of the control, in pixels, from the left edge of the control's container. The value is assigned to the <see cref="System.Windows.Forms.Control.Left"/> property.</param>
		<param name=" top">The <see cref="System.Drawing.Point.Y"/> position of the control, in pixels, from the top edge of the control's container. The value is assigned to the <see cref="System.Windows.Forms.Control.Top"/> property.</param>
		<param name=" width">The width of the control, in pixels. The value is assigned to the <see cref="System.Windows.Forms.Control.Width"/> property.</param>
		<param name=" height">The height of the control, in pixels. The value is assigned to the <see cref="System.Windows.Forms.Control.Height"/> property.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control"/> class is the base class for all controls
   used in a Windows Forms application. Because this class is not typically used to
   create an instance of the class, this constructor is typically not called
   directly but is instead called by a derived class.</para>
			<para>This version of the <see cref="M:System.Windows.Forms.Control.#ctor"/> constructor sets the initial
<see cref="System.Windows.Forms.Control.Text"/> property value to the <paramref name="text"/> parameter value. The constructor also adds the control to the parent control's <see cref="System.Windows.Forms.Control.ControlCollection"/>. The initial <see cref="System.Windows.Forms.Control.Size"/> and <see cref="System.Windows.Forms.Control.Location"/> of the control are determined by the
<paramref name="left"/>, <paramref name="top"/>, <paramref name="width"/> and <paramref name="height"/> parameter 
values.</para>
			<note type="note">
   In order to maintain better performance, you
   should not set the size of a control in its
   constructor. The preferred method is to override the <see cref="System.Windows.Forms.Control.DefaultSize"/> property.
   
</note>
		</remarks>
	</doc>
	<doc for="Control.ProcessCmdKey">
		<summary>
			<para>Processes a command key.</para>
		</summary>
		<param name="msg">A <see cref="System.Windows.Forms.Message"/>, passed by reference, that represents the window message to process.</param>
		<param name="keyData">One of the <see cref="System.Windows.Forms.Keys"/> values that represents the key to process.</param>
		<returns>
			<para><see langword="true"/> if the character was processed by
   the control; otherwise, <see langword="false"/> . </para>
		</returns>
		<remarks>
			<para>This method is called during message preprocessing to
      handle command keys. Command keys are keys that always take precedence over
      regular input keys. Examples of command keys include accelerators and menu
      shortcuts. The method must return <see langword="true"/> to indicate that it has
      processed the command key, or <see langword="false"/> to indicate that the key is not a
      command key. This method is only called when the control is hosted in a Windows Forms application or
      as an ActiveX control.</para>
			<para>The <see cref="System.Windows.Forms.Control.ProcessCmdKey"/> method first determines whether 
   the control has a <see cref="System.Windows.Forms.ContextMenu"/>
   , and if so, allows the <see cref="System.Windows.Forms.ContextMenu"/> process the command key. If the command key is not a menu shortcut and the
   control has a parent, the key is passed to the parent's
<see cref="System.Windows.Forms.Control.ProcessCmdKey"/> 
method. The net effect is that command keys are "bubbled" up the control
hierarchy. In addition to the key the user pressed, the key data also indicates
which, if any, modifier keys were pressed at the
same time as the key. Modifier keys include the SHIFT,
CTRL, and ALT keys.</para>
			<note type="inheritinfo">
   
   When overriding the
<see cref="System.Windows.Forms.Control.ProcessCmdKey"/> method 
   in a derived class, a control should return <see langword="true"/> to indicate
   that it has processed the key. For keys that are not processed by the
   control, the result of calling the base class's
<see cref="System.Windows.Forms.Control.ProcessCmdKey"/> method 
   should be returned. Controls will seldom, if ever, need to override this method.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc>
	<doc for="Control.SelectNextControl">
		<summary>
			<para> Activates the next control.</para>
		</summary>
		<param name="ctl">The <see cref="System.Windows.Forms.Control"/> at which to start the search. </param>
		<param name="forward"><para><see langword="true"/> to move forward in the tab order; <see langword="false"/> to move backward in the tab order. </para></param>
		<param name="tabStopOnly"><para><see langword="true"/> to ignore the controls with the <see cref="System.Windows.Forms.Control.TabStop"/>property set to <see langword="false"/>; otherwise, <see langword="false"/> . </para></param>
		<param name="nested"><para><see langword="true"/> to include nested (children of child controls) child controls; otherwise, <see langword="false"/> . </para></param>
		<param name="wrap"><para><see langword="true"/> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <see langword="false"/> . </para></param>
		<returns>
			<para><see langword="true"/> if a control was activated; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.SelectNextControl"/> method activates the next control in the tab order if the control's <see cref="System.Windows.Forms.ControlStyles.Selectable" qualify="true"/> style bit set to
<see langword="true"/>, it is contained in another control, and all its parent controls are both visible and enabled.</para>
			<para> The Windows Forms controls in the following
   list are not selectable. Controls derived from controls in the list will
   also not be selectable.</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Windows.Forms.Label"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Panel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.GroupBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.PictureBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ProgressBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Splitter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.LinkLabel"/> (when there is no link present in
   the control)</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Select"/>
		<seealso cref="System.Windows.Forms.Control.Focus"/>
	</doc>
	<doc for="Control.SetVisibleCore">
		<summary>
			<para>Sets the control to the specified visible state.</para>
		</summary>
		<param name="value"><see langword="true"/> to make the control visible; otherwise, <see langword="false"/> .</param>
		<remarks>
			<para>You would typically override this method to change the visibility behavior
      of the control.</para>
			<note type="inheritinfo">
      When overriding <see cref="System.Windows.Forms.Control.SetVisibleCore"/> in a derived class, be sure to call the
      base class's <see cref="System.Windows.Forms.Control.SetVisibleCore"/> method to force the visibility of the
      control to change.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
	</doc>
	<doc for="Control.Update">
		<summary>
			<para> Causes the control to redraw the invalidated regions within its client area.</para>
		</summary>
		<remarks>
			<para>Executes any pending requests for painting.</para>
			<para>For more information, see the <see langword="WM_PAINT"/> topic of the Painting
   and Drawing section of the Platform SDK documentation in the MSDN Library.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ClientRectangle"/>
		<seealso cref="System.Windows.Forms.Control.ClientSize"/>
		<seealso cref="System.Windows.Forms.Control.Invalidate"/>
	</doc>
	<doc for="Control.UpdateZOrder">
		<summary>
			<para> Updates the control in its parent's z-order.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.UpdateZOrder"/> method updates the
   position of the control in its parent control's z-order.
   For example, if this control is a newly created control that was added to a
<see cref="System.Windows.Forms.Control.ControlCollection"/>, the z-order is updated with the new
   control added to the back.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
	</doc>
	<doc for="Control.BackColor">
		<summary>
			<para>Gets or sets the background color for the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Color"/> that
   represents the background color of the control. The default is the value of the
<see cref="System.Windows.Forms.Control.DefaultBackColor"/> property.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Windows.Forms.Control.BackColor"/> property does
   not support transparent colors unless the <see cref="System.Windows.Forms.ControlStyles.SupportsTransparentBackColor" qualify="true"/> style bit is set to
<see langword="true"/> .</para>
			<para>The <see cref="System.Windows.Forms.Control.BackColor"/> property is an ambient property. An
ambient property is a control property that, if not set, is retrieved from the
parent control. For example, a <see cref="System.Windows.Forms.Button"/> will have the same <see cref="System.Windows.Forms.Control.BackColor"/> as its parent <see cref="System.Windows.Forms.Form"/> by default. For more
information about ambient properties, see the <see cref="System.Windows.Forms.AmbientProperties"/> class or the <see cref="System.Windows.Forms.Control"/>
class overview.</para>
			<note type="inheritinfo">
   When overriding the
<see cref="System.Windows.Forms.Control.BackColor"/> property in a derived class, use 
   the base class's <see cref="System.Windows.Forms.Control.BackColor"/> property to extend the
   base implementation. Otherwise, you must provide all the implementation. You are
   not required to override both the <see langword="get"/> and <see langword="set"/>
   accessors of the <see cref="System.Windows.Forms.Control.BackColor"/> property; you can override only
   one if needed.
</note>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Windows.Forms.Control.BackColor"/> and <see cref="System.Windows.Forms.Control.ForeColor"/> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example assumes you have a <see cref="System.Windows.Forms.Form"/> with at least one child control; however, a child container control, like a <see cref="System.Windows.Forms.Panel"/> or <see cref="System.Windows.Forms.GroupBox"/>, with its own child control(s) would better demonstrate the recursion. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AmbientProperties"/>
		<seealso cref="System.Windows.Forms.Control.BackColorChanged"/>
	</doc>
	<doc for="Control.ForeColor">
		<summary>
			<para>Gets or sets the foreground color of the control.</para>
		</summary>
		<value>
			<para> The foreground <see cref="System.Drawing.Color"/> of the control. The default is the value of the <see cref="System.Windows.Forms.Control.DefaultForeColor"/>
property.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ForeColor"/> property is an ambient property. An
   ambient property is a control property that, if not set, is retrieved from the
   parent control. For example, a <see cref="System.Windows.Forms.Button"/> will have the same <see cref="System.Windows.Forms.Control.BackColor"/> as its parent <see cref="System.Windows.Forms.Form"/> by default. For more
   information about ambient properties, see the <see cref="System.Windows.Forms.AmbientProperties"/> class or the <see cref="System.Windows.Forms.Control"/>
   class overview.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.ForeColor"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.ForeColor"/>
property to extend the base implementation. Otherwise, you must provide all
the implementation. You are not required to
override both the <see langword="get"/> and <see langword="set"/>
accessors of the <see cref="System.Windows.Forms.Control.ForeColor"/>
property; you can override only one if needed.
</note>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Windows.Forms.Control.BackColor"/> and <see cref="System.Windows.Forms.Control.ForeColor"/> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example assumes you have a <see cref="System.Windows.Forms.Form"/> with at least one child control; however, a child container control, like a <see cref="System.Windows.Forms.Panel"/> or <see cref="System.Windows.Forms.GroupBox"/>, with its own child control(s) would better demonstrate the recursion. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ForeColorChanged"/>
		<seealso cref="System.Windows.Forms.Control.OnForeColorChanged"/>
		<seealso cref="System.Drawing.Color"/>
	</doc>
	<doc for="Control.HasChildren">
		<summary>
			<para>Gets a value indicating whether the control
      contains one or more child controls.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control contains one or more child controls;
   otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.Controls"/> collection has a
<see cref="System.Windows.Forms.Control.ControlCollection.Count"/> greater than zero, the <see cref="System.Windows.Forms.Control.HasChildren"/> property will return 
<see langword="true"/>. Accessing the 
<see cref="System.Windows.Forms.Control.HasChildren"/> property does not force the 
   creation of a <see cref="System.Windows.Forms.Control.ControlCollection"/> if the control has no
   children, so referencing this property can provide a performance benefit when
   walking a tree of controls.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Windows.Forms.Control.BackColor"/> and <see cref="System.Windows.Forms.Control.ForeColor"/> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example assumes you have a <see cref="System.Windows.Forms.Form"/> with at least one child control; however, a child container control, like a <see cref="System.Windows.Forms.Panel"/> or <see cref="System.Windows.Forms.GroupBox"/>, with its own child control(s) would better demonstrate the recursion. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Count"/>
	</doc>
	<doc for="Control.AllowDrop">
		<summary>
			<para> Gets or sets a value indicating whether the control can accept data that the user drags onto it.</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   drag-and-drop operations are allowed in the control; otherwise, <see langword="false"/>. The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      When overriding the <see cref="System.Windows.Forms.Control.AllowDrop"/>
      property in a derived class, use the base class's
   <see cref="System.Windows.Forms.Control.AllowDrop"/> property to extend the base
      implementation. Otherwise, you must provide all the implementation. You are not required to
      override both the <see langword="get"/> and <see langword="set"/>
      accessors of the <see cref="System.Windows.Forms.Control.AllowDrop"/> property; you can override only one if needed.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for unrestricted Clipboard access to set this property to <see langword="true"/>. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionClipboard.AllClipboard" qualify="true"/></permission>
		<example>
			<para>The following example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <see cref="System.Windows.Forms.Control.OnPaint"/> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <see cref="System.Windows.Forms.Control.DragEnter"/> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <see cref="System.Windows.Forms.Control.DragDrop"/> 
event-handling method displays the image on the form, if an <see cref="System.Drawing.Image"/> can be created from the data. Because the <see cref="System.Windows.Forms.DragEventArgs.X" qualify="true"/> and <see cref="System.Windows.Forms.DragEventArgs.Y" qualify="true"/> values are screen
coordinates, the example uses the <see cref="System.Windows.Forms.Control.PointToClient"/> method to convert them to client coordinates. </para>
			<codelink SampleID="Windows.Forms.Control.DragOperations" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DragEventArgs"/>
		<seealso cref="System.Windows.Forms.Control.DragOver"/>
		<seealso cref="System.Windows.Forms.Control.DragDrop"/>
		<seealso cref="System.Windows.Forms.Control.DragEnter"/>
		<seealso cref="System.Windows.Forms.Control.DragLeave"/>
		<seealso cref="System.Windows.Forms.Control.DoDragDrop"/>
	</doc>
	<doc for="Control.PointToClient">
		<summary>
			<para>Computes the location of the specified screen point into client coordinates.</para>
		</summary>
		<param name="p">The screen coordinate <see cref="System.Drawing.Point"/> to convert. </param>
		<returns>
			<para>A <see cref="System.Drawing.Point"/> that represents the
   converted <see cref="System.Drawing.Point"/>, <paramref name="p"/>, in client coordinates.</para>
		</returns>
		<example>
			<para>The following example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <see cref="System.Windows.Forms.Control.OnPaint"/> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <see cref="System.Windows.Forms.Control.DragEnter"/> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <see cref="System.Windows.Forms.Control.DragDrop"/> event-handling method displays the image on the form, if an <see cref="System.Drawing.Image"/> can be created from the data. Because the <see cref="System.Windows.Forms.DragEventArgs.X" qualify="true"/> and <see cref="System.Windows.Forms.DragEventArgs.Y" qualify="true"/> values are screen coordinates, the example uses the <see cref="System.Windows.Forms.Control.PointToClient"/> method to convert them to client coordinates. </para>
			<codelink SampleID="Windows.Forms.Control.DragOperations" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Point"/>
		<seealso cref="System.Windows.Forms.Control.PointToScreen"/>
	</doc>
	<doc for="Control.Dock">
		<summary>
			<para> Gets or sets which edge of the parent container
      a control is docked to.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.DockStyle"/> values. The default is <see cref="System.Windows.Forms.DockStyle.None"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Windows.Forms.DockStyle"/> values.</exception>
		<remarks>
			<para> A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent
      container. For example, if you set this property to <see cref="System.Windows.Forms.DockStyle.Left" qualify="true"/>, the left edge of the control
      will be docked to the left edge of its parent control.
      Additionally, the docked edge of the control is resized to match that of its
      container control. Controls are docked in order of their z-order.</para>
			<para>For more information about anchoring and docking controls, see <see topic="cptskcreatingintricateuserinterfacewithwindowsapplicationobjects" title="Walkthrough: Creating a Multipane User Interface with Windows Forms"/>.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.Dock"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.Dock"/>
property to extend the base implementation. Otherwise, you must provide all the
implementation. You are not required to
override both the <see langword="get"/> and <see langword="set"/>
methods of the <see cref="System.Windows.Forms.Control.Dock"/>
property; you can override only one if needed.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.GroupBox"/> and sets some of its common properties. The example creates a <see cref="System.Windows.Forms.TextBox"/> and 
   sets its <see cref="System.Windows.Forms.Control.Location"/> within the group box. Next, it sets the <see cref="System.Windows.Forms.Control.Text"/> property of the
   group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <see cref="System.Windows.Forms.Control.Enabled"/> property to <see langword="false"/>, which causes all controls contained within the group box to be disabled. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.DockStyle"/>
		<seealso cref="System.Windows.Forms.Control.Anchor"/>
		<seealso cref="System.Windows.Forms.ScrollableControl.DockPaddingEdges"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.Enabled">
		<summary>
			<para> Gets or sets a value indicating whether the control can respond to user interaction.</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   the control can respond to user interaction; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Enabled"/> property allows controls to be enabled or disabled
   at run time. For example, you can disable controls that do not apply to the
   current state of the application. You can also disable a control to restrict its
   use. For example, a button can be disabled to prevent the user from clicking
   it. If a control is disabled, it cannot be selected.</para>
			<para>When a container control has its enabled property set to
<see langword="false"/>, all its contained controls are 
   disabled, as well. For example, if the user clicks on any of the controls
   contained in a disabled <see cref="System.Windows.Forms.GroupBox"/>
   control, no events are
   raised. </para>
			<note type="note">
   When
   a scrollable control is disabled,
   the scroll bars are also disabled. For example, a disabled multiline textbox is
   unable to scroll to display all the lines of
   text.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.GroupBox"/> and sets some of its common properties. The example creates a <see cref="System.Windows.Forms.TextBox"/> and sets its <see cref="System.Windows.Forms.Control.Location"/> within the group box. Next, it sets the <see cref="System.Windows.Forms.Control.Text"/> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <see cref="System.Windows.Forms.Control.Enabled"/> property to <see langword="false"/>, which causes all controls contained within the group box to be disabled. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollableControl"/>
	</doc>
	<doc for="Control.Location">
		<summary>
			<para>Gets or sets the coordinates of the upper-left corner of the control relative
      to the upper-left corner of its container. </para>
		</summary>
		<value>
			<para>The <see cref="System.Drawing.Point"/> that represents the upper-left corner of
   the control relative to the upper-left corner of its container.</para>
		</value>
		<remarks>
			<para>Because the <see cref="System.Drawing.Point"/> class is a value type
   (<see langword="Structure"/> in Visual Basic, <see langword="struct"/>
   in C#), it is returned by value, meaning accessing the property returns a copy of
   the upper-left point of the control. So, adjusting the <see cref="System.Drawing.Point.X"/> or
<see cref="System.Drawing.Point.Y"/> 
properties of the <see cref="System.Drawing.Point"/> object returned from this property will not
affect the <see cref="System.Windows.Forms.Control.Left"/>, <see cref="System.Windows.Forms.Control.Right"/>, <see cref="System.Windows.Forms.Control.Top"/>, or <see cref="System.Windows.Forms.Control.Bottom"/> property values of the control. To
adjust these properties set
each property value individually, or set the <see cref="System.Windows.Forms.Control.Location"/> property with a new <see cref="System.Drawing.Point"/>
object.</para>
			<para>If the <see cref="System.Windows.Forms.Control"/> is a <see cref="System.Windows.Forms.Form"/>, the <see cref="System.Windows.Forms.Control.Location"/> property value represents the upper-left
corner of the <see cref="System.Windows.Forms.Form"/> in screen coordinates.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.GroupBox"/> and sets some of its common properties. The example creates a <see cref="System.Windows.Forms.TextBox"/> and sets its <see cref="System.Windows.Forms.Control.Location"/> within the group box. Next, it sets the <see cref="System.Windows.Forms.Control.Text"/> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <see cref="System.Windows.Forms.Control.Enabled"/> property to <see langword="false"/>, which causes all controls contained within the group box to be disabled. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Form"/>
		<seealso cref="System.Windows.Forms.ContainerControl"/>
	</doc>
	<doc for="Control.Text">
		<summary>
			<para>Gets or sets the text associated with this control. </para>
		</summary>
		<value>
			<para>The text associated with this control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Text"/> property of the control is used
   differently by each derived class. For example the <see cref="System.Windows.Forms.Control.Text"/> property of a <see cref="System.Windows.Forms.Form"/> is displayed in the title
   bar at the top of the form, is fairly small in character count, and usually displays the application or document name. However,
   the <see cref="System.Windows.Forms.Control.Text"/> property of a <see cref="System.Windows.Forms.RichTextBox"/> can be large and can include
   numerous nonvisual characters used to format the text. For example, the text displayed in a
<see cref="System.Windows.Forms.RichTextBox"/> can be formatted by adjusting the <see cref="System.Drawing.Font"/> 
properties, or
by the addition of spaces or tab characters to align the
text.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.Text"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.Text"/>
property to extend the base implementation. Otherwise, you must provide all the
implementation. You are not required to
override both the <see langword="get"/> and <see langword="set"/>
accessors of the <see cref="System.Windows.Forms.Control.Text"/>
property; you can override only one if needed.
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.GroupBox"/> and sets some of its common properties. The example creates a <see cref="System.Windows.Forms.TextBox"/> and sets its <see cref="System.Windows.Forms.Control.Location"/> within the group box. Next, it sets the <see cref="System.Windows.Forms.Control.Text"/> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <see cref="System.Windows.Forms.Control.Enabled"/> property to <see langword="false"/>, which causes all controls contained within the group box to be disabled. </para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.TextLength" qualify="true"/>
	</doc>
	<doc for="Control.Anchor">
		<summary>
			<para>Gets or sets which edges of the control are anchored to the edges of its container.</para>
		</summary>
		<value>
			<para>A bitwise combination of the <see cref="System.Windows.Forms.AnchorStyles"/> values. The default is <see cref="System.Windows.Forms.AnchorStyles.Top"/> and <see cref="System.Windows.Forms.AnchorStyles.Left"/>.</para>
		</value>
		<remarks>
			<para>A control can be anchored to one or more edges of its parent container.
      Anchoring a control to its parent ensures that the anchored edges remain in the same position relative to the edges of
      the parent container when the parent container is resized. For example, if you
      have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Button"/> whose <see cref="System.Windows.Forms.Control.Anchor"/> property value is set to <see cref="System.Windows.Forms.AnchorStyles.Top" qualify="true"/> and <see cref="System.Windows.Forms.AnchorStyles.Bottom" qualify="true"/>, the <see cref="System.Windows.Forms.Button"/> is stretched to maintain the anchored
      distance to the top and bottom edges of the <see cref="System.Windows.Forms.Form"/>
      as the <see cref="System.Windows.Forms.Control.Height"/> of the <see cref="System.Windows.Forms.Form"/>
      
      is
      increased.</para>
			<para>For more information about anchoring and docking controls, see <see topic="cptskcreatingintricateuserinterfacewithwindowsapplicationobjects" title="Walkthrough: Creating a Multipane User Interface with Windows Forms"/>
.</para>
			<note type="inheritinfo">
   When overriding the
<see cref="System.Windows.Forms.Control.Anchor"/> property in a derived class, use
   the base class's <see cref="System.Windows.Forms.Control.Anchor"/>
   property to extend the base implementation. Otherwise, you must provide all the
   implementation. You are not required to
   override both the <see langword="get"/> and <see langword="set"/> accessors of the
<see cref="System.Windows.Forms.Control.Anchor"/> property; you can override only
   one if needed.
   
</note>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.Button"/> to a form and sets some of its common 
   properties. The example anchors the button to the bottom-right corner of the
   form so it keeps its relative position as the form is resized. Next it sets the
<see cref="System.Windows.Forms.Control.BackgroundImage"/> and resizes the button to the same 
   size as the <see cref="System.Drawing.Image"/>
   
   . The example then sets the <see cref="System.Windows.Forms.Control.TabStop"/> to <see langword="true "/>and sets the <see cref="System.Windows.Forms.Control.TabIndex"/> property. Lastly, it adds an event handler to handle the
<see cref="System.Windows.Forms.Control.Click"/> event of the button. This example assumes 
   you have an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c>.</para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.AnchorStyles"/>
		<seealso cref="System.Windows.Forms.Control.Dock"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.BackgroundImage">
		<summary>
			<para>Gets or sets the background image displayed in the control.</para>
		</summary>
		<value>
			<para>An <see cref="System.Drawing.Image"/> that represents the image to display in the background of the control.</para>
		</value>
		<remarks>
			<note type="note">
      Images with translucent or transparent colors are not supported by Windows Forms controls as background images.
      
   </note>
			<note type="inheritinfo">
      When overriding the <see cref="System.Windows.Forms.Control.BackgroundImage"/> property in a derived class, use the base class's
   <see cref="System.Windows.Forms.Control.BackgroundImage"/> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to
      override both the <see langword="get"/> and <see langword="set"/> accessors of the <see cref="System.Windows.Forms.Control.BackgroundImage"/> property; you can override only one if needed.
      
   </note>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.Button"/> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <see cref="System.Windows.Forms.Control.BackgroundImage"/> and resizes the button to the same size as the <see cref="System.Drawing.Image"/>. The example then sets the <see cref="System.Windows.Forms.Control.TabStop"/> to <see langword="true "/>and sets the <see cref="System.Windows.Forms.Control.TabIndex"/> property. Lastly, it adds an event handler to handle the <see cref="System.Windows.Forms.Control.Click"/> event of the button. This example assumes you have an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c>.</para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="3"/>
		</example>
		<seealso cref="System.Drawing.Image"/>
		<seealso cref="System.Windows.Forms.Control.BackgroundImageChanged"/>
	</doc>
	<doc for="Control.Size">
		<summary>
			<para>Gets or sets the height and width of the control.</para>
		</summary>
		<value>
			<para>The <see cref="System.Drawing.Size"/> object that represents the height and width of the control in pixels.</para>
		</value>
		<remarks>
			<para>Because the <see cref="System.Drawing.Size"/> class is a value type
   (<see langword="Structure"/> in Visual Basic, <see langword="struct"/>
   in C#), it is returned by value, meaning accessing the property returns a copy of
   the size of the control. So, adjusting the <see cref="System.Drawing.Size.Width"/> or <see cref="System.Drawing.Size.Height"/>
   properties of the <see cref="System.Drawing.Size"/> object returned from this property will not
   affect the <see cref="System.Windows.Forms.Control.Width"/> or <see cref="System.Windows.Forms.Control.Height"/> of the control. To adjust
   the <see cref="System.Windows.Forms.Control.Width"/> or <see cref="System.Windows.Forms.Control.Height"/> of the
   control, you must set
   the control's <see cref="System.Windows.Forms.Control.Width"/> or <see cref="System.Windows.Forms.Control.Height"/> property, or set the
<see cref="System.Windows.Forms.Control.Size"/> property with a new <see cref="System.Drawing.Size"/> object.</para>
			<note type="note">
   In order to maintain better performance, you
   should not set the <see cref="System.Drawing.Size"/> of a control in its
   constructor. The preferred method is to override the <see cref="System.Windows.Forms.Control.DefaultSize"/> property.
   
</note>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.Button"/> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <see cref="System.Windows.Forms.Control.BackgroundImage"/> and resizes the button to the same size as the <see cref="System.Drawing.Image"/>. The example then sets the <see cref="System.Windows.Forms.Control.TabStop"/> to <see langword="true "/>and sets the <see cref="System.Windows.Forms.Control.TabIndex"/> property. Lastly, it adds an event handler to handle the <see cref="System.Windows.Forms.Control.Click"/> event of the button. This example assumes you have an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c>.</para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SetBounds"/>
	</doc>
	<doc for="Control.TabIndex">
		<summary>
			<para>Gets or sets the tab order of the control within its container.</para>
		</summary>
		<value>
			<para>The index value of the control within the set of
      controls within its container that are included in the tab order.</para>
		</value>
		<remarks>
			<para> A tab index can consist of any valid integer greater than or equal to zero, lower numbers
      being earlier in the tab order. If more than one control on the same parent
      control has the same tab index, the z-order of the controls determines the order to cycle
      through the controls.</para>
			<para> For a control to be included in the tab order, its
   <see cref="System.Windows.Forms.Control.TabStop"/> property must be set to
   <see langword="true"/>
   
   .</para>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.Button"/> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <see cref="System.Windows.Forms.Control.BackgroundImage"/> and resizes the button to the same size as the <see cref="System.Drawing.Image"/>. The example then sets the <see cref="System.Windows.Forms.Control.TabStop"/> to <see langword="true "/>and sets the <see cref="System.Windows.Forms.Control.TabIndex"/> property. Lastly, it adds an event handler to handle the <see cref="System.Windows.Forms.Control.Click"/> event of the button. This example assumes you have an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c>.</para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.UpdateZOrder"/>
		<seealso cref="System.Windows.Forms.Control.TabStop"/>
	</doc>
	<doc for="Control.TabStop">
		<summary>
			<para>Gets or sets a value indicating whether the user can give the focus to
      this control using the TAB key. </para>
		</summary>
		<value>
			<para><see langword="true"/> if the user can give the focus to the control using
   the TAB key; otherwise, <see langword="false"/>. The default is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>When the user presses the TAB key, the input focus is set to the next
      control in the tab order. Controls with the <see cref="System.Windows.Forms.Control.TabStop"/> property value of
   <see langword="false"/> are not included in the collection of controls in the tab
      order. The tab order can be manipulated by setting
      the control's <see cref="System.Windows.Forms.Control.TabIndex"/> property value. </para>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.Button"/> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <see cref="System.Windows.Forms.Control.BackgroundImage"/> and resizes the button to the same size as the <see cref="System.Drawing.Image"/>. The example then sets the <see cref="System.Windows.Forms.Control.TabStop"/> to <see langword="true "/>and sets the <see cref="System.Windows.Forms.Control.TabIndex"/> property. Lastly, it adds an event handler to handle the <see cref="System.Windows.Forms.Control.Click"/> event of the button. This example assumes you have an <see cref="System.Windows.Forms.ImageList"/> named <c>imageList1</c>.</para>
			<codelink SampleID="Windows.Forms.Control Properties" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.TabIndex"/>
	</doc>
	<doc for="Control.Invalidate2">
		<summary>
			<para>Invalidates a specific region of the control and causes a paint message to be
      sent to the control.</para>
		</summary>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.Invalidate"/> method does not force a synchronous paint;
   to force a synchronous paint, call the <see cref="System.Windows.Forms.Control.Update"/> method after calling the <see cref="System.Windows.Forms.Control.Invalidate"/>
   method. When this method is called with no parameters, the entire client area is
   added to the update region. </para>
		</remarks>
		<example>
			<para>The following example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <see cref="System.Windows.Forms.Control.OnPaint"/> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <see cref="System.Windows.Forms.Control.DragEnter"/> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <see cref="System.Windows.Forms.Control.DragDrop"/> event-handling method displays the image on the form, if an <see cref="System.Drawing.Image"/> can be created from the data. Because the <see cref="System.Windows.Forms.DragEventArgs.X" qualify="true"/> and <see cref="System.Windows.Forms.DragEventArgs.Y" qualify="true"/> values are screen coordinates, the example uses the <see cref="System.Windows.Forms.Control.PointToClient"/> method to convert them to client coordinates. </para>
			<codelink SampleID="Windows.Forms.Control.DragOperations" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Refresh"/>
		<seealso cref="System.Windows.Forms.Control.Update"/>
	</doc>
	<doc for="Control.DefaultImeMode">
		<summary>
			<para>Gets the default Input Method Editor (IME) mode supported by the control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<remarks>
			<para>An input method editor (IME) is a program that allows users to enter complex
      characters and symbols, such as Japanese Kanji characters, by using a standard
      keyboard. </para>
			<para>As implemented in the <see cref="System.Windows.Forms.Control"/> class, this property
   always returns the <see cref="System.Windows.Forms.ImeMode.Inherit" qualify="true"/> value.
   The <see cref="System.Windows.Forms.ImeMode.Inherit"/> value specifies that the IME mode is
   inherited from the parent
   control.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.DefaultImeMode"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.DefaultImeMode"/> property to extend the base 
   implementation. Otherwise, you must provide all the implementation.
</note>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Windows.Forms.Control.DefaultImeMode"/> property to turn off the Input Method 
   Editor.</para>
			<codelink SampleID="Windows.Forms.Control Properties2" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.ImeMode"/>
		<seealso cref="System.Windows.Forms.Control.ImeMode" qualify="true"/>
	</doc>
	<doc for="Control.ContextMenu">
		<summary>
			<para> Gets or sets the shortcut menu associated with the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ContextMenu"/> that represents the shortcut menu associated
   with the control.</para>
		</value>
		<remarks>
			<para> A shortcut menu is also known as a context menu. Shortcut menus are
      used to give context-specific menu options to users when they right-click on the control.</para>
			<note type="inheritinfo">
      When overriding the <see cref="System.Windows.Forms.Control.ContextMenu"/>
      property in a derived class, use the base class's
   <see cref="System.Windows.Forms.Control.ContextMenu"/> property to extend the base
      implementation. Otherwise, you must provide all the implementation. You are not required to
      override both the <see langword="get"/> and <see langword="set"/>
      accessors of the <see cref="System.Windows.Forms.Control.ContextMenu"/>
      property; you can override only one if needed.
      
   </note>
		</remarks>
		<example>
			<para>The following example displays the <see cref="System.Windows.Forms.ContextMenu"/> assigned to a <see cref="System.Windows.Forms.TreeView"/>
when the right mouse button is clicked and released. This code assumes you have
a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.TreeView"/> on it. It is also assumed that the <see cref="System.Windows.Forms.TreeView"/>
has a <see cref="System.Windows.Forms.ContextMenu"/> assigned to its <see cref="System.Windows.Forms.Control.ContextMenu"/> property.</para>
			<codelink SampleID="Windows.Forms.Control Properties2" SnippetID="5"/>
		</example>
		<seealso cref="System.Windows.Forms.ContextMenu"/>
	</doc>
	<doc for="Control.DefaultSize">
		<summary>
			<para>Gets the default size of the control.</para>
		</summary>
		<value>
			<para>The default <see cref="System.Drawing.Size"/> of the control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.DefaultSize"/> property represents the <see cref="System.Drawing.Size"/> of the control when it is initially created. You
   can adjust the size of the control by setting its <see cref="System.Windows.Forms.Control.Size"/> property value.</para>
			<note type="note">
   In order to maintain better
   performance, you should not set the <see cref="System.Drawing.Size"/> of a control in its constructor. The preferred
   method is to override the <see cref="System.Windows.Forms.Control.DefaultSize"/> property.
</note>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.DefaultSize"/> property in
   a derived class, it is preferable return a <see cref="System.Drawing.Size"/> object with the
   desired dimensions rather
   than overriding all the implementation.
</note>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Windows.Forms.Control.DefaultSize"/> property, and makes the default size of the form 500 pixels square.</para>
			<codelink SampleID="Windows.Forms.Control Properties2" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Size" qualify="true"/>
		<seealso cref="System.Drawing.Size"/>
	</doc>
	<doc for="Control.ContainsFocus">
		<summary>
			<para>Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control or one of its child controls currently has the input focus; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> You can use this property to determine whether a control or any of the controls contained within it has the input focus. To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <see cref="System.Windows.Forms.Control.Focused"/> property. To give a control the
   input focus, use the <see cref="System.Windows.Forms.Control.Focus"/> or <see cref="System.Windows.Forms.Control.Select"/> methods. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.CanFocus"/>
		<seealso cref="System.Windows.Forms.Control.Focus"/>
		<seealso cref="System.Windows.Forms.Control.Focused"/>
		<seealso cref="System.Windows.Forms.Control.CanSelect"/>
	</doc>
	<doc for="Control.Font">
		<summary>
			<para>Gets or sets the font of the text displayed by the control.</para>
		</summary>
		<value>
			<para>The <see cref="System.Drawing.Font"/> object to
   apply to the text displayed by the control. The default is the value of the
<see cref="System.Windows.Forms.Control.DefaultFont"/> 
property.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Font"/> property is an ambient property. An
   ambient property is a control property that, if not set, is retrieved from the
   parent control. For example, a <see cref="System.Windows.Forms.Button"/> will have the same <see cref="System.Windows.Forms.Control.BackColor"/> as its parent <see cref="System.Windows.Forms.Form"/> by default. For more
   information about ambient properties, see the <see cref="System.Windows.Forms.AmbientProperties"/> class or the <see cref="System.Windows.Forms.Control"/>
   class overview.</para>
			<para>Because the <see cref="System.Drawing.Font"/> object is immutable (meaning that you cannot
adjust any of it's properties), you can only assign the <see cref="System.Windows.Forms.Control.Font"/> property a new <see cref="System.Drawing.Font"/>
object. However, you can base the
new font on the existing font.</para>
			<para lang="VB, C#">The following is an example of
   how to adjust the existing font to make it bold:</para>
			<code lang="C#">myControl.Font = new Font(myControl.Font, 
   myControl.Font.Style | FontStyle.Bold);
</code>
			<code lang="VB">MyControl.Font = New Font(MyControl.Font, _ 
   MyControl.Font.Style Or FontStyle.Bold)
</code>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.Font"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.Font"/>
property to extend the base implementation. Otherwise, you must provide all the
implementation. You are not required to
override both the <see langword="get"/> and <see langword="set"/>
accessors of the <see cref="System.Windows.Forms.Control.Font"/> property; you can override only
one if needed.
</note>
		</remarks>
		<example>
			<para>The following example displays a <see cref="System.Windows.Forms.FontDialog"/> to the user and changes 
   the <see cref="System.Drawing.Font"/>
   of a <see cref="System.Windows.Forms.DateTimePicker"/> control. This example assumes you have a
<see cref="System.Windows.Forms.Form"/> with <see cref="System.Windows.Forms.Button"/> and a <see cref="System.Windows.Forms.DateTimePicker"/> on it.</para>
			<codelink SampleID="Control_Font" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.FontChanged"/>
		<seealso cref="System.Windows.Forms.Control.OnFontChanged"/>
		<seealso cref="System.Drawing.Font"/>
	</doc>
	<doc for="Control.ResumeLayout">
		<overload>
			<para>Resumes normal layout logic.</para>
		</overload>
		<summary>
			<para> Resumes normal layout logic.</para>
		</summary>
		<remarks>
			<para>Calling the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method forces an immediate layout if there
   are any pending layout requests.</para>
			<para>The <see cref="System.Windows.Forms.Control.SuspendLayout"/> and <see cref="System.Windows.Forms.Control.ResumeLayout"/> methods are used in tandem to
suppress multiple <see cref="System.Windows.Forms.Control.Layout"/> events
while you adjust multiple attributes of the control. For example, you would
typically call the <see cref="System.Windows.Forms.Control.SuspendLayout"/> method, then set the <see cref="System.Windows.Forms.Control.Size"/>, <see cref="System.Windows.Forms.Control.Location"/>, <see cref="System.Windows.Forms.Control.Anchor"/>, or <see cref="System.Windows.Forms.Control.Dock"/> properties of the control, and
then call the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method to allow the changes to
take effect.</para>
		</remarks>
		<example>
			<para>The following example adds two buttons to a form. The example transactions 
      the addition of the buttons by using the <see cref="System.Windows.Forms.Control.SuspendLayout"/> and <see cref="System.Windows.Forms.Control.ResumeLayout"/> methods. </para>
			<codelink SampleID="Windows.Forms.Control Members2" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SuspendLayout"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
		<seealso cref="System.Windows.Forms.Control.PerformLayout"/>
	</doc>
	<doc for="Control.SuspendLayout">
		<summary>
			<para>Temporarily suspends the layout logic for the control.</para>
		</summary>
		<remarks>
			<para> The layout logic of the control is suspended
      until the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method is called. </para>
			<para>The <see cref="System.Windows.Forms.Control.SuspendLayout"/> and <see cref="System.Windows.Forms.Control.ResumeLayout"/> methods are used in tandem to
   suppress multiple <see cref="System.Windows.Forms.Control.Layout"/> events while you
   adjust multiple attributes of the control. For example, you would typically call
   the <see cref="System.Windows.Forms.Control.SuspendLayout"/> method, then set the <see cref="System.Windows.Forms.Control.Size"/>, <see cref="System.Windows.Forms.Control.Location"/>, <see cref="System.Windows.Forms.Control.Anchor"/>, or <see cref="System.Windows.Forms.Control.Dock"/>
   properties of the control, and then call the <see cref="System.Windows.Forms.Control.ResumeLayout"/> method to allow the changes to
   take effect.</para>
		</remarks>
		<example>
			<para>The following example adds two buttons to a form. The example transactions the addition of the buttons by using the <see cref="System.Windows.Forms.Control.SuspendLayout"/> and <see cref="System.Windows.Forms.Control.ResumeLayout"/> methods. </para>
			<codelink SampleID="Windows.Forms.Control Members2" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ResumeLayout"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.Tag">
		<summary>
			<para>Gets or sets the object that contains data about the control.</para>
		</summary>
		<value>
			<para>An <see cref="System.Object"/> that contains data about the control. The default is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para> Any type derived from the <see cref="System.Object"/> class can be assigned to this property. If the <see cref="System.Windows.Forms.Control.Tag"/> property is set through
   the Windows Forms designer, only text can be assigned.</para>
			<para>A common use for the <see cref="System.Windows.Forms.Control.Tag"/> property is to store data that is closely
associated with the control. For example, if you have a control that displays
information about a customer you, might store a <see cref="System.Data.DataSet"/> that contains the customer's
order history in that control's <see cref="System.Windows.Forms.Control.Tag"/> property so the data
can be accessed quickly.</para>
		</remarks>
		<example>
			<para>The following example displays a form and stores 
      a <c>Customer</c> object in its
<see cref="System.Windows.Forms.Control.Tag"/> property. This example assumes you have 
   defined a class that derives from <see cref="System.Windows.Forms.Form"/> named <c>CustomerForm</c> and that you have defined a <c>Customer</c>
object.</para>
			<codelink SampleID="Windows.Forms.Control Members2" SnippetID="3"/>
		</example>
		<seealso cref="System.Object"/>
	</doc>
	<doc for="Control.Show">
		<summary>
			<para> Displays the control to the user.</para>
		</summary>
		<remarks>
			<para> Showing the control is equivalent to setting the <see cref="System.Windows.Forms.Control.Visible"/> property to <see langword="true"/> . After the <see cref="System.Windows.Forms.Control.Show"/> method is called, the <see cref="System.Windows.Forms.Control.Visible"/> property returns a value of
<see langword="true"/> until the <see cref="System.Windows.Forms.Control.Hide"/> method is called.</para>
		</remarks>
		<example>
			<para>The following example displays an about dialog box and temporarily draws a blue square on it's surface. This example assumes you have defined a class that derives from <see cref="System.Windows.Forms.Form"/> named <c>AboutDialog</c>.</para>
			<codelink SampleID="Windows.Forms.Control Members2" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
		<seealso cref="System.Windows.Forms.Control.Hide"/>
	</doc>
	<doc for="Control.Focused">
		<summary>
			<para>Gets a value indicating whether the control has input focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control has focus; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      When overriding the <see cref="System.Windows.Forms.Control.Focused"/>
      property in a derived class, use the base class's
   <see cref="System.Windows.Forms.Control.Focused"/>
   property to extend the base implementation. Otherwise, you must provide all the
   implementation.
</note>
		</remarks>
		<example>
			<para>The following example disables a MenuItem if a TextBox does not have focus. 
      This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.TextBox"/> named <c>textBox1</c> and two <see cref="System.Windows.Forms.MenuItem"/>
   objects named <c>menuItemEdit</c>
and <c>menuItemEditInsertCustomerInfo</c>.</para>
			<codelink SampleID="Windows.FOrms.Control Members2" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.CanFocus"/>
		<seealso cref="System.Windows.Forms.Control.Focus"/>
		<seealso cref="System.Windows.Forms.Control.CanSelect"/>
		<seealso cref="System.Windows.Forms.Control.ContainsFocus"/>
	</doc>
	<doc for="Control.CompanyName">
		<summary>
			<para> Gets the name of the company or creator of the application containing the
      control.</para>
		</summary>
		<value>
			<para>The company name or creator of the application containing the control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.CompanyName"/> property is a read-only property.
   In order to change the value of this property, set the <see cref="System.Reflection.AssemblyCompanyAttribute.Company"/> property value of the <see cref="System.Reflection.AssemblyCompanyAttribute"/>. The
   following line of C# code sets the <see cref="System.Windows.Forms.Control.CompanyName"/> property.</para>
			<code lang="C#">[assembly: AssemblyCompany("Microsoft")]
</code>
			<note type="note">
   It is strongly recommended that you provide
   the company name, product name, and product version. Providing this information
   enables the use of Windows Forms features such as <see cref="System.Windows.Forms.Application.UserAppDataPath" qualify="true"/>
   that make it easier to write applications that comply
   with the "Certified for Windows" program. For more information on the Certified
   for Windows program, see http://msdn.microsoft.com/certification.
</note>
		</remarks>
		<example>
			<para>The following example displays information about the
      application in a <see cref="System.Windows.Forms.Label"/> contained by a <see cref="System.Windows.Forms.Form"/>. This code assumes the
      <see cref="System.Windows.Forms.Control.CompanyName"/>, <see cref="System.Windows.Forms.Control.ProductName"/> and <see cref="System.Windows.Forms.Control.ProductVersion"/>
   have been set.</para>
			<codelink SampleID="Windows.Forms.Control Properties3" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.AssemblyCompanyAttribute.Company" qualify="true"/>
		<seealso cref="System.Diagnostics.FileVersionInfo.CompanyName" qualify="true"/>
	</doc>
	<doc for="Control.Height">
		<summary>
			<para>Gets or sets the height of the control.</para>
		</summary>
		<value>
			<para>The height of the control in pixels.</para>
		</value>
		<remarks>
			<para>Changes made to the <see cref="System.Windows.Forms.Control.Height"/> and <see cref="System.Windows.Forms.Control.Top"/> property values cause the
<see cref="System.Windows.Forms.Control.Bottom"/> property value of the control to change.</para>
			<note type="note">
   The minimum
   height for the derived control <see cref="System.Windows.Forms.Splitter"/> is one pixel.
   The default height for the <see cref="System.Windows.Forms.Splitter"/> control is three pixels. Setting the
   height of the <see cref="System.Windows.Forms.Splitter"/> control to a value less than one will
   reset the property value to the default height.
   
</note>
		</remarks>
		<example>
			<para>The following example creates three <see cref="System.Windows.Forms.Button"/> controls on a form and sets their size and location by using the various size-related and location-related properties. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that has a width and height of at least 300 pixels. </para>
			<codelink SampleID="Windows.Forms.Control SizeLocation" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
		<seealso cref="System.Windows.Forms.Control.Width"/>
		<seealso cref="System.Drawing.Size.Height" qualify="true"/>
	</doc>
	<doc for="Control.Left">
		<summary>
			<para>Gets or sets the x-coordinate of a control's left edge in pixels.</para>
		</summary>
		<value>
			<para>The x-coordinate of a control's left edge in pixels.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Left"/> property value is equivalent to
   the <see cref="System.Drawing.Point.X" qualify="true"/> property of the <see cref="System.Windows.Forms.Control.Location"/> property value of the control.</para>
			<para>Changes made to the <see cref="System.Windows.Forms.Control.Width"/> and <see cref="System.Windows.Forms.Control.Left"/> property values cause the <see cref="System.Windows.Forms.Control.Right"/> property value of the control to change.</para>
		</remarks>
		<example>
			<para>The following example creates three <see cref="System.Windows.Forms.Button"/> controls on a form and
   sets their size and location by using the various size-related and location-related
   properties. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that has a width and
   height of at least 300 pixels. </para>
			<codelink SampleID="Windows.Forms.Control SizeLocation" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Point.X" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.Right"/>
	</doc>
	<doc for="Control.ProductName">
		<summary>
			<para> Gets the product name of the assembly containing the control.</para>
		</summary>
		<value>
			<para> The product name of the assembly containing the control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ProductName"/> property is a read-only property. In order
   to change the value of this property, set the <see cref="System.Reflection.AssemblyProductAttribute.Product"/> property value of the <see cref="System.Reflection.AssemblyProductAttribute"/>. The
   following line of C# code sets the <see cref="System.Windows.Forms.Control.ProductName"/> property.</para>
			<code>
[assembly: AssemblyProduct("MyApplication")]
</code>
			<note type="note">
   It is strongly recommended that you provide
   the company name, product name, and product version. Providing this information
   enables the use of Windows Forms features such as <see cref="System.Windows.Forms.Application.UserAppDataPath" qualify="true"/>
   that make it easier to write applications that comply
   with the "Certified for Windows" program. For more information on the Certified
   for Windows program, see http://msdn.microsoft.com/certification.
   
</note>
		</remarks>
		<example>
			<para>The following example displays information about the application in a <see cref="System.Windows.Forms.Label"/> contained by a <see cref="System.Windows.Forms.Form"/>. This code assumes the <see cref="System.Windows.Forms.Control.CompanyName"/>, <see cref="System.Windows.Forms.Control.ProductName"/> and <see cref="System.Windows.Forms.Control.ProductVersion"/>
have been set.</para>
			<codelink SampleID="Windows.Forms.Control Properties3" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.AssemblyProductAttribute.Product" qualify="true"/>
	</doc>
	<doc for="Control.ProductVersion">
		<summary>
			<para> Gets the version of the assembly containing the control.</para>
		</summary>
		<value>
			<para>The file version of the assembly containing the control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.ProductVersion"/> property is a read-only property. In order
   to change the value of this property, set the <see cref="System.Reflection.AssemblyVersionAttribute.Version"/> property value of the <see cref="System.Reflection.AssemblyVersionAttribute"/>. The
   following line of C# code sets the <see cref="System.Windows.Forms.Control.ProductVersion"/> property.</para>
			<code>
[assembly: AssemblyVersion("1.0.1")]
</code>
			<note type="note">
   It is strongly recommended that you provide
   the company name, product name, and product version. Providing this information
   enables the use of Windows Forms features such as <see cref="System.Windows.Forms.Application.UserAppDataPath" qualify="true"/>
   that make it easier to write applications that comply
   with the "Certified for Windows" program. For more information on the Certified
   for Windows program, see http://msdn.microsoft.com/certification.
   
</note>
		</remarks>
		<example>
			<para>The following example displays information about the application in a <see cref="System.Windows.Forms.Label"/> contained by a <see cref="System.Windows.Forms.Form"/>. This code assumes the <see cref="System.Windows.Forms.Control.CompanyName"/>, <see cref="System.Windows.Forms.Control.ProductName"/> and <see cref="System.Windows.Forms.Control.ProductVersion"/>
have been set.</para>
			<codelink SampleID="Windows.Forms.Control Properties3" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.AssemblyVersionAttribute.Version" qualify="true"/>
	</doc>
	<doc for="Control.Top">
		<summary>
			<para>Gets or sets the y-coordinate of the control's top edge in pixels.</para>
		</summary>
		<value>
			<para>The y-coordinate of the control's top edge in pixels.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Top"/> property value is equivalent to
   the <see cref="System.Drawing.Point.Y" qualify="true"/> property of the <see cref="System.Windows.Forms.Control.Location"/> property value of the control.</para>
			<para>Changes made to the <see cref="System.Windows.Forms.Control.Height"/> and <see cref="System.Windows.Forms.Control.Top"/> property values cause the
<see cref="System.Windows.Forms.Control.Bottom"/> property value of the control to change.</para>
		</remarks>
		<example>
			<para>The following example creates three <see cref="System.Windows.Forms.Button"/> controls on a form and
   sets their size and location by using the various size-related and location-related
   properties. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that has a width and
   height of at least 300 pixels. </para>
			<codelink SampleID="Windows.Forms.Control SizeLocation" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Point.Y" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.Bottom"/>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
	</doc>
	<doc for="Control.Width">
		<summary>
			<para> Gets or sets the width of the control.</para>
		</summary>
		<value>
			<para>The width of the control in pixels.</para>
		</value>
		<remarks>
			<para>Changes made to the <see cref="System.Windows.Forms.Control.Width"/> and <see cref="System.Windows.Forms.Control.Left"/> property values
   cause the <see cref="System.Windows.Forms.Control.Right"/> property value of the control to
   change.</para>
		</remarks>
		<example>
			<para>The following example creates three <see cref="System.Windows.Forms.Button"/> controls on a form and sets their size and location by using the various size-related and location-related properties. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that has a width and height of at least 300 pixels. </para>
			<codelink SampleID="Windows.Forms.Control SizeLocation" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
		<seealso cref="System.Windows.Forms.Control.Height"/>
		<seealso cref="System.Drawing.Size.Width" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.SetBounds"/>
	</doc>
	<doc for="Control.Hide">
		<summary>
			<para> Conceals the control from the user.</para>
		</summary>
		<remarks>
			<para> Hiding the control is equivalent to setting the <see cref="System.Windows.Forms.Control.Visible"/> property to <see langword="false"/>. After the <see cref="System.Windows.Forms.Control.Hide"/> method is called, the <see cref="System.Windows.Forms.Control.Visible"/> property returns a value of
<see langword="false"/> until the <see cref="System.Windows.Forms.Control.Show"/> method is called.</para>
		</remarks>
		<example>
			<para>The following example hides a button when the CTRL key is pressed while the 
      button is clicked. This example assumes you have a <see cref="System.Windows.Forms.Button"/>
      named <c>button1</c> on a
<see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Windows.Forms.Control Members4" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
		<seealso cref="System.Windows.Forms.Control.Show"/>
	</doc>
	<doc for="Control.BringToFront">
		<summary>
			<para>Brings the control to the front of the z-order.</para>
		</summary>
		<remarks>
			<para>The control is moved to the front of the z-order. If the
      control is a child of another control, the child control is moved to the front of
      the z-order. <see cref="System.Windows.Forms.Control.BringToFront"/>
      does not make a control a
      top-level control.</para>
		</remarks>
		<example>
			<para>The following example ensures that a <see cref="System.Windows.Forms.Label"/> is visible by calling its <see cref="System.Windows.Forms.Control.BringToFront"/> method. This example assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Panel"/> named <c>panel1</c>, and a <see cref="System.Windows.Forms.Label"/> named <c>label1</c> . </para>
			<codelink SampleID="Windows.Forms.Control Members4" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SendToBack"/>
		<seealso cref="System.Windows.Forms.Control.UpdateZOrder"/>
	</doc>
	<doc for="Control.Contains">
		<summary>
			<para>Retrieves a value indicating whether the specified control is a child of the control.</para>
		</summary>
		<param name="ctl">The <see cref="System.Windows.Forms.Control"/> to evaluate.</param>
		<returns>
			<para><see langword="true"/> if the specified control is a child of the control; otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example ensures that a <see cref="System.Windows.Forms.Label"/> is 
   visible by calling its <see cref="System.Windows.Forms.Control.BringToFront"/> method. This example
   assumes you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Panel"/> named <c>panel1</c>, and a <see cref="System.Windows.Forms.Label"/>
named <c>label1</c> . </para>
			<codelink SampleID="Windows.Forms.Control Members4" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.Contains"/>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
		<seealso cref="System.Windows.Forms.Control.Parent"/>
	</doc>
	<doc for="Control.ModifierKeys">
		<summary>
			<para>Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT)
      is in a pressed state.</para>
		</summary>
		<value>
			<para>A bitwise combination of the <see cref="System.Windows.Forms.Keys"/> values. The default is <see cref="System.Windows.Forms.Keys.None"/> .</para>
		</value>
		<example>
			<para>The following example hides a button when the CTRL key is pressed while the button is clicked. This example assumes you have a <see cref="System.Windows.Forms.Button"/> named <c>button1</c> on a <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Windows.Forms.Control Members4" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Keys"/>
	</doc>
	<doc for="Control.ClientRectangle">
		<summary>
			<para>Gets the rectangle that represents the client area of the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the client area of the control.</para>
		</value>
		<remarks>
			<para>The client area of a control is the bounds of the control, minus the
      nonclient elements such as scroll bars, borders, title bars, and menus.</para>
			<para>Because client coordinates are relative to the
      upper-left corner of the client area of the control, the coordinates of the
      upper-left corner of the rectangle returned by this property are (0,0). You can
      use this property to obtain the size and coordinates of the client area of the
      control for tasks such as drawing on the surface of the control.</para>
			<para>For more information about drawing on controls, see
   <see topic="cpconrenderingwindowsformscontrol"/>.</para>
		</remarks>
		<example>
			<para>The following example enables auto-scrolling for a form, resizes the form,
      and ensures that a button remains visible after the form is resized. This
      example assumes that you have a <see cref="System.Windows.Forms.Form"/> with a <see cref="System.Windows.Forms.Button"/> named <c>button2</c> on it.</para>
			<codelink SampleID="Windows.Forms.Control Member5" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ClientSize"/>
		<seealso cref="System.Windows.Forms.DrawMode"/>
		<keyword term="owner-drawn controls"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.ControlAccessibleObject">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> class.</para>
		</summary>
		<param name="ownerControl">The <see cref="System.Windows.Forms.Control"/> that owns the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/>.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="ownerControl"/> parameter value is <see langword="null"/>.</exception>
		<example>
			<para>The following example creates a check box control that derives from the <see cref="System.Windows.Forms.CheckBox"/> class and creates a custom <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> for the derived class to use. The derived class, <c>MyCheckBox</c>, has an <see cref="System.Windows.Forms.CheckBox.Appearance"/> of <see cref="System.Windows.Forms.Appearance.Button"/> by default so it appears as a toggle button. The derived <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> class, <c>MyCheckBoxControlAccessibleObject</c>, overrides three properties to account for the difference in appearance. </para>
			<codelink SampleID="Windows.Forms.Control.ControlAccessibleObject" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlAccessibleObject"/>
		<seealso cref="System.Windows.Forms.Control.ControlAccessibleObject.Owner"/>
	</doc>
	<doc for="Control.ControlAccessibleObject.Owner">
		<summary>
			<para>Gets the owner of the accessible object. </para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Control"/> that owns the <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> . </para>
		</value>
		<example>
			<para>The following example creates a check box control that derives from the <see cref="System.Windows.Forms.CheckBox"/> class and creates a custom <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> for the derived class to use. The derived class, <c>MyCheckBox</c>, has an <see cref="System.Windows.Forms.CheckBox.Appearance"/> of <see cref="System.Windows.Forms.Appearance.Button"/> by default so it appears as a toggle button. The derived <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> class, <c>MyCheckBoxControlAccessibleObject</c>, overrides three properties to account for the difference in appearance. </para>
			<codelink SampleID="Windows.Forms.Control.ControlAccessibleObject" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.Parent"/>
		<seealso cref="M:System.Windows.Forms.Control.ControlAccessibleObject.#ctor"/>
	</doc>
	<doc for="Control.AccessibleDefaultActionDescription">
		<summary>
			<para>Gets or sets the default action description of the control for use by accessibility client applications.</para>
		</summary>
		<value>
			<para>The default action description of the control for use by accessibility client applications.</para>
		</value>
		<remarks>
			<para>An object's <see cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription"/> property describes the
   object's primary method of manipulation from the user's viewpoint. This property
   should be a verb or a short verb phrase.</para>
			<note type="note">
   Not all objects have default actions, and
   some objects might have a default action that is related to its <see cref="System.Windows.Forms.AccessibleObject.Value" qualify="true"/>
   
   property, such as in the following examples:
</note>
			<list type="bullet"><item>
					<term>      A selected check box has a default action of
      "Uncheck" and a value of "Checked."</term>
				</item>
				<item>
					<term>      A cleared check box has a default action of "Check"
      and a value of "Unchecked."</term>
				</item>
				<item>
					<term>      A button labeled "Print" has a default action of
      "Press," with no value.</term>
				</item>
				<item>
					<term>      A label or a text box control that shows "Printer" has no
      default action, but would have a value of "Printer."</term>
				</item>
			</list>
			<para>For more information about properties of accessible objects, see the Content of Descriptive
   Properties topic in the Active Accessibility section of the MSDN Library.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.AccessibleName"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleRole"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDescription"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.DefaultAction"/>
	</doc>
	<doc for="Control.AccessibleDescription">
		<summary>
			<para>Gets or sets the description of the control used by accessibility client applications.</para>
		</summary>
		<value>
			<para>The description of the control used by accessibility client applications. The default
      is <see langword="null"/> .</para>
		</value>
		<remarks>
			<para>An object's <see cref="System.Windows.Forms.Control.AccessibleDescription"/> property provides a
   textual description about an object's visual appearance. The description is
   primarily used to provide greater context for low-vision or blind users, but can
   also be used for context searching or other applications.</para>
			<para>The <see cref="System.Windows.Forms.Control.AccessibleDescription"/> property is needed if the description is
not obvious, or if it is redundant based on the object's <see cref="System.Windows.Forms.Control.AccessibleName"/>, <see cref="System.Windows.Forms.Control.AccessibleRole"/>, <see cref="System.Windows.Forms.AccessibleObject.State"/>, and <see cref="System.Windows.Forms.AccessibleObject.Value"/> properties. For example, a button with
"OK" would not need additional information, but a button that shows a picture of
a cactus would. The <see cref="System.Windows.Forms.Control.AccessibleName"/>, and <see cref="System.Windows.Forms.Control.AccessibleRole"/> (and perhaps <see cref="System.Windows.Forms.AccessibleObject.Help"/>) properties for the cactus button would describe
its purpose, but the <see cref="System.Windows.Forms.Control.AccessibleDescription"/>
property would convey information
that is less tangible, such as "A button that shows a picture of a
cactus." </para>
			<para>For more information about properties of accessible objects, see the Content of Descriptive
   Properties topic in the Active Accessibility section of the MSDN Library.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of a <see cref="System.Windows.Forms.CheckBox"/>
derived class, <c>MyCheckBox</c>,
assigns it an <see cref="System.Drawing.Image"/> to its <see cref="System.Windows.Forms.ButtonBase.Image"/> property and sets the
<see cref="System.Windows.Forms.Control.AccessibleName"/> and <see cref="System.Windows.Forms.Control.AccessibleDescription"/> properties since the <see cref="System.Windows.Forms.Control.Text"/> property is <see langword="null"/>. This 
example assumes you have a <see cref="System.Windows.Forms.Form"/> named <c>MyForm</c>.</para>
			<codelink SampleID="Windows.Forms.Control.ControlAccessibleObject" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.AccessibleName"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleRole"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Description"/>
	</doc>
	<doc for="Control.AccessibleName">
		<summary>
			<para>Gets or sets the name of the control used by accessibility client applications.</para>
		</summary>
		<value>
			<para>The name of the control used by accessibility client applications. The default is <see langword="null"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.AccessibleName"/> property is a label that briefly describes
   and identifies the object within its container, such as the text in a <see cref="System.Windows.Forms.Button"/>,
   the name of a <see cref="System.Windows.Forms.MenuItem"/>, or a label displayed next to
   a <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<para>For more information about properties of accessible objects, see the Content of Descriptive
   Properties topic in the Active Accessibility section of the MSDN Library.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of a <see cref="System.Windows.Forms.CheckBox"/>
derived class, <c>MyCheckBox</c>,
assigns it an <see cref="System.Drawing.Image"/> to its <see cref="System.Windows.Forms.ButtonBase.Image"/> property and sets the
<see cref="System.Windows.Forms.Control.AccessibleName"/> and 
<see cref="System.Windows.Forms.Control.AccessibleDescription"/> properties since the <see cref="System.Windows.Forms.Control.Text"/> property is <see langword="null"/>. This 
example assumes you have a <see cref="System.Windows.Forms.Form"/> named <c>MyForm</c>.</para>
			<codelink SampleID="Windows.Forms.Control.ControlAccessibleObject" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.AccessibleDescription"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleRole"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Name"/>
	</doc>
	<doc for="Control.AccessibleRole">
		<summary>
			<para>Gets or sets the accessible role of the control</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.AccessibleRole"/> of the control. The default is
<see cref="System.Windows.Forms.AccessibleRole.Default"/> .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException"> The value assigned is not one of the <see cref="System.Windows.Forms.AccessibleRole"/> values. </exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.AccessibleRole"/> property describes what kind of user
   interface element an object is. If the control's role cannot be determined, the
<see cref="System.Windows.Forms.Control.AccessibleRole"/> property is set to <see cref="System.Windows.Forms.AccessibleRole.Default" qualify="true"/>.</para>
			<para>For more information about properties of accessible objects, see the Content of Descriptive
   Properties topic in the Active Accessibility section of the MSDN Library.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleRole"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDescription"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleName"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>
		<seealso cref="System.Windows.Forms.AccessibleObject.Role"/>
	</doc>
	<doc for="Control.MousePosition">
		<summary>
			<para>Gets the position of the mouse cursor in screen coordinates.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Point"/> that contains the coordinates of the mouse
   cursor relative to the upper-left corner of the screen.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.MousePosition"/> property returns a <see cref="System.Drawing.Point"/> that
   represents the mouse cursor position at the time the property was
   referenced.</para>
		</remarks>
		<example>
			<para>The following example puts a <see cref="System.Windows.Forms.TreeNode"/> label into an editble state when the user
   presses ALT-E while the mouse cursor is over the tree node. After the user
   is done editing the label, the labels cannot be edited again until the ALT-E key
   combination is pressed again. This example assumes you have a <see cref="System.Windows.Forms.TreeView"/>
   on a <see cref="System.Windows.Forms.Form"/>. The tree view should also have at least
   one <see cref="System.Windows.Forms.TreeNode"/> in its <see cref="System.Windows.Forms.TreeView.Nodes"/> collection.</para>
			<codelink SampleID="Windows.Forms.Control Members4" SnippetID="3"/>
		</example>
		<seealso cref="System.Drawing.Point"/>
	</doc>
	<doc for="Control.CreateGraphics">
		<overload>
			<para>Creates the <see cref="System.Drawing.Graphics"/> object for the control.</para>
		</overload>
		<summary>
			<para>Creates the <see cref="System.Drawing.Graphics"/> object for the control.</para>
		</summary>
		<returns>
			<para>The <see cref="System.Drawing.Graphics"/> object for the control.</para>
		</returns>
		<remarks>
			<para> The returned <see cref="System.Drawing.Graphics"/> object
   must be disposed through a call to its <see cref="System.Drawing.Graphics.Dispose"/> method when
   it is no longer needed. The <see cref="System.Drawing.Graphics"/>
   object
   is only valid for the duration of the current window's message.</para>
			<note type="note">
   There are four methods on a control
   that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you
   should use one of the invoke methods to marshal the call to the control's
   thread.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.SafeSubWindows" qualify="true"/></permission>
		<example>
			<para>The following example resizes the specified control so the control
      will accommodate its formatted text. The formatted text is the <see cref="System.Windows.Forms.Control.Text"/> property with the control's assigned
   <see cref="System.Windows.Forms.Control.Font"/>
   applied to the text. The <c>AutoSizeControl</c> method in this
example also has a <c>textPadding</c> parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the <see cref="System.Drawing.ContentAlignment.MiddleCenter" qualify="true"/> value, if your control supports it.</para>
			<codelink SampleID="Windows.Forms.Control Member5" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Graphics"/>
	</doc>
	<doc for="Control.TextChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Text"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Text"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> 
displaying currency data. The example converts the text to a decimal number
and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if
the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive.
This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnTextChanged"/>
		<seealso cref="System.Windows.Forms.Control.Text"/>
	</doc>
	<doc for="Control.AccessibilityObject">
		<summary>
			<para>Gets the <see cref="System.Windows.Forms.AccessibleObject"/> assigned to the
   control.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.AccessibleObject"/> assigned to the control.</para>
		</value>
		<remarks>
			<para>To control the instance returned from this method, override the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method.</para>
			<para>If no <see cref="System.Windows.Forms.AccessibleObject"/> is currently assigned to the control, a new
instance of one is created.</para>
			<note type="note">
   To get or set the <see cref="System.Windows.Forms.Control.AccessibilityObject"/> property, you must add a reference to the <see langword="Accessibility"/> assembly installed with the .NET Framework.
</note>
			<para>For more information about accessible objects, see the Active Accessibility
   section of the MSDN Library.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/>
		<seealso cref="System.Windows.Forms.Control.ControlAccessibleObject"/>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
	</doc>
	<doc for="Control.ControlAccessibleObject">
		<summary>
			<para> Provides information about a control that can be used by an
      accessibility application.</para>
		</summary>
		<remarks>
			<para> Windows Forms has accessibility support built in, and provides information about your application that
      allows it to work with accessibility client applications. Examples of accessibility
      client applications are: screen enlarger and reviewer utilities,
      voice input utilities, on-screen keyboards, alternative input devices, and keyboard
      enhancement utilities. There are instances when you will want
      to provide additional information to accessibility client applications. There are two
      ways of providing this additional information. To provide limited accessibility
      information for existing controls, set the control's <see cref="System.Windows.Forms.Control.AccessibleName"/>, <see cref="System.Windows.Forms.Control.AccessibleDescription"/> , <see cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>, and <see cref="System.Windows.Forms.Control.AccessibleRole"/> property values, which will
      be reported to accessibility client applications. Alternatively, if you require more
      accessibility information to be included with your control, you
      can write your own class deriving from the <see cref="System.Windows.Forms.AccessibleObject"/> or <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/>
      classes. For example, if you are writing your own control that is not derived
      from the common controls or you require such operations as hit testing within
      your control, you should create a <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> for your control by calling the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/>
      method.</para>
			<note type="note">
      If you override the <see cref="System.Windows.Forms.AccessibleObject.GetChild" qualify="true"/> method, you must also
      override the <see cref="System.Windows.Forms.AccessibleObject.GetChildCount" qualify="true"/> method.
      
   </note>
			<note type="note">
      To get or set the <see cref="System.Windows.Forms.Control.AccessibilityObject"/> property, you must add a reference to the <see langword="Accessibility"/> assembly installed with the .NET Framework.
   </note>
			<para>For more information about accessible objects, see the Active Accessibility
      section of the MSDN Library.</para>
		</remarks>
		<example>
			<para>The following example creates a check box control that derives from the
   <see cref="System.Windows.Forms.CheckBox"/> class and creates a custom <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> for the derived class to use. The derived
      class, <c>MyCheckBox</c>, has an
<see cref="System.Windows.Forms.CheckBox.Appearance"/> of <see cref="System.Windows.Forms.Appearance.Button"/> by default so it appears as a toggle 
   button. The derived <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> class, <c>MyCheckBoxControlAccessibleObject</c>,
overrides three properties to account for the difference in appearance. </para>
			<codelink SampleID="Windows.Forms.Control.ControlAccessibleObject" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleName" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDescription" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleDefaultActionDescription" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.AccessibleRole" qualify="true"/>
	</doc>
	<doc for="Control.Cursor">
		<summary>
			<para> Gets or sets the cursor that is displayed when the mouse pointer
      is over the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Cursor"/>
object that represents the cursor to display when the mouse pointer is over the control.</para>
		</value>
		<remarks>
			<para>Assign a <see cref="System.Windows.Forms.Cursor"/> to the <see cref="System.Windows.Forms.Control.Cursor"/> property of the control to change the 
   cursor displayed when the mouse pointer is over the control. To temporarily
   change the mouse cursor for all controls on your application set the
<see cref="System.Windows.Forms.Cursor.Current" qualify="true"/> property. Typically you would set 
   the <see cref="System.Windows.Forms.Cursor.Current" qualify="true"/> property to a wait cursor when populating
   a <see cref="System.Windows.Forms.ComboBox"/> or saving or loading
   a file.</para>
			<para>The <see cref="System.Windows.Forms.Control.Cursor"/> property is an ambient property. An
ambient property is a control property that, if not set, is retrieved from the
parent control. For example, a <see cref="System.Windows.Forms.Button"/> will have the same <see cref="System.Windows.Forms.Control.BackColor"/> as its parent <see cref="System.Windows.Forms.Form"/> by default. For more
information about ambient properties, see the <see cref="System.Windows.Forms.AmbientProperties"/> class or the <see cref="System.Windows.Forms.Control"/> class
overview.</para>
			<note type="inheritinfo">
   When overriding the <see cref="System.Windows.Forms.Control.Cursor"/>
   property in a derived class, use the base class's
<see cref="System.Windows.Forms.Control.Cursor"/>
property to extend the base implementation. Otherwise, you must provide all the
implementation. You are not required to
override both the <see langword="get"/> and <see langword="set"/>
methods of the <see cref="System.Windows.Forms.Control.Cursor"/> property; you can override only
one if needed.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for safe subwindows to set this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.SafeSubWindows" qualify="true"/></permission>
		<example>
			<para>The following example fills a <see cref="System.Windows.Forms.ComboBox"/>
with the user's available logical drives. The example also sets the combo box's
<see cref="System.Windows.Forms.Cursor"/> property so the <see cref="System.Windows.Forms.Cursors.Hand" qualify="true"/> cursor is displayed when the mouse pointer 
is over the drop-down button. This code assumes you have a <see cref="System.Windows.Forms.Form"/> with
a <see cref="System.Windows.Forms.ComboBox"/> on it.</para>
			<codelink SampleID="Windows.Forms.Control Properties2" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Cursor"/>
		<seealso cref="System.Windows.Forms.Cursors"/>
	</doc>
	<doc for="Control.Bounds">
		<summary>
			<para>Gets or sets the size and location of the control including its nonclient elements.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that
   represents the size and
   location of the control including its nonclient elements.</para>
		</value>
		<remarks>
			<para>The bounds of the control includes the nonclient 
      elements such as scroll bars, borders, title bars, and menus. The <see cref="System.Windows.Forms.Control.SetBoundsCore"/> method is called to set the <see cref="System.Windows.Forms.Control.Bounds"/> property. The <see cref="System.Windows.Forms.Control.Bounds"/> property is not always changed through its
   <see langword="set"/> method so you should override the <see cref="System.Windows.Forms.Control.SetBoundsCore"/> method 
      to ensure that your code
      is executed when the <see cref="System.Windows.Forms.Control.Bounds"/>
      
      property is set.</para>
		</remarks>
		<example>
			<para>The following example creates three <see cref="System.Windows.Forms.Button"/> controls on a form and
   sets their size and location by using the various size-related and location-related
   properties. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that has a width and
   height of at least 300 pixels. </para>
			<codelink SampleID="Windows.Forms.Control SizeLocation" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Top"/>
		<seealso cref="System.Windows.Forms.Control.Left"/>
		<seealso cref="System.Windows.Forms.Control.Height"/>
		<seealso cref="System.Windows.Forms.Control.Width"/>
	</doc>
	<doc for="Control.ClientSize">
		<summary>
			<para>Gets or sets the height and width of the client area of the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> that represents the dimensions of the client area of the control.</para>
		</value>
		<remarks>
			<para>The client area of a control is the bounds of the
      control, minus the nonclient elements such as scroll bars, borders, title bars,
      and menus. The <see cref="System.Windows.Forms.Control.SetClientSizeCore"/> method is called to set the <see cref="System.Windows.Forms.Control.ClientSize"/> property. The <see cref="System.Windows.Forms.Control.ClientSize"/> property is not always changed through its
   <see langword="set"/> method so you should override the <see cref="System.Windows.Forms.Control.SetClientSizeCore"/> method to ensure that your code is
      executed when the <see cref="System.Windows.Forms.Control.ClientSize"/>
      property is set.</para>
			<para> The <see cref="System.Drawing.Size.Width" qualify="true"/> and <see cref="System.Drawing.Size.Height" qualify="true"/> properties
   represent the width and height of the client area of the control. You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control. </para>
			<para>For more information about drawing on controls, see
<see topic="cpconrenderingwindowsformscontrol"/>.</para>
		</remarks>
		<example>
			<para>The following example resizes the specified control so the control
      will accommodate its formatted text. The formatted text is the <see cref="System.Windows.Forms.Control.Text"/> property with the control's assigned
   <see cref="System.Windows.Forms.Control.Font"/>
   applied to the text. The <c>AutoSizeControl</c> method in this
example also has a <c>textPadding</c> parameter that represents the padding to
apply to all edges of the control. To make the padding appear equal, align the
text with the <see cref="System.Drawing.ContentAlignment.MiddleCenter" qualify="true"/> value, if your control supports it.</para>
			<codelink SampleID="Windows.Forms.Control Member5" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ClientRectangle"/>
		<seealso cref="System.Windows.Forms.DrawMode"/>
		<keyword term="owner-drawn controls"/>
	</doc>
	<doc for="Control.SetBoundsCore">
		<summary>
			<para> Performs the work of setting the
      specified bounds of this control.</para>
		</summary>
		<param name="x">The new <see cref="System.Windows.Forms.Control.Left"/> property value of the control.</param>
		<param name="y">The new <see cref="System.Windows.Forms.Control.Right"/> property value of the control.</param>
		<param name="width">The new <see cref="System.Windows.Forms.Control.Width"/> property value of the control.</param>
		<param name="height">The new <see cref="System.Windows.Forms.Control.Height"/> property value of the control.</param>
		<param name="specified"><para>A bitwise combination of the <see cref="System.Windows.Forms.BoundsSpecified"/> values.</para></param>
		<remarks>
			<para>Typically, the parameters that correspond to the bounds
      not included in the <paramref name="specified"/> parameter are passed in with their
      current values. For example, the <see cref="System.Windows.Forms.Control.Height"/>, <see cref="System.Windows.Forms.Control.Width"/>, or the <see cref="System.Drawing.Point.X"/> or <see cref="System.Drawing.Point.Y"/> properties of the <see cref="System.Windows.Forms.Control.Location"/> property can be passed in with a
      reference to the current instance of the control.
      However all values
      passed in
      are honored and applied to the control. </para>
			<para>The <paramref name="boundsSpecified"/> parameter represents the elements of the
   controls <see cref="System.Windows.Forms.Control.Bounds"/> changed by your application. For
   example, if you change the <see cref="System.Windows.Forms.Control.Size"/> of the control, the
<paramref name="boundsSpecified"/> parameter value is <see cref="System.Windows.Forms.BoundsSpecified.Size" qualify="true"/>. However, if the <see cref="System.Windows.Forms.Control.Size"/> is adjusted in response to 
   the <see cref="System.Windows.Forms.Control.Dock"/> property being set, the
<paramref name="boundsSpecified"/> parameter value is <see cref="System.Windows.Forms.BoundsSpecified.None" qualify="true"/>.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.SetBoundsCore"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.Control.SetBoundsCore"/> method to force the bounds of the
   control to change. Derived classes can add size restrictions to the <see cref="System.Windows.Forms.Control.SetBoundsCore"/> method.
   
</note>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Windows.Forms.Control.SetBoundsCore"/> method to ensure that the control remains a fixed size.
   This example assumes you have a class that is either directly or indirectly derived from the
<see cref="System.Windows.Forms.Control"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_Methods" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SetBounds"/>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
		<seealso cref="System.Windows.Forms.Control.Layout"/>
	</doc>
	<doc for="Control.SetClientSizeCore">
		<summary>
			<para> Sets the size of the client area of the control.</para>
		</summary>
		<param name="x">The client area width, in pixels.</param>
		<param name="y">The client area height, in pixels.</param>
		<remarks>
			<para>The client area starts at the (0, 0) location and extends to the (<paramref name="x"/>,
<paramref name="y"/>) location. </para>
			<para> Typically, you do not set the <see cref="System.Windows.Forms.Control.ClientSize"/> of
the control.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.SetClientSizeCore"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Control.SetClientSizeCore"/> method
   so that the <see cref="System.Windows.Forms.Control.ClientSize"/>
   property is adjusted.
</note>
			<para>For more information about drawing on controls, see
<see topic="cpconrenderingwindowsformscontrol"/>.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Windows.Forms.Control.SetClientSizeCore"/> method 
   to
   ensure that the control remains square. This example assumes
   you have a class that is either directly or indirectly derived from the <see cref="System.Windows.Forms.Control"/>
   class.</para>
			<codelink SampleID="Windows.Forms.Control_Methods" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ClientSize"/>
	</doc>
	<doc for="Control.RaiseDragEvent">
		<nodoc/>
		<summary>
			<para> Raises the appropriate drag event.</para>
		</summary>
		<param name="key">The event to raise. </param>
		<param name="e">A <see cref="System.Windows.Forms.DragEventArgs"/> that contains the event data. </param>
		<seealso cref="System.Windows.Forms.Control.RaiseKeyEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaiseMouseEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaisePaintEvent"/>
	</doc>
	<doc for="Control.RaisePaintEvent">
		<nodoc/>
		<summary>
			<para> Raises the appropriate paint event.</para>
		</summary>
		<param name="key">The event to raise. </param>
		<param name="e">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
		<seealso cref="System.Windows.Forms.Control.RaiseDragEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaiseKeyEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaiseMouseEvent"/>
	</doc>
	<doc for="Control.RaiseKeyEvent">
		<nodoc/>
		<summary>
			<para> Raises the appropriate key event.</para>
		</summary>
		<param name="key">The event to raise. </param>
		<param name="e">A <see cref="System.Windows.Forms.KeyEventArgs"/> that contains the event data. </param>
		<seealso cref="System.Windows.Forms.Control.RaiseDragEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaiseMouseEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaisePaintEvent"/>
	</doc>
	<doc for="Control.RaiseMouseEvent">
		<nodoc/>
		<summary>
			<para> Raises the appropriate mouse event.</para>
		</summary>
		<param name="key">The event to raise. </param>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
		<seealso cref="System.Windows.Forms.Control.RaiseDragEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaiseKeyEvent"/>
		<seealso cref="System.Windows.Forms.Control.RaisePaintEvent"/>
	</doc>
	<doc for="Control.OnTextChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.TextChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnTextChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnTextChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnTextChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class. </para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.TextChanged"/>
	</doc>
	<doc for="Control.ScaleCore">
		<summary>
			<para>Performs the work of scaling the entire control and any child controls.</para>
		</summary>
		<param name="dx">The ratio by which to scale the control horizontally. </param>
		<param name="dy">The ratio by which to scale the control vertically. </param>
		<remarks>
			<para> This <see cref="System.Windows.Forms.Control.ScaleCore"/> method uses the <paramref name="dx"/> and <paramref name="dy"/>
parameter values to scale both the height and width of the control independantly. To keep the height and
width of the control in proportion to their current size, use the same value for
the <paramref name="dx"/> and <paramref name="dy"/> parameters, or call the version of the <see cref="System.Windows.Forms.Control.Scale"/> method that takes one
parameter.</para>
			<para>You would typically override this method to change the scaling behavior of
   the control.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.ScaleCore"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Control.ScaleCore"/> method so that the
   control is resized properly.
</note>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Windows.Forms.Control.ScaleCore"/> method to ensure that the derived control and its
   child controls are scaled. This example assumes you have a class that is
   either directly or indirectly derived from the <see cref="System.Windows.Forms.Control"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_Methods" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Scale"/>
	</doc>
	<doc for="Control.OnBindingContextChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.BindingContextChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnBindingContextChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnBindingContextChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnBindingContextChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern <see langword="On"/><SpecialLocalizableItem kind="UIElement">&lt;PropertyName&gt;</SpecialLocalizableItem><see langword="Changed"/> that raise the corresponding event when the property value changes. You can create an event-raising method similar to the following example to raise the appropriate event when the the corresponding property value changes. </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BindingContextChanged"/>
		<seealso cref="System.Windows.Forms.Control.BindingContext"/>
	</doc>
	<doc for="Control.OnVisibleChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.VisibleChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnVisibleChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnVisibleChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnVisibleChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.VisibleChanged"/>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
		<seealso cref="System.Windows.Forms.Control.Show"/>
		<seealso cref="System.Windows.Forms.Control.Hide"/>
	</doc>
	<doc for="Control.OnBackColorChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.BackColorChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnBackColorChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnBackColorChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnBackColorChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BackColorChanged"/>
		<seealso cref="System.Windows.Forms.Control.BackColor"/>
	</doc>
	<doc for="Control.OnBackgroundImageChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.BackgroundImageChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnBackgroundImageChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnBackgroundImageChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnBackgroundImageChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BackgroundImageChanged"/>
		<seealso cref="System.Windows.Forms.Control.BackgroundImage"/>
	</doc>
	<doc for="Control.OnCausesValidationChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.CausesValidationChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnCausesValidationChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnCausesValidationChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnCausesValidationChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.CausesValidationChanged"/>
		<seealso cref="System.Windows.Forms.Control.CausesValidation"/>
	</doc>
	<doc for="Control.OnContextMenuChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ContextMenuChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnContextMenuChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnContextMenuChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnContextMenuChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ContextMenuChanged"/>
		<seealso cref="System.Windows.Forms.Control.ContextMenu"/>
	</doc>
	<doc for="Control.OnCursorChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.CursorChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnCursorChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnCursorChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnCursorChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.CursorChanged"/>
		<seealso cref="System.Windows.Forms.Control.Cursor"/>
	</doc>
	<doc for="Control.OnDockChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.DockChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnDockChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnDockChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnDockChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.DockChanged"/>
		<seealso cref="System.Windows.Forms.Control.Dock"/>
	</doc>
	<doc for="Control.OnEnabledChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.EnabledChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnEnabledChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnEnabledChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnEnabledChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.EnabledChanged"/>
		<seealso cref="System.Windows.Forms.Control.Enabled"/>
	</doc>
	<doc for="Control.OnFontChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.FontChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnFontChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnFontChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnFontChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.FontChanged"/>
	</doc>
	<doc for="Control.OnForeColorChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ForeColorChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnForeColorChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnForeColorChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnForeColorChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ForeColorChanged"/>
	</doc>
	<doc for="Control.OnRightToLeftChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.RightToLeftChanged"/>event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnRightToLeftChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnRightToLeftChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnRightToLeftChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.RightToLeftChanged"/>
	</doc>
	<doc for="Control.OnParentBackColorChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.BackColorChanged"/> event when the <see cref="System.Windows.Forms.Control.BackColor"/> property value of the control's container
   changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentBackColorChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentBackColorChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentBackColorChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BackColorChanged"/>
	</doc>
	<doc for="Control.OnParentBackgroundImageChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.BackgroundImageChanged"/> event
   when the <see cref="System.Windows.Forms.Control.BackgroundImage"/> property value of the control's container
   changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentBackgroundImageChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentBackgroundImageChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentBackgroundImageChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BackgroundImageChanged"/>
	</doc>
	<doc for="Control.OnParentBindingContextChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.BindingContextChanged"/> event when
   the <see cref="System.Windows.Forms.Control.BindingContext"/> property value of the control's container
   changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentBindingContextChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentBindingContextChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentBindingContextChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BindingContextChanged"/>
	</doc>
	<doc for="Control.OnParentEnabledChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.EnabledChanged"/> event when the <see cref="System.Windows.Forms.Control.Enabled"/>
property value of the control's container changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentEnabledChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentEnabledChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentEnabledChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.EnabledChanged"/>
	</doc>
	<doc for="Control.OnParentFontChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.FontChanged"/> event when the <see cref="System.Windows.Forms.Control.Font"/>
property value of the control's container changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentFontChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentFontChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentFontChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.FontChanged"/>
	</doc>
	<doc for="Control.OnParentForeColorChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ForeColorChanged"/> event when the <see cref="System.Windows.Forms.Control.ForeColor"/> property value of the control's container
   changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentForeColorChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentForeColorChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentForeColorChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ForeColorChanged"/>
	</doc>
	<doc for="Control.OnParentRightToLeftChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.RightToLeftChanged"/> event when the <see cref="System.Windows.Forms.Control.RightToLeft"/> property value of the control's container
   changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentRightToLeftChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentRightToLeftChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentRightToLeftChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.RightToLeftChanged"/>
	</doc>
	<doc for="Control.OnParentVisibleChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.VisibleChanged"/> event when the <see cref="System.Windows.Forms.Control.Visible"/>
property value of the control's container changes.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentVisibleChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentVisibleChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentVisibleChanged"/> method so that registered delegates
   receive the event.
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.VisibleChanged"/>
	</doc>
	<doc for="Control.OnTabIndexChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.TabIndexChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnTabIndexChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnTabIndexChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnTabIndexChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.TabIndexChanged"/>
	</doc>
	<doc for="Control.OnTabStopChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.TabStopChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnTabStopChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnTabStopChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnTabStopChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.TabStopChanged"/>
	</doc>
	<doc for="Control.OnParentChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ParentChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnParentChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnParentChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnParentChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ParentChanged"/>
	</doc>
	<doc for="Control.OnLocationChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.LocationChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnLocationChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnLocationChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnLocationChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.LocationChanged"/>
		<seealso cref="System.Windows.Forms.Control.Location"/>
	</doc>
	<doc for="Control.OnImeModeChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ImeModeChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnImeModeChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnImeModeChanged"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Control.OnImeModeChanged"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ImeModeChanged"/>
		<seealso cref="System.Windows.Forms.Control.ImeMode"/>
	</doc>
	<doc for="Control.OnSizeChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.SizeChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnSizeChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnSizeChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnSizeChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The example below is an event-raising method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/>
class has several methods with the name pattern <see langword="On"/>PropertyName<see langword="Changed"/> that raise the corresponding
PropertyName<see langword="Changed"/>
event when the PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> derived class displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a class that derives from the <see cref="System.Windows.Forms.TextBox"/> class.</para>
			<codelink SampleID="Windows.Forms.Control_OnPropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SizeChanged"/>
	</doc>
	<doc for="Control.StyleChanged">
		<summary>
			<para>Occurs when the control style changes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.StyleChanged"/> event occurs when <see cref="System.Windows.Forms.ControlStyles"/> flags have been added or changed.</para>
			<para> This event is raised if the cotrol style is changed
   by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnStyleChanged"/>
		<seealso cref="System.Windows.Forms.Control.SetStyle"/>
		<seealso cref="System.Windows.Forms.ControlStyles"/>
	</doc>
	<doc for="Control.SystemColorsChanged">
		<summary>
			<para> Occurs when the system colors change.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Drawing.SystemColors"/> is changed
   by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.OnSystemColorsChanged"/>
		<seealso cref="System.Drawing.SystemColors"/>
	</doc>
	<doc for="Control.BackColorChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Control.BackColor"/> property changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.BackColor"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> 
property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name
pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BackColor"/>
		<seealso cref="System.Windows.Forms.Control.OnBackColorChanged"/>
		<seealso cref="System.Drawing.Color"/>
	</doc>
	<doc for="Control.BackgroundImageChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Control.BackgroundImage"/> property changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.BackgroundImage"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.BackgroundImage"/>
		<seealso cref="System.Windows.Forms.Control.OnBackgroundImageChanged"/>
		<seealso cref="System.Drawing.Image"/>
	</doc>
	<doc for="Control.CausesValidationChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Control.CausesValidation"/> property changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.CausesValidation"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnCausesValidationChanged"/>
		<seealso cref="System.Windows.Forms.Control.CausesValidation"/>
	</doc>
	<doc for="Control.ContextMenuChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Control.ContextMenu"/> property changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.ContextMenu"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnContextMenuChanged"/>
		<seealso cref="System.Windows.Forms.Control.ContextMenu" qualify="true"/>
		<seealso cref="System.Windows.Forms.ContextMenu"/>
	</doc>
	<doc for="Control.DockChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Control.Dock"/> property changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Dock"/>
property is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnDockChanged"/>
		<seealso cref="System.Windows.Forms.Control.Dock"/>
		<seealso cref="System.Windows.Forms.DockStyle"/>
	</doc>
	<doc for="Control.EnabledChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Enabled"/> property value has changed.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Enabled"/>
property is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnEnabledChanged"/>
		<seealso cref="System.Windows.Forms.Control.Enabled"/>
	</doc>
	<doc for="Control.FontChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Font"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Font"/> property
   is changed by either a programmatic modification or through interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnFontChanged"/>
		<seealso cref="System.Windows.Forms.Control.Font" qualify="true"/>
		<seealso cref="System.Drawing.Font"/>
	</doc>
	<doc for="Control.ForeColorChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.ForeColor"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.ForeColor"/> property is changed by
   either a programmatic modification or through interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnForeColorChanged"/>
		<seealso cref="System.Windows.Forms.Control.ForeColor"/>
		<seealso cref="System.Drawing.Color"/>
	</doc>
	<doc for="Control.LocationChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Location"/> property value has changed.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Location"/> property
   is changed by either a programmatic modification or through interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnLocationChanged"/>
		<seealso cref="System.Windows.Forms.Control.Location"/>
	</doc>
	<doc for="Control.RightToLeftChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.RightToLeft"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.RightToLeft"/> property is changed
   by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnRightToLeftChanged"/>
		<seealso cref="System.Windows.Forms.Control.RightToLeft"/>
	</doc>
	<doc for="Control.SizeChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Size"/> property value changes.</para>
		</summary>
		<remarks>
			<para>It is preferable to use the <see cref="System.Windows.Forms.Control.Layout"/> event to handle custom layouts.
   The <see cref="System.Windows.Forms.Control.Layout"/> event is raised in response to
<see cref="System.Windows.Forms.Control.Resize"/> events, but also in other 
   conditions when layout might need to be applied.</para>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Size"/>
property is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnSizeChanged"/>
		<seealso cref="System.Windows.Forms.Control.Size"/>
		<seealso cref="System.Windows.Forms.Control.Resize"/>
	</doc>
	<doc for="Control.TabIndexChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.TabIndex"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.TabIndex"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnTabIndexChanged"/>
		<seealso cref="System.Windows.Forms.Control.TabIndex"/>
	</doc>
	<doc for="Control.TabStopChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.TabStop"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.TabStop"/>
property is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnTabStopChanged"/>
		<seealso cref="System.Windows.Forms.Control.TabStop"/>
	</doc>
	<doc for="Control.VisibleChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Visible"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Visible"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnVisibleChanged"/>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
	</doc>
	<doc for="Control.ImeModeChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.ImeMode"/> property has changed.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.ImeMode"/> property
   is changed by either a programmatic modification or through interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnImeModeChanged"/>
		<seealso cref="System.Windows.Forms.Control.ImeMode" qualify="true"/>
		<seealso cref="System.Windows.Forms.ImeMode" qualify="true"/>
	</doc>
	<doc for="Control.ParentChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.Control.Parent"/> property value changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Parent"/> property
   is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The example below is an event handling method that is executed when the <see cref="System.Windows.Forms.Control.Text"/> property value changes. The <see cref="System.Windows.Forms.Control"/> class has several methods with the name pattern PropertyName<see langword="Changed"/> that are raised when the corresponding PropertyName value changes(PropertyName represents the name of the corresponding property). </para>
			<para>The following example changes the <see cref="System.Windows.Forms.Control.ForeColor"/> of a <see cref="System.Windows.Forms.TextBox"/> displaying currency data. The example converts the text to a decimal number and changes the <see cref="System.Windows.Forms.Control.ForeColor"/> to <see cref="System.Drawing.Color.Red" qualify="true"/> if the number is negative and to <see cref="System.Drawing.Color.Black" qualify="true"/> if the number is positive. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.TextBox"/>.</para>
			<codelink SampleID="Windows.Forms.Control_PropertyChangedEvents" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnParentChanged"/>
		<seealso cref="System.Windows.Forms.Control.Parent"/>
	</doc>
	<doc for="Control.OnStyleChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.StyleChanged"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnStyleChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnStyleChanged"/> in a derived class, be sure to 
   call the base class's <see cref="System.Windows.Forms.Control.OnStyleChanged"/> method so that registered
   delegates receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.StyleChanged"/>
		<seealso cref="System.Windows.Forms.Control.GetStyle"/>
		<seealso cref="System.Windows.Forms.Control.SetStyle"/>
		<seealso cref="System.Windows.Forms.ControlStyles"/>
	</doc>
	<doc for="Control.GetStyle">
		<summary>
			<para> Retrieves the value of the specified control style bit for the control.</para>
		</summary>
		<param name="flag">The <see cref="System.Windows.Forms.ControlStyles"/> bit to return the value from. </param>
		<returns>
			<para><see langword="true"/> if the specified
   control style bit is set to <see langword="true"/>
   ; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>Control style bit flags are used to categorize supported behavior. A control
      can enable a style by calling the <see cref="System.Windows.Forms.Control.SetStyle"/> method and passing in the
      appropriate <see cref="System.Windows.Forms.ControlStyles"/> bit and the Boolean value to set the bit to.
      To determine the value assigned to a specified <see cref="System.Windows.Forms.ControlStyles"/> bit, use the <see cref="System.Windows.Forms.Control.GetStyle"/> method and pass in the <see cref="System.Windows.Forms.ControlStyles"/> member to evaluate.</para>
		</remarks>
		<example>
			<para>The following example returns the value of the double-buffering related style 
      bits for a <see cref="System.Windows.Forms.Form"/>. This example
      returns <see langword="true"/> only if all the style bits are set to
   <see langword="true"/>.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SetStyle"/>
		<seealso cref="System.Windows.Forms.ControlStyles"/>
	</doc>
	<doc for="Control.Scale">
		<overload>
			<para> Scales the control and any child controls. </para>
		</overload>
		<summary>
			<para> Scales the control and any child controls to the specified ratio.</para>
		</summary>
		<param name="ratio">The ratio by which to scale the control horizontally and vertically.</param>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.Control.Scale"/> method uses the <paramref name="ratio"/> parameter value to scale both the height and width of the control. To scale the height and width of the
   control independantly, use the version of the <see cref="System.Windows.Forms.Control.Scale"/> method that takes two parameters.</para>
			<para>The <see cref="System.Windows.Forms.Control.ScaleCore"/> method is called by
the <see cref="System.Windows.Forms.Control.Scale"/> methods
to scale the control. You should override the <see cref="System.Windows.Forms.Control.ScaleCore"/> method to ensure that your code is
executed when either of the <see cref="System.Windows.Forms.Control.Scale"/> methods is called.</para>
		</remarks>
		<example>
			<para>The following example resizes the child controls of a 
   <see cref="System.Windows.Forms.Form"/> using the <see cref="System.Windows.Forms.Control.Scale"/> 
   method. This
   example scales the height and width of each control to 1.5 times its current
   size.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6 " SnippetID="5"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ScaleCore"/>
	</doc>
	<doc for="Control.Scale1">
		<summary>
			<para> Scales the control and any child controls by the specified horizontal and vertical ratios.</para>
		</summary>
		<param name="dx">The ratio by which to scale the control horizontally.</param>
		<param name="dy">The ratio by which to scale the control vertically.</param>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.Control.Scale"/> method uses the <paramref name="dx"/> and
<paramref name="dy"/> parameter values to scale the height and width of the control
   independently. To keep the height and width of the control in proportion to their current size, use
   the version of the <see cref="System.Windows.Forms.Control.Scale"/> method that takes one parameter.</para>
			<para>The <see cref="System.Windows.Forms.Control.ScaleCore"/> method is called by the <see cref="System.Windows.Forms.Control.Scale"/> methods
to scale the control. You should override the <see cref="System.Windows.Forms.Control.ScaleCore"/> method to ensure that your code is
executed when either of the <see cref="System.Windows.Forms.Control.Scale"/> methods is called.</para>
		</remarks>
		<example>
			<para>The following example resizes the child controls of a 
   <see cref="System.Windows.Forms.Form"/> using the 
   <see cref="System.Windows.Forms.Control.Scale"/> method. This example scales the height of each control to 1.5 times its current size while the current width of each control is maintained.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6 " SnippetID="6"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ScaleCore"/>
	</doc>
	<doc for="Control.SetStyle">
		<summary>
			<para>Sets the specified style bit to the specified value.</para>
		</summary>
		<param name="flag">The <see cref="System.Windows.Forms.ControlStyles"/> bit to set. </param>
		<param name="value"><para><see langword="true"/> to apply the specified style to the control; otherwise, <see langword="false"/>.</para></param>
		<remarks>
			<para>Control style bit flags are used to categorize supported behavior. A control
      can enable a style by calling the <see cref="System.Windows.Forms.Control.SetStyle"/> method and passing in the
      appropriate <see cref="System.Windows.Forms.ControlStyles"/> bit (or bits) and the Boolean value to set the bit(s) to.
      To determine the value assigned to a specified <see cref="System.Windows.Forms.ControlStyles"/> bit, use the <see cref="System.Windows.Forms.Control.GetStyle"/> method and pass in the <see cref="System.Windows.Forms.ControlStyles"/> member to evaluate.</para>
			<note type="caution">
      Setting the control
      style bits can substantially change the behavior of the control. Review
      the <see cref="System.Windows.Forms.ControlStyles"/> enumeration documentation
      to understand the effects of changing the control style bits before calling
      the <see cref="System.Windows.Forms.Control.SetStyle"/> method.
      
   </note>
		</remarks>
		<example>
			<para>The following example enables double-buffering on a
   <see cref="System.Windows.Forms.Form"/> and updates the
      styles to reflect the changes. </para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.GetStyle"/>
		<seealso cref="System.Windows.Forms.ControlStyles"/>
	</doc>
	<doc for="Control.UpdateStyles">
		<summary>
			<para> Forces the assigned
      styles to be reapplied to the control.</para>
		</summary>
		<remarks>
			<para>This method calls the <see cref="System.Windows.Forms.Control.CreateParams"/> method to get the styles to apply.
   The styles assigned to the <see cref="System.Windows.Forms.CreateParams.Style"/> and <see cref="System.Windows.Forms.CreateParams.ExStyle"/> properties of the <see cref="System.Windows.Forms.CreateParams"/> object assigned to the control's <see cref="System.Windows.Forms.Control.CreateParams"/> property are reapplied. The control
   is repainted to reflect the style changes
   if necessary.</para>
			<para>The <see cref="System.Windows.Forms.Control.UpdateStyles"/> method has no effect if the
<see cref="System.Windows.Forms.Control.IsHandleCreated"/> property value is 
<see langword="false"/>.</para>
		</remarks>
		<example>
			<para>The following example enables double-buffering on a
   <see cref="System.Windows.Forms.Form"/> and updates the
      styles to reflect the changes. </para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.CreateParams"/>
	</doc>
	<doc for="Control.CanFocus">
		<summary>
			<para>Gets a value indicating whether the control can receive focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control can receive focus; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> In order for a control to receive input focus,
      the control must have a handle assigned to it, and the <see cref="System.Windows.Forms.Control.Visible"/> and <see cref="System.Windows.Forms.Control.Enabled"/> properties must both be set to
   <see langword="true"/> .</para>
		</remarks>
		<example>
			<para> The following example sets focus to the specified <see cref="System.Windows.Forms.Control"/>, if it can receive focus.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Enabled"/>
		<seealso cref="System.Windows.Forms.Control.Handle"/>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
		<seealso cref="System.Windows.Forms.Control.Focus"/>
		<seealso cref="System.Windows.Forms.Control.Focused"/>
		<seealso cref="System.Windows.Forms.Control.CanSelect"/>
	</doc>
	<doc for="Control.CanSelect">
		<summary>
			<para>Gets a value indicating whether the control can be selected.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control can be selected; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property returns <see langword="true"/> if the control has <see cref="System.Windows.Forms.ControlStyles.Selectable" qualify="true"/>
set to <see langword="true"/>, is contained in another control, and all
its parent controls are both visible and enabled.</para>
			<para> The Windows Forms controls in the following list are not selectable and
   will return a value of <see langword="false"/> for the <see cref="System.Windows.Forms.Control.CanSelect"/> property. Controls
   derived from these controls are also not selectable.</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Windows.Forms.Panel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.GroupBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.PictureBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ProgressBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Splitter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Label"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.LinkLabel"/> (when there is no link present in the
      control)</term>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example selects the specified <see cref="System.Windows.Forms.Control"/>, if it is selectable.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Select"/>
		<seealso cref="System.Windows.Forms.Control.Enabled"/>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
		<seealso cref="System.Windows.Forms.Control.Focus"/>
		<seealso cref="System.Windows.Forms.Control.CanFocus"/>
	</doc>
	<doc for="Control.Focus">
		<summary>
			<para> Sets input focus to the control.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the input focus request was successful; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Focus"/> method returns <see langword="true"/> if the control successfully received input
   focus. The control can have the input focus while not displaying any visual
   cues of having the focus. This behavior is primarily observed by the nonselectable
   controls listed below, or any controls
   derived from them.</para>
			<para>A control can be selected and receive input focus if all the following are <see langword="true"/>: its <see cref="System.Windows.Forms.ControlStyles.Selectable" qualify="true"/> style bit is set to
<see langword="true"/>, it is contained 
in another control, and all its parent controls are both visible and
enabled.</para>
			<para> The Windows Forms controls in the following list
   are not selectable. Controls derived from these controls are also not selectable.</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Windows.Forms.Panel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.GroupBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.PictureBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ProgressBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Splitter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Label"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.LinkLabel"/> (when there is no link present in
      the control)</term>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<para>The following example sets focus to the specified <see cref="System.Windows.Forms.Control"/>, if it can receive focus.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.CanFocus"/>
		<seealso cref="System.Windows.Forms.Control.ContainsFocus"/>
		<seealso cref="System.Windows.Forms.Control.Focused"/>
		<seealso cref="System.Windows.Forms.Control.CanSelect"/>
	</doc>
	<doc for="Control.Select">
		<overload>
			<para>Activates a control.</para>
		</overload>
		<summary>
			<para>Activates the control.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Select"/> method activates the control if the control's <see cref="System.Windows.Forms.ControlStyles.Selectable" qualify="true"/> style bit is set to
<see langword="true"/>, it is contained in another control, and all 
   its parent controls are both visible and enabled.</para>
			<para> The Windows Forms controls in the following
   list are not selectable. Controls derived from controls in the list will
   also not be selectable.</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Windows.Forms.Label"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Panel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.GroupBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.PictureBox"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.ProgressBar"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Splitter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.LinkLabel"/> (when there is no link present in
      the control)</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example selects the specified <see cref="System.Windows.Forms.Control"/>, if it is selectable.</para>
			<codelink SampleID="Windows.Forms.ControlMembers6" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Focus"/>
		<seealso cref="System.Windows.Forms.Control.SelectNextControl"/>
	</doc>
	<doc for="Control.BeginInvoke">
		<overload>
			<para>Executes a delegate asynchronously on the thread that the control's underlying handle was created
      on.</para>
		</overload>
		<summary>
			<para> Executes the specified delegate asynchronously on the thread that the
      control's underlying handle was created on.</para>
		</summary>
		<param name="method">A delegate to a method that takes no parameters. </param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> object that represents the result of the <see cref="System.Windows.Forms.Control.BeginInvoke"/> operation.</para>
		</returns>
		<remarks>
			<para>The delegate is called asynchronously, and this method returns
      immediately. You can call this method from any thread, even the thread that
      owns the control's handle. If the control's handle does not exist yet, this method
      searches up the control's parent chain until it finds a control or form that does
      have a window handle. If no appropriate handle can be found, <see cref="System.Windows.Forms.Control.BeginInvoke"/> will throw an exception. Exceptions
      within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</para>
			<note type="note">
      The <see cref="System.Windows.Forms.Control.BeginInvoke"/> method calls the specified delegate back on a
      different thread pool thread. You should not block a thread pool thread for any
      length of time.
      
   </note>
			<note type="note">
      There are four methods on a control
      that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you
      should use one of the invoke methods to marshal the call to the control's
      thread.
      
   </note>
		</remarks>
		<seealso cref="System.IAsyncResult"/>
		<seealso cref="System.Windows.Forms.Control.EndInvoke"/>
		<seealso cref="System.Windows.Forms.Control.Invoke"/>
		<seealso cref="System.Windows.Forms.Control.CreateGraphics"/>
		<seealso cref="System.Windows.Forms.Control.InvokeRequired"/>
	</doc>
	<doc for="Control.BeginInvoke1">
		<summary>
			<para>Executes the specified delegate asynchronously with the specified arguments, on the thread that the
      control's underlying handle was created on.</para>
		</summary>
		<param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args"/> parameter. </param>
		<param name="args">An array of objects to pass as arguments to the given method. This can be null if no arguments are needed. </param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> object that represents the result of the <see cref="System.Windows.Forms.Control.BeginInvoke"/> operation.</para>
		</returns>
		<remarks>
			<para>The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control's handle. If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, <see cref="System.Windows.Forms.Control.BeginInvoke"/> will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.Control.BeginInvoke"/> method calls the specified delegate back on a
   different thread pool thread. You should not block a thread pool thread for any
   length of time.
</note>
			<note type="note">
   There are four methods on a control that are safe to call from any thread: <see cref="System.Windows.Forms.Control.Invoke"/>, <see cref="System.Windows.Forms.Control.BeginInvoke"/>, <see cref="System.Windows.Forms.Control.EndInvoke"/>, and <see cref="System.Windows.Forms.Control.CreateGraphics"/> . For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.
</note>
		</remarks>
		<seealso cref="System.IAsyncResult"/>
		<seealso cref="System.Windows.Forms.Control.EndInvoke"/>
		<seealso cref="System.Windows.Forms.Control.Invoke"/>
		<seealso cref="System.Windows.Forms.Control.CreateGraphics"/>
		<seealso cref="System.Windows.Forms.Control.InvokeRequired"/>
	</doc>
	<doc for="Control.ControlCollection.GetChildIndex1">
		<summary>
			<para>Retrieves the index of the specified child control within the control collection, and optionally
      raises an exception if the specified control is not within the control
      collection.</para>
		</summary>
		<param name="child">The <see cref="System.Windows.Forms.Control"/> to search for in the control collection.</param>
		<param name="throwException"><see langword="true"/> to throw an exception if the <see cref="System.Windows.Forms.Control"/> specified in the <paramref name="child"/> parameter is not a control in the <see cref="System.Windows.Forms.Control.ControlCollection"/> ; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>A zero-based index value that represents the location of the specified child control within the control collection; otherwise -1 if the specified <see cref="System.Windows.Forms.Control"/> is not found in the <see cref="System.Windows.Forms.Control.ControlCollection"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="child "/><see cref="System.Windows.Forms.Control"/> is not in the <see cref="System.Windows.Forms.Control.ControlCollection"/>, and the <paramref name="throwException"/> parameter value is <see langword="true"/>.</exception>
		<remarks>
			<para>The control with an index value of zero is at the top of the z-order, and higher
      numbers are closer to the bottom. A return value of -1 is returned only when the <paramref name="throwException"/> parameter
      is <see langword="false"/> .</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.BringToFront"/>
	</doc>
	<doc for="Control.ControlCollection.SetChildIndex">
		<summary>
			<para> Sets the index of
      the
      specified child control in the collection to the specified index
      value.</para>
		</summary>
		<param name="child">The <paramref name="child"/>
			<see cref="System.Windows.Forms.Control"/> to search for.</param>
		<param name="newIndex">The new index value of the control.</param>
		<exception cref="System.ArgumentException">The <paramref name="child"/> control is not in the <see cref="System.Windows.Forms.Control.ControlCollection"/> .</exception>
		<remarks>
			<para>When <see cref="System.Windows.Forms.Control.ControlCollection.SetChildIndex"/> is called, the <see cref="System.Windows.Forms.Control"/>
referred to by the <paramref name="child"/> parameter is moved to the position specified
by <paramref name="newIndex"/> and the other <see cref="System.Windows.Forms.Control"/> references in the <see cref="System.Windows.Forms.Control.ControlCollection"/> are reordered to accommodate the move. The control with an index value of zero is at the top of the z-order, and
higher numbers are closer to the bottom.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.ControlCollection.GetChildIndex"/>
	</doc><doc for="Control.HelpRequested">
		<summary>
			<para>Occurs when the user requests help for a control.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.HelpRequested"/> event is commonly raised when the user
   presses the F1 key or an associated context-sensitive help button is
   clicked.</para>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates handling
      the <see cref="System.Windows.Forms.Control.HelpRequested"/> event
      to display custom Help content on a form containing four address fields. The
   <see cref="System.Windows.Forms.Control.HelpRequested"/> event is
      raised either by pressing the F1 key with the focus in an address field, or by
      the using the context-sensitive Help button and clicking the Help cursor on an
      address field. The <see cref="System.Windows.Forms.HelpEventArgs.Handled"/> property is set to true to indicate that the
   <see langword="HelpRequested"/> event is handled. The
      example also demonstrates storing the Help text in the <see cref="System.Windows.Forms.Control.Tag" qualify="true"/> property.</para>
			<codelink SampleID="System.Windows.Forms.HelpEventHandler" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnHelpRequested"/>
		<seealso cref="System.Windows.Forms.HelpProvider"/>
		<seealso cref="System.Windows.Forms.Help"/>
	</doc>
	<doc for="Control.CursorChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Control.Cursor"/> property changes.</para>
		</summary>
		<remarks>
			<para> This event is raised if the <see cref="System.Windows.Forms.Control.Cursor"/>
property is changed by either a programmatic modification or user interaction.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates changing the mouse
      cursor using the <see cref="System.Windows.Forms.Control.Cursor" qualify="true"/> property, the <see cref="System.Windows.Forms.Cursor"/>
      class, and the <see cref="System.Windows.Forms.Cursors"/> class. The example creates a form that
      contains a <see cref="System.Windows.Forms.ComboBox"/> control, a <see cref="System.Windows.Forms.Panel"/> control, and a <see cref="System.Windows.Forms.ListView"/>
      control. The <see cref="System.Windows.Forms.ComboBox"/> contains all cursors provided by the
      <see cref="System.Windows.Forms.Cursors"/> class. When the user selects a mouse
      cursor in the <see cref="System.Windows.Forms.ComboBox"/>, the <see cref="System.Windows.Forms.Control.Cursor" qualify="true"/> property is set to the selected cursor,
      which updates the cursor for the <see cref="System.Windows.Forms.Panel"/>. The <see cref="System.Windows.Forms.ListView"/> is updated every time the
      <see cref="System.Windows.Forms.Control.CursorChanged" qualify="true"/> event occurs.
      </para>
			<codelink SampleID="System.Windows.Forms.Cursors" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnCursorChanged"/>
		<seealso cref="System.Windows.Forms.Control.Cursor" qualify="true"/>
		<seealso cref="System.Windows.Forms.Cursor"/>
	</doc>
	<doc for="Control.MouseDown">
		<summary>
			<para>Occurs when the mouse pointer is over the control and a mouse button is
      pressed.</para>
		</summary>
		<remarks>
			<para>Mouse events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the 
   appropriate event. However, if the user interaction is within the client
   area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseDown"/>
	</doc>
	<doc for="Control.MouseEnter">
		<summary>
			<para> Occurs when the mouse pointer enters the control.</para>
		</summary>
		<remarks>
			<para>Mouse events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the 
   appropriate event. However, if the user interaction is within the client
   area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseEnter"/>
	</doc>
	<doc for="Control.MouseHover">
		<summary>
			<para> Occurs when the mouse pointer hovers over the control.</para>
		</summary>
		<remarks>
			<para>Mouse events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the 
   appropriate event. However, if the user interaction is within the client
   area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseHover"/>
	</doc>
	<doc for="Control.MouseLeave">
		<summary>
			<para> Occurs when the mouse pointer leaves the control.</para>
		</summary>
		<remarks>
			<para>Mouse events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the 
   appropriate event. However, if the user interaction is within the client area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseLeave"/>
	</doc>
	<doc for="Control.MouseMove">
		<summary>
			<para> Occurs when the mouse pointer is moved over the control.</para>
		</summary>
		<remarks>
			<para>Mouse events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the 
   appropriate event. However, if the user interaction is within the client area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseMove"/>
	</doc>
	<doc for="Control.MouseUp">
		<summary>
			<para>Occurs when the mouse pointer is over the control and a mouse button is released.</para>
		</summary>
		<remarks>
			<para>Mouse events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the 
   appropriate event. However, if the user interaction is within the client area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseUp"/>
	</doc>
	<doc for="Control.MouseWheel">
		<summary>
			<para> Occurs when the mouse wheel moves while the control has focus.</para>
		</summary>
		<remarks>
			<para>When handling the <see cref="System.Windows.Forms.Control.MouseWheel"/> event it is important to follow
   the user interface (UI) standards associated with the mouse wheel. The
<see cref="System.Windows.Forms.MouseEventArgs.Delta" qualify="true"/> property value indicates 
   the amount the mouse wheel has been moved. The UI should scroll when the
   accumulated delta is plus or minus 120. The UI should scroll the number of logical
   lines returned by the <see cref="System.Windows.Forms.SystemInformation.MouseWheelScrollLines" qualify="true"/> property for every delta value reached. You can
   also scroll more smoothly in smaller that 120 unit increments, however the ratio
   should remain constant, that is <see cref="System.Windows.Forms.SystemInformation.MouseWheelScrollLines " qualify="true"/> lines scrolled per 120 delta units of
   wheel movement. </para>
			<para>For more information about handling mouse wheel messages, see the
<see langword="WM_MOUSEWHEEL"/> 
message documentation in the Windows Platform SDK
reference located in the MSDN library. </para>
			<para>Mouse events occur in the following order: </para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseEnter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseMove"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseHover"/>/ <see cref="System.Windows.Forms.Control.MouseDown"/>/ <see cref="System.Windows.Forms.Control.MouseWheel"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseUp"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.MouseLeave"/></term>
				</item>
			</list>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para> The following example demonstrates using different mouse
      events to draw the path of the mouse on a <see cref="System.Windows.Forms.Panel"/>. A line segment is added
      to the <see cref="System.Drawing.Drawing2D.GraphicsPath"/> for each <see cref="System.Windows.Forms.Control.MouseMove"/> and <see cref="System.Windows.Forms.Control.MouseDown"/> events that occur. To update the graphics,
      the <see cref="System.Windows.Forms.Control.Invalidate"/> method is called for the <see cref="System.Windows.Forms.Panel"/> on
      each <see langword="MouseDown"/> and <see langword="MouseUp"/> event. In addition,
      the graphic path is scrolled up or down when the <see cref="System.Windows.Forms.Control.MouseWheel"/> event occurs. Additional mouse events,
      like <see cref="System.Windows.Forms.Control.MouseHover"/>, are identified on screen as well. Also
      displayed on the screen is additional information about the mouse from
      the <see cref="System.Windows.Forms.SystemInformation"/> class.
      </para>
			<codelink SampleID="System.Windows.Forms.MouseEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMouseWheel"/>
	</doc>
	<doc for="Control.AccessibilityNotifyClients">
		<summary>
			<para>Notifies the accessibility client applications of the specified <see cref="System.Windows.Forms.AccessibleEvents"/> for the
   specified child control.</para>
		</summary>
		<param name="accEvent">The <see cref="System.Windows.Forms.AccessibleEvents"/> object to notify the accessibility client applications of.</param>
		<param name="childID">The child <see cref="System.Windows.Forms.Control"/> to notify of the accessible event.</param>
		<remarks>
			<para>You must call the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients" qualify="true"/> method for
   each <see cref="System.Windows.Forms.AccessibleEvents"/> object the accessibility client
   applications are to be notified of. The <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method is
   typically called when a property is set or from within an event handler. For
   example, you might call the <see cref="System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients"/> method
   and pass in <see cref="System.Windows.Forms.AccessibleEvents.Hide" qualify="true"/> from within the event
   handler for the <see cref="System.Windows.Forms.Control.VisibleChanged" qualify="true"/>
   event. </para>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates calling  the <see cref="System.Windows.Forms.Control.AccessibilityNotifyClients"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="5"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleEvents"/>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
	</doc>
	<doc for="Control.CreateAccessibilityInstance">
		<summary>
			<para> Creates a new accessibility object for the control.</para>
		</summary>
		<returns>
			<para> A new <see cref="System.Windows.Forms.AccessibleObject"/> for the
   control.</para>
		</returns>
		<remarks>
			<para>If you do not explicitly call the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method, it will be called when the <see cref="System.Windows.Forms.Control.AccessibilityObject"/> property is referenced.</para>
			<note type="note">
   To get or set the <see cref="System.Windows.Forms.Control.AccessibilityObject"/> property, you must add a reference to the <see langword="Accessibility"/> assembly installed with the .NET Framework.
</note>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> in a derived class, you should not
   call the base class's <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates overriding the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="2"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlAccessibleObject"/>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
	</doc>
	<doc for="Control.QueryAccessibilityHelp">
		<summary>
			<para> Occurs when <see cref="System.Windows.Forms.AccessibleObject"/> is providing help to
   accessibility applications.</para>
		</summary>
		<remarks>
			<para> You should use the <see cref="System.Windows.Forms.HelpProvider"/> class to allow users to invoke help on
   your accessible object by pressing the F1 key. Using the <see cref="System.Windows.Forms.HelpProvider"/> provides you with complete
   information in the <see cref="System.Windows.Forms.QueryAccessibilityHelpEventArgs"/> object.For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the creation of an
      accessibility-aware chart control, using the <see cref="System.Windows.Forms.AccessibleObject"/> and <see cref="System.Windows.Forms.Control.ControlAccessibleObject"/> classes to expose accessible information.
      The control plots two curves along with a legend. The <c>ChartControlAccessibleObject</c> class, which derives
   from <see langword="ControlAccessibleObject"/>, is used in the <see cref="System.Windows.Forms.Control.CreateAccessibilityInstance"/> method to provide custom accessible
   information for the chart control. Since the chart legend is not an actual
<see cref="System.Windows.Forms.Control"/>-based control, but instead is drawn by the 
   chart control, it does not any built-in accessible information. Because of this,
   the <c>ChartControlAccessibleObject</c> class overrides the <see cref="System.Windows.Forms.AccessibleObject.GetChild"/> method to return the <c>CurveLegendAccessibleObject</c> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.</para>
			<para>This code excerpt demonstrates handling the <see cref="System.Windows.Forms.Control.QueryAccessibilityHelp"/> event. See the <see cref="System.Windows.Forms.AccessibleObject"/> class overview for the complete code example. </para>
			<codelink SampleID="System.Windows.Forms.AccessibleObject" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.AccessibleObject.GetHelpTopic"/>
	</doc>
	<doc for="Control.DoDragDrop">
		<summary>
			<para> Begins a drag-and-drop operation.</para>
		</summary>
		<param name="data">The data to drag.</param>
		<param name="allowedEffects">One of the <see cref="System.Windows.Forms.DragDropEffects"/> values.</param>
		<returns>
			<para>A value from the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration that represents
   the final effect that was performed during the drag-and-drop operation.</para>
		</returns>
		<remarks>
			<para>The <paramref name="allowedEffects"/> parameter determines which
   drag operations can occur. If the drag operation needs to interoperate with
   applications in another process, data should either be a base managed class
   (<see cref="System.String"/>, <see cref="System.Drawing.Bitmap"/>, or
<see cref="System.Drawing.Imaging.Metafile"/>), or an object that 
   implements <see cref="System.Runtime.Serialization.ISerializable"/> or <see cref="System.Windows.Forms.IDataObject"/>.</para>
			<para>The following describes how and when events related to drag-and-drop
   operations are raised.</para>
			<para>The <see cref="System.Windows.Forms.Control.DoDragDrop"/> method determines the control
under the current cursor location. It then checks to see if the control is a
valid drop target.</para>
			<para>If the control is a valid drop target, the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the
drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.</para>
			<para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. </para>
			<list type="bullet"><item>
					<term>
      If the user moves out of a window, the <see cref="System.Windows.Forms.Control.DragLeave"/> event
      is raised.</term>
				</item>
				<item>
					<term>
      If the mouse enters another control, the <see cref="System.Windows.Forms.Control.DragEnter"/> for
      that control is raised.</term>
				</item>
				<item>
					<term>
      If the mouse moves but stays within the same control, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised.</term>
				</item>
			</list>
			<para>If there is a change in the keyboard or mouse button state, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised and determines
whether to continue the drag, to drop the data, or to cancel the operation based
on the value of the <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> property of the event's
<see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> 
.</para>
			<list type="bullet"><item>
					<term>
      If the value is <see cref="System.Windows.Forms.DragAction.Continue" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised to continue the
      operation and the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the new
      effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.
         <note type="note">
         The <see cref="System.Windows.Forms.Control.DragOver"/> and <see cref="System.Windows.Forms.Control.GiveFeedback"/> events are paired so that as the
         mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.
         
         </note></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/>, the drop effect value
      is returned to the source, so the source application can perform the appropriate
      operation on the source data; for example, cut the data if the operation was a move.</para></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised. </para></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="1"/>
			<para>The following example shows how to use the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration to specify how data
should be transferred between the controls involved in a drag-and-drop operation. This
example assumes that your form includes a <see cref="System.Windows.Forms.RichTextBox"/> control and a <see cref="System.Windows.Forms.Label"/>
control and that the <see cref="System.Windows.Forms.Label"/> control is
populated with a list of valid file names.
When the user drags a file name onto the <see cref="System.Windows.Forms.RichTextBox"/> control, the
control's <see cref="System.Windows.Forms.Control.DragEnter"/>
event is raised. Within the event handler, the <see cref="System.Windows.Forms.DragEventArgs"/> object's <see cref="System.Windows.Forms.DragEventArgs.Effect"/> property is initialized
to <see cref="System.Windows.Forms.DragDropEffects"/> to indicate that the data referenced by the
file path should be copied to the <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
			<codelink SampleID="RichTextDragDrop" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.AllowDrop"/>
		<seealso cref="System.Windows.Forms.Control.DragDrop"/>
	</doc>
	<doc for="Control.DragOver">
		<summary>
			<para> Occurs when an object is dragged over the control's bounds.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.DragOver"/> event is raised when the mouse cursor
   moves withing the bounds of the control during a drag-and-drop operation.</para>
			<para>The following describes how and when events related to drag-and-drop
   operations are raised.</para>
			<para>The <see cref="System.Windows.Forms.Control.DoDragDrop"/> method determines the control
under the current cursor location. It then checks to see if the control is a
valid drop target.</para>
			<para>If the control is a valid drop target, the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the
drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.</para>
			<para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. </para>
			<list type="bullet"><item>
					<term>      If the user moves out of a window, the <see cref="System.Windows.Forms.Control.DragLeave"/>
event is raised.</term>
				</item>
				<item>
					<term>      If the mouse enters another control, the <see cref="System.Windows.Forms.Control.DragEnter"/> for
   that control is raised.</term>
				</item>
				<item>
					<term>      If the mouse moves but stays within the same control, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised.</term>
				</item>
			</list>
			<para>If there is a change in the keyboard or mouse button state, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised and determines
whether to continue the drag, to drop the data, or to cancel the operation based
on the value of the <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> property of the event's
<see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> 
.</para>
			<list type="bullet"><item>
					<term>      If the value is <see cref="System.Windows.Forms.DragAction.Continue" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised to continue the
   operation and the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the new
   effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.
      <note type="note">
      The <see cref="System.Windows.Forms.Control.DragOver"/> and <see cref="System.Windows.Forms.Control.GiveFeedback"/> events are paired so that as the
      mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.
      
      </note></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/>, the drop effect value
   is returned to the source, so the source application can perform the appropriate
   operation on the source data; for example, cut the data if the operation was a move.</para></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised. </para></term>
				</item>
			</list>
			<note type="note">
   The <see cref="System.Windows.Forms.DragEventArgs.X"/> and <see cref="System.Windows.Forms.DragEventArgs.Y"/> properties of the <see cref="System.Windows.Forms.DragEventArgs"/> are in screen
   coordinates, not client coordinates. The following line of C# code converts the
   properties to a client <see cref="System.Drawing.Point"/>:
      <para><c>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</c>
				</para>
			</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.Control.DragOver"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="4"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnDragOver"/>
	</doc>
	<doc for="Control.DragLeave">
		<summary>
			<para> Occurs when an object is dragged out of
      the control's bounds.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised when the
   user drags the cursor out of the control or the user cancels the current
   drag-and-drop operation.</para>
			<para>The following describes how and when events related to drag-and-drop
   operations are raised.</para>
			<para>The <see cref="System.Windows.Forms.Control.DoDragDrop"/> method determines the control
under the current cursor location. It then checks to see if the control is a
valid drop target.</para>
			<para>If the control is a valid drop target, the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the
drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.</para>
			<para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. </para>
			<list type="bullet"><item>
					<term>      If the user moves out of a window, the <see cref="System.Windows.Forms.Control.DragLeave"/> event
   is raised.</term>
				</item>
				<item>
					<term>      If the mouse enters another control, the <see cref="System.Windows.Forms.Control.DragEnter"/> for
   that control is raised.</term>
				</item>
				<item>
					<term>      If the mouse moves but stays within the same control, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised.</term>
				</item>
			</list>
			<para>If there is a change in the keyboard or mouse button state, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised and determines
whether to continue the drag, to drop the data, or to cancel the operation based
on the value of the <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> property of the event's
<see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> 
.</para>
			<list type="bullet"><item>
					<term>      If the value is <see cref="System.Windows.Forms.DragAction.Continue" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised to continue the
   operation and the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the new
   effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.
      <note type="note">
      The <see cref="System.Windows.Forms.Control.DragOver"/> and <see cref="System.Windows.Forms.Control.GiveFeedback"/> events are paired so that as the
      mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.
      
      </note></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/>, the drop effect value
   is returned to the source, so the source application can perform the appropriate
   operation on the source data; for example, cut the data if the operation was a move.</para></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised. </para></term>
				</item>
			</list>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.Control.DragLeave"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="8"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnDragLeave"/>
	</doc>
	<doc for="Control.DragEnter">
		<summary>
			<para>Occurs when an object is dragged into the control's bounds.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.DragEnter"/> event is raised when the user first drags the
   mouse cursor over the control during a drag-and-drop operation.</para>
			<para>The following describes how and when events related to drag-and-drop
   operations are raised.</para>
			<para>The <see cref="System.Windows.Forms.Control.DoDragDrop"/> method determines the control
under the current cursor location. It then checks to see if the control is a
valid drop target.</para>
			<para>If the control is a valid drop target, the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the
drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.</para>
			<para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. </para>
			<list type="bullet"><item>
					<term>      If the user moves out of a window, the <see cref="System.Windows.Forms.Control.DragLeave"/>
event is raised.</term>
				</item>
				<item>
					<term>      If the mouse enters another control, the <see cref="System.Windows.Forms.Control.DragEnter"/> for
   that control is raised.</term>
				</item>
				<item>
					<term>      If the mouse moves but stays within the same control, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised.</term>
				</item>
			</list>
			<para>If there is a change in the keyboard or mouse button state, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised and determines
whether to continue the drag, to drop the data, or to cancel the operation based
on the value of the <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> property of the event's
<see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> 
.</para>
			<list type="bullet"><item>
					<term>      If the value is <see cref="System.Windows.Forms.DragAction.Continue" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised to continue the
   operation and the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the new
   effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.
      <note type="note">
      The <see cref="System.Windows.Forms.Control.DragOver"/> and <see cref="System.Windows.Forms.Control.GiveFeedback"/> events are paired so that as the
      mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.
      
      </note></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/>, the drop effect value
   is returned to the source, so the source application can perform the appropriate
   operation on the source data; for example, cut the data if the operation was a move.</para></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised. </para></term>
				</item>
			</list>
			<note type="note">
   The <see cref="System.Windows.Forms.DragEventArgs.X"/> and <see cref="System.Windows.Forms.DragEventArgs.Y"/> properties of the <see cref="System.Windows.Forms.DragEventArgs"/> are in screen
   coordinates, not client coordinates. The following line of C# code converts the
   properties to a client <see cref="System.Drawing.Point"/>:
   
      <para><c>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</c>
				</para>
			</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.Control.DragEnter"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="7"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnDragEnter"/>
	</doc>
	<doc for="Control.DragDrop">
		<summary>
			<para>Occurs when a drag-and-drop operation is completed.</para>
		</summary>
		<remarks>
			<note type="note">
      The <see cref="System.Windows.Forms.DragEventArgs.X"/> and <see cref="System.Windows.Forms.DragEventArgs.Y"/> properties of the <see cref="System.Windows.Forms.DragEventArgs"/> are in screen
      coordinates, not client coordinates. The following line of C# code converts the
      properties to a client <see cref="System.Drawing.Point"/>:
      
         <para><c>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</c></para>
			</note>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.Control.DragDrop"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="5"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnDragDrop"/>
	</doc>
	<doc for="Control.GiveFeedback">
		<summary>
			<para>Occurs during a drag operation.</para>
		</summary>
		<remarks>
			<para>      The <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised when a
   drag-and-drop operation is started.
   The <see cref="System.Windows.Forms.Control.GiveFeedback"/> event allows the source
   of a drag event to modify the appearance of the mouse pointer in order to give
   the user visual feedback during a drag-and-drop operation.</para>
			<para>The following describes how and when events related to drag-and-drop
   operations are raised.</para>
			<para>The <see cref="System.Windows.Forms.Control.DoDragDrop"/> method determines the control
under the current cursor location. It then checks to see if the control is a
valid drop target.</para>
			<para>If the control is a valid drop target, the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the
drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.</para>
			<para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. </para>
			<list type="bullet"><item>
					<term>      If the user moves out of a window, the <see cref="System.Windows.Forms.Control.DragLeave"/>
event is raised.</term>
				</item>
				<item>
					<term>      If the mouse enters another control, the <see cref="System.Windows.Forms.Control.DragEnter"/> for
   that control is raised.</term>
				</item>
				<item>
					<term>      If the mouse moves but stays within the same control, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised.</term>
				</item>
			</list>
			<para>If there is a change in the keyboard or mouse button state, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised and determines
whether to continue the drag, to drop the data, or to cancel the operation based
on the value of the <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> property of the event's
<see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> 
.</para>
			<list type="bullet"><item>
					<term>      If the value is <see cref="System.Windows.Forms.DragAction.Continue" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised to continue the
   operation and the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the new
   effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.
      <note type="note">
      The <see cref="System.Windows.Forms.Control.DragOver"/> and <see cref="System.Windows.Forms.Control.GiveFeedback"/> events are paired so that as the
      mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.
      
      </note></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/>, the drop effect value
   is returned to the source, so the source application can perform the appropriate
   operation on the source data; for example, cut the data if the operation was a move.</para></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised. </para></term>
				</item>
			</list>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnGiveFeedback"/>
	</doc>
	<doc for="Control.QueryContinueDrag">
		<summary>
			<para>Occurs during a drag-and-drop operation and allows the
      drag source to determine whether the drag-and-drop operation should be canceled.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised
   when there is a change in the keyboard or mouse button state during a
   drag-and-drop operation. The <see cref="System.Windows.Forms.Control.QueryContinueDrag"/>
   event allows the drag source to determine whether the
   drag-and-drop operation should be canceled.</para>
			<para>The following describes how and when events related to drag-and-drop
   operations are raised.</para>
			<para>The <see cref="System.Windows.Forms.Control.DoDragDrop"/> method determines the control
under the current cursor location. It then checks to see if the control is a
valid drop target.</para>
			<para>If the control is a valid drop target, the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the
drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.</para>
			<para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked. </para>
			<list type="bullet"><item>
					<term>      If the user moves out of a window, the <see cref="System.Windows.Forms.Control.DragLeave"/>
event is raised.</term>
				</item>
				<item>
					<term>      If the mouse enters another control, the <see cref="System.Windows.Forms.Control.DragEnter"/> for
   that control is raised.</term>
				</item>
				<item>
					<term>      If the mouse moves but stays within the same control, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised.</term>
				</item>
			</list>
			<para>If there is a change in the keyboard or mouse button state, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event is raised and determines
whether to continue the drag, to drop the data, or to cancel the operation based
on the value of the <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> property of the event's
<see cref="System.Windows.Forms.QueryContinueDragEventArgs"/> 
.</para>
			<list type="bullet"><item>
					<term>      If the value is <see cref="System.Windows.Forms.DragAction.Continue" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragOver"/> event is raised to continue the
   operation and the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event is raised with the new
   effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="System.Windows.Forms.DragDropEffects"/> enumeration.
      <note type="note">
      The <see cref="System.Windows.Forms.Control.DragOver"/> and <see cref="System.Windows.Forms.Control.GiveFeedback"/> events are paired so that as the
      mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.
      
      </note></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/>, the drop effect value
   is returned to the source, so the source application can perform the appropriate
   operation on the source data; for example, cut the data if the operation was a move.</para></term>
				</item>
				<item>
					<term>
						<para> If the value is <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/>, the <see cref="System.Windows.Forms.Control.DragLeave"/> event is raised. </para></term>
				</item>
			</list>
			<para>By default, the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event sets <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> to <see cref="System.Windows.Forms.DragAction.Cancel" qualify="true"/> if
the ESC key was pressed and sets <see cref="System.Windows.Forms.QueryContinueDragEventArgs.Action"/> to <see cref="System.Windows.Forms.DragAction.Drop" qualify="true"/> if the left, middle, or right
mouse button is pressed.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a drag-and-drop
      operation between two <see cref="System.Windows.Forms.ListBox"/> controls. The example calls
      the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method when the drag action starts. The
      drag action starts if the mouse has moved more than <see cref="System.Windows.Forms.SystemInformation.DragSize" qualify="true"/> from
      the mouse location during the <see cref="System.Windows.Forms.Control.MouseDown"/> event.
      The <see cref="System.Windows.Forms.ListBox.IndexFromPoint"/> method is used to determine the index of
      the item to drag during the <see langword="MouseDown"/> event.</para>
			<para> The example also demonstrates using custom cursors for the drag-and-drop operation.
      The example assumes that two cursor files, <c>3dwarro.cur</c> and <c>3dwno.cur</c>, exist in the application
   directory, for the custom drag and no-drop cursors, respectively. The custom
   cursors will be used if the <c>UseCustomCursorsCheck</c>
				<see cref="System.Windows.Forms.CheckBox"/> is checked. The custom
cursors are set in the <see cref="System.Windows.Forms.Control.GiveFeedback"/> event
handler. </para>
			<para>The keyboard state is evaluated in the <see cref="System.Windows.Forms.Control.DragOver"/> event handler for the right
<see langword="ListBox"/>, to determine what the drag operation will be based 
upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the
<see langword="ListBox"/> where the drop would occur is also determined during 
the <see langword="DragOver"/> event. If the data to drop is not a
<see langword="String"/>, then the <see cref="System.Windows.Forms.DragEventArgs.Effect" qualify="true"/> is set to <see cref="System.Windows.Forms.DragDropEffects.None" qualify="true"/>. Finally, the status of the drop is 
displayed in the <c>DropLocationLabel</c>
				<see cref="System.Windows.Forms.Label"/>. </para>
			<para>The data to drop for the right <see langword="ListBox"/> is determined in
the <see cref="System.Windows.Forms.Control.DragDrop"/> event handler and the
<see langword="String"/> value is added at the appropriate place in the 
<see langword="ListBox"/>. If the drag operation moves outside the bounds of the 
form, then the drag-and-drop operation is canceled in the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event handler. </para>
			<para>This code excerpt demonstrates using the <see cref="System.Windows.Forms.Control.QueryContinueDrag"/> event. See the <see cref="System.Windows.Forms.Control.DoDragDrop"/> method for the complete code example.</para>
			<codelink SampleID="System.Windows.Forms.Control.DoDragDrop" SnippetID="6"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnQueryContinueDrag"/>
	</doc>
	<doc for="Control.WndProc">
		<summary>
			<para>Processes Windows messages.</para>
		</summary>
		<param name="m">The Windows <see cref="System.Windows.Forms.Message"/> to process. </param>
		<remarks>
			<para>All messages are sent to the <see cref="System.Windows.Forms.Control.WndProc"/> method after getting filtered through
   the <see cref="System.Windows.Forms.Control.PreProcessMessage"/> method.</para>
			<para>The <see cref="System.Windows.Forms.Control.WndProc"/> method corresponds exactly to
the Windows <see langword="WindowProc"/> function. For more information about
processing Windows messages, see the <see langword="WindowProc"/> function documentation in the Windows
Platform SDK reference located in the MSDN Library. </para>
			<note type="inheritinfo">
   Inheriting controls
   should call the base class's <see cref="System.Windows.Forms.Control.WndProc"/> method to process
   any messages that they do not handle.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for inheriting classes to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates overriding the
      <see cref="System.Windows.Forms.Control.WndProc"/> method to handle operating system messages
      identified in the <see cref="System.Windows.Forms.Message"/> structure. The WM_ACTIVATEAPP operating
      system message is handled in this example to know when another application is
      becoming active. Refer to the Platform SDK documentation reference located in
      the MSDN Library to understand the available <see cref="System.Windows.Forms.Message.Msg" qualify="true"/>, <see cref="System.Windows.Forms.Message.LParam" qualify="true"/>, and <see cref="System.Windows.Forms.Message.WParam" qualify="true"/>
      values. Actual constant values can be found in the windows.h header file included in the Platform SDK (Core SDK section) download, which is also available on MSDN.
      </para>
			<codelink SampleID="System.Windows.Forms.Control.WndProc" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.PreProcessMessage"/>
		<seealso cref="System.Windows.Forms.Control.DefWndProc"/>
	</doc>
	<doc for="Control.Enter">
		<summary>
			<para>Occurs when the control is entered.</para>
		</summary>
		<remarks>
			<para>Focus events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.Enter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.GotFocus"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Leave"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validating"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validated"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.LostFocus"/></term>
				</item>
			</list>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set to
<see langword="false"/> , the <see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.Control.Enter"/> and <see cref="System.Windows.Forms.Control.Leave"/> events
   are suppressed by the <see cref="System.Windows.Forms.Form"/> class. The equivalent events in the
<see cref="System.Windows.Forms.Form"/> class are the <see cref="System.Windows.Forms.Form.Activated"/> and <see cref="System.Windows.Forms.Form.Deactivate"/> events. 
   The <see cref="System.Windows.Forms.Control.Enter"/> and <see cref="System.Windows.Forms.Control.Leave"/>
   events are
   hierarchical and will cascade up and down the parent chain until the
   appropriate control is reached. For example, assume you have a <see cref="System.Windows.Forms.Form"/> with two <see cref="System.Windows.Forms.GroupBox"/>
   controls, and each <see cref="System.Windows.Forms.GroupBox"/> control has one <see cref="System.Windows.Forms.TextBox"/>
   control. When the caret is moved from one <see cref="System.Windows.Forms.TextBox"/> to the other, the <see cref="System.Windows.Forms.Control.Leave"/> event is raised for the <see cref="System.Windows.Forms.TextBox"/>
   and <see cref="System.Windows.Forms.GroupBox"/>, and the <see cref="System.Windows.Forms.Control.Enter"/> event is raised for the other <see cref="System.Windows.Forms.GroupBox"/>
   and <see cref="System.Windows.Forms.TextBox"/> .
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.Enter" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnEnter"/>
	</doc>
	<doc for="Control.OnEnter">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Enter"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnEnter"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnEnter"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnEnter"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.Enter" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Enter"/>
	</doc>
	<doc for="Control.OnLeave">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Leave"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnLeave"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnLeave"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnLeave"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.Enter" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Leave"/>
	</doc>
	<doc for="Control.KeyDown">
		<summary>
			<para> Occurs when a key is pressed while the control has focus.</para>
		</summary>
		<remarks>
			<para>Key events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyDown"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyPress"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyUp"/></term>
				</item>
			</list>
			<para>To handle keyboard events only at the form level and not allow other controls
   to receive keyboard events, set the <see cref="System.Windows.Forms.KeyPressEventArgs.Handled" qualify="true"/>
   property in your form's <see cref="System.Windows.Forms.Control.KeyPress"/> event-handling method to
<see langword="true"/> . Certain 
   keys, such as the TAB, RETURN, ESCAPE, and arrow keys are handled by controls
   automatically. In order to have these keys raise the KeyDown event, you must
   override the <see cref="System.Windows.Forms.Control.IsInputKey"/> method in each control on your form. The
   code for the override of the IsInputKey would need to
   determine if one of the special keys is pressed and
   return a value
   of <see langword="true"/>.<see langword=" "/>
			</para>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyDown" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnKeyDown"/>
	</doc>
	<doc for="Control.KeyPress">
		<summary>
			<para> Occurs when a key is pressed while the control has focus.</para>
		</summary>
		<remarks>
			<para>Key events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyDown"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyPress"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyUp"/></term>
				</item>
			</list>
			<para>The <see cref="System.Windows.Forms.Control.KeyPress"/>
event is not raised by noncharacter keys; however,
the noncharacter keys do raise the <see cref="System.Windows.Forms.Control.KeyDown"/> and <see cref="System.Windows.Forms.Control.KeyUp"/> events.</para>
			<para>To handle keyboard events only at the form level and not allow other controls
   to receive keyboard events, set the <see cref="System.Windows.Forms.KeyPressEventArgs.Handled" qualify="true"/>
   property in your form's <see cref="System.Windows.Forms.Control.KeyPress"/> event-handling method to
<see langword="true"/> .</para>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyDown" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnKeyPress"/>
	</doc>
	<doc for="Control.OnKeyDown">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.KeyDown"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnKeyDown"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnKeyDown"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnKeyDown"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyDown" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.KeyDown"/>
	</doc>
	<doc for="Control.OnKeyPress">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.KeyPress"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnKeyPress"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnKeyPress"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnKeyPress"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyDown" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.KeyPress"/>
	</doc>
	<doc for="Control.Leave">
		<summary>
			<para>Occurs when the input focus leaves the control.</para>
		</summary>
		<remarks>
			<para>Focus events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.Enter"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.GotFocus"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Leave"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validating"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.Validated"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.LostFocus"/></term>
				</item>
			</list>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set to
<see langword="false"/> , the <see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.Control.Enter"/> and <see cref="System.Windows.Forms.Control.Leave"/> events
   are suppressed by the <see cref="System.Windows.Forms.Form"/> class. The equivalent events in the
<see cref="System.Windows.Forms.Form"/> class are the <see cref="System.Windows.Forms.Form.Activated"/> and <see cref="System.Windows.Forms.Form.Deactivate"/> events. 
   The <see cref="System.Windows.Forms.Control.Enter"/> and <see cref="System.Windows.Forms.Control.Leave"/>
   events are
   hierarchical and will cascade up and down the parent chain until the
   appropriate control is reached. For example, assume you have a <see cref="System.Windows.Forms.Form"/> with two <see cref="System.Windows.Forms.GroupBox"/>
   controls, and each <see cref="System.Windows.Forms.GroupBox"/> control has one <see cref="System.Windows.Forms.TextBox"/>
   control. When the caret is moved from one <see cref="System.Windows.Forms.TextBox"/> to the other, the <see cref="System.Windows.Forms.Control.Leave"/> event is raised for the <see cref="System.Windows.Forms.TextBox"/>
   and <see cref="System.Windows.Forms.GroupBox"/>, and the <see cref="System.Windows.Forms.Control.Enter"/> event is raised for the other <see cref="System.Windows.Forms.GroupBox"/>
   and <see cref="System.Windows.Forms.TextBox"/> .
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.Enter" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnLeave"/>
	</doc>
	<doc for="Control.Move">
		<summary>
			<para>Occurs when the control is moved.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.Move" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnMove"/>
	</doc>
	<doc for="Control.FindForm">
		<summary>
			<para> Retrieves the form that the control is on.</para>
		</summary>
		<returns>
			<para>The <see cref="System.Windows.Forms.Form"/> that the control is on.</para>
		</returns>
		<remarks>
			<para>The control's <see cref="System.Windows.Forms.Control.Parent"/> property value might not be
   the same as the <see cref="System.Windows.Forms.Form"/> returned by <see cref="System.Windows.Forms.Control.FindForm"/> method.
   For example, if a <see cref="System.Windows.Forms.RadioButton"/> control is contained within a <see cref="System.Windows.Forms.GroupBox"/>
   control, and the <see cref="System.Windows.Forms.GroupBox"/> is on a <see cref="System.Windows.Forms.Form"/>, the <see cref="System.Windows.Forms.RadioButton"/> control's <see cref="System.Windows.Forms.Control.Parent"/> is the <see cref="System.Windows.Forms.GroupBox"/> and the <see cref="System.Windows.Forms.GroupBox"/>
   control's <see cref="System.Windows.Forms.Control.Parent"/> is the <see cref="System.Windows.Forms.Form"/> .</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<codelink SampleID="Control.FindForm" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.GetTopLevel"/>
		<seealso cref="System.Windows.Forms.Form"/>
	</doc>
	<doc for="Control.OnMove">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Move"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnMove"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnMove"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnMove"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.Move" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Move"/>
	</doc>
	<doc for="Control.Parent">
		<summary>
			<para>Gets or sets the parent container of the control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Control"/> object that represents the parent
   or container control of the control.</para>
		</value>
		<remarks>
			<para>Setting the <see cref="System.Windows.Forms.Control.Parent"/> property value to
<see langword="null"/> removes the control from the <see cref="System.Windows.Forms.Control.ControlCollection"/> 
of its current parent control.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<example>
			<codelink SampleID="Control.FindForm" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
		<keyword term="parent containers"/>
		<keyword term="containers"/>
	</doc>
	<doc for="Control.Click">
		<summary>
			<para>Occurs when the control is clicked.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Click"/> event passes an <see cref="System.EventArgs"/> object to its event
   handler, so it only indicates that a click has occurred. If you need more
   specific mouse information (button, number of clicks, wheel rotation, or
   location), use the <see cref="System.Windows.Forms.Control.MouseDown"/> and <see cref="System.Windows.Forms.Control.MouseUp"/> events which pass a <see cref="System.Windows.Forms.MouseEventArgs"/> object to the event handler. </para>
			<para> A double-click is determined by the mouse settings of
   the user's operating system. The user can set the time between clicks of a mouse
   button that should be considered a double-click rather than two clicks. The
<see cref="System.Windows.Forms.Control.Click"/> event is raised every time a control is 
   double-clicked. For example, if you have an event-handling methods for the
<see cref="System.Windows.Forms.Control.Click"/> and <see cref="System.Windows.Forms.Control.DoubleClick"/> events of a <see cref="System.Windows.Forms.Form"/>, the <see cref="System.Windows.Forms.Control.Click"/> and <see cref="System.Windows.Forms.Control.DoubleClick"/> events are raised when the form is 
   double-clicked and both methods are called. If a control is double-clicked and
   that control does not support the <see cref="System.Windows.Forms.Control.DoubleClick"/> event, the <see cref="System.Windows.Forms.Control.Click"/> event might be raised twice. </para>
			<para>The <see cref="System.Windows.Forms.ControlStyles.StandardClick" qualify="true"/> style bit must be set to <see langword="true"/> for this
event to be raised.</para>
			<note type="inheritinfo">
   Inheriting from a
   standard Windows Forms control and changing the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/> or <see cref="System.Windows.Forms.ControlStyles.StandardDoubleClick"/>
   bit values to <see langword="true"/> can cause unexpected
   behavior or have no effect at all if the control does not support the <see cref="System.Windows.Forms.Control.Click"/> or <see cref="System.Windows.Forms.Control.DoubleClick"/> events.
</note>
			<para> The following table lists Windows Forms
   controls and which event (<see cref="System.Windows.Forms.Control.Click"/> or <see cref="System.Windows.Forms.Control.DoubleClick"/>) is raised in response to the mouse
   action
   specified.</para>
			<list type="table">
				<listheader>
					<term>
						<para>Control</para></term>
					<description>Left Mouse Click</description>
					<description>Left Mouse Double Click</description>
					<description>Right Mouse Click</description>
					<description>Right Mouse Double Click</description>
					<description>Middle Mouse Click</description>
					<description>Middle Mouse Double Click</description>
					<description>XButton1 Mouse Click</description>
					<description>XButton1 Mouse Double-Click</description>
					<description>XButton2 Mouse Click</description>
					<description>XButton2 Mouse Double-Click</description>
				</listheader>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.MonthCalendar"/>, </para>
						<para><see cref="System.Windows.Forms.DateTimePicker"/>, </para>
						<para><see cref="System.Windows.Forms.RichTextBox"/>, </para>
						<para><see cref="System.Windows.Forms.HScrollBar"/>, </para>
						<para><see cref="System.Windows.Forms.VScrollBar"/></para></term>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.Button"/>, </para>
						<para><see cref="System.Windows.Forms.CheckBox"/>, </para>
						<para><see cref="System.Windows.Forms.RadioButton"/>
						</para></term>
					<description>Click</description>
					<description>Click, Click</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ListBox"/>, </para>
						<para><see cref="System.Windows.Forms.CheckedListBox"/>, </para>
						<para><see cref="System.Windows.Forms.ComboBox"/>
						</para></term>
					<description>
						<para>Click</para></description>
					<description>
						<para>Click, DoubleClick</para></description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.TextBox"/>, </para>
						<para><see cref="System.Windows.Forms.DomainUpDown"/>, </para>
						<para><see cref="System.Windows.Forms.NumericUpDown"/>
						</para></term>
					<description>Click</description>
					<description>
						<para>Click, DoubleClick</para></description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para> *<see cref="System.Windows.Forms.TreeView"/>, </para>
						<para>*<see cref="System.Windows.Forms.ListView"/></para></term>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ProgressBar"/>, </para>
						<para><see cref="System.Windows.Forms.TrackBar"/></para></term>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.Form"/>, </para>
						<para><see cref="System.Windows.Forms.DataGrid"/>, </para>
						<para><see cref="System.Windows.Forms.Label"/>, </para>
						<para><see cref="System.Windows.Forms.LinkLabel"/>, </para>
						<para><see cref="System.Windows.Forms.Panel"/>, </para>
						<para><see cref="System.Windows.Forms.GroupBox"/>, </para>
						<para><see cref="System.Windows.Forms.PictureBox"/>, </para>
						<para><see cref="System.Windows.Forms.Splitter"/>, </para>
						<para><see cref="System.Windows.Forms.StatusBar"/>, </para>
						<para><see cref="System.Windows.Forms.ToolBar"/>, </para>
						<para><see cref="System.Windows.Forms.TabPage"/>, </para>
						<para>**<see cref="System.Windows.Forms.TabControl"/>
						</para></term>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
				</item>
			</list>
			<para>* The mouse pointer must be over a child object (<see cref="System.Windows.Forms.TreeNode"/>
or <see cref="System.Windows.Forms.ListViewItem"/>).</para>
			<para>** The <see cref="System.Windows.Forms.TabControl"/> must have at least one <see cref="System.Windows.Forms.TabPage"/> in
its <see cref="System.Windows.Forms.TabControl.TabPages"/> collection.</para>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the
   appropriate event. However, if the user interaction is within the client
   area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
   
</note>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.FindForm" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnClick"/>
		<seealso cref="System.Windows.Forms.ControlStyles.StandardClick"/>
	</doc>
	<doc for="Control.OnClick">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Click"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnClick"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnClick"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnClick"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.FindForm" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Click"/>
	</doc>
	<doc for="Control.DoubleClick">
		<summary>
			<para> Occurs when the control is double-clicked.</para>
		</summary>
		<remarks>
			<para>A double-click is determined by the mouse settings of the user's operating
      system. The user can set the time between clicks of a mouse button that should
      be considered a double-click rather than two clicks. The <see cref="System.Windows.Forms.Control.Click"/> event is raised every time a
      control is double-clicked. For example, if you have an event-handling methods
      for the <see cref="System.Windows.Forms.Control.Click"/> and <see cref="System.Windows.Forms.Control.DoubleClick"/> events of a <see cref="System.Windows.Forms.Form"/>, the
   <see cref="System.Windows.Forms.Control.Click"/> and <see cref="System.Windows.Forms.Control.DoubleClick"/> events are raised when the form is
      double-clicked and both methods are called. If a control is double-clicked and
      that control does not support the <see cref="System.Windows.Forms.Control.DoubleClick"/> event, the
   <see cref="System.Windows.Forms.Control.Click"/> event might be raised twice. </para>
			<para>The <see cref="System.Windows.Forms.ControlStyles.StandardDoubleClick" qualify="true"/> and <see cref="System.Windows.Forms.ControlStyles.StandardClick" qualify="true"/> bits must be set to
<see langword="true"/> for this event to be raised. These bits might already be 
   set to <see langword="true"/> if you are inheriting from existing Windows Forms
   controls.</para>
			<note type="inheritinfo">
   Inheriting from a
   standard Windows Forms control and changing the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/> or <see cref="System.Windows.Forms.ControlStyles.StandardDoubleClick"/> bit values to
<see langword="true"/> can cause unexpected behavior or have no effect at all if 
   the control does not support the <see cref="System.Windows.Forms.Control.Click"/> or <see cref="System.Windows.Forms.Control.DoubleClick"/> events.
</note>
			<para>The following table lists Windows Forms controls and which event (<see cref="System.Windows.Forms.Control.Click"/> or <see cref="System.Windows.Forms.Control.DoubleClick"/>) is raised in response to the
mouse action specified.</para>
			<list type="table">
				<listheader>
					<term>
						<para>Control</para></term>
					<description>Left Mouse Click</description>
					<description>Left Mouse Double Click</description>
					<description>Right Mouse Click</description>
					<description>Right Mouse Double Click</description>
					<description>Middle Mouse Click</description>
					<description>Middle Mouse Double Click</description>
					<description>XButton1 Mouse Click</description>
					<description>XButton1 Mouse Double-Click</description>
					<description>XButton2 Mouse Click</description>
					<description>XButton2 Mouse Double-Click</description>
				</listheader>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.MonthCalendar"/>, </para>
						<para><see cref="System.Windows.Forms.DateTimePicker"/>, </para>
						<para><see cref="System.Windows.Forms.RichTextBox"/>, </para>
						<para><see cref="System.Windows.Forms.HScrollBar"/>, </para>
						<para><see cref="System.Windows.Forms.VScrollBar"/></para></term>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.Button"/>, </para>
						<para><see cref="System.Windows.Forms.CheckBox"/>, </para>
						<para><see cref="System.Windows.Forms.RadioButton"/>
						</para></term>
					<description>Click</description>
					<description>Click, Click</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ListBox"/>, </para>
						<para><see cref="System.Windows.Forms.CheckedListBox"/>, </para>
						<para><see cref="System.Windows.Forms.ComboBox"/>
						</para></term>
					<description>
						<para>Click</para></description>
					<description>
						<para>Click, DoubleClick</para></description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.TextBox"/>, </para>
						<para><see cref="System.Windows.Forms.DomainUpDown"/>, </para>
						<para><see cref="System.Windows.Forms.NumericUpDown"/>
						</para></term>
					<description>Click</description>
					<description>
						<para>Click, DoubleClick</para></description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para>*<see cref="System.Windows.Forms.TreeView"/>, </para>
						<para>*<see cref="System.Windows.Forms.ListView"/></para></term>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
					<description>none</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.ProgressBar"/>, </para>
						<para><see cref="System.Windows.Forms.TrackBar"/></para></term>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
					<description>Click</description>
					<description>Click, Click</description>
				</item>
				<item>
					<term>
						<para><see cref="System.Windows.Forms.Form"/>, </para>
						<para><see cref="System.Windows.Forms.DataGrid"/>, </para>
						<para><see cref="System.Windows.Forms.Label"/>, </para>
						<para><see cref="System.Windows.Forms.LinkLabel"/>, </para>
						<para><see cref="System.Windows.Forms.Panel"/>, </para>
						<para><see cref="System.Windows.Forms.GroupBox"/>, </para>
						<para><see cref="System.Windows.Forms.PictureBox"/>, </para>
						<para><see cref="System.Windows.Forms.Splitter"/>, </para>
						<para><see cref="System.Windows.Forms.StatusBar"/>, </para>
						<para><see cref="System.Windows.Forms.ToolBar"/>, </para>
						<para><see cref="System.Windows.Forms.TabPage"/>, </para>
						<para>**<see cref="System.Windows.Forms.TabControl"/>
						</para></term>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click, DoubleClick</description>
					<description>Click</description>
					<description>Click,
   DoubleClick</description>
				</item>
			</list>
			<para>* The mouse pointer must be over a child object (<see cref="System.Windows.Forms.TreeNode"/>
or <see cref="System.Windows.Forms.ListViewItem"/>).</para>
			<para>** The <see cref="System.Windows.Forms.TabControl"/> must have at least one <see cref="System.Windows.Forms.TabPage"/> in
its <see cref="System.Windows.Forms.TabControl.TabPages"/> collection.</para>
			<note type="note">
   The following events are not raised
   for the <see cref="System.Windows.Forms.TabControl"/> class unless there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the <see cref="System.Windows.Forms.TabControl.TabPages" qualify="true"/> collection: <see cref="System.Windows.Forms.Control.Click"/>, <see cref="System.Windows.Forms.Control.DoubleClick"/>, <see cref="System.Windows.Forms.Control.MouseDown"/>, <see cref="System.Windows.Forms.Control.MouseUp"/>, <see cref="System.Windows.Forms.Control.MouseHover"/>, <see cref="System.Windows.Forms.Control.MouseEnter"/>, <see cref="System.Windows.Forms.Control.MouseLeave"/> and <see cref="System.Windows.Forms.Control.MouseMove"/>. If there is at least one <see cref="System.Windows.Forms.TabPage"/> in
   the collection, and the user interacts with the tab control’s header (where the
<see cref="System.Windows.Forms.TabPage"/> names appear), the <see cref="System.Windows.Forms.TabControl"/> raises the
   appropriate event. However, if the user interaction is within the client
   area of the tab page, the <see cref="System.Windows.Forms.TabPage"/>
   raises the appropriate event.
   
</note>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/> . </para>
		</remarks>
		<example>
			<codelink SampleID="Control.DoubleClick" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnDoubleClick"/>
		<seealso cref="System.Windows.Forms.ControlStyles.StandardClick"/>
		<seealso cref="System.Windows.Forms.ControlStyles.StandardDoubleClick"/>
	</doc>
	<doc for="Control.OnDoubleClick">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.DoubleClick"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnDoubleClick"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnDoubleClick"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnDoubleClick"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.DoubleClick" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.DoubleClick"/>
	</doc>
	<doc for="Control.Bottom">
		<summary>
			<para>Gets the distance between the bottom edge of the control and the top edge of its container's client area.</para>
		</summary>
		<value>
			<para>The bottom coordinate, in pixels.</para>
		</value>
		<remarks>
			<para> The value of this property is equal to the sum of the <see cref="System.Windows.Forms.Control.Top"/>
property value, and the <see cref="System.Windows.Forms.Control.Height"/> property value.</para>
			<para>The <see cref="System.Windows.Forms.Control.Bottom"/> property is a read-only property. You
can manipulate this property value by changing the value of the
<see cref="System.Windows.Forms.Control.Top"/> or <see cref="System.Windows.Forms.Control.Height"/> properties or calling the 
<see cref="System.Windows.Forms.Control.SetBounds"/>, <see cref="System.Windows.Forms.Control.SetBoundsCore"/>, 
<see cref="System.Windows.Forms.Control.UpdateBounds"/>, or <see cref="System.Windows.Forms.Control.SetClientSizeCore"/> methods.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyUp" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Top"/>
		<seealso cref="System.Windows.Forms.Control.Height"/>
	</doc>
	<doc for="Control.Right">
		<summary>
			<para> Gets the distance between the right edge of the control and the left
      edge of its container. </para>
		</summary>
		<value>
			<para>The distance between the right edge of the control and the left edge of its
      container.</para>
		</value>
		<remarks>
			<para>The value of the <see cref="System.Windows.Forms.Control.Right"/> property is equal to the sum of
   the <see cref="System.Windows.Forms.Control.Left"/> property value and the <see cref="System.Windows.Forms.Control.Width"/> property value.</para>
			<para>The <see cref="System.Windows.Forms.Control.Right"/> property is read-only. You can change
this property value indirectly by changing the value of the <see cref="System.Windows.Forms.Control.Left"/> or <see cref="System.Windows.Forms.Control.Width"/> properties or calling the
<see cref="System.Windows.Forms.Control.SetBounds"/>, <see cref="System.Windows.Forms.Control.SetBoundsCore"/>, <see cref="System.Windows.Forms.Control.UpdateBounds"/>, or <see cref="System.Windows.Forms.Control.SetClientSizeCore"/> methods.</para>
		</remarks>
		<example>
			<para>The following example creates three <see cref="System.Windows.Forms.Button"/> controls on a form and
   sets their size and location by using the various size-related and location-related
   properties. This example assumes you have a <see cref="System.Windows.Forms.Form"/> that has a width and
   height of at least 300 pixels. </para>
			<codelink SampleID="Windows.Forms.Control SizeLocation" SnippetID="1"/>
			<codelink SampleID="Control.KeyUp" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Right"/>
	</doc>
	<doc for="Control.KeyUp">
		<summary>
			<para> Occurs when a key is released while the control has focus.</para>
		</summary>
		<remarks>
			<para>Key events occur in the following order:</para>
			<list type="number"><item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyDown"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyPress"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.Control.KeyUp"/></term>
				</item>
			</list>
			<para>For more information about handling events, see
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyUp" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnKeyUp"/>
	</doc>
	<doc for="Control.OnKeyUp">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.KeyUp"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnKeyUp"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnKeyUp"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnKeyUp"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.KeyUp" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.KeyUp"/>
	</doc>
	<doc for="Control.ControlAdded">
		<summary>
			<para>Occurs when a new control is added to the <see cref="System.Windows.Forms.Control.ControlCollection"/> .</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.ControlRemoved" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnControlAdded"/>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
	</doc>
	<doc for="Control.ControlRemoved">
		<summary>
			<para>Occurs when a control is removed from the <see cref="System.Windows.Forms.Control.ControlCollection"/> .</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.ControlRemoved" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnControlRemoved"/>
		<seealso cref="System.Windows.Forms.Control.Controls"/>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
	</doc>
	<doc for="Control.OnControlAdded">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ControlAdded"/> event.</para>
		</summary>
		<param name="e"><para>A <see cref="System.Windows.Forms.ControlEventArgs"/> that contains the event data.</para></param>
		<remarks>
			<para>Called when a child control is added to the control.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnControlAdded"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnControlAdded"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnControlAdded"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.ControlRemoved" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlAdded"/>
	</doc>
	<doc for="Control.OnControlRemoved">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.ControlRemoved"/> event.</para>
		</summary>
		<param name="e"><para>A <see cref="System.Windows.Forms.ControlEventArgs"/> that contains the event data.</para></param>
		<remarks>
			<para>Called when a child control is removed from the control.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnControlRemoved"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnControlRemoved"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnControlRemoved"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Control.ControlRemoved" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlRemoved"/>
	</doc>
	<doc for="Control.Name">
		<summary>
			<para>Gets or sets the name of the control.</para>
		</summary>
		<value>
			<para>The name of the control. The default is an empty string ("").</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Control.Name"/> property can be used at
   run time to evaluate the object by name rather than type and programmatic
   name. Because the <see cref="System.Windows.Forms.Control.Name"/> property returns a <see cref="System.String"/> type, it can be evaluated in
   case-style logic statements (<see langword="Select"/> statement in Visual Basic,
<see langword="switch"/> 
statement in C# and C++).</para>
		</remarks>
		<example>
			<codelink SampleID="Control.ControlRemoved" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.ISite.Name" qualify="true"/>
	</doc>
	<doc for="Control.Paint">
		<summary>
			<para> Occurs when the control is redrawn.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Control.Paint" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.OnPaint"/>
	</doc>
	<doc for="Control.OnPaint">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Paint"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Control.OnPaint"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Control.OnPaint"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Control.OnPaint"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<para>The following example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <see cref="System.Windows.Forms.Control.OnPaint"/> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <see cref="System.Windows.Forms.Control.DragEnter"/> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <see cref="System.Windows.Forms.Control.DragDrop"/> event-handling method displays the image on the form, if an <see cref="System.Drawing.Image"/> can be created from the data. Because the <see cref="System.Windows.Forms.DragEventArgs.X" qualify="true"/> and <see cref="System.Windows.Forms.DragEventArgs.Y" qualify="true"/> values are screen coordinates, the example uses the <see cref="System.Windows.Forms.Control.PointToClient"/> method to convert them to client coordinates. </para>
			<codelink SampleID="Windows.Forms.Control.DragOperations" SnippetID="1"/>
			<codelink SampleID="Control.Paint" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Paint"/>
	</doc>
</docs>
