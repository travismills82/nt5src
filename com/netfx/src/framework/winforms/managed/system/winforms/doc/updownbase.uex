<docs>
	<doc for="UpDownBase.borderStyle">
		<summary>
     The current border for this edit control.
 </summary>
	</doc>
	<doc for="UpDownBase.UpDownBase">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.Windows.Forms.UpDownBase"/>
       class.
    </para>
		</summary>
		<seealso cref="System.Windows.Forms.NumericUpDown"/>
		<seealso cref="System.Windows.Forms.DomainUpDown"/>
	</doc>
	<doc for="UpDownBase.AutoScroll">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="UpDownBase.AutoScrollMargin">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="UpDownBase.AutoScrollMinSize">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="UpDownBase.BackColor">
		<summary>
			<para>
       Gets or sets the background color for the
       text box portion of the up-down control.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.Drawing.Color"/> that represents the background color of the text
       box portion of the up-down control.
    </para>
		</value>
	</doc>
	<doc for="UpDownBase.BackgroundImage">
		<summary>
		</summary>
	</doc>
	<doc for="UpDownBase.ChangingText">
		<summary>
			<para> Gets or sets a value indicating whether the text
       property is being changed internally by its parent class.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.UpDownBase.Text"/> property is 
    being changed internally by the <see cref="System.Windows.Forms.UpDownBase"/> class; otherwise,
 <see langword="false"/>
 .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.UpDownBase.ChangingText"/> property acts as a flag for the
 <see cref="System.Windows.Forms.UpDownBase"/> class. This property is used by derived classes 
    to indicate when the class is changing the current <see cref="System.Windows.Forms.UpDownBase.Text"/>
    property internally. If this property is set to <see langword="false"/>, the
    control assumes that the user is changing the <see cref="System.Windows.Forms.UpDownBase.Text"/> property, and
    will set the <see cref="System.Windows.Forms.UpDownBase.UserEdit"/> property to <see langword="true"/> .</para>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.UserEdit"/>
		<seealso cref="System.Windows.Forms.UpDownBase.Text"/>
	</doc>
	<doc for="UpDownBase.ContextMenu">
		<summary>
		</summary>
		<value>
			<para>
       The
    </para>
		</value>
		<remarks>
			<para>
       The contextMenu associated with this control. The contextMenu will be shown
       when the user right clicks the mouse on the control. We override this property
       here in UpDownBase to set the contextmenu on the child edit control.
    </para>
		</remarks>
	</doc>
	<doc for="UpDownBase.CreateParams">
		<summary>
			<para>
       Returns the parameters needed to create the handle. Inheriting classes
       can override this to provide extra functionality. They should not,
       however, forget to call base.getCreateParams() first to get the struct
       filled up with the basic info.
    </para>
		</summary>
		<seealso cref="System.Windows.Forms.CreateParams"/>
	</doc>
	<doc for="UpDownBase.DockPadding">
		<summary>
		</summary>
	</doc>
	<doc for="UpDownBase.ForeColor">
		<summary>
			<para>
      Gets or sets the foreground color for the control.
    </para>
		</summary>
	</doc>
	<doc for="UpDownBase.OnHandleCreated">
		<summary>
			<para>
       Initialise the updown. Adds the edit and updown buttons.
    </para>
		</summary>
	</doc>
	<doc for="UpDownBase.OnGotFocus">
		<summary>
		</summary>
	</doc>
	<doc for="UpDownBase.OnLayout">
		<summary>
    Handle the layout event. The size of the edit control, and the
    position of the UpDown control must be modified.
 </summary>
	</doc>
	<doc for="UpDownBase.OnUpDown">
		<summary>

     Handles UpDown events, which are generated by clicking on
     the updown buttons in the child updown control.

 </summary>
		<param name="source">
     Source of the event
 </param>
		<param name="e">
     UpDown event
 </param>
	</doc>
	<doc for="UpDownBase.PositionControls">
		<summary>
     Calculates the size and position of the edit control and
     the updown buttons.
 </summary>
	</doc>
	<doc for="UpDownBase.UpdateEditText">
		<summary>
			<para>When overridden
       in a derived class, updates the text displayed in the up-down control.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
       When overriding this method in a derived class, be
       sure to update the <see cref="System.Windows.Forms.UpDownBase.Text"/>
       property of the up-down control.
    </note>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.UpButton"/>
		<seealso cref="System.Windows.Forms.UpDownBase.DownButton"/>
	</doc>
	<doc for="UpDownBase.SetBoundsCore">
		<summary>
			<para>
       Restricts the vertical size of the control
    </para>
		</summary>
	</doc>
	<doc for="UpDownBase.ShouldSerializeBackColor">
		<summary>
			<para>Indicates whether the XXX property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; 
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.UpDownBase"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.UpDownBase"/>.</para>
		</remarks>
	</doc>
	<doc for="UpDownBase.ShouldSerializeForeColor">
		<summary>
			<para>Indicates whether the XXX property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; 
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.UpDownBase"/> or creating your own control incorporating the 
    <see cref="System.Windows.Forms.UpDownBase"/>.</para>
		</remarks>
	</doc>
	<doc for="UpDownBase.UpDownButtons">
		<summary>

     Nested class UpDownButtons

     A control representing the pair of buttons on the end of the edit control.
     This class handles drawing the updown buttons, and detecting mouse actions
     on these buttons. Acceleration on the buttons is handled. The control
     sends UpDownEventArgss to the parent UpDownBase class when a button is pressed,
     or when the acceleration determines that another event should be generated.
 </summary>
	</doc>
	<doc for="UpDownBase.UpDownButtons.UpDown">
		<summary>

     Adds a handler for the updown button event.
 </summary>
	</doc>
	<doc for="UpDownBase.UpDownButtons.OnMouseDown">
		<summary>

     Handles detecting mouse hits on the buttons. This method
     detects which button was hit (up or down), fires a
     updown event, captures the mouse, and starts a timer
     for repeated updown events.

 </summary>
		<param name="e">
     Mouse event
 </param>
	</doc>
	<doc for="UpDownBase.UpDownButtons.OnMouseMove">
		<summary>

     Handles detecting mouse movement.

 </summary>
		<param name="e">
     Mouse event
 </param>
	</doc>
	<doc for="UpDownBase.UpDownButtons.OnMouseUp">
		<summary>

     Handles detecting when the mouse button is released.

 </summary>
		<param name="e">
     Mouse event
 </param>
	</doc>
	<doc for="UpDownBase.UpDownButtons.OnPaint">
		<summary>
     Handles painting the buttons on the control.

 </summary>
		<param name="e">
     Paint event
 </param>
	</doc>
	<doc for="UpDownBase.UpDownButtons.OnUpDown">
		<summary>
     Occurs when the UpDown buttons are pressed.
 </summary>
	</doc>
	<doc for="UpDownBase.UpDownButtons.StartTimer">
		<summary>
     Starts the timer for generating updown events
 </summary>
	</doc>
	<doc for="UpDownBase.UpDownButtons.StopTimer">
		<summary>
     Stops the timer for generating updown events
 </summary>
	</doc>
	<doc for="UpDownBase.UpDownButtons.TimerHandler">
		<summary>
     Generates updown events when the timer calls this function.
 </summary>
	</doc>
	<doc for="UpDownBase.OnTextBoxKeyDown">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.KeyDown"/>
event.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name="e">A <see cref="System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.UpDownBase.InterceptArrowKeys"/> property is set to
   <see langword="true"/> and the key being pressed is the UP ARROW key, the <see cref="System.Windows.Forms.UpDownBase.UpButton"/> method is called. Likewise, if the
   key being pressed is the DOWN ARROW key, the <see cref="System.Windows.Forms.UpDownBase.DownButton"/> method is
   called.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.OnTextBoxKeyDown"/> method also allows derived classes
to handle the event without attaching a delegate. This is the preferred
technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UpDownBase.OnTextBoxKeyDown"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UpDownBase.OnTextBoxKeyDown"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.InterceptArrowKeys"/>
		<seealso cref="System.Windows.Forms.UpDownBase.UpButton"/>
		<seealso cref="System.Windows.Forms.UpDownBase.DownButton"/>
		<seealso cref="System.Windows.Forms.Control.KeyDown"/>
	</doc>
	<doc for="UpDownBase.OnTextBoxKeyPress">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.KeyPress"/>
event.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name="e">A <see cref="System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.OnTextBoxKeyPress"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UpDownBase.OnTextBoxKeyPress"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UpDownBase.OnTextBoxKeyPress"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.KeyPress"/>
	</doc>
	<doc for="UpDownBase.OnTextBoxLostFocus">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.LostFocus"/> event.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Validates the text in the text box portion of the
      control when the up-down control loses
      focus.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.OnTextBoxLostFocus"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UpDownBase.OnTextBoxLostFocus"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UpDownBase.OnTextBoxLostFocus"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.LostFocus"/>
	</doc>
	<doc for="UpDownBase.OnTextBoxResize">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.Resize"/> event.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Adjusts the size of the up-down control when the text box portion of the
      control is resized.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.OnTextBoxResize"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UpDownBase.OnTextBoxResize"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UpDownBase.OnTextBoxResize"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Resize"/>
	</doc>
	<doc for="UpDownBase.OnTextBoxTextChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.TextChanged"/>
event.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.OnTextBoxTextChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UpDownBase.OnTextBoxTextChanged"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UpDownBase.OnTextBoxTextChanged"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.TextChanged"/>
	</doc>
	<doc for="UpDownBase.OnMouseWheel">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseWheel"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para> If the up-down control has focus when this event occurs, the direction
      the mouse wheel scrolled is determined and either the <see cref="System.Windows.Forms.UpDownBase.UpButton"/> or <see cref="System.Windows.Forms.UpDownBase.DownButton"/> method is called.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.OnTextBoxTextChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.UpDownBase.OnTextBoxTextChanged"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.UpDownBase.OnTextBoxTextChanged"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.UpButton"/>
		<seealso cref="System.Windows.Forms.UpDownBase.DownButton"/>
	</doc>
	<doc for="UpDownBase.OnChanged">
	</doc>
	<doc for="UpDownBase.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UpDownBase.OnFontChanged">
	</doc><doc for="UpDownBase.Focused">
		<nodoc/>
		<summary>
			<para>Returns true if this control has focus.</para>
		</summary>
	</doc><doc for="UpDownBase.BackgroundImageChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UpDownBase.MouseEnter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UpDownBase.MouseLeave">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UpDownBase.MouseHover">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UpDownBase.MouseMove">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UpDownBase.PreferredHeight">
		<summary>
			<para>Gets the height of the up-down control.</para>
		</summary>
		<value>
			<para>The height of the up-down control in pixels.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.UpDownBase.PreferredHeight"/> property value
   is based on the <see cref="System.Windows.Forms.TextBoxBase.PreferredHeight"/>
   property of the
   text box portion of the control and is adjusted for the style of
   border.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: <see cref="System.Windows.Forms.UpDownBase.BorderStyle"/> and <see cref="System.Windows.Forms.UpDownBase.TextAlign"/>. Label the <see cref="System.Windows.Forms.CheckBox"/> controls: <see cref="System.Windows.Forms.UpDownBase.InterceptArrowKeys"/>, <see cref="System.Windows.Forms.UpDownBase.ReadOnly"/>, and <see cref="System.Windows.Forms.UpDownBase.UpDownAlign"/> - Left. The code allows you to change the property values at run time and see how each affects the appearance and behavior of the up-down control. Add the following items to the <see cref="System.Windows.Forms.UpDownBase.BorderStyle"/> combo box: <see cref="System.Windows.Forms.BorderStyle.None"/>, <see cref="System.Windows.Forms.BorderStyle.Fixed3D"/>, and <see cref="System.Windows.Forms.BorderStyle.FixedSingle"/> items. Add the following items to the <see cref="System.Windows.Forms.UpDownBase.TextAlign"/> combo box: <see cref="System.Windows.Forms.HorizontalAlignment.Left"/>, <see cref="System.Windows.Forms.HorizontalAlignment.Right"/>, and <see cref="System.Windows.Forms.HorizontalAlignment.Center"/> items.</para>
			<codelink SampleID="Classic UpDownBase.BorderStyle Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.PreferredHeight"/>
	</doc>
	<doc for="UpDownBase.UserEdit">
		<summary>
			<para> Gets or sets a value indicating whether a value has been entered by the
      user.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the user
   has changed the <see cref="System.Windows.Forms.UpDownBase.Text"/>
   property; otherwise, <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.UpDownBase.Text"/> property is set while the <see cref="System.Windows.Forms.UpDownBase.UserEdit"/> property is set to
<see langword="true"/>, the <see cref="System.Windows.Forms.UpDownBase.UpdateEditText"/> method is
   called. If the <see cref="System.Windows.Forms.UpDownBase.Text"/> property is set while the <see cref="System.Windows.Forms.UpDownBase.UserEdit"/> property is set to
<see langword="false"/>, <see cref="System.Windows.Forms.UpDownBase.ValidateEditText"/> is called. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.Text"/>
		<seealso cref="System.Windows.Forms.UpDownBase.UpdateEditText"/>
		<seealso cref="System.Windows.Forms.UpDownBase.ValidateEditText"/>
	</doc>
	<doc for="UpDownBase.DownButton">
		<summary>
			<para> When overridden in a derived class, handles the clicking of the down button
      on the up-down control.
      </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      When overriding
      this method in a derived class, be sure to call the <see cref="System.Windows.Forms.UpDownBase.UpdateEditText"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.UpButton"/>
	</doc>
	<doc for="UpDownBase.UpButton">
		<summary>
			<para> When overridden in a derived class, handles the clicking of the up button on the up-down control.
      </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      When overriding this method in a derived class, be sure to call the <see cref="System.Windows.Forms.UpDownBase.UpdateEditText"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.DownButton"/>
	</doc>
	<doc for="UpDownBase.BorderStyle">
		<summary>
			<para> Gets or sets the border style for the up-down control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.BorderStyle"/> values. The default value is <see langword="Fixed3D"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Windows.Forms.BorderStyle"/> values.</exception>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.TextBoxBase.BorderStyle"/> property to create
   borderless and flat controls in addition to the default three-dimensional control.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: BorderStyle and TextAlign. Label the <see cref="System.Windows.Forms.CheckBox"/> controls: InterceptArrowKeys, ReadOnly, and UpDownAlign - Left. The code allows you to change the property values at run time and see how each affects the appearance and behavior of the up-down control. Add the following items to the combo box labled BorderStyle: None, Fixed3D, and FixedSingle items. Add the following items to the combo box labled TextAlign: Left, Right, and Center
   items.</para>
			<codelink SampleID="Classic UpDownBase Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BorderStyle"/>
	</doc>
	<doc for="UpDownBase.TextAlign">
		<summary>
			<para> Gets or
      sets the alignment of the text in the up-down
      control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values. The default value is
<see langword="Left"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values.</exception>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: BorderStyle and TextAlign. Label the <see cref="System.Windows.Forms.CheckBox"/> controls: InterceptArrowKeys, ReadOnly, and UpDownAlign - Left. The code allows you to change the property values at run time and see how each affects the appearance and behavior of the up-down control. Add the following items to the combo box labled BorderStyle: None, Fixed3D, and FixedSingle items. Add the following items to the combo box labled TextAlign: Left, Right, and Center
   items.</para>
			<codelink SampleID="Classic UpDownBase Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.UpDownBase.UpDownAlign"/>
	</doc>
	<doc for="UpDownBase.UpDownAlign">
		<summary>
			<para> Gets or sets the
      alignment
      of the up and down buttons on the up-down control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.LeftRightAlignment"/> values. The default value is
<see langword="Right"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="System.Windows.Forms.LeftRightAlignment"/> values.</exception>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: BorderStyle and TextAlign. Label the <see cref="System.Windows.Forms.CheckBox"/> controls: InterceptArrowKeys, ReadOnly, and UpDownAlign - Left. The code allows you to change the property values at run time and see how each affects the appearance and behavior of the up-down control. Add the following items to the combo box labled BorderStyle: None, Fixed3D, and FixedSingle items. Add the following items to the combo box labled TextAlign: Left, Right, and Center
   items.</para>
			<codelink SampleID="Classic UpDownBase Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
	</doc>
	<doc for="UpDownBase">
		<summary>
			<para>Implements the basic functionality required by an up-down control.</para>
		</summary>
		<remarks>
			<para>The up-down control consists of a text box and a small
      vertical scroll bar, commonly referred to as a spinner control. The <see cref="System.Windows.Forms.UpDownBase"/> class links the two controls
      and allows the user to change the display in the text box by clicking the up or down buttons or by entering the appropriate
      type of value directly into the text box. Use the up-down control in cases where you want to limit the list of values a user can select, similar to a list box
      or combo box. Depending upon the type of list you want to display, the advantage to using
      an up-down control is that it allows you to quickly set a range of
      valid values, rather than adding items one at a time. Implementing an up-down control requires less data
      validation than a text box, as you can limit the data type when you derive
      a class from <see cref="System.Windows.Forms.UpDownBase"/> . An example of this is the <see cref="System.Windows.Forms.NumericUpDown"/> class, which limits
      the values to the numeric type and uses a <see cref="System.Windows.Forms.NumericUpDown.Minimum"/> and <see cref="System.Windows.Forms.NumericUpDown.Maximum"/> property to validate the
      data.</para>
			<para>To allow the user to use the arrow keys to change the contents of the up-down
      control, set the <see cref="System.Windows.Forms.UpDownBase.InterceptArrowKeys"/> property
      to <see langword="true"/> . To restrict the user to values you specify, set
      the <see cref="System.Windows.Forms.UpDownBase.ReadOnly"/> property to <see langword="true"/>. To control the alignment of text in the
      up-down control, set the <see cref="System.Windows.Forms.UpDownBase.TextAlign"/> property. To set the alignment of
      the up and down buttons in relation to the text box portion of the control, set the <see cref="System.Windows.Forms.UpDownBase.UpDownAlign"/> property to either
      <see langword="LeftRightAlignment.Left"/> or <see langword="LeftRightAlignment.Right"/>.</para>
			<para>The <see cref="System.Windows.Forms.UpDownBase.UpButton"/> and <see cref="System.Windows.Forms.UpDownBase.DownButton"/>
methods, when overridden, handle the clicking of the up or down buttons. When
overridden, the methods <see cref="System.Windows.Forms.UpDownBase.ValidateEditText"/> and <see cref="System.Windows.Forms.UpDownBase.UpdateEditText"/>
validate the value (either
selected or entered) and update the text displayed in the up-down control. If the value
fails validation, use the <see cref="System.Windows.Forms.UpDownBase.Select"/> method to select the invalid
text. This allows the user to quickly correct the text by simply typing in a new value without having to manually select or delete the existing text.</para>
			<note type="inheritinfo">
   When you inherit from <see cref="System.Windows.Forms.UpDownBase"/>, you must override the
   following members: <see cref="System.Windows.Forms.UpDownBase.DownButton"/>, <see cref="System.Windows.Forms.UpDownBase.UpButton"/>,
<see cref="System.Windows.Forms.UpDownBase.UpdateEditText"/>, <see cref="System.Windows.Forms.UpDownBase.ValidateEditText"/> .
   
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: BorderStyle and TextAlign. Label the <see cref="System.Windows.Forms.CheckBox"/> controls:
   InterceptArrowKeys, ReadOnly, and UpDownAlign - Left. The code allows you to
   change the property values at run time and see how each affects the appearance
   and behavior of the up-down control. Add the following items to the combo box
   labled BorderStyle: None, Fixed3D, and FixedSingle items. Add the
   following items to the combo box labled TextAlign: Left, Right, and Center
   items.</para>
			<codelink SampleID="Classic UpDownBase Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.NumericUpDown"/>
		<seealso cref="System.Windows.Forms.DomainUpDown"/>
	</doc>
	<doc for="UpDownBase.InterceptArrowKeys">
		<summary>
			<para> Gets or sets a value indicating whether
      the user can use the UP
      ARROW and DOWN ARROW keys to select values.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   control allows the use of the UP
   ARROW and DOWN ARROW keys to select values; otherwise, <see langword="false"/> . The default value is
<see langword="true"/>
.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Windows.Forms.UpDownBase.InterceptArrowKeys"/> is set to
<see langword="true"/> and
   the up-down control
   has focus, the user can use the UP ARROW and DOWN ARROW keys to select values.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: BorderStyle and TextAlign. Label the <see cref="System.Windows.Forms.CheckBox"/> controls: InterceptArrowKeys, ReadOnly, and UpDownAlign - Left. The code allows you to change the property values at run time and see how each affects the appearance and behavior of the up-down control. Add the following items to the combo box labled BorderStyle: None, Fixed3D, and FixedSingle items. Add the following items to the combo box labled TextAlign: Left, Right, and Center
   items.</para>
			<codelink SampleID="Classic UpDownBase Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UpDownBase.ReadOnly">
		<summary>
			<para> Gets or sets a value
      indicating whether the text can be changed by the use
      of
      the up or down buttons only.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the text
   can be changed by the use of the up
   or down buttons only; otherwise, <see langword="false"/>. The default value is
<see langword="false"/>
.</para>
		</value>
		<remarks>
			<para>By setting the <see cref="System.Windows.Forms.UpDownBase.ReadOnly"/> property to <see langword="true"/>, you will
   eliminate the need for much validation of the <see cref="System.Windows.Forms.UpDownBase.Text"/>
   property. The user will be restricted to the use of the up and down buttons to
   change the <see cref="System.Windows.Forms.UpDownBase.Text"/> values.
   It will only allow them to
   select values you specify.</para>
			<note type="note">
   In the derived class <see cref="System.Windows.Forms.DomainUpDown"/>
   , the behavior described is slightly different. When
<see cref="System.Windows.Forms.UpDownBase.ReadOnly"/> is set to <see langword="true "/> and a key
   is pressed, the control selects the first item in the collection where the first
   character matches the key pressed.
   
</note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/>, and sets some of its properties derived from <see cref="System.Windows.Forms.UpDownBase"/>. This code assumes you have a <see cref="System.Windows.Forms.NumericUpDown"/> control, two <see cref="System.Windows.Forms.ComboBox"/> controls, and three <see cref="System.Windows.Forms.CheckBox"/> controls created on a form. Label the <see cref="System.Windows.Forms.ComboBox"/> controls: BorderStyle and TextAlign. Label the <see cref="System.Windows.Forms.CheckBox"/> controls: InterceptArrowKeys, ReadOnly, and UpDownAlign - Left. The code allows you to change the property values at run time and see how each affects the appearance and behavior of the up-down control. Add the following items to the combo box labled BorderStyle: None, Fixed3D, and FixedSingle items. Add the following items to the combo box labled TextAlign: Left, Right, and Center
   items.</para>
			<codelink SampleID="Classic UpDownBase Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.UpDownBase.Text"/>
	</doc>
	<doc for="UpDownBase.Text">
		<summary>
			<para> Gets or sets the text displayed in the up-down control.</para>
		</summary>
		<value>
			<para>The string value displayed in the up-down control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.UpDownBase.UpdateEditText"/> method is called if the
<see cref="System.Windows.Forms.UpDownBase.Text"/> property is set while the 
<see cref="System.Windows.Forms.UpDownBase.UserEdit"/> property is set to 
<see langword="true"/>. The <see cref="System.Windows.Forms.UpDownBase.ValidateEditText"/> method is called if the 
<see cref="System.Windows.Forms.UpDownBase.Text"/> property is set while the 
<see cref="System.Windows.Forms.UpDownBase.UserEdit"/> property is set to 
<see langword="false"/> .</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/> . This code assumes a <see cref="System.Windows.Forms.NumericUpDown"/> control and a <see cref="System.Windows.Forms.Button"/> have been
   created on a form and the <see cref="N:System.Drawing"/> namespace has been added as a reference. On the <see cref="System.Windows.Forms.Control.Click"/> of the button, the point size of text in the <see cref="System.Windows.Forms.NumericUpDown"/> control increases. This prompts the control to adjust its <see cref="System.Windows.Forms.UpDownBase.PreferredHeight"/> property so all the text is visible in the control. After the user enters a new value and leaves the <see cref="System.Windows.Forms.NumericUpDown"/> control, the text is converted to a numeric value from a string value and validated to be between the <see cref="System.Windows.Forms.NumericUpDown.Minimum"/> and <see cref="System.Windows.Forms.NumericUpDown.Maximum"/>
   values. If the value is not valid, a <see cref="System.Windows.Forms.MessageBox"/> is displayed with the error, and the <see cref="System.Windows.Forms.UpDownBase.Select"/>
   method will select the text so the user can enter new a new value.</para>
			<codelink SampleID="Classic UpDownBase.Text Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.UpDownBase.UserEdit"/>
		<seealso cref="System.Windows.Forms.UpDownBase.UpdateEditText"/>
		<seealso cref="System.Windows.Forms.UpDownBase.ValidateEditText"/>
	</doc>
	<doc for="UpDownBase.Select">
		<overload>
			<para>Selects a range of text in the up-down control.</para>
		</overload>
		<summary>
			<para> Selects a range of text in the up-down control specifying the starting position and number of characters to select.</para>
		</summary>
		<param name="start">The position of the first character to be selected.</param>
		<param name="length">The total number of characters to be selected.</param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.UpDownBase.Select"/> method can be used when the up-down
   control gets focus, or when the <see cref="System.Windows.Forms.UpDownBase.Text"/> property fails
   data validation. When adding the validation code for the <see cref="System.Windows.Forms.UpDownBase.ValidateEditText"/> method in a derived class, call the
<see cref="System.Windows.Forms.UpDownBase.Select"/> method when validation
   fails.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.NumericUpDown"/> . This code assumes a <see cref="System.Windows.Forms.NumericUpDown"/> control and a <see cref="System.Windows.Forms.Button"/> have been created on a form and the <see cref="N:System.Drawing"/> namespace has been added as a reference. On the <see cref="System.Windows.Forms.Control.Click"/> of the button, the point size of text in the <see cref="System.Windows.Forms.NumericUpDown"/> control increases. This prompts the control to adjust its <see cref="System.Windows.Forms.UpDownBase.PreferredHeight"/> property so all the text is visible in the control. After the user enters a new value and leaves the <see cref="System.Windows.Forms.NumericUpDown"/> control, the text is converted to a numeric value from a string value and validated to be between the <see cref="System.Windows.Forms.NumericUpDown.Minimum"/> and <see cref="System.Windows.Forms.NumericUpDown.Maximum"/> values. If the value is not valid, a <see cref="System.Windows.Forms.MessageBox"/> is displayed with the error, and the <see cref="System.Windows.Forms.UpDownBase.Select"/> method will select the text so the user can enter new a new value.</para>
			<codelink SampleID="Classic UpDownBase.Text Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.UpDownBase.ValidateEditText"/>
	</doc>
	<doc for="UpDownBase.ValidateEditText">
		<summary>
			<para>When overridden in a
      derived class, validates the text displayed in the up-down control.</para>
		</summary>
		<remarks>
			<para>Some examples of validation include comparing the text
      entered to the data type set in your derived class, comparing it to a list of
      values, or verifying it to be within a range of values.</para>
			<note type="inheritinfo">
      When overriding this method
      in a derived class, be sure to add code in this method to validate the text
      property of the up-down control. This method will be called if the <see cref="System.Windows.Forms.UpDownBase.UserEdit"/> property is set to
      <see langword="false"/> when the
      <see cref="System.Windows.Forms.UpDownBase.Text"/>
   property
   is set.
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.UpDownBase.UserEdit"/>
		<seealso cref="System.Windows.Forms.UpDownBase.Text"/>
	</doc>
	<doc for="UpDownBase.Dispose">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
</docs>
