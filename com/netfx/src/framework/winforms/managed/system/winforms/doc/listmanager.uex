<docs>
	<doc for="CurrencyManager.AllowAdd">
		<summary>
			<para>Gets a value indicating
       whether items can be added to the list.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>, if additions are allowed; otherwise, 
 <see langword="false"/>.</para>
		</value>
		<remarks>
			<note type="note">
       This property was designed to allow
       the <see cref="System.Windows.Forms.DataGrid"/> control to determine
       when additions to the list are possible. For example, you cannot add to an
       array because its length is fixed when it is created.
    </note>
			<para>You typically use this property only if you are creating your own control incorporating the
    <see cref="System.Windows.Forms.ListManager"/>. Otherwise, if the data source is a <see cref="T:System.Data.DataView"/>, use the <see cref="M:System.Data.DataView.AddNew"/> method. If the data source is a <see cref="T:System.Data.DataTable"/>, use
       the <see cref="M:System.Data.DataTable.NewRow"/> method and add it to the <see cref="T:System.Data.RowsCollection"/>.</para>
		</remarks>
		<example>
			<para>The following example checks the <see cref="System.Windows.Forms.ListManager.AllowAdd"/> property before adding a new item to the list
    with the <see cref="System.Windows.Forms.ListManager.AddNew"/>
    method.</para>
			<codelink SampleID="Classic CurrencyManager.AllowAdd Example" SnippetID="1"/>
		</example>
		<seealso cref="M:System.Data.DataTable.NewRow"/>
		<seealso cref="System.Windows.Forms.ListManager.AddNew"/>
	</doc>
	<doc for="CurrencyManager.AllowEdit">
		<summary>
			<para>Gets a value
       indicating whether edits to the list are allowed.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if edits are allowed;otherwise, 
 <see langword="false"/>.</para>
		</value>
		<remarks>
			<note type="note">
       This property is designed to allow
       the <see cref="System.Windows.Forms.DataGrid"/> control to determine when edits to the list are
       possible.
    </note>
			<para>You typically use this property only if you are creating your own control incorporating the
    <see cref="System.Windows.Forms.ListManager"/>.</para>
		</remarks>
		<example>
			<para>The following example checks the status of the <see cref="System.Windows.Forms.ListManager.AllowEdit"/> property before editing an 
    item.</para>
			<codelink SampleID="Classic CurrencyManager.AllowEdit Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.AllowRemove">
		<summary>
			<para>Gets a value indicating whether items can be removed from the list.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>if items can be removed; otherwise, 
 <see langword="false"/>.</para>
		</value>
		<remarks>
			<note type="note">
       This property is designed to allow
       the <see cref="System.Windows.Forms.DataGrid"/> control to
       determine when removals from the list are possible. For example, you cannot remove an item
       from an array because its length is fixed when it is created.
    </note>
			<para>You typically use this property only if you are creating your own control 
       incorporating the <see cref="System.Windows.Forms.ListManager"/>. Otherwise, if the data source is a <see cref="T:System.Data.DataView"/>, use
       the <see cref="M:System.Data.DataView.Delete"/> method; if the data source is a <see cref="T:System.Data.DataTable"/>, use
       the <see cref="M:System.Data.RowsCollection.Remove"/> method of the <see cref="T:System.Data.RowsCollection"/>.</para>
		</remarks>
		<example>
			<para>The following example checks the <see cref="System.Windows.Forms.ListManager.AllowRemove"/> property before editing an item.</para>
			<codelink SampleID="Classic CurrencyManager.AllowRemove Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.DataSource">
		<summary>
			<para>Gets the data source of the list.</para>
		</summary>
		<value>
			<para>The data source of the list, typed as <see cref="System.Object"/>.</para>
		</value>
		<remarks>
			<para>Possible data sources include:</para>
			<list type="bullet">
				<item>
					<term>
						<see cref="T:System.Data.DataTable"/>
					</term>
				</item>
				<item>
					<term>
						<see cref="T:System.Data.DataView"/>
					</term>
				</item>
				<item>
					<term>
						<see cref="T:System.Data.DataSet"/>
					</term>
				</item>
				<item>
					<term>
						<see cref="T:System.Data.DataSetView"/>
					</term>
				</item>
				<item>
					<term>
          Single dimension arrays</term>
				</item>
				<item>
					<term>
          Any component that implements the <see cref="T:System.Data.IListSource"/> interface.</term>
				</item>
				<item>
					<term>
          Any component that implements the <see cref="T:System.Collections.IList"/> interface.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example gets the <see cref="System.Windows.Forms.ListManager"/> of a bound <see cref="System.Windows.Forms.TextBox"/> 
 control, then prints the data source's data type. </para>
			<codelink SampleID="Classic CurrencyManager.DataSource Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.IsBinding">
		<summary>
			<para>Gets a value indicating whether the list is bound to a data source.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the list is bound to a data 
    source; otherwise, <see langword="false"/> .</para>
		</value>
		<example>
			<para>The following example uses the IsBinding property to determine if a 
       ListManager is bound to any control.</para>
			<codelink SampleID="Classic CurrencyManager.IsBinding Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.this">
		<summary>
			<para>Gets or sets the object at the specified index.</para>
		</summary>
		<param name="index">The index of the list item to return.</param>
		<value>
			<para>A list item, typed as <see cref="System.Object"/> .</para>
		</value>
		<remarks>
			<para>The object returned depends on the data source. For 
       example, if the <see cref="System.Windows.Forms.ListManager.DataSource"/>
       is a <see cref="T:System.Data.DataView"/> or <see cref="T:System.Data.DataTable"/>, the returned object is of type
    <see cref="T:System.Data.DataRowView"/>. If the data source is an array, the object's type is 
       identical to the array's type.</para>
		</remarks>
		<example>
			<para>The following example gets the first <see cref="T:System.Data.DataRowView"/> 
 object in a <see cref="System.Windows.Forms.ListManager"/>. The example presumes that the <see cref="System.Windows.Forms.ListManager"/> is bound to a
 <see cref="T:System.Data.DataView"/>.</para>
			<codelink SampleID="Classic CurrencyManager.this Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListManager.Current"/>
	</doc>
	<doc for="CurrencyManager.SetSort">
		<summary>
			<para>Sets the column to sort by, and the direction of the sort.</para>
		</summary>
		<param name="property">A <see cref="T:System.ComponentModel.PropertyDescriptor" qualify="true"/> which names the column to sort by.</param>
		<param name=" sortDirection">A <see cref="System.Data.SortDirection"/> that specifies the direction of the sort (ascending or descending).</param>
		<remarks>
			<note type="note">
       This property was designed to allow
       the <see cref="System.Windows.Forms.DataGrid"/> control to sort the
       list. It's not recommended that you use this method. Instead, if the data source
       is a <see cref="T:System.Data.DataTable"/> or <see cref="T:System.Data.DataView"/>, use the <see cref="T:System.Data.DataView"/> class's <see cref="P:System.Data.DataView.Sort"/> property.
    </note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListManager.GetItemProperties"/> method to return a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> object for 
    a list. The <see cref="System.Windows.Forms.ListManager.SetSort"/> method is then used to set the sort
    direction of the column named "CompanyName" in the list.</para>
			<codelink SampleID="Classic CurrencyManager.SetSort Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListManager.GetSortProperty"/>
		<seealso cref="System.Windows.Forms.ListManager.GetItemProperties"/>
		<seealso cref="T:System.ComponentModel.PropertyDescriptorCollection"/>
	</doc>
	<doc for="CurrencyManager.GetSortProperty">
		<summary>
			<para>Gets a <see cref="System.ComponentModel.PropertyDescriptor"/> for a <see cref="System.Windows.Forms.ListManager"/>.</para>
		</summary>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptor"/> for the <see cref="System.Windows.Forms.ListManager"/> .</para>
		</returns>
		<remarks>
			<note type="note">
       This property, with the <see cref="System.Windows.Forms.ListManager.SetSort"/> method, was designed to allow the <see cref="System.Windows.Forms.DataGrid"/>
       control to sort the list. It's not recommended that you use this method.
       Instead, if the data source is a <see cref="T:System.Data.DataTable"/> or <see cref="T:System.Data.DataView"/>, use
       the <see cref="T:System.Data.DataView"/> class's <see cref="P:System.Data.DataView.Sort"/> property.
    </note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListManager.GetSortProperty"/> method to return the <see cref="T:System.ComponentModel.PropertyDescriptor"/> object for a <see cref="System.Windows.Forms.ListManager"/>. 
    The name of the bound column is then printed.</para>
			<codelink SampleID="Classic CurrencyManager.GetSortProperty Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListManager.SetSort"/>
		<seealso cref="System.Windows.Forms.ListManager.GetSortDirection"/>
	</doc>
	<doc for="CurrencyManager.GetSortDirection">
		<summary>
			<para>Gets the sort direction of a list.</para>
		</summary>
		<returns>
			<para>The sort direction.</para>
		</returns>
		<remarks>
			<note type="note">
       This property, with the <see cref="System.Windows.Forms.ListManager.SetSort"/> method, was designed to allow the <see cref="System.Windows.Forms.DataGrid"/>
       control to sort the list. It's not recommended that you use this method.
       Instead, if the data source is a <see cref="T:System.Data.DataTable"/> or <see cref="T:System.Data.DataView"/>, use
       the <see cref="T:System.Data.DataView"/> class's <see cref="P:System.Data.DataView.Sort"/> property.
    </note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListManager.GetSortDirection"/> method to return the <see cref="T:System.Data.SortDirection"/> of 
    a <see cref="System.Windows.Forms.ListManager"/>.</para>
			<codelink SampleID="Classic CurrencyManager.GetSortDirection Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.Find">
		<summary>
			<para>Find the position of a desired list item.</para>
		</summary>
		<param name="property">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that specifies the column to search.</param>
		<param name=" key">The value to search for, typed as <see cref="System.Object"/>.</param>
		<param name=" keepIndex">A boolean value indicating whether to keep the index on the <see cref="T:System.ComponentModel.PropertyDescriptor"/> object for fast lookup. The data source must implement <see cref="T:System.Data.IIndexedList"/>. The <see cref="T:System.Data.DataView"/> class implements <see cref="T:System.Data.IIndexedList"/>.</param>
		<returns>
			<para>The position of the found list item. If no match is 
       found, -1 is returned.</para>
		</returns>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListManager.Find"/> 
 property to find the index of a list using a specified value in a given
 column.</para>
			<codelink SampleID="Classic CurrencyManager.Find Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.GetListName">
		<overload>
			<para>Gets the name of the list.</para>
		</overload>
		<summary>
			<para>Gets the name of the list.</para>
		</summary>
		<returns>
			<para>The name of the list.</para>
		</returns>
		<remarks>
			<para>The name of a list depends on the data source. For 
       example, of the data source is a <see cref="T:System.Data.DataTable"/>, <see cref="System.Windows.Forms.ListManager.GetListName"/>
       will return the
       table name.</para>
		</remarks>
		<example>
			<para>The following example gets the name of the table the <see cref="System.Windows.Forms.ListManager"/> 
 manages.</para>
			<codelink SampleID="Classic CurrencyManager.GetListName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.List_ListChanged">
		<summary>
			<para>Gets the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> for the specified list.</para>
		</summary>
		<param name="listAccessors">An <see cref="System.Collections.ArrayList"/> that contains the list.</param>
		<returns>
			<para>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> for the list.</para>
		</returns>
		<remarks>
			<para>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> for the <see cref="System.Windows.Forms.ListManager"/> is 
    used to specify a column in the list. The resulting <see cref="T:System.ComponentModel.PropertyDescriptor"/> can be then used in the <see cref="System.Windows.Forms.ListManager.SetSort"/> and <see cref="System.Windows.Forms.ListManager.Find"/> methods.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.ListManager.GetItemProperties"/> method to return 
    a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> object for
    a list. The <see cref="System.Windows.Forms.ListManager.SetSort"/> method is then
    used to set the sort direction of the column named "CompanyName."</para>
			<codelink SampleID="Classic CurrencyManager.List_ListChanged Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ListManager.Find"/>
		<seealso cref="System.Windows.Forms.ListManager.SetSort"/>
	</doc>
	<doc for="CurrencyManager.OnItemChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.CurrencyManager.ItemChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="T:System.Windows.Forms.ItemChangedEventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.CurrencyManager.ItemChanged"/>
	</doc>
	<doc for="CurrencyManager.ResumeBinding">
		<summary>
			<para>Resumes binding of component properties to list items.</para>
		</summary>
	</doc>
	<doc for="CurrencyManager.SuspendBinding">
		<summary>
			<para>Suspends binding.</para>
		</summary>
	</doc>
	<doc for="CurrencyManager.listposition">
		<summary>
			<para>Specifies that there are no list members.</para>
		</summary>
	</doc>
	<doc for="CurrencyManager.GetListName1">
		<nodoc/>
		<summary>
			<para>Gets the name of the specified list.</para>
		</summary>
		<param name="listAccessors">The list, typed as <see cref="System.Collections.ArrayList"/> , that you are interested in.</param>
		<returns>
			<para>The name of the list.</para>
		</returns>
	</doc>
	<doc for="CurrencyManager.OnPositionChanged">
		<nodoc/>
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
	</doc>
	<doc for="CurrencyManager.UpdateIsBinding">
		<nodoc/>
		<summary>
			<para>Updates the status of the binding.</para>
		</summary>
	</doc>
	<doc for="CurrencyManager.Current">
		<nodoc/>
		<summary>
			<para>Gets the current item in the list.</para>
		</summary>
		<value>
			<para>A list item, typed as <see cref="System.Object"/>.</para>
		</value>
		<remarks>
			<para>In order to get the current item, you must know its data type in order to
      cast it correctly. For example, if the data source is a <see cref="System.Data.DataView"/> or
   <see cref="System.Data.DataTable"/>, you must cast the current item as a <see cref="T:System.Data.DataRowView"/>
   object.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.CurrencyManager.Current"/> property to print 
<see langword="ContactName "/> field
   for the the current item in the list.</para>
			<codelink SampleID="Classic CurrencyManager.Current Example" SnippetID="1"/>
		</example>
		<seealso cref="T:System.Data.DataRowView"/>
	</doc>
	<doc for="CurrencyManager.Count">
		<nodoc/>
		<summary>
			<para>Gets the number of items in the list.</para>
		</summary>
		<value>
			<para>The number of items in the list.</para>
		</value>
		<remarks>
			<para>Use the count property to determine when the end of a
      list has been reached. Because the <see cref="System.Windows.Forms.CurrencyManager"/> maintains a 0-based array of
      items, the end of the list is always <see cref="System.Windows.Forms.CurrencyManager.Count"/>
      minus one.</para>
		</remarks>
		<example>
			<para>The following example iterates through the list until the
      final item, determined by the <see cref="System.Windows.Forms.CurrencyManager.Count"/> property, is reached.</para>
			<codelink SampleID="Classic CurrencyManager.Count Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.Position">
		<nodoc/>
		<summary>
			<para> Gets or sets the position you are at within the list.</para>
		</summary>
		<value>
			<para>A number between 0 and <see cref="System.Windows.Forms.CurrencyManager.Count"/> minus one.</para>
		</value>
		<remarks>
			<para>An important property of the <see cref="System.Windows.Forms.CurrencyManager"/> is the <see cref="System.Windows.Forms.CurrencyManager.Position"/> property. In a list of items, you
   can only view one item out of the entire list. To determine which item is
   viewed, set the <see cref="System.Windows.Forms.CurrencyManager.Position"/> to a number between 0 (the beginning of the list)
   and <see cref="System.Windows.Forms.CurrencyManager.Count"/>
   minus one (the
   end of the list).</para>
			<para>Therefore, the <see cref="System.Windows.Forms.CurrencyManager.Position"/> determines the
currency, or place in the list, of all controls bound to the same <see cref="System.Windows.Forms.CurrencyManager"/> .
For example, imagine a list consisting of two columns called "FirstName," and
"LastName." Two <see cref="System.Windows.Forms.TextBox"/> controls are bound to the same list; the first control is
bound to the first column, and the second control is bound to the second column. When
the <see cref="System.Windows.Forms.CurrencyManager.Position"/> of the common <see cref="System.Windows.Forms.CurrencyManager"/> is set to the third position, both controls
display the appropriate values for that position in the list. In other words, if
the item at position three consists of
the first name "John" and the last name "Smith," the bound controls will
display "John" and "Smith."</para>
		</remarks>
		<example>
			<para>The following examples use the <see cref="System.Windows.Forms.CurrencyManager.Position"/> property to allow navigation
   through a list.</para>
			<codelink SampleID="Classic CurrencyManager.Position Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.GetItemProperties">
		<nodoc/>
		<overload>
			<para>Gets the <see cref="System.ComponentModel.PropertyDescriptorCollection"/> for the list.</para>
		</overload>
		<summary>
			<para>Gets the <see cref="System.ComponentModel.PropertyDescriptorCollection"/> for
   the list.</para>
		</summary>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptorCollection"/> for the list.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.ComponentModel.PropertyDescriptorCollection"/> for the <see cref="System.Windows.Forms.CurrencyManager"/> is used to
   specify a column in the
   list.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.CurrencyManager.GetItemProperties"/> method to return
   a <see cref="System.ComponentModel.PropertyDescriptorCollection"/> object for a
   BindingContextBase. The example then prints out the <see cref="System.ComponentModel.MemberDescriptor.Name"/> and <see cref="System.ComponentModel.PropertyDescriptor.PropertyType"/> of each <see cref="System.ComponentModel.PropertyDescriptor"/>
   in the collection.</para>
			<codelink SampleID="Classic CurrencyManager.GetItemProperties Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CurrencyManager.OnCurrentChanged">
		<nodoc/>
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/> event. </para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.BindingManagerBase.CurrentChanged"/>
	</doc><doc for="CurrencyManager.CancelCurrentEdit">
		<summary>
			<para>Cancels the current edit operation.</para>
		</summary>
		<remarks>
			<para>This method is supported only if the objects contained by the data source implement the <see cref="System.ComponentModel.IEditableObject"/> interface. If the objects contained
   within the data source do not implement the <see cref="System.ComponentModel.IEditableObject"/> interface, changes made to the data will
   not be discarded.</para>
			<note type="note">
   This property was designed
   to be used by complex-bound controls,
   such as the <see cref="System.Windows.Forms.DataGrid"/> control, to cancel
   edits. For example, when the Esc key is pressed, the <see cref="System.Windows.Forms.CurrencyManager.CancelCurrentEdit"/> method
   is called on the <see cref="System.Windows.Forms.CurrencyManager"/> for the
<see cref="System.Windows.Forms.DataGrid"/>. Unless you are creating a
   control that requires this same functionality, it is not recommended that you use this method.
   Instead, use the <see cref="T:System.Data.DataRowView"/> class's <see cref="M:System.Data.DataRowView.CancelEdit"/>.
   
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.CurrencyManager.CancelCurrentEdit"/> when
   the user presses the escape key.</para>
			<codelink SampleID="Classic CurrencyManager.CancelCurrentEdit Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.CurrencyManager.EndCurrentEdit"/>
	</doc><doc for="CurrencyManager.RemoveAt">
		<summary>
			<para>Removes the item at the specified index.</para>
		</summary>
		<param name="index">The index of the item to remove from the list.</param>
		<exception cref="System.IndexOutOfRangeException">There is no row at the specified <paramref name="index"/>.</exception>
		<remarks>
			<note type="note">
      This method was designed
      to allow complex controls, such as
      the <see cref="System.Windows.Forms.DataGrid"/>
      control, to remove items from the list. It is not
      recommended that you use this method to actually remove items. Instead, use the
   <see cref="M:System.Data.DataView.Delete"/> method of the <see cref="System.Data.DataView"/> class to delete items.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.CurrencyManager.RemoveAt"/> method to remove the item at
   position 0 in the list.</para>
			<codelink SampleID="Classic CurrencyManager.RemoveAt Example" SnippetID="1"/>
		</example>
	</doc><doc for="CurrencyManager.EndCurrentEdit">
		<summary>
			<para>Ends the current edit operation.</para>
		</summary>
		<remarks>
			<para>This method is supported only if the objects contained by the data source
      implement the <see cref="System.ComponentModel.IEditableObject"/>
      interface.</para>
			<note type="note">
      This property was designed to be used by
      complex-bound controls, such as the <see cref="System.Windows.Forms.DataGrid"/> control, to cancel
      edits. Unless you are creating a control that requires this same
      functionality, it is not recommended that you use this method. Instead, if the data
      source is either a <see cref="System.Data.DataView"/> or <see cref="System.Data.DataTable"/>, use the<see cref="T:System.Data.DataRowView"/> class's <see cref="M:System.Data.DataRowView.EndEdit"/> method.
      
      </note>
		</remarks>
		<example>
			<codelink SampleID="Classic CurrencyManager.EndCurrentEdit Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.CurrencyManager.CancelCurrentEdit"/>
	</doc><doc for="CurrencyManager.Refresh">
		<summary>
			<para>Forces a repopulation of the bound controls.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Windows.Forms.CurrencyManager.Refresh"/> method when the data source
   doesn't support notification when it is changed, for example an <see cref="System.Array"/>
   .</para>
		</remarks>
		<example>
			<para>The following example creates an array and binds it to a
   <see cref="System.Windows.Forms.TextBox"/> control, then changes one value. The <see cref="System.Windows.Forms.CurrencyManager.Refresh"/> method can be called to update the value
      displayed by the <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic CurrencyManager.Refresh Example" SnippetID="1"/>
		</example>
	</doc><doc for="CurrencyManager.finalType">
		<nodoc/>
		<summary>
			<para>Specifies the data type of the list.</para>
		</summary>
		<example>
		</example>
		<seealso cref="T:System.ComponentModel.PropertyDescriptorCollection"/>
	</doc><doc for="CurrencyManager.List">
		<summary>
			<para>Gets the list for this <see cref="System.Windows.Forms.CurrencyManager"/> .</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IList"/> object that contains the list.</para>
		</value>
		<remarks>
			<para>The object returned by the <see cref="System.Windows.Forms.CurrencyManager.List"/> property can be
   cast to any type that implments the <see cref="System.Collections.IList"/> interface. This will be
   commonly used when you know the type of the underlying list. For example, if you
   are data bound to a <see cref="System.Data.DataSet"/>, the underlying list is a <see cref="System.Data.DataView"/> (which
   implements <see cref="System.Collections.IList"/>). Other classes that implement the interface
   (this is not a complete list) include: <see cref="System.Array"/>, <see cref="System.Collections.ArrayList"/>, and <see cref="System.Collections.CollectionBase"/>
   
   .</para>
			<para>How you use the <see cref="System.Windows.Forms.CurrencyManager.List"/> property depends on the class that
implements the <see cref="System.Collections.IList"/>
interface. For example, you can use the <see cref="System.Windows.Forms.CurrencyManager.List"/> property to determine the name of the
list. If the data source implements the <see cref="System.ComponentModel.ITypedList"/> interface, you can use
the <see cref="System.ComponentModel.ITypedList.GetListName"/>
method to return the name of the current table. This is shown in the C# code below:</para>
			<code>
private void PrintCurrentListName(DataGrid myDataGrid){ 
   CurrencyManager myCM = (CurrencyManager) 
   BindingContext[myDataGrid.DataSource, myDataGrid.DataMember]; 
   IList myList = myCM.List; 
   ITypedList thisList = (ITypedList) myList; 
   Console.WriteLine(thisList.GetListName(null)); 
}
</code>
		</remarks>
		<example>
			<para> The following example allow users to edit a set of
      records, but not add any new ones. In the <see cref="System.Windows.Forms.DataGrid.Navigate"/> event of a <see cref="System.Windows.Forms.DataGrid"/>
      
      control, the <see cref="System.Collections.IList"/>
      returned by the <see cref="System.Windows.Forms.CurrencyManager.List"/> property is cast to a <see cref="System.Data.DataView"/>
      variable. The <see cref="System.Data.DataView"/> object's <see cref="System.Data.DataView.AllowNew"/> is set to
   <see langword="false"/>.</para>
			<codelink SampleID="CurrencyManager.List Example" SnippetID="1"/>
		</example>
	</doc><doc for="CurrencyManager.AddNew">
		<summary>
			<para>Adds a new item to the underlying list.</para>
		</summary>
		<exception cref="System.NotSupportedException">The underlying data source does not implement <see cref="System.ComponentModel.IBindingList"/>, or the data source has thrown an exception because the user has attempted to add a row to a read-only <see cref="System.Data.DataView"/> .</exception>
		<remarks>
			<para>This method is only supported if the data source implements <see cref="System.ComponentModel.IBindingList"/> and the data 
   source allows adding rows.</para>
			<note type="note">
   This property was designed
   to allow complex-bound controls, such as
   the <see cref="System.Windows.Forms.DataGrid"/> control, to add new items to list.
   
</note>
			<para>You typically use this property only if you are creating your own control
   incorporating the <see cref="System.Windows.Forms.CurrencyManager"/>. Otherwise, to add items, if the data source is
   a <see cref="System.Data.DataView"/>, use the <see cref="M:System.Data.DataView.AddNew"/> method of the <see cref="System.Data.DataView"/> class. If the data
   source is a <see cref="System.Data.DataTable"/>, use the <see cref="M:System.Data.DataTable.NewRow"/> method and add the row to the <see cref="System.Data.DataRowCollection"/>.</para>
		</remarks>
		<example>
			<para>The following example
      adds a new item to the list with the <see cref="System.Windows.Forms.CurrencyManager.AddNew"/> method.</para>
			<codelink SampleID="Classic CurrencyManager.AddNew Example" SnippetID="1"/>
		</example>
	</doc><doc for="CurrencyManager.CheckEmpty">
		<summary>
			<para>Throws an exception if there is no list, or the list is empty.</para>
		</summary>
		<exception cref="System.Exception">There is no list, or the list is empty.</exception>
	</doc><doc for="CurrencyManager.ItemChanged">
		<summary>
			<para>Occurs when the
      current item has been
      altered.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CurrencyManager.ItemChanged"/> event will occur when the
   user calls the <see cref="System.Windows.Forms.BindingManagerBase.ResumeBinding"/> or <see cref="System.Windows.Forms.BindingManagerBase.SuspendBinding"/> method. </para>
			<para>The <see cref="System.Windows.Forms.CurrencyManager.ItemChanged"/> event occurs only when the item itself has
been changed in some manner. For example, if the value of an item is changed
from "10" to "42" the event will occur. This shouldn't be confused with the
<see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/> event where the item has been changed to a
new item.</para>
			<para>The event will also occur if the underlying data changes. For example, if you
   change the value of a <see cref="System.Data.DataRowView"/>
   , the <see cref="System.Windows.Forms.CurrencyManager.ItemChanged"/> event will occur.</para>
			<note type="note">
   If you are creating your own control
   that uses the <see cref="System.Windows.Forms.CurrencyManager"/>, you should use the <see cref="System.ComponentModel.IBindingList.ListChanged"/> event of the <see cref="System.ComponentModel.IBindingList"/> class instead
   of the <see cref="System.Windows.Forms.CurrencyManager.ItemChanged"/> event.
   The <see cref="System.ComponentModel.ListChangedEventArgs.ListChangedType"/> property of the <see cref="System.ComponentModel.ListChangedEventArgs"/> object enables you to determine the
   type of action that has occurred.
</note>
		</remarks>
		<example>
			<para>The following example adds event handlers for the <see cref="System.Windows.Forms.CurrencyManager.ItemChanged"/> and <see cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/> events.</para>
			<codelink SampleID="Classic CurrencyManager.ItemChanged Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingManagerBase.PositionChanged"/>
	</doc><doc for="CurrencyManager">
		<summary>
			<para> Manages a list of <see cref="System.Windows.Forms.Binding"/>
objects.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.CurrencyManager"/> derives from the <see cref="System.Windows.Forms.BindingManagerBase"/> class. Use the
<see cref="System.Windows.Forms.BindingContext"/> 
to return either a <see cref="System.Windows.Forms.CurrencyManager"/> or a <see cref="System.Windows.Forms.PropertyManager"/>. The actual object returned depends on the
data source and data member passed to the <see cref="System.Windows.Forms.BindingContext.this"/> property of the <see cref="System.Windows.Forms.BindingContext"/>. If the data source is an object that can
only return a single property (instead of a list of objects), the type will be a
<see cref="System.Windows.Forms.PropertyManager"/>. For example, if you specify a <see cref="System.Windows.Forms.TextBox"/> as 
the data source, a <see cref="System.Windows.Forms.PropertyManager"/> will be returned. If, on the other hand,
the data source is an object that implements <see cref="System.Collections.IList"/> , <see cref="System.ComponentModel.IListSource"/>, or <see cref="System.ComponentModel.IBindingList"/>, a <see cref="System.Windows.Forms.CurrencyManager"/> will be
returned. </para>
			<para>The <see cref="System.Windows.Forms.BindingManagerBase.Current"/> property returns the
current item in the underlying list. To change the current item, set the <see cref="System.Windows.Forms.BindingManagerBase.Position"/> property to a new value. The value must be greater than
0, and must be less than the value of the <see cref="System.Windows.Forms.BindingManagerBase.Count"/>
property.</para>
			<para>If the underlying data source implements the <see cref="System.ComponentModel.IBindingList"/> interface, and the <see cref="System.ComponentModel.IBindingList.AllowNew"/> property is set to <see langword="true"/>,
you can use the <see cref="System.Windows.Forms.CurrencyManager.AddNew"/>
method.</para>
		</remarks>
		<example>
			<para>The following example binds a <see cref="System.Windows.Forms.TextBox"/> control to a column in a <see cref="System.Data.DataTable"/> , gets the <see cref="System.Windows.Forms.CurrencyManager"/>
for the binding, and sets its position.</para>
			<codelink SampleID="Classic CurrencyManager Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.BindingsCollection"/>
		<seealso cref="System.Windows.Forms.BindingContext"/>
		<seealso cref="System.Windows.Forms.Binding"/>
	</doc>
	<doc for="CurrencyManager.MetaDataChanged">
		<summary>
			<para>Occurs when the metadata of the <see cref="System.Windows.Forms.CurrencyManager.List"/> has changed.</para>
		</summary>
		<remarks>
			<para>The metadata of the <see cref="System.Windows.Forms.CurrencyManager.List"/> consists of the schema of 
   the underlying <see cref="System.Windows.Forms.Binding.DataSource" qualify="true"/>. The <see cref="System.Windows.Forms.CurrencyManager.MetaDataChanged"/> event is raised when that schema has
   changed. For example, the <see cref="System.Windows.Forms.CurrencyManager.MetaDataChanged"/> event is raised when a
<see cref="T:System.Data.DataColumn"/> 
is programmatically added to a <see cref="T:System.Data.DataTable"/>.</para>
			<para>For more information about handling events, see 
<see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="T:System.Collections.IList"/>
	</doc>
</docs>
