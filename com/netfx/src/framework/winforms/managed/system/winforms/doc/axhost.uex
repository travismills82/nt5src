<docs>
	<doc for="AxHost.State.State"><nodoc/>
	</doc><doc for="AxHost.State.State1"><nodoc/>
	</doc><doc for="AxHost.State.Type"><nodoc/>
	</doc><doc for="IPeerInformation.Request"><nodoc/>
	</doc><doc for="AxImporter.TypeLibraryTimeStampAttribute"><nodoc/>
	</doc><doc for="AxHost.AxFlags.PreventEditMode"><nodoc/>
		<summary>
   Indicates that the context menu for the control should not contain an
   "Edit" verb unless the activeX controls itself decides to proffer it.
   By default, all wrapped activeX controls will contain an edit verb.
   </summary>
	</doc><doc for="AxHost.AxFlags.IncludePropertiesVerb">
		<nodoc/>
		<summary>
			<para>Indicated that the context menu for the control should contain
      a "Properties..." verb which may be used to show the property
      pages for the control. Note that even if this flag is
      specified, the verb will not appear unless the control
      proffers a set of property pages.
      [Since most activeX controls alreay have their own properties verb
      on the context menu, the default is not to include one specified by
      this flag.]</para>
		</summary>
	</doc><doc for="AxHost.AxHost"><nodoc/>
		<summary>
			<para>Creates a new instance of a control which wraps an activeX control given by the
      clsid parameter and flags of 0.</para>
		</summary>
	</doc><doc for="Control.DefaultSize"><nodoc/>
	</doc><doc for="AxHost.Begin"><nodoc/>
		<summary>
			<para>Signals the object that loading of all peer components and property
      sets are complete.
      It should be possible to invoke any property get or set after calling this method.
      Note that a sideeffect of this method is the creation of the parent control's
      handle, therefore, this control must be parented before begin is called
      </para>
		</summary>
	</doc><doc for="AxHost.OcxFlags"><nodoc/>
		<summary>
   Retrieves the OCX control flags.
   </summary>
	</doc><doc for="AxHost.ContainingForm"><nodoc/>
		<summary>
   Returns this control's logicaly containing form.
   At design time this is always the form being designed.
   At runtime it is either the form set with setContainingForm or,
   by default, the parent form.
   Sets the form which is the logical container of this control.
   By default, the parent form performs that function.  It is
   however possible for another form higher in the parent chain
   to serve in that role.  The logical container of this
   control determines the set of logical sibling control.
   In general this property exists only to enable some speficic
   behaviours of ActiveX controls and should in general not be set
   by the user.
   </summary>
		<returns>
   the control's containing form.
   </returns>
	</doc><doc for="AxHost.ShouldSerializeContainingForm"><nodoc/>
		<summary>
   Determines whether to persist the ContainingForm property.
   </summary>
		<returns>
   true only is the containing form is different from the parent form.
   </returns>
	</doc><doc for="AxHost.GetAttributes"><nodoc/>
	</doc><doc for="AxHost.GetClassName"><nodoc/>
		<summary>
   Retrieves the class name for this object.  If null is returned,
   the type name is used.
   </summary>
		<returns>
   The class name for the object, or null if the default will be used.
   </returns>
	</doc><doc for="AxHost.GetComponentName"><nodoc/>
		<summary>
   Retrieves the name for this object.  If null is returned,
   the default is used.
   </summary>
		<returns>
   The name for the object, or null if the default will be used.
   </returns>
	</doc><doc for="AxHost.GetConverter"><nodoc/>
		<summary>
   Retrieves the type converter for this object.
   </summary>
		<returns>
   A TypeConverter.  If null is returned, the default is used.
   </returns>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="AxHost.GetDefaultEvent"><nodoc/>
	</doc><doc for="AxHost.GetDefaultProperty"><nodoc/>
	</doc><doc for="AxHost.GetEditor"><nodoc/>
		<summary>
   Retrieves the an editor for this object.
   </summary>
		<returns>
   An editor of the requested type, or null.
   </returns>
		<seealso cref="System.ComponentModel.ICustomTypeDescriptor"/>
	</doc><doc for="AxHost.GetEvents"><nodoc/>
	</doc><doc for="AxHost.GetEvents1"><nodoc/>
	</doc><doc for="AxHost.GetProperties1"><nodoc/>
	</doc><doc for="AxHost.GetPropertyOwner"><nodoc/>
	</doc><doc for="AxHost.AxFlags.IgnoreThreadModel">
	</doc><doc for="AxHost.RaiseOnClick">
	</doc><doc for="AxHost.RaiseOnDblClick">
	</doc><doc for="AxHost.RaiseOnKeyDown">
	</doc><doc for="AxHost.RaiseOnKeyDown1">
	</doc><doc for="AxHost.RaiseOnKeyDown2">
	</doc><doc for="AxHost.RaiseOnKeyUp">
	</doc><doc for="AxHost.RaiseOnKeyUp1">
	</doc><doc for="AxHost.RaiseOnKeyUp2">
	</doc><doc for="AxHost.RaiseOnKeyPress">
	</doc><doc for="AxHost.RaiseOnKeyPress1">
	</doc><doc for="AxHost.IPeerInformation">
	</doc><doc for="AxHost.AxFlags"><nodoc/>
	</doc><doc for="AxHost.ConnectionPointCookie.ConnectionPointCookie1"><nodoc/>
	</doc><doc for="AxHost.ConnectionPointCookie.Disconnect1"><nodoc/>
	</doc><doc for="AxHost.ShouldSerializeContainingControl">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.AxHost.ContainingControl"/> property should be persisted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the property value has changed from its default; 
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
   <see cref="System.Windows.Forms.AxHost"/> or creating your own control incorporating 
      the <see cref="System.Windows.Forms.AxHost"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.ContainingControl"/>
	</doc><doc for="Control.IsInputKey">
	</doc><doc for="AxHost.Enter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AxHost.Leave">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="AxHost.AxHost1">
		<nodoc/>
	</doc><doc for="AxHost.AxHost2">
		<nodoc/>
	</doc><doc for="AxHost.CreateParams">
		<nodoc/>
	</doc><doc for="AxHost.BackColor">
		<nodoc/>
	</doc><doc for="AxHost.BackgroundImage">
		<nodoc/>
	</doc><doc for="AxHost.Cursor">
		<nodoc/>
	</doc><doc for="AxHost.ContextMenu">
		<nodoc/>
	</doc><doc for="AxHost.DefaultSize">
		<nodoc/>
	</doc><doc for="AxHost.Font">
		<nodoc/>
	</doc><doc for="AxHost.ForeColor">
		<nodoc/>
	</doc><doc for="AxHost.Text">
		<nodoc/>
	</doc><doc for="AxHost.PropsValid">
		<nodoc/>
	</doc><doc for="AxHost.EditMode">
		<nodoc/>
	</doc><doc for="AxHost.OnFontChanged">
		<nodoc/>
	</doc><doc for="AxHost.OnForeColorChanged">
		<nodoc/>
	</doc><doc for="AxHost.OnBackColorChanged">
		<nodoc/>
	</doc><doc for="AxHost.Site">
		<nodoc/>
	</doc><doc for="AxHost.CreateHandle">
		<nodoc/>
	</doc><doc for="AxHost.SetBoundsCore">
		<nodoc/>
	</doc><doc for="AxHost.DestroyHandle">
		<nodoc/>
	</doc><doc for="AxHost.SetVisibleCore">
		<nodoc/>
	</doc><doc for="AxHost.PreProcessMessage">
		<nodoc/>
	</doc><doc for="AxHost.ProcessMnemonic">
		<nodoc/>
	</doc><doc for="AxHost.DoVerb">
		<nodoc/>
	</doc><doc for="AxHost.InvokeEditMode">
		<nodoc/>
	</doc><doc for="AxHost.CreateSink">
		<nodoc/>
	</doc><doc for="AxHost.DetachSink">
		<nodoc/>
	</doc><doc for="AxHost.MakeDirty">
		<nodoc/>
	</doc><doc for="AxHost.WndProc">
		<nodoc/>
	</doc><doc for="AxHost.OnHandleCreated">
		<nodoc/>
	</doc><doc for="AxHost.ClsidAttribute">
		<nodoc/>
	</doc><doc for="AxHost.ClsidAttribute.ClsidAttribute"><nodoc/>
	</doc><doc for="AxHost.ClsidAttribute.Value">
		<nodoc/>
	</doc><doc for="TypeLibraryTimeStampAttribute">
		<nodoc/>
	</doc><doc for="AxImporter.TypeLibraryTimeStampAttribute.TypeLibraryTimeStampAttribute">
		<nodoc/>
	</doc><doc for="AxImporter.TypeLibraryTimeStampAttribute.Value">
		<nodoc/>
	</doc><doc for="AxHost.ConnectionPointCookie">
		<nodoc/>
	</doc><doc for="AxHost.ConnectionPointCookie.ConnectionPointCookie">
		<nodoc/>
	</doc><doc for="AxHost.ConnectionPointCookie.Disconnect">
		<nodoc/>
	</doc><doc for="AxHost.ConnectionPointCookie.Finalize">
	</doc><doc for="AxHost.Dispose">
		<nodoc/>
	</doc><doc for="AxHost.GetIPictureFromPicture">
		<nodoc/>
	</doc><doc for="AxHost.GetIPictureFromCursor">
		<nodoc/>
	</doc><doc for="AxHost.GetIPictureDispFromPicture">
		<nodoc/>
	</doc><doc for="AxHost.GetPictureFromIPicture">
		<nodoc/>
	</doc><doc for="AxHost.GetPictureFromIPictureDisp">
		<nodoc/>
	</doc><doc for="AxHost.GetColorFromOleColor">
		<nodoc/>
	</doc><doc for="AxHost.GetOleColorFromColor">
		<nodoc/>
	</doc><doc for="AxHost.GetIFontFromFont">
		<nodoc/>
	</doc><doc for="AxHost.GetFontFromIFont">
		<nodoc/>
	</doc><doc for="AxHost.GetIFontDispFromFont">
		<nodoc/>
	</doc><doc for="AxHost.GetFontFromIFontDisp">
		<nodoc/>
	</doc><doc for="AxHost.GetOADateFromTime">
		<nodoc/>
	</doc><doc for="AxHost.GetTimeFromOADate">
		<nodoc/>
	</doc><doc for="AxHost.RaiseOnMouseMove">
	</doc><doc for="AxHost.RaiseOnMouseMove1">
	</doc><doc for="AxHost.RaiseOnMouseMove2">
	</doc><doc for="AxHost.RaiseOnMouseUp">
	</doc><doc for="AxHost.RaiseOnMouseUp1">
	</doc><doc for="AxHost.RaiseOnMouseUp2">
	</doc><doc for="AxHost.RaiseOnMouseDown">
	</doc><doc for="AxHost.RaiseOnMouseDown1">
	</doc><doc for="AxHost.RaiseOnMouseDown2">
	</doc><doc for="AxHost.State.State2">
		<nodoc/>
	</doc><doc for="AxHost.AxComponentEditor">
		<nodoc/>
	</doc><doc for="AxHost.AxComponentEditor.EditComponent">
		<nodoc/>
	</doc><doc for="AxHost.ContainingControl">
		<summary>
			<para>Gets or sets the control that represents the parent of the ActiveX
      control. </para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.ContainerControl"/> that represents the parent of the
   ActiveX control. </para>
		</value>
		<seealso cref="System.Windows.Forms.AxHost.ShouldSerializeContainingControl"/>
	</doc><doc for="AxHost.OnLostFocus">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="InvalidActiveXStateException.ToString"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ActiveXInvokeKind">
		<summary>
			<para>Specifies the type of member that referenced the ActiveX control while it was in an invalid state.</para>
		</summary>
		<example>
			<para>The <see cref="System.Windows.Forms.AxHost.ActiveXInvokeKind"/> enumeration is used by the 
<see cref="System.Windows.Forms.AxHost.InvalidActiveXStateException"/> exception to specify the type of 
   member that referenced the ActiveX control while it was an invalid state.</para>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.InvalidActiveXStateException"/>
	</doc>
	<doc for="ActiveXInvokeKind.MethodInvoke">
		<summary>
			<para>A method referenced the ActiveX control.</para>
		</summary>
	</doc>
	<doc for="AxHost.ICustomTypeDescriptor.GetEvents(Attribute">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.ICustomTypeDescriptor.GetPropertyOwner">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="State.ISerializable.GetObjectData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.HasPropertyPages">
		<summary>
			<para>Determines if the ActiveX control has a property page.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the ActiveX control has a property page;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Property pages allow an ActiveX control user to view and change ActiveX 
      control properties. These properties are accessed by invoking a control
      properties dialog box, which contains one or more property pages that provide a
      customized, graphical interface for viewing and editing the control properties. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.ShowPropertyPages"/>
	</doc>
	<doc for="AxHost.EndInit">
		<summary>
			<para>Ends the initialization of an ActiveX 
      control.</para>
		</summary>
		<remarks>
			<para>Design environments typically use this method
      to finish the initialization of a component that is used on a form or used by
      another component. The <see cref="System.Windows.Forms.AxHost.EndInit"/> method ends the initialization.
      Using the <see cref="System.Windows.Forms.AxHost.BeginInit"/> and <see cref="System.Windows.Forms.AxHost.EndInit"/> methods prevents
      the control from being
      used before it is fully initialized. The initialization occurs at run time.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.BeginInit"/>
	</doc>
	<doc for="AxHost.IsInputKey">
		<summary>
			<para>Determines whether the specified key is a regular
      input key or a special key that requires preprocessing.</para>
		</summary>
		<param name="keyData">One of the <see cref="System.Windows.Forms.Keys"/> values.</param>
		<returns>
			<para><see langword="true"/> if the specified key is a regular
   input key; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> Call this method during window-message preprocessing to
      determine whether the specified key is a regular input key that should be sent
      directly to the control or a special key (such as PAGE UP or PAGE DOWN) that
      should be preprocessed. In the latter case, send the key to the control only if it is not consumed by the preprocessing phase.</para>
			<para> As implemented in the <see cref="System.Windows.Forms.AxHost"/> class, the <see cref="System.Windows.Forms.AxHost.IsInputKey"/> method always returns
<see langword="false"/> 
.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
	</doc>
	<doc for="AxHost.ShowPropertyPages1">
		<summary>
			<para>Displays the property pages associated with the ActiveX control assigned to
      the specified parent control.</para>
		</summary>
		<param name="control">The parent <see cref="System.Windows.Forms.Control"/> of the ActiveX control.</param>
		<remarks>
			<para>If <see cref="System.Windows.Forms.AxHost.HasPropertyPages"/> is <see langword="false"/>, no
   property pages are displayed.</para>
			<para>Property pages allow an ActiveX control user to view and change ActiveX
   control properties. These properties are accessed by invoking a control
   properties dialog box, which contains one or more property pages that provide a
   customized, graphical interface for viewing and editing the control properties. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control"/>
		<seealso cref="System.Windows.Forms.AxHost.HasPropertyPages"/>
	</doc>
	<doc for="ActiveXInvokeKind.PropertyGet">
		<summary>
			<para>The get accessor of a property referenced the ActiveX control.</para>
		</summary>
	</doc>
	<doc for="ActiveXInvokeKind.PropertySet">
		<summary>
			<para>The set accessor of a property referenced the ActiveX control.</para>
		</summary>
	</doc>
	<doc for="AxHost.GetProperties">
		<nodoc/>
		<internalonly/>
	</doc>
	<doc for="AxHost.IsInputChar">
		<summary>
			<para>Determines if a character is an input character that the ActiveX control recognizes.</para>
		</summary>
		<param name="charCode">The character to test.</param>
		<returns>
			<para><see langword="true"/> if the
   character should be sent directly to the ActiveX control and
   not preprocessed; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AxHost.IsInputChar"/> method is called during window
   message preprocessing to determine whether the given input character should
   be preprocessed or sent directly to the ActiveX control. The preprocessing of a
   character includes checking whether the character is a mnemonic of another
   control.</para>
			<para>As implemented in the <see cref="System.Windows.Forms.AxHost"/> class, the <see cref="System.Windows.Forms.AxHost.IsInputChar"/> method always returns
<see langword="true"/>, so the specified character is sent directly to the 
ActiveX control.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Control.IsInputKey"/>
	</doc>
	<doc for="AxHost.BeginInit">
		<summary>
			<para>Begins the initialization of the ActiveX
      control.</para>
		</summary>
		<remarks>
			<para> Design environments typically use this method to start
      the initialization of a component that is used on a form or used by another
      component. The <see cref="System.Windows.Forms.AxHost.EndInit"/> method ends the initialization. Using the
   <see cref="System.Windows.Forms.AxHost.BeginInit"/> and <see cref="System.Windows.Forms.AxHost.EndInit"/> methods
      prevents the control from being used before it is
      fully initialized. The initialization occurs at run time.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.EndInit"/>
	</doc>
	<doc for="AxHost.ShowAboutBox">
		<summary>
			<para>Displays the ActiveX control's About dialog box.</para>
		</summary>
		<remarks>
			<para>If <see cref="System.Windows.Forms.AxHost.HasAboutBox"/> is
<see langword="false"/> , no About dialog box is displayed.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.HasAboutBox"/>
		<seealso cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/>
		<seealso cref="System.Windows.Forms.AxHost.AboutBoxDelegate"/>
		<keyword term="about dialog box"/>
	</doc>
	<doc for="AxHost.ShowPropertyPages">
		<overload>
			<para>Displays the property pages associated with the ActiveX control.</para>
		</overload>
		<summary>
			<para>Displays the property pages associated with the ActiveX control.</para>
		</summary>
		<remarks>
			<para>If <see cref="System.Windows.Forms.AxHost.HasPropertyPages"/> is
<see langword="false"/>, no property pages are displayed.</para>
			<para>Property pages allow an ActiveX control user to view and change ActiveX
   control properties. These properties are accessed by invoking a control
   properties dialog box, which contains one or more property pages that provide a
   customized, graphical interface for viewing and editing the control properties. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.HasPropertyPages"/>
	</doc>
	<doc for="AxHost.Enabled">
		<summary>
			<para>Gets or sets a value indicating whether the ActiveX
      control is in an enabled state.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the ActiveX control is in
   an enabled state; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<note type="inheritinfo">
      When overriding the
      <see cref="System.Windows.Forms.AxHost.Enabled"/> property in a derived class, use the base
      class's <see cref="System.Windows.Forms.AxHost.Enabled"/> property to extend the base implementation. Otherwise, you must
      provide all the implementation. You are not required to override both the
      <see langword="get"/> and <see langword="set"/> accessors of the
      <see cref="System.Windows.Forms.AxHost.Enabled"/> property; you can override only one if
      needed.
      
      </note>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.EnabledChanged"/>
	</doc>
	<doc for="AxHost.RightToLeft">
		<overload>
			<para>Gets or sets a value indicating whether the ActiveX
      control's elements are aligned to support locales using right-to-left fonts.</para>
		</overload>
		<summary>
			<para> Gets or sets a Boolean value indicating whether ActiveX control's elements are aligned to support locales using right-to-left fonts.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the ActiveX control's elements are aligned to
   support locales using right-to-left fonts; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>As implemented in the <see cref="System.Windows.Forms.AxHost"/> class, the <see cref="System.Windows.Forms.AxHost.RightToLeft"/> property always returns
<see langword="true"/>.</para>
			<para>The <see cref="System.Windows.Forms.AxHost.RightToLeft"/> property is used for international
applications where the language is written from right to left, such as Hebrew or
Arabic. When this property is set to <see langword="true"/>
, control elements that include text are displayed from right to left.</para>
			<note type="inheritinfo">
   When overriding the
<see cref="System.Windows.Forms.AxHost.RightToLeft"/> property in a derived class, use 
   the base class's <see cref="System.Windows.Forms.AxHost.RightToLeft"/> property to extend the base
   implementation. Otherwise, you must provide all the implementation. You are not
   required to override both the <see langword="get"/> and <see langword="set"/>
   accessors of the <see cref="System.Windows.Forms.AxHost.RightToLeft"/> property; you can override only one
   if needed.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.RightToLeft"/>
		<seealso cref="System.Windows.Forms.Control.RightToLeft" qualify="true"/>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateAlignment"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateContent"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateHorizontal"/>
		<seealso cref="System.Windows.Forms.Control.RtlTranslateLeftRight"/>
	</doc>
	<doc for="AxHost.BackColorChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.BackColorChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.BackColorChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.BackgroundImageChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.BackgroundImageChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.BackgroundImageChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.BindingContextChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.BindingContextChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.BindingContextChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.ContextMenuChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.ContextMenuChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.ContextMenuChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.CursorChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.CursorChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.CursorChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.EnabledChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.EnabledChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.EnabledChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.FontChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.FontChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.FontChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.ForeColorChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.ForeColorChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.ForeColorChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.RightToLeftChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.RightToLeftChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.RightToLeftChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.TabIndexChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.TabIndexChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.TabIndexChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.TabStopChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.TabStopChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.TabStopChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.TextChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.TextChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.TextChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.Click">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.Click"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.Click"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.DragDrop">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.DragDrop"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.DragDrop"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.DragEnter">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.DragEnter"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
   <see cref="System.Windows.Forms.AxHost.DragEnter"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.DragOver">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.DragOver"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.DragOver"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.DragLeave">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.DragLeave"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.DragLeave"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.GiveFeedback">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.GiveFeedback"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.GiveFeedback"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.HelpRequested">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.HelpRequested"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.HelpRequested"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.Paint">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.Paint"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.Paint"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.QueryContinueDrag">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.QueryContinueDrag"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.QueryContinueDrag"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.QueryAccessibilityHelp">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.QueryAccessibilityHelp"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.QueryAccessibilityHelp"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.DoubleClick">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.DoubleClick"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.DoubleClick"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.ImeModeChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.ImeModeChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.ImeModeChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.KeyDown">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.KeyDown"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.KeyDown"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.KeyPress">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.KeyPress"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.KeyPress"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.KeyUp">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.KeyUp"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.KeyUp"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.Layout">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.Layout"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.Layout"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseDown">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseDown"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseDown"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseEnter">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseEnter"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseEnter"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseLeave">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseLeave"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseLeave"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseHover">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseHover"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseHover"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseMove">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseMove"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseMove"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseUp">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseUp"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseUp"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.MouseWheel">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.MouseWheel"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.MouseWheel"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.ChangeUICues">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.ChangeUICues"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.ChangeUICues"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.StyleChanged">
		<summary>
			<para>The <see cref="System.Windows.Forms.AxHost.StyleChanged"/> event is not supported by the <see cref="System.Windows.Forms.AxHost"/>
class.</para>
		</summary>
		<remarks>
			<para>If you attempt to add or remove a handler for the
      <see cref="System.Windows.Forms.AxHost.StyleChanged"/> event, a <see cref="System.NotSupportedException"/> is thrown. The events derived
      from the <see cref="System.Windows.Forms.Control"/> class are not supported by the <see cref="System.Windows.Forms.AxHost"/>
      class. The events exposed by the ActiveX control when the <see cref="System.Windows.Forms.AxHost"/> wrapper is created are the events that should be  used.</para>
		</remarks>
	</doc>
	<doc for="AxHost.OcxState">
		<summary>
			<para>Gets or sets the persisted state of the ActiveX
      control.</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.AxHost.State"/> that represents the persisted state of the ActiveX control.</para>
		</value>
		<exception cref="System.Exception">The ActiveX control is already loaded.</exception>
		<remarks>
			<para>The value of the <see cref="System.Windows.Forms.AxHost.OcxState"/>
property is used after the
control is created but before it is shown. The persisted state of the
underlying ActiveX control is returned in the <see cref="System.Windows.Forms.AxHost.State"/>
.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.State"/>
		<seealso cref="System.Windows.Forms.AxHost.GetOcx"/>
	</doc><doc for="AxHost.StateConverter.CanConvertFrom1"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.StateConverter.CanConvertTo1"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.StateConverter.ConvertFrom"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.StateConverter.ConvertTo">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.StateConverter">
		<nodoc/>
		<summary>
			<para>Provides a type converter to convert <see cref="System.Windows.Forms.AxHost.State"/> objects to and from various other
   representations.</para>
		</summary>
		<remarks>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
			<note type="note">
   You should never create an instance of a
<see cref="System.Windows.Forms.AxHost.StateConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.State"/>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc>
	<doc for="AxHost.OnInPlaceActive">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="StateConverter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.StateConverter.CanConvertFrom">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.StateConverter.CanConvertTo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="AxHost.State">
		<summary>
			<para>Encapsulates the persisted state of an ActiveX control.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AxHost.State"/> can be retrieved using the <see cref="System.Windows.Forms.AxHost.OcxState" qualify="true"/> property, or by
   reading the control's state from a data stream. </para>
			<para> For more information, see
   the documentation for <see langword="IPersistStream"/> and
<see langword="IPersistPropertyBag"/> in the MSDN library. 
<see langword="IPersistStream"/> can be found in the interface 
   reference section of the COM SDK documentation, and <see langword="IPersistPropertyBag"/> can be found in the COM
   Fundamentals interface reference section of the COM SDK documentation. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.AxHost.OcxState"/>
	</doc>
	<doc for="AxHost">
		<summary>
			<para>Wraps ActiveX controls and exposes them as fully featured Windows Forms controls.</para>
		</summary>
		<remarks>
			<para>You typically do not use the <see cref="System.Windows.Forms.AxHost"/> class directly. You can use the
<see topic="cpgrfwindowsformsactivexcontrolimporteraximpexe" title="Windows Forms ActiveX Control Importer (AxImp.exe) "/> 
to generate the wrappers that extend <see cref="System.Windows.Forms.AxHost"/>.</para>
			<para>The ActiveX Control Importer generates a class that is derived from the <see cref="System.Windows.Forms.AxHost"/> class,
and compiles it into a library file (DLL) that can be added as a
reference to your application. Alternatively, you can use the <c>/source</c> switch with the ActiveX Control Importer and a C#
file is generated for your <see cref="System.Windows.Forms.AxHost"/>
derived class. You can then make changes
to the code and recompile it into a library file. </para>
			<note type="note">
   If
   the name of a member of the ActiveX control
   matches a name defined in the .NET Framework, then the ActiveX Control Importer
   will prefix the member name with "Ctl" when it creates the <see cref="System.Windows.Forms.AxHost"/>
   
   derived class. For example, if your ActiveX control has a
   member named "Layout", it is renamed "CtlLayout" in the <see cref="System.Windows.Forms.AxHost"/>
   derived class because the <see langword="Layout"/> event is defined within the .NET
   Framework.
</note>
			<para>Most of the common properties of the <see cref="System.Windows.Forms.AxHost"/> class are only valid and used if the underlying ActiveX control
exposes those properties. A few examples of the common properties are <see cref="System.Windows.Forms.Control.BackColor"/>, <see cref="System.Windows.Forms.Control.Cursor"/>, <see cref="System.Windows.Forms.Control.Font"/>, and <see cref="System.Windows.Forms.Control.Text"/>.</para>
			<note type="note">
   If you are using Visual Studio .NET as your Windows Forms design environment, you can make an ActiveX control available to your application by adding
   the ActiveX control to your Toolbox. To accomplish this, right-click the Toolbox, select Customize Toolbox, then browse to the ActiveX control's .ocx file.
   For more information, see "Adding ActiveX Controls to Windows Forms" in the Visual Studio .NET documentation.
</note>
		</remarks>
		<example>
			<para>The following example overrides the constructor, and the
   <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and
   <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods 
      of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the
      Microsoft Masked Edit ActiveX Control. This code assumes you have created the
      generated source code by running the AxImp.exe on the MSMask32.ocx file with
      the <c>/source</c> switch to
   generate the wrapper class to be edited. This code is only shown in C# syntax as
   that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control"/>
		<seealso cref="System.Windows.Forms.UserControl"/>
	</doc>
	<doc for="AxHost.ContainerControl">
		<summary>
			<para> Gets or sets the control containing the ActiveX
      control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.ContainerControl"/> that represents the
   control containing the ActiveX control.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AxHost.ContainingControl"/> property value can be different from the
<see cref="System.Windows.Forms.Control.Parent"/> property. The <see cref="System.Windows.Forms.ContainerControl"/> represented by this property is 
   the ActiveX control's logical container. For example, if an ActiveX control
   is hosted in a <see cref="System.Windows.Forms.GroupBox"/> control, and the <see cref="System.Windows.Forms.GroupBox"/>
   is contained on a <see cref="System.Windows.Forms.Form"/>, then
   the <see cref="System.Windows.Forms.AxHost.ContainingControl"/> property value of the ActiveX control is
   the <see cref="System.Windows.Forms.Form"/>, and the <see cref="System.Windows.Forms.Control.Parent"/> property value is the <see cref="System.Windows.Forms.GroupBox"/>
   control. </para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/></permission>
		<seealso cref="System.Windows.Forms.Form"/>
	</doc>
	<doc for="AxHost.AttachInterfaces">
		<summary>
			<para>When overridden in a derived class, attaches interfaces to the underlying
      ActiveX control.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      Classes that
      extend <see cref="System.Windows.Forms.AxHost"/> should override this method. Within an
      overridden version of this method, the extending class should call <see cref="System.Windows.Forms.AxHost.GetOcx"/> to retrieve its own interface. In most
      cases, the <see cref="System.Windows.Forms.AxHost.GetOcx"/> method should not be called before this
      method is called.
      
   </note>
		</remarks>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.GetOcx"/>
	</doc>
	<doc for="AxHost.HasAboutBox">
		<summary>
			<para>Gets a value indicating whether the ActiveX control has an About
      dialog box.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the ActiveX control has an
   About dialog box; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>The About dialog box typically displays version and copyright information
      about the ActiveX control.</para>
		</remarks>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.ShowAboutBox"/>
		<seealso cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/>
		<seealso cref="System.Windows.Forms.AxHost.AboutBoxDelegate"/>
		<keyword term="about dialog box"/>
	</doc>
	<doc for="AxHost.SetAboutBoxDelegate">
		<summary>
			<para>Calls the <see cref="System.Windows.Forms.AxHost.ShowAboutBox"/> method to display the ActiveX
   control's About dialog box.</para>
		</summary>
		<param name="d">The <see cref="System.Windows.Forms.AxHost.AboutBoxDelegate"/> to call. </param>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> method
   also allows derived classes to handle the <see cref="System.Windows.Forms.AxHost.ShowAboutBox"/> method without attaching a
   delegate. This is the preferred technique for handling the
<see cref="System.Windows.Forms.AxHost.ShowAboutBox"/>
method in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> in a derived class, be sure to call 
   the base class's <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> method
   so that registered delegates receive the <see cref="System.Windows.Forms.AxHost.ShowAboutBox"/> method.
</note>
		</remarks>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.HasAboutBox"/>
		<seealso cref="System.Windows.Forms.AxHost.ShowAboutBox"/>
		<seealso cref="System.Windows.Forms.AxHost.AboutBoxDelegate"/>
	</doc>
	<doc for="AxHost.GetOcx">
		<summary>
			<para>Retrieves a reference to the underlying ActiveX control.</para>
		</summary>
		<returns>
			<para>An object that represents the ActiveX control.</para>
		</returns>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.OcxState"/>
	</doc>
	<doc for="InvalidActiveXStateException">
		<summary>
			<para>The exception that is thrown when the ActiveX control is referenced while in
      an invalid state.</para>
		</summary>
		<remarks>
			<para>The public properties and methods of an ActiveX control can only
      be referenced after the ActiveX control has been instantiated
      and initialized completely; otherwise the <see cref="System.Windows.Forms.AxHost.InvalidActiveXStateException"/> exception is thrown. The
   <see cref="System.Windows.Forms.AxHost.InvalidActiveXStateException"/>
   exception class contains the name of the member that made the reference and the
   member type. The member type is one of the <see cref="System.Windows.Forms.AxHost.ActiveXInvokeKind"/> enumerated values. </para>
		</remarks>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.ActiveXInvokeKind"/>
	</doc>
	<doc for="InvalidActiveXStateException.InvalidActiveXStateException">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.AxHost.InvalidActiveXStateException"/> class.</para>
		</summary>
		<param name="name">The name of the member that referenced the ActiveX control while it was in an invalid state. </param>
		<param name=" kind">One of the <see cref="System.Windows.Forms.AxHost.ActiveXInvokeKind"/> values.</param>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.ActiveXInvokeKind"/>
	</doc>
	<doc for="AxHost.AboutBoxDelegate">
		<summary>
			<para>Represents the method that will display an ActiveX control's About dialog
      box.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.AxHost.AboutBoxDelegate"/> provides you the ability to be notified
   when the ActiveX control's About box is going to be displayed. Code added to the
   delegate method is executed before the About box is displayed.</para>
			<para>When you create an <see cref="System.Windows.Forms.AxHost.AboutBoxDelegate"/> delegate, you identify the
method that will handle the display of an ActiveX control's About dialog box if it
has one. To associate the method with your handler, add an instance of the
delegate to the method. The handler is called whenever the method is called,
unless you remove the delegate. For more information about delegates, see
<see topic="cpconEventsDelegates"/>.</para>
		</remarks>
		<example>
			<para>The following example overrides the constructor, and the <see cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/> and <see cref="System.Windows.Forms.AxHost.AttachInterfaces"/> methods of an <see cref="System.Windows.Forms.AxHost"/> derived class that wraps the Microsoft Masked Edit ActiveX Control. This code assumes you have created the generated source code by running the AxImp.exe on the MSMask32.ocx file with the <c>/source</c> switch to generate the wrapper class to be edited. This code is only shown in C# syntax as that is the the only language output by the AxImp.exe.</para>
			<codelink SampleID="AxHost_Wrap_MaskEdit" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.AxHost.SetAboutBoxDelegate"/>
		<seealso cref="System.Windows.Forms.AxHost.ShowAboutBox"/>
		<seealso cref="System.Windows.Forms.AxHost.HasAboutBox"/>
		<keyword term="about dialog box"/>
	</doc>
	<doc for="AxHost.ProcessDialogKey">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
</docs>
