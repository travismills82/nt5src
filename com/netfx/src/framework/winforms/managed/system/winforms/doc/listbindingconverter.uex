<docs>
	<doc for="ListBindingConverter.CanConvertTo"><nodoc/>
		<summary>
			<para>Gets a value indicating whether this converter can
      convert an object to the given destination type using the context.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<param name="destinationType">A <see cref="System.Type"/> that represents the type you wish to convert to.</param>
		<returns>
			<para><see langword="true "/>if this converter can perform the conversion; otherwise,
   <see langword="false"/>. </para>
		</returns>
		<remarks>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This can be
   <see langword="null"/>, so always check. Also, properties on the context object
   can return <see langword="null"/>.</para>
			<note type="inheritinfo">
   Override this method to provide your own conversion requirements.
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="ListBindingConverter.ConvertTo"><nodoc/>
		<summary>
   Converts the given object to another type.  The most common types to convert
   are to and from a string object.  The default implementation will make a call
   to ToString on the object if the object is valid and if the destination
   type is string.  If this cannot convert to the desitnation type, this will
   throw a NotSupportedException.
   </summary>
		<param name="context">
   A formatter context.  This object can be used to extract additional information
   about the environment this converter is being invoked from.  This may be null,
   so you should always check.  Also, properties on the context object may also
   return null.
   </param>
		<param name="culture">
   An optional culture info.  If not supplied the current culture is assumed.
   </param>
		<param name="value">
   The object to convert.
   </param>
		<param name="destinationType">
   The type to convert the object to.
   </param>
		<returns>
   The converted object.
   </returns>
	</doc><doc for="ListBindingConverter.CreateInstance"><nodoc/>
		<summary>
   Creates an instance of this type given a set of property values
   for the object.  This is useful for objects that are immutable, but still
   want to provide changable properties.
   </summary>
		<param name="context">
   A type descriptor through which additional context may be provided.
   </param>
		<param name="propertyValues">
   A dictionary of new property values.  The dictionary contains a series
   of name-value pairs, one for each property returned from GetProperties.
   </param>
		<returns>
   The newly created object, or null if the object could not be created.
   The default implementation returns null.
   </returns>
	</doc><doc for="ListBindingConverter.GetCreateInstanceSupported">
		<nodoc/>
		<summary>
			<para>Determines if changing a value on this object should require a call to
      CreateInstance to create a new value.</para>
		</summary>
		<param name="context">A type descriptor through which additional context may be provided. </param>
		<returns>
			<para>Returns true if CreateInstance should be called when a change is
      made to one or more properties of this object.</para>
		</returns>
	</doc><doc for="ListBindingConverter">
		<summary>
			<para> Provides a type converter to convert <see cref="System.Windows.Forms.Binding"/>
objects to and from various other representations.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.ListBindingConverter"/> is used to 
   evaluate and convert a property of an
   object into a <see cref="System.Windows.Forms.Binding"/>. </para>
			<para>The <see cref="System.ComponentModel.TypeConverterAttribute"/> is applied to the <see cref="System.Windows.Forms.Binding"/> 
class with the type of the <see cref="System.Windows.Forms.ListBindingConverter"/> as an argument.</para>
			<para>For more information about type converters, see the 
<see cref="System.ComponentModel.TypeConverter"/> base class and <see topic="cpconImplementingTypeConverter"/>. </para>
			<note type="note">
   You should never create an instance
   of a <see cref="System.Windows.Forms.ListBindingConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc></docs>
