<docs>
	<doc for="Timer.interval">
		<summary>
		</summary>
	</doc>
	<doc for="Timer.enabled">
		<summary>
		</summary>
	</doc>
	<doc for="Timer.onTimer">
		<summary>
		</summary>
	</doc>
	<doc for="Timer.timerProcRoot">
		<summary>
		</summary>
	</doc>
	<doc for="Timer.timerID">
		<summary>
		</summary>
	</doc>
	<doc for="Timer.Timer">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Timer"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Timer"/>
 class.</para>
		</summary>
		<remarks>
			<para>When a new timer is created, it is disabled; that is, <see cref="System.Windows.Forms.Timer.Enabled"/> is set 
    to <see langword="false"/>. To enable the timer, call the <see cref="System.Windows.Forms.Timer.Start"/>
    method or set <see cref="System.Windows.Forms.Timer.Enabled"/> to <see langword="true"/>.</para>
			<para>If the timer is disabled and the timer is out of scope, 
    the timer will be
    disposed when garbage collection occurs. If the timer is enabled, even if it
    is out of scope, it is not subject to garbage collection.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Timer.Enabled"/>
	</doc>
	<doc for="Timer.Timer1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Timer"/> class with the specified container.</para>
		</summary>
		<param name="container">An <see cref="System.ComponentModel.IContainer"/> that represents the container for the timer.</param>
		<remarks>
			<para>When a new timer is created, it is disabled; that is, <see cref="System.Windows.Forms.Timer.Enabled"/> is set 
    to <see langword="false"/>. To enable the timer, call the <see cref="System.Windows.Forms.Timer.Start"/>
    method or set <see cref="System.Windows.Forms.Timer.Enabled"/> to <see langword="true"/>.</para>
			<para>This instance will exist until its container releases it to garbage 
    collection.</para>
		</remarks>
	</doc>
	<doc for="Timer.Tick">
		<summary>
			<para>Occurs when the specified timer
       interval has elapsed and the timer is enabled.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example implements a simple interval timer,
       which sets off an alarm every five seconds. When the alarm occurs, a <see cref="System.Windows.Forms.MessageBox"/>
       displays a count of the number of times the alarm has activated and asks the user whether the timer should continue running.</para>
			<codelink SampleID="Classic Timer Example 2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Timer.Callback">
		<summary>
     Timer callback.  This callback receives timer events from Win32.
 </summary>
	</doc>
	<doc for="Timer.OnTick">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Timer.Tick"/>
 event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data. This is always <see cref="F:System.EventArgs.Empty"/>.</param>
		<remarks>
			<para>This method is called for each timer tick. It calls any methods that are 
       added through <see cref="System.Windows.Forms.Timer.Tick"/>. If you are inheriting from <see cref="System.Windows.Forms.Timer"/>, you can
       override this method.</para>
			<para>Raising an event invokes the event handler through a delegate. For 
       more information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
       When overriding
    <see cref="System.Windows.Forms.Timer.OnTick"/> in a derived class, be sure to call the 
       base class's <see cref="System.Windows.Forms.Timer.OnTick"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="Timer.Start">
		<summary>
			<para>Starts the
       timer.</para>
		</summary>
		<remarks>
			<para>You can also start the timer by setting the <see cref="System.Windows.Forms.Timer.Enabled"/>
 property to <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example implements a simple interval timer,
       which sets off an alarm every five seconds. When the alarm occurs, a <see cref="System.Windows.Forms.MessageBox"/>
       displays a count of the number of times the alarm has activated and asks the user whether the timer should continue running.</para>
			<codelink SampleID="Classic Timer Example 2" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Timer.Enabled"/>
	</doc>
	<doc for="Timer.Stop">
		<summary>
			<para>Stops the
       timer.</para>
		</summary>
		<remarks>
			<para>You can also stop the timer by setting the <see cref="System.Windows.Forms.Timer.Enabled"/> property to
 <see langword="false"/>. A timer that is disabled is subject to 
    garbage collection.</para>
		</remarks>
		<example>
			<para>The following example implements a simple interval timer,
       which sets off an alarm every five seconds. When the alarm occurs, a <see cref="System.Windows.Forms.MessageBox"/>
       displays a count of the number of times the alarm has activated and asks the user whether the timer should continue running.</para>
			<codelink SampleID="Classic Timer Example 2" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Timer.Enabled"/>
	</doc>
	<doc for="Timer.ToString">
		<summary>
     returns us as a string.
 </summary>
	</doc>
	<doc for="Timer.Dispose">
		<nodoc/>
		<summary>
			<para> Disposes of the resources (other than memory) used by the timer.
      </para>
		</summary>
		<remarks>
			<para> Call <see cref="System.Windows.Forms.Timer.Dispose"/> when you are finished using the timer. The
<see cref="System.Windows.Forms.Timer.Dispose"/> method leaves the timer in an unusable state.
   After calling <see cref="System.Windows.Forms.Timer.Dispose"/>, you must release all references to the timer
   so the memory it was occupying can be reclaimed by garbage collection.
   </para>
			<note type="note">
   Always call <see cref="System.Windows.Forms.Timer.Dispose"/>
   before you release your last reference to the timer. Otherwise, the resources
   the timer is using will not be freed until garbage collection calls the timer
   object's destructor.
   
</note>
		</remarks>
	</doc><doc for="Timer.Enabled">
		<summary>
			<para>Gets or sets whether the timer is
      running.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the timer is currently enabled;
   otherwise, <see langword="false"/>.
   The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The timer is not subject to garbage collection when the value is
   <see langword="true"/>. </para>
		</remarks>
		<example>
			<para>The following example implements a simple interval timer,
      which sets off an alarm every five seconds. When the alarm occurs, a <see cref="System.Windows.Forms.MessageBox"/>
      displays a count of the number of times the alarm has activated and asks the user whether the timer should continue running.</para>
			<codelink SampleID="Classic Timer Example 2" SnippetID="1"/>
		</example>
	</doc><doc for="Timer.Interval">
		<summary>
			<para> Gets or sets the time, in milliseconds, between timer ticks.</para>
		</summary>
		<value>
			<para>The number of milliseconds between each timer tick. The
      value is not less than one.</para>
		</value>
		<remarks>
			<para>To get the number of seconds in the
      interval, divide this number by 1,000.</para>
		</remarks>
		<example>
			<para>The following example implements a simple interval timer,
      which sets off an alarm every five seconds. When the alarm occurs, a <see cref="System.Windows.Forms.MessageBox"/>
      displays a count of the number of times the alarm has activated and asks the user whether the timer should continue running.</para>
			<codelink SampleID="Classic Timer Example 2" SnippetID="1"/>
		</example>
	</doc><doc for="Timer">
		<summary>
			<para> Implements a timer that raises an event at user-defined intervals. This timer is optimized for
      use in Windows Forms applications and must be used in a window.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Windows.Forms.Timer"/> is
   used to raise an event at user-defined intervals. This Windows timer is designed
   for a single-threaded environment where UI threads are used to perform
   processing. It requires that the user code have a UI message pump available and
   always operate from the same thread, or marshal the call onto
   another thread.</para>
			<para> When using
   this timer, use the <see cref="System.Windows.Forms.Timer.Tick"/> event to perform a polling operation
   or to display a splash screen for a specified amount of time. Whenever the
<see cref="System.Windows.Forms.Timer.Enabled"/> property is set to <see langword="true "/>and
   the <see cref="System.Windows.Forms.Timer.Interval"/> property is greater than zero, the <see cref="System.Windows.Forms.Timer.Tick"/>
   event is raised at intervals based on the <see cref="System.Windows.Forms.Timer.Interval"/> property setting.</para>
			<para>This class provides methods to set the interval, and to start and stop the timer.</para>
		</remarks>
		<example>
			<para>The following example implements a simple interval timer,
      which sets off an alarm every five seconds. When the alarm occurs, a <see cref="System.Windows.Forms.MessageBox"/>
      displays a count of the number of times the alarm has activated and asks the user whether the timer should continue running.</para>
			<codelink SampleID="Classic Timer Example 2" SnippetID="1"/>
		</example>
	</doc></docs>
