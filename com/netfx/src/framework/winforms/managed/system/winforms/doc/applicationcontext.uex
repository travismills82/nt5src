<docs>
	<doc for="ApplicationContext.ApplicationContext">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ApplicationContext"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ApplicationContext"/> class with no context.</para>
		</summary>
	</doc><doc for="ApplicationContext.ApplicationContext1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ApplicationContext"/> class with the specified <see cref="System.Windows.Forms.Form"/>.</para>
		</summary>
		<param name="mainForm"> The main <see cref="System.Windows.Forms.Form"/> of the application to use for context.</param>
		<remarks>
			<para>If <see cref="System.Windows.Forms.ApplicationContext.OnMainFormClosed"/> is not overridden, the message loop
   of the thread terminates when <see cref="System.Windows.Forms.ApplicationContext.MainForm"/>
   is closed.</para>
		</remarks>
	</doc><doc for="ApplicationContext.MainForm">
		<summary>
			<para>Gets or sets the <see cref="System.Windows.Forms.Form"/>
to use as context.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Form"/> to use as context.</para>
		</value>
		<remarks>
			<para>This property determines the main <see cref="System.Windows.Forms.Form"/> for this context. This property can change at any time. If <see cref="System.Windows.Forms.ApplicationContext.OnMainFormClosed"/> is not overridden, the message loop of
   the thread terminates when the <paramref name="mainForm"/> parameter closes.</para>
		</remarks>
	</doc><doc for="ApplicationContext.ExitThreadCore">
		<summary>
			<para>Terminates the message loop of the thread.</para>
		</summary>
		<remarks>
			<para>This method is called from <see cref="System.Windows.Forms.ApplicationContext.ExitThread"/>.</para>
			<note type="note">
				<see cref="System.Windows.Forms.ApplicationContext.ExitThread"/> and <see cref="System.Windows.Forms.ApplicationContext.ExitThreadCore"/> do not actually cause
   the thread to terminate. These methods raise the <see cref="System.Windows.Forms.Application.ThreadExit"/> event to which the <see cref="System.Windows.Forms.Application"/> object
   listens. The <see cref="System.Windows.Forms.Application"/> object then
   terminates the thread.
</note>
		</remarks>
	</doc><doc for="ApplicationContext.ThreadExit">
		<summary>
			<para> Occurs when the message loop of the thread should be
      terminated, by calling <see cref="System.Windows.Forms.ApplicationContext.ExitThread"/>
      .</para>
		</summary>
	</doc><doc for="ApplicationContext.Finalize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ApplicationContext.OnMainFormClosed">
		<summary>
			<para>Calls <see cref="System.Windows.Forms.ApplicationContext.ExitThreadCore"/>, which raises the 
<see cref="System.Windows.Forms.ApplicationContext.ThreadExit"/> event.</para>
		</summary>
		<param name="sender">The object that raised the event.</param>
		<param name=" e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>The default implementation of this method calls <see cref="System.Windows.Forms.ApplicationContext.ExitThreadCore"/> .</para>
		</remarks>
	</doc><doc for="ApplicationContext.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Windows.Forms.ApplicationContext"/>.</para>
		</overload>
		<summary>
			<para> Releases all resources used by the
      <see cref="System.Windows.Forms.ApplicationContext"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.Windows.Forms.ApplicationContext.Dispose"/> allows the resources
   used by the <see cref="System.Windows.Forms.ApplicationContext"/>. to be reallocated for other purposes. For more
   information about <see cref="System.Windows.Forms.ApplicationContext.Dispose"/>, see
<see topic="cpconCleaningUpUnmanagedResources"/> .</para>
		</remarks>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="ApplicationContext.Dispose2">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.ApplicationContext"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public
   <see topic="frlrfSystemWindowsFormsApplicationContextClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
   <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set
      to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
   <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
   resources held by any managed objects that this <see cref="System.Windows.Forms.ApplicationContext"/> references.
   This method invokes the <see langword="Dispose()"/> method of each referenced
   object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for=".Finalize">
		<summary>
			<para>Attempts to free resources and perform other cleanup operations before the application context is reclaimed by garbage collection.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/> and cleans up resources by calling
<see langword="Dispose(false)"/>. Override <see langword="Dispose(Boolean)"/> to customize the cleanup.</para>
			<para>Application code should not call this method; an
   object's <see langword="Finalize"/> method is automatically invoked during
   garbage collection, unless finalization by the garbage collector has been
   disabled by a call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   method.</para>
			<para> For more
   information, see <see topic="cpconFinalizeMethodscDestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>.
   </para>
		</remarks>
	</doc>
	<doc for="ApplicationContext.ExitThread">
		<summary>
			<para> Terminates the message loop
      of the thread.</para>
		</summary>
		<remarks>
			<para>This method calls <see cref="System.Windows.Forms.ApplicationContext.ExitThreadCore"/> .</para>
			<note type="note">
				<see cref="System.Windows.Forms.ApplicationContext.ExitThread"/> and <see cref="System.Windows.Forms.ApplicationContext.ExitThreadCore"/> do not actually cause the thread
   to terminate. These methods raise the <see cref="System.Windows.Forms.Application.ThreadExit"/> event to which the <see cref="System.Windows.Forms.Application"/> object listens. The <see cref="System.Windows.Forms.Application"/> object then terminates the thread.
</note>
		</remarks>
		<example>
			<para>The following code example is an excerpt from the example in 
      the <see cref="System.Windows.Forms.ApplicationContext"/> class
      overview. This example keeps track of open forms and exits the current thread
      when all forms are closed. The <c>OnFormClosed</c> method is an event
   handler for the <see cref="System.Windows.Forms.Form.Closed"/> event. When the number of open forms is
   equal to 0, then current thread is exited by calling the <see cref="System.Windows.Forms.ApplicationContext.ExitThread"/> method. The number of forms is tracked by incrementing
   the <c>formCount</c> variable when a form is shown, and
decrementing it when a form is
closed. </para>
			<para>Some code is not shown for the purpose of brevity. See <see cref="System.Windows.Forms.ApplicationContext"/> for the whole 
code listing.</para>
			<codelink SampleID="Application" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ApplicationContext">
		<summary>
			<para>Specifies the contextual information about an application thread.</para>
		</summary>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.ApplicationContext"/> class to
   redefine the circumstances that cause a message loop to exit. By default,
   the <see cref="System.Windows.Forms.ApplicationContext"/>
   listens to the <see cref="System.Windows.Forms.Form.Closed"/> event on the application's main <see cref="System.Windows.Forms.Form"/>,
   then exits the thread's message loop.</para>
		</remarks>
		<example>
			<para>The following example displays two forms and exits the
      application when both forms are closed. When the application starts and exists,
      the position of each form is remembered. This example demonstrates how to use an
   <see cref="System.Windows.Forms.ApplicationContext"/>, along with
      the <see langword="Application.Run(context)"/>
      method, to
      display multiple forms when the application starts. </para>
			<para> The class <c>MyApplicationContext</c> inherits from <see cref="System.Windows.Forms.ApplicationContext"/> and keeps track when each form is closed,
and exits the current thread when they both are. The class stores the positions
of each form for the user. The form position data is stored in a file
titled <c>Appdata.txt</c> that
is created in the location determined by <see cref="System.Windows.Forms.Application.UserAppDataPath"/>. </para>
			<para>The <c>Main</c> method
calls <see langword="Application.Run(context)"/> to start the application,
given the <see cref="System.Windows.Forms.ApplicationContext"/>.</para>
			<codelink SampleID="Application" SnippetID="1"/>
		</example>
	</doc>
</docs>
