<docs>
	<doc for="DomainUpDown.domainItems">
		<summary>
     Allowable strings for the domain updown.
 </summary>
	</doc>
	<doc for="DomainUpDown.SelectedItemChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.DomainUpDown.SelectedItem"/> property has
    been changed.</para>
		</summary>
		<remarks>
			<para>For the <see cref="System.Windows.Forms.DomainUpDown.SelectedItemChanged"/> event to occur, the <see cref="System.Windows.Forms.DomainUpDown.SelectedItem"/> property can be changed in code, by the user
    typing in a new value or clicking the control's up or down buttons.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.DomainUpDown.SelectedItem"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.UpButton"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DownButton"/>
	</doc>
	<doc for="DomainUpDown.CreateAccessibilityInstance">
		<internalonly/>
		<summary>
    Constructs the new instance of the accessibility object for this control. Subclasses
    should not call base.CreateAccessibilityObject.
 </summary>
	</doc>
	<doc for="DomainUpDown.DownButton">
		<summary>
			<para>Displays the next item in the object collection.</para>
		</summary>
		<remarks>
			<para>As you move through the collection of items in the
    <see cref="System.Windows.Forms.DomainUpDown"/>
    control using the down button, you will eventually reach the last item in
    the collection. If you continue, and <see cref="System.Windows.Forms.DomainUpDown.Wrap"/> is set to
 <see langword="true"/> , the list will start over with the first item in the collection and 
    appear to be continuous. This behavior is also true when moving through the
    collection using the up button.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.DomainUpDown.UpButton"/>
	</doc>
	<doc for="DomainUpDown.MatchIndex">
		<summary>
     Tries to find a match of the supplied text in the domain list.
     If complete is true, a complete match is required for success
     (i.e. the supplied text is the same length as the matched domain value)
     Returns the index in the domain list if the match is successful,
     returns -1 otherwise.
 </summary>
	</doc>
	<doc for="DomainUpDown.OnChanged">
		<internalonly/>
		<summary>
			<para>
       In the case of a DomainUpDown, the handler for changing
       values is called OnSelectedItemChanged - so just forward it to that
       function.
    </para>
		</summary>
	</doc>
	<doc for="DomainUpDown.OnTextBoxKeyDown">
		<internalonly/>
		<summary>
		</summary>
		<remarks>
			<para>
       DEV: Overridden OnTextBoxKeyDown - when the user types a key in a read-only
       domain updown, the first/next item in the domain list is selected.
    </para>
		</remarks>
	</doc>
	<doc for="DomainUpDown.SelectIndex">
		<summary>
     Selects the item in the domain list at the given index
 </summary>
	</doc>
	<doc for="DomainUpDown.SortDomainItems">
		<summary>
     Sorts the domain values
 </summary>
	</doc>
	<doc for="DomainUpDown.ToString">
		<summary>
     Provides some interesting info about this control in String form.
 </summary>
		<returns>
     String
 </returns>
	</doc>
	<doc for="DomainUpDown.UpButton">
		<summary>
			<para>Displays the previous item in the collection.</para>
		</summary>
		<remarks>
			<para>As you move through the collection of items in the
    <see cref="System.Windows.Forms.DomainUpDown"/>
    control using the up button, you will eventually reach the first item in the
    collection. If you continue, and <see cref="System.Windows.Forms.DomainUpDown.Wrap"/> is set to
 <see langword="true"/> , the list will start over with the last item in the collection 
    and appear to be continuous. This behavior is also true when moving through the
    collection using the down button.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.DomainUpDown.DownButton"/>
	</doc>
	<doc for="DomainUpDown.DomainUpDownItemCompare">
		<summary>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainUpDownAccessibleObject">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainUpDownAccessibleObject.DomainUpDownAccessibleObject">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainUpDownAccessibleObject.Role">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainUpDownAccessibleObject.GetChild">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainUpDownAccessibleObject.GetChildCount">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject.DomainItemAccessibleObject">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject.Name">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject.Parent">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject.Role">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject.State">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainItemAccessibleObject.Value">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.UpdateEditText">
		<summary>
			<para>Updates the text in the up-down control to display the selected item.</para>
		</summary>
		<seealso cref="System.Windows.Forms.UpDownBase.Text"/>
	</doc>
	<doc for="DomainUpDown.DomainUpDownItemCollection.this">
		<summary>
			<para> Gets or sets the item at the specified indexed location
      in the collection.</para>
		</summary>
		<param name="index">The indexed location of the item in the collection.</param>
		<value>
			<para>An <see cref="System.Object"/> that represents the item at the
   specified indexed location. </para>
		</value>
		<remarks>
			<para> To assign items to a specific location, or to retrieve 
      them from the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection"/> ,
      you can reference the collection object with a specific index value. The index
      value of the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection"/> is a zero-based
      index.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.DomainUpDown.Items"/>
	</doc><doc for="DomainUpDown.DomainUpDownItemCollection.Remove">
		<summary>
			<para> Removes the specified item from the collection.</para>
		</summary>
		<param name="item">The <see cref="System.Object"/> to remove from the collection.</param>
		<remarks>
			<para>You can also remove an <see cref="System.Object"/> that you have previously added by using the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt"/> 
method.</para>
			<para>To add a new <see cref="System.Object"/> to the collection, use the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Insert"/> 
or <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/> methods.</para>
		</remarks>
		<seealso cref="System.Object"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt"/>
	</doc><doc for="DomainUpDown.DomainUpDownItemCollection.RemoveAt">
		<summary>
			<para>Removes the item from the specified location in the collection.</para>
		</summary>
		<param name="item">The indexed location of the <see cref="System.Object"/> in the collection.</param>
		<remarks>
			<para>You can also remove an <see cref="System.Object"/> that you have previously added by using the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/> 
method.</para>
			<para>To add a new <see cref="System.Object"/> to the collection, use the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Insert"/> 
or <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/> methods.</para>
		</remarks>
		<seealso cref="System.Object"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/>
	</doc><doc for="DomainUpDown.DomainUpDownItemCollection.Insert">
		<summary>
			<para> Inserts the specified object into the collection at the specified location.</para>
		</summary>
		<param name="index">The indexed location within the collection to insert the <see cref="System.Object"/> . </param>
		<param name="item">The <see cref="System.Object"/> to insert. </param>
		<remarks>
			<para>You can also add a new <see cref="System.Object"/> to the collection by using the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/> method.</para>
			<para>To remove an <see cref="System.Object"/> that you have previously added, use the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/> or
<see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt"/> 
methods.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt"/>
	</doc>
	<doc for="DomainUpDown.WndProc">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="DomainUpDown.DomainUpDown">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.DomainUpDown"/> class.</para>
		</summary>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.UpDownBase"/>
	</doc>
	<doc for="DomainUpDown.SelectedItem">
		<summary>
			<para>Gets or sets the selected item based on the index value of the selected item in the
      collection.</para>
		</summary>
		<value>
			<para>The selected item based on the <see cref="System.Windows.Forms.DomainUpDown.SelectedIndex"/>
value. The default value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>When this property is set, the value is validated to be one of the items in
      the collection, and the <see cref="System.Windows.Forms.DomainUpDown.SelectedIndex"/> property is set to the
      appropriate index value.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.SelectedIndex"/>
	</doc>
	<doc for="DomainUpDown.Sorted">
		<summary>
			<para>Gets or sets a value indicating whether the item collection is sorted.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the item collection is sorted; otherwise,
<see langword="false"/>. The default value is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> is set to <see langword="true"/>,
   the collection is sorted in alphabetical order.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DomainUpDown.OnSelectedItemChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.DomainUpDown.SelectedItemChanged"/> event.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.DomainUpDown.OnSelectedItemChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.DomainUpDown.OnSelectedItemChanged"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.DomainUpDown.OnSelectedItemChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.SelectedItem"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.SelectedItemChanged"/>
	</doc>
	<doc for="DomainUpDown.DomainUpDownItemCollection">
		<summary>
			<para>Encapsulates a collection of objects for use by the <see cref="System.Windows.Forms.DomainUpDown"/>
class.</para>
		</summary>
		<remarks>
			<para>To create a collection of objects to display in the <see cref="System.Windows.Forms.DomainUpDown"/> control, you
   can add or remove the items individually by using the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Add"/> and <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/> methods. The
   collection is accessed from the parent control, <see cref="System.Windows.Forms.DomainUpDown"/>,
   by the <see cref="System.Windows.Forms.DomainUpDown.Items"/> property.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown.DomainUpDownItemCollection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.Items"/>
	</doc>
	<doc for="DomainUpDown.Wrap">
		<summary>
			<para>Gets or sets a value indicating whether the collection of items continues to
      the first or last item if the user continues past the end of the list.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the list starts again when
   the user reaches the beginning or end of the collection; otherwise,
<see langword="false"/>. The default value is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Windows.Forms.DomainUpDown.Wrap"/> is set to <see langword="true"/>
, if you reach the last item in the collection
and continue, the list will start over with the first item and appear to be continuous.
This behavior works in reverse as well.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.DownButton"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.UpButton"/>
	</doc>
	<doc for="DomainUpDown">
		<summary>
			<para>Represents a Windows up-down control that displays string values.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Windows.Forms.DomainUpDown"/> control displays a single string value
   that is selected from an <see cref="System.Object"/>
   collection by clicking the up or down buttons of
   the control. The user can also enter text in the control, unless the <see cref="System.Windows.Forms.UpDownBase.ReadOnly"/> property is set to <see langword="true"/> (the string typed
   in must match an item in the collection to be accepted). When an item is selected,
   the object is converted to a string value so it can be displayed in
   the up-down control.</para>
			<para>To create a collection of objects to display in the
<see cref="System.Windows.Forms.DomainUpDown"/> control, you can
   add or remove the items individually by using the <see cref="System.Collections.ArrayList.Add"/> and <see cref="System.Collections.ArrayList.Remove"/> methods. This can be called in
   an event handler, such as the <see cref="System.Windows.Forms.Control.Click"/> of a button.
   The object collection can be sorted alphabetically by setting the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property to <see langword="true"/>.
   When <see cref="System.Windows.Forms.DomainUpDown.Wrap"/> is set to <see langword="true"/> , if you scroll past the last or first
   object in the collection, the list will start over with the first or last object
   respectively and appear to roll in
   a continuous list.</para>
			<para>When the <see cref="System.Windows.Forms.DomainUpDown.UpButton"/> or <see cref="System.Windows.Forms.DomainUpDown.DownButton"/> methods are called, either in code
or by the click of the up or down buttons, <see cref="System.Windows.Forms.DomainUpDown.UpdateEditText"/>
is called to update the control with the new string. If <see cref="System.Windows.Forms.UpDownBase.UserEdit"/> is set to <see langword="true"/>, the string is matched to one of the values in the collection prior to
updating the
control's text display.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.UpDownBase"/>
		<seealso cref="System.Windows.Forms.NumericUpDown"/>
	</doc>
	<doc for="DomainUpDown.Items">
		<summary>
			<para>A collection of objects assigned to the up-down control.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection"/> object that
   contains an <see cref="System.Object"/>
   collection.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Object"/> collection can be built and made available to the <see cref="System.Windows.Forms.DomainUpDown"/> control in two ways. You can add
   items to the collection by using the <see cref="System.Collections.ArrayList.Add"/> or <see cref="System.Collections.ArrayList.Insert"/> methods.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.Items"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection"/>
	</doc>
	<doc for="DomainUpDown.SelectedIndex">
		<summary>
			<para>Gets or sets the index value of the selected item.</para>
		</summary>
		<value>
			<para>The
      zero-based index value of the selected item. The default value
      is -1.</para>
		</value>
		<exception cref="System.ArgumentException">
			<para>The assigned value is less than the default, -1.</para>
			<para>-or-</para>
			<para>The assigned value is greater than the <see cref="System.Windows.Forms.DomainUpDown.Items"/> count. </para>
		</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.DomainUpDown.SelectedIndex"/> property holds the index
   value of the item in the collection that is currently selected in the up-down
   control. Collection items can be re-assigned new index values if the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property has been changed from
<see langword="false"/> to <see langword="true"/>. As the collection is re-sorted
   alphabetically, the items will be assigned a new index value.</para>
			<note type="note">
   If the user has entered an item in the up-down control, or if no item has been
   selected, the <see cref="System.Windows.Forms.DomainUpDown.SelectedIndex"/> value will be the default value,
   -1.
   
</note>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.SelectedItem"/>
	</doc>
	<doc for="DomainUpDown.DomainUpDownItemCollection.Add">
		<summary>
			<para> Adds the specified object to the end of the collection.</para>
		</summary>
		<param name="item">The <see cref="System.Object"/> to be added to the end of the collection.</param>
		<returns>
			<para>The zero-based index value of the <see cref="System.Object"/> added to the collection.</para>
		</returns>
		<remarks>
			<para>You can also add a new <see cref="System.Object"/> to the collection by using the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Insert"/> method.</para>
			<para>To remove an <see cref="System.Object"/> that you have previously added, use the <see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/> or
<see cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt"/> methods.</para>
		</remarks>
		<example>
			<para>The following example creates and initializes a <see cref="System.Windows.Forms.DomainUpDown"/> control. The example allows you to set some of its properties and create a collection of strings for display in the up-down control. The code assumes that a <see cref="System.Windows.Forms.TextBox"/> , <see cref="System.Windows.Forms.CheckBox"/> and a <see cref="System.Windows.Forms.Button"/> have been instantiated on a form. The example also assumes that you have a member variable at the class level declared as a 32-bit signed integer named <c>myCounter</c> . You can enter a string in the text box and add it to the <see cref="System.Windows.Forms.DomainUpDown.Items"/> collection when the button is clicked. By clicking the check box, you can toggle the <see cref="System.Windows.Forms.DomainUpDown.Sorted"/> property and observe the difference in the collection of items in the up-down control.</para>
			<codelink SampleID="Classic DomainUpDown.DomainUpDownItemCollection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Insert"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.Remove"/>
		<seealso cref="System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection.RemoveAt"/>
	</doc>
</docs>
