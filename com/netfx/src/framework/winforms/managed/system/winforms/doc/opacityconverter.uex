<docs>
	<doc for="OpacityConverter.ConvertTo">
		<nodoc/>
		<overload>
			<para> Converts the given value object to the specified destination type.</para>
		</overload>
		<summary>
			<para>Converts from the coverter's native type to a value of the destination type.</para>
		</summary>
		<param name="context">A <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides information about the context of a type converter. </param>
		<param name=" culture">The locale information for the conversion.</param>
		<param name=" value">The value to convert.</param>
		<param name="destinationType">The type to convert the object to.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the converted <paramref name="value"/> .</para>
		</returns>
		<exception cref="T:System.ArgumentNullException">The destinationType was <see langword="null"/>.</exception>
		<remarks>
			<note type="inheritinfo">
      Override this method to provide your own conversion requirements.
      
   </note>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This may be
<see langword="null"/>, so you should always check. Also, properties on the
   context object may also return <see langword="null"/>.</para>
			<para>Converts the converter's native type to a <see cref="System.String"/>.</para>
			<para>The resultant object is a <see cref="System.String"/> representing the percentage of opacity.</para>
		</remarks>
	</doc><doc for="OpacityConverter.ConvertFrom">
		<nodoc/>
		<overload>
			<para>Converts the given value to the native type of the converter.</para>
		</overload>
		<summary>
			<para>Converts the specified object to the coverter's native type.</para>
		</summary>
		<param name="context">A <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides information about the context of a type converter. </param>
		<param name="culture">The locale information for the conversion.</param>
		<param name="value">The object to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the converted <paramref name="value"/>.</para>
		</returns>
		<exception cref="T:System.Exception"><para>The object was not a supported type for the conversion.</para>
			<para>-or-</para>
			<para>The resulting converted <paramref name="value"/> was less than zero percent.</para>
			<para>-or-</para>
			<para>The resulting converted <paramref name="value"/> was greater than one hundered percent.</para></exception>
		<remarks>
			<note type="inheritinfo">
      Override this method to provide your own conversion requirements.
      
   </note>
			<para>The <paramref name="context"/> parameter can be used to extract additional information
   about the environment this converter is being invoked from. This may be
<see langword="null"/>, so you should always check. Also, properties on the
   context object may also return <see langword="null"/>.</para>
			<para>Converts a <see cref="System.String"/> to the converter's native type.</para>
			<para>The resultant object will be a percentage representing the level of
   opacity.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="OpacityConverter.CanConvertFrom">
		<nodoc/>
		<overload>
			<para>Returns whether this converter can convert an object in
      the given source type to the native type of the converter.</para>
		</overload>
		<summary>
			<para>Returns a value indicating whether this converter can convert an object of the
      specified source type to the native type of the converter using the specified
      context.</para>
		</summary>
		<param name="context">A <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides information about the context of a type converter.</param>
		<param name="sourceType">The <see cref="System.Type"/> that represents the type you wish to convert from.</param>
		<returns>
			<para><see langword="true"/> if this converter can perform the conversion;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <paramref name="sourceType"/> is expected to be a <see cref="System.String"/>.</para>
			<note type="inheritinfo">
   Override this method
   to provide your own conversion requirements.
   
</note>
			<para>The <paramref name="context"/> parameter can be used to extract
additional information about the environment this converter is being invoked
from. This may be <see langword="null"/>, so you should always check. Also,
properties on the context object may also return
<see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.TypeConverter"/>
	</doc><doc for="OpacityConverter">
		<summary>
			<para>Provides a type converter to convert opacity values to and from a string. </para>
		</summary>
		<remarks>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/> 
.</para>
			<note type="note">
   Typically, you do not directly create
   an instance of an <see cref="System.Windows.Forms.OpacityConverter"/>. Instead, call the <see cref="System.ComponentModel.TypeDescriptor.GetConverter"/> method of <see cref="System.ComponentModel.TypeDescriptor"/> . For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
		</remarks>
	</doc></docs>
