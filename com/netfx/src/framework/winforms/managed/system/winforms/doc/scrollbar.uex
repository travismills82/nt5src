<docs>
	<doc for="ScrollBar.ScrollBar">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.ScrollBar"/>
 class.</para>
		</summary>
		<remarks>
			<para>By default, the <see cref="System.Windows.Forms.Control.TabStop"/> property is set to <see langword="false"/> when 
    a new instance of a <see cref="System.Windows.Forms.ScrollBar"/> is created.</para>
		</remarks>
	</doc>
	<doc for="ScrollBar.BackColor">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.BackgroundImage">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.Font">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.CreateParams">
		<summary>
     Retrieves the parameters needed to create the handle.  Inheriting classes
     can override this to provide extra functionality.  They should not,
     however, forget to call base.getCreateParams() first to get the struct
     filled up with the basic info.
 </summary>
	</doc>
	<doc for="ScrollBar.TabStop">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.Text">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.DoubleClick">
		<nodoc/>
		<summary></summary>
	</doc>
	<doc for="ScrollBar.MouseDown">
		<nodoc/>
		<summary></summary>
	</doc>
	<doc for="ScrollBar.MouseUp">
		<nodoc/>
		<summary></summary>
	</doc>
	<doc for="ScrollBar.MouseMove">
		<nodoc/>
		<summary></summary>
	</doc>
	<doc for="ScrollBar.OnHandleCreated">
		<summary>
     Creates the handle.  overridden to help set up scrollbar information.
 </summary>
	</doc>
	<doc for="ScrollBar.ToString">
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.UpdateScrollInfo">
		<summary>
     Internal helper method
 </summary>
	</doc>
	<doc for="ScrollBar.WmReflectScroll">
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.WndProc">
		<summary>
		</summary>
	</doc>
	<doc for="ScrollBar.OnEnabledChanged">
		<nodoc/>
	</doc><doc for="ScrollBar.Click">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.OnPaint">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.BackColorChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.BackgroundImageChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.ForeColorChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.FontChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.ImeModeChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.TextChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ScrollBar.Scroll">
		<summary>
			<para>Occurs when the scroll box has
      been
      moved by either a mouse or keyboard action.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.VScrollBar"/> . Event handlers for the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> and <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> events are created. This code assumes that a <see cref="System.Windows.Forms.Label"/> and <see cref="System.Windows.Forms.Button"/> have been created on a form and that the button has an event handler for the <see cref="System.Windows.Forms.Control.Click"/> event. When the button is clicked, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property of the scroll bar is adjusted in code. The label will display the current value of the <see cref="System.Windows.Forms.ScrollBar.Value"/> property and the event that changed it. You will notice that when the scroll value is changed by the button <see cref="System.Windows.Forms.Control.Click"/> event, only the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event is raised. In contrast, when the scroll bar is scrolled manually, the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> event is raised immediately after the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event.</para>
			<codelink SampleID="Classic ScrollBar.OnScroll Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.OnScroll"/>
		<seealso cref="System.Windows.Forms.ScrollEventHandler"/>
	</doc>
	<doc for="ScrollBar.OnScroll">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> event.</para>
		</summary>
		<param name="se">A <see cref="System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ScrollBar.OnScroll"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.ScrollBar.OnScroll"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.ScrollBar.OnScroll"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.VScrollBar"/> . Event handlers for the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> and <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> events are created. This code assumes that a <see cref="System.Windows.Forms.Label"/> and <see cref="System.Windows.Forms.Button"/> have been created on a form and that the button has an event handler for the <see cref="System.Windows.Forms.Control.Click"/> event. When the button is clicked, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property of the scroll bar is adjusted in code. The label will display the current value of the <see cref="System.Windows.Forms.ScrollBar.Value"/> property and the event that changed
   it. You will notice that when the scroll value is changed by the button <see cref="System.Windows.Forms.Control.Click"/>
   event, only the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event is raised. In contrast, when
   the scroll bar is scrolled manually, the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> event is raised
   immediately after the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event.</para>
			<codelink SampleID="Classic ScrollBar.OnScroll Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.Scroll"/>
		<seealso cref="System.Windows.Forms.ScrollEventArgs"/>
	</doc>
	<doc for="ScrollBar.OnValueChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.ScrollBar.OnValueChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.ScrollBar.OnValueChanged"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.ScrollBar.OnValueChanged"/> method so that registered delegates
   receive the event.
   </note>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.VScrollBar"/> . Event handlers for the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> and <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> events are created. This code assumes that a <see cref="System.Windows.Forms.Label"/> and <see cref="System.Windows.Forms.Button"/> have been created on a form and that the button has an event handler for the <see cref="System.Windows.Forms.Control.Click"/> event. When the button is clicked, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property of the scroll bar is adjusted in code. The label will display the current value of the <see cref="System.Windows.Forms.ScrollBar.Value"/> property and the event that changed it. You will notice that when the scroll value is changed by the button <see cref="System.Windows.Forms.Control.Click"/> event, only the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event is raised. In contrast, when the scroll bar is scrolled manually, the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> event is raised immediately after the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event.</para>
			<codelink SampleID="Classic ScrollBar.OnScroll Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.ValueChanged"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="ScrollBar.ImeMode">
		<summary>
			<para>Gets or sets the Input Method Editor (IME) mode supported by this control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<seealso cref="System.Windows.Forms.ImeMode"/>
		<seealso cref="System.Windows.Forms.ScrollBar.DefaultImeMode"/>
	</doc>
	<doc for="ScrollBar.LargeChange">
		<summary>
			<para> Gets or sets a value to be added to or subtracted from the <see cref="System.Windows.Forms.ScrollBar.Value"/>
property when the scroll box is moved a large distance.</para>
		</summary>
		<value>
			<para>A numeric value. The default value is 10.</para>
		</value>
		<exception cref="System.ArgumentException">The assigned value is less than 0.</exception>
		<remarks>
			<para>When the user presses the PAGE UP or PAGE DOWN key or
      clicks in the scroll bar track on either side of the scroll box, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property changes according to the
      value set in the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/>
      property.</para>
			<para>You might consider setting the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> value to a percentage of the <see cref="System.Windows.Forms.Control.Height"/>
(for a vertically oriented scroll bar) or <see cref="System.Windows.Forms.Control.Width"/> (for a
horizontally oriented scroll bar) values. This keeps the distance your scroll bar
moves in proportion to its size.</para>
		</remarks>
		<example>
			<para>The following example uses the derived classes <see cref="System.Windows.Forms.VScrollBar"/> and
<see cref="System.Windows.Forms.HScrollBar"/>, and sets some of their common properties. Their
<see cref="System.Windows.Forms.ScrollBar.Maximum"/> properties are set equal to the <see cref="System.Windows.Forms.Control.Height"/>
or <see cref="System.Windows.Forms.Control.Width"/> of the <see cref="System.Drawing.Image"/>
assigned to their parent, a <see cref="System.Windows.Forms.PictureBox"/>.
The <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property is set equal to the size of the
picture box (with the height or width of the scroll bars subtracted). The <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> property is set equal to the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property value divided by five. Lastly, the
<see cref="System.Windows.Forms.ScrollBar.Value"/> property values
for both of the scroll bars are set to 0. The result is vertical
and horizontal scroll bars displayed on a picture box that displays the upper-left corner of the <see cref="System.Drawing.Image"/> . The scroll bars will not scroll past the end
of the image, and when a <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> happens, the image will only move
the same distance as the area displayed in the picture box. It takes five <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> scrolls to move the same distance as one <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> scroll. This code
assumes a <see cref="System.Windows.Forms.PictureBox"/>, <see cref="System.Windows.Forms.HScrollBar"/>, <see cref="System.Windows.Forms.VScrollBar"/>, and
<see cref="System.Drawing.Image"/> have all been created
on a <see cref="System.Windows.Forms.Form"/>. It also assumes that a reference to the
<see cref="System.Drawing" qualify="true"/> namespace has been
added. For additional code that can extend this example, see the <see cref="System.Windows.Forms.ScrollBar"/>
class overview.</para>
			<codelink SampleID="Classic ScrollBar.LargeChange Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.SmallChange"/>
	</doc>
	<doc for="ScrollBar.DefaultImeMode">
		<summary>
			<para>Gets the default Input Method Editor (IME) mode supported by this control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<remarks>
			<para>As implemented in the <see cref="System.Windows.Forms.ScrollBar"/> class, this property always returns the <see cref="System.Windows.Forms.ImeMode.Disable" qualify="true"/>
value.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ImeMode"/>
	</doc>
	<doc for="ScrollBar.Maximum">
		<summary>
			<para> Gets or sets the upper limit of values of the scrollable range.</para>
		</summary>
		<value>
			<para>A numeric value. The default value is 100.</para>
		</value>
		<remarks>
			<para>You might consider adjusting the <see cref="System.Windows.Forms.ScrollBar.Maximum"/> property dynamically to match
   the size of the scroll bar's parent in proportion to pixel size or to the
   number of rows or lines displayed. </para>
			<note type="note">
   The value of a scroll bar cannot reach
   its maximum
   value through user interaction at run time. The maximum value that can be
   reached is equal to the <see cref="System.Windows.Forms.ScrollBar.Maximum"/> property value minus the
<see cref="System.Windows.Forms.ScrollBar.LargeChange"/> 
property value plus one. The maximum value can only be reached
programmatically.
</note>
		</remarks>
		<example>
			<para>The following example uses the derived classes <see cref="System.Windows.Forms.VScrollBar"/> and <see cref="System.Windows.Forms.HScrollBar"/>, and sets some of their common properties. Their <see cref="System.Windows.Forms.ScrollBar.Maximum"/> properties are set equal to the
   height or width of the <see cref="System.Drawing.Image"/> assigned to their parent, a <see cref="System.Windows.Forms.PictureBox"/>. The <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property is set equal to the size of the picture box (with the height or width of the scroll bars subtracted). The <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> property is set equal to the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property value divided by five. Lastly, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property values for both of the scroll bars are set to 0. The result is vertical and horizontal scroll bars displayed on a picture box that displays the upper-left corner of the <see cref="System.Drawing.Image"/> . The scroll bars will not scroll past the end of the image, and when a <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> scroll happens, the image will only move the same distance as the area displayed in the picture box. It takes five <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> scrolls to move the same distance as one <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> scroll. This code assumes a <see cref="System.Windows.Forms.PictureBox"/>, <see cref="System.Windows.Forms.HScrollBar"/>, <see cref="System.Windows.Forms.VScrollBar"/>, and <see cref="System.Drawing.Image"/> have all been created on a <see cref="System.Windows.Forms.Form"/>. It also assumes that a reference to the <see cref="System.Drawing" qualify="true"/> namespace has been added. For additional code that can extend this example, see the <see cref="System.Windows.Forms.ScrollBar"/> class overview.</para>
			<codelink SampleID="Classic ScrollBar.LargeChange Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.Minimum"/>
	</doc>
	<doc for="ScrollBar.Minimum">
		<summary>
			<para> Gets or sets the lower limit of values of the scrollable range.</para>
		</summary>
		<value>
			<para>A numeric value. The default value is 0.</para>
		</value>
		<example>
			<para>The following example uses the derived classes <see cref="System.Windows.Forms.VScrollBar"/> and <see cref="System.Windows.Forms.HScrollBar"/>, and sets some of their common properties. Their <see cref="System.Windows.Forms.ScrollBar.Maximum"/> properties are set equal to the <see cref="System.Windows.Forms.Control.Height"/> or <see cref="System.Windows.Forms.Control.Width"/> of the <see cref="System.Drawing.Image"/> assigned to their parent, a <see cref="System.Windows.Forms.PictureBox"/>. The <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property is set equal to the size of the picture box (with the height or width of the scroll bars subtracted). The <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> property is set equal to the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property value divided by five. Lastly, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property values for both of the scroll bars are set to 0. The result is vertical and horizontal scroll bars displayed on a picture box that displays the upper-left corner of the <see cref="System.Drawing.Image"/> . The scroll bars will not scroll past the end of the image, and when a <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> happens, the image will only move the same distance as the area displayed in the picture box. It takes five <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> scrolls to move the same distance as one <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> scroll. This code assumes a <see cref="System.Windows.Forms.PictureBox"/>, <see cref="System.Windows.Forms.HScrollBar"/>, <see cref="System.Windows.Forms.VScrollBar"/>, and <see cref="System.Drawing.Image"/> have all been created on a <see cref="System.Windows.Forms.Form"/>. It also assumes that a reference to the <see cref="System.Drawing" qualify="true"/> namespace has been added. For additional code that can extend this example, see the <see cref="System.Windows.Forms.ScrollBar"/> class overview.</para>
			<codelink SampleID="Classic ScrollBar.LargeChange Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.Maximum"/>
	</doc>
	<doc for="ScrollBar.SmallChange">
		<summary>
			<para> Gets or sets the value to be added to or subtracted from the
   <see cref="System.Windows.Forms.ScrollBar.Value"/>
   property when the scroll box is
   moved a small distance.</para>
		</summary>
		<value>
			<para>A numeric value. The default value is 1.</para>
		</value>
		<exception cref="System.ArgumentException">The assigned value is less than 0.</exception>
		<remarks>
			<para>When the user presses one of the arrow keys or clicks
      one of the scroll bar buttons, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property changes
      according to the value set in the <see cref="System.Windows.Forms.ScrollBar.SmallChange"/>
      property.</para>
			<para>You might consider setting the <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> value to a 
   percentage of the <see cref="System.Windows.Forms.Control.Height"/> (for a vertically oriented scroll
   bar) or <see cref="System.Windows.Forms.Control.Width"/> (for a horizontally oriented
   scroll bar) values. This keeps the distance your scroll bar moves in proportion
   to its size.</para>
		</remarks>
		<example>
			<para>The following example uses the derived classes <see cref="System.Windows.Forms.VScrollBar"/> and <see cref="System.Windows.Forms.HScrollBar"/>, and sets some of their common properties. Their <see cref="System.Windows.Forms.ScrollBar.Maximum"/> properties are set equal to the <see cref="System.Windows.Forms.Control.Height"/> or <see cref="System.Windows.Forms.Control.Width"/> of the <see cref="System.Drawing.Image"/> assigned to their parent, a <see cref="System.Windows.Forms.PictureBox"/>. The <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property is set equal to the size of the picture box (with the height or width of the scroll bars subtracted). The <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> property is set equal to the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property value divided by five. Lastly, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property values for both of the scroll bars are set to 0. The result is vertical and horizontal scroll bars displayed on a picture box that displays the upper-left corner of the <see cref="System.Drawing.Image"/> . The scroll bars will not scroll past the end of the image, and when a <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> happens, the image will only move the same distance as the area displayed in the picture box. It takes five <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> scrolls to move the same distance as one <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> scroll. This code assumes a <see cref="System.Windows.Forms.PictureBox"/>, <see cref="System.Windows.Forms.HScrollBar"/>, <see cref="System.Windows.Forms.VScrollBar"/>, and <see cref="System.Drawing.Image"/> have all been created on a <see cref="System.Windows.Forms.Form"/>. It also assumes that a reference to the <see cref="System.Drawing" qualify="true"/> namespace has been added. For additional code that can extend this example, see the <see cref="System.Windows.Forms.ScrollBar"/> class overview.</para>
			<codelink SampleID="Classic ScrollBar.LargeChange Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.LargeChange"/>
	</doc>
	<doc for="ScrollBar.Value">
		<summary>
			<para> Gets or sets a numeric value that represents the current
      position of the scroll box
      on
      the scroll bar control.</para>
		</summary>
		<value>
			<para>A numeric value that is within the <see cref="System.Windows.Forms.ScrollBar.Minimum"/> and <see cref="System.Windows.Forms.ScrollBar.Maximum"/> range. The default value is 0.</para>
		</value>
		<exception cref="System.ArgumentException">
			<para>The assigned value is less than the <see cref="System.Windows.Forms.ScrollBar.Minimum"/> property value.</para>
			<para>-or-</para>
			<para>The assigned value is greater than the <see cref="System.Windows.Forms.ScrollBar.Maximum"/> property value. </para>
		</exception>
		<example>
			<para>The following example uses the derived classes <see cref="System.Windows.Forms.VScrollBar"/> and <see cref="System.Windows.Forms.HScrollBar"/>, and sets some of their common properties. Their <see cref="System.Windows.Forms.ScrollBar.Maximum"/> properties are set equal to the <see cref="System.Windows.Forms.Control.Height"/> or <see cref="System.Windows.Forms.Control.Width"/> of the <see cref="System.Drawing.Image"/> assigned to their parent, a <see cref="System.Windows.Forms.PictureBox"/>. The <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property is set equal to the size of the picture box (with the height or width of the scroll bars subtracted). The <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> property is set equal to the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> property value divided by five. Lastly, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property values for both of the scroll bars are set to 0. The result is vertical and horizontal scroll bars displayed on a picture box that displays the upper-left corner of the <see cref="System.Drawing.Image"/> . The scroll bars will not scroll past the end of the image, and when a <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> happens, the image will only move the same distance as the area displayed in the picture box. It takes five <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> scrolls to move the same distance as one <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> scroll. This code assumes a <see cref="System.Windows.Forms.PictureBox"/>, <see cref="System.Windows.Forms.HScrollBar"/>, <see cref="System.Windows.Forms.VScrollBar"/>, and <see cref="System.Drawing.Image"/> have all been created on a <see cref="System.Windows.Forms.Form"/>. It also assumes that a reference to the <see cref="System.Drawing" qualify="true"/> namespace has been added. For additional code that can extend this example, see the <see cref="System.Windows.Forms.ScrollBar"/> class overview.</para>
			<codelink SampleID="Classic ScrollBar.LargeChange Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ScrollBar.ValueChanged">
		<summary>
			<para>Occurs when the <see cref="System.Windows.Forms.ScrollBar.Value"/> property has changed, either by a
<see cref="System.Windows.Forms.ScrollBar.Scroll"/> event or programmatically.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the derived class, <see cref="System.Windows.Forms.VScrollBar"/> . Event handlers for the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> and <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> events are created. This code assumes that a <see cref="System.Windows.Forms.Label"/> and <see cref="System.Windows.Forms.Button"/> have been created on a form and that the button has an event handler for the <see cref="System.Windows.Forms.Control.Click"/> event. When the button is clicked, the <see cref="System.Windows.Forms.ScrollBar.Value"/> property of the scroll bar is adjusted in code. The label will display the current value of the <see cref="System.Windows.Forms.ScrollBar.Value"/> property and the event that changed it. You will notice that when the scroll value is changed by the button <see cref="System.Windows.Forms.Control.Click"/> event, only the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event is raised. In contrast, when the scroll bar is scrolled manually, the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> event is raised immediately after the <see cref="System.Windows.Forms.ScrollBar.ValueChanged"/> event.</para>
			<codelink SampleID="Classic ScrollBar.OnScroll Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBar.OnValueChanged"/>
		<seealso cref="System.EventHandler"/>
	</doc>
	<doc for="ScrollBar">
		<summary>
			<para>Implements the basic functionality of a scroll bar control.</para>
		</summary>
		<remarks>
			<para>You typically do not inherit directly from <see cref="System.Windows.Forms.ScrollBar"/>. To
   create your own scroll bar class, inherit from the <see cref="System.Windows.Forms.VScrollBar"/> or <see cref="System.Windows.Forms.HScrollBar"/> class.</para>
			<para>To adjust the value range of the scroll bar control, set the <see cref="System.Windows.Forms.ScrollBar.Minimum"/> and <see cref="System.Windows.Forms.ScrollBar.Maximum"/>
properties. To adjust the distance the scroll box moves, set the <see cref="System.Windows.Forms.ScrollBar.SmallChange"/> and <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> properties. To
adjust the starting point of the scroll box, set the <see cref="System.Windows.Forms.ScrollBar.Value"/> property when the control is
initially displayed.</para>
			<note type="note">
   The scroll box is sometimes referred to as the scroll thumb.
</note>
		</remarks>
		<example>
			<para>The following example adds horizontal and vertical scroll bars to a <see cref="System.Windows.Forms.PictureBox"/> control,
   and loads an <see cref="System.Drawing.Image"/> into the picture box on the <see cref="System.Windows.Forms.Control.DoubleClick"/> event of the control. At any time you can double-click the
   picture box and load a new image. If the image is larger than the control, the scroll bars will be displayed so you can scroll to view the remainder of
   the image. The example assumes that a <see cref="System.Windows.Forms.PictureBox"/>, with a <see cref="System.Windows.Forms.VScrollBar"/> and
<see cref="System.Windows.Forms.HScrollBar"/> docked to two of its edges, has been
   created on a <see cref="System.Windows.Forms.Form"/>. It also assumes a refernce to the the <see cref="System.Drawing" qualify="true"/> namespace has been added. Make
   sure the <c>HandleScroll</c> method is set as the <see cref="System.Windows.Forms.ScrollBar.Scroll"/> event handler delegate for both the <see cref="System.Windows.Forms.VScrollBar"/> and
<see cref="System.Windows.Forms.HScrollBar"/> . For additional code that can extend this example, see the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> , <see cref="System.Windows.Forms.ScrollBar.SmallChange"/>, 
<see cref="System.Windows.Forms.ScrollBar.Maximum"/>, <see cref="System.Windows.Forms.ScrollBar.Minimum"/> or <see cref="System.Windows.Forms.ScrollBar.Value"/> members. You might consider setting the
properties of your scroll bar based on the properties of its parent control. For instance, you can add a method to the example that sets the <see cref="System.Windows.Forms.ScrollBar.Maximum"/> value equal to the <see cref="System.Windows.Forms.Control.Height"/>
or <see cref="System.Windows.Forms.Control.Width"/> of the <see cref="System.Drawing.Image"/> assigned to the <see cref="System.Windows.Forms.PictureBox"/>. Set the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> value equal to the height or width of
the <see cref="System.Windows.Forms.PictureBox"/> (with the height or width of the scroll bar subtracted). This prevents the user from scrolling past the edge of the image, and the <see cref="System.Windows.Forms.ScrollBar.LargeChange"/> will only move the image's viewable
area the same distance as the area displayed in the picture box.</para>
			<codelink SampleID="Classic ScrollBar Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.VScrollBar"/>
		<seealso cref="System.Windows.Forms.HScrollBar"/>
	</doc>
	<doc for="ScrollBar.ForeColor">
		<nodoc/>
		<summary>
			<para>       Gets or sets the foreground color of the scroll bar control.
      </para>
		</summary>
		<value>
			<para>       A <see cref="System.Drawing.Color"/> that represents the foreground color for this scroll bar control. The default is the foreground color of the parent control.
   </para>
		</value>
		<remarks>
			<para>       This property can only be changed programatically, it is not visible in the Properties window.
      </para>
		</remarks>
	</doc>
</docs>
