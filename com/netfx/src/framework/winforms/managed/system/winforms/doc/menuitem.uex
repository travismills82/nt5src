<docs>
	<doc for="MenuItem.Menu">
		<summary>
			<para>Gets a value indicating the menu in which this menu item appears.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Menu"/> that represents the
    menu that contains
    this menu item.</para>
		</value>
		<remarks>
			<para>You can use this property to obtain the parent
    <see cref="System.Windows.Forms.Menu"/>
    object for a submenu. You can cast the <see cref="System.Windows.Forms.Menu"/> object returned by
    this property to a <see cref="System.Windows.Forms.MenuItem"/>
    object
    to manipulate it.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.MenuItem.Parent"/>
	</doc>
	<doc for="MenuItem.MenuID">
		<summary>
			<para>Gets a value indicating the Windows identifier for this menu item.</para>
		</summary>
		<value>
			<para>The Windows identifier for this menu item.</para>
		</value>
	</doc>
	<doc for="MenuItem.MenuIndex">
		<summary>
			<para>
       Gets the zero-based index of this menu
       item in the parent menu, or -1 if this
       menu item is not associated with a 
       parent menu.
    </para>
		</summary>
	</doc>
	<doc for="MenuItem.MergeType">
		<summary>
			<para> Gets or sets a value indicating the behavior of this
       menu item when its menu is merged with another.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.MenuMerge"/> value that
    represents the
    menu item's merge
    type.</para>
		</value>
		<remarks>
			<para>The merge type of
       a menu item indicates how the menu
       item behaves when it has the same merge order as another
       menu item being merged. You can use merged menus to create
       a consolidated menu based on two
       or more existing menus.</para>
		</remarks>
		<example>
			<para>The following example creates a MenuItem with the <see cref="System.Windows.Forms.MenuItem.MergeType"/> and <see cref="System.Windows.Forms.MenuItem.MergeOrder"/>
 specified so that the menu item is
 added to the merged menu at first position.</para>
			<codelink SampleID="Classic MenuItem.MergeType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuMerge"/>
		<seealso cref="System.Windows.Forms.MenuItem.MergeOrder"/>
	</doc>
	<doc for="MenuItem.MergeMenu">
		<overload>
			<para>Merges this <see cref="System.Windows.Forms.MenuItem"/> with another <see cref="System.Windows.Forms.MenuItem"/> .</para>
		</overload>
		<summary>
			<para>Merges this <see cref="System.Windows.Forms.MenuItem"/> with another <see cref="System.Windows.Forms.MenuItem"/> and returns
    the resulting merged <see cref="System.Windows.Forms.MenuItem"/>.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Windows.Forms.MenuItem"/> that represents
    the
    merged menu item.</para>
		</returns>
		<remarks>
			<para> When you call this version of <see cref="System.Windows.Forms.MenuItem.MergeMenu"/>, the <see cref="System.Windows.Forms.MenuItem"/> returned is a copy of the current menu item 
    that can be merged with another menu item without affecting the functionality of
    the current item. This version of the <see cref="System.Windows.Forms.MenuItem.MergeMenu"/> method is similar to calling the <see cref="System.Windows.Forms.MenuItem.CloneMenu"/> method
    that contains no
    parameters.</para>
		</remarks>
	</doc>
	<doc for="MenuItem.OnDrawItem">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.MenuItem.DrawItem"/>
 event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.DrawItemEventArgs"/>that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more information, see <see topic="cpconProvidingEventFunctionality"/>
 .</para>
			<note type="inheritinfo">
    When overriding <see cref="System.Windows.Forms.MenuItem.OnDrawItem"/> in a derived class, be sure
    to call the base class's <see cref="System.Windows.Forms.MenuItem.OnDrawItem"/> method.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.DrawItemEventArgs"/>
	</doc>
	<doc for="MenuItem.OnMeasureItem">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.MenuItem.MeasureItem"/>
 event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MeasureItemEventArgs"/>that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more information, see <see topic="cpconProvidingEventFunctionality"/>
 .</para>
			<note type="inheritinfo">
    When overriding <see cref="System.Windows.Forms.MenuItem.OnMeasureItem"/> in a derived class, be sure to call the base
    class's <see cref="System.Windows.Forms.MenuItem.OnMeasureItem"/> method.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.MeasureItemEventArgs"/>
	</doc>
	<doc for="MenuItem.OnInitMenuPopup">
		<internalonly/>
		<param name="e">
    An <see cref="System.EventArgs"/>that contains the event
    data.
 </param>
		<keyword term=""/>
	</doc>
	<doc for="MenuItem.ToString">
		<internalonly/>
		<summary>
			<para>
       Returns a string representation for this control.
    </para>
		</summary>
		<returns>
			<para>
       String
    </para>
		</returns>
		<keyword term=""/>
	</doc>
	<doc for="MenuItem.WmDrawItem">
		<summary>
		</summary>
	</doc>
	<doc for="MenuItem.WmMeasureItem">
		<summary>
		</summary>
	</doc>
	<doc for="MenuItem.MenuItemData">
		<summary>
		</summary>
	</doc>
	<doc for="MenuItem.Mnemonic">
		<summary>
			<para> Gets a value indicating the mnemonic character that is associated
      with this menu item.</para>
		</summary>
		<value>
			<para>A character that represents the mnemonic character
      associated with this menu item. Returns the character '0' if no mnemonic
      character is specified in the text of the <see cref="System.Windows.Forms.MenuItem"/> .</para>
		</value>
		<remarks>
			<para>The mnemonic character is the first character after
      a ampersand chracter in the text of the <see cref="System.Windows.Forms.MenuItem"/>. This
      property will not return a mnemonic if two ampersand characters are placed
      together as the ampersands are used to display an ampersand in the text of
      the <see cref="System.Windows.Forms.MenuItem"/> instead of defining a mnemonic character.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.MenuItem.Text"/>
	</doc>
	<doc for="MenuItem">
		<summary>
			<para>Represents an individual item that is displayed within a
   <see cref="System.Windows.Forms.MainMenu"/> or <see cref="System.Windows.Forms.ContextMenu"/>.</para>
		</summary>
		<remarks>
			<para>In order for a <see cref="System.Windows.Forms.MenuItem"/> to be
   displayed, you
   must add it to a <see cref="System.Windows.Forms.MainMenu"/> or
<see cref="System.Windows.Forms.ContextMenu"/> . To create
   submenus, you can
   add <see cref="System.Windows.Forms.MenuItem"/> objects to the
<see cref="System.Windows.Forms.Menu.MenuItems"/>
property of the parent <see cref="System.Windows.Forms.MenuItem"/>.</para>
			<para>The <see cref="System.Windows.Forms.MenuItem"/> 
class
provides properties that enable you to configure the appearance
and functionality
of a menu item. To display a check mark next to a
menu item, use
the <see cref="System.Windows.Forms.MenuItem.Checked"/> property.
You can use this feature to identify a menu item that is selected in a
list of mutually exclusive menu items. For example, if you have a set of menu
items for setting the color of text in a <see cref="System.Windows.Forms.TextBox"/> control, you can use
the <see cref="System.Windows.Forms.MenuItem.Checked"/>
property to identify which color
is currently selected.
The <see cref="System.Windows.Forms.MenuItem.Shortcut"/>
property can be used
to define a keyboard combination that
can be pressed to select the menu item.</para>
			<para>For <see cref="System.Windows.Forms.MenuItem"/> objects displayed in a
Multiple Document Interface (MDI) application, you can use the <see cref="System.Windows.Forms.MenuItem.MergeMenu"/> method to merge the menus of an MDI parent for
with that of its child forms to create a consolidated menu structure. Because
a <see cref="System.Windows.Forms.MenuItem"/> cannot be reused in multiple locations at the
same time, such as in a <see cref="System.Windows.Forms.MainMenu"/> and a <see cref="System.Windows.Forms.ContextMenu"/>, you can use the <see cref="System.Windows.Forms.MenuItem.CloneMenu"/> method to create a copy of a <see cref="System.Windows.Forms.MenuItem"/>
for use in another location.</para>
			<para>The <see cref="System.Windows.Forms.MenuItem.Popup"/>
event enables you to perform tasks before a menu is displayed. For example, you
can create an event handler for this event to display or hide menu items based
on the state of your code. The <see cref="System.Windows.Forms.MenuItem.Select"/>
event enables
you to perform tasks such as providing detailed help for your
application's menu items when
the user places the mouse cursor over a menu item.</para>
		</remarks>
		<example>
			<para>The following example creates a menu structure for a form. The
      example code adds a <see cref="System.Windows.Forms.MenuItem"/> to represent the
      top-level menu item, adds a submenu item to it for selecting a
      font size, and
      then adds two submenu items to that menu item that represent
      large and small
      font choices in an application. The example assumes that there
      is a <see cref="System.Windows.Forms.MainMenu"/> object named <c>mainMenu1</c> and four <see cref="System.Windows.Forms.MenuItem"/> objects named <c>menuItem1</c>, <c>menuItem2</c>,
   <c>menuItem3</c>, and <c>menuItem4</c>.</para>
			<codelink SampleID="Classic Menu Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MainMenu"/>
		<seealso cref="System.Windows.Forms.Menu"/>
		<seealso cref="System.Windows.Forms.MenuMerge"/>
		<seealso cref="System.Windows.Forms.ContextMenu"/>
		<keyword term="Menu"/>
	</doc>
	<doc for="MenuItem.MenuItem2">
		<summary>
			<para>Initializes a new instance of the class with a specified caption
      and event handler for the <see cref="System.Windows.Forms.MenuItem.Click"/>
      event of the menu item.</para>
		</summary>
		<param name="text">The caption for the menu item.</param>
		<param name="onClick">The <see cref="System.EventHandler"/> that handles the <see cref="System.Windows.Forms.MenuItem.Click"/> event for this menu item.</param>
		<remarks>
			<para>When you specify a caption for your menu item with the
   <paramref name="text"/> parameter, you can also specify an access
      key by placing an '&amp;'
      before the character to be used as the access key.
      For example, to
      specify the "F" in "File" as an access key, you would
      specify the caption for
      the menu item as "&amp;File". You can use this feature to
      provide keyboard navigation for
      your
      menus.</para>
			<para>In addition, you can use this constructor
      to specify a delegate that will handle the <see cref="System.Windows.Forms.MenuItem.Click"/>
      event for the menu item being
      created.
      The <see cref="System.EventHandler"/> that you pass
      to this constructor must be configured to call an event handler that can handle
      the <see cref="System.Windows.Forms.MenuItem.Click"/> event. For more information
      on handling events, see <see topic="cpconEventsDelegates"/> .</para>
		</remarks>
		<example>
			<para>The following example creates
      a <see cref="System.Windows.Forms.MenuItem"/> object with a specified caption and
      an <see cref="System.EventHandler"/> delegate connected to a event handler that will
      handle the <see cref="System.Windows.Forms.MenuItem.Click"/> event for the menu item.</para>
			<codelink SampleID="Classic MenuItem.MenuItem2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.MenuItem3">
		<summary>
			<para>Initializes a new instance of the
      class with a
      specified caption, event handler, and associated
      shortcut key for the menu item.</para>
		</summary>
		<param name="text">The caption for the menu item.</param>
		<param name="onClick">The <see cref="System.EventHandler"/> that handles the <see cref="System.Windows.Forms.MenuItem.Click"/> event for this menu item.</param>
		<param name="shortcut">One of the <see cref="System.Windows.Forms.Shortcut"/> values.</param>
		<remarks>
			<para>When you specify a caption for your menu item with the <paramref name="text"/> parameter, you can also specify an access
   key by placing an '&amp;' before the character to be used as the access
   key. For example, to specify the "F" in "File" as an access key, you would
   specify the caption for the menu item as "&amp;File". You can use this feature to provide keyboard navigation for your menus. This constructor also enables you to specify a shortcut key in addition to an access key to provide keyboard navigation. Shortcut keys allow you to specify a combination of keys that can be used to activate the menu item.</para>
			<para>In addition, you can use this constructor to specify a delegate that will handle the <see cref="System.Windows.Forms.MenuItem.Click"/> event for the menu item being created. The <see cref="System.EventHandler"/> that you pass to this constructor must be configured to call an event handler that can handle the <see cref="System.Windows.Forms.MenuItem.Click"/> event. For more information on handling events, see <see topic="cpconEventsDelegates"/> .</para>
		</remarks>
		<example>
			<para>The following example creates a object with a
      specified caption, shortcut key, and an event
      handler connected to a method that will handle the event for the menu item.</para>
			<codelink SampleID="Classic MenuItem.MenuItem3 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.MenuItem5">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.MenuItem"/> class with a specified
   caption; defined event-handlers for the <see cref="System.Windows.Forms.MenuItem.Click"/>, <see cref="System.Windows.Forms.MenuItem.Select"/> and
<see cref="System.Windows.Forms.MenuItem.Popup"/>
events; a shortcut key;
a merge type; and order specified for the menu item.</para>
		</summary>
		<param name="mergeType">One of the <see cref="System.Windows.Forms.MenuMerge"/> values.</param>
		<param name="mergeOrder">The relative position that this menu item will assume in a merged menu.</param>
		<param name="shortcut">One of the <see cref="System.Windows.Forms.Shortcut"/> values.</param>
		<param name="text">
			<para>The caption for the menu item. </para>
		</param>
		<param name="onClick">The <see cref="System.EventHandler"/> that handles the <see cref="System.Windows.Forms.MenuItem.Click"/> event for this menu item.</param>
		<param name="onPopup">The <see cref="System.EventHandler"/> that handles the <see cref="System.Windows.Forms.MenuItem.Popup"/> event for this menu item.</param>
		<param name="onSelect">The <see cref="System.EventHandler"/> that handles the <see cref="System.Windows.Forms.MenuItem.Select"/> event for this menu item.</param>
		<param name="items">An array of <see cref="System.Windows.Forms.MenuItem"/> objects that contains the submenu items for this menu item.</param>
		<remarks>
			<para>When you specify a caption for your menu item with the
   <paramref name="text"/> parameter, you can also specify an access
      key by placing an '&amp;' before the character to be used as the access
      key. For example, to specify the "F" in "File" as an access key, you would
      specify the caption for the menu item as "&amp;File". You can use this feature to provide keyboard navigation for your
      menus.</para>
			<para>The <paramref name="items"/>
parameter enables you to assign an array of menu items to
define a submenu of this
menu item. Each item in the array can also have an
array of menu items assigned
to it. This enables you to
create complete menu structures and assign them to the constructor for
the menu item.</para>
			<para>The <paramref name="mergeType"/> and
<paramref name="mergeOrder"/> parameters allow you to
determine how this menu item will
behave when the menu item is merged with another menu.
Depending on the value
you specify for the <paramref name="mergeType"/>
parameter, you can either
add, remove, replace, or merge the menu item and its submenu items with the menu
that it is merging with. The <paramref name="mergeOrder"/>
parameter determines
where the menu item being created will be positioned when
the menu is merged.</para>
			<para>In addition, you can use this constructor to create a 
<see cref="System.Windows.Forms.MenuItem"/> 
and have it
connected to an event handler in your code that will
process the click of the menu item.
The <see cref="System.EventHandler"/> that you pass into
this constructor should be configured to call an event handler that can handle
the <see cref="System.Windows.Forms.MenuItem.Click"/> event. By using this constructor version, you can also connect
the <see cref="System.Windows.Forms.MenuItem.Popup"/> and <see cref="System.Windows.Forms.MenuItem.Select"/> events to determine when this menu item
is selected. You can use these events for tasks such as determining whether or
not to display a check mark next to submenu items or to enable or disable menu
items based on the state of the application. The
<see cref="System.Windows.Forms.MenuItem.Select"/> and <see cref="System.Windows.Forms.MenuItem.Click"/> events are raised only for <see cref="System.Windows.Forms.MenuItem"/>
objects that are not parent menu items. For more information
on handling events, see <see topic="cpconEventsDelegates"/>
.</para>
		</remarks>
		<example>
			<para>The following example creates a menu item that has a
      caption and shortcut key. The menu item also has event handlers defined for the
   <see cref="System.Windows.Forms.MenuItem.Popup"/>, <see cref="System.Windows.Forms.MenuItem.Click"/>, and <see cref="System.Windows.Forms.MenuItem.Select"/>
   events. If this menu item is merged, it
   will
   add the menu item to the menu with the merge order of
   zero.</para>
			<codelink SampleID="Classic MenuItem.MenuItem5 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.Popup"/>
		<seealso cref="System.Windows.Forms.MenuItem.Select"/>
		<seealso cref="System.Windows.Forms.MenuItem.Click"/>
		<seealso cref="System.Windows.Forms.MenuItem.MergeType"/>
		<seealso cref="System.Windows.Forms.MenuItem.MergeOrder"/>
	</doc>
	<doc for="MenuItem.BarBreak">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Windows.Forms.MenuItem"/> is
   placed on a new line (for a menu item added to a <see cref="System.Windows.Forms.MainMenu"/> object) or in a new column
   (for a submenu item or menu item displayed in a <see cref="System.Windows.Forms.ContextMenu"/>
   ).</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> to place the menu item on a new line or
   in a new
   column; <see langword="false"/>
   to leave the menu item in its default placement. The
   default is
<see langword="false"/>
.</para>
		</value>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.MenuItem.BarBreak"/> property to create a menu where
   each
   menu item is placed next to each other horizontally instead
   of in a vertical
   list. You can also use this property to create a menu bar
   that contains multiple rows of top-level menu items.</para>
			<para>This property differs from
   the <see cref="System.Windows.Forms.MenuItem.Break"/> property
   in that a bar is displayed on
   the left edge of each menu item that has the <see cref="System.Windows.Forms.MenuItem.Break"/>
   property set to
<see langword="true"/>. The bar is only displayed when the
   menu item is not a top-level menu item.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.MenuItem"/> with two submenu items. The two submenu items
   are displayed horizontally instead of vertically using the <see cref="System.Windows.Forms.MenuItem.BarBreak"/>
   property.</para>
			<codelink SampleID="Classic MenuItem.BarBreak Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.Break"/>
	</doc>
	<doc for="MenuItem.Checked">
		<summary>
			<para> Gets or sets a value indicating whether a check
      mark appears next to the text of the menu item.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the menu item
   to place a check mark
   next to the menu item; otherwise, <see langword="false"/> .
   The default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.MenuItem.Checked"/> property in combination with other menu
   items in a menu to provide state for an application. For example, you can place
   a check mark on a menu item in a group of items to identify the size of the
   font to be displayed for the text in an application. You can also use
   the <see cref="System.Windows.Forms.MenuItem.Checked"/>
   property
   to identify the selected menu item
   in a group of mutually exclusive menu items.</para>
			<note type="note">
   This property cannot be set to
<see langword="true"/> for top-level menu items.
   
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.MenuItem.Checked"/> property to provide the state in an
   application. In this example, a group of menu items are used to specify the
   color for the text in an <see cref="System.Windows.Forms.TextBox"/>
   control. The event handler provided is used by the <see cref="System.Windows.Forms.MenuItem.Click"/> event of three menu items. Each
   menu item specifies
   a text color, <c>menuItemRed</c> (Red), <c>menuItemGreen</c> (Green), or <c>menuItemBlue</c>
(Blue). The event handler
determines which menu item was clicked, places a checkmark
to the selected menu
item, and changes the text color of the form's <see cref="System.Windows.Forms.TextBox"/> control. The example assumes that the <see cref="N:System.Drawing"/> namespace has
been added to the form that this code is placed in. The example also assumes
that a <see cref="System.Windows.Forms.TextBox"/>
has been added to the
form that this example code is located in that is named
<c>textBox1</c>.</para>
			<codelink SampleID="Classic MenuItem.Checked Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Index">
		<summary>
			<para> Gets or sets a value indicating the position of the menu item in its parent menu.</para>
		</summary>
		<value>
			<para>The zero-based index representing the
      position of the menu item in its parent menu.</para>
		</value>
		<remarks>
			<para>This property provides the indexed position of a menu
      item in the menu item collection of its parent menu. You can use this property
      to reposition a menu item to a different location within its menu. You can also
      use this property when creating a <see cref="System.Windows.Forms.MenuItem"/>
      to specify
      its position in
      a menu structure at the time of creation.</para>
		</remarks>
		<example>
			<para>The following example switches the position of two menu
      items in a menu. The following example assumes that two <see cref="System.Windows.Forms.MenuItem"/>
      objects
      are created named <c>menuItem1</c> and
   <c>menuItem2</c>. The <c>menuItem1</c> menu
   item moves down one position in the menu, while <c>menuItem2</c>
moves up
one position.</para>
			<codelink SampleID="Classic MenuItem.Index Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.IsParent">
		<summary>
			<para> Gets a value indicating whether the menu item contains
      child menu items.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the menu item contains
   child menu items; <see langword="false"/> if the menu is a
   standalone menu item.</para>
		</value>
		<remarks>
			<para> You can use this property with
      the <see cref="System.Windows.Forms.MenuItem.Parent"/>
      property to navigate in code through
      an entire menu structure.</para>
		</remarks>
		<example>
			<para>The following example determines whether there
      are any submenus associated with a <see cref="System.Windows.Forms.MenuItem"/> named <c>menuItem1</c>. If any submenus exist,
   it disables them by setting the <see cref="System.Windows.Forms.MenuItem.Enabled"/> property to
<see langword="false"/>. The example assumes that there is a
<see cref="System.Windows.Forms.MenuItem"/>
object created named <c>menuItem1</c>.</para>
			<codelink SampleID="Classic MenuItem.IsParent Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.OwnerDraw">
		<summary>
			<para> Gets or sets a value indicating whether the code
      that you provide draws the menu item or Windows draws the
      menu item.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the menu item is to be drawn
   using code; <see langword="false"/> if the menu item is to
   be drawn by
   Windows. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.MenuItem.OwnerDraw"/>
property is set to
<see langword="true"/> ,
you need to handle all drawing of the menu item. You can
use this capability to
create your own special menu displays.</para>
		</remarks>
		<seealso cref="System.Drawing.Graphics"/>
		<seealso cref="System.Windows.Forms.Menu"/>
	</doc>
	<doc for="MenuItem.RadioCheck">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Windows.Forms.MenuItem"/> , 
   if checked, displays a radio-button instead of a check mark.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if a radio-button is to be
   used instead of a check mark; <see langword="false"/> if
   the standard check mark
   is to be displayed when the menu item is checked. The
   default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Check marks do not necessarily imply a mutually
      exclusive state for a group of menu items. You can use this
      property to indicate
      to the user that the check mark of a menu item is mutually
      exclusive.</para>
		</remarks>
		<example>
			<para>The following example uses the
   <see cref="System.Windows.Forms.MenuItem.Checked"/> property to change the state of an
      application. In the example, a group of menu items are provided that are used to
      specify the color for the text in an <see cref="System.Windows.Forms.TextBox"/> control. In the example, the
      event handler provided is used by the <see cref="System.Windows.Forms.MenuItem.Click"/> event of the three menu
      items. Each menu item specifies a color, <c>menuItemRed</c>, <c>menuItemGreen</c>, or <c>menuItemBlue</c>. The
   event handler determines which menu item was clicked, places a checkmark to the
   selected menu item, and changes the text color of the form's <see cref="System.Windows.Forms.TextBox"/> control, named
   <c>textBox1</c>. The example also uses
   the <see cref="System.Windows.Forms.MenuItem.RadioCheck"/> property
   to demonstrate how a radio-button check is used to show menu items that are
   mutually exclusive. This example assumes that the <see cref="System.Drawing" qualify="true"/>
   namespace has been added to the form that contains this
   code.</para>
			<codelink SampleID="Classic MenuItem.RadioCheck Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.Checked"/>
	</doc>
	<doc for="MenuItem.CloneMenu">
		<overload>
			<para>Creates a copy of a <see cref="System.Windows.Forms.MenuItem"/> .</para>
		</overload>
		<summary>
			<para>Creates a copy of the current <see cref="System.Windows.Forms.MenuItem"/> .</para>
		</summary>
		<returns>
			<para>A <see cref="System.Windows.Forms.MenuItem"/> that represents
   the duplicated menu
   item.</para>
		</returns>
		<remarks>
			<para>
				<see cref="System.Windows.Forms.MenuItem"/>objects cannot be used in more than one place unless
   you obtain a copy of the <see cref="System.Windows.Forms.MenuItem"/>
   . You can call this method to create a
   copy of this menu item for use in a <see cref="System.Windows.Forms.ContextMenu"/> , <see cref="System.Windows.Forms.MainMenu"/>, or other <see cref="System.Windows.Forms.MenuItem"/> within your application. When a menu item is
   cloned, any event handlers specified in the original menu item will continue to
   function in the cloned version of the menu item. For example, if you created
   a <see cref="System.Windows.Forms.MenuItem"/> and connected its <see cref="System.Windows.Forms.MenuItem.Click"/>
   event to an event handler. When the menu item is cloned, the cloned menu
   item will call the
   same event handler.</para>
		</remarks>
		<example>
			<para> The following example clones a <see cref="System.Windows.Forms.MenuItem"/> and
   displays it in a <see cref="System.Windows.Forms.ContextMenu"/>
   . The example assumes
   that a <see cref="System.Windows.Forms.MenuItem"/> exists in a <see cref="System.Windows.Forms.MainMenu"/> object on a form with the name of
   <c>menuItem1</c> and
   a that a <see cref="System.Windows.Forms.ContextMenu"/> object
   named <c>contextMenu1</c> also
exists on the form.</para>
			<codelink SampleID="Classic MenuItem.CloneMenu Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.MeasureItem">
		<summary>
			<para> Occurs when the menu needs to know the size of a
      menu item before drawing it.</para>
		</summary>
		<remarks>
			<para>In order for this event to be raised, you must have the
   <see cref="System.Windows.Forms.MenuItem.OwnerDraw"/> property of the menu item set
      to <see langword="true"/> . This event is raised before owner drawn menus
      are drawn to allow for the size of the menu item to be drawn to be specified.
      For more information about handling events, see <see topic="cpconEventsOverview"/>
      .</para>
		</remarks>
		<seealso cref="System.Windows.Forms.MenuItem.OwnerDraw"/>
		<seealso cref="System.Windows.Forms.MenuItem.DrawItem"/>
	</doc>
	<doc for="MenuItem.MenuItem">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.MenuItem"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a <see cref="System.Windows.Forms.MenuItem"/> with
   a blank caption.</para>
		</summary>
		<remarks>
			<para>Once you have created a blank <see cref="System.Windows.Forms.MenuItem"/> using this constructor,
   you can use the properties and methods of the <see cref="System.Windows.Forms.MenuItem"/> class to specify the appearance and
   behavior of your <see cref="System.Windows.Forms.MenuItem"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.MenuItem"/> using this version of the constructor.</para>
			<codelink SampleID="Classic MenuItem.MenuItem Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.MenuItem4">
		<summary>
			<para> Initializes a new instance
      of the class
      with a specified caption and an array of
      submenu items defined for the menu item.</para>
		</summary>
		<param name="text">The caption for the menu item.</param>
		<param name="items">An array of <see cref="System.Windows.Forms.MenuItem"/> objects that contains the submenu items for this menu item.</param>
		<remarks>
			<para>When you specify a caption for your menu item with the
   <paramref name="text"/> parameter, you can also specify an access key by placing an
      '&amp;'
      before the character to be used as the access key.
      For example, to specify the "F"
      in "File" as an access key, you would specify the caption
      for
      the menu item as
      "&amp;File". You can use this feature to provide keyboard navigation
      for your
      menus.</para>
			<para>The <paramref name="items"/> parameter enables you
   to
   assign an array of menu items to define a submenu of this menu
   item. Each item in
   the array can also have an array of menu items assigned to
   it. This enables you
   to create complete menu structures and assign them to the constructor
   for the menu
   item.</para>
			<para> For more
   information on handling events, see <see topic="cpconEventsDelegates"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a object with a specified caption, an event
      handler connected to a method that will handle the event each menu item in
      an array of submenu items.</para>
			<codelink SampleID="Classic MenuItem.MenuItem4 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Break">
		<summary>
			<para> Gets or sets a value indicating whether the item is
      placed on a new line (for a menu item added to a <see cref="System.Windows.Forms.MainMenu"/> object)
      or in a new column (for a menu item or
      submenu item displayed in a <see cref="System.Windows.Forms.ContextMenu"/>).</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> to place the menu item on a new line or
   in a new
   column; <see langword="false"/>
   to leave the menu item in its default placement. The
   default is
<see langword="false"/>
.</para>
		</value>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.MenuItem.Break"/>
property to create a menu where
each menu is placed next to each other horizontally instead
of in a vertical
list. You can also use
this property to create a menu bar that contains multiple
rows of top-level menu items.</para>
		</remarks>
		<example>
			<para>The following example creates a menu with two top-level
      menu items on the top row and one menu item on the bottom
      row.</para>
			<codelink SampleID="Classic MenuItem.Break Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.BarBreak"/>
	</doc>
	<doc for="MenuItem.MdiList">
		<summary>
			<para> Gets or sets a value
      indicating whether the menu item will be populated with
      a list of the Multiple Document Interface (MDI) child windows that are displayed within the
      associated form.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> to display a list of the MDI child
   windows in this menu item; otherwise, <see langword="false"/>
   . The default is <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>When a menu item is selected to display an MDI child window
      list, the list is displayed as a submenu of the menu
      item. Only forms that
      are defined as MDI child forms are displayed in the window
      list. Only nine
      child windows can be displayed at a time. If there are
      more than nine child windows
      displayed, a "More Windows..." menu item is displayed at
      the end of the window
      list. Clicking this menu item displays a dialog box with
      a complete list of
      the child windows that are currently active.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.MenuItem"/> that is used to
   display the list
   of currently open MDI child forms in an MDI form.</para>
			<codelink SampleID="Classic MenuItem.MdiList Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Text">
		<summary>
			<para>Gets or sets a value indicating the caption of the menu item.</para>
		</summary>
		<value>
			<para>The text caption of the menu item.</para>
		</value>
		<remarks>
			<para>When you specify a caption for your menu item with the <paramref name="text"/> parameter,
   you can also specify an access key by placing an '&amp;' before the
   character to be used as the access key. For example, to specify the "F" in
   "File" as an access key, you would specify the caption for the menu item as
   "&amp;File". You can use this feature to provide keyboard navigation for your
   menus.</para>
		</remarks>
		<example>
			<para>The following example creates a menu item, sets the
      caption, assigns a shortcut key, makes the menu item visible, and shows the
      shortcut key display for the menu item. The example assumes a <see cref="System.Windows.Forms.MenuItem"/>
      object has been created that is named <c>menuItem1</c>.</para>
			<codelink SampleID="Classic MenuItem.Text Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.Mnemonic"/>
	</doc>
	<doc for="MenuItem.Shortcut">
		<summary>
			<para> Gets or sets a value indicating the shortcut key associated with the menu
      item.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.Shortcut"/> values. The default is
<see langword="Shortcut.None"/>.</para>
		</value>
		<remarks>
			<para>Shortcut keys provide a method for users to activate
      frequently used menu
      items in your menu system and to provide keyboard access to
      your application for
      those users who do not have access to a mouse or other
      pointer device.</para>
		</remarks>
		<example>
			<para>The following example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example assumes a <see cref="System.Windows.Forms.MenuItem"/> object has been created that is named <c>menuItem1</c>.</para>
			<codelink SampleID="Classic MenuItem.Text Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Shortcut"/>
	</doc>
	<doc for="MenuItem.ShowShortcut">
		<summary>
			<para> Gets or sets a value indicating whether the shortcut
      key that is associated
      with the menu item is displayed next to the menu item
      caption.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the shortcut key combination is
   displayed next to the menu item caption; <see langword="false"/> if the shortcut
   key combination is not to be displayed. The default is
<see langword="true"/> .</para>
		</value>
		<remarks>
			<para> You can use this property to provide the option for users to hide
      shortcuts from menus to conserve menu space or to hide a shortcut key from being
      displayed.</para>
		</remarks>
		<example>
			<para>The following example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example assumes a <see cref="System.Windows.Forms.MenuItem"/> object has been created that is named <c>menuItem1</c>.</para>
			<codelink SampleID="Classic MenuItem.Text Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.Shortcut"/>
	</doc>
	<doc for="MenuItem.Visible">
		<summary>
			<para> Gets or sets a value
      indicating whether the menu item is visible.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the menu item will be made visible
   on the menu; otherwise, <see langword="false"/>. The default is <see langword="true"/>
   .</para>
		</value>
		<remarks>
			<para>You can use this property to modify a menu structure
      without having to merge menus or disable menus. For example, if you want to hide
      a complete section of functionality from the menus for your application, you can
      hide them from the user by setting this property to <see langword="false"/>
      .</para>
		</remarks>
		<example>
			<para>The following example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example assumes a <see cref="System.Windows.Forms.MenuItem"/> object has been created that is named <c>menuItem1</c>.</para>
			<codelink SampleID="Classic MenuItem.Text Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Dispose">
		<nodoc/>
		<summary>
			<para>Disposes of the resources (other than memory) used by
      the <see cref="System.Windows.Forms.MenuItem"/>.</para>
		</summary>
		<remarks>
			<para>Call <see cref="System.Windows.Forms.MenuItem.Dispose"/> when you are finished using the
<see cref="System.Windows.Forms.MenuItem"/>. The <see cref="System.Windows.Forms.MenuItem.Dispose"/> method leaves the
<see cref="System.Windows.Forms.MenuItem"/> in an unusable state. After calling <see cref="System.Windows.Forms.MenuItem.Dispose"/>, you must release all references to
   the <see cref="System.Windows.Forms.MenuItem"/> so the memory it was occupying can be reclaimed
   by garbage collection. </para>
			<note type="note">
   Always call <see cref="System.Windows.Forms.MenuItem.Dispose"/> before you release your last reference
   to the <see cref="System.Windows.Forms.MenuItem"/>. Otherwise, the resources the <see cref="System.Windows.Forms.MenuItem"/> is
   using will not be freed until garbage collection calls the <see cref="System.Windows.Forms.MenuItem"/>
   object's destructor.
   
</note>
		</remarks>
	</doc><doc for="MenuItem.MenuItem1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.MenuItem"/>
class with a specified caption for
the menu item.</para>
		</summary>
		<param name="text">The caption for the menu item.</param>
		<remarks>
			<para>When you specify a caption for your menu item with the
   <paramref name="text"/> parameter, you can also specify an access
      key by placing an '&amp;' character
      before the character
      to be used as the access key. For example, to
      specify the "F" in
      "File" as an access key, you would specify the caption for
      the menu item as
      "&amp;File". You can use this feature to provide keyboard navigation
      for your
      menus.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.MenuItem"/>
that specifies
the caption of the menu item at the time it is constructed.</para>
			<codelink SampleID="Classic MenuItem.MenuItem1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="MenuItem.DrawItem">
		<summary>
			<para> Occurs when the <see cref="System.Windows.Forms.MenuItem.OwnerDraw"/> property of a menu item is set
   to
<see langword="true"/>
and a request is made to draw the menu item.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.DrawItemEventArgs"/> argument passed to
   a <see cref="System.Windows.Forms.MenuItem.DrawItem"/> event handler provides a <see cref="System.Drawing.Graphics"/> object
   that enables you to perform drawing and other graphical operations on the surface
   of the menu item. You can use this event handler to create custom menus that
   meet the needs of your application. For more information about handling events,
   see <see topic="cpconEventsOverview"/>
   .</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to handle the 
   <see cref="System.Windows.Forms.MenuItem.DrawItem"/>event. This example draws a menu item using
      a <see cref="System.Drawing.Brush"/> and a <see cref="System.Drawing.Font"/>, and then draws a <see cref="System.Drawing.Rectangle"/> around
      the menu item. The drawing is performed through the <see cref="System.Drawing.Graphics"/> object, which is
      passed to the event handler in the <see cref="System.Windows.Forms.DrawItemEventArgs"/> parameter. This example assumes that you
      have initialized the <see cref="System.Windows.Forms.MenuItem.OwnerDraw"/> property for the item to
   <see langword="true"/> .</para>
			<codelink SampleID="OwnerDraw example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.OwnerDraw"/>
		<seealso cref="System.Windows.Forms.MenuItem.MeasureItem"/>
	</doc><doc for="MenuItem.Parent">
		<summary>
			<para> Gets a value indicating the menu that contains this menu
 item.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Menu"/> that represents the
 menu that contains
 this menu item.</para>
		</value>
		<remarks>
			<para>You can use this property to obtain the <see cref="System.Windows.Forms.Menu"/> object for a submenu.
 You can cast the <see cref="System.Windows.Forms.Menu"/> object
 returned by this property to a
<see cref="System.Windows.Forms.MenuItem"/> object to manipulate
 it.</para>
		</remarks>
		<example>
			<para>In this example, you create a main menu and a top-level menu item, <c>menuItem1</c>
 (<see langword="File"/>). You also create two menu items, <c>menuItem2</c> (<see langword="New"/>)
and <c>menuItem3</c>
(<see langword="Open"/>), and add them to the menu item list of <c>menuItem1</c>. Then you check to
see if <c>menuItem3</c> has got
a parent menu, which is true, and display the information of this parent menu in
message box. This example assumes that you have created a <see cref="System.Windows.Forms.Form"/> named
<c>Form1</c>.</para>
			<codelink SampleID="ParentMenu" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.PerformClick">
		<summary>
			<para>Generates a <see cref="System.Windows.Forms.Control.Click"/> event for the <see cref="System.Windows.Forms.MenuItem"/>
, simulating a click by a
user.</para>
		</summary>
		<remarks>
			<para>You can use this menu to activate a menu item through code without passing any event
 information. For example, if you want to activate a menu item based on an action that
 occurs in your application, you can call the <see cref="System.Windows.Forms.MenuItem.PerformClick"/> method for that <see cref="System.Windows.Forms.MenuItem"/>.</para>
		</remarks>
		<example>
			<para>In this example you programmatically click a menu item
 by using the <see langword="PerformClick"/> method. First, you create a main menu
 (<c>mainMenu1</c>) and add to it two
 menu items, <c>menuItem1</c>
(<see langword="File"/>) and <c>menuItem2</c> (<see langword="Edit"/>). You also use the <see cref="System.Windows.Forms.MenuItem.Click"/> event to send data to the event handler when a menu item
is clicked. Then you use the <see langword="PerformClick"/> method to click the
<see langword="File"/> menu item. When you start the application, the 
<see langword="File"/> menu item is activated, and a message box that 
contains the text "The File menu is clicked." appears on the screen. The example
assumes that you have created a <see cref="System.Windows.Forms.Form"/> named <c>Form1</c> . </para>
			<codelink SampleID="PerformClick" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.PerformSelect">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.MenuItem.Select"/>
event for this menu item.</para>
		</summary>
		<remarks>
			<para>This method allows you to raise the <see cref="System.Windows.Forms.MenuItem.Select"/> event without passing any event
 information to the event handler.</para>
		</remarks>
		<example>
			<para>In this example you programmatically select a menu item by using the
 <see langword="PerformSelect"/> method. First, you create a main menu (<c>mainMenu1</c>) and add to it two menu
 items, <c>menuItem1</c>
(<see langword="File"/>) and <c>menuItem2</c> (<see langword="Edit"/>). You also use the <see cref="System.Windows.Forms.MenuItem.Select"/> event to send data to the event handler
when a menu item is selected. Then you use the <see langword="PerformSelect"/>
method to select the <see langword="File"/> menu item. When you start the
application, the <see langword="File"/> menu item is selected, and a message box
that contains the text "The File menu is selected." appears on the screen. The
example assumes that you have created a <see cref="System.Windows.Forms.Form"/> named <c>Form1</c>.</para>
			<codelink SampleID="PerformSelect" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.PerformClick"/>
	</doc>
	<doc for="MenuItem.DefaultItem">
		<summary>
			<para> Gets or sets a value indicating whether the
      menu item is the default menu item.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the menu item is the default
   item in a menu; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The default menu item for a menu is boldfaced. When the
      user double-clicks a submenu that contains a default item,
      the default item is
      selected, and the submenu is closed. You can use the <see cref="System.Windows.Forms.MenuItem.DefaultItem"/> property to
      indicate, the default action that is expected in a menu or
      shortcut menu.</para>
		</remarks>
		<example>
			<para> The following example
      creates a
      menu item with two submenu items. The
      example sets <c>menuItem2</c>
   as the default menu item using the <see cref="System.Windows.Forms.MenuItem.DefaultItem"/>
   property.</para>
			<codelink SampleID="Classic MenuItem.DefaultItem Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.CloneMenu1">
		<summary>
			<para>Creates a copy of the specified <see cref="System.Windows.Forms.MenuItem"/>.</para>
		</summary>
		<param name="itemSrc">The <see cref="System.Windows.Forms.MenuItem"/> that represents the menu item to copy.</param>
		<returns>
			<para>A <see cref="System.Windows.Forms.MenuItem"/> that represents
   the duplicated menu
   item.</para>
		</returns>
		<remarks>
			<para> Call this method
      to create
      copies of menu items that you have already created for use
      in a shortcut menu or another menu structure
      within your application. This version of <see cref="System.Windows.Forms.MenuItem.CloneMenu"/> allows you
      to specify a specific <see cref="System.Windows.Forms.MenuItem"/> to copy instead
      of the menu item that is
      calling the method. You can use this method to initialize a new <see cref="System.Windows.Forms.MenuItem"/>
      object with a copy of another <see cref="System.Windows.Forms.MenuItem"/>. When a menu item
      is cloned, any event handlers specified in the original menu item will continue
      to function in the cloned version of the menu item. For example, if you created
      a <see cref="System.Windows.Forms.MenuItem"/> and connected its <see cref="System.Windows.Forms.MenuItem.Click"/>
      event to an event handler. When the menu item is cloned, the cloned menu
      item will call the same event
      handler.</para>
		</remarks>
		<example>
			<para> The following example initializes a new <see cref="System.Windows.Forms.MenuItem"/> with a copy of an existing <see cref="System.Windows.Forms.MenuItem"/> that is used in a <see cref="System.Windows.Forms.MainMenu"/> on a
   form. The code then adds the cloned <see cref="System.Windows.Forms.MenuItem"/>to a <see cref="System.Windows.Forms.ContextMenu"/> on
   the form. This example assumes that a <see cref="System.Windows.Forms.MenuItem"/> is already created and named
<c>menuItem1</c> and that a <see cref="System.Windows.Forms.ContextMenu"/>
control has been created and named <c>contextMenu1</c>.</para>
			<codelink SampleID="Classic MenuItem.CloneMenu1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Click">
		<summary>
			<para>Occurs when the menu item is clicked or selected using a
      shortcut key or access key defined for the menu item.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.MenuItem.Click"/> event occurs when
   this <see cref="System.Windows.Forms.MenuItem"/> is clicked by the user. This event also occurs
   if the user selects the menu item using the keyboard and presses the Enter key.
   It can also occur if an access key or shortcut key is pressed
   that is associated with the <see cref="System.Windows.Forms.MenuItem"/>. For more information about handling events,
   see <see topic="cpconEventsOverview"/>
   .</para>
			<note type="note">
   If the <see cref="System.Windows.Forms.Menu.MenuItems"/>
   property for the <see cref="System.Windows.Forms.MenuItem"/> contains any items, this event is not raised.
   This event is not raised for parent
   menu items.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
   <see cref="System.Windows.Forms.MenuItem.Click"/> event to perform tasks when a <see cref="System.Windows.Forms.MenuItem"/>
   is clicked. The example creates a <see cref="System.Windows.Forms.MainMenu"/>
   called<c>mainMenu1</c> and adds two <see cref="System.Windows.Forms.MenuItem"/> objects, <c>topMenuItem</c> (<see langword="File"/>)
and <c>menuItem1</c>
(<see langword="Open"/> ). It then connects the <see langword="Click"/> event to the <c>menuItem1_Click</c> event
handler. When the user clicks
the <see langword="Open"/>menu item, an <see cref="System.Windows.Forms.OpenFileDialog"/>
is initialized and displayed. The example
assumes that you have created a <see cref="System.Windows.Forms.Form"/> named <c>Form1</c>.</para>
			<codelink SampleID="MenuItemClick" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Popup">
		<summary>
			<para>Occurs before a menu item's list of menu items is
      displayed.</para>
		</summary>
		<remarks>
			<para>This event only occurs when a menu item has submenu
      items to display. You can use this event handler to add, remove, enable,
      disable, check, or uncheck menu items based on the state of your application
      before they are displayed. For more information about handling events, see
   <see topic="cpconEventsOverview"/>
   .</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.MenuItem.Popup"/> event to determine whether <see cref="System.Windows.Forms.MenuItem"/> 
objects that provide support for cut, copy, and delete operations are enabled
before the menu they are displayed in is shown. The example determines if <c>textBox1</c>

, a
<see cref="System.Windows.Forms.TextBox"/> control on the form, is enabled, has input 
focus, and has text selected before enabling the <see cref="System.Windows.Forms.MenuItem"/> objects. This example assumes that three
<see cref="System.Windows.Forms.MenuItem"/> objects are created named <c>menuCut</c>, <c>menuCopy</c>, and <c>menuDelete</c> have been created.</para>
			<codelink SampleID="MenuItem.Popup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Enabled">
		<summary>
			<para> Gets or sets a value indicating whether the menu
      item is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the menu item is enabled;
   otherwise,
<see langword="false"/> . The default is
<see langword="true"/>
.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Windows.Forms.MenuItem"/> that is disabled is displayed in a
   gray color to indicate its state. When a parent menu item is
   disabled, all submenu items are not displayed.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.MenuItem.Popup"/> event to determine whether <see cref="System.Windows.Forms.MenuItem"/> objects that provide support for cut, copy, and delete operations are enabled before the menu they are displayed in is shown. The example determines if <c>textBox1</c>
, a
<see cref="System.Windows.Forms.TextBox"/> control on the form, is enabled, has input 
focus, and has text selected before enabling the <see cref="System.Windows.Forms.MenuItem"/> objects. This example assumes that three
<see cref="System.Windows.Forms.MenuItem"/> objects are created named <c>menuCut</c>, <c>menuCopy</c>, and <c>menuDelete</c> have been created.</para>
			<codelink SampleID="MenuItem.Popup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.OnPopup">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.MenuItem.Popup"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more information, see <see topic="cpconProvidingEventFunctionality"/>
.</para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.MenuItem.OnPopup"/> in a derived class, be sure
   to call the base class's <see cref="System.Windows.Forms.MenuItem.OnPopup"/> method.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.MenuItem.Popup"/> event to determine whether <see cref="System.Windows.Forms.MenuItem"/> objects that provide support for cut, copy, and delete operations are enabled before the menu they are displayed in is shown. The example determines if <c>textBox1</c>
, a
<see cref="System.Windows.Forms.TextBox"/> control on the form, is enabled, has input 
focus, and has text selected before enabling the <see cref="System.Windows.Forms.MenuItem"/> objects. This example assumes that three
<see cref="System.Windows.Forms.MenuItem"/> objects are created named <c>menuCut</c>, <c>menuCopy</c>, and <c>menuDelete</c> have been created.</para>
			<codelink SampleID="MenuItem.Popup" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.OnClick">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.MenuItem.Click"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Windows.Forms.MenuItem.OnClick"/> in a derived class, be sure to call
      the base class's <see cref="System.Windows.Forms.MenuItem.OnClick"/> method.
      
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.MenuItem.Click"/> event to perform tasks when a <see cref="System.Windows.Forms.MenuItem"/> is clicked. The example creates a <see cref="System.Windows.Forms.MainMenu"/> called<c>mainMenu1</c> and adds two <see cref="System.Windows.Forms.MenuItem"/> objects, <c>topMenuItem</c> (<see langword="File"/>) and <c>menuItem1</c> (<see langword="Open"/> ). It then connects the <see langword="Click"/> event to the <c>menuItem1_Click</c> event handler. When the user clicks the <see langword="Open"/>menu item, an <see cref="System.Windows.Forms.OpenFileDialog"/> is initialized and displayed. The example assumes that you have created a <see cref="System.Windows.Forms.Form"/> named <c>Form1</c>.</para>
			<codelink SampleID="MenuItemClick" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.Select">
		<summary>
			<para> Occurs when the user places the cursor over a menu item.</para>
		</summary>
		<remarks>
			<para> This event is typically raised
      when the user places the mouse cursor over the menu item. The event can also
      be raised when the user highlights a menu item using the keyboard by
      scrolling to the menu item with the arrow keys. You can use this event to
      display a detailed help string pertaining to this menu item in an application's
      status bar. For more information about handling events, see <see topic="cpconEventsOverview"/>
      .</para>
			<note type="note">
      If the <see cref="System.Windows.Forms.Menu.MenuItems"/> property for the <see cref="System.Windows.Forms.MenuItem"/>
      contains any items, this event is not raised. This event is not raised for
      parent menu items.
      
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.MenuItem.Select"/> event of the <see cref="System.Windows.Forms.MenuItem"/> 
class to assign help text to a <see cref="System.Windows.Forms.StatusBarPanel"/> of a <see cref="System.Windows.Forms.StatusBar"/>
control. This example assumes that <see cref="System.Windows.Forms.MenuItem"/> objects named <c>menuOpen</c>, <c>menuSave</c>, and <c>menuExit</c> are added to a <see cref="System.Windows.Forms.MainMenu"/> control on a form. The
example also assumes that a <see cref="System.Windows.Forms.StatusBar"/> control, named <c>statusBar1</c> has been added to the
form. The <see cref="System.Windows.Forms.StatusBar"/> control should contain a <see cref="System.Windows.Forms.StatusBarPanel"/> .</para>
			<codelink SampleID="MenuItem.Select" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MenuItem.Click"/>
	</doc>
	<doc for="MenuItem.OnSelect">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.MenuItem.Select"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/>that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more information, see <see topic="cpconProvidingEventFunctionality"/>
.</para>
			<note type="inheritinfo">
   When overriding <see cref="System.Windows.Forms.MenuItem.OnSelect"/> in a derived class, be sure
   to call the base class's <see cref="System.Windows.Forms.MenuItem.OnSelect"/> method.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Windows.Forms.MenuItem.Select"/> event 
      of the <see cref="System.Windows.Forms.MenuItem"/> class to
      assign help text to a <see cref="System.Windows.Forms.StatusBarPanel"/> of a
   <see cref="System.Windows.Forms.StatusBar"/> control. This 
      example assumes that <see cref="System.Windows.Forms.MenuItem"/>
      objects named <c>menuOpen</c>, <c>menuSave</c>, and <c>menuExit</c> are added to a <see cref="System.Windows.Forms.MainMenu"/> control on a
   form. The example also assumes that a <see cref="System.Windows.Forms.StatusBar"/> control, named <c>statusBar1</c> has been added to the
form. The <see cref="System.Windows.Forms.StatusBar"/> control should contain a <see cref="System.Windows.Forms.StatusBarPanel"/> .</para>
			<codelink SampleID="MenuItem.Select" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MenuItem.MergeOrder">
		<summary>
			<para> Gets or sets a value indicating the relative position of the menu item when
      it is merged with another.</para>
		</summary>
		<value>
			<para>A zero-based index representing the merge order position for this menu item. The default is
      0.</para>
		</value>
		<remarks>
			<para>The merge order of a menu item specifies the relative
      position that this menu item will assume if the menu structure that
      the <see cref="System.Windows.Forms.MenuItem"/>
      is
      contained in is merged with another.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.MenuItem.MergeType"/>
		<seealso cref="System.Windows.Forms.MenuItem.MergeMenu"/>
	</doc>
	<doc for="MenuItem.MergeMenu1">
		<summary>
			<para>Merges another menu item with this menu item.</para>
		</summary>
		<param name="itemSrc">A <see cref="System.Windows.Forms.MenuItem"/> that specifies the menu item to merge with this one.</param>
		<remarks>
			<para>Menu items are merged according to the value of the menu
      item's <see cref="System.Windows.Forms.MenuItem.MergeType"/> and <see cref="System.Windows.Forms.MenuItem.MergeOrder"/>
      properties. This version of the <see cref="System.Windows.Forms.MenuItem.MergeMenu"/>
      method enables you
      to merge two <see cref="System.Windows.Forms.MenuItem"/> objects (and their submenus) into a single
      menu. Menu merging is handled automatically when a Multiple Document
      Interface(MDI) parent form and a child both have menus. You can use this
      version of the method to merge two <see cref="System.Windows.Forms.MenuItem"/> objects (and their
      submenu items) located in a <see cref="System.Windows.Forms.MainMenu"/> control into a single menu
      within a <see cref="System.Windows.Forms.ContextMenu"/>. For example, you can call this version of
      the <see cref="System.Windows.Forms.MenuItem.MergeMenu"/> method to merge the menu items of a File
      and Edit menu into a single <see cref="System.Windows.Forms.MenuItem"/> that can then be added to and
      displayed by a <see cref="System.Windows.Forms.ContextMenu"/>
      .</para>
		</remarks>
		<example>
			<para>The following example uses this
      version of the <see cref="System.Windows.Forms.MenuItem.MergeMenu"/> method to
      create a copy of a <see cref="System.Windows.Forms.MenuItem"/> and merge it with another. The merged <see cref="System.Windows.Forms.MenuItem"/> is
      then added to a <see cref="System.Windows.Forms.ContextMenu"/>
      control. This example assumes
      that there are two menu items called <c>menuItem1</c> and <c>menuItem2</c> that contain submenu items within
   them and a <see cref="System.Windows.Forms.ContextMenu"/> named <c>contextMenu1</c> to display the menu
items. <c>menuItem1</c>
and <c>menuItem2</c>
have different menu items
contained within them.
After the call to <see cref="System.Windows.Forms.MenuItem.MergeMenu"/>
is
made, a consolidated menu is created.</para>
			<codelink SampleID="Classic MenuItem.MergeMenu1 Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
