<docs>
	<doc for="RichTextBox.DV_E_DVASPECT">
		<summary>
     Paste special flags.
 </summary>
	</doc>
	<doc for="RichTextBox.Module">
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.ContentsResized">
		<summary>
			<para>Occurs when contents within the control are resized.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ContentsResizedEventHandler"/>
	</doc>
	<doc for="RichTextBox.ImeChange">
		<summary>
			<para>Occurs when the user switches input methods on an Asian version of the 
       Windows operating system. </para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="RichTextBox.Dispose">
		<summary>
			<para>Frees all resources assocaited with this control. This method may not be
       called at runtime. Any resources used by the control should be setup to
       be released when the control is GC'ed. Inheriting classes should always
       call base.dispose.</para>
		</summary>
	</doc>
	<doc for="RichTextBox.GetCharFormat">
		<summary>
     Returns the requested format of the currently select text.
     param mask the attribute
     param effect the character effect
     return -1 - Selection containes characters with a mix of styles
     0 - None of selected characters have the style
     1 - All selected characters have the style
     see #setCharFormat
		</summary>
	</doc>
	<doc for="RichTextBox.GetCharInCharSet">
		<summary>
     This helper function is used to identify if the specified character is
     contained in a set of characters.
     param    c           the character to test for
     param    charSet     the set of characters to test against
     param    negate      if true return the opposite of the search result
		</summary>
	</doc>
	<doc for="RichTextBox.GetProtectedError">
		<summary>
     This helper function returns true if the operation caused a protect error.
		</summary>
	</doc>
	<doc for="RichTextBox.OnContentsResized">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.RichTextBox.ContentsResized"/> 
 event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.ContentsResizedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnContentsResized"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.RichTextBox.OnContentsResized"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.RichTextBox.OnContentsResized"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.ContentsResized"/>
	</doc>
	<doc for="RichTextBox.OnForeColorChanged">
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.OnHScroll">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.RichTextBox.HScroll"/> 
 event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnHScroll"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.RichTextBox.OnHScroll"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.RichTextBox.OnHScroll"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.HScroll"/>
	</doc>
	<doc for="RichTextBox.OnLinkClicked">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> 
 event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.LinkClickedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnLinkClicked"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.RichTextBox.OnLinkClicked"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.RichTextBox.OnLinkClicked"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.LinkClicked"/>
	</doc>
	<doc for="RichTextBox.OnProtected">
		<summary>
			<para> 
       Raises the <see cref="System.Windows.Forms.RichTextBox.Protected"/>
       event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnProtected"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.RichTextBox.OnProtected"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.RichTextBox.OnProtected"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.Protected"/>
	</doc>
	<doc for="RichTextBox.OnSelectionChanged">
		<summary>
			<para> 
       Raises the <see cref="System.Windows.Forms.RichTextBox.SelectionChanged"/>
       event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnSelectionChanged"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.RichTextBox.OnSelectionChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.RichTextBox.OnSelectionChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionChanged"/>
	</doc>
	<doc for="RichTextBox.OnVScroll">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.RichTextBox.VScroll"/> 
 event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnVScroll"/> method also allows derived classes 
    to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.RichTextBox.OnVScroll"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.RichTextBox.OnVScroll"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.VScroll"/>
	</doc>
	<doc for="RichTextBox.Paste1">
		<summary>
     Pastes the contents of the clipboard in the given clipboard format in an iconic view.
		</summary>
		<param name="clipFormat">
     Clipboard format in which the data should be obtained from the clipboard.
 </param><param name="hIcon">
     Handle to the icom to be used to represent the pasted data.
 </param></doc>
	<doc for="RichTextBox.ResetZoom">
		<summary>
     Clears the Zoom level for the RichTextBox control back to normal (1.0)
 </summary>
	</doc>
	<doc for="RichTextBox.ScrollToCaret">
		<summary>
			<para> Scrolls the contents of the <see cref="System.Windows.Forms.RichTextBox"/> control to 
    the location where the caret is located within the control.</para>
		</summary>
		<remarks>
			<para>You can use this method to ensure that the caret is 
       visible in the control. When this method is called, the <see cref="System.Windows.Forms.RichTextBox"/> scrolls to the
       current position of the caret.</para>
		</remarks>
		<keyword term="caret"/>
	</doc>
	<doc for="RichTextBox.SendZoomFactor">
		<summary>
     Core Zoom calculation and message passing (used by ZoomFactor property and CreateHandle()
 </summary>
	</doc>
	<doc for="RichTextBox.SetCharFormat">
		<summary>
     Sets the requested format of the currently selected text.
     param        mask    the attributes mask
     param        effect  the character effect
     param        charFormat  -1 - Selection containes characters with a mix of styles
     0 - None of selected characters have the style
     1 - All selected characters have the style
     see         #getCharFormat
     exception   ArgumentException  When an invalid attribute is specified.
		</summary>
	</doc>
	<doc for="RichTextBox.SetupLogPixels">
		<summary>
     Copied from AxHost.cs
		</summary>
	</doc>
	<doc for="RichTextBox.StreamIn">
		<summary>
     This helper function performs all the text in operations.
     exception   System.Exception  When error occurs during streamIn operation.
		</summary>
	</doc>
	<doc for="RichTextBox.StreamOut">
		<summary>
     This helper function performs all the text out operations.
     exception   System.Exception  When error occurs during streamOut operation.
		</summary>
	</doc>
	<doc for="RichTextBox.EnLinkMsgHandler">
		<summary>
      Handles link messages (mouse move, down, up, dblclk, etc)
 </summary>
	</doc>
	<doc for="RichTextBox.CharRangeToString">
		<summary>
     Converts a CHARRANGE to a string. Note: The behavior of this is dependent on the current window
     class name being used. We have to create a CharBuffer of the type of RichTextBox DLL we're using,
     not based on the SystemCharWidth.
 </summary>
	</doc>
	<doc for="RichTextBox.WmReflectCommand">
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.WmReflectNotify">
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.WmSelectionChange">
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.WmSetFont">
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.LinkClicked">
		<summary>
			<para>Occurs when the user clicks on a link within the text of the control.</para>
		</summary>
		<remarks>
			<para>You can create an event handler for this event to process a link that has been clicked within the
      control. Using the information provided to the event handler, you can determine
      which link was clicked in the document.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example contains an event handler for the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event. The event handler processes link 
   clicks within the document of a <see cref="System.Windows.Forms.RichTextBox"/> control and launches an
   instance of the default browser (using the <see cref="System.Diagnostics.Process.Start" qualify="true"/> method), displaying the page for the link
   that was clicked. This example assumes that the event handler has been connected
   to the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event for a <see cref="System.Windows.Forms.RichTextBox"/>.</para>
			<codelink SampleID="Classic RichTextBox.LinkClicked Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.DoubleClick">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.DragDrop">
		<nodoc/>
		<summary>
			<para>Occurs when the user completes a drag-and-drop</para>
		</summary>
	</doc>
	<doc for="RichTextBox.DragEnter">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.DragLeave">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.GiveFeedback">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.QueryContinueDrag">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.BackgroundImage">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="RichTextBox.DetectUrls">
		<summary>
			<para> Gets or sets a value indicating whether or not the
   <see cref="System.Windows.Forms.RichTextBox"/> will automatically
      format a Uniform Resource Locator (URL) when it is
      typed
      into the control.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the <see cref="System.Windows.Forms.RichTextBox"/> will
   automatically format URLs
   that are typed into the control as a link; otherwise,
<see langword="false"/>. The default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>If this property is set to <see langword="true"/>, any text entered into the
   control that is determined by the <see cref="System.Windows.Forms.RichTextBox"/> to be a URL is
   automatically formatted as a link. You can create an event handler for the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event to handle all links clicked in the
   control. The <see cref="System.Windows.Forms.LinkClickedEventArgs"/> that is provided to
   the event handler for the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event provides data that enables you to determine
   which link was clicked in the control in order to process the link.</para>
		</remarks>
		<example>
			<para>The following example contains an event handler for the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event. The event handler processes link
   clicks within the document of a <see cref="System.Windows.Forms.RichTextBox"/> control and launches an
   instance of the default browser (using the <see cref="System.Diagnostics.Process.Start" qualify="true"/> method), displaying the page for the link
   that was clicked. This example assumes that the event handler has been connected
   to the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event for a <see cref="System.Windows.Forms.RichTextBox"/>.</para>
			<codelink SampleID="Classic RichTextBox.LinkClicked Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.LinkClicked"/>
		<seealso cref="System.Windows.Forms.LinkClickedEventArgs"/>
	</doc>
	<doc for="RichTextBox.Rtf">
		<summary>
			<para>Gets or sets the text of the <see cref="System.Windows.Forms.RichTextBox"/> control, including all Rich Text Format (RTF) codes.</para>
		</summary>
		<value>
			<para>The text of the control in RTF format.</para>
		</value>
		<remarks>
			<para> You can use this property to place RTF formatted text into the
      control for display or to extract the text of the control with the specified RTF formatting
      defined in the text of the control. This property is typically used when
      you are assigning RTF text from another RTF source, such as Microsoft Word or Windows WordPad, to the control.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Text"/>
		<keyword term="RTF"/>
	</doc>
	<doc for="RichTextBox.SelectionType">
		<summary>
			<para>Gets the selection type within the control.</para>
		</summary>
		<value>
			<para>A bitwise combination of the <see cref="System.Windows.Forms.RichTextBoxSelectionTypes"/> values.</para>
		</value>
		<remarks>
			<para> You can use this property to determine the
      type of data that is currently selected in the control in order to
      handle the selection properly when performing tasks within the control on the
      current selection. The property can represent any combination of values from the
   <see cref="System.Windows.Forms.RichTextBoxSelectionTypes"/>
   enumeration representing the many types of objects in the
   current selection. </para>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectedRtf"/>
		<keyword term="selection types within controls"/>
	</doc>
	<doc for="RichTextBox.UndoActionName">
		<summary>
			<para>Gets the name of the action that can be undone in the
      control when the <see cref="System.Windows.Forms.TextBoxBase.Undo"/> method is called.</para>
		</summary>
		<value>
			<para>The text name of the action that can be undone.</para>
		</value>
		<remarks>
			<para>This property enables you to determine the last action that was done within the
      control that can be undone. You can use this property to limit the operations
      available to be undone by the user of the control.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Undo"/>
		<keyword term="limiting undo operations"/>
	</doc>
	<doc for="RichTextBox.OnStyleChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.OnImeChange">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.RichTextBox.ImeChange"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox.OnImeChange"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.RichTextBox.OnImeChange"/> in a derived class, be sure to call
   the base class's <see cref="System.Windows.Forms.RichTextBox.OnImeChange"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.ImeChange"/>
	</doc>
	<doc for="RichTextBox.HScroll">
		<summary>
			<para>Occurs when the user clicks the horizontal scroll bar of the control.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="RichTextBox.Protected">
		<summary>
			<para>Occurs when the user attempts to modify protected text in the control.</para>
		</summary>
		<remarks>
			<para> You can create an event handler for this event in your applications to
      determine when the user has attempted to modify text that has been marked as
      protected in the control. The event handler can be used to notify the user that
      the text the user is attempting to modify is protected or to display a dialog box
      that enables the user to make appropriate changes to the text. For example, if
      the protected area is a date, you can display a dialog box that enables the
      user to choose a date which can then be applied to the text of the control.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="RichTextBox.SelectionChanged">
		<summary>
			<para>Occurs when the selection of text within the control has changed.</para>
		</summary>
		<remarks>
			<para>You can create an event handler for this event to determine when the user has
      changed text selection within the control. An event handler for this event can
      be used to keep text selected until the user has completed a task within the
      application.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="RichTextBox.VScroll">
		<summary>
			<para>Occurs when the user clicks the vertical scroll bars of the control.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="RichTextBox.SelectedRtf">
		<summary>
			<para>Gets or sets the currently selected Rich Text Format (RTF) formatted text
      in the control.</para>
		</summary>
		<value>
			<para>The selected RTF text in the control.</para>
		</value>
		<remarks>
			<para> This property enables you to obtain the selected text
      in the control, including the RTF formatting codes. You can use this property
      to copy text from your control, complete with formatting, and paste the text
      in other applications that accept RTF formatted text, such as Microsoft Word
      and Windows WordPad. To get the selected text, without RTF formatting codes,
      use the <see cref="System.Windows.Forms.TextBoxBase.SelectedText"/> property.</para>
			<para>If no text is currently selected, the text specified in this property is
      inserted at the insertion point. If text is selected, any text assigned to this
      property replaces the selected text.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.Rtf"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectedText"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Text"/>
	</doc>
	<doc for="RichTextBox.OnContextMenuChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.ForeColor">
		<nodoc/>
		<summary>
			<para>Gets or sets the font used when displaying text in the control.</para>
		</summary>
	</doc>
	<doc for="RichTextBox.Font">
		<nodoc/>
		<summary>
			<para>Gets or sets the font used when displaying text in the control.</para>
		</summary>
	</doc>
	<doc for="RichTextBox.richTextDbg;">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.RichTextDbg">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.logPixelsX;">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.logPixelsY;">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.SetCharFormatFont">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.UpdateOleCallback">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.CreateParams">
		<nodoc/>
	</doc><doc for="RichTextBox.Multiline">
		<nodoc/>
	</doc><doc for="RichTextBox.OnBackColorChanged">
		<nodoc/>
	</doc><doc for="RichTextBox.OnHandleCreated">
		<nodoc/>
	</doc><doc for="RichTextBox.OnHandleDestroyed">
		<nodoc/>
	</doc><doc for="RichTextBox.OnRightToLeftChanged">
		<nodoc/>
	</doc><doc for="RichTextBox.WndProc">
		<nodoc/>
	</doc><doc for="RichTextBox.Find">
		<overload>
			<para>Searches for text within the contents of the <see cref="System.Windows.Forms.RichTextBox"/>.</para>
		</overload>
		<summary>
			<para>Searches the text in a <see cref="System.Windows.Forms.RichTextBox"/> control for a string.</para>
		</summary>
		<param name="str">The text to locate in the control.</param>
		<returns>
			<para>The location within the control where the search text 
      was found or a negative one (-1) if the search string is not found or an empty
      search string is specified in the <paramref name="str"/> parameter.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox.Find"/> method searches for the text
   specified in the <paramref name="str"/> parameter and returns the location of the first
   character within the control. If the property returns a negative value, the text
   string being searched for was not found within the contents of the control. You
   can use this method to create search functionality that can be provided to the
   user of the control. You can also use this method to search for text to be
   replaced with a specific format. For example, if the user entered dates into the
   control, you could use the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to search for all dates in
   the document and replace them with the appropriate format before using the
<see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method of the control.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.RichTextBox.Find"/> methods that accept
   a <see langword="string"/> as a parameter cannot find text that is
   contained on more than one line of text within the <see cref="System.Windows.Forms.RichTextBox"/>. Performing such a search will return
   a value of negative one (-1).
</note>
		</remarks>
		<example>
			<para>The following example searches the entire contents of a <see cref="System.Windows.Forms.RichTextBox"/>for the first instance of a search string passed into
   the text parameter of the method. If the search string is found in the <see cref="System.Windows.Forms.RichTextBox"/>, the method returns a value of
<see langword="true"/> and highlights the search text, otherwise it returns 
<see langword="false"/>. The example assumes that this method is placed in the 
   class of a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.RichTextBox"/> named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.Find Example" SnippetID="1"/>
		</example>
	</doc><doc for="RichTextBox.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox">
		<summary>
			<para> Represents a Windows rich text box control.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox"/> control allows the user to enter and edit text
   while also providing more advanced formatting features than the standard <see cref="System.Windows.Forms.TextBox"/>
   control. Text can be assigned
   directly to the control, or can be loaded from a Rich Text Format (RTF)
   or plain text file. The text within the control can be
   assigned character and paragraph formatting.</para>
			<para>The <see cref="System.Windows.Forms.RichTextBox"/> control provides a number of properties you can
use to apply formatting to any portion of text within the control. To change the
formatting of text, it must first be selected. Only selected text can be
assigned character and paragraph formatting. Once a setting has been made to a
selected section of text, all text entered after the selection is also formatted
with the same settings until a setting change is made or a different
section of the control's document is selected. The <see cref="System.Windows.Forms.RichTextBox.SelectionFont"/> property enables you to make
text bold or italic. You can also use this property to change the size and
typeface of the text. The <see cref="System.Windows.Forms.RichTextBox.SelectionColor"/> property enables you to change
the color of the text. To create bulleted lists you can use the <see cref="System.Windows.Forms.RichTextBox.SelectionBullet"/> property. You can also adjust paragraph
formatting by setting the <see cref="System.Windows.Forms.RichTextBox.SelectionIndent"/>, <see cref="System.Windows.Forms.RichTextBox.SelectionRightIndent"/>, and <see cref="System.Windows.Forms.RichTextBox.SelectionHangingIndent"/> properties. </para>
			<para>The <see cref="System.Windows.Forms.RichTextBox"/> control provides methods that provide
functionality for opening and saving files. The <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method enables you to load an existing RTF
or ASCII text file into the control. You can also load data from
an already opened data stream. The <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> enables you to save a file to
RTF or ASCII text. Similar to the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method, you can also use the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method to save to an open data
stream. The <see cref="System.Windows.Forms.RichTextBox"/> control also provides features for finding
strings of text. The <see cref="System.Windows.Forms.RichTextBox.Find"/>
method is overloaded to find both strings of text
as well as specific characters within the text of the control.</para>
			<para>You can also initialize the <see cref="System.Windows.Forms.RichTextBox"/> control to data 
stored in memory. For example, you can initialize the <see cref="System.Windows.Forms.RichTextBox.Rtf"/> property to a string that contains the
text to display, including the RTF codes that determine how the text should be
formatted.</para>
			<para>If the text within the control contains links, such as a link to a Web site,
   you can use the <see cref="System.Windows.Forms.RichTextBox.DetectUrls"/> property to display the link appropriately in
   the control's text. You can then handle the <see cref="System.Windows.Forms.RichTextBox.LinkClicked"/> event to perform the tasks associated with the
   link. The <see cref="System.Windows.Forms.RichTextBox.SelectionProtected"/> property enables you to protect text within the
   control from manipulation by the user. With protected text in your control, you
   can handle the <see cref="System.Windows.Forms.RichTextBox.Protected"/> event to determine when the user has
   attempted to modify protected text to either alert the user that the text is protected
   or to provide the user with a standard form of manipulating the protected text.</para>
			<para>Applications that already use <see cref="System.Windows.Forms.TextBox"/> controls can easily be adapted to make use of
<see cref="System.Windows.Forms.RichTextBox"/> controls. However, the <see cref="System.Windows.Forms.RichTextBox"/> control 
does not have the same 64K character capacity limit of the <see cref="System.Windows.Forms.TextBox"/>
control. The <see cref="System.Windows.Forms.RichTextBox"/> is typically used to provide text manipulation
and display features similar to word processing applications such as Microsoft
Word.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.RichTextBox"/> control that loads an RTF
   file into the control and searches for the first instance of the word "Text".
   The code then changes the font style, font size, and font color
   of the selected text and saves the changes back to the original file. The
   example code finishes by adding the control to its <see cref="System.Windows.Forms.Form"/>. This example assumes
   that the method created in the example code is added to a <see cref="System.Windows.Forms.Form"/> class
   and called from the constructor of the form. The example also assumes that an
   RTF file is created, in the root of the C drive, containing the word
   "Text".</para>
			<codelink SampleID="Classic RichTextBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase"/>
		<seealso cref="System.Windows.Forms.TextBox"/>
	</doc><doc for="RichTextBox.DragOver">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.SaveFile">
		<overload>
			<para>Saves the contents of the <see cref="System.Windows.Forms.RichTextBox"/> to a file.</para>
		</overload>
		<summary>
			<para>Saves the contents of the <see cref="System.Windows.Forms.RichTextBox"/> to a Rich Text Format (RTF) file.</para>
		</summary>
		<param name="path">The name and location of the file to save.</param>
		<exception cref="System.IO.IOException">An error occurs in saving the contents of the control to a file.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method enables you to save the entire contents of the control to an RTF file that can be used by other programs such as Microsoft Word and Windows WordPad. If the file name that is passed to the <paramref name="path"/> parameter already exists at the specified directory, the file will be overwritten without notice. You can use the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method to load the contents of a file into the <see cref="System.Windows.Forms.RichTextBox"/> .</para>
			<note type="note">
   To save the contents of the control to a different type of file format such as ASCII text, use the other versions of this method that accept a value from the <see cref="System.Windows.Forms.RichTextBoxStreamType"/> enumeration as a parameter.
</note>
		</remarks>
		<example>
			<para>The following example saves the contents of a <see cref="System.Windows.Forms.RichTextBox"/> control to an
   RTF file. The example uses the <see cref="System.Windows.Forms.SaveFileDialog"/> class to display a
   dialog to request from the user, the path and filename of the file to save. The code then saves the file assuming the content is in Rich Text Format. If the file already exists, it is automatically overwritten. This example assumes that the code is placed in a <see cref="System.Windows.Forms.Form"/> class that has a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.SaveFile Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.LoadFile"/>
	</doc><doc for="RichTextBox.SelectionTabs">
		<summary>
			<para>Gets or sets the absolute tab stop positions in a
   <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</summary>
		<value>
			<para>An array in which each member specifies a tab offset, in pixels.</para>
		</value>
		<exception cref="ArgumentException">The specified value is less than 0 or greater than 32.</exception>
		<remarks>
			<para>This property enables you to obtain an array
      that contains the spacing for each tab in the current text
      selection within the <see cref="System.Windows.Forms.RichTextBox"/> control. You can then use this property to
      adjust the size of each tab within the text selection. For example, if you want
      to adjust the tab space within the document, you can select the entire document
      and obtain the list of tab spaces using the <see cref="System.Windows.Forms.RichTextBox.SelectionTabs"/> property. You can
      then adjust them to new values and reassign
      them to this
      property.
      </para>
		</remarks>
	</doc><doc for="RichTextBox.Find6">
		<summary>
			<para>Searches a range of text in a <see cref="System.Windows.Forms.RichTextBox"/> control for the first instance of a character from a list of characters.</para>
		</summary>
		<param name="characterSet">The array of characters to search for.</param>
		<param name="start">The location within the control's text at which to begin searching.</param>
		<param name="end">The location within the control's text at which to end searching.</param>
		<returns>
			<para>The location within the control where the search characters are found.</para>
		</returns>
		<exception cref="ArgumentNullException"><para>
				<paramref name="characterSet"/> is null.</para></exception>
		<exception cref="ArgumentException"><para>
				<paramref name="start"/>is less than 0 or greater than the length of the text in the control.</para></exception>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/>method searches for the first instance of a character from a list of characters specified in the <paramref name="characterSet"/> parameter and returns the location of the
   character. For example, you pass an array of characters containing the character
   'Q'. If the control contained the text "The Quick Brown Fox", the <see cref="System.Windows.Forms.RichTextBox.Find"/>
   
   method would return the value of four. An upper case character and a lower case character are considered different values in the search.</para>
			<para>If the property returns a negative value, the characters
   being searched for were not found within the contents of the control. You can use this method to search for a group of characters within the control. If a character from the character list provided in the method's <paramref name="characterSet"/> parameter is found, the value returned by this method is a zero based index of the character's position in the control. A space is considered a character by the method when determining the location of a character.</para>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method enables you to search for a
character set from a range of text in the control by specifying a value for the
<paramref name="start "/>and <paramref name="end"/> parameters. A value of zero for
the <paramref name="start"/> parameter indicates that the search should start
from the beginning of the control's document. A -1 value for the <paramref name="end"/>
parameter indicates that the search should end at the end of the text within the
control. You can use this version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to narrow your search to a
specific range of text within the control to avoid searching areas of the document that are
not important to the needs of your application.</para>
		</remarks>
	</doc><doc for="RichTextBox.CanPaste">
		<summary>
			<para>Determines whether you can paste information from the Clipboard in the
      specified data format.</para>
		</summary>
		<param name=" clipFormat">One of the <see cref="System.Windows.Forms.DataFormats.Format" qualify="true"/> values.</param>
		<returns>
			<para><see langword="true"/> if you can paste data from the
   Clipboard in the specified data format; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You can use this method to determine whether the current contents of the Clipboard
      are in a specified Clipboard data format before allowing the user to paste the
      information into the <see cref="System.Windows.Forms.RichTextBox"/> control. For example, you could create an event
      handler for a <see cref="System.Windows.Forms.MenuItem.Popup"/> event of a paste command <see cref="System.Windows.Forms.MenuItem"/> and
      use this method to determine whether the paste <see cref="System.Windows.Forms.MenuItem"/> should be enabled based
      on the type of data in the Clipboard.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use
      the <see cref="System.Windows.Forms.RichTextBox.Paste"/> method to paste a bitmap into
      the <see cref="System.Windows.Forms.RichTextBox"/> control. After opening a bitmap from
      file, the example uses the <see cref="System.Windows.Forms.Clipboard.SetDataObject"/> method to copy the bitmap
      to the Windows clipboard. Finally, the example retrieves the format for
      the <see cref="System.Drawing.Bitmap"/> object, uses the <see cref="System.Windows.Forms.RichTextBox.CanPaste"/> method to verify that the format can be
      pasted into the <see cref="System.Windows.Forms.RichTextBox"/> control, and then uses the <see cref="System.Windows.Forms.RichTextBox.Paste"/> method to paste the data.</para>
			<codelink SampleID="RichText_Paste" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.Paste"/>
		<seealso cref="System.Windows.Forms.DataFormats.Format" qualify="true"/>
	</doc><doc for="RichTextBox.ScrollBars">
		<summary>
			<para>Gets or sets the type of scroll bars to display in the
   <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.RichTextBoxScrollBars"/> values. The default
   is <see langword="RichTextBoxScrollBars.Both"/>
   .</para>
		</value>
		<exception cref="InvalidEnumArgumentException">The specified value is not defined in the <see cref="System.Windows.Forms.RichTextBoxScrollBars"/> enumeration.</exception>
		<remarks>
			<para>This property enables you to provide horizontal and vertical scroll bars to the user of the <see cref="System.Windows.Forms.RichTextBox"/> control to enable scrolling text within the control that
   is outside of the physical dimensions of the control. You can also use this
   property to remove scroll bars from the control to restrict scrolling the contents of the
   control.</para>
			<note type="note">
   Horizontal scroll bars will not be shown if
   the <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> is <see langword="true"/>, regardless
   of the value of the <see cref="System.Windows.Forms.RichTextBox.ScrollBars"/>
   property.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBoxScrollBars"/>
	</doc><doc for="RichTextBox.Paste">
		<overload>
			<para>Pastes the contents of the Clipboard into the control.</para>
		</overload>
		<summary>
			<para>Pastes the contents of the Clipboard in the specified Clipboard format.</para>
		</summary>
		<param name="clipFormat">The Clipboard format in which the data should be obtained from the Clipboard.</param>
		<remarks>
			<para>You can use this method to paste data from the clipboard
      into the control. This version of the <see cref="System.Windows.Forms.RichTextBox.Paste"/>
      method is different from the <see cref="System.Windows.Forms.TextBoxBase.Paste" qualify="true"/> method as it allows you to paste only text in a
      specified Clipboard format. You can use the <see cref="System.Windows.Forms.RichTextBox.CanPaste"/> method to determine whether the data within the
      Clipboard is in the specified Clipboard format. You can then call this version
      of the <see cref="System.Windows.Forms.RichTextBox.Paste"/> method to ensure that the paste operation is
      made with the appropriate data format.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for reading from the Clipboard. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionClipboard.AllClipboard" qualify="true"/>.</permission>
		<example>
			<para>The following example demonstrates how to use
      the <see cref="System.Windows.Forms.RichTextBox.Paste"/> method to paste a bitmap into
      the <see cref="System.Windows.Forms.RichTextBox"/> control. After opening a bitmap from
      file, the example uses the <see cref="System.Windows.Forms.Clipboard.SetDataObject"/> method to copy the bitmap
      to the Windows clipboard. Finally, the example retrieves the format for
      the <see cref="System.Drawing.Bitmap"/> object, verifies that the fo rmat can be pasted
      into the <see cref="System.Windows.Forms.RichTextBox"/> control, and uses the <see cref="System.Windows.Forms.RichTextBox.Paste"/> method to paste the data.</para>
			<codelink SampleID="RichText_Paste" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.CanPaste"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Paste"/>
		<seealso cref="System.Windows.Forms.DataFormats.Format"/>
	</doc><doc for="RichTextBox.ShowSelectionMargin">
		<summary>
			<para>Gets or sets a value indicating whether a
      selection margin is displayed in the <see cref="System.Windows.Forms.RichTextBox"/>
      .</para>
		</summary>
		<value>
			<para><see langword="true"/> if a selection margin is enabled
   in the control; otherwise, <see langword="false"/>. The default is
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>You can use this property to enable the user to easily select lines of text in
      the <see cref="System.Windows.Forms.RichTextBox"/>. The selection margin is added to the left side
      of the <see cref="System.Windows.Forms.RichTextBox"/>. This margin makes
      it easier for the user to select text starting on the left side of the control.
      The user can click in the selection margin to select a single line of text or double-click to select
      the entire paragraph that the line double-clicked is contained within.</para>
			<note type="note">
      If the <see cref="System.Windows.Forms.RichTextBox.ShowSelectionMargin"/> property is set to <see langword="true"/>,
      setting the <see cref="System.Windows.Forms.RichTextBox.ScrollBars"/> property
      to <see langword="RichTextBoxScrollBars.Horizontal"/>,
   <see langword="RichTextBoxScrollBars.Vertical"/>, or
   <see langword="RichTextBoxScrollBars.Both"/> will not cause scroll 
      bars to be displayed. In order to display scroll bars while the <see cref="System.Windows.Forms.RichTextBox.ShowSelectionMargin"/> property is set to <see langword="true"/>,
      set the <see cref="System.Windows.Forms.RichTextBox.ScrollBars"/> property
      to <see langword="RichTextBoxScrollBars.ForcedHorizontal"/>,
   <see langword="RichTextBoxScrollBars.ForcedVertical"/>, or
   <see langword="RichTextBoxScrollBars.ForcedBoth"/>.
      
   </note>
		</remarks>
	</doc><doc for="RichTextBox.TextLength"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.GetLineFromCharIndex">
		<summary>
			<para>Gets the line number from the specified character
      position within the text of the <see cref="System.Windows.Forms.RichTextBox"/>
      control.</para>
		</summary>
		<param name="index">The character index position to search.</param>
		<returns>
			<para> The zero-based line number where the character index is located in.</para>
		</returns>
		<remarks>
			<para>This method enables you to determine the line number based on the character
      index specified in the <paramref name="index"/>
      parameter of the method. The first line of text in the control returns the value
      zero. The <see cref="System.Windows.Forms.RichTextBox.GetLineFromCharIndex"/> method returns the
      physical line number where the indexed character is located within the control.
      For example, if a portion of the first logical line of text in the control wraps
      to the next line, the <see cref="System.Windows.Forms.RichTextBox.GetLineFromCharIndex"/> method returns 1 if the
      character at the specified character index has wrapped to the second physical
      line. If <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> is set to <see langword="false"/>
      , no portion of the line wraps to the next, and the
      method returns 0 for the specified character index. You can use this method to determine
      which line a specific character index is located within. For example, after
      calling the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to search for text, you can obtain the
      character index to where the search results are found. You can call this
      method with the character index returned by the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to determine which line the word was
      found.</para>
			<note type="note">
      If the character index specified
      in the <paramref name="index"/> parameter is beyond the available number
      of lines contained within the control, the last
      line number is returned.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.GetCharFromPosition"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetCharIndexFromPosition"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetPositionFromCharIndex"/>
	</doc>
	<doc for="RichTextBox.OnSystemColorsChanged">
		<nodoc/>
	</doc>
	<doc for="RichTextBox.OnTextChanged">
		<nodoc/>
		<summary>
   Fires the event indicating that the text property has been changed.
   Inheriting controls should use this in favour of actually listening to
   the event, but should not forget to call base.onTextChanged() to
   ensure that the event is still fired for external listeners.
   </summary>
	</doc>
	<doc for="RichTextBox.Find1">
		<summary>
			<para>Searches the text in a <see cref="System.Windows.Forms.RichTextBox"/>
control for a string with specific options applied to the search.</para>
		</summary>
		<param name="str">The text to locate in the control.</param>
		<param name="options">A bitwise combination of the <see cref="System.Windows.Forms.RichTextBoxFinds"/> values.</param>
		<returns>
			<para>The location within the control where the search text was found.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox.Find"/> method searches for the text specified in the <paramref name="str"/> parameter and returns the
   location of the first character within the control. If the property returns a
   negative value, the text string being searched for was not found within the
   contents of the control. You can use this method to create search functionality
   that can be provided to the user of the control. You can also use this method to
   search for text to be replaced with a specific format. For example, if the user
   entered dates into the control, you can use the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to search for all dates in the
   document and replace them with the appropriate format before using the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method of the control.</para>
			<para>With this version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method, you can specify
options that enable you to expand or narrow your search. You can specify options
that enable you to match the casing of the search word or to search for entire
words instead of partial words. By specifying the
<see langword="RichTextBoxFinds.Reverse"/> enumeration in the <paramref name="options"/> parameter, you can search for text from the bottom of the document to the top instead of the default top to bottom search method.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.RichTextBox.Find"/> methods that accept
   a <see langword="string"/> as a parameter cannot find text that is
   contained on more than one line of text within the <see cref="System.Windows.Forms.RichTextBox"/>. Performing such a search will return
   a value of negative one (-1).
</note>
		</remarks>
		<example>
			<para>The following example searches the entire contents of a <see cref="System.Windows.Forms.RichTextBox"/>for the first instance of a search string passed into the text parameter of the method. If the search string is found in the <see cref="System.Windows.Forms.RichTextBox"/>, the method returns a value of <see langword="true"/> and highlights the text; otherwise, it returns <see langword="false"/>. The example also specifies
   options in the search to match the case of the specified search string. The example assumes that this method is placed in the class of a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.RichTextBox"/> named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.Find1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.Find2">
		<summary>
			<para>Searches the text in a <see cref="System.Windows.Forms.RichTextBox"/> control for a string
   at a specific location within the control and with specific options applied to the search.</para>
		</summary>
		<param name="str">The text to locate in the control.</param>
		<param name="start">The location within the control's text at which to begin searching.</param>
		<param name="options">A bitwise combination of the <see cref="System.Windows.Forms.RichTextBoxFinds"/> values.</param>
		<returns>
			<para>The location within the control where the search text was found.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox.Find"/> method searches for the text specified in the <paramref name="str"/> parameter and returns the
   location of the first character of the search string within the control. If the property returns a negative value, the text string being searched for was not found within the contents of the control. You can use this method to create search functionality that can be provided to the user of the control. You can also use this method to search for text to be replaced with a specific format. For example, if the user entered dates into the control, you could use the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to search for all dates in the document and replace them with the appropriate format before using the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method of the control.</para>
			<para>With this version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method, you can specify
options that enable you to expand or narrow your search. You can specify options
that enable you to match the casing of the search word or to search for entire
words instead of partial words. By specifying the
<see langword="RichTextBoxFinds.Reverse"/> enumeration in the <paramref name="options"/> parameter, you can search for text from the bottom of the document to the top instead of the default top to bottom search method. This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method also enables you 
to narrow the search for text by selecting a specific starting position within
the control's text. This feature can enable you to avoid text that might
have already been searched or where the specific text you are searching for is
known not to exist. When the <see langword="RichTextBoxFinds.Reverse"/> value is
specified in the <paramref name="options"/> parameter, the value of the <paramref name="start"/>
parameter indicates the position where the reverse search will end since the
search will start at the bottom of the document when using this version of the
<see cref="System.Windows.Forms.RichTextBox.Find"/> method.</para>
			<note type="note">
The <see cref="System.Windows.Forms.RichTextBox.Find"/> methods that accept
a <see langword="string"/> as a parameter cannot find text that is
contained on more than one line of text within the <see cref="System.Windows.Forms.RichTextBox"/>. Performing such a search will return
a value of negative one (-1). 
</note>
		</remarks>
		<example>
			<para>The following example searches the entire contents of a <see cref="System.Windows.Forms.RichTextBox"/>for the first
   instance of a search string passed into the text parameter of the method. The search starting location is specified by the start parameter of the method. If the search string is found in the <see cref="System.Windows.Forms.RichTextBox"/> , the method returns the index location of the first character of
   the found text and highlights the found text; otherwise, it returns a value of -1. The example also specifies options in the search to match the case of the specified search string. The example assumes that this method is placed in the class of a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.RichTextBox"/> named <c>richTextBox1</c>
. You can use this example when performing a "Find Next" type operation once
the first instance of search text has been found to find other instances of the
text.</para>
			<codelink SampleID="Classic RichTextBox.Find2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.LoadFile2">
		<summary>
			<para>Loads the contents of an existing data stream into the <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</summary>
		<param name="data">A stream of data to load into the <see cref="System.Windows.Forms.RichTextBox"/> control.</param>
		<param name="fileType">One of the <see cref="System.Windows.Forms.RichTextBoxStreamType"/> values.</param>
		<exception cref="System.ArgumentException">An invalid file type is specified in the <paramref name="fileType"/> parameter.</exception>
		<exception cref="System.IO.IOException">An error in loading the file into the control.</exception>
		<remarks>
			<para>You can use this version of the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method to load the <see cref="System.Windows.Forms.RichTextBox"/>
with data from an existing stream of data. The data that is loaded into the control replaces the entire contents of the <see cref="System.Windows.Forms.RichTextBox"/> control. This will cause the values of the <see cref="System.Windows.Forms.TextBoxBase.Text"/> and <see cref="System.Windows.Forms.RichTextBox.Rtf"/> properties to change. You can use
this method to load a file that has been previously opened into a data stream into the control for manipulation. If you want to save contents of the control back into the stream, you can use the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method that accepts a <see cref="System.IO.Stream"/> object as a
parameter.</para>
			<para> This version of the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method also enables you to specify the
type of data that is being loaded into the control. This feature enables you to use data streams that contain data other than Rich Text Format (RTF) documents into the control. </para>
			<note type="note">
The <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method will not open a file until a
handle is created for the <see cref="System.Windows.Forms.RichTextBox"/>. Ensure that the
control's handle is created before calling the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method. 
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.SaveFile"/>
		<seealso cref="System.IO.Stream"/>
		<seealso cref="System.Windows.Forms.RichTextBoxStreamType"/>
	</doc>
	<doc for="TextBoxBase.TextLength">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RichTextBox.BackgroundImageChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="RichTextBox.GetPositionFromCharIndex">
		<summary>
			<para>Gets the location within the control at the specified character index.</para>
		</summary>
		<param name="index">The index of the character for which to retrieve the location.</param>
		<returns>
			<para>The location of the specified character.</para>
		</returns>
		<remarks>
			<para>This method enables you to determine where in the control a specific character
      index is located. You can use this method for such tasks as displaying shortcut
      menu items or help information for a word in the control. For example, if
      you wanted to display a menu of options to the user when the user right clicks on
      a word in the control, you can use this method to determine the position of
      the word to properly display a <see cref="System.Windows.Forms.ContextMenu"/> control.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.RichTextBox.GetCharFromPosition"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetCharIndexFromPosition"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetLineFromCharIndex"/>
	</doc>
	<doc for="RichTextBox.CreateRichEditOleCallback">
		<summary>
			<para>Creates an <see langword="IRichEditOleCallback "/> compatible object
   for handling RichEdit callback operations.</para>
		</summary>
		<returns>
			<para>An object that implements the
   <see langword="IRichEditOleCallback"/> interface.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      You can override this method in your
      derived class to allow access to the underlying RichEdit features. If you
      override this method, all drag-and-drop events will not be raised. You will have to provide
      your own support for drag-and-drop as a result. For more information on the
   <see langword="IRichEditOleCallback"/>
   
   interface, refer to the MSDN documentation in
   the Platform SDK reference.
   
</note>
		</remarks>
	</doc>
	<doc for="RichTextBox.AllowDrop">
		<summary>
			<para> Gets or sets a value indicating whether the control will allow drag-and-drop
      operations.</para>
		</summary>
		<value>
			<para><see langword="true"/> if drag-and-drop is allowed in the control; otherwise,
<see langword="false"/>.</para>
		</value>
		<example>
			<para>The following example demonstrates how to perform drag
      and drop operations using a <see cref="System.Windows.Forms.ListBox"/> control that contains items to drop
      into a <see cref="System.Windows.Forms.RichTextBox"/>
      control. The constructor of the form sets
      the <see cref="System.Windows.Forms.RichTextBox.AllowDrop"/> property to <see langword="true"/> to
      enable drag and drop to occur in the <see cref="System.Windows.Forms.RichTextBox"/>. The
      example uses the <see cref="System.Windows.Forms.Control.MouseDown"/> event of the <see cref="System.Windows.Forms.ListBox"/>
      to start the drag operation by calling the <see cref="System.Windows.Forms.Control.DoDragDrop"/>
      method. The example uses the
   <see cref="System.Windows.Forms.Control.DragEnter"/> event to determine if an item being dragged into the <see cref="System.Windows.Forms.RichTextBox"/> is a valid data type. The <see cref="System.Windows.Forms.Control.DragDrop"/> event performs the actual
      dropping of a dragged item into the <see cref="System.Windows.Forms.RichTextBox"/> control at the current cursor location
      within the <see cref="System.Windows.Forms.RichTextBox"/> . This example
      assumes that the <see cref="System.Windows.Forms.Control.DragDrop"/> and <see cref="System.Windows.Forms.Control.DragEnter"/> events have been connected to the event
      handlers defined in the example.</para>
			<codelink SampleID="RichTextBox.AllowDrop" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.SelectionBullet">
		<summary>
			<para> Gets or sets a value indicating
      whether the bullet style is applied to the current selection or insertion point.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the current selection or insertion point has the
   bullet style applied; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> If no text is selected, the bullet style is
      applied to the current insertion point and to all paragraphs that the user enters
      after the insertion point. The bullet style is applied to the text of the
      control until the insertion point is moved or when the user presses the Enter key
      on an empty bullet
      item.</para>
			<para> If text
      is selected within the control when this property is set, all paragraphs within the selected
      text are converted into bulleted items in the bulleted list. You can use this
      property to create bulleted lists within the documents you create in the <see cref="System.Windows.Forms.RichTextBox"/>
      control.</para>
			<para> The <see cref="System.Windows.Forms.RichTextBox.BulletIndent"/> property enables you to
   specify the amount of indentation to apply between the bullet and the bulleted
   item's
   text.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use 
      the <see cref="System.Windows.Forms.RichTextBox.SelectionBullet"/> property with the <see cref="System.Windows.Forms.RichTextBox.SelectionFont"/>, <see cref="System.Windows.Forms.RichTextBox.SelectedText"/>, and <see cref="System.Windows.Forms.RichTextBox.SelectionColor"/> properties to create a bulleted list in a
   <see cref="System.Windows.Forms.RichTextBox"/> control. This example assumes that a 
   <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> is created on a form.</para>
			<codelink SampleID="RichTextBox.SelectionBullet" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.BulletIndent"/>
		<keyword term="bullet syle"/>
	</doc>
	<doc for="RichTextBox.SelectedText">
		<summary>
			<para>Gets or sets the selected text within the <see cref="System.Windows.Forms.RichTextBox"/>
.</para>
		</summary>
		<value>
			<para>A string that represents the selected text in the control.</para>
		</value>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.SelectionBullet"/> property with the <see cref="System.Windows.Forms.RichTextBox.SelectionFont"/>, <see cref="System.Windows.Forms.RichTextBox.SelectedText"/>, and <see cref="System.Windows.Forms.RichTextBox.SelectionColor"/> properties to create a bulleted list in a <see cref="System.Windows.Forms.RichTextBox"/> control. This example assumes that a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> is created on a form.</para>
			<codelink SampleID="RichTextBox.SelectionBullet" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.SelectionColor">
		<summary>
			<para>Gets or sets the text color of the current text selection or insertion
      point.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Color"/> that
   represents the color to apply to the current text selection or to
   text entered after the insertion point.</para>
		</value>
		<remarks>
			<para> If the current text selection has more than one color
      specified, this property returns <see langword="Color.Empty"/> . If no text is currently selected, the text
      color specified in this property is applied to the current insertion point and
      to all text that is typed into the control after the insertion point. The text
      color setting applies until the property is changed to a different color or
      until the insertion point is moved to a different section within the
      control.</para>
			<para> If text is selected within the
      control, the selected text and any text entered after the text selection will have
      the value of this property applied to it. You can use this property to
      change the color of text in the <see cref="System.Windows.Forms.RichTextBox"/> .</para>
			<para> To make text bold in the
      control, use the <see cref="System.Windows.Forms.RichTextBox.SelectionFont"/> property to assign a new font that
      has the bold font style specified.</para>
		</remarks>
		<example>
			<para>The following example displays a <see cref="System.Windows.Forms.ColorDialog"/> to the user to specify a
   color for the current text selection or text entered after the current insertion
   point in a <see cref="System.Windows.Forms.RichTextBox"/> control. This example assumes that the
   method defined in the example is added to a <see cref="System.Windows.Forms.Form"/> class that contains a
<see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.SelectionColor Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionFont"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Select"/>
	</doc>
	<doc for="RichTextBox.SelectionFont">
		<summary>
			<para>Gets or sets the font of the current text selection or insertion point.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Font"/> that represents the font to apply to the current text selection or to text entered after the insertion point.</para>
		</value>
		<remarks>
			<para> If the current text selection has more than one font specified, this
      property is <see langword="null"/> . If no text is currently selected,
      the font specified in this property is applied to the current insertion
      point and to all text that is typed into the control after the insertion point.
      The font setting applies until the property is changed to a
      different font or until the insertion point is moved to a different section
      within the control.</para>
			<para>If text is selected within the control, the selected text and any text
      entered after the text selection will have the value of this property applied to
      it. You can use this property to change the font style of text in the <see cref="System.Windows.Forms.RichTextBox"/>
      . You can make the text in the control bold, italic, and underlined. You can
      also change the size of the text and the font applied to the text.</para>
			<para>To change the color of the text in the control, use the <see cref="System.Windows.Forms.RichTextBox.SelectionColor"/> property. </para>
		</remarks>
		<example>
			<para>The following example changes the current font bold style setting
      for the text selection or text entered after the insertion point within the
   <see cref="System.Windows.Forms.RichTextBox"/> control. This example assumes that the
      code is contained within a method in a <see cref="System.Windows.Forms.Form"/>. The example also assumes
      that a <see cref="System.Windows.Forms.RichTextBox"/>, named <c>richTextBox1</c>, has been added to the <see cref="System.Windows.Forms.Form"/>.</para>
			<codelink SampleID="Classic RichTextBox.SelectionFont Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionColor"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Select"/>
	</doc>
	<doc for="RichTextBox.BulletIndent">
		<summary>
			<para>Gets or sets the indentation used in the <see cref="System.Windows.Forms.RichTextBox"/> control
   when the bullet style is applied to the text.</para>
		</summary>
		<value>
			<para> The number of pixels inserted as the indentation after a bullet. The default
      is zero.</para>
		</value>
		<exception cref="ArgumentException">The specified intentation was less than zero.</exception>
		<remarks>
			<para>To apply the bullet style to a paragraph of text, set the <see cref="System.Windows.Forms.RichTextBox.SelectionBullet"/> property
   to <see langword="true"/> and then set the
<see cref="System.Windows.Forms.RichTextBox.BulletIndent"/>
property to the number of pixels that the text should be indented. The
paragraph will have the bullet style applied to it with the specified amount
of indentation after the bullet. This property only affects the current paragraph
within the control's text and the currently selected bullet in a list of
bulleted items. To apply a different indentation level to an entire list of
bulleted items, all the text of the bulleted items must be selected before setting the
<see cref="System.Windows.Forms.RichTextBox.BulletIndent"/>
property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Windows.Forms.RichTextBox.SelectionBullet"/> property with the <see cref="System.Windows.Forms.RichTextBox.BulletIndent"/>, <see cref="System.Windows.Forms.RichTextBox.SelectionFont"/>, <see cref="System.Windows.Forms.RichTextBox.SelectedText"/>, and <see cref="System.Windows.Forms.RichTextBox.SelectionColor"/> properties to create a 
      bulleted list in a <see cref="System.Windows.Forms.RichTextBox"/> control. This example assumes that a
   <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> is created on a form. </para>
			<codelink SampleID="RichTextBox.BulletIndent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionBullet"/>
		<keyword term="bullet syle"/>
		<keyword term="indentation"/>
	</doc>
	<doc for="RichTextBox.SelectionAlignment">
		<summary>
			<para> Gets or sets the alignment to apply to
      the current selection or insertion point.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> values.</para>
		</value>
		<exception cref="InvalidEnumArgumentException">The specified value is not one of the values defined in the <see cref="System.Windows.Forms.HorizontalAlignment"/> class.</exception>
		<remarks>
			<para>If no paragraph is selected in the control, setting this
      property applies the alignment setting to the paragraph in which the insertion
      point appears as well as to paragraphs created after the paragraph that has
      the alignment property setting. For example, if there are two paragraphs in a
   <see cref="System.Windows.Forms.RichTextBox"/> control and the insertion point is located
      within the second paragraph. If you set the <see cref="System.Windows.Forms.RichTextBox.SelectionAlignment"/>
      
      property to
   <see langword="HorizontalAlignment.Center"/> , the paragraph at the
      insertion point will be centered within the control. If a third paragraph is created
      after the second paragraph, it also is aligned to the center of the control. </para>
			<para> If a selection is
      made within the control when
      the property is set, all paragraphs selected are aligned based on this property
      setting. You can use this property to align the paragraphs in a document
      being created in the <see cref="System.Windows.Forms.RichTextBox"/> . For example, if you want all paragraphs in a document to be centered, you can select all
      the paragraphs in the control and set the <see cref="System.Windows.Forms.RichTextBox.SelectionAlignment"/> property to
   <see langword="HorizontalAlignment.Center"/>. </para>
			<note type="note">
				<see cref="System.Windows.Forms.RichTextBox.SelectionAlignment"/> returns
   <see langword="SelectionAlignment.Left"/> when the text
      selection contains multiple paragraphs with mixed alignment.
      
   </note>
		</remarks>
		<example>
			<para> The following example demonstrates how to align text within the
   <see cref="System.Windows.Forms.RichTextBox"/>. This example assumes that a <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to the form.</para>
			<codelink SampleID="RichTextBox.SelectionAlignment" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
	</doc>
	<doc for="RichTextBox.SelectionCharOffset">
		<summary>
			<para> Gets or sets whether
      text in the control appears on the baseline, as a superscript,
      or as a subscript below the baseline.</para>
		</summary>
		<value>
			<para>A number that specifies the character offset.</para>
		</value>
		<exception cref="ArgumentException">The specified value was less than -2000 or greater than 2000.</exception>
		<remarks>
			<para> 
      The value of
      this property must be between -2000 and 2000.</para>
			<para> If this property is set
      to zero, the text appears on the baseline. If it is a positive number,
      the number specifies the number of pixels by which to raise the text selection above
      the baseline. If it is a negative number, this number specifies the
      number of pixels by which to subscript the text selection. You can use this
      property to specify text as superscript or subscript.</para>
			<para> If no
      text is selected, the offset is applied to the current insertion point and to all text that the user types after the insertion point. The character
      offset applies until the property is changed to a different value or until the
      insertion point is moved to a different section within the control.</para>
			<para>If text is selected within the control, the selected
      text and any text entered after the text selection will have the value of this property applied to it. You can
      use this property to create superscript and subscript text for such applications as mathematical
      expressions.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to specify 
      superscript and subscript text within the <see cref="System.Windows.Forms.RichTextBox"/> using the <see cref="System.Windows.Forms.RichTextBox.SelectionCharOffset"/> property. This example assumes that a
   <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to the form. </para>
			<codelink SampleID="RichTextBox.SelectionCharOffset" SnippetID="1"/>
		</example>
		<keyword term="superscript"/>
		<keyword term="subscript"/>
	</doc>
	<doc for="RichTextBox.SelectionHangingIndent">
		<summary>
			<para>Gets or sets the distance between the left edge of the first line of text in
      the selected paragraph and the left edge of subsequent lines in the same
      paragraph.</para>
		</summary>
		<value>
			<para>The distance, in pixels, for the hanging indent applied
      to the current text selection or the insertion point.</para>
		</value>
		<remarks>
			<para>If no text is currently selected, the hanging indent is
      applied to the paragraph in which the insertion point appears and to all text
      that is typed into the control after the insertion point. The hanging indent setting applies until the property is changed to a different
      value or until the insertion point is moved to a different paragraph within the control.</para>
			<para>If text is selected within the control, the selected text and any text
      entered after the text selection will have the value of this property applied to
      it. You can use this property to apply a hanging indent to your paragraphs.</para>
			<para>To set the indention of the first line of a paragraph
      selection, use the <see cref="System.Windows.Forms.RichTextBox.SelectionIndent"/>
      property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to specify hanging indents within the 
   <see cref="System.Windows.Forms.RichTextBox"/> using the <see cref="System.Windows.Forms.RichTextBox.SelectionHangingIndent"/> property. This example assumes that a 
   <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to the form.</para>
			<codelink SampleID="RichTextBox.SelectionHangingIndent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionIndent"/>
		<keyword term="hanging indent"/>
	</doc>
	<doc for="RichTextBox.SelectionIndent">
		<summary>
			<para>Gets or sets the distance in pixels between the left
      edge of the <see cref="System.Windows.Forms.RichTextBox"/>
      and the left edge of the current text selection or text added after the
      insertion point.</para>
		</summary>
		<value>
			<para>The current distance, in pixels, of the indentation applied to the
      left of the current text selection or the insertion point.</para>
		</value>
		<remarks>
			<para>If no text is currently selected, the indentation setting is applied to the paragraph in which the insertion point appears and to all text that is typed into the control after the insertion point. The indentation setting applies until the property is changed to a different value or until the insertion point is moved to a different paragraph within the control.</para>
			<para>If text is selected within the control, the selected
      text and any text entered after the text selection will have the value of this
      property applied to it. You can use this property to indent paragraphs contained
      in document of the <see cref="System.Windows.Forms.RichTextBox"/>. You can
      use this property in conjunction with the <see cref="System.Windows.Forms.RichTextBox.SelectionRightIndent"/> to create paragraphs displayed in paragraphs.</para>
			<para>To create a hanging indent for paragraphs in the
      control, use the <see cref="System.Windows.Forms.RichTextBox.SelectionHangingIndent"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to specify indented text within 
      the <see cref="System.Windows.Forms.RichTextBox"/>
      using the <see cref="System.Windows.Forms.RichTextBox.SelectionIndent"/> property. This example assumes
      that a <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to the form.</para>
			<codelink SampleID="RichTextBox.SelectionIndent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionRightIndent"/>
		<seealso cref="System.Windows.Forms.RichTextBox.SelectionHangingIndent"/>
		<keyword term="indentation"/>
	</doc>
	<doc for="RichTextBox.SelectionProtected">
		<summary>
			<para>Gets or sets a value indicating whether the current text selection is protected.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the current text selection is protected; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> If no text is currently selected, the protection setting is applied to the paragraph in which the insertion point appears and to all text that is typed into the control after the insertion point. The protection setting applies until the property is changed to a different value or until the insertion point is moved to a different paragraph within the control.</para>
			<para>If text is selected within the control, the selected text and any text entered after the text selection will have the value of this property applied to it. You can use this property to prevent the user from modifying sections of text within the control.</para>
			<para>If this property is set to <see langword="true"/>, the <see cref="System.Windows.Forms.RichTextBox.Protected"/> event is raised when the user
   attempts to change the current text selection.</para>
			<note type="note">
   This property will return
<see langword="true"/> only if the entire selection within the control
   contains protected content.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to specify protected text within 
      the <see cref="System.Windows.Forms.RichTextBox"/> using the <see cref="System.Windows.Forms.RichTextBox.SelectionProtected"/> property. This example assumes
      that a <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to
   the form and that the <see cref="System.Windows.Forms.RichTextBox"/> control
   has text added to it that contains the word "RichTextBox".</para>
			<codelink SampleID="RichTextBox.SelectionProtected" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.Protected"/>
	</doc>
	<doc for="RichTextBox.SelectionLength">
		<summary>
			<para> Gets or sets the number of characters selected in
      control.</para>
		</summary>
		<value>
			<para>The number of characters selected in the text box.</para>
		</value>
		<remarks>
			<para>You can use this property to determine if any characters
      are currently selected in the text box control before performing operations on
      the selected text. You can also use this property to determine the total number
      of characters (including spaces) that are selected when performing single
      character tasks in a <see langword="for"/>
      loop.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the the
   <see cref="System.Windows.Forms.RichTextBox.SelectionLength"/> property to determine if text is selected
      within the <see cref="System.Windows.Forms.RichTextBox"/> . This example assumes that a
   <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to the form. The
   example also assumes that <c>richTextBox1</c>
contains text that is selected in the control.</para>
			<codelink SampleID="RichTextBox.SelectionLength" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectionStart"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.SelectedText"/>
	</doc>
	<doc for="RichTextBox.RichTextBox">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.RichTextBox"/> class.</para>
		</summary>
		<remarks>
			<para>By default, the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property of the control is
   set to <see langword="true"/>. </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.RichTextBox"/> control that loads an RTF file into the control and searches for the first instance of the word "Text". The code then changes the font style, font size, and font color of the selected text and saves the changes back to the original file. The example code finishes by adding the control to its <see cref="System.Windows.Forms.Form"/>. This example assumes that the method created in the example code is added to a <see cref="System.Windows.Forms.Form"/> class and called from the constructor of the form. The example also assumes that an RTF file is created, in the root of the C drive, containing the word "Text".</para>
			<codelink SampleID="Classic RichTextBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.Multiline"/>
	</doc>
	<doc for="RichTextBox.MaxLength">
		<summary>
			<para>Gets or sets the maximum number of characters the user can
      type or paste into the rich text box control.</para>
		</summary>
		<value>
			<para>The number of characters that can be entered into the
      control. The default is <see cref="System.Int32.MaxValue"/>
      .</para>
		</value>
		<exception cref="System.ArgumentException">The value assigned to the property is less than 0.</exception>
		<remarks>
			<para> When this property is set to 0, the maximum length of the
      text that can be entered in the control is 64 KB of characters. This property
      is typically used when the <see cref="System.Windows.Forms.RichTextBox"/>
      
      is used to display a single line
      of Rich Text Format (RTF) text. You can use this property to restrict the
      length of text entered in the control for values such as postal codes and
      telephone numbers, or to restrict the length of text entered when the data is to be
      entered in a database. You can limit the text entered into the control to the
      maximum length of the corresponding field in the database.
      </para>
			<note type="note">
      In code, you can set the value of the <see cref="System.Windows.Forms.TextBoxBase.Text"/>
      property to a value that has a length
      greater than the value specified by the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/>
      property. This property only affects
      text entered into the control at run time.
      
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.MaxLength"/> property to determine if text being 
   assigned to a <see cref="System.Windows.Forms.RichTextBox"/> control is larger than the value assigned
   to the <see cref="System.Windows.Forms.RichTextBox.MaxLength"/> property. If the text is not larger, the
   example uses the <see cref="System.Windows.Forms.RichTextBox.SelectionText"/> property to assign the
   text to the control. This example assumes that a <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, has been added to a form and that the
method in the example is called with text supplied to the parameter that is to
be pasted into the control. The example also assumes that the MaxLength property
has been set to a value to limit text entry into the <see cref="System.Windows.Forms.RichTextBox"/>.</para>
			<codelink SampleID="RichTextBox.MaxLength" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase.MaxLength"/>
	</doc>
	<doc for="RichTextBox.AutoSize">
		<summary>
			<para>Gets or sets a value indicating whether the size of the
   <see cref="System.Windows.Forms.RichTextBox"/> automatically
      adjusts when the font assigned to the control is changed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the size of the control automatically adjusts when the font is changed; otherwise <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> When this property is set to <see langword="true"/> , the <see cref="System.Windows.Forms.RichTextBox"/> resizes its height based on the size of the font assigned to the control. You can use this property to ensure that the user can read text assigned to the control regardless of the font.</para>
		</remarks>
	</doc>
	<doc for="RichTextBox.LoadFile">
		<overload>
			<para>Loads the contents of a file into the <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</overload>
		<summary>
			<para>Loads a Rich Text Format (RTF) or standard ASCII text
      file into the <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</summary>
		<param name="path">The name and location of the file to load into the control.</param>
		<exception cref="System.IO.IOException">Occurs when there is an error in loading the file into the control.</exception>
		<remarks>
			<para>When loading a file with the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method, the contents of
   the file being loaded replace the entire contents of the <see cref="System.Windows.Forms.RichTextBox"/>
   control. This will cause the values of the <see cref="System.Windows.Forms.TextBoxBase.Text"/> and <see cref="System.Windows.Forms.RichTextBox.Rtf"/>
   
   properties to change. You can use this method to load a previously created text
   or RTF document into the control for manipulation. If you want to save the file,
   you can use the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method.</para>
			<note type="note">
   With this version of the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method, if the file being loaded is
   not an RTF document, an exception will occur. To load a different type of file
   such as an ASCII text file, use the other versions of this method that accept a
   value from the <see cref="System.Windows.Forms.RichTextBoxStreamType"/>
   enumeration as a parameter.
   
</note>
			<note type="note">
   The <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method will not open a file until a
   handle is created for the <see cref="System.Windows.Forms.RichTextBox"/>. Ensure that the
   control's handle is created before calling the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for opening a file. Associated enumeration: <see cref="System.Security.Permissions.FileIoPermissionAccess.Read" qualify="true"/>.</permission>
		<example>
			<para>The following example opens an RTF file into the <see cref="System.Windows.Forms.RichTextBox"/> control. The example uses the <see cref="System.Windows.Forms.OpenFileDialog"/> class to display a dialog to request the
   file from the user. The code then loads that file assuming that it is an RTF
   document file. If the file is not, the example code will throw an exception.
   This example assumes that the code is placed in a <see cref="System.Windows.Forms.Form"/> class that has a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.LoadFile Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SaveFile"/>
	</doc>
	<doc for="RichTextBox.LoadFile1">
		<summary>
			<para>Loads a specific type of file into the <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</summary>
		<param name="path">The name and location of the file to load into the control.</param>
		<param name="fileType">One of the <see cref="System.Windows.Forms.RichTextBoxStreamType"/> values.</param>
		<exception cref="System.ArgumentException">An invalid file type is specified in the <paramref name="fileType"/> parameter.</exception>
		<exception cref="System.IO.IOException">An error in loading the file into the control.</exception>
		<remarks>
			<para>When loading a file with the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method, the
   contents of the file being loaded replace the entire contents of the <see cref="System.Windows.Forms.RichTextBox"/>
   control. This will cause the values of the <see cref="System.Windows.Forms.TextBoxBase.Text"/> and <see cref="System.Windows.Forms.RichTextBox.Rtf"/>
   properties to change. You can use this
   method to load a previously created text or Rich Text Format (RTF) document into the control
   for manipulation. If you want to save the file, you can use the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method.</para>
			<para>You can use this version of the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method to specify the file type of the file being loaded. This feature enables you to load
files other than RTF documents into the control. </para>
			<note type="note">
   The <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method will not open a file until a
   handle is created for the <see cref="System.Windows.Forms.RichTextBox"/>. Ensure that the
   control's handle is created before calling the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for opening a file. Associated enumeration: <see cref="System.Security.Permissions.FileIoPermissionAccess.Read" qualify="true"/>.</permission>
		<example>
			<para>The following example opens a text file into the <see cref="System.Windows.Forms.RichTextBox"/> control. The example uses the <see cref="System.Windows.Forms.OpenFileDialog"/>
class to display a dialog to request the file from the user. The code then
loads that file into the <see cref="System.Windows.Forms.RichTextBox"/> control. The example uses this version of
the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method to specify that the file be opened as an ASCII text file instead of the standard Rich Text Format. This example assumes that the code is placed in a <see cref="System.Windows.Forms.Form"/> class that has a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.LoadFile1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.SaveFile"/>
		<seealso cref="System.Windows.Forms.RichTextBoxStreamType"/>
	</doc>
	<doc for="RichTextBox.SaveFile1">
		<summary>
			<para>Saves the contents of the <see cref="System.Windows.Forms.RichTextBox"/> to a specific type of file.</para>
		</summary>
		<param name="path">The name and location of the file to save.</param>
		<param name="fileType">One of the <see cref="System.Windows.Forms.RichTextBoxStreamType"/> values.</param>
		<exception cref="System.ArgumentException">An invalid file type is specified in the <paramref name="fileType"/> parameter.</exception>
		<exception cref="System.IO.IOException">An error occurs in saving the contents of the control to a file.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method enables you to save the entire contents of the control to an RTF file that can be used by other programs such as Microsoft Word and Windows WordPad. If the file name that is passed to the <paramref name="path"/> parameter already exists at the specified
   directory, the file will be overwritten without notice. You can use the
<see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method to load the contents of a file into
   the <see cref="System.Windows.Forms.RichTextBox"/> .</para>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method enables you to specify
a file type to save the contents of the control to. You can use this feature to
ensure that the file is saved in the proper format based on the contents of the
control. For example, if your document has no differences in font style or
coloring, you can save the file as an ASCII text file by setting the
<paramref name="fileType"/> 
parameter to
<see langword="RichTextBoxStreamType.PlainText"/> .</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for creating or modifying a file. Associated enumeration: <see cref="System.Security.Permissions.FileIoPermissionAccess.Write" qualify="true"/>.</permission>
		<example>
			<para>The following example saves the contents of the <see cref="System.Windows.Forms.RichTextBox"/> into an
   ASCII text file. The example uses the <see cref="System.Windows.Forms.SaveFileDialog"/> class to display a dialog
   to request the path and file name from the user. The code then
   saves the contents of the control to that file. The example uses this
   version of the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method to specify that the file be saved as an ASCII text file instead of the standard Rich Text Format. This example assumes that the code is placed in a <see cref="System.Windows.Forms.Form"/> class that has a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>.</para>
			<codelink SampleID="Classic RichTextBox.SaveFile1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.LoadFile"/>
		<seealso cref="System.Windows.Forms.RichTextBoxStreamType"/>
	</doc>
	<doc for="RichTextBox.SaveFile2">
		<summary>
			<para>Saves the contents of a <see cref="System.Windows.Forms.RichTextBox"/> control to an open data stream.</para>
		</summary>
		<param name="data">The data stream that contains the file to save to.</param>
		<param name="fileType">One of the <see cref="System.Windows.Forms.RichTextBoxStreamType"/> values.</param>
		<exception cref="System.ArgumentException">An invalid file type is specified in the <paramref name="fileType"/> parameter.</exception>
		<exception cref="System.IO.IOException">An error occurs in saving the contents of the control to a file.</exception>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method enables you to save the
   entire contents of the control to the data stream that is already opened. The data stream can then save the information to a file. You can use the <see cref="System.Windows.Forms.RichTextBox.LoadFile"/> method to load the contents of a file into the <see cref="System.Windows.Forms.RichTextBox"/> .</para>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method also enables you to specify
a data format of the information that will be sent to the <see cref="System.IO.Stream"/> object.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for creating or modifying a file. Associated enumeration: <see cref="System.Security.Permissions.FileIoPermissionAccess.Write" qualify="true"/>.</permission>
		<seealso cref="System.IO.Stream"/>
		<seealso cref="System.Windows.Forms.RichTextBox.LoadFile"/>
		<seealso cref="System.Windows.Forms.RichTextBoxStreamType"/>
	</doc>
	<doc for="RichTextBox.Text">
		<summary>
			<para>Gets or sets the current text in the rich text box.</para>
		</summary>
		<value>
			<para>The text displayed in the control.</para>
		</value>
		<remarks>
			<para>To display multiple lines of text in a <see cref="System.Windows.Forms.RichTextBox"/> , set the
<see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property to 
<see langword="true"/>. To read or set the text of a multiline text box, use the 
<see cref="System.Windows.Forms.TextBoxBase.Lines"/> 
property. The <see cref="System.Windows.Forms.RichTextBox.Text"/>
property does not return any information about the
formatting applied to the contents of the <see cref="System.Windows.Forms.RichTextBox"/> . To get the
Rich Text Formatting (RTF) codes, use the <see cref="System.Windows.Forms.RichTextBox.Rtf"/> property. The amount of text
that can be entered in the <see cref="System.Windows.Forms.RichTextBox"/> control is limited only by available
system memory.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBoxBase.Lines"/>
		<seealso cref="System.Windows.Forms.TextBoxBase.Multiline"/>
	</doc>
	<doc for="RichTextBox.CanRedo">
		<summary>
			<para> Gets a value indicating whether there are actions that
      have occurred within the <see cref="System.Windows.Forms.RichTextBox"/> that can be reapplied.</para>
		</summary>
		<value>
			<para><see langword="true"/> if there are operations that have
   been undone that can be reapplied to the content of the control; otherwise,
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>You can use this property to determine whether the last operation undone in the
   <see cref="System.Windows.Forms.RichTextBox"/> can be reapplied using the <see cref="System.Windows.Forms.RichTextBox.Redo"/> method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.CanRedo"/> and <see cref="System.Windows.Forms.RichTextBox.RedoActionName"/> properties, and the <see cref="System.Windows.Forms.RichTextBox.Redo"/> 
method, to restrict a redo operation to any action except the deletion
of text. This example assumes that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control and that an
operation within the <see cref="System.Windows.Forms.RichTextBox"/> has been performed and undone before the
code in this example is called.</para>
			<codelink SampleID="RichTextBox.RedoAction" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.Redo"/>
	</doc>
	<doc for="RichTextBox.RedoActionName">
		<summary>
			<para>Gets the name of the action that can be reapplied to the control when the
   <see cref="System.Windows.Forms.RichTextBox.Redo"/> method is called.</para>
		</summary>
		<value>
			<para>A string that represents the name of the action
      that will be performed when a call to the <see cref="System.Windows.Forms.RichTextBox.Redo"/> method is made.</para>
		</value>
		<remarks>
			<para> If this property returns an empty string (""),
      there is no operation available to reapply to the control. You can use this
      method to determine the last action undone in the <see cref="System.Windows.Forms.RichTextBox"/>
      control that can then be reapplied to the control when a call to the <see cref="System.Windows.Forms.RichTextBox.Redo"/> method is made. You can determine whether there are
      any operations to be reapplied to the control by using the <see cref="System.Windows.Forms.RichTextBox.CanRedo"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.CanRedo"/> and <see cref="System.Windows.Forms.RichTextBox.RedoActionName"/> properties, and the <see cref="System.Windows.Forms.RichTextBox.Redo"/> method, to restrict a redo operation to any action except the deletion
   of text. This example assumes that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control and that an
   operation within the <see cref="System.Windows.Forms.RichTextBox"/> has been performed and undone before the
   code in this example is called.</para>
			<codelink SampleID="RichTextBox.RedoAction" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.CanRedo"/>
		<seealso cref="System.Windows.Forms.RichTextBox.Redo"/>
	</doc>
	<doc for="RichTextBox.Redo">
		<summary>
			<para>Reapplies the last operation that was undone in the control.</para>
		</summary>
		<remarks>
			<para>You can then use the <see cref="System.Windows.Forms.RichTextBox.Redo"/>
method to reapply the last undo operation to the control. The <see cref="System.Windows.Forms.RichTextBox.CanRedo"/>
method enables you to determine whether the last
operation the user has undone can be reapplied to the control.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.CanRedo"/> and <see cref="System.Windows.Forms.RichTextBox.RedoActionName"/> properties, and the <see cref="System.Windows.Forms.RichTextBox.Redo"/> method, to restrict a redo operation to any action except the deletion
   of text. This example assumes that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control and that an
   operation within the <see cref="System.Windows.Forms.RichTextBox"/> has been performed and undone before the
   code in this example is called.</para>
			<codelink SampleID="RichTextBox.RedoAction" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.CanRedo"/>
	</doc>
	<doc for="RichTextBox.ZoomFactor">
		<summary>
			<para>Gets or sets the current zoom level of the <see cref="System.Windows.Forms.RichTextBox"/>
.</para>
		</summary>
		<value>
			<para>The factor by which the contents of the control is zoomed.</para>
		</value>
		<exception cref="ArgumentException">The specified zoom factor did not fall within the permissible range.</exception>
		<remarks>
			<para>The value of this property can be between 0.64 and 64.0. A
      value of 1.0 indicates that no zoom is applied to the control. The zoom feature
      performs optimally when the document contains TrueType fonts. When a font
      that is not TrueType is used within the document of the control, the <see cref="System.Windows.Forms.RichTextBox.ZoomFactor"/> property will use the nearest whole number
      value. You can use this property to enable the user of the <see cref="System.Windows.Forms.RichTextBox"/> control to
      zoom into sections of the documentation that are too small to view or
      to condense the view to enable more of the document to be
      viewed on screen.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.RichTextBox"/> that zooms in on text, automatically selects words in the text of the control when a word is double clicked, and has a margin on the right side of the client area of the control. If the <see cref="System.Windows.Forms.RichTextBox"/> control has a small width, using this code will create a <see cref="System.Windows.Forms.RichTextBox"/> where each 
   character of text is displayed on its own line. While in this vertical display position, clicking on any part of a word will select all characters of the word regardless of the fact that the text is displayed vertically. This example assumes that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> .</para>
			<codelink SampleID="RichTextBox.ZoomFactor" SnippetID="1"/>
		</example>
		<keyword term=""/>
	</doc>
	<doc for="RichTextBox.RightMargin">
		<summary>
			<para>Gets or sets the size of a single line of text within the <see cref="System.Windows.Forms.RichTextBox"/> control.</para>
		</summary>
		<value>
			<para>The size, in pixels, of a single line of text in the control. The default is zero.</para>
		</value>
		<exception cref="ArgumentException">The specified value was less than zero.</exception>
		<remarks>
			<para> When a value greater than zero is entered into
      the control, a nonvisible margin is placed in the control at the
      specified number of pixels from the left side of the control. Any text that is
      entered that extends beyond this margin is placed on the next line of text in the
      control. This property affects all text currently entered into the control as
      well as any additional text entered into the control after the property is set.
      You can use this property to specify a maximum line width for all text entered
      into a <see cref="System.Windows.Forms.RichTextBox"/>
      control.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.RichTextBox"/> that zooms in on text, automatically selects words in the text of the control when a word is double clicked, and has a margin on the right side of the client area of the control. If the <see cref="System.Windows.Forms.RichTextBox"/> control has a small width, using this code will create a <see cref="System.Windows.Forms.RichTextBox"/> where each character of text is displayed on its own line. While in this vertical display position, clicking on any part of a word will select all characters of the word regardless of the fact that the text is displayed vertically. This example assumes that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> .</para>
			<codelink SampleID="RichTextBox.ZoomFactor" SnippetID="1"/>
		</example>
		<keyword term="line width"/>
	</doc>
	<doc for="RichTextBox.AutoWordSelection">
		<summary>
			<para>Gets or sets a value indicating whether automatic word selection is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if automatic word selection is
   enabled; otherwise, <see langword="false"/>. The default is
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>If this property is set to <see langword="true"/>,
   selecting any part of the text in the control results in the selection of the
   entire word. For example, if <see cref="System.Windows.Forms.RichTextBox.AutoWordSelection"/> is set to <see langword="true"/>, the user can
   double-click on any part of a word in the control and the entire word is selected automatically.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Windows.Forms.RichTextBox"/> that zooms in on text, automatically selects words in the text of the control when a word is double clicked, and has a margin on the right side of the client area of the control. If the <see cref="System.Windows.Forms.RichTextBox"/> control has a small width, using this code will create a <see cref="System.Windows.Forms.RichTextBox"/> where each character of text is displayed on its own line. While in this vertical display position, clicking on any part of a word will select all characters of the word regardless of the fact that the text is displayed vertically. This example assumes that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>.</para>
			<codelink SampleID="RichTextBox.ZoomFactor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.Find4">
		<summary>
			<para> Searches the text of a <see cref="System.Windows.Forms.RichTextBox"/>
control for the first instance of a character from a list of characters.</para>
		</summary>
		<param name="characterSet">The array of characters to search for.</param>
		<returns>
			<para>The location within the control where the search
      characters were found or a negative one (-1) if the search characters are
      not found or an empty search character set is specified in the <paramref name="char
      "/> parameter.</para>
		</returns>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/>method searches for the first
   instance of a character from a list of characters
   specified in the <paramref name="characterSet"/> parameter and returns the location
   of the character. For example, you pass an array of characters containing
   the character 'Q'. If the control contained the text "The Quick Brown Fox", the
<see cref="System.Windows.Forms.RichTextBox.Find"/> 
method would return the value of four. An upper case character and a lower case
character are considered different values in the search.</para>
			<para>If the property returns a negative value, the characters
   being searched for were not found within the contents of the control. You
   can use this method to search for a group of characters within the control. This
   version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method assumes that the entire document
   contained in the control is searched for the characters. If a character from the
   character list provided in the method's <paramref name="characterSet"/> parameter
   is found, the value returned by this method is a zero-based index of the character's
   position in the control. A space is considered a character by the
   method when determining the location of a character. </para>
		</remarks>
		<example>
			<para>The following example searches the contents of a <see cref="System.Windows.Forms.RichTextBox"/> for the characters that are passed to the 
   method in the <c>text</c> parameter.
If the contents of the <c>text</c>
array is found in the <see cref="System.Windows.Forms.RichTextBox"/>, the method returns the index of the value
that is found; otherwise, it returns -1. The example assumes that this method is
placed in the class of a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> and a <see cref="System.Windows.Forms.Button"/> control, named <c>button1</c>, that is connected to the
click event handling method defined in the example.</para>
			<codelink SampleID="RichTextBox.FindChar1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.Find5">
		<summary>
			<para>Searches the text of a <see cref="System.Windows.Forms.RichTextBox"/>
control, at a specific starting point, for the first instance of a character from a list of characters.</para>
		</summary>
		<param name="characterSet">The array of characters to search for.</param>
		<param name="start">The location within the control's text at which to begin searching.</param>
		<returns>
			<para>The location within the control where the search characters are found.</para>
		</returns>
		<remarks>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/>method searches for the first
   instance of a character from a list of characters specified in the <paramref name="characterSet"/> parameter and returns the location the
   character. For example, you pass an array of characters containing the character
   'Q'. If the control contained the text "The Quick Brown Fox", the <see cref="System.Windows.Forms.RichTextBox.Find"/>
   
   method would return the value of four. An upper case character and a lower case
   character are considered different values in the search.</para>
			<para>If the property returns a negative value, the characters
   being searched for were not found within the contents of the control. You can use this method to
   search for a group of characters within the control. If a character from the
   character list provided in the method's <paramref name="characterSet"/> parameter
   is found, the value returned by this method is a zero-based index of the character's
   position in the control. A space is considered a character by the
   method when determining the location of a character.</para>
			<para>This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method enables
you to search for a character set from a specified start position within the
text of the control by specifying a value for the <paramref name="start"/> parameter. A value
of zero indicates that the search should start from the beginning of the
control's document. You can use this version of the <see cref="System.Windows.Forms.RichTextBox.Find"/>
method to narrow your
search to avoid text that you already know does not contain the specified
characters you are searching for or are not important in your search.</para>
		</remarks>
		<example>
			<para>The following example searches the contents of a <see cref="System.Windows.Forms.RichTextBox"/> for the characters that are passed to the 
   method in the <c>text</c> parameter.
The search begins from the location within the <see cref="System.Windows.Forms.RichTextBox"/> specified by the <c>start</c> parameter of the <c>FindMyText</c> method. If the contents
of the text array is found in the <see cref="System.Windows.Forms.RichTextBox"/>, the method returns the
index of the value that is found; otherwise, it returns -1. The example assumes
that this method is placed in the class of a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> and a Button control, named <c>button1</c>, that is connected to the
click event handling method defined in the example.</para>
			<codelink SampleID="RichTextBox.FindChar2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.GetCharFromPosition">
		<summary>
			<para>Gets the character that is closest to the specified location within the control.</para>
		</summary>
		<param name="pt">The location from which to seek the nearest character.</param>
		<returns>
			<para>The character at the specified location.</para>
		</returns>
		<remarks>
			<para>If the location specified in the <paramref name="pt"/> parameter is outside the client area of the control,
   the first character of the string closest to the point specified in
<paramref name="pt"/> 
is returned. You can use this method to determine which characters are
located near a specific point within
the control. You can then use this value to perform operations on the text
at that location.</para>
			<note type="note">
   If the specified
   location in the <paramref name="pt"/> parameter is located on the right side of the
   client area of the control, the last character of the string closest to the point
   specified in <paramref name="pt"/> is returned.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.GetCharFromPosition"/> method to obtain a character from the 
   contents of a <see cref="System.Windows.Forms.RichTextBox"/>, given its control coordinates. The
   example code uses coordinates that are located in the <see cref="System.Windows.Forms.MouseEventArgs"/> object to determine the location in the
   control from which to obtain the character. If the character is not a space
   character, it then displayed in a <see cref="System.Windows.Forms.MessageBox"/>. This example assumes
   that you have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c> and that the example
code is connected to the <see cref="System.Windows.Forms.Control.MouseDown"/> event of the <see cref="System.Windows.Forms.RichTextBox"/>.</para>
			<codelink SampleID="RichTextBox.GetCharAtIndex" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.GetCharIndexFromPosition"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetLineFromCharIndex"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetPositionFromCharIndex"/>
	</doc>
	<doc for="RichTextBox.Find3">
		<summary>
			<para>Searches the text in a <see cref="System.Windows.Forms.RichTextBox"/> control for a string within a range of text within the control and with specific options applied to the search.</para>
		</summary>
		<param name="str">The text to locate in the control.</param>
		<param name="start">The location within the control's text at which to begin searching.</param>
		<param name="end">The location within the control's text at which to end searching. This value must be equal to negative one (-1) or greater than or equal to the <paramref name="start"/> parameter.</param>
		<param name="options">A bitwise combination of the <see cref="System.Windows.Forms.RichTextBoxFinds"/> values.</param>
		<returns>
			<para>The location within the control where the search text was found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="str"/> parameter was <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException">The <paramref name="start"/> parameter was less than zero.</exception>
		<exception cref="System.ArgumentException">The <paramref name="end"/> parameter was less the <paramref name="start"/> parameter.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.RichTextBox.Find"/> method searches for the text specified in the <paramref name="str"/> parameter and returns the
   location of the first
   character of the search string within the control. If the property returns a
   negative value, the text string being searched for was not found within the
   contents of the control. You can use this method to create search functionality
   that can be provided to the user of the control. You can also use this method to
   search for text to be replaced with a specific format. For example, if the user
   entered dates into the control, you can use the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to search for all dates in the
   document and replace them with the appropriate format before using the <see cref="System.Windows.Forms.RichTextBox.SaveFile"/> method of the control.</para>
			<para>With this version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method, you can specify
options that enable you to expand or narrow your search. You can specify options
that enable you to match the casing of the search word or to search for entire
words instead of partial words. By specifying the
<see langword="RichTextBoxFinds.Reverse"/> enumeration in the <paramref name="options"/> parameter, you can search for text from the bottom of the document to the top instead of the default top to bottom search method. This version of the <see cref="System.Windows.Forms.RichTextBox.Find"/> 
method also enables you to narrow the search for text by selecting a specific start and end position within the control's text. This feature can enable you to limit the search range to a specific section of the control's text. If a value of negative one (-1) is assigned to the <paramref name="end"/> parameter, the method will search until the end of the
text in the <see cref="System.Windows.Forms.RichTextBox"/> for normal
searches. For reverse searches, a value of negative one (-1) assigned to the
<paramref name="end"/> 
parameter indicates that text will be searched from the end of text (bottom) to
the position defined by <paramref name="start"/> parameter . When the <paramref name="start"/> and <paramref name="end"/>
parameters are provided the same value the entire control is searched for normal
searches. For a reverse search, the entire control is searched but the search
begins at the bottom of the document and searches to the top of the
document.</para>
			<note type="note">
   The <see cref="System.Windows.Forms.RichTextBox.Find"/> methods that accept
   a <see langword="string"/> as a parameter cannot find text that is
   contained on more than one line of text within the <see cref="System.Windows.Forms.RichTextBox"/>. Performing such a search will return
   a value of negative one (-1).
</note>
		</remarks>
		<example>
			<para>The following example searches a section of text in a <see cref="System.Windows.Forms.RichTextBox"/> for the first instance of a search string 
   passed into the <c>searchText</c>
parameter of the method. The range to search for text within the control is
specified by the <c>searchStart</c>
and <c>searchEnd</c> parameters of
the method. If the search string is found in the <see cref="System.Windows.Forms.RichTextBox"/>, the method returns the index location of
the first character of the found text and highlights the found text; otherwise,
it returns a value of -1. The example also uses the <paramref name="options"/> parameter
of the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to specify that the found text
should match the case of the search string. The example assumes that this method
is placed in the class of a <see cref="System.Windows.Forms.Form"/> that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>. After the first instance of the search
string has been found, you can use this example to find other instances in the
text.</para>
			<codelink SampleID="RichTextBox.FindStringStartEnd" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RichTextBox.GetCharIndexFromPosition">
		<summary>
			<para>Gets the index of the character nearest to the specified location.</para>
		</summary>
		<param name=" pt">The location to search.</param>
		<returns>
			<para> The zero-based character index at the specified location.</para>
		</returns>
		<remarks>
			<para>This method returns the character index that is closest to the position
      specified in the <paramref name="pt"/> parameter. The character index is a zero-based
      index of text in the control, including spaces. You can use this method to
      determine where in the text the user has the mouse over by passing the mouse
      coordinates to this method. This can be useful if you want to perform tasks when
      the user hovers the mouse pointer over a word in the text of the control.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.RichTextBox.GetCharIndexFromPosition"/> method with the <see cref="System.Windows.Forms.RichTextBox.Find"/> method to search for a specific string 
   within a <see cref="System.Windows.Forms.RichTextBox"/> control and display the character
   index where the found string is located within the <see cref="System.Windows.Forms.RichTextBox"/> control. The example searches for the word
   "brown" within the contents of the control and returns the character index
   position where the search string is found. This example assumes that you have a
   form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control, named <c>richTextBox1</c>, that contains text. It also assumes that
the code in the example is connected to the <see cref="System.Windows.Forms.Control.MouseDown"/> event of the <see cref="System.Windows.Forms.RichTextBox"/>.</para>
			<codelink SampleID="RichTextBox.GetCharIndexFromPosition" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.RichTextBox.GetCharFromPosition"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetLineFromCharIndex"/>
		<seealso cref="System.Windows.Forms.RichTextBox.GetPositionFromCharIndex"/>
	</doc>
	<doc for="RichTextBox.SelectionRightIndent">
		<summary>
			<para>The distance (in pixels) between the right edge of the RichTextBox control and
      the right edge of the text that is selected or added at the current
      insertion point.</para>
		</summary>
		<value>
			<para>The indentation space, in pixels, at the right of the current selection or
      insertion point.</para>
		</value>
		<remarks>
			<para>If no text is currently selected, the indentation setting is applied to the
      paragraph in which the insertion point appears and to all text that is typed
      into the control after the insertion point. The indentation setting applies
      until the property is changed to a different value or until the insertion point
      is moved to a different paragraph within the control.</para>
			<para>If text is selected within the control, the selected text and any text
      entered after the text selection will have the value of this property applied to
      it. You can use this property to indent paragraphs contained in document of the
   <see cref="System.Windows.Forms.RichTextBox"/>. You can
      use this property in conjunction with the <see cref="System.Windows.Forms.RichTextBox.SelectionIndent"/> to create paragraphs displayed in
      paragraphs.</para>
			<para>To create a hanging indent for paragraphs in the control, use the <see cref="System.Windows.Forms.RichTextBox.SelectionHangingIndent"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a right margin in a <see cref="System.Windows.Forms.RichTextBox"/> using the <see cref="System.Windows.Forms.RichTextBox.SelectionRightIndent"/> property. The example assumes that you 
   have a form that contains a <see cref="System.Windows.Forms.RichTextBox"/> control named <c>richTextBox1</c>, and that the example code is called from
an event within the form's class.</para>
			<codelink SampleID="RichTextBox.SelectionRightIndent" SnippetID="1"/>
		</example>
	</doc>
</docs>
