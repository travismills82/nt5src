<docs>
	<doc for="ControlStyles.ContainerControl">
		<summary>
			<para>If <see langword="true"/>, the control is a container-like control.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.UserPaint">
		<summary>
			<para>If <see langword="true"/>, the control paints itself rather than the operating system doing so. This
   style only applies to classes derived from <see cref="System.Windows.Forms.Control"/>.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.Opaque">
		<summary>
			<para> If <see langword="true"/>, the control is drawn opaque and the background is
   not painted.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.ResizeRedraw">
		<summary>
			<para> If <see langword="true"/>, the control is redrawn when it is resized.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.StandardClick">
		<summary>
			<para>If <see langword="true"/>, the control implements the standard <see cref="System.Windows.Forms.Control.Click"/>
behavior.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.Selectable">
		<summary>
			<para> If <see langword="true"/>, the control can receive focus.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.UserMouse">
		<summary>
			<para> If <see langword="true"/>, the control does its own mouse processing, and mouse events are not
   handled by the operating system.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.SupportsTransparentBackColor">
		<summary>
			<para>If <see langword="true"/>, the control accepts a <see cref="System.Windows.Forms.Control.BackColor"/> with an alpha component of less than 255
   to simulate transparency. Transparency will be simulated only if the <see cref="System.Windows.Forms.ControlStyles.UserPaint"/>
   bit is set to <see langword="true"/>
   
   and the parent control is derived from <see cref="System.Windows.Forms.Control"/>.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.StandardDoubleClick">
		<summary>
			<para>If <see langword="true"/>, the control implements the standard <see cref="System.Windows.Forms.Control.DoubleClick"/> behavior. 
   This style is ignored if the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/> bit is not set to <see langword="true"/>.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.AllPaintingInWmPaint">
		<summary>
			<para> If <see langword="true"/>, the control ignores the window message WM_ERASEBKGND to
   reduce flicker. This style should only be applied if the <see cref="System.Windows.Forms.ControlStyles.UserPaint"/>
   bit is set to
<see langword="true"/>.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.CacheText">
		<summary>
			<para>If <see langword="true"/>, the control keeps a copy of the text rather than getting
   it from the <see cref="System.Windows.Forms.Control.Handle"/> each time it is
   needed. This style defaults to <see langword="false"/>. This behavior improves performance, but
   makes it difficult to keep the text synchronized.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.DoubleBuffer">
		<summary>
			<para> If <see langword="true"/>, drawing is performed in a buffer, and after it
   completes, the result is output to the screen. Double-buffering prevents flicker
   caused by the redrawing of the control. To fully enable double-buffering, you
   must also set the <see cref="System.Windows.Forms.ControlStyles.UserPaint"/> and <see cref="System.Windows.Forms.ControlStyles.AllPaintingInWmPaint"/>
   style bits to <see langword="true"/>
   .</para>
		</summary>
	</doc>
	<doc for="ControlStyles.EnableNotifyMessage">
		<summary>
			<para>If <see langword="true"/> , the <see cref="System.Windows.Forms.Control.OnNotifyMessage"/> method is called for
   every message sent to the control's <see cref="System.Windows.Forms.Control.WndProc"/>. This style defaults to
<see langword="false"/>
.</para>
		</summary>
	</doc>
	<doc for="ControlStyles.FixedWidth">
		<summary>
			<para> If <see langword="true"/>, the control has a fixed height 
   when auto-scaled. For example, if a layout operation attempts to rescale the
   control to accommodate a new <see cref="System.Drawing.Font"/>, the control's <see cref="System.Windows.Forms.Control.Height"/> remains unchanged.
   </para>
		</summary>
	</doc>
	<doc for="ControlStyles.FixedHeight">
		<summary>
			<para>If <see langword="true"/>, the control has a fixed width when auto-scaled. For example, if a layout operation attempts to rescale the control to accommodate a new <see cref="System.Drawing.Font"/>, the control's <see cref="System.Windows.Forms.Control.Width"/> remains unchanged. </para>
		</summary>
	</doc>
	<doc for="ControlStyles">
		<summary>
			<para>Specifies the style and behavior of a control.</para>
		</summary>
		<remarks>
			<para>Controls use this enumeration in various properties and
      methods to specify functionality. A control can enable a style by calling the
   <see cref="System.Windows.Forms.Control.SetStyle"/> method
      and passing in the appropriate <see cref="System.Windows.Forms.ControlStyles"/>
      bit (or bits) and the Boolean value to set the bit(s) to. For example, the following line of Visual Basic code would enable
      double-buffering.</para>
			<code>
myControl.SetStyle(UserPaint Or AllPaintingInWmPaint Or DoubleBuffer, True)
   </code>
			<para>If the <see cref="System.Windows.Forms.ControlStyles.AllPaintingInWmPaint"/>
bit is set to <see langword="true"/> , the window
message WM_ERASEBKGND is ignored, and both <see cref="System.Windows.Forms.Control.OnPaintBackground"/> and
<see cref="System.Windows.Forms.Control.OnPaint"/> methods are called directly
from the window message WM_PAINT. This generally reduces flicker unless other
controls send the window message WM_ERASEBKGND to the control. You
might send the window message WM_ERASEBKGRND to achieve a pseudo-transparent effect similar
to <see cref="System.Windows.Forms.ControlStyles.SupportsTransparentBackColor"/>;
for example, a <see cref="System.Windows.Forms.ToolBar"/>
with flat appearance does this.</para>
			<para>To fully enable double-buffering, you must set the <see cref="System.Windows.Forms.ControlStyles.UserPaint"/> , <see cref="System.Windows.Forms.ControlStyles.AllPaintingInWmPaint"/>
, and <see cref="System.Windows.Forms.ControlStyles.DoubleBuffer"/>
bits to <see langword="true"/> .</para>
			<para>If the <see cref="System.Windows.Forms.ControlStyles.SupportsTransparentBackColor"/>
bit is set to <see langword="true"/> , and the <see cref="System.Windows.Forms.Control.BackColor"/> is set
to a color whose alpha component is less than 255, <see cref="System.Windows.Forms.Control.OnPaintBackground"/>
will simulate transparency by asking its parent
control to paint the background. This is not true transparency.</para>
			<note type="note">
   If there is another control between the control and its
   parent, the current control will not show the control in the middle.
   
</note>
			<para>When the <see cref="System.Windows.Forms.ControlStyles.UserMouse"/> bit is set
to <see langword="true"/>, the following methods are still called:
<see cref="System.Windows.Forms.Control.OnMouseDown" qualify="true"/>, <see cref="System.Windows.Forms.Control.OnMouseUp" qualify="true"/>, <see cref="System.Windows.Forms.Control.OnMouseEnter" qualify="true"/>, <see cref="System.Windows.Forms.Control.OnMouseMove" qualify="true"/>, <see cref="System.Windows.Forms.Control.OnMouseHover" qualify="true"/>, <see cref="System.Windows.Forms.Control.OnMouseLeave" qualify="true"/>, and <see cref="System.Windows.Forms.Control.OnMouseWheel" qualify="true"/>.</para>
			<para>When the control is clicked, if the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/> bit is set to
<see langword="true"/> the <see cref="System.Windows.Forms.Control.OnClick" qualify="true"/> method is called and it raises the <see cref="System.Windows.Forms.Control.Click" qualify="true"/> event. 
When the control is double-clicked, and both the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/>
and <see cref="System.Windows.Forms.ControlStyles.StandardDoubleClick"/>
bits are set to <see langword="true"/>, the click is passed on to
the <see cref="System.Windows.Forms.Control.DoubleClick"/>
event. Then the <see cref="System.Windows.Forms.Control.OnDoubleClick" qualify="true"/> method is called and it raises the <see cref="System.Windows.Forms.Control.DoubleClick" qualify="true"/>
event. However, the control can call <see cref="System.Windows.Forms.Control.OnClick"/> or <see cref="System.Windows.Forms.Control.OnDoubleClick"/>
directly regardless of the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/> and <see cref="System.Windows.Forms.ControlStyles.StandardDoubleClick"/> bit values.
For more information on control click and double click behaviors, see
the <see cref="System.Windows.Forms.Control.Click" qualify="true"/> and <see cref="System.Windows.Forms.Control.DoubleClick" qualify="true"/>
topics.</para>
			<note type="inheritinfo">
   Inheriting from a
   standard Windows Forms control and changing the <see cref="System.Windows.Forms.ControlStyles.StandardClick"/> or <see cref="System.Windows.Forms.ControlStyles.StandardDoubleClick"/>
   bit values to <see langword="true"/> can cause unexpected behavior
   or can have no effect at all if the control does not support the <see cref="System.Windows.Forms.Control.Click"/> or <see cref="System.Windows.Forms.Control.DoubleClick"/> events.
</note>
		</remarks>
		<example>
			<para>The following example enables double-buffering on a 
   <see cref="System.Windows.Forms.Form"/> and updates the 
      styles to reflect the changes. </para>
			<codelink SampleID="Windows.Forms.ControlMembers6 " SnippetID="3"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.SetStyle" qualify="true"/>
		<seealso cref="System.Windows.Forms.Control.GetStyle" qualify="true"/>
		<keyword term="style"/>
		<keyword term="behavior"/>
	</doc>
</docs>
