<docs>
	<doc for="TextBox">
		<summary>
			<para>Represents
       a Windows text box control.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.TextBox"/>
 control allows the user to enter text in an
 application. This control has additional functionality that is not found in the
 standard Windows text box control, including multiline editing and password character
 masking.</para>
			<para>Typically, a <see cref="System.Windows.Forms.TextBox"/> control is used to display,
 or accept as input, a single line of text. You can use the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> and <see cref="System.Windows.Forms.TextBox.ScrollBars"/> properties to enable multiple lines of
 text to be displayed or entered. Set the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/> and <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>
 properties to <see langword="true"/> to allow greater text manipulation in a
 multiline <see cref="System.Windows.Forms.TextBox"/>
 control.</para>
			<para>You can limit the amount of text entered into
    a <see cref="System.Windows.Forms.TextBox"/> control by setting the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/>
    property to a specific number of characters. <see cref="System.Windows.Forms.TextBox"/>
    controls can
    also be used to accept passwords and other sensitive information. You can use
    the <see cref="System.Windows.Forms.TextBox.PasswordChar"/> property to mask characters entered in a single-line version of the control.</para>
			<para>To restrict text from being entered in a <see cref="System.Windows.Forms.TextBox"/> control, you can create an event handler for 
 the <see cref="System.Windows.Forms.Control.KeyDown"/> event in order to
 validate each character entered in the control. You can also restrict all
 entry of data in a <see cref="System.Windows.Forms.TextBox"/> control by setting the <see cref="System.Windows.Forms.TextBoxBase.ReadOnly"/> property to <see langword="true"/>
 .</para>
			<note type="note">
    Most of the functionality of the
 <see cref="System.Windows.Forms.TextBox"/> 
 control is inherited from the <see cref="System.Windows.Forms.TextBoxBase"/> class.
 </note>
		</remarks>
		<example>
			<para>The following example creates a multiline <see cref="System.Windows.Forms.TextBox"/> control
    with vertical scroll bars. This example uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/>
    properties to make the multiline
    text box control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.TextBoxBase"/>
	</doc>
	<doc for="TextBox.acceptsReturn">
		<summary>
     Controls whether or not the edit box consumes/respects ENTER key
     presses.  While this is typically desired by multiline edits, this
     can interfere with normal key processing in a dialog.
 </summary>
	</doc>
	<doc for="TextBox.passwordChar">
		<summary>
     Indicates what the current special password character is.  This is
     displayed instead of any other text the user might enter.
 </summary>
	</doc>
	<doc for="TextBox.characterCasing">
		<summary>
     Controls whether or not the case of characters entered into the edit
     box is forced to a specific case.
 </summary>
	</doc>
	<doc for="TextBox.scrollBars">
		<summary>
     Controls which scrollbars appear by default.
 </summary>
	</doc>
	<doc for="TextBox.textAlign">
		<summary>
     Controls text alignment in the edit box.
 </summary>
	</doc>
	<doc for="TextBox.TextBox">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.TextBox"/>
 class.</para>
		</summary>
		<remarks>
			<para>The parent container control defines the color and
       font settings for the <see cref="System.Windows.Forms.TextBox"/>
       .</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of
       the <see cref="System.Windows.Forms.TextBox"/> control and assigns a string to the
       control's <see cref="System.Windows.Forms.TextBoxBase.Text"/> property.</para>
			<codelink SampleID="Classic TextBox.TextBox Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBox.CharacterCasing">
		<summary>
			<para>Gets or sets whether the <see cref="System.Windows.Forms.TextBox"/> control
    modifies the case of characters as they are typed.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.CharacterCasing"/> enumeration values that specifies whether
    the <see cref="System.Windows.Forms.TextBox"/>
    control
    modifies the case of characters. The default is
 <see langword="CharacterCasing.Normal"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">A value that is not within the range of valid values for the enumeration was assigned to the property.</exception>
		<remarks>
			<para>You can use the <see cref="System.Windows.Forms.TextBox.CharacterCasing"/>
 property to change the case of characters as required by your application. For
 example, you could change the case of all characters entered in
 a <see cref="System.Windows.Forms.TextBox"/>
 control used
 for password entry to uppercase or lowercase to enforce a policy for
 passwords.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.TextBox"/> control that is used to accept a password. This
    example uses the <see cref="System.Windows.Forms.TextBox.CharacterCasing"/> property to change all characters typed to uppercase and the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/>
    property to restrict the password length to eight characters. This example also uses
    the <see cref="System.Windows.Forms.TextBox.TextAlign"/>
    property to center the password in the <see cref="System.Windows.Forms.TextBox"/>
    control.</para>
			<codelink SampleID="Classic TextBox.CharacterCasing Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.CharacterCasing"/>
	</doc>
	<doc for="TextBox.CreateParams">
		<internalonly/>
		<summary>
			<para>
       Returns the parameters needed to create the handle. Inheriting classes
       can override this to provide extra functionality. They should not,
       however, forget to call base.getCreateParams() first to get the struct
       filled up with the basic info.
    </para>
		</summary>
		<seealso cref="System.Windows.Forms.CreateParams"/>
	</doc>
	<doc for="TextBox.PasswordChar">
		<summary>
			<para>Gets or sets the character used to mask characters of a 
       password in a single-line <see cref="System.Windows.Forms.TextBox"/>
       control.</para>
		</summary>
		<value>
			<para>The character used to mask characters entered in a single-line <see cref="System.Windows.Forms.TextBox"/> control. Set the 
    value of this property to 0 (character value) if you do not
    want the control to mask characters as they are typed. Equals 0 (character value)
    by default.</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property is set to 
 <see langword="true"/> 
 , setting the <see cref="System.Windows.Forms.TextBox.PasswordChar"/> property has no visual effect.
 When the <see cref="System.Windows.Forms.TextBox.PasswordChar"/>
 property is set to <see langword="true"/>
 , cut, copy, and paste actions in the
 control using the keyboard are not allowed, regardless of whether
 the <see cref="System.Windows.Forms.TextBoxBase.Multiline"/> property is set to <see langword="true"/> or
 <see langword="false"/> 
 .</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.TextBox"/> control that is used to accept a password. This example uses the <see cref="System.Windows.Forms.TextBox.CharacterCasing"/> property to change all characters typed to uppercase and the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/> property to restrict the password length to eight characters. This example also uses the <see cref="System.Windows.Forms.TextBox.TextAlign"/> property to center the password in the <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic TextBox.CharacterCasing Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBox.ScrollBars">
		<summary>
			<para>Gets or sets which scroll bars should
       appear in a multiline <see cref="System.Windows.Forms.TextBox"/>
       control.</para>
		</summary>
		<value>
			<para>On of the <see cref="System.Windows.Forms.ScrollBars"/> enumeration values that 
    indicates whether a multiline <see cref="System.Windows.Forms.TextBox"/>
    control appears with no scroll bars, a
    horizontal scroll bar, a vertical scroll bar, or both. The default is
 <see langword="ScrollBars.None"/> .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">A value that is not within the range of valid values for the enumeration was assigned to the property.</exception>
		<remarks>
			<para>Horizontal scroll bars will not be shown if
       the <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/>
       property is set to <see langword="true"/>, regardless
       of the value of the <see cref="System.Windows.Forms.TextBox.ScrollBars"/> property.</para>
		</remarks>
		<example>
			<para>The following example creates a multiline <see cref="System.Windows.Forms.TextBox"/> control with vertical
    scroll bars. This example also uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline
 <see cref="System.Windows.Forms.TextBox"/> 
 control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBox.ScrollBars Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.ScrollBars"/>
	</doc>
	<doc for="TextBox.TextAlign">
		<summary>
			<para>Gets or sets how text is
       aligned in a <see cref="System.Windows.Forms.TextBox"/>
       control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.HorizontalAlignment"/> enumeration values 
    that specifies how text is
    aligned in the control. The default is
 <see langword="HorizontalAlignment.Left"/> .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">A value that is not within the range of valid values for the enumeration was assigned to the property.</exception>
		<remarks>
			<para>You can use this property to align the text within a 
    <see cref="System.Windows.Forms.TextBox"/> to match the layout of text on your form. For 
       example, if your controls are all located on the right side of the form, you can
       set the <see cref="System.Windows.Forms.Label.TextAlign"/> property to
    <see langword="HorizontalAlignment.Right"/> , and the text will be aligned with the 
       right side of the control instead of the default left
       alignment.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.TextBox"/> control that is used to accept a password. This example uses the <see cref="System.Windows.Forms.TextBox.CharacterCasing"/> property to change all characters typed to uppercase and the <see cref="System.Windows.Forms.TextBoxBase.MaxLength"/> property to restrict the password length to eight characters. This example also uses the <see cref="System.Windows.Forms.TextBox.TextAlign"/> property to center the password in the <see cref="System.Windows.Forms.TextBox"/> control.</para>
			<codelink SampleID="Classic TextBox.CharacterCasing Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.HorizontalAlignment"/>
		<keyword term="text, alignment"/>
	</doc>
	<doc for="TextBox.TextAlignChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.TextBox.TextAlign"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBox.OnTextAlignChanged"/>
		<seealso cref="System.Windows.Forms.TextBox.TextAlign"/>
		<keyword term="text, alignment"/>
	</doc>
	<doc for="TextBox.IsInputKey">
		<internalonly/>
		<summary>
			<para>
       Overridden to handle RETURN key.
    </para>
		</summary>
		<keyword term=""/>
	</doc>
	<doc for="TextBox.OnHandleCreated">
		<internalonly/>
		<summary>
    Overridden to update the newly created handle with the settings of the
    PasswordChar properties.
 </summary>
	</doc>
	<doc for="TextBox.OnTextAlignChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.TextBox.TextAlignChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.TextBox.OnTextAlignChanged"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.TextBox.OnTextAlignChanged"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.TextBox.OnTextAlignChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.TextBox.TextAlignChanged"/>
		<seealso cref="System.Windows.Forms.TextBox.TextAlign"/>
	</doc>
	<doc for="TextBox.WndProc">
		<internalonly/>
		<summary>
    The edits window procedure.  Inheritng classes can override this
    to add extra functionality, but should not forget to call
    base.wndProc(m); to ensure the combo continues to function properly.
 </summary>
		<param name="m">
    A Windows Message Object.
 </param>
	</doc>
	<doc for="TextBox.OnResize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBox.DefaultImeMode">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="TextBox.OnGotFocus">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBox.OnMouseUp">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBox.AcceptsReturn">
		<summary>
			<para>Gets or sets a value indicating whether pressing ENTER
      in a multiline <see cref="System.Windows.Forms.TextBox"/>
      control creates a new line of text in the control or activates the default button
      for the form.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the ENTER
   key creates a new line of text in a multiline version of the
   control; <see langword="false"/> if the ENTER key activates the default
   button for the form. The default is <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>If the value of this property is <see langword="false"/>, the user must press
   CTRL+ENTER to create a new line in a multiline <see cref="System.Windows.Forms.TextBox"/> control.
   If there is no default button for the form, then the ENTER key will always create a new
   line of text in the control, no matter what the value of this property.</para>
		</remarks>
		<example>
			<para>The following example creates a multiline <see cref="System.Windows.Forms.TextBox"/> control
   with vertical scroll bars. This example uses the <see cref="System.Windows.Forms.TextBoxBase.AcceptsTab"/>, <see cref="System.Windows.Forms.TextBox.AcceptsReturn"/>, and <see cref="System.Windows.Forms.TextBoxBase.WordWrap"/> properties to make the multiline text box
   control useful for creating text documents.</para>
			<codelink SampleID="Classic TextBox.AcceptsReturn Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TextBox.Text">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="TextBox.SelectionLength">
		<nodoc/>
	</doc>
</docs>
