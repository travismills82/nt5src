<docs>
	<doc for="FileDialog.FileDialog">
		<summary>
			<para>
       In an inherited class,
       initializes a new instance of the <see cref="System.Windows.Forms.FileDialog"/>
       class.
    </para>
		</summary>
		<remarks>
			<para>
       When you create an instance of <see cref="System.Windows.Forms.FileDialog"/>,
       the following read/write properties are initialized.
    </para>
			<list type="table">
				<listheader>
					<term>
             Property
          </term>
					<description>
             Initial Value
          </description>
				</listheader>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.AddExtension"/>
					</term>
					<description>
						<see langword="true"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.CheckFileExists"/>
					</term>
					<description>
						<see langword="false"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.CheckPathExists"/>
					</term>
					<description>
						<see langword="true"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.DefaultExt"/>
					</term>
					<description>
    empty
    string ("")
 </description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.DereferenceLinks"/>
					</term>
					<description>
						<see langword="true"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.FileName"/>
					</term>
					<description>
    empty string
 </description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.FilterIndex"/>
					</term>
					<description>
    1
 </description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.InitialDirectory"/>
					</term>
					<description>
    empty string
 </description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.RestoreDirectory"/>
					</term>
					<description>
						<see langword="false"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.ShowHelp"/>
					</term>
					<description>
						<see langword="false"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.Title"/>
					</term>
					<description>
    empty string
 </description>
				</item>
				<item>
					<term>
						<see cref="System.Windows.Forms.FileDialog.ValidateNames"/>
					</term>
					<description>
						<see langword="true"/>
					</description>
				</item>
			</list>
			<para>
    You can change the value for any of these properties through a separate call
    to the property.
 </para>
		</remarks>
	</doc>
	<doc for="FileDialog.FilterExtensions">
		<summary>
     Extracts the file extensions specified by the current file filter into
     an array of strings.  None of the extensions contain .'s, and the 
     default extension is first.
 </summary>
	</doc>
	<doc for="FileDialog.Instance">
		<summary>
			<para>
       Gets the Win32 instance handle for the application.
    </para>
		</summary>
		<value>
			<para>
       A Win32 instance handle for the application.
    </para>
		</value>
	</doc>
	<doc for="FileDialog.Options">
		<summary>
			<para>
       Gets the Win32 common Open File Dialog OFN_* option flags.
    </para>
		</summary>
		<value>
			<para>
       the Win32 common Open File Dialog OFN_* option flags.
    </para>
		</value>
	</doc>
	<doc for="FileDialog.DoFileOk">
		<summary>
     Processes the CDN_FILEOK notification.
 </summary>
	</doc>
	<doc for="FileDialog.GetMultiselectFiles">
		<summary>
     Extracts the filename(s) returned by the file dialog.
 </summary>
	</doc>
	<doc for="FileDialog.GetOption">
		<summary>
     Returns the state of the given option flag.
 </summary>
	</doc>
	<doc for="FileDialog.MakeFilterString">
		<summary>
     Converts the given filter string to the format required in an OPENFILENAME_I structure.
 </summary>
	</doc>
	<doc for="FileDialog.ProcessFileNames">
		<summary>
     Processes the filenames entered in the dialog according to the settings of the "addExtension", "checkFileExists", "createPrompt", and
     "overwritePrompt" properties.
 </summary>
	</doc>
	<doc for="FileDialog.PromptFileNotFound">
		<summary>
			<para>Prompts the user with a <see cref="System.Windows.Forms.MessageBox"/> when a file does not exist.</para>
		</summary>
		<param name="fileName">The name of the file to search for.</param>
		<remarks>
			<para>This method is invoked when <see cref="System.Windows.Forms.FileDialog.CheckFileExists"/> is <see langword="true "/>and the specified file does not exist.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.FileDialog.CheckFileExists"/>
	</doc>
	<doc for="FileDialog.Reset">
		<summary>
			<para>Resets all properties to their default values.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
       When overriding <see cref="System.Windows.Forms.FileDialog.Reset"/> in a derived class, be sure
       to call the base class's <see cref="System.Windows.Forms.CommonDialog.Reset"/> method.
    </note>
		</remarks>
	</doc>
	<doc for="FileDialog.RunDialog">
		<summary>
			<para>Specifies a common dialog box.</para>
		</summary>
		<param name="hWndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
		<returns>
			<para><see langword="true"/> if the file could be opened; otherwise, 
 <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method provides an implementation of <see cref="System.Windows.Forms.CommonDialog.RunDialog"/>, and is invoked when the user of a file 
    dialog invokes <see cref="System.Windows.Forms.CommonDialog.ShowDialog"/>.</para>
			<para>In the derived classes <see cref="System.Windows.Forms.OpenFileDialog"/> and <see cref="System.Windows.Forms.SaveFileDialog"/> 
 a invalid file name <see cref="System.Exception"/> can be raised.</para>
		</remarks>
	</doc>
	<doc for="FileDialog.RunFileDialog">
		<summary>
     Implements the actual call to GetOPENFILENAME_I or GetSaveFileName.
 </summary>
	</doc>
	<doc for="FileDialog.SetOption">
		<summary>
     Sets the given option to the given boolean value.
 </summary>
	</doc>
	<doc for="FileDialog.ToString">
		<summary>
			<para>
       Provides a string version of this Object.
    </para>
		</summary>
		<returns>
			<para>
       A string version of this Object.
    </para>
		</returns>
	</doc>
	<doc for="FileDialog.CharBuffer">
		<summary>
		</summary>
	</doc>
	<doc for="FileDialog.AnsiBuffer">
		<summary>
		</summary>
	</doc>
	<doc for="FileDialog.UnicodeBuffer">
		<summary>
		</summary>
	</doc>
	<doc for="FileDialog.CheckFileExists">
		<summary>
			<para> Gets or sets a value indicating whether
      the dialog box displays a warning if the user specifies a file name that does not exist.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the dialog box displays a warning if the
   user specifies a file name that does not exist; otherwise, <see langword="false"/>. The default value is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The default value is <see langword="true"/> for an inheriting <see cref="System.Windows.Forms.OpenFileDialog"/>
and <see langword="false"/> for an inheriting <see cref="System.Windows.Forms.SaveFileDialog"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">to display a warning if the file already exists. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
		<seealso cref="System.Windows.Forms.FileDialog.CheckPathExists"/>
	</doc><doc for="FileDialog.CheckPathExists">
		<summary>
			<para> Gets or sets a value indicating whether the
      dialog box displays a warning if the user specifies a path that does not exist.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the dialog box displays a warning when the
   user specifies a path that does not exist; otherwise, <see langword="false"/>. The default value is
<see langword="true"/>.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">to display a warning if the user specifies a path that already exists. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
		<seealso cref="System.Windows.Forms.FileDialog.CheckFileExists"/>
	</doc><doc for="FileDialog.DereferenceLinks">
		<summary>
			<para> Gets or sets a value
      indicating whether the dialog box returns the location of the file referenced by the shortcut or
      whether it returns the location of the shortcut (.lnk).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the dialog box returns the location
   of the file referenced by the shortcut; otherwise, <see langword="false"/>. The default value is
<see langword="true"/>. </para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">to set the property. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
	</doc><doc for="FileDialog.EventFileOk"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="FileDialog.OnFileOk">
		<summary>
			<para> Raises the <see cref="System.Windows.Forms.FileDialog.FileOk"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
		<seealso cref="System.Windows.Forms.FileDialog.FileOk"/>
	</doc><doc for="FileDialog.ValidateNames">
		<summary>
			<para> Gets or sets a value indicating whether the dialog box accepts only valid Win32 file names.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the dialog box accepts only valid Win32 file names; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>If the edit control contains anything but spaces when the 
      user clicks <see langword="OK"/> , the dialog
      returns the file name, whether it is valid or not. No default extension is added to the text.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">to set the property. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
	</doc><doc for="FileDialog.AddExtension">
		<summary>
			<para> Gets or sets a value indicating whether the
      dialog box automatically adds an extension to a
      file name if the user omits the extension.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the dialog box adds an extension to
   a file name if the user omits the extension; otherwise, <see langword="false"/>. The default value is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>The extension added to a file name depends on the
      currently selected file filter and the value of the <see cref="System.Windows.Forms.FileDialog.CheckFileExists"/> property.</para>
			<para>If the <see cref="System.Windows.Forms.FileDialog.CheckFileExists"/> property is <see langword="true"/>, the dialog box adds the first extension from
   the current file filter that matches an existing file. If no files match the
   current file filter, the dialog box adds the extension specified in the <see cref="System.Windows.Forms.FileDialog.DefaultExt"/> property.</para>
			<para>If the <see cref="System.Windows.Forms.FileDialog.CheckFileExists"/> property is <see langword="false"/>, the dialog box adds the first valid file name extension
from the current file filter. If the current file filter contains no valid
file name extensions, the dialog box adds the extension specified in the
<see cref="System.Windows.Forms.FileDialog.DefaultExt"/> property. </para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for adding an extension if the user omits it. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
		<seealso cref="System.Windows.Forms.FileDialog.Filter"/>
		<seealso cref="System.Windows.Forms.FileDialog.FilterIndex"/>
	</doc><doc for="FileDialog.DefaultExt">
		<summary>
			<para> Gets or sets the default file name extension.</para>
		</summary>
		<value>
			<para>The default file name extension. The returned string
      does not include the period (.). The default value is an
      empty string("").</para>
		</value>
	</doc><doc for="FileDialog.HookProc">
		<nodoc/>
		<summary>
			<para>Defines the common dialog box hook procedure that is overridden to add specific functionality to the file dialog box.</para>
		</summary>
		<param name="hWnd">The handle to the dialog box window.</param>
		<param name="msg">The message received by the dialog box.</param>
		<param name="wparam">Additional information about the message.</param>
		<param name="lparam">Additional information about the message.</param>
		<returns>
			<para> Returns zero if the default dialog box procedure processes the message; returns a nonzero value if the default dialog box
      procedure ignores the message.
      </para>
		</returns>
		<remarks>
			<para> A hook procedure allows the user to connect or insert other routines into a routine or application for the
      purpose of debugging or enhancing functionality.
      </para>
			<para> By default, the hook procedure centers the dialog box on the screen in response to a WM_INITDIALOG message.
      </para>
			<note type="inheritinfo">
      When overriding <see cref="System.Windows.Forms.FileDialog.HookProc"/> in a derived class, be sure to call the base
      class's <see cref="System.Windows.Forms.CommonDialog.HookProc"/> method.
      
   </note>
		</remarks>
	</doc>
	<doc for="FileDialog.FileOk">
		<summary>
			<para>Occurs when the user clicks on the <see langword="Open"/> 
or <see langword="Save"/> button on a file dialog box.</para>
		</summary>
		<remarks>
			<para>For information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.FileDialog.OnFileOk"/>
	</doc>
	<doc for="FileDialog.FileNames">
		<summary>
			<para> Gets the file
      names of all selected files in the dialog box.</para>
		</summary>
		<value>
			<para>An array of type <see cref="System.String"/> , containing the file names of all selected files in
   the dialog box.</para>
		</value>
		<remarks>
			<para>Each file name includes both the file
      path and the extension. If no files are selected, this method returns an empty
      array.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">to get the file names. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess" qualify="true"/> .</permission>
		<seealso cref="System.Windows.Forms.FileDialog.FileName"/>
	</doc>
	<doc for="FileDialog.FileName">
		<summary>
			<para> Gets or sets a string containing
      the file name selected in the file dialog box.</para>
		</summary>
		<value>
			<para>
      The file name selected in the
      file dialog box. The default value is an empty string ("").</para>
		</value>
		<remarks>
			<para>The file name includes both the file path and the extension. If no files are
      selected, this method returns an empty string ("").</para>
			<para> This method can return only the name of one selected file. If you want
      to return an array containing the names of all selected files in
      a multiple-selection dialog box, use <see cref="System.Windows.Forms.FileDialog.FileNames"/>
      .</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">to get or set the file name. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
		<seealso cref="System.Windows.Forms.FileDialog.FileNames"/>
	</doc>
	<doc for="FileDialog.Title">
		<summary>
			<para> Gets or sets the file dialog box title.</para>
		</summary>
		<value>
			<para> The file dialog box title. The default value is an empty string ("").</para>
		</value>
		<remarks>
			<para>The string is placed in the title bar of the dialog box. If the title is an empty string, the system uses a default title, which is either "Save As" or "Open".</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">to set the file dialog box title. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
	</doc>
	<doc for="FileDialog">
		<summary>
			<para>Displays a dialog box from which the user can select a file.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.FileDialog"/> is
   an abstract class, and cannot be created directly.
   Additionally, you cannot inherit from this class. To create a dialog box to select or save
   a file, use <see cref="System.Windows.Forms.OpenFileDialog"/> or <see cref="System.Windows.Forms.SaveFileDialog"/>.</para>
			<para><see cref="System.Windows.Forms.FileDialog"/> is a
modal dialog box;
therefore, when shown, it blocks the rest of the application until the user
has chosen a file. When a dialog box is displayed modally, no input (keyboard or
mouse click) can occur except to objects on the dialog box. The program
must hide or close the dialog box (usually in
response to some user action) before input to the calling program can occur.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.OpenFileDialog"/> implementation of <see cref="System.Windows.Forms.FileDialog"/> and 
   illustrates creating, setting of properties, and showing the dialog box. The example uses the
<see cref="System.Windows.Forms.CommonDialog.ShowDialog"/> method to display the dialog 
   box and return the <see cref="System.Windows.Forms.DialogResult"/> . The
   example assumes a form with a <see cref="System.Windows.Forms.Button"/> placed on it and
   the <see cref="System.IO"/> namespace added to it.</para>
			<codelink SampleID="Classic OpenFileDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.CommonDialog"/>
		<seealso cref="System.Windows.Forms.OpenFileDialog"/>
		<seealso cref="System.Windows.Forms.SaveFileDialog"/>
	</doc>
	<doc for="FileDialog.Filter">
		<summary>
			<para> Gets or sets the current file name filter string,
      which determines the choices that appear in the "Save as file type" or
      "Files of type" box in the dialog box.</para>
		</summary>
		<value>
			<para> The file filtering options
      available in the dialog box.</para>
		</value>
		<exception cref="System.ArgumentException"><paramref name="Filter"/> format is invalid.</exception>
		<remarks>
			<para>For each filtering option, the filter string contains a description
      of the filter, followed by the vertical bar (|) and the filter
      pattern. The strings for different filtering options are separated by the vertical
      bar.</para>
			<para>The
      following is an example of a filter string: "Text files (*.txt)|*.txt|All files
      (*.*)|*.*"</para>
			<para> You can add several filter patterns to a filter by separating the
      file types with semicolons. For example: "Image
      Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*"</para>
			<para> Use the <see cref="System.Windows.Forms.FileDialog.FilterIndex"/> property to set which filtering option is shown
   first to the user.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.OpenFileDialog"/> implementation of <see cref="System.Windows.Forms.FileDialog"/> and 
   illustrates creating, setting of properties, and showing the dialog box. The example uses the
<see cref="System.Windows.Forms.FileDialog.Filter"/> and <see cref="System.Windows.Forms.FileDialog.FilterIndex"/> properties to provide a list
   of filters for the user. The
   example assumes a form with a <see cref="System.Windows.Forms.Button"/> placed on it and
   the <see cref="System.IO"/> namespace added to it.</para>
			<codelink SampleID="Classic OpenFileDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FileDialog.CheckFileExists"/>
		<seealso cref="System.Windows.Forms.FileDialog.FilterIndex"/>
	</doc>
	<doc for="FileDialog.FilterIndex">
		<summary>
			<para> Gets or sets the index of the filter currently selected in the file dialog box.</para>
		</summary>
		<value>
			<para> A value containing the
      index of the filter currently selected in the file dialog box. The default value
      is 1.</para>
		</value>
		<remarks>
			<para> Use
      the <see cref="System.Windows.Forms.FileDialog.FilterIndex"/>
      property to set which filtering option is shown first to the user. You can
      also use the value of <see cref="System.Windows.Forms.FileDialog.FilterIndex"/> after showing the file dialog to perform special file operations depending upon the
      filter chosen.</para>
			<note type="note">
      The
      index value of the first filter entry is
      1.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.OpenFileDialog"/> implementation of <see cref="System.Windows.Forms.FileDialog"/> and 
   illustrates creating, setting of properties, and showing the dialog box. The example uses the
<see cref="System.Windows.Forms.FileDialog.Filter"/> and <see cref="System.Windows.Forms.FileDialog.FilterIndex"/> properties to provide a list
   of filters for the user. The
   example assumes a form with a <see cref="System.Windows.Forms.Button"/> placed on it and
   the <see cref="System.IO"/> namespace added to it.</para>
			<codelink SampleID="Classic OpenFileDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FileDialog.CheckFileExists"/>
		<seealso cref="System.Windows.Forms.FileDialog.Filter"/>
	</doc>
	<doc for="FileDialog.InitialDirectory">
		<summary>
			<para> Gets or sets the initial directory displayed by the file dialog
      box.</para>
		</summary>
		<value>
			<para> The initial directory displayed
      by the file dialog box. The default is an empty string ("").</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">to set the initial directory. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.OpenFileDialog"/> implementation of <see cref="System.Windows.Forms.FileDialog"/> and 
   illustrates creating, setting of properties, and showing the dialog box. The example uses the
<see cref="System.Windows.Forms.FileDialog.InitialDirectory"/> property to set what the initial directory is when the dialog box is displayed to the user. The
   example assumes a form with a <see cref="System.Windows.Forms.Button"/> placed on it and
   the <see cref="System.IO"/> namespace added to it.</para>
			<codelink SampleID="Classic OpenFileDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FileDialog.RestoreDirectory"/>
	</doc>
	<doc for="FileDialog.RestoreDirectory">
		<summary>
			<para> Gets or sets a value indicating whether the dialog box restores the current directory before
      closing.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the dialog box restores the current directory to its original
   value if the user changed the directory while searching for files; otherwise,
<see langword="false"/>. The default value is
<see langword="false"/>. </para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">to set the property. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/>.</permission>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.OpenFileDialog"/> implementation of <see cref="System.Windows.Forms.FileDialog"/> and 
   illustrates creating, setting of properties, and showing the dialog box. The example uses the
<see cref="System.Windows.Forms.FileDialog.RestoreDirectory"/> property to ensure that the current directory is restored when the dialog box is closed. The
   example assumes a form with a <see cref="System.Windows.Forms.Button"/> placed on it and
   the <see cref="System.IO"/> namespace added to it.</para>
			<codelink SampleID="Classic OpenFileDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FileDialog.InitialDirectory"/>
	</doc>
	<doc for="FileDialog.ShowHelp">
		<summary>
			<para> Gets or sets a value indicating whether the <SpecialLocalizableItem kind="UIElement">Help</SpecialLocalizableItem> 
   button is displayed in the file dialog.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the dialog box includes a help button; otherwise, <see langword="false."/> The default value is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Windows.Forms.Control.HelpRequested"/> event is raised when the user clicks
   the <see langword="Help"/> button.</para>
		</remarks>
	</doc>
</docs>
