<docs>
	<doc for="Form.autoScaleBaseSize">
		<summary>
     AutoScale base size
 </summary>
	</doc>
	<doc for="Form.formState">
		<summary>
     Bit vector of various properties.
 </summary>
	</doc>
	<doc for="Form.acceptButton">
		<summary>
     Current acceptButton. Do not directly edit this value. Use the
     get/setAcceptButton functions.
 </summary>
		<seealso cref="AcceptButton"/>
	</doc>
	<doc for="Form.cancelButton">
		<summary>
     Current cancelButton. Do not directly edit this value. Use the
     get/setCancelButton functions.
 </summary>
		<seealso cref="CancelButton"/>
	</doc>
	<doc for="Form.defaultButton">
		<summary>
     Current defaultButton. Do not directly edit this value. Use the
     get/setDefaultButton functions.
 </summary>
		<seealso cref="SetDefaultButton"/>
	</doc>
	<doc for="Form.owner">
		<summary>
     Form that owns this form. This value will be set by the owner when
     this form becomes owned. Do not directly edit this value.
 </summary>
		<seealso cref="Owner"/>
		<seealso cref="AddOwnedForm"/>
	</doc>
	<doc for="Form.ownedForms">
		<summary>
     Array of all owned forms. Do not directly edit this value. Use the
     Add/RemoveOwnedForm functions.
 </summary>
		<seealso cref="AddOwnedForm"/>
		<seealso cref="RemoveOwnedForm"/>
	</doc>
	<doc for="Form.ownedFormsCount">
		<summary>
     Number of owned forms. Do not directly edit this value. Use the
     Add/RemoveOwnedForm functions.
 </summary>
		<seealso cref="AddOwnedForm"/>
		<seealso cref="RemoveOwnedForm"/>
	</doc>
	<doc for="Form.icon">
		<summary>
     Icon that will be displayed on the system menu for the form. Do not
     directly edit this value. Use the get/setIcon functions.
 </summary>
		<seealso cref="Icon"/>
	</doc>
	<doc for="Form.mainMenu">
		<summary>
		</summary>
	</doc>
	<doc for="Form.dummyMenu">
		<summary>
		</summary>
	</doc>
	<doc for="Form.curMenu">
		<summary>
		</summary>
	</doc>
	<doc for="Form.mergedMenu">
		<summary>
		</summary>
	</doc>
	<doc for="Form.updateMenuHandlesSuspendCount">
		<summary>
     Count of number of calls to SuspendUpdateMenuHandles that have not
     yet been balanced with calls to ResumeUpdateMenuHandles.
 </summary>
		<seealso cref="ResumeUpdateMenuHandles"/>
	</doc>
	<doc for="Form.updateMenuHandlesDeferred">
		<summary>
     Indicates whether updateMenuHandles needs to be called when the
     updateMenuHandlesSuspendCount returns to zero.
 </summary>
		<seealso cref="ResumeUpdateMenuHandles"/>
	</doc>
	<doc for="Form.active">
		<summary>
     Indicates whether this form is currently active. Do not modify this
     value directly, use get/setActive
 </summary>
		<seealso cref="Active"/>
	</doc>
	<doc for="Form.dialogResult">
		<summary>
     Result returned when this form is invoked as a modal dialog. Do not
     directly edit this value. Use the get/setDialogResult functions.
 </summary>
		<seealso cref="DialogResult"/>
	</doc>
	<doc for="Form.ctlClient">
		<summary>
     MDI Client area control. This is only non-null if the form
     is an MDIContainer.
 </summary>
	</doc>
	<doc for="Form.formMdiParent">
		<summary>
     MDI Parent form. Do not directly edit this value. Use the
     get/setMDIParent functions.
 </summary>
		<seealso cref="MdiParent"/>
	</doc>
	<doc for="Form.activeMdiChild">
		<summary>
     Current MdiChild window that is active. Do not directly edit
     this value.
 </summary>
	</doc>
	<doc for="Form.useMdiChildProc">
		<summary>
     Determines if the DefMDIChildProc needs to be called.
 </summary>
	</doc>
	<doc for="Form.dialogOwner">
		<summary>
     We need to track the owner of any modal dialog so we can parent it
     correctly.
 </summary>
	</doc>
	<doc for="Form.securitySystemMenuItem">
		<summary>
     Menu item for the "About Security" system menu item... not a real MenuItem.
 </summary>
	</doc>
	<doc for="Form.Active">
		<summary>
     Retrieves true if this form is currently active.
 </summary>
	</doc>
	<doc for="Form.AllowTransparency">
		<summary>
			<para>Gets or sets a value indicating whether the opacity of the form can be adjusted.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the opacity of the form can be changed; otherwise,<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is automatically set to <see langword="true"/> if the Opacity is changed. When the opacity 
       of a form is set using the Opacity property, the form will layer objects on the form. If you set the <see cref="System.Windows.Forms.Form.AllowTransparency"/> property to <see langword="false"/> the
       form will not be in layered mode which will improve the display performance of the form. </para>
		</remarks>
	</doc>
	<doc for="Form.CreateParams">
		<summary>
    Retrieves the CreateParams used to create the window.
    If a subclass overrides this function, it must call the base implementation.
 </summary>
		<seealso cref="Control.CreateParams"/>
	</doc>
	<doc for="Form.DefaultIcon">
		<summary>
     The default icon used by the Form. This is the standard "WinForms" icon.
 </summary>
	</doc>
	<doc for="Form.DefaultLockedIcon">
		<summary>
     The default icon used by the Form. This is the standard "WinForms" icon.
 </summary>
	</doc>
	<doc for="Form.DefaultUnlockedIcon">
		<summary>
     The default icon used by the Form. This is the standard "WinForms" icon.
 </summary>
	</doc>
	<doc for="Form.MaximumSizeChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Form.MaximumSize"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MaximumSize"/>
		<seealso cref="System.Windows.Forms.Form.OnMaximumSizeChanged"/>
	</doc>
	<doc for="Form.TabIndex">
		<summary>
		</summary>
	</doc>
	<doc for="Form.IsRestrictedWindow">
		<summary>
			<para> Determines if this form should display a warning banner 
       when the form is displayed in an unsecure mode.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the form should display a warning banner; 
 <see langword="false"/>, otherwise. The default is <see langword="true"/>.</para>
		</value>
	</doc>
	<doc for="Form.WindowText">
		<summary>
			<para>
       Gets or sets the text to display in the caption bar of the form.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.String"/> that contains the text to display in the caption bar of
       the form.
    </para>
		</value>
	</doc>
	<doc for="Form.MenuStart">
		<summary>
			<para> Occurs when the menu of a form receives focus.</para>
		</summary>
		<remarks>
			<para>This event is raised when any menu item in the menu is 
       clicked by the user. You can use this event to perform tasks such as enabling
       and disabling controls on the form that should not be accessed by the user when
       the menus are being accessed. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.OnMenuStart"/>
	</doc>
	<doc for="Form.InputLanguageChanged">
		<summary>
			<para>Occurs after the input language of the form has changed.</para>
		</summary>
		<remarks>
			<para>You can use this event to make changes to your form's appearance and text 
       based on changes made to the input language of the form.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/> 
 .</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.InputLanguageChanging"/>
		<seealso cref="System.Windows.Forms.Form.OnInputLanguageChanged"/>
	</doc>
	<doc for="Form.AdjustFormScrollbars">
		<summary>
		</summary>
	</doc>
	<doc for="Form.AdjustSystemMenu">
		<summary>
     This forces the SystemMenu to look like we want.
 </summary>
	</doc>
	<doc for="Form.ApplyAutoScaling">
		<summary>
     This auto scales the form based on the AutoScaleBaseSize.
 </summary>
	</doc>
	<doc for="Form.ApplyClientSize">
		<summary>
     This adjusts the size of the windowRect so that the client rect is the
     correct size.
 </summary>
	</doc>
	<doc for="Form.AssignParent">
		<summary>
			<para>Assigns a new parent control. Sends out the appropriate property change
       notifications for properties that are affected by the change of parent.</para>
		</summary>
		<param name="value">The new parent control.</param>
	</doc>
	<doc for="Form.AxContainerFormCreated">
		<summary>
     Used to notify the AxContainer that the form
     has been created.  This should only be called if
     there is an AX container.
 </summary>
	</doc>
	<doc for="Form.CheckCloseDialog">
		<summary>
     Checks whether a modal dialog is ready to close. If the dialogResult
     property is not DialogResult.NONE, the onClosing and onClosed events
     are fired. A return value of true indicates that both events were
     successfully dispatched and that event handlers did not cancel closing
     of the dialog. User code should never have a reason to call this method.
     It is public only so that the Application class can call it from a
     modal message loop.
 </summary>
	</doc>
	<doc for="Form.AfterControlRemoved">
		<summary>
     Cleans up form state after a control has been removed.
     Package scope for Control
 </summary>
	</doc>
	<doc for="Form.CalcScreenBounds">
		<summary>
		</summary>
	</doc>
	<doc for="Form.DefWndProc">
		<summary>
			<para>Calls the default window proc for the form. If 
       a
       subclass overrides this function,
       it must call the base implementation.
       </para>
		</summary>
		<seealso cref="Control.DefWndProc"/>
	</doc>
	<doc for="Form.FillInCreateParamsBorderIcons">
		<summary>
     Adjusts the window style of the CreateParams to reflect the bordericons.
 </summary>
		<param name="cp">
     CreateParams to modify
 </param>
	</doc>
	<doc for="Form.FillInCreateParamsBorderStyles">
		<summary>
     Adjusts the window style of the CreateParams to reflect the borderstyle.
 </summary>
		<param name="cp">
     CreateParams to modify
 </param>
	</doc>
	<doc for="Form.FillInCreateParamsStartPosition">
		<summary>
     Adjusts the CreateParams to reflect the window bounds and start position.
 </summary>
		<param name="cp">
     CreateParams to modify
 </param>
	</doc>
	<doc for="Form.FillInCreateParamsWindowState">
		<summary>
     Adjusts the Createparams to reflect the window state.
     If a subclass overrides this function, it must call the base implementation.
 </summary>
		<param name="cp">
     CreateParams to modify
 </param>
	</doc>
	<doc for="Form.FocusInternal">
		<summary>
			<para> Sets focus to the Form.</para>
			<para>Attempts to set focus to this Form.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the focus request was successful; otherwise, 
 <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="Form.CenterToParent">
		<summary>
     Centers the dialog to its parent.
 </summary>
	</doc>
	<doc for="Form.CenterToScreen">
		<summary>
     Centers the dialog to the screen. This will first attempt to use
     the owner property to determine the correct screen, then
     it will try the HWND owner of the form, and finally this will
     center the form on the same monitor as the mouse cursor.
 </summary>
	</doc>
	<doc for="Form.InvalidateAll">
		<summary>
     Invalidates all controls on the given control.  This
     is used in situations such as palette changes where we
     need to refresh everything.
 </summary>
		<param name="c">
     The control to begin invalidating.
 </param>
	</doc>
	<doc for="Form.InvalidateMergedMenu">
		<summary>
     Invalidates the merged menu, forcing the menu to be recreated if
     needed again.
 </summary>
	</doc>
	<doc for="Form.OnClosed">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.Closed"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnClosed"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnClosed"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnClosed"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.Closed"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnLoad">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.Load"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnLoad"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnLoad"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnLoad"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.Load"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnMaximizedBoundsChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.MaximizedBoundsChanged"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnMaximizedBoundsChanged"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnMaximizedBoundsChanged"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnMaximizedBoundsChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MaximizedBounds"/>
		<seealso cref="System.Windows.Forms.Form.MaximizedBoundsChanged"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnMaximumSizeChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.MaximumSizeChanged"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnMaximumSizeChanged"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnMaximumSizeChanged"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnMaximumSizeChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MaximumSize"/>
		<seealso cref="System.Windows.Forms.Form.MaximumSizeChanged"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnInputLanguageChanging">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.InputLanguageChanging"/> 
 event.</para>
		</summary>
		<param name="e">The <see cref="System.Windows.Forms.InputLanguageChangingEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnInputLanguageChanging"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnInputLanguageChanging"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnInputLanguageChanging"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.InputLanguageChanging"/>
		<seealso cref="System.Windows.Forms.InputLanguageChangingEventArgs"/>
	</doc>
	<doc for="Form.ActivateMdiChild">
		<summary>
			<para>This function handles the activation of a MDI child form. If a subclass
       overrides this function, it must call base.ActivateMdiChild</para>
		</summary>
		<param name="form">Form that is getting activated</param>
	</doc>
	<doc for="Form.OnMdiChildActivate">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.MdiChildActivate"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnMdiChildActivate"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnMdiChildActivate"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnMdiChildActivate"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MdiChildActivate"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnMenuStart">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.MenuStart"/> 
 event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnMenuStart"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnMenuStart"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnMenuStart"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MenuStart"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnMenuComplete">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.MenuComplete"/> 
 event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnMenuComplete"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnMenuComplete"/> in a derived class, be sure to call the 
    base class's <see cref="System.Windows.Forms.Form.OnMenuComplete"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MenuComplete"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnPaint">
		<summary>
			<para>Raises the Paint event.</para>
		</summary>
	</doc>
	<doc for="Form.OnResize">
		<summary>
			<para>Raises the Resize event.</para>
		</summary>
	</doc>
	<doc for="Form.PerformOnInputLanguageChanged">
		<summary>
     Simulates a InputLanguageChanged event. Used by Control to forward events
     to the parent form.
 </summary>
	</doc>
	<doc for="Form.PerformOnInputLanguageChanging">
		<summary>
     Simulates a InputLanguageChanging event. Used by Control to forward
     events to the parent form.
 </summary>
	</doc>
	<doc for="Form.RecreateHandleCore">
		<summary>
		</summary>
	</doc>
	<doc for="Form.ResumeUpdateMenuHandles">
		<summary>
     Decrements updateMenuHandleSuspendCount. If updateMenuHandleSuspendCount
     becomes zero and updateMenuHandlesDeferred is true, updateMenuHandles
     is called.
 </summary>
		<seealso cref="SuspendUpdateMenuHandles"/>
	</doc>
	<doc for="Form.SetMdiActive">
		<summary>
     Sets the active state of this form.
 </summary>
		<param name="value">
     New value for the active property.
 </param>
	</doc>
	<doc for="Form.SetDefaultButton">
		<summary>
     Sets the defaultButton for the form. The defaultButton is "clicked" when
     the user presses Enter.
 </summary>
		<param name="button">
     Button to treat as the defaultButton
 </param>
	</doc>
	<doc for="Form.ShouldSerializeBackColor">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Form.BackColor"/> property should be 
    persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed 
    from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Form"/>class.</para>
		</remarks>
	</doc>
	<doc for="Form.ShouldSerializeForeColor">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Control.ForeColor"/> property should be 
    persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Form"/>class.</para>
		</remarks>
	</doc>
	<doc for="Form.ShouldSerializeIcon">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Form.Icon"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the 
    <see cref="System.Windows.Forms.Form"/>class.</para>
		</remarks>
	</doc>
	<doc for="Form.SuspendUpdateMenuHandles">
		<summary>
     Increments updateMenuHandleSuspendCount.
 </summary>
		<seealso cref="ResumeUpdateMenuHandles"/>
	</doc>
	<doc for="Form.ToString">
		<summary>
     Returns a string representation for this control.
 </summary>
		<returns>
     String
 </returns>
	</doc>
	<doc for="Form.UpdateAutoScaleBaseSize">
		<summary>
     Updates the autoscalebasesize based on the current font.
 </summary>
	</doc>
	<doc for="Form.UpdateDefaultButton">
		<summary>
     Updates the default button based on current selection, and the
     acceptButton property.
 </summary>
	</doc>
	<doc for="Form.UpdateHandleWithOwner">
		<summary>
     Updates the underlying hWnd with the correct parent/owner of the form.
 </summary>
	</doc>
	<doc for="Form.UpdateLayered">
		<summary>
     Updates the layered window attributes if the control
     is in layered mode.
 </summary>
	</doc>
	<doc for="Form.UpdateMenuHandles">
	</doc>
	<doc for="Form.OnStyleChanged">
		<nodoc/>
		<summary>
			<para>Raises the StyleChanged event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnStyleChanged"/> method also allows derived classes to 
    handle the event without attaching a delegate. This is the preferred technique
    for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding
 <see cref="System.Windows.Forms.Form.OnStyleChanged"/> in a derived class, be sure to call 
    the base class's <see cref="System.Windows.Forms.Form.OnStyleChanged"/> method so that registered delegates
    receive the event.
 </note>
		</remarks>
	</doc>
	<doc for="Form.UpdateWindowIcon">
		<summary>
     Updates the window icon.
 </summary>
	</doc>
	<doc for="Form.UpdateWindowState">
		<summary>
     Updated the window state from the handle, if created.
 </summary>
	</doc>
	<doc for="Form.WmActivate">
		<summary>
     WM_ACTIVATE handler
 </summary>
	</doc>
	<doc for="Form.WmCreate">
		<summary>
     WM_CREATE handler
 </summary>
	</doc>
	<doc for="Form.WmClose">
		<summary>
     WM_CLOSE handler
 </summary>
	</doc>
	<doc for="Form.WmEnterMenuLoop">
		<summary>
     WM_ENTERMENULOOP handler
 </summary>
	</doc>
	<doc for="Form.WmEraseBkgnd">
		<summary>
     Handles the WM_ERASEBKGND message
 </summary>
	</doc>
	<doc for="Form.WmExitMenuLoop">
		<summary>
     WM_EXITMENULOOP handler
 </summary>
	</doc>
	<doc for="Form.WmGetMinMaxInfo">
		<summary>
     WM_GETMINMAXINFO handler
 </summary>
	</doc>
	<doc for="Form.WmInitMenuPopup">
		<summary>
     WM_INITMENUPOPUP handler
 </summary>
	</doc>
	<doc for="Form.WmMenuChar">
		<summary>
     Handles the WM_MENUCHAR message
 </summary>
	</doc>
	<doc for="Form.WmMdiActivate">
		<summary>
     WM_MDIACTIVATE handler
 </summary>
	</doc>
	<doc for="Form.WmNCCreate">
		<summary>
     WM_NCCREATE handler
 </summary>
	</doc>
	<doc for="Form.WmNCDestroy">
		<summary>
     WM_NCDESTROY handler
 </summary>
	</doc>
	<doc for="Form.WmNCHitTest">
		<summary>
     WM_NCHITTEST handler
 </summary>
	</doc>
	<doc for="Form.WmShowWindow">
		<summary>
     WM_SHOWWINDOW handler
 </summary>
	</doc>
	<doc for="Form.WmSysCommand">
		<summary>
     WM_SYSCOMMAND handler
 </summary>
	</doc>
	<doc for="Form.WmSize">
		<summary>
     WM_SIZE handler
 </summary>
	</doc>
	<doc for="Form.WmWindowPosChanged">
		<summary>
     WM_WINDOWPOSCHANGED handler
 </summary>
	</doc>
	<doc for="Control.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Form.BackColor">
		<nodoc/>
		<summary>
   The background color of this control. This is an ambient property and
   will always return a non-null value.
   </summary>
	</doc>
	<doc for="Form.ClientSize">
		<summary>
			<para>Gets or sets the size of the client area of the form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> that represents the size of the form's client area.</para>
		</value>
		<remarks>
			<para>The size of the client area of the form is the size of
      the form excluding the borders and the title bar. The client area of a form is
      the area within a form where controls can be placed. You can use this property
      to get the proper dimensions when performing graphics operations or when sizing
      and positioning controls on the form. To get the size of the entire form, use
      the <see cref="System.Windows.Forms.Form.Size"/> property or
      use the individual properties <see cref="System.Windows.Forms.Control.Height"/> and <see cref="System.Windows.Forms.Control.Width"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an event handler for the
   <see cref="System.Windows.Forms.Control.Resize"/> event of a form. The event handler uses
      the <see cref="System.Windows.Forms.Form.ClientSize"/> property of
      the form to make a <see cref="System.Windows.Forms.Button"/> control
      named button1 fill the entire client area of the form.</para>
			<codelink SampleID="Classic Form.ClientSize Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.Size"/>
		<seealso cref="System.Windows.Forms.Control.Height"/>
		<seealso cref="System.Windows.Forms.Control.Width"/>
	</doc>
	<doc for="Form.IsMdiChild">
		<summary>
			<para> Gets a value indicating whether the form is a multiple document
      interface (MDI) child form.
      </para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the form is an MDI child form; otherwise,
<see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> At run time, MDI child forms are displayed inside the
      client area of an MDI parent form. An MDI child form can be maximized,
      minimized, and moved within the MDI parent form. To create an MDI child form,
      assign the <see cref="System.Windows.Forms.Form"/> that will be the MDI parent form to the
   <see cref="System.Windows.Forms.Form.MdiParent"/>
   property
   of the child form. You can use the <see cref="System.Windows.Forms.Form.IsMdiContainer"/> property to
   determine whether a form is an MDI parent
   form.
   </para>
			<para> You can use the <see cref="System.Windows.Forms.Form.IsMdiChild"/>
property to determine whether a form returned by a method or property is an
MDI child form or a standard form in your application such as a dialog box.</para>
			<note type="note">
   All MDI child forms have sizable borders, a
   control-menu box, and minimize and maximize buttons, regardless of the settings
   of the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.ControlBox"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, and <see cref="System.Windows.Forms.Form.MaximizeBox"/> properties.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MdiParent"/>
		<seealso cref="System.Windows.Forms.Form.MdiChildren"/>
		<seealso cref="System.Windows.Forms.Form.IsMdiContainer"/>
	</doc>
	<doc for="Form.MaximizeBox">
		<summary>
			<para>Gets or sets a value indicating whether the maximize button is
      displayed in the caption bar of the form.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> to display a maximize button for the form; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>A maximize button enables users to enlarge a window to full-screen
      size. To display a maximize button, you must also set the
      form's <see cref="System.Windows.Forms.Form.FormBorderStyle"/> property to
      either <see langword="FormBorderStyle.FixedSingle"/>,
   <see langword="FormBorderStyle.Sizable"/>,
   <see langword="FormBorderStyle.Fixed3D"/>, or
   <see langword="FormBorderStyle.FixedDialog"/>.</para>
			<para>A maximize button automatically becomes a restore button when a window is
      maximized. Minimizing or restoring a window automatically changes the restore
      button back to a maximize button.</para>
			<note type="note">
      Maximizing a form at run time
      generates a <see cref="System.Windows.Forms.Control.Resize"/> event.
      The <see cref="System.Windows.Forms.Form.WindowState"/> property reflects the current state of the
      window. If you set the <see cref="System.Windows.Forms.Form.WindowState"/> property to
   <see langword="FormWindowState.Maximized"/>, the form is maximized
      independently of whatever settings are in effect for the <see cref="System.Windows.Forms.Form.MaximizeBox"/> and <see cref="System.Windows.Forms.Form.FormBorderStyle"/> properties.
      
   </note>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.MinimizeBox"/>
		<seealso cref="System.Windows.Forms.Form.ControlBox"/>
	</doc>
	<doc for="Form.MinimizeBox">
		<summary>
			<para>Gets or sets a value indicating whether the minimize button is displayed in the caption bar of the form.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> to display a minimize button for the form; otherwise, <see langword="false"/>. The default is <see langword="true"/>. </para>
		</value>
		<remarks>
			<para>A minimize button enables users to minimize a window to an icon. To display a minimize button, you must also set the form's <see cref="System.Windows.Forms.Form.FormBorderStyle"/> property to either <see langword="FormBorderStyle.FixedSingle"/>, <see langword="FormBorderStyle.Sizable"/>, <see langword="FormBorderStyle.Fixed3D"/>, or <see langword="FormBorderStyle.FixedDialog"/>.</para>
			<note type="note">
   Minimizing a form at run time generates a <see cref="System.Windows.Forms.Control.Resize"/> event. The <see cref="System.Windows.Forms.Form.WindowState"/> property reflects the current state of the window. If you set the <see cref="System.Windows.Forms.Form.WindowState"/> property to <see langword="FormWindowState.Minimized"/>, the form is minimized
   independently of whatever settings are in effect for the <see cref="System.Windows.Forms.Form.MinimizeBox"/> and <see cref="System.Windows.Forms.Form.FormBorderStyle"/> properties.
   
</note>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.MaximizeBox"/>
		<seealso cref="System.Windows.Forms.Form.ControlBox"/>
	</doc>
	<doc for="Form.CreateHandle">
		<nodoc/>
		<summary>
			<para>Creates the handle for the Form. If a
      subclass overrides this function,
      it must call the base implementation.</para>
		</summary>
		<seealso cref="Control.CreateHandle"/>
	</doc>
	<doc for="Form.LayoutMdi">
		<summary>
			<para> Arranges the multiple document interface (MDI) child
      forms within the MDI parent form.</para>
		</summary>
		<param name="value">One of the <see cref="System.Windows.Forms.MdiLayout"/> values that defines the layout of MDI child forms. </param>
		<remarks>
			<para>You can use this method to arrange the MDI child forms in
      your MDI parent form to allow for easier navigation and manipulation of MDI
      child forms. MDI child forms can be tiled horizontally and vertically, cascaded,
      or as icons within the MDI parent form.</para>
		</remarks>
		<example>
			<para>The following example shows the event-handling methods
      for the menu items of a Window menu in an MDI application's parent form. Each
      event-handling method make calls to the <see cref="System.Windows.Forms.Form.LayoutMdi"/>
      method to arrange any child forms that are currently open in the
      application.</para>
			<codelink SampleID="Classic Form.LayoutMdi Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MdiLayout"/>
	</doc>
	<doc for="Form.ProcessCmdKey">
		<nodoc/>
		<summary>
   Processes a command key. Overrides Control.processCmdKey() to provide
   additional handling of main menu command keys and Mdi accelerators.
   </summary>
		<param name="msg">
   original window message.
   </param>
		<param name="keyData">
   key code and modifier flags.
   </param>
		<returns>
   true to consume the key, false to allow further processing.
   </returns>
		<seealso cref="Control.ProcessCmdKey"/>
	</doc>
	<doc for="Form.ProcessDialogKey">
		<nodoc/>
		<summary>
   Processes a dialog key. Overrides Control.processDialogKey(). This
   method implements handling of the RETURN, and ESCAPE keys in dialogs.
   The method performs no processing on keys that include the ALT or
   CONTROL modifiers.
   </summary>
		<param name="keyData">
   key code and modifier flags.
   </param>
		<returns>
   true to consume the key, false to allow further processing.
   </returns>
		<seealso cref="Control.ProcessDialogKey"/>
	</doc>
	<doc for="Form.ProcessKeyPreview">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Form.ProcessTabKey">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Form.ScaleCore">
		<nodoc/>
		<summary>
   Base function that performs scaling of the form.
   </summary>
		<param name="x">
   Percentage to scale the form horizontally
   </param>
		<param name="y">
   Percentage to scale the form vertically
   </param>
		<seealso cref="Control.ScaleCore"/>
	</doc>
	<doc for="Form.SetBoundsCore">
		<nodoc/>
		<summary>
		</summary>
		<param name="x">
		</param>
		<param name=" y">
		</param>
		<param name=" width">
		</param>
		<param name=" height">
		</param>
		<param name=" specified">
		</param>
	</doc>
	<doc for="Form.SetClientSizeCore">
		<nodoc/>
		<summary>
   Sets the clientSize of the form. This will adjust the bounds of the form
   to make the clientSize the requested size.
   </summary>
		<param name="x">
   Requested width of the client region
   </param>
		<param name="y">
   Requested height of the client region
   </param>
		<seealso cref="ClientSize"/>
	</doc>
	<doc for="Form.ShouldSerializeSize">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Form.Size"/> property should be persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating 
      a designer for the <see cref="System.Windows.Forms.Form"/> or creating your own control incorporating
      the <see cref="System.Windows.Forms.Form"/>.</para>
		</remarks>
	</doc>
	<doc for="Form.Load">
		<summary>
			<para>Occurs before a form is displayed for the first time.</para>
		</summary>
		<remarks>
			<para> You can use this event to perform tasks such as allocating resources used by the form.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.OnLoad"/>
		<seealso cref="System.Windows.Forms.Form.Close"/>
	</doc>
	<doc for="Form.InputLanguageChanging">
		<summary>
			<para> Occurs when the user attempts to change the input language for the
      form.</para>
		</summary>
		<remarks>
			<para>This event occurs before the change of input language is
      made for the form. You can cancel the language change by setting the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.Windows.Forms.InputLanguageChangingEventArgs"/> passed to your event-handling method
      to <see langword="false"/>
      . If the event is canceled, the input language is not changed. You can
      use this event to determine whether the requested input language change is appropriate for your application.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.InputLanguageChanged"/>
		<seealso cref="System.Windows.Forms.Form.OnInputLanguageChanging"/>
	</doc>
	<doc for="Form.MdiChildActivate">
		<summary>
			<para>Occurs when a multiple document interface (MDI) child form is activated or closed
      within an MDI application.</para>
		</summary>
		<remarks>
			<para>You can use this event to perform tasks such as updating the contents of the
      MDI child form and changing the menu options available in the MDI parent form
      based on the status of the MDI child form that is activated.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.OnMdiChildActivate"/>
	</doc>
	<doc for="Form.MenuComplete">
		<summary>
			<para> Occurs when the menu of a form loses focus.</para>
		</summary>
		<remarks>
			<para>This event is raised when you click on any menu item in
      a menu that results in a command being performed and the menu losing focus. You
      can use this event to perform tasks such as updating the text of a <see cref="System.Windows.Forms.StatusBar"/>
      control or enabling and disabling buttons on a <see cref="System.Windows.Forms.ToolBar"/>.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.OnMenuComplete"/>
	</doc>
	<doc for="Form.WndProc">
		<nodoc/>
		<summary>
			<para>Base wndProc encapsulation.</para>
		</summary>
		<param name="m">Message sent </param>
	</doc>
	<doc for="Form.OnMinimumSizeChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.MinimumSizeChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnMinimumSizeChanged"/> method also allows derived classes to 
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Form.OnMinimumSizeChanged"/> in a derived class, be sure to call 
   the base class's <see cref="System.Windows.Forms.Form.OnMinimumSizeChanged"/> method so that registered delegates
   receive the event.
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MinimumSizeChanged"/>
		<seealso cref="System.Windows.Forms.Form.MinimumSize"/>
	</doc>
	<doc for="Form.MinimumSizeChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Form.MinimumSize"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.OnMinimumSizeChanged"/>
		<seealso cref="System.Windows.Forms.Form.MinimumSize"/>
	</doc>
	<doc for="Form.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Form.SetDesktopBounds">
		<summary>
			<para> Sets the bounds of the form in desktop coordinates.</para>
		</summary>
		<param name="x">The x-coordinate of the form's location.</param>
		<param name="y">The y-coordinate of the form's location.</param>
		<param name="width">The width of the form.</param>
		<param name="height">The height of the form.</param>
		<remarks>
			<para> Desktop coordinates are based on the working area of the screen,
      which excludes the taskbar. You can use this method to set the position and size
      of your form on the desktop. Since desktop coordinates are based on the working
      area of the form, you can use this method to ensure that your form is
      completely visible on the desktop.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.SetDesktopLocation"/>
	</doc>
	<doc for="Form.SetDesktopLocation">
		<summary>
			<para>Sets the location of the form in desktop coordinates.</para>
		</summary>
		<param name="x">The x-coordinate of the form's location.</param>
		<param name="y">The y-coordinate of the form's location.</param>
		<remarks>
			<para> Desktop coordinates are based on the working area of the
      screen, which excludes the taskbar. You can use this method to position your
      form on the desktop. Since desktop coordinates are based on the working area
      of the form, you can use this method to ensure that your form is completely visible on the desktop.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.SetDesktopBounds"/>
	</doc>
	<doc for="Form.CreateControlsInstance">
		<nodoc/>
		<summary>
		</summary>
	</doc>
	<doc for="Form.OnInputLanguageChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.InputLanguageChanged"/>
event.</para>
		</summary>
		<param name="e">The <see cref="System.Windows.Forms.InputLanguageChangedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnInputLanguageChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Form.OnInputLanguageChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Form.OnInputLanguageChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.InputLanguageChanged"/>
		<seealso cref="System.Windows.Forms.InputLanguageChangedEventArgs"/>
	</doc>
	<doc for="Form.ActiveMdiChild">
		<summary>
			<para> Gets the currently active
      multiple
      document interface (MDI) child window.</para>
		</summary>
		<value>
			<para>Returns a <see cref="System.Windows.Forms.Form"/> that represents the
   currently active MDI child window, or <see langword="null"/>
   if there are currently no child windows present.</para>
		</value>
		<remarks>
			<para>You can use this method to determine whether there are any MDI
      child forms open in your MDI application. You can
      also use this method to perform operations on an MDI child
      window from its MDI parent form or from another form that is displayed in your
      application.</para>
			<para>If the currently active form is not an MDI child form,
      you can use the <see cref="System.Windows.Forms.Form.ActiveForm"/>
      property to obtain a reference to it.</para>
		</remarks>
		<example>
			<para>The following example obtains a reference to the active
      MDI child form and loops through all <see cref="System.Windows.Forms.TextBox"/> controls on the form,
      resetting their <see cref="System.Windows.Forms.TextBoxBase.Text"/> properties. This example assumes that an MDI
      parent form has been created and that this method call is being made from the
      MDI parent form.</para>
			<codelink SampleID="Classic Form.ActiveMdiChild Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.ActiveForm"/>
	</doc>
	<doc for="Form.AutoScale">
		<summary>
			<para> Gets or sets a value indicating whether the form adjusts its size
      to fit the height of the font used on the form and scales
      its controls.
      </para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the form will automatically scale itself and its
   controls based on the current font assigned to the form; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.
   </para>
		</value>
		<remarks>
			<para> You can use this property to allow
      your form and its controls to automatically adjust based on changes in the
      font. This can be useful in applications where the font might increase or
      decrease based on the language specified for use by Windows.
      </para>
			<para> To obtain the size the form will auto scale to, use the 
   <see cref="System.Windows.Forms.Form.AutoScaleBaseSize"/> property. If you want to determine the 
      size the form will auto scale to based on a specific font, use the <see cref="System.Windows.Forms.Form.GetAutoScaleSize"/>
      
      method.
      </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.AutoScaleBaseSize"/>
		<seealso cref="System.Windows.Forms.Form.GetAutoScaleSize"/>
	</doc>
	<doc for="Form.CancelButton">
		<summary>
			<para> Gets
      or sets the button control that is clicked when the
      user presses the ESC key.</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.IButtonControl"/> that
   represents the cancel button
   for the form.</para>
		</value>
		<remarks>
			<para>The cancel button for a form is the button control that is clicked whenever
      the user presses the ESC key. The button assigned to this property must be an
   <see cref="System.Windows.Forms.IButtonControl"/> that is on the current form or located within a
      container on the current form.</para>
			<para>This property allows you to designate a default action to occur when the user
      presses the ESC key in your application. You can use this property to allow the
      user to quickly navigate a simple form by allowing them to simply press the ESC
      key to close a window without committing changes instead of manually clicking the
      cancel button with their mouse.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.AcceptButton"/>
		<seealso cref="System.Windows.Forms.IButtonControl"/>
	</doc>
	<doc for="Form.OnVisibleChanged">
		<nodoc/>
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.VisibleChanged"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnVisibleChanged"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Form.OnVisibleChanged"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Form.OnVisibleChanged"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Visible"/>
		<seealso cref="System.Windows.Forms.Control.VisibleChanged"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.Icon">
		<summary>
			<para> Gets or sets the icon for the form.
      </para>
		</summary>
		<value>
			<para> An <see cref="System.Drawing.Icon"/> that represents the icon for the form.
   </para>
		</value>
		<remarks>
			<para> A form's icon designates the picture that represents the
      form in the taskbar as well as the icon
      that is displayed for the control box of the form.
      </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.ControlBox"/>
	</doc>
	<doc for="Form.FormBorderStyle">
		<summary>
			<para>Gets or sets the border style of the form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.FormBorderStyle"/> that represents the style of border
   to display for the form. The default is
<see langword="FormBorderStyle.Sizable"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value specified is outside the range of valid values.</exception>
		<remarks>
			<para>The border style of the form determines how the outer
      edge of the form appears. In addition to changing the border display for a form,
      certain border styles prevent the form from being sized. For example, the
   <see langword="FormBorderStyle.FixedDialog"/> border style changes the border of
      the form to that of a dialog
      box and prevents the form from being resized. The border style can also affect
      the size or availability of the caption bar section of a form.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FormBorderStyle"/>
	</doc>
	<doc for="Form.Select">
		<nodoc/>
		<summary>
			<para>Selects this form, and optionally selects the next/previous control.</para>
		</summary>
		<param name="directed">If set to true that the active control is changed </param>
		<param name="forward">If directed is true, then this controls the direction in which focus is moved. If this is true, then the next control is selected, otherwise the previous control is selected. </param>
		<permission cref="System.Security.Permissions.UIPermission"> for changing focus. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/>.</permission>
	</doc>
	<doc for="Form.StartPosition">
		<summary>
			<para>Gets or sets the
      starting position of the form at run time.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.FormStartPosition"/> that represents the starting position of the
   form.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value specified is outside the range of valid values.</exception>
		<remarks>
			<para>This property enables you to set the starting position of
      the form when it is displayed at run time. The form can be displayed manually or
      in the default location specified by Windows. You can also position the form to
      display in the center of the screen or in the center of its parent form for
      forms such as multiple document interface (MDI) child forms.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties
   to change the appearance and functionality of the form to a dialog box. The
   example also uses the <see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.StartPosition Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FormStartPosition"/>
	</doc>
	<doc for="Form.ShouldSerializeAutoScaleBaseSize">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Form.AutoScaleBaseSize"/> property should be
   persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed
   from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a
      designer for the <see cref="System.Windows.Forms.Form"/> or creating your own control incorporating
      the <see cref="System.Windows.Forms.Form"/>.</para>
		</remarks>
	</doc>
	<doc for="Form.ShouldSerializeTransparencyKey">
		<summary>
			<para>Indicates whether the <see cref="System.Windows.Forms.Form.TransparencyKey"/> property should be
   persisted.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the property value has changed from its default; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>You typically use this method if you are either creating a designer for the
   <see cref="System.Windows.Forms.Form"/> or creating your own control incorporating
      the <see cref="System.Windows.Forms.Form"/>.</para>
		</remarks>
	</doc>
	<doc for="Form.MaximizedBoundsChanged">
		<summary>
			<para>Occurs when the value of the <see cref="System.Windows.Forms.Form.MaximizedBounds"/> property has changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MaximizedBounds"/>
		<seealso cref="System.Windows.Forms.Form.OnMaximizedBoundsChanged"/>
	</doc>
	<doc for="Form.OnHandleDestroyed">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.SetVisibleCore">
		<nodoc/>
	</doc><doc for="Form.ControlCollection">
		<summary>
			<para>Represents a collection of controls on the form.</para>
		</summary>
		<remarks>
			<para>This class represents the collection of controls
      contained within a form. You can use the <see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method to add a control to the form and the
   <see cref="System.Windows.Forms.Form.ControlCollection.Remove"/>
   method to remove the method from the form. The control collection
   represented by this class cannot be created without binding it to a
   specific form. As a result, you cannot create multiple instances of this control
   collection and interchange them with an active form to provide different control layouts.</para>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.TextBox"/>
and <see cref="System.Windows.Forms.Label"/> control to the control collection of a form. The example assumes that a
form has been created and named <c>Form1</c>.</para>
			<codelink SampleID="Classic Form.ControlCollection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.ControlCollection"/>
	</doc><doc for="Form.ControlCollection.ControlCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Form.ControlCollection"/> class.</para>
		</summary>
		<param name="owner">The <see cref="System.Windows.Forms.Form"/> to contain the controls added to the control collection.</param>
		<remarks>
			<para>This constructor allows you to properly bind the control
      collection to the form to enable controls to be added to the form.</para>
			<note type="note">
      Because the control
      collection must be created with a specified form, you cannot create multiple collections
      of controls and interchange them with the form.
      
   </note>
		</remarks>
	</doc><doc for="Form.ControlCollection.Add">
		<summary>
			<para> Adds a control
      to the form.</para>
		</summary>
		<param name="value">The <see cref="System.Windows.Forms.Control"/> to add to the form.</param>
		<exception cref="System.Exception">A Multiple Document Interface (MDI) parent form cannot have controls added to it.</exception>
		<remarks>
			<para>You can use this method to adds controls to the form. If you
      want to add a group of already created controls to the form, use the <see cref="System.Windows.Forms.Control.ControlCollection.AddRange" qualify="true"/>method of the <see cref="System.Windows.Forms.Control.ControlCollection"/>class.</para>
		</remarks>
		<example>
			<para>The following example adds a <see cref="System.Windows.Forms.TextBox"/> and <see cref="System.Windows.Forms.Label"/> control to the control collection of a form. The example assumes that a form has been created and named Form1.</para>
			<codelink SampleID="Classic Form.ControlCollection Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.ControlCollection.Remove"/>
	</doc><doc for="Form.ControlCollection.Remove">
		<summary>
			<para> Removes a control from the form.</para>
		</summary>
		<param name="value">A <see cref="System.Windows.Forms.Control"/> to remove from the form.</param>
		<remarks>
			<para>You can use this method to remove controls that you no longer need in your
      form. If you want to display a control after it is removed, you will need to add the
      control back to the form using the <see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method. To have a control
      remain on the form but not displayed, use the <see cref="System.Windows.Forms.Control.Visible"/> property of the
      control.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.ControlCollection.Add"/>
	</doc><doc for="Form.FormBorderStyle">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.OnFontChanged"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.OnHandleCreated">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.TransparencyKey">
		<summary>
			<para>Gets or sets the color that will represent transparent areas of the form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Color"/> that represents the color to display
   transparently on the form.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Windows.Forms.Form.TransparencyKey"/> property is assigned a <see cref="System.Drawing.Color"/>, the
   areas of the form that have the same <see cref="System.Windows.Forms.Control.BackColor"/> will be displayed transparently.
   Any mouse actions, such as the click of the mouse,
   that are performed on the transparent areas of the form will be transferred
   to the windows below the transparent area. For example, if the client region of
   a form is made transparent, clicking the mouse on that area would send the
   event notification of the click to any window that is below it. If the color
   assigned to the <see cref="System.Windows.Forms.Form.TransparencyKey"/> property is the same as any controls on the
   form, they also will be displayed transparently. For example, if you have
   a <see cref="System.Windows.Forms.Button"/> control on a form that has
   its <see cref="System.Windows.Forms.Form.TransparencyKey"/> property set to
<see langword="SystemColors.Control"/>, the control will be displayed
   transparently unless the <see cref="System.Windows.Forms.Control.BackColor"/> property of the <see cref="System.Windows.Forms.Button"/> control
   is changed to a different color.</para>
		</remarks>
		<platnote platform="Win2K, Win2KPro, Win2KSvr, Win2KADC">Transparent windows and regions are only supported under the Windows 2000 operating system.
</platnote>
		<example>
			<para>The following example creates a window that has a 
      transparent client region regardless of background color of the form. This
      example assumes that the example method is defined within a form class.</para>
			<codelink SampleID="Classic Form.TransparencyKey Example" SnippetID="1"/>
		</example>
		<keyword term="transparent areas of forms"/>
	</doc><doc for="Form.OnTextChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.AlwaysRestrictWindows">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.RestrictedProcessNcActivate">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.WmNcButtonDown">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Form.Form">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Form"/> class.</para>
		</summary>
		<remarks>
			<para>The default size of a form is 300 pixels in height and 300 pixels in
      width.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance and
   functionality of the form to a dialog box. The example also sets uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
	</doc><doc for="Form.HelpButton">
		<summary>
			<para>Gets or sets a value indicating whether a
      Help button should be displayed in the caption box of the form.</para>
		</summary>
		<value>
			<para><see langword="true"/> to display a Help button in the form's caption bar;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When this property is set to <see langword="true"/> , a small button with a question mark appears
   in the caption bar to the left of the close button. You can use this button to
   display help for your application. You can create an event handler for the
<see cref="System.Windows.Forms.Control.HelpRequested"/> event of the <see cref="System.Windows.Forms.Control"/> 
class to display Help
information to the user when the Help button of the form is
clicked.</para>
			<para>The value of the <see cref="System.Windows.Forms.Form.HelpButton"/> property is ignored if the maximize or minimize boxes are shown.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a Help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
	</doc><doc for="Form.Owner">
		<summary>
			<para>Gets or sets the form that owns this form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Form"/> that represents the form that is the owner of
   this form.</para>
		</value>
		<exception cref="System.Exception"> A window that is not a top-level window cannot have an owner. </exception>
		<remarks>
			<para>To make a form owned by another form, assign
      its <see cref="System.Windows.Forms.Form.Owner"/>
      property a reference to the
      form that will be the
      owner.</para>
			<para>When a form is owned by another form, it is minimized and closed with the
      owner form. For example, if <c>Form2</c> is owned by form <c>Form1</c>, if <c>Form1</c> is closed or
   minimized, <c>Form2</c> is also closed or minimized. Owned forms are also never displayed
behind their owner form. You
can use owned forms for windows such as find and replace windows, which should
not disappear when the owner form is selected.
To determine the forms that are owned by a parent form,
use the <see cref="System.Windows.Forms.Form.OwnedForms"/> property.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.AddOwnedForm"/>
		<seealso cref="System.Windows.Forms.Form.RemoveOwnedForm"/>
		<seealso cref="System.Windows.Forms.Form.OwnedForms"/>
		<keyword term="owned forms for a form"/>
		<keyword term="forms,owned forms for a form"/>
	</doc><doc for="Form.Activate">
		<summary>
			<para>Activates the form and gives it focus.</para>
		</summary>
		<remarks>
			<para> Activating a form brings it to the front if this is the
      active application, or it flashes the window caption if this is not the active
      application. The form must be visible for this method to have any effect. To
      determine the active form in an application, use the <see cref="System.Windows.Forms.Form.ActiveForm"/> property or the <see cref="System.Windows.Forms.Form.ActiveMdiChild"/>
      property if your forms are in a Multiple Document Interface (MDI) application.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for changing focus. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/>.</permission>
		<seealso cref="System.Windows.Forms.Form.ActiveForm"/>
		<seealso cref="System.Windows.Forms.Form.ActiveMdiChild"/>
	</doc><doc for="Form.OnCreateControl">
		<nodoc/>
		<summary>
			<para> Raises the CreateControl event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event-handling method through a delegate. For
      more information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.Windows.Forms.Form.OnCreateControl"/> in a derived class, be sure to call the
      base class's <see cref="System.Windows.Forms.Form.OnCreateControl"/> method.
      
   </note>
		</remarks>
	</doc><doc for="Form.MaximumSize">
		<summary>
			<para>Gets the maximum size the form can be resized to.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> that represents the maximum size for the
   form.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The values of the height or width within the <see cref="System.Drawing.Size"/> object are less than zero.</exception>
		<remarks>
			<para>This property enables you to limit the size of a form to 
      a specified maximum size. You can use this feature when displaying multiple
      windows at the same time, to ensure that a single window does not cause other
      windows to be hidden. If this property is set to a <see cref="System.Drawing.Size"/>
      object that is 0 in height
      and 0 in width, the form will have no maximum size beyond the limits set
      by Windows.
      
   </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MaximizedBounds"/>
		<seealso cref="System.Windows.Forms.Form.MinimumSize"/>
		<seealso cref="System.Windows.Forms.SystemInformation.MaxWindowTrackSize"/>
	</doc>
	<doc for="Form.Close">
		<summary>
			<para>Closes the form.</para>
		</summary>
		<exception cref="System.InvalidOperationException">The form was closed while a handle was being created.</exception>
		<remarks>
			<para>When a form is closed, all resources created within the object are closed and the form is disposed.
      You can prevent the closing of a form at run time by handling the <see cref="System.Windows.Forms.Form.Closing"/> event and setting the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.ComponentModel.CancelEventArgs"/> passed as a parameter to
      your event-handling method. If the form you are closing is the startup form of
      your application, your application ends.</para>
			<note type="note">
      When the <see cref="System.Windows.Forms.Form.Close"/>
      method is called on a <see cref="System.Windows.Forms.Form"/> displayed as a modeless window, you
      cannot call the <see cref="System.Windows.Forms.Control.Show"/> method
      to make the form visible, because the form's resources have already been
      released. To hide a form and then make it visible, use the <see cref="System.Windows.Forms.Control.Hide" qualify="true"/> method.
      
   </note>
			<note type="caution">
      The <see cref="System.Windows.Forms.Form.Closed" qualify="true"/> and <see cref="System.Windows.Forms.Form.Closing" qualify="true"/> events are not
      raised when the <see cref="System.Windows.Forms.Application.Exit" qualify="true"/> method is called to exit your
      application. If you have validation code in either of these events that must be
      executed, you should call the <see cref="System.Windows.Forms.Form.Close" qualify="true"/> method for each open form
      individually before calling the <see cref="System.Windows.Forms.Application.Exit"/> method.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.CancelEventArgs.Cancel"/>
		<seealso cref="System.Windows.Forms.Form.Closing"/>
	</doc>
	<doc for="Form.MaximizedBounds">
		<summary>
			<para> Gets and sets the size of the form when it is
      maximized.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Drawing.Rectangle"/> that represents the bounds of the form when it is maximized.
   </para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException"><para>The value of the <see cref="System.Drawing.Rectangle.Top"/> property is greater than the height of the form.</para>
			<para>-or-</para>
			<para>The value of the <see cref="System.Drawing.Rectangle.Left"/> property is greater than the width of the form.</para></exception>
		<remarks>
			<note type="inheritinfo">
      Classes
      that inherit from
   <see cref="System.Windows.Forms.Form"/> can override this method to provide new bounds for the form when it is maximized.
      The class sets this property internally when the form's maximize box button is clicked.
      
   </note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.MaximumSize"/>
		<seealso cref="System.Windows.Forms.Form.MinimumSize"/>
	</doc><doc for="Form.MinimumSize">
		<summary>
			<para> Gets or sets the minimum size the form can be resized to.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Drawing.Size"/>
that represents the minimum size for the form.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The values of the height or width within the <see cref="System.Drawing.Size"/> object are less than zero.</exception>
		<remarks>
			<para>This property enables you to limit the size of a form to
      a specified minimum size. You can use this feature to prevent a user from sizing
      a window to an undesirable size. If this property is set to a <see cref="System.Drawing.Size"/> object that is 0 in height and 0 in width, the form will have no minimum size beyond the limits set by Windows.
      </para>
		</remarks>
	</doc><doc for="Form.ShowDialog1">
		<summary>
			<para>Shows the form as a modal dialog with the specified owner.</para>
		</summary>
		<param name="owner">Any object that implements <see cref="System.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog.</param>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.DialogResult"/> values.</para>
		</returns>
		<exception cref="System.Exception"><para>The form specified in the <paramref name="owner"/> parameter is the same as the form being shown.</para>
			<para>-or-</para>
			<para>The form being shown is already visible.</para>
			<para>-or-</para>
			<para>The form being shown is disabled.</para>
			<para>-or-</para>
			<para>The form being shown is not a top-level window.</para>
			<para>-or-</para>
			<para>The form being shown as a dialog box is already a modal form.</para></exception>
		<remarks>
			<para> You can use this method to display a modal dialog box in your application. When this method is called, the code following it is not executed until after the dialog box is closed. The dialog box can be assigned one of the values of <see cref="System.Windows.Forms.DialogResult"/> by assigning it to the <see cref="System.Windows.Forms.Button.DialogResult"/> property of a <see cref="System.Windows.Forms.Button"/> on the form or by setting the <see cref="System.Windows.Forms.Form.DialogResult"/> property of the form in code. This value is then returned by this method. You can use this return value to determine how to process the actions that occurred in the dialog box. For example, if the dialog box was closed and returned the <see langword="DialogResult.Cancel"/> value through this method, you could prevent code following the call to <see cref="System.Windows.Forms.Form.ShowDialog"/>
from executing.</para>
			<para>When a form is displayed as a modal dialog box, clicking
   the close form button (the button with an "X" at the top right of the form)
   causes the form to be hidden and the <see cref="System.Windows.Forms.Form.DialogResult"/> property to be set
   to <see langword="DialogResult.Cancel"/> . Unlike modeless forms, the <see cref="System.Windows.Forms.Form.Close"/> method
   is not called by the .NET Framework when the user clicks the close form button
   of a dialog box or sets the value of the <see cref="System.Windows.Forms.Form.DialogResult"/>
   property. Instead the form is hidden and can be shown again without creating a
   new instance of the dialog box. Because a form displayed as a dialog box is not
   closed, you must call the <see cref="System.Windows.Forms.Control.Dispose"/> method of the form when the form
   is no longer needed by your application.</para>
			<para>This version of the <see cref="System.Windows.Forms.Form.ShowDialog"/> method allows you to specify a specific
form or control that will own the dialog box that is shown. If you use the
version of this method that has no parameters, the dialog box being shown
would be owned automatically by the currently active window of your
application.</para>
		</remarks>
		<example>
			<para> The following example displays a form as a modal dialog box and
      reads the result of the dialog box before determining whether to read the value of
      a <see cref="System.Windows.Forms.TextBox"/> control on the dialog box form. This example
      assumes that a <see cref="System.Windows.Forms.Form"/> named <c>Form2</c> is created and that it contains
   a <see cref="System.Windows.Forms.TextBox"/> control named <c>TextBox1</c>. The example uses the version of <see cref="System.Windows.Forms.Form.ShowDialog"/>
that specifies an owner for the dialog box.</para>
			<codelink SampleID="Classic Form.ShowDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.DialogResult"/>
	</doc>
	<doc for="Form.DefaultImeMode">
		<summary>
			<para>Gets the default Input Method Editor (IME) mode supported by the control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Windows.Forms.ImeMode"/> values.</para>
		</value>
		<remarks>
			<para>An input method editor (IME) is a program that allows users to enter complex
      characters and symbols, such as Japanese Kanji characters, by using a standard
      keyboard. </para>
			<para>As implemented in the <see cref="System.Windows.Forms.Form"/> class, this property 
   always returns the <see cref="System.Windows.Forms.ImeMode.NoControl" qualify="true"/> value.
   The value of this property is assigned to the <see cref="System.Windows.Forms.Control.ImeMode" qualify="true"/>
   property.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.ImeMode"/>
	</doc><doc for="Form.AutoScaleBaseSize">
		<summary>
			<para> Gets or sets the base size used for autoscaling of the
      form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> that represents the base size that this form
   uses for autoscailing.</para>
		</value>
		<remarks>
			<para>The value of the <see cref="System.Windows.Forms.Form.AutoScaleBaseSize"/> property
   is used at form-display time to compute the scaling factor for the form. The
   autoscaling base size is used by the form as a baseline for comparison to the
   system's font size to determine how much to scale the form when autoscaling is
   used. If you want to determine the size a form will auto scale to based on a
   specific font, use the <see cref="System.Windows.Forms.Form.GetAutoScaleSize"/>
   
   method.</para>
			<note type="note">
   The value of this property
   is used when the form is initially created. Once the property is set, it
   cannot be changed.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.AutoScale"/>
		<seealso cref="System.Windows.Forms.Form.GetAutoScaleSize"/>
	</doc><doc for="Form.DesktopBounds">
		<summary>
			<para>Gets or sets the size and location of the form on the Windows desktop.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that represents the bounds of
   the form on the Windows desktop using desktop coordinates.</para>
		</value>
		<remarks>
			<para>Desktop coordinates are based on the working area of the screen,
      which excludes the taskbar. The coordinate system of the desktop is
      pixel based. If your application is running on a
      multiple monitor system, the coordinates of the form are the
      coordinates for the combined desktop.</para>
			<para>You
      can use this property to size and position a form relative to
      other forms or applications on the Windows desktop.</para>
		</remarks>
		<example>
			<para>The following example sets the size and position of a
      form so that the form is positioned 50 pixels from the left
      border of the desktop and 50 pixels from the top of the top of the
      desktop. This example assumes that the method is defined within a form class.</para>
			<codelink SampleID="Classic Form.DesktopBounds Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.DesktopLocation"/>
	</doc><doc for="Form.RemoveOwnedForm">
		<summary>
			<para> Removes an owned form from this form.</para>
		</summary>
		<param name="ownedForm">A <see cref="System.Windows.Forms.Form"/> representing the form to remove from the list of owned forms for this form.</param>
		<remarks>
			<para> The form assigned to the owner form remains owned until
      the <see cref="System.Windows.Forms.Form.RemoveOwnedForm"/> method is called. In addition to removing the owned form from the list of
      owned form, this method also sets the owner form to <see langword="null"/>
      .</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.AddOwnedForm"/>
		<seealso cref="System.Windows.Forms.Form.Owner"/>
		<seealso cref="System.Windows.Forms.Form.OwnedForms"/>
	</doc><doc for="Form.DesktopLocation">
		<summary>
			<para>Gets or sets the location of the form on the Windows desktop.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Point"/> that represents the location of the form on the
   desktop.</para>
		</value>
		<remarks>
			<para>Desktop coordinates are based on the working area of the
      screen, which excludes the taskbar. The coordinate system of the desktop
      is pixel based. If your application is running on
      a multimonitor system, the coordinates of the form are the coordinates for
      the combined desktop.</para>
			<para>You can use this property to
      position your form relative to other forms and applications on the Windows desktop.</para>
		</remarks>
		<example>
			<para> The following example sets the position of a form so
      that the form is positioned 100 pixels from the left border of the desktop and
      100 pixels from the top of the desktop. This example assumes method has been
      defined within a form class.</para>
			<codelink SampleID="Classic Form.DesktopLocation Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.DesktopBounds"/>
	</doc>
	<doc for="Form.IsMdiContainer">
		<summary>
			<para> Gets or sets a value indicating whether the form is a container for multiple document interface
      (MDI) child forms.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the form is a container for MDI child forms;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> This property changes the display and behavior of the
      form to an MDI parent form.
      When this property is set to <see langword="true"/> , the form displays a sunken
      client area with a raised border. All MDI child forms assigned
      to the parent form are displayed within its client area.
      </para>
			<para> When an MDI parent form is closed, the <see cref="System.Windows.Forms.Form.Closing"/> events of all MDI child forms are raised
   before the MDI parent form's <see cref="System.Windows.Forms.Form.Closing"/> event is raised. In
   addition, the <see cref="System.Windows.Forms.Form.Closed"/> events of all MDI child forms are raised
   before the <see cref="System.Windows.Forms.Form.Closed"/>
   event of the MDI parent form is raised.
   </para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.IsMdiChild"/>
		<seealso cref="System.Windows.Forms.Form.MdiParent"/>
		<seealso cref="System.Windows.Forms.Form.MdiChildren"/>
	</doc><doc for="Form.Closed">
		<summary>
			<para>Occurs when the form is closed.</para>
		</summary>
		<remarks>
			<para>This event occurs after the form has been closed by the
      user or by the <see cref="System.Windows.Forms.Form.Close"/> method of the form. To prevent a form from
      closing, handle the <see cref="System.Windows.Forms.Form.Closing"/> event and set the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.ComponentModel.CancelEventArgs"/> passed to your event-handling method
      to <see langword="true"/>.</para>
			<para>You can use this event to perform tasks such as freeing resources used by the
      form and to save information entered in the form or to update its
      parent form.</para>
			<note type="caution">
      The <see cref="System.Windows.Forms.Form.Closed" qualify="true"/> and <see cref="System.Windows.Forms.Form.Closing" qualify="true"/> events are not
      raised when the <see cref="System.Windows.Forms.Application.Exit" qualify="true"/> method is called to exit your
      application. If you have validation code in either of these events that must be
      executed, you should call the <see cref="System.Windows.Forms.Form.Close" qualify="true"/> method for each open form
      individually before calling the <see cref="System.Windows.Forms.Application.Exit"/> method.
      
   </note>
			<para>If the form is an MDI parent form, the <see cref="System.Windows.Forms.Form.Closing"/> events of all MDI child forms are
   raised before the MDI parent form's <see cref="System.Windows.Forms.Form.Closing"/> event is raised. In addition, the
<see cref="System.Windows.Forms.Form.Closed"/> events of 
   all MDI child forms are raised before the <see cref="System.Windows.Forms.Form.Closed"/> event of the MDI parent form is
   raised. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.IsMdiContainer"/>
		<seealso cref="System.Windows.Forms.Form.OnClosed"/>
		<seealso cref="System.Windows.Forms.Form.Load"/>
	</doc><doc for="Form.TabIndexChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Form.AcceptButton">
		<summary>
			<para>Gets or sets the button on the form that is clicked when
      the user presses the ENTER key.</para>
		</summary>
		<value>
			<para>An <see cref="System.Windows.Forms.IButtonControl"/> that represents the button to use as the accept button
   for the form.</para>
		</value>
		<remarks>
			<para>This property allows you to designate a default action
      to occur when the user presses the ENTER key in your application.
      The button assigned to this property must be an <see cref="System.Windows.Forms.IButtonControl"/>
      that is on the current form or located within a container on the current form.</para>
			<para>You can use this property to allow
      the user to quickly navigate a simple form by allowing them to simply press the
      ENTER key when they are finished instead of manually clicking the accept button
      with their mouse.</para>
			<para>The accept button might not be activated if the currently
      selected control on the form intercepts the ENTER
      key and processes it. For example, a multiline text box control allows the ENTER key
      to be pressed when it is selected to insert a new line character
      in the control.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.CancelButton"/>
		<seealso cref="System.Windows.Forms.IButtonControl"/>
	</doc>
	<doc for="Form.ActiveForm">
		<summary>
			<para> Gets the currently active form for this application.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Form"/>
that represents the currently active form, or <see langword="null"/>
if there is no
active form.</para>
		</value>
		<remarks>
			<para>You can use this method to obtain a reference to the
      currently active form
      to perform
      actions on the form or its controls.</para>
			<para>If your
      application is a multiple document interface (MDI) application, use
      the <see cref="System.Windows.Forms.Form.ActiveMdiChild"/> property to
      obtain the currently active MDI child form.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for requesting a form. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/>.</permission>
		<example>
			<para> The following example gets the active form and
      disables all the controls on the form. The example uses the <see cref="System.Windows.Forms.Control.Controls"/> collection of the form to
      iterate through each control on
      the form and disable the controls.</para>
			<codelink SampleID="Classic Form.ActiveForm Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.ActiveMdiChild"/>
	</doc>
	<doc for="Form.DialogResult">
		<summary>
			<para>Gets or sets the dialog result for the form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.DialogResult"/>
that represents the result of the form when
used as a dialog box.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value specified is outside the range of valid values.</exception>
		<remarks>
			<para>The dialog result of a form is the value that is
      returned from the form when it is displayed as a modal dialog.
      If the form is displayed as a dialog box, setting this property with a
      value from the <see cref="System.Windows.Forms.DialogResult"/> enumeration sets the value of the dialog result for
      the form, hides the modal dialog, and returns control to the calling form. This
      property is typically set by the <see cref="System.Windows.Forms.Button.DialogResult"/> property of a <see cref="System.Windows.Forms.Button"/>
      control on the form. When the user clicks the <see cref="System.Windows.Forms.Button"/> control, the value assigned to
      the <see cref="System.Windows.Forms.Button.DialogResult"/>
      property of the <see cref="System.Windows.Forms.Button"/> is assigned to the <see cref="System.Windows.Forms.Form.DialogResult"/>
      property of the
      form.</para>
			<para>When a form is displayed as a modal dialog box, clicking
      the Close button (the button with an <paramref name="X"/>
      in the top-right corner
      of the form) causes the form to be hidden and the <see cref="System.Windows.Forms.Form.DialogResult"/> property to be set to
      <see langword="DialogResult.Cancel"/> .
      The <see cref="System.Windows.Forms.Form.Close"/>
      method is not automatically called when the user clicks the Close
      button of a dialog box or sets the value of the <see cref="System.Windows.Forms.Form.DialogResult"/>
      property. Instead, the form is hidden and can be shown
      again without creating a new instance of the dialog box. Because of this behavior, you must
      call the <see cref="System.Windows.Forms.Control.Dispose"/> method of the form
      when the form is no longer needed by your application. </para>
			<para>You can use this property to determine how a dialog box
      is closed in order to properly process the actions performed
      in the dialog box.</para>
			<note type="note">
      You can override the value
      assigned to the <see cref="System.Windows.Forms.Form.DialogResult"/> property when the
      user clicks the Close button by setting the <see cref="System.Windows.Forms.Form.DialogResult"/> property in an event handler for the
      <see cref="System.Windows.Forms.Form.Closing"/> event of the form.
      
      </note>
			<note type="note">
      If a <see cref="System.Windows.Forms.Form"/> is
      displayed as a modeless window, the value returned by the <see cref="System.Windows.Forms.Form.DialogResult"/> property might not return
      a value assigned to the form because the form's resources are automatically released
      when the form is closed.
      
      </note>
		</remarks>
		<example>
			<para>The following example displays a form as a dialog box and
      displays a message box indicating whether the OK or Cancel button of the form
      was clicked by referencing the <see cref="System.Windows.Forms.Form.DialogResult"/> property of the form.</para>
			<codelink SampleID="Classic Form.DialogResult Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.DialogResult"/>
		<seealso cref="System.Windows.Forms.Button.DialogResult"/>
	</doc>
	<doc for="Form.MergedMenu">
		<summary>
			<para> Gets the merged menu for the
      form.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Windows.Forms.MainMenu"/> that represents the merged menu of the form.
   </para>
		</value>
		<remarks>
			<para> This property is primarily used when the form is a
      multiple document interface (MDI) child form that merges its menu with its
      parent form's menu. You can use this property to obtain the current menu
      structure in an MDI application to make changes or additions to the menu
      structure. To obtain the nonmerged <see cref="System.Windows.Forms.MainMenu"/> assigned to a form, use
      the <see cref="System.Windows.Forms.Form.Menu"/>
      
      property.
      </para>
		</remarks>
		<seealso cref="System.Windows.Forms.MainMenu"/>
		<seealso cref="System.Windows.Forms.MenuItem"/>
		<seealso cref="System.Windows.Forms.Form.Menu"/>
	</doc>
	<doc for="Form.Menu">
		<summary>
			<para> Gets or sets the <see cref="System.Windows.Forms.MainMenu"/>
that is displayed in the form.</para>
		</summary>
		<value>
			<para> A <see cref="System.Windows.Forms.MainMenu"/>
that represents the menu to display in the form.</para>
		</value>
		<remarks>
			<para> You can use this property to switch between complete
      menu sets at run time. For example, you can define one <see cref="System.Windows.Forms.MainMenu"/> to be
      displayed when your multiple document interface (MDI) form has no active MDI
      child forms and another <see cref="System.Windows.Forms.MainMenu"/> to display when a child window is displayed.
      You can also use a different <see cref="System.Windows.Forms.MainMenu"/> when specific conditions
      exist in your application that require displaying a different menu
      set.
      </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Windows.Forms.MainMenu"/>, assigns two <see cref="System.Windows.Forms.MenuItem"/> objects to the <see cref="System.Windows.Forms.MainMenu"/> and binds it to a form. This example assumes that you have a <see cref="System.Windows.Forms.Form"/> created that is named <c>Form1</c>.</para>
			<codelink SampleID="Classic MainMenu.MainMenu Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.MainMenu"/>
		<seealso cref="System.Windows.Forms.MenuItem"/>
		<seealso cref="System.Windows.Forms.Menu"/>
	</doc>
	<doc for="Form.Activated">
		<summary>
			<para>Occurs when the form is activated in code or by the user.</para>
		</summary>
		<remarks>
			<para>To activate a form at run time using code, call the
   <see cref="System.Windows.Forms.Form.Activate"/>method. You can use this event for
      tasks such as updating the contents of the form based on changes made to the
      form's data when the form was not activated.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.OnActivated"/>
	</doc>
	<doc for="Form.Deactivate">
		<summary>
			<para>Occurs when the form loses focus and is not the active form.</para>
		</summary>
		<remarks>
			<para>You can use this event to perform tasks such as updating another window in
      your application with data from the deactivated form.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.Activated"/>
		<seealso cref="System.Windows.Forms.Form.Activate"/>
		<seealso cref="System.Windows.Forms.Form.OnDeactivate"/>
	</doc>
	<doc for="Form.OnActivated">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.Activated"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnActivated"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Form.OnActivated"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Form.OnActivated"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.Activated"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.OnDeactivate">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.Deactivate"/> event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnDeactivate"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Form.OnDeactivate"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Form.OnDeactivate"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.Deactivate"/>
		<seealso cref="System.EventArgs"/>
	</doc>
	<doc for="Form.MdiChildren">
		<summary>
			<para>Gets an array of forms that represent the
      multiple document interface (MDI) child forms that are parented to this
      form.</para>
		</summary>
		<value>
			<para>An array of <see cref="System.Windows.Forms.Form"/> objects, each of which identifies one of this
   form's MDI child forms.</para>
		</value>
		<remarks>
			<para> This property allows you to obtain references to all
      the MDI child forms currently opened in an MDI parent form. To create an MDI
      child form, assign the <see cref="System.Windows.Forms.Form"/> that will be the MDI parent form to the <see cref="System.Windows.Forms.Form.MdiParent"/>
      property of the child form.</para>
			<para> You can use this property to loop through all the MDI child forms to
      perform operations such as saving data to a database when the MDI parent form
      closes or to update fields on the child forms based on actions performed in your
      application.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Windows.Forms.Form.MdiChildren"/> property to iterate through the list of 
      MDI child forms and add a <see cref="System.Windows.Forms.Button"/> control to each.</para>
			<codelink SampleID="Form.MDIChildren" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.IsMdiChild"/>
		<seealso cref="System.Windows.Forms.Form.IsMdiContainer"/>
		<seealso cref="System.Windows.Forms.Form.MdiParent"/>
	</doc>
	<doc for="Form.ControlBox">
		<summary>
			<para>Gets or sets a value indicating whether a control box is displayed in the
      caption bar of the form.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the form displays a control box in the upper left
   corner of the form; otherwise, <see langword="false"/>. The default is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Form.ControlBox"/> property is set to
<see langword="true"/>
, the control box is displayed in the upper-left corner of the caption bar.
The control box is where the user can click to access the system menu.</para>
			<note type="note">
   If your form does
   not display a control box, the form is not able to close using the ALT+F4
   keyboard combination.
   
</note>
			<note type="note">
   When set to <see langword="false"/>,
   the <see cref="System.Windows.Forms.Form.ControlBox"/> property
   has no effect on a Multiple Document Interface (MDI) child
   form that is displayed maximized at time of creation.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Windows.Forms.Form.ControlBox"/>, <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to create a form that does
   not have any border or caption box. The form created in this example could be
   used to create a splash screen for an application. The example assumes that the
   example's method is defined in a
   form class and called when the form is being initialized.</para>
			<codelink SampleID="Classic Form.ControlBox Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.MaximizeBox"/>
		<seealso cref="System.Windows.Forms.Form.MinimizeBox"/>
	</doc>
	<doc for="Form.CausesValidation">
		<summary>
			<para>Gets or sets a value indicating whether the form causes validation to be performed on any controls that require validation when it receives focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   form causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false"/>. The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Windows.Forms.Control.CausesValidation"/> property is set
   to <see langword="false"/> , the <see cref="System.Windows.Forms.Control.Validating"/> and <see cref="System.Windows.Forms.Control.Validated"/> events are suppressed.</para>
			<para>The <see cref="System.Windows.Forms.Control.CausesValidation"/> property value is typically set to <see langword="false"/>
for controls such as a Help button.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.Validating"/>
		<seealso cref="System.Windows.Forms.Control.Validated"/>
	</doc>
	<doc for="Form">
		<summary>
			<para>Represents a window or dialog box that makes up an application's user interface.</para>
		</summary>
		<remarks>
			<para>A <see cref="System.Windows.Forms.Form"/> is a representation of any window displayed in your application. The <see cref="System.Windows.Forms.Form"/> class can be used to create standard, tool, borderless, and floating windows. You can also use the <see cref="System.Windows.Forms.Form"/> class to create modal windows such as a dialog box. A special kind of form, the multiple document interface (MDI) form, can contain other forms called MDI child forms. An MDI form is created by setting the <see cref="System.Windows.Forms.Form.IsMdiContainer"/> property to <see langword="true"/>. MDI child forms are created by setting the <see cref="System.Windows.Forms.Form.MdiParent"/> property to the MDI parent form that will contain the child form.</para>
			<para>Using the properties available in the <see cref="System.Windows.Forms.Form"/> class, you can determine the appearance, size, color, and window management features of the window or dialog box you are creating. The <see cref="System.Windows.Forms.Control.Text"/> property allows you to specify the caption of the window in the title bar. The <see cref="System.Windows.Forms.Form.Size"/> and <see cref="System.Windows.Forms.Form.DesktopLocation"/> properties allow you to define the size and position of the window when it is displayed. You can use the <see cref="System.Windows.Forms.Control.ForeColor"/> color property to change the default foreground color of all controls placed on the form. The <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, and <see cref="System.Windows.Forms.Form.MaximizeBox"/> properties allow you to control whether the form can be minimized, maximized, or resized at run time.</para>
			<para>In addition to properties, you can use the methods of the class to manipulate a form. For example, you can use the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to show a form as a modal dialog box. You can use the <see cref="System.Windows.Forms.Form.SetDesktopLocation"/> method to position the form on the desktop.</para>
			<para>The events of the <see cref="System.Windows.Forms.Form"/> class allow you to respond to actions
performed on the form. You can use the <see cref="System.Windows.Forms.Form.Activated"/> event to perform operations such as updating the data displayed in the controls of the form when the form is activated.</para>
			<para>You can use a form as the starting class in your
   application by placing a method called <c>Main</c> in the class. In the <c>Main</c> method add
code to create and show the form. You will also need to add the <c>[STAThread]</c> attribute to the <c>Main</c> method in order for the form
to run. When the starting form is closed, the application is also closed.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of a <see cref="System.Windows.Forms.Form"/> and calls the <see cref="System.Windows.Forms.Form.ShowDialog"/> method to display the form as a dialog box. The example sets the <see cref="System.Windows.Forms.Form.FormBorderStyle"/>, <see cref="System.Windows.Forms.Form.AcceptButton"/>, <see cref="System.Windows.Forms.Form.CancelButton"/>, <see cref="System.Windows.Forms.Form.MinimizeBox"/>, <see cref="System.Windows.Forms.Form.MaximizeBox"/>, and <see cref="System.Windows.Forms.Form.StartPosition"/> properties to change the appearance
   and functionality of the form to a dialog box. The example also uses the
<see cref="System.Windows.Forms.Form.ControlCollection.Add"/> method of the form's <see cref="System.Windows.Forms.Control.Controls"/> collection to add two <see cref="System.Windows.Forms.Button"/> controls. The example uses the <see cref="System.Windows.Forms.Form.HelpButton"/> property to display a help button in the caption bar of the dialog box.</para>
			<codelink SampleID="Classic Form.AcceptButton Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Form.KeyPreview">
		<summary>
			<para> Gets or sets a value
      indicating whether the form will receive key events
      before the event is passed to the control that has focus.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the form will receive all key events;
<see langword="false"/> if the currently selected control on the form receives
   key events. The default is <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> When this property is set to
   <see langword="true"/>
   , the form will receive all <see cref="System.Windows.Forms.Control.KeyPress"/>, <see cref="System.Windows.Forms.Control.KeyDown"/>, and <see cref="System.Windows.Forms.Control.KeyUp"/>
   events. After the form's event handlers have completed processing the
   keystroke, the keystroke is then assigned to the control with focus. For
   example, if the <see cref="System.Windows.Forms.Form.KeyPreview"/> property is set to <see langword="true "/>and
   the currently selected control is a <see cref="System.Windows.Forms.TextBox"/>, after the keystroke is
   handled by the event-handling methods of the form the <see cref="System.Windows.Forms.TextBox"/> control will
   receive the key that was pressed. To handle keyboard events only at the form
   level and not allow controls to receive keyboard events, set the <see cref="System.Windows.Forms.KeyPressEventArgs.Handled" qualify="true"/> property in your form's <see cref="System.Windows.Forms.Control.KeyPress"/> event-handling method to
<see langword="true"/>
.</para>
			<para> You can use this property to process all keystrokes in your application and
   either handle the keystroke or call the appropriate control to handle the
   keystroke. For example, when an application uses function keys, you might want to
   process the keystrokes at the form level rather than writing code for each
   control that might receive keystroke events.
   </para>
			<note type="note">
   If a form has no visible or
   enabled controls, it automatically receives all keyboard events.
   
</note>
		</remarks>
		<seealso cref="System.Windows.Forms.Control.KeyPress"/>
		<seealso cref="System.Windows.Forms.Control.KeyDown"/>
		<seealso cref="System.Windows.Forms.Control.KeyUp"/>
	</doc>
	<doc for="Form.GetAutoScaleSize">
		<summary>
			<para>Gets the sized when autoscaling the form based on a specified font.</para>
		</summary>
		<param name="font">A <see cref="System.Drawing.Font"/> representing the font to determine the autoscaled base size of the form.</param>
		<returns>
			<para>A <see cref="System.Drawing.SizeF"/> representing the autoscaled size of the form.</para>
		</returns>
		<remarks>
			<para>You can use this method to determine the size a form would autoscale to for a
      specific font before applying the font to the form. If you want to determine the
      size a form is autoscaled to based on the font currently assigned to the form,
      use the <see cref="System.Windows.Forms.Form.AutoScaleBaseSize"/> property.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Form.AutoScaleBaseSize"/>
		<keyword term="scaling size of form"/>
		<keyword term="autoscaled size of form"/>
		<keyword term="automatic sizing"/>
	</doc>
	<doc for="Form.ShowDialog">
		<overload>
			<para>Shows the form as a modal dialog box.</para>
		</overload>
		<summary>
			<para>Shows the form as a modal dialog box with no owner window.</para>
		</summary>
		<returns>
			<para>One of the <see cref="System.Windows.Forms.DialogResult"/> values.</para>
		</returns>
		<exception cref="System.Exception"><para>The form specified in the <paramref name="owner"/> parameter is the same as the form being shown.</para><para>-or-</para><para>The form being shown is already visible.</para><para>-or-</para><para>The form being shown is disabled.</para><para>-or-</para><para>The form being shown is not a top-level window.</para><para>-or-</para><para>The form being shown as a dialog box is already a modal form.</para></exception>
		<remarks>
			<para> You can use this method to display a modal dialog box
      in your application. When this method is called, the code following it is not executed
      until after the dialog box is closed. The dialog box can be assigned one
      of the values of the <see cref="System.Windows.Forms.DialogResult"/> enumeration by assigning it to the <see cref="System.Windows.Forms.Button.DialogResult"/> property of a <see cref="System.Windows.Forms.Button"/> on the
      form or by setting the <see cref="System.Windows.Forms.Form.DialogResult"/> property of the form in code.
      This value is then returned by this method. You can use this return value to
      determine how to process the actions that occurred in the dialog box. For
      example, if the dialog box was closed and returned the
   <see langword="DialogResult.Cancel"/> value through this method, you could
      prevent code following the call to <see cref="System.Windows.Forms.Form.ShowDialog"/>
      from executing.</para>
			<para>When a form is displayed as a modal dialog box, clicking
      the close form button (the button with an "X" at the top right of the form)
      causes the form to be hidden and the <see cref="System.Windows.Forms.Form.DialogResult"/> property to be set
      to <see langword="DialogResult.Cancel"/> . Unlike modeless forms, the <see cref="System.Windows.Forms.Form.Close"/> method
      is not called by the .NET Framework when the user clicks the close form button
      of a dialog box or sets the value of the <see cref="System.Windows.Forms.Form.DialogResult"/>
      property. Instead the form is hidden and can be shown again without creating a
      new instance of the dialog box. Because a form displayed as a dialog box is not
      closed, you must call the <see cref="System.Windows.Forms.Control.Dispose"/> method of the form when the form
      is no longer needed by your application.</para>
			<para>This version of the <see cref="System.Windows.Forms.Form.ShowDialog"/> method does not
   specify a form or control as its owner. When this version is called, the
   currently active window is made the owner of the dialog box. If you want to
   specify a specific owner, use the other version of this method.</para>
		</remarks>
		<example>
			<para> The following example displays a form as a modal dialog box and
      reads the result of the dialog box before determining whether to read the value of
      a <see cref="System.Windows.Forms.TextBox"/> control on the dialog box form. This example
      assumes that a <see cref="System.Windows.Forms.Form"/> named <c>testDialog</c> is created and that it contains
   a <see cref="System.Windows.Forms.TextBox"/> control named <c>TextBox1</c>. Furthermore, the example assumes that code
in this example is contained and called from a different <see cref="System.Windows.Forms.Form"/> in
order to display <c>testDialog</c>
as a modal dialog box. The
example uses the version of <see cref="System.Windows.Forms.Form.ShowDialog"/>
that specifies an owner for the dialog box.</para>
			<codelink SampleID="Classic Form.ShowDialog Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.DialogResult"/>
		<keyword term="modal forms, ShowDialog method"/>
	</doc>
	<doc for="Form.AutoScroll">
		<summary>
			<para> Gets or sets a value indicating whether the form enables
      autoscrolling.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> to enable autoscrolling on the form; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.
   </para>
		</value>
		<remarks>
			<para> If this property is set to <see langword="true"/> , scroll bars are displayed on the
   form if any controls are located outside the form's client region. Additionally,
   when autoscrolling is on, the client area of the form automatically scrolls to
   make the control with input focus visible.
   </para>
			<para> You can use this property to prevent users from losing the ability to view
   controls when their video resolution settings are set to a low
   resolution.
   </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the 
   <see cref="System.Windows.Forms.Form.AutoScroll"/> property to enable the display of controls 
      that are outsize the client area of a form. The example creates a new form and
      adds a <see cref="System.Windows.Forms.Button"/> control to the form. The <see cref="System.Windows.Forms.Button"/>
      control is positioned outsize the client area of the new form. The <see cref="System.Windows.Forms.Form.AutoScroll"/>
      
      property is set to true to
      display scroll bars on the form to enable the user to scroll to
      the control. This example assumes that the method defined in this example is called from another form
      in an event handler or other method.</para>
			<codelink SampleID="Form.AutoScroll" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Form.WindowState">
		<summary>
			<para> Gets or sets the form's window state.
      </para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.FormWindowState"/> that represents the window
   state of the form. The default is <see langword="FormWindowState.Normal"/> .</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value specified is outside the range of valid values.</exception>
		<remarks>
			<para>Before a form is displayed, the <see cref="System.Windows.Forms.Form.WindowState"/> property is always set to
<see langword="FormWindowState.Normal"/>, regardless of its initial setting. This
   is reflected in the <see cref="System.Windows.Forms.Control.Height"/>, <see cref="System.Windows.Forms.Control.Left"/>, <see cref="System.Windows.Forms.Control.Top"/>,
   and <see cref="System.Windows.Forms.Control.Width"/> property settings. If a form is hidden after it
   has been shown, these properties reflect the previous state until the form is
   shown again, regardless of any changes made to the <see cref="System.Windows.Forms.Form.WindowState"/> property.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a top-most form. The example creates two forms, one that is maximized and one which will be displayed as a top-most form. The first form, named <c>bottomForm</c>, is displayed maximized, using the <see cref="System.Windows.Forms.Form.WindowState"/> property, to better demonstrate the abilities of the top-most form. The second form, named <c>topMostForm</c>, sets the <see cref="System.Windows.Forms.Form.TopMost"/> property to <see langword="true"/> to display the form as a top-most form. When this code is run, clicking on the maximized form will not cause the top-most form to be displayed below the maximized form. The example assumes that the method defined in the example is called from another form.</para>
			<codelink SampleID="Form.TopMost" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.FormWindowState"/>
	</doc>
	<doc for="Form.Dispose">
		<summary>
			<para>Disposes of the resources (other than memory) used by
      the <see cref="System.Windows.Forms.Form"/>
      .</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the 
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
releases all resources held by any managed objects that this <see cref="System.Windows.Forms.Form"/>
references. This method invokes the <see langword="Dispose()"/> method of each
referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see 
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>. </para>
		</remarks>
	</doc>
	<doc for="Form.AddOwnedForm">
		<summary>
			<para> Adds
      an owned form to this form.</para>
		</summary>
		<param name="ownedForm">The <see cref="System.Windows.Forms.Form"/> that this form will own.</param>
		<remarks>
			<para> The form assigned to the owner form remains owned
      until the <see cref="System.Windows.Forms.Form.RemoveOwnedForm"/> method is called. You can also make a form
      owned by another by setting the <see cref="System.Windows.Forms.Form.Owner"/> property with a reference to
      its owner form.</para>
			<para>When a form is owned by another form, it is minimized and closed with the
      owner form. For example, if <c>Form2</c> is owned by form <c>Form1</c>, if <c>Form1</c> is closed or
   minimized, <c>Form2</c> is also closed or minimized. Owned forms are also never
displayed behind their owner form. You can use owned forms for windows such as
find and replace windows, which should not be displayed behind the owner form
when the owner form is selected.</para>
			<note type="note">
   If the form is a multiple document
   interface (MDI) parent form, this property returns all forms that are displayed with
   the exception of any MDI child forms that are currently open. To obtain the MDI
   child forms opened in an MDI parent form, use the <see cref="System.Windows.Forms.Form.MdiChildren"/> property.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.Form.AddOwnedForm"/> method to display a form as an owned 
   form of another form. Once the owned form is shown, you can minimize its owner
   form and the owned form will minimize with it. The example assumes that the code
   in the example is called from another event or method of a form.</para>
			<codelink SampleID="Form.AddOwnedForm" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.OwnedForms"/>
		<seealso cref="System.Windows.Forms.Form.RemoveOwnedForm"/>
		<seealso cref="System.Windows.Forms.Form.Owner"/>
	</doc>
	<doc for="Form.TopLevel">
		<summary>
			<para>Gets or sets a value indicating whether to display the form as a top-level
      window.</para>
		</summary>
		<value>
			<para><see langword="true"/> to display the form as a top-level window; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<exception cref="System.Exception">A Multiple Document Interface (MDI) parent form must be a top-level window.</exception>
		<remarks>
			<para>A top-level form is a window that has no parent form, or
      whose parent form is the desktop window. Top-level windows are typically used as the main form
      in an application.</para>
		</remarks>
		<example>
			<para>The following code example use the <see cref="System.Windows.Forms.Form.Modal"/> property to determine if a form is displayed as a modal form. If it is not the <see cref="System.Windows.Forms.Form.FormBorderStyle"/> and <see cref="System.Windows.Forms.Form.TopLevel"/> properties are changed to make the form non-top-level form with a tool window border.</para>
			<codelink SampleID="Form.Modal" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.TopMost"/>
		<keyword term="top-level window display"/>
	</doc>
	<doc for="Form.ShowInTaskbar">
		<summary>
			<para>Gets or sets a value indicating whether the form is displayed
      in the Windows taskbar.</para>
		</summary>
		<value>
			<para><see langword="true"/> to display the form in the Windows taskbar at run time;
   otherwise, <see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>If a form is parented within another form, the parented form is not displayed in
      the Windows taskbar.</para>
			<para> You can use this property to prevent
      users from selecting your form through the Windows taskbar. For example, if you display a
      Find and Replace tool window in your application, you might want to prevent that
      window from being selected through the Windows taskbar since you would need both the
      application's main window and the Find and Replace tool window displayed in
      order to process searches appropriately.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.Form.ShowInTaskbar"/> property to make a dialog box that is not 
   displayed in the Windows taskbar.</para>
			<codelink SampleID="Form.ShowInTaskbar" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Form.SizeGripStyle">
		<summary>
			<para>Gets or sets the style of the size grip to display in the lower-right corner of the form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.SizeGripStyle"/> that represents the style of the size grip
   to display. The default is <see cref="System.Windows.Forms.SizeGripStyle.Auto" qualify="true"/>
			</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The value specified is outside the range of valid values.</exception>
		<remarks>
			<para> This property enables you to determine when the sizing grip
      is displayed on the form. You can set this property to display the sizing grip or have
      it automatically displayed based on the setting of the <see cref="System.Windows.Forms.Form.FormBorderStyle"/> property.</para>
		</remarks>
		<example>
			<codelink SampleID="Form.SizeGripStyle" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.FormBorderStyle"/>
		<seealso cref="System.Windows.Forms.SizeGripStyle"/>
	</doc>
	<doc for="Form.Closing">
		<summary>
			<para>Occurs when the form is closing.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Form.Closing"/>
event occurs as the form is being closed. When a form is closed, all resources
created within the object are released and the form is disposed. If
you cancel this event, the form remains opened. To cancel the closure of a form,
set the <see cref="System.ComponentModel.CancelEventArgs.Cancel"/> property of the <see cref="System.ComponentModel.CancelEventArgs"/> passed to your event handler to
<see langword="true"/>.</para>
			<para>When a form is displayed as a modal dialog box, clicking
   the Close button (the button with an <paramref name="X"/>
   at the upper-right corner of the form)
   causes the form to be hidden and the <see cref="System.Windows.Forms.Form.DialogResult"/> property to be set
   to <see langword="DialogResult.Cancel"/>. You can override the value assigned to the <see cref="System.Windows.Forms.Form.DialogResult"/> property when the user clicks
   the Close button by setting the <see cref="System.Windows.Forms.Form.DialogResult"/> property in an event
   handler for the <see cref="System.Windows.Forms.Form.Closing"/> event of
   the form. </para>
			<note type="note">
   When the <see cref="System.Windows.Forms.Form.Close"/> method is called on
   a <see cref="System.Windows.Forms.Form"/> displayed as a modeless window, you cannot
   call the <see cref="System.Windows.Forms.Control.Show"/> method
   to make the form visible, because
   the form's resources have already been released. To hide a form and then make it visible, use the
<see cref="System.Windows.Forms.Control.Hide" qualify="true"/> 
method.
</note>
			<note type="caution">
   The <see cref="System.Windows.Forms.Form.Closed" qualify="true"/> and <see cref="System.Windows.Forms.Form.Closing" qualify="true"/> events are not
   raised when the <see cref="System.Windows.Forms.Application.Exit" qualify="true"/> method is called to exit your
   application. If you have validation code in either of these events that must be
   executed, you should call the <see cref="System.Windows.Forms.Form.Close" qualify="true"/> method for each open form
   individually before calling the <see cref="System.Windows.Forms.Application.Exit"/> method.
   
</note>
			<para>If the form is an MDI parent form, the <see cref="System.Windows.Forms.Form.Closing"/> events of all MDI
child forms are raised before the MDI parent form's <see cref="System.Windows.Forms.Form.Closing"/> event is raised. In addition, the
<see cref="System.Windows.Forms.Form.Closed"/> events of all MDI child forms are 
raised before the <see cref="System.Windows.Forms.Form.Closed"/> event of the MDI parent form is
raised. Canceling the <see cref="System.Windows.Forms.Form.Closing"/> event of an MDI child form does not
prevent the <see cref="System.Windows.Forms.Form.Closing"/> event of the MDI parent form from
being raised. However, cancelling the event will set to <see langword="false"/>
the <see cref="System.Windows.Forms.ClosingEventArgs.Cancel" qualify="true"/>property of the
<see cref="System.Windows.Forms.ClosingEventArgs"/> that is passed as a parameter to the 
parent form. To force all MDI parent and child forms to
close, set the <see cref="System.Windows.Forms.ClosingEventArgs.Cancel"/> property to <see langword="false"/> in the MDI parent form. </para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Form.Closing" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.IsMdiContainer"/>
		<seealso cref="System.Windows.Forms.Form.OnClosing"/>
	</doc>
	<doc for="Form.OnClosing">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Form.Closing"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.Form.OnClosing"/> method also allows derived classes to
   handle the event without attaching a delegate. This is the preferred technique
   for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.Form.OnClosing"/> in a derived class, be sure to call the
   base class's <see cref="System.Windows.Forms.Form.OnClosing"/> method so that registered delegates
   receive the event.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="Form.Closing" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.Closing"/>
		<seealso cref="System.ComponentModel.CancelEventArgs"/>
	</doc>
	<doc for="Form.Opacity">
		<summary>
			<para> Gets or sets the opacity level of
      the form.</para>
		</summary>
		<value>
			<para>The level of opacity for the form. The default is 1.00.</para>
		</value>
		<remarks>
			<para>This property enables you to specify a level of transparency for the form and its controls.
      This property differs from transparency provided by the <see cref="System.Windows.Forms.Form.TransparencyKey"/> which only makes a form and its
      controls completely transparent if they are the same color as the value
      specified in the <see cref="System.Windows.Forms.Form.TransparencyKey"/>
      property. When this property is set to a value less than 100% (1.00), the entire
      form, including borders, is made more transparent. Setting this property to a
      value of 0% (0.00) makes the form completely invisible. You can use this
      property to provide different levels of transparency or to provide effects such
      as phasing a form in or out of view. For example, you can phase a form
      into view by setting the <see cref="System.Windows.Forms.Form.Opacity"/> property to a value of 0% (0.00) and
      gradually increasing the value until it reaches 100% (1.00).</para>
		</remarks>
		<platnote platform="Win2K, Win2KPro, Win2KSvr, Win2KADC, WinXP">This property has no effect on platforms that cannot display layered windows.
</platnote>
		<example>
			<para>The following example demonstrates how to create a form that
      is displayed with an opacity level of 75 percent. The example code creates a new
      form that is positioned in the center of the screen with an <see cref="System.Windows.Forms.Form.Opacity"/> property set to change the opacity level
      of the form. The example code also sets the <see cref="System.Windows.Forms.Form.Size"/> property to provide a larger sized form than
      the default size of the form. This example assumes that the method defined in
      this example is called from another form in an event handler or other
      method.</para>
			<codelink SampleID="Form.Opacity" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.TransparencyKey"/>
		<keyword term="opacity level for form"/>
	</doc>
	<doc for="Form.Size">
		<summary>
			<para> Gets or sets the size of the form.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.Drawing.Size"/> that represents the size of the form.
   </para>
		</value>
		<remarks>
			<para> This property allows you to set both the height and width of the form at the
      same time instead of setting the <see cref="System.Windows.Forms.Control.Height"/> and <see cref="System.Windows.Forms.Control.Width"/> properties individually. If you
      want to set the size and location of a form, you can use the <see cref="System.Windows.Forms.Form.DesktopBounds"/> property to size and locate the form based
      on desktop coordinates or use the <see cref="System.Windows.Forms.Control.Bounds"/> property of the <see cref="System.Windows.Forms.Control"/>
      class to set the size and location of the form based on
      screen coordinates.
      </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a form that is displayed with an opacity level of 75 percent. The example code creates a new form that is positioned in the center of the screen with an <see cref="System.Windows.Forms.Form.Opacity"/> property set to change the opacity level of the form. The example code also sets the <see cref="System.Windows.Forms.Form.Size"/> property to provide a larger sized form than the default size of the form. This example assumes that the method defined in this example is called from another form in an event handler or other method.</para>
			<codelink SampleID="Form.Opacity" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Control.Width"/>
		<seealso cref="System.Windows.Forms.Control.Height"/>
		<seealso cref="System.Windows.Forms.Form.DesktopBounds"/>
		<seealso cref="System.Windows.Forms.Control.Bounds"/>
	</doc>
	<doc for="Form.MdiParent">
		<summary>
			<para> Gets or sets the current multiple document
      interface (MDI) parent form of this form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Form"/> that represents the MDI parent form.</para>
		</value>
		<exception cref="System.Exception"><para>The <see cref="System.Windows.Forms.Form"/> assigned to this property is not marked as an MDI container.</para>
			<para>-or-</para>
			<para>The <see cref="System.Windows.Forms.Form"/> assigned to this property is both a child and an MDI container form.</para>
			<para>-or-</para>
			<para>The <see cref="System.Windows.Forms.Form"/> assigned to this property is located on a different thread.</para></exception>
		<remarks>
			<para>To create an MDI child form, assign the <see cref="System.Windows.Forms.Form"/> that will be the MDI parent
   form to the <see cref="System.Windows.Forms.Form.MdiParent"/> property
   of the child form. You can use this property from an MDI child form to obtain
   global information that all child forms need or to invoke methods that
   perform actions to all child forms.</para>
		</remarks>
		<permission cref="System.Security.Permissions.UIPermission">for requesting a form. Associated enumeration: <see cref="System.Security.Permissions.UIPermissionWindow.AllWindows" qualify="true"/>.</permission>
		<example>
			<para>The following example demonstrates how to create child forms in an MDI
      application. The example code creates a form with unique text to identify the
      child form. The example uses the <see cref="System.Windows.Forms.Form.MdiParent"/> property to specify that
      a form is a child form. This example assumes that the code in the example is
      called from a form that has its <see cref="System.Windows.Forms.Form.IsMdiContainer"/> property set to
   <see langword="true"/> and that the form has a private
      class level integer variable named <c>childCount</c> .</para>
			<codelink SampleID="Form.MDIParent" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.IsMdiChild"/>
		<seealso cref="System.Windows.Forms.Form.IsMdiContainer"/>
		<seealso cref="System.Windows.Forms.Form.MdiChildren"/>
	</doc>
	<doc for="Form.TopMost">
		<summary>
			<para>Gets or sets a value indicating whether the form should be displayed as the top-most
      form of your application.</para>
		</summary>
		<value>
			<para><see langword="true"/> to display the form as a top-most form; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> A top-most form is a form that overlaps all the
      other forms even if it is not the active or foreground form. Top-most forms are
      always displayed at the highest point in the Z-order of an application. You can use
      this method to create a form that is always displayed in your application, such
      as a Find and
      Replace tool window.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a
      top-most form. The example creates two forms, one that is maximized and one
      that will be displayed as a top-most form. The first form, named <c>bottomForm</c>, is
   displayed maximized, using the <see cref="System.Windows.Forms.Form.WindowState"/> property, to better
   demonstrate the abilities of the top-most form. The second
   form, named <c>topMostForm</c>, sets the <see cref="System.Windows.Forms.Form.TopMost"/> property to
<see langword="true"/> to display the form as a top-most form. When this code is 
run, clicking on the maximized form will not cause the top-most form to be
displayed below the maximized form. The example assumes that the method defined
in the example is called from another form.</para>
			<codelink SampleID="Form.TopMost" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.TopLevel"/>
	</doc>
	<doc for="Form.OwnedForms">
		<summary>
			<para>Gets an array of <see cref="System.Windows.Forms.Form"/> objects that represent all forms that are owned by this form.</para>
		</summary>
		<value>
			<para>A <see cref="System.Windows.Forms.Form"/> array that represents the owned forms for this form.</para>
		</value>
		<remarks>
			<para>This property returns an array that contains all forms
      that are owned by this form. To make a form owned by another form, call
      the <see cref="System.Windows.Forms.Form.AddOwnedForm"/> method. The form assigned to the owner form
      will remain owned until the <see cref="System.Windows.Forms.Form.RemoveOwnedForm"/> method is called.
      You can also make a form owned by another by setting the <see cref="System.Windows.Forms.Form.Owner"/>
      property with a reference to its owner form.</para>
			<para>When a form is owned by another form, it is minimized and closed with the owner
      form. For example, if <c>Form2</c> is owned by form <c>Form1</c>, if <c>Form1</c> is
   closed or minimized, <c>Form2</c> is also closed or minimized. Owned
forms are also never displayed behind their owner form. You can use owned
forms for windows such as find and replace windows, which should not be displayed behind the
owner form when the owner form is selected.</para>
			<note type="note">
   If the form is a multiple document
   interface (MDI) parent form, this property will return all forms that are
   displayed with the exception of any MDI child forms that are currently open. To
   obtain the MDI child forms opened in an MDI parent form, use the <see cref="System.Windows.Forms.Form.MdiChildren"/> property.
   
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Windows.Forms.Form.OwnedForms"/> property to modify all forms owned by the
   owner form. The first method in the example adds forms to the array of
   owned forms associated with the owned form. The second method loops through all owned forms and
   changes the caption. This example assumes that both methods are called by an
   event or other method of a form.</para>
			<codelink SampleID="Form.OwnedForms" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.AddOwnedForm"/>
		<seealso cref="System.Windows.Forms.Form.RemoveOwnedForm"/>
		<seealso cref="System.Windows.Forms.Form.Owner"/>
		<keyword term="owned forms for a form"/>
		<keyword term="forms,owned forms for a form"/>
	</doc>
	<doc for="Form.Modal">
		<summary>
			<para>Gets a value indicating whether this form is
      displayed modally.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the form is displayed
   modally;<see langword=" "/>otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>When a form is displayed modally, no input (keyboard or mouse click) can
      occur except to objects on the modal form. The program must hide or close a
      modal form (usually in response to some user action) before input to another
      form can occur. Forms that are displayed modally are typically used as dialog
      boxes in an application.</para>
			<para>You can use this property to determine whether a form that you have obtained from
      a method or property has been displayed modally.</para>
			<para>To display a form modally use the <see cref="System.Windows.Forms.Form.ShowDialog"/> method.</para>
		</remarks>
		<example>
			<para>The following code example uses the <see cref="System.Windows.Forms.Form.Modal"/> property to determine if a form is
   displayed as a modal form. If it is not the <see cref="System.Windows.Forms.Form.FormBorderStyle"/> and <see cref="System.Windows.Forms.Form.TopLevel"/> properties are changed to
   make the form a non-top-level form with a tool window border.</para>
			<codelink SampleID="Form.Modal" SnippetID="1"/>
		</example>
		<seealso cref="System.Windows.Forms.Form.ShowDialog"/>
	</doc>
</docs>
