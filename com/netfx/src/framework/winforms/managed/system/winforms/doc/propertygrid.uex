<docs>
	<doc for="PropertyGrid.BackColor">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.DrawFlatToolbar">
	</doc>
	<doc for="PropertyGrid.ShowFocusCues">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.IComPropertyBrowser.ComComponentNameChanged">
	</doc>
	<doc for="PropertyGrid.ClearTabs">
		<summary>
 Clears the tabs of the given scope or smaller.
 tabScope must be PropertyTabScope.Component or PropertyTabScope.Document.
 </summary>
	</doc>
	<doc for="PropertyGrid.OnChildMouseMove">
		<summary>
 We forward messages from several of our children
 to our mouse move so we can put up the spliter over their borders
 </summary>
	</doc>
	<doc for="PropertyGrid.OnChildMouseDown">
		<summary>
 We forward messages from several of our children
 to our mouse move so we can put up the spliter over their borders
 </summary>
	</doc>
	<doc for="PropertyGrid.IComPropertyBrowser.SaveState">
	</doc>
	<doc for="PropertyGrid.SinkPropertyNotifyEvents">
		<summary>
  Sinks the property notify events on all the objects we are currently
  browsing.

  See IPropertyNotifySink
 </summary>
	</doc>
	<doc for="PropertyGrid.SnappableControl">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.SnappableControl.GetOptimalHeight">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.SnappableControl.SnapHeightRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.SnappableControl.OnControlAdded">
		<summary>
			<para>Raises the ControlAdded event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.SnappableControl.OnControlAdded"/> method also allows derived 
    classes to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding <see cref="System.Windows.Forms.PropertyGrid.SnappableControl.OnControlAdded"/> in a derived class, be sure to call the base
    class's <see cref="System.Windows.Forms.PropertyGrid.SnappableControl.OnControlAdded"/> method so that registered
    delegates receive the event.
 </note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.SnappableControl.OnPaint">
		<summary>
			<para>Raises the Paint event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
       information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.SnappableControl.OnPaint"/> method also allows derived 
    classes to handle the event without attaching a delegate. This is the preferred
    technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
    When overriding <see cref="System.Windows.Forms.PropertyGrid.SnappableControl.OnPaint"/> in a derived class, be sure to call the base
    class's <see cref="System.Windows.Forms.PropertyGrid.SnappableControl.OnPaint"/> method so that registered
    delegates receive the event.
 </note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.GridToolBar.GridToolBar">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.GridToolBar.WndProc">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.owner">
		<summary>
			<para>[To be Supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.PropertyTabCollection">
		<summary>
			<para>[To be Supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.GridItemCollection.Empty">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.Dispose">
		<nodoc/>
		<summary>
			<para>Disposes of the resources (other than memory) used by
      the <see cref="System.Windows.Forms.PropertyGrid"/> .</para>
		</summary>
		<remarks>
			<para>Call <see cref="System.Windows.Forms.PropertyGrid.Dispose"/> when you are finished using
   the <see cref="System.Windows.Forms.PropertyGrid"/>. The <see cref="System.Windows.Forms.PropertyGrid.Dispose"/> method
   leaves the <see cref="System.Windows.Forms.PropertyGrid"/> in an unusable state. After calling
   <see cref="System.Windows.Forms.PropertyGrid.Dispose"/>, you must release all
   references to the <see cref="System.Windows.Forms.PropertyGrid"/> so the memory it was occupying can be
   reclaimed by garbage collection. </para>
			<note type="note">
   Always call <see cref="System.Windows.Forms.PropertyGrid.Dispose"/> before you release your last
   reference to the <see cref="System.Windows.Forms.PropertyGrid"/>. Otherwise, the resources the <see cref="System.Windows.Forms.PropertyGrid"/> is using will not be freed until garbage
   collection calls the <see cref="System.Windows.Forms.PropertyGrid"/> object's destructor.
   </note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnVisibleChanged">
		<nodoc/>
		<summary>
			<para>Raises the VisibleChanged event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnVisibleChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnVisibleChanged"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnVisibleChanged"/> method so that registered
   delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnSystemColorsChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.OnHandleCreated">
		<nodoc/>
		<summary>
			<para>Raises the HandleCreated event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnHandleCreated"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.PropertyGrid.OnHandleCreated"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnHandleCreated"/> method so that registered
   delegates receive the event.
   </note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnGotFocus">
		<nodoc/>
		<summary>
			<para>Raises the GotFocus event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnGotFocus"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.PropertyGrid.OnGotFocus"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnGotFocus"/> method so that registered
   delegates receive the event.
   </note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnResize">
		<nodoc/>
		<summary>
			<para>Raises the OnResize event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnResize"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
   <see cref="System.Windows.Forms.PropertyGrid.OnResize"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnResize"/> method so that registered
   delegates receive the event.
   </note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.Refresh">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.ExpandAllGridItems">
		<summary>
			<para>Expands all the categories in the <see cref="System.Windows.Forms.PropertyGrid"/> .</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.OnPaint">
		<nodoc/>
		<summary>
			<para>Raises the Paint event.</para>
		</summary>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnPaint"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnPaint"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnPaint"/> method so that registered
   delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.PropertySortChanged">
		<summary>
			<para> Occurs when the sort mode is changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.DropDownDone">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.ProcessDialogKey">
		<nodoc/>
		<summary>
			<para>This is a test.</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.WndProc">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.PropertyGrid1">
		<nodoc/>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.PropertyGrid"/> class with the specified
   service provider.</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.ServiceProvider">
		<nodoc/>
		<summary>
			<para>Gets or sets the IServiceProvider the PropertyGrid will use to obtain
      services. This may be null.</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.PropertyValueChanged">
		<summary>
			<para>Occurs when a property value changes.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.PropertyTabChanged">
		<summary>
			<para>Occurs when a property tab changes.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.CommandsForeColor">
		<summary>
			<para>Gets or sets the foreground color for the hot commands region.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is the default system color for control text.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.ViewBackColor">
		<summary>
			<para>Gets or sets a value indicating the background
      color in the grid.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is the default system color for windows.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.ViewForeColor">
		<summary>
			<para>Gets or sets a value indicating the color of the text in the grid.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is current system color for text in windows.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.OnSelectedGridItemChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.PropertyGrid.SelectedGridItemChanged"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.SelectedGridItemChangedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more 
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnSelectedGridItemChanged"/> method also allows derived 
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnSelectedGridItemChanged"/> in a derived class, be sure 
   to call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnSelectedGridItemChanged"/> method so
   that registered delegates receive the event.
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.GridItemCollection.GetEnumerator">
		<summary>
			<para>Returns an enumeration of all the grid items in the collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> for the <see cref="System.Windows.Forms.PropertyGrid.GridItemCollection" qualify="true"/> .</para>
		</returns>
		<remarks>
			<para>This method creates an enumerator that contains a 
      snapshot of the collection. You can change the collection by changing the
      enumerator; however, multiple enumerators can simultaneously access the same
      collection. Changing the collection (either directly or through another
      enumerator) can thus cause <see cref="System.Collections.IEnumerator.Current"/> or <see cref="System.Collections.IEnumerator.MoveNext"/>
      
      to throw an exception. </para>
			<para>Two enumerators created from the same collection at the same time can contain 
      different snapshots. </para>
			<para>Removing objects from the enumerator also removes them from the collection. </para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.Count">
		<summary>
			<para>Gets the number of property tabs in the collection.</para>
		</summary>
		<value>
			<para>The number of property tabs in the collection.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.GridItemCollection.GridItemCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.GridItemCollection"/> structure.</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.GridItemCollection.Count">
		<summary>
			<para>Gets the number of grid items in the collection.</para>
		</summary>
		<value>
			<para>The number of grid items in collection.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.GridItemCollection.this1">
		<summary>
			<para>Gets the grid item with the matching label.</para>
		</summary>
		<param name="label">A string value to match to a grid item label.</param>
		<value>
			<para>The grid item whose label matches the <paramref name="label"/> parameter.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.GridItemCollection">
		<summary>
			<para>Contains a collection of <see cref="System.Windows.Forms.GridItem"/> objects.</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.GridItemCollection.this">
		<overload>
			<para>Gets a <see cref="System.Windows.Forms.GridItem"/> from the collection.</para>
		</overload>
		<summary>
			<para> Gets the <see cref="System.Windows.Forms.GridItem"/> at the specified index.</para>
		</summary>
		<param name="index">The index of the attribute to return. </param>
		<value>
			<para>The GridItem at the specified index.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.Empty">
		<nodoc/>
		<summary>
			<para>[To be Supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.CommandsBackColor">
		<summary>
			<para>Gets or sets the background color of the hot commands region.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is the default system color for controls.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.OnFontChanged">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.DefaultSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.ShowEventsButton">
		<nodoc/>
		<summary>
   [To be supplied.]
   </summary>
	</doc>
	<doc for="PropertyGrid.OnMouseDown">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseDown"/> event.</para>
		</summary>
		<param name="me">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnMouseDown"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnMouseDown"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnMouseDown"/> method so that registered
   delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnMouseMove">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseMove"/> event.</para>
		</summary>
		<param name="me">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnMouseMove"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnMouseMove"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnMouseMove"/> method so that registered
   delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnMouseUp">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.Control.MouseUp"/> event.</para>
		</summary>
		<param name="me">A <see cref="System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnMouseUp"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnMouseUp"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnMouseUp"/> method so that registered
   delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnPropertyValueChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.PropertyGrid.PropertyValueChanged"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.PropertyValueChangedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnPropertyValueChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnPropertyValueChanged"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnPropertyValueChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnPropertyTabChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.PropertyGrid.PropertyTabChanged"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.PropertyTabChangedEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnPropertyTabChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnPropertyTabChanged"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnPropertyTabChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.CommandsVisible">
		<summary>
			<para> Gets a value indicating whether the commands pane is visible.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the commands pane is visible; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is true if the selected object has commands available and the <see cref="System.Windows.Forms.PropertyGrid.CommandsVisibleIfAvailable"/> property is <see langword="true"/>.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.CreatePropertyTab">
		<summary>
			<para>When overridden in a derived class, allows for the 
      creation of a <see cref="System.Windows.Forms.Design.PropertyTab"/>
      .</para>
		</summary>
		<param name="tabType">The type of tab to create.</param>
		<returns>
			<para>The newly created property tab. Returns
   <see langword="null"/> in its default implementation.</para>
		</returns>
		<remarks>
			<para>See <see cref="System.Windows.Forms.Design.PropertyTab"/> for more information on creating property tabs.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Design.PropertyTab"/>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.this">
		<summary>
			<para> Gets the <see cref="System.Windows.Forms.Design.PropertyTab"/> at the specified index.</para>
		</summary>
		<param name="index">The index of the <see cref="System.Windows.Forms.Design.PropertyTab"/> to return. </param>
		<value>
			<para>The <see cref="System.Windows.Forms.Design.PropertyTab"/> at the specified index.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.OnComComponentNameChanged">
		<nodoc/>
		<summary>
			<para>Raises the ComComponentNameChanged event.</para>
		</summary>
		<param name="e">A <see cref="System.ComponentModel.Design.ComponentRenameEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnComComponentNameChanged"/> method also allows derived classes
   to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnComComponentNameChanged"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnComComponentNameChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnNotifyPropertyValueUIItemsChanged">
		<nodoc/>
		<summary>
			<para>Raises the NotifyPropertyValueUIItemsChanged event.</para>
		</summary>
		<param name="sender">The source of the event.</param>
		<param name=" e">A <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnNotifyPropertyValueUIItemsChanged"/> method also
   allows derived classes to handle the event without attaching a delegate. This is
   the preferred technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnNotifyPropertyValueUIItemsChanged"/> in a derived class, be sure to
   call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnNotifyPropertyValueUIItemsChanged"/> method so that
   registered delegates receive the event.
   
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.Site">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.PropertyGrid">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.PropertyGrid"/> class.</para>
		</summary>
		<remarks>
			<para>To populate the grid, you must set the
   <see cref="System.Windows.Forms.PropertyGrid.SelectedObject"/> property.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.CanShowCommands">
		<summary>
			<para>Gets a value indicating whether the commands pane can be made visible for the
      currently selected objects. </para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the commands pane can be made
   visible; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is <see langword="true"/> if <see cref="System.Windows.Forms.PropertyGrid.CommandsVisibleIfAvailable"/> is <see langword="true"/> and the object has commands available.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.LineColor">
		<summary>
			<para>Gets or sets the color of the gridlines and borders.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is the default system color for scroll bars.</para>
		</value>
	</doc>
	<doc for="PropertyGrid.SelectedObject">
		<summary>
			<para> Gets or sets the object for which the grid displays
      properties.</para>
		</summary>
		<value>
			<para> The first object in the object list. If there
      is no currently selected object the return is <see langword="null"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.SelectedObject"/> property sets a single object
   into the grid to be browsed. If multiple objects are being browsed, this
   property returns the first one in the list. If no objects are selected,
<see langword="null"/>
is returned.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.SelectedGridItem">
		<summary>
			<para> Gets or sets the selected grid item.</para>
		</summary>
		<value>
			<para>The currently selected row in the property grid.</para>
		</value>
		<remarks>
			<para>Each <see cref="System.Windows.Forms.GridItem"/> corresponds to a property of the <see cref="System.Windows.Forms.PropertyGrid.SelectedObject"/>.</para>
			<para>You can use the returned <see cref="System.Windows.Forms.GridItem"/> object to view type 
information, the <see cref="System.ComponentModel.PropertyDescriptor"/>, the parent, and the children of the
selected object.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.LargeButtons">
		<summary>
			<para> Gets or sets a value indicating whether buttons appear in standard size or in large size.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if buttons on the control appear
   large; otherwise, <see langword="false"/>. The default is
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para> You can use this property to enhance accessibility. Large buttons are 32 by 32
      pixels rather than the standard 16 by 16 pixels.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.ToolbarVisible">
		<summary>
			<para> Gets or sets a value indicating whether the toolbar is visible.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the toolbar is visible; otherwise,
<see langword="false"/>. The 
   default is <see langword="true"/> .</para>
		</value>
	</doc>
	<doc for="PropertyGrid.SelectedGridItemChanged">
		<summary>
			<para> Occurs when the selected <see cref="System.Windows.Forms.GridItem"/> is changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.SelecteObjectsChanged">
		<summary>
			<para>Occurs when the objects selected by the <see cref="System.Windows.Forms.PropertyGrid.SelectedObjects"/> 
property have changed.</para>
		</summary>
		<remarks>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.CollapseAllGridItems">
		<summary>
			<para>Collapses all the categories in the <see cref="System.Windows.Forms.PropertyGrid"/> .</para>
		</summary>
		<remarks>
			<para>The method collapses the categories in the grid. Those
      categories that have grid items in the category have a plus sign (+)
      displayed next to that category. </para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.OnSelectedObjectsChanged">
		<summary>
			<para>Raises the <see cref="System.Windows.Forms.PropertyGrid.SelectedObjectsChanged"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<remarks>
			<para>Raising an event invokes the event handler through a delegate. For more
      information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.OnSelectedObjectsChanged"/> method also allows derived
   classes to handle the event without attaching a delegate. This is the preferred
   technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Windows.Forms.PropertyGrid.OnSelectedObjectsChanged"/> in a derived class, be sure 
   to call the base class's <see cref="System.Windows.Forms.PropertyGrid.OnSelectedObjectsChanged"/> method so
   that registered delegates receive the event.
</note>
		</remarks>
	</doc>
	<doc for="PropertyGrid.RefreshTabs">
		<summary>
			<para> Refreshes the property tabs of
      the specified scope.</para>
		</summary>
		<param name="tabScope">Either <see cref="System.ComponentModel.PropertyTabScope.Component" qualify="true"/> or <see cref="System.ComponentModel.PropertyTabScope.Document" qualify="true"/> .</param>
		<exception cref="T:System.ArgumentException">The <paramref name="tabScope"/> parameter is not <see cref="System.ComponentModel.PropertyTabScope.Component" qualify="true"/> or <see cref="System.ComponentModel.PropertyTabScope.Document" qualify="true"/> . </exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.PropertyGrid.RefreshTabs"/> method first deletes
   the property tabs of the specified scope, it then requires the
   objects and documents to rebuild the tabs.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.ResetSelectedProperty">
		<summary>
			<para> Resets the selected property to its default value.</para>
		</summary>
		<remarks>
			<para>Typically, the <see cref="System.Windows.Forms.PropertyGrid.ResetSelectedProperty"/> method is invoked by right clicking on the property. This method discards
   changes and attempts to reset the property to its default value.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.AddTabType1">
		<summary>
			<para>Adds a property tab of the specified type and with the
      specified scope to the collection.</para>
		</summary>
		<param name="propertyTabType">The property tab type to add to the grid.</param>
		<param name="tabScope">One of the <see cref="System.ComponentModel.PropertyTabScope"/> values.</param>
		<seealso cref="System.ComponentModel.PropertyTabScope"/>
	</doc>
	<doc for="PropertyGrid.PropertyTabCollection.AddTabType">
		<overload>
			<para>Adds a property tab to the collection.</para>
		</overload>
		<summary>
			<para>Adds a property tab of the specified type to the collection.</para>
		</summary>
		<param name="propertyTabType">The property tab type to add to the grid.</param>
		<remarks>
			<para>The property tab is added to the collection with a scope of <see cref="System.ComponentModel.PropertyTabScope.Global" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyTabScope"/>
	</doc>
	<doc for="PropertyGrid.OnHandleDestroyed">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="PropertyGrid.PropertyTabCollection">
		<summary>
			<para>Contains a collection of <see cref="System.Windows.Forms.Design.PropertyTab"/> objects.</para>
		</summary>
	</doc><doc for="PropertyGrid.PropertyTabCollection.RemoveTabType">
		<summary>
			<para>Removes the specified tab type from the collection.</para>
		</summary>
		<param name="propertyTabType">The tab type to remove from the collection.</param>
		<remarks>
			<para> Removing the tab from the collection removes it from the property
      grid.</para>
		</remarks>
	</doc><doc for="PropertyGrid.ScaleCore">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="PropertyGrid.CreateGridView">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="PropertyGrid.PropertyTabCollection.Clear">
		<summary>
			<para> Removes all the property tabs of
      the specified scope from the collection.</para>
		</summary>
		<param name="tabScope">The scope of the tabs to clear.</param>
		<exception cref="ArgumentException">The assigned value of the <paramref name="tabScope"/> parameter is less than <see cref="System.ComponentModel.PropertyTabScope.Document" qualify="true"/> .</exception>
		<remarks>
			<para>This method clears the tabs of the specified scope or smaller. The
   <paramref name="tabScope"/> parameter must be <see cref="System.ComponentModel.PropertyTabScope.Component" qualify="true"/> or <see cref="System.ComponentModel.PropertyTabScope.Document" qualify="true"/>
   .</para>
		</remarks>
	</doc><doc for="PropertyGrid.ContextMenuDefaultLocation">
		<summary>
			<para> Gets the default location for the shortcut menu. </para>
		</summary>
		<value>
			<para>The default location for the shortcut menu if the command is invoked. Typically, this
      is centered over the selected property.</para>
		</value>
		<remarks>
			<para>The shortcut menu location is the center of the active property label in
      the grid. You can use this information to position the shortcut menu when
      the menu is invoked using the keyboard.</para>
		</remarks>
	</doc><doc for="PropertyGrid.HelpBackColor">
		<summary>
			<para>Gets or sets the background color for the Help region.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is the default system color for controls.</para>
		</value>
	</doc><doc for="PropertyGrid.HelpForeColor">
		<summary>
			<para>Gets or sets the foreground color for the Help region.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Drawing.Color"/> values. The default is the default system color for control text.</para>
		</value>
	</doc><doc for="PropertyGrid.HelpVisible">
		<summary>
			<para>Gets or sets a value indicating whether the Help text is visible.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the help text is visible; otherwise,
<see langword="false"/>. The 
   default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para>This method allows the display of any available help text associated with the
      selected property in the grid.</para>
		</remarks>
	</doc><doc for="PropertyGrid.PropertyTabCollection.GetEnumerator">
		<summary>
			<para>Returns an enumeration of all the property tabs in the collection.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> for the
<see cref="System.Windows.Forms.PropertyGrid.PropertyTabCollection" qualify="true"/> .</para>
		</returns>
		<remarks>
			<para> This method creates an enumerator that
      contains a snapshot of the collection. You can change the collection by
      changing the enumerator; however, multiple enumerators can simultaneously access
      the same collection. Changing the collection (either directly or
      through another enumerator) can cause <see cref="System.Collections.IEnumerator.Current"/> or <see cref="System.Collections.IEnumerator.MoveNext"/> to
      throw an exception.</para>
			<para>Two enumerators created from the same collection at the same time can contain 
      different snapshots. Removing objects from the enumerator also removes them from
      the collection.</para>
		</remarks>
	</doc><doc for="PropertyGrid.SelectedObjects">
		<summary>
			<para>Gets or sets the currently selected objects.</para>
		</summary>
		<value>
			<para>An array of type <see cref="System.Object"/>. The default is an empty array.</para>
		</value>
		<exception cref="T:System.ArgumentException">One of the items in the array of objects had <see langword="null"/> value.</exception>
		<remarks>
			<para>The <see cref="System.Windows.Forms.PropertyGrid"/> only displays the
 properties that are common to all the objects that are in the array.
 Assigning an array to the <see cref="System.Windows.Forms.PropertyGrid.SelectedObjects"/> replaces the reference to
 any <see cref="System.Windows.Forms.PropertyGrid.SelectedObject"/> you might might make.</para>
		</remarks>
	</doc><doc for="PropertyGrid.IComPropertyBrowser.InPropertySet">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.IComPropertyBrowser.DropDownDone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.IComPropertyBrowser.EnsurePendingChangesCommitted">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.IComPropertyBrowser.HandleF4">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.IComPropertyBrowser.LoadState">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyTabCollection.ICollection.SyncRoot">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyTabCollection.ICollection.IsSynchronized">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyTabCollection.ICollection.CopyTo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid">
		<summary>
			<para>Provides a user interface for browsing the properties of an object.</para>
		</summary>
		<remarks>
			<para>To use the property grid, you create a new instance of
      the <see cref="System.Windows.Forms.PropertyGrid"/> class on a parent control and set <see cref="System.Windows.Forms.PropertyGrid.SelectedObject"/> to the object to display the properties
      for. </para>
			<para> The information displayed in the grid is a snapshot
      of the properties at the time the object is assigned. If a property
      value of the object specified by the <see cref="System.Windows.Forms.PropertyGrid.SelectedObject"/>
      is changed in code at run time, the
      new value is not displayed until an action is taken in the grid that causes the
      grid to refresh.</para>
			<para>The property tabs within the property grid appear as 
      buttons on the toolbar at the top of the <see cref="System.Windows.Forms.PropertyGrid"/> , and can vary
      in scope as defined in the <see cref="System.ComponentModel.PropertyTabScope"/>
      
      enumeration.</para>
			<para> The <see cref="System.Windows.Forms.PropertyGrid"/>
control is not initially presented in the toolbox in the development environment. You can add
a property grid to the toolbox, which allows you to drag and drop a <see cref="System.Windows.Forms.PropertyGrid"/> object onto your form. You can also define
an instance of <see cref="System.Windows.Forms.PropertyGrid"/>
by adding the appropriate code in
your source code.</para>
		</remarks>
		<example>
			<para>The following example illustrates creating a property
      grid and setting its location on a form. This example assumes a form of
      with a <see cref="System.Windows.Forms.TextBox"/> on it.</para>
			<codelink SampleID="Classic PropertyGrid Example" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.PropertyTabScope"/>
	</doc>
	<doc for="PropertyGrid.BrowsableAttributes">
		<summary>
			<para>Gets or sets the browsable attributes associated with the object that the property
      grid is attached to.</para>
		</summary>
		<value>
			<para>The collection of browsable attributes associated with
      the object.</para>
		</value>
		<remarks>
			<para> Only properties with attributes matching the values 
      specified are displayed in the <see cref="System.Windows.Forms.PropertyGrid"/>. The default is an <see cref="System.ComponentModel.AttributeCollection"/>
      containing only <see cref="System.ComponentModel.BrowsableAttribute.Yes" qualify="true"/>
      .</para>
			<para> Assigning an attribute collection that is
      empty or is <see langword="null"/> causes a new <see cref="System.ComponentModel.AttributeCollection"/> to be
      created with <see cref="System.ComponentModel.BrowsableAttribute.Yes" qualify="true"/> set.</para>
		</remarks>
		<seealso cref="System.ComponentModel.AttributeCollection"/>
		<seealso cref="System.ComponentModel.BrowsableAttribute"/>
	</doc>
	<doc for="PropertyGrid.DefaultTabType">
		<summary>
			<para> Gets the type of the default
      tab.</para>
		</summary>
		<value>
			<para>A <see cref="System.Type"/> representing the default tab.</para>
		</value>
		<remarks>
			<para>The default implementation of this property returns
   <see cref="System.Windows.Forms.Design.PropertyTab"/> . 
      Override this property to specify a modified version of the <see cref="System.Windows.Forms.Design.PropertyTab"/>
      .</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.UnsafeNativeMethods.IPropertyNotifySink.OnChanged"><nodoc/>
		<summary>
   Called when a property on an Ole32 Object changes.
   See IPropertyNotifySink::OnChanged
   </summary>
	</doc>
	<doc for="PropertyGrid.UnsafeNativeMethods.IPropertyNotifySink.OnRequestEdit"><nodoc/>
		<summary>
   Called when a property on an Ole32 Object that is tagged
   with "requestedit" is about to be edited.
   See IPropertyNotifySink::OnRequestEdit
   </summary>
	</doc>
	<doc for="PropertyGrid.PropertySort">
		<summary>
			<para>Gets or sets the type of sorting the <see cref="System.Windows.Forms.PropertyGrid"/> uses to display properties.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Windows.Forms.PropertySort"/> values. The default is <see cref="System.Windows.Forms.PropertySort.Categorized" qualify="true"/> or
<see cref="System.Windows.Forms.PropertySort.Alphabetical" qualify="true"/> .</para>
		</value>
		<remarks>
			<para>When you set the <see cref="System.Windows.Forms.PropertyGrid.PropertySort"/> property,
   the appearance of the property sort buttons on the grid changes to reflect
   the current state of the property. Setting <see cref="System.Windows.Forms.PropertyGrid.PropertySort"/>
   to <see cref="System.Windows.Forms.PropertySort.NoSort" qualify="true"/>
   causes the properties to be displayed in the order they were
   retrieved.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.PropertyTabs">
		<summary>
			<para>Gets the collection of property tabs that are displayed in the grid.</para>
		</summary>
		<value>
			<para> A <see cref="System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> 
containing the collection of <see cref="System.Windows.Forms.Design.PropertyTab"/> objects being
displayed by the <see cref="System.Windows.Forms.PropertyGrid"/> .</para>
		</value>
		<remarks>
			<para>All property tabs derive from the <see cref="System.Windows.Forms.Design.PropertyTab"/> class.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.SelectedTab">
		<summary>
			<para>Gets the currently selected property tab.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Design.PropertyTab"/> that is providing the selected view.</para>
		</value>
		<remarks>
			<para> All property tabs derive from the <see cref="System.Windows.Forms.Design.PropertyTab"/>
class.</para>
		</remarks>
	</doc>
	<doc for="PropertyGrid.AutoScroll">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.BackgroundImage">
		<hideinheritance/>
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.BackgroundImageChanged">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.Controls">
		<hideinheritance/>
		<nodoc/>
		<summary>
			<para>Collection of child controls.</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.ForeColor">
		<hideinheritance/>
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.ForeColorChanged">
		<hideinheritance/>
		<nodoc/>
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="PropertyGrid.CommandsVisibleIfAvailable">
		<summary>
			<para> Gets or sets a value indicating whether the commands pane is visible for objects
      that expose verbs.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the commands pane is visible; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
	</doc>
</docs>
