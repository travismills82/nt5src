<docs>
	<doc for="ResXResourceWriter.MLSerializedObjectMimeType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ResXResourceWriter.Resources">
		<summary>
     Demand creates and returns an XDO DataSet representing the 
     resources.
 </summary>
	</doc>
	<doc for="ResXResourceWriter.AddDataRow">
		<summary>
     Adds a new row to the Resources table. This helper is used because
     we want to always late bind to the columns for greater flexibility.
 </summary>
	</doc>
	<doc for="ResXResourceWriter.CreateEmptyResourceDataSet">
		<summary>
     Creates and empty resource data set. The schema for this data
     set is determined by the ResourceSchema field. The ResHeader table
     in the data set will be automatically filled in with default 
     values.
 </summary>
	</doc>
	<doc for="ResXResourceWriter.Finalize"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceWriter.ResXResourceWriter">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceWriter"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceWriter"/> class that
   writes the resources to the specified file.</para>
		</summary>
		<param name="fileName"> The output file name.</param>
	</doc><doc for="ResXResourceWriter.SoapSerializedObjectMimeType">
		<summary>
			<para>Specifies the content type for a SOAP object. This field is read-only.</para>
		</summary>
	</doc><doc for="ResXResourceWriter.DefaultSerializedObjectMimeType">
		<summary>
			<para>Specifies the default content type for an object. This 
      field is read-only.</para>
		</summary>
	</doc><doc for="ResXResourceWriter.ResMimeType">
		<summary>
			<para>Specifies the content type of a xml resource. This 
      field is read-only.</para>
		</summary>
	</doc><doc for="ResXResourceWriter.BinSerializedObjectMimeType">
		<summary>
			<para>Specifies the default content type for a 
      binary object. This field is read-only.</para>
		</summary>
	</doc><doc for="ResXResourceWriter.Close">
		<summary>
			<para>Releases all resources used by the <see cref="System.Resources.ResXResourceWriter"/> .</para>
		</summary>
		<remarks>
			<para>Calling this method is the equivalent of calling 
 <see cref="System.Resources.ResXResourceWriter.Dispose"/> 
 .</para>
		</remarks>
	</doc><doc for="ResXResourceWriter.ResourceSchema">
		<summary>
			<para>Specifies the schema to use in writing the xml file. This
 field is read-only.</para>
		</summary>
		<remarks>
			<para>The schema provides details on how to encode the resouces based on the 
 type of resouce being written. </para>
		</remarks>
	</doc><doc for="ResXResourceWriter">
		<summary>
			<para> Writes resources in an XML resource (.resx) file or an output
 stream.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Resources.ResXResourceWriter"/> writes resources in XML
 format. To write a binary resource file, use <see cref="System.Resources.ResourceWriter"/>
 .</para>
			<para> Resources are specified as name/value pairs using
 the <see cref="System.Resources.ResXResourceWriter.AddResource"/> method. Resource names are case-sensitive when
 used for lookups; but to more easily support authoring tools and help eliminate
 bugs, <see cref="System.Resources.ResXResourceWriter"/> does not allow a .resx file to have names that vary only by
 case.</para>
			<para>To create a .resx file, create a <see cref="System.Resources.ResXResourceWriter"/> with a unique file name, call <see cref="System.Resources.ResXResourceWriter.AddResource"/> at least once, call <see cref="System.Resources.ResXResourceWriter.Generate"/> to write the resources file
to disk, and then call <see cref="System.Resources.ResXResourceWriter.Close"/> to close the file.
Calling <see cref="System.Resources.ResXResourceWriter.Close"/>
will implicitly <see cref="System.Resources.ResXResourceWriter.Generate"/>
the file if required. </para>
			<para> The resources are not necessarily written in the same order they were
 added. </para>
			<para>For more information on the format of a .resx file, see <see topic="cpconresourcesinresxfileformat"/>.</para>
		</remarks>
		<seealso topic="cpconresourcesinresxfileformat"/>
	</doc><doc for="ResXResourceWriter.Version">
		<summary>
			<para> Specifies the version of the schema that the XML output conforms
 to. This field is read-only.</para>
		</summary>
	</doc><doc for="ResXResourceWriter.ResXResourceWriter1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceWriter"/> class that writes the resources to the specified stream object.</para>
		</summary>
		<param name="stream">The output stream.</param>
		<remarks>
			<note type="note">
 The <see cref="System.Resources.ResXResourceWriter.Close"/> method closes the stream you specify as a
 parameter. To write the resource to the stream without closing the stream,
 you must use the <see cref="System.Resources.ResXResourceWriter.Generate"/> method.
 
 </note>
		</remarks>
	</doc><doc for="ResXResourceWriter.AddResource">
		<overload>
			<para> Adds a resource to the list of resources to write.</para>
		</overload>
		<summary>
 Adds a named resource specified as a byte array to the
 list of resources to write.
</summary>
		<param name="name">The name of the resource.</param>
		<param name=" value">The value of the resource to add as an 8-bit unsigned integer array. </param>
		<remarks>
			<para>The resource is not written until <see cref="System.Resources.ResXResourceWriter.Generate"/> is called.</para>
			<para> The resource is serialized and stored in a binary format.</para>
		</remarks>
	</doc><doc for="ResXResourceWriter.AddResource1">
		<summary>
			<para> Adds a named resource specified as an object to the
 list of resources to write.</para>
		</summary>
		<param name="name">The name of the resource.</param>
		<param name=" value">The value of the resource.</param>
		<remarks>
			<para>The resource is not written until <see cref="System.Resources.ResXResourceWriter.Generate"/> is called. The resource that was added must be
 serializable.</para>
			<para>If the resource being added is a string, it is written as a
 string; otherwise, the resource is serialized and stored in a
 binary format.</para>
		</remarks>
	</doc><doc for="ResXResourceWriter.AddResource2">
		<summary>
			<para>Adds a string resource to the resources.</para>
		</summary>
		<param name="name">The name of the resource.</param>
		<param name=" value">The value of the resource.</param>
		<remarks>
			<para>The resource is not written until <see cref="System.Resources.ResXResourceWriter.Generate"/> is called. </para>
		</remarks>
	</doc><doc for="ResXResourceWriter.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Resources.ResXResourceWriter"/>.</para>
		</overload>
		<summary>
			<para>Releases all resources used by the <see cref="System.Resources.ResXResourceWriter"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.Resources.ResXResourceWriter.Dispose"/> allows the resources used
 by the <see cref="System.Resources.ResXResourceWriter"/> to be reallocated for other purposes. For more
 information about <see cref="System.Resources.ResXResourceWriter.Dispose"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
	</doc><doc for="ResXResourceWriter.ResXResourceWriter2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceWriter"/> class that writes to the specified <see cref="System.IO.TextWriter"/> object.</para>
		</summary>
		<param name="textWriter">The <see cref="System.IO.TextWriter"/> object to send the output to.</param>
	</doc><doc for="ResXResourceWriter.Dispose1">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Resources.ResXResourceWriter"/> and optionally releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemResourcesResXResourceWriterClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Resources.ResXResourceWriter"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
	</doc><doc for="ResXResourceWriter.Generate">
		<summary>
			<para> Writes all resources added by the <see cref="System.Resources.ResXResourceWriter.AddResource"/> method to the output file or stream.</para>
		</summary>
		<exception cref="T:System.InvalidOperationException">The resource has already been saved.</exception>
		<remarks>
			<para>Writes the resources to the file or stream.</para>
			<para><see cref="System.Resources.ResXResourceWriter.Generate"/>does not close the output 
   file or output stream. Instead, consider calling <see cref="System.Resources.ResXResourceWriter.Close"/>
   . <see cref="System.Resources.ResXResourceWriter.Generate"/> is useful when you need to create a resource file,
   but you do not want to close the output stream. <see cref="System.Resources.ResXResourceWriter.Generate"/> can only be called once. After calling <see cref="System.Resources.ResXResourceWriter.Generate"/>, all <see cref="System.Resources.IResourceWriter"/> methods other than <see cref="System.Resources.ResXResourceWriter.Close"/> will throw an exception.</para>
		</remarks>
	</doc></docs>
