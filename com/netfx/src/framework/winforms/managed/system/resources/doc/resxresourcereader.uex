<docs>
	<doc for="ResXResourceReader.ResData">
		<summary>
     Retrieves the resource data set. This will demand load it.
 </summary>
	</doc>
	<doc for="ResXResourceReader.Current">
		<summary>
     Retrieves the value of the currentDataRow resource.
 </summary>
	</doc>
	<doc for="ResXResourceReader.CurrentMimeType">
		<summary>
     Retrieves the "MimeType" column from the currentDataRow resource
 </summary>
	</doc>
	<doc for="ResXResourceReader.CurrentName">
		<summary>
     Retrieves the "Name" column from the currentDataRow resource
 </summary>
	</doc>
	<doc for="ResXResourceReader.CurrentType">
		<summary>
     Retrieves the "Type" column from the currentDataRow resource
 </summary>
	</doc>
	<doc for="ResXResourceReader.CurrentValue">
		<summary>
     Retrieves the "Value" column from the currentDataRow resource
 </summary>
	</doc>
	<doc for="ResXResourceReader.Key">
		<summary>
     Retrieves the name of the currentDataRow resource.
 </summary>
	</doc>
	<doc for="ResXResourceReader.Value">
		<summary>
     Retrieves the value of the currentDataRow resource.
 </summary>
	</doc>
	<doc for="ResXResourceReader.EnsureResData">
		<summary>
     Demand loads the resource data.
 </summary>
	</doc>
	<doc for="ResXResourceReader.MoveNext">
		<summary>
     Moves to the next resource in the set.
 </summary>
	</doc>
	<doc for="ResXResourceReader.Reset">
		<summary>
     Closes and files or streams being used by the reader.
 </summary>
	</doc>
	<doc for=".Finalize"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.ResXResourceReader2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceReader"/> class for the
 specified <see cref="System.IO.TextReader"/> .</para>
		</summary>
		<param name="reader">The character input stream for reading resources.</param>
	</doc><doc for="ResXResourceReader.ResXResourceReader3">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.ResXResourceReader4">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.ResXResourceReader5">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.ResXResourceReader1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceReader"/> class for the specified stream.</para>
		</summary>
		<param name="stream">The input stream for reading resources.</param>
		<remarks>
			<note type="note">
 The
 <see cref="System.Resources.ResXResourceReader.Dispose"/> and <see cref="System.Resources.ResXResourceReader.Close"/> methods do not close the stream you specify in this
 constructor.
 
 </note>
		</remarks>
	</doc><doc for="ResXResourceReader.FromFileContents1">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ResXResourceReader.FromFileContents">
		<overload>
			<para>Reads XML resources from the specified string.</para>
		</overload>
		<summary>
			<para> Reads XML resources from the specified string.</para>
		</summary>
		<param name="fileContents">A string containing XML resource-formatted information.</param>
		<returns>
			<para>A <see cref="System.Resources.ResXResourceReader"/> object.</para>
		</returns>
		<exception cref="System.Xml.XmlException">The <paramref name="fileContents"/> string is incorrectly formatted or is not valid XML.</exception>
		<remarks>
			<para> You can use this method when
      you construct your own XML resource output. This method can construct a reader for
      that output.</para>
		</remarks>
	</doc>
	<doc for="ResXResourceReader">
		<summary>
			<para>Enumerates XML resource (.resx) files and streams, and reads the sequential
      resource name and value pairs.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Resources.ResXResourceReader"/> provides a default implementation of the <see cref="System.Resources.IResourceReader"/> interface that reads resource information
   in an XML format. To read resource information from a binary resource
   format, use <see cref="System.Resources.ResourceReader"/> . </para>
			<para> You can use resource readers to read resource name and value pairs
   from .resx files. The resources can be enumerated by traversing the <see cref="System.Collections.IDictionaryEnumerator"/> returned by the <see cref="System.Resources.ResXResourceReader.GetEnumerator"/>
   method. You can use the methods provided by
   the <see cref="System.Collections.IDictionaryEnumerator"/> to advance to the next resource and
   read the name and value of each resource in the .resx file. </para>
			<para>For more information on the format of a .resx file, see <see topic="cpconresourcesinresxfileformat"/>.</para>
			<note type="note">
				<see cref="System.Collections.IEnumerable.GetEnumerator" qualify="true"/> returns an <see cref="System.Collections.IEnumerator"/> not <see cref="System.Collections.IDictionaryEnumerator"/>.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use a <see cref="System.Resources.ResXResourceReader"/> to iterate through the resources in a .resx 
   file. First, the <see cref="System.Resources.ResXResourceReader"/>
				<c>rsxr</c> is created for the file <c>items.resx</c>. Next, the <see cref="System.Resources.ResXResourceReader.GetEnumerator"/> method is used to create an <see cref="System.Collections.IDictionaryEnumerator"/> to iterate through the resources and display
the contents to the console.</para>
			<codelink SampleID="System.Resources.ResxresourceReader Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconresourcesinresxfileformat"/>
	</doc>
	<doc for="ResXResourceReader.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Resources.ResXResourceReader"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Resources.ResXResourceReader"/> and optionally releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method can be called by either the <see cref="System.Resources.ResXResourceReader.IDisposable.Dispose"/> method or the <see cref="System.Object.Finalize"/> method.
<see cref="System.Resources.ResXResourceReader.IDisposable.Dispose"/> invokes this 
   method with the <paramref name="disposing"/> parameter
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes this method with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Resources.ResXResourceReader"/> references. This method invokes the
<see langword="Dispose"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference objects
   that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
	</doc>
	<doc for="ResXResourceReader.ResXResourceReader">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceReader"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Resources.ResXResourceReader"/> class for the specified resource file.</para>
		</summary>
		<param name="fileName">The path of the resource file to read.</param>
		<example>
			<codelink SampleID="System.Resources.ResxresourceReader Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ResXResourceReader.Close">
		<summary>
			<para>Releases all resources used by the <see cref="System.Resources.ResXResourceReader"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.Resources.ResXResourceReader.Close"/> enables the resources used
   by the <see cref="System.Resources.ResXResourceReader"/> to be reallocated for other purposes. For more
   information about <see cref="System.Resources.ResXResourceReader.Close"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Resources.ResxresourceReader Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ResXResourceReader.GetEnumerator">
		<summary>
			<para>Returns an enumerator for this <see cref="System.Resources.ResXResourceReader"/> .</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IDictionaryEnumerator"/> for this <see cref="System.Resources.ResourceReader"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Resources.ResXResourceReader.GetEnumerator"/> method steps though the
   name/value pairs stored in the XML resource (.resx) file.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Resources.ResxresourceReader Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
