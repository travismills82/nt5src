<docs>
	<doc for="XmlSchema.InstanceNamespace">
		<summary>
			<para>Provides the instance namespace.</para>
		</summary>
	</doc>
	<doc for="XmlSchema.CanRead">
		<summary>
			<para>Reads the root element and verifies that the supplied XmlReader points at an XSD schema.</para>
		</summary>
		<param name="reader">XmlReader</param>
		<returns>
			<para>Returns true if it finds the <see langword="schema"/> element at the root 
   node. Returns false if the root node is not the <see langword="schema"/> element. </para>
		</returns>
	</doc>
	<doc for="XmlSchema.Includes">
		<summary>
			<para> Gets the collection of
      included and imported schemas.</para>
		</summary>
		<value>
			<para>A collection of the included and imported schemas.</para>
		</value>
	</doc><doc for="XmlSchema.Namespace">
		<summary>
			<para>Provides the namespace for validation.</para>
		</summary>
	</doc>
	<doc for="XmlSchema.Notations">
		<summary>
			<para>Gets the <see langword="XmlSchemaObjectTable"/> for all notations in the schema.</para>
		</summary>
		<value>
			<para>A collection of <see langword="Notations"/> .</para>
		</value>
	</doc>
	<doc for="XmlSchema">
		<summary>
			<para>Contains the definition of a schema. All XML Schema definition language (XSD) elements are children of the
   <see langword="schema"/> element. Represents the World Wide Web Consortium (W3C)
   <see langword="schema"/>
   element.</para>
		</summary>
		<remarks>
			<para>All XML Schema definition language (XSD) elements are children of the
   <see langword="schema"/> element.</para>
		</remarks>
		<example>
			<para>The following example creates a schema definition.</para>
			<codelink SampleID="Classic WebData XmlSchema Example" SnippetID="1"/>
			<para>The following XML file is generated for the preceding code example.</para>
			<codelink SampleID="Classic WebData XmlSchema Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlSchema.AttributeFormDefault">
		<summary>
			<para>Gets or sets the form for attributes declared in the target
      namespace of the schema.</para>
		</summary>
		<value>
			<para>The <see cref="System.Xml.Schema.XmlSchemaForm"/> value that indicates if attributes from the 
<see langword="targetNamespace"/> are required to be qualified with the 
   namespace. Default value is <see langword="Unqualified"/>
   .</para>
			<para>Optional.</para>
		</value>
		<remarks>
			<para>The value must be one of the <see langword="XmlSchemaForm"/> values shown in the following table.</para>
			<list type="table">
				<listheader>
					<term>Enum</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="Qualified"/></term>
					<description>Attributes from the target
      namespace must be qualified with the namespace
      prefix.</description>
				</item>
				<item>
					<term><see langword="Unqualified"/></term>
					<description>Attributes from the target namespace are not required to be qualified
   with the namespace prefix. </description>
				</item>
			</list>
			<para>This value is the global default for all attributes 
   declared in the <see langword="targetNamespace"/>
   . Individual attributes can override this
   setting for the local scope using the <see langword="form"/>
   attribute. </para>
		</remarks>
	</doc>
	<doc for="XmlSchema.AttributeGroups">
		<summary>
			<para>Gets the <see langword="XmlSchemaObjectTable"/> for all attribute groups in the
   schema, which holds the post-compilation value of
   the <see langword="AttributeGroups"/> property.</para>
		</summary>
		<value>
			<para>A collection of <see langword="AttributeGroups"/> . The post-compilation value of
   the <see langword="AttributeGroups "/>property.</para>
		</value>
	</doc>
	<doc for="XmlSchema.Attributes">
		<summary>
			<para>Gets the <see langword="XmlSchemaObjectTable"/>, for all attributes in the schema,
   which holds the post-compilation value of the <see langword="Attribute"/> property.</para>
		</summary>
		<value>
			<para>A collection of <see langword="Attributes"/>. The post-compilation value of the
<see langword="Attributes "/>property.</para>
		</value>
	</doc>
	<doc for="XmlSchema.Write1">
		<summary>
			<para> Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="stream"/> .</para>
		</summary>
		<param name="stream">The supplied data stream.</param>
		<param name=" namespaceManager">The XmlNamespaceManager.</param>
	</doc>
	<doc for="XmlSchema.Write2">
		<summary>
			<para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="TextWriter"/> .</para>
		</summary>
		<param name="writer">The supplied TextWriter.</param>
	</doc>
	<doc for="XmlSchema.Write3">
		<summary>
			<para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="TextWriter"/> .</para>
		</summary>
		<param name="writer">The supplied TextWriter.</param>
		<param name=" namespaceManager">The XmlNamespaceManager.</param>
	</doc>
	<doc for="XmlSchema.BlockDefault">
		<summary>
			<para> Gets or sets the <see langword="BlockDefault"/> attribute on element and complex type 
   elements in the <see langword="targetNamespace"/>
   of the schema. The <see langword="block"/> attribute prevents a complex
   type (or element) that has the specified
   type of derivation from being used in place of the inherited complex type (or
   element). The type of derivation.</para>
		</summary>
		<value>
			<para>Attribute for <see langword="BlockDefault"/> . The default value is
<see langword="XmlSchemaDerivationMethod.None"/> .</para>
			<para>Optional.</para>
		</value>
		<remarks>
			<para>This value can contain <see langword="#all"/> or a list that is a subset of extension, restriction, or
   substitution.</para>
			<list type="table">
				<listheader>
					<term>Enum</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="None"/></term>
					<description> By
      default, there are no restrictions on replacements of elements in this schema.</description>
				</item>
				<item>
					<term><see langword="Empty"/></term>
					<description> By
   default, there are no restrictions on replacements of elements in this schema.</description>
				</item>
				<item>
					<term><see langword="Substitution"/></term>
					<description> By
   default, elements in the schema cannot be replaced by a type derived by Substitution.</description>
				</item>
				<item>
					<term><see langword="Extension"/></term>
					<description> By
   default, elements in the schema cannot be replaced by a type derived by Extension.</description>
				</item>
				<item>
					<term><see langword="Restriction"/></term>
					<description> By
   default, elements in the schema cannot be replaced by a type derived by Restriction.</description>
				</item>
				<item>
					<term><see langword="All"/></term>
					<description><see langword="#all"/> . By
default, elements in the schema cannot be replaced by any type regardless of derivation method.</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="XmlSchema.FinalDefault">
		<summary>
			<para>Gets or sets the default value of
      the <see langword="final"/>
      attribute on element and complex type elements in the target namespace
      of this schema. The <see langword="final"/> attribute prevents the specified
      type of derivation of an element
      or complex type. The type of derivation.</para>
		</summary>
		<value>
			<para>Attribute for <see langword="FinalDefault"/> . The default value is
<see langword="XmlSchemaDerivationMethod.None"/> .</para>
			<para>Optional.</para>
		</value>
		<remarks>
			<para>This value can contain <see langword="#all"/> or a list that is a subset of extension or
   restriction. </para>
			<list type="table">
				<listheader>
					<term>Enum</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="None"/></term>
					<description>By
      default, there are no restrictions
      on type derivations in the schema.</description>
				</item>
				<item>
					<term><see langword="Empty"/></term>
					<description>By
   default, there are no restrictions
   on type derivations in the schema.</description>
				</item>
				<item>
					<term><see langword="Extension"/></term>
					<description> By 
   default, elements in this schema cannot be derived by Extension.
   Applies only to element and complex type elements.</description>
				</item>
				<item>
					<term><see langword="Restriction"/></term>
					<description> By
   default, elements in this schema cannot be derived by Restriction.</description>
				</item>
				<item>
					<term><see langword="Union"/></term>
					<description> By default, elements in this schema cannot
   be derived by Union. Applies only to simple types.</description>
				</item>
				<item>
					<term><see langword="List"/></term>
					<description> 
   By default, elements in this
   schema cannot be derived by List. Applies only to simple types.</description>
				</item>
				<item>
					<term><see langword="All"/></term>
					<description><see langword="#all"/> . By
default, elements in this schema cannot be derived by any method.</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="XmlSchema.ElementFormDefault">
		<summary>
			<para>Gets or sets the form for elements declared in the target
      namespace of the schema.</para>
		</summary>
		<value>
			<para>Attribute for <see langword="ElementFormDefault"/>. The 
   default value is <see langword="Unqualified"/> .</para>
			<para>Optional.</para>
		</value>
		<remarks>
			<para>The value must be one of
      the <see langword="XmlSchemaForm"/> values shown in the following table.</para>
			<list type="table">
				<listheader>
					<term>Enum</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="Qualified"/></term>
					<description>Elements from the target namespace must be
         qualified with the namespace prefix.</description>
				</item>
				<item>
					<term><see langword="Unqualified"/></term>
					<description> Elements from the target namespace are not
      required to be qualified with the namespace prefix. </description>
				</item>
			</list>
			<para>This value is the global default for all elements declared in
   the target namespace. Individual elements can override this setting for
   the local scope by using the <see langword="form"/>
   attribute. </para>
		</remarks>
	</doc>
	<doc for="XmlSchema.TargetNamespace">
		<summary>
			<para>Gets or sets the property for the schema target namespace. The URI reference of
      the namespace of this schema.</para>
		</summary>
		<value>
			<para>The target namespace. This is usually the 
   <see langword="targetNamespace"/> attribute.</para>
		</value>
		<remarks>
			<para>This is the namespace of all schema components in this
      schema as well as any schema included using the <see langword="include"/> element. Included
      schemas must either have the same target namespace as the
      containing schema or have no target namespace specified. </para>
		</remarks>
	</doc>
	<doc for="XmlSchema.Version">
		<summary>
			<para>Gets or sets the version of the schema.</para>
		</summary>
		<value>
			<para>The version of the schema. The default value is 
   <see langword="String.Empty"/> .</para>
		</value>
		<remarks>
			<para>Optional.</para>
		</remarks>
	</doc>
	<doc for="XmlSchema.Items">
		<summary>
			<para> Gets the <see langword="Items"/>
collection that is used to
add new element types at the <see langword="schema"/>
element level.</para>
		</summary>
		<value>
			<para>The <see langword="Items"/> collection for adding new element types.</para>
		</value>
		<remarks>
			<para>The collection of <see langword="XmlSchemaAnnotation"/>,
<see langword="XmlSchemaAttribute"/>, <see langword="XmlSchemaAttributeGroup"/>, 
<see langword="XmlSchemaComplexType"/>, <see langword="XmlSchemaSimpleType"/>, 
<see langword="XmlSchemaElement"/>, <see langword="XmlSchemaGroup"/>, or 
<see langword="XmlSchemaNotation"/> 
.</para>
		</remarks>
	</doc>
	<doc for="XmlSchema.SchemaTypes">
		<summary>
			<para>Gets the <see langword="XmlSchemaObjectTable"/>for all schema types in the schema,
   which holds the post-compilation value of the <see langword="SchemaTypes"/> property.</para>
		</summary>
		<value>
			<para>A collection of <see langword="SchemaTypes"/> . The post-compilation value of
   the <see langword="SchemaTypes "/>property.</para>
		</value>
	</doc>
	<doc for="XmlSchema.Elements">
		<summary>
			<para>Gets the <see langword="XmlSchemaObjectTable"/> for all elements in the schema,
   which holds the post-compilation value of the <see langword="Elements"/> property.</para>
		</summary>
		<value>
			<para>A collection of <see langword="Elements"/> . The post-compilation value of the
<see langword="Elements "/>property.</para>
		</value>
	</doc>
	<doc for="XmlSchema.Groups">
		<summary>
			<para>Gets the <see langword="XmlSchemaObjectTable"/> for all groups in the schema,
   which holds the post-compilation value of the <see langword="Groups"/> property.</para>
		</summary>
		<value>
			<para>A collection of <see langword="Groups"/> . The post-compilation value of the
<see langword="Groups"/> property.</para>
		</value>
	</doc>
	<doc for="XmlSchema.Write4">
		<summary>
			<para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="XmlWriter"/> .</para>
		</summary>
		<param name="writer">The supplied XmlWriter.</param>
	</doc>
	<doc for="XmlSchema.Write5">
		<summary>
			<para> Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="XmlWriter"/> .</para>
		</summary>
		<param name="writer">The supplied XmlWriter.</param>
		<param name=" namespaceManager">The XmlNamespaceManager.</param>
	</doc>
	<doc for="XmlSchema.Write">
		<overload>
			<para> Writes out an XML Schema definition language (XSD) schema.</para>
		</overload>
		<summary>
			<para>Writes the XML Schema to the supplied data stream.</para>
		</summary>
		<param name="stream">The supplied data stream.</param>
	</doc>
	<doc for="XmlSchema.UnhandledAttributes">
		<summary>
			<para>Gets and sets the qualified attributes, which do not belong to the schema
      target namespace.</para>
		</summary>
		<value>
			<para>Qualified attributes that belong to another target namespace.</para>
		</value>
	</doc>
	<doc for="XmlSchema.Compile">
		<overload>
			<para>Compiles the XML Schema definition language (XSD) Schema Object Model (SOM) 
      into schema information for validation. Used to check the syntactic and semantic
      structure of the programmatically-built SOM. Semantic validation checking is
      performed during compilation.</para>
		</overload>
		<summary>
			<para> Compiles the XML Schema definition language (XSD)
      Schema Object Model (SOM) into schema information for validation. Used to check
      the syntactic and semantic structure of the programmatically-built SOM. Semantic
      validation checking is performed during compilation.</para>
		</summary>
		<param name="validationEventHandler">The validation event handler that receives information about XML Schema validation errors.</param>
	</doc>
	<doc for="XmlSchema.IsCompiled">
		<summary>
			<para> Gets information that indicates if the schema has been compiled.</para>
		</summary>
		<value>
			<para><see langword="true"/>if schema has been compiled (if
   the<see langword="Compile"/> method has been called),
   otherwise <see langword="false"/> . The default value is
<see langword="false"/> .</para>
		</value>
	</doc>
	<doc for="XmlSchema.Read1">
		<summary>
			<para>Reads an XML Schema definition language (XSD) schema
      from the supplied stream.</para>
		</summary>
		<param name="stream">The supplied data stream.</param>
		<param name=" validationEventHandler">The validation event handler that receives information about XML Schema syntax errors.</param>
	</doc>
	<doc for="XmlSchema.XmlSchema">
		<summary>
			<para>Constructs a new, empty schema.</para>
		</summary>
	</doc>
	<doc for="XmlSchema.Read">
		<overload>
			<para>Reads an XML Schema definition language (XSD) schema.</para>
		</overload>
		<summary>
			<para>Reads an XML Schema definition language (XSD) from the supplied text reader.</para>
		</summary>
		<param name="reader">The supplied TextReader.</param>
		<param name=" validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors.</param>
	</doc>
	<doc for="XmlSchema.Read2">
		<summary>
			<para>Reads an XML Schema definition language (XSD) schema
      from the supplied reader.</para>
		</summary>
		<param name="reader">The supplied XmlReader.</param>
		<param name=" validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors.</param>
	</doc>
	<doc for="XmlSchema.Compile1">
		<summary>
			<para>Compiles the XML Schema definition language (XSD) Schema Object Model (SOM)
      into schema information for validation. Used to check the syntactic and semantic
      structure of the programmatically-built SOM. Semantic validation checking is
      performed during compilation.</para>
		</summary>
		<param name="validationEventHandler">The validation event handler that receives information about the XML Schema validation errors.</param>
		<param name=" resolver">The <see langword="XmlResolver"/> used to resolve to resolve namespaces referenced in <see langword="include"/> and <see langword="import"/> elements.</param>
		<remarks>
			<para>If the SOM references other namespaces through the
   <see langword="import"/> or <see langword="include"/> elements, the <see langword="XmlResolver"/> 
   is used to resolve these references. If the resolver is set to
<see langword="null"/> 
, this
indicates that the user does not care about resolving <see langword="import"/> or
<see langword="include"/> elements. In this case, the references are
not resolved. The resolver is not cached after the <see langword="Compile"/>
method completes.</para>
		</remarks>
	</doc>
	<doc for="XmlSchema.Id">
		<summary>
			<para>Gets or sets the string id.</para>
		</summary>
		<value>
			<para>The id of the string. The default value is 
   <see langword="null"/> .</para>
			<para>Optional.</para>
		</value>
	</doc>
</docs>
