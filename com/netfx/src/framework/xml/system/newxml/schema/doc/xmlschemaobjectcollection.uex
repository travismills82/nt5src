<docs>
	<doc for="XmlSchemaObjectCollection">
		<summary>
			<para>An object collection class to handle 
   <see langword="XmlSchemaObjects"/> when
      collections are returned from method calls.</para>
		</summary>
		<example>
			<para>See <see cref="System.Xml.Schema.XmlSchemaObject"/> for an example using this class.</para>
		</example>
	</doc><doc for="XmlSchemaObjectEnumerator">
		<summary>
			<para>An enumerator class to walk the 
   <see langword="XmlSchemaObjectCollection "/> 
   collections.</para>
		</summary>
	</doc><doc for="XmlSchemaObjectCollection.XmlSchemaObjectCollection">
		<overload>
			<para>Initializes a new instance of the <see langword="XmlSchemaObjectCollection"/> 
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlSchemaObjectCollection"/> class.</para>
		</summary>
	</doc>
	<doc for="XmlSchemaObjectEnumerator.IEnumerator.Reset">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSchemaObjectEnumerator.IEnumerator.MoveNext">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSchemaObjectEnumerator.IEnumerator.Current">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSchemaObjectEnumerator.Reset">
		<summary>
			<para>Resets the enumerator to the start of the collection. </para>
		</summary>
	</doc><doc for="XmlSchemaObjectCollection.GetEnumerator">
		<overload>
			<para>Returns an enumerator for iterating through the 
   <see langword="XmlSchemaObjects"/> contained in the 
   <see langword="XmlSchemaObjectCollection"/>.</para>
		</overload>
		<summary>
			<para>Returns an enumerator for iterating through the
   <see langword="XmlSchemaObjects"/> contained in the
   <see langword="XmlSchemaObjectCollection"/> .</para>
		</summary>
		<returns>
			<para>The iterator returns 
   <see langword="XmlSchemaObjectEnumerator"/>.</para>
		</returns>
	</doc>
	<doc for="XmlSchemaObjectEnumerator.MoveNext">
		<summary>
			<para>Moves to the next item in the collection.</para>
		</summary>
		<returns>
			<para><see langword="false"/> at the end of the collection.</para>
		</returns>
	</doc>
	<doc for="XmlSchemaObjectEnumerator.Current">
		<summary>
			<para>Returns the <see langword="XmlSchemaObject"/> for the position of
   the current enumerator.</para>
		</summary>
	</doc>
	<doc for="XmlSchemaObjectCollection.IndexOf">
		<summary>
			<para>Gets the index of the specified
   <see langword="XmlSchemaObject"/> within the collection<see langword=" "/>of the
      specified item.</para>
		</summary>
		<param name="item">The <see langword="XmlSchemaObject"/> .</param>
	</doc>
	<doc for="XmlSchemaObjectCollection.XmlSchemaObjectCollection1">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlSchemaObjectCollection"/> class that takes an
   <see langword="XmlSchemaObject"/> .</para>
		</summary>
		<param name="parent">The <see langword="XmlSchemaObject"/> .</param>
	</doc>
	<doc for="XmlSchemaObjectCollection.Add">
		<summary>
			<para> Adds an <see langword="XmlSchemaObject"/> to the
<see langword="XmlSchemaObjectCollection"/> .</para>
		</summary>
		<param name="item">The <see langword="XmlSchemaObject"/> .</param>
		<returns>
			<para>The index at which the item has been added.</para>
		</returns>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. <para>-or-</para>
			<para><paramref name="index"/> is greater than <see langword="Count"/>.</para></exception>
		<remarks>
			<para>If <see langword="Count"/> already equals the capacity, the capacity of list 
   is doubled by automatically reallocated the internal array and copying the
   existing elements to the new array before the new element is added. </para>
			<para>If <see langword="Count"/> is less than the capacity, this method is an 0(1) 
operation. If the capacity needs to be increased to accommodate the new element,
this method becomes an 0(n) operation, where n is <see langword="Count"/>.</para>
		</remarks>
	</doc>
	<doc for="XmlSchemaObjectCollection.CopyTo">
		<summary>
			<para>Copies all the <see langword="XmlSchemaObjects"/>
from the collection into the given array starting at the given index.</para>
		</summary>
		<param name="array"><para>The one-dimensional array that is the destination of the elements copied from the <see langword="XmlSchemaObjectCollection"/>. The array must have zero-based indexing. </para></param>
		<param name=" index"><para>The zero-based index in the array at which copying begins. </para></param>
		<exception cref="ArgumentNullException"><paramref name="array"/> is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
		<exception cref="ArgumentOutOfRangeException">index is less than zero.</exception>
		<exception cref="ArgumentException"><para>array is multidimensional.</para>
			<para>- or -</para>
			<para>index is equal to or greater than the length of array.</para>
			<para>- or -</para>
			<para>The number of elements in the source <see langword="XmlSchemaObject"/> is greater than the available space from index to the end of the destination array.</para></exception>
		<exception cref="InvalidCastException">The type of the source <see langword="XmlSchemaObject"/> cannot be cast automatically to the type of the destination array.</exception>
		<remarks>
			<para>The specified array must be of a compatible type.</para>
			<para>This method uses <see langword="Array.Copy"/> to copy the elements.</para>
		</remarks>
	</doc>
	<doc for="XmlSchemaObjectCollection.Remove">
		<summary>
			<para>Removes an <see langword="XmlSchemaObject "/>from the
<see langword="XmlSchemaObjectCollection"/> .</para>
		</summary>
		<param name="item">The <see langword="XmlSchemaObject"/>to remove.</param>
		<remarks>
			<para>This method performs a linear search; therefore, the average execution time 
      is proportional to <see langword="Count"/>. That is, this method is an
      O(<paramref name="n"/>) operation, where <paramref name="n"/> is <see langword="Count"/>.</para>
			<para>This method determines equality by calling 
   <see langword="Object.Equals"/>.</para>
   The elements that follow the removed element move up to occupy the vacated
   spot.
</remarks>
	</doc>
	<doc for="XmlSchemaObjectCollection.OnInsert">
		<summary>
			<para><see langword="OnInsert"/> is
   invoked before the standard <see langword="Insert"/> behavior. For
   more information, see <see langword="OnInsert"/> method <see cref="System.Collections.CollectionBase"/>
   .</para>
		</summary>
		<param name="index">The index of <see langword="XmlSchemaObject"/>.</param>
		<param name=" item">The item.</param>
	</doc>
	<doc for="XmlSchemaObjectCollection.OnSet">
		<summary>
			<para><see langword="OnSet"/> is invoked
   before the standard <see langword="Set"/> behavior. For more
   information, see OnSet method for <see cref="System.Collections.CollectionBase"/> .</para>
		</summary>
		<param name="index">The index of <see langword="XmlSchemaObject"/>.</param>
		<param name=" oldValue">The old value.</param>
		<param name=" newValue">The new value.</param>
	</doc>
	<doc for="XmlSchemaObjectCollection.OnClear">
		<summary>
			<para><see langword="OnClear"/> is invoked
   before the standard <see langword="Clear"/> behavior. For
   more information, see OnClear method for <see cref="System.Collections.CollectionBase"/> .</para>
		</summary>
	</doc>
	<doc for="XmlSchemaObjectCollection.OnRemove">
		<summary>
			<para><see langword="OnRemove"/> is
   invoked before the standard <see langword="Remove"/> behavior. For
   more information, see <see langword="OnRemove"/> method for <see cref="System.Collections.CollectionBase"/> .</para>
		</summary>
		<param name="index">The index of <see langword="XmlSchemaObject"/>.</param>
		<param name=" item">The item.</param>
	</doc>
	<doc for="XmlSchemaObjectCollection.Contains">
		<summary>
			<para>Indicates if the specified qualified name is located in the
   <see langword="XmlSchemaObjectCollection"/>.</para>
		</summary>
		<param name="item">The <see langword="XmlSchemaObject"/> .</param>
		<returns>
			<para><see langword="true"/> if the specified qualified name is in the
   collection; otherwise returns <see langword="false"/> . If null is supplied,
<see langword="false"/> is returned because there is no qualified name with a null 
   name. </para>
		</returns>
	</doc>
	<doc for="XmlSchemaObjectCollection.Insert">
		<summary>
			<para>Inserts an <see langword="XmlSchemaObject "/>to the
<see langword="XmlSchemaObjectCollection"/>.</para>
		</summary>
		<param name=" index">The zero-based index at which an item should be inserted.</param>
		<param name=" item">The <see langword="XmlSchemaObject"/> to insert.</param>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. <para>-or-</para>
			<para><paramref name="index"/> is greater than <see langword="Count"/>.</para></exception>
		<remarks>
			<para>If <see langword="Count"/> already
   equals the capacity, the capacity of the list is doubled by automatically
   reallocating the internal array before the new element is inserted.</para>
			<para>If <paramref name="index"/> is equal to <see langword="Count"/>, <paramref name="value"/> is added
to the end of <see langword="XmlSchemaObjectCollection"/>
.</para>
The elements that follow the insertion point move down
to accommodate the new element.
</remarks>
	</doc>
	<doc for="XmlSchemaObjectCollection.this">
		<summary>
			<para> Returns an <see langword="XmlSchemaObject"/> from the collection based on the specified integer index.</para>
		</summary>
		<param name="index">The index of the <see langword="XmlSchemaObject"/>.</param>
	</doc>
</docs>
