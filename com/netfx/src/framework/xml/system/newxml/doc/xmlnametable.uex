<docs>
	<doc for="XmlNameTable">
		<summary>
			<para> Table of atomized string objects.</para>
		</summary>
		<remarks>
			<para>Several classes, such as <see cref="System.Xml.XmlDocument"/> and
<see cref="System.Xml.XmlReader"/>use 
   the <see langword="XmlNameTable"/> class internally, to store attribute and element
   names. When an element or attribute name occurs multiple times in an XML
   document it is stored only once in the <see langword="XmlNameTable"/>
   
   .</para>
			<para>The names are stored as common language runtime object types. This enables 
   you to do object comparisons on these strings rather than a more expensive
   string comparison. These string objects are referred to as
   '<see langword="atomized"/>
				<see langword="strings"/>'.</para>
			<para><see langword="XmlNameTable"/> is implemented in the <see cref="System.Xml.NameTable"/> class.</para>
		</remarks>
		<example>
			<para> The following example compares two element
      names.</para>
			<codelink SampleID="NameTable" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.NameTable"/>
	</doc><doc for="XmlNameTable.Add1">
		<summary>
			<para>When overridden in a derived class, atomizes the
      specified string and adds it to the <see langword="XmlNameTable"/> .</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<param name="array">The name to add.</param>
		<returns>
			<para>The new atomized string or the existing one if it already
      exists.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlNameTable.Add">
		<overload>
			<para>When overridden in a derived class, atomizes the
      specified string and adds it to the <see langword="XmlNameTable"/> .</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</overload>
		<summary>
			<para>When overridden in a derived class, atomizes the
      specified string and adds it to the <see langword="XmlNameTable"/>.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<param name="array">The character array containing the name to add.</param>
		<param name="offset">Zero based index into the array specifying the first character of the name.</param>
		<param name="length">The number of characters in the name.</param>
		<returns>
			<para>The new atomized string or the existing one if it
      already exists. If length is zero, String.Empty is returned.</para>
		</returns>
		<exception cref="IndexOutOfRangeException"><para>0 &gt; <paramref name="offset"/></para>
			<para>-or-</para>
			<para><paramref name="offset"/> &gt;= <paramref name="array"/>.Length</para>
			<para>-or-</para>
			<para><paramref name="length"/> &gt; <paramref name="array"/>.Length</para>
			<para>The above conditions do not cause an exception to be thrown if <paramref name="length"/>=0.</para></exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="length"/> &lt; 0.</exception>
	</doc>
	<doc for="XmlNameTable.Get1">
		<summary>
			<para>When overridden in a derived class, gets the atomized
      string containing the same
      value as the specified string.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<param name="array">The name to look up.</param>
		<returns>
			<para>The atomized string or <see langword="null"/> if the
   string has not already been atomized.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlNameTable.Get">
		<overload>
			<para> When overridden in a derived class, gets the atomized
      string. </para>
			<para> For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/>
.</para>
		</overload>
		<summary>
			<para>When overridden in a derived class, gets the atomized
      string containing the
      same characters as the specified range of characters in the given array.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<param name="array">The character array containing the name to look up.</param>
		<param name="offset">The zero-based index into the array specifying the first character of the name.</param>
		<param name="length">The number of characters in the name.</param>
		<returns>
			<para> The atomized string or <see langword="null"/> if the
   string has not already been atomized. If <paramref name="length"/> is zero,
   String.Empty is returned.</para>
		</returns>
		<exception cref="IndexOutOfRangeException"><para>0 &gt; <paramref name="offset"/></para><para>-or-</para><para><paramref name="offset"/> &gt;= <paramref name="array"/>.Length</para><para>-or-</para><para><paramref name="length"/> &gt; <paramref name="array"/>.Length</para><para>The above conditions do not cause an exception to be thrown if <paramref name="length"/>=0.</para></exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="length"/> &lt; 0.</exception>
	</doc>
</docs>
