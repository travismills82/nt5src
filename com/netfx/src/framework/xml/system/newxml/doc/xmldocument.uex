<docs>
	<doc for="XmlDocument.Version">
		<summary>
			<para>Gets the XML version of the document.</para>
		</summary>
		<value>
			<para>Returns 1.0.</para>
		</value>
	</doc>
	<doc for="XmlDocument.Encoding">
		<summary>
			<para> Gets or sets the the encoding level 
       of the document.</para>
		</summary>
		<value>
			<para>A legal character encoding name. The most commonly supported character encoding names for XML are the following:</para>
			<list type="table">
				<listheader>
					<term>Category</term>
					<description>Encoding Names</description>
				</listheader>
				<item>
					<term> Unicode</term>
					<description>"UTF-8", "UTF-16"</description>
				</item>
				<item>
					<term> ISO 10646</term>
					<description>"ISO-10646-UCS-2", "ISO-10646-UCS-4"</description>
				</item>
				<item>
					<term> ISO 8859</term>
					<description>"ISO-8859-n" (where "n" is a digit from 1 to 9)</description>
				</item>
				<item>
					<term> JIS X-0208-1997</term>
					<description>"ISO-2022-JP", "Shift_JIS", "EUC-JP"</description>
				</item>
			</list>
			<para>This value is optional. XML version 1.0 specifies that if this attribute is not included, "UTF-8" or "UTF-16" encoding is assumed, depending on the format of the initial "&lt;?xml" string. </para>
		</value>
		<remarks>
			<para>Unlike most XML attributes, encoding attribute values are not case sensitive. This is because encoding character names follow ISO and Internet Assigned Numbers Authority (IANA) standards.</para>
		</remarks>
		<example>
			<para>The following example sets the encoding and standalone attribute
       values.
    </para>
			<codelink SampleID="Classic WebData XmlDocument.Encoding Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.Standalone">
		<summary>
			<para>Gets or sets the value of the standalone attribute.</para>
		</summary>
		<value>
			<para>"yes" if all entity declarations required by the XML document are contained within the document.</para>
			<para>"no" if an external DTD is required.</para>
		</value>
		<example>
			<para>The following example sets the encoding and standalone attribute
       values.
    </para>
			<codelink SampleID="Classic WebData XmlDocument.Encoding Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.NodeInserted">
		<summary>
			<para>Occurs when a node belonging to this
      document has been inserted into another node.</para>
		</summary>
		<remarks>
			<para>All nodes created by this document, whether
      or not they have been inserted into the document, are included in this event.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.NodeRemoved">
		<summary>
			<para>Occurs when a node belonging to this
      document has been removed from its parent.</para>
		</summary>
		<remarks>
			<para>All nodes created by this document, whether
      or not they have been inserted into the document, are included in this event.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.XmlDocument1">
		<summary>
			<para>Initializes a new instance of the 
   <see langword="XmlDocument"/> class with the specified <see cref="System.Xml.XmlNameTable"/> 
   .</para>
		</summary>
		<param name="nt">The <see langword="XmlNameTable"/> to use.</param>
	</doc>
	<doc for="XmlDocument.Implementation">
		<summary>
			<para> Gets the <see cref="System.Xml.XmlImplementation"/> object for the current document.
   </para>
		</summary>
		<value>
			<para> The <see langword="XmlImplementation"/> object for the current document.
   </para>
		</value>
		<remarks>
			<para>
				<see langword="XmlDocument"/> objects created from the
   same <see langword="XmlImplementation"/> share the same <see cref="System.Xml.XmlNameTable"/>
   . This allows users to compare
   attribute and element names as objects rather than strings.</para>
			<para>Although the <see langword="XmlDocument"/> objects share the same implementation, to move nodes
from one document to another you must use the <see cref="System.Xml.XmlDocument.ImportNode"/> method.</para>
		</remarks>
		<example>
			<para>The following example creates a new 
   <see langword="XmlDocument"/> 
   using another document's implementation.
   </para>
			<codelink SampleID="Classic WebData XmlDocument.Implementation Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.NodeType">
		<summary>
			<para> Gets the type of the current node.
      </para>
		</summary>
		<value>
			<para> The node type. For <see langword="XmlDocument"/> nodes, this value is
   XmlNodeType.Document.
   </para>
		</value>
		<seealso cref="System.Xml.XmlNodeType"/>
	</doc>
	<doc for="XmlDocument.OwnerDocument">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlDocument"/> to which the current node belongs.</para>
		</summary>
		<value>
			<para>For <see langword="XmlDocument"/> nodes (<see cref="System.Xml.XmlDocument.NodeType"/> equals XmlNodeType.Document), this
   property always returns <see langword="null"/>
   .</para>
		</value>
	</doc>
	<doc for="XmlDocument.DocumentElement">
		<summary>
			<para>Gets the root <see cref="System.Xml.XmlElement"/> for the document.</para>
		</summary>
		<value>
			<para>The <see langword="XmlElement"/> that represents
   the root of the XML document tree. If no root
   exists, <see langword="null"/>
   is returned.</para>
		</value>
		<example>
			<para> The following example displays the root element of the XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.DocumentElement Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.CreateAttribute1">
		<summary>
			<para>Creates an <see cref="XmlAttribute"/> with the specified qualified
   name and <see cref="System.Xml.XmlNode.NamespaceURI"/>
   .</para>
		</summary>
		<param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="System.Xml.XmlNode.Prefix"/> property will reflect the part of the name preceding the colon and the <see cref="System.Xml.XmlDocument.LocalName"/> property will reflect the part of the name after the colon.</param>
		<param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/ .</param>
		<returns>
			<para>The new <see langword="XmlAttribute"/> .</para>
		</returns>
		<remarks>
			<para>The <see langword="XmlAttribute"/> can be added to an <see cref="System.Xml.XmlElement"/> using the <see cref="System.Xml.XmlElement.SetAttributeNode"/> method.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.CreateAttribute">
		<overload>
			<para>Creates an <see cref="XmlAttribute"/> with the specified name.</para>
		</overload>
		<summary>
			<para>Creates an <see cref="XmlAttribute"/> with the specified <see cref="System.Xml.XmlDocument.Name"/> .</para>
		</summary>
		<param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="System.Xml.XmlNode.Prefix"/> property reflects the part of the name preceding the first colon and the <see cref="System.Xml.XmlDocument.LocalName"/> property reflects the part of the name following the first colon. The <see cref="System.Xml.XmlNode.NamespaceURI"/> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case <see langword="NamespaceURI"/> has a value of http://www.w3.org/2000/xmlns/ . </param>
		<returns>
			<para>The new <see langword="XmlAttribute"/> .</para>
		</returns>
		<remarks>
			<para>The <see langword="XmlAttribute"/> can be added to an <see cref="System.Xml.XmlElement"/>
using the <see cref="System.Xml.XmlElement.SetAttributeNode"/>
method.</para>
		</remarks>
		<example>
			<para> The following creates an attribute and
      adds it to an XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateAttribute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.CreateDocumentFragment">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlDocumentFragment"/> .</para>
		</summary>
		<returns>
			<para>The new <see langword="XmlDocumentFragment"/> .</para>
		</returns>
		<remarks>
			<para> 
      DocumentFragment nodes cannot be inserted into
      a document. However, you can insert children of the DocumentFragment node into a document.</para>
		</remarks>
		<example>
			<para>The following example adds new nodes to an XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateDocumentFragment Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.GetElementsByTagName1">
		<summary>
			<para>Returns an <see cref="XmlNodeList"/> containing a list of all descendant
   elements that match the specified <see cref="System.Xml.XmlDocument.LocalName"/> and <see cref="System.Xml.XmlNode.NamespaceURI"/>
   .</para>
		</summary>
		<param name="localName">The LocalName to match. The special value "*" matches all tags.</param>
		<param name="namespaceURI">NamespaceURI to match.</param>
		<returns>
			<para>An <see cref="XmlNodeList"/> containing a list of all matching nodes.</para>
		</returns>
		<remarks>
   The nodes are placed in the order in which they would be
   encountered in the document tree.
</remarks>
	</doc>
	<doc for="XmlDocument.NodeInserting">
		<summary>
			<para>Occurs when a node belonging to this document is
      about to be inserted into another node.</para>
		</summary>
		<remarks>
			<para>This event allows the user to do extra checking and, if 
      necessary, throw an exception to stop the operation. If an exception is thrown
      the <see langword="XmlDocument"/>
      returns to its original state.</para>
			<para>All nodes created by this document, whether or not they have been inserted
      into the document, are included in this event.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.NodeRemoving">
		<summary>
			<para> Occurs when a node belonging to this document
      is about to be removed from the document.</para>
		</summary>
		<remarks>
			<para>This event allows the user to do extra checking and, if 
      necessary, throw an exception to stop the operation. If an exception is thrown
      the <see langword="XmlDocument"/>
      returns to its original state.</para>
			<para>All nodes created by this document, whether or not they have been inserted
      into the document, are included in this event.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.NodeChanging">
		<summary>
			<para> Occurs when the <see cref="System.Xml.XmlNode.Value"/> of a node
   belonging to this document is about to be changed.</para>
		</summary>
		<remarks>
			<para>This event allows the user to do extra checking and, if 
      necessary, throw an exception to stop the operation. If an exception is thrown
      the <see langword="XmlDocument"/>
      returns
      to its original state. This event only applies to nodes that have a value.</para>
			<para>All nodes created by this document, whether or not they have been inserted
      into the document, are included in this event.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.NodeChanged">
		<summary>
			<para>Occurs when the <see cref="System.Xml.XmlNode.Value"/> of a node
   belonging to this document has been changed.</para>
		</summary>
		<remarks>
			<para> This event only applies to nodes that have a value.</para>
			<para>All nodes created by this document, whether
      or not they have been inserted into the document, are included in this event.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.XmlDocument2">
		<summary>
			<para>Initializes a new instance of the <see langword="XmlDocument"/> class with the 
   specified <see cref="System.Xml.XmlImplementation"/> .</para>
		</summary>
		<param name="imp">The <see langword="XmlImplementation"/> to use.</param>
	</doc><doc for="XmlDocument.Name">
		<summary>
			<para> Gets the qualified name of the node.
 </para>
		</summary>
		<value>
			<para> For
 <see langword="XmlDocument"/> nodes, the name is #document.
 </para>
		</value>
		<remarks>
			<para>The name returned depends on
 the <see cref="System.Xml.XmlDocument.NodeType"/> of the node. To see a table describing the
 name returned for each of the node types, see the <see cref="System.Xml.XmlNode.Name"/>
 property in the <see cref="System.Xml.XmlNode"/> class.</para>
		</remarks>
	</doc><doc for="XmlDocument.LocalName">
		<summary>
			<para> Gets the local name of the node.
 </para>
		</summary>
		<value>
			<para> For <see langword="XmlDocument"/>
nodes, the local name is #document.</para>
		</value>
		<remarks>
			<para>The local name returned depends on the <see cref="System.Xml.XmlDocument.NodeType"/> of the node. To see a table describing the local name returned for each of the node types, see the <see cref="System.Xml.XmlNode.LocalName"/> property in the <see cref="System.Xml.XmlNode"/> class.</para>
		</remarks>
	</doc><doc for="XmlDocument.OuterXml">
		<summary>
			<para>Gets the markup representing this node and all its children.</para>
		</summary>
		<value>
   The markup representing this node
   and all its children.
</value>
	</doc><doc for="XmlDocument.InnerXml">
		<summary>
			<para>Gets or sets the markup representing the children
      of the current node.</para>
		</summary>
		<value>
			<para>The markup of the children of the
      current node.</para>
		</value>
		<remarks>
			<para>Setting this property replaces the children of the node with the parsed
      contents of the given string. The parsing is done in the current namespace
      context.</para>
			<para><see langword="InnerXml"/> removes redundant namespace declarations. As
   a result, numerous cut and paste operations do not increase the size of your document
   with redundant namespace declarations. Consider the following XSL document: </para>
			<code>
&lt;xsl:stylesheet version="1.0" 
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:template match="stock"&gt;
         ...
    &lt;/xsl:template&gt;
 &lt;/xsl:stylesheet&gt;
</code>
			<para> The <see langword="InnerXml"/> property on the stylesheet node returns the
following string: </para>
			<code>
&lt;xsl:template match="stock" 
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
     ...
 &lt;/xsl:template&gt;
</code>
			<para> Notice the additional xmlns:xsl namespace declaration
   which is used to preserve the node identity. If you re-insert this inner XML
   string, you will get back your original document. In other
   words, <see langword="InnerXml"/>
   
   recognizes that the xmlns:xsl namespace
   declaration is redundant, given that the parent xsl:stylesheet element already has the xmlns:xsl namespace delcaration, and therefore
   removes it. </para>
			<para>If you move <see langword="InnerXml"/> from a document with no default namespace to a document
with a default namespace, the behavior is a little different. Consider the following XML
string: </para>
			<code>
&lt;test&gt;
     &lt;item&gt;123&lt;/item&gt;
 &lt;/test&gt;
</code>
			<para><see langword="InnerXml"/> returns a plain XML string with no namespace declarations: </para>
			<code>
&lt;item&gt;123&lt;/item&gt;
</code>
			<para> If you then insert this string into a document that does have a default namespace, such
   as the following: </para>
			<code>
&lt;test2 xmlns="urn:1"&gt;
 &lt;/test&gt;
</code>
			<para><see langword="InnerXml"/> parses the string in context, and the new nodes pick up
the urn:1 namespace. The result looks like this: </para>
			<code>
&lt;test2 xmlns="urn:1"&gt;
     &lt;item&gt;123&lt;/item&gt;
 &lt;/test&gt;
</code>
			<para>Now when you ask for the <see langword="InnerXml"/> you get back the following: </para>
			<code>
&lt;item xmlns="urn:1"&gt;123&lt;/item&gt;
</code>
			<para>If you explicitly want the inserted item to preserve the
   fact that it came from a document that had no namespace then you need
   to manually add an xmlns=
   ""
   declaration
   and insert the resulting string: </para>
			<code>
&lt;item xmlns=""&gt;123&lt;/item&gt;
</code>
			<para>The net effect of all this is as follows: </para>
			<list type="number"><item>
					<term>
      
      Cutting and pasting <see langword="InnerXml"/> among documents that do not use
      namespaces is clean and simple and does not create "xmlns" redundancy in your
      strings.</term>
				</item>
				<item>
					<term>
						<see langword="InnerXml"/> can also 
      be used to cut and paste between documents which have more than one namespace
      (i.e. XSL stylesheets).</term>
				</item>
				<item>
					<term>
      
      xmlns:xsl declarations automatically appear in your
      strings and disappear in your node hierarchies.</term>
				</item>
				<item>
					<term>
      
      In the case where you are moving
   <see langword="InnerXml"/>
   
   from a document that has no default namespace to a
   document that does have a default namespace, the new nodes will pick up
   the new default namespace.</term>
				</item>
			</list>
			<para> If <see langword="InnerXml"/> is set with text containing
entity references that are not currently defined in the document, the resulting
tree will contain empty EntityReference nodes. </para>
			<para> This property is a Microsoft extension to the Document Object Model 
   (DOM).</para>
		</remarks>
	</doc><doc for="XmlDocument.CreateSignificantWhitespace">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlSignificantWhitespace"/> node.</para>
		</summary>
		<param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9;</param>
		<returns>
			<para>A new <see langword="XmlSignificantWhitespace"/> node.</para>
		</returns>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model 
      (DOM). It is used when you want to manually format your document.</para>
			<para>Although this method creates the new object in the context
      of the document, it does not automatically add the new object to the document
      tree. To add the new object, you must explicitly call one of the node insert
      methods.</para>
		</remarks>
		<example>
			<para>The following example adds significant white space to the document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateSignificantWhitespace Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateWhitespace">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlWhitespace"/> node.</para>
		</summary>
		<param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9;</param>
		<returns>
			<para>A new <see langword="XmlWhitespace"/> node.</para>
		</returns>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model 
      (DOM). It is used when you want to manually format your document.</para>
			<para>Although this method creates the new object in the context
      of the document, it does not automatically add the new object to the document
      tree. To add the new object, you must explicitly call one of the node insert
      methods.</para>
		</remarks>
		<example>
			<para> The following example adds white space to the document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateWhitespace Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateAttribute2">
		<summary>
			<para>Creates an <see cref="XmlAttribute"/> with the specified <see cref="System.Xml.XmlNode.Prefix"/>,
<see cref="System.Xml.XmlDocument.LocalName"/>, and <see cref="System.Xml.XmlNode.NamespaceURI"/>
.</para>
		</summary>
		<param name="prefix">The prefix of the attribute (if any). String.Empty and <see langword="null"/> are equivalent.</param>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and <see langword="null"/> are equivalent. If <paramref name="prefix"/> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown.</param>
		<returns>
			<para>The new <see langword="XmlAttribute"/> .</para>
		</returns>
		<remarks>
			<para>The <see langword="XmlAttribute"/> can be added to
   an <see cref="System.Xml.XmlElement"/> using the <see cref="System.Xml.XmlElement.SetAttributeNode"/> method.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
	</doc><doc for="XmlDocument.CreateDefaultAttribute">
		<summary>
			<para>Creates a default attribute with the specified prefix,
      local name and namespace URI.</para>
		</summary>
		<param name="prefix">The prefix of the attribute (if any).</param>
		<param name=" localName">The local name of the attribute.</param>
		<param name=" namespaceURI">The namespace URI of the attribute (if any).</param>
		<returns>
			<para>The new <see cref="System.Xml.XmlAttribute"/>.</para>
		</returns>
		<remarks>
   This method is a Microsoft extension to the
   Document Object Model (DOM).
</remarks>
	</doc><doc for="XmlDocument.IsReadOnly">
		<summary>
			<para> Gets a value indicating whether the current node is read-only.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   current node is read-only; otherwise <see langword="false"/>.
<see langword="XmlDocument"/> nodes always return <see langword="false"/> .
   </para>
		</value>
		<remarks>
			<para> A read-only node is one whose properties, attributes,
      or children cannot be changed. You can remove a read-only node from
      the tree and insert it somewhere else.
      </para>
			<para>This property is a Microsoft extension to the Document Object Model 
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example shows how to use the
   <see langword="IsReadOnly"/> property.
      
   </para>
			<codelink SampleID="Classic WebData XmlDocument.IsReadOnly Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.WriteTo">
		<summary>
			<para>Saves the <see langword="XmlDocument"/> node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the
      Document Object Model (DOM). It is functionally equivalent to
      the <see cref="System.Xml.XmlNode.OuterXml"/> property.</para>
			<para>The <see cref="System.Xml.XmlDeclaration.Encoding" qualify="true"/> property determines the encoding that 
   is written out. If the <see langword="Encoding"/>
   property does not have a value, the <see langword="XmlDocument"/> is written out without an encoding
   attribute.</para>
		</remarks>
		<example>
			<para>The following example displays the document onscreen.
      </para>
			<codelink SampleID="Classic WebData XmlDocument.WriteTo Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.WriteContentTo">
		<summary>
			<para>Saves all the children of the
   <see langword="XmlDocument"/> node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="xw">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension
      to the Document Object Model (DOM). It is functionally equivalent to the <see cref="System.Xml.XmlDocument.InnerXml"/> property.</para>
			<para>The <see cref="System.Xml.XmlDeclaration.Encoding" qualify="true"/> property determines the encoding that 
   is written out. If the <see langword="Encoding"/> property does not have a value,
   the <see langword="XmlDocument"/> is written out without an
   encoding attribute.</para>
		</remarks>
		<example>
			<para>The following example displays the document onscreen. </para>
			<codelink SampleID="Classic WebData XmlDocument.WriteContentTo Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.GetElementById">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlElement"/> with the
   specified ID.</para>
		</summary>
		<param name="elementId">The attribute ID to match.</param>
		<returns>
			<para>The <see langword="XmlElement"/> with
   the matching ID or <see langword="null"/> if no matching element is found.</para>
		</returns>
		<remarks>
			<para> If the document has multiple elements with the
      matching ID, this method returns the first matching element in the document.
      </para>
			<note type="note">
      The DOM implementation must have information
      which defines which attributes are of type ID. Although attributes of type ID
      can be defined in either XSD
      schemas or DTDs,
      this version of the product
      only supports those defined in DTDs. Attributes with the name "ID" are
      not of type ID unless so defined in the DTD. Implementations where it is
      unknown whether the attributes are of type ID are expected to return
   <see langword="null"/>.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses the
   <see langword="GetElementById"/> method.</para>
			<codelink SampleID="Classic WebData XmlDocument.GetElementById Example" SnippetID="1"/>



The example uses the file, <see langword="ids.xml"/>, as 
input.
<codelink SampleID="Classic WebData XmlDocument.GetElementById Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlDocument.NameTable">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlNameTable"/> associated with this
   implementation.</para>
		</summary>
		<value>
			<para>An <see langword="XmlNameTable"/> enabling you to get the atomized version of a string within the
   document.</para>
		</value>
		<remarks>
			<para>Each <see langword="XmlDocument"/> object has a <see cref="System.Xml.NameTable"/>
object. Element and attribute names are stored in the
<see langword="NameTable"/> as atomized strings. This means that even if a 
name is referenced in the document multiple times it is stored only once in
the <see langword="NameTable"/>. For example, if the document had
multiple elements with the name "Customer", <see langword="NameTable"/>
returns the same object whenever it receives a request for that name. As a result,
users can write code using object comparisons on these strings rather than the
more expensive string comparisons.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<seealso cref="System.Xml.XmlNameTable"/>
	</doc><doc for="XmlDocument.CreateComment">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlComment"/> containing the specified data.</para>
		</summary>
		<param name="data">The content of the new <see langword="XmlComment"/> .</param>
		<returns>
			<para>The new <see langword="XmlComment"/> .</para>
		</returns>
		<remarks>
			<para> Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
			<para> According to the W3C Extensible Markup Language (XML) 1.0 recommendation
      (www.w3.org/TR/1998/REC-xml-19980210), Comment nodes are only allowed within Document, Element and EntityReference nodes, when the EntityReference node
      is not a child of an Attribute node.</para>
		</remarks>
		<example>
			<para> The following example creates a comment and adds it to an XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateComment Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateCDataSection">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlCDataSection"/> containing the specified data.</para>
		</summary>
		<param name="data">The content of the new <see langword="XmlCDataSection"/> .</param>
		<returns>
			<para>The new <see langword="XmlCDataSection"/> .</para>
		</returns>
		<remarks>
			<para> Although this method creates the new object in the
      context of the document, it does not automatically add the new
      object to the document tree. To
      add the new object, you must explicitly call one of the
      node insert methods.</para>
			<para> According to the W3C
      Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), CDataSection nodes are allowed
      within Element nodes and in EntityReference nodes when the EntityReference node
      is not a child of an Attribute node.</para>
		</remarks>
		<example>
			<para> The following example creates a CDATA node and adds it to the document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateCDataSection Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateElement">
		<overload>
			<para>Creates an <see cref="System.Xml.XmlElement"/> .</para>
		</overload>
		<summary>
			<para>Creates an element with the specified name.</para>
		</summary>
		<param name="name">The qualified name of the element. If the name contains a colon then the <see cref="System.Xml.XmlNode.Prefix"/> property reflects the part of the name preceding the colon and the <see cref="System.Xml.XmlDocument.LocalName"/> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'.</param>
		<returns>
			<para>The new <see langword="XmlElement"/> .</para>
		</returns>
		<remarks>
			<para> Note that the instance returned implements the
   <see langword="XmlElement"/>
   
   interface, so default attributes would be
   created directly on the returned object.</para>
			<para>Although this method creates the new object in the context
   of the document, it does not automatically add the new object to the document
   tree. To add the new object, you must explicitly call one of the node insert
   methods.</para>
			<para>According to the W3C Extensible
   Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element
   nodes are allowed within Document and Element
   nodes, and in EntityReference nodes when the EntityReference node is not a
   child of an Attribute node.</para>
		</remarks>
		<example>
			<para>The following example creates a new element and adds it to the document. </para>
			<codelink SampleID="Classic WebData XmlDocument.CreateElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateEntityReference">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlEntityReference"/> with the specified name.</para>
		</summary>
		<param name="name">The name of the entity reference.</param>
		<returns>
			<para>The new <see langword="XmlEntityReference"/> .</para>
		</returns>
		<exception cref="ArgumentException">The name is invalid (for example, names starting with'#' are invalid.)</exception>
		<remarks>
			<para> If the referenced entity is known, the child list of the
   <see langword="XmlEntityReference"/> node is made the same as that of the
      corresponding <see cref="System.Xml.XmlEntity"/>
      node.</para>
			<para>The namespaces used in the replacement text for the
      entity reference are bound at the time the parent of the entity reference node
      is first set (for example, when the entity reference node is inserted into the document). For
      example, given the following entity:</para>
			<para><c>&lt;!ENTITY a "&lt;b&gt;test&lt;/b&gt;"&gt;</c>
			</para>
			<para>If you call <see langword="CreateEntityReference(&quot;a&quot;)"/> you get back a single node of type
EntityReference with no children. If you append this node as a child of the
following node,</para>
			<para><c>&lt;item xmlns="urn:1"/&gt;</c>
			</para>
			<para>then, at the time of calling <see cref="System.Xml.XmlNode.AppendChild"/>, the parent of the newly created entity
reference node is set and the children are expanded in this namespace context.
The child element node <see langword="b"/> will have NamespaceURI equal to
<see langword="urn:1"/> 
. The child nodes
of the entity reference remain the same even if you move the entity reference
to a place in the document that has a different default namespace context. This
does not happen for existing entity reference nodes when you remove and insert
them or for entity references that you clone with <see cref="System.Xml.XmlDocument.CloneNode"/>
. It only happens for newly created
entity references.</para>
			<para>If the corresponding entity is not defined in the
   DocumentType when the entity reference node is added, because the entity
   reference is not defined, its
   only child node will be an empty
   text node.</para>
			<para> The built-in entities amp, lt, gt, apos, and quot are also allowed, and they
   will have a child text node with the appropriate expanded character value.</para>
			<para> Although this method creates the new object in the context
   of the document, it does not automatically add the new object to the document
   tree. To add the new object, you must explicitly call one of the node insert methods.</para>
			<para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation
   (www.w3.org/TR/1998/REC-xml-19980210), EntityReference nodes are only allowed
   within Element, Attribute and EntityReference nodes.</para>
		</remarks>
		<example>
			<para> The following example creates two entity reference nodes and inserts them into an XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateEntityReference Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateProcessingInstruction">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlProcessingInstruction"/> with the specified
   name and data.</para>
		</summary>
		<param name="target">The name of the processing instruction.</param>
		<param name="data">The data for the processing instruction.</param>
		<returns>
			<para>The new <see langword="XmlProcessingInstruction"/> .</para>
		</returns>
		<remarks>
			<para>Although this method creates the new object in the context
      of the document, it does not automatically add the new object to the document
      tree. To add the new object, you must explicitly call one of the node insert
      methods.</para>
   According to the
   W3C Extensible Markup Language (XML) 1.0 recommendation
   (www.w3.org/TR/1998/REC-xml-19980210), ProcessingInstruction nodes are
   only allowed
   within Document, Element, and EntityReference nodes,
   when the EntityReference node is
   not a child of an Attribute node.
</remarks>
		<example>
			<para> The following example creates a ProcessingInstruction node and adds it to the document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateProcessingInstruction Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateTextNode">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlText"/> with the specified text.</para>
		</summary>
		<param name="text">The text for the Text node.</param>
		<returns>
			<para>The new <see langword="XmlText"/> node.</para>
		</returns>
		<remarks>
			<para>Although this method creates the new object in the context
      of the document, it does not automatically add the new object to the document
      tree. To add the new object, you must explicitly call one of the node insert
      methods.</para>
   According to the W3C Extensible Markup Language (XML) 1.0 recommendation
   (www.w3.org/TR/1998/REC-xml-19980210), Text nodes are only allowed within
   Element, Attribute and EntityReference nodes.
</remarks>
		<example>
			<para>The following example creates a new element and adds it to the document. </para>
			<codelink SampleID="Classic WebData XmlDocument.CreateElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateNode1">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlNode"/> with the specified node type, <see cref="System.Xml.XmlDocument.Name"/>,
   and <see cref="System.Xml.XmlNode.NamespaceURI"/>
   .</para>
		</summary>
		<param name="nodeTypeString">String version of the <see cref="System.Xml.XmlNodeType"/> of the new node. This parameter must be one of the values listed in the table below.</param>
		<param name=" name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="System.Xml.XmlNode.Prefix"/> and <see cref="System.Xml.XmlDocument.LocalName"/> components.</param>
		<param name=" namespaceURI">The namespace URI of the new node.</param>
		<returns>
			<para>The new <see langword="XmlNode"/> .</para>
		</returns>
		<exception cref="ArgumentException">The name was not provided and the <see langword="XmlNodeType"/> requires a name; or <paramref name="nodeTypeString"/> is not one of the strings listed below.</exception>
		<remarks>
			<para>The <paramref name="nodeTypeString"/> parameter
   is case sensitive and must be one of the values in the following
   table.</para>
			<list type="table">
				<listheader>
					<term>nodeTypeString</term>
					<description>XmlNodeType</description>
				</listheader>
				<item>
					<term> attribute</term>
					<description>Attribute</description>
				</item>
				<item>
					<term> cdatasection</term>
					<description>CDATA</description>
				</item>
				<item>
					<term> comment</term>
					<description>Comment</description>
				</item>
				<item>
					<term> document</term>
					<description>Document</description>
				</item>
				<item>
					<term> documentfragment</term>
					<description>DocumentFragment</description>
				</item>
				<item>
					<term> documenttype</term>
					<description>DocumentType</description>
				</item>
				<item>
					<term> element</term>
					<description>Element</description>
				</item>
				<item>
					<term> entityreference</term>
					<description>EntityReference</description>
				</item>
				<item>
					<term> processinginstruction</term>
					<description>ProcessingInstruction</description>
				</item>
				<item>
					<term> significantwhitespace</term>
					<description>SignificantWhitespace</description>
				</item>
				<item>
					<term> text</term>
					<description>Text</description>
				</item>
				<item>
					<term> whitespace</term>
					<description>Whitespace</description>
				</item>
			</list>
			<para>Although this method creates the new object in the context of the document,
   it does not automatically add the new object to the document tree. To add the
   new object, you must explicitly call one of the node insert methods.</para>
			<para>The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to
   the W3C Extensible Markup Language (XML) 1.0 recommendation
   (www.w3.org/TR/1998/REC-xml-19980210 ).</para>
			<list type="table">
				<listheader>
					<term></term>
					<description>Document</description>
					<description>DocumentType</description>
					<description>XmlDeclaration</description>
					<description>Element</description>
					<description>Attribute</description>
					<description>Text</description>
					<description>CDATA</description>
					<description>Markup</description>
					<description>EntityReference</description>
				</listheader>
				<item>
					<term>
						<see langword="Document"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="DocumentType"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="XmlDeclaration"/></term>
					<description>yes*</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="Element"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes***</description>
				</item>
				<item>
					<term>
						<see langword="Attribute"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes****</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="Text"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
				</item>
				<item>
					<term>
						<see langword="CDATA"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes***</description>
				</item>
				<item>
					<term>
						<see langword="Markup**"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="EntityReference"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
				</item>
			</list>
			<para>* The XmlDeclaration node must be the first child of the Document node.</para>
			<para>** Markup includes ProcessingInstruction and Comment nodes.</para>
			<para>*** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
			<para> **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example creates a new element and inserts it into the
      document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateNode1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateNavigator">
		<overload>
			<para>Creates a new <see cref="System.Xml.XPath.XPathNavigator"/> object for navigating this document. 
   See <see cref="System.Xml.XmlNode.CreateNavigator" qualify="true"/> for an example using this method.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</overload>
		<summary>
			<para> Creates an <see cref="System.Xml.XPath.XPathNavigator"/> object
   for navigating this document.</para>
		</summary>
		<param name="node">The <see cref="System.Xml.XmlNode"/> you want the navigator initially positioned on.</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNavigator"/> object.</para>
		</returns>
	</doc><doc for="XmlDocument.CreateNode">
		<overload>
			<para>Creates an <see cref="System.Xml.XmlNode"/> .</para>
		</overload>
		<summary>
			<para>Creates a <see cref="System.Xml.XmlNode"/> with the specified <see cref="System.Xml.XmlNodeType"/>,
<see cref="System.Xml.XmlNode.Prefix"/>, <see cref="System.Xml.XmlDocument.Name"/>, and <see cref="System.Xml.XmlNode.NamespaceURI"/> .</para>
		</summary>
		<param name="type">The <see langword="XmlNodeType"/> of the new node.</param>
		<param name=" prefix">The prefix of the new node.</param>
		<param name=" name">The local name of the new node.</param>
		<param name=" namespaceURI">The namespace URI of the new node.</param>
		<returns>
			<para>The new <see langword="XmlNode"/> .</para>
		</returns>
		<exception cref="ArgumentException">The name was not provided and the <see langword="XmlNodeType"/> requires a name.</exception>
		<remarks>
			<para>Although this method creates the new object in the context
      of the document, it does not automatically add the new object to the document
      tree. To add the new object, you must explicitly call one of the node insert
      methods.</para>
			<para>The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to
      the W3C Extensible Markup Language (XML) 1.0 recommendation
      (www.w3.org/TR/1998/REC-xml-19980210 ).</para>
			<list type="table">
				<listheader>
					<term></term>
					<description>Document</description>
					<description>DocumentType</description>
					<description>XmlDeclaration</description>
					<description>Element</description>
					<description>Attribute</description>
					<description>Text</description>
					<description>CDATA</description>
					<description>Markup</description>
					<description>EntityReference</description>
				</listheader>
				<item>
					<term>
						<see langword="Document"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="DocumentType"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="XmlDeclaration"/></term>
					<description>yes*</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="Element"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes***</description>
				</item>
				<item>
					<term>
						<see langword="Attribute"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes****</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="Text"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
				</item>
				<item>
					<term>
						<see langword="CDATA"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes***</description>
				</item>
				<item>
					<term>
						<see langword="Markup**"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="EntityReference"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
				</item>
			</list>
			<para>* The XmlDeclaration node must be the first child of the Document node.</para>
			<para>** Markup includes ProcessingInstruction and Comment nodes.</para>
			<para>*** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
			<para> **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example adds a new element to the document.
      
   </para>
			<codelink SampleID="Classic WebData XmlDocument.CreateNode2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.CreateNode2">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlNode"/> with the specified <see cref="System.Xml.XmlNodeType"/>,
<see cref="System.Xml.XmlDocument.Name"/>, and <see cref="System.Xml.XmlNode.NamespaceURI"/>
.</para>
		</summary>
		<param name="type">The <see langword="XmlNodeType"/> of the new node.</param>
		<param name=" name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="System.Xml.XmlNode.Prefix"/> and <see cref="System.Xml.XmlDocument.LocalName"/> components.</param>
		<param name=" namespaceURI">The namespace URI of the new node.</param>
		<returns>
			<para>The new <see langword="XmlNode"/> .</para>
		</returns>
		<exception cref="ArgumentException">The name was not provided and the <see langword="XmlNodeType"/> requires a name.</exception>
		<remarks>
			<para>Although this method creates the new object in the context
      of the document, it does not automatically add the new object to the document
      tree. To add the new object, you must explicitly call one of the node insert
      methods.</para>
			<para>The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to
      the W3C Extensible Markup Language (XML) 1.0 recommendation
      (www.w3.org/TR/1998/REC-xml-19980210 ).</para>
			<list type="table">
				<listheader>
					<term></term>
					<description>Document</description>
					<description>DocumentType</description>
					<description>XmlDeclaration</description>
					<description>Element</description>
					<description>Attribute</description>
					<description>Text</description>
					<description>CDATA</description>
					<description>Markup</description>
					<description>EntityReference</description>
				</listheader>
				<item>
					<term>
						<see langword="Document"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="DocumentType"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="XmlDeclaration"/></term>
					<description>yes*</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="Element"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes***</description>
				</item>
				<item>
					<term>
						<see langword="Attribute"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes****</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="Text"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
				</item>
				<item>
					<term>
						<see langword="CDATA"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes***</description>
				</item>
				<item>
					<term>
						<see langword="Markup**"/></term>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
				</item>
				<item>
					<term>
						<see langword="EntityReference"/></term>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
					<description>yes</description>
					<description>no</description>
					<description>no</description>
					<description>no</description>
					<description>yes</description>
				</item>
			</list>
			<para>* The XmlDeclaration node must be the first child of the Document node.</para>
			<para>** Markup includes ProcessingInstruction and Comment nodes.</para>
			<para>*** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
			<para> **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example creates a new element and inserts it into an XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateNode Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlDocument.Save1">
		<summary>
			<para>Saves the XML document to the specified <see cref="System.IO.TextWriter"/> .</para>
		</summary>
		<param name="writer">The <see langword="TextWriter"/> to which you want to save.</param>
		<exception cref="XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		<remarks>
			<para>The encoding on the <see langword="TextWriter"/> determines the encoding that is
   written out (The encoding of the XmlDeclaration node is replaced by the
   encoding of the <see langword="TextWriter"/>
   ). If there was no encoding
   specified on the <see langword="TextWriter"/>, the <see langword="XmlDocument"/>
   is saved without an encoding attribute.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.CloneNode">
		<summary>
			<para>Creates a duplicate of this node.</para>
		</summary>
		<param name="deep"><see langword="true"/>to recursively clone the subtree under the specified node; <see langword="false"/> to clone only the node itself.</param>
		<returns>
			<para>The cloned <see langword="XmlDocument"/> node.</para>
		</returns>
		<remarks>
			<para> This method serves as a copy constructor for
      nodes. The cloned node has no parent (<see cref="System.Xml.XmlNode.ParentNode"/>
      returns <see langword="null"/>
      ).</para>
			<para>If <paramref name="deep"/> is <see langword="true"/>, the cloned node includes all the
   child nodes, otherwise only the <see langword="XmlDocument"/> node
   is cloned. See the <see cref="System.Xml.XmlNode.CloneNode" qualify="true"/> see how this method behaves on other node types. </para>
		</remarks>
		<example>
			<para> The following example shows the difference between a deep and shallow clone.</para>
			<codelink SampleID="Classic WebData XmlDocument.CloneNode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.PreserveWhitespace">
		<summary>
			<para>Gets or sets a value indicating whether to preserve white space.</para>
		</summary>
		<value>
			<para><see langword="true"/> to preserve white space; otherwise 
<see langword="false"/>. The default is <see langword="false"/> . </para>
		</value>
		<remarks>
			<para>This property determines how white space is handled during the load and save 
      process. </para>
			<para>If <see langword="PreserveWhitespace"/> is <see langword="true"/> before 
<see cref="System.Xml.XmlDocument.Load"/> or <see cref="System.Xml.XmlDocument.LoadXml"/> is called, white space 
   nodes are preserved; otherwise, if this property is <see langword="false"/>,
   significant white space is preserved, white space is not.</para>
			<para>If <see langword="PreserveWhitespace"/> is <see langword="true"/> before 
<see cref="System.Xml.XmlDocument.Save"/> is called, white space in the document 
is preserved in the output; otherwise, if this property is
<see langword="false"/>, <see langword="XmlDocument"/> auto-indents the output. </para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example shows how to strip white space from a file.
      </para>
			<codelink SampleID="Classic WebData XmlDocument.PreserveWhitespace Example" SnippetID="1"/>
			<para>The example uses the file <see langword="book.xml"/> as input.</para>
			<codelink SampleID="Classic WebData XmlDocument.PreserveWhitespace Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlDocument.Save">
		<overload>
			<para>Saves the XML document to the specified location.</para>
		</overload>
		<summary>
			<para>Saves the XML document to the specified file.</para>
		</summary>
		<param name="filename">The location of the file where you want to save the document.</param>
		<exception cref="XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		<remarks>
			<para> White space is preserved in the output file only if <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> is set to
<see langword="true"/>.</para>
			<para>The XmlDeclaration of the current <see langword="XmlDocument"/> object 
determines the encoding attribute in the saved document. The value of the
encoding attribute is taken from the <see cref="System.Xml.XmlDeclaration.Encoding" qualify="true"/> property. If the <see langword="XmlDocument"/> does
not have an XmlDeclaration, or if the XmlDeclaration does not have an encoding
attribute, the saved document will not have one either.</para>
			<para>When the document is saved, xmlns attributes are generated to persist the 
   node identity (local name + namespace URI) correctly. For example, the following
   C# code </para>
			<code>
XmlDocument doc = new XmlDocument();
doc.AppendChild(doc.CreateElement("item","urn:1"));
doc.Save(Console.Out);
</code>
			<para>generates this xmls attribute <c>&lt;item 
   xmls="urn:1"/&gt;</c>.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file.</para>
			<codelink SampleID="Classic WebData XmlDocument.Save Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.Save3">
		<summary>
			<para>Saves the XML document to the specified stream.</para>
		</summary>
		<param name="outStream">The stream to which you want to save.</param>
		<exception cref="XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</exception>
		<remarks>
			<para> White space is preserved only if <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> is set to
<see langword="true"/> .</para>
			<para>The XmlDeclaration of the current <see langword="XmlDocument"/> object 
determines the encoding attribute in the saved document. The value of the
encoding attribute is taken from the <see cref="System.Xml.XmlDeclaration.Encoding" qualify="true"/> property. If the <see langword="XmlDocument"/> does
not have an XmlDeclaration, or if the XmlDeclaration does not have an encoding
attribute, the saved document will not have one either.</para>
			<para>When the document is saved, xmlns attributes are generated to persist the node identity (local
   name + namespace URI) correctly. For example, the following C# code </para>
			<code>
XmlDocument doc = new XmlDocument();
doc.AppendChild(doc.CreateElement("item","urn:1"));
doc.Save(Console.Out);
</code>
			<para>generates this xmls attribute<c>&lt;item 
   xmls="urn:1"/&gt;</c> .</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.GetElementsByTagName">
		<overload>
			<para>Returns an <see cref="XmlNodeList"/> containing
   a list of all descendant elements that match the specified name.</para>
		</overload>
		<summary>
			<para>Returns an <see cref="XmlNodeList"/> containing a list of all descendant
   elements that match the specified <see cref="System.Xml.XmlDocument.Name"/>
   .</para>
		</summary>
		<param name="name">The qualified name to match. It is matched against the <see langword="Name"/> property of the matching node. The special value "*" matches all tags.</param>
		<returns>
			<para>An <see cref="XmlNodeList"/> containing a list of all matching nodes.</para>
		</returns>
		<remarks>
			<para>The nodes are placed in the order in which they would be
      encountered in the document.</para>
		</remarks>
		<example>
			<para>The following example creates a
   <see langword="XmlDocument"/> object and
      uses the <see langword="GetElmentsByTagName"/> method and the resulting <see cref="System.Xml.XmlNodeList"/>
      object to display all the book titles.</para>
			<codelink SampleID="Classic WebData XmlDocument.GetElementsByTagName Example" SnippetID="1"/>


The example uses the <see langword="books.xml"/> file as input.
<codelink SampleID="Classic WebData XslTransform.Transform7 Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlDocument.DocumentType">
		<summary>
			<para>Gets the node containing the DOCTYPE declaration.</para>
		</summary>
		<value>
			<para>The <see cref="System.Xml.XmlNode"/> containing the DocumentType (DOCTYPE declaration).</para>
		</value>
		<remarks>
			<para>An <see langword="XmlDocument"/> can have one and only
   one child with <see cref="System.Xml.XmlNodeType"/>
   equal to DocumentType.</para>
		</remarks>
		<example>
			<para> The following example gets and displays the DOCTYPE declaration for the
      document.
      </para>
			<codelink SampleID="Classic WebData XmlDocument.DocumentType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocumentType"/>
	</doc>
	<doc for="XmlDocument.Load">
		<overload>
			<para>Loads the specified XML data.</para>
			<note type="note">
      The <see langword="Load"/> method
      always preserves significant white space. The <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> property determines whether or not white space is
      preserved. The default is <see langword="false"/>, white space is not
      preserved.
      
   </note>
		</overload>
		<summary>
			<para>Loads the XML document from the specified URL.</para>
		</summary>
		<param name="filename">URL for the file containing the XML document to load.</param>
		<exception cref="XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
		<remarks>
			<note type="note">
      The <see langword="Load"/> method
      always preserves significant white space. The <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> property determines whether or not white space is
      preserved. The default is <see langword="false"/>, white space is not
      preserved.
      
   </note>
			<para>This method does not do DTD or schema validation. If you want validation to
      occur, you need to pass an <see cref="System.Xml.XmlValidatingReader"/>, specify the
      appropriate <see cref="System.Xml.XmlValidatingReader.ValidationType" qualify="true"/> , and provide a <see cref="System.Xml.XmlValidatingReader.ValidationEventHandler" qualify="true"/> . You are then notified of all
      validation errors found during <see langword="Load"/>, and unless your
   <see langword="ValidationEventHandler"/> throws an exception to stop 
      the process, the document will still be loaded. See <see cref="M:System.Xml.XmlDocument.#ctor"/>
      for an example of load-time validation.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<seealso cref="System.Xml.Schema.ValidationEventArgs" qualify="true"/>
		<seealso cref="System.Xml.Schema.XmlSeverityType" qualify="true"/>
		<seealso cref="System.Xml.XmlValidatingReader.Schemas" qualify="true"/>
	</doc>
	<doc for="XmlDocument.Load3">
		<summary>
			<para>Loads the XML document from the specified stream.</para>
		</summary>
		<param name="inStream">The stream containing the XML document to load.</param>
		<exception cref="XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
		<remarks>
			<note type="note">
      The <see langword="Load"/>
      method always preserves significant white space. The <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> property determines whether or not white space is
      preserved. The default is <see langword="false"/> , white space is not preserved.
      
   </note>
			<para>This method does not do DTD or schema validation. If you
      want validation to occur, you need to pass an <see cref="System.Xml.XmlValidatingReader"/>, specify the
      appropriate <see cref="System.Xml.XmlValidatingReader.ValidationType" qualify="true"/> , and provide a <see cref="System.Xml.XmlValidatingReader.ValidationEventHandler" qualify="true"/>. You are then notified of all validation errors
      found during <see langword="Load"/>, and unless your <see langword="ValidationEventHandler"/> throws an exception to stop
      the process, the document will still be loaded. See <see cref="M:System.Xml.XmlDocument.#ctor"/>
      for an example of load-time validation</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<seealso cref="System.Xml.Schema.ValidationEventArgs" qualify="true"/>
		<seealso cref="System.Xml.Schema.XmlSeverityType" qualify="true"/>
		<seealso cref="System.Xml.XmlValidatingReader.Schemas" qualify="true"/>
	</doc>
	<doc for="XmlDocument.Load2">
		<summary>
			<para>Loads the XML document from the specified <see cref="System.Xml.XmlReader"/> .</para>
		</summary>
		<param name="reader">The <see langword="XmlReader"/> used to feed the XML data into the document.</param>
		<exception cref="XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
		<remarks>
			<note type="note">
      The <see langword="Load"/> method always preserves significant white
      space. The <see cref="System.Xml.XmlDocument.PreserveWhitespace"/>
      property determines whether or not white space is preserved. The default is
   <see langword="false"/> , white space is not preserved.
      
   </note>
			<para>If the reader is in the initial state (<see cref="System.Xml.XmlReader.ReadState"/> =ReadState.Initial),
<see langword="Load"/> consumes the entire contents of the reader and builds the 
   DOM from what it finds. </para>
			<para> If the reader is already positioned on
   some node at depth "n", this method loads that node and all subsequent siblings up to the
   end tag that closes depth "n". This has the following results. </para>
			<para> If the current node and its siblings look like the following: </para>
			<para><c>&lt;!--comment--&gt;&lt;element1&gt;one&lt;/element1&gt;&lt;element2&gt;two&lt;/element2&gt;</c>
			</para>
			<para><see langword="Load"/> throws an exception because a document cannot have
two root level elements. If the current node and its siblings look like
the following: </para>
			<para><c>&lt;!--comment--&gt;&lt;?process
   instruction?&gt;&lt;!--comment--&gt;&lt;/endtag&gt;</c>
			</para>
			<para><see langword="Load"/> succeeds, but you have an incomplete
DOM tree because there is no root level element. Before you save the document, you
must add a root level element, otherwise <see cref="System.Xml.XmlDocument.Save"/>
will throw an exception. </para>
			<para>If the reader is positioned on a leaf node that is invalid for the root level of
   a document, for example a white space or attribute node, the reader continues
   to read until it is positioned on a node that can be used for the root. The
   document begins loading at this point.</para>
			<para>This method does not do DTD or schema validation. If you
   want validation to occur, you need to pass an <see cref="System.Xml.XmlValidatingReader"/>, specify the
   appropriate <see cref="System.Xml.XmlValidatingReader.ValidationType" qualify="true"/> , and provide a <see cref="System.Xml.XmlValidatingReader.ValidationEventHandler" qualify="true"/>. You are then notified of all validation errors
   found during <see langword="Load"/>, and unless your <see langword="ValidationEventHandler"/> throws an exception to stop
   the process, the document will still be loaded. See <see cref="M:System.Xml.XmlDocument.#ctor"/>
   for an example of load-time validation</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example loads the last book node of the
   <see langword="books.xml"/>
   file into the XML document.
   </para>
			<codelink SampleID="Classic WebData XmlDocument.Load2 Example" SnippetID="1"/>
			<para>The example uses the file, <see langword="books.xml"/>, as input.</para>
			<codelink SampleID="Classic WebData XslTransform.Transform7 Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.Schema.ValidationEventArgs" qualify="true"/>
		<seealso cref="System.Xml.Schema.XmlSeverityType" qualify="true"/>
		<seealso cref="System.Xml.XmlValidatingReader.Schemas" qualify="true"/>
	</doc>
	<doc for="XmlDocument.LoadXml">
		<summary>
			<para>Loads the XML document from the specified string.</para>
		</summary>
		<param name="xml">String containing the XML document to load.</param>
		<exception cref="XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
		<remarks>
			<para>By default the <see langword="LoadXml"/> method does not preserve white space nor significant
   white space.</para>
This method does not do DTD or Schema validation. If you
want validation to occur, use the <see cref="System.Xml.XmlDocument.Load"/> method and pass it an <see cref="System.Xml.XmlValidatingReader"/>. See <see cref="M:System.Xml.XmlDocument.#ctor"/>
for an example of load-time validation
<para>This method is a Microsoft extension to the Document Object Model 
   (DOM).</para>
		</remarks>
		<example>
			<para>The following example loads XML into an
   <see langword="XmlDocument"/> object and saves it out to a file.</para>
			<codelink SampleID="Classic WebData XmlDocument.LoadXml Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.PreserveWhitespace"/>
	</doc>
	<doc for="XmlDocument.Load1">
		<summary>
			<para>Loads the XML document from the specified <see cref="System.IO.TextReader"/> .</para>
		</summary>
		<param name="txtReader">The <see langword="TextReader"/> used to feed the XML data into the document.</param>
		<exception cref="XmlException">There is a load or parse error in the XML. In this case, the document remains empty.</exception>
		<remarks>
			<note type="note">
      The <see langword="Load"/> method always preserves significant white
      space. The <see cref="System.Xml.XmlDocument.PreserveWhitespace"/>
      property determines whether or not white space is preserved. The default is
   <see langword="false"/> , white space is not preserved.
      
   </note>
			<para>This method does not do DTD or schema validation. If you
      want validation to occur, you need to pass an <see cref="System.Xml.XmlValidatingReader"/>, specify the
      appropriate <see cref="System.Xml.XmlValidatingReader.ValidationType" qualify="true"/> , and provide a <see cref="System.Xml.XmlValidatingReader.ValidationEventHandler" qualify="true"/>. You are then notified of all validation errors
      found during <see langword="Load"/>, and unless your <see langword="ValidationEventHandler"/> throws an exception to stop
      the process, the document will still be loaded. See <see cref="M:System.Xml.XmlDocument.#ctor"/>
      for an example of load-time validation</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.IO.StringReader"/> class to
   load a string of XML data into the <see langword="XmlDocument"/> object.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateElement2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.StreamReader"/>
		<seealso cref="System.Xml.Schema.ValidationEventArgs" qualify="true"/>
		<seealso cref="System.Xml.Schema.XmlSeverityType" qualify="true"/>
		<seealso cref="System.Xml.XmlValidatingReader.Schemas" qualify="true"/>
	</doc>
	<doc for="XmlDocument.XmlDocument">
		<overload>
			<para>Initializes a new instance of the
   <see langword="XmlDocument"/>
   class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlDocument"/> class.</para>
		</summary>
		<example>
			<para>The following is an example of load-time validation.
      An <see cref="System.Xml.XmlValidatingReader"/> is passed to the <see cref="System.Xml.XmlDocument.Load"/> method and a <see cref="System.Xml.XmlValidatingReader.ValidationEventHandler"/> is provided to notify users of any validation
      errors. In this example a validation error is found, but the document is still
      loaded. Alternatively, you can define a <see langword="ValidationEventHandler"/>
      to throw an exception and stop the load process when a validation error is
      found.</para>
			<codelink SampleID="XmlDocument.cctor" SnippetID="1"/>

The example uses the <see langword="bookDTD.xml"/> file 
as input.
<codelink SampleID="XmlDocument.cctor" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.Load"/>
		<seealso cref="System.Xml.XmlDocument.LoadXml"/>
	</doc>
	<doc for="XmlDocument.Save2">
		<summary>
			<para>Saves the XML document to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<exception cref="XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		<remarks>
			<para> White space is preserved only if <see cref="System.Xml.XmlDocument.PreserveWhitespace"/> is set to
<see langword="true"/>. </para>
			<para> The encoding on the <see langword="XmlWriter"/> determines the encoding that is
written out (The encoding of the XmlDeclaration node is replaced by the
encoding of the <see langword="XmlWriter"/>
). If there was no encoding
specified on the <see langword="XmlWriter"/>, the <see langword="XmlDocument"/> is
saved without an encoding attribute.</para>
			<para>When the document is saved, xmlns attributes are generated to persist the node identity
   (LocalName + NamespaceURI) correctly. For example, the following C# code </para>
			<code>
XmlDocument doc = new XmlDocument();
doc.AppendChild(doc.CreateElement("item","urn:1"));
doc.Save(Console.Out);
</code>
			<para>generates this xmls attribute:</para>
			<para><c>&lt;item
   xmls="urn:1"/&gt;</c></para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example loads XML into an <see langword="XmlDocument"/> object and saves it out to a file.</para>
			<codelink SampleID="Classic WebData XmlDocument.LoadXml Example" SnippetID="1"/>
		</example>
		<seealso cref="M:System.Xml.XmlTextWriter.#ctor"/>
		<seealso cref="System.Xml.XmlTextWriter.Formatting" qualify="true"/>
	</doc>
	<doc for="XmlDocument.CreateElement1">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlElement"/> with the qualified name and <see cref="System.Xml.XmlNode.NamespaceURI"/>
.</para>
		</summary>
		<param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="System.Xml.XmlNode.Prefix"/> property will reflect the part of the name preceding the colon and the <see cref="System.Xml.XmlDocument.LocalName"/> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'.</param>
		<param name="namespaceURI">The namespace URI of the element.</param>
		<returns>
			<para>The new <see langword="XmlElement"/> .</para>
		</returns>
		<remarks>
			<para> The following C# code</para>
			<code>
XmlElement elem;
elem=doc.CreateElement("xy:item", "urn:abc");
   </code>
			<para> results in an element that
      is equivalent to the following XML text.</para>
			<para><c>&lt;xy:item
      xmlns:item="urn:abc"/&gt;</c>
			</para>
			<para>Although this method creates the new object in the context
   of the document, it does not automatically add the new object to the document
   tree. To add the new object, you must explicitly call one of the node insert
   methods.</para>
			<para>According to the W3C Extensible Markup Language
   (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are
   allowed within Document and Element nodes, and
   in EntityReference nodes when the EntityReference node is not a child
   of an Attribute node.</para>
		</remarks>
	</doc>
	<doc for="XmlDocument">
		<summary>
			<para> Represents an XML
      document.
      </para>
		</summary>
		<remarks>
			<para>This class implements the W3C Document Object Model
      (DOM) Level 1 Core and the Core DOM Level 2. The DOM is an in-memory (cache)
      tree representation of an XML document and enables the navigation and editing of
      this document. Because <see langword="XmlDocument"/> implements the <see cref="System.Xml.XPath.IXPathNavigable"/> interface it can also be used as the source
      document for the <see cref="System.Xml.Xsl.XslTransform"/>
      
      class.</para>
			<para> The <see cref="T:System.Xml.XmlDataDocument"/> class extends <see langword="XmlDocument"/> and
   allows structured data to be stored, retrieved, and manipulated through a
   relational <see cref="T:System.Data.DataSet"/>. This class allows components to mix XML and
   relational views of the underlying data.</para>
			<para>See <see topic="cpconXMLDocumentObjectModelDOM"/>
for more information.</para>
		</remarks>
		<seealso topic="cpconCreateNewNodesInDOM"/>
		<seealso cref="System.Xml.XmlNodeChangedEventHandler"/>
	</doc>
	<doc for="XmlDocument.CreateElement2">
		<summary>
			<para>Creates an element with the specified <see cref="System.Xml.XmlNode.Prefix"/>,
<see cref="System.Xml.XmlDocument.LocalName"/>, and <see cref="System.Xml.XmlNode.NamespaceURI"/>
.</para>
		</summary>
		<param name="prefix">The prefix of the new element (if any). String.Empty and <see langword="null"/> are equivalent.</param>
		<param name=" localName">The local name of the new element.</param>
		<param name=" namespaceURI">The namespace URI of the new element (if any). String.Empty and <see langword="null"/> are equivalent.</param>
		<returns>
			<para> The new <see cref="System.Xml.XmlElement"/> .</para>
		</returns>
		<remarks>
			<para> The following C# code</para>
			<code>
XmlElement elem;
elem=doc.CreateElement("xy", "item", "urn:abc");
   </code>
			<para>creates an element equivalent to the following XML text:</para>
			<para><c>&lt;xy:item xmlns:xy="urn:abc"/&gt;</c>
			</para>
			<para>Although this method creates the new object in the context
   of the document, it does not automatically add the new object to the document
   tree. To add the new object, you must explicitly call one of the node insert
   methods.</para>
			<para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation
   (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document
   and Element nodes, and in EntityReference nodes when the EntityReference is
   outside an Attribute node.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example adds a new element to the existing XML document. </para>
			<codelink SampleID="Classic WebData XmlDocument.CreateElement2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.ReadNode">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlNode"/> object based on the information in
   the <see cref="System.Xml.XmlReader"/> .
   The reader must be positioned on a node or attribute.</para>
		</summary>
		<param name="reader">The XML source</param>
		<returns>
			<para>The new <see langword="XmlNode"/> or <see langword="null"/> if no more nodes exist.</para>
		</returns>
		<exception cref="InvalidOperationException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity).</exception>
		<remarks>
			<para>Reads one <see langword="XmlNode"/> from the given reader and positions the reader on the
   next node. This method creates the type of <see langword="XmlNode"/> matching the <see cref="System.Xml.XmlNode.NodeType"/> on which the
   reader is currently positioned. (If the reader is in the initial state, <see langword="ReadNode"/>
   advances the reader to the first node and then operates on that
   node.)</para>
			<para>If the reader is positioned on the start of an element,
<see langword="ReadNode"/> reads all the attributes and any child nodes, up to and including the
   end tag of the current node. The <see langword="XmlNode"/> returned contains the sub-tree
   representing everything read. The reader is positioned immediately
   after the end tag. </para>
			<para><see langword="ReadNode"/>
can also read attributes, but in this case it does not advance the reader
to the next attribute. This allows you to write the following C# code:</para>
			<code>
XmlDocument doc = new XmlDocument();
while (reader.MoveToNextAttribute())
{
  XmlNode a = doc.ReadNode(reader);
  // Do some more processing.
}
</code>
			<para><see langword="ReadNode"/> does consume the attribute value though, which means after calling
<see langword="ReadNode"/> on an attribute, <see cref="System.Xml.XmlReader.ReadAttributeValue" qualify="true"/> 
returns <see langword="false"/>.</para>
			<note type="inheritinfo">
   This method has an
   inheritance demand. Full trust is required to override
   the <see langword="ReadNode"/> method. See <see topic="cpconinheritancedemands"/> for
   more information.
</note>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example uses <see langword="ReadNode"/> to
   create a new node and then inserts the new node into the document.
   </para>
			<codelink SampleID="Classic WebData XmlDocument.ReadNode Example" SnippetID="1"/>






The example uses the file, <see langword="cd.xml"/>, as input.
<codelink SampleID="Classic WebData XmlDocument.ReadNode Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlReader"/>
		<seealso cref="System.Xml.XmlDocument.ImportNode"/>
	</doc>
	<doc for="XmlDocument.CreateDocumentType">
		<summary>
			<para>Returns a new <see cref="System.Xml.XmlDocumentType"/> object.</para>
		</summary>
		<param name="name">Name of the document type.</param>
		<param name="publicId">The public identifier of the document type or <see langword="null"/> .</param>
		<param name="systemId">The system identifier of the document type or <see langword="null"/> .</param>
		<param name="internalSubset">The DTD internal subset of the document type or <see langword="null"/> .</param>
		<returns>
			<para>The new <see langword="XmlDocumentType"/> .</para>
		</returns>
		<remarks>
			<para>The returned node will have parsed <see cref="System.Xml.XmlDocumentType.Entities"/> and <see cref="System.Xml.XmlDocumentType.Notations"/> collections.</para>
			<para>Although this method creates the new object in the context of the document,
   it does not automatically add the new object to the document tree. To add the
   new object, you must explicitly call one of the node insert methods.</para>
			<para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation
   (www.w3.org/TR/1998/REC-xml-19980210), DocumentType nodes are only allowed
   within Document nodes. Each <see cref="System.Xml.XmlDocument"/> can have only one DocumentType
   node. The DocumentType node must also be inserted before the root element
   of the <see langword="XmlDocument"/> (if the document already has a
   root element, you cannot add a DocumentType node).</para>
			<para>If the passed parameters do not combine to build a valid
<see langword="XmlDocumentType"/> 
, an exception is thrown.</para>
			<note type="inheritinfo">
   This method has an
   inheritance demand. Full trust is required to override the
<see langword="CreateDocumentType"/> method. See <see topic="cpconinheritancedemands"/> for 
   more information.
</note>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example creates a DocumentType node and adds it to an XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateDocumentType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlDocument.BaseURI">
		<summary>
			<para>Gets the base URI of the current node.</para>
		</summary>
		<value>
			<para>The location from which the node was
      loaded.</para>
		</value>
		<remarks>
			<para>A networked XML document is comprised of chunks of data
      aggregated using various W3C standard inclusion mechanisms and therefore
      contains nodes that come from different places. The <see langword="BaseURI"/> tells you where these nodes came from.</para>
			<para>For Document nodes, <see langword="BaseURI"/> returns the location of the XML
   document. For example, if the <see langword="XmlDocument"/> was loaded using the
   following call doc.Load("http://server/mydata.xml"), the
<see langword="BaseURI"/> for the document node is 
   http://server/mydata.xml . However, if the <see cref="System.Xml.XmlDocument.Load"/> method is redirected by server to a different URI, <see langword="BaseURI"/>
   returns the original URI passed to the <see langword="Load"/> method.</para>
			<para>This property is a Microsoft extension to the Document
   Object Model (DOM). For additional information on <see langword="BaseURI"/> and how it behaves with other node types,
   see <see cref="System.Xml.XmlNode.BaseURI" qualify="true"/> .</para>
		</remarks>
	</doc>
	<doc for="XmlDocument.CreateXmlDeclaration">
		<summary>
			<para>Creates an <see cref="System.Xml.XmlDeclaration"/> node with the specified values. </para>
		</summary>
		<param name="version">The version must be "1.0".</param>
		<param name=" encoding"><para>The value of the encoding attribute. This is the encoding that is used when you save the <see cref="System.Xml.XmlDocument"/> to a file or a stream; therefore, it must be set to a string supported by the <see cref="System.Text.Encoding"/> class, otherwise <see cref="System.Xml.XmlDocument.Save"/> fails. If this is <see langword="null"/> or String.Empty, the <see langword="Save"/> method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used. </para>
			<para><SpecialLocalizableItem kind="UIElement">Note: </SpecialLocalizableItem> If the <see langword="XmlDocument"/> is saved to either a <see cref="System.IO.TextWriter"/> or an <see cref="System.Xml.XmlTextWriter"/>, this encoding value is discarded. Instead, the encoding of the <see langword="TextWriter"/> or the <see langword="XmlTextWriter"/> is used. This ensures that the XML written out can be read back using the correct encoding.</para></param>
		<param name=" standalone">The value must be either "yes" or "no". If this is <see langword="null"/> or String.Empty, the <see langword="Save"/> method does not write a standalone attribute on the XML declaration.</param>
		<returns>
			<para>The new <see langword="XmlDeclaration"/> node.</para>
		</returns>
		<exception cref="ArgumentException">The values of <paramref name="version"/> or <paramref name="standalone"/> are something other than the ones specified above.</exception>
		<remarks>
			<para>The attributes are exposed as special properties on the
   <see langword="XmlDeclaration"/> node, and not as <see cref="System.Xml.XmlAttribute"/>
   nodes.</para>
			<para>Although this method creates the new object in the context
   of the document, it does not automatically add the new object to the document
   tree. To add the new object, you must explicitly call one of the node insert
   methods.</para>
According to the W3C Extensible Markup Language (XML) 1.0 recommendation
(www.w3.org/TR/1998/REC-xml-19980210), the <see langword="XmlDeclaration"/> node must be the first
node in the document.
<para>This method is a Microsoft extension to the Document Object Model 
   (DOM).</para>
		</remarks>
		<example>
			<para> The following example creates an XML declaration and adds it to the document.</para>
			<codelink SampleID="Classic WebData XmlDocument.CreateXmlDeclaration Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDeclaration"/>
	</doc>
	<doc for="XmlDocument.ImportNode">
		<summary>
			<para>Imports a node from another document to the current document.</para>
		</summary>
		<param name="node">The node being imported.</param>
		<param name="deep"><see langword="true"/>to perform a deep clone; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>The imported <see cref="System.Xml.XmlNode"/> .</para>
		</returns>
		<exception cref="InvalidOperationException">Calling this method on a node type which cannot be imported.</exception>
		<remarks>
			<para>The returned node has no parent. The source node is not
      altered or removed from the original document; <see langword="ImportNode"/>
      
      creates a copy of the source node.</para>
			<para>Importing a node creates an
   <see langword="XmlNode"/> object owned by the importing document,
      with <see cref="System.Xml.XmlNode.Name"/> and <see cref="System.Xml.XmlNode.NodeType"/> identical to the source node. The
      new object also has the attributes related to namespaces (<see cref="System.Xml.XmlNode.Prefix"/>,
   <see cref="System.Xml.XmlNode.LocalName"/>, and <see cref="System.Xml.XmlNode.NamespaceURI"/>
   
   ).</para>
			<para>Depending on the node type of the imported node and the
   value of the <paramref name="deep"/>
   
   parameter, additional information
   is copied as appropriate. This method attempts to mirror the behavior expected
   if a fragment of XML or HTML source
   was copied from one document to another (recognizing that, in
   the XML case, the two documents could have different DTDs).</para>
			<para>The following table describes the specific
   behavior for each <see cref="System.Xml.XmlNodeType"/> .</para>
			<list type="table">
				<listheader>
					<term>XmlNodeType</term>
					<description>ImportNode(true)</description>
					<description>ImportNode(false)</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The <see cref="System.Xml.XmlAttribute.Specified"/> property is set to <see langword="true"/> on
      the generated <see cref="System.Xml.XmlAttribute"/>. The descendants of the source
   <see langword="XmlAttribute"/> are recursively imported and the resulting
      nodes reassembled to form the corresponding subtree. </description>
					<description>The <paramref name="deep"/> parameter does not apply
   to <see langword="XmlAttribute"/> nodes; they always carry their children
   with them when imported.</description>
				</item>
				<item>
					<term> CData</term>
					<description>Copies the node, including its data.</description>
					<description>Copies the node, including its data.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>Copies the node, including its data.</description>
					<description>Copies the node, including its data.</description>
				</item>
				<item>
					<term> DocumentFragment</term>
					<description>The descendants of the source node are recursively
      imported and the resulting nodes reassembled to form the corresponding
      subtree.</description>
					<description>An empty <see cref="System.Xml.XmlDocumentFragment"/> is generated.</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Copies the node, including its data.*</description>
					<description>Copies the node, including its data.*</description>
				</item>
				<item>
					<term> Element</term>
					<description>
						<para>The descendants of the source element and its specified attribute nodes are recursively
         imported and the resulting nodes reassembled to form the corresponding
         subtree.</para>
						<para><SpecialLocalizableItem kind="UIElement">Note:</SpecialLocalizableItem> Default attributes are not
      copied. If the document being imported into defines default
      attributes for this element name, those are assigned.</para></description>
					<description>
						<para>Specified attribute nodes of the source element are
         imported, and the generated <see langword="XmlAttribute"/> nodes are
         attached to the generated <see cref="System.Xml.XmlElement"/>.</para>
						<para><SpecialLocalizableItem kind="UIElement">Note:</SpecialLocalizableItem> Default attributes are not
      copied. If the document being imported into defines default
      attributes for this element name, those are assigned.</para></description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>Because the source and destination documents could have the entities
      defined differently, this method only copies the <see cref="System.Xml.XmlEntityReference"/> node. The replacement text is not
      included. If the destination document has the entity defined, its
      value is assigned.</description>
					<description>Because the source and destination documents could have the entities
      defined differently, this method only copies the <see cref="System.Xml.XmlEntityReference"/> node. The replacement text is not
      included. If the destination document has the entity defined, its
      value is assigned.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>Copies the target and data value from the imported node.</description>
					<description>Copies the target and data value from the imported node.</description>
				</item>
				<item>
					<term> Text</term>
					<description>Copies the node, including its data.</description>
					<description>Copies the node, including its data.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>Copies the node, including its data.</description>
					<description>Copies the node, including its data.</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>Copies the node, including its data.</description>
					<description>Copies the node, including its data.</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description>Copies the target and data value from the imported node.</description>
					<description>Copies the target and data value from the imported node.</description>
				</item>
				<item>
					<term> All other node types.</term>
					<description>These node types cannot be imported.</description>
					<description>These node types cannot be imported.</description>
				</item>
			</list>
*Although DocumentType nodes can be imported, a
document can only have one DocumentType. If the document currently has a
DocumenType node, it must be removed before adding a new one.
</remarks>
		<example>
			<para> The following example imports a book node from a second
      XML document into the original XML document.</para>
			<codelink SampleID="Classic WebData XmlDocument.ImportNode Example" SnippetID="1"/>





The example uses the file, <see langword="books.xml"/>, as input.
 

<codelink SampleID="Classic WebData XslTransform.Transform7 Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlDocument.XmlResolver">
		<summary>
			<para>Sets the <see cref="System.Xml.XmlResolver"/> to use for resolving external
   resources.</para>
		</summary>
		<value>
			<para>The <see langword="XmlResolver"/> to
   use.</para>
			<para>In version 1.1 of the .NET Framework, the caller must be fully-trusted in
   order to specify an <see langword="XmlResolver"/>.</para>
		</value>
		<exception cref="XmlException">This property is set to <see langword="null"/> and an external DTD or entity is encountered.</exception>
		<remarks>
			<para>The <see langword="XmlResolver"/> can
   be used to load DTDs or expand entity references. Using the <see cref="System.Xml.XmlResolver.Credentials" qualify="true"/> property, you can set credentials on the
<see langword="XmlResolver"/> to access resources stored on a secure network 
   resource.
   </para>
			<list type="bullet"><item>
					<term>
      
      If the document was not loaded using an <see cref="System.Xml.XmlReader"/> (that is, if it was
      loaded using a
      stream, file,
      and so on) the <see langword="XmlResolver"/> on the
   <see langword="XmlDocument"/> is always used.</term>
				</item>
				<item>
					<term>
      
      If the document was loaded with an <see cref="System.Xml.XmlTextReader"/>, the resolver on the
   <see langword="XmlTextReader"/> is used to resolve any DTD references in the
      DocumentType node. The resolver on the <see langword="XmlDocument"/> is used to expand any entity
      references.</term>
				</item>
				<item>
					<term>
      
      If the document was loaded with an <see cref="System.Xml.XmlValidatingReader"/>, the resolver on the <see langword="XmlDocument"/> is never used.</term>
				</item>
				<item>
					<term>
      
      If the document was loaded with a class that extends
   <see langword="XmlReader "/>and<see langword=" "/>the <see langword="XmlReader"/>
   cannot resolve entities ( <see cref="System.Xml.XmlReader.CanResolveEntity"/> returns <see langword="false"/>
   ), the
<see langword="XmlResolver"/> on the <see langword="XmlDocument"/> is used to resolve any references in 
   the DocumentType node and
   to expand any entity references.</term>
				</item>
			</list>
			<note type="note">
   If the
<see langword="XmlDocument"/> is loaded using an <see cref="System.Xml.XmlReader"/> which had
   an <see langword="XmlResolver"/> set to it, the <see langword="XmlResolver"/>
   on the <see langword="XmlReader"/> is not cached by the
<see langword="XmlDocument"/> after <see cref="System.Xml.XmlDocument.Load"/> completes. 
</note>
			<para>In version 1.1 of the .NET Framework, if this property is not set, the trust
   level of the application determines the default behavior.</para>
			<para><see langword="Fully-trusted code:"/> The document uses a default <see cref="System.Xml.XmlUrlResolver"/> with
no user credentials. If authentication is required to access a network resource,
use the <see langword="XmlResolver"/> property to specify an
<see langword="XmlResolver"/> with the necessary credentials.</para>
			<para><see langword="Semi-trusted code:"/> The <see langword="XmlResolver"/> property
is set to <see langword="null"/>. External resources are not resolved.</para>
			<para>For more information on security and the <see langword="XmlResolver"/>
property, see <see topic="cpconresolvingexternalresources"/>.</para>
			<para>This property is a Microsoft extension to the Document Object Model
   (DOM).</para>
		</remarks>
		<example>
			<para>The following example loads an XML document which
      includes a reference to a DTD file. The <see langword="XmlResolver"/> property is
      used to set the credentials necessary to access the network resource.</para>
			<codelink SampleID="XmlDocument.XmlResolver" SnippetID="1"/>
			<para>The example uses the following data files as 
input.</para>
			<para><see langword="book5.xml"/></para>
			<codelink SampleID="XmlDocument.XmlResolver" SnippetID="2"/>
			<para><see langword="books.dtd"/></para>
			<codelink SampleID="XmlDocument.XmlResolver" SnippetID="3"/>
		</example>
		<seealso cref="System.Xml.XmlUrlResolver.Credentials"/>
		<seealso cref="System.Net.CredentialCache" qualify="true"/>
		<seealso cref="System.Net.NetworkCredential" qualify="true"/>
		<seealso cref="System.Xml.XmlSecureResolver"/>
	</doc>
</docs>
