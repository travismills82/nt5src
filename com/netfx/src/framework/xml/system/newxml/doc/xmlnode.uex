<docs>
	<doc for="XmlNode.GetProperty">
		<summary>
			<para>Gets any customer properties that were
       stored on the node using <see cref="System.Xml.XmlNode.SetProperty"/>.</para>
		</summary>
		<param name="propertyKey">The key for the property you want to retrieve.</param>
		<returns>
			<para>The customer property with the specified <paramref name="key"/> stored
    on the current node.</para>
		</returns>
		<remarks>
			<para>This method also returns the following built-in properties on the following 
       node types: </para>
			<list type="table">
				<listheader>
					<term>XmlNodeType</term>
					<description>Built-in Properties</description>
				</listheader>
				<item>
					<term> XmlDeclaration</term>
					<description>
						<see cref="System.Xml.XmlDeclaration.Version"/>, <see cref="System.Xml.XmlDeclaration.Encoding"/>, <see cref="System.Xml.XmlDeclaration.Standalone"/></description>
				</item>
				<item>
					<term> XmlDocumentType</term>
					<description>
						<see cref="System.Xml.XmlDocumentType.PublicId"/>, <see cref="System.Xml.XmlDocumentType.SystemId"/>, <see cref="System.Xml.XmlDocumentType.InternalSubset"/></description>
				</item>
				<item>
					<term> XmlEntity</term>
					<description>
						<see cref="System.Xml.XmlEntity.PublicId"/>, <see cref="System.Xml.XmlEntity.SystemId"/>, <see cref="System.Xml.XmlEntity.NotationName"/></description>
				</item>
				<item>
					<term> XmlNotation</term>
					<description>
						<see cref="System.Xml.XmlNotation.PublicId"/>, <see cref="System.Xml.XmlNotation.SystemId"/></description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="XmlNode.SetProperty">
		<summary>
			<para>Sets a custom property on the current node.</para>
		</summary>
		<param name="data">The object to attach to this node.</param>
		<param name=" propertyKey">The key to associate with <paramref name="data"/> .</param>
		<exception cref="InvalidOperationException">Attempting to set a built-in property. </exception>
		<remarks>
			<para> This method allows users to attach
       other custom state to the DOM tree. This is useful for relational mapping,
       UI DataBinding, storing line numbers in the tree, or any number of other
       scenarios. These properties have hashtable lookup performance characteristics and do
       not impact the performance of other DOM operations. Custom properties are copied
       when you <see cref="System.Xml.XmlNode.Clone"/> a node.</para>
		</remarks>
		<seealso cref="System.Xml.XmlNode.GetProperty"/>
	</doc>
	<doc for="XmlNode.SelectSingle">
		<summary>
			<para>Selects the first node matching the XPath expression.</para>
		</summary>
		<param name="xpath"> The XPath expression.</param>
		<returns>
			<para>The first <see cref="System.Xml.XmlNode"/>
matching the XPath expression.</para>
		</returns>
	</doc>
	<doc for="XmlNode.Select">
		<summary>
			<para>Selects a list of nodes matching the XPath expression.</para>
		</summary>
		<param name="xpath"> The XPath expression.</param>
		<returns>
			<para> An <see cref="System.Xml.XmlNodeList"/> containing the 
   collection of nodes
   matching the XPath expression.</para>
		</returns>
	</doc>
	<doc for="XmlNode.PreviousSibling">
		<summary>
			<para>Gets
      the node immediately preceding this node.</para>
		</summary>
		<value>
			<para>The preceding <see langword="XmlNode"/> .
   If there is no preceding node, <see langword="null"/> is returned.</para>
		</value>
		<example>
			<para>The following example displays all the books in the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.PreviousSibling Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.NextSibling">
		<summary>
			<para>Gets
      the node immediately following this node.</para>
		</summary>
		<value>
			<para>The next <see langword="XmlNode"/> .
   If there is no next node, <see langword="null"/> is returned.</para>
		</value>
		<example>
			<para>The following example displays all the books in the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.NextSibling Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.Attributes">
		<summary>
			<para>Gets an <see cref="System.Xml.XmlAttributeCollection"/>
containing the attributes
of this node.</para>
		</summary>
		<value>
			<para>An <see langword="XmlAttributeCollection"/> containing the attributes of the node.</para>
			<para>If the node is of type XmlNodeType.Element,
   the attributes of the node are returned. Otherwise, this property returns
<see langword="null."/></para>
		</value>
		<example>
			<para>The following example adds a new attribute to the XML document. </para>
			<codelink SampleID="Classic WebData XmlNode.GetNamespaceOfPrefix Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.FirstChild">
		<summary>
			<para>Gets the first child of the node.</para>
		</summary>
		<value>
			<para>The first child of the node. If there is no such
      node, <see langword="null"/> is returned.</para>
		</value>
		<example>
			<para> The following example displays the title element. </para>
			<codelink SampleID="Classic WebData XmlNode.FirstChild Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.LastChild">
		<summary>
			<para>Gets the last child of the node.</para>
		</summary>
		<value>
			<para>The last child of the node. If there is no such
      node, <see langword="null"/> is returned.</para>
		</value>
		<example>
			<para> The following example displays the price element. </para>
			<codelink SampleID="Classic WebData XmlNode.LastChild Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.NamespaceURI">
		<summary>
			<para>Gets the namespace URI of this node.</para>
		</summary>
		<value>
			<para>The namespace URI of this node. If there is no namespace
      URI, this property returns String.Empty.</para>
		</value>
		<remarks>
			<para> This is the namespace URI specified at creation time.
      For example, <see langword="NamespaceURI"/>
      
      is urn:samples for the element &lt;bk:book xmlns:bk=
      "urn:samples"&gt;</para>
			<para>An attribute
      does not inherit its namespace from the element it is attached to.
      If an attribute is not explicitly given a namespace, it simply has
      no namespace.</para>
		</remarks>
	</doc>
	<doc for="XmlNode.NodeType">
		<summary>
			<para>When overridden in a derived class, gets the type of the current node.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Xml.XmlNodeType"/> values.</para>
		</value>
		<remarks>
			<para>This property never returns the
 <see langword="XmlNodeType"/>
 EndElement, EndEntity or None.</para>
		</remarks>
	</doc><doc for="XmlNode.Name">
		<summary>
			<para>When overridden in a derived class, gets the qualified name of the node.</para>
		</summary>
		<value>
			<para>The qualified name of the node. The name returned is dependent on the <see cref="System.Xml.XmlNode.NodeType"/>
of the node:</para>
			<list type="table">
				<listheader>
					<term>Type</term>
					<description>Name</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The
         qualified
         name of the attribute.</description>
				</item>
				<item>
					<term> CDATA</term>
					<description>#cdata-section</description>
				</item>
				<item>
					<term> Comment</term>
					<description>#comment</description>
				</item>
				<item>
					<term> Document</term>
					<description>#document</description>
				</item>
				<item>
					<term> DocumentFragment</term>
					<description>#document-fragment</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>The
         document type name.</description>
				</item>
				<item>
					<term> Element</term>
					<description>The
         qualified name of
         the element.</description>
				</item>
				<item>
					<term> Entity</term>
					<description>The
         name of the entity.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>The
         name
         of the entity referenced.</description>
				</item>
				<item>
					<term> Notation</term>
					<description>The
         notation name.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The
         target of the processing instruction.</description>
				</item>
				<item>
					<term> Text</term>
					<description>#text</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>#whitespace</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>#significant-whitespace</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description>#xml-declaration</description>
				</item>
			</list>
		</value>
	</doc><doc for="XmlNode.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlNode.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlNode.SelectNodes">
		<overload>
			<para>Selects a list of nodes
      matching the XPath expression.</para>
		</overload>
		<summary>
			<para>Selects a list of nodes matching the XPath
      expression.</para>
		</summary>
		<param name="xpath">The XPath expression.</param>
		<returns>
			<para>An <see cref="System.Xml.XmlNodeList"/> containing a collection of nodes
   matching the XPath query.</para>
		</returns>
		<exception cref="XPathException">The XPath expression contains a prefix.</exception>
		<remarks>
			<para>If the XPath expression requires namespace resolution, you must use the
   <see langword="SelectNodes"/> overload which takes an <see cref="System.Xml.XmlNamespaceManager"/>
   as its argument. The <see langword="XmlNamespaceManager"/> is used to resolve
   namespaces.</para>
			<note type="note">
   If the XPath expression does not include a
   prefix, it is assumed that the namespace URI is the empty namespace. If your XML
   includes a default namespace, you must still use the
<see langword="XmlNamespaceManager"/>
and add a prefix and namespace URI to it; otherwise, you
will not get any nodes selected.
</note>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example changes the price on all books by Jane Austen.</para>
			<codelink SampleID="Classic WebData XmlNode.SelectNodes Example" SnippetID="1"/>
			<para>The example uses the file,
<see langword="booksort.xml"/>, as input.</para>
			<codelink SampleID="Classic WebData XmlNode.SelectNodes Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlNode.SelectSingleNode"/>
	</doc><doc for="XmlNode.GetEnumerator">
		<summary>
			<para> Provides support for the for each style iteration over
      the nodes in the <see langword="XmlNode"/>
      .</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> .</para>
		</returns>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example displays all the books in the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.GetEnumerator Example" SnippetID="1"/>
			<para>The example uses the file, <see langword="books.xml"/>, as input.</para>
			<codelink SampleID="Classic WebData XmlNode.GetEnumerator Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlNode.WriteTo">
		<summary>
			<para>When overridden in a derived class, saves the current node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to
      the <see cref="System.Xml.XmlNode.OuterXml"/> property.</para>
		</remarks>
		<example>
			<para> The following example displays the root node to the console. </para>
			<codelink SampleID="Classic WebData XmlNode.WriteTo Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlNode.this1">
		<summary>
			<para> Gets the first child element with the
      specified <see cref="System.Xml.XmlNode.LocalName"/> and <see cref="System.Xml.XmlNode.NamespaceURI"/>
      .</para>
		</summary>
		<param name="localname">The local name of the element.</param>
		<param name=" ns">The namespace URI of the element.</param>
		<value>
			<para>The first <see cref="System.Xml.XmlElement"/> with the matching
<paramref name="localname"/> and <paramref name="ns"/> 
.</para>
		</value>
		<remarks>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
	</doc><doc for="XmlNode.CreateNavigator">
		<summary>
			<para>Creates an <see cref="System.Xml.XPath.XPathNavigator"/> for navigating this object.</para>
		</summary>
		<returns>
			<para>An <see langword="XPathNavigator"/>
object. The <see langword="XPathNavigator"/> is positioned on the node from
which the method was called. It is not positioned on the root of the
document.</para>
		</returns>
		<remarks>
			<para>The <see langword="XPathNavigator"/> 
provides read-only, random access to data. Because it is optimized for XSLT
transformations, it provides performance benefits when used as an input
mechanism to the <see cref="System.Xml.Xsl.XslTransform.Transform" qualify="true"/> method.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
   The following example loads and edits an XML document before performing an
   XSLT transform.
   
<codelink SampleID="XslTransform.Transform2" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Xsl.XslTransform"/>
	</doc><doc for="XmlNode.ParentNode">
		<summary>
			<para>Gets the parent of this node (for nodes that can have
      parents).</para>
		</summary>
		<value>
			<para>The <see langword="XmlNode"/> that 
   is the parent of the current node. If a node has just been created and not
   yet added to the tree, or if it has been removed from the tree, the parent is
<see langword="null"/>. For all other nodes, the value returned depends on 
   the <see cref="System.Xml.XmlNode.NodeType"/> of the node. The following table describes the
   possible return values for the <see langword="ParentNode"/> property.</para>
			<list type="table">
				<listheader>
					<term>NodeType</term>
					<description>Return Value of ParentNode</description>
				</listheader>
				<item>
					<term> Attribute, Document,
         DocumentFragment, Entity, Notation</term>
					<description>Returns <see langword="null"/>
   ; these nodes do not have parents.</description>
				</item>
				<item>
					<term> CDATA</term>
					<description>Returns the element or entity reference containing the CDATA section.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>Returns the element, entity reference, document type, or document containing the comment.</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Returns the document node.</description>
				</item>
				<item>
					<term> Element</term>
					<description>Returns the parent node of the element. If the 
      element is the root node in the tree, the parent is the document node.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>Returns the element, attribute, or entity reference containing the entity reference.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>Returns the document, element, document type, or entity reference containing the processing instruction.</description>
				</item>
				<item>
					<term> Text</term>
					<description>Returns the parent element, attribute, or entity reference containing the text node.</description>
				</item>
			</list>
		</value>
	</doc><doc for="XmlNode.OwnerDocument">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlDocument"/> to which this node belongs.</para>
		</summary>
		<value>
			<para>The <see cref="System.Xml.XmlDocument"/> to which this node belongs.</para>
			<para>If the node is an <see cref="System.Xml.XmlDocument"/> (NodeType equals XmlNodeType.Document),
this property returns <see langword="null"/>
.</para>
		</value>
		<remarks>
			<para>When adding nodes to the current node, use the <see cref="System.Xml.XmlDocument"/>
returned by the <see cref="System.Xml.XmlNode.OwnerDocument"/> property to create the
node.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlElement.OwnerDocument"/> (in the XmlElement class) for an example using this
   property.</para>
		</example>
	</doc><doc for="XmlNode.Normalize">
		<summary>
			<para> Puts all XmlText nodes in the full depth of the sub-tree underneath
      this XmlNode into a "normal" form where only markup
      (that is, tags, comments, processing instructions, CDATA sections,
      and entity references) separates XmlText nodes, that is, there
      are no adjacent XmlText nodes.
      </para>
		</summary>
		<remarks>
			<para> This method can be used to ensure
      that the DOM view of a document is the same as if it were saved and
      re-loaded, and is useful when operations (such as XPointer lookups) that
      depend on a particular document tree structure are to be used.
      </para>
		</remarks>
	</doc><doc for="XmlNode.SelectNodes1">
		<summary>
			<para>Selects a list of nodes matching the XPath expression.
      Any prefixes found in the XPath expression are resolved using the supplied
   <see cref="System.Xml.XmlNamespaceManager"/> .</para>
		</summary>
		<param name="xpath">The XPath expression.</param>
		<param name=" nsmgr">An <see cref="System.Xml.XmlNamespaceManager"/> to use for resolving namespaces for prefixes in the XPath expression.</param>
		<returns>
			<para>An <see cref="System.Xml.XmlNodeList"/> containing a collection of nodes matching the XPath
   query.</para>
		</returns>
		<exception cref="XPathException">The XPath expression contains a prefix which is not defined in the <see langword="XmlNamespaceManager"/>.</exception>
		<remarks>
			<para>XPath expressions can include namespaces. Namespace
      resolution is supported using the <see langword="XmlNamespaceManager"/>. If
      the XPath expression includes a prefix, the prefix and namespace URI pair
      must be added to the <see langword="XmlNamespaceManager"/> . </para>
			<note type="note">
      If the XPath expression does not include a
      prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must
      still add a prefix and namespace URI to the
   <see langword="XmlNamespaceManager"/>; otherwise, you will not get any nodes
      selected.
      
   </note>
			<para>For example, if you had the following XML:</para>
			<code>
&lt;bookstore xmlns="http://www.lucernepublishing.com"&gt;
 &lt;book&gt;
   &lt;title&gt;Pride And Prejudice&lt;/title&gt;
 &lt;/book&gt;
&lt;/bookstore&gt;
   </code>
			<para> The following C# code selects all book nodes: </para>
			<code>
XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com");
XmlNodeList nodelist = doc.SelectNodes("//ab:book", nsmgr);
   </code>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example displays the values of each of
      the ISBN attributes.</para>
			<codelink SampleID="XmlNode.SelectNodes1" SnippetID="1"/>








The example uses the file, <see langword="booksort.xml"/>, as input.

<codelink SampleID="Classic WebData XmlNode.SelectNodes Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlNode.LocalName">
		<summary>
			<para> When overridden in a derived class, gets the local name of the node.</para>
		</summary>
		<value>
			<para>The name of the node with the prefix removed. For
      example, <see langword="LocalName"/>
      is book for the element &lt;bk:book&gt;.</para>
			<para>The name returned is dependent on the <see cref="System.Xml.XmlNode.NodeType"/>
of the node:</para>
			<list type="table">
				<listheader>
					<term>Type</term>
					<description>Name</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The
         local name of the attribute.</description>
				</item>
				<item>
					<term> CDATA</term>
					<description>#cdata-section</description>
				</item>
				<item>
					<term> Comment</term>
					<description>#comment</description>
				</item>
				<item>
					<term> Document</term>
					<description>#document</description>
				</item>
				<item>
					<term> DocumentFragment</term>
					<description>#document-fragment</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>The
         document type name.</description>
				</item>
				<item>
					<term> Element</term>
					<description>The
         local name of the element.</description>
				</item>
				<item>
					<term> Entity</term>
					<description>The
         name of the entity.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>The
         name of the entity referenced.</description>
				</item>
				<item>
					<term> Notation</term>
					<description>The
         notation name.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The
         target of the processing instruction.</description>
				</item>
				<item>
					<term> Text</term>
					<description>#text</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>#whitespace</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>#significant-whitespace</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description>#xml-declaration</description>
				</item>
			</list>
		</value>
		<remarks>
			<para>If the node does not have a prefix, LocalName is the same as <see cref="System.Xml.XmlNode.Name"/>.</para>
		</remarks>
		<seealso cref="System.Xml.XmlNode.Prefix"/>
		<seealso cref="System.Xml.XmlNode.Name"/>
	</doc>
	<doc for="XmlNode.Clone">
		<summary>
			<para>Creates a duplicate of this node.</para>
		</summary>
		<returns>
			<para>The cloned node.</para>
		</returns>
		<remarks>
			<para>Cloning an <see cref="System.Xml.XmlElement"/> copies all attributes and their values, including those
   generated by the XML processor to represent defaulted attributes. This method recursively clones the node and the subtree underneath it.</para>
			<para><see langword="Clone"/> is equivalent to calling <c>CloneNode(true)</c> .</para>
			<para> The following table describes the specific
   behavior for each <see cref="System.Xml.XmlNodeType"/>
   .</para>
			<list type="table">
				<listheader>
					<term>XmlNodeType</term>
					<description>Clone</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>Clones the attribute node, including child
         nodes.</description>
				</item>
				<item>
					<term> CData</term>
					<description>Clones the CData node, including its data content.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>Clones the comment node, including its text content.</description>
				</item>
				<item>
					<term> Document</term>
					<description>Clones the document node, including any child nodes.</description>
				</item>
				<item>
					<term> DocumentFragment</term>
					<description>Clones the document fragment node, including any child nodes.</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Clones the document type node.</description>
				</item>
				<item>
					<term> Element</term>
					<description>Clones the element node, its attributes, and any child nodes.</description>
				</item>
				<item>
					<term> Entity</term>
					<description>Entity nodes cannot be cloned.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>Clones the entity reference node. The replacement text is not
         included.</description>
				</item>
				<item>
					<term> Notation</term>
					<description>Notation nodes cannot be cloned.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>Clones the processing instruction node, including its target and
         data.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>Clones the significant white space node, including its data value.</description>
				</item>
				<item>
					<term> Text</term>
					<description>Clones the text node, including its data value.</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>Clones the white space node, including its data value.</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description> Clones the XmlDeclaration node, including its data value.</description>
				</item>
				<item>
					<term> All other node types.</term>
					<description>These node types cannot be cloned.</description>
				</item>
			</list>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example clones the root node of the XML
      document. </para>
			<codelink SampleID="Classic WebData XmlNode.Clone Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlNode.CloneNode"/>
	</doc>
	<doc for="XmlNode">
		<summary>
			<para> Represents a single node in the XML document.
      </para>
		</summary>
		<remarks>
   This class implements the W3C Document Object Model
   (DOM) Level 1 Core and the Core DOM Level 2. The DOM is an in-memory (cache)
   tree representation of an XML document. <see langword="XmlNode"/> is the base
   class in the .NET implementation of the DOM. It supports XPath selections
   and provides editing capabilities. The <see cref="System.Xml.XmlDocument"/> class extends
<see langword="XmlNode"/> and represents an XML document. You can use 
<see langword="XmlDocument"/> to load and save XML data. It also includes methods 
   for node creation. See <see topic="cpconXMLDocumentObjectModelDOM"/>
   for more information.
</remarks>
		<seealso topic="cpconCreateNewNodesInDOM"/>
		<seealso cref="System.Xml.XmlNode.SelectNodes"/>
	</doc>
	<doc for="XmlNode.ChildNodes">
		<summary>
			<para>Gets all the child nodes of the node.</para>
		</summary>
		<value>
			<para>An <see cref="System.Xml.XmlNodeList"/> that contains all the child nodes of
   the node.</para>
			<para>If there are no child nodes, this property returns an empty <see cref="System.Xml.XmlNodeList"/>.</para>
		</value>
		<example>
			<para> The following example displays all the child nodes of the root element.</para>
			<codelink SampleID="Classic WebData XmlNode.HasChildNodes Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.HasChildNodes">
		<summary>
			<para>Gets a value indicating whether this node has any child nodes.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the node 
   has child nodes; otherwise,
<see langword="false"/> .</para>
		</value>
		<example>
			<para> The following example displays all the child nodes of the root element.</para>
			<codelink SampleID="Classic WebData XmlNode.HasChildNodes Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.InnerText">
		<summary>
			<para>Gets or sets the concatenated values of the node and all
      its child nodes.</para>
		</summary>
		<value>
			<para>The concatenated values of the node and all its child nodes.</para>
		</value>
		<remarks>
			<para>Setting this property replaces all the child nodes with the parsed contents of
      the given string.</para>
			<para>For leaf nodes, <see langword="InnerText"/> returns the same content as
   the <see cref="System.Xml.XmlNode.Value"/> property.</para>
			<para>This property is a Microsoft extension to the Document Object Model
   (DOM).</para>
		</remarks>
		<example>
			<para>The following example compares the <see langword="InnerText"/> and <see cref="System.Xml.XmlNode.InnerXml"/> properties.</para>
			<codelink SampleID="Classic WebData XmlNode.InnerText Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.InnerXml">
		<summary>
			<para>Gets or sets the markup representing
      only the child nodes of this node.</para>
		</summary>
		<value>
			<para>The markup of the child nodes of this node.</para>
		</value>
		<exception cref="InvalidOperationException">Setting this property on a node that cannot have child nodes.</exception>
		<remarks>
			<para>Attempting to set this property from a node that cannot have child nodes, for
      example a Text node, throws an exception. Otherwise, setting
   <see langword="InnerXml"/> replaces the child nodes, of the node, with the parsed
      contents of the given string. The parsing is done in the current namespace
      context.</para>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example compares the <see cref="System.Xml.XmlNode.InnerText"/> and <see langword="InnerXml"/> properties.</para>
			<codelink SampleID="Classic WebData XmlNode.InnerText Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.IsReadOnly">
		<summary>
			<para> Gets a value indicating whether the node is read-only.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   node is read-only; otherwise <see langword="false"/> .
   </para>
		</value>
		<remarks>
			<para> A read-only node is
      one whose properties, attributes, or child nodes cannot be changed. You can
      remove a read-only node from the tree and insert it somewhere else.
      For example, Entity nodes are always read-only.
      </para>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
	</doc>
	<doc for="XmlNode.this">
		<overload>
			<para> Gets the specified
      child element.</para>
		</overload>
		<summary>
			<para> Gets the first child element with the specified
   <see cref="System.Xml.XmlNode.Name"/> .</para>
		</summary>
		<param name="name">The qualified name of the element to retrieve.</param>
		<value>
			<para> The first <see cref="System.Xml.XmlElement"/> that matches the specified
   name.</para>
		</value>
		<remarks>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para> The following example displays the title element. </para>
			<codelink SampleID="Classic WebData XmlNode.this Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.Prefix">
		<summary>
			<para>Gets or sets the namespace prefix of this node.</para>
		</summary>
		<value>
			<para>The namespace prefix of this node. For example,
   <see langword="Prefix"/>is bk for the element &lt;bk:book&gt;. If there is no
      prefix, this property returns String.Empty.</para>
		</value>
		<exception cref="ArgumentException">This node is read-only.</exception>
		<exception cref="XmlException"><para>The specified prefix contains an illegal character.</para>
			<para>The specified prefix is malformed.</para>
			<para>The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".</para>
			<para>This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".</para>
			<para> This node is an attribute and the qualifiedName of this node is "xmlns". </para></exception>
		<remarks>
			<para>Setting this property, when permitted, changes
      the <see cref="System.Xml.XmlNode.Name"/>
      property, which holds the
      qualified name, on Element and Attribute nodes. Setting this
      property on node types that cannot have a prefix (such
      as Text, Comment, EntityReference, CDATA, ProcessingInstruction, Document, and DocumentFragment)
      has no
      effect. Changing the prefix of an attribute that is known to
      have a default value, does not make a new attribute with the
      default value and the original prefix appear, since the namespace
      URI and local name do not change.</para>
			<note type="inheritinfo">
      When
      overriding <see langword="Prefix"/> in a derived class, this property
      cannot be set.
      
   </note>
		</remarks>
	</doc>
	<doc for="XmlNode.Value">
		<summary>
			<para>Gets or sets the value of the node.</para>
		</summary>
		<value>
			<para>The value returned depends on the <see cref="System.Xml.XmlNode.NodeType"/>
of the node:</para>
			<list type="table">
				<listheader>
					<term>Type</term>
					<description>Value</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The
         value of the attribute.</description>
				</item>
				<item>
					<term> CDATASection</term>
					<description>The content of the CDATA Section.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>The content of the comment.</description>
				</item>
				<item>
					<term> Document</term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term> DocumentFragment</term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term> Element</term>
					<description><see langword="null"/>. You can
   use the <see cref="System.Xml.XmlElement.InnerText" qualify="true"/> or <see cref="System.Xml.XmlElement.InnerXml" qualify="true"/> properties to access the value of the element node.</description>
				</item>
				<item>
					<term> Entity</term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term> Notation</term>
					<description><see langword="null"/>.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The entire content excluding the target.</description>
				</item>
				<item>
					<term> Text</term>
					<description>
						<para>The content of the text node.</para></description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>The white space characters. White space can consist
         of one or more space characters, carriage returns, line feeds, or tabs.</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>The white space characters. White space can consist
         of one or more space characters, carriage returns, line feeds, or tabs.</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description>The
         content of the declaration (that is, everything between &lt;?xml and ?&gt;).</description>
				</item>
			</list>
		</value>
		<exception cref="ArgumentException">Setting the value of a node that is read-only.</exception>
		<exception cref="InvalidOperationException">Setting the value of a node that is not supposed to have a value (for example, an Element node).</exception>
	</doc>
	<doc for="XmlNode.AppendChild">
		<summary>
			<para>Adds the specified node to the end of the list of child nodes, of
      this node.</para>
		</summary>
		<param name="newChild">The node to add. If it is a <see cref="System.Xml.XmlDocumentFragment"/> , the entire contents of the document fragment are moved into the child list of this node.</param>
		<returns>
			<para>The node added.</para>
		</returns>
		<exception cref="InvalidOperationException"><para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.</para>
			<para>The <paramref name="newChild"/> is an ancestor of this node.</para></exception>
		<exception cref="ArgumentException"><para>The <paramref name="newChild"/> was created from a different document than the one that created this node.</para>
			<para>This node is read-only.</para></exception>
		<remarks>
			<para>If the <paramref name="newChild"/> is already in the tree, it is
   first removed.</para>
			<para>If the node being inserted was created from another document, you can
   use <see cref="System.Xml.XmlDocument.ImportNode" qualify="true"/> to import the node to the current document. The
   imported node can then be inserted into the current document.</para>
			<note type="inheritinfo">
   When
   overriding <see langword="AppendChild"/> in a derived class, in order for events
   to be fired correctly, you must call the <see langword="AppendChild"/> method of
   the base class.
</note>
		</remarks>
		<example>
			<para>The following example adds a new node to the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.AppendChild Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.ImportNode" qualify="true"/>
	</doc>
	<doc for="XmlNode.CloneNode">
		<summary>
			<para>When overridden in a derived class, creates a duplicate of the node.</para>
		</summary>
		<param name="deep"><see langword="true"/>to recursively clone the subtree under the specified node; <see langword="false"/> to clone only the node itself.</param>
		<returns>
			<para>The cloned node.</para>
		</returns>
		<exception cref="InvalidOperationException">Calling this method on a node type that cannot be cloned.</exception>
		<remarks>
			<para> This method serves as a copy constructor for
      nodes. The duplicate node has no parent (<see cref="System.Xml.XmlNode.ParentNode"/>
      returns <see langword="null"/>
      ).</para>
			<para> The following table describes the specific
      behavior for each <see cref="System.Xml.XmlNodeType"/>
      .</para>
			<list type="table">
				<listheader>
					<term>XmlNodeType</term>
					<description>CloneNode(true)</description>
					<description>CloneNode(false)</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>Clones the attribute node, including child
            nodes.</description>
					<description>Clones the attribute node, including child
            nodes.</description>
				</item>
				<item>
					<term> CData</term>
					<description>Clones the CData node, including its data content.</description>
					<description>Clones the CData node, including its data content.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>Clones the comment node, including its text content.</description>
					<description>Clones the comment node, including its text content.</description>
				</item>
				<item>
					<term> Document</term>
					<description>Clones the document node, including any child nodes.</description>
					<description>Clones the document node.</description>
				</item>
				<item>
					<term> DocumentFragment</term>
					<description>Clones the document fragment node, including any child nodes.</description>
					<description>Clones the document fragment node.</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Clones the document type node.</description>
					<description>Clones the document type node.</description>
				</item>
				<item>
					<term> Element</term>
					<description>Clones the element node, its attributes, and any child nodes.</description>
					<description>Clones the element node and its attributes, including any default
            attributes.</description>
				</item>
				<item>
					<term> Entity</term>
					<description>Entity nodes cannot be cloned.</description>
					<description>Entity nodes cannot be cloned.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>Clones the entity reference node. The replacement text is not
            included.</description>
					<description>Clones the entity reference node. The replacement text is not
            included.</description>
				</item>
				<item>
					<term> Notation</term>
					<description>Notation nodes cannot be cloned.</description>
					<description>Notation nodes cannot be cloned.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>Clones the processing instruction node, including its target and
            data.</description>
					<description>Clones the processing instruction node, including its target and
            data.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>Clones the significant white space node, including its data value.</description>
					<description>Clones the significant white space node, including its data
            value.</description>
				</item>
				<item>
					<term> Text</term>
					<description>Clones the text node, including its data value.</description>
					<description>Clones the text node, including its data value.</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>Clones the white space node, including its data value.</description>
					<description>Clones the white space node, including its data value.</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description> Clones the XmlDeclaration node, including its data value.</description>
					<description>Clones the XmlDeclaration node, including its data
            value.</description>
				</item>
				<item>
					<term> All other node types.</term>
					<description>These node types cannot be cloned.</description>
					<description>These node types cannot be cloned.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows
      the difference between a deep and shallow clone.</para>
			<codelink SampleID="Classic WebData XmlNode.CloneNode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.GetNamespaceOfPrefix">
		<summary>
			<para>Looks up the closest xmlns declaration for the given
      prefix that is in scope for the current node and returns
      the namespace URI in the declaration.</para>
		</summary>
		<param name="prefix">Prefix whose namespace URI you want to find.</param>
		<returns>
			<para>The namespace URI of the specified prefix.</para>
		</returns>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example adds a new attribute to the XML document. </para>
			<codelink SampleID="Classic WebData XmlNode.GetNamespaceOfPrefix Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.GetPrefixOfNamespace">
		<summary>
			<para>Looks up the closest xmlns declaration for the given namespace
      URI that is in scope for the current node and returns
      the prefix defined in that declaration.</para>
		</summary>
		<param name="namespaceURI">Namespace URI whose prefix you want to find.</param>
		<returns>
			<para>The prefix for the specified namespace URI.</para>
		</returns>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example adds a new element to the XML
      document.</para>
			<codelink SampleID="Classic WebData XmlNode.GetPrefixOfNamespace Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.InsertAfter">
		<summary>
			<para>Inserts the specified node immediately after the specified reference node.</para>
		</summary>
		<param name="newChild">The <see langword="XmlNode"/> to insert.</param>
		<param name="refChild">The <see langword="XmlNode"/> that is the reference node. The <paramref name="newNode"/> is placed after the <paramref name="refNode"/> .</param>
		<returns>
			<para>The node being inserted.</para>
		</returns>
		<exception cref="InvalidOperationException"><para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.</para>
			<para>The <paramref name="newChild"/> is an ancestor of this node.</para></exception>
		<exception cref="ArgumentException"><para>The <paramref name="newChild"/> was created from a different document than the one that created this node.</para>
			<para>The <paramref name="refChild"/> is not a child of this node.</para>
			<para>This node is read-only.</para></exception>
		<remarks>
			<para>If <paramref name="refChild"/> is
<see langword="null"/> ,
   insert <paramref name="newChild"/>
   at the beginning of the list of child nodes.
   If <paramref name="newChild"/> is
   an <see cref="System.Xml.XmlDocumentFragment"/> object, its child
   nodes are inserted, in the same order, after <paramref name="refChild"/>. If
   the <paramref name="newChild"/> is already in the tree, it is first removed.</para>
			<para>If the node being inserted was created from another document, you can
   use <see cref="System.Xml.XmlDocument.ImportNode" qualify="true"/> to import the node to the current document. The
   imported node can then be inserted into the current document.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
			<note type="inheritinfo">
   When overriding
<see langword="InsertAfter"/> in a derived class, in order for events 
   to be fired correctly, you must call the InsertAfter method of the base class.
</note>
		</remarks>
		<example>
			<para>The following example adds a new node to the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.InsertAfter Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.ImportNode" qualify="true"/>
	</doc>
	<doc for="XmlNode.InsertBefore">
		<summary>
			<para>Inserts the specified node immediately before the specified reference node.</para>
		</summary>
		<param name="newChild">The <see langword="XmlNode"/> to insert.</param>
		<param name="refChild">The <see langword="XmlNode"/> that is the reference node. The <paramref name="newChild"/> is placed before this node.</param>
		<returns>
			<para>The node being inserted.</para>
		</returns>
		<exception cref="InvalidOperationException"><para>The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.</para>
			<para>The <paramref name="newChild"/> is an ancestor of this node.</para></exception>
		<exception cref="ArgumentException"><para>The <paramref name="newChild"/> was created from a different document than the one that created this node.</para>
			<para>The <paramref name="refChild"/> is not a child of this node.</para>
			<para>This node is read-only.</para></exception>
		<remarks>
			<para>If <paramref name="refChild"/> is <see langword="null"/>,
   insert <paramref name="newChild"/> at
   the end of the list of child nodes.
   If <paramref name="newChild"/> is
   an <see cref="System.Xml.XmlDocumentFragment"/> object, its child
   nodes are inserted, in the same order, before <paramref name="refChild"/>. If
   the <paramref name="newChild"/>
   is already in the tree, it is first removed.</para>
			<para>If the node being inserted was created from another document, you can
   use <see cref="System.Xml.XmlDocument.ImportNode" qualify="true"/> to import the node to the current document. The
   imported node can then be inserted into the current document.</para>
			<note type="inheritinfo">
   When overriding
<see langword="InsertBefore"/> in a derived class, in order for 
   events to be fired correctly, you must call the <see langword="InsertBefore"/>
   method of the base
   class.
</note>
		</remarks>
		<example>
			<para>The following example adds a new node to the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.InsertBefore Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.ImportNode" qualify="true"/>
	</doc>
	<doc for="XmlNode.PrependChild">
		<summary>
			<para>Adds the specified node to the beginning of the list of child nodes for
      this node.</para>
		</summary>
		<param name="newChild">The node to add. If it is an <see cref="System.Xml.XmlDocumentFragment"/> , the entire contents of the document fragment are moved into the child list of this node.</param>
		<returns>
			<para>The node added.</para>
		</returns>
		<exception cref="InvalidOperationException"><para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.</para>
			<para>The <paramref name="newChild"/> is an ancestor of this node.</para></exception>
		<exception cref="ArgumentException"><para>The <paramref name="newChild"/> was created from a different document than the one that created this node.</para>
			<para> This node is read-only.</para></exception>
		<remarks>
			<para>If the <paramref name="newChild"/> is already in the tree, it is
   first removed.</para>
			<para>If the node being inserted was created from another document, you can
   use <see cref="System.Xml.XmlDocument.ImportNode" qualify="true"/> to import the node to the current document. The
   imported node can then be inserted into the current document.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
			<note type="inheritinfo">
   When
   overriding <see langword="PrependChild"/> in a derived class, in order for
   events to be fired correctly, you must call the <see langword="PrependChild"/>
   method of the base class.
</note>
		</remarks>
		<example>
			<para>The following example adds a new node to the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.PrependChild Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.ImportNode" qualify="true"/>
	</doc>
	<doc for="XmlNode.RemoveAll">
		<summary>
			<para>Removes all the child nodes and/or attributes
      of the current node.</para>
		</summary>
		<remarks>
			<para>If a removed attribute is known to have a default
      value, an attribute immediately appears containing the default value and, if
      applicable, the corresponding namespace URI, local name, and prefix.</para>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
			<note type="inheritinfo">
      When
      overriding <see langword="RemoveAll"/> in a derived class, in order for events
      to fire correctly, you must call the <see langword="RemoveAll"/> method of the
      base class.
      
   </note>
		</remarks>
		<example>
			<para>The following example removes all child and attribute nodes from the root node.</para>
			<codelink SampleID="Classic WebData XmlNode.RemoveAll Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.RemoveChild">
		<summary>
			<para>Removes specified child node.</para>
		</summary>
		<param name="oldChild">The node being removed.</param>
		<returns>
			<para>The node removed.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="oldChild"/> is not a child of this node. Or this node is read-only.</exception>
		<remarks>
			<note type="inheritinfo">
      When
      overriding <see langword="RemoveChild"/> in a derived class, in order for events
      to be fired correctly, you must call the <see langword="RemoveChild"/> method of
      the base class.
      
   </note>
		</remarks>
		<example>
			<para> The following example removes a node from the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.RemoveChild Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNode.ReplaceChild">
		<summary>
			<para>Replaces the child node <paramref name="oldChild"/>
with <paramref name="newChild"/> node.</para>
		</summary>
		<param name="newChild">The new node to put in the child list.</param>
		<param name="oldChild">The node being replaced in the list.</param>
		<returns>
			<para>The node replaced.</para>
		</returns>
		<exception cref="InvalidOperationException"><para>This node is of a type that does not allow child nodes of the type of the <paramref name="newChild"/> node.</para>
			<para>The <paramref name="newChild"/> is an ancestor of this node.</para></exception>
		<exception cref="ArgumentException"><para>The <paramref name="newChild"/> was created from a different document than the one that created this node.</para>
			<para>This node is read-only.</para>
			<para>The <paramref name="oldChild"/> is not a child of this node.</para></exception>
		<remarks>
			<para>If the <paramref name="newChild"/> is already in the tree, it is first removed.</para>
			<para>If the <paramref name="newChild"/> was created from another document, you can
use <see cref="System.Xml.XmlDocument.ImportNode" qualify="true"/> to import the node to the current document. The
imported node can then be passed to the <see langword="ReplaceChild"/>
method.</para>
			<note type="inheritinfo">
   When
   overriding <see langword="ReplaceChild"/> in a derived class, in order for
   events to be fired correctly, you must call the <see langword="ReplaceChild"/>
   method of the base class.
</note>
		</remarks>
		<example>
			<para>The following example replaces the title element in the XML document.</para>
			<codelink SampleID="Classic WebData XmlNode.ReplaceChild Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlDocument.ImportNode" qualify="true"/>
	</doc>
	<doc for="XmlNode.SelectSingleNode">
		<overload>
			<para>Selects the first
   <see langword="XmlNode"/> that matches the XPath expression.</para>
		</overload>
		<summary>
			<para>Selects the first <see langword="XmlNode"/> that matches the
   XPath expression.</para>
		</summary>
		<param name="xpath">The XPath expression.</param>
		<returns>
			<para>The first <see langword="XmlNode"/> that matches the
   XPath query or <see langword="null"/> if no matching node is found.</para>
		</returns>
		<exception cref="XPathException">The XPath expression contains a prefix.</exception>
		<remarks>
			<para>If the XPath expression requires namespace resolution, you must
      use the <see langword="SelectSingleNode"/> overload which takes an <see cref="System.Xml.XmlNamespaceManager"/>
      as its argument. The <see langword="XmlNamespaceManager"/> is used to resolve namespaces.</para>
			<note type="note">
      If the XPath expression does not include a
      prefix, it is assumed that the namespace URI is the empty namespace. If your XML
      includes a default namespace, you must still use the
   <see langword="XmlNamespaceManager"/>
   and add a prefix and namespace URI to it; otherwise,
   you will not get a
   selected node.
   
</note>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example changes the price of the first Jane Austen
      book.</para>
			<codelink SampleID="Classic WebData XmlNode.SelectSingleNode Example" SnippetID="1"/>





The example uses the file, <see langword="booksort.xml"/>, as input.

<codelink SampleID="Classic WebData XmlNode.SelectSingleNode Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlNode.SelectNodes"/>
	</doc>
	<doc for="XmlNode.SelectSingleNode1">
		<summary>
			<para>Selects the first <see langword="XmlNode"/> that matches the XPath
   expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="System.Xml.XmlNamespaceManager"/>
   .</para>
		</summary>
		<param name="xpath">The XPath expression.</param>
		<param name=" nsmgr">An <see cref="System.Xml.XmlNamespaceManager"/> to use for resolving namespaces for prefixes in the XPath expression.</param>
		<returns>
			<para>The first <see langword="XmlNode"/>
that matches the XPath query or <see langword="null"/> if no matching node is
found.</para>
		</returns>
		<exception cref="XPathException">The XPath expression contains a prefix which is not defined in the <see langword="XmlNamespaceManager"/>.</exception>
		<remarks>
			<para>XPath expressions can include namespaces. Namespace
      resolution is supported using the <see langword="XmlNamespaceManager"/>. If
      the XPath expression includes a prefix, the prefix and namespace URI pair
      must be added to the <see langword="XmlNamespaceManager"/> . </para>
			<note type="note">
      If the XPath expression does not include a
      prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must
      still add a prefix and namespace URI to the
   <see langword="XmlNamespaceManager"/>; otherwise, you will not get a node
      selected.
      
   </note>
			<para>For example, if you had the following XML:</para>
			<code>
&lt;bookstore xmlns="http://www.lucernepublishing.com"&gt;
 &lt;book&gt;
   &lt;title&gt;Pride And Prejudice&lt;/title&gt;
 &lt;/book&gt;
&lt;/bookstore&gt;
   </code>
			<para>The following C# code selects the first book node: </para>
			<code>
XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com");
XmlNode book = doc.SelectSingleNode("//ab:book", nsmgr);
   </code>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example selects the book with the matching ISBN value.
      </para>
			<codelink SampleID="XmlNode.SelectSingleNode1" SnippetID="1"/>








The example uses the file, <see langword="booksort.xml"/>, as input.

<codelink SampleID="Classic WebData XmlNode.SelectNodes Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlNode.Supports">
		<summary>
			<para> Test if the DOM implementation implements a specific feature.
      </para>
		</summary>
		<param name="feature">The package name of the feature to test. This name is not case-sensitive. </param>
		<param name="version"> This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
		<returns>
			<para><see langword="true"/> if the feature is implemented in the specified version;
   otherwise, <see langword="false"/>.
   The following table describes the combinations that
   return <see langword="true"/>.
   </para>
			<list type="table">
				<listheader>
					<term> Feature</term>
					<description> Version</description>
				</listheader>
				<item>
					<term> XML</term>
					<description> 1.0</description>
				</item>
				<item>
					<term> XML</term>
					<description>2.0</description>
				</item>
			</list>
		</returns>
	</doc>
	<doc for="XmlNode.WriteContentTo">
		<summary>
			<para>When overridden in a derived class, saves all the child nodes of the node to the specified
   <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to
      the <see cref="System.Xml.XmlNode.InnerXml"/> property.</para>
		</remarks>
		<example>
			<para>The following example displays the contents of the root node to the console. </para>
			<codelink SampleID="Classic WebData XmlNode.WriteContentTo Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlNode.WriteTo"/>
	</doc>
	<doc for="XmlNode.BaseURI">
		<summary>
			<para>Gets the base URI of the current node.</para>
		</summary>
		<value>
			<para>The location from which the node was loaded or
      String.Empty if the node has no base URI.</para>
		</value>
		<remarks>
			<para>A networked XML document is comprised of chunks of data
      aggregated using various W3C standard inclusion mechanisms and therefore
      contains nodes that come from different places. The <see langword="BaseURI"/> tells you where these nodes came from.</para>
			<para>The value of this property varies depending on the node
      type. For example, Document nodes return the location of the <see cref="System.Xml.XmlDocument"/>
      object. Nodes which are child nodes of external EntityReference nodes return
      the location of the entity itself. For example, consider the following XML document:</para>
			<code>
&lt;!DOCTYPE item [
&lt;!ENTITY xyz SYSTEM "a/b.xml"&gt;
]&gt;
&lt;item num='123'&gt;&amp;xyz;&lt;/item&gt;
   </code>
			<para>where the external entity <see langword="a/b.xml"/>
contains the XML text:<c>&lt;test&gt;123&lt;/test&gt;</c>. </para>
			<para>If the document is loaded from http://server/mydata.xml , <see langword="BaseURI"/> returns the following:</para>
			<list type="table">
				<listheader>
					<term>NodeType</term>
					<description>Name</description>
					<description>BaseURI</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>num</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Document</term>
					<description>#document</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>item</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Entity</term>
					<description>xyz</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Element</term>
					<description>item</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>xyz</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Element</term>
					<description>test</description>
					<description>http://server/a/b.xml</description>
				</item>
				<item>
					<term> Text</term>
					<description>#text</description>
					<description>http://server/a/b.xml</description>
				</item>
			</list>
			<para><see langword="BaseURI"/> looks for
entity reference boundaries, so if entities are expanded this information is not
preserved and this property returns the location of the
<see langword="XmlDocument"/> object in all cases.</para>
			<para> As a second example, given the following XML document:</para>
			<code>
&lt;!DOCTYPE Mydata SYSTEM "http://localhost/doctype.dtd"&gt;
&lt;baa&gt;&amp;xyz;&lt;/baa&gt;
</code>
where the DTD file contains the following:
<code>
&lt;!ENTITY xyz &lt;E1&gt;My Data&lt;/E1&gt;
&lt;!ELEMENT baa #PCDATA&gt;
&lt;!ATTLIST baa attr1 "woof"&gt;
</code>
			<para>If the XML document is loaded from http://localhost/mydata.xml, <see langword="BaseURI"/>
returns the following for each of the nodes:</para>
			<list type="table"><listheader>
					<term>NodeType</term>
					<description>Name</description>
					<description>BaseURI</description>
				</listheader>
				<item>
					<term> Document</term>
					<description>#document</description>
					<description>http://localhost/mydata.xml</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Mydata</description>
					<description>
						<para>http://localhost/mydata.xml</para>
						<para>The <see cref="System.Xml.XmlDocumentType.SystemId" qualify="true"/> or <see cref="System.Xml.XmlDocumentType.PublicId" qualify="true"/> properties can be used to identify where 
      the DTD file was loaded from. </para></description>
				</item>
				<item>
					<term> Element</term>
					<description>baa</description>
					<description>http://localhost/mydata.xml</description>
				</item>
				<item>
					<term> Entity</term>
					<description>xyz</description>
					<description>http://localhost/doctype.dtd</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>xyz</description>
					<description>http://localhost/mydata.xml</description>
				</item>
				<item>
					<term> Attribute</term>
					<description>woof</description>
					<description>http://localhost/mydata.xml</description>
				</item>
			</list>
			<note type="note">
   The base URI of a default attribute
   is the same as the base URI of the element to which they belong.
</note>
			<para>This property is a Microsoft extension to the Document Object Model
   (DOM).</para>
		</remarks>
	</doc>
	<doc for="XmlNode.OuterXml">
		<summary>
			<para>Gets the markup representing
      this node and all its child nodes.</para>
		</summary>
		<value>
			<para>The markup containing this node and all its child nodes.</para>
			<note type="note">
				<see langword="OuterXml"/> does 
      not return default attributes.
   </note>
		</value>
		<remarks>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example compares output from
      the <see cref="System.Xml.XmlNode.InnerXml"/> and <see langword="OuterXml"/> properties. </para>
			<codelink SampleID="Classic WebData XmlNode.OuterXml Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
