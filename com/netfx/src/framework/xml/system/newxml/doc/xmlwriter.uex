<docs>
	<doc for="XmlWriter.WriteChar">
		<summary>
			<para>Writes out the specified single character value.</para>
		</summary>
		<param name="value">Character to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteChar"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteBoolean">
		<summary>
			<para>Writes out the specified boolean value.</para>
		</summary>
		<param name="value">boolean to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteBoolean"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteDate">
		<summary>
			<para>Writes out the specified Date value.</para>
		</summary>
		<param name="value">DateTime to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteDate"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteDateTime">
		<summary>
			<para>Writes out the specified DateTime value.</para>
		</summary>
		<param name="value">DateTime to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteDateTime"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteTime">
		<summary>
			<para>Writes out the specified Time value.</para>
		</summary>
		<param name="value">DateTime to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteTime"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteTimeSpan">
		<summary>
			<para>Writes out the specified TimeSpan value.</para>
		</summary>
		<param name="value">TimeSpan to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<exception cref="NotSupportedException">DataTypeNamespace is not set to XSD.</exception>
		<remarks>
			<para>
				<see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> must be set to XSD (http://www.w3.org/2000/10/XMLSchema) in order to use the <see langword="TimeSpan"/> data type.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteTimeSpan"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteDecimal">
		<summary>
			<para>Writes out the specified Decimal value.</para>
		</summary>
		<param name="value">Decimal to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteDecimal"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteDouble">
		<summary>
			<para>Writes out the specified double-precision floating point number.</para>
		</summary>
		<param name="value">Double-precision floating point number to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteDouble"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteSingle">
		<summary>
			<para>Writes out the specified single-precision floating point number.</para>
		</summary>
		<param name="value">Single-precision floating point number to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteSingle"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteInt16">
		<summary>
			<para>Writes out the specified Int16 value.</para>
		</summary>
		<param name="value">Int16 to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteInt16"/> (in the XmlTextWriter class) for an example using
    this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteInt32">
		<summary>
			<para>Writes out the specified Int32 value.</para>
		</summary>
		<param name="value">Int32 to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteInt32"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteInt64">
		<summary>
			<para>Writes out the specified Int64 value.</para>
		</summary>
		<param name="value">Int64 to write.</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteInt64"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrBoolean">
		<overload>
			<para>Writes out an attribute with a Boolean value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified name and Boolean value.</para>
		</summary>
		<param name="localName">localName of attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrBoolean1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Boolean value.</para>
		</summary>
		<param name="localName">Name of attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrDate">
		<overload>
			<para>Writes out an attribute with a Date value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified name and Date value.</para>
		</summary>
		<param name="localName">Name of attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrDate1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Date value.</para>
		</summary>
		<param name="localName">local name of attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrDateTime">
		<overload>
			<para>Writes out an attribute with a DateTime value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified name and DateTime value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrDateTime1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and DateTime value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrTime">
		<overload>
			<para>Writes out an attribute with a Time value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified name and Time value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrTime1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Time value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrTimeSpan">
		<overload>
			<para>Writes out an attribute with a TimeSpan value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified LocalName and TimeSpan value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<exception cref="NotSupportedException">DataTypeNamespace is not set to XSD.</exception>
		<remarks>
			<para>
				<see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> must be set to XSD (http://www.w3.org/2000/10/XMLSchema) in order to use the <see langword="TimeSpan"/> data type.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrTimeSpan1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and TimeSpan value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<exception cref="NotSupportedException">DataTypeNamespace is not set to XSD.</exception>
		<remarks>
			<para>
				<see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> must be set to XSD (http://www.w3.org/2000/10/XMLSchema) in order to use the <see langword="TimeSpan"/> data type.</para>
		</remarks>
	</doc>
	<doc for="XmlWriter.WriteAttrDecimal">
		<overload>
			<para>Writes out an attribute with a Decimal value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified LocalName and Decimal value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrDecimal1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Decimal value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrDouble">
		<overload>
			<para>Writes out an attribute with a double-precision floating point number.</para>
		</overload>
		<summary>
			<para> Writes out an attribute with the specified LocalName and value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrDouble1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and value.</para>
		</summary>
		<param name="localName">localName of attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrSingle">
		<overload>
			<para>Writes out an attribute with a single-precision floating point number.</para>
		</overload>
		<summary>
			<para> Writes out an attribute with the specified LocalName and value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrSingle1">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrInt16">
		<overload>
			<para>Writes out an attribute with a Int16 value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified LocalName and Int16 value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrInt161">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Int16 value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrInt32">
		<overload>
			<para>Writes out an attribute with a Int32 value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified LocalName and Int32 value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrInt321">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Int32 value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteAttrInt64">
		<overload>
			<para>Writes out an attribute with a Int64 value.</para>
		</overload>
		<summary>
			<para>Writes out an attribute with the specified LocalName and Int64 value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name=" value">Value of the attribute</param>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttrInt641">
		<summary>
			<para>Writes out an attribute with the specified LocalName, NamespaceURI, and Int64 value.</para>
		</summary>
		<param name="localName">LocalName of the attribute</param>
		<param name="ns">Namespace URI for the attribute</param>
		<param name=" value">Value of the attribute</param>
	</doc>
	<doc for="XmlWriter.WriteElementBoolean">
		<overload>
			<para>Writes out an element containing a Boolean value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing a Boolean value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using
 <see langword="WriteElementBoolean"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementBoolean1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Boolean value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementDate">
		<overload>
			<para>Writes out an element containing a Date value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an Date value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementDate"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementDate1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Int64 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementDateTime">
		<overload>
			<para>Writes out an element containing a DateTime value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an DateTime value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementDateTime"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementDateTime1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and DateTime value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementTime">
		<overload>
			<para>Writes out an element containing a Time value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an Time value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementTime"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementTime1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Time value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementTimeSpan">
		<overload>
			<para>Writes out an element containing a TimeSpan value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an TimeSpan value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<exception cref="NotSupportedException">DataTypeNamespace is not set to XSD.</exception>
		<remarks>
			<para>
				<see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> must be set to XSD 
    (http://www.w3.org/2000/10/XMLSchema) in order to use the
 <see langword="WriteElementTimeSpan"/> method.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> for an example using 
 <see langword="WriteElementTimeSpan"/> .</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementTimeSpan1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and TimeSpan value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<exception cref="NotSupportedException">DataTypeNamespace is not set to XSD.</exception>
		<remarks>
			<para>
				<see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> must be set to XSD 
    (http://www.w3.org/2000/10/XMLSchema) in order to use the
 <see langword="WriteElementTimeSpan"/> method.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> for an example using 
 <see langword="WriteElementTimeSpan"/> .</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementDecimal">
		<overload>
			<para>Writes out an element containing a Decimal value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an Decimal value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementDecimal"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementDecimal1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Decimal value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementDouble">
		<overload>
			<para>Writes out an element containing a double-precision floating point number.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing a double-precision floating point number.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementDouble"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementDouble1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and double-precision floating point number.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementSingle">
		<overload>
			<para>Writes out an element containing a single-precision floating point number.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName and single-precision floating point number.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementSingle"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementSingle1">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and single-precision floating point number.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementInt16">
		<overload>
			<para>Writes out an element containing a Int16 value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an Int16 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementInt16"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementInt161">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Int16 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementInt32">
		<overload>
			<para>Writes out an element containing a Int32 value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an Int32 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementInt32"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementInt321">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Int32 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="XmlWriter.WriteElementInt64">
		<overload>
			<para>Writes out an element containing a Int64 value.</para>
		</overload>
		<summary>
			<para>Writes out an element with the specified LocalName containing an Int64 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> to see an example using <see langword="WriteElementInt64"/>.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementInt641">
		<summary>
			<para>Writes out an element with the specified LocalName, NamespaceURI, and Int64 value.</para>
		</summary>
		<param name="localName">LocalName of the element</param>
		<param name="ns">Namespace URI for the element</param>
		<param name=" value">Value of the element</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
	</doc>
	<doc for="Formatting">
		<summary>
			<para> Specifies formatting options for the <see cref="System.Xml.XmlTextWriter"/> .
   </para>
		</summary>
	</doc>
	<doc for="WriteState">
		<summary>
			<para> Specifies the state of the <see cref="System.Xml.XmlWriter"/> .
   </para>
		</summary>
	</doc>
	<doc for="WriteState.Start">
		<summary>
			<para> A Write method has not been called.
      </para>
		</summary>
	</doc>
	<doc for="WriteState.Prolog">
		<summary>
			<para> The prolog is being written.
      </para>
		</summary>
	</doc>
	<doc for="WriteState.Element">
		<summary>
			<para> An element start tag is being written.
      </para>
		</summary>
	</doc>
	<doc for="WriteState.Attribute">
		<summary>
			<para> An attribute value is being written.
      </para>
		</summary>
	</doc>
	<doc for="WriteState.Closed">
		<summary>
			<para> The <see cref="System.Xml.XmlWriter.Close"/> method has been called.
   </para>
		</summary>
	</doc>
	<doc for="XmlWriter.WriteStartElement1">
		<summary>
			<para> When overridden in a derived class, writes the specified start tag and
      associates it with the given namespace and prefix.</para>
		</summary>
		<param name="prefix">The namespace prefix of the element.</param>
		<param name="localName">The local name of the element.</param>
		<param name="ns">The namespace URI to associate with the element.</param>
		<exception cref="InvalidOperationException">The writer is closed.</exception>
	</doc>
	<doc for="XmlWriter.WriteEndAttribute">
		<summary>
			<para>When overridden in a derived class, closes the previous <see cref="System.Xml.XmlWriter.WriteStartAttribute"/>
call.</para>
		</summary>
		<remarks>
			<para>If you call <see langword="WriteStartAttribute"/> , you can close the attribute with
   this method.</para>
			<para>You can also close the attribute by calling
<see langword="WriteStartAttribute"/> again, calling <see cref="System.Xml.XmlWriter.WriteAttributeString"/>, or calling <see cref="System.Xml.XmlWriter.WriteEndElement"/>
.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteEndAttribute"/> (in the XmlTextWriter class) for an example using
   this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteState">
		<summary>
			<para>When overridden in a derived class, gets the state of the writer.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Xml.WriteState"/> values.
   </para>
		</value>
	</doc>
	<doc for="XmlWriter.WriteStartElement2">
		<summary>
			<para>When overridden in a derived class, writes out a start tag with the specified local name.</para>
		</summary>
		<param name="localName">The local name of the element.</param>
		<exception cref="InvalidOperationException">The writer is closed.</exception>
		<example>
			<para>The following example writes an XML fragment.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.Formatting Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlWriter.XmlLang">
		<summary>
			<para> When overridden in a derived class, gets the current xml:lang scope.
      </para>
		</summary>
		<value>
			<para> The current xml:lang or <see langword="null"/> if there
   is no xml:lang in the current scope.
   </para>
		</value>
		<remarks>
			<para> This property allows one component to find out in what state another component
      has left the writer. For example, perhaps one component wants to tell another which
      language help text to generate. The language information is communicated by writing an
      xml:lang attribute.
      </para>
		</remarks>
	</doc><doc for="XmlWriter.XmlSpace">
		<summary>
			<para> When overridden in a derived class, gets an <see cref="System.Xml.XmlSpace"/> representing the current xml:space scope.
   </para>
		</summary>
		<value>
			<para> An <see langword="XmlSpace"/> representing the current xml:space scope.
   </para>
			<list type="table">
				<listheader>
					<term> Value</term>
					<description> Meaning</description>
				</listheader>
				<item>
					<term> None </term>
					<description> This is the default if no xml:space scope exists.</description>
				</item>
				<item>
					<term> Default </term>
					<description> The current scope is xml:space="default".</description>
				</item>
				<item>
					<term> Preserve </term>
					<description> The current scope is xml:space="preserve".</description>
				</item>
			</list>
		</value>
		<remarks>
			<para> This allows one component to find out what state another component
      has left the writer in.
      </para>
		</remarks>
	</doc><doc for="XmlWriter.LookupPrefix">
		<summary>
			<para> When overridden in a derived class, returns the closest prefix defined in the
      current namespace scope for the namespace URI.</para>
		</summary>
		<param name="ns">The namespace URI whose prefix you want to find.</param>
		<returns>
			<para>The matching prefix or <see langword="null"/> if no matching namespace URI is found in the current scope.</para>
		</returns>
		<exception cref="ArgumentException"><paramref name="ns"/> is either <see langword="null"/> or String.Empty.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.LookupPrefix"/> (in the XmlTextWriter class) for an example using
   this method.</para>
		</example>
	</doc><doc for="XmlWriter.WriteComment">
		<summary>
			<para>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing
      the specified text.</para>
		</summary>
		<param name="text">Text to place inside the comment.</param>
		<exception cref="ArgumentException">The text would result in a non-well formed XML document.</exception>
		<remarks>
			<para>If <paramref name="text"/> is
   either <see langword="null"/> or String.Empty, this method writes a Comment
   with no data content, for example &lt;!----&gt;.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteComment"/> (in the XmlTextWriter class) for an example using
   this method.</para>
		</example>
	</doc><doc for="XmlWriter.WriteDocType">
		<summary>
			<para> When overridden in a derived class, writes the DOCTYPE declaration with the specified name
      and optional attributes.</para>
		</summary>
		<param name="name">The name of the DOCTYPE. This must be non-empty.</param>
		<param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
		<param name="sysid">If pubid is <see langword="null"/> and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
		<param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
		<exception cref="InvalidOperationException">This method was called outside the prolog (after the root element).</exception>
		<exception cref="ArgumentException">The value for <paramref name="name "/> would result in invalid XML.</exception>
		<remarks>
			<para>This method does not check for invalid characters in
   <paramref name="pubid, sysid "/>or <paramref name="subset"/>.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteDocType"/> (in the XmlTextWriter class) for an example using
   this method.</para>
		</example>
	</doc><doc for="XmlWriter.WriteEndElement">
		<summary>
			<para>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</para>
		</summary>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<remarks>
			<para> If the element contains no
      content, a short end tag "/&gt;" is written; otherwise, a full end tag is written.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteEndElement"/> (in the XmlTextWriter class) for an example using
   this method.</para>
		</example>
	</doc><doc for="XmlWriter.WriteFullEndElement">
		<summary>
			<para>When overridden in a derived class, closes one element and pops the
      corresponding namespace scope.</para>
		</summary>
		<remarks>
			<para>This method always writes the full end tag.
      This is useful when dealing with elements that must include a full end tag. For
      example, browsers expect HTML script blocks to be closed with "&lt;/script&gt;".</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteFullEndElement"/> (in the XmlTextWriter class) for an example using
   this method.</para>
		</example>
	</doc><doc for="XmlWriter.WriteProcessingInstruction">
		<summary>
			<para>When overridden in a derived class, writes out a processing instruction with a space between
      the name and text as follows: &lt;?name text?&gt;.</para>
		</summary>
		<param name="name">The name of the processing instruction.</param>
		<param name=" text">The text to include in the processing instruction.</param>
		<exception cref="ArgumentException"><para> The text would result in a non-well formed XML document.</para>
			<para>
				<paramref name="name"/> is either <see langword="null"/> or String.Empty.</para>
			<para>This method is being used to create an XML declaration after <see cref="System.Xml.XmlWriter.WriteStartDocument"/> has already been called. </para></exception>
		<remarks>
			<para>This method can be used to write the XML declaration (rather than <see cref="System.Xml.XmlWriter.WriteStartDocument"/>). This could result in the encoding attribute
   being incorrectly written. For example, the following C# code would result
   in an invalid XML document.
   </para>
			<code>
XmlTextWriter writer = new XmlTextWriter("pi.xml", Encoding.UTF8);
writer.WriteProcessingInstruction("xml", "version='1.0', encoding='UTF-16'");
writer.WriteStartElement("root");
writer.Close();
</code>
If <paramref name="text"/> is
either <see langword="null"/> or String.Empty, this method writes a ProcessingInstruction
with no data content, for example &lt;?name?&gt;.
</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteProcessingInstruction"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc><doc for="Formatting.Indented">
		<summary>
			<para> Causes child elements to be indented
      according to the <see cref="System.Xml.XmlTextWriter.Indentation"/> and <see cref="System.Xml.XmlTextWriter.IndentChar"/> settings. This option indents element
      content only; mixed content is not affected. For the XML 1.0
      definitions of
      
      these terms, see the W3C documentation (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content and http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content).</para>
		</summary>
	</doc><doc for="Formatting.None">
		<summary>
			<para> No special formatting is applied. This is the default.
      </para>
		</summary>
	</doc><doc for="WriteState.Content">
		<summary>
			<para> The element content is being written.
      </para>
		</summary>
	</doc><doc for="XmlWriter.Flush">
		<summary>
			<para>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the
 underlying stream.</para>
		</summary>
		<remarks>
			<para>This is called instead of <see cref="System.Xml.XmlWriter.Close"/> when you want to write more to
 the underlying stream without losing what is still in the buffer.</para>
		</remarks>
		<example>
 See <see cref="System.Xml.XmlTextWriter.Flush"/>
 (in the <see langword="XmlTextWriter"/> class) for an example using this method.
</example>
	</doc><doc for="XmlWriter.WriteNmToken">
		<summary>
			<para>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to
 the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
		</summary>
		<param name="name">The name to write.</param>
		<exception cref="ArgumentException"><paramref name="name "/>is not a valid NmToken; or <paramref name="name"/> is either <see langword="null"/> or String.Empty.</exception>
	</doc><doc for="XmlWriter.WriteName">
		<summary>
			<para>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to
 the W3C XML 1.0 recommendation
 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
		</summary>
		<param name="name">The name to write.</param>
		<exception cref="ArgumentException"><para>
				<paramref name="name "/>is not a valid XML name; or <paramref name="name"/> is either <see langword="null"/> or String.Empty.</para></exception>
		<remarks>
			<para>If <see cref="System.Xml.XmlTextWriter.Namespaces"/> is set to <see langword="true"/>,
<see langword="WriteName"/> also checks that the name is also valid according to 
 the W3C Namespaces in XML recommendation.</para>
		</remarks>
	</doc><doc for="XmlWriter.WriteQualifiedName">
		<summary>
			<para> When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix
 that is in scope for the given namespace.</para>
		</summary>
		<param name="localName">The local name to write.</param>
		<param name=" ns">The namespace URI for the name.</param>
		<exception cref="ArgumentException"><para>
				<paramref name="localName"/> is either <see langword="null"/> or String.Empty.</para>
			<para>
				<paramref name="localName"/> is not a valid name.</para></exception>
		<remarks>
			<para>For example, the following C# code:</para>
			<code>
writer.Formatting = Formatting.Indented;
writer.WriteStartElement("root");
 writer.WriteAttributeString("xmlns","x",null,"urn:abc");
 writer.WriteStartElement("item");
 writer.WriteStartAttribute("href",null);
 writer.WriteString("#");
 writer.WriteQualifiedName("test","urn:abc");
 writer.WriteEndAttribute();
 writer.WriteEndElement();
 writer.WriteEndElement();
 writer.Close();
 </code>
			<para> Generates the following output:</para>
			<code>
&lt;root xmlns:x="urn:abc"&gt;
 &lt;item href="#x:test"/&gt;
 &lt;/root&gt;
 </code>
			<para>If <paramref name="ns"/>
maps to the
current default namespace, no prefix is generated. </para>
			<para>When writing attribute values, this method generates a prefix if <paramref name="ns"/>
is not found. When writing element content, it throws an exception if
<paramref name="ns"/> is not found.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteQualifiedName"/> (in the XmlTextWriter class) for an example using
 this method.</para>
		</example>
	</doc><doc for="XmlWriter.WriteWhitespace">
		<summary>
			<para>When overridden in a derived class, writes out the given white space.</para>
		</summary>
		<param name="ws">The string of white space characters.</param>
		<exception cref="ArgumentException">The string contains non-white space characters.</exception>
		<remarks>
			<para> This method is used to
      manually format your document.</para>
		</remarks>
	</doc><doc for="XmlWriter.WriteString">
		<summary>
			<para> When overridden in a derived class, writes the given text content.</para>
		</summary>
		<param name="text">The text to write.</param>
		<exception cref="ArgumentException">The text string contains an invalid surrogate pair.</exception>
		<remarks>
			<para><see langword="WriteString"/> does the following</para>
			<list type="bullet"><item>
					<term>
      The characters <see langword="&amp;"/>, <see langword="&lt;"/>, and
   <see langword="&gt;"/> are replaced with <see langword="&amp;amp;"/>, 
   <see langword="&amp;lt;"/>, and <see langword="&amp;gt;"/>, respectively.</term>
				</item>
				<item>
					<term>
      Character values in the range 0x-0x1F (excluding white
      space characters 0x9, 0x10, and 0x13) are replaced with numeric character
      entities (&amp;#0; through &amp;#0x1F).</term>
				</item>
				<item>
					<term>
      If <see langword="WriteString"/> is called in the context of an attribute
      value, double and single quotes are replaced
      with <see langword="&amp;quot;"/> and <see langword="&amp;apos;"/>
      respectively.</term>
				</item>
			</list>
			<para> For example, this
   input string <c>test&lt;item&gt;test</c> is written out as</para>
			<code>
test&amp;lt;item&amp;gt;test
</code>
			<para>If <paramref name="text"/> is either <see langword="null"/> or String.Empty, this
method writes a text node with no data content.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteString"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteEndDocument">
		<summary>
			<para>When overridden in a derived class, closes any open elements or attributes and
      puts the writer back in the Start state.</para>
		</summary>
		<exception cref="ArgumentException">The XML document is invalid.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteEndDocument"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.Close">
		<summary>
			<para>When overridden in a derived class, closes this stream and the underlying stream.</para>
		</summary>
		<exception cref="InvalidOperationException">A call is made to write more output after <see langword="Close"/> has been called or the result of this call is an invalid XML document.</exception>
		<remarks>
			<para> Any elements
      or attributes left open are automatically closed.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.Close"/> (in the XmlTextWriter class) for
   an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttributes">
		<summary>
			<para> When overridden in a derived class, writes out all the attributes found at the
      current position in the <see cref="System.Xml.XmlReader"/>
      .</para>
		</summary>
		<param name="reader">The <see langword="XmlReader"/> from which to copy the attributes.</param>
		<param name="defattr"><see langword="true"/> to copy the default attributes from the <see langword="XmlReader"/> ; otherwise, <see langword="false"/>.</param>
		<exception cref="ArgumentException"><paramref name="reader"/> is <see langword="null"/>.</exception>
		<exception cref="XmlException"> The reader is not positioned on an element, attribute or XmlDeclaration node.</exception>
		<remarks>
			<para>If the reader is positioned on an element
      node <see langword="WriteAttributes"/> copies all the contained
      attributes. If the reader is positioned on an attribute node, this method writes
      the current attribute, then the rest of the attributes until the element closing
      tag. If the reader is positioned on an XmlDeclaration node, this method
      writes all the attributes in the declaration. If the reader is positioned
      on any other node type this method has no operation.</para>
			<para>If this method is called using <see cref="System.Xml.XmlValidatingReader"/>, to ensure well-formed 
   XML any content (which has been expanded from the entities) that could result in
   an invalid document is replaced when written. For example, if an attribute
   includes an <see langword="&amp;gt;"/> entity that has been expanded, to ensure a
   well-formed document the expanded &gt; is replaced when written out with
<see langword="&amp;gt;"/> 


. </para>
		</remarks>
		<example>
			<para>The following example copies all the elements to the
      output, changes the tag names to upper case, and copies all the
      attributes unchanged.</para>
			<codelink SampleID="Classic WebData XmlWriter.WriteAttributes Example" SnippetID="1"/>




The example uses the file, <see langword="test1.xml"/>, as input.
<codelink SampleID="Classic WebData XmlWriter.WriteAttributes Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.EntityHandling"/>
	</doc>
	<doc for="XmlWriter.WriteAttributeString1">
		<summary>
			<para>When overridden in a derived class, writes out the attribute with the specified local name and value.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name=" value">The value of the attribute.</param>
		<exception cref="InvalidOperationException">The state of writer is not WriteState.Element or writer is closed.</exception>
		<exception cref="ArgumentException">The <see langword="xml:space"/> or <see langword="xml:lang"/> attribute value is invalid.</exception>
		<remarks>
			<para><see langword="WriteAttributeString"/> does the following:
   </para>
			<list type="bullet"><item>
					<term>
      
      If the attribute value includes double or single quotes, they are
      replaced with <see langword="&amp;quot;"/> and <see langword="&amp;apos;"/> respectively.</term>
				</item>
				<item>
					<term>
      
      If writing an <see langword="xml:space"/> attribute, the writer verifies
      the attribute value is valid. (Valid values are <see langword="preserve"/> or
   <see langword="default"/>.)</term>
				</item>
				<item>
					<term>
      
      If writing an <see langword="xml:lang"/> attribute, the writer does not verify that the
      attribute value is valid according to the W3C XML 1.0
      recommendation.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteEndAttribute"/> (in the XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttributeString2">
		<summary>
			<para>When overridden in a derived class, writes out the attribute with the specified prefix, local
      name, namespace URI, and value.</para>
		</summary>
		<param name="prefix">The namespace prefix of the attribute.</param>
		<param name=" localName">The local name of the attribute.</param>
		<param name=" ns">The namespace URI of the attribute.</param>
		<param name=" value">The value of the attribute.</param>
		<exception cref="InvalidOperationException">The state of writer is not WriteState.Element or writer is closed.</exception>
		<exception cref="ArgumentException">The <see langword="xml:space"/> or <see langword="xml:lang"/> attribute value is invalid.</exception>
		<remarks>
			<para>This method writes out the attribute with a
      user defined namespace prefix and associates it with the given namespace. If the
      prefix is "xmlns" then this method also treats this as a namespace declaration
      and associates the declared prefix with the namespace URI provided in the given
      attribute value. In this case the <paramref name="ns"/> argument can be
   <see langword="null"/>.</para>
			<para><see langword="WriteAttributeString"/> does the following: </para>
			<list type="bullet"><item>
					<term>
      
      If the attribute value includes double or single quotes, they are
      replaced with <see langword="&amp;quot;"/> and <see langword="&amp;apos;"/> respectively.</term>
				</item>
				<item>
					<term>
      
      If writing an <see langword="xml:space"/> attribute, the writer verifies
      the attribute value is valid. (Valid values are <see langword="preserve"/> or
   <see langword="default"/>.)</term>
				</item>
				<item>
					<term>
      
      If writing an <see langword="xml:lang"/> attribute, the writer does not verify that the
      attribute value is valid according to the W3C XML 1.0 recommendation.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example writes out a portion of an XML Schema definition language (XSD) Schema.
      
   </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteQualifiedName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlWriter.WriteAttributeString">
		<overload>
			<para> When overridden in a derived class, writes an attribute with the specified value.</para>
		</overload>
		<summary>
			<para> When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and
      value.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name=" ns">The namespace URI to associate with the attribute.</param>
		<param name=" value">The value of the attribute.</param>
		<exception cref="InvalidOperationException">The state of writer is not WriteState.Element or writer is closed.</exception>
		<exception cref="ArgumentException">The <see langword="xml:space"/> or <see langword="xml:lang"/> attribute value is invalid.</exception>
		<remarks>
			<para> This method writes out the attribute with a user defined
      namespace prefix and associates it with the given namespace. If
   <paramref name="localName"/> is "xmlns" then this method also treats this as a namespace declaration. In this case, the <paramref name="ns"/> argument can be <see langword="null"/>.</para>
			<para><see langword="WriteAttributeString"/> does the following: </para>
			<list type="bullet"><item>
					<term>
      
      If the attribute value includes double or single quotes, they are
      replaced with <see langword="&amp;quot;"/> and <see langword="&amp;apos;"/> respectively.</term>
				</item>
				<item>
					<term>
      
      If writing an <see langword="xml:space"/> attribute, the writer verifies
      the attribute value is valid. (Valid values are <see langword="preserve"/> or
   <see langword="default"/>.)</term>
				</item>
				<item>
					<term>
      
      If writing an <see langword="xml:lang"/> attribute, the writer does not verify that the
      attribute value is valid according to the W3C XML 1.0 recommendation.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example writes out a portion of a XML Schema definition language (XSD) Schema.
      
   </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteQualifiedName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlWriter.WriteBase64">
		<summary>
			<para>When overridden in a derived class, encodes the specified binary bytes as base64 and writes out
      the resulting text.</para>
		</summary>
		<param name="buffer">Byte array to encode.</param>
		<param name="index">The position in the buffer indicating the start of the bytes to write.</param>
		<param name="count">The number of bytes to write.</param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<remarks>
			<para>For example, the byte buffer may contain the binary 
      contents of a GIF image. This clearly would not be valid XML. The base64
      encoding is designed to represent arbitrary byte sequences in a text form
      comprised of the 65 US-ASCII characters ([A-Za-z0-9+/=]) where each character
      encodes 6 bits of the binary data. For more information, see Requests for
      Comments (RFC) 1521 located on the Request for Comments Web site at http://www.rfc-editor.org/
      .</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteBase64" qualify="true"/> for an
   example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteBinHex">
		<summary>
			<para> When overridden in a derived class, encodes the specified binary bytes as binhex and writes out
      the resulting text.
      </para>
		</summary>
		<param name="buffer">Byte array to encode. </param>
		<param name="index">The position in the buffer indicating the start of the bytes to write. </param>
		<param name="count">The number of bytes to write. </param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
	</doc>
	<doc for="XmlWriter.WriteCData">
		<summary>
			<para>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing
      the specified text.</para>
		</summary>
		<param name="text">The text to place inside the CDATA block.</param>
		<exception cref="ArgumentException">The text would result in a non-well formed XML document.</exception>
		<remarks>
			<para>If <paramref name="text"/> is
   either <see langword="null"/> or String.Empty, this method writes an empty
   CDATA block, for example &lt;![CDATA[]]&gt;.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteCData" qualify="true"/> for an example using
   this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteCharEntity">
		<summary>
			<para>When overridden in a derived class, forces the
      generation of a character entity for the specified Unicode character value.</para>
		</summary>
		<param name="ch">The Unicode character for which to generate a character entity.</param>
		<exception cref="ArgumentException">The character is in the surrogate pair character range, <see langword="0xd800"/> - <see langword="0xdfff"/>. </exception>
		<remarks>
			<para> This method writes the Unicode character in hexadecimal character entity
      reference format.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteCharEntity" qualify="true"/> for an example using
   this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteChars">
		<summary>
			<para>When overridden in a derived class, writes text one buffer at a time.</para>
		</summary>
		<param name=" buffer">Character array containing the text to write.</param>
		<param name="index">The position in the buffer indicating the start of the text to write.</param>
		<param name="count">The number of characters to write.</param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<remarks>
			<para> This method can be used to write
      large amounts of text one buffer at a time.</para>
			<para>Special handling must be done to ensure the <see langword="WriteChars"/> method does not split surrogate pair characters across multiple buffer writes. The XML specification defines the valid ranges for surrogate pairs. </para>
			<para>An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer. This exception must be caught in order to continue writing the next surrogate pair character to the output buffer.</para>
			<para>In the following example a randomly generated surrogate pair character is split when writing to the output buffer. Catching the exception and continuing to write to the buffer ensures that the surrogate pair character is written correctly to the output stream.</para>
			<code>
//Handling surrogate pair across buffer streams.

char [] charArray = new char[4];
char lowChar, highChar;
Random random = new Random();

lowChar = Convert.ToChar(random.Next(0xDC01, 0xDFFF));
highChar = Convert.ToChar(random.Next(0xD801, 0xDBFF));

XmlTextWriter tw = new XmlTextWriter("test.xml", null);
tw.WriteStartElement("Root");
charArray[0] = 'a';
charArray[1] = 'b';
charArray[2] = 'c';
charArray[3] = highChar;
try
{
 tw. WriteChars(charArray, 0, charArray.Length);
}
catch (Exception ex) {
}
Array[0] = highChar;
Array[1] = lowChar;
charArray[2] = 'd';
tw.WriteChars(charArray, 0, 3); 
tw.WriteEndElement();
</code>
		</remarks>
	</doc>
	<doc for="XmlWriter.WriteElementString">
		<overload>
			<para> When overridden in a derived class, writes an element containing a string value.</para>
		</overload>
		<summary>
			<para> When overridden in a derived class, writes an element with the specified local name and value.</para>
		</summary>
		<param name="localName">The local name of the element.</param>
		<param name=" value">The value of the element.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example uses several write methods to create an XML fragment.
      </para>
			<codelink SampleID="Classic WebData XmlWriter.WriteElementString Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlWriter.WriteElementString1">
		<summary>
			<para> When overridden in a derived class, writes an element with the specified local name, namespace URI, and value.</para>
		</summary>
		<param name="localName">The local name of the element.</param>
		<param name="ns">The namespace URI to associate with the element.</param>
		<param name=" value">The value of the element.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example uses several write methods to create an XML fragment.
      </para>
			<codelink SampleID="Classic WebData XmlWriter.WriteElementString Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlWriter.WriteEntityRef">
		<summary>
			<para>When overridden in a derived class, writes out an entity 
      reference as <see langword="&amp;name;"/> .</para>
		</summary>
		<param name="name">The name of the entity reference.</param>
		<exception cref="ArgumentException"><paramref name="name"/> is either <see langword="null"/> or String.Empty.</exception>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteEntityRef" qualify="true"/> for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteNode">
		<summary>
			<para>When overridden in a derived class, copies everything from the reader to the writer and
      moves the reader to the start of the next
      sibling.</para>
		</summary>
		<param name="reader">The <see cref="System.Xml.XmlReader"/> to read from.</param>
		<param name="defattr"><see langword="true"/> to copy the default attributes from the <see langword="XmlReader"/> ; otherwise, <see langword="false"/>.</param>
		<exception cref="ArgumentException"><paramref name="reader"/> is <see langword="null"/>.</exception>
		<remarks>
			<para> The following table shows the supported node types for
      this method.</para>
			<list type="table">
				<listheader>
					<term>NodeType</term>
					<description>WriteNode Behavior</description>
				</listheader>
				<item>
					<term> Element</term>
					<description>Writes out the element node and any
            attribute nodes.</description>
				</item>
				<item>
					<term> Attribute</term>
					<description>No operation. Use <see cref="System.Xml.XmlWriter.WriteStartAttribute"/> or <see cref="System.Xml.XmlWriter.WriteAttributeString"/> instead.</description>
				</item>
				<item>
					<term> Text</term>
					<description>Writes out the text node.</description>
				</item>
				<item>
					<term> CDATA</term>
					<description>Writes out the CDATA section node.</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>Writes out the entity reference node.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>Writes out the processing instruction node.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>Writes out the comment node.</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Writes out the document type node.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>Writes out the significant white space node.</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>Writes out the white space node.</description>
				</item>
				<item>
					<term> EndElement</term>
					<description>No operation.</description>
				</item>
				<item>
					<term> EndEntity</term>
					<description>No operation.</description>
				</item>
				<item>
					<term> XmlDeclaration</term>
					<description>Writes out the XML declaration node.</description>
				</item>
			</list>
			<para>If the reader is in the initial state, this method moves the reader to the end of file. If the
   reader is already at the end of file or in a closed state, this method is
   non-operational.</para>
			<para>The following C# code copies an entire XML input document to the console: </para>
			<code>
XmlTextReader reader = new XmlTextReader(myfile);
XmlTextWriter writer = new XmlTextWriter(Console.Out);
writer.WriteNode(reader, false);
</code>
			<para> If you have moved off the root node and are positioned
   elsewhere in the document the following C# example correctly writes out the
   nodes.</para>
			<code>
XmlTextReader reader = new XmlTextReader(myfile);
reader.Read(); // Read PI
reader.Read(); // Read Comment
reader.Read(); // Read DOCType
XmlTextWriter writer = new XmlTextWriter(Console.Out);
while (!reader.EOF){
 writer.WriteNode(reader, false);
}
</code>
			<para>If the reader is configured to return white space and the writer
   has <see cref="System.Xml.XmlTextWriter.Formatting"/> set to
   "Indented", <see langword="WriteNode"/> may produce strange
   output. You will essentially be getting double
   formatting.</para>
		</remarks>
		<example>
			<para>The following example writes the first and last book nodes out to the
      console.</para>
			<codelink SampleID="XmlWriter.WriteNode" SnippetID="1"/>




 
The example uses the file, <see langword="books.xml"/>, as input.

<codelink SampleID="XmlWriter.WriteNode" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlWriter.WriteStartAttribute">
		<overload>
			<para>When overridden in a derived class, writes the start of an
      attribute.</para>
		</overload>
		<summary>
			<para>When overridden in a derived class, writes the start of an attribute.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name=" ns">The namespace URI of the attribute.</param>
		<remarks>
			<para>This is a more advanced version of <see cref="System.Xml.XmlWriter.WriteAttributeString"/> that allows you to write an attribute value using
   multiple write methods, such as <see cref="System.Xml.XmlWriter.WriteString"/>, <see cref="System.Xml.XmlWriter.WriteQualifiedName"/>, and so on.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartAttribute" qualify="true"/> for an example using
   this method.</para>
		</example>
		<seealso cref="System.Xml.XmlWriter.WriteEndAttribute"/>
	</doc>
	<doc for="XmlWriter.WriteStartAttribute1">
		<summary>
			<para>When overridden in a derived class, writes the start of an attribute.</para>
		</summary>
		<param name="prefix">The namespace prefix of the attribute.</param>
		<param name=" localName">The local name of the attribute.</param>
		<param name=" ns">The namespace URI for the attribute.</param>
		<remarks>
			<para>This method enables you to write a value using multiple
      Write methods.</para>
		</remarks>
	</doc>
	<doc for="XmlWriter.WriteStartDocument1">
		<summary>
			<para> When overridden in a derived class, writes the XML declaration with the version "1.0" and the
      standalone attribute.</para>
		</summary>
		<param name="standalone">If <see langword="true"/>, it writes "standalone=yes"; if <see langword="false"/>, it writes "standalone=no".</param>
		<exception cref="InvalidOperationException">This is not the first write method called after the constructor.</exception>
		<remarks>
			<para>The encoding level of the document is determined by how
      the writer is implemented. For example, if an <see cref="System.Text.Encoding"/> object is specified in the <see langword="XmlTextWriter"/> constructor, this determines the value of the encoding attribute.</para>
			<para>When <see langword="WriteStartDocument"/> is called, the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules. </para>
			<para>If <see langword="WriteStartDocument"/> has been called and then the <see cref="System.Xml.XmlWriter.WriteProcessingInstruction"/> method is used to create another XML declaration, an exception will be thrown.</para>
		</remarks>
	</doc>
	<doc for="XmlWriter.WriteStartDocument">
		<overload>
			<para> When overridden in a derived class, writes the XML declaration.</para>
		</overload>
		<summary>
			<para> When overridden in a derived class, writes the XML declaration with the version "1.0".</para>
		</summary>
		<exception cref="InvalidOperationException">This is not the first write method called after the constructor.</exception>
		<remarks>
			<para>The encoding level of the document is determined by how
      the writer is implemented. For example, if an <see cref="System.Text.Encoding"/> object is specified in the <see langword="XmlTextWriter"/> constructor, this determines the value of the encoding attribute. This method does not create a standalone attribute.</para>
			<para>When <see langword="WriteStartDocument"/> is called the writer validates
   that what you are writing is a well-formed XML
   document. For example, it checks that the XML declaration is the first
   node, that one and only one root-level element exists, and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules. </para>
			<para>If <see langword="WriteStartDocument"/> has been called and then the <see cref="System.Xml.XmlWriter.WriteProcessingInstruction"/> method is used to create another XML declaration, an exception will be thrown.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartDocument" qualify="true"/> for an example using
   this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteStartElement">
		<overload>
			<para> When overridden in a derived class, writes the specified start tag.</para>
		</overload>
		<summary>
			<para> When overridden in a derived class, writes the specified start tag and associates it with the
      given namespace.</para>
		</summary>
		<param name="localName"><para> The local name of the element.</para></param>
		<param name="ns"><para> The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</para></param>
		<exception cref="InvalidOperationException">The writer is closed.</exception>
		<remarks>
			<para> After calling this method
      you can either write attributes, or create content using<see cref="System.Xml.XmlWriter.WriteComment"/>, <see cref="System.Xml.XmlWriter.WriteString"/>, or <see langword="WriteStartElement"/> for child elements.
      You can close the element with either <see cref="System.Xml.XmlWriter.WriteEndElement"/> or <see cref="System.Xml.XmlWriter.WriteFullEndElement"/> . For example,
      the
      following C# code:</para>
			<code>
writer.WriteStartElement("item",null);
writer.WriteString("some text");
writer.WriteEndElement();
   </code>
			<para> Generates the following output:</para>
			<code>
&lt;item&gt;some text&lt;/item&gt;
   </code>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> (in the
   XmlTextWriter class) for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter.WriteSurrogateCharEntity">
		<summary>
			<para>When overridden in a derived class, generates and writes the surrogate character entity
      for the surrogate character pair.</para>
		</summary>
		<param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
		<param name=" highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
		<exception cref="Exception">An invalid surrogate character pair was passed.</exception>
		<remarks>
			<para>This method is only applicable on systems that use UTF-16
      encoding.</para>
			<para>The surrogate character entity is written in hexadecimal
      format. The range for surrogate characters is #x10000 to #x10FFFF. The following formula is used to generate the surrogate character entity: (<paramref name="highChar"/>-0xD800) * 0x400 + (<paramref name="lowChar"/> -0xDC00) + 0x10000</para>
			<para> For both HTML and XML, the document character set (and therefore the notation
      of numeric character references) is based on UCS [ISO-10646]. A single
      numeric character reference in a source document may therefore in some cases
      correspond to two 16-bit units in a string (a high surrogate and a low surrogate). These 16-bit units are referred to as
      a surrogate pair.</para>
			<para> For more information regarding surrogates or
      characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located
      at http://www.unicode.org, or section 2.2
      of the W3C XML 1.0 Recommendation located at
      http://www.w3.org/TR/REC-xml#charsets.</para>
		</remarks>
	</doc>
	<doc for="XmlWriter.WriteRaw">
		<overload>
			<para> When overridden in a derived class, writes raw markup manually.
      </para>
		</overload>
		<summary>
			<para> When overridden in a derived class, writes raw markup manually from a character buffer.
      </para>
		</summary>
		<param name="buffer">Character array containing the text to write. </param>
		<param name="index">The position within the buffer indicating the start of the text to write. </param>
		<param name="count">The number of characters to write. </param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<remarks>
			<para> This method does not escape special characters.
      </para>
		</remarks>
	</doc>
	<doc for="XmlWriter.WriteRaw1">
		<summary>
			<para>When overridden in a derived class, writes raw markup manually from a string.</para>
		</summary>
		<param name="data">String containing the text to write.</param>
		<remarks>
			<para> This method does not escape special characters.</para>
		</remarks>
		<example>
			<para>See <see cref="System.Xml.XmlTextWriter.WriteRaw" qualify="true"/> for an example using this method.</para>
		</example>
	</doc>
	<doc for="XmlWriter">
		<summary>
			<para> Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</para>
		</summary>
		<remarks>
			<para><see langword="XmlWriter"/>is implemented in the <see cref="System.Xml.XmlTextWriter"/> class.</para>
			<para><see langword="XmlWriter"/>
maintains a namespace stack corresponding to all the namespaces defined in the
current element stack. Using <see langword="XmlWriter"/> you can declare namespaces manually.</para>
			<code>
w.WriteStartElement("root");
w.WriteAttributeString("xmlns", "x", null, "urn:1");
 w.WriteStartElement("item","urn:1");
 w.WriteEndElement();
 w.WriteStartElement("item","urn:1");
 w.WriteEndElement();
w.WriteEndElement();
</code>
			<para>The above C# code produces the following output.
<see langword="XmlWriter"/> promotes the namespace declaration to the root 
   element to avoid having it duplicated on the two child elements. The child
   elements pick up the prefix from the namespace declaration.</para>
			<code>
&lt;root xmlns:x="urn:1"&gt;
 &lt;x:item/&gt;
 &lt;x:item/&gt;
&lt;/x:root&gt;
</code>
			<para><see langword="XmlWriter"/> also allows you to override the current namespace
declaration. In the following example the namespace URI "123" is
overridden by "abc" to produce the XML element <c>&lt;x:node xmlns:x="abc"/&gt;</c>.</para>
			<code>
w.WriteStartElement("x","node","123");
w.WriteAttributeString("xmlns","x",null,"abc");
</code>
By using the write methods that take a prefix as an
argument you can also specify which prefix to use. In the following
example, two different prefixes are mapped to the same namespace URI to produce
the XML text <c>&lt;x:root
xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;</c>.
<code>
XmlTextWriter w = new XmlTextWriter(Console.Out);
w.WriteStartElement("x","root","urn:1");
 w.WriteStartElement("y","item","urn:1");
 w.WriteEndElement();
w.WriteEndElement();
w.Close();
</code>
			<para> If there are multiple namespace declarations mapping different
   prefixes to the same namespace URI, <see langword="XmlWriter"/> walks the stack of namespace
   declarations backwards and picks
   
   the closest one.</para>
			<code>
XmlTextWriter w = new XmlTextWriter(Console.Out);
w.Formatting = Formatting.Indented;
w.WriteStartElement("x","root","urn:1");
w.WriteStartElement("y","item","urn:1");
w.WriteAttributeString("attr","urn:1","123");
w.WriteEndElement();
w.WriteEndElement();
w.Close();
</code>
			<para>In the above C# example, because the
<see langword="WriteAttributeString"/> call does not specify a prefix, the writer 
   uses the last prefix pushed onto the namespace stack, and produces the following
   XML: </para>
			<code>
&lt;x:root xmlns:x="urn:1"&gt;
 &lt;y:item y:attr="123" xmlns:y="urn:1" /&gt;
&lt;/x:root&gt;
</code>
			<para>If namespace conflicts occur, <see langword="XmlWriter"/>
resolves them by generating alternate prefixes. For example, if an attribute and
element have the same prefix but different namespaces,
<see langword="XmlWriter"/> 
generates an alternate prefix
for the attribute. The generated prefixes are named
<see langword="n{i}"/> where <see langword="i"/> is a 
number beginning at 1. The number is reset to 1 for each element.</para>
			<para>Attributes which are associated with a namespace URI
   must have a prefix (default namespaces do not apply to attributes). This
   conforms to section 5.2 of the W3C Namespaces in XML recommendation. If an
   attribute references a namespace URI, but does not specify a prefix, the writer
   generates a prefix for the attribute.</para>
			<para>When writing an empty element, an additional space is
   added between tag name and the closing tag, for example
<see langword="&lt;item /&gt;"/> . This provides compatibility 
   with older browsers.</para>
			<para>When a <see langword="String"/> is used as method
parameter, <see langword="null"/> and <see langword="String.Empty"/> are
equivalent. <see langword="String.Empty"/> follows
the W3C rules.</para>
			<para>To write strongly typed data, use the <see cref="System.Xml.XmlConvert"/> class to convert data types to string. For example,
the following C# code converts the data from <see langword="Double"/> to
<see langword="String"/> 
and writes the
element <c>&lt;price&gt;19.95&lt;/price&gt;</c>.</para>
			<code>
Double price = 19.95;
writer.WriteElementString("price", XmlConvert.ToString(price));
</code>
			<para><see langword="XmlWriter"/> does not check for the following:</para>
			<list type="bullet"><item>
					<term>
      Invalid characters in attribute and element names.</term>
				</item>
				<item>
					<term>
      Unicode characters that do not fit the specified encoding. If the Unicode
      characters do not fit the specified encoding, the
   <see langword="XmlWriter"/> does not escape the Unicode 
      characters into character entities.</term>
				</item>
				<item>
					<term>
      Duplicate attributes.</term>
				</item>
				<item>
					<term>
      Characters in the DOCTYPE public identifier or system identifier.</term>
				</item>
			</list>
For
more information
on
writing XML, see <see topic="cpconWritingXMLWithXmlWriter"/> .
</remarks>
	</doc>
</docs>
