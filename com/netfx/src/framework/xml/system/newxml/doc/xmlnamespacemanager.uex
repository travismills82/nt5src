<docs>
	<doc for="XmlNamespaceManager.DefaultNamespace">
		<summary>
			<para>Gets the namespace URI for the default
      namespace.</para>
		</summary>
		<value>
			<para>Returns the namespace URI for the
      default namespace, or String.Empty if there is no default namespace.</para>
		</value>
		<remarks>
			<para>This method is equivalent to calling
      LookupNamespace(String.Empty).</para>
		</remarks>
		<example>
			<para> The following example displays the default namespace, if one exists. </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.DefaultNamespace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlNamespaceManager.LookupNamespace"/>
	</doc><doc for="XmlNamespaceManager.GetEnumerator">
		<summary>
			<para>Provides support for the "foreach" style iteration over 
      the collection of namespaces in the <see langword="XmlNamespaceManager"/>
      .</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> .</para>
		</returns>
	</doc><doc for="XmlNamespaceManager.NameTable">
		<summary>
			<para> Gets the <see cref="System.Xml.XmlNameTable"/> associated with this object.</para>
		</summary>
		<value>
			<para>The <see langword="XmlNameTable"/>
used by this object.</para>
		</value>
		<remarks>
			<para>The name table is used to look up prefixes and
      namespace URIs.</para>
		</remarks>
		<seealso cref="System.Xml.XmlReader"/>
	</doc><doc for="XmlNamespaceManager.PopScope">
		<summary>
			<para>Pops a namespace scope off the stack.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are
   namespace scopes left on the stack; <see langword="false"/> if there are no more
   namespaces to pop.</para>
		</returns>
		<remarks>
			<para> When you call this method, all
      namespaces which were added to <see langword="XmlNamespaceManager"/> (by calling
   <see cref="System.Xml.XmlNamespaceManager.AddNamespace"/>)
      since the last call to <see langword="PopScope"/>, are removed.</para>
		</remarks>
		<example>
			<para>The following example adds prefix/namespace pairs to the
   <see langword="XmlNamespaceManager"/>and then displays all the pairs in the collection.
      
   </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.PopScope Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlNamespaceManager.PushScope">
		<summary>
			<para>Pushes a namespace scope onto the stack.</para>
		</summary>
		<remarks>
			<para> After a call to this method all
      namespaces, which are added to <see langword="XmlNamespaceManager"/> (by calling
   <see cref="System.Xml.XmlNamespaceManager.AddNamespace"/>), belong to the pushed namespace scope.</para>
		</remarks>
		<example>
			<para>The following example adds prefix/namespace pairs to the
   <see langword="XmlNamespaceManager"/>and then displays all the pairs in the collection.
      
   </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.PopScope Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlNamespaceManager.XmlNamespaceManager">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlNamespaceManager"/> class with the specified <see cref="System.Xml.XmlNameTable"/>
   .</para>
		</summary>
		<param name="nameTable">The <see langword="XmlNameTable"/> to use.</param>
		<exception cref="NullReferenceException"><see langword="null"/> is passed to the constructor</exception>
		<remarks>
			<para> The name table is used to look up prefixes and namespaces. An existing
      name table with pre-atomized strings can be specified in the constructor.
      There are several advantages in doing so. If a XmlReader's name table
      is used, after each read any namespace and prefix strings pushed into the
      name table can be re-used by <see langword="XmlNamespaceManager"/>. Also,
      because <see langword="XmlNamespaceManager"/> is used internally by the
   <see langword="XmlReader"/>
   
   , it can take advantage of the reader's ability to atomize strings.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/>.</para>
			<note type="note">
   If you
   specify an existing name table, any
   namespaces in the name table are not automatically added to
<see langword="XmlNamespaceManager"/> 
. You must
use <see cref="System.Xml.XmlNamespaceManager.AddNamespace"/> and <see cref="System.Xml.XmlNamespaceManager.RemoveNamespace"/> to add or remove namespaces.
</note>
		</remarks>
		<example>
			<para>The following example creates an 
   <see langword="XmlNamespaceManager"/> using the name
      table of the reader.
      </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.XmlNamespaceManager Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlNamespaceManager.LookupNamespace">
		<summary>
			<para>Gets the namespace URI for the specified
      prefix.</para>
		</summary>
		<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.</param>
		<returns>
			<para>Returns the namespace URI for <paramref name="prefix"/> or <see langword="null"/> if there is no mapped namespace. The returned
   string is atomized. </para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/>.</para>
		</returns>
		<example>
			<para>The following example adds prefix/namespace pairs to the
   <see langword="XmlNamespaceManager"/>and then displays all the pairs in the collection.
      
   </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.PopScope Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlNamespaceManager.LookupPrefix">
		<summary>
			<para>Finds the prefix declared for the given
      namespace URI.</para>
		</summary>
		<param name="uri">The namespace to resolve for the prefix.</param>
		<returns>
			<para>The matching prefix. If there is no mapped prefix,
      the method returns String.Empty. If a null value is supplied then
   <see langword="null"/> is returned.</para>
		</returns>
		<remarks>
			<para>This method finds the mapped prefix by walking the
      stack (that is it looks globally). The supplied string must be atomized for the
      lookup to succeed. In other words the supplied string object must exist in the
      XmlNamespaceManager's <see cref="System.Xml.XmlNamespaceManager.NameTable"/>.</para>
			<para>The returned string is also atomized. For more 
      information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</remarks>
		<example>
			<para>The following example removes a namespace from the namespace manager.</para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.LookupPrefix Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlNamespaceManager">
		<summary>
			<para>Resolves, adds and removes namespaces to a collection and
      provides scope management for these namespaces. This class is used by
      the <see cref="System.Xml.Xsl.XsltContext"/>
      and <see cref="System.Xml.XmlReader"/> classes.</para>
		</summary>
		<remarks>
			<para><see langword="XmlNamespaceManager"/> stores prefixes and
   namespaces as strings.</para>
		</remarks>
	</doc>
	<doc for="XmlNamespaceManager.AddNamespace">
		<summary>
			<para>Adds the given namespace to the collection.</para>
		</summary>
		<param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</param>
		<param name=" uri">The namespace to add.</param>
		<exception cref="ArgumentException">The value for <paramref name="prefix"/> is "xml" or "xmlns".</exception>
		<exception cref="ArgumentNullException">The value for <paramref name="prefix"/> or <paramref name="uri"/> is <see langword="null"/>.</exception>
		<remarks>
			<para><see langword="XmlNamespaceManager"/> does not check <paramref name="prefix"/>
and <paramref name="uri"/> for
conformance.</para>
			<para><see cref="System.Xml.XmlReader"/> checks names,
including prefixes and namespaces, to ensure they are valid XML names according
to the W3C specification. <see langword="XmlNamespaceManager"/> is used
internally by <see cref="System.Xml.XmlReader"/>, so to avoid a duplication of efforts,
<see langword="XmlNamespaceManager"/> 
assumes all prefixes and namespaces are valid.</para>
			<para> If the prefix and namespace already
   exists within the current scope, it will replace the existing prefix/namespace combination. The
   same prefix and namespace combination can exist across different scopes.</para>
			<para>The following prefix/namespace pairs are added by default to the
<see langword="XmlNamespaceManager"/>. They can be determined at any 
   scope.</para>
			<list type="table">
				<listheader>
					<term>Prefix</term>
					<description>Namespace </description>
				</listheader>
				<item>
					<term> xmlns</term>
					<description>http://www.w3.org/2000/xmlns/
         (the xmlns prefix namespace)</description>
				</item>
				<item>
					<term> xml</term>
					<description>http://www.w3.org/XML/1998/namespace (The XML namespace)</description>
				</item>
				<item>
					<term> String.Empty</term>
					<description>String.Empty (The empty namespace). This value can be reassigned a
         different prefix. For example, xmlns="" defines the default namespace to
         be the empty namespace</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example uses
   <see langword="XmlNamespaceManager"/> to
      resolve namespaces in an XML fragment.
      </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.AddNamespace Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlNamespaceManager.RemoveNamespace">
		<summary>
			<para>Removes the given namespace for the given
      prefix.</para>
		</summary>
		<param name="prefix">The prefix for the namespace</param>
		<param name=" uri"> The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.</param>
		<exception cref="ArgumentNullException">The value of <paramref name="prefix"/> or <paramref name="uri"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlNamespaceManager.HasNamespace">
		<summary>
			<para>Gets a value indicating whether the supplied prefix has
      a namespace defined for the current pushed scope.</para>
		</summary>
		<param name="prefix">The prefix of the namespace you want to find.</param>
		<returns>
			<para><see langword="true"/> if there is a
   namespace defined; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>To determine whether there is a default
      empty namespace defined, set <paramref name="prefix"/> to String.Empty. If the method returns <see langword="true"/>, this indicates that there is a default namespace defined in current scope. Returning
   <see langword="false"/> indicates that
      no default namespace is defined.</para>
			<note type="note">
      xmlns:x= "" is illegal according to
      W3C Namespaces in XML recommendation.
   </note>
		</remarks>
		<example>
			<para>The following example displays the default namespace, if one it exists. </para>
			<codelink SampleID="Classic WebData XmlNamespaceManager.DefaultNamespace Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
