<docs>
	<doc for="XmlAttribute.XmlAttribute">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="XmlAttribute.Name">
		<summary>
			<para>Gets the qualified name of the node.</para>
		</summary>
		<value>
			<para> The qualified name
      of the attribute node.</para>
		</value>
		<example>
			<para>The following example displays information on each of the nodes in the attribute
      collection.
      </para>
			<codelink SampleID="Classic WebData XmlAttribute.Name Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlAttribute.LocalName"/>
	</doc>
	<doc for="XmlAttribute.OwnerDocument">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlDocument"/> to which this node belongs.</para>
		</summary>
		<value>
			<para>An <see cref="System.Xml.XmlDocument"/> .</para>
		</value>
		<example>
			<para> The
      following example creates an attribute and displays its
   <see langword="OwnerDocument"/> .</para>
			<codelink SampleID="Classic WebData XmlAttribute.OwnerDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlAttribute.BaseURI">
		<summary>
			<para>Gets the base URI of the node.</para>
		</summary>
		<value>
			<para>The location from which the node was loaded or 
      String.Empty if the node has no base URI. Attribute nodes have the same
      base URI as their owner element. If an attribute node does not have
      an owner element, <see langword="BaseURI"/> returns String.Empty.</para>
		</value>
		<remarks>
			<para>A networked XML document is comprised of
      chunks of data aggregated using various W3C standard inclusion mechanisms and
      therefore contains nodes that come from different places. The
   <see langword="BaseURI"/> tells you where
      these nodes came from.</para>
			<para>For additional information on <see langword="BaseURI"/> and how it behaves with other node types,
   see <see cref="System.Xml.XmlNode.BaseURI" qualify="true"/> .</para>
			<para>This property is a Microsoft extension to the Document Object Model
   (DOM).</para>
		</remarks>
		<example>
			<para>The following example displays information on the
      attribute node, including its base URI
      .</para>
			<codelink SampleID="Classic WebData XmlAttribute.BaseURI Example" SnippetID="1"/>
			<para>The sample uses the file, <see langword="baseuri.xml"/> , as input.</para>
			<codelink SampleID="Classic WebData XmlAttribute.BaseURI Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlAttribute.OwnerElement"/>
	</doc><doc for="XmlAttribute.LocalName">
		<summary>
			<para> Gets the local name of the node.</para>
		</summary>
		<value>
			<para> The name of the attribute node with
      the prefix removed. In the following example &lt;book bk:genre=
      'novel'&gt;, the
   <see langword="LocalName"/> of the attribute is 
   <see langword="genre"/>
   .</para>
		</value>
		<remarks>
			<para>If the node does not have a prefix,
   <see langword="LocalName"/>
   is the same as <see cref="System.Xml.XmlAttribute.Name"/>.</para>
		</remarks>
		<example>
			<para>The following example displays information on each of the nodes in the attribute
      collection.
      </para>
			<codelink SampleID="Classic WebData XmlAttribute.NamespaceURI Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlAttribute.NodeType">
		<summary>
			<para>Gets the type of the current node.</para>
		</summary>
		<value>
			<para> The node type for <see langword="XmlAttribute"/> nodes is
   XmlNodeType.Attribute.</para>
		</value>
		<seealso cref="System.Xml.XmlNodeType"/>
	</doc><doc for="XmlAttribute.OwnerElement">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlElement"/> to which the attribute
   belongs.</para>
		</summary>
		<value>
			<para>The <see langword="XmlElement"/> 
that the attribute belongs
to or <see langword="null"/> if this attribute is not
part of an <see langword="XmlElement"/>
.</para>
		</value>
		<example>
			<para> The
      following example creates an attribute and displays the
   <see langword="OwnerElement"/> of the 
      attribute. </para>
			<codelink SampleID="Classic WebData XmlAttribute.OwnerElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlAttribute.Prefix">
		<summary>
			<para>Gets or sets the namespace prefix of this node.</para>
		</summary>
		<value>
			<para>The namespace prefix of this node. If there is no
      prefix, this property returns String.Empty.</para>
		</value>
		<exception cref="ArgumentException">This node is read-only.</exception>
		<exception cref="XmlException"><para> The specified prefix contains an illegal character.</para>
			<para>The specified prefix is malformed.</para>
			<para>The namespaceURI of this node is <see langword="null"/> .</para>
			<para>The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".</para>
			<para>This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".</para>
			<para>This node is an attribute and the qualifiedName of this node is "xmlns" [Namespaces]. </para></exception>
		<remarks>
			<para>Because changing the prefix of an attribute does not change its namespace 
      URI, changing the prefix of an attribute that is known to have a default value
      does not create a new attribute with the default value and the original
      prefix.</para>
		</remarks>
		<example>
			<para>The following example displays information on each of the nodes in the attribute
      collection.
      </para>
			<codelink SampleID="Classic WebData XmlAttribute.NamespaceURI Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlAttribute.Specified">
		<summary>
			<para>Gets a value indicating whether the attribute value was
      explicitly set.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this attribute was explicitly given a value in the original
   instance document; otherwise, <see langword="false"/>. A value of
<see langword="false"/> indicates that the value of the attribute came from the 
   DTD.</para>
		</value>
		<remarks>
			<para> The implementation is in charge of this
      property, not the user. If the user changes the value of the attribute (even if
      it ends up having the same value as the default/fixed value) then the specified flag
      is automatically flipped to <see langword="true"/> .
      To re-specify the attribute as the default/fixed value from the DTD, the user must
      delete the attribute. The implementation then makes a new attribute available with
      specified set to <see langword="false"/>
      
      and the default/fixed value (if one exists).</para>
			<para>In summary:</para>
			<list type="number"><item>
					<term>
         
         If the attribute has an assigned value in the
         document, <see langword="Specified"/>
         
         is <see langword="true"/>, and the value is the assigned value.</term>
				</item>
				<item>
					<term>
         
         If the attribute has no assigned value
         in the document and has a default/fixed value in the DTD,
      <see langword="Specified"/>
      
      is <see langword="false"/>, and the value is the default/fixed value
      in the DTD.</term>
				</item>
				<item>
					<term>
      
      Otherwise, the attribute does not appear in the structure model
      of the document.</term>
				</item>
			</list>
		</remarks>
	</doc><doc for="XmlAttribute.Value">
		<summary>
			<para>Gets or sets the value of the node.</para>
		</summary>
		<value>
			<para>The value returned depends on the
   <see cref="System.Xml.XmlNode.NodeType"/> of the node. For
   <see langword="XmlAttribute"/>
   nodes, this property
   is the value of attribute.</para>
		</value>
		<exception cref="ArgumentException">The node is read-only and a set operation is called.</exception>
		<example>
			<para>The following example displays information on each of the nodes in the attribute
      collection.
      </para>
			<codelink SampleID="Classic WebData XmlAttribute.NamespaceURI Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlAttribute.WriteTo">
		<summary>
			<para>Saves the node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
   This method is a Microsoft extension to the
   Document Object Model (DOM). It is functionally equivalent to the <see cref="System.Xml.XmlNode.OuterXml" qualify="true"/>
   property.
</remarks>
	</doc>
	<doc for="XmlAttribute.WriteContentTo">
		<summary>
			<para>Saves all the children of the node to the specified 
   <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
   This method is a Microsoft extension to the
   Document Object Model (DOM). It is functionally equivalent to the <see cref="System.Xml.XmlAttribute.InnerXml"/> property.
</remarks>
	</doc>
	<doc for="XmlAttribute.ParentNode">
		<summary>
			<para>Gets the parent of this node. For
   <see langword="XmlAttribute"/> nodes, this property always returns 
   <see langword="null"/>.</para>
		</summary>
		<value>
			<para>For <see langword="XmlAttribute"/> nodes, this property
   always returns <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Xml.XmlAttribute.OwnerElement"/> property to get the <see cref="System.Xml.XmlElement"/> to which 
   the attribute belongs.</para>
		</remarks>
	</doc>
	<doc for="XmlAttribute.NamespaceURI">
		<summary>
			<para>Gets the namespace URI of this node.</para>
		</summary>
		<value>
			<para>The namespace URI of this node. If the attribute is not explicitly given a
      namespace, this property returns String.Empty.</para>
		</value>
		<remarks>
			<para>An attribute does not inherit
      its namespace from the element it is attached to. If an attribute
      is not explicitly given a namespace, the namespace URI is considered to
      be String.Empty.</para>
		</remarks>
		<example>
			<para>The following example displays information on each of the nodes in the attribute
      collection.
      </para>
			<codelink SampleID="Classic WebData XmlAttribute.NamespaceURI Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlAttribute.InnerText">
		<summary>
			<para>Gets or sets the concatenated values of the node and all
      its children.</para>
		</summary>
		<value>
			<para>The concatenated values of the node and all its
      children. For attribute nodes, this property has the same functionality as
      the <see cref="System.Xml.XmlAttribute.Value"/>
      property.</para>
		</value>
		<remarks>
			<para>Setting this property replaces all the
      children with the parsed contents of the given string.</para>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<seealso cref="System.Xml.XmlAttribute.InnerXml"/>
		<seealso cref="System.Xml.XmlNode.OuterXml"/>
	</doc>
	<doc for="XmlAttribute.InnerXml">
		<summary>
			<para> Gets or sets the markup representing
      the children of this node.</para>
		</summary>
		<value>
			<para>The markup of the children of this
      node.</para>
		</value>
		<remarks>
			<para>Setting this property replaces the children of the node with the parsed
      contents of the given string. </para>
			<para>The parsing is done in the current namespace context. This property is a
      Microsoft extension to the Document Object Model (DOM). </para>
		</remarks>
		<seealso cref="System.Xml.XmlAttribute.InnerText"/>
		<seealso cref="System.Xml.XmlNode.OuterXml"/>
	</doc>
	<doc for="XmlAttribute">
		<summary>
			<para> Represents an attribute. Valid and default values for the attribute are defined in a DTD or schema.
      </para>
		</summary>
		<remarks>
			<para>Attributes can be associated with an element. Use
      the <see cref="System.Xml.XmlAttribute.OwnerElement"/> property to get the <see cref="System.Xml.XmlElement"/> to which to the attribute
      belongs.</para>
			<para> 
      The <see langword="XmlElement"/> class has several
      methods which allow you to access attribute nodes (<see cref="System.Xml.XmlElement.GetAttribute" qualify="true"/>, <see cref="System.Xml.XmlElement.SetAttribute" qualify="true"/>, <see cref="System.Xml.XmlElement.RemoveAttribute" qualify="true"/>, and so on). Additionally, you can call
      the <see cref="System.Xml.XmlElement.Attributes" qualify="true"/> property which returns an <see cref="System.Xml.XmlAttributeCollection"/> enabling you to access attributes by name or index from the
      collection.</para>
		</remarks>
		<seealso topic="cpconAccessingAttributesInDOM"/>
		<seealso topic="CpconUnorderedNodeRetrievalByNameOrIndex"/>
		<seealso topic="cpconXMLDocumentObjectModelDOM"/>
		<seealso cref="System.Xml.XmlAttribute.Specified"/>
		<seealso cref="System.Xml.XmlDocument.CreateAttribute" qualify="true"/>
	</doc>
	<doc for="XmlAttribute.CloneNode">
		<summary>
			<para>Creates a duplicate of this node.</para>
		</summary>
		<param name="deep"><para><see langword="true"/> to recursively clone the subtree under the specified node; <see langword="false"/> to clone only the node itself. </para>
			<para><see langword="CloneNode"/> always clones the attribute node and its subtree (The cloned node includes the attribute value). </para></param>
		<returns>
			<para>The cloned attribute node.</para>
		</returns>
		<remarks>
			<para> This method serves as a copy constructor for
      nodes. The cloned node has no parent (<see cref="System.Xml.XmlAttribute.ParentNode"/>
      returns <see langword="null"/>
      ).</para>
			<para>Cloning an unspecified attribute returns a specified
      attribute (<see cref="System.Xml.XmlAttribute.Specified"/> returns <see langword="true"/> ).</para>
		</remarks>
		<example>
			<para>The following example uses <see langword="CloneNode"/> to add an
   attribute to two different element nodes.</para>
			<codelink SampleID="Classic WebData XmlAttribute.CloneNode Example" SnippetID="1"/>


The example uses the file, <see langword="2elems.xml"/>,
as input.
<codelink SampleID="Classic WebData XmlAttribute.CloneNode Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlElement"/>
	</doc>
</docs>
