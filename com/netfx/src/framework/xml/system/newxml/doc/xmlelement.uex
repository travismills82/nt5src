<docs>
	<doc for="XmlElement.XmlElement">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="XmlElement.XmlElement1">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="XmlElement.NodeType">
		<summary>
			<para>Gets the type of the current node.</para>
		</summary>
		<value>
			<para>The node type. For <see langword="XmlElement"/> nodes, this value is
   XmlNodeType.Element.</para>
		</value>
		<example>
		</example>
		<seealso cref="System.Xml.XmlNodeType"/>
	</doc>
	<doc for="XmlElement.RemoveAttributeNode">
		<overload>
			<para>Removes an <see cref="System.Xml.XmlAttribute"/> 
.</para>
		</overload>
		<summary>
			<para>Removes the specified <see cref="System.Xml.XmlAttribute"/> .</para>
		</summary>
		<param name="oldAttr">The <see langword="XmlAttribute"/> node to remove. If the removed attribute has a default value, it is immediately replaced.</param>
		<returns>
			<para>The removed <see langword="XmlAttribute"/> or 
<see langword="null"/> if <paramref name="oldAttr"/> is not an attribute node of the 
<see langword="XmlElement"/> .</para>
		</returns>
		<exception cref="ArgumentException">This node is read-only.</exception>
		<example>
		</example>
	</doc>
	<doc for="XmlElement.SetAttributeNode">
		<overload>
			<para>Adds a new <see cref="System.Xml.XmlAttribute"/> .</para>
		</overload>
		<summary>
			<para>Adds the specified <see cref="System.Xml.XmlAttribute"/> .</para>
		</summary>
		<param name="newAttr">The <see langword="XmlAttribute"/> node to add to the attribute collection for this element.</param>
		<returns>
			<para>If the attribute replaces an existing attribute with the 
      same name, the old <see langword="XmlAttribute"/>
      is returned; otherwise,
   <see langword="null"/>
   is
   returned.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="newAttr"/> was created from a different document than the one that created this node. Or this node is read-only.</exception>
		<exception cref="InvalidOperationException">The <paramref name="newAttr"/> is already an attribute of another <see langword="XmlElement"/> object. You must explicitly clone <see langword="XmlAttribute"/> nodes to re-use them in other <see langword="XmlElement"/> objects.</exception>
		<remarks>
			<para>If an attribute with that name is already present
      in the element, it is replaced by the new one.</para>
		</remarks>
	</doc>
	<doc for="XmlElement.GetElementsByTagName1">
		<summary>
			<para>Returns an <see cref="XmlNodeList"/> containing a list of all descendant
   elements that match the specified <see cref="System.Xml.XmlElement.LocalName"/> and <see cref="System.Xml.XmlElement.NamespaceURI"/>
   .</para>
		</summary>
		<param name="localName">The local name to match. The asterik (*) is a special value that matches all tags.</param>
		<param name="namespaceURI">The namespace URI to match.</param>
		<returns>
			<para>An <see cref="XmlNodeList"/> containing a list of all matching nodes.</para>
		</returns>
		<remarks>
			<para>The nodes are placed in the order in which they would be 
      encountered in a preorder traversal of the <see langword="XmlElement"/>
      tree.</para>
		</remarks>
	</doc>
	<doc for="XmlElement.HasAttribute1">
		<summary>
			<para>Determines whether the current node has an attribute
      with the specified local name and namespace URI.</para>
		</summary>
		<param name="localName">The local name of the attribute to find.</param>
		<param name="namespaceURI">The namespace URI of the attribute to find.</param>
		<returns>
			<para>
				<see langword="true"/> if the current node has the specified attribute;
   otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="XmlElement.CloneNode">
		<summary>
			<para>Creates a duplicate of this node.</para>
		</summary>
		<param name="deep">
			<see langword="true"/> to recursively clone the subtree under the specified node; <see langword="false"/> to clone only the node itself (and its attributes if the node is an <see langword="XmlElement"/> ).</param>
		<returns>
			<para>The cloned node.</para>
		</returns>
		<remarks>
			<para> This method serves as a copy constructor for
      nodes. The duplicate node has no parent (<see cref="System.Xml.XmlNode.ParentNode"/>
      returns <see langword="null"/>
      ).</para>
		</remarks>
		<example>
			<para>The following example creates a new element, clones it, and then adds both
      elements into an XML document.</para>
			<codelink SampleID="Classic WebData XmlElement.CloneNode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.GetAttributeNode1">
		<summary>
			<para>Returns the <see cref="System.Xml.XmlAttribute"/> with the specified local name and namespace URI.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute.</param>
		<returns>
			<para>The specified <see langword="XmlAttribute"/> or
<see langword="null"/> if a matching attribute was not found.</para>
		</returns>
		<example>
		</example>
	</doc>
	<doc for="XmlElement.SetAttribute">
		<overload>
			<para>Sets the value of the specified attribute.</para>
		</overload>
		<summary>
			<para>Sets the value of the attribute
      with the specified name.</para>
		</summary>
		<param name="name">The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.</param>
		<param name=" value">The value to set for the attribute.</param>
		<exception cref="XmlException">The specified name contains an invalid character.</exception>
		<exception cref="ArgumentException">The node is read-only.</exception>
		<remarks>
			<para>If an attribute with the same name is
      already present in the element, its value is changed to that of <paramref name="value"/>.
   <paramref name="value"/> is a simple string. It is not parsed as it is being set. Any markup,
      such as syntax to be recognized as an entity reference, is treated as literal
      text and needs to be properly escaped by the implementation when it is
      written out. In order to assign an attribute value that contains entity
      references, the user must create an <see cref="System.Xml.XmlAttribute"/> node plus any <see cref="System.Xml.XmlText"/>
      and <see cref="System.Xml.XmlEntityReference"/> nodes, build the
      appropriate subtree and use <see cref="System.Xml.XmlElement.SetAttributeNode"/>
      to assign it as the value of an attribute.</para>
		</remarks>
		<example>
			<para> The following example adds an attribute to an element.</para>
			<codelink SampleID="Classic WebData XmlElement.SetAttribute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.SetAttribute1">
		<summary>
			<para>Sets the value of the attribute with the
      specified local name and namespace URI.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute.</param>
		<param name="value">The value to set for the attribute.</param>
		<example>
			<para>The following example adds an attribute to an element.</para>
			<codelink SampleID="Classic WebData XmlElement.SetAttribute1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.SetAttributeNode1">
		<summary>
			<para>Adds the specified <see cref="System.Xml.XmlAttribute"/> .</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute.</param>
		<returns>
			<para>The <see langword="XmlAttribute"/> to add.</para>
		</returns>
		<remarks>
			<para>The <see langword="XmlAttribute"/> does not
   have any children. Use <see cref="System.Xml.XmlAttribute.Value"/> to assign a text value to the
   attribute or use <see cref="System.Xml.XmlNode.AppendChild"/> (or a similar method) to add
   children to the attribute.</para>
		</remarks>
		<example>
			<para> The following example adds an attribute to an element.</para>
			<codelink SampleID="Classic WebData XmlElement.SetAttributeNode1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.Name">
		<summary>
			<para>Gets the qualified name of the node.</para>
		</summary>
		<value>
			<para>The qualified name of the node. For
   <see langword="XmlElement"/> nodes, this is the tag name of the element.</para>
		</value>
		<example>
			<para> The following example displays information on the ISBN element.</para>
			<codelink SampleID="Classic WebData XmlElement.Name Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlElement.LocalName"/>
	</doc>
	<doc for="XmlElement.LocalName">
		<summary>
			<para> Gets the local name of the current node.</para>
		</summary>
		<value>
			<para>The name of the current node with the prefix removed.
      For example, <see langword="LocalName"/>
      is book for the element &lt;bk:book&gt;.</para>
		</value>
		<remarks>
			<para>If the node does not have a prefix,
   <see langword="LocalName"/> is the same as <see cref="System.Xml.XmlElement.Name"/>.</para>
		</remarks>
		<example>
			<para> The following example displays information on the ISBN element.</para>
			<codelink SampleID="Classic WebData XmlElement.LocalName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.NamespaceURI">
		<summary>
			<para>Gets the namespace URI of this node.</para>
		</summary>
		<value>
			<para>The namespace URI of this node. If there is no namespace
      URI, this property returns String.Empty.</para>
		</value>
		<remarks>
			<para> This is the namespace URI specified at creation time.
      For example, <see langword="NamespaceURI"/>
      
      is urn:samples for the element &lt;bk:book xmlns:bk=
      "urn:samples"&gt;</para>
		</remarks>
		<example>
			<para>The following example displays information on the ISBN element.</para>
			<codelink SampleID="Classic WebData XmlElement.LocalName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.Attributes">
		<summary>
			<para>Gets an <see cref="System.Xml.XmlAttributeCollection"/> containing the list of attributes for this node.</para>
		</summary>
		<value>
			<para>
				<see cref="System.Xml.XmlAttributeCollection"/> containing the list of attributes for this node.</para>
		</value>
		<example>
			<para>The following example uses changes the value of the first attribute. </para>
			<codelink SampleID="Classic WebData XmlElement.Attributes Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElement.NextSibling">
		<summary>
   Gets the <see cref="System.Xml.XmlNode"/> immediately following this element.
</summary>
		<value>
   The <see langword="XmlNode"/>
   immediately following this element.
</value>
	</doc>
	<doc for="XmlElement.GetElementsByTagName">
		<overload>
			<para>Returns an <see cref="XmlNodeList"/> containing
   a list of all descendant elements that match the specified name.</para>
		</overload>
		<summary>
			<para>Returns an <see cref="XmlNodeList"/> containing a list of all descendant
   elements that match the specified <see cref="System.Xml.XmlElement.Name"/>
   .</para>
		</summary>
		<param name="name">The name tag to match. This is a qualified name. It is matched against the <see langword="Name"/> property of the matching node. The asterik (*) is a special value that matches all tags.</param>
		<returns>
			<para>An <see cref="XmlNodeList"/> containing a list of all matching nodes.</para>
		</returns>
		<remarks>
			<para>The nodes are placed in the order in which they would be encountered in a preorder
      traversal of the <see cref="XmlElement"/> tree.</para>
		</remarks>
		<example>
			<para>The following example gets and displays all the book titles.</para>
			<codelink SampleID="Classic WebData XmlElement.GetElementsByTagName Example" SnippetID="1"/>

The example uses the file, <see langword="2books.xml"/>, as input.

<codelink SampleID="Classic WebData XmlElement.GetElementsByTagName Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlElement.IsEmpty">
		<summary>
			<para> Gets or sets the tag format of the element.</para>
		</summary>
		<value>
			<para> Returns <see langword="true"/> if the element
   is to be serialized in the short tag format "&lt;item/&gt;";
<see langword="false"/>
for the long format "&lt;item&gt;&lt;/item&gt;". </para>
			<para>When setting this property, if set to <see langword="true"/>, the children of
the element are removed and the element is serialized in the short tag
format. If set to <see langword="false"/>, the value of the property is
changed (regardless of whether or not the element has content); if the element
is empty, it is serialized in the long format.</para>
			<para>This property is a Microsoft extension to the Document Object Model 
   (DOM).</para>
		</value>
		<remarks>
			<para>This property is a Microsoft extension of the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example adds content to an empty element.</para>
			<codelink SampleID="Classic WebData XmlElement.IsEmpty Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.WriteTo">
		<summary>
			<para>Saves the current node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para>The following example adds an attribute to an element and then displays the modified element.</para>
			<codelink SampleID="Classic WebData XmlElement.WriteTo Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.WriteContentTo">
		<summary>
			<para>Saves all the children of the node to the specified
   <see cref="System.Xml.XmlWriter"/> .</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example displays the contents of the element to the console.</para>
			<codelink SampleID="Classic WebData XmlElement.WriteContentTo Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlElement.WriteTo"/>
	</doc><doc for="XmlElement.InnerXml">
		<summary>
			<para>Gets or sets the markup representing just
      the children of this node.</para>
		</summary>
		<value>
			<para>The markup of the children of this
      node.</para>
		</value>
		<remarks>
			<para> Setting this property replaces the
      children of the node with the parsed contents of the given string. The parsing
      is done in the current namespace context.</para>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example compares the <see cref="System.Xml.XmlElement.InnerText"/>
and <see langword="InnerXml"/> properties.</para>
			<codelink SampleID="Classic WebData XmlElement.InnerXml Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.InnerText">
		<summary>
			<para>Gets or sets the concatenated values of the
      node and all its children.</para>
		</summary>
		<value>
			<para>The concatenated values of the node
      and all its children.</para>
		</value>
		<remarks>
			<para>Setting this property replaces all the children with
      the parsed contents of the given string.</para>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example compares the <see langword="InnerText"/> and <see cref="System.Xml.XmlElement.InnerXml"/> properties.</para>
			<codelink SampleID="Classic WebData XmlElement.InnerXml Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.OwnerDocument">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlDocument"/> to which this node belongs.</para>
		</summary>
		<value>
			<para>The <see langword="XmlDocument"/> to which this element belongs.</para>
		</value>
		<remarks>
			<para>When adding nodes to the current node, use the
   <see langword="XmlDocument"/> returned by the <see langword="OwnerDocument"/>
   property to create the
   node.</para>
		</remarks>
		<example>
			<para>The following example inserts a new element into an XML
      document.</para>
			<codelink SampleID="Classic WebData XmlElement.OwnerDocument Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.RemoveAll">
		<summary>
			<para>Removes all specified attributes and children of the current node. Default
      attributes are not removed.</para>
		</summary>
		<example>
			<para>The following example removes all attributes and child nodes from the root element.</para>
			<codelink SampleID="Classic WebData XmlElement.RemoveAll Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.RemoveAllAttributes">
		<summary>
			<para>Removes all specified attributes from the element. Default attributes are not removed.</para>
		</summary>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example removes all attributes from the root element.</para>
			<codelink SampleID="Classic WebData XmlElement.RemoveAllAttributes Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.RemoveAttribute">
		<overload>
			<para>Removes the specified attribute.</para>
			<note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
   </note>
		</overload>
		<summary>
			<para>Removes an attribute by name.</para>
		</summary>
		<param name="name">The name of the attribute to remove.This is a qualified name. It is matched against the <see langword="Name"/> property of the matching node.</param>
		<exception cref="ArgumentException">The node is read-only.</exception>
		<remarks>
			<para> If the removed attribute is known to have a
      default value, an attribute immediately appears containing the default value
      and, if applicable, the corresponding namespace URI, local name, and prefix.</para>
		</remarks>
		<example>
			<para> The following example removes an attribute from an element.</para>
			<codelink SampleID="Classic WebData XmlElement.RemoveAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.RemoveAttributeAt">
		<summary>
			<para> Removes the attribute node with the specified index from the element. </para>
			<note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
      
   </note>
		</summary>
		<param name="i">The index of the node to remove. The first node has index 0.</param>
		<returns>
			<para>The attribute node removed or
   <see langword="null "/>if there is no node at the given index.</para>
		</returns>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
		<example>
			<para> The following example removes an attribute from an element.</para>
			<codelink SampleID="Classic WebData XmlElement.RemoveAttributeAt Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.RemoveAttribute1">
		<summary>
			<para>Removes an attribute with the specified local name and namespace URI.</para>
			<note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
   </note>
		</summary>
		<param name="localName">The local name of the attribute to remove.</param>
		<param name="namespaceURI">The namespace URI of the attribute to remove.</param>
		<exception cref="ArgumentException">The node is read-only.</exception>
		<remarks>
			<para>If the removed attribute is known to have a default value, an attribute
      immediately appears containing the default value and, if applicable, the
      corresponding namespace URI, local name, and prefix.</para>
		</remarks>
		<example>
			<para>The following example removes an attribute from an element.</para>
			<codelink SampleID="Classic WebData XmlElement.RemoveAttribute1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.RemoveAttributeNode1">
		<summary>
			<para>Removes the <see cref="System.Xml.XmlAttribute"/>specified by the local name and namespace URI.</para>
			<note type="note">
   If the removed attribute has a
   default value, it is immediately replaced.
</note>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute.</param>
		<returns>
			<para>The removed <see langword="XmlAttribute"/> or
<see langword="null"/> if the <see langword="XmlElement"/> does not have a 
   matching attribute node.</para>
		</returns>
		<exception cref="ArgumentException">This node is read-only.</exception>
		<example>
			<para> The following example removes an attribute from an element.</para>
			<codelink SampleID="Classic WebData XmlElement.RemoveAttributeNode1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.HasAttributes">
		<summary>
			<para>Gets a <see langword="boolean"/> value indicating whether the current node
   has any attributes.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the current node has attributes; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is a Microsoft extension to the Document Object Model
      (DOM).</para>
		</remarks>
		<example>
			<para>The following example removes all attributes from the root element.</para>
			<codelink SampleID="Classic WebData XmlElement.HasAttributes Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.Prefix">
		<summary>
			<para>Gets or sets the namespace prefix of this node.</para>
		</summary>
		<value>
			<para>The namespace prefix of this node. If there is no
      prefix, this property returns String.Empty.</para>
		</value>
		<exception cref="ArgumentException">This node is read-only</exception>
		<exception cref="XmlException"><para>The specified prefix contains an illegal character.</para>
			<para>The specified prefix is malformed.</para>
			<para>The namespaceURI of this node is <see langword="null"/> .</para>
			<para>The specified prefix is "xml" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace .</para></exception>
		<remarks>
			<para>Setting this property changes the <see cref="System.Xml.XmlElement.Name"/> property, which holds the qualified name
   for an <see langword="XmlElement"/> . However,
   changing the prefix does not change the namespace URI of the element.</para>
		</remarks>
		<example>
			<para>The following example displays information on the ISBN element.</para>
			<codelink SampleID="Classic WebData XmlElement.LocalName Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.GetAttributeNode">
		<overload>
			<para>Return the specified <see cref="System.Xml.XmlAttribute"/> .</para>
		</overload>
		<summary>
			<para>Returns the <see langword="XmlAttribute"/> with the specified name.</para>
		</summary>
		<param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the <see langword="Name"/> property of the matching node.</param>
		<returns>
			<para>The specified <see langword="XmlAttribute"/> or
<see langword="null"/> if a matching attribute was not found.</para>
		</returns>
		<example>
			<para>The following example checks to see if the element has the specified attribute. </para>
			<codelink SampleID="Classic WebData XmlElement.GetAttributeNode Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.GetAttribute">
		<overload>
			<para>Returns the attribute value for the specified attribute.</para>
		</overload>
		<summary>
			<para>Returns the value for the attribute with the specified name.</para>
		</summary>
		<param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the <see langword="Name"/> property of the matching node. </param>
		<returns>
			<para>The value of the specified attribute. An empty string is 
      returned if a matching attribute is not found or if the attribute does not have a specified or default value.</para>
		</returns>
		<example>
			<para>The following example checks to see if the element has the specified
      attribute.
      
   </para>
			<codelink SampleID="Classic WebData XmlElement.HasAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement.GetAttribute1">
		<summary>
			<para>Returns the value for the attribute with the
      specified local name and namespace URI.</para>
		</summary>
		<param name="localName">The local name of the attribute to retrieve.</param>
		<param name="namespaceURI">The namespace URI of the attribute to retrieve.</param>
		<returns>
			<para>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</para>
		</returns>
	</doc><doc for="XmlElement.HasAttribute">
		<overload>
			<para>Determines whether the current node has the specified attribute.</para>
		</overload>
		<summary>
			<para>Determines whether the current node has an attribute with the specified
      name.</para>
		</summary>
		<param name="name">The name of the attribute to find. This is a qualified name. It is matched against the <see langword="Name"/> property of the matching node.</param>
		<returns>
			<para><see langword="true"/> if the current node has the specified attribute;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example checks to see if the element has the specified
      attribute.
      
   </para>
			<codelink SampleID="Classic WebData XmlElement.HasAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElement">
		<summary>
			<para> Represents an element.
      </para>
		</summary>
		<remarks>
   Elements are one of the most common nodes in the W3C
   Document Object Model (DOM). Elements can have attributes associated with them.
   The <see langword="XmlElement"/> class has many methods for accessing attributes
   (<see cref="System.Xml.XmlElement.GetAttribute"/>, <see cref="System.Xml.XmlElement.SetAttribute"/>, <see cref="System.Xml.XmlElement.RemoveAttribute"/>, <see cref="System.Xml.XmlElement.GetAttributeNode"/>, and so on). You can also use the
<see cref="System.Xml.XmlElement.Attributes"/> property which returns an <see cref="System.Xml.XmlAttributeCollection"/> enabling you to access attributes by name or index 
   from the collection.
</remarks>
		<seealso cref="System.Xml.XmlDocument.CreateElement" qualify="true"/>
		<seealso topic="cpconAccessingAttributesInDOM"/>
		<seealso topic="cpconXMLDocumentObjectModelDOM"/>
		<seealso cref="System.Xml.XmlAttribute"/>
		<seealso cref="System.Xml.XmlDocument"/>
	</doc>
</docs>
