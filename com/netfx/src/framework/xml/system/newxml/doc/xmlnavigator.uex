<docs>
  <doc for="XmlNavigator.InnerText">
    <summary>
      <para> Gets the concatenated values of the current node and
       all its children.</para>
    </summary>
    <value>
      <para>The concatenated values of the current node and all its children.</para>
    </value>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.InnerText" /> 
 (in the DocumentNavigator class) for an example using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.InnerXml">
    <summary>
      <para> Gets the markup representing just
       the children of this node.</para>
    </summary>
    <value>
      <para>The markup of the children of
       this node.</para>
    </value>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.InnerXml" /> (in the DocumentNavigator class) for an example
    using this property.</para>
    </example>
    <seealso cref="System.Xml.XmlNavigator.OuterXml" />
  </doc>
  <doc for="XmlNavigator.OuterXml">
    <summary>
      <para>Gets the markup representing this node and
       all its children.</para>
    </summary>
    <value>
      <para>The markup containing this node and
       all its children.</para>
    </value>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.OuterXml" /> (in the DocumentNavigator class) for an example
    using this property.</para>
    </example>
    <seealso cref="System.Xml.XmlNavigator.InnerXml" />
  </doc>
  <doc for="XmlNavigator.BaseURI">
    <summary>
      <para>Gets the base URI for the current node.</para>
    </summary>
    <value>
      <para>The base URI for the current node or empty string if there is no value. The returned string is also in the <see cref="System.Xml.XmlNavigator.NameTable" /> .</para>
    </value>
    <remarks>
      <para>A "networked" XML document is comprized of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD Entities are an example of this, but this is not limited to DTD's. <see langword="BaseURI" /> tells you where these nodes originated.</para>
    </remarks>
    <example>
    See <see cref="System.Xml.DocumentNavigator.BaseURI" /> (in the DocumentNavigator class) for an example
    using this property.
 </example>
  </doc>
  <doc for="XmlNavigator.XmlSpace">
    <summary>
      <para> Gets the xml:space scope.</para>
    </summary>
    <value>
      <para>One of the <see cref="System.Xml.XmlSpace" /> values. </para>
    </value>
  </doc>
  <doc for="XmlNavigator.XmlLang">
    <summary>
      <para> Gets the xml:lang scope for the
       current node.</para>
    </summary>
    <value>
      <para>The value of the xml:lang scope or empty string if the current node has no value to return.</para>
    </value>
    <remarks>
      <para>Using the XML text below, if the navigator were positioned on the "name" element, the user can call this property to find out that the name is in the scope of a "US English" xml:lang attribute. </para>
      <code>
 &lt;root xml:lang="en-us"&gt;
   &lt;name&gt;Fred&lt;/name&gt;
 &lt;/root&gt;
    </code>
    </remarks>
  </doc>
  <doc for="XmlNavigator.IsEmptyElement">
    <summary>
      <para>Gets a value indicating whether
       the current
       node is an empty element (for example, &lt;MyElement/&gt;).</para>
    </summary>
    <value>
      <para>
        <see langword="true" /> if the 
    current node is an element (<see cref="System.Xml.XmlNavigator.NodeType" /> equals "Element") that ends
    with "/&gt;"; otherwise,<see langword=" false" /> .</para>
    </value>
    <remarks>
      <para>This property enables you to determine the
       difference between the following:</para>
      <para>
        <c>&lt;foo bar="123"/&gt;</c> (<see langword="IsEmptyElement" /> is <see langword="true" />).</para>
      <para>
        <c>&lt;foo bar="123"&gt;</c> (<see langword="IsEmptyElement" /> is
 <see langword="false" />)</para>
      <para>Note that a corresponding EndElement element is not generated for empty
    elements.</para>
      <para>For newly created nodes, this property is <see langword="true" />. When the 
 first child is inserted into a node this automatically switches to
 <see langword="false" />.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.IsEmptyElement" /> (in the DocumentNavigator class) for an example using this property. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.IsDefault">
    <summary>
      <para>
       Gets a value indicating whether the current node is an
       attribute that was generated from the default value defined
       in the DTD or schema.
    </para>
    </summary>
    <value>
      <para>
        <see langword="true" /> if the the 
       current node is an attribute whose value was generated from the default value
       defined in the DTD or schema.
    </para>
      <para>
        <see langword="false" /> if the attribute's value was explicitly 
       specified in the XML stream.
    </para>
    </value>
    <remarks>
      <para>
       This property applies only to an attribute node.
    </para>
    </remarks>
  </doc>
  <doc for="XmlNavigator.IsReadOnly">
    <summary>
      <para>
       Gets a value indicating whether the current node is read-only.
    </para>
    </summary>
    <value>
      <para>
        <see langword="true" /> if the the current node is read-only. 
    </para>
      <para>
        <see langword="false" /> if the node is read/write. 
    </para>
    </value>
    <remarks>
      <para>
       A read-only node is one that you cannot change any of its properties,
       attributes, or children. But you can remove it from the tree and insert it
       somewhere else. For example, the node for an EntityReference is typically
       read-only because its children actually come from the DTD definition of that
       entity and typically the DTD is read-only.
    </para>
    </remarks>
  </doc>
  <doc for="XmlNavigator.NameTable">
    <summary>
      <para>
       Gets the XmlNameTable associated with this
       implementation.
    </para>
    </summary>
    <value>
      <para>
       XmlNameTable enabling you to get the atomized version of a string within the
       node.
    </para>
    </value>
    <remarks>
      <para>
       All node and attribute names returned from this class are atomized using this
       nametable. This means that when the same name is returned multiple times (like
       "Customer"), then the same String object will be returned for that name. This
       makes it possible for you to write efficient code that does object pointer
       comparisons on these strings instead of expensive string comparisons.
    </para>
    </remarks>
  </doc>
  <doc for="XmlNavigator.HasAttributes">
    <summary>
      <para>Gets a
       value indicating whether the current node has any attributes.</para>
    </summary>
    <value>
      <para>
        <see langword="true" /> if the current node has attributes; otherwise, 
 <see langword="false" />. </para>
    </value>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.HasAttributes" /> (in the DocumentNavigator class) for an example using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.HasAttribute">
    <overload>
      <para>Determines whether the current node has the specified attribute.</para>
    </overload>
    <summary>
      <para>Determines whether the current node has the attribute 
       with the specified <see cref="System.Xml.XmlNavigator.Name" />
       .</para>
    </summary>
    <param name="name">The name of the attribute. This is a qualified name that may or may not contain a colon.</param>
    <returns>
      <para>
        <see langword="true" /> if the current node has the specified attribute; 
    otherwise, <see langword="false" />.</para>
    </returns>
    <example>
    See <see cref="System.Xml.DocumentNavigator.HasAttribute" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.HasAttribute1">
    <summary>
      <para>Determines whether the current node has the attribute 
       with the specified <see cref="System.Xml.XmlNavigator.LocalName" /> and <see cref="System.Xml.XmlNavigator.NamespaceURI" />
       .</para>
    </summary>
    <param name="localName">The local name of the attribute to find.</param>
    <param name="namespaceURI">The URN of the namespace of the attribute to find.</param>
    <returns>
      <para>
        <see langword="true" /> if the current node has the specified attribute; 
    otherwise, <see langword="false" />.</para>
    </returns>
  </doc>
  <doc for="XmlNavigator.GetAttribute">
    <overload>
      <para>Gets the value of an attribute.</para>
    </overload>
    <summary>
      <para>Gets the value of the attribute with the specified 
    <see cref="System.Xml.XmlNavigator.Name" /> .</para>
    </summary>
    <param name="name">The name of the attribute. This is a qualified name that may or may not contain a colon.</param>
    <returns>
      <para>The value of the specified attribute. Empty string if currentnode/record has no value to return 
       (never returns <see langword="null" /> ).</para>
    </returns>
    <example>
    See <see cref="System.Xml.DocumentNavigator.GetAttribute" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToAttribute">
    <overload>
      <para>Moves to the specified attribute.</para>
    </overload>
    <summary>
      <para>Moves to the attribute with the specified <see cref="System.Xml.XmlNavigator.Name" /> and <see langword="null" /> 
 namespace.</para>
    </summary>
    <param name="name">The name of the attribute. This is a qualified name that may or may not contain a colon.</param>
    <returns>
      <para>
        <see langword="true" /> if the attribute is found; 
    otherwise, <see langword="false" />. If <see langword="false" />,
    the XmlNavigator's position does not change.</para>
    </returns>
    <remarks>
      <para>After calling <see langword="MoveToAttribute" />, the <see cref="System.Xml.XmlNavigator.Name" />, 
 <see cref="System.Xml.XmlNavigator.NamespaceURI" />, and <see cref="System.Xml.XmlNavigator.Prefix" /> properties will reflect the 
    properties of that attribute.</para>
      <para>If you are positioned on an attribute, this method will 
    do an implicit <see cref="System.Xml.XmlNavigator.MoveToElement" /> before
    processing this method.</para>
    </remarks>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToAttribute" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToAttribute1">
    <summary>
      <para>Move to the attribute with matching <see cref="System.Xml.XmlNavigator.LocalName" /> and <see cref="System.Xml.XmlNavigator.NamespaceURI" /> 
 .</para>
    </summary>
    <param name="localName">The local name of the attribute.</param>
    <param name="namespaceURI">The URN of the namespace of the attribute.</param>
    <returns>
      <para>
        <see langword="true" /> if the attribute is found; 
    otherwise, <see langword="false" />. If <see langword="false" />,
    the XmlNavigator's position does not change.</para>
    </returns>
    <remarks>
      <para>If you are positioned on an attribute, this method will 
       do an implicit <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method.</para>
    </remarks>
  </doc>
  <doc for="XmlNavigator.MoveToAttribute2">
    <summary>
      <para>Moves to the attribute with the specified index.</para>
    </summary>
    <param name="i">The index of the attribute.</param>
    <exception cref="IndexOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="System.Xml.XmlNavigator.AttributeCount" />.</exception>
    <remarks>
      <para>If you are positioned on an attribute, this method will 
       do an implicit <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToAttribute" /> (in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToFirstAttribute">
    <summary>
      <para>Moves to the first attribute.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if the first attribute exists; otherwise, 
 <see langword="false" />.</para>
    </returns>
    <remarks>
      <para>If you are positioned on an attribute, this method will do an implicit
       MoveToElement before processing this method.</para>
    </remarks>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToFirstAttribute" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToNextAttribute">
    <summary>
      <para>Moves to the next attribute.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a next attribute; 
 <see langword="false" /> if there are no more attributes.</para>
    </returns>
    <remarks>
      <para>If the current node is an element node, this method is 
       equivalent to <see cref="System.Xml.XmlNavigator.MoveToFirstAttribute" />
       .</para>
      <para>If you are positioned on an attribute, this method will 
       do an implicit <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method.</para>
    </remarks>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToNextAttribute" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToElement">
    <summary>
      <para>Moves to the element that contains the current attribute node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if the attribute is owned by 
    an element; <see langword="false" /> if the attribute you are positioned on
    has been removed from the owning element.</para>
    </returns>
    <exception cref="InvalidOperationException">The reader is not positioned on an attribute node.</exception>
    <remarks>
      <para>Use this method to return to an element after navigating through its
       attributes.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToElement" /> (in the DocumentNavigator class) for
    an example using this method.
    </para>
    </example>
  </doc>
  <doc for="XmlNavigator.HasChildren">
    <summary>
      <para>Gets a value indicating whether
       the current node has child nodes.</para>
    </summary>
    <value>
      <para>
        <see langword="true" /> 
 if the current node has child nodes;
 otherwise, <see langword="false" />.</para>
    </value>
    <remarks>
      <para>This is potentially more efficient than using the <see cref="System.Xml.XmlNavigator.ChildCount" /> property.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.HasChildren" /> (in the DocumentNavigator class) for an example 
    using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.ChildCount">
    <summary>
      <para>Gets the number of child nodes for the current node.</para>
    </summary>
    <value>
      <para>The number of child nodes for the current node.</para>
    </value>
    <example>
    See <see cref="System.Xml.DocumentNavigator.ChildCount" /> (in the DocumentNavigator class) for an example
    using this property.
 </example>
  </doc>
  <doc for="XmlNavigator.IndexInParent">
    <summary>
      <para>
       Gets the zero-based index of this node's position in its parent node.
    </para>
    </summary>
    <value>
      <para>
       The index position of this node within its parent node.
    </para>
      <para>
       Returns -1 if
       there is no parent node. You can, therefore, use this to find out
       whether there is a parent node for the current node.
    </para>
    </value>
    <remarks>
      <para>
       For attributes, this property returns the index in the list of attributes.
       For child elements, it returns the index in the list of child nodes.
       The following is always true (assuming the tree is not changed
       in the middle of the execution of this code):
    </para>
      <code lang="C#">
 XmlNavigator other = this.Clone();
 other.MoveToParent();
 other.MoveToChild( this.IndexInParent );
 Assert(other.IsSame(this) == true);
    </code>
    </remarks>
  </doc>
  <doc for="XmlNavigator.MoveToNext">
    <summary>
      <para>Moves to the
       next sibling of the current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a next sibling node; 
 <see langword="false" />
 if there are no more siblings.</para>
    </returns>
    <remarks>
      <para>If you are positioned on an attribute, this method will 
       do an implicit call to <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method. In other words, attribute
       navigation is orthogonal to tree navigation.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToNext" />(in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToPrevious">
    <summary>
      <para>Moves to the
       previous sibling of the current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a previous sibling node; 
 <see langword="false" /> if there is no previous sibling. </para>
    </returns>
    <remarks>
      <para>If you are positioned on an attribute, this method will 
       do an implicit call to <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method. In other words, attribute
       navigation is orthogonal to tree navigation.</para>
    </remarks>
  </doc>
  <doc for="XmlNavigator.MoveToFirst">
    <summary>
      <para>Moves to the
       first sibling of the current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a first sibling node; 
 <see langword="false" /> if there is no first sibling. </para>
    </returns>
    <remarks>
      <para>If you are positioned on an attribute, this method will 
       do an implicit call to <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method. In other words, attribute
       navigation is orthogonal to tree navigation.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToFirst" /> (in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToLast">
    <summary>
      <para>Moves to the last sibling of the
       current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a last sibling node; 
 <see langword="false" /> if there is no last sibling. </para>
    </returns>
    <remarks>
      <para>If you are positioned on an attribute, this method will 
       do an implicit call to <see cref="System.Xml.XmlNavigator.MoveToElement" />
       before processing this method. In other words, attribute
       navigation is orthogonal to tree navigation.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToLast" /> (in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToFirstChild">
    <summary>
      <para>Moves to the first child of the current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a first child node; 
 <see langword="false" /> if there are no child nodes. </para>
    </returns>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToFirstChild" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToLastChild">
    <summary>
      <para>Moves to the last child of the current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if there is a last child node; 
 <see langword="false" /> if there are no child nodes. </para>
    </returns>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToLastChild" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToChild">
    <summary>
      <para>Moves to the specified child node of the 
       current node (index 0 is the first child).</para>
    </summary>
    <param name="i">The index of the child node.</param>
    <returns>
      <para>
        <see langword="true" /> if the specified child node exists; 
 <see langword="false" /> if the specified child node does not exist. </para>
    </returns>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToChild" />(in the DocumentNavigator class) for an example using this
    method.
    </para>
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToParent">
    <summary>
      <para>Moves to the parent of the
       current node.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if a parent node exists.</para>
      <para>
        <see langword="false" /> if there is no 
 parent node. This can happen if the tree is being edited (i.e if the node the navigator is pointing to is removed from the tree).</para>
    </returns>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToParent" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToDocument">
    <summary>
      <para>Moves to the document
       node that owns this node.</para>
    </summary>
    <remarks>
      <para>All nodes belong to one and only one document; therefore, this method is guaranteed to succeed.</para>
      <para>The navigator is in the 'null' state when it temporarily points to no node. When the navigator is in this state, all editing operations fail with an InvalidPosition exception. You can get out of this state by using <see langword="MoveToDocument" /> . The navigator is in the 'null' state when <see cref="System.Xml.XmlNavigator.NodeType" /> returns 0.</para>
    </remarks>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveToDocument" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToDocumentElement">
    <summary>
      <para>Moves to the child element node
       of the owning document.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if the document that owns this node currently has a child element node.</para>
      <para>
        <see langword="false" /> if the document that owns this node currently has no 
 child element node.</para>
    </returns>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToDocumentElement" /> (in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.MoveTo">
    <summary>
      <para>Moves to the same position as the
       specified XmlNavigator.</para>
    </summary>
    <param name="other">XmlNavigator with the position you want to move this XmlNavigator to.</param>
    <returns>
      <para>
        <see langword="true " />if successful; otherwise <see langword="false" />. If <see langword="false" /> , the navigator is returned to its position
    before the call.</para>
    </returns>
    <remarks>
      <para>The navigator is in the 'null' state when it temporarily 
       points to no node. When the navigator is in this state, all editing operations fail
       with an InvalidPosition exception. You can get out of this state by using
    <see langword="MoveTo" /> or <see cref="System.Xml.XmlNavigator.MoveToDocument" />. The navigator is in the 'null' 
       state when <see cref="System.Xml.XmlNavigator.NodeType" />
       returns 0.</para>
    </remarks>
    <example>
    See <see cref="System.Xml.DocumentNavigator.MoveTo" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.MoveToId">
    <summary>
      <para>Moves to the node with an ID attribute whose
       value matches the specified string.</para>
    </summary>
    <param name="id">The ID value of the node you want to move to.</param>
    <returns>
      <para>
        <see langword="true " />if the move was successful.</para>
      <see langword="false " />if the move was unsuccesful. 
 The navigator is returned to its position before the call.
 </returns>
    <remarks>
      <para>The argument does not need
       to be atomized. For example,
       suppose the DTD defined the following:</para>
      <para>&lt;!ATTLIST x a ID #REQUIRED &gt;</para>
      <para>and suppose the following XML data was loaded using this DTD:</para>
      <para>&lt;data&gt; &lt;x a="a1"/&gt; &lt;/data&gt;</para>
      <para>then the following would be true:</para>
      <code lang="C#">// "nav" pointing anywhere in the above data.
 nav.MoveToId("a1");
 // Now "nav" points to the element node named "x"
    </code>
    </remarks>
  </doc>
  <doc for="XmlNavigator.MoveToEntity">
    <summary>
      <para>Moves to the entity declaration node for the specified entity.</para>
    </summary>
    <param name="name">The name of the entity.</param>
    <returns>
      <para>
        <see langword="true" /> if the given entity was found; otherwise <see langword="false" />. If <see langword="false" />, the navigator's position is unchanged.</para>
    </returns>
    <remarks>
      <para>If you had the following XML text, </para>
      <code>
 &lt;!DOCTYPE test [
 &lt;!ENTITY foo "&lt;a/&gt;&lt;b/&gt;"&gt;]&gt;
 &lt;test xmlns="urn:foo"&gt;
   &amp;foo;
 &lt;/test&gt;
    </code>
      <para>MoveToEntity("foo") would position the navigator on a node of type XmlNodeType.Entity with the Name "foo", and InnerText equal to the entity replacement text "&lt;a/&gt;&lt;b/&gt;". </para>
      <para>These entity nodes also have children which result from parsing the entity replacement text. In this case, a child element with name "a" and a child element with name "b". These children are parsed in a null namespace context, therefore in this case the child elements will have an empty NamespaceURI. This will be different in the case of the entity reference &amp;foo; shown above where the default namespace "urn:foo" is inherited from the containing "test" element. </para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.MoveToEntity" /> (in the DocumentNavigator class) for an example using this method.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.IsSamePosition">
    <summary>
      <para>Determines whether this XmlNavigator is at
       the same position as the specified XmlNavigator.</para>
    </summary>
    <param name="other">XmlNavigator with which you want to compare position.</param>
    <returns>
      <para>
        <see langword="true" /> if this XmlNavigator is at the same position as the 
    specified XmlNavigator; otherwise, <see langword="false" />.</para>
    </returns>
    <remarks>
      <para>This also implies the other XmlNavigator is the same
       kind of XmlNavigator pointing at the same document instance.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.IsSamePosition" /> (in the DocumentNavigator class) for an example 
    using this method.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.LookupPrefix">
    <summary>
      <para>Looks up the prefix for the given namespace URI as
       defined higher up in the tree.</para>
    </summary>
    <param name="namespaceURI">Namespace URI look up.</param>
    <returns>
      <para>The prefix atomized string.
       Or <see langword="null" /> if not found.</para>
    </returns>
    <example>
    See <see cref="System.Xml.DocumentNavigator.LookupPrefix" /> (in the DocumentNavigator class) for an example
    using this method.
 </example>
  </doc>
  <doc for="XmlNavigator.Selection">
    <summary>
      <para>Gets the last XPath expression used in a successful call 
       to the <see cref="System.Xml.XmlNavigator.Select" />
       method.</para>
    </summary>
    <value>
      <para>The initial value is <see langword="null" />; 
    otherwise an XPath expression.</para>
    </value>
    <example>
      <para>The following example finds and displays the first Jane Austen novel in the XML document. </para>
      <codelink SampleID="Classic WebData XmlNavigator.Selection Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.Evaluate">
    <summary>
      <para>Evaluates the given expression
       and returns the typed result (int, boolean or string).</para>
    </summary>
    <param name="xpathexpr">An expression that can be evaluated. This can be a string or an object returned from the <see cref="System.Xml.XmlNavigator.Compile" /> method.</param>
    <returns>
      <para>The result of the expression.</para>
    </returns>
    <exception cref="ArgumentException">The return type of the given expression is a node set; or if <see cref="System.Xml.XmlNavigator.Select" /> was not called before calling XPath position() or last() functions.</exception>
    <remarks>
      <para>The following statement C# statement returns a number after converting the Price/text()
       node to a number and multiplying the value by 10.</para>
      <code>
 nav.Evaluate("Price/text()"*10);
    </code>
      <para>The XPath position() function returns the value of the 
       context position. This function evaluated with regards to the current node in a
       selected set of nodes. So when calling this function in an XPath expression, at
       least one node must have been selected with the <see cref="System.Xml.XmlNavigator.Select" />
       method. (i.e. The query passed in through the <see langword="Select" /> method is
       used as the context). Since the position() only makes sense for the current
       node, if the current node is not in the selected set of nodes (e.g. <see cref="System.Xml.XmlNavigator.MoveToNext" />
       is called which moves to a node which is outside of
       the set of selected nodes) an exception is thrown. As an example the following
       XSLT creates a number based on the node position.</para>
      <code>
 &lt;xsl:number value='position()'&gt;
    </code>
      <para>The XPath last() function also uses the 
    <see langword="Select" /> method as the context. It returns the total number of 
       nodes that have been selected with the <see langword="Select" /> method. If no
       nodes were selected, it returns zero. If the <see langword="Select" />
       method has
       not been called then an exception is thrown.</para>
      <para>It is worth noting a performance issue on the use of the 
    <see langword="Evaluate" /> 
    method
    with compiled expressions. Take the following two examples,</para>
      <code>
 Example 1:
 obj = Compile("last()");
 Select(xpathexpr1)
 while (MoveToNextSelected())
    Evaluate(obj)
 
 
 Example 2:
 Select(xpathexpr2)
 while (MoveToNextSelected())
    Evaluate("last()")
 </code>
      <para>There is a significant difference between example 1 and example 2. In the 
    second example passing in the string for the query results in a new calculation
    each time and so takes longer. Example 1 therefore has better performance.</para>
    </remarks>
    <example>
      <para> The following example calculates the number of books in the document. </para>
      <codelink SampleID="Classic WebData XmlNavigator.Evaluate Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.Matches">
    <summary>
      <para>Determines whether the current node matches the
       specified XPath expression</para>
    </summary>
    <param name="xpathexpr">An XPath expression describing how to navigate. This can be a string or an object returned from the <see cref="System.Xml.XmlNavigator.Compile" /> method.</param>
    <returns>
      <para>
        <see langword="true" /> if the 
    current node matches the specified XPath expression; otherwise,
 <see langword="false" /> 
 .</para>
    </returns>
    <exception cref="ArgumentException">The specified expression cannot be evaluated this way.</exception>
    <remarks>
      <para>This has no effect on the state
       of the tree or the current selection.</para>
    </remarks>
    <example>
      <para>The following example checks if the current node has an author element whose 
       last-name is "Atwood".</para>
      <codelink SampleID="Classic WebData XmlNavigator.Matches Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToLastSelected">
    <summary>
      <para>Moves the XmlNavigator to the last node in the selected
       set.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if XmlNavigator moved to specified node; 
 <see langword="false" /> if there are no selected nodes.</para>
    </returns>
    <example>
      <para> The following example finds and displays the last Jane Austen novel in the XML document.</para>
      <codelink SampleID="Classic WebData XmlNavigator.MoveToLastSelected Example" SnippetID="1" />
    </example>
    <seealso cref="System.Xml.XmlNavigator.Compile" />
    <seealso cref="System.Xml.XmlNavigator.Select" />
  </doc>
  <doc for="XmlNavigator.MoveToPreviousSelected">
    <summary>
      <para>Moves the XmlNavigator to the previous node in the selected
       set.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if XmlNavigator moved to specified 
    node; <see langword="false" /> if there are no previous selected nodes.</para>
    </returns>
    <example>
      <para>The following example finds all novels in the XML document and displays them in reverse order. </para>
      <codelink SampleID="Classic WebData XmlNavigator.MoveToPreviousSelected Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.PushPosition">
    <summary>
      <para>Saves the current position.</para>
    </summary>
    <remarks>
      <para>You can later return to this position by calling <see cref="System.Xml.XmlNavigator.PopPosition" />. PushPosition has the same semantics as if you 
    used <see cref="System.Xml.XmlNavigator.Clone" />
    and remembered
    the cloned XmlNavigators on your own stack.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.PushPosition" /> (in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator.PopPosition">
    <summary>
      <para>Moves the XmlNavigator back to a previously pushed position
       and pops that saved position off the stack.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if XmlNavigator moved to previous push position; 
 <see langword="false" /> if there is no more to pop.</para>
    </returns>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.PopPosition" /> (in the DocumentNavigator class) for an example using this method. </para>
    </example>
  </doc>
  <doc for="XmlNavigator">
    <summary>
      <para>Reads and writes XML data using a cursor model.</para>
      <para>This class is <see langword="abstract" /> .</para>
    </summary>
    <remarks>
      <para>XmlNavigator provides all the node and attribute properties of the
      XmlReader. However, the XmlNavigator adds the following features:</para>
      <list type="bullet">
        <item>
          <term>
         Provides random access navigation (whereas XmlReader
         is a forward-only reader)</term>
        </item>
        <item>
          <term>
         Enables you to
         handle a selected set of nodes within the document. (support for
         XPath)</term>
        </item>
      </list>
The XmlNavigator is always positioned on a node. If a method call fails,
the XmlNavigator remains in the position it was in before the method call.
The XmlNavigator provides a virtual window into a tree of nodes. This has
the following implications:
<list type="bullet"><item><term>
      When the virtual node that the XmlNavigator is
      pointing to is removed from the tree, or moved to a different tree the
      XmlNavigator continues to point at that moved node and <see cref="System.Xml.XmlNavigator.MoveToParent" /> may return something different than
      you expected.</term></item><item><term><see cref="System.Xml.XmlNavigator.MoveToNext" />and <see cref="System.Xml.XmlNavigator.MoveToPrevious" /> do not walk off the end of the list 
      leaving the XmlNavigator in an indeterminate state. This model is easier for
      programmers to understand.</term></item><item><term>
      When the virtual node that the XmlNavigator is pointing to is
      moved to a different location in the tree, the XmlNavigator is moved along
      with it.</term></item></list>XmlNavigator is a read-only interface.
Editing capabilities are available through the <see cref="System.Xml.XmlEditor" /> class.
</remarks>
  </doc>
  <doc for="XmlNavigator.MoveToNextSelected">
    <summary>
      <para>Moves the XmlNavigator to the next node in the selected
      set.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if XmlNavigator moved to specified node;
<see langword="false" /> if there are no more selected nodes.</para>
    </returns>
    <example>
      <para>The following example changes the price on all books by Jane Austen.</para>
      <codelink SampleID="Classic WebData XmlNavigator.MoveToNextSelected Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.MoveToFirstSelected">
    <summary>
      <para>Moves the XmlNavigator to the first node in the selected
      set.</para>
    </summary>
    <returns>
      <para>
        <see langword="true" /> if XmlNavigator moved to specified node;
<see langword="false" /> if there are no selected nodes.</para>
    </returns>
    <remarks>
      <para>This method can be used to to determine if 
      any nodes were selected. The following C# code checks if any nodes were
      selected, and then walks the selected nodeset.</para>
      <code>
if (nav.MoveToFirstSelected())
{ 
  do
  {
    //do something here
  }
  while (nav.MoveToNextSelected());
}
   </code>
    </remarks>
    <example>
      <para>The following example finds and displays the first Jane Austen novel in the XML document.</para>
      <codelink SampleID="Classic WebData XmlNavigator.MoveToFirstSelected Example" SnippetID="1" />
    </example>
    <seealso cref="System.Xml.XmlNavigator.Compile" />
    <seealso cref="System.Xml.XmlNavigator.Select" />
  </doc>
  <doc for="XmlNavigator.AttributeCount">
    <summary>
      <para>Gets the number of attributes on the current node.</para>
    </summary>
    <value>
      <para>Count of attributes on the current node.</para>
    </value>
    <example>
   See <see cref="System.Xml.DocumentNavigator.AttributeCount" /> (in the DocumentNavigator class) for an example
   using this property.
</example>
  </doc>
  <doc for="XmlNavigator.HasSelection">
    <summary>
      <para>Determines if this <see langword="XmlNavigator " /> currently has a selection set.</para>
    </summary>
    <value>
      <para>
        <see langword="true" /> if 
<see langword="XmlNavigator" /> has a selection set (<see cref="System.Xml.XmlNavigator.Selection" /> returns
   a non empty string); otherwise <see langword="false" /> .</para>
    </value>
    <remarks>
      <para>In the case where a valid selection returns no selected 
      nodes, <see langword="HasSelection" />
      still returns <see langword="true" />. To check if any nodes were selected,
      use the <see cref="System.Xml.XmlNavigator.MoveToFirstSelected" />. For example the following C# code checks to
      see if any nodes were selected and then walks through the selected nodes.</para>
      <code>
if (nav.MoveToFirstSelected())
{
  do{
    //process the nodes
  }while (nav.MoveToNextSelected());
}
   </code>
    </remarks>
    <example>
      <para>The following example moves a selected book from one navigator to another.</para>
      <codelink SampleID="Classic WebData DocumentNavigator.MoveSelected Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.HasValue">
    <summary>
      <para>Gets a value indicating whether <see cref="System.Xml.XmlNavigator.Value" />
has a value
to return.</para>
    </summary>
    <value>
      <para>
        <see langword="true" /> if <see cref="System.Xml.XmlNavigator.Value" /> 
has a value to return; otherwise,
<see langword="false" />. </para>
    </value>
    <remarks>
      <para>The following table lists node types which have a value to return. </para>
      <list type="table">
        <listheader>
          <term>Node Type</term>
          <description>Value</description>
        </listheader>
        <item>
          <term> Attribute</term>
          <description>value of attribute</description>
        </item>
        <item>
          <term> CDATASection</term>
          <description>content of the CDATA Section</description>
        </item>
        <item>
          <term> Comment</term>
          <description>content of the comment</description>
        </item>
        <item>
          <term> DocumentType</term>
          <description>the internal subset</description>
        </item>
        <item>
          <term> ProcessingInstruction</term>
          <description>entire content excluding the target</description>
        </item>
        <item>
          <term> Text</term>
          <description>
            <para>content of the text node</para>
          </description>
        </item>
        <item>
          <term> XmlDeclaration</term>
          <description>content of the declaration</description>
        </item>
      </list>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.HasValue" /> (in the DocumentNavigator class) for an example
   using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.Value">
    <summary>
      <para> Gets the text value of the current node.</para>
    </summary>
    <remarks>
      <para>The value returned depends on the <see cref="System.Xml.XmlNavigator.NodeType" /> of the node. The 
   following table lists node types which have a value to return; all other node
   types return String.Empty.</para>
      <list type="table">
        <listheader>
          <term>Node Type</term>
          <description>Value</description>
        </listheader>
        <item>
          <term> Attribute</term>
          <description>value of attribute</description>
        </item>
        <item>
          <term> CDATASection</term>
          <description>content of the CDATA Section</description>
        </item>
        <item>
          <term> Comment</term>
          <description>content of the comment</description>
        </item>
        <item>
          <term> DocumentType</term>
          <description>the internal subset</description>
        </item>
        <item>
          <term> ProcessingInstruction</term>
          <description>entire content excluding the target</description>
        </item>
        <item>
          <term> Text</term>
          <description>
            <para>content of the text node</para>
          </description>
        </item>
        <item>
          <term> XmlDeclaration</term>
          <description>content of the declaration</description>
        </item>
      </list>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.Value" /> (in the DocumentNavigator class) for an example using this
   property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.NodeType">
    <summary>
      <para>Gets the type of the current node.</para>
    </summary>
    <value>
      <para>One of the <see cref="System.Xml.XmlNodeType" /> values.</para>
    </value>
    <remarks>
   EndElement, EndEntity, Whitespace and SignificantWhitespace nodes are
   never returned from the navigator. These node types are reserved for use
   by <see cref="System.Xml.XmlReader" />.
</remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.NodeType" /> (in the DocumentNavigator class) for an example
   using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.Compile">
    <summary>
      <para>Compiles the given XPath expression and returns
      an <see cref="System.Xml.XPath.XPathExpression" />
      .</para>
    </summary>
    <param name="xpathexpr">The expression to compile.</param>
    <returns>
      <para>The compiled <see langword="XPathExpression" /> 
.</para>
    </returns>
    <exception cref="ArgumentException">The <paramref name="xpathexpr" /> param contains an invalid XPath expression.</exception>
    <remarks>
      <para>An XPath expression is evaluated to yield one of the
      following return
      types:</para>
      <list type="bullet">
        <item>
          <term>
         
         node-set (an unordered collection of nodes without
         duplicates)</term>
        </item>
        <item>
          <term>
         
         boolean (<see langword="true" /> or
      <see langword="false" />)</term>
        </item>
        <item>
          <term>
         
         number (a floating-point number)</term>
        </item>
        <item>
          <term>
         
         string (a sequence of UCS characters)</term>
        </item>
      </list>
      <para>The expressions that return a node-set can be used in 
   the <see cref="System.Xml.XmlNavigator.Select" /> and <see cref="System.Xml.XmlNavigator.SelectSingle" />
   methods. The expressions that return a boolean, number,
   or string can be used in <see cref="System.Xml.XmlNavigator.Evaluate" /> . The rules
   on valid expressions for the <see cref="System.Xml.XmlNavigator.Matches" />
   method are specific to that
   method.</para>
    </remarks>
    <example>
      <para>The following example finds and displays the first Jane
      Austen novel in the XML document.</para>
      <codelink SampleID="Classic WebData XmlNavigator.Compile Example" SnippetID="1" />
    </example>
  </doc>
  <doc for="XmlNavigator.Select">
    <summary>
      <para>Selects a new set of "records"
      using the specified XPath expression.</para>
    </summary>
    <param name="xpathexpr">An XPath expression describing how to navigate. This can be a string or an object returned from the <see cref="System.Xml.XmlNavigator.Compile" /> method.</param>
    <exception cref="ArgumentException">XPath expression contains an error. Or the return type of the XPath expression is not a node set.</exception>
    <remarks>
      <para>The context for the selection is the position of the
      navigator when you called this method. After calling this method, you must
      call <see cref="System.Xml.XmlNavigator.MoveToNextSelected" /> to find the first node that
      matches the specified XPath expression. This makes it easy to write a while loop
      on <see cref="System.Xml.XmlNavigator.MoveToNextSelected" />
      - see
      the example below.</para>
      <para>You can then use <see cref="System.Xml.XmlNavigator.MoveToNextSelected" /> and <see cref="System.Xml.XmlNavigator.MoveToPreviousSelected" /> to walk through the set of selected nodes. When you
   are positioned on a given node, you can also use the <see cref="System.Xml.XmlNavigator.MoveToNext" /> method to walk to the sibling of the selected node
   (which may be outside the selected set). If you do this, the next call
   to <see cref="System.Xml.XmlNavigator.MoveToNextSelected" />
   jumps from whereever you were
   to the next selected node in the previously selected set. In other words, the
   basic navigation methods are independent of the selected set navigation
   methods.</para>
      <para>
        <see cref="System.Xml.XmlNavigator.MoveToFirstSelected" /> can be used to determine if
any nodes were selected. The following C# code checks if any nodes were
selected, and then walks the selected nodeset.</para>
      <code>
if (nav.MoveToFirstSelected())
{ 
  do
  {
    //do something here
  }
  while (nav.MoveToNextSelected());
}
</code>
      <para> If the XML document contains namespaces and
   prefixes, the XPath expression should also contain the prefix. For example, if
   the document include the node <c>&lt;book bk:ISBN='1-325-098'&gt;</c>, the following Select call could be used: <c>nav.Select("book/@bk:ISBN")</c>.</para>
      <para>Calling <see langword="Select" /> completely resets the
current selected set of nodes and forgets any previous selection.</para>
      <para>This version of the product does not support the namespace axis (i.e 
   "namespace::*").</para>
      <para> See &lt;&lt;XPath conceptual topic&gt;&gt; for more information.</para>
    </remarks>
    <example>
      <para>The following example changes the price on all books by Jane Austen.</para>
      <codelink SampleID="Classic WebData XmlNavigator.MoveToNextSelected Example" SnippetID="1" />
    </example>
    <seealso cref="System.Xml.XmlNavigator.SelectSingle" />
    <seealso cref="System.Xml.XPath.XPathExpression" />
  </doc>
  <doc for="XmlNavigator.SelectSingle">
    <summary>
      <para>Selects the first node that matches the specified
      expression.</para>
    </summary>
    <param name="xpathexpr">An XPath expression describing how to navigate. This can be a string or an object returned from the Compile method.</param>
    <returns>
      <para>
        <see langword="true" /> if a node was found; otherwise,
<see langword="false" /> .</para>
    </returns>
    <exception cref="ArgumentException">
      <para>The specified XPath expression is not a string or was not a result of a Compile method call.</para>
      <para>Or the XPath expression does not return a node. </para>
    </exception>
    <remarks>
      <para>This is the same as <see cref="System.Xml.XmlNavigator.Select" /> except it selects a only the first matching node. So
   instead of writing the following C# code:</para>
      <code>
nav.Select("Customer/Address/Street");
if (nav.MoveToFirstSelected()) 
 street = nav.InnerText;
</code>
      <para>You would use this C# code:</para>
      <code>
if (nav.SelectSingle("Customer/Address/Street"))
 street = nav.InnerText;
</code>
      <para>This method has no effect on the current selection state.</para>
      <para>This version of the product does not support the namespace axis (i.e 
   "namespace::*").</para>
    </remarks>
    <example>
      <para>The following example finds and displays the first Jane Austen novel in the XML document. </para>
      <codelink SampleID="Classic WebData XmlNavigator.SelectSingle Example" SnippetID="1" />
    </example>
    <seealso cref="System.Xml.XmlNavigator.Compile" />
    <seealso cref="System.Xml.XPath.XPathExpression" />
  </doc>
  <doc for="XmlNavigator.Clone">
    <summary>
      <para>Creates a new <see langword="XmlNavigator" /> positioned 
   at the same node as this <see langword="XmlNavigator" />
   
   .</para>
    </summary>
    <returns>
      <para>A new <see langword="XmlNavigator" /> object.</para>
    </returns>
    <remarks>
      <para>The cloned <see langword="XmlNavigator" /> is not 
   affected by subsequent changes to the current <see langword="XmlNavigator" />
   .</para>
This method does not clone the selection and push/pop
states.
</remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.Clone" /> (in the DocumentNavigator class)
   for an example
   using this method.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.GetAttribute2">
    <summary>
      <para> Gets the value of the attribute.</para>
    </summary>
    <param name="i">The index of the attribute. The index is zero-based (first attribute has index 0).</param>
    <returns>
      <para> The value of the attribute. Empty string if currentnode/record has no value to return
      (never returns <see langword="null" /> ).</para>
    </returns>
    <exception cref="IndexOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="System.Xml.XmlNavigator.AttributeCount" />.</exception>
  </doc>
  <doc for="XmlNavigator.GetAttribute1">
    <summary>
      <para>Gets the value of the attribute with the
      specified <see cref="System.Xml.XmlNavigator.LocalName" /> and <see cref="System.Xml.XmlNavigator.NamespaceURI" /> .</para>
    </summary>
    <param name="localName">The local name of the attribute.</param>
    <param name="namespaceURI">The URN of the namespace of the attribute.</param>
    <returns>
      <para>The value of the specified attribute. Empty string if currentnode/record has no value to return
      (never returns <see langword="null" /> ).</para>
    </returns>
    <remarks>
      <para>The following XML contains an attribute in a specific
      namespace: <c>&lt;test
      xmlns:dt="urn:datatypes" dt:type="int"/&gt;</c>
   .</para>
      <para>You can lookup the dt:type attribute using one argument 
   (using the qualified name) or using two arguments (<paramref name="localName" /> and
<paramref name="namespaceURI" /> 
): </para>
      <code>
String dt = nav.GetAttribute("dt:type"); 
String dt2 = nav.GetAttribute("type","urn:datatypes");
</code>
      <para>To lookup the xmlns attribute, do one of the 
   following:
   </para>
      <code>
String dt3 = nav.GetAttribute("xmlns:dt"); 
String dt4 = nav.GetAttribute("dt","http://www.w3.org/2000/xmlns/");
</code>
    </remarks>
  </doc>
  <doc for="XmlNavigator.LocalName">
    <summary>
      <para>Gets the name of the node without the namespace prefix.</para>
    </summary>
    <value>
      <para>The name of the node with the prefix removed. For example, LocalName
      is yyy for the element &lt;xxx:yyy&gt;.</para>
      <para> The value returned depends on
      the <see cref="System.Xml.XmlNavigator.NodeType" /> of the current node. The following node types return the listed values; all other node types return String.Empty</para>
      <list type="table">
        <listheader>
          <term>XmlNodeType</term>
          <description>Property Value</description>
        </listheader>
        <item>
          <term> Attribute</term>
          <description>Contains the local name of the attribute.</description>
        </item>
        <item>
          <term> DocumentType</term>
          <description> Contains the name of the document type; for example, xxx in &lt;!DOCTYPE xxx ...&gt;.</description>
        </item>
        <item>
          <term> Element</term>
          <description> Contains the local name of the XML tag.</description>
        </item>
        <item>
          <term> Entity</term>
          <description> Contains the name of the entity.</description>
        </item>
        <item>
          <term> EntityReference</term>
          <description> Contains the name of the entity referenced. Note that the name does not include the leading ampersand or the trailing semicolon.</description>
        </item>
        <item>
          <term> Notation</term>
          <description> Contains the name of the notation.</description>
        </item>
        <item>
          <term> ProcessingInstruction</term>
          <description>Contains the target; the first token following the &lt;? characters.</description>
        </item>
        <item>
          <term> XmlDeclaration</term>
          <description>Contains the literal string "xml".</description>
        </item>
        <item>
          <term>All other node types</term>
          <description>String.Empty</description>
        </item>
      </list>
    </value>
    <seealso cref="System.Xml.XmlNavigator.Name" />
  </doc>
  <doc for="XmlNavigator.Name">
    <summary>
      <para> Gets the qualified name of
      the current node.</para>
    </summary>
    <value>
      <para>The qualified name of the current node. The name returned depends on
      the <see cref="System.Xml.XmlNavigator.NodeType" /> of the
      current node. The following node types return the listed values; all other
      node types return String.Empty</para>
      <list type="table">
        <listheader>
          <term>XmlNodeType</term>
          <description>Property Value</description>
        </listheader>
        <item>
          <term> Attribute</term>
          <description>Contains the name of the attribute.</description>
        </item>
        <item>
          <term> DocumentType</term>
          <description>Contains the name of the document type; for example, xxx in &lt;!DOCTYPE xxx ...&gt;.</description>
        </item>
        <item>
          <term> Element</term>
          <description>Contains the name of the XML tag, with any namespace prefix included if present.</description>
        </item>
        <item>
          <term> Entity</term>
          <description>Contains the name of the entity.</description>
        </item>
        <item>
          <term> EntityReference</term>
          <description>Contains the name of the entity referenced. Note that the name does not include the leading ampersand or the trailing semicolon. The name includes the namespace if one is present.</description>
        </item>
        <item>
          <term> Notation</term>
          <description>Contains the name of the notation.</description>
        </item>
        <item>
          <term> ProcessingInstruction</term>
          <description>Contains the target; the first token following the &lt;? characters.</description>
        </item>
        <item>
          <term> XmlDeclaration</term>
          <description>Contains the literal string "xml".</description>
        </item>
        <item>
          <term>All other node types</term>
          <description>String.Empty</description>
        </item>
      </list>
    </value>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.Name" /> (in the DocumentNavigator class) for an example using this
   property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.NamespaceURI">
    <summary>
      <para> Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.</para>
    </summary>
    <value>
      <para> The namespace URI of the current node or
      an empty string if if there is no namespace.</para>
    </value>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.NamespaceURI" /> (in the DocumentNavigator class) for an example
   using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.Prefix">
    <summary>
      <para> Gets the prefix associated with the current node.</para>
    </summary>
    <value>
      <para> The prefix associated with the current node.</para>
      <para> String.Empty if current node/record has no prefix to
      return (never returns <see langword="null" /> ).</para>
    </value>
    <seealso cref="System.Xml.XmlEditor.SetPrefix" />
  </doc>
  <doc for="XmlNavigator.Version">
    <summary>
      <para>Gets the XML version of the document.</para>
    </summary>
    <value>
      <para>The value "1.0" or String.Empty if the document has no version attribute.</para>
    </value>
    <remarks>
      <para> This property does not require the navigator to be positioned
      on the XmlDeclaration node.</para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.Version" /> (in the DocumentNavigator class) for an example
   using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.Standalone">
    <summary>
      <para> Gets the standalone attribute for the document.</para>
    </summary>
    <value>
      <para>The value of the standalone attribute or String.Empty if the document has no such attribute.</para>
    </value>
    <remarks>
      <para>Valid values are
      "yes" if all entity declarations required by the XML document are contained within the document or "no" if an external DTD is required.</para>
   This property does not require the navigator to be
   positioned on the XmlDeclaration node.
</remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.Standalone" /> (in the DocumentNavigator class) for an example using this property.</para>
    </example>
    <seealso cref="System.Xml.XmlEditor.SetStandalone" />
  </doc>
  <doc for="XmlNavigator.Encoding">
    <summary>
      <para> Gets the encoding level of the document.</para>
    </summary>
    <value>
      <para>The value of the encoding attribute or String.Empty if the document has no such attribute.</para>
    </value>
    <remarks>
      <para>This attribute is optional. XML version 1.0 specifies that if this attribute is not included, "UTF-8" or "UTF-16" encoding is assumed, depending on the format of the initial "&lt;?xml" string. </para>
      <para>This property does not require the navigator to be 
      positioned on the XmlDeclaration node. </para>
    </remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.Encoding" /> (in the DocumentNavigator class) for an example
   using this property.</para>
    </example>
    <seealso cref="System.Xml.XmlEditor.SetEncoding" />
  </doc>
  <doc for="XmlNavigator.InternalSubset">
    <summary>
      <para>Gets the internal subset.</para>
    </summary>
    <value>
      <para>The internal DTD subset defined on the document type node. For example, this property would return everything between the square brackets &lt;!DOCTYPE doc [....]&gt;.</para>
    </value>
    <remarks>
   This property does not require the
   navigator to be positioned on the DocumentType node.
</remarks>
    <example>
      <para>See <see cref="System.Xml.DocumentNavigator.InternalSubset" /> (in the DocumentNavigator class) for an example
   using this property.</para>
    </example>
  </doc>
  <doc for="XmlNavigator.SystemId">
    <summary>
      <para>Gets the system identifier.</para>
    </summary>
    <value>
      <para> Returns the system identifier for the following node 
      types or String.Empty if no system identifier was defined. </para>
      <list type="table">
        <listheader>
          <term>Node Type</term>
          <description>Description</description>
        </listheader>
        <item>
          <term> DocumentType</term>
          <description>
            <para> &lt;!DOCTYPE doc PUBLIC "PublicId" "SystemId"...</para>
            <para>&lt;!DOCTYPE doc SYSTEM "SystemId"... </para>
          </description>
        </item>
        <item>
          <term> Entity</term>
          <description>
            <para>&lt;!ENTITY doc PUBLIC "PublicId" "SystemId" ... </para>
            <para>&lt;!ENTITY doc SYSTEM "SystemId" ...</para>
          </description>
        </item>
        <item>
          <term> Notation</term>
          <description>
            <para> &lt;!NOTATION doc PUBLIC "PublicId" "SystemId" ...</para>
            <para>&lt;!NOTATION doc SYSTEM "SystemId" ...</para>
          </description>
        </item>
      </list>
    </value>
    <remarks>
   This property does not require the navigator to be
   positioned on an DocumentType, Entity or Notation node.
</remarks>
    <seealso cref="System.Xml.XmlNavigator.PublicId" />
    <seealso cref="System.Xml.XmlNavigator.InternalSubset" />
  </doc>
  <doc for="XmlNavigator.PublicId">
    <summary>
      <para>Gets the public identifier.</para>
    </summary>
    <value>
      <para>Returns the public identifier information for the 
      following node types or String.Empty if no public identifier was defined.</para>
      <list type="table">
        <listheader>
          <term>Node 
            Type</term>
          <description>Description</description>
        </listheader>
        <item>
          <term> DocumentType</term>
          <description>&lt;!DOCTYPE doc PUBLIC "PublicId"...</description>
        </item>
        <item>
          <term> Entity</term>
          <description>&lt;!ENTITY doc PUBLIC "PublicId"...</description>
        </item>
        <item>
          <term> Notation</term>
          <description>&lt;!NOTATION doc PUBLIC "PublicId"...</description>
        </item>
      </list>
    </value>
    <remarks>
      <para>This property does not require the navigator to be positioned on an DocumentType, Entity or Notation node.</para>
    </remarks>
    <seealso cref="System.Xml.XmlNavigator.SystemId" />
    <seealso cref="System.Xml.XmlNavigator.InternalSubset" />
  </doc>
</docs>