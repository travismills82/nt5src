<docs>
	<doc for="NameTable.NameTable">
		<summary>
			<para>Initializes a new instance of the 
 <see langword="NameTable"/> class.</para>
		</summary>
		<remarks>
			<para>Constructs an empty NameTable.</para>
		</remarks>
	</doc><doc for="NameTable">
		<summary>
			<para>Implements a single-threaded <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<remarks>
			<para>Several classes, such as <see cref="System.Xml.XmlDocument"/> and <see cref="System.Xml.XmlReader"/> use the <see langword="NameTable"/> class
   internally, to store attribute and element names. When an
   element or attribute name occurs multiple times in an XML document it is stored
   only once in the <see langword="NameTable"/>
   .</para>
			<para>The names are stored as common language runtime object types. This enables 
   you to do object comparisons on these strings rather than a more expensive
   string comparison. These string objects are referred to as
   '<see langword="atomized"/>
				<see langword="strings"/>'. </para>
		</remarks>
		<example>
			<para> The following example compares two element
      names.
      </para>
			<codelink SampleID="NameTable" SnippetID="1"/>
		</example>
	</doc><doc for="NameTable.Add">
		<overload>
			<para>Atomizes the specified string and adds it to the
   <see langword="NameTable"/>
   .</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.NameTable"/>.</para>
		</overload>
		<summary>
			<para> Atomizes the specified string and adds it to the
   <see langword="NameTable"/>
   .</para>
			<para> For more information on atomized strings, see <see cref="System.Xml.NameTable"/>
.</para>
		</summary>
		<param name="key">The string to add.</param>
		<returns>
			<para>The atomized string or the existing string if it already
      exists in the <see langword="NameTable"/> .</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="NameTable.Add1">
		<summary>
			<para> Atomizes the specified string and adds it to the
   <see langword="NameTable"/>
   .</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.NameTable"/>.</para>
		</summary>
		<param name="key">The character array containing the string to add.</param>
		<param name="start">The zero-based index into the array specifying the first character of the string.</param>
		<param name="len">The number of characters in the string.</param>
		<returns>
			<para>The atomized string or the existing string if one already
      exists in the <see langword="NameTable"/>
      . If <paramref name="len"/> is zero, String.Empty is returned.</para>
		</returns>
		<exception cref="IndexOutOfRangeException"><para>0 &gt; <paramref name=" start"/>
			</para>
			<para>-or-</para>
			<para><paramref name="start"/> &gt;= <paramref name="key"/>.Length </para>
			<para>-or-</para>
			<para><paramref name="len"/> &gt;= <paramref name="key"/>.Length</para>
			<para>The above conditions do not cause an exception to be thrown if <paramref name="len"/>=0. </para></exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="len"/> &lt; 0.</exception>
	</doc>
	<doc for="NameTable.Get">
		<overload>
			<para> Gets the
      atomized string.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.NameTable"/>.</para>
		</overload>
		<summary>
			<para> Gets the atomized string with the specified
      value.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.NameTable"/>
.</para>
		</summary>
		<param name="value">The name to find.</param>
		<returns>
			<para>The atomized string object or
   <see langword="null"/> if the string has not already been atomized.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="NameTable.Get1">
		<summary>
			<para>Gets the atomized string
      containing the same characters as the specified range of characters in the given
      array.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.NameTable"/>.</para>
		</summary>
		<param name="key">The character array containing the name to find.</param>
		<param name="start">The zero-based index into the array specifying the first character of the name.</param>
		<param name="len">The number of characters in the name.</param>
		<returns>
			<para>The atomized string or <see langword="null"/> if the
   string has not already been atomized. If <paramref name="len"/> is zero,
   String.Empty is returned.</para>
		</returns>
		<exception cref="IndexOutOfRangeException"><para>0 &gt; <paramref name="start"/>
			</para><para>-or-</para><para><paramref name="start"/> &gt;= <paramref name="key"/>.Length </para><para>-or-</para><para><paramref name="len"/> &gt;= <paramref name="key"/>.Length</para><para>The above conditions do not cause an exception to be thrown if <paramref name="len"/>=0. </para></exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="len"/> &lt; 0.</exception>
	</doc>
</docs>
