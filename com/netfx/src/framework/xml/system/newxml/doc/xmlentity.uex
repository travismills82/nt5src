<docs>
	<doc for="XmlEntity.IsReadOnly">
		<summary>
			<para>Gets a value indicating whether the node is read-only.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the node 
   is read-only; otherwise <see langword="false"/> . </para>
			<para>Because <see langword="XmlEntity"/> nodes are read-only, 
this property always returns <see langword="true"/> . </para>
		</value>
		<remarks>
			<para> 
      A read-only node is one whose properties, attributes,
      or children cannot be changed. You can remove a read-only node from
      the tree and insert it somewhere else.</para>
		</remarks>
	</doc>
	<doc for="XmlEntity.LocalName">
		<summary>
			<para> Gets the name of the node without the namespace prefix.
      </para>
		</summary>
		<value>
			<para> For <see langword="XmlEntity"/> nodes, this property
   returns the name of the entity.
   </para>
		</value>
	</doc>
	<doc for="XmlEntity.CloneNode">
		<summary>
			<para>Creates a duplicate of this node. Entity nodes 
      cannot be cloned. Calling this method on an <see langword="XmlEntity"/> object throws an exception.</para>
		</summary>
		<param name="deep">
			<see langword="true"/> to recursively clone the subtree under the specified node; <see langword="false"/> to clone only the node itself.</param>
		<exception cref="InvalidOperationException">Calling this method.</exception>
	</doc>
	<doc for="XmlEntity.XmlEntity">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlEntity.Name">
		<summary>
			<para>Gets the name of the node.</para>
		</summary>
		<value>
			<para>The name of the entity.</para>
		</value>
		<example>
			<para> The following example displays information on the 
      entities declared in the XML document.</para>
			<codelink SampleID="XmlEntity" SnippetID="1"/>


The example uses the file, <see langword="doment.xml"/>, as input.

<codelink SampleID="XmlEntity" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlDocumentType"/>
	</doc><doc for="XmlEntity.NodeType">
		<summary>
			<para>Gets the type of the node.</para>
		</summary>
		<value>
			<para>The node type. For <see langword="XmlEntity"/> nodes, the value is
   XmlNodeType.Entity.</para>
		</value>
		<example>
			<para> The following example displays information on the 
      entities declared in the XML document.</para>
			<codelink SampleID="XmlEntity" SnippetID="1"/>


The example uses the file, <see langword="doment.xml"/>, as input.

<codelink SampleID="XmlEntity" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlNodeType"/>
	</doc><doc for="XmlEntity.PublicId">
		<summary>
			<para>Gets
      the value of the public identifier on the entity declaration.</para>
		</summary>
		<value>
			<para>The public identifier on the entity. If there is no
      public identifier, <see langword="null"/> is
      returned.</para>
		</value>
		<example>
			<para> The following example displays information on the 
      entities declared in the XML document.</para>
			<codelink SampleID="XmlEntity" SnippetID="1"/>


The example uses the file, <see langword="doment.xml"/>, as input.

<codelink SampleID="XmlEntity" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlDocumentType"/>
	</doc><doc for="XmlEntity.SystemId">
		<summary>
			<para>Gets the value of
      the system identifier on the entity declaration.</para>
		</summary>
		<value>
			<para>The system identifier on the entity. If there is no
      system identifier, <see langword="null"/>
      is returned.</para>
		</value>
		<example>
			<para> The following example displays information on the 
      entities declared in the XML document.</para>
			<codelink SampleID="XmlEntity" SnippetID="1"/>

The example uses the file, <see langword="doment.xml"/>, as input.

<codelink SampleID="XmlEntity" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlDocumentType"/>
	</doc><doc for="XmlEntity.NotationName">
		<summary>
			<para>Gets
      the name of the optional NDATA attribute on the
      entity declaration.</para>
		</summary>
		<value>
			<para>The name of the NDATA attribute. If there is no
      NDATA, <see langword="null"/>
      is returned.</para>
		</value>
		<example>
			<para> The following example displays information on the 
      entities declared in the XML document.</para>
			<codelink SampleID="XmlEntity" SnippetID="1"/>

The example uses the file, 
<see langword="doment.xml"/>, as input.
<codelink SampleID="XmlEntity" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlDocumentType"/>
	</doc><doc for="XmlEntity.InnerText">
		<summary>
			<para>Gets the concatenated values of the entity node and all
      its children.</para>
		</summary>
		<value>
			<para>The concatenated values of the node and all its children.</para>
		</value>
		<exception cref="InvalidOperationException">Attempting to set the property.</exception>
		<remarks>
			<para><see langword="XmlEntity"/> nodes are read-only. Setting this property throws an
   exception.</para>
			<para>This property is a Microsoft extension to the Document Object Model 
   (DOM).</para>
		</remarks>
	</doc><doc for="XmlEntity.OuterXml">
		<summary>
			<para>Gets the markup representing this node and all its
      children.</para>
		</summary>
		<value>
			<para>For <see langword="XmlEntity"/> nodes, String.Empty is returned.</para>
		</value>
		<remarks>
			<para>This property is a Microsoft extension to the Document Object Model 
      (DOM).</para>
		</remarks>
	</doc><doc for="XmlEntity.InnerXml">
		<summary>
			<para> Gets the markup representing the children of
      this node.</para>
		</summary>
		<value>
			<para>For <see langword="XmlEntity"/> nodes, String.Empty is returned.</para>
		</value>
		<exception cref="InvalidOperationException">Attempting to set the property.</exception>
		<remarks>
			<para><see langword="XmlEntity"/> nodes are read-only. Setting this property
   throws an exception.</para>
			<para>This property is a Microsoft extension to the Document Object Model 
   (DOM).</para>
		</remarks>
	</doc><doc for="XmlEntity.WriteTo">
		<summary>
			<para>Saves the node to the specified <see cref="System.Xml.XmlWriter"/> .</para>
For <see langword="XmlEntity"/> nodes, this
method has no effect.
</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
	</doc><doc for="XmlEntity.WriteContentTo">
		<summary>
			<para>Saves all the children of the node to the specified
   <see cref="System.Xml.XmlWriter"/> .</para>
			<para>For <see langword="XmlEntity"/> nodes, this method has no effect.</para>
		</summary>
		<param name="w">The <see langword="XmlWriter"/> to which you want to save.</param>
		<remarks>
			<para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
		</remarks>
	</doc><doc for="XmlEntity">
		<summary>
			<para> Represents an entity declaration: &lt;!ENTITY ... &gt;.
      </para>
		</summary>
		<seealso topic="cpconXMLDocumentObjectModelDOM"/>
		<seealso cref="System.Xml.XmlDocumentType.Entities" qualify="true"/>
	</doc>
	<doc for="XmlEntity.BaseURI">
		<summary>
			<para>Gets the base URI of the current node.</para>
		</summary>
		<value>
			<para>The location from which the node was
      loaded.</para>
		</value>
		<remarks>
			<para>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. The <see langword="BaseURI"/> tells you where these nodes came from.</para>
			<para>The value of this property varies depending on the node type. Nodes which are children of external EntityReference nodes return the location of the entity itself. For example, consider the following XML document:</para>
			<code>
&lt;!DOCTYPE item [
&lt;!ENTITY xyz SYSTEM "a/b.xml"&gt;
]&gt;
&lt;item num='123'&gt;&amp;xyz;&lt;/item&gt;
</code>
			<para>where the external entity <see langword="a/b.xml"/> contains the XML text:<c>&lt;test&gt;123&lt;/test&gt;</c>. </para>
			<para>If the document is loaded from http://server/mydata.xml , <see langword="BaseURI"/> returns the following:</para>
			<list type="table">
				<listheader>
					<term>NodeType</term>
					<description>Name</description>
					<description>BaseURI</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>num</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Document</term>
					<description>#document</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>item</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Entity</term>
					<description>xyz</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Element</term>
					<description>item</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>xyz</description>
					<description>http://server/mydata.xml</description>
				</item>
				<item>
					<term> Element</term>
					<description>test</description>
					<description>http://server/a/b.xml</description>
				</item>
				<item>
					<term> Text</term>
					<description>#text</description>
					<description>http://server/a/b.xml</description>
				</item>
			</list>
			<para><see langword="BaseURI"/> looks for entity reference boundaries, so if entities are expanded this information is not preserved and this property returns the location of the <see langword="XmlDocument"/> object in all cases.</para>
			<para>As a second example, given the following XML document:</para>
			<code>
&lt;!DOCTYPE Mydata SYSTEM "http://localhost/doctype.dtd"&gt;
&lt;baa&gt;&amp;xyz;&lt;/baa&gt;
</code>
where the DTD file contains the following:
<code>
&lt;!ENTITY xyz "&lt;E1&gt;My Data&lt;/E1&gt;"&gt;
&lt;!ELEMENT baa #PCDATA&gt;
&lt;!ATTLIST baa attr1 "woof"&gt;
</code>
			<para>If the XML document is loaded from http://localhost/mydata.xml, <see langword="BaseURI"/> returns the following for each of the nodes:</para>
			<list type="table">
				<listheader>
					<term>NodeType</term>
					<description>Name</description>
					<description>BaseURI</description>
				</listheader>
				<item>
					<term> Document</term>
					<description>#document</description>
					<description>http://localhost/mydata.xml</description>
				</item>
				<item>
					<term> DocumentType</term>
					<description>Mydata</description>
					<description>http://localhost/doctype.dtd</description>
				</item>
				<item>
					<term> Element</term>
					<description>baa</description>
					<description>http://localhost/mydata.xml</description>
				</item>
				<item>
					<term> Entity</term>
					<description>xyz</description>
					<description>http://localhost/doctype.dtd</description>
				</item>
				<item>
					<term> EntityReference</term>
					<description>xyz</description>
					<description>http://localhost/mydata.xml</description>
				</item>
				<item>
					<term> Attribute</term>
					<description>woof</description>
					<description>http://localhost/mydata.xml</description>
				</item>
			</list>
			<note type="note">
   The base URI of a default attribute is the same as the base URI of the element to which they belong.
</note>
			<para>This property is a Microsoft extension to the Document Object Model
   (DOM).</para>
		</remarks>
	</doc>
</docs>
