<docs>
	<doc for="XmlTextReader.BufferAppend">
		<summary>
			<para> Sets an event handler for receiving information about DTD and
       schema validation errors.</para>
		</summary>
		<remarks>
			<para> These events occur during <see cref="System.Xml.XmlTextReader.Read"/> 
 .</para>
			<para> To set an event handler, you need to do the following:</para>
			<list type="bullet">
				<item>
					<term>
       Define the event handling method in the class
       receiving the event.</term>
				</item>
				<item>
					<term>
       Construct a ValidationEventHandler class with this
       event handling method.</term>
				</item>
				<item>
					<term>
       Set the ValidationEventHandler property to this class.</term>
				</item>
			</list>
			<para>Note: A "validation Error" is any error listed in the W3C as "Validity
    Constraint:". If a given element reports a validity error via this callback
    because the content model does not match then the rest of the content model for
    that element is not validated (but it's children are validated). In other words,
    once the validator reaches the error state for a given element it does not keep
    reporting more and more errors for that element, it only reports the first
    error.</para>
		</remarks>
		<example>
			<para>The following example reads in an XML file and validates 
       it against a schema file. The sample uses the following two files <see topic="cpconNotValidxml"/>
       and <see topic="cpconSchemaxml"/>. </para>
			<codelink SampleID="Classic WebData XmlTextReader.BufferAppend Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlTextReader.Validation"/>
		<seealso cref="System.Xml.Schema.XmlSchemaCollection"/>
	</doc>
	<doc for="XmlTextReader.XmlTextReader1">
		<internalonly/>
		<overload>
			<para>Initializes a new instance of the XmlTextReader class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the XmlTextReader class with the specified XmlNameTable.</para>
		</summary>
		<param name="nt">The XmlNameTable to use.</param>
	</doc>
	<doc for="XmlTextReader.ResetToCloseState">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="XmlTextReader.QuoteChar">
		<summary>
			<para>
       Gets the quotation mark character used to enclose the value of an attribute
       node.
    </para>
		</summary>
		<value>
			<para>
       The quotation mark character (" or ') used to enclose the value of an
       attribute node.
    </para>
		</value>
		<remarks>
			<para>
       This property applies only to an attribute node.
    </para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.ReadChar">
		<summary>
			<para>
       Reads the element content one character
       at a time.
    </para>
		</summary>
		<returns>
			<para>
       The next character in the element content. If current position is
       the end of the element content, zero is returned.
    </para>
		</returns>
	</doc>
	<doc for="XmlTextReader.ResolveEntity1">
		<internalonly/>
		<summary>
			<para>
       Resolves and parses general entities on demand at a later time.
    </para>
		</summary>
		<param name="name">
    The name of the entity to resolve.
 </param>
		<exception cref="ArgumentException">
    The specified entity is not defined.
 </exception>
		<remarks>
			<para>
       This method can be called any time (even when the XmlTextReader is in EOF state)
       to resolve and parse general entities on demand at a later time. After resolving
       and parsing each entity the XmlTextReader continues on with what it was doing or
       goes back to EOF state.
    </para>
			<para>
       Note that the when the XmlTextReader is in the EOF state that there is no
       namespace scope.
    </para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.ResolveEntity2">
		<summary>
			<para>Parses the attribute value into one or more Text and/or EntityReference node
       types.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if there are nodes to return.</para>
			<para>
				<see langword="false"/> if there are no more nodes to 
 return, if <see cref="System.Xml.XmlTextReader.NodeType"/> is not Element, or if <see langword="NodeType"/> is
 Element, but the element has no attributes.</para>
			<para>Note that an empty attribute (such as, foo="")
    returns <see langword="true"/> with a single node with
    a value of String.Empty.</para>
		</returns>
		<remarks>
			<para>Use this method after calling
    <see langword="MoveToAttribute"/> to read through the text or entity reference
       nodes that make up the attribute value. The <see cref="System.Xml.XmlReader.Depth"/> of the attribute value
       nodes is one plus the depth of the Attribute node, and it increments and
       decrements by one when you step into and out of general entity references.</para>
			<para>General entities are returned as a single empty(<see cref="System.Xml.XmlTextReader.Value"/> 
 is String.Empty) Entity Reference node.</para>
		</remarks>
		<example>
			<para>The following example reads an attribute with text and
       entity reference nodes.
       </para>
			<codelink SampleID="Classic WebData XmlTextReader.ResolveEntity2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextReader.ResolveEntity3">
		<internalonly/>
		<summary>
			<para>
       Resolves and parses general entities on demand at a later time.
    </para>
		</summary>
		<param name="name">
    The name of the entity to resolve.
 </param>
		<exception cref="ArgumentException">
    The specified entity is not defined.
 </exception>
		<remarks>
			<para>
       This method can be called any time (even when the XmlTextReader is in EOF state)
       to resolve and parse general entities on demand at a later time. After resolving
       and parsing each entity the XmlTextReader continues on with what it was doing or
       goes back to EOF state.
    </para>
			<para>
       Note that the when the XmlTextReader is in the EOF state that there is no
       namespace scope.
    </para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.ReadState">
		<summary>
			<para> 
      Gets the state of the reader.
      </para>
		</summary>
		<value>
			<para> One of the <see cref="System.Xml.ReadState"/> values.
   </para>
		</value>
	</doc>
	<doc for="XmlTextReader.Close">
		<summary>
			<para> Changes the <see cref="System.Xml.XmlReader.ReadState"/>
to Closed.</para>
		</summary>
		<remarks>
			<para> This method also releases any resources held while
      reading. If this reader was constructed using a stream, this method also calls
   <see langword="Close"/>
   on
   the underlying stream.
   </para>
			<para> If <see langword="Close"/> has already been called, no action is
performed.</para>
		</remarks>
	</doc><doc for="XmlTextReader.EOF">
		<summary>
			<para> Gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
		</summary>
		<value>
			<para><see langword="true"/> if the reader is positioned at the end of the stream;
 otherwise, <see langword="false"/>.
 </para>
		</value>
	</doc><doc for="XmlTextReader.IsDefault">
		<summary>
			<para> Gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
		</summary>
		<value>
			<para>This property always returns <see langword="false"/>. 
 (<see langword="XmlTextReader"/> does not expand default
 attributes.)</para>
		</value>
		<remarks>
			<para> This property applies only to attribute nodes.
 </para>
		</remarks>
	</doc><doc for="XmlTextReader.LocalName">
		<summary>
			<para> Gets the local name of the current node.
 </para>
		</summary>
		<value>
			<para> The name of the current node with the prefix removed.
 For example, <see langword="LocalName"/> is
 <see langword="book"/> for the element <c>&lt;bk:book&gt;</c>
 .
 </para>
			<para>For node types that do not have a name (like 
<see langword="Text"/>, <see langword="Comment"/> , and so on),
 this property returns String.Empty.
 </para>
		</value>
		<example>
			<para> The following example displays the local name of each node, and,
 if they exist, the prefix and namespace URI.
 </para>
			<codelink SampleID="Classic WebData XmlTextReader.LocalName Example" SnippetID="1"/>

The example uses the file, <see langword="book2.xml"/>, as input.
<codelink SampleID="Classic WebData XmlTextReader.LocalName Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.Name">
		<summary>
			<para> Gets
 the qualified name of the current node.</para>
		</summary>
		<value>
			<para> The qualified name of the current node. For 
 example, <see langword="Name"/> is <see langword="bk:book"/> for the element <c>&lt;bk:book&gt;</c>
 .</para>
			<para>The name returned is dependent on the <see cref="System.Xml.XmlTextReader.NodeType"/>
of the node. The following node types return the listed
values. All other node types return an empty string.</para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Name</description>
				</listheader>
				<item>
					<term><see langword="Attribute"/></term>
					<description>The name of the attribute.</description>
				</item>
				<item>
					<term><see langword="DocumentType"/></term>
					<description>The document type name.</description>
				</item>
				<item>
					<term><see langword="Element"/></term>
					<description>The tag name.</description>
				</item>
				<item>
					<term><see langword="EntityReference"/></term>
					<description>The name of the entity referenced.</description>
				</item>
				<item>
					<term><see langword="ProcessingInstruction"/></term>
					<description>The target of the processing 
 instruction.</description>
				</item>
				<item>
					<term><see langword="XmlDeclaration"/></term>
					<description>The literal string 
<see langword="xml"/>.</description>
				</item>
			</list>
		</value>
		<example>
			<para> The following example reads an XML file and displays each of the nodes.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="1"/>
			<para>The sample uses the file
<see langword="items.xml"/>.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.NodeType">
		<summary>
			<para>Gets the type of the current node.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Xml.XmlNodeType"/> values representing the type of
 the current node.
 </para>
		</value>
		<remarks>
			<para>This property never returns the following 
 <see langword="XmlNodeType"/> types: 
 <see langword="Document"/>, <see langword="DocumentFragment"/>, 
 <see langword="Entity"/>, <see langword="EndEntity"/>, or 
 <see langword="Notation"/> .</para>
		</remarks>
		<example>
			<para>The following example reads an XML file and displays each of the nodes.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="1"/>
			<para>The sample uses the file <see langword="items.xml"/>.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.Prefix">
		<summary>
			<para> Gets the namespace prefix associated with the current node.
 </para>
		</summary>
		<value>
			<para> The namespace prefix associated with the current node.
 </para>
		</value>
		<example>
			<para> The following example displays the local name of each node, and,
 if they exist, the prefix and namespace URI.
 </para>
			<codelink SampleID="Classic WebData XmlTextReader.LocalName Example" SnippetID="1"/>

The example uses the file, <see langword="book2.xml"/>, as input.
<codelink SampleID="Classic WebData XmlTextReader.LocalName Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.XmlLang">
		<summary>
			<para>Gets the current <see langword="xml:lang"/> scope.</para>
		</summary>
		<value>
			<para>The current <see langword="xml:lang"/> scope.</para>
		</value>
		<remarks>
			<para>This property represents the xml:lang scope within which 
 the current node resides. For example, here is an XML fragment with
 <see langword="xml:lang"/> 
 set
 to US English in the root element:</para>
			<para>&lt;root xml:lang="en-us"&gt;</para>
			<para>&lt;name&gt;Fred&lt;/name&gt;</para>
			<para>&lt;/root&gt;</para>
			<para>When the reader is positioned on the <see langword="name"/> 
element, you can use this property to find that it is in the scope of a US
English <see langword="xml:lang"/>
attribute.</para>
			<para>The string returned is also in <see cref="System.Xml.XmlTextReader.NameTable"/>.</para>
		</remarks>
		<example>
			<para>The following example displays the xml:lang value for each of the
 nodes.
 </para>
			<codelink SampleID="XmlTextReader.XmlLang" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.MoveToAttribute">
		<overload>
			<para>Moves to the specified attribute.</para>
		</overload>
		<summary>
			<para>Moves to the attribute with the specified name.</para>
		</summary>
		<param name="name">The qualified name of the attribute.</param>
		<returns>
			<para><see langword="true"/> if the attribute is found;
 otherwise, <see langword="false"/>. If <see langword="false"/>,
 the reader's position does not change.</para>
		</returns>
		<remarks>
			<para>After calling <see langword="MoveToAttribute"/>, the <see cref="System.Xml.XmlTextReader.Name"/>, 
<see cref="System.Xml.XmlTextReader.NamespaceURI"/>, and <see cref="System.Xml.XmlTextReader.Prefix"/> properties will 
 reflect the properties of that attribute.</para>
		</remarks>
	</doc><doc for="XmlTextReader.MoveToAttribute1">
		<summary>
			<para>Moves to the attribute with the specified local name and namespace URI.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name=" namespaceURI">The namespace URI of the attribute.</param>
		<returns>
			<para><see langword="true"/> if the attribute is found; otherwise,
<see langword="false"/>. If <see langword="false"/>, the reader's position does
 not change.</para>
		</returns>
		<remarks>
 After calling
<see langword="MoveToAttribute"/>, the <see cref="System.Xml.XmlTextReader.Name"/>, <see cref="System.Xml.XmlTextReader.NamespaceURI"/>, and <see cref="System.Xml.XmlTextReader.Prefix"/> properties will 
 reflect the properties of that attribute.
</remarks>
	</doc><doc for="XmlTextReader.AttributeCount">
		<summary>
			<para>Gets the number of attributes on the current node.</para>
		</summary>
		<value>
			<para> The number of attributes on the current node.</para>
		</value>
		<remarks>
			<para>This property is relevant to <see langword="Element"/>, 
<see langword="DocumentType"/> and <see langword="XmlDeclaration"/> nodes 
 only. (Other node types do not have attributes.)</para>
		</remarks>
		<example>
			<para>The following example displays all attributes on the current node.</para>
			<codelink SampleID="Classic WebData XmlTextReader.MoveToElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.NamespaceURI">
		<summary>
			<para> Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
 </para>
		</summary>
		<value>
			<para> The namespace URI of the current node; otherwise an empty string.
 </para>
		</value>
		<remarks>
			<para>This property is relevant to <see langword="Element"/>
and <see langword="Attribute"/> nodes
only.</para>
		</remarks>
		<example>
			<para> The following example displays the local name of each node, and,
 if they exist, the prefix and namespace URI.
 </para>
			<codelink SampleID="Classic WebData XmlTextReader.LocalName Example" SnippetID="1"/>



The example uses the file, <see langword="book2.xml"/>, as input.
<codelink SampleID="Classic WebData XmlTextReader.LocalName Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.Depth">
		<summary>
			<para> Gets the depth of
 the current node in the XML document.
 </para>
		</summary>
		<value>
			<para> The depth of the current node in the XML document.
 </para>
		</value>
		<example>
			<para>The following example displays each node including its depth, line number, and line position. </para>
			<codelink SampleID="XmlTextReader.LineNum" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.LineNumber">
		<summary>
			<para>Gets the current line number.</para>
		</summary>
		<value>
			<para>The current line number.</para>
		</value>
		<remarks>
			<para>This property is most commonly used for error reporting,
 but can be called at any time. The starting value for this property is
 <see langword="1"/>
 .</para>
			<para>Combined with <see cref="System.Xml.XmlTextReader.LinePosition"/> , a value of <see langword="1,1"/> indicates the start
of the document.</para>
		</remarks>
		<example>
			<para>The following example displays each node including its depth, line number,
 and line position.
 </para>
			<codelink SampleID="XmlTextReader.LineNum" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.LinePosition">
		<summary>
			<para>Gets the current line position.</para>
		</summary>
		<value>
			<para>The current line position.</para>
		</value>
		<remarks>
			<para>This property is most commonly used for error reporting,
 but can be called at any time. The property's starting value is
 <see langword="1"/>
 .</para>
			<para> The position indicated is the first character
 of text in the markup. </para>
			<code>
&lt;root&gt;
abc&lt;tag/&gt;
&lt;/root&gt;
</code>
			<para> On the first line of the preceding XML text, a <see langword="LinePosition"/> of <see langword="2"/> corresponds to
the character <c>r</c>
; on the second line, a
<see langword="LinePosition"/> of 
<see langword="5"/> corresponds to the character <c>t</c> ; 
and on the third line, a <see langword="LinePosition"/> of <see langword="3"/> corresponds to
the character <c>r</c> .</para>
			<para>Combined with <see cref="System.Xml.XmlTextReader.LineNumber"/>, a value of <see langword="1,1"/> indicates the start of the document.</para>
		</remarks>
		<example>
			<para>The following example displays each node including its depth, line number, and line position. </para>
			<codelink SampleID="XmlTextReader.LineNum" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.BaseURI">
		<summary>
			<para> Gets the base URI of the current node.
 </para>
		</summary>
		<value>
			<para> The base URI of the current node.
 </para>
		</value>
		<remarks>
			<para> A networked XML document is comprised of chunks of data aggregated using various W3C
 standard inclusion mechanisms and therefore contains nodes that come from different
 places. DTD entities are an example of this, but this is not limited
 to DTDs. The base URI tells you where these nodes came from. If there is
 no base URI for the nodes being returned (for example, they were parsed from an
 in-memory string), String.Empty is returned.
 </para>
		</remarks>
		<example>
			<para>The following example displays the base URI for each of the nodes.
 
 </para>
			<codelink SampleID="Classic WebData XmlTextReader.BaseURI Example" SnippetID="1"/>



The example uses the file, <see langword="baseuri.xml"/>, as input.
<codelink SampleID="Classic WebData XmlTextReader.BaseURI Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.NameTable">
		<summary>
			<para>Gets the <see cref="System.Xml.XmlNameTable"/> associated with this
 implementation.</para>
		</summary>
		<value>
			<para>The <see langword="XmlNameTable"/> enabling you to get the atomized version of a string within the
 node.</para>
		</value>
		<remarks>
			<para>All node and attribute names returned from this class
 are atomized using the <see langword="NameTable"/>. When the same name is
 returned multiple times (for example, <see langword="Customer"/>), then the same
 <see langword="String"/>
 object will be returned for that name.
 This makes it possible for you to write efficient code that does object
 comparisons on these strings instead of expensive string comparisons.</para>
		</remarks>
		<seealso cref="System.Xml.XmlNameTable"/>
	</doc><doc for="XmlTextReader.MoveToElement">
		<summary>
			<para>Moves to the element that contains the current attribute node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false"/> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
		</returns>
		<remarks>
			<para>Use this method to return to an element after navigating
 through its attributes. This method moves the reader to one of the following
 node types: <see langword="Element"/>, <see langword="DocumentType"/>, or
 <see langword="XmlDeclaration"/>.</para>
		</remarks>
		<example>
			<para>The following example displays all attributes on the current node.</para>
			<codelink SampleID="Classic WebData XmlTextReader.MoveToElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.MoveToFirstAttribute">
		<summary>
			<para>Moves to the first attribute.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false "/>(the position of the reader does not change).</para>
		</returns>
		<example>
			<para>The following example gets the value of the first attribute of the root node. </para>
			<codelink SampleID="Classic WebData XmlTextReader.MoveToFirstAttribute Example" SnippetID="1"/>



The example uses the file, <see langword="attrs.xml"/>, as input.
<codelink SampleID="Classic WebData XmlTextReader.MoveToFirstAttribute Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.MoveToNextAttribute">
		<summary>
			<para>Moves to the next attribute.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there is a next attribute;
<see langword="false"/> if there are no more attributes.</para>
		</returns>
		<remarks>
			<para>If the current node is an element node, this method is
 equivalent to <see cref="System.Xml.XmlTextReader.MoveToFirstAttribute"/>
 . If <see langword="MoveToNextAttribute"/> returns <see langword="true"/>,
 the reader moves to the next attribute; otherwise, the position of the reader
 does not
 change.</para>
		</remarks>
		<example>
			<para>The following example displays all attributes on the current node.</para>
			<codelink SampleID="Classic WebData XmlReader.HasAttributes Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.XmlTextReader">
		<overload>
			<para>Initializes a new instance of the
 <see langword="XmlTextReader"/>
 .</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the 
 <see langword="XmlTextReader"/> .</para>
		</summary>
	</doc><doc for="XmlTextReader.Encoding">
		<summary>
			<para> Gets the encoding of the
 document.</para>
		</summary>
		<value>
			<para> The encoding value. If no encoding attribute exists, and there is no
 byte-order mark, this defaults to UTF-8.</para>
		</value>
		<remarks>
			<para> All encoding standards supported by the underlying operating system are
 supported.</para>
		</remarks>
	</doc><doc for="XmlTextReader.HasValue">
		<summary>
			<para>Gets a value indicating whether the current node can have a <see cref="System.Xml.XmlTextReader.Value"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if the node on which the reader is currently positioned can have a <see langword="Value"/>
;
otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The following table lists node types that have a value to return. </para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see langword="Attribute"/></term>
					<description>The
         value of the attribute.</description>
				</item>
				<item>
					<term><see langword="CDATA"/></term>
					<description>The
      content of the CDATA section.</description>
				</item>
				<item>
					<term><see langword="Comment"/></term>
					<description>The
   content of the comment.</description>
				</item>
				<item>
					<term><see langword="DocumentType"/></term>
					<description>The internal subset.</description>
				</item>
				<item>
					<term><see langword="ProcessingInstruction"/></term>
					<description>The
   entire content, excluding the target.</description>
				</item>
				<item>
					<term><see langword="SignificantWhitespace"/></term>
					<description>The white space between markup in a mixed content model.</description>
				</item>
				<item>
					<term><see langword="Text"/></term>
					<description>
						<para>The content of the text node.</para></description>
				</item>
				<item>
					<term><see langword="Whitespace"/></term>
					<description>The white space between markup.</description>
				</item>
				<item>
					<term><see langword="XmlDeclaration"/></term>
					<description>The
   content of the declaration.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example displays the value for every node that can have a value.</para>
			<codelink SampleID="Classic WebData XmlTextReader.HasValue Example" SnippetID="1"/>


The example uses the file, <see langword="book1.xml"/>, as input.
 
<codelink SampleID="Classic WebData XmlTextReader.HasValue Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.XmlSpace">
		<summary>
			<para>Gets the current <see langword="xml:space"/> scope.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Xml.XmlSpace"/> values. If no <see langword="xml:space"/> scope
   exists, this property defaults to <see langword="XmlSpace.None"/>
   .</para>
		</value>
		<example>
			<para>The following example parses a file and returns
      significant white space if an <c>xml:space='preserve'</c> scope is found.</para>
			<codelink SampleID="XmlTextReader.XmlSpace" SnippetID="1"/>


 The example uses the file, 
<see langword="authors.xml"/>, as input.
<codelink SampleID="XmlTextReader.XmlSpace" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.GetAttribute">
		<overload>
			<para>Gets the value of an attribute.</para>
		</overload>
		<summary>
			<para>Gets the value of the attribute with the specified index.</para>
		</summary>
		<param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
		<returns>
			<para>The value of the specified attribute.</para>
		</returns>
		<exception cref="ArgumentOutOfRangeException">The <paramref name="i"/> parameter is less than 0 or greater than or equal to <see cref="System.Xml.XmlTextReader.AttributeCount"/>.</exception>
		<remarks>
			<para>This method does not move the reader.</para>
		</remarks>
	</doc><doc for="XmlTextReader.this">
		<overload>
			<para>Gets the value of the attribute.</para>
		</overload>
		<summary>
			<para>Gets the value of the attribute with the specified index.</para>
		</summary>
		<param name="i">The index of the attribute.</param>
		<value>
			<para>The value of the attribute.</para>
		</value>
		<exception cref="ArgumentOutOfRangeException">The <paramref name="i"/> parameter is less than 0 or greater than or equal to <see cref="System.Xml.XmlTextReader.AttributeCount"/>.</exception>
		<remarks>
			<para>This property does not move the reader.</para>
		</remarks>
		<example>
			<para>The following example displays all attributes on the current node.</para>
			<codelink SampleID="Classic WebData XmlTextReader.this Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlTextReader.GetAttribute"/>
	</doc><doc for="XmlTextReader.MoveToAttribute2">
		<summary>
			<para>Moves to the attribute with the specified index.</para>
		</summary>
		<param name="i">The index of the attribute.</param>
		<exception cref="ArgumentOutOfRangeException">The <paramref name="i"/> parameter is less than 0 or greater than or equal to <see cref="System.Xml.XmlReader.AttributeCount"/>.</exception>
		<example>
			<para>The following example displays all attributes on the current node.</para>
			<codelink SampleID="Classic WebData XmlTextReader.MoveToElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.GetRemainder">
		<summary>
			<para> Gets the remainder of the buffered XML.</para>
		</summary>
		<returns>
   A <see cref="System.IO.TextReader"/> containing
   the remainder of the buffered XML.
</returns>
		<remarks>
			<para> Because <see langword="XmlTextReader"/> does a buffered
<see langword="Read"/> 
, it must be able to return the remainder of the unused buffer
so that no data is lost. This allows protocols (such as
multi-part MIME) to package XML in the same stream as other things.</para>
			<para>After calling this method, <see cref="System.Xml.XmlTextReader.EOF"/> is set to
<see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example reads the first part of an XML
      document and then uses <see langword="GetRemainder"/> to complete reading the
      document using a second reader.
      </para>
			<codelink SampleID="Classic WebData XmlTextReader.GetRemainder Example" SnippetID="1"/>
			<para>The example uses the input file <see langword="tworeads.xml"/></para>
			<codelink SampleID="Classic WebData XmlTextReader.GetRemainder Example" SnippetID="2"/>
		</example>
	</doc><doc for="XmlTextReader.ReadAttributeValue">
		<summary>
			<para>Parses the attribute value into one or more 
   <see langword="Text"/>, <see langword="EntityReference"/>, or 
   <see langword="EndEntity"/> nodes.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are nodes to return.</para>
			<para><see langword="false"/> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
			<para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true"/> with a single node with a value of String.Empty.</para>
		</returns>
		<remarks>
			<para>Use this method after calling
   <see langword="MoveToAttribute"/> to read through the text or entity reference
      nodes that make up the attribute value. The <see cref="System.Xml.XmlReader.Depth"/> of the attribute
      value nodes is one plus the depth of the attribute node; it increments and
      decrements by one when you step into and out of general entity references.</para>
			<para>General entities are
      returned as a single empty(<see cref="System.Xml.XmlTextReader.Value"/>
      is String.Empty) <see langword="EntityReference"/>
      node.</para>
		</remarks>
		<example>
			<para>The following example reads an attribute with text and entity nodes.
      </para>
			<codelink SampleID="XmlTextReader.ReadAttributeValue" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextReader.ResetState">
		<summary>
			<para>Resets the state of the reader to ReadState.Initial.</para>
		</summary>
		<exception cref="InvalidOperationException">Calling <see langword="ResetState"/> if the reader was constructed using an <see cref="System.Xml.XmlParserContext"/>.</exception>
		<remarks>
			<para> This method enables you to parse multiple XML documents in a single
      stream. When you reach the end of an XML document, you can call
   <see langword="ResetState"/> to reset the state of the reader
      in preparation for the next XML document.
      </para>
			<para>The following properties are not affected by <see langword="ResetState"/>.</para>
			<list type="bullet"><item>
					<term><see cref="System.Xml.XmlTextReader.Normalization"/></term>
				</item>
				<item>
					<term><see cref="System.Xml.XmlTextReader.Namespaces"/></term>
				</item>
				<item>
					<term><see cref="System.Xml.XmlTextReader.XmlResolver"/></term>
				</item>
				<item>
					<term><see cref="System.Xml.XmlTextReader.WhitespaceHandling"/></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example parses two XML documents in a single stream.
      </para>
			<codelink SampleID="XmlTextReader.ResetState" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.ReadState"/>
	</doc><doc for="XmlTextReader.XmlTextReader7">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified URL and <see cref="System.IO.TextReader"/>
   .</para>
		</summary>
		<param name="url">The URL to use for resolving external resources. The <see cref="System.Xml.XmlTextReader.BaseURI"/> is set to this value.</param>
		<param name=" input">The <see langword="TextReader"/> containing the XML data to read.</param>
		<remarks>
   It is assumed that the
<see langword="TextReader"/> is already set to the correct encoding. This is used 
   by clients that have already read some things from the stream in a multi-part
   MIME scenario.
</remarks>
	</doc><doc for="XmlTextReader.Value">
		<summary>
			<para>Gets the text value of the current node.</para>
		</summary>
		<value>
			<para>The value returned depends on the <see cref="System.Xml.XmlTextReader.NodeType"/> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.</para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Value</description>
				</listheader>
				<item>
					<term><see langword="Attribute"/></term>
					<description>The value of the attribute.</description>
				</item>
				<item>
					<term><see langword="CDATA"/></term>
					<description>The content of the CDATA section.</description>
				</item>
				<item>
					<term><see langword="Comment"/></term>
					<description>The content of the comment.</description>
				</item>
				<item>
					<term><see langword="DocumentType"/></term>
					<description>The internal subset.</description>
				</item>
				<item>
					<term><see langword="ProcessingInstruction"/></term>
					<description>The entire content, excluding the target.</description>
				</item>
				<item>
					<term><see langword="SignificantWhitespace"/></term>
					<description>The white space within an xml:space= 'preserve' scope.</description>
				</item>
				<item>
					<term><see langword="Text"/></term>
					<description>
						<para>The content of the text node.</para></description>
				</item>
				<item>
					<term><see langword="Whitespace"/></term>
					<description>The white space between markup.</description>
				</item>
				<item>
					<term><see langword="XmlDeclaration"/></term>
					<description>The content of the declaration.</description>
				</item>
			</list>
		</value>
		<example>
			<para> The following example reads an XML file and displays each node.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="1"/>
			<para>The sample uses the file
<see langword="items.xml"/>.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.Read">
		<summary>
			<para>Reads the next
      node from the stream.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the next node was read successfully;
<see langword="false"/> if there are no more nodes to read.</para>
		</returns>
		<exception cref="XmlException">An error occurred while parsing the XML.</exception>
		<remarks>
			<para>When a reader is first created and initialized, there is
      no information available. You must call <see langword="Read"/>
      to read the first node.</para>
		</remarks>
		<example>
			<para> The following example reads an XML file and displays each node.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="1"/>
			<para>The sample uses the file
<see langword="items.xml"/>.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.EntityHandling"/>
	</doc>
	<doc for="XmlTextReader.XmlTextReader8">
		<summary>
			<para> Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified <see cref="System.IO.TextReader"/> and
   <see cref="System.Xml.XmlNameTable"/>
   .
   </para>
		</summary>
		<param name="input">The <see langword="TextReader"/> containing the XML data to read. </param>
		<param name="nt">The <see langword="XmlNameTable"/> to use. </param>
		<exception cref="NullReferenceException">The <paramref name="nt"/> value is <see langword="null"/>.</exception>
		<remarks>
			<para> It is assumed that the <see langword="TextReader"/> is
   already set to the correct encoding. This is used by clients that have already read
   some things from the stream in a multi-part MIME scenario.
   </para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.Namespaces">
		<summary>
			<para> Gets or sets a value indicating whether to do namespace support.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> to do namespace support; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.
   </para>
		</value>
		<exception cref="InvalidOperationException">Setting this property after a read operation has occurred (<see cref="System.Xml.XmlTextReader.ReadState"/> is not ReadState.Initial).</exception>
		<remarks>
			<para> This property determines whether the reader supports 
      the W3C Namespaces in XML recommendation located at
      www.w3.org/TR/REC-xml-names. </para>
			<para>The <see langword="Namespaces"/> property cannot be set after a read
   operation has occurred.</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.LookupNamespace">
		<summary>
			<para> Resolves a namespace prefix in the current element's scope.
      </para>
		</summary>
		<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
		<returns>
			<para> The namespace URI to which the prefix maps or <see langword="null"/> if no
   matching prefix is found.
   </para>
		</returns>
		<exception cref="ArgumentNullException">The <see cref="System.Xml.XmlTextReader.Namespaces"/> property is set to <see langword="true"/> and the <paramref name="prefix"/> value is <see langword="null"/>.</exception>
		<remarks>
			<code>
&lt;root xmlns:a="urn:456"&gt;
 &lt;item&gt;
 &lt;ref href="a:b"/&gt;
 &lt;/item&gt;
&lt;/root&gt;
   </code>
			<para> In the preceding XML, if the reader is positioned on the
   <see langword="href"/> attribute, the prefix <c>a</c> is resolved by calling <c>reader.LookupNamesapce("a")</c>. The returned string
   is <c>urn:456</c>
.</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.ResolveEntity">
		<summary>
			<para> Resolves the entity reference for EntityReference nodes.</para>
		</summary>
		<exception cref="InvalidOperationException">Calling this method.</exception>
		<remarks>
			<para><see langword=""/>
			</para>
			<see langword="XmlTextReader"/> cannot resolve general entities. 
Calling this method throws an <see cref="System.InvalidOperationException"/>

.
</remarks>
	</doc>
	<doc for="XmlTextReader.XmlTextReader2">
		<overload>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> .</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified stream.</para>
		</summary>
		<param name="input">The stream containing the XML data to read.</param>
		<exception cref="ArgumentNullException"><paramref name="input"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see langword="XmlTextReader"/> decodes the stream using <see cref="System.Text.Encoding" qualify="true"/> .</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.XmlTextReader3">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/>
   class with the specified URL and stream.</para>
		</summary>
		<param name="url">The URL to use for resolving external resources. The <see cref="System.Xml.XmlTextReader.BaseURI"/> is set to this value.</param>
		<param name=" input">The stream containing the XML data to read.</param>
		<exception cref="ArgumentNullException"><paramref name="input"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlTextReader.XmlTextReader4">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified stream and <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<param name="input">The stream containing the XML data to read.</param>
		<param name="nt">The <see langword="XmlNameTable"/> to use.</param>
		<exception cref="NullReferenceException">The <paramref name="input"/> or <paramref name="nt"/> value is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see langword="XmlTextReader"/>
decodes the stream using <see cref="System.Text.Encoding" qualify="true"/>
.</para>
			<para> If you specify a name table, this constructor uses the names defined
   already in that table.</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.XmlTextReader5">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified URL, stream and <see cref="System.Xml.XmlNameTable"/>
   .</para>
		</summary>
		<param name=" url">The URL to use for resolving external resources. The <see cref="System.Xml.XmlTextReader.BaseURI"/> is set to this value. If <paramref name="url"/> is <see langword="null"/>, <see langword="BaseURI"/> is set to String.Empty.</param>
		<param name="input">The stream containing the XML data to read.</param>
		<param name=" nt">The <see langword="XmlNameTable"/> to use.</param>
		<exception cref="NullReferenceException">The <paramref name="input"/> or <paramref name="nt"/> value is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlTextReader.XmlTextReader13">
		<summary>
			<para> Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified file and <see cref="System.Xml.XmlNameTable"/> .
      </para>
		</summary>
		<param name="url">The URL for the file containing the XML data to read. </param>
		<param name="nt">The <see langword="XmlNameTable"/> to use. </param>
		<exception cref="NullReferenceException">The <paramref name="nt"/> value is <see langword="null"/>.</exception>
		<exception cref="XmlException"><paramref name="url"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlTextReader.GetAttribute1">
		<summary>
			<para>Gets the value of the attribute with the specified name.</para>
		</summary>
		<param name="name">The qualified name of the attribute.</param>
		<returns>
			<para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null"/>
      is returned.</para>
		</returns>
		<remarks>
			<para>This method does not move the reader.</para>
			<para>If the reader is positioned on a <see langword="DocumentType"/> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <c>reader.GetAttribute("PUBLIC") </c></para>
		</remarks>
		<example>
			<para>The following example gets the value of the ISBN attribute.
      
   </para>
			<codelink SampleID="Classic WebData XmlTextReader.GetAttribute1 Example" SnippetID="1"/>





The example uses the file, <see langword="attrs.xml"/>, as input.
 
<codelink SampleID="Classic WebData XmlTextReader.GetAttribute1 Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.GetAttribute2">
		<summary>
			<para>Gets the value of the attribute with the specified local name and namespace URI.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name=" namespaceURI">The namespace URI of the attribute.</param>
		<returns>
			<para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null"/>
      is returned. This method does not move the reader.</para>
		</returns>
		<remarks>
			<para>The following XML contains an attribute in a specific namespace:</para>
			<para><c>&lt;test xmlns:dt="urn:datatypes" dt:type="int"/&gt;</c>
			</para>
			<para>You can lookup the <see langword="dt:type"/> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</para>
			<para><c>String dt = reader.GetAttribute("dt:type");</c>
			</para>
			<para><c>String dt2 = reader.GetAttribute("type","urn:datatypes");</c>
			</para>
			<para>To lookup the <see langword="xmlns:dt"/> attribute, use one of the following arguments:</para>
			<para><c>String dt3 = reader.GetAttribute("xmlns:dt");</c>
			</para>
			<para><c>String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);</c>
			</para>
			<para>You can also get this information using the <see cref="System.Xml.XmlTextReader.Prefix"/> property.</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.this1">
		<summary>
			<para>Gets the value of the attribute with the specified name.</para>
		</summary>
		<param name="name">The qualified name of the attribute.</param>
		<value>
			<para>The value of the specified attribute. If the attribute is 
      not found, <see langword="null"/>
      is returned.</para>
		</value>
		<remarks>
			<para>This property does not move the reader.</para>
			<para>If the reader is positioned on a DocumentType node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <c>reader["PUBLIC"] </c></para>
		</remarks>
		<example>
			<para>The following example gets the value of the ISBN attribute. </para>
			<codelink SampleID="Classic WebData XmlTextReader.this1 Example" SnippetID="1"/>




The example uses the file, <see langword="attrs.xml"/>, as input.
<codelink SampleID="Classic WebData XmlTextReader.this1 Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlTextReader.GetAttribute"/>
	</doc>
	<doc for="XmlTextReader.this2">
		<summary>
			<para>Gets the value of the attribute with the specified local name and namespace URI.</para>
		</summary>
		<param name="name">The local name of the attribute.</param>
		<param name=" namespaceURI">The namespace URI of the attribute.</param>
		<value>
			<para>The value of the specified attribute. If the attribute 
      is not found, <see langword="null"/>
      is returned.</para>
		</value>
		<remarks>
			<para>This property does not move the reader.</para>
		</remarks>
		<seealso cref="System.Xml.XmlTextReader.GetAttribute"/>
	</doc>
	<doc for="XmlTextReader.Normalization">
		<summary>
			<para>Gets or sets a value indicating whether to normalize white
      space and attribute values.</para>
		</summary>
		<value>
			<para><see langword="true"/> to normalize; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<exception cref="InvalidOperationException">Setting this property when the reader is closed (<see cref="System.Xml.XmlTextReader.ReadState"/> is ReadState.Closed).</exception>
		<remarks>
			<para> This property can be changed at any time and takes effect on the next read operation.</para>
			<note type="note">
      If the
   <see langword="XmlTextReader"/> is used to construct an <see cref="System.Xml.XmlValidatingReader"/>, to normalize attribute
      values, <see langword="Normalization "/> must be set to
   <see langword="true"/>.
      
   </note>
			<para>If <see langword="Normalization"/> is set to
<see langword="false"/>, this also disables character range checking for numeric 
   entities. As a result, character entities, such as <c>&amp;#0;</c>, are allowed.</para>
			<para>The following describes attribute value normalization:</para>
			<list type="bullet"><item>
					<term>
      
      For a character reference, append the referenced
      character to the attribute value.</term>
				</item>
				<item>
					<term>
      
      For an entity reference, recursively process the
      replacement text of the entity.</term>
				</item>
				<item>
					<term>
      
      For a white space character (#x20, #xD, #xA, #x9),
      append #x20 to the normalized value. (Only a single #x20 is appended for a
      "#xD#xA" sequence that is part of an external parsed entity or the literal
      entity value of an internal parsed entity.)</term>
				</item>
				<item>
					<term>
      
      Process other characters by appending them to the
      normalized value.</term>
				</item>
				<item>
					<term>
      
      If the declared value is not CDATA, discard any leading and trailing space
      (#x20) characters and replace sequences of space (#x20) characters with a
      single space (#x20) character.</term>
				</item>
			</list>
			<para>Refer to the W3C XML 1.0 recommendation for further discussion on normalization. </para>
		</remarks>
		<example>
			<para>The following example shows reader behavior with normalization turned on
      and then off.</para>
			<codelink SampleID="XmlTextReader.Normalization" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextReader.WhitespaceHandling">
		<summary>
			<para>Gets or sets a value that specifies how white
      space is handled.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Xml.WhitespaceHandling"/> values. The default is
<see langword="WhitespaceHandling.All"/> (returns <see langword="Whitespace"/> and 
<see langword="SignificantWhitespace"/> 
nodes).</para>
		</value>
		<exception cref="ArgumentOutOfRangeException">Invalid value specified.</exception>
		<exception cref="InvalidOperationException">Setting this property when the reader is closed (<see cref="System.Xml.XmlTextReader.ReadState"/> is ReadState.Closed).</exception>
		<remarks>
			<para> This property can be changed at any time and takes
      effect on the next read
      operation.</para>
			<para>Because the <see langword="XmlTextReader"/> does not have DTD information
   available to it, <see langword="SignificantWhitepsace"/> nodes are only returned
   within the an <c>xml:space='preserve'</c> scope.</para>
		</remarks>
		<example>
			<para>The following example reads an XML fragment. </para>
			<codelink SampleID="Classic WebData XmlTextReader.WhitespaceHandling Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextReader.XmlTextReader9">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified URL, <see cref="System.IO.TextReader"/> and
   <see cref="System.Xml.XmlNameTable"/>
   .</para>
		</summary>
		<param name="url">The URL to use for resolving external resources. The <see cref="System.Xml.XmlTextReader.BaseURI"/> is set to this value. If <paramref name="url"/> is <see langword="null"/>, <see langword="BaseURI"/> is set to String.Empty.</param>
		<param name=" input">The <see langword="TextReader"/> containing the XML data to read.</param>
		<param name=" nt">The <see langword="XmlNameTable"/> to use.</param>
		<exception cref="NullReferenceException">The <paramref name="nt"/> value is <see langword="null"/>.</exception>
		<remarks>
			<para>It is assumed that the
   <see langword="TextReader"/> is already set to the correct encoding. This is used
      by clients that have already read some things from the stream in a multi-part
      MIME scenario.</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.XmlTextReader10">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified stream,
   <see cref="System.Xml.XmlNodeType"/>,
      and <see cref="System.Xml.XmlParserContext"/>
      .</para>
		</summary>
		<param name="xmlFragment">The stream containing the XML fragment to parse.</param>
		<param name=" fragType">The <see cref="System.Xml.XmlNodeType"/> of the XML fragment. This also determines what the fragment can contain. (See table below.)</param>
		<param name=" context"><para>The <see cref="System.Xml.XmlParserContext"/> in which the <paramref name="xmlFragment"/> is to be parsed. This includes the <see cref="System.Xml.XmlNameTable"/> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</para></param>
		<exception cref="XmlException"><paramref name="fragType"/> is not an Element, Attribute, or Document XmlNodeType.</exception>
		<exception cref="ArgumentNullException"><paramref name="xmlFragment"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>This constructor parses the given string as a fragment
      of XML. If the XML fragment is an element or attribute, you can bypass the root
      level rules for well-formed XML documents.</para>
			<para>The following table lists valid values for <paramref name="fragType"/>
.</para>
			<list type="table">
				<listheader>
					<term>XmlNodeType</term>
					<description>Fragment May Contain</description>
				</listheader>
				<item>
					<term> Element</term>
					<description>Any
         valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</description>
				</item>
				<item>
					<term> Attribute</term>
					<description>The value of an attribute (the part inside the quotes).</description>
				</item>
				<item>
					<term> Document</term>
					<description>The
         contents of an entire XML document. This will enforce document level rules.</description>
				</item>
			</list>
			<para> The reader uses the following to determine the encoding of the
   stream.</para>
			<list type="number"><item>
					<term>
      
      Checks the <see cref="System.Xml.XmlParserContext.Encoding" qualify="true"/> property to determine the
      encoding.</term>
				</item>
				<item>
					<term>
      
      If the <see langword="Encoding"/> property is <see langword="null"/>, the reader checks for a
      byte-order mark at the beginning of the stream.</term>
				</item>
				<item>
					<term>
      
      If the <see langword="Encoding"/> property is <see langword="null"/>, and no
      byte-order mark is found, the reader assumes the stream is encoded in
      UTF-8.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="XmlTextReader.ReadString">
		<summary>
			<para>Reads the contents of an element or a text node as a string.</para>
		</summary>
		<returns>
			<para>The contents of the element or text node. This can be an empty string if
      the reader is positioned on something other than an element or text node, or
      if there is no more text content to return in the current context.</para>
			<para><see langword="Note:"/> The text node can be either an element or
   an attribute text node.</para>
		</returns>
		<exception cref="XmlException">An error occurred while parsing the XML.</exception>
		<exception cref="InvalidOperationException">An invalid operation was attempted.</exception>
		<remarks>
			<para>If positioned on an element, <see langword="ReadString"/> concatenates all
   text, significant white space, white space, and CData section node
   types together and returns the concatenated data as the element content. It
   stops when any markup is encountered. This could occur in a mixed content
   model, or when an element end tag is read.</para>
			<para>If positioned on a text node, <see langword="ReadString"/> performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node,
<see langword="ReadString"/> has the same functionality as if the reader were position on the element 
start tag. It returns all the concatenated element text nodes. </para>
		</remarks>
		<example>
			<para> The following example displays the text content of each
      element.</para>
			<codelink SampleID="Classic WebData XmlReader.IsStartElement Example" SnippetID="1"/>








The example uses the file, <see langword="elems.xml"/>,
 as input.
<codelink SampleID="Classic WebData XmlReader.IsStartElement Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.IsEmptyElement">
		<summary>
			<para>Gets a value indicating whether the current node is an
      empty element (for example, <c>&lt;MyElement/&gt;</c>
   ).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   current node is an element (<see cref="System.Xml.XmlTextReader.NodeType"/>
   equals <see langword="XmlNodeType.Element"/>) that ends with <c>/&gt;</c>
; otherwise,<see langword=" false"/>.</para>
		</value>
		<remarks>
			<para>This property enables you to determine the
      difference between the following:</para>
			<para><c>&lt;item num="123"/&gt; </c> (<see langword="IsEmptyElement"/> is <see langword="true"/>).</para>
			<para><c>&lt;item num="123"&gt; </c> (<see langword="IsEmptyElement"/> is
<see langword="false"/>).</para>
			<para>A corresponding <see langword="EndElement"/> node is not generated for empty
elements.</para>
		</remarks>
		<example>
			<para> The following example displays the text content of each
      element.</para>
			<codelink SampleID="Classic WebData XmlReader.IsStartElement Example" SnippetID="1"/>



The example uses the file, <see langword="elems.xml"/>,
 as input.
<codelink SampleID="Classic WebData XmlReader.IsStartElement Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.XmlTextReader6">
		<summary>
			<para> Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified <see cref="System.IO.TextReader"/> .
      </para>
		</summary>
		<param name="input">The <see langword="TextReader"/> containing the XML data to read. </param>
		<remarks>
			<para>It is assumed that the <see langword="TextReader"/> is
   already set to the correct encoding. This is used by clients that have already read
   some things from the stream in a multi-part MIME scenario.</para>
		</remarks>
		<example>
   The following example loads an XML string into the
<see langword="XmlTextReader"/> object using the <see cref="System.IO.StringReader"/> 
class.
<codelink SampleID="XmlTextReader.cctor1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextReader.ReadChars">
		<summary>
			<para>Reads the text contents of an element into a character
      buffer. This method is designed to read large streams of embedded text by
      calling it successively.</para>
		</summary>
		<param name="buffer">The array of characters that serves as the buffer to which the text contents are written.</param>
		<param name=" index">The position within <paramref name="buffer"/> where the method can begin writing text contents.</param>
		<param name=" count">The number of characters to write into <paramref name="buffer"/>.</param>
		<returns>
			<para>The number of characters read. This can be 0 if the reader is not positioned on an element or if there
      is no more text content to return in the current context.</para>
		</returns>
		<exception cref="ArgumentException"><paramref name="count "/>is greater than the space specified in the <paramref name="buffer"/> (buffer size - <paramref name="index"/> ).</exception>
		<exception cref="ArgumentNullException">The <paramref name="buffer"/> value is <see langword="null"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> &lt; 0 or <paramref name="count"/> &lt; 0.</exception>
		<remarks>
			<para>This is the most efficient way to process very large
      streams of text embedded in an XML document. Rather than allocating large string
      objects, <see langword="ReadChars"/>
      returns text content a buffer at a time.
      This method is designed to work only on element nodes. Other node types cause
   <see langword="ReadChars "/>
   to return 0.</para>
			<para>In the following XML, if the reader is positioned on the start tag,<see langword="ReadChars "/>returns
<see langword="test"/> and positions the reader
after the end tag.</para>
			<para><c>&lt;Item&gt;test&lt;/Item&gt;</c></para>
			<para><see langword="ReadChars"/> has the following functionality:</para>
			<list type="bullet"><item>
					<term>
      This method is designed to work on element nodes only. Other
      node types cause <see langword="ReadChars "/>to
      return 0.</term>
				</item>
				<item>
					<term>
      This method returns the actual character content. There is no
      attempt to resolve entities, CDATA, or any other markup encountered.
   <see langword="ReadChars"/> returns everything 
      between the start tag and the end tag, including markup.</term>
				</item>
				<item>
					<term>
						<see langword="ReadChars"/> ignores XML markup that is not well-formed. For
      example, when reading the following XML string <c>&lt;A&gt;1&lt;A&gt;2&lt;/A&gt;</c>,
<see langword="ReadChars"/> returns <c>1&lt;A&gt;2&lt;/A&gt;</c>. (It 
returns markup from the matching elment pair and ignores others.)</term>
				</item>
				<item>
					<term>
      This method does not do any normalization.</term>
				</item>
				<item>
					<term>
      When <see langword="ReadChars"/>
      has reached the end of the character stream, it returns the value 0 and the
      reader is positioned after the end tag.</term>
				</item>
				<item>
					<term>
      Attribute read methods are not available while using
   <see langword="ReadChars"/>.</term>
				</item>
			</list>
			<para>For example, using the following XML: </para>
			<code>
&lt;thing&gt;
 some text
&lt;/thing&gt;
&lt;item&gt;
&lt;/item&gt;
</code>
			<para> The reader is positioned on the <c>&lt;item&gt;</c>
element at the end
of the while loop.</para>
			<code>
if (XmlNodeType.Element == reader.NodeType &amp;&amp; "thing" == reader.Name)
{
 while( 0 != reader.ReadChars(buffer, 0, 1)
 {
 // Do something.
 // Attribute values are not available at this point. 
 }
}
</code>
		</remarks>
		<example>
			<para> The following example reads in XML using
   <see langword="ReadChars"/> .</para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadChars Example" SnippetID="1"/>
			<para>The example uses the <see langword="items.xml"/> file as input.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlTextReader.ReadBase64"/>
		<seealso cref="System.Xml.XmlTextReader.ReadBinHex"/>
	</doc>
	<doc for="XmlTextReader.ReadBase64">
		<summary>
			<para>Decodes Base64 and returns the decoded binary bytes.</para>
		</summary>
		<param name="array">The array of characters that serves as the buffer to which the text contents are written.</param>
		<param name="offset"><para>The zero-based index into the array specifying where the method can begin to write to the buffer.</para></param>
		<param name="len">The number of bytes to write into the buffer.</param>
		<returns>
			<para>The number of bytes written to the buffer.</para>
		</returns>
		<exception cref="XmlException">The Base64 sequence is not valid.</exception>
		<exception cref="ArgumentNullException">The value of <paramref name="array"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="offset"/> &lt; 0, or <paramref name="len"/> &lt; 0, or <paramref name="len"/> &gt; <paramref name="array"/>.Length- <paramref name="offset"/>.</exception>
		<remarks>
			<para>Like <see cref="System.Xml.XmlTextReader.ReadChars"/> , this method can be called successively to read large streams of embedded text. It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. See RFC 1521. (You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org)</para>
		</remarks>
		<example>
			<para>The following example reads a file containing Base64 and BinHex data.
      
   </para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadBase64 Example" SnippetID="1"/>
			<para>The sample uses the file <see langword="binary.xml"/></para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadBase64 Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlTextWriter.WriteBase64"/>
	</doc>
	<doc for="XmlTextReader.ReadBinHex">
		<summary>
			<para>Decodes BinHex and returns the decoded binary
      bytes.</para>
		</summary>
		<param name="array">The byte array that serves as the buffer to which the decoded binary bytes are written.</param>
		<param name=" offset">The zero-based index into the array specifying where the method can begin to write to the buffer.</param>
		<param name=" len">The number of bytes to write into the buffer.</param>
		<returns>
			<para>The number of bytes written to your buffer.</para>
		</returns>
		<exception cref="XmlException">The BinHex sequence is not valid.</exception>
		<exception cref="ArgumentNullException">The value of <paramref name="array"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="offset"/> &lt; 0, or <paramref name="len"/> &lt; 0, or <paramref name="len"/> &gt; <paramref name="array"/>.Length- <paramref name="offset"/>.</exception>
		<remarks>
			<para>Like <see cref="System.Xml.XmlTextReader.ReadChars"/>, this method can be called successively to read
   large streams of embedded text. It decodes BinHex content and returns
   the decoded binary bytes (for example, an inline BinHex encoded GIF image)
   into the buffer.</para>
		</remarks>
		<example>
			<para>The following example reads a file containing Base64 and BinHex data. </para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadBase64 Example" SnippetID="1"/>
			<para>The sample uses the file <see langword="binary.xml"/></para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadBase64 Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.ReadOuterXml">
		<summary>
			<para>Reads the content, including markup, representing this node and all its children.</para>
		</summary>
		<returns>
			<para>If the reader is positioned on an element or an attribute node, this method
      returns all the XML content, including markup, of the current node and all its
      children; otherwise, it returns an empty string.</para>
		</returns>
		<exception cref="XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
		<remarks>
			<para>This method is similar to <see cref="System.Xml.XmlTextReader.ReadInnerXml"/> except it also returns the start and end tags.</para>
			<para>This method handles element and attribute nodes in the following manner:</para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Position Before the Call</description>
					<description>XML Fragment</description>
					<description>Return Value</description>
					<description>Position After the Call</description>
				</listheader>
				<item>
					<term><see langword="Element"/></term>
					<description>On the <see langword="item1"/> start
   tag.</description>
					<description>&lt;item1&gt;text1&lt;/item1&gt;&lt;item2&gt;text2&lt;/item2&gt; </description>
					<description>&lt;item1&gt;text1&lt;/item1&gt;</description>
					<description>On the <see langword="item2 "/>start
tag.</description>
				</item>
				<item>
					<term><see langword="Attribute"/></term>
					<description>On the <see langword="attr1"/> attribute node.</description>
					<description>&lt;item attr1="val1" attr2="val2"&gt;text&lt;/item&gt; </description>
					<description>attr1="val1"</description>
					<description>Remains on the <see langword="attr1"/> attribute
node.</description>
				</item>
			</list>
			<para>If the reader is positioned on a leaf node, calling <see langword="ReadOuterXml"/> is equivalent to calling <see cref="System.Xml.XmlTextReader.Read"/> .</para>
			<para>This method also checks for well-formed XML.</para>
		</remarks>
		<example>
			<para>The following example compares the
   <see langword="ReadInnerXml"/> and <see langword="ReadOuterXml"/>
   methods.</para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadInnerXml Example" SnippetID="1"/>



The example uses the input file <see langword="2books.xml"/>:
<codelink SampleID="Classic WebData XmlTextReader.ReadInnerXml Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.ReadInnerXml">
		<summary>
			<para>Reads all the content, including markup, as a string.</para>
		</summary>
		<returns>
			<para> All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
			<para>If the current node is neither an element nor attribute, an empty
      string is returned.</para>
		</returns>
		<exception cref="XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
		<remarks>
			<para>This method returns all the content of the current node including the markup. The current node (start tag) and corresponding end node (end tag) are not returned. For example, if you had the following: </para>
			<code>
&lt;node&gt;
 this &lt;child id="123"/&gt;
&lt;/node&gt;
   </code>
			<para><see langword="ReadInnerXml"/> returns <c>this &lt;child id="123"/&gt;</c></para>
			<para>This method handles element and attribute nodes in the following manner:</para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Position Before the Call</description>
					<description>XML Fragment</description>
					<description>Return Value</description>
					<description>Position After the Call</description>
				</listheader>
				<item>
					<term><see langword="Element"/></term>
					<description>On the <see langword="item1"/> start
   tag.</description>
					<description>&lt;item1&gt;text1&lt;/item1&gt;&lt;item2&gt;text2&lt;/item2&gt; </description>
					<description>text1</description>
					<description>On the <see langword="item2 "/>start
tag.</description>
				</item>
				<item>
					<term><see langword="Attribute"/></term>
					<description>On the <see langword="attr1"/> attribute node.</description>
					<description>&lt;item attr1="val1" attr2="val2"&gt;text&lt;/item&gt; </description>
					<description>val1</description>
					<description>Remains on the <see langword="attr1"/> attribute
node.</description>
				</item>
			</list>
			<para>If the reader is positioned on a leaf node, calling <see langword="ReadInnerXml"/> is equivalent to calling <see cref="System.Xml.XmlTextReader.Read"/> . </para>
			<para>This method also checks for well-formed XML.</para>
		</remarks>
		<example>
			<para>The following example compares the
   <see langword="ReadInnerXml"/> and <see cref="System.Xml.XmlTextReader.ReadOuterXml"/>
   methods.</para>
			<codelink SampleID="Classic WebData XmlTextReader.ReadInnerXml Example" SnippetID="1"/>





The example uses the input file <see langword="2books.xml"/>:
<codelink SampleID="Classic WebData XmlTextReader.ReadInnerXml Example" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlTextReader.IsPositionedOnAttributeValue">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="XmlTextReader.XmlTextReader11">
		<summary>
			<para>Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified string,
   <see cref="System.Xml.XmlNodeType"/>,
      and <see cref="System.Xml.XmlParserContext"/>
      .</para>
		</summary>
		<param name="xmlFragment">The string containing the XML fragment to parse.</param>
		<param name=" fragType">The <see cref="System.Xml.XmlNodeType"/> of the XML fragment. This also determines what the fragment string can contain. (See table below.)</param>
		<param name=" context"><para>The <see cref="System.Xml.XmlParserContext"/> in which the <paramref name="xmlFragment"/> is to be parsed. This includes the <see cref="System.Xml.XmlNameTable"/> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</para></param>
		<exception cref="XmlException"><paramref name="fragType"/> is not an Element, Attribute, or Document XmlNodeType.</exception>
		<exception cref="ArgumentNullException"><paramref name="xmlFragment"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>This constructor parses the given string as a fragment of 
      XML. If the XML fragment is an element or attribute, you can bypass the root
      level rules for well-formed XML documents. This constructor can handle strings
      returned from <see cref="System.Xml.XmlReader.ReadInnerXml"/>
      .</para>
			<para>The following table lists valid values for <paramref name="fragType"/> and how the reader will parse each of the
   different node types.</para>
			<list type="table">
				<listheader>
					<term>XmlNodeType</term>
					<description>Fragment May Contain</description>
				</listheader>
				<item>
					<term> Element</term>
					<description>Any
         valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</description>
				</item>
				<item>
					<term> Attribute</term>
					<description>The value of an attribute (the part inside the quotes).</description>
				</item>
				<item>
					<term> Document</term>
					<description>The
         contents of an entire XML document. This will enforce document level rules.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example parses an XML fragment. It uses the
   <see langword="XmlParserContext"/> and its <see cref="System.Xml.XmlNamespaceManager"/>
   to handle namespace resolution.</para>
			<codelink SampleID="XmlTextReader.Cctor" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlParserContext"/>
	</doc>
	<doc for="XmlTextReader">
		<summary>
			<para> Represents a reader that provides
      fast, non-cached, forward-only
      access to XML data.</para>
		</summary>
		<remarks>
			<para><see langword="XmlTextReader"/> provides forward-only,
   read-only access to a stream of XML data. The current node refers to the
   node on which the reader is positioned. The reader is advanced using any
   of the read methods and properties reflect the value of the current node.</para>
			<para> This class implements <see cref="System.Xml.XmlReader"/> and conforms to the W3C Extensible Markup Language
(XML) 1.0 and the Namespaces in XML recommendations.
<see langword="XmlTextReader"/> provides 
the following functionality: </para>
			<list type="bullet"><item>
					<term>
      
      Enforces the rules of well-formed XML.</term>
				</item>
				<item>
					<term>
						<see langword="XmlTextReader"/> 
   does not provide data validation.</term>
				</item>
				<item>
					<term>
      
      Checks that <see langword="DocumentType"/>
      
      nodes are well-formed.
   <see langword="XmlTextReader"/> checks the DTD for 
      well-formedness, but does not validate using the DTD.</term>
				</item>
				<item>
					<term>
      
      For
      nodes whose <see cref="System.Xml.XmlTextReader.NodeType"/> is
   <see langword="XmlNodeType.EntityReference"/>, a single empty
   <see langword="EntityReference"/>
   node is returned (that is, the <see cref="System.Xml.XmlTextReader.Value"/> property
   is String.Empty). <SpecialLocalizableItem kind="UIElement">Note:</SpecialLocalizableItem> The actual declarations of entities in the
DTD are called <see langword="Entity"/> nodes. When you refer to these nodes in
your data, they are called <see langword="EntityReference"/> nodes.</term>
				</item>
				<item>
					<term>
      
      Does not expand default attributes.</term>
				</item>
			</list>
			<para>Because the <see langword="XmlTextReader"/> does not perform the extra checks
required for data validation, it provides a fast well-formedness parser.</para>
			<para>To perform data validation, use <see cref="System.Xml.XmlValidatingReader"/>.</para>
			<para>To read XML data from an <see cref="System.Xml.XmlDocument"/>, use <see cref="System.Xml.XmlNodeReader"/>.</para>
			<para>To read strongly typed data, use the <see cref="System.Xml.XmlConvert"/> class. For example, the
following C# code reads in data and converts it from a <see langword="String"/>
to a <see langword="Double"/>.</para>
			<code>
Double price = XmlConvert.ToDouble(reader.Value);
</code>
			<para><see langword="XmlTextReader"/> throws an <see cref="System.Xml.XmlException"/> on
XML parse errors. After an exception is thrown the state of the reader is
not predictable. For example, the reported node type may be
different than the actual node type of the current node.</para>
			<note type="inheritinfo">
   This class has an
   inheritance demand. Full trust is required to inherit from
<see langword="XmlTextReader"/>. See <see topic="cpconinheritancedemands"/> for 
   more information.
</note>
			<para>For further discussion on the
<see langword="XmlReader"/> classes, see <see topic="cpconReadingXMLWithXmlReader"/>.</para>
		</remarks>
	</doc>
	<doc for="XmlTextReader.XmlTextReader12">
		<summary>
			<para> Initializes a new instance of the
   <see langword="XmlTextReader"/> class with the specified file.
      </para>
		</summary>
		<param name="url">The URL for the file containing the XML data. The <see cref="System.Xml.XmlTextReader.BaseURI"/> is set to this value. </param>
		<exception cref="XmlException"><paramref name="url"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>If the file is located on a resource that
      requires access credentials, use the <see cref="System.Xml.XmlTextReader.XmlResolver"/> property to specify the necessary credentials.</para>
			<note type="note">
      In version 1.1 of the .NET
      Framework, partially trusted code cannot set the <see langword="XmlResolver"/>
      property. The workaround is to create an <see cref="System.Xml.XmlUrlResolver"/> with
      the necessary credentials, pass the URI to the <see cref="System.Xml.XmlUrlResolver.GetEntity" qualify="true"/> method, and then construct the
   <see langword="XmlTextReader"/> using the resulting <see cref="System.IO.Stream"/> object. The workaround is described in the following
      C# code.
      
   </note>
			<code>
// Create a resolver with the necessary credentials.
XmlUrlResolver resolver = new XmlUrlResolver();
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);
resolver.Credentials = nc; 
       
// Get a Stream object containing the XML file.
Uri myUri = new Uri ("http://myServer/data/books.xml");
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));
 
// Construct a reader using the Stream object.
XmlTextReader reader = new XmlTextReader(s);
   </code>
		</remarks>
		<example>
			<para>The following example reads an XML file and displays
      each of the nodes.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="1"/>
			<para> 

 
The example uses the file, <see langword="items.xml"/>, as input.</para>
			<codelink SampleID="Classic WebData XmlTextReader.Name Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlTextReader.XmlResolver"/>
	</doc>
	<doc for="XmlTextReader.XmlResolver">
		<summary>
			<para> Sets the <see cref="System.Xml.XmlResolver"/> used for resolving DTD
   references.</para>
		</summary>
		<value>
			<para>The <see langword="XmlResolver"/> to
   use. If set to <see langword="null"/> , external resources are not
   resolved.</para>
			<para>In version 1.1 of the .NET Framework, the caller must
   be fully-trusted in order to specify an <see langword="XmlResolver"/>
   .</para>
		</value>
		<remarks>
			<para> The reader uses <see langword="XmlResolver"/> to resolve the location of the file
   loaded into the reader and also to
   resolve DTD references. For example, if your XML included the DOCTYPE
   declaration, <c>&lt;!DOCTYPE book SYSTEM book.dtd&gt;</c> the reader resolves
this external file and ensures that the DTD is
well-formed. The reader does not use
the DTD for validation.</para>
			<para>This property can be changed at any time and takes
   effect on the next read operation. If this property is set to <see langword="null"/> , any external DTD references encountered by
   the reader are not resolved.</para>
			<para>In version 1.1 of the .NET Framework, if this property is
   not set, the trust level of the application determines the default behavior.</para>
			<para><see langword="Fully-trusted code:"/> The reader uses a
default <see cref="System.Xml.XmlUrlResolver"/> with no user
credentials. If authentication is required to access a network resource,
use the <see langword="XmlResolver"/> property to specify an
<see langword="XmlResolver"/> with the necessary 
credentials.</para>
			<para><see langword="Semi-trusted code:"/> The
<see langword="XmlResolver"/> property is set to <see langword="null"/>. External 
resources are not resolved.</para>
		</remarks>
		<example>
			<para>The following example uses the
   <see langword="XmlResolver"/> property to specify the credentials necessary to access the networked file.</para>
			<codelink SampleID="XmlTextReader.XmlResolver" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlUrlResolver.Credentials" qualify="true"/>
		<seealso cref="System.Net.CredentialCache"/>
		<seealso cref="System.Net.NetworkCredential"/>
		<seealso cref="System.Xml.XmlSecureResolver"/>
	</doc>
</docs>
