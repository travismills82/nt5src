<docs>
	<doc for="XmlTextWriter.DataTypeNamespace">
		<summary>
			<para>Gets or sets the DataTypes namespace which determines how
       the strongly typed values are converted to XML text.</para>
		</summary>
		<value>
			<para>Supported
       namespaces are:</para>
			<list type="table">
				<listheader>
					<term>Namespace</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> urn:schemas-microsoft-com:datatypes</term>
					<description>Microsoft XML-Data Schema (XDR) datatypes namespace.</description>
				</item>
				<item>
					<term> http://www.w3.org/2000/10/XMLSchema</term>
					<description>The W3C Schema (XSD) datatypes namespace (http://www.w3.org/TR/xmlschema-2/).</description>
				</item>
			</list>
			<para>For example, if the namespace is urn:schemas-microsoft-com:datatypes
    then boolean values are written out as "0" or "1". This guarentees
    that other implementations of this datatype namespace (in MSXML
    and SQL Server, for example) can read the XML produced by this
    writer.</para>
		</value>
		<remarks>
			<para>XDR is the default namespace.</para>
		</remarks>
		<example>
			<para>The following example sets 
    <see langword="DataTypeNamespace"/> to XSD and 
       then uses the <see cref="System.Xml.XmlWriter.WriteElementTimeSpan"/> method.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.DataTypeNamespace Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteChar">
		<summary>
			<para>Writes out the specified single character value.</para>
		</summary>
		<param name="value">Character to write.</param>
		<example>
			<para>The following example writes out a sample XML fragment. </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteChar Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteBoolean">
		<summary>
			<para>Writes out the specified boolean value.</para>
		</summary>
		<param name="value">boolean to write.</param>
		<example>
			<para>The following example writes out elements with various data types.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteBoolean Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteDate">
		<summary>
			<para>Writes out the specified Date value.</para>
		</summary>
		<param name="value">DateTime to write.</param>
		<example>
			<para>The following example writes out elements with various data types.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteBoolean Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteDateTime">
		<summary>
			<para>Writes out the specified DateTime value.</para>
		</summary>
		<param name="value">DateTime to write.</param>
		<example>
			<para>The following example writes out elements with various data types.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteBoolean Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteTime">
		<summary>
			<para>Writes out the specified Time value.</para>
		</summary>
		<param name="value">DateTime to write.</param>
		<example>
			<para>The following example writes out elements with various data types.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteBoolean Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteTimeSpan">
		<summary>
			<para>Writes out the specified TimeSpan value.</para>
		</summary>
		<param name="value">TimeSpan to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<exception cref="NotSupportedException">DataTypeNamespace is not set to XSD.</exception>
		<remarks>
			<para>
				<see cref="System.Xml.XmlTextWriter.DataTypeNamespace"/> must be set to XSD (http://www.w3.org/2000/10/XMLSchema ) in order to use the <see langword="TimeSpan"/> data type.</para>
		</remarks>
		<example>
			<para>The following example writes out elements with various data types.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteTimeSpan Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlTextWriter.DataTypeNamespace"/>
	</doc>
	<doc for="XmlTextWriter.WriteDecimal">
		<summary>
			<para>Writes out the specified Decimal value.</para>
		</summary>
		<param name="value">Decimal to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example writes out a sample XML fragment.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteDecimal Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteDouble">
		<summary>
			<para>Writes out the specified Double value.</para>
		</summary>
		<param name="value">Double to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example writes out a sample XML fragment. </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteChar Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteSingle">
		<summary>
			<para>Writes out the specified single-precision floating point number.</para>
		</summary>
		<param name="value">Single-precision floating point number to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example writes out elements with various data types.
    </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteBoolean Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteInt16">
		<summary>
			<para>Writes out the specified Int16 value.</para>
		</summary>
		<param name="value">Int16 to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example writes out a sample XML fragment. </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteChar Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteInt32">
		<summary>
			<para>Writes out the specified Int32 value.</para>
		</summary>
		<param name="value">Int32 to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example writes out a sample XML fragment. </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteChar Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteInt64">
		<summary>
			<para>Writes out the specified Int64 value.</para>
		</summary>
		<param name="value">Int64 to write.</param>
		<exception cref="InvalidOperationException">This results in an invalid XML document.</exception>
		<example>
			<para>The following example writes out a sample XML fragment. </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteChar Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteState">
		<summary>
			<para>Gets the state of the writer.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Xml.WriteState"/> values.
   </para>
		</value>
	</doc>
	<doc for="XmlTextWriter.WriteEndElement">
		<summary>
			<para>Closes one element and pops the corresponding namespace scope.</para>
		</summary>
		<remarks>
			<para>If the element contains no content a short end tag "/&gt;" is written; otherwise a full end tag is written.</para>
		</remarks>
		<example>
			<para>The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteEndElement Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteEndAttribute">
		<summary>
			<para>Closes the previous <see cref="System.Xml.XmlTextWriter.WriteStartAttribute"/>
call.</para>
		</summary>
		<remarks>
			<para>If you call <see langword="WriteStartAttribute"/> , you can close the attribute with
   this method.</para>
			<para>You can also close the attribute by calling
<see langword="WriteStartAttribute"/> again, calling <see cref="System.Xml.XmlWriter.WriteAttributeString"/>, or calling <see cref="System.Xml.XmlTextWriter.WriteEndElement"/>
.</para>
		</remarks>
		<example>
			<para>The following example writes out a book.
      </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartElement Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.XmlLang">
		<summary>
			<para> Gets the current xml:lang scope.
      </para>
		</summary>
		<value>
			<para> The current xml:lang or <see langword="null"/> if there 
   is no xml:lang in the current scope.
   </para>
		</value>
		<remarks>
			<para> This property allows one component to find out what state another component has
      left the writer in. For example, perhaps one component wants to tell another which
      language help text to generate. The language information is communicated by writing an
      xml:lang attribute.
      </para>
		</remarks>
	</doc>
	<doc for="XmlTextWriter.WriteStartAttribute">
		<overload>
			<para>Writes the start of an attribute.</para>
		</overload>
		<summary>
			<para>Writes the start of an attribute.</para>
		</summary>
		<param name=" prefix">Namespace prefix of the attribute.</param>
		<param name="localName">LocalName of the attribute.</param>
		<param name=" ns">NamespaceURI of the attribute</param>
		<exception cref="ArgumentException">
			<paramref name="localName"/> is either <see langword="null"/> or String.Empty.</exception>
		<remarks>
			<para>This is a more advanced version of <see cref="System.Xml.XmlWriter.WriteAttributeString"/> that allows you to write an attribute value using
   multiple write methods, such as <see cref="System.Xml.XmlTextWriter.WriteString"/>.</para>
		</remarks>
		<example>
			<para>The following example writes out a book.
      </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartElement Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlTextWriter.WriteEndAttribute"/>
	</doc>
	<doc for="XmlTextWriter.WriteProcessingInstruction">
		<summary>
			<para>Writes out a processing instruction with a space between
      the name and text as follows: &lt;?name text?&gt;.</para>
		</summary>
		<param name="name">Name of the processing instruction.</param>
		<param name=" text">Text to include in the processing instruction.</param>
		<exception cref="ArgumentException">
			<para> The text would result in a non-well formed XML document.</para>
			<para>
				<paramref name="name"/> is either <see langword="null"/> or String.Empty.</para>
			<para>This method is being used to create an XML declaration after <see cref="System.Xml.XmlTextWriter.WriteStartDocument"/> has already been called. </para>
		</exception>
		<remarks>
   If <paramref name="text"/> is either
<see langword="null"/> or String.Empty, this method writes 
   a ProcessingInstruction with no data content, for example &lt;?name?&gt;.
</remarks>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.LookupPrefix">
		<summary>
			<para> Returns the closest prefix defined in the
      current namespace scope for the namespace URI.</para>
		</summary>
		<param name="ns">Namespace URI whose prefix you want to find.</param>
		<returns>
			<para>The matching prefix. Or <see langword="null"/> if no matching namespace URI is found in the current scope.</para>
		</returns>
		<exception cref="ArgumentException">
			<paramref name="ns "/>is either <see langword="null"/> or String.Empty.</exception>
		<example>
			<para>The following example writes out a book.
      </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartElement Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.XmlTextWriter2">
		<summary>
			<para> Creates an instance of the <see langword="XmlTextWriter"/>
class using the specified <see cref="System.IO.TextWriter"/>
.</para>
		</summary>
		<param name="w">The <see langword="TextWriter"/> to write to. It is assumed that the <see langword="TextWriter"/> is already set to the correct encoding. </param>
	</doc><doc for="XmlTextWriter.XmlSpace">
		<summary>
			<para> Gets an <see cref="System.Xml.XmlSpace"/> representing the current xml:space scope.
   </para>
		</summary>
		<value>
			<para> An <see langword="XmlSpace"/> representing the current xml:space scope.
   </para>
			<list type="table">
				<listheader>
					<term> Value</term>
					<description> Meaning</description>
				</listheader>
				<item>
					<term> None </term>
					<description> This is the default if no xml:space scope exists.</description>
				</item>
				<item>
					<term> Default </term>
					<description> The current scope is xml:space="default".</description>
				</item>
				<item>
					<term> Preserve </term>
					<description> The current scope is xml:space="preserve".</description>
				</item>
			</list>
		</value>
		<remarks>
			<para>This allows one component to find out in
      what state another component has left the writer.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="WriteWhitespace"/> method to control how the file is formatted. </para>
			<codelink SampleID="Classic WebData XmlTextWriter.XmlSpace Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextWriter.WriteFullEndElement">
		<summary>
			<para>Closes one element and pops the corresponding namespace scope.</para>
		</summary>
		<remarks>
			<para>This method always writes the full end tag.
      This is useful when dealing with elements that must include a full end tag. For
      example, browsers expect HTML script blocks to be closed with "&lt;/script&gt;".</para>
		</remarks>
		<example>
			<para>The following example writes out an element with no
      content. It uses WriteFullEndElement to write the full end element tag.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteFullEndElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextWriter.Flush">
		<summary>
			<para>Flushes whatever is in the buffer to the underlying streams and also flushes the
 underlying stream.</para>
		</summary>
		<remarks>
			<para>This is called instead of <see cref="System.Xml.XmlTextWriter.Close"/> when you want to write more to
 the underlying stream without losing what is still in the buffer.</para>
		</remarks>
		<example>
			<para> The following example writes out two XML fragments.</para>
			<codelink SampleID="XmlTextWriter.Flush" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextWriter.WriteNmToken">
		<summary>
			<para>Writes out the specified name, ensuring it is a valid NmToken according
 to the W3C XML 1.0 recommendation(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
		</summary>
		<param name="name">Name to write.</param>
		<exception cref="ArgumentException"><paramref name="name "/>is not a valid NmToken; or <paramref name="name"/> is either <see langword="null"/> or String.Empty.</exception>
	</doc><doc for="XmlTextWriter.WriteName">
		<summary>
			<para>Writes out the specified name, ensuring it is a valid 
 name according to the W3C XML 1.0 recommendation(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name
 ).</para>
		</summary>
		<param name="name">Name to write.</param>
		<exception cref="ArgumentException"><para>
				<paramref name="name "/>is not a valid XML name; or <paramref name="name"/> is either <see langword="null"/> or String.Empty.</para></exception>
		<remarks>
			<para>If <see cref="System.Xml.XmlTextWriter.Namespaces"/> is set to <see langword="true"/>,
<see langword="WriteName"/> also checks that the name is also valid according to 
 the W3C Namespaces in XML recommendation.</para>
		</remarks>
	</doc><doc for="XmlTextWriter.WriteQualifiedName">
		<summary>
			<para> Writes out the namespace-qualified name. This method looks up the prefix
 that is in scope for the given namespace.</para>
		</summary>
		<param name="localName">The local name to write.</param>
		<param name=" ns">The namespace URI to associate with the name.</param>
		<exception cref="ArgumentException"><para>
				<paramref name="localName"/> is either <see langword="null"/> or String.Empty.</para>
			<para>
				<paramref name="localName"/> is not a valid name according to the W3C Namespaces spec.</para></exception>
		<remarks>
			<para>For example, the following C# code:</para>
			<code>
writer.Formatting = Formatting.Indented;
writer.WriteStartElement("root");
 writer.WriteAttributeString("xmlns","x",null,"urn:abc");
 writer.WriteStartElement("item");
 writer.WriteStartAttribute("href",null);
 writer.WriteString("#");
 writer.WriteQualifiedName("test","urn:abc");
 writer.WriteEndAttribute();
 writer.WriteEndElement();
 writer.WriteEndElement();
 writer.Close();
 </code>
			<para> Generates the following output:</para>
			<code>
&lt;root xmlns:x="urn:abc"&gt;
 &lt;item href="#x:test"/&gt;
 &lt;/root&gt;
 </code>
			<para>If <paramref name="ns"/> maps to the current default namespace, no
 prefix is generated. </para>
			<para>When writing attribute values, this method generates a prefix if <paramref name="ns"/>
is not found. When writing element content, it throws an exception if
<paramref name="ns"/> is not found.</para>
			<para>If this writer supports namespaces (<see cref="System.Xml.XmlTextWriter.Namespaces"/> is set to <see langword="true"/>), this method also checks that the name is 
valid according to the W3C Namespaces in XML recommendation (http://www.w3.org/TR/REC-xml-names

).</para>
		</remarks>
		<example>
			<para>The following example writes out a portion of a XSD schema.
 
 </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteQualifiedName Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextWriter.WriteWhitespace">
		<summary>
			<para>Writes out the given white space.</para>
		</summary>
		<param name="ws">The string of white space characters.</param>
		<exception cref="ArgumentException">The string contains non-white space characters.</exception>
		<remarks>
			<para>This method is used to manually format your document. Use
      the <see cref="System.Xml.XmlTextWriter.Formatting"/> property to have the writer
      format the output automatically.</para>
		</remarks>
		<example>
			<para>The following example uses the
   <see langword="WriteWhitespace"/> method to control how
      the file is formatted.
      
   </para>
			<codelink SampleID="Classic WebData XmlTextWriter.XmlSpace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlTextWriter.Formatting"/>
	</doc><doc for="XmlTextWriter.WriteString">
		<summary>
			<para> Writes the given text content.</para>
		</summary>
		<param name="text">Text to write.</param>
		<exception cref="ArgumentException">The text string contains an invalid surrogate pair.</exception>
		<remarks>
			<para><see langword="WriteString"/> does the following</para>
			<list type="bullet"><item>
					<term>
      The characters <see langword="&amp;"/>, <see langword="&lt;"/>, and
   <see langword="&gt;"/> are replaced with <see langword="&amp;amp;"/>, 
   <see langword="&amp;lt;"/>, and <see langword="&amp;gt;"/>, respectively.</term>
				</item>
				<item>
					<term>
      Character values in the range 0x-0x1F (excluding
      white space characters 0x9, 0x10, and 0x13) are replaced with numeric
      character entities (&amp;#0; through &amp;#0x1F).</term>
				</item>
				<item>
					<term>
      If <see langword="WriteString"/> is called in the context of an attribute
      value, double and single quotes are replaced
      with <see langword="&amp;quot;"/> and <see langword="&amp;apos;"/>
      respectively.</term>
				</item>
			</list>
			<para> For example, this
   input string <c>test&lt;item&gt;test</c> is written as</para>
			<code>
test&amp;lt;item&amp;gt;test
</code>
			<para>If <paramref name="text"/> is either <see langword="null"/> or String.Empty, this method
writes a text node with no data content.</para>
		</remarks>
		<example>
			<para>The following example writes an XML fragment.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.Formatting Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextWriter.BaseStream">
		<summary>
			<para>Gets the underlying stream object.</para>
		</summary>
		<value>
			<para>The stream to which the
   <see langword="XmlTextWriter"/> is writing or <see langword="null"/> if the
   <see langword="XmlTextWriter"/> was constructed using a <see cref="System.IO.TextWriter"/> that does
      not inherit from the <see cref="System.IO.StreamWriter"/> class.</para>
		</value>
		<remarks>
			<para>If the writer was constructed using a
   <see langword="TextWriter"/> that is a subclass of the
   <see langword="StreamWriter"/>
   class, this property is
   equivalent to the <see cref="System.IO.StreamWriter.BaseStream" qualify="true"/> property. If
   the writer was constructed using a <see cref="System.IO.Stream"/>, this property returns the
<see langword="Stream"/> passed to the constructor. If the writer was constructed 
   using a file name, this property returns the <see langword="Stream"/>
   
   representing the file.</para>
		</remarks>
	</doc><doc for="XmlTextWriter.Formatting">
		<summary>
			<para> Indicates how the output
      is formatted.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Xml.Formatting"/> values. The default is Formatting.None (no
   special formatting).</para>
		</value>
		<remarks>
			<para>If the Indented option is set, child elements are indented using
      the <see cref="System.Xml.XmlTextWriter.Indentation"/> and <see cref="System.Xml.XmlTextWriter.IndentChar"/>
      properties.
      Only element
      content will be indented.
      The following C#
      code writes out HTML elements including mixed content:</para>
			<code>
XmlTextWriter w = new XmlTextWriter(Console.Out); 
 w.Formatting = Formatting.Indented; 
 w.WriteStartElement("ol"); 
 w.WriteStartElement("li"); 
 w.WriteString("The big "); // This means "li" now has a mixed content model. 
 w.WriteElementString("b", "E"); 
 w.WriteElementString("i", "lephant"); 
 w.WriteString(" walks slowly."); 
 w.WriteEndElement(); 
 w.WriteEndElement();
   </code>
			<para>The above code produces the following output: </para>
			<code>
&lt;ol&gt; 
  &lt;li&gt;The big &lt;b&gt;E&lt;/b&gt;&lt;i&gt;lephant&lt;/i&gt; walks slowly.&lt;/li&gt; 
&lt;/ol&gt;
   </code>
			<para> When this is viewed in HTML no white space appears
      between the bold and italic elements. In fact, in this example, if
      indenting was added between these elements the word "Elephant" would
      be incorrectly broken. </para>
			<note type="note">
      Writing any text content, including
      String.Empty puts that element into mixed content mode. Child elements do not
      inherit this "mixed" mode status. A child element of a "mixed" element will do
      indenting, unless it is also contains "mixed" content. Element content
      (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content) and mixed
      content (http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content) are
      defined according to the XML 1.0 definitions of these terms.
      
   </note>
		</remarks>
		<example>
			<para>The following example writes an XML fragment.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.Formatting Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Formatting"/>
	</doc><doc for="XmlTextWriter.WriteStartElement">
		<overload>
			<para>Writes the specified start tag.</para>
		</overload>
		<summary>
			<para> Writes the specified start tag and associates it with the given namespace
      and prefix.</para>
		</summary>
		<param name=" prefix">The namespace prefix of the element.</param>
		<param name="localName"><para> The local name of the element.</para></param>
		<param name="ns"><para>The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer will automatically write that prefix also.</para></param>
		<exception cref="InvalidOperationException">The writer is closed.</exception>
		<remarks>
			<para> After calling this method
      you can either write attributes or create content using<see cref="System.Xml.XmlTextWriter.WriteComment"/>, <see cref="System.Xml.XmlTextWriter.WriteString"/>, or <see cref="System.Xml.XmlTextWriter.WriteStartElement"/> for child elements. You can close the element
      with <see cref="System.Xml.XmlTextWriter.WriteEndElement"/>
      at which time an end tag is written out. </para>
		</remarks>
		<example>
			<para>The following example writes out a book.
      </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartElement Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextWriter.WriteStartDocument">
		<overload>
			<para> Writes the XML
      declaration with the version "1.0".</para>
		</overload>
		<summary>
			<para> Writes the XML declaration with the
      version "1.0".</para>
		</summary>
		<exception cref="InvalidOperationException">This is not the first write method called after the constructor.</exception>
		<remarks>
			<para>The encoding level of the document is determined by how
      the writer is implemented. For example, if an <see cref="System.Text.Encoding"/>
      object is specified
      in the <see langword="XmlTextWriter"/> constructor, this
      determines the value of the encoding attribute. This method does not create a
      standalone attribute.</para>
			<para>When <see langword="WriteStartDocument"/> is called the writer validates
   that what you are writing is a well-formed XML document. For example, it checks
   that the XML declaration is the first node, that one and only one root-level
   element exists and so on. If this method is not called, the writer assumes
   an XML fragment is being written and applies no root level rules. </para>
			<para>If <see langword="WriteStartDocument"/> has been called and then the
<see cref="System.Xml.XmlTextWriter.WriteProcessingInstruction"/> method is 
used to create another XML declaration, an exception will be thrown.</para>
		</remarks>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.Indentation">
		<summary>
			<para>Gets or sets how many IndentChars to write for each level
      in the hierarchy when <see cref="System.Xml.XmlTextWriter.Formatting"/> is set to
   <see langword="Formatting.Indented"/>
   .</para>
		</summary>
		<value>
			<para>Number of IndentChars for each level. The default is 2.</para>
		</value>
		<exception cref="ArgumentException">Setting this property to a negative value.</exception>
		<remarks>
			<para>Indentation is performed on following node
      types: DocumentType, Element, Comment, ProcessingInstruction, and
      CDATASection. All other node types are not affected. The <see langword="XmlTextWriter"/> does not indent the
      internal DTD subset. However, you could do the following to apply
      formatting to the internal DTD subset.
      </para>
			<code>
String name = "Employees";
String pubid = null;
String sysid = null;
String subset =
@"
    &lt;!ELEMENT Employees (Employee)+&gt;
    &lt;!ELEMENT Employee EMPTY&gt;
    &lt;!ATTLIST Employee firstname CDATA #REQUIRED&gt;
    &lt;!ENTITY Company 'Microsoft'&gt;]&gt;
";
XmlTextWriter tw = new XmlTextWriter(Console.Out);
tw.WriteDocType(name, pubid, sysid, subset);
   </code>
		</remarks>
		<example>
			<para>The following example writes an XML fragment.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.Formatting Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlTextWriter.IndentChar"/>
		<seealso cref="System.Xml.Formatting"/>
	</doc>
	<doc for="XmlTextWriter.QuoteChar">
		<summary>
			<para>Gets or sets which character to use to quote attribute
      values.</para>
		</summary>
		<value>
			<para> The character to use to quote attribute values. This must be a single quote (&amp;#39;) or a double quote (&amp;#34;).
      The default is a double quote.
      </para>
		</value>
		<exception cref="ArgumentException">Setting this property to something other than either a single or double quote.</exception>
	</doc>
	<doc for="XmlTextWriter.Namespaces">
		<summary>
			<para>Gets
      or sets a value indicating whether to do namespace support.</para>
		</summary>
		<value>
			<para><see langword="true"/>to support namespaces; otherwise,
<see langword="false"/> .</para>
			<para>The default is <see langword="true"/> .</para>
		</value>
		<exception cref="InvalidOperationException">You can only change this property when in the WriteState.Start state.</exception>
		<remarks>
			<para>This property determines whether
      the writer supports the W3C Namespaces in XML recommendation located at
      www.w3.org/TR/REC-xml-names .</para>
		</remarks>
	</doc>
	<doc for="XmlTextWriter.XmlTextWriter1">
		<summary>
			<para>Creates an instance of the <see cref="System.Xml.XmlTextWriter"/> class using the specified file.</para>
		</summary>
		<param name="filename">The filename to write to. If the file exists, it will truncate it and overwrite it with the new content.</param>
		<param name=" encoding">The encoding to generate. If encoding is <see langword="null"/> it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction.</param>
		<exception cref="ArgumentException">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</exception>
		<exception cref="UnauthorizedAccessException">Access is denied.</exception>
		<exception cref="ArgumentNullException">The filename is <see langword="null"/>.</exception>
		<exception cref="DirectoryNotFoundException">The directory to write to is not found.</exception>
		<exception cref="IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
	</doc>
	<doc for="XmlTextWriter.IndentChar">
		<summary>
			<para>Gets or sets which character to use for indenting
      when <see cref="System.Xml.XmlTextWriter.Formatting"/> is set to Formatting.Indented.</para>
		</summary>
		<value>
			<para> The character to use for indenting. The
      default is space.</para>
			<note type="note">
      The
   <see langword="XmlTextWriter"/> allows you to set this property to any character.
      To ensure valid XML, you must specify a valid white
      space character, 0x9, 0x10, 0x13 or 0x20.
      
   </note>
		</value>
		<seealso cref="System.Xml.XmlTextWriter.Indentation"/>
		<seealso cref="System.Xml.Formatting"/>
	</doc>
	<doc for="XmlTextWriter.XmlTextWriter">
		<overload>
			<para>Creates an instance of the <see langword="XmlTextWriter"/> class.</para>
		</overload>
		<summary>
			<para>Creates an instance of the <see langword="XmlTextWriter"/> class using the specified stream and
   encoding.</para>
		</summary>
		<param name="w">The stream to which you want to write.</param>
		<param name=" encoding">The encoding to generate. If encoding is <see langword="null"/> it writes out the stream as UTF-8 and omits the encoding attribute from the ProcessingInstruction.</param>
		<exception cref="ArgumentException">The encoding is not supported or the stream cannot be written to.</exception>
		<exception cref="ArgumentNullException"><paramref name="w"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="XmlTextWriter.WriteEndDocument">
		<summary>
			<para>Closes any open elements or attributes and puts the
      writer back in the Start state.</para>
		</summary>
		<exception cref="ArgumentException">The XML document is invalid.</exception>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteDocType">
		<summary>
			<para> Writes the DOCTYPE declaration with the specified name
      and optional attributes.</para>
		</summary>
		<param name="name">The name of the DOCTYPE. This must be non-empty.</param>
		<param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
		<param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
		<param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
		<exception cref="InvalidOperationException">This method was called outside the prolog (after the root element).</exception>
		<exception cref="ArgumentException"><para><paramref name="name"/> is <see langword="null"/> or String.Empty</para>
			<para>-or-</para>
			<para>the value for <paramref name="name"/> would result in invalid XML.</para></exception>
		<remarks>
			<para>This method does not check for invalid characters in <paramref name="pubid, sysid "/>or <paramref name="subset"/>.</para>
		</remarks>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteComment">
		<summary>
			<para>Writes out a comment &lt;!--...--&gt; containing
      the specified text.</para>
		</summary>
		<param name="text">Text to place inside the comment.</param>
		<exception cref="ArgumentException">The text would result in a non-well formed XML document</exception>
		<exception cref="InvalidOperationException">The <see cref="System.Xml.XmlTextWriter.WriteState"/> is Closed.</exception>
		<remarks>
			<para>If <paramref name="text"/> is
   either <see langword="null"/> or String.Empty, this method writes a Comment
   with no data content, for example &lt;!----&gt;.</para>
		</remarks>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.Close">
		<summary>
			<para>Closes this stream and the underlying stream.</para>
		</summary>
		<exception cref="InvalidOperationException">A call is made to write more output after <see langword="Close"/> has been called or the result of this call is an invalid XML document.</exception>
		<remarks>
			<para> Any elements
      or attributes left open are automatically closed.</para>
		</remarks>
		<example>
			<para>The following example writes an XML fragment.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.Formatting Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteBase64">
		<summary>
			<para>Encodes the specified binary bytes as base64 and writes out
      the resulting text.</para>
		</summary>
		<param name="buffer">Byte array to encode.</param>
		<param name="index">The position within the buffer indicating the start of the bytes to write.</param>
		<param name="count">The number of bytes to write.</param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<exception cref="InvalidOperationException">The <see cref="System.Xml.XmlTextWriter.WriteState"/> is Closed.</exception>
		<example>
			<para>The following example encodes an input file using
   <see langword="WriteBase64"/> and generates a temporary XML file. The
      temporary XML file is decoded using the <see cref="System.Xml.XmlTextReader.ReadBase64"/> method and compared to the original
      file.
      </para>
			<codelink SampleID="XmlWriter.WriteBase64" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteBinHex">
		<summary>
			<para> Encodes the specified binary bytes as binhex and writes out
      the resulting text.
      </para>
		</summary>
		<param name="buffer">Byte array to encode. </param>
		<param name="index">The position in the buffer indicating the start of the bytes to write. </param>
		<param name="count">The number of bytes to write. </param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<exception cref="InvalidOperationException">The <see cref="System.Xml.XmlTextWriter.WriteState"/> is Closed.</exception>
	</doc>
	<doc for="XmlTextWriter.WriteCData">
		<summary>
			<para>Writes out a &lt;![CDATA[...]]&gt; block containing
      the specified text.</para>
		</summary>
		<param name="text">Text to place inside the CDATA block.</param>
		<exception cref="ArgumentException">The text would result in a non-well formed XML document.</exception>
		<exception cref="InvalidOperationException">The <see cref="System.Xml.XmlTextWriter.WriteState"/> is Closed.</exception>
		<remarks>
			<para>If <paramref name="text"/> is
   either <see langword="null"/> or String.Empty, this method writes an empty
   CDATA block, for example &lt;![CDATA[]]&gt;.</para>
		</remarks>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteChars">
		<summary>
			<para> Writes text one buffer at a time.
      </para>
		</summary>
		<param name="buffer">Character array containing the text to write. </param>
		<param name="index">The position in the buffer indicating the start of the text to write. </param>
		<param name="count">The number of characters to write. </param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>; the call results in surrogate pair characters being split or an invalid surrogate pair being written. </exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<exception cref="InvalidOperationException">The <see cref="System.Xml.XmlTextWriter.WriteState"/> is Closed.</exception>
		<remarks>
			<para> This method can be used to write
      large amounts of text one buffer at a time.</para>
			<para>Special handling must be done to ensure the <see langword="WriteChars"/>
method does not split surrogate pair characters across multiple buffer
writes. The XML specification defines the valid ranges for surrogate
pairs. </para>
			<para>An exception is thrown if surrogate pair characters are written that would
   result in the surrogate pair characters being split in the buffer. This
   exception must be caught in order to continue writing the next surrogate pair
   character to the output buffer.</para>
			<para>In the following example a randomly generated surrogate pair character is
   split when writing to the output buffer. Catching the exception and continuing
   to write to the buffer ensures that the surrogate pair character is written
   correctly to the output stream.</para>
			<code>
//Handling surrogate pair across buffer streams.

char [] charArray = new char[4];
char lowChar, highChar;
Random random = new Random();

lowChar = Convert.ToChar(random.Next(0xDC01, 0xDFFF));
highChar = Convert.ToChar(random.Next(0xD801, 0xDBFF));

XmlTextWriter tw = new XmlTextWriter("test.xml", null);
tw.WriteStartElement("Root");
charArray[0] = 'a';
charArray[1] = 'b';
charArray[2] = 'c';
charArray[3] = highChar;
try
{
 tw. WriteChars(charArray, 0, charArray.Length);
}
catch (Exception ex) {
}
Array[0] = highChar;
Array[1] = lowChar;
charArray[2] = 'd';
tw.WriteChars(charArray, 0, 3); 
tw.WriteEndElement();
</code>
		</remarks>
	</doc>
	<doc for="XmlTextWriter.WriteEntityRef">
		<summary>
			<para>Writes out an entity reference as 
   <see langword="&amp;name;"/> .</para>
		</summary>
		<param name="name">Name of the entity reference.</param>
		<exception cref="ArgumentException">The text would result in a non-well formed XML document or <paramref name="name"/> is either <see langword="null"/> or String.Empty.</exception>
		<example>
			<para> The following example writes an XML file representing a book.</para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteStartDocument Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteStartDocument1">
		<summary>
			<para> Writes the XML declaration with the
      version "1.0" and the standalone attribute.</para>
		</summary>
		<param name="standalone">If <see langword="true"/>, it writes "standalone=yes"; if <see langword="false"/>, it writes "standalone=no".</param>
		<exception cref="InvalidOperationException">This is not the first write method called after the constructor.</exception>
		<remarks>
			<para>The encoding level of the document is determined by how
      the writer is implemented. For example, if an <see cref="System.Text.Encoding"/> object is specified in the <see langword="XmlTextWriter"/> constructor, this determines the value of the encoding attribute.</para>
			<para>When <see langword="WriteStartDocument"/> is called the
   writer validates that what you are writing is a well-formed XML document. For
   example, it checks that the XML declaration is the first node, that one and only
   one root-level element exists and so on. If this method is not called, the
   writer assumes an XML fragment is being written and applies no root level rules. </para>
			<para>If <see langword="WriteStartDocument"/> has been called and then the <see cref="System.Xml.XmlTextWriter.WriteProcessingInstruction"/> method is used to create another XML declaration, an exception will be thrown.</para>
		</remarks>
	</doc>
	<doc for="XmlTextWriter.WriteSurrogateCharEntity">
		<summary>
			<para> Generates and writes the surrogate character entity
      for the surrogate character pair.</para>
		</summary>
		<param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
		<param name=" highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
		<exception cref="Exception">An invalid surrogate character pair was passed.</exception>
		<remarks>
			<para>This method is only applicable on systems that
      use UTF-16 encoding.</para>
			<para>The surrogate character entity is written in hexadecimal
      format. The range for surrogate characters is #x10000 to #x10FFFF. The following formula is used to generate the surrogate character entity: (<paramref name="highChar"/>-0xD800) * 0x400 + (<paramref name="lowChar"/> -0xDC00) + 0x10000</para>
			<para> For both HTML and XML, the document character set (and therefore the notation
      of numeric character references) is based on UCS [ISO-10646]. A single
      numeric character reference in a source document may therefore in some cases
      correspond to two 16-bit units in a string (a high surrogate and a low surrogate). These 16-bit units are referred to as
      a surrogate pair.</para>
			<para> For more information regarding surrogates or
      characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located
      at http://www.unicode.org, or section 2.2
      of the W3C XML 1.0 Recommendation located at
      http://www.w3.org/TR/REC-xml#charsets.</para>
		</remarks>
	</doc>
	<doc for="XmlTextWriter.WriteRaw">
		<overload>
			<para> Writes raw markup manually.
      </para>
		</overload>
		<summary>
			<para> Writes raw markup manually from a character buffer.
      </para>
		</summary>
		<param name="buffer">Character array containing the text to write. </param>
		<param name="index">The position within the buffer indicating the start of the text to write. </param>
		<param name="count">The number of characters to write. </param>
		<exception cref="ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
		<remarks>
			<para> This method does not escape special characters.
      </para>
		</remarks>
	</doc>
	<doc for="XmlTextWriter.WriteRaw1">
		<summary>
			<para>Writes raw markup manually from a string.</para>
		</summary>
		<param name="data">String containing the text to write.</param>
		<remarks>
			<para> This method does not escape special characters.</para>
		</remarks>
		<example>
			<para>The following example writes a string using the
   <see langword="WriteRaw"/> method.
      </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteRaw1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter.WriteCharEntity">
		<summary>
			<para>Forces the
      generation of a character entity for the specified Unicode character value.</para>
		</summary>
		<param name="ch">Unicode character for which to generate a character entity.</param>
		<exception cref="ArgumentException">The character is in the surrogate pair character range, <see langword="0xd800"/> - <see langword="0xdfff"/>; or the text would result in a non-well formed XML document.</exception>
		<exception cref="InvalidOperationException">The <see cref="System.Xml.XmlTextWriter.WriteState"/> is Closed.</exception>
		<remarks>
			<para> This method writes the Unicode character in hexadecimal character entity
      reference format.</para>
		</remarks>
		<example>
			<para>The following example uses the 
   <see langword="WriteCharEntity"/> method to write an e-mail address.
      </para>
			<codelink SampleID="Classic WebData XmlTextWriter.WriteTimeSpan Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlTextWriter">
		<summary>
			<para> Represents a writer that provides a fast, non-cached, forward-only way
      of generating streams or files containing XML data that conforms to the
      W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML
      recommendations.
      </para>
		</summary>
		<remarks>
			<para>This class implements the <see cref="System.Xml.XmlWriter"/> class.</para>
			<para><see langword="XmlTextWriter"/>
maintains a namespace stack corresponding to all the namespaces defined in the
current element stack. Using <see langword="XmlTextWriter"/>
you can declare namespaces manually.</para>
			<code>
w.WriteStartElement("root");
w.WriteAttributeString("xmlns", "x", null, "urn:1");
 w.WriteStartElement("item","urn:1");
 w.WriteEndElement();
 w.WriteStartElement("item","urn:1");
 w.WriteEndElement();
w.WriteEndElement();
</code>
			<para>The above C# code produces the following output.
<see langword="XmlTextWriter"/> promotes the namespace declaration to the root 
   element to avoid having it duplicated on the two child elements. The child
   elements pick up the prefix from the namespace declaration.</para>
			<code>
&lt;root xmlns:x="urn:1"&gt;
 &lt;x:item/&gt;
 &lt;x:item/&gt;
&lt;/x:root&gt;
</code>
			<para><see langword="XmlTextWriter"/> also allows you to override the current namespace
declaration. In the following example, the namespace URI "123" is
overridden by "abc" to produce the XML element <c>&lt;x:node xmlns:x="abc"/&gt;</c>.</para>
			<code>
w.WriteStartElement("x","node","123");
w.WriteAttributeString("xmlns","x",null,"abc");
</code>
By using the write methods that take a prefix as an
argument you can also specify which prefix to use. In the following
example, two different prefixes are mapped to the same namespace URI to produce
the XML text <c>&lt;x:root
xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;</c>.
<code>
XmlTextWriter w = new XmlTextWriter(Console.Out);
w.WriteStartElement("x","root","urn:1");
 w.WriteStartElement("y","item","urn:1");
 w.WriteEndElement();
w.WriteEndElement();
w.Close();
</code>
			<para> If there are multiple namespace declarations mapping different
   prefixes to the same namespace URI, <see langword="XmlTextWriter"/> walks
   the stack of namespace declarations backwards and picks the closest one. </para>
			<code>
XmlTextWriter w = new XmlTextWriter(Console.Out);
w.Formatting = Formatting.Indented;
w.WriteStartElement("x","root","urn:1");
w.WriteStartElement("y","item","urn:1");
w.WriteAttributeString("attr","urn:1","123");
w.WriteEndElement();
w.WriteEndElement();
w.Close();
</code>
			<para>In the above C# example, because the
<see langword="WriteAttributeString"/> call does not specify a prefix, the writer 
   uses the last prefix pushed onto the namespace stack, and produces the following
   XML: </para>
			<code>
&lt;x:root xmlns:x="urn:1"&gt;
 &lt;y:item y:attr="123" xmlns:y="urn:1" /&gt;
&lt;/x:root&gt;
</code>
			<para>If namespace conflicts occur, <see langword="XmlTextWriter"/>
resolves them by generating alternate prefixes. For example, if an attribute and
element have the same prefix but different namespaces,
<see langword="XmlWriter"/> 
generates an alternate prefix
for the attribute. The generated prefixes are named
<see langword="n{i}"/> where <see langword="i"/> is a 
number beginning at 1. The number is reset to 1 for each element.</para>
			<para>Attributes which are associated with a namespace URI
   must have a prefix (default namespaces do not apply to attributes). This
   conforms to section 5.2 of the W3C Namespaces in XML recommendation. If an
   attribute references a namespace URI, but does not specify a prefix, the writer
   generates a prefix for the attribute.</para>
			<para>When writing an empty element, an additional space is
   added between tag name and the closing tag, for example
<see langword="&lt;item /&gt;"/> . This provides compatibility 
   with older browsers.</para>
			<para>When a <see langword="String"/> is used as method
parameter, <see langword="null"/> and <see langword="String.Empty"/> are
equivalent. <see langword="String.Empty"/> follows
the W3C rules.</para>
			<para>To write strongly typed data, use the <see cref="System.Xml.XmlConvert"/> class to convert data types to string. For example,
the following C# code converts the data from <see langword="Double"/> to
<see langword="String"/> 
and writes the
element <c>&lt;price&gt;19.95&lt;/price&gt;</c>.</para>
			<code>
Double price = 19.95;
writer.WriteElementString("price", XmlConvert.ToString(price));
</code>
			<para><see langword="XmlTextWriter"/> does not check for the following:</para>
			<list type="bullet"><item>
					<term>Invalid characters in attribute and element names.</term>
				</item>
				<item>
					<term>Unicode characters that do not fit the specified encoding. If the Unicode 
      characters do not fit the specified encoding, the
   <see langword="XmlTextWriter"/> does not escape the Unicode characters into 
      character entities.</term>
				</item>
				<item>
					<term>Duplicate attributes.</term>
				</item>
				<item>
					<term>Characters in the DOCTYPE public identifier or system identifier.</term>
				</item>
			</list>
For
more information on writing XML, see <see topic="cpconWritingXMLWithXmlWriter"/> .
</remarks>
	</doc>
</docs>
