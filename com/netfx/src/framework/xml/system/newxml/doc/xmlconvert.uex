<docs>
	<doc for="XmlConvert.EncodeLocalNmToken">
		<summary>
    Converts names, such as DataTable or
    DataColumn names, that contain characters that are not permitted in XML names to
    valid names.
 </summary>
		<param name="name">The name to be encoded.</param>
		<returns>
			<para>The encoded name.</para>
		</returns>
		<remarks>
			<para>This method is the same as <see cref="System.Xml.XmlConvert.EncodeLocalName"/> except it allows characters
    other than "(Letter | '_' | ':')" in the beginning of the name.</para>
 For example, if you passed this
 method the invalid name "6:7", it would return "6_x003a_7" which is a valid
 LocalName. If name is null or String.Empty then you get back the same value.
 </remarks>
	</doc>
	<doc for="XmlConvert.ToString1">
		<summary>
			<para>Converts the <see cref="System.Char"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the <see langword="Char"/> 
.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString2">
		<summary>
			<para>Converts the <see cref="System.Decimal"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the 
   <see langword="Decimal"/> 
   .</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString3">
		<summary>
			<para>Converts the <see cref="System.SByte"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="SByte"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString5">
		<summary>
			<para>Converts the <see cref="System.Int32"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
      <see langword="Int32"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString6">
		<summary>
			<para>Converts the <see cref="System.Byte"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="Byte"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString7">
		<summary>
			<para>Converts the <see cref="System.UInt16"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="UInt16"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString8">
		<summary>
			<para>Converts the <see cref="System.UInt32"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="UInt32"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString11">
		<summary>
			<para>Converts the <see cref="System.TimeSpan"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="TimeSpan"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString14">
		<summary>
			<para>Converts the <see cref="System.Guid"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
      <see langword="Guid"/>.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToGuid">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Guid"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="Guid"/> 
equivalent of the string.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.FromBinHexString">
		<summary>
			<para>Decodes the supplied string and returns a binhex decoded
      byte array.</para>
		</summary>
		<param name="s">The string to decode.</param>
		<returns>
			<para>A binhex decoded byte array.</para>
		</returns>
		<remarks>
			<para> This method could be used to return an
      decoded GIF image. </para>
			<para> To convert base64 values, use <see cref="System.Convert.FromBase64String"/> 
and <see cref="System.Convert.ToBase64String"/>
.</para>
		</remarks>
		<seealso cref="System.Xml.XmlConvert.ToBinHexString"/>
	</doc>
	<doc for="XmlConvert.ToBinHexString">
		<summary>
			<para>Encodes the byte array and returns a binhex encoded
      string.</para>
		</summary>
		<param name="inArray">The array of characters to encode.</param>
		<param name=" offsetIn">The zero based index into the array specifying where the encoding should begin.</param>
		<param name=" count">The number of bytes to encode.</param>
		<returns>
			<para>A binhex encoded string.</para>
		</returns>
		<remarks>
			<para>This method could be used to return an
      inline binhex encoded GIF image.</para>
			<para>To convert base64 values, use <see cref="System.Convert.FromBase64String"/>
and <see cref="System.Convert.ToBase64String"/>.</para>
		</remarks>
	</doc>
	<doc for="XmlConvert.ToString9">
		<summary>
			<para>Converts the <see cref="System.Single"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="Single"/>.</para>
		</returns>
		<remarks>
			<para>If <paramref name="value"/> is Single.PositiveInfinity
   or Single.NegativeInfinity, this method returns the string INF or -INF
   respectively.</para>
		</remarks>
		<seealso cref="System.Single.PositiveInfinity"/>
		<seealso cref="System.Single.NegativeInfinity"/>
	</doc>
	<doc for="XmlConvert.ToString16">
		<summary>
			<para>Converts the <see cref="System.UInt64"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
   A string representation of the
<see langword="UInt64"/>.
</returns>
	</doc><doc for="XmlConvert.ToString15">
		<summary>
			<para>Converts the <see cref="System.Int64"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="Int64"/>.</para>
		</returns>
	</doc><doc for="XmlConvert.ToString4">
		<summary>
			<para>Converts the <see cref="System.Int16"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="Int16"/>.</para>
		</returns>
		<example>
			<para>The following example, converts data types to string and then writes the information out to the console. </para>
			<codelink SampleID="Classic WebData XmlConvert.ToString Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlConvert.ToString10">
		<summary>
			<para>Converts the <see cref="System.Double"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
   <see langword="Double"/>.</para>
		</returns>
		<remarks>
			<para>If <paramref name="value"/> is
   Double.PositiveInfinity or Double.NegativeInfinity, this method returns the
   string INF or -INF respectively.</para>
		</remarks>
		<example>
			<para>The following example, converts data types to string and then writes the information out to the console. </para>
			<codelink SampleID="Classic WebData XmlConvert.ToString Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Double.PositiveInfinity"/>
		<seealso cref="System.Double.NegativeInfinity"/>
	</doc><doc for="XmlConvert.ToString">
		<overload>
			<para>Converts strongly typed data to an
      equivalent <see cref="System.String"/> representation.</para>
		</overload>
		<summary>
			<para>Converts the <see cref="System.Boolean"/> to a <see cref="System.String"/>.</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the <see langword="Boolean"/>,
   that is, "true" or "false".</para>
		</returns>
	</doc><doc for="XmlConvert">
		<summary>
			<para>Encodes and decodes XML names and provides methods for
      converting between common language runtime types and XML Schema definition
      language (XSD) types. When converting data types the values returned are locale independent.</para>
		</summary>
		<remarks>
			<para>Element and attribute names or ID values are limited to a range of XML
      characters according to the Extensible Markup Language (XML) 1.0 (Second
      Edition) recommendation, located at www.w3.org/TR/2000/REC-xml-20001006.html.
      When names contain invalid characters, the <see cref="System.Xml.XmlConvert.EncodeName"/> and <see cref="System.Xml.XmlConvert.DecodeName"/> methods are used to translate them into valid XML
      names.</para>
			<para> Many languages and applications such as Microsoft SQL Server and Microsoft
      Word, allow Unicode characters in their names, which are not valid in XML names.
      For example, if 'Order Detail' were a column heading in a database, the database
      allows the space between the words Order and Detail. However, in XML, the space
      between Order and Detail is considered an invalid XML character. Thus, the
      space, the invalid character, needs to be converted into an escaped hexadecimal
      encoding and can be decoded later.</para>
			<para>The <see langword="EncodeName"/> method can be used with the <see cref="System.Xml.XmlTextWriter"/> class
   to ensure the names being written are valid XML names. The following C# code
   converts the name 'Order Detail' into a valid XML name and writes the
   element <c>&lt;Order_0x0020_Detail&gt;My
   order&lt;/Order_0x0020_Detail&gt;</c>.</para>
			<code>
writer.WriteElementString(XmlConvert.EncodeName("Order Detail"),"My order");
</code>
			<para><see langword="XmlConvert"/> 
also provides methods that enable you to convert from a
string to a .NET Framework data type and vice-versa. Locale
settings are not taken into account during data conversion. The data types
are based on the XML Schema (XSD) data types. The table found at <see topic="cpconDataTypeSupportBetweenXSDTypesNETFrameworkTypes"/> describes the mapping
between XML Schema (XSD) and .NET data types.</para>
			<para>In the following example, the <see cref="System.Xml.XmlTextReader"/> uses one of the <see cref="System.Xml.XmlConvert.ToDouble" qualify="true"/> method to read in data and convert it from a String
to a Double. </para>
			<code>
Double price = XmlConvert.ToDouble(reader.Value);
</code>
		</remarks>
	</doc><doc for="XmlConvert.EncodeNmToken">
		<summary>
			<para> Verifies the
      name is valid according to the XML specification.</para>
		</summary>
		<param name="name">The name to be encoded.</param>
		<returns>
			<para>The encoded name.</para>
		</returns>
		<remarks>
			<para>This method guarantees that the name is valid according
      to the XML specification. For example, if you passed this
      method the invalid name 70+,
      it returns 70_x002b_ which is a valid XML name.</para>
			<para>If <paramref name="name"/> is <see langword="null"/> or String.Empty then you get the same value
   returned.</para>
		</remarks>
	</doc><doc for="XmlConvert.EncodeName">
		<summary>
			<para> Converts the
      name to a valid XML name.</para>
		</summary>
		<param name="name">A name to be translated.</param>
		<returns>
			<para>Returns the name with any invalid characters replaced by
      an escape string.</para>
		</returns>
		<remarks>
			<para>This method translates invalid characters, such as spaces or half-width
      Katakana, that need to be mapped to XML names without the support or presence of
      schemas. The invalid characters are translated into escaped numeric entity
      encodings.</para>
			<para>The escape character is "_". Any XML name character that does not conform to
      the W3C Extensible Markup Language (XML) 1.0 specification is escaped as
      _xHHHH_. The HHHH string stands for the four-digit hexadecimal UCS-2 code for the
      character in most significant bit first order. For example, the name Order
      Details is encoded as Order_x0020_Details.</para>
			<para> The underscore character does not need to be
      escaped unless it is followed by a character sequence that together with the underscore can be misinterpreted as an escape
      sequence when decoding the name. For example, Order_Details is not encoded, but
      Order_x0020_ is encoded as Order_x005f_x0020_. No shortforms are allowed. For example, the
      forms _x20_ and __ are not generated.</para>
			<para> This method guarantees the name is valid according to the XML
      specification. It allows colons in any position, which means the name may still be invalid
      according to the W3C Namespace Specification (www.w3.org/TR/REC-xml-names). To guarantee it is a valid namespace
      qualified name use <see cref="System.Xml.XmlConvert.EncodeLocalName"/> for the prefix and local name
      parts and join the result with a colon.</para>
		</remarks>
		<example>
			<para>The following example encodes and decodes names.
      </para>
			<codelink SampleID="XmlConvert.EncodeName" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlConvert.EncodeLocalName"/>
		<seealso cref="System.Xml.XmlConvert.DecodeName"/>
	</doc>
	<doc for="XmlConvert.EncodeLocalName">
		<summary>
			<para> Converts the name to a valid XML local name.</para>
		</summary>
		<param name="name">The name to be encoded.</param>
		<returns>
			<para>The encoded name.</para>
		</returns>
		<remarks>
			<para>This method is similar to the <see cref="System.Xml.XmlConvert.EncodeName"/> method except that it encodes the colon character, which
   guarantees that the name can be used as the local name part of a namespace
   qualified name.</para>
			<para>For example, if you passed this method the invalid name a:b, it returns
   a_x003a_b, which is a valid
   local name.</para>
			<para>If <paramref name="name"/> is <see langword="null"/> or String.Empty then you get the same
value returned.</para>
		</remarks>
		<example>
			<para>The following example encodes and decodes names. </para>
			<codelink SampleID="XmlConvert.EncodeName" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlConvert.EncodeName"/>
		<seealso cref="System.Xml.XmlConvert.DecodeName"/>
	</doc>
	<doc for="XmlConvert.DecodeName">
		<summary>
			<para> Decodes a name. This method does the reverse of
      the <see cref="System.Xml.XmlConvert.EncodeName"/> and <see cref="System.Xml.XmlConvert.EncodeLocalName"/> methods.</para>
		</summary>
		<param name="name">The name to be transformed.</param>
		<returns>
			<para>The decoded name.</para>
		</returns>
		<remarks>
			<para> The names are decoded using the following rules:</para>
			<list type="bullet"><item>
					<term>
         
         Names are decoded from left to right.</term>
				</item>
				<item>
					<term>
         
         Any sequence _x<paramref name="HHHH_"/> (where
         HHHH stands for a valid, four digit hexadecimal UCS-2 code) that has not been
         decoded is transformed into the corresponding Unicode 2.1 (Unicode 3.0 if
         supported by the application) character.</term>
				</item>
				<item>
					<term>
         
         No shortforms are recognized. They are passed on without translation. For
         example, _x20_ or __ are not decoded.</term>
				</item>
			</list>
			<note type="note">
   
   The actual encoding of
   the character is application-specific. For example, Order_x0020_Details
   becomes Order Details. Even escaped characters that are
   invalid in XML names will be recognized and decoded.
</note>
		</remarks>
		<example>
			<para>The following example encodes and decodes names. </para>
			<codelink SampleID="XmlConvert.EncodeName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlConvert.ToChar">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Char"/> equivalent.</para>
		</summary>
		<param name="s">The string containing a single character to convert.</param>
		<returns>
			<para>A <see langword="Char"/> 
representing the single character.</para>
		</returns>
		<exception cref="ArgumentNullException">The value of the <paramref name="s"/> parameter is <see langword="null"/>.</exception>
		<exception cref="FormatException">The <paramref name="s"/> parameter contains more than one character.</exception>
	</doc>
	<doc for="XmlConvert.ToString12">
		<summary>
			<para>Converts the <see cref="System.DateTime"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<returns>
			<para>A string representation of the
      <see langword="DateTime"/> in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</para>
		</returns>
	</doc>
	<doc for="XmlConvert.ToString13">
		<summary>
			<para>Converts the <see cref="System.DateTime"/> to a <see cref="System.String"/> .</para>
		</summary>
		<param name="value">The value to convert.</param>
		<param name=" format">The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
		<returns>
			<para>A string representation of the
   <see langword="DateTime"/> in the specified format.</para>
		</returns>
		<example>
			<para>The following example, converts data types to string and then writes the information out to the console. </para>
			<codelink SampleID="Classic WebData XmlConvert.ToString Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlConvert.ToBoolean">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Boolean"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="Boolean"/> value,
   that is,
<see langword="true"/> or <see langword="false"/>.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> does not represent a <see langword="Boolean"/> value.</exception>
		<remarks>
			<para>Valid strings are "1" or "true" for
   <see langword="true"/> and "0" or "false" for <see langword="false"/>.</para>
		</remarks>
	</doc>
	<doc for="XmlConvert.ToByte">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Byte"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="Byte"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Byte.MinValue" qualify="true"/> or greater than <see cref="System.Byte.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToDateTime">
		<overload>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.DateTime"/> equivalent.</para>
		</overload>
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.DateTime"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="DateTime"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is an empty string or is not in the correct format.</exception>
		<example>
			<para>The following example uses <see cref="System.Xml.XmlConvert.ToDouble"/> and <see langword="ToDateTime"/> to
   read strongly typed data.</para>
			<codelink SampleID="XmlConvert.ToDouble" SnippetID="1"/>



The example uses the file, <see langword="orderData.xml"/>, as input.

<codelink SampleID="XmlConvert.ToDouble" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XmlConvert.ToDateTime1">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.DateTime"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<param name=" format">The format structure to apply to the converted <see langword="DateTime"/>. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format.</param>
		<returns>
			<para>A <see langword="DateTime"/> equivalent
   of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><para><paramref name="s"/> or <paramref name="format"/> is String.Empty</para>
			<para>-or-</para>
			<para><paramref name="s"/> does not contain a data and time that corresponds to <paramref name="format"/>.</para></exception>
	</doc>
	<doc for="XmlConvert.ToDateTime2">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.DateTime"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<param name=" formats">An array containing the format structures to apply to the converted <see langword="DateTime"/> . Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.</param>
		<returns>
			<para>A <see langword="DateTime"/> equivalent
   of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><para><paramref name="s"/> or an element of <paramref name="formats"/> is String.Empty</para>
			<para>-or-</para>
			<para><paramref name="s "/>does not contain a date and time that corresponds to any of the elements of <paramref name="formats"/>.</para></exception>
		<remarks>
			<para>This method allows multiple formats for the
      string to be validated against.</para>
		</remarks>
	</doc>
	<doc for="XmlConvert.ToDecimal">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Decimal"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="Decimal"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Decimal.MinValue" qualify="true"/> or greater than <see cref="System.Decimal.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToDouble">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Double"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="Double"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Double.MinValue" qualify="true"/> or greater than <see cref="System.Double.MaxValue" qualify="true"/>.</exception>
		<remarks>
			<para>If <paramref name="s"/> is INF or -INF, this method returns Double.PositiveInfinity or
   Double.NegativeInfinity respectively.</para>
		</remarks>
		<example>
			<para>The following example uses <see langword="ToDouble"/> and <see cref="System.Xml.XmlConvert.ToDateTime"/> to read strongly typed data.
   </para>
			<codelink SampleID="XmlConvert.ToDouble" SnippetID="1"/>



The example uses the file, <see langword="orderData.xml"/>, as input.

<codelink SampleID="XmlConvert.ToDouble" SnippetID="2"/>
		</example>
		<seealso cref="System.Double.PositiveInfinity"/>
		<seealso cref="System.Double.NegativeInfinity"/>
	</doc>
	<doc for="XmlConvert.ToSByte">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.SByte"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>An <see langword="SByte"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.SByte.MinValue" qualify="true"/> or greater than <see cref="System.SByte.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToInt16">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Int16"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>An <see langword="Int16"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Int16.MinValue" qualify="true"/> or greater than <see cref="System.Int16.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToInt32">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Int32"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>An <see langword="Int32"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Int32.MinValue" qualify="true"/> or greater than <see cref="System.Int32.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToInt64">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Int64"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>An <see langword="Int64"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Int64.MinValue" qualify="true"/> or greater than <see cref="System.Int64.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToUInt16">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.UInt16"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="UInt16"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.UInt16.MinValue" qualify="true"/> or greater than <see cref="System.UInt16.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToSingle">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.Single"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="Single"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.Single.MinValue" qualify="true"/> or greater than <see cref="System.Single.MaxValue" qualify="true"/>.</exception>
		<remarks>
			<para>If <paramref name="s"/> is INF or -INF, this method
   returns Single.PositiveInfinity or Single.NegativeInfinity respectively.</para>
		</remarks>
		<seealso cref="System.Single.PositiveInfinity"/>
		<seealso cref="System.Single.NegativeInfinity"/>
	</doc>
	<doc for="XmlConvert.ToTimeSpan">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.TimeSpan"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="TimeSpan"/>
equivalent of the string.</para>
		</returns>
		<exception cref="FormatException"><paramref name="s"/> is not in correct format to represent a <see langword="TimeSpan"/> value.</exception>
	</doc>
	<doc for="XmlConvert.ToUInt32">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.UInt32"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="UInt32"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.UInt32.MinValue" qualify="true"/> or greater than <see cref="System.UInt32.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.ToUInt64">
		<summary>
			<para>Converts the <see cref="System.String"/> to a <see cref="System.UInt64"/> equivalent.</para>
		</summary>
		<param name="s">The string to convert.</param>
		<returns>
			<para>A <see langword="UInt64"/>
equivalent of the string.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="s "/>is <see langword="null"/>.</exception>
		<exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
		<exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="System.UInt64.MinValue" qualify="true"/> or greater than <see cref="System.UInt64.MaxValue" qualify="true"/>.</exception>
	</doc>
	<doc for="XmlConvert.VerifyName">
		<summary>
			<para> Verifies that the name is a valid name according
      to the W3C Extended Markup Language recommendation.</para>
		</summary>
		<param name="name">The name to verify.</param>
		<returns>
			<para>The name, if it is a valid XML name.</para>
		</returns>
		<exception cref="XmlException"><paramref name="name"/> is not a valid XML name.</exception>
		<exception cref="ArgumentNullException"><paramref name="name"/> is <see langword="null"/> or String.Empty.</exception>
		<remarks>
			<para>This method can be used with the <see cref="System.Xml.XmlWriter"/> class in the following
   manner.
   </para>
			<code>
try{
  
  writer.WriteStartElement(XmlConvert.VerifyName("item"),"bar");
}
catch(Exception e)
{
  Console.WriteLine("error");
}
</code>
		</remarks>
		<example>
			<para>The following example uses the <see langword="VerifyName"/> method
   to write an element name.
   </para>
			<codelink SampleID="XmlConvert.VerifyName" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XmlConvert.VerifyNCName"/>
	</doc>
	<doc for="XmlConvert.VerifyNCName">
		<summary>
			<para>Verifies that the name is a valid NCName according to
      the W3C Extended Markup Language recommendation.</para>
		</summary>
		<param name="name">The name to verify.</param>
		<returns>
			<para>The name, if it is a valid NCName.</para>
		</returns>
		<exception cref="ArgumentNullException"><paramref name="name"/> is <see langword="null"/> or String.Empty.</exception>
		<exception cref="XmlException"><paramref name="name"/> is not a valid NCName.</exception>
		<remarks>
			<para>An NCName is a name that cannot contain a
      colon.</para>
		</remarks>
		<seealso cref="System.Xml.XmlConvert.VerifyName"/>
	</doc>
</docs>
