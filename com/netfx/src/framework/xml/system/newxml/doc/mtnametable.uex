<docs>
	<doc for="MTNameTable">
		
		<summary>
			<para>Implements a multi-thread safe <see cref="System.Xml.XmlNameTable"/> .</para>
		</summary>
		<remarks>
			<para>Because MTNameTable is thread-safe, there are performance and scalability 
      costs to using this class. However, since it is thread-safe, thread-safe
      code does not need to be written for your application.</para>
			<para>MTNameTable can be used safely in the ASP+ shared Application state.</para>
		</remarks>
		<seealso cref="System.Xml.NameTable"/>
	</doc>
	<doc for="MTNameTable.MTNameTable">
		<overload>
			<para>Initializes a new instance
      of the MTNameTable class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the MTNameTable
      class.</para>
		</summary>
		<param name="isThreadSafe"><see langword="true"/> to create a multi-thread safe XmlNameTable; <see langword="false"/> to create a non thread safe multi-threaded table</param>
		<param name=" timeout">The time to wait before releasing a lock when calling a method on this class (i.e. adding to the table).</param>
		<remarks>
   Constructs an empty MTNameTable.
</remarks>
	</doc>
	<doc for="MTNameTable.MTNameTable1">
		<summary>
			<para>Initializes a new instance of the MTNameTable class.</para>
		</summary>
		<param name="isThreadSafe"><see langword="true"/> to create a multi-thread safe XmlNameTable; <see langword="false"/> to create a non thread safe multi-threaded table</param>
		<remarks>
			<para>Constructs an empty MTNameTable. </para>
		</remarks>
	</doc>
	<doc for="MTNameTable.MTNameTable2">
		<summary>
			<para>Initializes a new instance of the MTNameTable class.</para>
		</summary>
		<remarks>
   Constructs an empty MTNameTable.
</remarks>
	</doc>
	<doc for="MTNameTable.GetEnumerator">
		<summary>
    Provides support for the "foreach" style iteration over
    the number of objects in the MTNameTable.
 </summary>
		<returns>
    An IEnumerator.
 </returns>
	</doc>
	<doc for="MTNameTable.Get">
		<overload>
			<para>Gets the atomized string
       object specified.</para>
		</overload>
		<summary>
			<para>Gets the atomized string object with the specified value.</para>
		</summary>
		<param name="value">The name to find in the MTNameTable</param>
		<returns>
			<para>The atomized string object or <see langword="null"/> if the string has not already been atomized.</para>
		</returns>
	</doc>
	<doc for="MTNameTable.Get1">
		<summary>
			<para>Gets the atomized string object.</para>
		</summary>
		<param name="key">The character array containing the name to find.</param>
		<param name="start">Zero based index into the array specifying the first character of the name.</param>
		<param name="len">The number of characters in the name.</param>
		<returns>
			<para>The atomized string or <see langword="null"/> if the string has not already been atomized. If <paramref name="len"/> is zero, String.Empty is returned.</para>
		</returns>
		<exception cref="IndexOutOfRangeException">if 0 &gt; offset &gt;= array.Length or 0 &gt; len &gt;= array.Length - offset.</exception>
	</doc>
	<doc for="MTNameTable.Add">
		<overload>
			<para>Creates a new atom for the
       specified string.</para>
		</overload>
		<summary>
			<para>Add the given string to the MTNameTable.</para>
		</summary>
		<param name="value">The name to add.</param>
		<returns>
			<para>The atomized string or the existing string if it already exists in the NameTable.</para>
		</returns>
	</doc>
	<doc for="MTNameTable.Add1">
		<summary>
    Add the string to the MTNameTable.
 </summary>
		<param name="key">The character array containing the name to add.</param>
		<param name="start">Zero based index into the array specifying the first character of the name.</param>
		<param name="len">The number of characters in the string.</param>
		<returns>
			<para>The atomized string or the exisiting atom if one already exists in the MTNameTable. If <paramref name="len"/> is zero, String.Empty is returned.</para>
		</returns>
		<exception cref="IndexOutOfRangeException">if 0 &gt; offset &gt;= array.Length or 0 &gt; len &gt;= array.Length - offset.</exception>
	</doc>
</docs>
