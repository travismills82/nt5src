<docs>
	<doc for="XmlAnyElementAttribute.XmlAnyElementAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> class.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> constructor when you are overriding 
   the serialization of a field. For more details about overriding serialization,
   see the <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class.</para>
		</remarks>
	</doc><doc for="XmlAnyElementAttribute.XmlAnyElementAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> class; specifies the XML element name
   generated in the XML document.</para>
		</summary>
		<param name="name">The name of the XML element that the <see cref="System.Xml.Serialization.XmlSerializer"/> generates.</param>
		<remarks>
			<para>Use the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> constructor when you are overriding
   the serialization of a field. For more details about overriding serialization,
   see the <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class.</para>
		</remarks>
	</doc><doc for="XmlAnyElementAttribute.XmlAnyElementAttribute2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> class; specifies the XML element name
   generated in the XML document and its XML namespace.</para>
		</summary>
		<param name="name">The name of the XML element that the <see cref="System.Xml.Serialization.XmlSerializer"/> generates.</param>
		<param name=" ns">The XML namespace of the XML element.</param>
		<remarks>
			<para>Use the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> constructor when you are overriding
   the serialization of a field. For more details about overriding serialization,
   see the <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class.</para>
		</remarks>
	</doc><doc for="XmlAnyElementAttribute.Name">
		<summary>
			<para>Gets or sets the XML element name.</para>
		</summary>
		<value>
			<para>The name of the XML element.</para>
		</value>
		<exception cref="System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property.</exception>
		<remarks>
			<para>If you specify a <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property value
   when applying the attribute, all <see cref="System.Xml.XmlElement"/> or <see cref="System.Xml.XmlNode"/> objects inserted into the array
   must have the same element name and default namespace, or an exception will be
   thrown. If you set the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property value,
   you must set the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property as
   well, and the <see cref="System.Xml.XmlElement"/> or <see cref="System.Xml.XmlNode"/> objects must also have the same name and namespace
   values. If no <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> value is
   specified, the <see cref="System.Xml.XmlElement"/> or <see cref="System.Xml.XmlNode"/> objects can have any element name.</para>
			<para>When you call the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> method of the <see cref="System.Xml.Serialization.XmlSerializer"/> class, all attributes that do not have
a corresponding member in the object being deserialized will be collected in the
array. If you specify a <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> value, the
array will contain only XML elements with that name. If you do not specify a
<see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> value, the 
array will contain all elements that have no corresponding member in the class.
If a class contains more than one field that to which the attribute is applied,
you should use the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> and <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> properties to differentiate
between the contents of the arrays. If such a class (with multiple fields)
also contains one field that has no differentiating property values set (that
is, <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> and <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/>) during
deserialization, the array will contain any XML elements that are not already
contained in the other arrays. If you add more than one field that doesn't have
a differentiating <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> or <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> value set, the
last field in the class will contain all unknown elements that are not already
contained in the other arrays, and any other fields will be set to
<see langword="null"/> .</para>
			<para>You can apply multiple instances of the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a class
member, but each instance must have a distinct <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property value.
Or, if the same <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property is set
for each instance, a distinct <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property value
must be set for each instance.</para>
		</remarks>
		<example>
			<codelink SampleID="XmlAnyElementAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlAnyElementAttribute.Namespace">
		<summary>
			<para>Gets or sets the XML namespace generated in the XML document.</para>
		</summary>
		<value>
			<para>An XML namespace.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property
   allows you to set a
   unique name for the XML attribute. The <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property
   conforms to the rules for creating an XML namespace as found in the World Wide
   Web Consortium (www.w3.org) document,
   "Namespaces in XML."</para>
			<para>To set the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property to a prefixed name,
create an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> that
contains the namespaces and prefixes used in the XML document. Set the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property to one of the namespaces
in the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> .
When the XML is generated, the
attribute name will be correctly prefixed with the prefix associated with the
specified namespace.</para>
		</remarks>
		<example>
			<codelink SampleID="XmlAnyElementAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlAnyElementAttribute">
		<summary>
			<para>Specifies that the member (a field that returns an array of <see cref="System.Xml.XmlElement"/> or
<see cref="System.Xml.XmlNode"/> 
objects) can contain objects that represent any XML element that has no
corresponding member in the object being serialized or deserialized.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to
   contain arbitrary data (as XML elements)
   that might be sent as part of an XML document, such as, metadata sent as part of
   the document.</para>
			<para>Apply the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a field
that returns an array of <see cref="System.Xml.XmlElement"/> or <see cref="System.Xml.XmlNode"/> objects. Such a field
can be used in two ways, depending on whether an object is being serialized or
deserialized. When serialized, the object will be generated as XML elements or
nodes, even though they have no corresponding member (or members) in the object
being serialized. If you specify a <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property value when applying the
attribute, all <see cref="System.Xml.XmlElement"/> or <see cref="System.Xml.XmlNode"/> objects inserted into the array must have the same
element name and default namespace, or an exception will be thrown. If you set
the <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property value, you must set the
<see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property as well, and the <see cref="System.Xml.XmlElement"/> or 
<see cref="System.Xml.XmlNode"/> 
objects must also have the same name and namespace values. If no <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> value is specified, the <see cref="System.Xml.XmlElement"/> or
<see cref="System.Xml.XmlNode"/> 
objects can have any element name.</para>
			<para>When you call the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> method of the <see cref="System.Xml.Serialization.XmlSerializer"/> class, all elements that do not have
a corresponding member in the object being deserialized will be collected in the
array. After deserialization, iterate through the collection of <see cref="System.Xml.XmlElement"/> items to
process the data. If you specify a <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> value, the array will contain only XML
elements with that name. If you do not specify a <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> value, the array will contain
all elements that have no corresponding member in the class. If a class
contains more than one field to which the attribute is applied, you should use the
<see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/>, or <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> and <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> properties to 
differentiate between the contents
of the arrays. If such a class (with multiple fields) also contains one field
that has no differentiating property values set (in other words, <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> and <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/>), during deserialization, this array will
contain any unknown XML elements that are not already contained in the other
arrays. If a class contains more than one field that doesn't have a differentiating
<see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/>, or <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> and <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> value set, the 
behavior during deserialization is unspecified.</para>
			<para>You can also apply the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a field
that returns a single <see cref="System.Xml.XmlElement"/> object. If you
do so, you will have to use the properties and methods of the <see cref="System.Xml.XmlElement"/> class to recursively
iterate through the unknown elements.</para>
			<para>You can apply multiple instances of the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a class member, but each instance
must have a distinct <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property value. Or,
if the same <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Name"/> property is set for each instance, a
distinct <see cref="System.Xml.Serialization.XmlAnyElementAttribute.Namespace"/> property
value must be set for each instance.</para>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.UnknownNode"/> and <see cref="System.Xml.Serialization.XmlSerializer.UnknownAttribute"/> events of the <see cref="System.Xml.Serialization.XmlSerializer"/> will not
occur if you apply the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a
member of a class. </para>
			<note type="note">
   In your code, you can use the word
<see langword="XmlAnyElement "/>instead of the longer <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> 
.
</note>
			<para> For more information about using attributes, see
<see topic="cpconExtendingMetadataUsingAttributes"/>
.</para>
		</remarks>
		<example>
			<para>The following example applies the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a field
   named <see langword="AllElements"/> that
   returns an array of <see cref="System.Xml.XmlElement"/> objects. </para>
			<codelink SampleID="Classic XmlAnyElementAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAnyAttributeAttribute"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
	</doc>
</docs>
