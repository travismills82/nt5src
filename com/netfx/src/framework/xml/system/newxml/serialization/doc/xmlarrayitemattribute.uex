<docs>
	<doc for="XmlArrayItemAttribute.XmlArrayItemAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> class;
   specifies
   the name of the XML element generated in the XML document.</para>
		</summary>
		<param name="elementName">The name of the XML element. </param>
		<remarks>
			<para>This overload sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> property.</para>
			<para>Use this overload if you want the name of
   the generated XML element to differ from the member's identifier. </para>
			<para> An XML document that includes namespaces can contain
   more than one version of an element name. For details, see the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> property.</para>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>Transportation</c> which contains a 
   field named <c>MyVehicles</c> that
returns an array of <c>Vehicle</c> objects. The example applies the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the
field, allowing the <see cref="System.Xml.Serialization.XmlSerializer"/>
to insert instances of the <c>Car</c> class, which is derived from the <c>Vehicle</c>class, into the
array. While applying the attribute, the example sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> property using the <paramref name="elementName "/> parameter.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlArrayItemAttribute.XmlArrayItemAttribute2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> class;
   specifies the <see cref="T:System.Type"/> that can be inserted into the serialized array.</para>
		</summary>
		<param name="type">The <see cref="T:System.Type"/> of the object to serialize.</param>
		<example>
			<para>The following example serializes a class named <c>Transportation</c> which contains a 
   field named <c>MyVehicles</c> that
returns an array of <c>Vehicle</c>objects. The example applies the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the
field, allowing the <see cref="System.Xml.Serialization.XmlSerializer"/>
to insert instances of the <c>Car</c> class, which is derived from the <c>Vehicle</c>class, into the
array. While applying the attribute, the example sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Type"/> property using the <paramref name="type "/> parameter.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlArrayItemAttribute.XmlArrayItemAttribute3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> class;
   specifies the
   name of the XML element generated in the XML document, and the
<see cref="T:System.Type"/> that can 
   be inserted into the generated XML document.</para>
		</summary>
		<param name="elementName">The name of the XML element.</param>
		<param name=" type">The <see cref="T:System.Type"/> of the object to serialize. </param>
		<remarks>
			<para>This overload sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> and the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Type"/>
properties.</para>
			<para>Use this overload if you want the name of the generated
   XML element to differ from the member's identifier. </para>
			<para>An XML document that includes namespaces can contain
   more than one version of an element name. For details, see the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> property.</para>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>Transportation</c> 
   which contains a
   field named <c>MyVehicles</c> that
returns an array of <c>Vehicle</c>objects. The example applies the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the
field, allowing the <see cref="System.Xml.Serialization.XmlSerializer"/>
to insert instances of the <c>Car</c> class, which is derived from the <c>Vehicle</c>class, into the
array. While applying the attribute, the example sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> property using the <paramref name="elementName "/>parameter, and
the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Type"/> property using
the <paramref name="type "/> parameter.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlArrayItemAttribute.ElementName">
		<summary>
			<para> Gets or sets the name of the generated XML element. </para>
		</summary>
		<value>
			<para>The name of the generated XML element. The default is the member identifier.</para>
		</value>
		<remarks>
			<para>Specify an <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> if you want the name
   of the generated XML element to differ from the member's identifier.</para>
			<para>You can set the same <see cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/> value to more
than one class member, if the generated XML document uses XML namespaces to distinguish
between identically named members. For details on how to use namespaces and
prefixed names in the XML document, see the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> class. </para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> property for 
   the <c>Vehicle</c>
and <c>Car</c>class--thereby changing the
names of XML elements that the <see cref="System.Xml.Serialization.XmlSerializer"/>
generates for those classes.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.ElementName Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlArrayItemAttribute.Type">
		<summary>
			<para> Gets or sets the type allowed in an array.</para>
		</summary>
		<value>
			<para>A <see cref="T:System.Type"/>
that is allowed in the array.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to
   specify an overridden
   type for a public field or public read/write
   property value.</para>
			<para>If a field or property returns an array of type <see cref="T:System.Object"/> , apply multiple instances of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the field or property. For each instance, set
the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to a type of object that can
be inserted into the array.</para>
			<para>If an array contains only primitive types, you need not
   apply the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/>. By default, the <see cref="System.Xml.Serialization.XmlSerializer"/>
   will generate a series of elements, each with
   the same element name, for each value, but the type of each element will
   be set to the XML Schema data type. For example, the following code:</para>
			<code>
' Visual Basic code
Public Class Arrays
   Public XSDTypes ()As Object= New Object(){"one", 2, 3.0}
End Class

// C# code
public class MyArray{
   // No XmlArrayItemAttribute is applied. 
   public object[] XSDTypes= new object[]{"one", 2, 3.2};
}
</code>
			<para>will result in this XML:</para>
			<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;XSDTypes&gt;
    &lt;Object xsi:type="xsd:string"&gt;one&lt;/Object&gt;
    &lt;Object xsi:type="xsd:int"&gt;2&lt;/Object&gt;
    &lt;Object xsi:type="xsd:double"&gt;3&lt;/Object&gt;
  &lt;/XSDTypes&gt;
&lt;/Arrays&gt;
</code>
			<para>However, if you specify the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Type"/> property for each primitive type, the
element name for each value will be generated using the .NET type name. For
example this code:</para>
			<code>
' Visual Basic code
Public Class Arrays
   &lt;XmlArrayItem(GetType(String)), _
   XmlArrayItem(GetType(Integer)), _
   XmlArrayItem(GetType(Double))&gt; _
   Public PrimitiveTypes () As Object = New Object(){"one", 2, 3.0}
End Class

// C# code
public class Arrays{
   [XmlArrayItem(typeof(string))]
   [XmlArrayItem(typeof(int))]
   [XmlArrayItem(typeof(double))]
   public object [] PrimitiveTypes = new object[]{"one", 2, 3.0};
}
</code>
			<para>will result in this XML:</para>
			<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;PrimitiveTypes&gt;
    &lt;string&gt;one&lt;/string&gt;
    &lt;int&gt;2&lt;/int&gt;
    &lt;double&gt;3&lt;/double&gt;
  &lt;/PrimitiveTypes&gt;
&lt;/Arrays&gt;
</code>
		</remarks>
		<example>
			<para>The following example serializes an array of objects. The
      field that returns the array is attributed with two <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> instances. Each instance instructs the
   <see cref="System.Xml.Serialization.XmlSerializer"/> to accept the specified <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Type"/> in the array.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.Type Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlArrayItemAttribute">
		<summary>
			<para>Specifies the derived types that the <see cref="System.Xml.Serialization.XmlSerializer"/> can place in a serialized array.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
belongs to a family of attributes that controls how the <see cref="System.Xml.Serialization.XmlSerializer"/> serializes, or deserializes,
an object. For a complete list of similar attributes, see <see topic="cpconAttributesThatControlSerialization"/> .</para>
			<para>You can apply the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to any
public read/write
member that returns an array, or provides access to one
(for example, a field that returns an array of objects, a collection, an
<see cref="System.Collections.ArrayList"/>, or any class 
that implements the <see cref="System.Collections.IEnumerable"/>
interface).</para>
			<para> The <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> supports
polymorphism--in other words, it allows the <see cref="System.Xml.Serialization.XmlSerializer"/> to add derived objects to an array.
For example, suppose a class named <c>Mammal</c>is derived from a base class named <c>Animal</c>. Further suppose that a class named <c>MyAnimals</c>contains a field that
returns an array of <c>Animal</c> objects. To allow
the <see cref="System.Xml.Serialization.XmlSerializer"/> to serialize both the <c>Animal</c> and <c>Mammal</c> type, apply the
<see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the field twice, each 
time specifying one of the two acceptable types.</para>
			<note type="note">
   You can apply multiple instances
   of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> or <see cref="System.Xml.Serialization.XmlElementAttribute"/> to specify
   types of objects that can be inserted into the array.
</note>
			<note type="note">
   The
   serialization of a field or property
   that returns an interface or array of interfaces is not supported.
</note>
			<para>For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
			<note type="note">
   In your code, you can use the word
<see langword="XmlArrayItem "/>
instead of the longer <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> .
</note>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>Group</c>, which contains a field named
   <c>Employees</c>that returns an
   array of <c>Employee</c>objects. The example
applies the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the field,
thereby instructing the <see cref="System.Xml.Serialization.XmlSerializer"/> that it can insert objects of both the
base class (<c>Employee</c>) type
and derived class type (<c>Manager</c>) into the serialized array. </para>
			<codelink SampleID="Classic XmlArrayItemAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes.XmlArrayItems"/>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconOverridingSerializationOfClassesWithXmlAttributeOverridesClass"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
	</doc><doc for="XmlArrayItemAttribute.XmlArrayItemAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> class.</para>
		</summary>
		<example>
			<para>The following example serializes a class named <c>Transportation</c>
   which contains a field named <c>MyVehicles</c> that returns an array of <c>Vehicle</c> objects. The example applies the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to the
field, allowing the <see cref="System.Xml.Serialization.XmlSerializer"/>
to insert instances of the <c>Car
</c>class, which is derived from the <c>Vehicle</c>class, into the array.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlArrayItemAttribute.DataType">
		<summary>
			<para>Gets or sets the XML data type of the generated XML element.</para>
		</summary>
		<value>
			<para> An XML Schema definition (XSD) data type, as defined by the World
      Wide Web Consortium (www.w3.org) document "XML Schema Part
      2: DataTypes".</para>
		</value>
		<remarks>
			<para>The following table lists the XML Schema
      simple data types with their
      .NET equivalents.</para>
			<para> For the XML Schema <see langword="base64Binary"/> and
<see langword="hexBinary"/> data types, use an array of <see cref="System.Byte"/> objects, and apply an <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> with the 
<see cref="System.Xml.Serialization.XmlArrayItemAttribute.DataType"/> property set to "base64Binary" 
   or "hexBinary", as appropriate. For the XML Schema <see langword="time"/>
   and <see langword="date "/>data types, use the <see cref="System.DateTime"/> type and apply
   the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> with the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.DataType"/>
   set to "date" or "time".</para>
			<para> For every XML
   Schema type that is mapped to a string, apply the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> with its <see cref="System.Xml.Serialization.XmlArrayItemAttribute.DataType"/> property set to the
   XML Schema type. However, this will not change the serialization format, only the
   schema for the member.</para>
			<note type="note">
   The
   property is case-sensitive, so you must set
   it exactly to one of
   the XML Schema data
   types.
</note>
			<note type="note">
   Passing binary data as an XML
   element is more efficient then passing it as an XML attribute.
</note>
			<para> For more information about XML Schema data types, see the
   World Wide Web Consortium (www.w3.org) document "XML Schema Part
   2: Datatypes."</para>
			<list type="table">
				<listheader>
					<term> XSD data type</term>
					<description> .NET data type</description>
				</listheader>
				<item>
					<term> anyURI</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> base64Binary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> boolean</term>
					<description><see cref="T:System.Boolean"/></description>
				</item>
				<item>
					<term> byte</term>
					<description><see cref="T:System.SByte"/></description>
				</item>
				<item>
					<term> date</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> dateTime</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> decimal</term>
					<description><see cref="T:System.Decimal"/></description>
				</item>
				<item>
					<term> double</term>
					<description><see cref="T:System.Double"/></description>
				</item>
				<item>
					<term> ENTITY</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> ENTITIES</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> float</term>
					<description><see cref="T:System.Single"/></description>
				</item>
				<item>
					<term> gDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonthDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYear</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYearMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> hexBinary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> ID</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREF</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREFS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> int</term>
					<description><see cref="T:System.Int32"/></description>
				</item>
				<item>
					<term> integer</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> language</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> long</term>
					<description><see cref="T:System.Int64"/></description>
				</item>
				<item>
					<term> Name</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NCName </term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> negativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKEN</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKENS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> normalizedString</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonNegativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonPositiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NOTATION</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> positiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> QName</term>
					<description><see cref="System.Xml.XmlQualifiedName"/></description>
				</item>
				<item>
					<term> duration</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> string</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> short</term>
					<description><see cref="T:System.Int16"/></description>
				</item>
				<item>
					<term> time</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> token</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> unsignedByte</term>
					<description><see cref="T:System.Byte"/></description>
				</item>
				<item>
					<term> unsignedInt</term>
					<description><see cref="T:System.UInt32"/></description>
				</item>
				<item>
					<term> unsignedLong</term>
					<description><see cref="T:System.UInt64"/></description>
				</item>
				<item>
					<term> unsignedShort</term>
					<description><see cref="T:System.UInt16"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>PurchaseOrder</c>. Several instances of the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> class are applied to three
members, and the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.DataType"/> property for each
instance is set to a type allowed in the array.</para>
			<codelink SampleID="XmlArrayItemAttribute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlArrayItemAttribute.Form">
		<summary>
			<para>Gets or sets a value indicating whether the name of the generated XML element is
      qualified.</para>
		</summary>
		<value>
			<para>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"/> values. The default is
<see langword="XmlSchemaForm.None"/>.</para>
		</value>
		<exception cref="System.Exception">The <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Form"/> property is set to <see langword="XmlSchemaForm.Unqualified"/> and a <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Namespace"/> value is specified.</exception>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlAttributeAttribute.Form"/>
property determines whether an XML element name is qualified, based on the World Wide
Web Consortium (www.w3.org) specification "Namespaces in
XML."</para>
			<para>If the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Namespace"/> property is set to any
value, attempting to set the <see cref="System.Xml.Serialization.XmlElementAttribute.Form"/> property to
<see langword="XmlSchemaForm.Unqualified "/> throws an 
exception.</para>
			<para>The default value, <see langword="XmlSchemaForm.None"/>, instructs the
<see cref="System.Xml.Serialization.XmlSerializer"/> to check 
the schema for the XML document to determine whether the namespace is qualified.
For elements, the <see cref="System.Xml.Serialization.XmlSerializer"/>
checks the value of the
schema-element attribute <see langword="elementFormDefault"/>. For attributes, it checks the value of the schema-element attribute <see langword="attributeFormDefault"/>. For example, the following
XML Schema indicates that the <c>Name</c> element is qualified, while the <c>Number</c> element is
unqualified.</para>
			<code>
&lt;schema elementFormDefault="qualified" 
attributeFormDefault="unqualified"&gt;
   &lt;element name="Name"/&gt;
   &lt;attribute name="Number"/&gt;
&lt;/schema&gt;
</code>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Form"/> property for the 
   <c>Vehicle</c>class to
<see langword="XmlSchemaForm.Unqualified"/>, and the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Form"/> property for the 
<c>Car</c>class to <see langword="XmlSchemaForm.Qualified"/>.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.Form Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlArrayItemAttribute.IsNullable">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Xml.Serialization.XmlSerializer"/> should
   serialize a member as an empty XML tag with the <see langword="xsi:nil "/>attribute set to <see langword="true"/>.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the
<see cref="System.Xml.Serialization.XmlSerializer"/> 
generates the <see langword="xsi:nil "/>attribute; otherwise,
<see langword="false"/>, and no instance is generated. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>The XML schema specification for structures allows an XML
      document to explicitly signal that an element's content is missing. Such an
      element contains the attribute <see langword="xsi:nil "/>set to
   <see langword="true"/>. For more information, see the
      World Wide Web Consortium (www.w3.org)
      specification titled "XML Schema Part 1: Structures." </para>
			<para>If the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable"/> property is
<see langword="true"/>, the <see langword="xsi:nil"/> attribute is generated for 
   class members that have been set to <see langword="null"/>. For example,
   if you set a field named <c>MyStringArray</c>
to <see langword="null"/> , the <see cref="System.Xml.Serialization.XmlSerializer"/> generates the following XML code.</para>
			<code>
&lt;MyStringArray xsi:nil = "true" /&gt;
</code>
			<para>If the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable"/> property is
<see langword="false"/> , no XML element is generated. </para>
			<note type="note">
   You cannot apply the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable"/> property to a member typed as a value
   type because a value type cannot contain <see langword="null"/>.
</note>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>Group</c>, which contains a field
   named <c>Employees</c> that
returns an array of <c>Employee</c> objects. A second class named <c>Manager</c> derives from <c>Employee</c>
. An <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
specifies that the <see cref="System.Xml.Serialization.XmlSerializer"/> can insert
both <c>Employee</c>
and <c>Manager</c>
objects into the array. The example sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable"/> property,
thereby telling the <see cref="System.Xml.Serialization.XmlSerializer"/>
not to generate the <see langword="xsi:nil"/> attribute objects in the array set to
<see langword="null"/>
.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.IsNullable Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlArrayItemAttribute.Namespace">
		<summary>
			<para> Gets or sets
      the namespace of the generated XML element.</para>
		</summary>
		<value>
			<para> The namespace of the generated XML element.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Namespace"/> 
property conforms to the World Wide Web Consortium (www.w3.org) specification "Namespaces in XML."</para>
			<para> To create namespaces to use in the XML document and associated prefixes, you must
   create an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/>
   
   that contains all the prefix-namespace pairs. The namespace you set for each <see cref="System.Xml.Serialization.XmlArrayAttribute"/>
   must be contained in the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> .
   When the <see cref="System.Xml.Serialization.XmlSerializer"/>
   generates the document, it correctly prefixes the element
   name for each array item. </para>
		</remarks>
		<example>
			<para>The following example applies an <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> and sets the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Namespace"/>
property.</para>
			<codelink SampleID="Classic XmlArrayItemAttribute.Namespace Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlArrayItemAttribute.NestingLevel">
		<summary>
			<para>Gets or sets the level in a hierarchy of XML elements
      that the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> affects.</para>
		</summary>
		<value>
			<para>The zero-based index of a set of indexes in an array of arrays.</para>
		</value>
		<remarks>
			<para> An XML document can contain hierarchies of XML elements.
      To represent such a hierarchy, an array of arrays is used. In such an array,
      each index represents a level in the hierarchy. Therefore, the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel"/> property is only
      used when applying an <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
      
      to a field that returns an array of arrays.</para>
			<para> When applying the attribute, specify which
      hierarchy level the attribute affects by setting the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel"/> . The first
      index always has the value of 0;
      therefore it is optional to set its <see cref="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel"/> --an
   <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> without a <see cref="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel"/> value will be applied to the first
      array index. Only the subsequent <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> objects need <see cref="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel"/> values
      
      specified (as 1, 2, 3, and so forth).</para>
		</remarks>
		<example>
			<para>The following example applies three <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> attributes to an array of arrays. To
   specify which of the arrays each attribute applies to, the <see cref="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel"/>
   property is set to the index of the arrays.</para>
			<codelink SampleID="NestingLevel" SnippetID="1"/>
		</example>
	</doc>
</docs>
