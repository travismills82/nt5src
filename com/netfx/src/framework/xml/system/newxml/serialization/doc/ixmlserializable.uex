<docs>
	<doc for="IXmlSerializable.ReadXml">
		<summary>
			<para>Converts an XML document into an object using the specified reader.</para>
		</summary>
		<param name="reader">The <see cref="System.Xml.XmlReader"/> used to read the XML document.</param>
		<remarks>
			<para>The reader is positioned within the stream at the point 
      that you began writing (in <see cref="System.Xml.Serialization.IXmlSerializable.WriteXml"/>). It is your
      responsibility to read everything you wrote, no less and no more.</para>
		</remarks>
	</doc><doc for="IXmlSerializable.WriteXml">
		<summary>
			<para>Converts the serializable members of an object into an XML document.</para>
		</summary>
		<param name="writer">The XmlWriter used to write the XML-document instance.</param>
		<remarks>
			<para>You must write enough information to be able to implement
 the <see cref="System.Xml.Serialization.IXmlSerializable.ReadXml"/> method correctly. For example, if you
 are writing a list of elements, you provide a way to know how many you wrote so
 that <see cref="System.Xml.Serialization.IXmlSerializable.ReadXml"/> knows how when to stop reading. There
 are three ways to do this:</para>
			<list type="table">
					<listheader>
						<term>Method</term>
						<description>Example</description>
					</listheader>
					<item>
						<term> Write an initial count in the XML-instance
 document.</term>
						<description>
							<para><c>&lt;count&gt;5&lt;/count&gt;</c></para>
							<para><c>
								&lt;item&gt; ... &lt;/item&gt;
							</c></para></description>
					</item>
					<item>
						<term> Write an end marker in the XML-instance document.</term>
						<description><para><c>
								 &lt;item&gt;
 ...&lt;/item&gt;
							</c></para>
							<para><c>
								&lt;endItems/&gt;
							</c></para></description>
					</item>
					<item>
						<term> Write a single container.</term>
						<description><para><c>
								&lt;items&gt;
							</c></para>
							<para><c>
								 &lt;item&gt;... &lt;/item&gt;
							</c></para>
							<para><c>
								 &lt;item&gt; ... &lt;/item&gt;
							</c></para>
							<para><c>
								&lt;/items&gt;
							</c></para></description>
					</item>
			</list>
			<para>To test, you should serialize two instances of the object
 back-to-back, then deserialize both instances.</para>
		</remarks>
	</doc><doc for="IXmlSerializable.GetSchema">
		<returns>
			<para>An <see cref="System.Xml.Schema.XmlSchema"/> object that represents the XML schema.</para>
		</returns>
		<remarks>
			<para>This optional method is used by webserviceutil to create
      a callable web service client class from the returned <see cref="System.Xml.Schema.XmlSchema"/>
      object. This method is not needed to do simple runtime XML serialization.</para>
		</remarks>
	</doc><doc for="IXmlSerializable">
		<nodoc/>
		<internalonly/>
		<summary>
			<para>Provides a custom serialization format for a serializable object.</para>
		</summary>
		<remarks>
			<para>Examples of classes that implement this interface are <see cref="T:System.Data.DataSet"/> and <see cref="System.Xml.XmlDocument"/>. This is
   different from the <see cref="System.Runtime.Serialization.ISerializable"/> interface in that it is totally
   XML-centric and stream based in the sense that large amounts of XML can be
   incrementally streamed through the <see cref="M:System.Data.DataSet.ReadXml"/> and <see cref="M:System.Data.DataSet.WriteXml"/> methods.</para>
		</remarks>
	</doc></docs>
