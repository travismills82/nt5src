<docs>
	<doc for="XmlRootAttribute.Form">
		<summary>
			<para>Gets or sets a value indicating whether the name of the XML
      root element is qualified.</para>
		</summary>
		<value>
			<para>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"/> values. The default is <see langword="XmlSchemaForm.None"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlAttributeAttribute.Form"/>
property determines whether an XML element name is
qualified, based on the http://www.w3.org specification <paramref name="Namespaces in
XML"/>.</para>
			<para>If the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Namespace"/> property is set to any
value, attempting to set the <see cref="System.Xml.Serialization.XmlElementAttribute.Form"/> property to
<see langword="XmlSchemaForm.Unqualified "/> throws an 
exception.</para>
The default value, <see langword="XmlSchemaForm.None"/>, instructs the
<see cref="System.Xml.Serialization.XmlSerializer"/> to check 
the schema for the XML document to determine whether the namespace is qualified.
For elements, the XmlSerializer checks the value of the
schema-element attribute <see langword="elementFormDefault. "/>For attributes, it checks the value of the schema-element attribute <see langword="attributeFormDefault . "/>For example, the following
schema indicates that the <see langword="Name "/>element is qualified, while the
<see langword="Number "/> element is
unqualified:
<code>
&lt;schema elementFormDefault="qualified" 
attributeFormDefault="unqualified"&gt;
   &lt;element name="Name"/&gt;
   &lt;attribute name="Number"/&gt;
&lt;/schema&gt;
</code></remarks>
		<example>
			<para>The following example sets the <see cref="System.Xml.Serialization.XmlRootAttribute.Form"/> property of an
<see cref="System.Xml.Serialization.XmlRootAttribute"/>.</para>
			<codelink SampleID="Classic XmlRootAttribute.Form Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlRootAttribute.XmlRootAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlRootAttribute"/> class, and uses the class name as the
   name of the XML root element.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlRootAttribute"/> class.</para>
		</summary>
		<example>
			<para>The following example creates an instance of an <see cref="System.Xml.Serialization.XmlRootAttribute"/> and 
   assigns it to the <see cref="System.Xml.Serialization.XmlAttributes.XmlRoot"/> property of an <see cref="System.Xml.Serialization.XmlAttributes"/> object.
   When the <see cref="System.Xml.Serialization.XmlSerializer"/> serializes the <see langword="MyClass "/>object, it uses the <see cref="System.Xml.Serialization.XmlRootAttribute"/>
   object to override the default root element.</para>
			<codelink SampleID="Classic XmlRootAttribute.XmlRootAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributes.XmlRoot"/>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
	</doc>
	<doc for="XmlRootAttribute.Namespace">
		<summary>
			<para> Gets or sets the namespace for the
      XML root element.</para>
		</summary>
		<value>
			<para>The namespace for the XML element.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Namespace"/> property 
   conforms to the World Wide Web Consortium (www.w3.org
   ) specification named <paramref name="Namespaces in XML"/> .</para>
			<para>To create prefixed namespaces in the
   XML document, create an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> object that contains
   all the prefix-namespace pairs. The namespace you set for each <see cref="System.Xml.Serialization.XmlArrayAttribute"/> must be contained in the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> object. When the <see cref="System.Xml.Serialization.XmlSerializer"/> generates the document, it correctly
   prefixes the element name for each array item.</para>
		</remarks>
		<example>
			<para> The following example applies the
   <see cref="System.Xml.Serialization.XmlRootAttribute"/> to a class and sets
      the <see cref="System.Xml.Serialization.XmlRootAttribute.Namespace"/> property.</para>
			<codelink SampleID="Classic XmlRootAttribute.Namespace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes.XmlRoot"/>
	</doc><doc for="XmlRootAttribute.IsNullable">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Xml.Serialization.XmlSerializer"/> should serialize a member that is set
   to <see langword="null "/>into the <see langword="xsi:nil "/>attribute set to
<see langword="true"/>.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the <see cref="System.Xml.Serialization.XmlSerializer"/> generates the
<see langword="xsi:nil"/> attribute; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>The XML schema specification for structures allows an XML
      document to explicitly signal that an element's content is missing. Such an
      element contains the attribute <see langword="xsi:nil "/>set to
   <see langword="true"/>. For more information, see the
      http://www.w3.org/TR/xmlschema-1/ specification named <paramref name="XML Schema Part 1:
      Structures"/>
      . </para>
			<para>If the <see cref="System.Xml.Serialization.XmlRootAttribute.IsNullable"/> property is set to
<see langword="true"/>, the <see langword="xsi:nil"/> attribute is generated as shown in the following XML:</para>
			<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:nil="true" /&gt;
</code>
			<para>If the <see cref="System.Xml.Serialization.XmlRootAttribute.IsNullable"/> property is
<see langword="false"/> , an empty element is created as shown below: </para>
			<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" /&gt;
</code>
		</remarks>
		<example>
			<para> The following example serializes a class named
      Group. The example applies the <see cref="System.Xml.Serialization.XmlRootAttribute"/> to the class, and sets the <see cref="System.Xml.Serialization.XmlRootAttribute.IsNullable"/> property to
   <see langword="false"/>.</para>
			<codelink SampleID="Classic XmlRootAttribute.IsNullable Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlRootAttribute.DataType">
		<summary>
			<para>Gets or sets the XSD data type of the XML root element.</para>
		</summary>
		<value>
			<para>An XSD (XML Schema Document) data type, as defined by the 
      World Wide Web Consortium (www.w3.org
      ) document named "XML Schema: DataTypes".</para>
		</value>
		<remarks>
			<para>The following table lists the XSD
      simple data types with their
      .NET equivalents.</para>
			<para> For the XSD <see langword="base64Binary"/> and
<see langword="hexBinary"/> data types, use an array of <see cref="System.Byte"/> structures, and apply a <see cref="System.Xml.Serialization.XmlRootAttribute"/> with the 
<see cref="System.Xml.Serialization.XmlRootAttribute.DataType"/> property set to 
   "base64Binary" or "hexBinary", as appropriate. For the XSD <see langword="time"/>
   and <see langword="date "/>data types, use the <see cref="System.DateTime"/> type and apply
   the <see cref="System.Xml.Serialization.XmlRootAttribute"/> with the <see cref="System.Xml.Serialization.XmlRootAttribute.DataType"/>
   set to "date"
   or "time".</para>
			<para> For every
   XSD type that is mapped to a string, apply the <see cref="System.Xml.Serialization.XmlRootAttribute"/> with its <see cref="System.Xml.Serialization.XmlRootAttribute.DataType"/> property set to
   the XSD type. However, this will not change the serialization format, only the
   schema for the member.</para>
			<note type="note">
   The property is case-sensitive, so you must
   set it exactly to one
   of the XSD data
   types.
</note>
			<note type="note">
   Passing binary data as an XML
   element is more efficient then passing it as an XML attribute.
</note>
			<para>For more information about XML data types, see the World
   Wide Web Consortium (www.w3.org ) document named "XML Schema Part
   2: Datatypes".</para>
			<list type="table">
				<listheader>
					<term> XSD data type</term>
					<description> .NET data type</description>
				</listheader>
				<item>
					<term> anyURI</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> base64Binary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> boolean</term>
					<description><see cref="T:System.Boolean"/></description>
				</item>
				<item>
					<term> byte</term>
					<description><see cref="T:System.SByte"/></description>
				</item>
				<item>
					<term> date</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> dateTime</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> decimal</term>
					<description><see cref="T:System.Decimal"/></description>
				</item>
				<item>
					<term> double</term>
					<description><see cref="T:System.Double"/></description>
				</item>
				<item>
					<term> ENTITY</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> ENTITIES</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> float</term>
					<description><see cref="T:System.Single"/></description>
				</item>
				<item>
					<term> gDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonthDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYear</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYearMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> hexBinary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> ID</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREF</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREFS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> int</term>
					<description><see cref="T:System.Int32"/></description>
				</item>
				<item>
					<term> integer</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> language</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> long</term>
					<description><see cref="T:System.Int64"/></description>
				</item>
				<item>
					<term> Name</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NCName </term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> negativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKEN</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKENS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> normalizedString</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonNegativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonPositiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NOTATION</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> positiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> QName</term>
					<description><see cref="System.Xml.XmlQualifiedName"/></description>
				</item>
				<item>
					<term> recurringDate</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> duration</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> string</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> short</term>
					<description><see cref="T:System.Int16"/></description>
				</item>
				<item>
					<term> time</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> token</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> unsignedByte</term>
					<description><see cref="T:System.Byte"/></description>
				</item>
				<item>
					<term> unsignedInt</term>
					<description><see cref="T:System.UInt32"/></description>
				</item>
				<item>
					<term> unsignedLong</term>
					<description><see cref="T:System.UInt64"/></description>
				</item>
				<item>
					<term> unsignedShort</term>
					<description><see cref="T:System.UInt16"/></description>
				</item>
			</list>
		</remarks>
	</doc><doc for="XmlRootAttribute.XmlRootAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlRootAttribute"/> class, and specifies the name of the
   XML root element.</para>
		</summary>
		<param name="elementName">The name of the XML root element.</param>
		<example>
			<para>The following example creates an instance of the 
      XmlRootAttribute and uses it to override the serialization of an instance of A
      class named "Student". </para>
			<codelink SampleID="XMLRootAttribute_Constructor" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlRootAttribute.ElementName"/>
	</doc><doc for="XmlRootAttribute.ElementName">
		<summary>
			<para>Gets or sets the name of the XML element that is
      generated and recognized by the <see cref="System.Xml.Serialization.XmlSerializer"/> class's
   <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> and <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> methods,
      respectively.</para>
		</summary>
		<value>
			<para>The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.</para>
		</value>
		<remarks>
			<para>Specify an <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> if you want the
   name of the generated XML element to differ from the class name.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the <see cref="System.Xml.Serialization.XmlRootAttribute"/> class and 
   sets the <see cref="System.Xml.Serialization.XmlRootAttribute.ElementName"/> property to a new value. The object is
   then used to create an <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> object used to override the serialization
   of an object. </para>
			<codelink SampleID="XMLRootAttribute_ElementName" SnippetID="1"/>
		</example>
	</doc><doc for="XmlRootAttribute">
		<summary>
			<para> Controls XML serialization of the attribute target as an XML root
      element.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlRootAttribute"/> belongs to
   a family of attributes that controls how the <see cref="System.Xml.Serialization.XmlSerializer"/>
   serializes, or deserializes, an object. For a complete list of similar
   attributes, see <see topic="cpconAttributesThatControlSerialization"/> .</para>
			<para>You can apply the <see cref="System.Xml.Serialization.XmlRootAttribute"/> to a class, struct, enumeration, or
interface. You can also apply the attribute to the return value of an XML Web service method.</para>
			<para> Every XML document must have a single root
   element that contains all the other elements. The <see cref="System.Xml.Serialization.XmlRootAttribute"/> allows you to control how the
<see cref="System.Xml.Serialization.XmlSerializer"/> generates 
   the root element by setting certain
   properties. For example, specify the name of the generated XML element by
   setting the <see cref="System.Xml.Serialization.XmlRootAttribute.ElementName"/>
   
   property.</para>
			<para>For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
			<note type="note">
   In your code, you can use the word
<see langword="XmlRoot "/>
instead of the longer <see cref="System.Xml.Serialization.XmlRootAttribute"/>.
</note>
		</remarks>
		<example>
			<para>The following example applies the <see cref="System.Xml.Serialization.XmlRootAttribute"/> to a class. The attribute specifies the
   element name, namespace, and whether the element is qualified, and whether the
<see langword="xsi:nil "/>attribute will be generated 
   if the class is set to <see langword="null"/>
   .</para>
			<codelink SampleID="Classic XmlRootAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlElementAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconOverridingSerializationOfClassesWithXmlAttributeOverridesClass"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
	</doc>
</docs>
