<docs>
	<doc for="XmlTextAttribute.XmlTextAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlTextAttribute"/> class.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> of the member to be serialized.</param>
		<remarks>
			<para>You can override the way that the <see cref="System.Xml.Serialization.XmlSerializer"/> serializes a public
   field or public read/write property by creating an <see cref="System.Xml.Serialization.XmlAttributes"/> , and setting its <see cref="System.Xml.Serialization.XmlAttributes.XmlText"/> property to an <see cref="System.Xml.Serialization.XmlTextAttribute"/> . For more details, see the
<see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic XmlTextAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextAttribute.Type">
		<summary>
			<para>Gets or sets the type of the member.</para>
		</summary>
		<value>
			<para>The <see cref="T:System.Type"/> of the member.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Type"/>
property can only be set to primitive types and enumerations.</para>
			<para>The <see cref="System.Xml.Serialization.XmlTextAttribute"/> can also be applied to a field that
returns an <see cref="System.Xml.XmlNode"/> or an array of <see cref="System.Xml.XmlNode"/> objects.</para>
			<para>You can apply the <see cref="System.Xml.Serialization.XmlTextAttribute"/> to a field or property that returns an
array of strings. You can also apply the attribute to an array of type <see cref="System.Object"/> but you must set the
<see cref="System.Xml.Serialization.XmlTextAttribute.Type"/> property to string. In that case, any 
strings inserted into the array will be serialized as XML text. </para>
		</remarks>
		<example>
			<codelink SampleID="Classic XmlTextAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextAttribute.XmlTextAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlTextAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlTextAttribute"/> class.</para>
		</summary>
		<remarks>
			<para>You can override the way that the <see cref="System.Xml.Serialization.XmlSerializer"/> serializes a public field or public
   read/write property by creating an <see cref="System.Xml.Serialization.XmlAttributes"/> , and setting its <see cref="System.Xml.Serialization.XmlAttributes.XmlText"/> property to an <see cref="System.Xml.Serialization.XmlTextAttribute"/> . For more details, see the <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class.</para>
		</remarks>
		<example>
			<para>The following example serializes a class that contains a 
      public field, named <c>Comment</c>
   . The example applies an <see cref="System.Xml.Serialization.XmlTextAttribute"/> to the
   field, thereby overriding its serialization as an XML element, and instead serializing it as XML
   text.</para>
			<codelink SampleID="Classic XmlTextAttribute.XmlTextAttribute Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlTextAttribute">
		<summary>
			<para>Indicates to the <see cref="System.Xml.Serialization.XmlSerializer"/> that the member should be treated as
   XML text when the containing class is serialized or deserialized.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlTextAttribute"/> belongs to a family of attributes that
   controls how the <see cref="System.Xml.Serialization.XmlSerializer"/>
   serializes and deserializes an object (through its
<see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> and <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> methods). 
   See <see topic="cpconAttributesThatControlSerialization"/> for a complete list of
   similar attributes.</para>
			<para>Only one instance of the <see cref="System.Xml.Serialization.XmlTextAttribute"/> class can be applied in
a class.</para>
			<para>You can apply the <see cref="System.Xml.Serialization.XmlTextAttribute"/> to public fields and public read/write
properties that return primitive
and enumeration types.</para>
			<para>You can apply the <see cref="System.Xml.Serialization.XmlTextAttribute"/> to a field or property that returns an
array of strings. You can also apply the attribute to an array of type <see cref="System.Object"/> but you must set the
<see cref="System.Xml.Serialization.XmlTextAttribute.Type"/> property to string. 
In that case, any strings inserted into the array will be serialized as XML
text. </para>
			<para>The <see cref="System.Xml.Serialization.XmlTextAttribute"/> can also be applied to a field that
returns an <see cref="System.Xml.XmlNode"/> or an array of <see cref="System.Xml.XmlNode"/> objects.</para>
			<para> By
   default, the <see cref="System.Xml.Serialization.XmlSerializer"/>
   serializes a class member as an XML element. However, if you apply the
<see cref="System.Xml.Serialization.XmlTextAttribute"/> to a member, the <see cref="System.Xml.Serialization.XmlSerializer"/> translates its value into XML text. This means
   that the value will be encoded into the content of
   an XML element. </para>
			<para>The <see topic="cpconXMLSchemaDefinitionToolXsdexe"/> occasionally generates the <see cref="System.Xml.Serialization.XmlTextAttribute"/> when
creating classes from an XML Schema
definition (XSD) file. This occurs when the schema contains a <c>complexType</c> with mixed
content; in that case, the corresponding class will contain a member that
returns a string array to which the <see cref="System.Xml.Serialization.XmlTextAttribute"/> is applied. For
example, when the <see langword="Xml Schema Definition"/> tool
processes this schema:</para>
			<code>
&lt;xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="" 

xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="LinkList" type="LinkList" /&gt;
  &lt;xs:complexType name="LinkList" mixed="true"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element minOccurs="1" maxOccurs="1" name="id" type="xs:int" /&gt;
      &lt;xs:element minOccurs="0" maxOccurs="1" name="name" type="xs:string" /&gt;
      &lt;xs:element minOccurs="0" maxOccurs="1" name="next" type="LinkList" /&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</code>
			<para>the following class will be generated:</para>
			<code>
' Visual Basic code
Public Class LinkList 
   Public id As Integer
   Public string name
   Public LinkList next
   &lt;System.Xml.Serialization.XmlTextAttribute()&gt; _
   Public Text() As string
End Class

// C# code
public class LinkList {
   public int id;
   public string name;
   public LinkList next;
   [System.Xml.Serialization.XmlTextAttribute()]
   public string[] Text;
}
</code>
			<para>For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
			<note type="note">
   In your code, you can use the word
<see langword="XmlText "/>
instead of the longer <see cref="System.Xml.Serialization.XmlTextAttribute"/>.
</note>
		</remarks>
		<example>
			<codelink SampleID="Classic XmlTextAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes.XmlText"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconOverridingSerializationOfClassesWithXmlAttributeOverridesClass"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
	</doc><doc for="XmlTextAttribute.DataType">
		<summary>
			<para> Gets or sets the XML Schema definition language (XSD) data type of the text
      generated by the <see cref="System.Xml.Serialization.XmlSerializer"/>.</para>
		</summary>
		<value>
			<para> An XML Schema (XSD) data type, as defined by the World
      Wide Web Consortium (www.w3.org )
      document "XML Schema Part 2: Datatypes".</para>
		</value>
		<exception cref="System.Exception">The XML Schema data type you've specified cannot be mapped to the .NET data type.</exception>
		<exception cref="System.InvalidOperationException"><para>The XML Schema data type you've specified is invalid for the property and cannot be converted to the member type.</para></exception>
		<remarks>
			<para>Setting the <see cref="System.Xml.Serialization.XmlTextAttribute.DataType"/> property to an XML
   Schema simple data type affects the format of the generated XML. For example,
   setting the property to "date" causes the generated text to be formatted in the
   general date style, for example: 2001-08-31. By contrast, setting the property
   to "dateTime" results in a specific instant as defined by the International
   Organization for Standardization document 8601, "Representations of Dates
   and Times", for example: 2001-08-15T06:59:11.0508456-07:00.</para>
			<para>The effect of setting the <see cref="System.Xml.Serialization.XmlTextAttribute.DataType"/> property can also be seen
when using the <see topic="cpconXMLSchemaDefinitionToolXsdexe"/> to generate the XML Schema for a compiled
file. For more information on using the tool, see <see topic="cpconUsingXMLSchemaDefinitionTool"/>.</para>
			<para>The following table lists the XML
   Schema simple data types with their
   .NET equivalents.</para>
			<para> For the XML Schema <see langword="base64Binary"/> and
<see langword="hexBinary"/> data types, use an array of <see cref="System.Byte"/> structures, and apply a <see cref="System.Xml.Serialization.XmlTextAttribute"/> with the <see cref="System.Xml.Serialization.XmlTextAttribute.DataType"/> set to 
"base64Binary" or "hexBinary", as appropriate. For the XML Schema <see langword="time"/>
and <see langword="date "/>data types, use the <see cref="System.DateTime"/> type and apply the <see cref="System.Xml.Serialization.XmlTextAttribute"/> with the <see cref="System.Xml.Serialization.XmlTextAttribute.DataType"/>
set to "date" or "time".</para>
			<para> For every XML Schema data type that is mapped to a
   string, apply the <see cref="System.Xml.Serialization.XmlTextAttribute"/>
   with its <see cref="System.Xml.Serialization.XmlTextAttribute.DataType"/> property set to the XML Schema
   data type. Note that this will not change the serialization format, only the
   schema for the member.</para>
			<note type="note">
   The property is case-sensitive, so you must set it exactly to one of the XML Schema data types.
</note>
			<note type="note">
   Passing binary data as an XML
   element is more efficient then passing it as an XML attribute.
</note>
			<para>For more information about XML Schema data types, see the World Wide
   Web Consortium (www.w3.org) document named "XML Schema Part
   2: Datatypes".</para>
			<list type="table">
				<listheader>
					<term> XSD data type</term>
					<description> .NET data type</description>
				</listheader>
				<item>
					<term> anyURI</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> base64Binary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> boolean</term>
					<description><see cref="T:System.Boolean"/></description>
				</item>
				<item>
					<term> byte</term>
					<description><see cref="T:System.SByte"/></description>
				</item>
				<item>
					<term> date</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> dateTime</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> decimal</term>
					<description><see cref="T:System.Decimal"/></description>
				</item>
				<item>
					<term> double</term>
					<description><see cref="T:System.Double"/></description>
				</item>
				<item>
					<term> ENTITY</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> ENTITIES</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> float</term>
					<description><see cref="T:System.Single"/></description>
				</item>
				<item>
					<term> gDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonthDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYear</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYearMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> hexBinary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> ID</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREF</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREFS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> int</term>
					<description><see cref="T:System.Int32"/></description>
				</item>
				<item>
					<term> integer</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> language</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> long</term>
					<description><see cref="T:System.Int64"/></description>
				</item>
				<item>
					<term> Name</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NCName </term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> negativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKEN</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKENS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> normalizedString</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonNegativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonPositiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NOTATION</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> positiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> QName</term>
					<description><see cref="System.Xml.XmlQualifiedName"/></description>
				</item>
				<item>
					<term> duration</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> string</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> short</term>
					<description><see cref="T:System.Int16"/></description>
				</item>
				<item>
					<term> time</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> token</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> unsignedByte</term>
					<description><see cref="T:System.Byte"/></description>
				</item>
				<item>
					<term> unsignedInt</term>
					<description><see cref="T:System.UInt32"/></description>
				</item>
				<item>
					<term> unsignedLong</term>
					<description><see cref="T:System.UInt64"/></description>
				</item>
				<item>
					<term> unsignedShort</term>
					<description><see cref="T:System.UInt16"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<codelink SampleID="Classic XmlTextAttribute Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
