<docs>
	<doc for="XmlArrayAttribute.XmlArrayAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> class.</para>
		</summary>
		<remarks>
			<para>For more information about using attributes, see
   <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
		</remarks>
		<example>
			<para> The following example assigns the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> to two 
   arrays.</para>
			<codelink SampleID="Classic XmlArrayAttribute.XmlArrayAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
	</doc>
	<doc for="XmlArrayAttribute">
		<summary>
			<para>Specifies that the <see cref="System.Xml.Serialization.XmlSerializer"/> should serialize a particular class member as an array of XML elements.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayAttribute"/> belongs to a family of attributes that controls how the <see cref="System.Xml.Serialization.XmlSerializer"/>
serializes or deserializes an object. For a complete list of similar
attributes, see <see topic="cpconAttributesThatControlSerialization"/>
.</para>
			<para> You can apply the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> to a public field or
read/write property that returns an array of objects. You can also apply it to
collections, and fields that return an <see cref="System.Collections.ArrayList"/> or any field that returns an object that
implements the <see cref="System.Collections.IEnumerable"/>
interface.</para>
			<para>When you apply the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> to a class member, the <see cref="System.Xml.Serialization.XmlSerializer"/> class's
<see cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
method generates a nested sequence of XML elements from that member.
An XML schema document (an .xsd file), indicates such an array as a
complexType. For example, if the class to be serialized represents a purchase order, you
can generate an array of purchased items by applying the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> to a
public field that returns an array of objects that represent
order items.</para>
			<para> If no attributes are applied to a public field or
   property that returns an array of complex or primitive type objects,
   the <see cref="System.Xml.Serialization.XmlSerializer"/> generates a nested sequence of
   XML elements by default. To more precisely control what XML elements are
   generated, apply an <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
   and an <see cref="System.Xml.Serialization.XmlArrayAttribute"/> to the
   field or property. For example, by default, the name of the generated XML
   element is derived from the member identifier; you can change the name of the
   generated XML element by setting the <see cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/>
   
   property.</para>
			<para> If you serialize an array that
   contains items of a specific type and all the classes derived from that type, you must
   use the <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> to declare
   each of the types.</para>
			<note type="note">
   In your code, you can use
<see langword="XmlArray "/>
instead of the longer <see cref="System.Xml.Serialization.XmlArrayAttribute"/> .
</note>
For more information about using attributes, see
<see topic="cpconExtendingMetadataUsingAttributes"/>.
</remarks>
		<example>
			<para>The following example serializes a class
      instance into an XML document containing several object arrays. The <see cref="System.Xml.Serialization.XmlArrayAttribute"/> is applied to the
      members that become XML-element arrays. </para>
			<codelink SampleID="Classic XmlArrayAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributes.XmlArray"/>
		<seealso cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconOverridingSerializationOfClassesWithXmlAttributeOverridesClass"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
	</doc>
	<doc for="XmlArrayAttribute.XmlArrayAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> class, 
   specifying the XML element name generated in the
   XML document instance.</para>
		</summary>
		<param name="elementName">The name of the XML element that the <see cref="System.Xml.Serialization.XmlSerializer"/> generates.</param>
		<remarks>
			<para>For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
		</remarks>
		<example>
			<para> The following example assigns the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> to two
   arrays, and serializes a class instance that contains those arrays.</para>
			<codelink SampleID="Classic XmlArrayAttribute.XmlArrayAttribute1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlArrayItemAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
	</doc>
	<doc for="XmlArrayAttribute.ElementName">
		<summary>
			<para>Gets or sets the XML element name given to the serialized array.</para>
		</summary>
		<value>
			<para>The XML element name of the serialized array. The
      default is the name of the member to which the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> is assigned.</para>
		</value>
		<remarks>
			<para>Specify an <see cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/> when you want the
   generated XML element name to differ from the member's identifier. </para>
			<para>You can set the same <see cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/> value to more than
one member as long as the generated XML document uses XML namespaces to
distinguish between the identically named members. For more details on using
namespaces and creating prefixed names in the XML document, see <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/>.</para>
		</remarks>
		<example>
			<para>The following example serializes an instance of the <c>Library</c> class that contains a 
   property named <c>Books</c> that
returns an array of <c>Book</c>
items. The example uses the <see cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/> property to specify
that the array of XML elements should be named <c>My_Books</c> rather than <c>Books</c>
.</para>
			<codelink SampleID="Classic XmlArrayAttribute.ElementName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute.Namespace"/>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute.Form"/>
	</doc>
	<doc for="XmlArrayAttribute.Form">
		<summary>
			<para>Gets or sets a value indicating whether the XML element
      name generated by the <see cref="System.Xml.Serialization.XmlSerializer"/> is qualified or unqualified.</para>
		</summary>
		<value>
			<para>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"/> values. The default is
<see langword="XmlSchemaForm.None"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayAttribute.Form"/> property determines whether an XML
   element name is qualified or unqualified. The <see cref="System.Xml.Serialization.XmlArrayAttribute.Form"/> property conforms to the 1999 World
   Wide Web Consortium (www.w3.org) document titled "Namespaces in XML."</para>
			<para>If the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Namespace"/> property is set to any
value, attempting to set the <see cref="System.Xml.Serialization.XmlElementAttribute.Form"/> property to
<see langword="XmlSchemaForm.Unqualified "/>throws an exception.</para>
			<para>The default setting, <see langword="XmlSchemaForm.None"/>, instructs the
<see cref="System.Xml.Serialization.XmlSerializer"/> to check 
the schema for the XML document to determine whether the namespace is qualified.
If the schema does not specify a value for an individual element or attribute,
the <see cref="System.Xml.Serialization.XmlSerializer"/> uses the <see langword="elementFormDefault "/>and <see langword="attributeFormDefault "/>values to determine whether
an element or attribute is qualified. The XML code below shows a schema:</para>
			<code>
&lt;schema elementFormDefault="qualified" 
attributeFormDefault="unqualified" ... &gt;
   &lt;element name="Name"/&gt;
   &lt;attribute name="Number"/&gt;
&lt;/schema&gt;
</code>
When the <see cref="System.Xml.Serialization.XmlSerializer"/> reads the schema, the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Form"/> value for both the <see langword="Name "/>and <see langword="Number "/>will be
<see langword="XmlSchemaForm.None"/>, but the <see langword="Name "/>element will 
be qualified, while the <see langword="Number "/>element will be unqualified.
</remarks>
		<example>
			<para>The following example serializes an instance of the <c>Enterprises</c> class. Two XML elements 
   have the same local name (<c>Company</c>
) but different prefixes. The example sets the
<see cref="System.Xml.Serialization.XmlArrayAttribute.Form"/> property is set to
<see langword="XmlForm.Qualified "/>to ensure that the qualified names occur in
the XML instance.</para>
			<codelink SampleID="Classic XmlArrayAttribute.Form Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute.Namespace"/>
	</doc>
	<doc for="XmlArrayAttribute.IsNullable">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Xml.Serialization.XmlSerializer"/> should
   serialize a member as an empty XML tag
   with the <see langword="xsi:nil "/> attribute set to <see langword="true"/>.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the
<see cref="System.Xml.Serialization.XmlSerializer"/> generates the <see langword="xsi:nil"/> attribute; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>The XML schema specification for structures allows an
      XML document to explicitly signal that an element's content is missing. Such an
      element contains the attribute <see langword="xsi:nil "/>set
      to <see langword="true"/>. For more information, see the
      World Wide Web Consortium (www.w3.org) specification titled "XML Schema Part 1:
      Structures." </para>
			<para>If the <see cref="System.Xml.Serialization.XmlArrayAttribute.IsNullable"/> property is set to
<see langword="true"/>, the <see langword="xsi:nil"/> attribute is generated for 
   class members that have been set to <see langword="null"/>. For example, if you
   set a field named <see langword="MyStringArray"/>
   to <see langword="null"/> , the <see cref="System.Xml.Serialization.XmlSerializer"/> generates the following XML
   code. </para>
			<code>
&lt;MyStringArray xsi:nil = "true" /&gt;
</code>
			<para>If the <see cref="System.Xml.Serialization.XmlArrayAttribute.IsNullable"/> property is
<see langword="false"/> , no XML element is generated. </para>
			<note type="note">
   You cannot apply the <see cref="System.Xml.Serialization.XmlArrayAttribute.IsNullable"/> property to a member typed as a value
   type because a value type cannot contain <see langword="null"/>.
</note>
		</remarks>
		<example>
			<para> The following example contains two arrays: one with
      the <see cref="System.Xml.Serialization.XmlArrayAttribute.IsNullable"/> property is set to
   <see langword="true"/>, and another with the <see cref="System.Xml.Serialization.XmlArrayAttribute.IsNullable"/> property set to <see langword="false"/>.</para>
			<codelink SampleID="Classic XmlArrayAttribute.IsNullable Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlArrayAttribute.Namespace">
		<summary>
			<para> Gets or set the namespace of the XML element.</para>
		</summary>
		<value>
			<para> The namespace of the XML element.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayAttribute.Namespace"/> property allows you
   to create qualified XML element names. The <see cref="System.Xml.Serialization.XmlArrayAttribute.Namespace"/> property conforms to the
   rules for creating an XML namespace as found in the 1999 World Wide Web Consortium
   (www.w3.org) document titled "Namespaces in XML."</para>
			<para>To create namespaces that are associated with a prefix, you must create an instance of the 
<see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> class that contains the namespaces 
   and prefixes used in the XML document. As you set the namespace for each <see cref="System.Xml.Serialization.XmlArrayAttribute"/>, it must match one of the namespaces
   in the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> . When the XML is generated,
   each array will be correctly prefixed with the prefix associated with the
   specified namespace.</para>
		</remarks>
		<example>
			<para> The following example serializes an instance of the <c>Library</c> 
   class that contains two members, one that contain book titles, and another that
   contain periodical titles. Although both XML elements are named <c>Titles</c>

, each contains a different prefix. The example also includes an
instance of the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/>
class that contains the namespaces and prefixes
used to qualify the two element names.</para>
			<codelink SampleID="Classic XmlArrayAttribute.Namespace Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute.Form"/>
	</doc>
</docs>
