<docs>
	<doc for="XmlElementAttribute.XmlElementAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> class.</para>
		</summary>
		<example>
			<para>The following example applies the <see cref="System.Xml.Serialization.XmlElementAttribute"/> a
   class.</para>
			<codelink SampleID="Classic XmlElementAttribute.XmlElementAttribute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElementAttribute.XmlElementAttribute4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> class with the specified element name,
   type, and XML encoding.</para>
		</summary>
		<param name="elementName">The XML-element name of the serialized member. </param>
		<param name=" type">The <see cref="T:System.Type"/> of an object derived from the member's type. </param>
		<param name=" encoding">The XML encoding value. Possible values include "base64" or "hex". The default is "base64".</param>
		<remarks>
			<para>By default, the <see cref="System.Xml.Serialization.XmlSerializer"/> uses the member name as the XML 
   element name when serializing a class instance. For example, a field named
<see langword="Vehicle"/> generates an XML element named 
<see langword="Vehicle"/>. However, if you need a different element, such as 
<see langword="Cars"/> , pass it in the <paramref name="elementName "/>parameter.</para>
			<para>Use the <paramref name="type "/>parameter to specify a type that is derived from a base 
class. For example, suppose a property named <see langword="MyAnimal"/> returns
an <see langword="Animal"/> object. You want to enhance the object, so you create
a new class named <see langword="Mammal"/> that inherits from the <see langword="Animal "/>class. To instruct the <see cref="System.Xml.Serialization.XmlSerializer"/> to accept the Mammal
class when it serializes the <see langword="MyAnimal "/>property, pass the
<see cref="T:System.Type"/> of the 
<see langword="Mammal "/>class to the constructor.</para>
			<para>You can set the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Encoding"/> only be when the 
field or property returns a <see cref="T:System.Byte"/> array. </para>
		</remarks>
	</doc>
	<doc for="XmlElementAttribute.Encoding">
		<summary>
			<para>Gets or sets the value of the XML encoding attribute for
      the XML element generated by the <see cref="System.Xml.Serialization.XmlSerializer"/>.</para>
		</summary>
		<value>
			<para>"base64" or "hex". The default is "base64".</para>
		</value>
		<remarks>
			<para>You can set the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Encoding"/> only be when the
   field or property returns a <see cref="T:System.Byte"/> array. </para>
		</remarks>
		<example>
			<para>The following example shows a class that contains a
      public byte field with its <see cref="System.Xml.Serialization.XmlElementAttribute.Encoding"/>
      property set to "hex".</para>
			<codelink SampleID="Classic XmlElementAttribute.Encoding Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElementAttribute">
		<summary>
			<para> Indicates that a public field or property represents an XML element when the
   <see cref="System.Xml.Serialization.XmlSerializer"/>
   serializes or deserializes the containing object.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlElementAttribute"/>
belongs to a family of attributes that controls how the <see cref="System.Xml.Serialization.XmlSerializer"/> serializes, or deserializes, an
object. For a complete list of similar attributes, see <see topic="cpconAttributesThatControlSerialization"/> .</para>
			<para> An XML document usually contains XML elements, each of which consists of
   three parts: an opening tag with possible attributes, a closing tag, and the data between
   the tags. XML tags can be nested--that is, the data between tags can also be
   XML elements. This capacity of one element to enclose another allows the document to
   contain hierarchies of data. An XML element can also include attributes. </para>
			<para> Apply the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to public
fields or public read/write properties to control characteristics of the XML elements such as the element name and namespace.</para>
			<para>The <see cref="System.Xml.Serialization.XmlElementAttribute"/> can be applied multiple times to a
field that returns an array of objects. The purpose of this is to specify
(through the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property) different types that can be
inserted into the array. For example, the array in the C# code below accepts
both strings and integers.</para>
			<code>
public class Things{
   [XmlElement(DataType = typeof(string)),
   XmlElement(DataType = typeof(int))]
   public object[] StringsAndInts;
}
</code>
			<para> This results
   in XML that might resemble the following.</para>
			<code>
&lt;Things&gt;
   &lt;string&gt;Hello&lt;/string&gt;
   &lt;int&gt;999&lt;/int&gt;
   &lt;string&gt;World&lt;/string&gt;
&lt;/Things&gt;
</code>
			<para> Note that when you apply the <see cref="System.Xml.Serialization.XmlElementAttribute"/> multiple times without specifying
an <see cref="System.Xml.Serialization.XmlElementAttribute.ElementName"/> property value, the elements are named
after the type of the acceptable objects.</para>
			<para>If you apply the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to a field
or property that returns an array, the items in the array are
encoded as a sequence of XML elements.</para>
			<para> In
   contrast, if an <see cref="System.Xml.Serialization.XmlElementAttribute"/> is not
   applied to such a field or property, the items in the array are encoded as a
   sequence of elements, nested under an element named after the field or property.
   (Use the <see cref="System.Xml.Serialization.XmlArrayAttribute"/> and <see cref="System.Xml.Serialization.XmlArrayItemAttribute"/> attributes
   to control
   how an array is serialized.)</para>
			<para> You can set the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to
specify a type that is derived from the type of the original field or
property--that is, the field or property to which you have applied the
<see cref="System.Xml.Serialization.XmlElementAttribute"/> 
. </para>
			<para>If a field or property returns an <see cref="T:System.Collections.ArrayList"/>, you can apply multiple instances
of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to the member. For each instance, set
the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to a type
of object that can be inserted into the array.</para>
			<para>For more information about using attributes, see <see topic="cpconExtendingMetadataUsingAttributes"/>.</para>
			<note type="note">
   In your code, you can use the word
<see langword="XmlElement "/>
instead of the longer <see cref="System.Xml.Serialization.XmlElementAttribute"/> .
</note>
		</remarks>
		<example>
			<para>The following example serializes a class 
      named <c>Group</c>and applies the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to several
   of its members. The field named <c>Employees</c> returns an array of <c>Employee</c>
objects. In this case, the <see cref="System.Xml.Serialization.XmlElementAttribute"/> specifies
that
that the resulting XML should not be nested (which is the default behavior of
items in an array).</para>
			<codelink SampleID="Classic XmlElementAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlArrayAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso cref="System.Xml.Serialization.XmlElementAttributes"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes.XmlElements"/>
		<seealso cref="System.Xml.Serialization.XmlRootAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconOverridingSerializationOfClassesWithXmlAttributeOverridesClass"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
	</doc><doc for="XmlElementAttribute.XmlElementAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> class and
   specifies the name of the XML element.</para>
		</summary>
		<param name="elementName">The XML element name of the serialized member.</param>
		<remarks>
			<para>By default, the <see cref="System.Xml.Serialization.XmlSerializer"/> uses the member name
   as the XML element name when serializing a class instance. For example, a field
   named <see langword="Vehicle"/> generates an XML element named
<see langword="Vehicle"/>. However, if you need a different element, such as 
   <c>Cars</c> 
   , pass it in the <paramref name="elementName
   "/> parameter.</para>
		</remarks>
		<example>
			<para>The following example shows a simple class that contains 
      a single field named <c>Vehicles</c> . The
   example applies the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to the
   field and includes the <paramref name="elementName "/>parameter, thereby instructing the
<see cref="System.Xml.Serialization.XmlSerializer"/> 
to generate XML elements named "Cars" rather than "Vehicles".</para>
			<codelink SampleID="Classic XmlElementAttribute.XmlElementAttribute1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElementAttribute.XmlElementAttribute2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> class
   and specifies a type for the member to which the <see cref="System.Xml.Serialization.XmlElementAttribute"/> is applied,
   which is used by the <see cref="System.Xml.Serialization.XmlSerializer"/> when serializing or deserializing a containing object.</para>
		</summary>
		<param name="type">The <see cref="T:System.Type"/> of an object derived from the member's type.</param>
		<remarks>
			<para>Use the <paramref name="type "/>parameter to
   specify a type that is derived from a base class. For example, suppose a
   property named <c>MyAnimal</c> returns an <c>Animal</c> object. You want to enhance the object, so you create a new class named
<c>Mammal</c> that inherits from the <c>Animal</c> class. To instruct
the <see cref="System.Xml.Serialization.XmlSerializer"/> to accept
the Mammal class when it serializes the <c>MyAnimal</c> property, pass the <see cref="T:System.Type"/> of the <c>Mammal</c> class to the
constructor.</para>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>Orchestra</c> that 
   contains a single field named <c>Instruments</c>, which
returns an array of <c>Instrument</c> objects. A second class named
<c>Brass</c> inherits from the <c>Instrument</c> class. The 
example applies the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to the <c>Instruments</c> field, and specifies the <c>Brass</c> type,
allowing the
<c>Instruments</c> field to accept <c>Brass</c> objects. The 
example also specifies the name of the XML element by setting the <see cref="System.Xml.Serialization.XmlElementAttribute.ElementName"/> property.</para>
			<codelink SampleID="Classic XmlElementAttribute.XmlElementAttribute2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElementAttribute.XmlElementAttribute3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> ;
   specifies the name of the XML element and a derived type for the member to which
   the <see cref="System.Xml.Serialization.XmlElementAttribute"/> is applied,
   which is used when the <see cref="System.Xml.Serialization.XmlSerializer"/> serializes a containing object.</para>
		</summary>
		<param name="elementName">The XML element name of the serialized member. </param>
		<param name="type">The <see cref="T:System.Type"/> of an object derived from the member's type. </param>
		<remarks>
			<para>By default, the <see cref="System.Xml.Serialization.XmlSerializer"/> uses the member name as the XML
   element name when serializing a class instance. For example, a field named
<see langword="Vehicle"/> generates an XML element named 
<see langword="Vehicle"/>. However, if you need a different element, such as 
<see langword="Cars"/> , pass it in the <paramref name="elementName "/>parameter.</para>
			<para>Use the <paramref name="type "/>parameter to specify a type that is derived from a base
class. For example, suppose a property named <see langword="MyAnimal"/> returns
an <see langword="Animal"/> object. You want to enhance the object, so you create
a new class named <see langword="Mammal"/> that inherits from the <see langword="Animal "/>class. To instruct the <see cref="System.Xml.Serialization.XmlSerializer"/> to accept the Mammal
class when it serializes the <see langword="MyAnimal "/>property, pass the
<see cref="T:System.Type"/> of the 
<see langword="Mammal "/>class to the constructor.</para>
		</remarks>
		<example>
			<para>The following example serializes a class named <c>Orchestra</c> that 
   contains a single field named <c>Instruments</c>, which
returns an array of <c>Instrument</c> objects. A second class named
<c>Brass</c> inherits from the <c>Instrument</c> class. The 
example applies the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to the <c>Instruments</c> field, and specifies the <c>Brass</c> type,
allowing the <c>Instruments</c> field to accept <c>Brass</c> objects. The
example also specifies the name of the XML element by setting the <see cref="System.Xml.Serialization.XmlElementAttribute.ElementName"/> property.</para>
			<codelink SampleID="Classic XmlElementAttribute.XmlElementAttribute2 Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElementAttribute.ElementName">
		<summary>
			<para> Gets or sets the
      name of the generated XML element.</para>
		</summary>
		<value>
			<para> The name of the generated XML element. The default is the member identifier.</para>
		</value>
		<remarks>
			<para>Specify an <see cref="System.Xml.Serialization.XmlArrayItemAttribute.ElementName"/> if you want the
   name of the generated XML element to differ from the member's identifier.</para>
			<para>You can set the same <see cref="System.Xml.Serialization.XmlArrayAttribute.ElementName"/> value to more than one class
member if the generated XML document uses XML namespaces to distinguish
between the identically named members. For details on how to use
namespaces and prefixed names in the XML document, see the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/>
class.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Xml.Serialization.XmlElementAttribute.ElementName"/> property of an <see cref="System.Xml.Serialization.XmlElementAttribute"/> to a new value.</para>
			<codelink SampleID="Classic XmlElementAttribute.ElementName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributeAttribute.AttributeName"/>
	</doc><doc for="XmlElementAttribute.IsNullable">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Xml.Serialization.XmlSerializer"/> should serialize a member that is set
   to <see langword="null "/>as
   an empty tag with the <see langword="xsi:nil "/>attribute set to
<see langword="true"/>.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the
<see cref="System.Xml.Serialization.XmlSerializer"/> generates the <see langword="xsi:nil"/> attribute; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>The XML schema specification for structures allows an
      XML document to explicitly signal that an element's content is missing. Such an
      element contains the attribute <see langword="xsi:nil "/>set
      to <see langword="true"/> . For more information, see
      the World Wide Web Consortium (www.w3.org) specification, "XML Schema Part 1:
      Structures". </para>
			<para>If the <see cref="System.Xml.Serialization.XmlElementAttribute.IsNullable"/> property is set to
<see langword="true"/>, the <see langword="xsi:nil"/> attribute is generated for 
   class members that have been set to <see langword="null"/>. For example, if you
   set a field named <see langword="MyStringArray"/>
   to <see langword="null"/> , the <see cref="System.Xml.Serialization.XmlSerializer"/> generates the following XML code.</para>
			<code>
&lt;MyStringArray xsi:nil = "true" /&gt;
</code>
			<para>If the <see cref="System.Xml.Serialization.XmlElementAttribute.IsNullable"/> property is
<see langword="false"/> , no XML element is generated. </para>
			<note type="note">
   You cannot apply the <see cref="System.Xml.Serialization.XmlElementAttribute.IsNullable"/> property to a member typed as a value
   type because a value type cannot contain <see langword="null"/>.
</note>
		</remarks>
		<example>
			<para>The following example shows a field attributed with the
   <see cref="System.Xml.Serialization.XmlElementAttribute"/> , and the <see cref="System.Xml.Serialization.XmlElementAttribute.IsNullable"/> property set to
   <see langword="false"/>
   .</para>
			<codelink SampleID="Classic XmlElementAttribute.IsNullable Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElementAttribute.Namespace">
		<summary>
			<para> Gets or sets the namespace assigned
      to the XML element that results when the class is serialized.</para>
		</summary>
		<value>
			<para>The namespace of the XML element.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlArrayItemAttribute.Namespace"/> 
property conforms to the World Wide Web Consortium
(www.w3.org) specification, "Namespaces in XML".</para>
			<para>To create namespaces that are associated with a prefix,
   you must create an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> that
   contains the namespaces and prefixes used in the XML document. As you set the
   namespace for each <see cref="System.Xml.Serialization.XmlArrayAttribute"/>,
   it must match one of the namespaces in the <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> .
   When the XML is generated, each array will be correctly prefixed with the prefix
   associated with the specified namespace.</para>
		</remarks>
	</doc><doc for="XmlElementAttribute.Type">
		<summary>
			<para>Gets or sets the object type used to represent the XML
      element.</para>
		</summary>
		<value>
			<para>The <see cref="T:System.Type"/> of the member.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to specify a
   derived type
   for a field or
   property.</para>
			<para>If a field or property returns an <see cref="T:System.Collections.ArrayList"/>, you can apply multiple instances
of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to the member. For each instance, set
the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to a type of object that can
be inserted into the array.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Xml.Serialization.XmlElementAttribute.Type"/> property to specify a derived object
   for an <see cref="System.Xml.Serialization.XmlElementAttribute"/> . The
   example also applies three instances of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to a field that returns an <see cref="T:System.Collections.ArrayList"/> . Each
   instance specifies a type allowed in the field.</para>
			<codelink SampleID="Classic XmlElementAttribute.Type Example" SnippetID="1"/>
		</example>
	</doc><doc for="XmlElementAttribute.DataType">
		<summary>
			<para> Gets or sets the XML Schema definition (XSD)
      data type of the XMl element generated by the <see cref="System.Xml.Serialization.XmlSerializer"/>.</para>
		</summary>
		<value>
			<para>An XML Schema data type, as defined by the World Wide Web Consortium
      (www.w3.org ) document named "XML Schema Part 2: Datatypes".</para>
		</value>
		<exception cref="System.Exception">The XML Schema data type you've specified cannot be mapped to the .NET data type.</exception>
		<remarks>
			<para>The following table lists the XML Schema
      simple data types with their
      .NET equivalents.</para>
			<para> For the XML Schema <see langword="base64Binary"/> and
<see langword="hexBinary"/> data types, use an array of <see cref="System.Byte"/> structures, and apply a <see cref="System.Xml.Serialization.XmlElementAttribute"/> with the 
<see cref="System.Xml.Serialization.XmlElementAttribute.DataType"/> set to "base64Binary" 
   or "hexBinary", as appropriate. For the XML Schema <see langword="time"/>
   and <see langword="date "/>data types, use the <see cref="System.DateTime"/> type and apply
   the <see cref="System.Xml.Serialization.XmlElementAttribute"/> with the <see cref="System.Xml.Serialization.XmlElementAttribute.DataType"/>
   set to "date"
   or "time".</para>
			<para> For every XML
   Schema type that is mapped to a string, apply the <see cref="System.Xml.Serialization.XmlElementAttribute"/> with its <see cref="System.Xml.Serialization.XmlElementAttribute.DataType"/> property set to the
   XML Schema type. Not that this will not change the serialization format, only the
   schema for the member.</para>
			<note type="note">
   The
   property is case-sensitive, so you must set
   it exactly to one of
   the XML Schema data
   types.
</note>
			<note type="note">
   Passing
   binary data as an XML element
   is more efficient then passing it as an XML Schema attribute.
</note>
			<para> For more information about XML data types, see the World
   Wide Web Consortium (www.w3.org) document
   named "XML Schema Part 2:
   Datatypes".</para>
			<list type="table">
				<listheader>
					<term> XSD data type</term>
					<description> .NET data type</description>
				</listheader>
				<item>
					<term> anyURI</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> base64Binary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> boolean</term>
					<description><see cref="T:System.Boolean"/></description>
				</item>
				<item>
					<term> byte</term>
					<description><see cref="T:System.SByte"/></description>
				</item>
				<item>
					<term> date</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> dateTime</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> decimal</term>
					<description><see cref="T:System.Decimal"/></description>
				</item>
				<item>
					<term> double</term>
					<description><see cref="T:System.Double"/></description>
				</item>
				<item>
					<term> ENTITY</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> ENTITIES</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> float</term>
					<description><see cref="T:System.Single"/></description>
				</item>
				<item>
					<term> gDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gMonthDay</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYear</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> gYearMonth</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> hexBinary</term>
					<description>
						<para>Array of <see cref="System.Byte"/> objects</para></description>
				</item>
				<item>
					<term> ID</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREF</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> IDREFS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> int</term>
					<description><see cref="T:System.Int32"/></description>
				</item>
				<item>
					<term> integer</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> language</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> long</term>
					<description><see cref="T:System.Int64"/></description>
				</item>
				<item>
					<term> Name</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NCName </term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> negativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKEN</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NMTOKENS</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> normalizedString</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonNegativeInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> nonPositiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> NOTATION</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> positiveInteger</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> QName</term>
					<description><see cref="System.Xml.XmlQualifiedName"/></description>
				</item>
				<item>
					<term> duration</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> string</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> short</term>
					<description><see cref="T:System.Int16"/></description>
				</item>
				<item>
					<term> time</term>
					<description><see cref="T:System.DateTime"/></description>
				</item>
				<item>
					<term> token</term>
					<description><see cref="T:System.String"/></description>
				</item>
				<item>
					<term> unsignedByte</term>
					<description><see cref="T:System.Byte"/></description>
				</item>
				<item>
					<term> unsignedInt</term>
					<description><see cref="T:System.UInt32"/></description>
				</item>
				<item>
					<term> unsignedLong</term>
					<description><see cref="T:System.UInt64"/></description>
				</item>
				<item>
					<term> unsignedShort</term>
					<description><see cref="T:System.UInt16"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example serializes a class named <see langword="Group "/>that
   contains a field named <see langword="ExtraInfo"/>, which returns an <see cref="T:System.Collections.ArrayList"/>
   . The example applies two instances of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> to the field, specifying different
<see cref="System.Xml.Serialization.XmlElementAttribute.DataType"/> values for each instance. Each 
   instance enables the <see cref="System.Xml.Serialization.XmlSerializer"/> serialize the specified types inserted
   into the array.</para>
			<codelink SampleID="Classic XmlElementAttribute.DataType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="XmlElementAttribute.Form">
		<summary>
			<para>Gets or sets a value indicating whether the element is qualified.</para>
		</summary>
		<value>
			<para>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"/> values. The default is <see cref="System.Xml.Schema.XmlSchemaForm.Qualified"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlAttributeAttribute.Form"/> property
   determines whether an XML element
   is qualified or unqualified. The <see cref="System.Xml.Serialization.XmlAttributeAttribute.Form"/>
   property conforms to the World Wide Web Consortium
   (www.w3.org) 1999 specification, "Namespaces in
   XML".</para>
			<para>If the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Namespace"/> property is set to any
value, attempting to set the <see cref="System.Xml.Serialization.XmlElementAttribute.Form"/> property to
<see langword="XmlSchemaForm.Unqualified "/> throws an 
exception.
The default setting, <see langword="XmlSchemaForm.None"/>, instructs the
<see cref="System.Xml.Serialization.XmlSerializer"/> to check 
the schema for the XML document to determine whether the namespace is qualified.
If the schema does not specify a value for an individual element or attribute,
the <see cref="System.Xml.Serialization.XmlSerializer"/> uses the <see langword="elementFormDefault "/>and <see langword="attributeFormDefault "/>values to determine whether
an element or attribute is qualified. The XML code below shows a schema: </para>
			<code>
&lt;schema elementFormDefault="qualified" 
attributeFormDefault="unqualified" ... &gt;
 &lt;element name="Name"/&gt;
 &lt;attribute name="Number"/&gt;
&lt;/schema&gt;
</code>
When the <see cref="System.Xml.Serialization.XmlSerializer"/> reads the schema, the <see cref="System.Xml.Serialization.XmlAttributeAttribute.Form"/> value for both
the <c>Name</c> and <c>Number</c>will be
<see langword="XmlSchemaForm.None"/>, but the <c>Name</c> element will be qualified, 
while the <c>Number</c>element will be unqualified.
</remarks>
		<example>
			<para>The following example sets the <see cref="System.Xml.Serialization.XmlElementAttribute.Form"/> property to
<see langword="XmlSchemaForm.Unqualified"/>.</para>
			<codelink SampleID="Classic XmlElementAttribute.Form Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
