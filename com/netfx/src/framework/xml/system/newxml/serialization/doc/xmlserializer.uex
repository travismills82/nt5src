<docs>
	<doc for="XmlSerializer.CreateWriter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="XmlSerializer.XmlSerializer7">
		<overload>
			<para>Constructs a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class.</para>
		</overload>
		<summary>
			<para>Constructs a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class.</para>
		</summary>
	</doc>
	<doc for="XmlSerializer.cache">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSerializer.defaultNamespaces;">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSerializer.XmlSerializer8">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSerializer.GenerateTempAssembly">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XmlSerializer.FromTypes">
		<summary>
			<para>Returns an array of <see cref="System.Xml.Serialization.XmlSerializer"/> objects created from an array of
   types.</para>
		</summary>
		<param name="types">An array of <see cref="T:System.Type"/> objects.</param>
		<returns>
			<para>An array of <see cref="System.Xml.Serialization.XmlSerializer"/> objects.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.FromTypes"/> method allows you to
   efficiently create an array of <see cref="System.Xml.Serialization.XmlSerializer"/> objects for
   processing an array of <see cref="T:System.Type"/>
   objects. </para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Xml.Serialization.XmlSerializer.FromTypes"/> method to return an
   array of <see cref="System.Xml.Serialization.XmlSerializer"/> objects.
   The code includes three class definitions which are each used to create an array
   of <see cref="System.Type"/>
   objects.</para>
			<codelink SampleID="Classic XmlSerializer.FromTypes Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.UnknownNode">
		<summary>
			<para>Occurs when the <see cref="System.Xml.Serialization.XmlSerializer"/> encounters an XML node of unknown type during deserialization.</para>
		</summary>
		<remarks>
			<para>By default, after calling the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> method, the <see cref="System.Xml.Serialization.XmlSerializer"/> ignores XML nodes of unknown types. However,
   you can use this event to handle such node types.</para>
		</remarks>
		<example>
			<para>The following example prints the type of any encountered unknown node.</para>
			<codelink SampleID="Classic XmlSerializer.UnknownNode Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAnyElementAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlAnyAttributeAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.UnknownAttribute"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.XmlSerializer5">
		<summary>
			<para>Initializes an instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class using an object
   that maps one type to another.</para>
		</summary>
		<param name="xmlTypeMapping">An <see cref="System.Xml.Serialization.XmlTypeMapping"/> that maps one type to another. </param>
		<remarks>
			<para>This constructor is used to create an <see cref="System.Xml.Serialization.XmlSerializer"/> when you are serializing an object into
   a SOAP message. To control the SOAP messages generated, use the special
   attributes (beginning with the word "Soap") found in the <see cref="System.Xml.Serialization"/>
   namespace. </para>
		</remarks>
		<example>
			<para>The following example serializes a class named
      <c>Group</c>. The serialization of the <c>GroupName</c>,
      <c>IgnoreThis</c> fields, and the members of the
   <see langword="GroupType"/> enumeration are overridden. In the
   <c>CreateOverrideSerializer</c> method, a <see cref="System.Xml.Serialization.SoapAttributeOverrides"/>object is
   created, and for each overridden member or enumeration, a <see cref="System.Xml.Serialization.SoapAttributes"/> object is created
   with the appropriate property set, and added to the <see cref="System.Xml.Serialization.SoapAttributeOverrides"/> object. An <see cref="System.Xml.Serialization.XmlMapping"/> object is created using the <see cref="System.Xml.Serialization.SoapAttributeOverrides"/> object, and that XmlMapping
   object is used to create the <see cref="System.Xml.Serialization.XmlSerializer"/> that overrides the
   default serialization.</para>
			<codelink SampleID="SoapAttributesOverrides" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.XmlSerializer1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of the specified type into
   XML documents, and vice versa. Specifies the default
   namespace for all the XML elements.</para>
		</summary>
		<param name="type">The type of the object that this <see cref="System.Xml.Serialization.XmlSerializer"/> can serialize. </param>
		<param name="defaultNamespace">The default namespace to use for all the XML elements.</param>
		<example>
			<para>The following example constructs an <see cref="System.Xml.Serialization.XmlSerializer"/> that serializes a simple object named
<see langword="Widget"/> 
. The example sets various properties of the object
before calling the <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method.</para>
			<codelink SampleID="Classic XmlSerializer.XmlSerializer1 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.XmlSerializer2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of
   the specified type into XML documents, and vice versa. Specifies the
   class to use as the XML root element.</para>
		</summary>
		<param name="type">The type of the object that this <see cref="System.Xml.Serialization.XmlSerializer"/> can serialize. </param>
		<param name="root">An <see cref="System.Xml.Serialization.XmlRootAttribute"/> that represents the XML root element.</param>
		<remarks>
			<para>The root element of an XML document encloses all the
      other elements. By default, the object specified by the <paramref name="type "/>parameter
      is serialized as the root element. Properties, such as the XML element name
      of the root element are taken from the <paramref name="type"/> object. However, the
   <paramref name="root"/> parameter allows you to supplant the default object's
      information by specifying an <see cref="System.Xml.Serialization.XmlRootAttribute"/>; the object allows
      you to set a different namespace, element name, and so on.</para>
		</remarks>
		<example>
			<para>The following example constructs an <see cref="System.Xml.Serialization.XmlSerializer"/> that uses an <see cref="System.Xml.Serialization.XmlRootAttribute"/>
containing various properties of the XML root element, such as its
namespace and element name.</para>
			<codelink SampleID="Classic XmlSerializer.XmlSerializer2 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.XmlSerializer4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of
   the specified type into XML documents, and vice versa. Each object to be
   serialized can itself contain instances of classes, which this overload can override
   with other classes.</para>
		</summary>
		<param name="type">The type of the object to serialize.</param>
		<param name="overrides">An <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> .</param>
		<remarks>
			<para> The <paramref name="overrides "/> 
parameter can be used to control how fields and properties are encoded in XML.
These settings override any attributes that already exist on the objects. This can
be useful when the source code cannot be modified or multiple encodings are required for
the same
classes.</para>
		</remarks>
		<example>
			<para> The following example serializes an instance of
      a class that is defined in a DLL, and, to do so,
      overrides the public members found in the DLL.</para>
			<codelink SampleID="Classic XmlSerializer.XmlSerializer4 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.XmlSerializer6">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of
   the specified type into XML documents, and vice versa.</para>
		</summary>
		<param name="type">The type of the object that this <see cref="System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
		<remarks>
			<para>Commonly, an application defines several classes that the <see cref="System.Xml.Serialization.XmlSerializer"/> converts
   into a single XML-instance document. However, the <see cref="System.Xml.Serialization.XmlSerializer"/> needs to know only one type--the
   type of the class that represents the XML root element. The <see cref="System.Xml.Serialization.XmlSerializer"/>
   
   automatically serializes all subordinate class instances. Similarly,
   only the type of the XML root element is needed
   for deserialization.</para>
		</remarks>
		<example>
			<para>The following example constructs an <see cref="System.Xml.Serialization.XmlSerializer"/> that serializes a simple object named
   Widget. The example sets various properties of the object before calling the
<see cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
method.</para>
			<codelink SampleID="Classic XmlSerializer.XmlSerializer6 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.Serialize2">
		<summary>
			<para>Serializes the specified <see cref="T:System.Object"/> and writes the XML document to a file using
   the specified <see cref="T:System.IO.Stream"/>.</para>
		</summary>
		<param name="stream">The <see cref="T:System.IO.Stream"/> used to write the XML document.</param>
		<param name="o">The <see cref="T:System.Object"/> to serialize.</param>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method converts the public fields and
   read/write properties of an object into XML. It does not convert
   methods, indexers, private fields, or read-only properties. To serialize all
   of an object's fields and properties, both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>In the <paramref name="stream"/> parameter, specify
an object that derives from the abstract <see cref="T:System.IO.Stream"/>
class. Classes that derive from <see cref="T:System.IO.Stream"/>
include:</para>
			<list type="bullet"><item>
					<term>
						<see cref="T:System.IO.BufferedStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.FileStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.MemoryStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.Net.Sockets.NetworkStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.Security.Cryptography.CryptoStream"/></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example serializes an object using a <see cref="T:System.IO.Stream"/> object.</para>
			<codelink SampleID="Classic XmlSerializer.Serialize2 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc><doc for="XmlSerializer.Deserialize1">
		<summary>
			<para>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader"/>.</para>
		</summary>
		<param name="textReader">The <see cref="T:System.IO.TextReader"/> containing the XML document to deserialize.</param>
		<returns>
			<para>The <see cref="T:System.Object"/>
being deserialized.</para>
		</returns>
		<remarks>
			<para>Deserialization is the process of reading an XML instance document
      and constructing an object that is strongly typed to the XML Schema (XSD) of
      the document.</para>
			<para>Before deserializing, an <see cref="System.Xml.Serialization.XmlSerializer"/> must be constructed using the type of
   the object that is being deserialized.</para>
			<para>Classes that inherit from <see cref="T:System.IO.TextReader"/> include
<see cref="T:System.IO.StringReader"/> and <see cref="T:System.IO.StreamReader"/>. If you are using a <see cref="T:System.IO.StreamReader"/> to deserialize an object, you must construct the 
<see cref="T:System.IO.StreamReader"/> with an appropriate <see cref="T:System.Text.Encoding"/>. The encoding 
specified by the XML document will be ignored.</para>
			<note type="note">
   To use the encoding specified by the
   XML document, use the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> overload that takes
   an <see cref="System.Xml.XmlReader"/>
   instead. The <see cref="System.Xml.XmlReader"/> automatically detects and uses the encoding
   specified by the XML document.
</note>
		</remarks>
		<example>
			<para>The following example deserializes an object using a <see cref="T:System.IO.TextReader"/>
object.</para>
			<codelink SampleID="Classic XmlSerializer.Deserialize1 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
	</doc><doc for="XmlSerializer.Deserialize2">
		<summary>
			<para>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader"/>.</para>
		</summary>
		<param name="xmlReader">The <see cref="T:System.xml.XmlReader"/> containing the XML document to deserialize.</param>
		<returns>
			<para>The <see cref="T:System.Object"/>
being deserialized.</para>
		</returns>
		<remarks>
			<para>Deserialization is the process of reading an XML instance document
      and constructing an object that is strongly typed to the XML Schema (XSD) of
      the document.</para>
   Before deserializing, an <see cref="System.Xml.Serialization.XmlSerializer"/> must be constructed using the type of
   the object that is being deserialized.
   
<para>The <see cref="System.Xml.XmlReader"/> automatically detects and uses the encoding 
   specified by the XML document.</para>
		</remarks>
		<example>
			<para>The following example deserializes an object using an <see cref="T:System.Xml.XmlReader"/> .</para>
			<codelink SampleID="Classic XmlSerializer.Deserialize2 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
	</doc><doc for="XmlSerializer.CreateReader">
		<summary>
			<para>Returns an object used to read the XML document to be serialized.</para>
		</summary>
		<returns>
			<para>An XmlSerializationReader used to read the XML document.</para>
		</returns>
	</doc><doc for="XmlSerializer.Deserialize">
		<overload>
			<para> Deserializes an XML document.</para>
		</overload>
		<summary>
			<para>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream"/>.</para>
		</summary>
		<param name="stream">The <see cref="T:System.IO.Stream"/> containing the XML document to deserialize.</param>
		<returns>
			<para>The <see cref="T:System.Object"/>
being deserialized.</para>
		</returns>
		<remarks>
			<para>Deserialization is the process of reading an XML document and constructing
      an object that is strongly typed to the XML Schema (XSD) of the
      document.</para>
			<para>Before deserializing, an <see cref="System.Xml.Serialization.XmlSerializer"/> must be
   constructed using the type of the object that
   is being
   deserialized.</para>
			<para>Use the <paramref name="stream"/> parameter to
specify an object that derives from the <see cref="T:System.IO.Stream"/> class, which is designed to write to streams.
Classes that derive from the <see cref="T:System.IO.Stream"/>
class include:</para>
			<list type="bullet"><item>
					<term>
						<see cref="T:System.IO.BufferedStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.FileStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.MemoryStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.Net.Sockets.NetworkStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.Security.Cryptography.CryptoStream"/></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example deserializes an object using a <see cref="T:System.IO.Stream"/> object.</para>
			<codelink SampleID="Classic XmlSerializer.Deserialize Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
	</doc><doc for="XmlSerializer.Serialize1">
		<summary>
			<para>Serializes the specified <see cref="T:System.Object"/> and writes the XML document to a file using
   the specified <see cref="T:System.IO.TextWriter"/> , referencing the specified namespaces.</para>
		</summary>
		<param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the XML document.</param>
		<param name="o">The <see cref="T:System.Object"/> to serialize.</param>
		<param name="namespaces">The <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> containing namespaces for the generated XML document. </param>
		<remarks>
			<para>When the <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method is invoked the public
   fields and read/write properties of an object are converted into XML.
   Methods, indexers, private fields, and read-only properties are not serialized.
   To serialize all fields and properties, both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>Use the <paramref name="textWriter "/>parameter
to specify an object that derives from the
abstract <see cref="T:System.IO.TextWriter"/> class. Classes that derive from <see cref="T:System.IO.TextWriter"/>
include:</para>
			<list type="bullet"><item>
					<term>
						<see cref="T:System.IO.StreamWriter"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.StringWriter"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.CodeDom.Compiler.IndentedTextWriter"/></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example serializes an object with a
   <see cref="T:System.IO.TextWriter"/>
   . The example also creates an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> object and adds two namespaces to the
   object. The class defining the serialized object is also attributed with <see cref="System.Xml.Serialization.XmlElementAttribute"/> attributes to specify the namespace
   for each element.</para>
			<codelink SampleID="Classic XmlSerializer.Serialize1 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc><doc for="XmlSerializer.Serialize3">
		<summary>
			<para>Serializes the specified <see cref="T:System.Object"/> and writes the XML document to a file using
   the specified <see cref="T:System.IO.Stream"/>, referencing the specified namespaces.</para>
		</summary>
		<param name="stream">The <see cref="T:System.IO.Stream"/> used to write the XML document.</param>
		<param name="o">The <see cref="T:System.Object"/> to serialize.</param>
		<param name="namespaces">The <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> referenced by the object. </param>
		<remarks>
			<para>When the <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method is invoked, the public
   fields and read/write properties of an object are converted into XML.
   Methods, indexers, private fields, and read-only properties are not serialized.
   To serialize all fields and properties, both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>Use the <paramref name="stream"/> parameter to specify
an object that derives from the abstract <see cref="T:System.IO.Stream"/> class, which is designed to write to streams.
Classes that derive from the <see cref="T:System.IO.Stream"/> class
include:</para>
			<list type="bullet"><item>
					<term>
						<see cref="T:System.IO.BufferedStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.FileStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.MemoryStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.Net.Sockets.NetworkStream"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.Security.Cryptography.CryptoStream"/></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example serializes an object with a <see cref="T:System.IO.Stream"/> object. The
   example also creates an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> and adds two
   namespaces to the object. The class defining the serialized object is also
   attributed with <see cref="System.Xml.Serialization.XmlElementAttribute"/> attributes to specify the namespace
   for each element.</para>
			<codelink SampleID="Classic XmlSerializer.Serialize3 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc><doc for="XmlSerializer.Serialize5">
		<summary>
			<para>Serializes the specified <see cref="T:System.Object"/> and writes the XML document to a file using
   the specified <see cref="T:System.Xml.XmlWriter"/> , referencing the specified namespaces.</para>
		</summary>
		<param name="xmlWriter">The <see cref="T:System.xml.XmlWriter"/> used to write the XML document.</param>
		<param name=" o">The <see cref="T:System.Object"/> to serialize.</param>
		<param name=" namespaces">The <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> referenced by the object. </param>
		<remarks>
			<para>When the <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method is invoked, the public
   fields and read/write properties of an object are converted into XML.
   Methods, indexers, private fields, and read-only properties are not serialized.
   To serialize all fields and properties, both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>Use the <paramref name="xmlWriter"/> parameter
to specify
an object that derives from the abstract <see cref="T:System.Xml.XmlWriter"/> class, which is designed to write XML documents.
The <see cref="System.Xml.XmlTextWriter"/>
derives from the <see cref="T:System.Xml.XmlWriter"/>.</para>
		</remarks>
		<example>
			<para>The following example serializes an object with an
   <see cref="T:System.Xml.XmlWriter"/>
   . The example also creates an <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/>
   and adds two namespaces to the object. Several instances of the <see cref="System.Xml.Serialization.XmlElementAttribute"/> class are applied to the class
   members to specify the namespace for each element.</para>
			<codelink SampleID="Classic XmlSerializer.Serialize5 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc><doc for="XmlSerializer.UnknownAttribute">
		<summary>
			<para>Occurs when the <see cref="System.Xml.Serialization.XmlSerializer"/> encounters an XML attribute of unknown
   type during deserialization.</para>
		</summary>
		<remarks>
			<para>By default, after calling the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> method, the <see cref="System.Xml.Serialization.XmlSerializer"/> ignores
   XML
   attributes of unknown types. However, you can use this event to handle such node
   types.</para>
			<para>If the instance of the class being deserialized contains a field that returns
   an array of <see cref="System.Xml.XmlAttribute"/> objects, and an <see cref="System.Xml.Serialization.XmlAnyAttributeAttribute"/> has been applied to the field, the
<see cref="System.Xml.Serialization.XmlSerializer.UnknownAttribute"/> event will not occur. Instead, all 
   unknown XML attributes will be collected into the array. </para>
		</remarks>
		<example>
			<para>The following example prints information about any unknown attributes encountered while deserializing an XML document.</para>
			<codelink SampleID="Classic XmlSerializer.UnknownAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAnyAttributeAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.UnknownNode"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer.UnknownElement">
		<summary>
			<para>Occurs when the <see cref="System.Xml.Serialization.XmlSerializer"/> encounters an XML element of unknown
   type during deserialization.</para>
		</summary>
		<remarks>
			<para>By default, after calling the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/> method,
   the <see cref="System.Xml.Serialization.XmlSerializer"/> ignores XML attributes of unknown
   types. However, you can use this event to handle such node types.</para>
			<note type="note">
   If the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> is applied
   to a field that returns an array of <see cref="System.Xml.XmlElement"/>
   objects, all unknown elements will be collected in the
   array. In that case, the <see cref="System.Xml.Serialization.XmlSerializer.UnknownElement"/> event will not
   occur.
</note>
		</remarks>
		<example>
			<para>The following example deserializes a class named <c>Group</c> that
   from a file named UnknownElements.xml. Whenever an element is found in the
   file that has no corresponding member in the class, the <see cref="System.Xml.Serialization.XmlSerializer.UnknownElement"/>
   event occurs. To try the example, paste the XML code below into a file
   named UnknownElements.xml.</para>
			<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;GroupName&gt;MyGroup&lt;/GroupName&gt;
  &lt;GroupSize&gt;Large&lt;/GroupSize&gt;
  &lt;GroupNumber&gt;444&lt;/GroupNumber&gt;
  &lt;GroupBase&gt;West&lt;/GroupBase&gt;
&lt;/Group&gt;
</code>
			<codelink SampleID="XmlSerializer.UnknownElement Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAnyElementAttribute"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.UnknownNode"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.UnknownAttribute"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc><doc for="XmlSerializer">
		<summary>
			<para>Serializes and deserializes objects into and from
      XML documents. The <see cref="System.Xml.Serialization.XmlSerializer"/> enables you to control how objects are
      encoded into XML.</para>
		</summary>
		<remarks>
			<para> XML serialization is the process of converting an
      object's public properties and fields to a serial format (in this case, XML) for
      storage or transport. Deserialization re-creates the object in its
      original state from the XML output. You can thus think of serialization as a
      way of saving the state of an object into a stream or buffer. For example,
      ASP.NET uses the <see cref="System.Xml.Serialization.XmlSerializer"/> class to
      
      encode XML Web service
      messages.</para>
			<para> The data in your objects is described using programming language
      constructs like classes, fields, properties, primitive types, arrays, and even
      embedded XML in the form of <see cref="System.Xml.XmlElement"/> or <see cref="System.Xml.XmlAttribute"/>
      objects. You have
      the option of creating your own classes,
      annotated with attributes, or
      using the <see topic="cpconXMLSchemaDefinitionToolXsdexe"/> to generate the classes based on an existing XML Schema
      definition (XSD) document. If you have an XML Schema, you can run the Xsd.exe
      
      to produce a set of classes that are strongly typed to the schema
      and annotated with attributes to adhere to the schema when serialized.</para>
			<para> To transfer
      data between objects and XML requires a mapping from the programming language
      constructs to XML Schema and vice versa. The <see cref="System.Xml.Serialization.XmlSerializer"/> ,
      and related tools like Xsd.exe, provide the bridge between these
      two technologies at both design time and run time. At design time, use the
      Xsd.exe to produce an XML Schema document (.xsd) from your custom classes, or to
      produce classes from a given schema. In either case, the classes are annotated
      with custom attributes to instruct the <see cref="System.Xml.Serialization.XmlSerializer"/> how to map
      between the XML Schema system to the common language runtime. At run time, instances of the classes can
      be serialized into XML documents that follow the given schema. Likewise, these XML
      documents can be deserialized into run time objects. (Note that the XML
      Schema is optional, and not needed at design time or run
      time.)</para>
			<para>To control the generated XML, you can apply special
      attributes to classes and members. For example, to specify a different XML
      element name, apply an <see cref="System.Xml.Serialization.XmlElementAttribute"/> to a public field or
      property, and set the <see cref="System.Xml.Serialization.XmlElementAttribute.ElementName"/>
      
      property. For a list of all attributes, see <see topic="cpconAttributesThatControlSerialization"/>.</para>
			<para> If the XML generated must conform to section 5 of
      the World Wide Consortium (www.w3.org) document, "Simple Object Access Protocol
      (SOAP) 1.1", you must construct the <see cref="System.Xml.Serialization.XmlSerializer"/> with an <see cref="System.Xml.Serialization.XmlTypeMapping"/>
      . To
      further control the encoded SOAP XML, use the attributes listed in
   <see topic="cpconAttributesThatControlSOAPEncodedSerialization"/>.</para>
			<para>With the <see cref="System.Xml.Serialization.XmlSerializer"/> you can take advantage of working
   with strongly typed classes and still have the flexibility of XML. Using fields
   or properties of type <see cref="System.Xml.XmlElement"/>, <see cref="System.Xml.XmlAttribute"/> or <see cref="System.Xml.XmlNode"/> in your strongly typed classes, you can read parts
   of the XML document directly into XML objects. </para>
			<para>If you work with extensible XML schemas, you can also use
   the <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> and <see cref="System.Xml.Serialization.XmlAnyAttributeAttribute"/>
   attributes to serialize and deserialize elements
   or attributes that are not found in the original schema. To use the objects,
   apply an <see cref="System.Xml.Serialization.XmlAnyElementAttribute"/> to a field that returns an array of
<see cref="System.Xml.XmlElement"/> objects, 
   or apply an <see cref="System.Xml.Serialization.XmlAnyAttributeAttribute"/> to a field that
   returns an array of <see cref="System.Xml.XmlAttribute"/>
   objects.</para>
			<para>If a property or field returns a complex object (such as
   an array or a class instance), the <see cref="System.Xml.Serialization.XmlSerializer"/>
   converts it to an element nested within the main XML document. For example, the
   first class in the following C# code returns an instance of the second
   class.</para>
			<code>
public class MyClass
{
 public MyObject MyObjectProperty;
}
public class MyObject
{
 public string ObjectName;
}
</code>
			<para> The serialized, XML output looks like
   this:</para>
			<code>
&lt;MyClass&gt;
 &lt;MyObjectProperty&gt;
 &lt;Objectname&gt;My String&lt;/ObjectName&gt;
 &lt;/MyObjectProperty&gt;
&lt;/MyClass&gt;
</code>
			<para>If a schema includes an element that is optional
   (minOccurs = '0'), or if the schema includes a default value, you have two
   options. One option is to use <see cref="System.ComponentModel.DefaultValueAttribute" qualify="true"/> to specify the
   default value, as shown in the C# and Visual Basic code below.</para>
			<code>
' Visual Basic
Public Class PurchaseOrder
   &lt;System.ComponentModel.DefaultValueAttribute ("2002")&gt; _
   Public Year As String
End Class

// C#
public class PurchaseOrder
{
   [System.ComponentModel.DefaultValueAttribute ("2002")]
   public string Year;
}
</code>
			<para>Another option is to use a special pattern to create a Boolean field
   recognized by the <see cref="System.Xml.Serialization.XmlSerializer"/>, and to apply the <see cref="System.Xml.Serialization.XmlIgnoreAttribute"/> to the field. The pattern is
   created in the form of <paramref name="propertyNameSpecified"/> . For example, if there
   is a field named "MyFirstName" you would also create a field named
   "MyFirstNameSpecified" that instructs the <see cref="System.Xml.Serialization.XmlSerializer"/> whether or not to
   generate the XML element named "MyFirstName". This is shown in the following C#
   and Visual Basic example.</para>
			<code>
' Visual Basic
Public Class OptionalOrder
   ' This field's value shouldn't be serialized 
   ' if it is uninitialized.
   Public FirstOrder As String

   ' Use the XmlIgnoreAttribute to ignore the 
   ' special field named "FirstOrderSpecified".
   &lt;System.Xml.Serialization.XmlIgnoreAttribute&gt; _
   Public FirstOrderSpecified As Boolean
End Class

' C#
public class OptionalOrder
{
   // This field shouldn't be serialized 
   // if it is uninitialized.
   public string FirstOrder;

   // Use the XmlIgnoreAttribute to ignore the 
   // special field named "FirstOrderSpecified".
   [System.Xml.Serialization.XmlIgnoreAttribute]
   public bool FirstOrderSpecified;
}
</code>
			<para>You can also override the serialization of any set of objects and their
   fields and properties by creating one of the appropriate attributes, and adding
   it to an <see cref="System.Xml.Serialization.XmlAttributes"/>. Overriding serialization in
   this way has two uses: first, you can control and augment the serialization of
   objects found in a DLL, even if you don't have access to the source; second,
   you can create one set of serializable classes, but serialize the objects in
   multiple ways. For more details, see the <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class.</para>
			<para>To serialize an object, call the <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method.
To deserialize an object, call the <see cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
method.</para>
			<para>To add XML namespaces to an XML document, see <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/>.</para>
			<note type="note">
   
   The <see cref="System.Xml.Serialization.XmlSerializer"/> gives special treatment to classes
   that implement <see cref="T:System.Collections.IEnumerable"/> or
<see cref="T:System.Collections.ICollection"/>. A class that implements <see cref="T:System.Collections.IEnumerable"/> must implement a public <see langword="Add "/>method that takes a single parameter. The <see langword="Add "/>method's parameter must be of the same type as is returned from the 
<see langword="Current "/>property on the value returned from 
<see langword="GetEnumerator"/>, or one of that type's bases. A class that 
   implements <see cref="T:System.Collections.ICollection"/> (such as <see cref="T:System.Collections.CollectionBase"/>) in addition to
<see cref="T:System.Collections.IEnumerable"/> must
   have a public <see langword="Item "/>indexed property (indexer in C#) that takes an
   integer, and it must have a public <see langword="Count "/>property of type
   integer. The parameter to the <see langword="Add "/>method must be the same type
   as is returned from the <see langword="Item "/>property, or one of that type's
   bases. For classes implementing <see cref="T:System.Collections.ICollection"/>, values to be serialized
   will be retrieved from the indexed <see langword="Item "/>property, not by
   calling <see langword="GetEnumerator"/> .
</note>
		</remarks>
		<example>
			<para> The following example contains two main classes: <c>PurchaseOrder</c> and <c>Test</c>. The <c>PurchaseOrder</c> class contains information about a single purchase.
   The <c>Test</c>
class contains the methods that create the purchase order,
and that read the created purchase order.</para>
			<codelink SampleID="Classic XmlSerializer Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlAttributes"/>
	</doc>
	<doc for="XmlSerializer.UnreferencedObject">
		<summary>
			<para>Occurs during deserialization of a SOAP-encoded XML
      stream, when the <see cref="System.Xml.Serialization.XmlSerializer"/> encounters a recognized type that is
      not used (unreferenced).</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.UnreferencedObject"/> event can only occur when the <see cref="System.Xml.Serialization.XmlSerializer"/> is used to deserialize an XML
   document containing a SOAP message that conforms to section 5 of the World Wide
   Web Consortium (www.w3.org) document, "Simple
   Object Access Protocol (SOAP) 1.1". </para>
			<para>Documents that conform to section 5 are in a special
   format. At the very least, such a document includes the main body of the SOAP
   message. However, rather than having all types defined inline in the document,
   some type definitions might be encoded as references to top-level elements in the
   document. Thus, for every element found in the main body that is a reference,
   there must be a corresponding element that contains the type definition. To
   correlate the referencing element and the type definition, the type definition
   has an <see langword="id"/> attribute set to a unique string
   ID and the referencing element has an <see langword="href"/>
   
   
   attribute
   that references the same ID.</para>
			<code>
&lt;Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="id1" n1:GroupName=".NET" GroupNumber="ZDI=" CreationDate="2002-05-02" xmlns:n1="http:'www.cpandl.com"&gt;
    &lt;PosInt xsi:type="xsd:nonNegativeInteger"&gt;10000&lt;/PosInt&gt;
    &lt;GroupVehicle href="#id2" /&gt;
  &lt;/Group&gt;
  &lt;Vehicle id="id2" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string"&gt;1234&lt;/licenseNumber&gt;
  &lt;/Vehicle&gt;
</code>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.UnreferencedObject"/> event will thus occur when there is
a type definition found in the document, but no parameter in the main body
references it. When the event occurs, you can retrieve the XML type of the
unreferenced object by examining the <see cref="System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject"/> property of the <see cref="System.Xml.Serialization.UnreferencedObjectEventArgs"/> class. The XML ID of the object is
returned by the <see cref="System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId"/>
property.</para>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.UnreferencedObject"/> event should not be confused with the
<see cref="System.Xml.Serialization.XmlSerializer.UnknownElement"/> and <see cref="System.Xml.Serialization.XmlSerializer.UnknownNode"/> 
events,
which occur when there is no class member corresponding to the XML node or element
type.</para>
		</remarks>
		<example>
			<para>The following example adds an <see cref="System.Xml.Serialization.UnreferencedObjectEventHandler"/> to an <see cref="System.Xml.Serialization.XmlSerializer"/>. The event is handled by
   the <c>Serializer_UnreferencedObject</c> method. To run the example, you
should cut and paste the following XML into a file named "UnrefObj.xml".</para>
			<code>
&lt;wrapper&gt;
  &lt;Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="id1" n1:GroupName=".NET" xmlns:n1="http://www.cpandl.com"&gt;
   &lt;/Group&gt;

&lt;Vehicle id="id2" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string"&gt;ABCD&lt;/licenseNumber&gt;
  &lt;/Vehicle&gt;

&lt;Vehicle id="id3" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string"&gt;1234&lt;/licenseNumber&gt;
  &lt;/Vehicle&gt;

&lt;/wrapper&gt;
</code>
			<codelink SampleID="UnreferencedObject Event Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconAttributesThatControlSOAPEncodedSerialization"/>
		<seealso topic="cpconXMLSerializationUsingSOAPProtocol"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc>
	<doc for="XmlSerializer.XmlSerializer3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of
   the specified type into XML documents, and vice versa. If a property or
   field returns an array, the <paramref name="extraTypes"/>
   parameter specifies objects
   that can be inserted into the array.</para>
		</summary>
		<param name="type">The type of the object that this <see cref="System.Xml.Serialization.XmlSerializer"/> can serialize.</param>
		<param name="extraTypes">A <see cref="T:System.Type"/> array of additional object types to serialize.</param>
		<remarks>
			<para> By default, if a public property or field returns an
      object, or array of objects, the object types will be automatically serialized.
      However, if a class contains a field or property that returns an array of type
   <see cref="T:System.Object"/>, any
      object can be inserted into that array. In that case, the <see cref="System.Xml.Serialization.XmlSerializer"/> must be instructed to expect all
      the possible object types that will be inserted into the <see cref="T:System.Object"/> array. To do
      this, use the <paramref name="extraTypes "/>
      
      parameter to specify the extra object types to serialize or
      deserialize.</para>
			<para>You can also use the <paramref name="extraTypes"/> parameter to specify types derived
   from a base class. For example, suppose a base class named <see langword="Phone "/>exists, and a class named <see langword="InternationalPhone "/>derives
   from it. Use the <paramref name="extraTypes "/>parameter to specify the derived type as
   well. </para>
		</remarks>
		<example>
			<para>The following example serializes an instance of a class
      that contains a public field that returns an array of objects. The
   <paramref name="extraTypes "/>parameter of the <see cref="System.Xml.Serialization.XmlSerializer"/>
   constructor specifies the types of the objects that
   can be serialized in the array.</para>
			<codelink SampleID="Classic XmlSerializer.XmlSerializer3 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc>
	<doc for="XmlSerializer.Serialize">
		<overload>
			<para>Serializes an object into
      an XML document.</para>
		</overload>
		<summary>
			<para>Serializes the specified <see cref="T:System.Object"/> and writes the XML document to a file using
   the specified <see cref="T:System.IO.TextWriter"/>.</para>
		</summary>
		<param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the XML document.</param>
		<param name="o">The <see cref="T:System.Object"/> to serialize.</param>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method 
   converts the public fields and read/write properties of an object into
   XML. It does not convert methods, indexers, private fields, or read-only
   properties. To serialize all an object's fields and properties,
   both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>In the <paramref name="textWriter "/>
parameter, specify an object that derives from the
abstract <see cref="T:System.IO.TextWriter"/>
class. Classes that derive from <see cref="T:System.IO.TextWriter"/> include:</para>
			<list type="bullet"><item>
					<term>
						<see cref="T:System.IO.StreamWriter"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.IO.StringWriter"/></term>
				</item>
				<item>
					<term>
						<see cref="T:System.CodeDom.Compiler.IndentedTextWriter"/></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example serializes an object using a
   <see cref="T:System.IO.TextWriter"/> .</para>
			<codelink SampleID="Classic XmlSerializer.Serialize Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc>
	<doc for="XmlSerializer.Serialize4">
		<summary>
			<para>Serializes the specified <see cref="T:System.Object"/> and writes the XML document to a file using
   the specified <see cref="T:System.Xml.XmlWriter"/>.</para>
		</summary>
		<param name="xmlWriter">The <see cref="T:System.xml.XmlWriter"/> used to write the XML document.</param>
		<param name="o">The <see cref="T:System.Object"/> to serialize.</param>
		<remarks>
			<para>The <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method 
   converts the public fields and read/write properties of an object into
   XML. It does not convert methods, indexers, private fields, or read-only
   properties. To serialize all an object's fields and properties,
   both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>In the <paramref name="xmlWriter"/>
parameter, specify
an object that derives from the abstract <see cref="T:System.Xml.XmlWriter"/> class.
The <see cref="System.Xml.XmlTextWriter"/>
derives from the <see cref="T:System.Xml.XmlWriter"/>.</para>
		</remarks>
		<example>
			<para> The following example serializes an object using an
   <see cref="T:System.Xml.XmlWriter"/> .</para>
			<codelink SampleID="Classic XmlSerializer.Serialize4 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc>
	<doc for="XmlSerializer.XmlSerializer">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Xml.Serialization.XmlSerializer"/> class that can serialize objects of
   type <see cref="System.Object"/> into XML
   document instances, and vice versa. Each object to be serialized can itself
   contain instances of classes, which this overload can override with other classes. This overload
   also specifies the default namespace for all the
   XML elements, and the class to use as the XML root element.</para>
		</summary>
		<param name="type">The type of the object that this <see cref="System.Xml.Serialization.XmlSerializer"/> can serialize. </param>
		<param name=" overrides">An <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> that extends or overrides the behavior of the class specified in the <paramref name="type"/> parameter.</param>
		<param name=" extraTypes">A <see cref="T:System.Type"/> array of additional object types to serialize. </param>
		<param name=" root">An <see cref="System.Xml.Serialization.XmlRootAttribute"/> that defines the XML root element properties.</param>
		<param name=" defaultNamespace">The default namespace of all XML elements in the XML document.</param>
		<remarks>
			<para>The <paramref name="overrides"/> parameter
   allows for the creation of an <see cref="System.Xml.Serialization.XmlSerializer"/>
   that serializes a class that extends or overrides the behavior of a base class. For example, given a
   DLL, it's possible to create a class that inherits or extends a class contained in the DLL. To serialize such a
   class, you must use an instance of the <see cref="System.Xml.Serialization.XmlAttributeOverrides"/> class
   when constructing the <see cref="System.Xml.Serialization.XmlSerializer"/>. For more details, see <see cref="System.Xml.Serialization.XmlAttributeOverrides"/>.</para>
			<para>By default, if a public property or field returns an
   object, or array of objects, the object types will be automatically serialized.
   However, if a class contains a field or property that returns an array of type
<see cref="T:System.Object"/>, any 
   object can be inserted into that array. In that case, the <see cref="System.Xml.Serialization.XmlSerializer"/> must be instructed to expect all
   the possible object types that will be inserted into the <see cref="T:System.Object"/> array. To do
   this, use the <paramref name="extraTypes "/>parameter to specify the extra object types to
   serialize or deserialize.</para>
			<para>The root element of an XML document encloses all the
   other elements. By default, the object specified by the <paramref name="type "/>parameter
   is serialized as the root element. Properties, such as the XML element name
   of the root element are taken from the <paramref name="type"/> object. However, the
<paramref name="root"/> parameter allows you to supplant the default object's 
   information by specifying an <see cref="System.Xml.Serialization.XmlRootAttribute"/>; the object allows
   you to set a different namespace, element name, and so on.</para>
			<para>Use the <paramref name="defaultName "/>parameter to specify the default namespace of all XML elements generated by the
<see cref="System.Xml.Serialization.XmlSerializer"/> 
.</para>
		</remarks>
		<example>
			<para>The following example serializes an instance of a class that is defined in a
      DLL, and, to do so, overrides the public members found in the class. The example
      also specifies an array of extra types, the default namespace for all XML
      elements, and the class to use that provides the XML root element information.
      The example assumes that the code at the beginning has been compiled into a DLL
      named HighSchool.</para>
			<codelink SampleID="Classic XmlSerializer.XmlSerializer Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlAttributeOverrides"/>
		<seealso cref="System.Xml.Serialization.XmlRootAttribute"/>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
	</doc>
	<doc for="XmlSerializer.FromMappings">
		<internalonly/>
		<summary>
			<para>Returns an array of <see cref="System.Xml.Serialization.XmlSerializer"/> objects created from an array of <see cref="System.Xml.Serialization.XmlTypeMapping"/> 
objects.</para>
		</summary>
		<param name="mappings">An array of <see cref="System.Xml.Serialization.XmlTypeMapping"/> that maps one type to another. </param>
		<returns>
			<para>An array of <see cref="System.Xml.Serialization.XmlSerializer"/> objects.</para>
		</returns>
	</doc>
	<doc for="XmlSerializer.Deserialize4">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="XmlSerializer.Serialize7">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="XmlSerializer.Serialize6">
		<summary>
			<para>Serializes the specified object and writes the XML document to a file using
      the specified <see cref="T:System.Xml.XmlWriter"/> , referencing the specified namespaces and encoding style.</para>
		</summary>
		<param name="xmlWriter">The <see cref="T:System.xml.XmlWriter"/> used to write the XML document.</param>
		<param name=" o">The object to serialize.</param>
		<param name=" namespaces">The <see cref="System.Xml.Serialization.XmlSerializerNamespaces"/> referenced by the object. </param>
		<param name=" encodingStyle">The encoding style of the serialized XML.</param>
		<exception cref="System.InvalidOperationException"><paramref name="encodingStyle "/>is neither "http://schemas.xmlsoap.org/soap/encoding/" nor "http://www.w3.org/2001/12/soap-encoding".</exception>
		<remarks>
			<para>When the <see cref="System.Xml.Serialization.XmlSerializer.Serialize"/> method is invoked, the public
   fields and read/write properties of an object are converted into XML.
   Methods, indexers, private fields, and read-only properties are not serialized.
   To serialize all fields and properties, both public and private, use the <see cref="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</para>
			<para>Use the <paramref name="xmlWriter"/> parameter
to specify
an object that derives from the abstract <see cref="T:System.Xml.XmlWriter"/> class, which is designed to write XML documents.
The <see cref="System.Xml.XmlTextWriter"/>
derives from the <see cref="T:System.Xml.XmlWriter"/>.</para>
			<para>Set the <paramref name="encodingStyle"/> 
parameter to "http://schemas.xmlsoap.org/soap/encoding/" for SOAP version 1.1 encoding; otherwise, set
it to "http://www.w3.org/2001/12/soap-encoding" for SOAP version 1.2 encoding. </para>
		</remarks>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc>
	<doc for="XmlSerializer.CanDeserialize">
		<summary>
			<para>Gets a value indicating whether this <see cref="System.Xml.Serialization.XmlSerializer"/> can deserialize a specified
   XML document.</para>
		</summary>
		<param name="xmlReader">An <see cref="T:System.Xml.XmlReader"/> that points to the document to deserialize.</param>
		<returns>
			<para><see langword="true"/> if
   this <see cref="System.Xml.Serialization.XmlSerializer"/> can deserialize the object which
   the <see cref="T:System.Xml.XmlReader"/> points to; otherwise,
<see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example calls the <see cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/> method to check whether an XML document can
   be deserialized.</para>
			<codelink SampleID="Classic XmlSerializer.CanDeserialize Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Deserialize"/>
	</doc>
	<doc for="XmlSerializer.Deserialize3">
		<summary>
			<para>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader"/>and encoding
   style.</para>
		</summary>
		<param name="xmlReader">The <see cref="T:System.xml.XmlReader"/> containing the XML document to deserialize.</param>
		<param name=" encodingStyle">The encoding style of the serialized XML.</param>
		<returns>
			<para>The <see cref="T:System.Object"/> being deserialized.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><paramref name="encodingStyle "/>is neither "http://schemas.xmlsoap.org/soap/encoding/" nor "http://www.w3.org/2001/12/soap-encoding".</exception>
		<remarks>
			<para>Deserialization is the process of reading an XML instance document
      and constructing an object that is strongly typed to the XML Schema (XSD) of
      the document.</para>
			<para> Before deserializing, an <see cref="System.Xml.Serialization.XmlSerializer"/> must be constructed using the type of
   the object that is being deserialized. </para>
			<para>Set the <paramref name="encodingStyle"/> parameter to "http://schemas.xmlsoap.org/soap/encoding/ " for SOAP version 1.1 encoding; otherwise, set
it to "http://www.w3.org/2001/12/soap-encoding" for SOAP version 1.2 encoding. </para>
		</remarks>
		<seealso topic="cpconIntroducingXMLSerialization"/>
		<seealso topic="cpconControllingSerializationByXmlSerializerWithAttributes"/>
		<seealso topic="cpconAnExampleOfXMLSerializationWithXmlSerializer"/>
		<seealso topic="cpconUsingXMLSchemaDefinitionTool"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.CanDeserialize"/>
		<seealso cref="System.Xml.Serialization.XmlSerializer.Serialize"/>
	</doc>
</docs>
