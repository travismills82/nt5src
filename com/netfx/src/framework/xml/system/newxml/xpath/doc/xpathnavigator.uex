<docs>
	<doc for="XPathNavigator.HasValue">
		<summary>
			<para>When overridden in a derived class, gets a value indicating whether the current node can
      have a <see cref="System.Xml.XPath.XPathNavigator.Value"/>.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the current 
   node can have a <see langword="Value"/>; otherwise <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="XPathNavigator.XmlSpace">
		<summary>
			<para> When overridden in a derived class, gets the xml:space scope.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Xml.XmlSpace"/> values. </para>
		</value>
	</doc>
	<doc for="XPathNavigator.IsDescendant">
		<summary>
			<para>Determines whether the specified
 <see langword="XPathNavigator"/> is a descendant of the current
 <see langword="XPathNavigator"/>.</para>
		</summary>
		<param name="nav">The <see langword="XPathNavigator"/> that you want to compare against. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="nav"/>
is a descendant of the current navigator; otherwise <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> A navigator is a descendant of another navigator if
 it is positioned on a descendant node of the current navigator. For example, using the
 following XML string: <c>&lt;item&gt;&lt;name&gt;widget&lt;/name&gt;&lt;/item&gt;</c></para>
			<para> If the current navigator is positioned on the item
 node and <paramref name="nav"/> is positioned on the name node,
 <see langword="IsDescendant"/> returns <see langword="true"/>.</para>
			<para>This method always returns <see langword="false"/> under the following
 conditions:</para>
			<list type="bullet"><item>
					<term>
						<paramref name="nav"/> is an <see langword="XPathNavigator"/> that shares the same 
 implementation but is pointing at a different document instance than the
 current navigator.</term>
				</item>
				<item>
					<term>
						<paramref name="nav"/> is an <see langword="XPathNavigator"/> that has a different
 implementation than the current navigator.</term>
				</item>
			</list>
		</remarks>
	</doc><doc for="XPathNavigator.Matches1">
		<summary>
			<para>Determines whether the current node matches the
      specified XSLT pattern.</para>
		</summary>
		<param name="xpath">A string representing an XSLT pattern.</param>
		<returns>
			<para><see langword="true"/> if the
   current node matches the XSLT pattern; otherwise,
<see langword="false"/>
.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="xpath"/> cannot be evaluated.</exception>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>
   .</para>
		</remarks>
	</doc><doc for="XPathNavigator.ComparePosition">
		<summary>
			<para> Compares the position of the current navigator with the
      position of the specified <see langword="XPathNavigator"/> .</para>
		</summary>
		<param name="nav">The <see langword="XPathNavigator"/> to compare against.</param>
		<returns>
			<para>An <see cref="System.Xml.XmlNodeOrder"/> value representing the comparative position of the
   two navigators. The following table describes the <see langword="XmlNodeOrder"/>
   enumeration.</para>
			<list type="table">
				<listheader>
					<term>XmlNodeOrder</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Before</term>
					<description>
						<para> The current node of this navigator is before the current node
            of the supplied navigator.</para></description>
				</item>
				<item>
					<term> After</term>
					<description>
						<para> The current node of this navigator is after the current node of
               the supplied navigator.</para></description>
				</item>
				<item>
					<term> Same</term>
					<description>
						<para> The two navigators are positioned
                  on the same node.</para></description>
				</item>
				<item>
					<term> Unknown</term>
					<description>
						<para>The node positions cannot be determined in document order, relative to
                     each other. This could occur if the two nodes reside in different
                     trees.</para></description>
				</item>
			</list>
		</returns>
		<exception cref="Exception">The <paramref name="nav"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The method behavior is dependent on the node type the
         <see langword="XPathNavigator"/> is currently positioned on. When
            comparing nodes in the XML document, the following rules apply:
            </para>
			<list type="bullet"><item>
					<term>
               
               Element nodes - These nodes are returned in document
               order from the source document.</term>
				</item>
				<item>
					<term>
               
               Namespace nodes - These nodes may be returned in
               document order and are always before the attribute nodes of the parent
               element.</term>
				</item>
				<item>
					<term>
               
               Attribute nodes - These nodes may be returned in
               document order. They always come after the namespace nodes and
               before any child nodes of
               the parent node.</term>
				</item>
			</list>
			<note type="note">
         
         For more information on the XPath data model
         and details on each of the
         node types, see section 5 of the
         
         W3C XML Path
         Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.
         
      </note>
			<para>This method has no effect on the state of the
      <see langword="XPathNavigator"/>.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.IsSamePosition"/>
	</doc><doc for="XPathNavigator.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="XPathNavigator.BaseURI">
		<summary>
			<para> Gets the base URI for the current node.</para>
		</summary>
		<value>
			<para>The base URI for the current node or empty string if
      there is no value.</para>
		</value>
		<remarks>
			<para>A networked XML document is comprised of chunks of data, aggregated using various W3C standard inclusion mechanisms, and therefore contains nodes that come from different places. DTD entities are an example of this, however, this is not limited to DTDs. The <see langword="BaseURI"/> property tells you where these nodes originate from.</para>
			<para>For example, if the XML data is loaded from http://server/mydata.xml then <see langword="BaseURI"/> returns http://server/mydata.xml.</para>
		</remarks>
	</doc><doc for="XPathNavigator.XmlLang">
		<summary>
			<para> Gets the
   <see langword="xml:lang"/> scope for the
      current node.</para>
		</summary>
		<value>
			<para>The value of the <see langword="xml:lang"/> scope or empty string if the current node has no value to return.</para>
		</value>
		<remarks>
			<para>Using the XML text below, if the navigator were
      positioned on the <see langword="name"/> element, the user can call this property
      to find out that the element is in the scope of a US English
   <see langword="xml:lang"/> attribute. </para>
			<code>
&lt;root xml:lang="en-us"&gt;
 &lt;name&gt;Fred&lt;/name&gt;
&lt;/root&gt;
   </code>
		</remarks>
	</doc><doc for="XPathNavigator.MoveToPrevious">
		<summary>
			<para> Moves to the
      previous sibling of the current node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the previous sibling node;
<see langword="false"/> if there is no 
   previous sibling or if the navigator is currently positioned on an attribute node. </para>
		</returns>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/>
	</doc><doc for="XPathNavigator.MoveToFirst">
		<summary>
			<para> Moves to the
      first sibling of the current node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the first sibling node;
<see langword="false"/> if there is no 
   first sibling or if the navigator is currently positioned on an attribute node. </para>
		</returns>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>
	</doc><doc for="XPathNavigator.HasChildren">
		<summary>
			<para> Gets a value indicating whether
      the current node has child nodes.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if the current node has child nodes;
otherwise, <see langword="false"/>. If the navigator is positioned on a
node which cannot have children, this property always returns
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The following table lists the <see cref="System.Xml.XPath.XPathNodeType"/> and what type of child nodes
   they may have, if any.
   </para>
			<list type="table">
				<listheader>
					<term>XPathNodeType</term>
					<description>Child Nodes </description>
				</listheader>
				<item>
					<term> Root</term>
					<description>Element, comment or processing instruction
         nodes.</description>
				</item>
				<item>
					<term> Element</term>
					<description>Element, text, comment, whites pace or significant white space
         nodes.</description>
				</item>
				<item>
					<term> All other <see langword="XpathNodeType"/> nodes</term>
					<description>These node types cannot have child
      nodes.</description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstChild"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToParent"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>
	</doc><doc for="XPathNavigator.MoveToFirstChild">
		<summary>
			<para> Moves to the
      first child of the current node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there is a first child node; otherwise
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para><see langword="Root"/> and <see langword="Element"/> are the only two XPath node
   types that can have children. This property always returns
<see langword="false"/> for all other node types.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNodeType"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToParent"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.HasChildren"/>
	</doc><doc for="XPathNavigator.MoveToParent">
		<summary>
			<para> Moves to
      the parent of the current node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there is a parent node; otherwise
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The following table lists the <see cref="System.Xml.XPath.XPathNodeType"/>
and what type of parent node they may have, if any.</para>
			<list type="table">
				<listheader>
					<term>XPathNodeType</term>
					<description>Parent Node</description>
				</listheader>
				<item>
					<term> Root</term>
					<description>Root
         nodes do not have parents.</description>
				</item>
				<item>
					<term> Element</term>
					<description>Element or Root node.</description>
				</item>
				<item>
					<term> Attribute</term>
					<description>Element node.</description>
				</item>
				<item>
					<term> Text</term>
					<description>Element node.</description>
				</item>
				<item>
					<term> Namespace</term>
					<description>Element node.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>Element or Root node.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>Element or Root node.</description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>Element or Root node.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>Element or Root node.</description>
				</item>
			</list>
		</remarks>
	</doc><doc for="XPathNavigator.MoveToRoot">
		<summary>
			<para> Moves to the root node
      to which the current node belongs.</para>
		</summary>
		<remarks>
			<para>All nodes belong to one and only one document.
      Therefore, this method is always successful. For a definition of a root
      node, see section 5.1 of the W3C XML Path Language (XPath) recommendation
      located at http://www.w3.org/TR/xpath#data-model.</para>
		</remarks>
	</doc><doc for="XPathNavigator.MoveTo">
		<summary>
			<para> Moves to the same
      position as the specified <see langword="XPathNavigator"/>
      .</para>
		</summary>
		<param name="other">The <see langword="XPathNavigator"/> positioned on the node that you want to move to.</param>
		<returns>
			<para><see langword="true "/>if successful; otherwise <see langword="false"/>. If <see langword="false"/> , the position of the
   navigator is unchanged.</para>
		</returns>
		<remarks>
			<para>This method always returns <see langword="true"/> if <paramref name="other"/> is an
<see langword="XPathNavigator"/> that shares the same implementation and is 
   pointing at the same document instance
   as the current navigator.</para>
			<para>This method always returns <see langword="false"/> if
<paramref name="other"/> is an <see langword="XPathNavigator"/> that has a different 
implementation than the current navigator.</para>
			<para>If <paramref name="other"/> is an <see langword="XPathNavigator"/>
that shares the same implementation but is pointing at a different document
instance than the current navigator, the behavior of <see langword="MoveTo"/>
varies depending on how the navigators were implemented. If the navigators
were implemented over an <see cref="System.Xml.XPath.XPathDocument"/>, <see langword="MoveTo"/> returns
<see langword="true"/>. If the navigators were implemented over either 
an <see cref="System.Xml.XmlDocument"/> or an <see cref="T:System.Xml.XmlDataDocument"/>, <see langword="MoveTo"/> returns
<see langword="false"/>.</para>
		</remarks>
	</doc><doc for="XPathNavigator.MoveToId">
		<summary>
			<para> Moves to the
      node that has an attribute of type ID whose
      value matches the specified string.</para>
		</summary>
		<param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
		<returns>
			<para><see langword="true "/>if the move
   was successful; otherwise <see langword="false"/>. If
<see langword="false"/> , the position of the navigator is unchanged.</para>
			<note type="note">
   If the navigator is implemented over
   an <see cref="T:System.Xml.XmlDataDocument"/>, this method always returns <see langword="false"/>
   and the position of the navigator is not changed.
</note>
		</returns>
		<remarks>
			<para> This method
      can be used to identify nodes by unique ID provided the source document
      explicitly declares attributes of type ID using a DTD.</para>
			<para>For example, suppose the following XML data, <c>&lt;data&gt;&lt;x a="a1"/&gt;&lt;/data&gt;
   </c>, was loaded using a DTD that included the following: <c>&lt;!ATTLIST x a ID
   #REQUIRED&gt;</c>.</para>
			<para>If the navigator was positioned somewhere in the XML
   data, calling <see langword="MoveToId(&quot;a1&quot;)"/> positions the navigator on the
   element node <see langword="x"/>
   .</para>
		</remarks>
	</doc><doc for="XPathNavigator.IsSamePosition">
		<summary>
			<para> Determines whether
      the current <see langword="XPathNavigator"/> is at the same position as the
      specified <see langword="XPathNavigator"/>
      .</para>
		</summary>
		<param name="other">The <see langword="XPathNavigator"/> that you want to compare against.</param>
		<returns>
			<para><see langword="true"/> if the two navigators have the
   same position; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method assumes that <paramref name="other"/> is an
<see langword="XPathNavigator"/> that shares the same implementation and is 
   pointing at the same document instance as the current navigator.</para>
			<para>This method always returns <see langword="false"/> under the following
conditions:</para>
			<list type="bullet"><item>
					<term>
						<paramref name="other"/> is an <see langword="XPathNavigator"/> that shares the same 
      implementation but is pointing at a different document instance than the
      current navigator.</term>
				</item>
				<item>
					<term>
						<paramref name="other"/> is an <see langword="XPathNavigator"/> that has a different
      implementation than the current navigator.</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.ComparePosition"/>
	</doc><doc for="XPathNavigator.HasAttributes">
		<summary>
			<para> Gets a
      value indicating whether the element node has any attributes.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the element node has attributes;
<see langword="false"/> if the node has 
   no attributes or if the <see langword="XPathNavigator"/> is not positioned on an element node. </para>
		</value>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetAttribute"/>
	</doc><doc for="XPathNavigator.MoveToFirstAttribute">
		<summary>
			<para> Moves to the first attribute.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the first attribute; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>If the navigator is not currently positioned on an 
      element, this method returns <see langword="false"/> and the position of the navigator does not
      change.</para>
			<para>After a successful call to <see langword="MoveToFirstAttribute"/>, the
<see langword="LocalName"/>, <see langword="NamespaceURI"/> and <see cref="System.Xml.XPath.XPathNavigator.Prefix"/> properties reflect the values 
   of the attribute. When the navigator is positioned on an attribute, the methods
<see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>, 
<see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always 
   return <see langword="false"/> and do not change
   the position of the navigator. Rather, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/> to move to the next attribute
   node.</para>
			<para>Once positioned on an attribute, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to move to the owner element.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.HasAttributes"/>
	</doc><doc for="XPathNavigator.MoveToNamespace">
		<summary>
			<para> Moves the
   <see langword="XPathNavigator"/> to the namespace
      node with the specified local name.</para>
		</summary>
		<param name="name">The local name of the namespace node.</param>
		<returns>
			<para><see langword="true"/> if the move was
   successful; <see langword="false"/> if a matching namespace node was not found or
   if the navigator is not positioned on an element node.</para>
		</returns>
		<remarks>
			<para> 
      After the navigator has been moved to the namespace
      node the <see cref="System.Xml.XPath.XPathNavigator.Name"/>
      property reflects the name of the namespace.</para>
			<para> When the navigator is positioned on a namespace node,
      the methods <see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>,
   <see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always
      return <see langword="false"/> and do not change
      the position of the navigator. Rather, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/> to move
      to the next namespace node.</para>
			<para>Once positioned on a namespace node, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to move back to the element
   node.</para>
			<para>For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath)
   recommendation located at http://www.w3.org/TR/xpath#data-model.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetNamespace"/>
	</doc><doc for="XPathNavigator.NodeType">
		<summary>
			<para> Gets the type of the current node.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Xml.XPath.XPathNodeType"/>
values.</para>
		</value>
		<example>
   The following example walks the node tree recursively
   and displays information on element and text nodes.
<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
	</doc><doc for="XPathNavigator.NamespaceURI">
		<summary>
			<para> Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.</para>
		</summary>
		<value>
			<para> The namespace URI of the current node or an empty string
      if the current node does not have one. For example
   <see langword="NamespaceURI"/> returns <see langword="urn:samples"/>
   for the node <c>&lt;bk:book xmlns:bk=
   'urn:samples'&gt;</c>
.</para>
		</value>
		<remarks>
			<para> Only element and attribute nodes can
      have a namespace URI.</para>
		</remarks>
		<example>
   The following example walks the node tree recursively and displays
   information on element and text nodes.
<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNodeType"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Prefix"/>
	</doc><doc for="XPathNavigator.MoveToNext">
		<summary>
			<para> Moves to the
      next sibling of the current node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the next sibling node;
<see langword="false"/> if there are no more siblings or if the 
   navigator is currently positioned on an attribute node. If
<see langword="false"/> 
, the position of the navigator is unchanged.</para>
		</returns>
		<example>
   The following example walks the node tree recursively and displays
   information on element and text nodes.
<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/>
	</doc><doc for="XPathNavigator.Value">
		<summary>
			<para> Gets the text value of the current node.</para>
		</summary>
		<value>
			<para>The value returned depends on the <see cref="System.Xml.XPath.XPathNavigator.NodeType"/> of the node. If the node does
   not have a value, an empty element for example, String.Empty is returned.
   The following table defines the return value for each node type.
   </para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Value</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The value of the attribute.</description>
				</item>
				<item>
					<term> Element</term>
					<description>The <see cref="System.Xml.XmlNode.InnerText"/> of the element.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>The content of the comment.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The entire content excluding the target.</description>
				</item>
				<item>
					<term> Text</term>
					<description><para>The content of the text node.</para></description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>The
      white space between mark-up.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>The white space between markup in a mixed content 
      model or white space within an xml:space=
      'preserve' scope.</description>
				</item>
				<item>
					<term> Root</term>
					<description>The <see cref="System.Xml.XmlNode.InnerText"/> of the root
   node.</description>
				</item>
			</list>
		</value>
		<example>
			<para>The following example walks the node tree recursively and displays
      information on element and text nodes.</para>
			<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
	</doc><doc for="XPathNavigator.ToString">
		<summary>
			<para>Gets the text value of the current node. This
      method is equivalent to returning the <see cref="System.Xml.XPath.XPathNavigator.Value"/> property.</para>
		</summary>
		<returns>
			<para>The content returned depends on the <see cref="System.Xml.XPath.XPathNavigator.NodeType"/> of the node. </para>
			<list type="table">
				<listheader>
					<term>Node Type</term>
					<description>Value</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The value of the attribute.</description>
				</item>
				<item>
					<term> Element</term>
					<description>The <see cref="System.Xml.XmlNode.InnerText"/> of the element.</description>
				</item>
				<item>
					<term> Comment</term>
					<description>The content of the comment.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The entire content excluding the target.</description>
				</item>
				<item>
					<term> Text</term>
					<description><para>The content of the text node.</para></description>
				</item>
				<item>
					<term> Whitespace</term>
					<description>The white space between mark-up.</description>
				</item>
				<item>
					<term> SignificantWhitespace</term>
					<description>The white space between markup in a mixed content 
      model or white space within an xml:space= 'preserve' scope.</description>
				</item>
				<item>
					<term> Root</term>
					<description>The <see cref="System.Xml.XmlNode.InnerText"/> of the root 
   node.</description>
				</item>
			</list>
		</returns>
	</doc><doc for="XPathNavigator.GetAttribute">
		<summary>
			<para> Gets the value of the attribute with the
      specified <see cref="System.Xml.XPath.XPathNavigator.LocalName"/> and <see cref="System.Xml.XPath.XPathNavigator.NamespaceURI"/> .</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute.</param>
		<returns>
			<para>The value of the specified attribute; String.Empty if a 
      matching attribute is not found or if the navigator is not positioned on an element node.</para>
		</returns>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.HasAttributes"/>
	</doc><doc for="XPathNavigator.GetNamespace">
		<summary>
			<para> Returns the value of the namespace node
      corresponding to the specified local name.</para>
		</summary>
		<param name="name">The local name of the namespace node.</param>
		<returns>
			<para>The value of the namespace node; String.Empty if a 
      matching namespace node is not found or if the
      navigator is not positioned on an element node.</para>
		</returns>
		<remarks>
			<para>For a definition of namespace nodes, see section 5.4 of
      the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model
      .</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/>
	</doc><doc for="XPathNavigator.LocalName">
		<summary>
			<para> Gets the name of the current node without the namespace prefix.</para>
		</summary>
		<value>
			<para> The local name of the current node. The name returned depends on
      the <see cref="System.Xml.XPath.XPathNavigator.NodeType"/> of the current node. For
      example, the <see langword="LocalName"/> is book for the <c>&lt;bk:book&gt;</c>
   element.
   </para>
			<list type="table"><listheader>
					<term>XPathNodeType</term>
					<description>Property Value</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description> The local name of the attribute.</description>
				</item>
				<item>
					<term> Element</term>
					<description> The local name of the element.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The target of the processing instruction.</description>
				</item>
				<item>
					<term> Namespace</term>
					<description>The prefix associated with the namespace URI.</description>
				</item>
				<item>
					<term> All other node types</term>
					<description>String.Empty</description>
				</item>
			</list>
		</value>
		<example>
			<para>The following example walks the node tree recursively
      and displays information on element and text nodes.</para>
			<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.Name"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Prefix"/>
	</doc><doc for="XPathNavigator.Name">
		<summary>
			<para> Gets the qualified name of
      the current node.</para>
		</summary>
		<value>
			<para> The qualified name of the current node. The name returned depends on
      the <see cref="System.Xml.XPath.XPathNavigator.NodeType"/> of the current node.
      </para>
			<list type="table"><listheader>
					<term>XPathNodeType</term>
					<description>Property Value</description>
				</listheader>
				<item>
					<term> Attribute</term>
					<description>The qualified name of the attribute. In the following
         example, <c>&lt;book
         bk:genre='novel'&gt;</c>, the <see langword="Name"/> of the attribute node is
   <see langword="bk:genre"/> .</description>
				</item>
				<item>
					<term> Element</term>
					<description> The qualifed name of the element. In the following
      example, <c>&lt;bk:book&gt;</c>
   , the <see langword="Name"/> of the element node is
<see langword="bk:book"/>
. </description>
				</item>
				<item>
					<term> Namespace</term>
					<description>The prefix associated with the namespace URI. In the following namespace
      declaration, <c>xmlns:bk='urn:samples'</c>, the <see langword="Name"/> property returns
<see langword="bk"/>
.</description>
				</item>
				<item>
					<term> ProcessingInstruction</term>
					<description>The target of the processing instruction. In the following example, <c>&lt;?xml-stylesheet type='text/xsl' href=
      
      'books.xsl'?&gt;</c>, the
<see langword="Name"/> property returns 
<see langword="xml-stylesheet"/> .</description>
				</item>
				<item>
					<term> All other node types</term>
					<description>String.Empty</description>
				</item>
			</list>
		</value>
		<example>
			<para>The following example walks the node tree recursively and displays
      information on element and text nodes.</para>
			<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.LocalName"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Prefix"/>
	</doc><doc for="XPathNavigator.Prefix">
		<summary>
			<para> Gets the prefix associated with
      the current node.</para>
		</summary>
		<value>
			<para> The prefix associated with the
      current node. For example, <see langword="Prefix"/> is <see langword="bk"/> for
      the <c>&lt;bk:book&gt;</c>
   element. If one does not exist, this property
   returns String.Empty.</para>
		</value>
		<example>
			<para>The following example walks the node tree recursively and displays
      information on element and text nodes.</para>
			<codelink SampleID="XPathNavigator.MoveToNext" SnippetID="1"/>
		</example>
	</doc><doc for="XPathNavigator.Compile">
		<summary>
			<para> Compiles a string representing an XPath expression and returns
      an <see cref="System.Xml.XPath.XPathExpression"/>
      .</para>
		</summary>
		<param name="xpath">A string representing an XPath expression.</param>
		<returns>
			<para>An <see langword="XPathExpression"/> object representing
   the XPath expression.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="xpath"/> parameter contains an invalid XPath expression.</exception>
		<remarks>
			<para>An XPath expression is evaluated to yield one of the following return types:</para>
			<list type="bullet"><item>
					<term>
         
         Node Set - an unordered collection of nodes without
         duplicates</term>
				</item>
				<item>
					<term>
         
         Boolean -<see langword="true"/> or <see langword="false"/></term>
				</item>
				<item>
					<term>
         
         Number - a floating-point number</term>
				</item>
				<item>
					<term>
         
         String
         
         - a sequence of UCS characters</term>
				</item>
			</list>
			<para> Expressions that return a node set can be used in the <see cref="System.Xml.XPath.XPathNavigator.Select"/> 
and <see cref="System.Xml.XPath.XPathNavigator.Evaluate"/> methods. Expressions that return a boolean, number, or string can be used in the <see cref="System.Xml.XPath.XPathNavigator.Evaluate"/>method. The rules on valid expressions for the <see cref="System.Xml.XPath.XPathNavigator.Matches"/> method are specific to that method.</para>
		</remarks>
		<example>
			<para>The following example displays all ISBN attribute nodes.</para>
			<codelink SampleID="Classic WebData XPathExpression.SetContext Example" SnippetID="1"/>



 
The example uses the file, <see langword="booksort.xml"/>, as input.

<codelink SampleID="Classic WebData XPathExpression.SetContext Example" SnippetID="2"/>
		</example>
	</doc><doc for="XPathNavigator.Clone">
		<summary>
			<para> Creates a new <see langword="XPathNavigator"/> positioned
   at the same node as this <see langword="XPathNavigator"/>
   
   .</para>
		</summary>
		<returns>
			<para>A new <see langword="XPathNavigator"/> object positioned at the same node
   as the original <see langword="XPathNavigator"/> .</para>
		</returns>
		<remarks>
			<para>This method is especially useful when used in 
      conjunction with <see cref="System.Xml.XPath.XPathNodeIterator"/>. <see langword="XPathNodeIterator"/> is
      used to iterate over a selected node set and contains a <see cref="System.Xml.XPath.XPathNodeIterator.Current"/> property which returns an
   <see langword="XPathNavigator"/> positioned on the context node of the 
   <see langword="XPathNodeIterator"/>. However, the 
   <see langword="XPathNavigator"/> returned by the <see langword="Current"/> 
   property cannot be used to move away from the node set. Instead, you
   should clone the returned <see langword="XPathNavigator"/> and use the cloned
   navigator to do any additional moves.</para>
			<para>The cloned <see langword="XPathNavigator"/> is not affected by subsequent
changes to the original <see langword="XPathNavigator"/> .</para>
		</remarks>
		<example>
			<para>The following example gets all book titles authored by
      Jane Austen.</para>
			<codelink SampleID="XPathNavigator.Clone" SnippetID="1"/>
			<para>The example uses the <see langword="booksort.xml"/> 
file as input.</para>
			<codelink SampleID="XPathNavigator.Clone" SnippetID="2"/>
		</example>
	</doc><doc for="XPathNavigator.NameTable">
		<summary>
			<para> Gets
      the <see cref="System.Xml.XmlNameTable"/>
      associated with this implementation.</para>
		</summary>
		<value>
			<para>An <see langword="XmlNameTable"/> .</para>
		</value>
		<remarks>
			<para>The <see langword="XmlNameTable"/> stores
   atomized strings of any <see cref="System.Xml.XPath.XPathNavigator.LocalName"/>, <see cref="System.Xml.XPath.XPathNavigator.NamespaceURI"/>, and <see cref="System.Xml.XPath.XPathNavigator.Prefix"/> used by <see langword="XPathNavigator"/>. This means that when the same name
   is returned multiple times (like "book") then the same <see langword="String"/>
   object is returned for that name. This makes it possible to
   write efficient code that does object comparisons on these strings instead of
   expensive string comparisons.</para>
			<para>For more information on atomized strings, see <see cref="System.Xml.XmlNameTable"/> .</para>
		</remarks>
	</doc><doc for="XPathNamespaceType">
		<summary>
			<para>Specifies the type of the XPath namespace node.</para>
		</summary>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace" qualify="true"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstNamespace" qualify="true"/>
	</doc><doc for="XPathNamespaceType.Local">
		<summary>
			<para>Only local namespace nodes; inherited namespaces are not included.</para>
		</summary>
	</doc><doc for="XPathNamespaceType.NonXml">
		<summary>
   All namespace nodes, except for the XML namespace.
</summary>
	</doc><doc for="XPathNamespaceType.All">
		<summary>
			<para>All namespace nodes.</para>
		</summary>
	</doc><doc for="XPathNavigator.MoveToFirstNamespace">
		<overload>
   Moves the
<see langword="XPathNavigator"/> to the first namespace node of the current 
   element.
</overload>
		<summary>
			<para> Moves the
   <see langword="XPathNavigator"/> to first namespace node of the current element.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the
   first namespace node; otherwise <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>If the navigator is not currently positioned on an
      element, this method returns <see langword="false"/> and the position of the navigator does not change. </para>
			<para> After the navigator has been moved to the namespace
      node the <see cref="System.Xml.XPath.XPathNavigator.Name"/> property reflects the name of
      the namespace. </para>
			<para>When the navigator is positioned on a namespace node,
      the methods <see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>,
   <see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always
      return <see langword="false"/> and do not change
      the position of the navigator. Rather, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/> to
      move to the next namespace node. </para>
			<para>Once positioned on an namespace node, call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to move back to the element
   node.</para>
			<para>For a definition of namespace nodes, see section 5.4 of
   the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model
   .</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNamespace"/>
	</doc><doc for="XPathNavigator.Evaluate">
		<overload>
			<para> Evaluates the given expression
      and returns the typed result.</para>
		</overload>
		<summary>
			<para>Evaluates the <see cref="System.Xml.XPath.XPathExpression"/> and returns the typed result (number, Boolean,
   string, or node set). Use the <see cref="System.Xml.XPath.XPathNodeIterator"/> to iterate over a set of
   nodes.</para>
		</summary>
		<param name="expr">An <see langword="XPathExpression"/> that can be evaluated.</param>
		<returns>
			<para>The result of the expression.</para>
		</returns>
		<exception cref="ArgumentException">The <see langword="XPathExpression"/> contains an error.</exception>
		<remarks>
			<para> The following C# code returns a number after converting the Price/text()
      node to a number and multiplying the value by 10.</para>
			<code>
XPathExpression expr = nav.Compile("Price/text()*10");
nav.Evaluate(expr);
   </code>
			<note type="note">
      The XPath position() and last() functions,
      unless used as a predicate in a location step, require a reference to a node set
      in order to be evaluated. In this case, you must use the overload which takes
      an <see cref="System.Xml.XPath.XPathNodeIterator"/> as an argument; otherwise, position() and last() return 0.
      
   </note>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>.</para>
		</remarks>
		<example>
			<para>The following example calculates the total price of a customer order.
      </para>
			<codelink SampleID="XPathNavigator.Evaluate" SnippetID="1"/>












The example uses the file, <see langword="order.xml"/>, as input.

<codelink SampleID="XPathNavigator.Evaluate" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.Compile"/>
		<seealso cref="System.Xml.XPath.XPathExpression.ReturnType"/>
	</doc><doc for="XPathNavigator.Evaluate1">
		<summary>
			<para>Evaluates the <see cref="System.Xml.XPath.XPathExpression"/> using the supplied context and returns the
   typed result (number, Boolean, string, or node set).</para>
		</summary>
		<param name="expr">An <see langword="XPathExpression"/> that can be evaluated.</param>
		<param name=" context">An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the selected node set that the evaluation is to be performed on.</param>
		<returns>
			<para>The result of the expression.</para>
		</returns>
		<exception cref="ArgumentException">The <see langword="XPathExpression"/> contains an error.</exception>
		<remarks>
			<para>The expression is evaluated using the <see cref="System.Xml.XPath.XPathNodeIterator.Current"/> node of the
<see langword="XPathNodeIterator"/> as the context node. If <paramref name="context"/> 
is <see langword="null"/>, the node on which the
<see langword="XPathNavigator"/> is currenly positioned is used as the context 
node. </para>
			<para>The position() and last() functions, unless used as a predicate in a location
   step, always return 0 under the following conditions:</para>
			<list type="bullet"><item>
					<term>
						<see langword="null"/> is passed as the <paramref name="context"/> argument.</term>
				</item>
				<item>
					<term>
						<see cref="System.Xml.XPath.XPathNodeIterator.MoveNext"/>has not been called on the
   <see langword="XPathNodeIterator"/>.</term>
				</item>
			</list>
			<para>Because the position() and last() functions work on the current node, you
   should not use the <see cref="System.Xml.XPath.XPathNodeIterator.Current"/> property to move away from
   the selected node set. This could invalidate the state of the
<see langword="XPathNavigator"/>.</para>
			<para>This method has no effect on the state of the
<see langword="XPathNavigator"/>.</para>
		</remarks>
	</doc><doc for="XPathNavigator.MoveToNextNamespace">
		<overload>
			<para>Moves the
   <see langword="XPathNavigator"/> to the next namespace node.</para>
		</overload>
		<summary>
			<para> Moves the
   <see langword="XPathNavigator"/>
   to the next namespace node.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the
   next namespace node; otherwise <see langword="false"/>. If <see langword="false"/>, the position of
   the navigator is unchanged.</para>
		</returns>
		<remarks>
			<para>If the navigator is not currently positioned on a namespace
      node, this method returns <see langword="false"/> and the position of the
      navigator does not change. </para>
			<para>When the navigator is positioned on a namespace node,
      the methods <see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>,
   <see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always
      return <see langword="false"/> and do not
      change the position of the navigator. </para>
			<para>Once positioned on an namespace node, call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to move back to the element
   node.</para>
			<para>For a definition of namespace nodes, see section 5.4 of the W3C XML Path
   Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNamespace"/>
	</doc><doc for="XPathNavigator.MoveToNextNamespace1">
		<summary>
			<para>Moves the <see langword="XPathNavigator"/> to the next namespace node matching
   the <see cref="System.Xml.XPath.XPathNamespaceScope"/>
   specified. </para>
		</summary>
		<param name="namespaceScope">An <see cref="System.Xml.XPath.XPathNamespaceScope"/> value describing the namespace scope.</param>
		<returns>
			<para><see langword="true"/> if the navigator is successful moving to the next
   namespace node; otherwise <see langword="false"/>. If <see langword="false"/>, the
   position of the navigator is unchanged.</para>
		</returns>
		<remarks>
			<para>If the navigator is not currently positioned on a namespace node, this method returns <see langword="false"/> and the position of the navigator does not change. </para>
			<para>When the navigator is positioned on a namespace node, the methods <see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>, <see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always return <see langword="false"/> and do not change the position of the navigator. </para>
			<para>Once positioned on an namespace node, call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to move back to the element node.</para>
			<para>For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNamespace"/>
	</doc><doc for="XPathNavigator">
		<summary>
			<para>Reads data from any data store using a cursor model.</para>
		</summary>
		<remarks>
			<para><see langword="XPathNavigator"/>
is based on the XPath data model and provides the methods required to
implement XPath queries over any data store. To create an
<see langword="XPathNavigator"/> over an XML document or a <see cref="T:System.Data.DataSet"/> (using the <see cref="T:System.Xml.XmlDataDocument"/> class), use the 
<see langword="CreateNavigator"/> method available in the <see cref="System.Xml.XmlNode"/> 
and <see cref="System.Xml.XPath.XPathDocument"/> classes, which implement the <see cref="System.Xml.XPath.IXPathNavigable"/> interface. Additionally, you can create
your own implementation of <see langword="XPathNavigator"/> over
other data stores such as file systems or databases. For more information
on implementing your own <see langword="XPathNavigator"/>, see <see topic="cpconXPathNavigatorOverDifferentStores"/>
.</para>
			<para><see langword="XPathNavigator"/>
provides read-only, random access to data. The current node refers to the node
on which the navigator is positioned. The navigator is advanced using any of the
move methods and properties reflect the value of the current node. If the
navigator is created by <see cref="System.Xml.XmlDocument"/>, you can use the <see cref="System.Xml.IHasXmlNode.GetNode" qualify="true"/> method to return the <see langword="XmlNode"/>
representing the current position of the
navigator.</para>
			<para><see langword="XPathNavigator"/>
supports XSLT and can be used as an input mechanism to the <see cref="System.Xml.Xsl.XslTransform.Transform" qualify="true"/> method.</para>
			<para>For more information on the XPath data model, see the W3C
   XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath.</para>
		</remarks>
		<seealso cref="System.Xml.Xsl.XslTransform"/>
		<seealso cref="System.Xml.IHasXmlNode"/>
	</doc><doc for="XPathNavigator.Matches">
		<overload>
			<para>Determines whether the current node matches the specified
      XSLT pattern.</para>
		</overload>
		<summary>
			<para>Determines whether the current node matches the
      specified <see cref="System.Xml.XPath.XPathExpression"/>
      .</para>
		</summary>
		<param name="expr">An <see langword="XPathExpression"/> encapsulating a compiled XSLT pattern.</param>
		<returns>
			<para><see langword="true"/> if the
   current node matches the <see langword="XPathExpression"/>
   ; otherwise,
<see langword="false"/>
.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="expr"/> cannot be evaluated.</exception>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>
   .</para>
		</remarks>
		<example>
   The following example displays the titles of all novels.
<codelink SampleID="XPathNavigator.Matches" SnippetID="1"/>

 
The example uses the file, <see langword="books.xml"/>, as input.

<codelink SampleID="XPathNavigator.Matches" SnippetID="2"/>
		</example>
	</doc>
	<doc for="XPathNavigator.SelectChildren">
		<overload>
			<para> Selects all the child nodes of the current node
      matching the selection criteria.</para>
		</overload>
		<summary>
			<para> Selects all the child nodes of the current node
      with the matching <see cref="System.Xml.XPath.XPathNodeType"/>.</para>
		</summary>
		<param name="type">The <see langword="XPathNodeType"/> of the child nodes.</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the selected nodes.</para>
		</returns>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>.</para>
			<para>The selected nodes will never contain attribute or namespace nodes.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectAncestors"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectDescendants"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Select"/>
	</doc>
	<doc for="XPathNavigator.SelectChildren1">
		<summary>
			<para>Selects all the child element nodes of the current node
      with the supplied local name and namespace URI.</para>
		</summary>
		<param name="name">The local name of the child nodes.</param>
		<param name=" namespaceURI">The namespace URI of the child nodes.</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the selected nodes.</para>
		</returns>
		<remarks>
			<para>This method has no effect on the state of
      the <see langword="XPathNavigator"/>.</para>
			<para>If <paramref name="name"/> is an empty string, all child nodes belonging to the
   specified namespace URI are selected. If <paramref name="namespaceURI"/> is an empty string, all child nodes with
   the specified name belonging to the null namespace are selected. If both <paramref name="name"/>
   and <paramref name="namespaceURI"/> are
   empty strings, all child nodes belonging to the null namespace are selected.</para>
			<para>The selected nodes will never contain attribute or namespace nodes.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectAncestors"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectDescendants"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Select"/>
	</doc>
	<doc for="XPathNavigator.SelectDescendants">
		<overload>
			<para> Selects all the
      descendant nodes of the current node matching the selection criteria.</para>
		</overload>
		<summary>
			<para> Selects all the descendant nodes of the current
      node with the matching <see cref="System.Xml.XPath.XPathNodeType"/> .</para>
		</summary>
		<param name="type">The <see langword="XPathNodeType"/> of the descendant nodes.</param>
		<param name=" matchSelf"><see langword="true"/> to include the context node in the selection; otherwise <see langword="false"/> .</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the selected nodes.</para>
		</returns>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>.</para>
			<para> A descendant is a child or a child of a child and so on; thus, the selected
      nodes will never contain attribute or namespace nodes.</para>
		</remarks>
		<example>
			<para>The following example moves to the first book element and displays each of
      its text nodes.
      </para>
			<codelink SampleID="XPathNavigator.SelectDescendants" SnippetID="1"/>




The example uses the file, <see langword="books.xml"/>, as input.

<codelink SampleID="XPathNavigator.SelectDescendants" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectAncestors"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectChildren"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Select"/>
	</doc>
	<doc for="XPathNavigator.SelectDescendants1">
		<summary>
			<para>Selects all the descendant element nodes of the current
      node with the supplied local name and namespace URI.</para>
		</summary>
		<param name="name">The local name of the descendant nodes.</param>
		<param name=" namespaceURI">The namespace URI of the descendant nodes.</param>
		<param name=" matchSelf"><see langword="true"/> to include the context node in the selection; otherwise <see langword="false"/> .</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the selected nodes.</para>
		</returns>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>.</para>
			<para>If <paramref name="name"/> is an empty string, all descendant nodes belonging to
   the specified namespace URI are selected. If <paramref name="namespaceURI"/> is an empty string, all descendant
   nodes with the specified name belonging to the null namespace are selected. If both <paramref name="name"/>
   and <paramref name="namespaceURI"/> are empty strings, all descendant nodes
   belonging to the null namespace are selected.</para>
			<para> A descendant is a child or a child of a child and so on; thus the selected
   nodes will never contain attribute or namespace nodes.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectAncestors"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectChildren"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Select"/>
	</doc>
	<doc for="XPathNavigator.Select1">
		<summary>
			<para>Selects a node set using the specified XPath expression.</para>
		</summary>
		<param name="xpath">A string representing an XPath expression.</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the
   selected node set.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="xpath"/> contains an error or its return type is not a node set.</exception>
		<remarks>
			<para>The context for the selection is the position of the
      navigator when you called this method. After calling this method, the
   <see langword="XPathNodeIterator"/> returned represents the set of
      selected nodes. Use <see cref="System.Xml.XPath.XPathNodeIterator.MoveNext"/> on the
   <see langword="XPathNodeIterator"/> to walk the selected node set.
      Use any of the <see langword="Move"/> methods on the
   <see langword="XPathNavigator"/> to move within the current node tree. The
   <see langword="XPathNavigator"/> navigation methods are independent of the
      selected nodes and the <see langword="XPathNodeIterator"/>
      
      .</para>
			<para>The following C# code walks the selected set of nodes.</para>
			<code>
XPathNodeIterator iterator = nav.Select("/bookstore/book");
while (iterator.MoveNext()){
 Console.WriteLine(Iterator.Current.Name);
}
   </code>
			<para> If the XPath expression requires namespace resolution,
      use the overload which takes an <see cref="System.Xml.XPath.XPathExpression"/> as its argument.</para>
			<para>Calling <see langword="Select"/>
again returns a new <see langword="XPathNodeIterator"/> pointing to the selected
set of nodes matching the new <see langword="Select"/> call. The two
<see langword="XPathNodeIterator"/> 
objects are completely independent of each other.</para>
			<para>This method has no effect on the state of the
<see langword="XPathNavigator"/> 
.</para>
		</remarks>
		<example>
			<para>The following example selects and displays all title nodes.</para>
			<codelink SampleID="XPathNavigator.Select" SnippetID="1"/>





The example uses the file, <see langword="books.xml"/>, as input.

<codelink SampleID="XPathNavigator.Select" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlNode.SelectNodes"/>
		<seealso cref="System.Xml.XmlNode.SelectSingleNode"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectDescendants"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectChildren"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectAncestors"/>
	</doc>
	<doc for="XPathNavigator.MoveToNextAttribute">
		<summary>
			<para> Moves to the next attribute.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the
   navigator is successful moving to the next attribute;
<see langword="false"/> if there are no more attributes.</para>
		</returns>
		<remarks>
			<para>If the navigator is not currently positioned on an
      attribute, this method returns <see langword="false"/> and
      the position of the navigator does not change.</para>
			<para> When the navigator is positioned on an attribute, the
      methods <see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>,
   <see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not
      applicable. These methods always return <see langword="false"/> and do not change the
      position of the navigator.</para>
			<para>Once positioned on an attribute, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/>
to move to the owner element.</para>
		</remarks>
		<example>
			<para>The following example displays all attributes on each book node.
      </para>
			<codelink SampleID="XPathNavigator.MoveToNextAttribute" SnippetID="1"/>
			<para>The example uses the <see langword="books.xml"/> file as input.</para>
			<codelink SampleID="Classic WebData XslTransform.Transform7 Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.HasAttributes"/>
	</doc>
	<doc for="XPathNavigator.Select">
		<overload>
			<para>Selects a node set using the specified XPath
      expression.</para>
		</overload>
		<summary>
			<para>Selects a node set using the specified <see cref="System.Xml.XPath.XPathExpression"/>
.</para>
		</summary>
		<param name="expr">An <see langword="XPathExpression"/> .</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the
   selected node set.</para>
		</returns>
		<exception cref="ArgumentException">The <paramref name="expr"/> contains an error or its return type is not a node set.</exception>
		<remarks>
			<para>The context for the selection is the position of the
      navigator when you called this method. After calling this method, the
   <see langword="XPathNodeIterator"/> returned represents the set of
      selected nodes. Use <see cref="System.Xml.XPath.XPathNodeIterator.MoveNext"/> on the
   <see langword="XPathNodeIterator"/> to walk the selected node set.
      Use any of the <see langword="Move"/> methods on the
   <see langword="XPathNavigator"/> to move within the current node tree. The
   <see langword="XPathNavigator"/> navigation methods are independent of the
      selected nodes and the <see langword="XPathNodeIterator"/>
      
      .</para>
			<para> The following C# code walks
      the selected
      set of nodes.</para>
			<code>
XPathNodeIterator ni = nav.Select(expr);
while (ni.MoveNext()){
 Console.WriteLine(ni.Current.Name);
}
   </code>
			<para>If the <see langword="XPathExpression"/> requires namespace resolution, the
   prefix and namespace URI pair must be added to an <see langword="XmlNamespaceManager"/> and the <see cref="System.Xml.XPath.XPathExpression.SetContext" qualify="true"/> method must be called to specify the <see langword="XmlNamespaceManager"/>
   to use for namespace resolution.</para>
			<para>For example, if the document contains
   the XML nodes </para>
			<code>
&lt;bookstore xmlns:bk='urn:samples'&gt;
  &lt;book bk:ISBN='1-325-0980'&gt;
    &lt;title&gt;Pride And Prejudice&lt;/title&gt;
  &lt;/book&gt;
&lt;/bookstore&gt;
</code>
			<para> The following C# code selects the <see langword="bk:ISBN"/> node.</para>
			<code>
XPathExpression expr = nav.Compile("book/@bk:ISBN");
XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
mngr.AddNamespace("bk","urn:samples");
expr.SetContext(mngr);
XPathNodeIterator ni = nav.Select(expr);
</code>
			<note type="note">
   If the
<see langword="XPathExpression"/> does not include a prefix, it is assumed 
   that the namespace URI is the empty namespace. If your XML includes a
   default namespace, you must still use the <see langword="SetContext"/> method and
   provide an <see langword="XmlNamespaceManager"/> containing a prefix and
   namespace URI to handle the default namespace.
</note>
			<para> For example, if you had the following XML: </para>
			<code>
&lt;bookstore xmlns="http://www.lucernepublishing.com"&gt;
 &lt;book&gt;
 &lt;title&gt;Pride And Prejudice&lt;/title&gt;
 &lt;/book&gt;
&lt;/bookstore&gt;
</code>
The following C# code selects all book nodes:
<code>
XmlNamespaceManager nsmgr = new XmlNamespaceManager(nav.NameTable);
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com");
XPathExpression expr;
expr = nav.Compile("//ab:book");
expr.SetContext(nsmgr);
XPathNodeIterator ni = nav.Select(expr);
</code>
			<para>Calling <see langword="Select"/>
again returns a new <see langword="XPathNodeIterator"/> pointing to the selected
set of nodes matching the new <see langword="Select"/> call. The two
<see langword="XPathNodeIterator"/> 
objects are completely independent of each other.</para>
			<para>This method has no effect on the state of the
<see langword="XPathNavigator"/>.</para>
		</remarks>
		<example>
			<para>The following example selects all books by Jane Austen
      and sorts them
      by title.</para>
			<codelink SampleID="Classic WebData XPathExpression.AddSort1 Example" SnippetID="1"/>
			<para>The example uses the file, <see langword="booksort.xml"/>, as input.</para>
			<codelink SampleID="Classic WebData XPathExpression.AddSort1 Example 2" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XmlNode.SelectNodes"/>
		<seealso cref="System.Xml.XmlNode.SelectSingleNode"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectDescendants"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectChildren"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectAncestors"/>
	</doc>
	<doc for="XPathNavigator.MoveToFirstNamespace1">
		<summary>
			<para>Moves the <see langword="XPathNavigator"/> to the first
   namespace node matching the <see cref="System.Xml.XPath.XPathNamespaceScope"/> specified.</para>
		</summary>
		<param name="namespaceScope">An <see cref="System.Xml.XPath.XPathNamespaceScope"/> value describing the namespace scope.</param>
		<returns>
			<para><see langword="true"/> if the navigator is successful moving to the first namespace node; otherwise <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Using the following XML fragment as an example,
      if the navigator is positioned on the data node,
   <see langword="MoveToFirstNamespace"/> behaves in the following manner. </para>
			<list type="bullet"><item>
					<term>
						<see langword="MoveToFirstNamespace(XPathNamespaceScope.All)"/>
      moves to one of
      the following namespace nodes: <c>xmlns:c='C'</c> , <c>xmlns:a='A2'</c> , <c>xmlns=''</c>, <c>xmlns:b='B'</c>, and <c>xmlns:xml='http://www.w3.org/XML/1998/namespace'</c>.</term>
				</item>
				<item>
					<term>
						<see langword="MoveToFirstNamespace(XPathNamespaceScope.ExcludeXml)"/>
   moves to one of
   the following namespace nodes: <c>xmlns:c='C'</c> , <c>xmlns:a='A2'</c> , <c>xmlns=''</c>, and <c>xmlns:b='B'</c>.</term>
				</item>
				<item>
					<term>
						<see langword="MoveToFirstNamespace(XPathNamespaceScope.Local)"/>
   moves to the <c>xmlns:c='C'</c> node.</term>
				</item>
			</list>
			<code>
&lt;root xmlns='urn:default' xmlns:a='A1' xmlns:b='B'&gt;
  &lt;item xmlns='' xmlns:a='A2'&gt;
    &lt;data xmlns:c='C' /&gt;
  &lt;/item&gt;
&lt;/root&gt;
</code>
			<para> If the navigator is not currently positioned on an element, this method returns <see langword="false"/> and the
position of the navigator does not change. After the navigator has been moved to the namespace node the <see cref="System.Xml.XPath.XPathNavigator.Name"/> property reflects the name of the namespace. </para>
			<para>When the navigator is positioned on a namespace node, the methods <see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>, <see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always return <see langword="false"/> and do not change the position of the navigator. Rather, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/> to move to the next namespace node. </para>
			<para>Once positioned on an namespace node, call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to move back to the element node.</para>
			<para>For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model .</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetNamespace"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNamespace"/>
	</doc>
	<doc for="XPathNavigator.IsEmptyElement">
		<summary>
			<para> Gets a value indicating whether
      the current
      node is an empty element (for example, &lt;MyElement/&gt;).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   current node is an element (<see cref="System.Xml.XPath.XPathNavigator.NodeType"/> equals XPathNodeType.Element) that ends
   with "/&gt;"; otherwise,<see langword=" false"/> .</para>
		</value>
		<remarks>
			<para>This property enables you to determine the
      difference between the following:</para>
			<para><c>&lt;item num="123"/&gt;</c> (<see langword="IsEmptyElement"/> is <see langword="true"/>).</para>
			<para><c>&lt;item num="123"&gt;&lt;/item&gt;</c>(<see langword="IsEmptyElement"/> is
<see langword="false"/>).</para>
			<para><c>&lt;item num="123"&gt;test&lt;/item&gt;</c> (<see langword="IsEmptyElement"/> is
<see langword="false"/>).</para>
		</remarks>
	</doc>
	<doc for="XPathNavigator.MoveToAttribute">
		<summary>
			<para> Moves to the attribute with matching <see cref="System.Xml.XPath.XPathNavigator.LocalName"/> and <see cref="System.Xml.XPath.XPathNavigator.NamespaceURI"/>
.</para>
		</summary>
		<param name="localName">The local name of the attribute.</param>
		<param name="namespaceURI">The namespace URI of the attribute. If this is <see langword="null"/>, an empty namespace is assumed. </param>
		<returns>
			<para><see langword="true"/> if the attribute is found;
   otherwise, <see langword="false"/>. If <see langword="false"/>, the position
   of the navigator does not change.</para>
		</returns>
		<remarks>
			<para>If the navigator is not currently positioned on an
      element, this method returns <see langword="false"/>
      .</para>
			<para>After a successful call to <see langword="MoveToAttribute"/>, the
<see langword="LocalName"/>, <see langword="NamespaceURI"/> and <see cref="System.Xml.XPath.XPathNavigator.Prefix"/> properties reflect the values 
   of the attribute. When the navigator is positioned on an attribute, the methods
<see cref="System.Xml.XPath.XPathNavigator.MoveToNext"/>, 
<see cref="System.Xml.XPath.XPathNavigator.MoveToPrevious"/>, and <see cref="System.Xml.XPath.XPathNavigator.MoveToFirst"/> are not applicable. These methods always 
   return <see langword="false"/> and do not change
   the position of the navigator. Rather, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/> to move to the next attribute
   node.</para>
			<para>Once positioned on an attribute, you can call <see cref="System.Xml.XPath.XPathNavigator.MoveToParent"/> to
move to the owner element.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToFirstAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.GetAttribute"/>
	</doc>
	<doc for="XPathNavigator.SelectAnscestors">
		<overload>
			<para>Selects all the ancestor
      element nodes of the current node matching the selection criteria.</para>
		</overload>
		<summary>
			<para>Selects all the ancestor element nodes of the current
      node with the matching <see cref="System.Xml.XPath.XPathNodeType"/> .</para>
		</summary>
		<param name="type">The <see langword="XPathNodeType"/> of the ancestor nodes.</param>
		<param name=" matchSelf"><see langword="true"/> to include the context node in the selection; otherwise <see langword="false"/> .</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the 
   selected nodes. The returned nodes are in reverse document order.</para>
		</returns>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>.</para>
		</remarks>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectChildren"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectDescendants"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Select"/>
	</doc>
	<doc for="XPathNavigator.SelectAnscestors1">
		<summary>
			<para>Selects all the ancestor element nodes of the current
      node with the supplied local name and namespace URI.</para>
		</summary>
		<param name="name">The local name of the ancestor nodes.</param>
		<param name=" namespaceURI">The namespace URI of the ancestor nodes.</param>
		<param name=" matchSelf"><see langword="true"/> to include the context node in the selection; otherwise <see langword="false"/> .</param>
		<returns>
			<para>An <see cref="System.Xml.XPath.XPathNodeIterator"/> pointing to the 
   selected nodes. The returned nodes are in reverse document order.</para>
		</returns>
		<remarks>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>.</para>
			<para>If <paramref name="name"/> is an empty string, all ancestor nodes belonging to the
   specified namespace URI are selected. If <paramref name="namespaceURI"/> is an empty string, all ancestor nodes
   with the specified name belonging to the null namespace are selected. If both <paramref name="name"/>
   and <paramref name="namespaceURI"/> are
   empty strings, all ancestor nodes belonging to the null namespace are selected.</para>
		</remarks>
		<example>
			<para>The following example selects all orders containing the specified CD.</para>
			<codelink SampleID="XPathNavigator.SelectAncestors" SnippetID="1"/>





 
The example uses the file, <see langword="order.xml"/>, as input.

<codelink SampleID="XPathNavigator.SelectAncestors" SnippetID="2"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectChildren"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.SelectDescendants"/>
		<seealso cref="System.Xml.XPath.XPathNavigator.Select"/>
	</doc>
	<doc for="XPathNavigator.Evaluate2">
		<summary>
			<para>Evaluates the string representing an XPath expression and
      returns the typed result (number, Boolean, string, or node set). Use
      the <see cref="System.Xml.XPath.XPathNodeIterator"/>
      to iterate over a set of nodes.</para>
		</summary>
		<param name="xpath">A string representing an XPath expression that can be evaluated.</param>
		<returns>
			<para>The result of the expression.</para>
		</returns>
		<exception cref="ArgumentException">The XPath expression contains an error.</exception>
		<remarks>
			<para> The following C# code converts the Price/text() node to a
      number, multiplies it by 10, and returns the resulting value.</para>
			<code>
nav.Evaluate("Price/text()*10");
   </code>
			<note type="note">
      The XPath
      position() and last() functions, unless used as a predicate in a location step,
      require a reference to a node set in order to be evaluated. In this case, you
      must use the overload which takes an <see cref="System.Xml.XPath.XPathNodeIterator"/> as an
      argument; otherwise, position() and last() return 0.
   </note>
			<para>This method has no effect on the state of the
   <see langword="XPathNavigator"/>
   .</para>
		</remarks>
		<example>
			<para>The following example evaluates two XPath expressions.</para>
			<codelink SampleID="XPathNavigator.Evaluate2" SnippetID="1"/>
		</example>
		<seealso cref="System.Xml.XPath.XPathNavigator.Compile"/>
		<seealso cref="System.Xml.XPath.XPathExpression"/>
		<seealso cref="System.Xml.XPath.XPathExpression.ReturnType"/>
	</doc>
</docs>
