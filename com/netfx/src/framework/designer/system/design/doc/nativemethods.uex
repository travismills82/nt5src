<docs>
   <doc for="NativeMethods.CommonHandles.Accelerator">
 <summary>
     Handle type for accelerator tables.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.Cursor">
 <summary>
     handle type for cursors.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.EMF">
 <summary>
     Handle type for enhanced metafiles.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.Find">
 <summary>
     Handle type for file find handles.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.GDI">
 <summary>
     Handle type for GDI objects.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.HDC">
 <summary>
     Handle type for HDC's that count against the Win98 limit of five DC's.  HDC's
     which are not scarce, such as HDC's for bitmaps, are counted as GDIHANDLE's.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.Icon">
 <summary>
     Handle type for icons.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.Kernel">
 <summary>
     Handle type for kernel objects.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.Menu">
 <summary>
     Handle type for files.
 </summary>
   </doc>
   <doc for="NativeMethods.CommonHandles.Window">
 <summary>
     Handle type for windows.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.Add">
 <summary>
     Adds the given handle to the handle collector.  This keeps the
     handle on a "hot list" of objects that may need to be garbage
     collected.
 </summary>
 <param name='handle'>
     The handle to add.
 </param>
 <param name='type'>
     The type of the handle.  This must be a value returned
     from a prior call to HandleCollector.RegisterType().
 </param>
 <returns>
     the handle passed In.  This allows for syntatic convienence.
 <seealso cref='RegisterType'/>
 </returns>
   </doc>
   <doc for="NativeMethods.HandleCollector.RegisterType">
 <summary>
     Registers a new type of handle with the handle collector.
 </summary>
 <param name='typeName'>
     The name of the handle type, such as "GDI",
     "Window", etc.  The given type must have unique
     create and destroy functions, so that adds and
     removes can be balanced.
 </param>
 <param name='expense'>
     This is a percentage that guages how "expensive" the given
     handle type is to keep around.  Handle types with a higher
     percentage will be collected more often than handle types
     with a lower expense.  This number should be from 0-100
 </param>
 <param name='initialThreshold'>
 </param>
 <returns>
     an integer that identifies the new type.  The value will
     always be greater than zero.
 </returns>
   </doc>
   <doc for="NativeMethods.HandleCollector.Remove">
 <summary>
     Removes the given handle from the handle collector.  Removing a
     handle removes it from our "hot list" of objects that should be
     frequently garbage collected.
 </summary>
 <param name='handle'>
     The handle to remove.
 </param>
 <param name='type'>
     The type of the handle.  This must be a value returned
     from a prior call to HandleCollector.RegisterType().
 </param>
 <returns>
     the value of the handle.
 <seealso cref='RegisterType'/>
 </returns>
   </doc>
   <doc for="NativeMethods.HandleCollector.Daemon">
 <summary>
     Private inner class that runs a deamon thread to monitor
     handle usage.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.Daemon.Daemon">
 <summary>
     Creates a new Daemon thread monitor.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.Daemon.Collect">
 <summary>
     Forces a GC if needed.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.Daemon.Dispose">
 <summary>
     Disposes this daemon object by destroying the thread.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.Daemon.ThreadProc">
 <summary>
     Thread proc.  This runs in it's own thread in the background, looking
     for opportune times to force GC.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType">
 <summary>
     Represents a specific type of handle.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType.HandleType">
 <summary>
     Creates a new handle type.
 </summary>
 <param name='name'>
     The name of the handle type.
 </param>
 <param name='expense'>
     A percentage guaging how expensive the given
     handle type is to keep around.
 </param>
 <param name='initialThreshold'>
 </param>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType.Add">
 <summary>
     Adds a handle to this handle type for monitoring.
 </summary>
 <param name='handle'>
     The handle to add.
 </param>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType.Collected">
 <summary>
     Called after the collector has finished it's work.  Here,
     we look at the number of objects currently outstanding
     and establish a new cleanup threshhold.
 </summary>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType.GetHandleCount">
 <summary>
     Retrieves the outstanding handle count for this
     handle type.
 </summary>
 <returns>
     the handle count.
 </returns>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType.NeedCollection">
 <summary>
     Determines if this handle type needs a GC pass.
 </summary>
 <returns>
     true if the handle type needs a GC pass, or
     false if not.
 </returns>
   </doc>
   <doc for="NativeMethods.HandleCollector.HandleType.Remove">
 <summary>
     Removes the given handle from our monitor list.
 </summary>
 <param name='handle'>
     The handle to remove.
 </param>
 <returns>
     the handle value.
 </returns>
   </doc>
</docs>

