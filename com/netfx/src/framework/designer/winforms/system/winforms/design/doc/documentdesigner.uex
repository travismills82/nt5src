<docs>
	<doc for="DocumentDesigner.Location">
		<summary>
     Location property on control.  We shadow this property at design-time.
 </summary>
	</doc>
	<doc for="DocumentDesigner.GetSelectedParentControlDesigner">
		<summary>
      Examines the current selection for a suitable frame designer.  This
      is used when we are creating a new component so we know what control
      to parent the component to.  This will always return a frame designer,
      and may walk all the way up the control parent chain to this designer
      if it needs to.
 </summary>
		<returns>
      The currently selected frame designer.
 </returns>
	</doc>
	<doc for="DocumentDesigner.IsSupportedActiveXControl">
		<summary>
     Checks to see if the give CLSID is an ActiveX control
     that we support.  This ignores designtime controls.
 </summary>
		<param name="clsid">
     The CLSID of the control to check.
 </param>
		<returns>
     True if we support this control on the form.
 </returns>
	</doc>
	<doc for="DocumentDesigner.OnComponentAdded">
		<summary>
      Called when a component is added to the design container.
      If the component isn't a control, this will demand create
      the component tray and add the component to it.
 </summary>
	</doc>
	<doc for="DocumentDesigner.OnComponentRemoved">
		<summary>
      Called when a component is removed from the design container.
      Here we check to see there are no more components on the tray
      and if not, we will remove the tray.
 </summary>
	</doc>
	<doc for="DocumentDesigner.OnCreateService">
		<summary>
     Creates some of the more infrequently used services we offer.
 </summary>
	</doc>
	<doc for="DocumentDesigner.OnCreateToolboxItem">
		<summary>
      Called when our document becomes active.  We paint our form's
      border the appropriate color here.
 </summary>
	</doc>
	<doc for="DocumentDesigner.OnDesignerActivate">
		<summary>
      Called when our document becomes active.  Here we try to
      select the appropriate toolbox tab.
 </summary>
	</doc>
	<doc for="DocumentDesigner.OnDesignerDeactivate">
		<summary>
     Called by the host when we become inactive.  Here we update the
     title bar of our form so it's the inactive color.
 </summary>
		<param name="sender">
     The object sending the event.
 </param>
		<param name="e">
     Event.EMPTY
 </param>
	</doc>
	<doc for="DocumentDesigner.OnInitializeShadowProperties">
		<summary>
     Called when the designer is intialized.  This allows the designer to initialize
     the values of any shadow properties it has.
 </summary>
	</doc>
	<doc for="DocumentDesigner.OnSelectionChanged">
		<summary>
      Called by the selection service when the selection has changed.  Here, we look to
      see if there are visual controls selected.  If so, we add a context attribute.
      Otherwise, we remove the attribute.  We do not count the form.
 </summary>
	</doc>
	<doc for="DocumentDesigner.IRootDesigner.SupportedTechnologies">
		<summary>
     The list of technologies that this designer can support
     for its view.  Examples of different technologies are
     Windows Forms and Web Forms.  Other object models can be
     supported at design time, but they most be able to
     provide a view in one of the supported technologies.
 </summary>
	</doc>
	<doc for="DocumentDesigner.IRootDesigner.GetView">
		<summary>
     The view for this document.  The designer
     should assume that the view will be shown shortly
     after this call is made and make any necessary
     preparations.
 </summary>
		<seealso cref="System.ComponentModel.Design.IRootDesigner"/>
	</doc>
	<doc for="DocumentDesigner.IToolboxUser.GetToolSupported">
		<summary>
			<para>Gets a value indicating whether the specified tool is supported by the current
       designer.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to test if supported by the toolbox.</param>
		<returns>
			<para><see langword="true"/> if the tool 
    is supported by the toolbox and can be
    enabled; <see langword="false"/> if the document designer doesn't know how
    to use the tool.</para>
		</returns>
		<remarks>
			<para>If a tool is supported by the designer then it will be enabled in the toolbox when this designer
       regains focus. Otherwise, it will be disabled. Once a tool is marked
       as enabled or disabled it may not be tested for support again.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.ToolboxItem"/>
	</doc>
	<doc for="DocumentDesigner.IToolboxUser.ToolPicked">
		<summary>
			<para>Selects the specified tool.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create.</param>
		<remarks>
			<para><see cref="System.Drawing.Design.IToolboxUser.ToolPicked"/> is called when the user 
    double-clicks on a toolbox item. The document designer should create a component
    for the specified tool. Only tools that are
    enabled in the toolbox will be passed to this method.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.ToolboxItem"/>
	</doc>
	<doc for="DocumentDesigner.DocumentInheritanceService">
		<summary>
      Document designer's version of the inheritance service.  For UI
      components, we will allow private controls if those controls are
      children of our document, since they will be visible.
 </summary>
	</doc>
	<doc for="DocumentDesigner.DocumentInheritanceService.DocumentInheritanceService">
		<summary>
      Creates a new document inheritance service.
 </summary>
		<param name="designer">
      A back pointer to our designer.
 </param>
	</doc>
	<doc for="DocumentDesigner.DocumentInheritanceService.IgnoreInheritedMember">
		<summary>
			<para>Indicates the inherited members to ignore.</para>
		</summary>
		<param name="member">The member to check.  This will either be a FieldInfo or a MethodInfo</param>
		<param name="component">The component instance this member is bound to.</param>
		<returns>
			<para><see langword="true"/> if
    the specified member should be included in the set of inherited components;
    otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<note type="inotes">
       Overridding this method provides a way for users to modify
       the set of members that the inheritance service will ignore. The default implementation
       ignores all members that are private, and only allows public or protected
       members.
    </note>
		</remarks>
	</doc>
	<doc for="DocumentDesigner.SelectionRules">
		<summary>
			<para> Gets the <see cref="System.Windows.Forms.Design.SelectionRules"/> for the designer.</para>
		</summary>
		<value>
			<para>A bitwise combination of <see cref="System.Windows.Forms.Design.SelectionRules"/> 
values.</para>
		</value>
		<remarks>
			<para> This method returns a <see cref="System.Windows.Forms.Design.SelectionRules"/> that prevents the document from
   being resized.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Design.SelectionRules"/>
	</doc>
	<doc for="DocumentDesigner.GetToolSupported">
		<summary>
			<para> 
      Indicates whether the specified tool is supported by
      the designer.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to test for toolbox support. </param>
		<returns>
			<para><see langword="true"/> if the tool should be enabled on
   the toolbox; <see langword="false"/>
   if the document designer doesn't know how to use the tool.</para>
		</returns>
		<remarks>
			<para>If a tool is supported, it will be enabled in the toolbox when the designer
      receives focus. Otherwise, it will be disabled. Once a tool is marked as enabled
      or disabled it can not be queried again.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.ToolboxItem"/>
	</doc>
	<doc for="DocumentDesigner.Initialize">
		<summary>
			<para>Initializes the designer with the specified component.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to associate with the designer. </param>
		<remarks>
			<note type="inheritinfo">
      The designer
      can access the component's site and request services from it in this
      method.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="DocumentDesigner.OnCreateHandle">
		<summary>
			<para> Called immediately after the handle for the designer has been created.</para>
		</summary>
	</doc>
	<doc for="DocumentDesigner.EnsureMenuEditorService">
		<summary>
			<para>Checks for the existence of a menu editor service and
      creates one if one does not already exist.</para>
		</summary>
		<param name="c">The <see cref="System.ComponentModel.IComponent"/> to ensure has a context menu service.</param>
	</doc>
	<doc for="DocumentDesigner.ToolPicked">
		<summary>
			<para>Handles the behavior that occurs when a user double-clicks a toolbox item.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a component for. </param>
		<remarks>
			<para>This method creates a component for the specified tool.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.ToolboxItem"/>
	</doc>
	<doc for="DocumentDesigner.WndProc">
		<summary>
			<para>Processes Windows messages.</para>
		</summary>
		<param name="m">The <see cref="System.Windows.Forms.Message"/> to process.</param>
	</doc>
	<doc for="DocumentDesigner.OnContextMenu">
		<summary>
			<para> Called when the context menu should
      be displayed.</para>
		</summary>
		<param name="x">The horizontal screen coordinate to display the context menu at.</param>
		<param name=" y">The vertical screen coordinate to display the context menu at.</param>
		<remarks>
			<para>This method displays the context menu of the document
      designer.</para>
		</remarks>
	</doc>
	<doc for="DocumentDesigner">
		<summary>
			<para>Base designer class for extending the design mode 
      behavior of, and providing a root-level design mode view for, a <see cref="System.Windows.Forms.Control"/>
      that supports nested controls and should receive scroll messages.</para>
		</summary>
		<remarks>
			<para> 
      This designer is
      a root designer, meaning that it provides the root-level design mode view for the
      associated document when it is viewed in design mode.</para>
			<para>You can associate a designer with a type using a <see cref="System.ComponentModel.DesignerAttribute"/>. For an overview of customizing design 
   time behavior, see <see topic="cpconenhancingdesign-timesupport"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ComponentDesigner"/>
		<seealso cref="System.Windows.Forms.Design.ControlDesigner"/>
		<seealso cref="System.Windows.Forms.Design.ParentControlDesigner"/>
		<seealso cref="System.Windows.Forms.Design.ScrollableControlDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso cref="System.ComponentModel.Design.IRootDesigner"/>
		<seealso cref="System.ComponentModel.DesignerAttribute"/>
	</doc>
	<doc for="DocumentDesigner.menuEditorService"><nodoc/>
		<summary>
			<para> Initializes the menuEditorService variable to
      <see langword="null"/>.</para>
		</summary>
		<seealso cref="System.Windows.Forms.Design.IMenuEditorService"/>
	</doc>
	<doc for="DocumentDesigner.PreFilterProperties">
		<summary>
			<para> Adjusts the set of properties the component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> that contains the properties for the class of the component. </param>
		<remarks>
			<para>This <see cref="System.ComponentModel.Design.IDesignerFilter"/> interface method override adds a 
   set of properties to this designer's component at design time. This method adds
   the following browsable properties: "Location", and "BackColor".</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc>
	<doc for="DocumentDesigner.Dispose">
		<overload>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.DocumentDesigner"/> and optionally releases the managed
   resources.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.DocumentDesigner"/> and optionally releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Windows.Forms.Design.DocumentDesigner"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconimplementingdisposemethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconcleaningupunmanagedresources "/> and <see topic="cpconoverridingfinalizemethod "/>.</para>
		</remarks>
	</doc>
	<doc for="DocumentDesigner.IOleDragClient.GetControlForComponent">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
</docs>
