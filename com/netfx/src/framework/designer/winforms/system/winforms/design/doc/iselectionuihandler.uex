<docs>
   <doc for="ISelectionUIHandler">
 
 <summary>
    <para>
       This interface allows a designer to provide information to the selection UI
       service that is needed to allow it to draw selection UI and to provide
       automatic component drag support.
    </para>
 </summary>
   </doc>
   <doc for="ISelectionUIHandler.BeginDrag">
 <summary>
     Begins a drag on the currently selected designer.  The designer should provide
     UI feedback about the drag at this time.  Typically, this feedback consists
     of an inverted rectangle for each component, or a caret if the component
     is text.

 </summary>
 <param name='components'>
     The set of components that is going to be dragged.
 </param>
 <param name='rules'>
     The rules for the operation to begin, from SelectionRules
 </param>
 <param name='initialX'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <param name='initialY'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <returns>
 True if the drag should begin
  </returns>
   </doc>
   <doc for="ISelectionUIHandler.DragMoved">
 <summary>
     Called when the user has moved the mouse.  This will only be called on
     the designer that returned true from beginDrag.  The designer
     should update its UI feedback here.

 </summary>
 <param name='components'>
     The same set of components that was passed to beginDrag.
 </param>
 <param name='offset'>
     A rectangle providing the new offset for each of the
     components.  The x and y fields contain the position
     offset and the width and height fields contain the
     size differential.
 </param>
   </doc>
   <doc for="ISelectionUIHandler.EndDrag">
 <summary>
     Called when the user has completed the drag.  The designer should
     remove any UI feedback it may be providing.

 </summary>
 <param name='components'>
     The same set of components that was passed to beginDrag.
 </param>
 <param name='cancel'>
     true if the user cancelled the drag operation,
     or false otherwise.  If the drag was cancelled,
     the designer should not actually reposition the components.
 </param>
   </doc>
   <doc for="ISelectionUIHandler.GetComponentBounds">
 <summary>
     Retrieves the shape of the component.  The component's shape should be in
     absolute coordinates and in pixels, where 0,0 is the upper left corner of
     the screen.

 </summary>
 <param name='component'>
     The component to get the bounds for.

 </param>
 <returns>
     The components shape, in screen coordinates, or null if the
     component has no shape.
 </returns>
   </doc>
   <doc for="ISelectionUIHandler.GetComponentRules">
 <summary>
     Retrieves a set of rules concerning the movement capabilities of a component.
     This should be one or more flags from the SelectionRules class.  If no designer
     provides rules for a component, the component will not get any UI services.

 </summary>
 <param name='component'>
     The component to get the selection rules for.

 </param>
 <returns>
     The components selection rules.
 </returns>
   </doc>
   <doc for="ISelectionUIHandler.GetSelectionClipRect">
 <summary>
     Determines the rectangle that any selection adornments should be clipped
     to. This is normally the client area (in screen coordinates) of the
     container.
 </summary>
 <param name='component'>
     Component currently selected. If this component is the
     container of the UIHandler, then clipping isn't needed.
 </param>
   </doc>
   <doc for="ISelectionUIHandler.OnSelectionDoubleClick">
 <summary>
     Handle a double-click on the selection rectangle
     of the given component.
 </summary>
 <param name='component'>
     Component that got the double-click.
 </param>
   </doc>
   <doc for="ISelectionUIHandler.QueryBeginDrag">
 <summary>
     Queries to see if a drag operation
     is valid on this handler for the given set of components.
     If it returns true, BeginDrag will be called immediately after.
 </summary>
 <param name='components'>
     The set of components that is going to be dragged.
 </param>
 <param name='rules'>
     The rules for the operation to begin, from SelectionRules
 </param>
 <param name='initialX'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <param name='initialY'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
   </doc>
   <doc for="ISelectionUIHandler.ShowContextMenu">
 <summary>
     Shows the context menu for the given component.
 </summary>
 <param name='component'>
     Component that has to show the context menu.
 </param>
   </doc>
</docs>

