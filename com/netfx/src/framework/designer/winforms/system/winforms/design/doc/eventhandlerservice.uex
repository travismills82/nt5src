<docs>
	<doc for="EventHandlerService.EventHandlerService">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="EventHandlerService.EventHandlerChanged">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="EventHandlerService.FocusWindow">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="EventHandlerService.GetHandler">
		<summary>
			<para> 
       Gets the currently active event handler of the specified type.</para>
		</summary>
		<param name="handlerType">The type of the handler to get.</param>
		<returns>
			<para>An instance of the handler, or null if
       there is no handler of the requested type.</para>
		</returns>
		<remarks>
			<para>You should never cache this value because other components are free to change 
       it. This call is fairly quick, however, especially for cases when you are always
       asking for the same type of handler.</para>
		</remarks>
		
	</doc>
	<doc for="EventHandlerService.OnEventHandlerChanged">
		<summary>
      Fires an OnEventHandlerChanged event.
 </summary>
		<param name="e">
     The event information.
 </param>
	</doc>
	<doc for="EventHandlerService.PopHandler">
		<summary>
			<para> 
       Pops
       the given handler off of the stack.</para>
		</summary>
		<param name="handler">The handler to remove from the stack.</param>
		<remarks>
			<para>If the handler is not the topmost compnent on the stack, this will pop all 
       handlers up to and including handler.</para>
		</remarks>
		
	</doc>
	<doc for="EventHandlerService.PushHandler">
		<summary>
			<para>Pushes a new event handler on the stack.</para>
		</summary>
		<param name="handler">The handle to add to the stack.</param>
		<remarks>
			<para>This handler will be used by all components that request a compatible handler 
       type. If this handler does not support the requested type, the next handler on
       the stack will be used.</para>
		</remarks>
	</doc>
	<doc for="EventHandlerService.HandlerEntry">
		<summary>
     Contains a single node of our handler stack.  We typically
     have very few handlers, and the handlers are long-living, so
     I just implemented this as a linked list.
 </summary>
	</doc>
	<doc for="EventHandlerService.HandlerEntry.HandlerEntry">
		<summary>
     Creates a new handler entry objet.
 </summary>
		<param name="handler">
     The handler to contain.
 </param>
		<param name="next">
     The next node in the chain.
 </param>
	</doc>
	<doc for="EventHandlerService">
		<internalonly/>
		<summary>
			<para> 
      
      
      
      
      
      
      Provides
      a systematic way to manage event handlers for the current document.</para>
		</summary>
		<remarks>
			<para>Developers may want to be able to write code in one place that handles 
      events of a certain type. </para>
			<para>Also, developers may need to globally change the behavior of the 
      handlers for specific events or types of events, which may be distributed among
      designer components. </para>
			<para>The designers for a typical project are many different 
      objects so it can be useful to list and store reference to these
      events from a common place. </para>
			<para>This service implements an "event stack" that contains the current set of 
      event handlers. The stack may have a variety of different types of handlers
      on the stack. </para>
			<para>For example, a designer might push, or add, a keyboard handler 
      and a mouse handler onto the stack. When a designer requests an event
      handler, the service will find the topmost handler on the stack that
      matches the class you requested.</para>
			<para>This way the service can be extended to any eventing scheme, and it also 
      allows specific types of event handlers to be replaced. For example, you
      can replace mouse event handlers without affecting menu event handlers or
      keyboard event handlers.</para>
		</remarks>
	</doc>
</docs>
