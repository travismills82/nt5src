<docs>
   <doc for="CreateControlActionUnit">
 <summary>
    Provides an undo action unit for creating and destroying
    components on a form.
 </summary>
 <remarks>
 <para><see cref='System.Windows.Forms.Design.CreateControlActionUnit'/>is an undo unit designed to be 
    used only in the event of actually performing an undo. In other words, this unit
    is not designed to do the "initial do".</para>
 </remarks>
 <seealso cref='System.ComponentModel.Design.IActionUnit'/>
   </doc>
   <doc for="CreateControlActionUnit.CreateControlActionUnit">
 <summary>
    <para>Creates a new undo unit.</para>
 </summary>
 <param name='host'>The designer host for the document.</param>
 <param name='component'>The component that has just been created or destroyed.</param>
 <param name='deleteAction'>If true, this action is being used as a delete, rather than a create. Since these two operations are just the exact opposite of each other, we just use the same unit. NOTE: This is wrong because a delete action needs to persist properties for the component.</param>
 <remarks>
    <para>This undo unit is used when creating a component. It should always be created 
       after the actual create has ocurred, as it is only designed to undo an
       operation, not instigate it.</para>
 </remarks>
   </doc>
   <doc for="CreateControlActionUnit.Comparer">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="CreateControlActionUnit.DoRedoAction">
 <summary>
      Called to actually perform a redo.  Because we may need to redo
      child creates as well, this exists so we can pass in the parenting
      control.
 </summary>
   </doc>
   <doc for="CreateControlActionUnit.FindControl">
 <summary>
      Locates the control with the given name.  If no control with this name
      can be found, this will return the base component.  If the base component
      isn't a control either, then this will return null.
 </summary>
   </doc>
   <doc for="CreateControlActionUnit.SaveComponentState">
 <summary>
      Creates a series of child undo units for all children of this control.  This should be called
      right before the component is destroyed.  Each child unit is put in the redo state so that
      calling it will recreate the component.
 </summary>
   </doc>
</docs>

