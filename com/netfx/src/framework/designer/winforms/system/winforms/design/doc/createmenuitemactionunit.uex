<docs>
   <doc for="CreateMenuItemActionUnit">
 <summary>
    Provides an undo action unit for creating and destroying
    menu items on a form.
 </summary>
   </doc>
   <doc for="CreateMenuItemActionUnit.CreateMenuItemActionUnit">
 <summary>
    <para>Creates a new undo unit.</para>
 </summary>
 <param name='host'>The designer host for the document.</param>
 <param name='component'>The component that has just been created or destroyed.</param>
 <param name='deleteAction'>If true, this action is being used as a delete, rather than a create. Since these two operations are just the exact opposite of each other, we just use the same unit. NOTE: This is wrong because a delete action needs to persist properties for the component.</param>
 <remarks>
    <para>This undo unit is used when creating a component. It should always be created 
       after the actual create has ocurred, as it is only designed to undo an
       operation, not instigate it.</para>
 </remarks>
   </doc>
   <doc for="CreateMenuItemActionUnit.DoAction">
 <summary>
    <para> Performs or redoes the undo action.</para>
 </summary>
   </doc>
   <doc for="CreateMenuItemActionUnit.FindMenuItem">
 <summary>
    This will attempt to locate the menu item given 'name'.
    If the item cannot be found, we return null.
 </summary>
   </doc>
   <doc for="CreateMenuItemActionUnit.GetBaseMenu">
 <summary>
    Called when we are creating a menuitem and we don't have a parent pointer.
    We just want to get the base (context or main) menu.
 </summary>
   </doc>
   <doc for="CreateMenuItemActionUnit.RefreshMenu">
 <summary>
    Simply reloads our menu structure, we need to do this after removing or
    creating a new menu item.
 </summary>
   </doc>
</docs>

