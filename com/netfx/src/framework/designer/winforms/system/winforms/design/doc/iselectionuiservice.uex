<docs>
   <doc for="ISelectionUIService">
 
 <summary>
    <para>
       The selection UI service is used to provide a standard
       user interface for selection across designers. Using this service
       is optional, but is recommended to provide a standard UI component
       selection.
    </para>
 </summary>
   </doc>
   <doc for="ISelectionUIService.Visible">
 <summary>
     Determines if the selection UI is shown or not.

 </summary>
 <returns>
     true if the UI is being displayed, or false
     if it is currently invisible.
 </returns>
   </doc>
   <doc for="ISelectionUIService.ContainerSelectorActive">
 <summary>
     Adds an event handler to the ContainerSelectorActive event.
     This event is fired whenever the user interacts with the container
     selector in a manor that would indicate that the selector should
     continued to be displayed. Since the container selector normally
     will vanish after a timeout, designers should listen to this event
     and reset the timeout when this event occurs.
 </summary>
   </doc>
   <doc for="ISelectionUIService.AssignSelectionUIHandler">
 <summary>
     Assigns a selection UI handler to a given component.  The handler will be
     called when the UI service needs information about the component.  A single
     selection UI handler can be assigned to multiple components.

     When multiple components are dragged, only a single handler may control the
     drag.  Because of this, only components that are assigned the same handler
     as the primary selection are included in drag operations.

     A selection UI handler is automatically unassigned when the component is removed
     from the container or disposed.

 </summary>
 <param name='component'>
     The component that this handler is in control of.  A handler may
     control multiple components.
 </param>
 <param name='handler'>
     The selection UI handler to assign.

 </param>
   </doc>
   <doc for="ISelectionUIService.BeginDrag">
 <summary>
     This can be called by an outside party to begin a drag of the currently selected
     set of components.  At least one designer must have added a UI handler or
     else this method will always return false.

 </summary>
 <param name='rules'>
     A set of selection rules that define what type of a drag you're
     interested in.  This will be used to mask off components that
     don't have the capabilities that you want.  The default ruleset
     is zero.

 </param>
 <param name='initialX'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <param name='initialY'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <returns>
     true if the selection service will allow the drag to proceed.
 </returns>
 <seealso cref='System.Windows.Forms.Design.SelectionRules'/>
 <seealso cref='ISelectionUIHandler'/>
   </doc>
   <doc for="ISelectionUIService.Dragging">
 <summary>
     This can be used to determine if the user is in the middle of a drag operation.
 </summary>
 <returns>
     true if the user is currently dragging components around.
 </returns>
   </doc>
   <doc for="ISelectionUIService.DragMoved">
 <summary>
     Called by an outside party to update drag information.  This can only be called
     after a successful call to beginDrag.

 </summary>
 <param name='offset'>
     The offset in size and location of the new components.  The
     selection service may filter this offset to conform to limitations
     on the currently selected components.

 </param>
 <seealso cref='ISelectionUIHandler'/>
   </doc>
   <doc for="ISelectionUIService.EndDrag">
 <summary>
     Called by an outside party to finish a drag operation.  This can only be called
     after a successful call to beginDrag.

 </summary>
 <param name='cancel'>
     true if the caller now wishes to cancel the drag, or false
     to carry it out.
 </param>
   </doc>
   <doc for="ISelectionUIService.FilterSelection">
 <summary>
     Filters the set of selected components.  The selection service will retrieve all
     components that are currently selected.  This method allows you to filter this
     set down to components that match your criteria.  The selectionRules parameter
     must contain one or more flags from the SelectionRules class.  These flags
     allow you to constrain the set of selected objects to visible, movable,
     sizeable or all objects.

 </summary>
 <param name='components'>
     The array of components to filter.
 </param>
 <param name='selectionRules'>
     One or more flags from the SelectionRules class.
     Selection rules can be used to define one or more
     constraints on the selection set that is returned.
     If this parameter is zero, all selected components
     are returned.
 </param>
 <returns>
     the filtered set of components.
 </returns>
   </doc>
   <doc for="ISelectionUIService.GetAdornmentDimensions">
 <summary>
     Retrieves the width and height of a selection border grab handle.
     Designers may need this to properly position their user interfaces.

 </summary>
 <param name='adornmentType'>
     Adorment type to get dimensions for.

 </param>
 <returns>
     a Size containing the width and height of a selection grab
     handle.
 </returns>
   </doc>
   <doc for="ISelectionUIService.GetAdornmentHitTest">
 <summary>
     Tests to determine if the given screen coordinate is over an adornment
     for the specified component. This will only return true if the
     adornment, and selection UI, is visible.
 </summary>
 <param name='component'>
     Component to test
 </param>
 <param name='pt'>
     point, in screen coordinates, to test
 </param>
   </doc>
   <doc for="ISelectionUIService.GetContainerSelected">
 <summary>
    <para>Gets a value indicating whether the specified component is the currently selected container.</para>
 </summary>
 <param name='component'>The component to test.</param>
 <returns>
 <para><see langword='true'/> if the component is part of the user's current container selection; otherwise, <see langword='false'/>.</para>
 </returns>
 <remarks>
    <para>Container selection is a visual aid for selecting containers. It doesn't affect the normal component selection.</para>
 </remarks>
   </doc>
   <doc for="ISelectionUIService.GetSelectionRules">
 <summary>
     Retrieves a set of flags that define rules for the selection.  Selection
     rules indicate if the given component can be moved or sized, for example.

 </summary>
 <param name='component'>
     The component to inquire about.  An exception will be thrown
     if this compnent is not currently selected.

 </param>
 <returns>
     a series of flags from the SelectionRules class.

 </returns>
 <seealso cref='SelectionRules'/>
   </doc>
   <doc for="ISelectionUIService.GetSelectionStyle">
 <summary>
     Allows you to configure the style of the selection frame that a
     component uses.  This is useful if your component supports different
     modes of operation (such as an in-place editing mode and a static
     design mode).  Where possible, you should leave the selection style
     as is and use the design-time hit testing feature of the IDesigner
     interface to provide features at design time.  The value of style
     must be one of the  SelectionStyle enum values.

     The selection style is only valid for the duration that the component is
     selected.

 </summary>
 <param name='component'>
     The component to set the selection style for.

 </param>
 <returns>
     the selection style.  If the given component is not selected this
     will throw an exception.
 </returns>
 <seealso cref='System.ComponentModel.Design.IDesigner'/>
   </doc>
   <doc for="ISelectionUIService.SetContainerSelected">
 <summary>
    <para>Changes the container selection status of the specified component.</para>
 </summary>
 <param name='component'>The component to modify the container selection status of.</param>
 <param name='selected'><see langword='true'/> to set the component to become the selected container; <see langword='false'/> to be unselected.</param>
 <remarks>
    <para>Container selection is a visual aid for selecting containers. It doesn't affect the normal component selection.</para>
 </remarks>
   </doc>
   <doc for="ISelectionUIService.SetSelectionStyle">
 <summary>
     Allows you to configure the style of the selection frame that a
     component uses.  This is useful if your component supports different
     modes of operation (such as an in-place editing mode and a static
     design mode).  Where possible, you should leave the selection style
     as is and use the design-time hit testing feature of the IDesigner
     interface to provide features at design time.  The value of style
     must be one of the  SelectionStyle enum values.

     The selection style is only valid for the duration that the component is
     selected.

 </summary>
 <param name='component'>
     The component to set the selection style for.
 </param>
 <param name='style'>
     The style to set it to.

 </param>
 <seealso cref='System.ComponentModel.Design.IDesigner'/>
   </doc>
   <doc for="ISelectionUIService.SyncSelection">
 <summary>
     This should be called when a component has been moved, sized or re-parented,
     but the change was not the result of a property change.  All property
     changes are monitored by the selection UI service, so this is automatic most
     of the time.  There are times, however, when a component may be moved without
     a property change notification occurring.  Scrolling an auto scroll Win32
     form is an example of this.

     This method simply re-queries all currently selected components for their
     bounds and udpates the selection handles for any that have changed.
 </summary>
   </doc>
   <doc for="ISelectionUIService.SyncComponent">
 <summary>
     This should be called when a component's property changed, that the designer
     thinks should result in a selection UI change.

     This method simply re-queries all currently selected components for their
     bounds and udpates the selection handles for any that have changed.
 </summary>
   </doc>
</docs>

