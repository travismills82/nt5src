<docs>
   <doc for="SelectionUIHandler">
 <summary>
    <para> Provides design-time selection and dragging functionality.</para>
 </summary>
 <remarks>
 <para><see cref='System.Windows.Forms.Design.SelectionUIHandler'/> is an abstract base class that 
    encapsulates a lot of the details of handling selection drags. Just about
    everything that implements a selection UI handler will extend this.</para>
 </remarks>
   </doc>
   <doc for="SelectionUIHandler.BeginDrag">
 <summary>
    <para>Begins a drag operation.</para>
 </summary>
 <param name='components'>The set of components that is going to be dragged.</param>
 <param name='rules'>The rules for the operation to begin, from SelectionRules</param>
 <param name='initialX'>Starting X position, in screen coordinates, of the drag</param>
 <param name='initialY'>Starting X position, in screen coordinates, of the drag</param>
 <returns>
 <para><see langword='true'/> if the designer is going to 
    be handling this drag, or <see langword='false'/>
    if not.</para>
 </returns>
 <remarks>
    <para>A designer should examine the list of components to see if it wants to 
       support the drag. If it does, it should return <see langword='true'/>. If it
       returns <see langword='true'/>, the designer should provide UI feedback about the
       drag at this time. Typically, this feedback consists of displaying an inverted
       rectangle for each component, or a caret if the component is text.</para>
 </remarks>
   </doc>
   <doc for="SelectionUIHandler.CancelControlMove">
 <summary>
      This is called by MoveControls when the user has requested that the move be
      cancelled.  This puts all the controls back to where they were.
 </summary>
 <param name='controls'>
     The set of controls whose movements should be un-done.
 </param>
 <param name='bounds'>
 </param>
   </doc>
   <doc for="SelectionUIHandler.DragMoved">
 <summary>
    <para>Called when the user has moved the mouse.</para>
 </summary>
 <param name='components'>The same set of components that was passed to beginDrag.</param>
 <param name='offset'>A rectangle providing the new offset for each of the components. The x and y fields contain the position offset and the width and height fields contain the size differential.</param>
 <remarks>
    <para>This will only be called on the designer that returned true from beginDrag. 
       The designer should update its UI feedback here.</para>
 </remarks>
   </doc>
   <doc for="SelectionUIHandler.EndDrag">
 <summary>
    <para>Called when the user has completed the drag. The designer should
       remove any UI feedback it may be providing.</para>
 </summary>
 <param name='components'>The same set of components that was passed to beginDrag.</param>
 <param name='cancel'>true if the user cancelled the drag operation, or false otherwise. If the drag was cancelled, the designer should not actually reposition the components.</param>
   </doc>
   <doc for="SelectionUIHandler.GetComponent">
 <summary>
      Retrieves the base component for the selection handler.
 </summary>
 <returns>
      The component for this selection handler.
 </returns>
   </doc>
   <doc for="SelectionUIHandler.GetControl">
 <summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
 <returns>
      The UI control for this selection handler's base control.
 </returns>
   </doc>
   <doc for="SelectionUIHandler.GetControl1">
 <summary>
      Retrieves the UI control for the given component.
 </summary>
 <param name='component'>
      The component to retrieve the UI control for.
 </param>
 <returns>
      The control that provides UI for this component.
 </returns>
   </doc>
   <doc for="SelectionUIHandler.GetCurrentSnapSize">
 <summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
   </doc>
   <doc for="SelectionUIHandler.GetService">
 <summary>
      We use this to request often-used services.
 </summary>
   </doc>
   <doc for="SelectionUIHandler.GetShouldSnapToGrid">
 <summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
   </doc>
   <doc for="SelectionUIHandler.GetUpdatedRect">
 <summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
 <param name='orignalRect'>
      The rectangle to update.
 </param>
 <param name='dragRect'>
      The dragging rectangle of the component.
 </param>
 <param name='updateSize'>
      True to updateSize as well
 </param>
 <returns>
      A rectangle with updated dimensions.
 </returns>
   </doc>
   <doc for="SelectionUIHandler.MoveControls">
 <summary>
      Called when we need to move the controls on our frame while dragging.  This
      can perform three operations:  It can update the current controls location,
      it can commit the new controls (final move), and it can roll back a movement
      to the beginning of the operation.
 </summary>
 <param name='components'>
      The set of components that are involved in the move.
 </param>
 <param name='cancel'>
      If true, the move will be rolled back (cancelled).
 </param>
 <param name='finalMove'>
      If true, this indicates the final move operation.  For the final move we
      invalidate all of the state we were keeping about the move.
 </param>
   </doc>
   <doc for="SelectionUIHandler.QueryBeginDrag">
 <summary>
     Queries to see if a drag operation
     is valid on this handler for the given set of components.
     If it returns true, BeginDrag will be called immediately after.
 </summary>
 <param name='components'>
     The set of components that is going to be dragged.
 </param>
 <param name='rules'>
     The rules for the operation to begin, from SelectionRules
 </param>
 <param name='initialX'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <param name='initialY'>
     Starting X position, in screen coordinates, of the drag
 </param>
 <returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
   </doc>
   <doc for="SelectionUIHandler.SetCursor">
 <summary>
     Asks the handler to set the appropriate cursor
 </summary>
   </doc>
   <doc for="SelectionUIHandler.OleDragEnter">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="SelectionUIHandler.OleDragDrop">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="SelectionUIHandler.OleDragOver">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="SelectionUIHandler.OleDragLeave">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="SelectionUIHandler.BoundsInfo">
 <summary>
     This class holds bounds information for controls that are being moved.
 </summary>
   </doc>
   <doc for="SelectionUIHandler.BoundsInfo.BoundsInfo">
 <summary>
     Creates and initializes a new BoundsInfo object.
 </summary>
   </doc>
   <doc for="SelectionUIHandler.BoundsInfo.ToString">
 <summary>
     Overrides object ToString.
 </summary>
   </doc>
</docs>

