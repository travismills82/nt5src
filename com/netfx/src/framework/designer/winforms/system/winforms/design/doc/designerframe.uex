<docs>
   <doc for="DesignerFrame">
 
 <summary>
     This class implements our design time document.  This is the outer window
     that encompases a designer.  It maintains a control hierarchy that
     looks like this:

         DesignerFrame
             ScrollableControl
                 Designer 
             Splitter
             ScrollableControl
                 Component Tray

     The splitter and second scrollable control are created on demand
     when a tray is added.
 </summary>
   </doc>
   <doc for="DesignerFrame.DesignerFrame">
 <summary>
 <para>Initializes a new instance of the <see cref='System.Windows.Forms.Design.DesignerFrame'/> class.</para>
 </summary>
 <param name='site'></param>
   </doc>
   <doc for="DesignerFrame.OnGotFocus">
 <summary>
     When we get an lose focus, we need to make sure the form
     designer knows about it so it'll paint it's caption right.
 </summary>
   </doc>
   <doc for="DesignerFrame.OnLostFocus">
 <summary>
     When we get an lose focus, we need to make sure the form
     designer knows about it so it'll paint it's caption right.
 </summary>
   </doc>
   <doc for="DesignerFrame.ProcessDialogKey">
 <summary>
     We override this to do nothing.  Otherwise, all the nice keyboard m
     messages we want would get run through the Form's keyboard handling
     procedure.
 </summary>
   </doc>
   <doc for="DesignerFrame.WndProc">
 <summary>
     Base wndProc. All messages are sent to wndProc after getting filtered
     through the preProcessMessage function. Inheriting controls should
     call base.wndProc for any messages that they don't handle.
 </summary>
 <param name='m'>
     Win32 message
 </param>
   </doc>
   <doc for="DesignerFrame.IOverlayService.PushOverlay">
 <summary>
     Pushes the given control on top of the overlay list.  This is a "push"
     operation, meaning that it forces this control to the top of the existing
     overlay list.
 </summary>
 <param name='control'>
     The control to push to the top of the overlay list.  An
     exception will be thrown if this control is already in
     the list.
 </param>
 <seealso cref='IOverlayService'/>
   </doc>
   <doc for="DesignerFrame.IOverlayService.RemoveOverlay">
 <summary>
     Removes the given control from the overlay list.  Unlike pushOverlay,
     this can remove a control from the middle of the overlay list.
 </summary>
 <param name='control'>
     The control to remove.  An exception will be thrown if this
     control is not currently in the list.
 </param>
 <seealso cref='IOverlayService'/>
   </doc>
   <doc for="DesignerFrame.ISplitWindowService.AddSplitWindow">
 <summary>
      Requests the service to add a window 'pane'.
 </summary>
 <param name='window'>
  The window pane to add.
 </param>
   </doc>
   <doc for="DesignerFrame.ISplitWindowService.RemoveSplitWindow">
 <summary>
      Requests the service to remove a window 'pane'.
 </summary>
 <param name='window'>
  The window pane to add.
 </param>
   </doc>
   <doc for="DesignerFrame.OverlayControl">
 <summary>
     This is a scrollable control that supports additional floating
     overlay controls.
 </summary>
   </doc>
   <doc for="DesignerFrame.OverlayControl.OverlayControl">
 <summary>
     Creates a new overlay control.
 </summary>
   </doc>
   <doc for="DesignerFrame.OverlayControl.OverlayVisible">
 <summary>
     Determines if the overlay is currently visible.
 </summary>
   </doc>
   <doc for="DesignerFrame.OverlayControl.OnCreateControl">
 <summary>
     At handle creation time we request the designer's handle and
     parent it.
 </summary>
   </doc>
   <doc for="DesignerFrame.OverlayControl.OnLayout">
 <summary>
     We override onLayout to provide our own custom layout functionality.
     This just overlaps all of the controls.
 </summary>
 <param name='e'>
     The layout event.
 </param>
   </doc>
   <doc for="DesignerFrame.OverlayControl.ParentOverlay">
 <summary>
     Called to parent an overlay window into our document.  This assumes that
     we call in reverse stack order, as it always pushes to the top of the
     z-order.
 </summary>
 <param name='control'>
     The overlay control to push.
 </param>
   </doc>
   <doc for="DesignerFrame.OverlayControl.PushOverlay">
 <summary>
     Pushes the given control on top of the overlay list.  This is a "push"
     operation, meaning that it forces this control to the top of the existing
     overlay list.
 </summary>
 <param name='control'>
     The control to push to the top of the overlay list.  An
     exception will be thrown if this control is already in
     the list.
 </param>
   </doc>
   <doc for="DesignerFrame.OverlayControl.RemoveOverlay">
 <summary>
     Removes the given control from the overlay list.  Unlike pushOverlay,
     this can remove a control from the middle of the overlay list.
 </summary>
 <param name='control'>
     The control to remove.  An exception will be thrown if this
     control is not currently in the list.
 </param>
   </doc>
</docs>

