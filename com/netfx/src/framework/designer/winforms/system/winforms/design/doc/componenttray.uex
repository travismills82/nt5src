<docs>
	<doc for="ComponentTray.MenuService">
		<summary>
     Retrieves the menu editor service, which we cache for speed.
 </summary>
	</doc>
	<doc for="ComponentTray.TabOrderActive">
		<summary>
      Determines if the tab order UI is active.  When tab order is active, the tray is locked in
      a "read only" mode.
 </summary>
	</doc>
	<doc for="ComponentTray.IsWindowVisible">
		<summary>
			<para>Indicates whether the window is visible.</para>
		</summary>
		<remarks>
			<para>Has the native handle been created, and is the parent visible?</para>
		</remarks>
	</doc>
	<doc for="ComponentTray.IExtenderProvider.CanExtend">
		<summary>
			<para>
       Gets whether or not this extender provider can extend the given
       component. We only extend components that have been added
       to our UI.
    </para>
		</summary>
		<param name="component">
    The component we may be extending.
 </param>
		<returns>
			<para>
       If we can extend the component, we will return true.
    </para>
		</returns>
		<seealso cref="System.ComponentModel.IExtenderProvider"/>
	</doc>
	<doc for="ComponentTray.CanCreateComponentFromTool">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.DoAutoArrange">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.DoLineupIcons">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.DrawRubber">
		<summary>
      Draws a rubber band at the given coordinates.  The coordinates
      can be transposed.
 </summary>
	</doc>
	<doc for="ComponentTray.GetComponentsInRect">
		<summary>
     Finds the array of components within the given rectangle.  This uses the rectangle to
     find controls within our frame, and then uses those controls to find the actual
     components.  It returns an object array so the output can be directly fed into
     the selection service.
 </summary>
		<param name="rect">
     The rectangle, in frame coordinates, in which to find controls.
 </param>
		<returns>
     an object array consisting of the components whose control views are located
     within the given rectangle.
 </returns>
	</doc>
	<doc for="ComponentTray.GetDragDimensions">
		<summary>
     Returns the drag dimensions needed to move the currently selected
     component one way or the other.
 </summary>
	</doc>
	<doc for="ComponentTray.GetNextComponent">
		<summary>
     Similar to GetNextControl on Control, this method returns the next
     component in the tray, given a starting component.  It will return
     null if the end (or beginning, if forward is false) of the list
     is encountered.
 </summary>
	</doc>
	<doc for="ComponentTray.GetOleDragHandler">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.OnComponentRemoved">
		<summary>
      Called when a component is removed from the container.
 </summary>
	</doc>
	<doc for="ComponentTray.OnContextMenu">
		<summary>
     Called when we are to display our context menu for this component.
 </summary>
	</doc>
	<doc for="ComponentTray.OnLayout">
		<summary>
    Forces the layout of any docked or anchored child controls.
 </summary>
	</doc>
	<doc for="ComponentTray.OnResize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.PositionControl">
		<summary>
      Sets the given control to the correct position on our
      surface.  You may override this to perform your own
      positioning.
 </summary>
		<param name="c">
      The control to position.
 </param>
	</doc>
	<doc for="ComponentTray.IOleDragClient.GetControlForComponent">
		<summary>
			<para>
       Gets the control view instance for the given component.
       For Win32 designer, this will often be the component itself.
    </para>
		</summary>
	</doc>
	<doc for="ComponentTray.IOleDragClient.GetDesignerControl">
		<summary>
			<para>
       Gets the control view instance for the designer that
       is hosting the drag.
    </para>
		</summary>
	</doc>
	<doc for="ComponentTray.IOleDragClient.IsDropOk">
		<summary>
 Checks if it is valid to drop this type of a component on this client.
 </summary>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.BeginDrag">
		<summary>
     Begins a drag operation.  A designer should examine the list of components
     to see if it wants to support the drag.  If it does, it should return
     true.  If it returns true, the designer should provide
     UI feedback about the drag at this time.  Typically, this feedback consists
     of an inverted rectangle for each component, or a caret if the component
     is text.

 </summary>
		<param name="components">
     The set of components that is going to be dragged.
 </param>
		<param name="rules">
     The rules for the operation to begin, from SelectionRules
 </param>
		<param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
		<param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
		<returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.DragMoved">
		<summary>
     Called when the user has moved the mouse.  This will only be called on
     the designer that returned true from beginDrag.  The designer
     should update its UI feedback here.

 </summary>
		<param name="components">
     The same set of components that was passed to beginDrag.
 </param>
		<param name="offset">
     A rectangle providing the new offset for each of the
     components.  The x and y fields contain the position
     offset and the width and height fields contain the
     size differential.
 </param>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.EndDrag">
		<summary>
     Called when the user has completed the drag.  The designer should
     remove any UI feedback it may be providing.

 </summary>
		<param name="components">
     The same set of components that was passed to beginDrag.
 </param>
		<param name="cancel">
     true if the user cancelled the drag operation,
     or false otherwise.  If the drag was cancelled,
     the designer should not actually reposition the components.
 </param>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.GetComponentBounds">
		<summary>
			<para>
       Gets the shape of the component. The component's shape should be in
       absolute coordinates and in pixels, where 0,0 is the upper left corner of
       the screen.
    </para>
		</summary>
		<param name="component">
    The component to get the bounds for.
 </param>
		<returns>
			<para>
       The components shape, in screen coordinates, or null if the
       component has no shape.
    </para>
		</returns>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.GetComponentRules">
		<summary>
			<para>
       Gets a set of rules concerning the movement capabilities of a component.
       This should be one or more flags from the SelectionRules class. If no designer
       provides rules for a component, the component will not get any UI services.
    </para>
		</summary>
		<param name="component">
    The component to get the selection rules for.
 </param>
		<returns>
			<para>
       The components selection rules.
    </para>
		</returns>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.GetSelectionClipRect">
		<summary>
			<para>
       Gets the rectangle that any selection adornments should be clipped
       to. This is normally the client area (in screen coordinates) of the
       container.
    </para>
		</summary>
		<param name="component">
    Component currently selected. If this component is the container of the UIHandler, then clipping isn't needed.
 </param>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.OnSelectionDoubleClick">
		<summary>
     Handle a double-click on the selection rectangle
     of the given component.
 </summary>
		<param name="component">
     Component that got the double-click.
 </param>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.QueryBeginDrag">
		<summary>
     Queries to see if a drag operation
     is valid on this handler for the given set of components.
     If it returns true, BeginDrag will be called immediately after.
 </summary>
		<param name="components">
     The set of components that is going to be dragged.
 </param>
		<param name="rules">
     The rules for the operation to begin, from SelectionRules
 </param>
		<param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
		<param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
		<returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.ShowContextMenu">
		<summary>
     Shows the context menu for the given component.
 </summary>
		<param name="component">
     Component that has to show the context menu.
 </param>
	</doc>
	<doc for="ComponentTray.TrayOleDragDropHandler">
		<summary>
    TrayOleDragDropHandler provides the Ole Drag-drop handler for the
    component tray.
 </summary>
	</doc>
	<doc for="ComponentTray.AutoArrangeComparer">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.TrayControl">
		<summary>
    The tray control is the UI we show for each component in the tray.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.TrayControl">
		<summary>
      Creates a new TrayControl based on the component.
 </summary>
		<param name="tray">
      The tray we are connected to.
 </param>
		<param name="component">
      The component we are displaying.
 </param>
	</doc>
	<doc for="ComponentTray.TrayControl.Component">
		<summary>
      Retrieves the compnent this control is representing.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.AdjustSize">
		<summary>
     Adjusts the size of the control based on the contents.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.Dispose">
		<summary>
     Destroys this control.  Views automatically destroy themselves when they
     are removed from the design container.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.FromComponent">
		<summary>
      Retrieves the tray control object for the given component.
 </summary>
		<returns>
      The tray control, or null if there is no tray control for
      the component.
 </returns>
	</doc>
	<doc for="ComponentTray.TrayControl.OnComponentRename">
		<summary>
     Delegate that is called in response to a name change.  Here we update our own
     stashed version of the name, recalcuate our size and repaint.
 </summary>
		<param name="sender">
     The object sending the event.
 </param>
		<param name="e">
     Event.EMPTY; this isn't used.
 </param>
	</doc>
	<doc for="ComponentTray.TrayControl.OnHandleCreated">
		<summary>
     Overrides handle creation notification for a control.  Here we just ensure
     that we're the proper size.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.OnDoubleClick">
		<summary>
     Called in response to a double-click of the left mouse button.  The
     default behavior here calls onDoubleClick on IMouseHandler
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.OnMouseDown">
		<summary>
     Called when the mouse button is pressed down.  Here, we provide drag
     support for the component.
 </summary>
		<param name="me">
     The mouse event.
 </param>
	</doc>
	<doc for="ComponentTray.TrayControl.OnMouseMove">
		<summary>
     Called when the mouse is moved over the component.  We update our drag
     information here if we're dragging the component around.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.OnMouseUp">
		<summary>
     Called when the mouse button is released.  Here, we finish our drag
     if one was started.
 </summary>
		<param name="me">
     The mouse event.
 </param>
	</doc>
	<doc for="ComponentTray.TrayControl.OnContextMenu">
		<summary>
     Called when we are to display our context menu for this component.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.OnControlPropertyChanged">
		<summary>
      For controls, we sync their property changed event so our component can track their location.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.OnPaint">
		<summary>
     Painting for our control.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.OnFontChanged">
		<summary>
     Overrides control's FontChanged.  Here we re-adjust our size if the font changes.
 </summary>
		<param name="e">
     The property change event.
 </param>
	</doc>
	<doc for="ComponentTray.TrayControl.OnTextChanged">
		<summary>
     Overrides control's TextChanged.  Here we re-adjust our size if the font changes.
 </summary>
		<param name="e">
     The property change event.
 </param>
	</doc>
	<doc for="ComponentTray.TrayControl.OnSetCursor">
		<summary>
     Called each time the cursor needs to be set.  The ControlDesigner behavior here
     will set the cursor to one of three things:
     1.  If the selection UI service shows a locked selection, or if there is no location
     property on the control, then the default arrow will be set.
     2.  Otherwise, the four headed arrow will be set to indicate that the component can
     be clicked and moved.
     3.  If the user is currently dragging a component, the crosshair cursor will be used
     instead of the four headed arrow.
 </summary>
	</doc>
	<doc for="ComponentTray.TrayControl.ViewDefaultEvent">
		<summary>
      This creates a method signature in the source code file for the
      default event on the component and navigates the user's cursor
      to that location.
 </summary>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ComponentTray.TrayControl.WndProc">
		<summary>
     This method should be called by the extending designer for each message
     the control would normally receive.  This allows the designer to pre-process
     messages before allowing them to be routed to the control.
 </summary>
		<param name="m">
     The message.
 </param>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler">
		<summary>
      This class inherits from the abstract SelectionUIHandler
      class to provide a selection UI implementation for the
      component tray.
 </summary>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.TraySelectionUIHandler">
		<summary>
      Creates a new selection UI handler for the given
      component tray.
 </summary>
		<param name="tray">
      The tray this handler will work with to
      help provide selection UI.
 </param>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.EndDrag">
		<summary>
     Called when the user has completed the drag.  The designer should
     remove any UI feedback it may be providing.
 </summary>
		<param name="components">
     The same set of components that was passed to beginDrag.
 </param>
		<param name="cancel">
     true if the user cancelled the drag operation,
     or false otherwise.  If the drag was cancelled,
     the designer should not actually reposition the components.
 </param>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetComponent">
		<summary>
      Retrieves the base component for the selection handler.
 </summary>
		<returns>
      The component for this selection handler.
 </returns>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetControl">
		<summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
		<returns>
      The UI control for this selection handler's base control.
 </returns>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetControl1">
		<summary>
      Retrieves the UI control for the given component.
 </summary>
		<param name="component">
      The component to retrieve the UI control for.
 </param>
		<returns>
      The control that provides UI for this component.
 </returns>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetCurrentSnapSize">
		<summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetService">
		<summary>
      We use this to request often-used services.
 </summary>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetShouldSnapToGrid">
		<summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.GetUpdatedRect">
		<summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
		<param name="originalRect">
      The rectangle to update.
 </param>
		<param name="dragRect">
      The dragging rectangle of the component.
 </param>
		<param name="updateSize">
      True to updateSize as well
 </param>
		<returns>
      A rectangle with updated dimensions.
 </returns>
	</doc>
	<doc for="ComponentTray.TraySelectionUIHandler.SetCursor">
		<summary>
     Asks the handler to set the appropriate cursor
 </summary>
	</doc>
	<doc for="ComponentTray.GetService">
		<summary>
			<para> Gets the requested service type.
 </para>
		</summary>
		<param name="serviceType">The type of the service to retrieve. </param>
		<returns>
			<para> An instance of the requested service, or 
 <see langword="null"/> if the
 service could not be found.
 </para>
		</returns>
	</doc>
	<doc for="ComponentTray.IOleDragClient.Component">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.OleDragEnter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.OleDragDrop">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.OleDragOver">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.ISelectionUIHandler.OleDragLeave">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ComponentTray.RemoveComponent">
		<summary>
			<para>Removes the specified component from the tray.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to remove from the tray. </param>
		<seealso cref="System.Windows.Forms.Design.ComponentTray.AddComponent"/>
	</doc>
	<doc for="ComponentTray.SetLocation">
		<summary>
			<para>Sets the location of the specified component to the specified location.</para>
		</summary>
		<param name="receiver">The <see cref="System.ComponentModel.IComponent"/> to set the location of.</param>
		<param name=" location">A <see cref="System.Drawing.Point"/> indicating the new location for the specified component.</param>
	</doc>
	<doc for="ComponentTray">
		<summary>
			<para> Provides behavior for the component tray
      of the form designer. The component tray represents components that do not otherwise provide a visible surface at design time and
      provides a way for users to access and set the properties of those components.</para>
		</summary>
		<remarks>
			<para>Some types of components, such as a <see cref="System.Timers.Timer"/>
, may not have a user interface that can be viewed at
design time. These components are usually represented by icons that are shown in
the component tray.</para>
			<para>The component tray is a rectangular region displayed at the bottom of the
   design view window while in design view mode, once it is active. The
   component tray becomes active in design view after a component that is displayed
   in the component tray has been added to or is part of the current
   document.</para>
		</remarks>
	</doc>
	<doc for="ComponentTray.ComponentTray">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Design.ComponentTray"/> class using the
   specified designer and service provider.</para>
		</summary>
		<param name="mainDesigner">The <see cref="System.ComponentModel.Design.IDesigner"/> that is the main or document designer for the current project.</param>
		<param name=" serviceProvider">An <see cref="System.IServiceProvider"/> that can be used to obtain design-time services.</param>
		<remarks>
			<para> The component tray monitors component additions and removals and displays appropriate user interface objects
      to represent the components it contains.</para>
		</remarks>
	</doc>
	<doc for="ComponentTray.AutoArrange">
		<summary>
			<para>Gets or sets a value indicating whether the tray items are
      automatically aligned.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the tray items are automatically arranged; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ComponentTray.ComponentCount">
		<summary>
			<para> Gets the number of components contained in the tray.
      </para>
		</summary>
		<value>
			<para>The number of components in the tray.</para>
		</value>
	</doc>
	<doc for="ComponentTray.ShowLargeIcons">
		<summary>
			<para>Gets or sets a value indicating whether the tray displays a large icon to represent each component in the tray.</para>
		</summary>
		<value>
			<para><see langword="true"/> if large
   icons are displayed; otherwise, <see langword="false"/> .</para>
		</value>
	</doc>
	<doc for="ComponentTray.AddComponent">
		<overload>
			<para>Adds a component to the tray.</para>
		</overload>
		<summary>
			<para>Adds a component to the tray.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to add to the tray.</param>
		<seealso cref="System.Windows.Forms.Design.ComponentTray.RemoveComponent"/>
	</doc>
	<doc for="CanCreateComponentFromTool">
		<summary>
			<para>Gets a value indicating whether the specified tool can be used to
      create a new component.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to test.</param>
		<returns>
			<para><see langword="true"/> if the specified tool can be used
   to create a component; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="ComponentTray.CanDisplayComponent">
		<summary>
			<para>Gets a value indicating whether the specified component can be displayed.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to test.</param>
		<returns>
			<para><see langword="true"/> if the component can be displayed; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This
      method tests the specified component for the existence of a <see cref="System.ComponentModel.DesignTimeVisibleAttribute"/> , which indicates whether
      the component has a user interface that can be displayed. </para>
		</remarks>
	</doc>
	<doc for="ComponentTray.CreateComponentFromTool">
		<summary>
			<para> Creates a component from the specified toolbox item, adds the component to the current
      document, and displays a representation for the component in the component
      tray.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a component from.</param>
		<remarks>
			<para> This method checks the item for an appropriate <see cref="System.ComponentModel.DesignTimeVisibleAttribute"/> before 
   attempting to create the component and add it to the component
   tray.</para>
		</remarks>
	</doc>
	<doc for="ComponentTray.GetLocation">
		<summary>
			<para> Gets the location of the specified component, relative to
      the upper-left corner
      of the component tray.</para>
		</summary>
		<param name="receiver">The <see cref="System.ComponentModel.IComponent"/> to retrieve the location of.</param>
		<returns>
			<para>A <see cref="System.Drawing.Point"/> indicating the coordinates of the
   specified component, or an empty <see cref="System.Drawing.Point"/> if the specified component could not be
   found in the component tray. An empty <see cref="System.Drawing.Point"/> has an <see cref="System.Drawing.Point.IsEmpty"/> property equal to <see langword="true"/> and typically has <see cref="System.Drawing.Point.X"/> and <see cref="System.Drawing.Point.Y"/> properties that are
   each equal to zero.</para>
		</returns>
		<remarks>
			<para><see cref="System.Windows.Forms.Design.ComponentTray.GetLocation"/> is an accessor method for
   the location extender property that is added to each component in the
   component tray.</para>
		</remarks>
	</doc>
	<doc for="ComponentTray.OnDoubleClick">
		<summary>
			<para>Called when the mouse is double clicked over the component tray.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ComponentTray.OnGiveFeedback">
		<summary>
			<para> Called during an OLE drag and drop operation to provide
      an opportunity for the component tray to give feedback to the user about
      the results of dropping the object at a specific point.</para>
		</summary>
		<param name="gfevent">A <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> that provides data for the event. </param>
		<remarks>
			<note type="inheritinfo">
      When overriding <see cref="System.Windows.Forms.Design.ComponentTray.OnGiveFeedback"/> in a derived class,
      be sure to call the base class's <see cref="System.Windows.Forms.Design.ComponentTray.OnGiveFeedback"/>
      
      method so that registered delegates receive the event.
      
   </note>
		</remarks>
	</doc>
	<doc for="ComponentTray.OnDragDrop">
		<summary>
			<para> Called when an object that has
      been dragged is dropped on the component tray.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ComponentTray.OnDragEnter">
		<summary>
			<para>Called when an object is dragged over, and has entered the area over, the component tray.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ComponentTray.OnDragLeave">
		<summary>
			<para>Called when an object is dragged out of the area over the component tray.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ComponentTray.OnDragOver">
		<summary>
			<para> Called when an object is dragged over the component tray.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ComponentTray.OnLostCapture">
		<summary>
			<para> Called when a mouse drag selection
      operation is canceled.</para>
		</summary>
	</doc>
	<doc for="ComponentTray.OnPaint">
		<summary>
			<para>Called when the view for the component tray should be refreshed.</para>
		</summary>
		<param name="pe">A <see cref="System.Windows.Forms.PaintEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ComponentTray.OnSetCursor">
		<summary>
			<para> Called to set the mouse
      cursor.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      You can override this
      method to set your own mouse cursor.
      
   </note>
		</remarks>
	</doc>
	<doc for="ComponentTray.WndProc">
		<summary>
			<para> Processes Windows messages.</para>
		</summary>
		<param name="m">The <see cref="System.Windows.Forms.Message"/> to process. </param>
	</doc>
	<doc for="ComponentTray.DisplayError">
		<summary>
			<para> Displays an error message to the
      user with information about the specified exception.</para>
		</summary>
		<param name="e">The exception about which to display information. </param>
	</doc><doc for="ComponentTray.IOleDragClient.CanModifyComponents">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ComponentTray.IOleDragClient.AddComponent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ComponentTray.OnMouseDown">
		<summary>
			<para> Called when the mouse button is pressed.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that provides data for the event. </param>
		<remarks>
			<note type="inheritinfo">
      When overriding <see cref="System.Windows.Forms.Design.ComponentTray.OnMouseDown"/> in a derived class,
      be sure to call the base class's <see cref="System.Windows.Forms.Design.ComponentTray.OnMouseDown"/> method so that
      registered delegates receive the
      event.
   </note>
		</remarks>
	</doc><doc for="ComponentTray.OnMouseMove">
		<summary>
			<para>Called when the mouse cursor position has changed.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that provides data for the event. </param>
		<remarks>
			<note type="inheritinfo"> When
   overriding <see cref="System.Windows.Forms.Design.ComponentTray.OnMouseMove"/> in a derived class,
   be sure to call the base class's <see cref="System.Windows.Forms.Design.ComponentTray.OnMouseMove"/>
   method so that registered delegates receive the event.</note>
		</remarks>
	</doc><doc for="ComponentTray.OnMouseUp">
		<summary>
			<para> Called when the mouse button has been released.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.MouseEventArgs"/> that provides data for the event. </param>
		<remarks>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Windows.Forms.Design.ComponentTray.OnMouseUp"/> in a derived class,
      be sure to call the base class's <see cref="System.Windows.Forms.Design.ComponentTray.OnMouseUp"/>
      method so that registered delegates receive the event.
   </note>
		</remarks>
	</doc><doc for="ComponentTray.Dispose">
		<overload>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ComponentTray"/> and optionally releases the managed
   resources. </para>
		</overload>
		<summary>
			<para> Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ComponentTray"/> and optionally releases the managed resources.
   </para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Windows.Forms.Design.ComponentTray"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconimplementingdisposemethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconcleaningupunmanagedresources "/> and <see topic="cpconoverridingfinalizemethod "/>.</para>
		</remarks>
	</doc>
</docs>
