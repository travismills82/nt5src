<docs>
	<doc for="ComponentDocumentDesigner.AutoArrange">
		<summary>
			<para>Indicates whether the tray should auto arrange controls.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the tray should show a large icon; otherwise, 
 <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ComponentDocumentDesigner.LargeIcon">
		<summary>
			<para>Indicates whether the tray should contain a large icon.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the tray should show a large icon; otherwise, 
 <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ComponentDocumentDesigner.OnComponentAdded">
		<summary>
			This provides a view for all controls on the form.
		</summary>
		<param name="sender">The IDesignerHost sending the event.</param>
		<param name="ce">The ComponentEventArgs that contains component information.</param>
	</doc>
	<doc for="ComponentDocumentDesigner.OnComponentRemoved">
		<summary>
     			This provides a view for all controls on the form.
	 	</summary>
		<param name="sender">The IDesignerHost sending the event.</param>
		<param name="ce">The ComponentEventArgs that contains component information.</param>
	</doc>
	<doc for="ComponentDocumentDesigner.IOleDragClient.CanModifyComponents">
		<summary>
			<para> Indicates whether the
       components can be changed by the designer.</para>
		</summary>
		<value>
			<para><see langword="true"/> if components can be changed by the designer; 
 <see langword="false"/> if the components are read-only.</para>
		</value>
		<seealso cref="System.Windows.Forms.Design.IOleDragClient"/>
	</doc>
	<doc for="ComponentDocumentDesigner.IOleDragClient.GetControlForComponent">
		<summary>
			<para>Gets the instance of the control being used to visually represent the specified component.</para>
		</summary>
		<param name="component">The component to retrieve the control view instance for.</param>
		<remarks>
			<para> For a Win32 designer, the control instance will often be the component 
       itself.</para>
		</remarks>
	</doc>
	<doc for="ComponentDocumentDesigner.IOleDragClient.GetDesignerControl">
		<summary>
			<para> Gets the control instance being used
       as the designer surface.</para>
		</summary>
		<returns>
			<para>The control this designer is hosting.</para>
		</returns>
	</doc>
	<doc for="ComponentDocumentDesigner.IOleDragClient.IsDropOk">
		<summary>
			<para>Gets a value indicating if it is valid to drop this type of a component on this client.</para>
		</summary>
		<param name="component">The component being dropped.</param>
		<returns>
			<para><see langword="true"/> if the specified type of component is valid; otherwise, 
 <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="ComponentDocumentDesigner.IRootDesigner.SupportedTechnologies">
		<summary>
     The list of technologies that this designer can support
     for its view.  Examples of different technologies are
     Windows Forms and Web Forms.  Other object models can be
     supported at design time, but they most be able to
     provide a view in one of the supported technologies.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.IRootDesigner.GetView">
		<summary>
     The view for this document.  The designer
     should assume that the view will be shown shortly
     after this call is made and make any necessary
     preparations.
 </summary>
		<seealso cref="System.ComponentModel.Design.IRootDesigner"/>
	</doc>
	<doc for="ComponentDocumentDesigner.IToolboxUser.GetToolSupported">
		<summary>
			<para>Gets a value indicating whether the specified tool is supported by this 
       designer.</para>
		</summary>
		<param name="tool">The tool that is to be enabled on the toolbox.</param>
		<returns>
			<para><see langword="true"/> if the tool should be enabled on 
    the toolbox; <see langword="false"/>
    if the document designer doesn't know how to use the tool.</para>
		</returns>
		<remarks>
			<para>If a tool is supported then it will be enabled in the toolbox when this 
       designer regains focus. Otherwise, it will be disabled. Once a tool is marked as
       enabled or disabled it may not be queried again.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.IToolboxUser"/>
	</doc>
	<doc for="ComponentDocumentDesigner.IToolboxUser.ToolPicked">
		<summary>
			<para>Creates the specified tool.</para>
		</summary>
		<param name="tool">The tool to create.</param>
		<remarks>
			<para>This will be called when the user double-clicks on a toolbox item. The 
       document designer should create a component for the specified tool. Only
       tools that are enabled in the toolbox will be passed to this method.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.IToolboxUser"/>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI">
		<summary>
      The composition UI is the full UI for our composition designer.  We
      inherit from ComponentTray so we get most of the UI for free.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.AddComponent">
		<summary>
      Adds a component to the tray.
 </summary>
		<param name="component">
      The component to add.
 </param>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.DragHandler">
		<summary>
      Creates a selection UI drag handler for us to use.  You may override
      this if you want to provide different drag semantics.
 </summary>
		<returns>
      An instance of SelectionUIHandler.
 </returns>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.SetCursor">
		<summary>
      Sets the cursor.  We override to provide support for the toolbox.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.OnDragDrop">
		<summary>
      We don't want to allow drag/drop operations onto the banner area.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.OnDragOver">
		<summary>
      We don't want to allow drag/drop operations onto the banner area.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.OnSetCursor">
		<summary>
      Sets the cursor.  We override to provide support for the toolbox.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.RemoveComponent">
		<summary>
      Removes a component from the tray.
 </summary>
		<param name="component">
      The component to remove.
 </param>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.WndProc">
		<summary>
      We override the wndproc of the control so we can intercept non client
      messages.  We create the banner for the composition designer by
      changing the dimensions of the non-client area.
 </summary>
		<param name="m">
     Win32 message
 </param>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler">
		<summary>
      This class inherits from the abstract SelectionUIHandler
      class to provide a selection UI implementation for the
      composition designer.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.CompositionSelectionUIHandler">
		<summary>
      Creates a new selection UI handler for the given
      composition designer.
 </summary>
		<param name="compositionDesigner">
      The composition designer this handler will work with to
      help provide selection UI.
 </param>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetComponent">
		<summary>
      Retrieves the base component for the selection handler.
 </summary>
		<returns>
      The component for this selection handler.
 </returns>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetControl">
		<summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
		<returns>
      The UI control for this selection handler's base control.
 </returns>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetControl1">
		<summary>
      Retrieves the UI control for the given component.
 </summary>
		<param name="component">
      The component to retrieve the UI control for.
 </param>
		<returns>
      The control that provides UI for this component.
 </returns>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetCurrentSnapSize">
		<summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetService">
		<summary>
      We use this to request often-used services.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetShouldSnapToGrid">
		<summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetUpdatedRect">
		<summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
		<param name="originalRect">
      The rectangle to update.
 </param>
		<param name="dragRect">
     The dragging rectangle of the component.
 </param>
		<param name="updateSize">
      True to updateSize as well
 </param>
		<returns>
      A rectangle with updated dimensions.
 </returns>
	</doc>
	<doc for="ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.SetCursor">
		<summary>
     Asks the handler to set the appropriate cursor
 </summary>
	</doc>
	<doc for="ComponentDocumentDesigner.PostFilterProperties">
		<summary>
			<para>Allows a designer to filter the set of properties the
      component it is designing will expose through a <see cref="System.ComponentModel.TypeDescriptor"/>
      object.</para>
		</summary>
		<param name="properties">The properties for the class of the component.</param>
		<returns>
			<para> The augmented set
      of properties. If the method does not modify any properties,
      it can just return a reference to its input parameter. If this method does
      make changes, it must create a new array.</para>
		</returns>
		<remarks>
			<para>This method is called immediately after its corresponding "Post" method. If
      you are overriding this method you should call the base implementation after you
      perform your own filtering.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc><doc for="ComponentDocumentDesigner.Control">
		<summary>
			<para>Gets the control for the designer.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.Control"/> the designer is editing.</para>
		</value>
	</doc>
	<doc for="ComponentDocumentDesigner.TrayLargeIcon">
		<summary>
			<para> Gets or sets a value indicating whether the component tray for the designer is in large icon mode.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the component tray for the designer is in large
   icon mode; otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ComponentDocumentDesigner.GetToolSupported">
		<summary>
			<para>Gets a value indicating whether the specified tool is supported by the
      designer.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to test for toolbox support.</param>
		<returns>
			<para><see langword="true"/> if the tool should be enabled on
   the toolbox; <see langword="false"/>
   if the document designer doesn't know how to use the tool.</para>
		</returns>
		<remarks>
			<para> If a tool is supported, it will be enabled in the toolbox
      when the designer regains focus. Otherwise, it will be disabled. Once a tool is
      marked as enabled or disabled it cannot be queried again.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.IToolboxUser"/>
	</doc>
	<doc for="ComponentDocumentDesigner.Initialize">
		<summary>
			<para> Initializes the designer with the specified component.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to associate with the designer.</param>
		<remarks>
			<note type="inheritinfo">
      The designer can
      access the component's site and request services from it in this method.
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ComponentDocumentDesigner.ITypeDescriptorFilterService.FilterAttributes">
		<nodoc/>
		<overload>
			<para>Filters the attributes that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</overload>
		<summary>
			<para>Filters the attributes that a component exposes through a
   <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="component">The component to filter the attributes of.</param>
		<param name=" attributes">A dictionary of attributes that can be modified.</param>
		<returns>
			<para><see langword="true"/> if the set of filtered attributes is to be cached;
<see langword="false"/> if the filter service must query again.</para>
		</returns>
		<remarks>
			<para>This method is called when a user requests a set of
      attributes for a component. The attributes are added to the dictionary with the
      attribute type ID as the keys. Implementers of this service can make changes,
      add, or remove attributes in the dictionary.</para>
			<para><see langword="Notes to Implementers[note]"/> Return <see langword="false"/>
only when necessary, because repeated queries to the type descriptor filter
service can decrease performance.</para>
		</remarks>
	</doc>
	<doc for="ComponentDocumentDesigner.ITypeDescriptorFilterService.FilterEvents">
		<nodoc/>
		<overload>
			<para>Filters the events that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</overload>
		<summary>
			<para>Filters the events that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="component">The component to filter events for.</param>
		<param name=" events">A dictionary of events that can be modified.</param>
		<returns>
			<para><see langword="true"/> if the set of filtered events is to be cached;
<see langword="false"/> if the filter service must query again.</para>
		</returns>
		<remarks>
			<para>This method is called when a user requests a set of events for a component.
      The events are added to the dictionary with the event names as the keys.
      Implementers of this service can make changes, add, or remove events in the
      dictionary.</para>
			<para><see langword="Notes to Implementers[note]"/> Return <see langword="false"/>
only when necessary, because repeated queries to the type descriptor
filter service can decrease performance.</para>
		</remarks>
	</doc>
	<doc for="ComponentDocumentDesigner.ITypeDescriptorFilterService.FilterProperties">
		<nodoc/>
		<overload>
			<para>Filters the properties that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/> .</para>
		</overload>
		<summary>
			<para>Filters the properties that a component exposes through a
   <see cref="System.ComponentModel.TypeDescriptor"/> .</para>
		</summary>
		<param name="component">The component to filter properties for.</param>
		<param name=" properties">A dictionary of properties that can be modified.</param>
		<returns>
			<para><see langword="true"/> if the set of filtered properties is to be cached;
<see langword="false"/> if the filter service must query again.</para>
		</returns>
		<remarks>
			<para>This method is called when a user requests a set of properties for a
      component. The properties are added to the dictionary with the property names as
      the keys. Implementers of this service can make changes, add, or remove
      properties in the dictionary.</para>
			<para><see langword="Notes to Implementers[note]"/> Return <see langword="false"/>
only when necessary, because repeated queries to the type descriptor filter
service can decrease performance.</para>
		</remarks>
	</doc>
	<doc for="ComponentDocumentDesigner.IOleDragClient.AddComponent">
		<internalonly/>
		<summary>
			<para>Adds a component to the designer.</para>
		</summary>
		<param name="component">The component to add.</param>
		<param name="name">The name of the component.</param>
		<param name=" firstAdd"></param>
		<remarks>
			<para>The specified name will be set for the component, although this may be the
      existing name. (For example, Button1)</para>
		</remarks>
	</doc>
	<doc for="ComponentDocumentDesigner">
		<summary>
			<para> Base designer class for extending the design mode behavior of
      a root design document that supports nested components.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.Design.ComponentDocumentDesigner"/> provides a base class for designers 
   of root design documents that support nested components. In addition to the
   methods and functionality inherited from the <see cref="System.ComponentModel.Design.ComponentDesigner"/> class,
<see cref="System.Windows.Forms.Design.ComponentDocumentDesigner"/> 
implements
the <see cref="System.ComponentModel.Design.IRootDesigner"/> interface to provide a
root-level design mode view for the associated component, and any nested
components. </para>
			<note type="note">
   The root-level design mode view for
   a <see cref="System.Windows.Forms.Form"/> or <see cref="System.Windows.Forms.Control"/> is typically provided by
   a built-in root designer. A custom <see cref="System.ComponentModel.Design.IRootDesigner"/> implementation is required to
   provide a view for other types of root components in design mode.
</note>
			<para>You can associate a designer with a type using a <see cref="System.ComponentModel.DesignerAttribute"/>. For an overview of customizing design 
time behavior, see <see topic="cpconenhancingdesign-timesupport"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ComponentDesigner"/>
		<seealso cref="System.ComponentModel.Design.IRootDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso topic="cpconenhancingdesign-timesupport"/>
		<seealso cref="System.ComponentModel.DesignerAttribute"/>
	</doc>
	<doc for="ComponentDocumentDesigner.TrayAutoArrange">
		<summary>
			<para>Gets or sets a value indicating whether the component tray for the designer
      is in auto-arrange mode.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the component tray for the
   designer is in auto-arrange mode; otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ComponentDocumentDesigner.PreFilterProperties">
		<summary>
			<para> Adjusts the
      set of properties the component will expose through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> that contains the properties for the class of the component.</param>
		<remarks>
			<para>This <see cref="System.ComponentModel.Design.IDesignerFilter"/> interface 
   method override adds a non-browsable, design-time
   only <see langword="boolean"/>
   property named "TrayLargeIcon" to this designer's component at design time. This property is used by the component tray.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc>
	<doc for="ComponentDocumentDesigner.Dispose">
		<overload>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ComponentDocumentDesigner"/> and optionally releases the managed
   resources.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ComponentDocumentDesigner"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Windows.Forms.Design.ComponentDocumentDesigner"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconimplementingdisposemethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconcleaningupunmanagedresources "/> and <see topic="cpconoverridingfinalizemethod "/>.</para>
		</remarks>
	</doc>
</docs>
