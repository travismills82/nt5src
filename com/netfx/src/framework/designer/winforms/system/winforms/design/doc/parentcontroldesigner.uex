<docs>
	<doc for="ParentControlDesigner.StepControls">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.CurrentGridSize">
		<summary>
			<para> 
       Gets or sets the
       current grid size.</para>
		</summary>
		<value>
			<para>A Size object indicating the grid spacing.</para>
		</value>
		<remarks>
			<para>This property can be called to determine the current grid spacing and mode. 
       If the SnapToGrid flag is set, this will return the current grid snap
       dimensons, or otherwise a 1x1 Size object.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.SnapToGrid">
		<summary>
     Determines if we should snap to grid or not.
 </summary>
		<returns>
     true if we should snap to grid.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.AddChildComponents">
		<summary>
      Adds all the child components of a component
      to the given container
 </summary>
		<param name="component">
      The component to add.
 </param>
		<param name="container">
      The component to add.
 </param>
		<param name="host">
		</param>
		<param name="uiSvc">
		</param>
	</doc>
	<doc for="ParentControlDesigner.DrawGridOfParentChanged">
		<summary>
     This is called by the parent when the ParentControlDesigner's
     grid/snap settings have changed.  Unless the user has explicitly
     set these values, this designer will just inherit the new ones
     from the parent.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.GridSizeOfParentChanged">
		<summary>
     This is called by the parent when the ParentControlDesigner's
     grid/snap settings have changed.  Unless the user has explicitly
     set these values, this designer will just inherit the new ones
     from the parent.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.GridSnapOfParentChanged">
		<summary>
     This is called by the parent when the ParentControlDesigner's
     grid/snap settings have changed.  Unless the user has explicitly
     set these values, this designer will just inherit the new ones
     from the parent.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.EnsureOptionsDefaults">
		<summary>
 Ensure that we've picked up the correct grid/snap settings.  First, we'll set 
 the settings to a default value.  Next, we'll check to see if our parent has
 grid/snap settings - if so, we'll inherit those.  Finally, we'll get the setting
 from the options page.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.GetComponentsInRect">
		<summary>
     Finds the array of components within the given rectangle.  This uses the rectangle to
     find controls within our control, and then uses those controls to find the actual
     components.  It returns an object array so the output can be directly fed into
     the selection service.
 </summary>
		<param name="value">
     The rectangle, in screen coordinates, in which to find controls.
 </param>
		<param name="screenCoords">
     If the rectangle is in screenCoordinats.
 </param>
		<returns>
     an object array consisting of the components whose control views are located
     within the given rectangle.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.GetControlStackLocation">
		<summary>
 Computes the next default location for a control. It tries to find a spot
 where no other controls are being obscured and the new control has 2 corners
 that don't have other controls under them.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.GetDefaultSize">
		<summary>
     Retrieves the default dimensions for the given component class.
 </summary>
		<param name="component">
     The class to get the dimensions for.
 </param>
		<returns>
     a point containing the default width and height for the class.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.GetDesignerControl">
		<summary>
 Retrieves the control view instance for the designer that
 is hosting the drag.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.GetOleDragHandler">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.GetParentControlDesignerOfParent">
		<summary>
 This method return the ParentControlDesigner of the parenting control, 
 it is used for inheriting the grid size, snap to grid, and draw grid
 of parenting controls.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.GetAdjustedSnapLocation">
		<summary>
     Updates the location of the control according to the GridSnap and Size.
     This method simply calls GetUpdatedRect(), then ignores the width and
     height
 </summary>
		<param name="originalRect">
     The rectangle to update.
 </param>
		<param name="dragRect">
     The dragging rectangle of the component.
 </param>
		<returns>
     the newly updated rectangle.  If no changes were needed to
     the rectangle this will return rect.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.HookTimeout">
		<summary>
     Starts the timer to check for the container selector timeout
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IsOptionDefault">
		<summary>
     Checks if an option has the default value
 </summary>
	</doc>
	<doc for="ParentControlDesigner.OnChildControlAdded">
		<summary>
      This is called by Control when a new child control has
      been added.  Here we establish the selection UI handler
      for the child control.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.OnComponentRemoving">
		<summary>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.OnComponentRemoved">
		<summary>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.OnContainerSelectorActive">
		<summary>
      Called when the container selector has been activated.  The container selector will
      notify us when interesting things occur, such as when the user right clicks on the
      container selector.  Here we pop up our context menu.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.OnContainerSelectorTimeout">
		<summary>
     Called in response to the timeout on the container selector displayer. When
     the timeout occurs, we want to hide the selector. However, since the mouse can
     be resting on the selector, we want to not hide the selector when that occurs.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.OnLoadComplete">
		<summary>
     Called after our load finishes.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ResetTimeout">
		<summary>
     Resets the timeout for the container selector, if we are listening for it.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.SetCursor">
		<summary>
     Asks the handler to set the appropriate cursor
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ShouldSerializeDrawGrid">
		<summary>
     Determines if the DrawGrid property should be persisted.
 </summary>
		<returns>
     A boolean representing whether or not to persist the property.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ShouldSerializeSnapToGrid">
		<summary>
     Determines if the SnapToGrid property should be persisted.
 </summary>
		<returns>
     A boolean representing whether or not to persist the property.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ShouldSerializeGridSize">
		<summary>
     Determines if the GridSize property should be persisted.
 </summary>
		<returns>
     A boolean representing whether or not to persist the property.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ResetGridSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.UnhookTimeout">
		<summary>
     Cancels the timer to check for the container selector timeout
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IOleDragClient.AddComponent">
		<summary>
 Retrieves the control view instance for the designer that
 is hosting the drag.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IOleDragClient.CanModifyComponents">
		<summary>
 Checks if the client is read only.  That is, if components can
 be added or removed from the designer.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IOleDragClient.IsDropOk">
		<summary>
 Checks if it is valid to drop this type of a component on this client.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IOleDragClient.GetDesignerControl">
		<summary>
 Retrieves the control view instance for the designer that
 is hosting the drag.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IOleDragClient.GetControlForComponent">
		<summary>
 Retrieves the control view instance for the given component.
 For Win32 designer, this will often be the component itself.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.BeginDrag">
		<summary>
     Begins a drag operation.  A designer should examine the list of components
     to see if it wants to support the drag.  If it does, it should return
     true.  If it returns true, the designer should provide
     UI feedback about the drag at this time.  Typically, this feedback consists
     of an inverted rectangle for each component, or a caret if the component
     is text.
 </summary>
		<param name="components">
     The set of components that is going to be dragged.
 </param>
		<param name="rules">
     The rules for the operation to begin, from SelectionRules
 </param>
		<param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
		<param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
		<returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
		</returns>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.DragMoved">
		<summary>
     Called when the user has moved the mouse.  This will only be called on
     the designer that returned true from beginDrag.  The designer
     should update its UI feedback here.
 </summary>
		<param name="components">
     The same set of components that was passed to beginDrag.
 </param>
		<param name="offset">
     A rectangle providing the new offset for each of the
     components.  The x and y fields contain the position
     offset and the width and height fields contain the
     size differential.
 </param>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.EndDrag">
		<summary>
     Called when the user has completed the drag.  The designer should
     remove any UI feedback it may be providing.
 </summary>
		<param name="components">
     The same set of components that was passed to beginDrag.
 </param>
		<param name="cancel">
     true if the user cancelled the drag operation,
     or false otherwise.  If the drag was cancelled,
     the designer should not actually reposition the components.
 </param>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.GetComponentBounds">
		<summary>
     Retrieves the shape of the component.  The component's shape should be in
     absolute coordinates and in pixels, where 0,0 is the upper left corner of
     the screen.
 </summary>
		<param name="component">
     The component to get the bounds for.
 </param>
		<returns>
     The components shape, in screen coordinates, or null if the
     component has no shape.
		</returns>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.GetComponentRules">
		<summary>
     Retrieves a set of rules concerning the movement capabilities of a component.
     This should be one or more flags from the SelectionRules class.  If no designer
     provides rules for a component, the component will not get any UI services.
 </summary>
		<param name="component">
     The component to get the selection rules for.
 </param>
		<returns>
     The components selection rules.
		</returns>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.GetSelectionClipRect">
		<summary>
     Determines the rectangle that any selection adornments should be clipped
     to. This is normally the client area (in screen coordinates) of the
     container.
 </summary>
		<param name="component">
     Component currently selected. If this component is the
     container of the UIHandler, then clipping isn't needed.
 </param>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.OnSelectionDoubleClick">
		<summary>
     Handle a double-click on the selection rectangle
     of the given component.
 </summary>
		<param name="component">
     Component that got the double-click.
 </param>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.QueryBeginDrag">
		<summary>
     Queries to see if a drag operation
     is valid on this handler for the given set of components.
     If it returns true, BeginDrag will be called immediately after.
 </summary>
		<param name="components">
     The set of components that is going to be dragged.
 </param>
		<param name="rules">
		</param>
		<param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
		<param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
		<returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.ShowContextMenu">
		<summary>
     Shows the context menu for the given component.
 </summary>
		<param name="component">
     Component that has to show the context menu.
 </param>
	</doc>
	<doc for="ParentControlDesigner.ControlOleDragDropHandler">
		<summary>
     This is our version of a drag drop handler.  Our version handles placement of controls when creating them.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ControlOleDragDropHandler.OnInitializeComponent">
		<summary>
     This is called by the drag drop handler for each new tool that is created.  It gives us a chance to
     place the control on the correct designer.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.EscapeHandler">
		<summary>
      This class overrides the escape command so that we can escape
      out of our private drags.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.EscapeHandler.EscapeHandler">
		<summary>
      Creates a new escape handler.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.EscapeHandler.OverrideInvoke">
		<summary>
     CommandSet will check with this handler on each status update
     to see if the handler wants to override the availability of
     this command.
 </summary>
		<param name="cmd">
     The menu command to override the invokation for.
 </param>
		<returns>
     true if the handler overrode the invocation on
     the command.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.EscapeHandler.OverrideStatus">
		<summary>
     CommandSet will check with this handler on each status update
     to see if the handler wants to override the availability of
     this command.
 </summary>
		<param name="cmd">
     The menu command to override the status for.
 </param>
		<returns>
     true if the handler overrode the status on
     the command.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler">
		<summary>
      This class inherits from the abstract SelectionUIHandler
      class to provide a selection UI implementation for the
      designer.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.ParentControlSelectionUIHandler">
		<summary>
      Creates a new selection UI handler for the given
      designer.
 </summary>
		<param name="parentControlDesigner">
      The designer this handler will work with to
      help provide selection UI.
 </param>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetComponent">
		<summary>
      Retrieves the base component for the selection handler.
 </summary>
		<returns>
      The component for this selection handler.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetControl">
		<summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
		<returns>
      The UI control for this selection handler's base control.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetControl1">
		<summary>
      Retrieves the UI control for the given component.
 </summary>
		<param name="component">
      The component to retrieve the UI control for.
 </param>
		<returns>
      The control that provides UI for this component.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetCurrentSnapSize">
		<summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetService">
		<summary>
      We use this to request often-used services.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetShouldSnapToGrid">
		<summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.GetUpdatedRect">
		<summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
		<param name="originalRect">
      The rectangle to update.
 </param>
		<param name="dragRect">
     The dragging rectangle of the component.
 </param>
		<param name="updateSize">
      True to updateSize as well
 </param>
		<returns>
      A rectangle with updated dimensions.
 </returns>
	</doc>
	<doc for="ParentControlDesigner.ParentControlSelectionUIHandler.SetCursor">
		<summary>
     Asks the handler to set the appropriate cursor
 </summary>
	</doc>
	<doc for="ParentControlDesigner.IOleDragClient.Component">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.OleDragEnter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.OleDragDrop">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.OleDragOver">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.ISelectionUIHandler.OleDragLeave">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.GetControl">
		<summary>
			<para>Gets the control from the designer of the specified component.</para>
		</summary>
		<param name="component">The component to retrieve the control for.</param>
		<returns>
			<para>The <see cref="System.Windows.Forms.Control"/> that the specified component belongs 
   to.</para>
		</returns>
	</doc>
	<doc for="ParentControlDesigner.DefaultControlLocation">
		<summary>
			<para>Gets the default location for a control added to the designer.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Point"/> that
   indicates the default location for a control added to the designer.</para>
		</value>
		<remarks>
			<para> 
      The default location is usually (0,0). The
      default location is typically changed if the container has special borders, or for other reasons.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.DrawGrid">
		<summary>
			<para> Gets
      or sets a value indicating whether a
      grid should be drawn on the control for this designer.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a grid should be drawn on the control in
   the designer; otherwise, <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Windows.Forms.ControlPaint.DrawGrid"/>
	</doc>
	<doc for="ParentControlDesigner.EnableDragRect">
		<summary>
			<para>Gets a value indicating whether drag rectangles are drawn by the designer.</para>
		</summary>
		<value>
			<para><see langword="true"/> if drag rectangles are drawn; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The default value of this property is 
   <see langword="true"/>.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.GridSize">
		<summary>
			<para> 
      Gets or sets the size of each square of
      the grid that is drawn when the designer is in grid draw
      mode.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Size"/> that represents the size of each square of the grid drawn on a form or user control.</para>
		</value>
	</doc>
	<doc for="ParentControlDesigner.InvokeCreateTool">
		<summary>
			<para>Creates a tool from the specified <see cref="System.Drawing.Design.ToolboxItem"/> . </para>
		</summary>
		<param name="toInvoke">The <see cref="System.Windows.Forms.Design.ParentControlDesigner"/> that the tool is to be used with.</param>
		<param name=" tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a tool from.</param>
	</doc>
	<doc for="ParentControlDesigner.CreateTool">
		<overload>
			<para> Creates a component or control from a tool and adds it to the current design
      document.</para>
		</overload>
		<summary>
			<para>Creates a component or control from the specified tool and adds it to the current design document.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a component from.</param>
		<remarks>
			<para> The new component or control is positioned at the
      center of the currently selected control. This method uses the default size for the tool, if the tool has a
      default size specified. </para>
			<para> To specify a location or location and
      size for the component or control, use one of the other overloaded <see cref="System.Windows.Forms.Design.ParentControlDesigner.CreateTool"/> methods.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.CreateTool2">
		<summary>
			<para> Creates a component or control from the specified tool and adds it to the current design document
      within the bounds of the specified rectangle.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a component from.</param>
		<param name="bounds">A <see cref="System.Drawing.Rectangle"/> indicating the location and size for the component created from the tool. The <see cref="System.Drawing.Rectangle.X"/> and <see cref="System.Drawing.Rectangle.Y"/> values of the <see cref="System.Drawing.Rectangle"/> indicate the design-time view screen coordinates of the upper-left corner of the component.</param>
		<remarks>
			<para> The new component or control is positioned with its
      upper left corner at the location specified by the <see cref="System.Drawing.Rectangle.X"/> and <see cref="System.Drawing.Rectangle.Y"/> values of the <paramref name="bounds"/> parameter. The size of
      the new component or control will be set to the values specified by the <see cref="System.Drawing.Rectangle.Height"/>
      and <see cref="System.Drawing.Rectangle.Width"/> properties of the <paramref name="bounds"/> parameter.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.CreateToolCore">
		<summary>
			<para> Provides core functionality for all the <see cref="System.Windows.Forms.Design.ParentControlDesigner.CreateTool"/>
methods.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a component from.</param>
		<param name="x"> The horizontal position, in design-time view coordinates, of the location of the left edge of the tool, if a size is specified, or of the center of the tool, if no size is specified.</param>
		<param name="y"> The vertical position, in design-time view coordinates, of the location of the top edge of the tool, if a size is specified, or of the center of the tool, if no size is specified.</param>
		<param name="width">The width of the tool. This parameter is ignored if the <paramref name="hasSize"/> parameter is set to <see langword="false"/> .</param>
		<param name="height">The height of the tool. This parameter is ignored if the <paramref name="hasSize"/> parameter is set to <see langword="false"/> .</param>
		<param name="hasLocation"><see langword="true"/> if a location for the component is specified; <see langword="false"/> if the component is to be positioned in the center of the currently selected control.</param>
		<param name="hasSize"><see langword="true"/> if a size for the component is specified; <see langword="false"/> if the default height and width values for the component are to be used.</param>
		<returns>
			<para> An array of components created from the tool.</para>
		</returns>
		<remarks>
			<para>This is the only <see langword="CreateTool"/> method that can be overridden.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.GetUpdatedRect">
		<summary>
			<para>Updates the position of the specified rectangle,
      adjusting it for grid alignment if gird alignment mode is
      enabled.</para>
		</summary>
		<param name="originalRect">A <see cref="System.Drawing.Rectangle"/> indicating the initial position of the component being updated. </param>
		<param name="dragRect">A <see cref="System.Drawing.Rectangle"/> indicating the new position of the component. </param>
		<param name="updateSize"><see langword="true"/> to update the size of the rectangle, if there has been any change; otherwise, <see langword="false"/>. </param>
		<returns>
			<para> A rectangle indicating
      the position of the component in design-time view screen coordinates. If no changes have been made,
      this method returns the original rectangle.</para>
		</returns>
		<remarks>
			<para> This method aligns the specified rectangle to the
      grid if grid alignment is enabled.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.Initialize">
		<summary>
			<para>Initializes the designer with the specified component.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to associate with the designer. </param>
		<remarks>
			<para>This method is called to initialize the designer with the specified primary
      component.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ParentControlDesigner.OnSetCursor">
		<summary>
			<para> 
      Provides an opportunity to change the current mouse cursor.</para>
		</summary>
		<remarks>
			<para> This method sets the mouse cursor
      according to the following rules: If the toolbox service has a tool selected,
      it allows the toolbox service to set the cursor. Otherwise, the mouse cursor is set
      to the default mouse cursor. </para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.WndProc">
		<summary>
			<para> Processes Windows messages.</para>
		</summary>
		<param name="m">The <see cref="System.Windows.Forms.Message"/> to process.</param>
	</doc>
	<doc for="ParentControlDesigner.CreateTool1">
		<overload>
			<para>Creates a component or control from the specified tool and adds it to the
      current design document.</para>
		</overload>
		<summary>
			<para>Creates a component or control from the specified tool and adds it to the current design document at
      the specified location.</para>
		</summary>
		<param name="tool">The <see cref="System.Drawing.Design.ToolboxItem"/> to create a component from.</param>
		<param name="location">The <see cref="System.Drawing.Point"/> , in design-time view screen coordinates, at which to center the component. </param>
		<remarks>
			<para> The new component or control is positioned around the location
      specified by the <paramref name="location"/> parameter.
      This
      method uses the default size for the tool's component, if the component has a default size.</para>
			<para> To specify a location and size for the component or control, use the
      appropriate overloaded <see cref="System.Windows.Forms.Design.ParentControlDesigner.CreateTool"/> method.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.CanParent">
		<overload>
			<para>Indicates whether the control managed by the
      specified designer can be a child of the control managed by this designer.</para>
		</overload>
		<summary>
			<para>Indicates whether the control managed by the
      specified designer can be a child of the control managed by this designer.</para>
		</summary>
		<param name="controlDesigner"> The designer for the control to test.</param>
		<returns>
			<para><see langword="true"/> if the control managed by the
   specified designer can be a child of the control managed by this designer;
   otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> This method indicates whether the control managed by this
      designer can parent the control of the specified <see cref="System.Windows.Forms.Design.ControlDesigner"/> .</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.CanParent1">
		<overload>
			<para>Indicates whether the specified control can be a child of the control managed by this designer.</para>
		</overload>
		<summary>
			<para>Indicates whether the specified control can be a child of the control
      managed by this designer.</para>
		</summary>
		<param name="control">The <see cref="System.Windows.Forms.Control"/> to test.</param>
		<returns>
			<para><see langword="true"/> if
   the specified control can be a child of the control managed by this designer;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method indicates whether the control managed by the designer
      can parent the specified <see cref="System.Windows.Forms.Design.ControlDesigner"/> .</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnDragOver">
		<summary>
			<para>Called when a drag-and-drop object is dragged over the control designer 
      view.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ParentControlDesigner.OnDragDrop">
		<summary>
			<para> Called when
      a drag-and-drop object is dropped onto the control designer view.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
		<remarks>
			<para> This method checks any parent control for a
      drag-and-drop handler that can handle the operation instead. If one exists, this method
      passes the <see cref="System.Windows.Forms.DragEventArgs"/>
      to the method and returns.
      If no parent drag-and-drop handler exists, this method attempts to create a tool
      if a toolbox item has been dropped on the designer control.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnDragEnter">
		<summary>
			<para> Called when a drag-and-drop operation enters the control designer view.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ParentControlDesigner.OnDragLeave">
		<summary>
			<para> Called when a drag-and-drop operation leaves the control designer view.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ParentControlDesigner.OnGiveFeedback">
		<summary>
			<para> Called when a drag-and-drop operation is in progress to
      provide visual cues based on the location of the mouse
      while a drag operation is in progress.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> that provides data for the event.</param>
		<remarks>
			<para> The designer host calls this method when
      an OLE drag event occurs.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnMouseDragEnd">
		<summary>
			<para> Called at the end of a drag-and-drop operation to complete or cancel the
      operation.</para>
		</summary>
		<param name="cancel"><see langword="true"/> to cancel the drag operation; <see langword="false"/> to commit it. </param>
		<remarks>
			<para>This method is called at the end of a drag operation. This method either
      commits to or cancels the drag operation.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnMouseEnter">
		<summary>
			<para> Called when the mouse first enters the
      control.</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.OnMouseHover">
		<summary>
			<para> Called after
      the mouse hovers over the control.</para>
		</summary>
		<remarks>
			<para>This method displays the container selector. </para>
			<note type="note">
      Because the child controls pass
      this notification up, this method will display the container selector even
      if you hover over a child control.
      
   </note>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnMouseLeave">
		<summary>
			<para> Called when the
      mouse first enters the control.</para>
		</summary>
	</doc>
	<doc for="ParentControlDesigner.OnPaintAdornments">
		<summary>
			<para>Called when the control that the designer is managing 
      has painted its surface so the designer can paint any additional adornments on top of the control.</para>
		</summary>
		<param name="pe">A <see cref="System.Windows.Forms.PaintEventArgs"/> that provides data for the event. </param>
	</doc>
	<doc for="ParentControlDesigner">
		<summary>
			<para>Base designer class for extending the design mode behavior of
      a <see cref="System.Windows.Forms.Control"/> that supports nested
      controls.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.Design.ParentControlDesigner"/> provides
   a base class for designers of controls that can contain child controls. In
   addition to the methods and functionality inherited from the
<see cref="System.Windows.Forms.Design.ControlDesigner"/> and <see cref="System.ComponentModel.Design.ComponentDesigner"/> classes, 
<see cref="System.Windows.Forms.Design.ParentControlDesigner"/>
enables child controls to be added to, removed from, selected within, and
arranged within the control whose behavior it extends at design time. </para>
			<para>You can associate a designer with a type using a <see cref="System.ComponentModel.DesignerAttribute"/>. For an overview of customizing design 
time behavior, see <see topic="cpconenhancingdesign-timesupport"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Design.ControlDesigner"/>
		<seealso cref="System.ComponentModel.Design.ComponentDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
		<seealso topic="cpconenhancingdesign-timesupport"/>
		<seealso cref="System.ComponentModel.DesignerAttribute"/>
	</doc>
	<doc for="ParentControlDesigner.PreFilterProperties">
		<summary>
			<para> Adjusts the set of properties the component will expose
      through a <see cref="System.ComponentModel.TypeDescriptor"/>
      
      .</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> that contains the properties for the class of the component. </param>
		<remarks>
			<para>This <see cref="System.ComponentModel.Design.IDesignerFilter"/> interface method 
   override adds a set of properties to this designer's control that
   allow a user to set options related to the grid display and child control
   alignment. This method adds the following browsable properties: "DrawGrid", "SnapToGrid",
   and "GridSize".</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc>
	<doc for="ParentControlDesigner.Dispose">
		<overload>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ParentControlDesigner"/> and optionally releases the managed
   resources.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ParentControlDesigner"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Windows.Forms.Design.ParentControlDesigner"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconimplementingdisposemethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconcleaningupunmanagedresources "/> and <see topic="cpconoverridingfinalizemethod "/>.</para>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnMouseDragBegin">
		<summary>
			<para>Called in response to the left mouse button being pressed and held while over
      the component.</para>
		</summary>
		<param name="x">The x position of the mouse in screen coordinates. </param>
		<param name="y">The y position of the mouse in screen coordinates. </param>
		<remarks>
			<para>This method is called in response to the left mouse
      button being pressed on a component. The designer overrides the base form of this method to provide a "lasso" selection mechanism for components
      within the control.</para>
			<note type="note">
      You can pass a point in screen coordinates to the
   <see cref="System.Windows.Forms.Control.PointToClient"/> method of the <see cref="System.Windows.Forms.Control"/> class to obtain the coordinates of the 
      point relative to the upper-left corner of the control.
   </note>
		</remarks>
	</doc>
	<doc for="ParentControlDesigner.OnMouseDragMove">
		<summary>
			<para> Called
      for each movement of the mouse during a drag-and-drop operation.</para>
		</summary>
		<param name="x">The x position of the mouse in screen coordinates. </param>
		<param name="y">The y position of the mouse in screen coordinates. </param>
		<remarks>
			<para>This method is called at the start of a drag-and-drop operation.</para>
			<note type="note">
      You can pass a point in screen coordinates to the
   <see cref="System.Windows.Forms.Control.PointToClient"/> method of the <see cref="System.Windows.Forms.Control"/> class to obtain the coordinates of the 
      point relative to the upper-left corner of the control.
   </note>
		</remarks>
	</doc>
</docs>
