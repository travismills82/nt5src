<docs>
   <doc for="AdvancedBindingObject">
 <summary>
    <para>Represents a bindings collection that provides advanced support.</para>
 </summary>
   </doc>
   <doc for="AdvancedBindingObject.AdvancedBindingObject">
 <summary>
 <para>Initializes a new instance of the <see cref='System.Windows.Forms.Design.AdvancedBindingObject'/> class.</para>
 </summary>
 <param name='bindings'>The bindings to store.</param>
   </doc>
   <doc for="AdvancedBindingObject.Bindings">
 <summary>
    <para>Gets or sets the collection of bindings.</para>
 </summary>
 <value>
 <para>A <see cref='System.Windows.Forms.ControlBindingsCollection'/>.</para>
 </value>
   </doc>
   <doc for="AdvancedBindingObject.Disposed">
 <summary>
    <para>Adds a event handler to listen to the Disposed event on the component.</para>
 </summary>
 <seealso cref='System.EventHandler'/>
   </doc>
   <doc for="AdvancedBindingObject.ShowAll">
 <summary>
    <para>Indicates whether to show all bindings.</para>
 </summary>
 <value>
 <para><see langword='true'/> if all bindings should be shown; otherwise, 
 <see langword='false'/>.</para>
 </value>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetAttributes">
 <summary>
     Retrieves an array of member attributes for the given object.
 </summary>
 <returns>
     the array of attributes on the class.  This will never be null.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetClassName">
 <summary>
     Retrieves the class name for this object.  If null is returned,
     the type name is used.
 </summary>
 <returns>
     The class name for the object, or null if the default will be used.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetComponentName">
 <summary>
     Retrieves the name for this object.  If null is returned,
     the default is used.
 </summary>
 <returns>
     The name for the object, or null if the default will be used.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetConverter">
 <summary>
      Retrieves the type converter for this object.
 </summary>
 <returns>
     A TypeConverter.  If null is returned, the default is used.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetDefaultEvent">
 <summary>
     Retrieves the default event.
 </summary>
 <returns>
     the default event, or null if there are no
     events
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetDefaultProperty">
 <summary>
     Retrieves the default property.
 </summary>
 <returns>
     the default property, or null if there are no
     properties
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetEditor">
 <summary>
      Retrieves the an editor for this object.
 </summary>
 <returns>
     An editor of the requested type, or null.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetEvents">
 <summary>
     Retrieves an array of events that the given component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.
 </summary>
 <returns>
     an array of events this component surfaces.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetEvents1">
 <summary>
     Retrieves an array of events that the given component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.  The returned array of events will be
     filtered by the given set of attributes.
 </summary>
 <param name='attributes'>
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the event does not have an instance of that attribute's
     class, this will still include the event if the
     Attribute is the same as it's Default property.
 </param>
 <returns>
     an array of events this component surfaces that match
     the given set of attributes..
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetProperties">
 <summary>
     Retrieves an array of properties that the given component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.
 </summary>
 <returns>
     an array of properties this component surfaces.
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetProperties1">
 <summary>
     Retrieves an array of properties that the given component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.  The returned array of properties will be
     filtered by the given set of attributes.
 </summary>
 <param name='attributes'>
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the property does not have an instance of that attribute's
     class, this will still include the property if the
     Attribute is the same as it's Default property.
 </param>
 <returns>
     an array of properties this component surfaces that match
     the given set of attributes..
 </returns>
   </doc>
   <doc for="AdvancedBindingObject.ICustomTypeDescriptor.GetPropertyOwner">
 <summary>
    <para>Gets or sets the site object that directly depends on the value being edited.</para>
 </summary>
 <value>
 <para>The <see cref='System.ComponentModel.ISite'/> that owns the value depending on the binding 
    values.</para>
 </value>
 <remarks>
    <para>This is generally the object that is required for the PropertyDescriptor's 
       GetValue and SetValue methods. If <see langword='null'/> is
       passed for the PropertyDescriptor, the ICustomComponent
       descriptor implementation should return the default object, the main object that exposes the properties
       and attributes.</para>
 </remarks>
   </doc>
   <doc for="AdvancedBindingObject.Name">
 <summary>
    <para>Gets or sets the name for this object.</para>
 </summary>
 <value>
    <para>The name of the object.</para>
 </value>
   </doc>
   <doc for="AdvancedBindingObject.ToString">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
</docs>

