<docs>
   <doc for="RootControlCodeDomSerializer">
 <summary>
     Control's provide their own serializer so they can write out resource hierarchy
     information.  We delegate nearly everything to our base class's serializer.
 </summary>
   </doc>
   <doc for="RootControlCodeDomSerializer.Deserialize">
 <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
 <param name='manager'>
     A serialization manager interface that is used during the deserialization
     process.
 </param>
 <param name='codeObject'>
     A CodeDom object to deserialize.  For this serializer this must point to
     a CodeStatementCollection that has statements whose left hand side
     ultimately points to the object we need to deserialize.
 </param>
 <returns>
     An object representing the deserialized CodeDom object.
 </returns>
   </doc>
   <doc for="RootControlCodeDomSerializer.Serialize">
 <summary>
     Serializes the given object into a CodeDom object.
 </summary>
 <param name='manager'>
     A serialization manager interface that is used during the deserialization
     process.
 </param>
 <param name='value'>
     The object to serialize.
 </param>
 <returns>
     A CodeDom object representing the object that has been serialized.  For components,
     this returns a CodeStatementCollection containing all of the properties, events
     and methods that had to be set to serialize the given component.  In addition,
     this may create a variable reference in a CodeTypeDeclaration, if one can be
     found in the serialization context stack.
 </returns>
   </doc>
   <doc for="RootControlCodeDomSerializer.SerializeControlHierarchy">
 <summary>
     This writes out our control hierarchy information if there is a resource manager available for us to write to.
 </summary>
   </doc>
</docs>

