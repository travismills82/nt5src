<docs>
   <doc for="CommandSet">
 <summary>
      This class implements the standard set of menu commands for
      the form designer.  This set of command is shared between
      the form designer (and other UI-based form packages), and
      composition designer, which doesn't manipulate controls.
      Therefore, this set of command should only contain commands
      that are common to both functions.
 </summary>
   </doc>
   <doc for="CommandSet.CommandSet">
 <summary>
     Creates a new CommandSet object.  This object implements the set
     of commands that the UI.Win32 form designer offers.
 </summary>
   </doc>
   <doc for="CommandSet.MenuService">
 <summary>
      Retrieves the menu command service, which the command set
      typically uses quite a bit.
 </summary>
   </doc>
   <doc for="CommandSet.SelectionCount">
 <summary>
      Retrieves the count of the currently selected objects.
 </summary>
   </doc>
   <doc for="CommandSet.SelectionInherited">
 <summary>
      Determines if the selection contains any inherited components.
 </summary>
   </doc>
   <doc for="CommandSet.SelectionPrimary">
 <summary>
      Retrieves the current primary selection, if there is one.
 </summary>
   </doc>
   <doc for="CommandSet.SelectionService">
 <summary>
      Retrieves the selection service, which the command set
      typically uses quite a bit.
 </summary>
   </doc>
   <doc for="CommandSet.SelectionUIService">
 <summary>
      Retrieves the selection UI service, which the command set
      typically uses quite a bit.
 </summary>
   </doc>
   <doc for="CommandSet.CheckComponentEditor">
 <summary>
     Checks if an object supports ComponentEditors, and optionally launches
     the editor.
 </summary>
 <param name='obj'>
     The object to inspect
 </param>
 <param name='launchEditor'>
     If the object supports the ComponentEditor, invoke the editor.
 </param>
   </doc>
   <doc for="CommandSet.Dispose">
 <summary>
     Disposes of this object, removing all commands from the menu service.
 </summary>
   </doc>
   <doc for="CommandSet.GetCopySelection">
 <summary>
     Used to retrieve the selection for a copy.  The default implementation
     retrieves the current selection.
 </summary>
 <returns>
     An array of objects that should be part of the copy.
 </returns>
   </doc>
   <doc for="CommandSet.GetLocation">
 <summary>
     Used to retrieve the current location of the given component.
 </summary>
 <param name='comp'>
     The component to get the location for.
 </param>
 <returns>
     a point containing the component's location, or null if
     the component doesn't have a location property.
 </returns>
   </doc>
   <doc for="CommandSet.GetProperty">
 <summary>
     Retrieves the given property on the given component.
 </summary>
 <param name='comp'>
     The component to get the property on.
 </param>
 <param name='propName'>
     The name of the property.
 </param>
 <returns>
     an PropertyDescriptor for the given property or null if
     no such property could be found.
 </returns>
   </doc>
   <doc for="CommandSet.GetService">
 <summary>
      Retrieves the requested service.
 </summary>
 <param name='serviceType'>
     Type type of the service.
 </param>
 <returns>
     An object representing the service, or null of no such service
     was found.
 </returns>
   </doc>
   <doc for="CommandSet.GetSize">
 <summary>
     Used to retrieve the current size of the given component.
 </summary>
 <param name='comp'>
     The component to get the size for.
 </param>
 <returns>
     The component's size, or null if
     the component doesn't have a size property.
 </returns>
   </doc>
   <doc for="CommandSet.GetSnapInformation">
 <summary>
      Retrieves the snap information for the given component.  
 </summary>
   </doc>
   <doc for="CommandSet.OnEventHandlerChanged">
 <summary>
      Called by the event handler service when the current event handler
      has changed.  Here we invalidate all of our menu items so that
      they can pick up the new event handler.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnKeyCancel">
 <summary>
     Called for the two cancel commands we support.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnKeyCancel1">
 <summary>
     Called for the two cancel commands we support.  Returns true
     If we did anything with the cancel, or false if not.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
   </doc>
   <doc for="CommandSet.OnKeyDefault">
 <summary>
      Called for the "default" command, typically the Enter key.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnKeyMove">
 <summary>
      Called for all cursor movement commands.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuAlignByPrimary">
 <summary>
     Called for all alignment operations that key off of a primary
     selection.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuAlignToGrid">
 <summary>
     Called when the align->to grid menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuCenterSelection">
 <summary>
     Called when the center horizontally or center vertically menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuCopy">
 <summary>
     Called when the copy menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuCut">
 <summary>
     Called when the cut menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuDelete">
 <summary>
     Called when the delete menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuPaste">
 <summary>
     Called when the paste menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuSelectAll">
 <summary>
     Called when the select all menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuShowGrid">
 <summary>
     Called when the show grid menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuSizingCommand">
 <summary>
     Handles the various size to commands.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuSizeToGrid">
 <summary>
     Called when the size->to grid menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuDesignerProperties">
 <summary>
     Called when the properties menu item is selected on the Context menu
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuSnapToGrid">
 <summary>
     Called when the snap to grid menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnMenuSpacingCommand">
 <summary>
     Called when a spacing command is selected

 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnSelectionChanged">
 <summary>
     Called when the current selection changes.  Here we determine what
     commands can and can't be enabled.
 </summary>
 <param name='sender'>
     The object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusAlways">
 <summary>
     Determines the status of a menu command.  Commands with this event
     handler are always enabled.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusAnySelection">
 <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when one or more objects are selected.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusCopy">
 <summary>
      Status for the copy command.  This is enabled when
      there is something juicy selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusCut">
 <summary>
      Status for the cut command.  This is enabled when
      there is something juicy selected and that something
      does not contain any inherited components.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusDelete">
 <summary>
      Status for the delete command.  This is enabled when there
      is something selected and that something does not contain
      inherited components.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusNYI">
 <summary>
     Determines the status of a menu command.  Commands with this event are
     considered to be not yet implemented and are disabled.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="CommandSet.OnStatusPaste">
 <summary>
     Determines the status of a menu command.  Commands with this event are
     enabled when there is something yummy on the clipboard.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="CommandSet.OnUpdateCommandStatus">
 <summary>
      This is called when the selection has changed.  Anyone using CommandSetItems
      that need to update their status based on selection changes should override
      this and update their own commands at this time.  The base implementaion
      runs through all base commands and calls UpdateStatus on them.
 </summary>
   </doc>
   <doc for="CommandSet.SortSelection">
 <summary>
     called by the formatting commands when we need a given selection array sorted.
     Sorting the array sorts by x from left to right, and by Y from top to bottom.
 </summary>
 <param name='selectedObjects'>
     - array of Selection objects comin' in.  We modify this in place
 </param>
 <param name='nSortBy'>
 </param>
   </doc>
   <doc for="CommandSet.UpdateClipboardItems">
 <summary>
     Common function that updates the status of clipboard menu items only
 </summary>
   </doc>
   <doc for="CommandSet.CommandSetItem">
 
 <summary>
     We extend MenuCommand for our command set items.  A command set item
     is a menu command with an added delegate that is used to determine the
     flags for the menu item.  We have different classes of delegates here.
     For example, many  menu items may be enabled when there is at least
     one object selected, while others are only enabled if there is more than
     one object or if there is a primary selection.
 </summary>
   </doc>
   <doc for="CommandSet.CommandSetItem.CommandSetItem">
 <summary>
     Creates a new CommandSetItem.
 </summary>
 <param name='commandSet'>
     The CommandSet object this is related to.
     status.
 </param>
 <param name='statusHandler'>
     An event handler that will be called when it
     is time to determine the status of this command.
 </param>
 <param name='invokeHandler'>
     An event handler that will be called when this
     command has been invoked.
 </param>
 <param name='id'>
     The CommandID of this command.
 </param>
   </doc>
   <doc for="CommandSet.CommandSetItem.Invoke">
 <summary>
     This may be called to invoke the menu item.
 </summary>
   </doc>
   <doc for="CommandSet.CommandSetItem.UpdateStatus">
 <summary>
     Called when the status of this command should be re-queried.
 </summary>
   </doc>
   <doc for="CommandSet.ImmediateCommandSetItem">
 
 <summary>
      The immediate command set item is used for commands that cannot be cached.  Commands
      such as Paste that get outside stimulus cannot be cached by our menu system, so 
      they get an ImmediateCommandSetItem instead of a CommandSetItem.
 </summary>
   </doc>
   <doc for="CommandSet.ImmediateCommandSetItem.ImmediateCommandSetItem">
 <summary>
     Creates a new ImmediateCommandSetItem.
 </summary>
 <param name='commandSet'>
     The CommandSet object this is related to.
     status.
 </param>
 <param name='statusHandler'>
     An event handler that will be called when it
     is time to determine the status of this command.
 </param>
 <param name='invokeHandler'>
     An event handler that will be called when this
     command has been invoked.
 </param>
 <param name='id'>
     The CommandID of this command.
 </param>
   </doc>
   <doc for="CommandSet.ImmediateCommandSetItem.OleStatus">
 <summary>
      Overrides OleStatus in MenuCommand to invoke our status handler first.
 </summary>
   </doc>
   <doc for="CommandSet.ComponentLeftCompare">
 <summary>
      Component comparer that compares the left property of a component.
 </summary>
   </doc>
   <doc for="CommandSet.ComponentTopCompare">
 <summary>
      Component comparer that compares the top property of a component.
 </summary>
   </doc>
</docs>

