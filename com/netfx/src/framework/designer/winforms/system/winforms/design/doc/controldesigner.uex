<docs>
	<doc for="ControlDesigner.AllowDrop">
		<summary>
     Accessor for AllowDrop.  Since we often turn this on, we shadow it
     so it doesn't show up to the user.
 </summary>
	</doc>
	<doc for="ControlDesigner.ContextMenu">
		<summary>
     Accessor method for the context menu property on control.  We shadow
     this property at design time.
 </summary>
	</doc>
	<doc for="ControlDesigner.Enabled">
		<summary>
			<para> Indicates whether the control is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is enabled; otherwise, 
 <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is shadowed at design-time.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.Locked">
		<summary>
			<para> Indicates whether the control is locked.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is locked; otherwise, 
 <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ControlDesigner.Visible">
		<summary>
			<para> Indicates
       whether the control is visible.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is visible; otherwise, 
 <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property is shadowed at design-time.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.HookChildHandles">
		<summary>
     Hooks the peer handles of the given child control.  We need
     to do this to handle windows that are not associated with
     a control (such as the combo box edit), and for controls
     that are not in design mode (such as child controls on a
     user control).
 </summary>
		<param name="firstChild">
      The first child control to process.  This method may
      recursively call itself for children of this handle.
 </param>
	</doc>
	<doc for="ControlDesigner.IsDoubleClick">
		<summary>
     Determines if the given mouse click is a double click or not.  We must
     handle this ourselves for controls that don't have the CS_DOUBLECLICKS style
     set.
 </summary>
		<param name="x">
     The X location of the click.
 </param>
		<param name="y">
     The Y location of the click.
 </param>
		<returns>
     true if the click should be treated as a double click,
     false if not.
 </returns>
	</doc>
	<doc for="ControlDesigner.OnControlPropertyChanged">
		<summary>
      For controls, we sync their property changed event so our component can track their location.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnDragEnter">
		<summary>
      Event handler for our drag enter event.  The host will call us with
      this when an OLE drag event happens.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnDragDrop">
		<summary>
      Event handler for our drag drop event.  The host will call us with
      this when an OLE drag event happens.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnDragLeave">
		<summary>
      Event handler for our drag leave event.  The host will call us with
      this when an OLE drag event happens.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnDragOver">
		<summary>
      Event handler for our drag over event.  The host will call us with
      this when an OLE drag event happens.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnGiveFeedback">
		<summary>
      Event handler for our GiveFeedback event, which is called when a drag operation
      is in progress.  The host will call us with
      this when an OLE drag event happens.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnHandleChange">
		<summary>
      This is called whenever the control handle changes.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnInitializeShadowProperties">
		<summary>
     Called when the designer is intialized.  This allows the designer to initialize
     the values of any shadow properties it has.
 </summary>
	</doc>
	<doc for="ControlDesigner.OnMouseDoubleClick">
		<summary>
     Called in response to a double-click of the left mouse button.  We
     Just call this on the event service
 </summary>
	</doc>
	<doc for="ControlDesigner.ChildSubClass">
		<summary>
     This is a subclass window that we attach to all child windows.
     We use this to disable a child hwnd's UI during design-time.
 </summary>
	</doc>
	<doc for="ControlDesigner.ChildSubClass.ChildSubClass">
		<summary>
     Creates a new ChildSubClass object.  This subclasses
     the given hwnd immediately.
 </summary>
		<param name="designer">
      The control designer we will route design-time messages
      to.
 </param>
		<param name="hwnd">
      The window to subclass.
 </param>
	</doc>
	<doc for="ControlDesigner.ChildSubClass.WndProc">
		<summary>
     Overrides Window's WndProc to process messages.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="ControlDesigner.ChildWindowTarget">
		<summary>
     This is a subclass class that attaches to a control instance.
     Controls can be subclasses by hooking their IWindowTarget
     interface.  We use this to disable a child hwnd's UI during
     design-time.
 </summary>
	</doc>
	<doc for="ControlDesigner.ChildWindowTarget.ChildWindowTarget">
		<summary>
     Creates a new ChildWindowTarget object.  This hooks the
     given control's window target.
 </summary>
		<param name="designer">
      The control designer we will route design-time messages
      to.
 </param>
		<param name="oldWindowTarget">
      The old IWindowTarget to hook.
 </param>
	</doc>
	<doc for="ControlDesigner.ChildWindowTarget.DefWndProc">
		<summary>
     Causes default window processing for the given message.  We
     just forward this on to the old control target.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="ControlDesigner.ChildWindowTarget.OnHandleChange">
		<summary>
      Called when the window handle of the control has changed.
 </summary>
		<param name="newHandle">
      The new window handle value.
 </param>
	</doc>
	<doc for="ControlDesigner.ChildWindowTarget.OnMessage">
		<summary>
      Called to do control-specific processing for this window.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="ControlDesigner.IDesignerTarget">
		<summary>
     This class is the interface the designer will use to funnel messages
     back to the control.
 </summary>
	</doc>
	<doc for="ControlDesigner.IDesignerTarget.DefWndProc">
		<summary>
     Causes default window processing for the given message.  We
     just forward this on to the old control target.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="ControlDesigner.DesignerWindowTarget">
		<summary>
     This class replaces Control's window target, which effectively subclasses
     the control in a handle-independent way.
 </summary>
	</doc>
	<doc for="ControlDesigner.DesignerWindowTarget.DesignerWindowTarget">
		<summary>
     Creates a new DesignerTarget object.
 </summary>
		<param name="designer">
      The control designer that owns this target.
 </param>
	</doc>
	<doc for="ControlDesigner.DesignerWindowTarget.DefWndProc">
		<summary>
     Causes default window processing for the given message.  We
     just forward this on to the old control target.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="ControlDesigner.DesignerWindowTarget.Dispose">
		<summary>
      Disposes this window target.  This re-establishes the
      prior window target.
 </summary>
	</doc>
	<doc for="ControlDesigner.DesignerWindowTarget.OnHandleChange">
		<summary>
      Called when the window handle of the control has changed.
 </summary>
		<param name="newHandle">
      The new window handle value.
 </param>
	</doc>
	<doc for="ControlDesigner.DesignerWindowTarget.OnMessage">
		<summary>
      Called to do control-specific processing for this window.
 </summary>
		<param name="m">
      The message to process.
 </param>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject">
		<summary>
			<para>[To be Supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.GetChildCount">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.HitTest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.InvalidPoint">
		<summary>
			<para>Defines a local <see cref="System.Drawing.Point"/> object that represents the 
 values of an invalid <see cref="System.Drawing.Point"/>
 object.</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.Design.ControlDesigner.InvalidPoint"/> has an <see cref="System.Drawing.Point.X"/> 
and <see cref="System.Drawing.Point.Y"/> property set to the minimum value for the
integer data type.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.OnCreateHandle">
		<summary>
			<para>Provides an opportunity to perform additional 
 processing immediately after the control handle has been created.</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.OnSetCursor">
		<summary>
			<para> 
 
 Called each time
 the cursor needs to be set.</para>
		</summary>
		<remarks>
			<para> This 
 method handles redirection and handling of the set cursor event. If the toolbox service has a
 tool selected, this method will allow the toolbox service to set the cursor. If the
 selection UI service has a locked selection, or if there is no location property on
 the control, the default arrow cursor will be set. If a user is dragging
 a component, the crosshair cursor will be set. Otherwise, a four headed arrow cursor
 will be set to indicate that the component can be clicked and
 moved.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.Bounds"><nodoc/>
		<summary>
			<para>Gets the points that define the boundaries of 
      the accessible object for the designer.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Rectangle"/> that indicates the boundaries of the accessible 
   object for the designer.</para>
		</value>
		<seealso cref="System.Drawing.Rectangle"/>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.Description"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.DefaultAction"><nodoc/>
		<summary>
			<para>Gets or sets the default action</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.Name"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.Parent"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.Role"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.State"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.Value"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.GetChild"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesignerAccessibleObject.GetChildCount"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesignerAccessibleObject.GetFocused"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesignerAccessibleObject.GetSelected"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesignerAccessibleObject.HitTest">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.OnContextMenu">
		<summary>
			<para>Shows the context menu and provides an opportunity to perform additional processing when the context menu is about to be displayed.</para>
		</summary>
		<param name="x">The x coordinate at which to display the context menu.</param>
		<param name=" y">The y coordinate at which to display the context menu.</param>
	</doc>
	<doc for="ControlDesigner.AccessibilityObject">
		<summary>
			<para> Gets the <see cref="System.Windows.Forms.AccessibleObject"/> assigned to the control.</para>
		</summary>
		<value>
			<para>The <see cref="System.Windows.Forms.AccessibleObject"/> assigned to the control.</para>
		</value>
		<remarks>
			<para>For more information about accessible objects, see the Active Accessibility
      section of the MSDN Library.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
	</doc>
	<doc for="ControlDesigner.Control">
		<summary>
			<para> Gets the control that the designer is designing.</para>
		</summary>
		<value>
			<para>The control that the designer is designing.</para>
		</value>
	</doc>
	<doc for="ControlDesigner.EnableDragRect">
		<summary>
			<para>Gets a value indicating whether drag rectangles can be drawn on this designer component.</para>
		</summary>
		<value>
			<para><see langword="true"/> if drag rectangles can be drawn; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ControlDesigner.SelectionRules">
		<summary>
			<para> Gets the selection rules that indicate the movement capabilities of a component.</para>
		</summary>
		<value>
			<para>A bitwise combination of <see cref="System.Windows.Forms.Design.SelectionRules"/> values.</para>
		</value>
		<remarks>
			<para> If no
      designer provides rules for a component, the component will not get any UI
      services.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.Design.SelectionRules"/>
	</doc>
	<doc for="ControlDesigner.BaseWndProc">
		<summary>
			<para> Processes Windows messages.</para>
		</summary>
		<param name="m">The <see cref="System.Windows.Forms.Message"/> to process.</param>
		<remarks>
			<para>This method causes the message to be processed by Windows, skipping the control.
      This is useful if you want to block the message from getting to the control,
      but you do not want to block it from getting to Windows itself because it
      can cause other messages to be generated.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.DisplayError">
		<summary>
			<para>Displays information about the specified exception to the user.</para>
		</summary>
		<param name="e">The <see cref="System.Exception"/> to display.</param>
	</doc>
	<doc for="ControlDesigner.HookChildControls">
		<summary>
			<para>Routes messages from the child controls of the specified control to the designer.</para>
		</summary>
		<param name="firstChild">The first child <see cref="System.Windows.Forms.Control"/> to process. This method may recursively call itself for children of the control. </param>
	</doc>
	<doc for="ControlDesigner.OnDragEnter1">
		<summary>
			<para>Called when a drag-and-drop operation enters the control designer view.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ControlDesigner.OnDragDrop1">
		<summary>
			<para>Called when a drag-and-drop object is dropped onto the control designer view.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ControlDesigner.OnDragLeave1">
		<summary>
			<para>Called when a drag-and-drop operation leaves the control designer view.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ControlDesigner.OnDragOver1">
		<summary>
			<para> Called when a drag-and-drop object is dragged over the control designer view.</para>
		</summary>
		<param name="de">A <see cref="System.Windows.Forms.DragEventArgs"/> that provides data for the event.</param>
	</doc>
	<doc for="ControlDesigner.OnPaintAdornments">
		<summary>
			<para> Called when the control that the designer is managing has painted
      its surface so the designer can paint any additional adornments on top of the
      control.</para>
		</summary>
		<param name="pe">A <see cref="System.Windows.Forms.PaintEventArgs"/> the designer can use to draw on the control. </param>
	</doc>
	<doc for="ControlDesigner.OnSetComponentDefaults">
		<summary>
			<para> Called when the designer
      is initialized, so the designer can set default values for properties of the component.</para>
		</summary>
		<remarks>
			<para> This method allows the designer to provide some 
      meaningful default values for the component. The default implementation of this
      method sets the component's <see cref="System.Windows.Forms.Control.Text"/>
      property to its name, if the property
      field is of type string.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.UnhookChildControls">
		<summary>
			<para>Routes messages for the children of the specified
      control to each control rather than to a parent designer.</para>
		</summary>
		<param name="firstChild">The first child <see cref="System.Windows.Forms.Control"/> to process. This method may recursively call itself for children of the control. </param>
	</doc>
	<doc for="ControlDesigner.ControlDesignerAccessibleObject.ControlDesignerAccessibleObject">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject"/> class
   using the specified designer and control.</para>
		</summary>
		<param name="designer">The <see cref="System.Windows.Forms.Design.ControlDesigner"/> for the accessible object.</param>
		<param name=" control">The <see cref="System.Windows.Forms.Control"/> for the accessible object.</param>
	</doc>
	<doc for="ControlDesigner.Initialize">
		<summary>
			<para>Initializes the designer with the specified component.</para>
		</summary>
		<param name="component">The <see cref="System.ComponentModel.IComponent"/> to associate the designer with. This component must always be an instance of, or derive from, <see cref="System.Windows.Forms.Control"/> . </param>
		<remarks>
			<para>This method is called by the designer host to initialize the designer.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ControlDesigner.InitializeNonDefault">
		<summary>
			<para>Initializes properties of the control to any non-default values.</para>
		</summary>
		<remarks>
			<para>This method is called when a control is initialized from 
      a state other than its default initialization state. This occurs, for instance,
      when it is pasted on a design surface from another location.</para>
			<para> 
      This method can be implemented to perform checking for
      valid object references, and to establish correct siting or references, after a component has
      been re-sited. This method is called after the <see cref="System.Windows.Forms.Design.ControlDesigner.Initialize"/> method.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.CanBeParentedTo">
		<summary>
			<para> Indicates
      if this designer's control can be parented by the control
      of the specified designer.</para>
		</summary>
		<param name="parentDesigner">The <see cref="System.ComponentModel.Design.IDesigner"/> that manages the control to check.</param>
		<returns>
			<para><see langword="true"/> 
if the control managed by the specified designer can parent the control managed by this
designer; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method is useful for testing whether a control
      can be parented by a particular type of parent. For example, <see cref="System.Windows.Forms.TabPage"/>
      controls can only be parented by <see cref="System.Windows.Forms.TabControl"/>
      controls.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.EnableDragDrop">
		<summary>
			<para>Enables or disables drag-and-drop support for the control
      being designed.</para>
		</summary>
		<param name="value"><see langword="true"/> to enable drag-and-drop support for the control; <see langword="false"/> if the control should not have drag-and-drop support. The default is <see langword="false"/> .</param>
		<remarks>
			<para>The default value of <see langword="false"/> prevents a control from having 
   children dragged onto it at design time. To allow a control to parent other
   controls at design time, associate it with a designer that derives from <see cref="System.Windows.Forms.Design.ParentControlDesigner"/>.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.OnGiveFeedback1">
		<summary>
			<para> 
      Called when a drag-and-drop operation is in progress
      to provide visual cues based on the location of the mouse while a drag operation is in progress.</para>
		</summary>
		<param name="e">A <see cref="System.Windows.Forms.GiveFeedbackEventArgs"/> that provides data for the event.</param>
		<remarks>
			<para>The designer host calls this method when an OLE drag event occurs.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.OnMouseDragEnd">
		<summary>
			<para>Called at the end of a drag-and-drop operation to complete or cancel the
      operation.</para>
		</summary>
		<param name="cancel"><see langword="true"/> to cancel the drag; <see langword="false"/> to commit it. </param>
	</doc>
	<doc for="ControlDesigner.OnMouseEnter">
		<summary>
			<para>Called when the mouse first enters the control.</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.OnMouseHover">
		<summary>
			<para> Called after
      the mouse hovers over the control.</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.OnMouseLeave">
		<summary>
			<para> Called when
      the mouse first enters the control.</para>
		</summary>
	</doc>
	<doc for="ControlDesigner.AssociatedComponents">
		<summary>
			<para> Gets the collection of components associated with the component managed
      by the designer.</para>
		</summary>
		<value>
			<para>The components that are associated with the component managed by the 
      designer.</para>
		</value>
		<remarks>
			<para>This property indicates any components to copy or move along with 
      the component managed by the designer during a copy, drag or
      move operation.</para>
			<para>If this collection contains references to other components in the current 
      design mode document, those components will be copied along with the component
      managed by the designer during a copy operation.</para>
			<para>When the component managed by the designer is selected, this collection is 
      filled with any nested controls. This collection can also include other
      components, such as the buttons of a toolbar.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.accessibilityObj">
		<summary>
			<para>Specifies the accessibility object for the designer.</para>
		</summary>
		<remarks>
			<para>The default value is <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.Windows.Forms.AccessibleObject"/>
	</doc>
	<doc for="ControlDesigner.DefWndProc">
		<summary>
			<para> Provides default processing for Windows messages.</para>
		</summary>
		<param name="m">The <see cref="System.Windows.Forms.Message"/> to process.</param>
		<remarks>
			<para> This method causes the message to be processed by the control, rather than
      by the designer.</para>
		</remarks>
	</doc>
	<doc for="ControlDesignerAccessibleObject">
		<summary>
			<para>Provides an <see cref="System.Windows.Forms.AccessibleObject"/> for <see cref="System.Windows.Forms.Design.ControlDesigner"/> .</para>
		</summary>
	</doc>
	<doc for="ControlDesigner">
		<summary>
			<para> Base designer class for extending the design mode behavior of a
   <see cref="System.Windows.Forms.Control"/>
   .</para>
		</summary>
		<remarks>
			<para><see cref="System.Windows.Forms.Design.ControlDesigner"/> provides a base class for designers of components that derive from <see cref="System.Windows.Forms.Control"/>. In addition to the methods and
   functionality inherited from the <see cref="System.ComponentModel.Design.ComponentDesigner"/>
   class, <see cref="System.Windows.Forms.Design.ControlDesigner"/> provides additional methods to
   support extending and altering the behavior of an associated <see cref="System.Windows.Forms.Control"/> at
   design time.</para>
			<para>You can associate a designer with a type using a <see cref="System.ComponentModel.DesignerAttribute"/>. For an overview of customizing design
time behavior, see <see topic="cpconenhancingdesign-timesupport"/>.</para>
		</remarks>
		<example>
			<para> The following example <see cref="System.Windows.Forms.Design.ControlDesigner"/>
implementation demonstrates handling <see langword="MouseEnter"/> and
<see langword="MouseLeave"/> 
events, drawing on a control from designer code, and using part of
the <see cref="System.ComponentModel.Design.IDesignerFilter"/> interface to add a property for
the control at design time. The following sample code contains a designer and a
sample user control associated with the designer. To build this sample, compile
the sample into a class library, add a reference to the library to a Windows
Forms project, add the control to the Toolbox, and add an instance of the
control to your form. When you point to the control, the inner outline of the
perimeter of the control is highlighted, and the color used to draw the outline
corresponds to the <c>OutlineColor</c>




property that the designer has added to the properties listed for
the control.</para>
			<codelink SampleID="ControlDesignerExample" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.ComponentDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso topic="cpconenhancingdesign-timesupport"/>
		<seealso cref="System.ComponentModel.DesignerAttribute"/>
	</doc>
	<doc for="ControlDesigner.GetHitTest">
		<summary>
			<para> Indicates whether a mouse click
      at the specified point should be handled by the control.</para>
		</summary>
		<param name="point">A <see cref="System.Drawing.Point"/> indicating the position at which the mouse was clicked, in screen coordinates.</param>
		<returns>
			<para><see langword="true"/> if a click at the
   specified point
   is to be handled by the control; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Windows.Forms.Design.ControlDesigner.GetHitTest"/> 
method determines whether a click at the specified point should be passed to the control, while the
control is in design mode. You can override and implement this method to enable
your control to receive clicks in the design-time environment. </para>
			<note type="note">
   You can pass a point in
   screen coordinates to the <see cref="System.Windows.Forms.Control.PointToClient"/> method of
   the <see cref="System.Windows.Forms.Control"/> class to obtain the coordinates of the
   point relative to the upper-left corner of the control.
</note>
		</remarks>
	</doc>
	<doc for="ControlDesigner.WndProc">
		<summary>
			<para>Processes Windows messages
      and optionally routes them to the control.</para>
		</summary>
		<param name="m">The <see cref="System.Windows.Forms.Message"/>to process. </param>
		<remarks>
			<para> This method
      is called for each message the control would normally receive. This
      allows the designer to preprocess messages before optionally routing them to the control.</para>
			<para>To send the message to the control, call the <see cref="System.Windows.Forms.Control.WndProc"/> 
method of the control and pass the <see cref="System.Windows.Forms.Message"/> as a
parameter. Optionally, you can alter or create a new <see cref="System.Windows.Forms.Message"/> to
pass to the control's method.</para>
		</remarks>
	</doc>
	<doc for="ControlDesigner.PreFilterProperties">
		<summary>
			<para>Adjusts the set of properties the component exposes
      through a <see cref="System.ComponentModel.TypeDescriptor"/>
      .</para>
		</summary>
		<param name="properties">An <see cref="System.Collections.IDictionary"/> containing the properties for the class of the component. </param>
		<remarks>
			<para>This <see cref="System.ComponentModel.Design.IDesignerFilter"/> interface method override adds a 
   set of properties to this designer's component at design time. This method adds
   the following browsable properties: "Visible", "Enabled", "ContextMenu",
   "AllowDrop", "Location", "Name", "Controls", and "Locked".</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc>
	<doc for="ControlDesigner.Dispose">
		<overload>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ControlDesigner"/> and optionally releases the managed
   resources.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Windows.Forms.Design.ControlDesigner"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Windows.Forms.Design.ControlDesigner"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconcleaningupunmanagedresources "/> and <see topic="cpconoverridingfinalizemethod "/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ControlDesigner.OnMouseDragBegin">
		<summary>
			<para>Called in response to the left mouse button being pressed and held while
      over the component.</para>
		</summary>
		<param name="x">The x position of the mouse in screen coordinates. </param>
		<param name="y">The y position of the mouse in screen coordinates. </param>
		<remarks>
			<para>This method is called at the start of a drag-and-drop operation.</para>
			<note type="note">
      You can pass a point in screen coordinates to the
   <see cref="System.Windows.Forms.Control.PointToClient"/> method of the <see cref="System.Windows.Forms.Control"/> class to obtain the coordinates of the 
      point relative to the upper-left corner of the control.
   </note>
		</remarks>
	</doc>
	<doc for="ControlDesigner.OnMouseDragMove">
		<summary>
			<para>Called for each movement of the mouse during a drag-and-drop operation.</para>
		</summary>
		<param name="x">The x position of the mouse in screen coordinates. </param>
		<param name="y">The y position of the mouse in screen coordinates. </param>
		<remarks>
			<note type="note">
      You can pass a point in screen coordinates to the
   <see cref="System.Windows.Forms.Control.PointToClient"/> method of the <see cref="System.Windows.Forms.Control"/> class to obtain the coordinates of the 
      point relative to the upper-left corner of the control.
   </note>
		</remarks>
	</doc>
</docs>
