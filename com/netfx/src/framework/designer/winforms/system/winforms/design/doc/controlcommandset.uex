<docs>
   <doc for="ControlCommandSet">
 <summary>
      This class implements menu commands that are specific to designers that
      manipulate controls.
 </summary>
   </doc>
   <doc for="ControlCommandSet.ControlCommandSet">
 <summary>
     Creates a new CommandSet object.  This object implements the set
     of commands that the UI.Win32 form designer offers.
 </summary>
   </doc>
   <doc for="ControlCommandSet.Dispose">
 <summary>
     Disposes of this object, removing all commands from the menu service.
 </summary>
   </doc>
   <doc for="ControlCommandSet.GetCopySelection">
 <summary>
     Used to retrieve the selection for a copy.  The default implementation
     retrieves the current selection.
 </summary>
 <returns>
     An array of objects that should be part of the copy.
 </returns>
   </doc>
   <doc for="ControlCommandSet.GetSnapInformation">
 <summary>
      Retrieves the snap information for the given component.  
 </summary>
   </doc>
   <doc for="ControlCommandSet.OnKeyCancel">
 <summary>
     Called for the two cancel commands we support.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnKeySize">
 <summary>
     Called for the various sizing commands we support.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnKeySelect">
 <summary>
     Called for selection via the tab key.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnMenuLockControls">
 <summary>
     Called when the lock controls menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnMenuNever">
 <summary>
     This should never be called.  It is a placeholder for
     menu items that we temporarially want to disable.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnMenuTabOrder">
 <summary>
     Called to display or destroy the tab order UI.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnMenuZOrderSelection">
 <summary>
     Called when the zorder->send to back menu item is selected.
 </summary>
 <param name='sender'>
     The MenuCommand object sending the event.
 </param>
 <param name='e'>
     The event that was sent.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnStatusAnyControls">
 <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when there is one or more controls on the design
     surface.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnStatusMultiSelect">
 <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when more than one object is selected.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnStatusMultiSelectPrimary">
 <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when more than one object is selected and one
     of them is marked as the primary selection.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnStatusShowGrid">
 <summary>
     Determines the status of a menu command.  This event handler is
     dedicated to the ShowGrid item.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnStatusSnapToGrid">
 <summary>
     Determines the status of a menu command.  This event handler is
     dedicated to the SnapToGrid item.
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnStatusZOrder">
 <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled for zordering.  The rules are:

      1) More than one component on the form
      2) At least one Control-derived compoent must be selected
      3) The form must not be selected
 </summary>
 <param name='sender'>
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
 <param name='e'>
     Event.  This is not used.
 </param>
   </doc>
   <doc for="ControlCommandSet.OnUpdateCommandStatus">
 <summary>
      This is called when the selection has changed.  Anyone using CommandSetItems
      that need to update their status based on selection changes should override
      this and update their own commands at this time.  The base implementaion
      runs through all base commands and calls UpdateStatus on them.
 </summary>
   </doc>
   <doc for="ControlCommandSet.RotateParentSelection">
 <summary>
     Rotates the selection to the next parent element.  If backwards is
     set, this will rotate to the first child element.
 </summary>
 <param name='backwards'>
     Determines the direction of the selection rotation.
 </param>
   </doc>
   <doc for="ControlCommandSet.RotateTabSelection">
 <summary>
     Rotates the selection to the element next in the tab index.  If backwards
     is set, this will rotate to the previous tab index.
 </summary>
 <param name='backwards'>
     Determines the direction of the selection rotation.
 </param>
   </doc>
   <doc for="ControlCommandSet.ControlComparer">
 <summary>
    <para>Compares two controls for equality.</para>
 </summary>
   </doc>
   <doc for="ControlCommandSet.ControlComparer.Compare">
 <summary>
    <para>Compares two controls for equality.</para>
 </summary>
 <param name='x'>The first object to compare.</param>
 <param name=' y'>The second object to compare.</param>
   </doc>
</docs>

