<docs>
   <doc for="TabOrder">
 <summary>
    <para>Provides UI functionality for tab order for our form designer.</para>
 </summary>
 <remarks>
 <para><see cref='System.Windows.Forms.Design.TabOrder'/> handles displaying the UI for the tab order for a form.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.TabOrder">
 <summary>
 <para>Initializes a new instance of the <see cref='System.Windows.Forms.Design.TabOrder'/> class using
    the specified designer host.</para>
 </summary>
 <param name='host'> The designer host.</param>
 <remarks>
    <para>This class displays the tab order UI for a form.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.Dispose">
 <summary>
    <para>Disposes of the resources (other than memory) used by 
       the <see cref='System.Windows.Forms.Design.TabOrder'/> .</para>
 </summary>
 <remarks>
 <para>Call <see cref='System.Windows.Forms.Design.TabOrder.Dispose'/> when you are finished using the 
 <see cref='System.Windows.Forms.Design.TabOrder'/>. The <see cref='System.Windows.Forms.Design.TabOrder.Dispose'/> method leaves 
    the <see cref='System.Windows.Forms.Design.TabOrder'/> in an unusable state. After calling
 <see cref='System.Windows.Forms.Design.TabOrder.Dispose'/>, you must release all 
    references to the <see cref='System.Windows.Forms.Design.TabOrder'/> so the memory it was occupying can be
    reclaimed by garbage collection. </para>
 <note type="note">
    Always call <see cref='System.Windows.Forms.Design.TabOrder.Dispose'/> before you release your last
    reference to the <see cref='System.Windows.Forms.Design.TabOrder'/>. Otherwise, the resources the <see cref='System.Windows.Forms.Design.TabOrder'/> is using will not be freed until garbage
    collection calls the <see cref='System.Windows.Forms.Design.TabOrder'/> object's destructor.
 </note>
 </remarks>
   </doc>
   <doc for="TabOrder.DrawTabs">
 <summary>
     this function does double duty:  it draws the tabs if fRegion is false, or it
     computes control region rects if fRegion is true (both require that we essentially
     "draw" the tabs)
 </summary>
   </doc>
   <doc for="TabOrder.GetControlAtPoint">
 <summary>
     returns a control in the given tab vector that is at the given point, in
     screen coords.
 </summary>
   </doc>
   <doc for="TabOrder.GetConvertedBounds">
 <summary>
     returns a rectangle in our own client space that represents the bounds
     if the given control
 </summary>
   </doc>
   <doc for="TabOrder.GetMaxControlCount">
 <summary>
     returns the maximum valid control count for the given control.  This
     may be less than Control.getControlCount() because of invisible controls
     and our own control
 </summary>
   </doc>
   <doc for="TabOrder.GetSitedParent">
 <summary>
     Retrieves the next parent control that would be usable
     by the tab order UI.  We only want parents that are
     sited by the designer host.
 </summary>
 <param name='child'>
     The control to get the parent of.
 </param>
 <returns>
     the next sited parent, or null if there
     is no parent.
 </returns>
   </doc>
   <doc for="TabOrder.GetTabbing">
 <summary>
     recursively fills the given tab vector with a control list
 </summary>
   </doc>
   <doc for="TabOrder.GetTabbable">
 <summary>
     returns true if this component should show up in our tab list
 </summary>
   </doc>
   <doc for="TabOrder.OnComponentAddRemove">
 <summary>
     Called in response to a component add or remove event.  Here we re-aquire our
     set of tabs.
 </summary>
 <param name='sender'>
     The menu command sending this event.
 </param>
 <param name='ce'>
     ComponentEventArgs that contains additional information.
 </param>
   </doc>
   <doc for="TabOrder.OnComponentChanged">
 <summary>
      Called in response to a component change event.  Here we update our
      tab order and redraw.
 </summary>
 <param name='sender'>
     The menu command sending this event.
 </param>
 <param name='ce'>
     Event containing information about the change.
 </param>
   </doc>
   <doc for="TabOrder.OnKeyCancel">
 <summary>
      Closes the tab order UI.
 </summary>
 <param name='sender'>
     The menu command sending this event.
 </param>
 <param name='e'>
     Empty event.
 </param>
   </doc>
   <doc for="TabOrder.OnKeyDefault">
 <summary>
      Sets the current tab order selection.
 </summary>
 <param name='sender'>
     The menu command sending this event.
 </param>
 <param name='e'>
     Empty event.
 </param>
   </doc>
   <doc for="TabOrder.OnKeyNext">
 <summary>
      Selects the next component in the tab order.
 </summary>
 <param name='sender'>
     The menu command sending this event.
 </param>
 <param name='e'>
     Empty event.
 </param>
   </doc>
   <doc for="TabOrder.OnKeyPrevious">
 <summary>
      Selects the previous component in the tab order.
 </summary>
 <param name='sender'>
     The menu command sending this event.
 </param>
 <param name='e'>
     Empty event.
 </param>
   </doc>
   <doc for="TabOrder.OnMouseDoubleClick">
 <summary>
    <para> Handlers the MouseDoubleClick event.</para>
 </summary>
 <param name='component'>The component that recieved the double click.</param>
 <remarks>
    <para>The MouseDoubleClick event is called when the user double clicks on a 
       component. The typical behavior is to create an event handler for the
       component's default event and navigate to the handler.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IMouseHandler'/>
   </doc>
   <doc for="TabOrder.OnMouseDown">
 <overload>
    <para>Handles the MouseDown event using the specified mouse down coordinates.</para>
 </overload>
 <summary>
    <para> Handles the MouseDown event using the specified mouse down coordinates.</para>
 </summary>
 <param name='component'>The component that the mouse was over when the user pressed the button down.</param>
 <param name='button'>The button that was pressed.</param>
 <param name='x'>The location of the mouse, in screen coordinates.</param>
 <param name='y'>The location of the mouse, in screen coordinates.</param>
 <remarks>
    <para>The MouseDown event is called when a mouse button is depressed. By default, MouseDown will perform the 
       default drag action for the selected components, which is to move those
       components around by the mouse.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IMouseHandler'/>
   </doc>
   <doc for="TabOrder.OnMouseDown1">
 <summary>
    <para> 
       Overrides
       the OnMouseDown method
       from Control.</para>
 </summary>
 <param name='e'>An EventArgs the provides data for the event.</param>
 <remarks>
    <para>This method sets the tab index. This method also calls the base class OnMouseDown method 
       to take into account clicks in the tab index numbers.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.OnMouseHover">
 <summary>
    <para>Handles the MouseHover event.</para>
 </summary>
 <param name='component'>The component the mouse is hovering over.</param>
 <remarks>
    <para>This method is called when the mouse momentarially hovers over the view for 
       the specified component.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IMouseHandler'/>
   </doc>
   <doc for="TabOrder.OnMouseMove">
 <overload>
    <para>Handles the MouseMove event.</para>
 </overload>
 <summary>
    <para> Handles the MouseMove event.</para>
 </summary>
 <param name='component'>The component the mouse is over.</param>
 <param name='x'>The location of the mouse, in screen coordinates.</param>
 <param name='y'>The location of the mouse, in screen coordinates.</param>
 <seealso cref='System.Windows.Forms.Design.IMouseHandler'/>
   </doc>
   <doc for="TabOrder.OnMouseMove1">
 <summary>
    <para>Overrides the OnMouseMove method from Control.</para>
 </summary>
 <param name='e'>The mouse event.</param>
 <remarks>
    <para>This method updates the mouse cursor. This must also be done 
       in OnSetCursor to take into account mouse movements over the tab index
       numbers.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.OnMouseUp">
 <summary>
    <para> 
       Handles the MouseUp event.</para>
 </summary>
 <param name='component'>The component that recieved the click.</param>
 <param name='button'>The button that has been released.</param>
 <remarks>
    <para>This method is called when the user releases the mouse from a component. This method ill 
       update the UI to reflect the release of the mouse.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IMouseHandler'/>
   </doc>
   <doc for="TabOrder.OnSetCursor">
 <summary>
    <para>Handles the SetCursor event.</para>
 </summary>
 <param name='component'>The component to update the cursor for.</param>
 <remarks>
    <para>This method is called when the cursor for the specified component 
       should be updated. The mouse is always over the specified component's view
       when this is called.</para>
 </remarks>
 <seealso cref='System.Windows.Forms.Design.IMouseHandler'/>
   </doc>
   <doc for="TabOrder.OnPaint">
 <summary>
    <para>Handles the Paint event.</para>
 </summary>
 <param name='e'>An EventArgs that provides data for the event.</param>
 <remarks>
    <para>This method paints the tab control.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.OverrideInvoke">
 <summary>
    <para> Indicates whether to override
       the invocation of the specified command, depending on the result of
       this handler.</para>
 </summary>
 <param name='cmd'>The menu command to override the invokation for.</param>
 <returns>
 <para><see langword='true'/> if the handler overrode the 
    invocation of the command; otherwise, <see langword='false'/>
    .</para>
 </returns>
 <remarks>
    <para>CommandSet will check with this handler on each status update to see if the 
       handler wants to override the availability of this command.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.OverrideStatus">
 <summary>
    <para> Indicates whether to override the invocation of the 
       specified command, depending on the result of this handler.</para>
 </summary>
 <param name='cmd'>The menu command to override the status for.</param>
 <returns>
 <para><see langword='true'/> if the handler overrode the status 
    on the command; otherwise, <see langword='false'/>
    .</para>
 </returns>
 <remarks>
    <para>CommandSet will check with this handler on each status update to see if the 
       handler wants to override the availability of this command.</para>
 </remarks>
   </doc>
   <doc for="TabOrder.RotateControls">
 <summary>
     Called when the keyboard has been pressed to rotate us
     through the control list.
 </summary>
   </doc>
   <doc for="TabOrder.SetNewHover">
 <summary>
     Establishes a new hover control.
 </summary>
 <param name='ctl'>
     The new hover control, or null if no control has hover.
 </param>
   </doc>
   <doc for="TabOrder.SetNextTabIndex">
 <summary>
     sets up the next tab index for the given control
 </summary>
   </doc>
</docs>

