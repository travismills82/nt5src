<docs>
	<doc for="DataSourceConverter.DataSourceConverter">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Web.UI.Design.DataSourceConverter"/> class.
 </para>
		</summary>
	</doc><doc for="DataSourceConverter.GetStandardValuesSupported">
		<overload>
			<para> Gets a value indicating whether the converter supports a standard set of values
      that can be picked from a list.
      </para>
		</overload>
		<summary>
			<para> Gets a value indicating whether the converter supports a standard set of values
      that can be picked from a list.
      </para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
		<returns>
			<para><see langword="true"/> if <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> should be
   called to find a common set of values the object supports; otherwise,
<see langword="false"/>. This implementation always 
   returns <see langword="true"/>.
   </para>
		</returns>
	</doc>
	<doc for="DataSourceConverter.CanConvertFrom">
		<overload>
			<para>Gets a value indicating whether the converter can convert an object of the 
      specified source type to the native type of the converter. </para>
		</overload>
		<summary>
			<para> Gets a value
      indicating whether the converter can convert an object of the specified source type to the native type
      of the converter.
      </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from. </param>
		<returns>
			<para><see langword="true "/>if the converter can perform the conversion; otherwise,
<see langword="false"/>.
   </para>
			<para> As implemented in this class, this method
   always returns <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      Override this method to provide your own conversion
      requirements.
      
   </note>
			<para> The <paramref name="context "/>can be used to extract additional
   information about the environment this converter is being invoked from. This may
   be <see langword="null"/>, so you should always check. Also, properties on the
   context object may also return <see langword="null"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataSourceConverter.ConvertFrom">
		<overload>
			<para>Converts the specified object to the native type of the converter. </para>
		</overload>
		<summary>
			<para> Converts the specified object to the native type of the converter.
      </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<param name="culture"><para>The <see cref="System.Globalization.CultureInfo"/> that can be used to support localization features.</para></param>
		<param name="value">The <see cref="System.Object"/> to convert. </param>
		<returns>
			<para> An <see cref="System.Object"/> that represents
   the specified object after conversion.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion could not be performed. </exception>
		<remarks>
			<note type="inheritinfo">
      Override this
      method to meet your own conversion requirements.
      
   </note>
			<para> The <paramref name="context "/>parameter can be used to extract additional information about the
   environment the converter is being invoked from. It might be
<see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataSourceConverter.GetStandardValues">
		<overload>
			<para>Gets the standard data sources accessible to the control. </para>
		</overload>
		<summary>
			<para> Gets the standard data sources accessible to the control.
      </para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> indicating the component or control to get values for. </param>
		<returns>
			<para> A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
listing the standard accessible data sources.</para>
		</returns>
		<remarks>
			<para>The data sources accessible to the component are determined by retrieving a
      list of components from the designer and testing each for an implementation of
      either <see cref="System.Collections.IEnumerable"/> or <see cref="System.ComponentModel.IListSource"/> to determine which
      should be added to the list of data sources.</para>
		</remarks>
	</doc>
	<doc for="DataSourceConverter.GetStandardValuesExclusive">
		<overload>
			<para>Gets a value indicating whether the collection of standard values returned 
      from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is a list of all possible
      values. </para>
		</overload>
		<summary>
			<para> Gets a value indicating whether the collection of standard values returned from
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
   is a list of all possible values.
   </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<returns>
			<para><see langword="true "/>if the
<see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
returned from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of all
possible values; <see langword="false "/>if other values
are possible.</para>
			<para> As implemented in this class, this method always returns
<see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> If the list is exclusive, such as in an enumeration data type, then
      no other values are valid. If the list is not exclusive, then there are other
      valid values besides the list of standard values that <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> provides.
      </para>
			<note type="inheritinfo">
      Override this method
      if the type you want to convert supports standard values.
      
   </note>
			<para> The <paramref name="context "/> parameter can be used to extract additional information about
   the environment this converter is being invoked from. It might be
<see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataSourceConverter">
		<summary>
			<para> Provides a type
      converter that can retrieve a list of data sources accessible to the current
      component.</para>
		</summary>
		<remarks>
			<para><see cref="System.Web.UI.Design.DataSourceConverter"/> provides
   methods that can be used to retrieve a list of data sources accessible to the current
   design-time component.</para>
			<para>This type converter is used by Visual Studio .NET to provide the values that
   appear in the list of data sources in the Properties window.</para>
			<note type="caution">
   You should never access a type
   converter directly. Instead, call the appropriate converter by using <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="DataSourceTypeConverterExamples" SnippetID="4"/>
		</example>
	</doc>
</docs>
