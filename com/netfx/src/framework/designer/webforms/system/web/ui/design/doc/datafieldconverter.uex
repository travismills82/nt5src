<docs>
	<doc for="DataFieldConverter.DataFieldConverter">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Web.UI.Design.DataFieldConverter"/> class.
 </para>
		</summary>
	</doc>
	<doc for="DataFieldConverter.GetStandardValuesSupported">
		<overload>
			<para> Gets a value indicating whether the converter supports a standard set of values
 that can be picked from a list.
 </para>
		</overload>
		<summary>
			<para> Gets a value indicating whether the converter supports a standard set of values
 that can be picked from a list.
 </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</para></param>
		<returns>
			<para><see langword="true"/> if <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> can be
 called to find a common set of values the object supports; otherwise,
<see langword="false"/>.
 </para>
		</returns>
	</doc>
	<doc for="DataFieldConverter.ConvertFrom">
		<overload>
			<para>Converts the specified object to the native type of the converter.</para>
		</overload>
		<summary>
			<para>Converts the specified object to the native type of the converter.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<param name=" culture">A <see cref="System.Globalization.CultureInfo"/> that can be used to support localization features.</param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents
   the specified
   object after conversion.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion cannot be performed.</exception>
		<remarks>
			<note type="inheritinfo">
      Override this
      method to meet your own conversion requirements.
      
   </note>
			<para>The <paramref name="context"/> parameter can be used to extract additional information about
   the environment the converter is being invoked from. It might be
<see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataFieldConverter.CanConvertFrom">
		<overload>
			<para>Gets a value indicating whether the converter can convert an object of the 
      specified source type to the native type of the converter. </para>
		</overload>
		<summary>
			<para> Gets a value
      indicating whether the converter can convert an object of the specified source type to the native type
      of the converter.
      </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from. </param>
		<returns>
			<para><see langword="true "/>if the converter can perform the conversion; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para> This method returns <see langword="true"/> if the source type is a string. Otherwise, this
   method always returns <see langword="false"/>.</para>
			<note type="inheritinfo">
   Override this method to meet your own conversion
   requirements.
   
</note>
			<para> The <paramref name="context"/> parameter<paramref name=" "/>can be used to
extract additional information about the environment the converter is being invoked from. It
might be <see langword="null"/>, so you should always check. Also, properties of the
context object may also return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataFieldConverter.GetStandardValues">
		<overload>
			<para>Gets the data fields present within the selected data source if information 
      about them is available. </para>
		</overload>
		<summary>
			<para> Gets the data fields present within the selected data source if information about them is available.
      </para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> indicating the component or control to get values for. </param>
		<returns>
			<para> A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
listing the standard accessible data sources.</para>
			<para>A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
listing the data fields from the
data source selected for the component. This method uses the <see cref="System.Web.UI.Design.IDataSourceProvider"/> implementation on the component's designer
to retrieve the selected data source.</para>
		</returns>
	</doc>
	<doc for="DataFieldConverter.GetStandardValuesExclusive">
		<overload>
			<para>Gets a value indicating whether the collection of standard values returned 
      from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is a list of all possible
      values. </para>
		</overload>
		<summary>
			<para> Gets a value indicating whether the collection of standard values returned from
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
   is a list of all possible values.
   </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<returns>
			<para><see langword="true "/>if the
<see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
returned from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an all exclusive list of all
possible values; <see langword="false "/>if other values are possible. </para>
			<para>As implemented in this class, this method always returns
<see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> If the list is exclusive, such as in an enumeration data type, then
      no other values are valid. If the list is not exclusive, then there are other
      valid values besides the list of standard values that <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> provides.
      </para>
			<note type="inheritinfo">
      Override this method
      if the type you want to convert supports standard values.
      
   </note>
			<para> The <paramref name="context"/> parameter can be used to extract additional information about the
   environment the converter is being invoked from. It might be
<see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataFieldConverter">
		<summary>
			<para> Provides a type converter that can retrieve a list of data
      fields from the current component's selected data source.</para>
		</summary>
		<remarks>
			<para><see cref="System.Web.UI.Design.DataFieldConverter"/> can retrieve a
   list of data fields from the current data source of a
   design-time component.
   </para>
			<para>This type converter is used by Visual Studio .NET to provide the values that
   appear in the list of data fields in the Properties window.</para>
			<note type="caution">
   You should never access a type
   converter directly. Instead, call the appropriate converter by using <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
   
</note>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="DataSourceTypeConverterExamples" SnippetID="3"/>
		</example>
	</doc>
</docs>
