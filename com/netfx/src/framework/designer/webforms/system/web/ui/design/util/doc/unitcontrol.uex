<docs>
   <doc for="UnitControl">
 <summary>
     UnitControl
     Provides a UI to edit a unit, i.e., its value and type.
     Additionally allows placing restrictions on the types of units that
     that can be entered.
 </summary>
   </doc>
   <doc for="UnitControl.UnitControl">
 <summary>
     Createa a new UnitControl.
 </summary>
   </doc>
   <doc for="UnitControl.AllowNegativeValues">
 <summary>
     Controls whether the unit value can be negative
 </summary>
   </doc>
   <doc for="UnitControl.AllowNonUnitValues">
 <summary>
     Controls whether the unit value can be a unit-less
 </summary>
   </doc>
   <doc for="UnitControl.AllowPercentValues">
 <summary>
     Controls whether the unit value can be a percent value
 </summary>
   </doc>
   <doc for="UnitControl.DefaultUnit">
 <summary>
     The default unit to be used
 </summary>
   </doc>
   <doc for="UnitControl.Value">
 <summary>
     The unit reflecting the value and unit type within the UI.
     Returns null if no unit is selected.
 </summary>
   </doc>
   <doc for="UnitControl.GetValidatedValue">
 <summary>
 </summary>
   </doc>
   <doc for="UnitControl.InitControl">
 <summary>
     Create the contained controls and initialize their settings
 </summary>
   </doc>
   <doc for="UnitControl.InitUI">
 <summary>
     Initialize the controls to their default state
 </summary>
   </doc>
   <doc for="UnitControl.OnChanged">
 <summary>
     Fires the "changed" event.
 </summary>
   </doc>
   <doc for="UnitControl.OnValueTextChanged">
 <summary>
     Handles changes in the value edit control.
     If there is no unit selected, and a value is entered, the default unit is
     selected.  If the value is cleared, the unit is also deselected.
 </summary>
   </doc>
   <doc for="UnitControl.OnUnitSelectedIndexChanged">
 <summary>
     Handles the event when the unit combobox selection changes.
     Fires a changed event.
 </summary>
   </doc>
</docs>

