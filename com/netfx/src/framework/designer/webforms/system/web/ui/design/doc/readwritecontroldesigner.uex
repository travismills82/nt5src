<docs>
	<doc for="ReadWriteControlDesigner.ReadWriteControlDesigner">
		<summary>
			<para>
       Initializes an instance of the <see cref="System.Web.UI.Design.ReadWriteControlDesigner"/> class.
    </para>
		</summary>
	</doc>
	<doc for="ReadWriteControlDesigner.OnControlResize">
		<summary>
			<para> 
       Provides notification from the identity behavior upon resizing a control in the designer.</para>
		</summary>
		<remarks>
			<para>This is not called upon changing the control, which extends through the 
       property grid/page.</para>
		</remarks>
	</doc>
	<doc for="ReadWriteControlDesigner.OnComponentChanged">
		<summary>
			<para>Represents the method that will handle the
   <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event
      of the <see cref="System.ComponentModel.Design.IComponentChangeService"/>.</para>
		</summary>
		<param name="sender">The object sending the event.</param>
		<param name="ce">The <see cref="System.ComponentModel.Design.ComponentChangedEventArgs"/> that provides data for the event.</param>
		<remarks>
			<para>The <see cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/> event occurs after a property has been changed. This method allows implementers
   to do any processing that may be needed after a property change.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"/>
	</doc><doc for="ReadWriteControlDesigner.OnBehaviorAttached">
		<summary>
			<para> Provides notification that is raised when a behavior is attached to
      the designer.</para>
		</summary>
	</doc><doc for="ReadWriteControlDesigner.MapPropertyToStyle">
		<summary>
			<para>Maps a property, including description and value, to an intrinsic HTML style.</para>
		</summary>
		<param name="propName">The name of the property to map.</param>
		<param name="varPropValue">The value of the property.</param>
		<returns>
			<note type="inheritinfo">
      This method
      must be overridden in
      a derived class to implement the designer.
      
   </note>
		</returns>
	</doc>
	<doc for="ReadWriteControlDesigner">
		<summary>
			<para> Extends design-time behavior for read/write server controls.</para>
		</summary>
		<remarks>
			<para>This control designer provides the ability to drop controls onto the control
      for this designer.</para>
			<note type="inotes">
      Implementors of
      designers who would like their control to support adding child controls to it
      should use <see cref="System.Web.UI.Design.ReadWriteControlDesigner"/>. If you do not want your control to
      support child controls, use a designer derived from <see cref="System.Web.UI.Design.ControlDesigner"/>.
      
   </note>
		</remarks>
	</doc>
</docs>
