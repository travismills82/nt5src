<docs>
	<doc for="DataMemberConverter.DataMemberConverter">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Web.UI.Design.DataFieldConverter"/> class.
 </para>
		</summary>
	</doc><doc for="DataMemberConverter.GetStandardValuesSupported">
		<overload>
			<para> Gets a value indicating whether the converter supports a standard set of values
      that can be picked from a list.
      </para>
		</overload>
		<summary>
			<para> Gets a value indicating whether the converter supports a standard set of values
      that can be picked from a list.
      </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<returns>
			<para><see langword="true"/> if <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> should be
   called to find a common set of values the object supports; otherwise,
<see langword="false"/>. This implementation always returns 
<see langword="true"/>.
   </para>
		</returns>
	</doc>
	<doc for="DataMemberConverter.CanConvertFrom">
		<overload>
			<para>Gets a value indicating whether the converter can convert an object of the 
      specified source type to the native type of the converter. </para>
		</overload>
		<summary>
			<para> Gets a value indicating
      whether the converter can convert an object of the specified source type to the native type
      of the converter.
      </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<param name="sourceType">A <see cref="System.Type"/> that represents the type you wish to convert from. </param>
		<returns>
			<para><see langword="true "/>if the converter can perform the conversion; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      Override this method to meet your own conversion
      requirements.
      
   </note>
			<para> The <paramref name="context"/> parameter can be used to extract additional
   information about the environment the converter is being invoked from. It might
   be <see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataMemberConverter.ConvertFrom">
		<overload>
			<para>Converts the specified object to the native type of the converter.</para>
		</overload>
		<summary>
			<para>Converts the specified object to the native type of the converter.</para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </para></param>
		<param name=" culture">A <see cref="System.Globalization.CultureInfo"/> that can be used to support localization features.</param>
		<param name="value">The <see cref="System.Object"/> to convert.</param>
		<returns>
			<para>An <see cref="System.Object"/> that represents the specified
   object after conversion.</para>
		</returns>
		<exception cref="System.NotSupportedException">The conversion cannot be performed.</exception>
		<remarks>
			<note type="inheritinfo">
      Override this
      method to meet your own conversion requirements.
      
   </note>
			<para>The <paramref name="context"/> parameter can be used to extract additional information about the
   environment the converter is being invoked from. It might be
<see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataMemberConverter.GetStandardValues">
		<overload>
			<para>Gets the data members present within the selected data source, if information 
      about them is available. </para>
		</overload>
		<summary>
			<para> Gets the data members present within the selected data source, if information about them is available.
      </para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> indicating the component or control to get values for. </param>
		<returns>
			<para> A <see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
listing the data members of the data source selected for the component. The
converter uses the <see cref="System.Web.UI.Design.IDataSourceProvider"/> implementation of the
associated component's designer to
retrieve the current data source selection.</para>
		</returns>
	</doc>
	<doc for="DataMemberConverter.GetStandardValuesExclusive">
		<overload>
			<para>Gets a value indicating whether the collection of standard values returned 
      from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is a list of all possible
      values. </para>
		</overload>
		<summary>
			<para> Gets a value indicating whether the collection of standard values returned from
   <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/>
   is a list of all possible values.
   </para>
		</summary>
		<param name="context"><para>An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </para></param>
		<returns>
			<para><see langword="true "/>if the
<see cref="System.ComponentModel.TypeConverter.StandardValuesCollection"/>
returned from <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of
possible values; <see langword="false "/>if other values are
possible.</para>
			<para> As implemented in this class, this method always returns
<see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> If the list is exclusive, such as in an enumeration data type, then
      no other values are valid. If the list is not exclusive, then there are other
      valid values besides the list of standard values that <see cref="System.ComponentModel.TypeConverter.GetStandardValues"/> provides.
      </para>
			<note type="inheritinfo">
      Override this method
      if the type you want to convert supports standard values.
      
   </note>
			<para> The <paramref name="context"/> parameter can be used to extract additional information about the
   environment this converter is being invoked from. It might be
<see langword="null"/>, so you should always check. Also, properties of the
   context object may also return <see langword="null"/>.
   </para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc>
	<doc for="DataMemberConverter">
		<summary>
			<para> Provides a type converter that can retrieve a
      list of data members from the current component's selected data
      source.</para>
		</summary>
		<remarks>
			<para><see cref="System.Web.UI.Design.DataMemberConverter"/> provides
   methods that can retrieve a list of data members from the
   current data source of a design-time
   component.</para>
			<para> This type converter is used by Visual Studio .NET to provide the values that appear in
   the list of data members in the Properties window.</para>
			<note type="caution">
   You should never access a type
   converter directly. Instead, call the appropriate converter by using <see cref="System.ComponentModel.TypeDescriptor"/>. For more information, see the examples
   in the <see cref="System.ComponentModel.TypeConverter"/> base class.
</note>
			<para>For more information about type converters, see the <see cref="System.ComponentModel.TypeConverter"/> base class and
<see topic="cpconImplementingTypeConverter"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="DataSourceTypeConverterExamples" SnippetID="2"/>
		</example>
	</doc>
</docs>
