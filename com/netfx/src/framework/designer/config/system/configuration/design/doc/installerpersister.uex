<docs>
   <doc for="InstallerPersister">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="InstallerPersister.AppendInitMethodStatements">
 <summary>
     Generic hook for subclasses to append methods into the initMethod
     function. You must call the base.AppendInitMethodStatements.
 </summary>
 <param name='initForm'>
     method being generated
 </param>
 <param name='statements'>
     List of statements that will be added to the
     method.
 </param>
   </doc>
   <doc for="InstallerPersister.GenerateComponentParenting">
 <summary>
    Generates any parenting statemetns for the given control
 </summary>
 <param name='statements'>
 </param>
 <param name='objectName'>
     Name of the control
 </param>
 <param name='component'>
     Instance of the component
 </param>
   </doc>
   <doc for="InstallerPersister.ParseInitMethodMethod">
 <summary>
     Looks for the Add method and parses it.
 </summary>
 <param name='methodInvoke'>
     method to parse.
 </param>
   </doc>
   <doc for="InstallerPersister.ParseAdd">
 <summary>
     Parses the Add method... only works for installers
     The statement looks like this: installer1.Installers.Add(nestedInstaller);
 </summary>
 <param name='target'>
     Name of the installer and properties on it ({"installer1", "Installers"} in the example above)
 </param>
 <param name='value'>
     value/expression to add (nestedInstaller in the example above)
 </param>
   </doc>
</docs>

