<docs>
   <doc for="ManagedPropertiesService">
 <summary>
      This is the value provider for managed properties.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.ManagedPropertiesService">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.ManagedPropertiesService1">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.Bindings">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.LocalVariableDeclaration">
 <summary>
     If this value provider requires that a local variable is
     declared then this must return a non-null ICodeStatement.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.BeginDepersist">
 <summary>
     Called by the code generator when before any statements in the
     code are parsed. This allows the provider to clear any previous
     state.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.BeginPersist">
 <summary>
     Called by the code generator when before any statements in the
     code are generated. This allows the provider to clear any previous
     state.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.CanExtend">
 <summary>
 IExtenderProvider implementation
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.CanProvideValue">
 <summary>
     Called for every expression found in the code. If the
     IValueProvider returns true, then the ProvideValue method
     will be called.
     
     Looks at an expression to see if it matches something like
        component.Property = store.GetXXX(key);  XXX = Primitive Short Name
 </summary>
 <param name='components'>
 </param>
 <param name='propertyName'>
 </param>
 <param name='exp'>
     The expression to determine if this value provider can
     provide a value for.
 </param>
   </doc>
   <doc for="ManagedPropertiesService.MakeDirty">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.EndDepersist">
 <summary>
     Called by the code generator after all statements have been
     parsed.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.EndPersist">
 <summary>
     Called by the code generator after all statements have been
     generated.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.GetContainerMethodForType">
 <summary>
 Returns a the name of the method to invoke on SettingContainer that returns
 the given type. Works on the assumption that it's a System type and that
 the method for Xxx is GetXxx. System.Int32 -> GetInt32 and so on.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.GetExpressionLevel">
 <summary>
     Determines the level of support for generating an expression
     for the specified property on the specified object. If a value
     provider returns anything but ValueExpressionLevel.NotSupported
     then it must return a non-null value from ProvideExpression.
 </summary>
 <param name='component'>
     The component whose property is being persisted.
 </param>
 <param name='property'>
     The PropertyDescriptor for the property that is being persisted.
 </param>
 <param name='persistable'>
 </param>
   </doc>
   <doc for="ManagedPropertiesService.GetKeysForType">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.GetRequireComponents">
 <summary>
     Specifies a list of components that are required to be initialized before
     this value provider can provide values. Basically this allows a value provider
     to force the component that is actually providing the values to be code gen'd
     before the calls to it.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.GetConfiguredProperties">
 <summary>
 Implementation of the (ConfigurableProperties) property extended onto all components
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.IsLocalVariableDeclaration">
 <summary>
    <para>Indicates whether the specified statement is the local variable declaration for this value provider.</para>
 </summary>
 <param name='stmt'>The statement to check.</param>
 <returns>
 <para><see langword='true'/> if the specified statement is the local variable declaration 
    for this value provider, otherwise <see langword='false'/>.</para>
 </returns>
   </doc>
   <doc for="ManagedPropertiesService.EnsureKey">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.OnComponentRename">
 <summary>
     Called when the designer host fires the OnComponentRename event.
 </summary>
   </doc>
   <doc for="ManagedPropertiesService.ProvideExpression">
 <summary>
     Creates a new expression that represents the property value for the
     specified component.
 </summary>
 <param name='component'>
     The component whose property is being persisted.
 </param>
 <param name='propertyName'>
     The property that is being persisted.
 </param>
 <param name='value'>
     The value of the property that is being persisted.
 </param>
   </doc>
   <doc for="ManagedPropertiesService.ProvideValue">
 <summary>
     Retrieves the value that the code expression represents.
 </summary>
 <param name='comp'>
     The component whose property is being depersisted.
 </param>
 <param name='propertyName'>
     The property that is being depersisted.
 </param>
 <param name='exp'>
     The expression for the property that is being depersisted.
 </param>
   </doc>
   <doc for="ManagedPropertiesService.RemoveService">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
</docs>

