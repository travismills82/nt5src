<docs>
	<doc for="CodeDomSerializer.DeserializeAssignStatement">
		<summary>
     Deserializes an assign statement by performing the assignment.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.DeserializeAttachEventStatement">
		<summary>
     Deserializes the event attachment by setting the event value throught IEventBindingService.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.DeserializeDetachEventStatement">
		<summary>
     Deserializes the event detachment by setting the event value throught IEventBindingService.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.DeserializeVariableDeclarationStatement">
		<summary>
     Deserializes a variable declaration by deserializing the target object of the variable and providing a name.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.ExecuteBinaryExpression">
		<summary>
     Executes the given binary expression.  If at any stage of the game the expression execution fails,
     this just returns the default value for the datatype required by the operator.  Boolean == false,
     for example.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.ExecuteBinaryOperator">
		<summary>
     Executes the given binary operator.  If at any stage of the game the expression execution fails,
     this just returns the left hand side.
     for example.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.ExecuteBooleanOperator">
		<summary>
     Executes the given boolean operator.  If at any stage of the game the expression execution fails,
     this just returns false.
     for example.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.ExecuteMathOperator">
		<summary>
     Executes the given math operator.  If at any stage of the game the expression execution fails,
     this just returns the left hand side.
     for example.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.SerializeProperty">
		<summary>
     This serializes the given property on this object.
 </summary>
	</doc>
	<doc for="CodeDomSerializer.SerializeResource">
		<summary>
			<para> Serializes the specified resource value using the specified name.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization. </param>
		<param name="resourceName">The name of the resource to serialize. </param>
		<param name="value">The object to serialize. </param>
	</doc><doc for="CodeDomSerializer.SerializeResourceInvariant">
		<summary>
			<para>Serializes the specified resource value using the specified name.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization. </param>
		<param name="resourceName">The name of the resource to serialize. </param>
		<param name="value">The object to serialize. </param>
	</doc><doc for="CodeDomSerializer.DeserializePropertiesFromResources">
		<summary>
			<para> Deserializes the properties of the specified object that match the specified filter, if a
      filter was specified.</para>
		</summary>
		<param name="manager">A serialization manager interface that is used during the deserialization process. </param>
		<param name="value">The object to deserialize properties for. </param>
		<param name="filter">An optional filter to apply to the properties. </param>
		<remarks>
			<para> This method is useful for deserializing properties that cannot be represented
      in code, such as design-time properties.</para>
		</remarks>
	</doc><doc for="CodeDomSerializer.DeserializeExpression">
		<summary>
			<para>Deserializes the specified expression.</para>
		</summary>
		<param name="manager">A serialization manager interface that is used during the deserialization process.</param>
		<param name="name"> An optional name to give the expression. If the expression results in the creation of an object, the object is given this name for subsequent searches through the serialization manager. If this is <see langword="null"/>, no name will be given.</param>
		<param name="expression">The CodeDOM expression to deserialize.</param>
		<returns>
			<para> The deserialized expression.</para>
		</returns>
		<remarks>
			<para>This method deserializes the specified expression by interpreting and deserializing the CodeDOM expression
      and returning the results.</para>
			<para> The specified
      expression is either another expression or a deserialized object. If the expression cannot
      be simplified to an object, it is considered another expression. If the expression
      can be fully simplified, it is considered a deserialized object. For example, if the
      expression were a <see cref="System.CodeDom.CodeFieldReferenceExpression"/>, this can be simplified to
      the value of the field. However, if this were a <see cref="System.CodeDom.CodeMethodReferenceExpression"/>
      
      , this expression cannot be simplified to a deserialized object; so the
      expression is returned.</para>
		</remarks>
	</doc><doc for="CodeDomSerializer.SerializeEvents">
		<summary>
			<para>Serializes all events of the specified object.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization.</param>
		<param name="statements">A statements collection to which serialized event statements are added.</param>
		<param name="value">The object whose events are to be serialized.</param>
		<param name="filter">A member attribute filter to apply to the event search.</param>
	</doc><doc for="CodeDomSerializer.SerializeProperties">
		<summary>
			<para> Serializes all properties for the specified object, using the specified filter.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization.</param>
		<param name="statements">A collection of statements to add the serialized property statements to.</param>
		<param name="value"> The object whose properties are serialized.</param>
		<param name="filter">A member attribute filter to apply to the property search.</param>
	</doc><doc for="CodeDomSerializer.SerializeToExpression">
		<summary>
			<para>Serializes the specified value to a CodeDOM expression.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization.</param>
		<param name="value">The object to serialize.</param>
		<returns>
			<para> The serialized value. This returns
   <see langword="null"/> if there is no serializer for the specified
      value, or if the serializer for that value did not return a <see cref="System.CodeDom.CodeExpression"/>.</para>
		</returns>
	</doc><doc for="CodeDomSerializer.SerializeToReferenceExpression">
		<summary>
			<para>Serializes the specified value to a CodeDOM expression.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization.</param>
		<param name="value">The object to serialize.</param>
		<returns>
			<para> The serialized value. This returns
   <see langword="null"/> if no reference expression can be obtained for the specified value, or
      the value cannot be serialized.</para>
		</returns>
		<remarks>
			<para>This method is similar to <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeToExpression"/> , except that
   it stops if it cannot obtain a simple reference expression for the value. Call this
   method when you expect the resulting expression to be used as a parameter or
   target of a statement.</para>
		</remarks>
	</doc><doc for="CodeDomSerializer.Deserialize">
		<summary>
			<para> Deserializes the specified serialized CodeDOM object into an
      object.</para>
		</summary>
		<param name="manager">A serialization manager interface that is used during the deserialization process.</param>
		<param name="codeObject">A serialized CodeDOM object to deserialize.</param>
		<returns>
			<para> The deserialized CodeDOM object.</para>
		</returns>
		<remarks>
			<para> This method uses the serialization manager to create objects and resolve data
      types. The root of the object graph is returned.</para>
		</remarks>
	</doc><doc for="CodeDomSerializer.DeserializeStatement">
		<summary>
			<para> Deserializes the specified statement.</para>
		</summary>
		<param name="manager">A serialization manager interface that is used during the deserialization process.</param>
		<param name="statement">The CodeDOM statement to deserialize.</param>
		<remarks>
			<para>This method deserializes the statement by interpreting 
      and executing the CodeDOM<see langword=" "/>
      statement.</para>
		</remarks>
	</doc><doc for="CodeDomSerializer.Serialize">
		<summary>
			<para>Serializes the specified object into a CodeDOM
      object.</para>
		</summary>
		<param name="manager">The serialization manager to use during serialization.</param>
		<param name="value">The object to serialize.</param>
		<returns>
			<para>A CodeDOM<see langword=" "/> object representing the object that has been serialized.</para>
		</returns>
	</doc>
	<doc for="CodeDomSerializer.SerializePropertiesToResources">
		<summary>
			<para> Serializes the specified properties to resources.</para>
		</summary>
		<param name="manager"> The serialization manager to use during serialization.</param>
		<param name="statements">A collection of statements to use during serialization. The resource serializer uses this to write resource creation statements, but will not have individual property assign statements because all the properties are serialized to a resource.</param>
		<param name="value">The object to deserialize properties for.</param>
		<param name="filter">An optional filter to apply to the properties.</param>
		<remarks>
			<para> This method will inspect all of the properties on the specified
      object that fits the filter, and check for that property within resource data. This is
      useful for deserializing properties that cannot be represented in code, such as
      design time properties.</para>
		</remarks>
	</doc>
	<doc for="CodeDomSerializer">
		<summary>
			<para> Serializes an object graph to a series of CodeDOM
      statements. This class provides an abstract base class for a
      serializer.</para>
		</summary>
		<remarks>
			<para>You can implement a custom <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/> to
   control the generation of component initialization code for a type of component
   at design time.</para>
			<para>To implement a custom <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/> for
a type, you must:</para>
			<list type="number"><item>
					<term>
      
      Define a class that derives from <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/>.</term>
				</item>
				<item>
					<term>
      
      Implement method overrides for serialization or
      deserialization methods. (See the information below for details.)</term>
				</item>
				<item>
					<term>
      
      Associate your custom <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/>
      implementation with a type of component using a <see cref="System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"/>.</term>
				</item>
			</list>
			<para>To implement a serialization method for generating configuration code for a
   component:</para>
			<list type="number"><item>
					<term>
      
      Within a class that derives from <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/>, override an
      appropriate serialization or deserialization method of the base class.</term>
				</item>
				<item>
					<term>
      
      If you want the default
      serializer to generate code statements that perform the default component
      configuration, you must obtain and call the base serializer for the component.
      To obtain the base serializer for the component, call the <see cref="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer"/> method of
      the <see cref="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"/> passed to your
      method override. Pass the <see cref="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer"/> method the type of
      the component to serialize the configuration of, along with the base type of
      serializer you are requesting, which is <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/>. Call the
      method of the same name you are overriding on the base serializer, using
      the <see cref="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"/> and object passed
      to your method override. If you are implementing the <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.Serialize"/> method,
      the <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.Serialize"/> method of the base
      serializer will return an object. The type of this object depends
      on the type of base serializer which depends on the type of component you are
      serializing the values of. If you are implementing the <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeEvents"/>, <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeProperties"/>,
      or <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializePropertiesToResources"/>
      method, you must create a new <see cref="System.CodeDom.CodeStatementCollection"/> to contain the
      generated code statements, and pass it to the method.</term>
				</item>
				<item>
					<term>
      
      If you have called a base serializer method, you will
      have a <see cref="System.CodeDom.CodeStatementCollection"/> that contains the statements to generate to
      initialize the component. Otherwise you should create a <see cref="System.CodeDom.CodeStatementCollection"/>. You can add <see cref="System.CodeDom.CodeStatement"/> objects
      representing statements to generate in the component configuration code to
      this collection.</term>
				</item>
				<item>
					<term>
      
      Return the <see cref="System.CodeDom.CodeStatementCollection"/> that represents
      the source code to generate to
      configure the component.</term>
				</item>
			</list>
			<note type="inheritinfo">
   When you inherit from
<see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/>, you must override
   the following members: <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer.Deserialize"/> and
<see cref="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Serialize"/>. 
</note>
		</remarks>
		<example>
			<para> The following example illustrates how to create
      a custom CodeDOM serializer that derives from <see cref="System.ComponentModel.Design.Serialization.CodeDomSerializer"/>.</para>
			<codelink SampleID="IDesignerSerializationManagerSample" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"/>
	</doc>
</docs>
