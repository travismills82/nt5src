<docs>
	<doc for="ComponentDesigner.NonBrowsableEventNames">
		<summary>
			<para>Gets or sets the set of non-browsable event names for this designer.</para>
		</summary>
		<value>
			<para>A string array of non-browsable event names for this designer.</para>
		</value>
	</doc>
	<doc for="ComponentDesigner.GetDefaultValue">
		<summary>
			<para>Gets the default value for the specified property.</para>
		</summary>
		<param name="comp">The component to retrieve the property on.</param>
		<param name="name">The name of the property.</param>
		<returns>
			<para>An object representing the default value for the property.</para>
		</returns>
		<remarks>
			<para>If there is no default value attribute, this will assume 
       that <paramref name="comp"/> already
       contains the default value and request the value directly from it.</para>
		</remarks>
	</doc>
	<doc for="ComponentDesigner.OnInitializeShadowProperties">
		<summary>
			<para>
       Raises the InitializeShadowProperties event.
    </para>
		</summary>
		<remarks>
			<para>
       This allows the designer to initialize the values
       of any shadow properties it has. This is called when the designer is
       initialized.
    </para>
		</remarks>
	</doc>
	<doc for="ComponentDesigner.SetPropertyWithUndo">
		<overload>
			<para>
       Sets the specified property to the specified value using the undo service, so
       the property set can be un-done by the user.
    </para>
		</overload>
		<summary>
			<para>
       Sets the specified property to the specified value using the undo service, so the property
       set can be un-done by the user.
    </para>
		</summary>
		<param name="comp">
    The component to set the property on.
 </param>
		<param name="propertyName">
    The name of the property.
 </param>
		<param name="newValue">
    The value to set the property to.
 </param>
	</doc>
	<doc for="ComponentDesigner.SetPropertyWithUndo1">
		<summary>
			<para>
       Sets the specified property to the specified value using the undo service, so the property
       set can be un-done by the user.
    </para>
		</summary>
		<param name="comp">
    The component to set the property on.
 </param>
		<param name="prop">
    The property to set.
 </param>
		<param name="newValue">
    The value to set the property to.
 </param>
	</doc>
	<doc for="ComponentDesigner.ShadowProperties">
		<summary>
			<para> Gets a collection of property values that override user settings.</para>
		</summary>
		<value>
			<para>A <see cref="System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection"/> that indicates
   the shadow properties of the design document.</para>
		</value>
	</doc><doc for="ComponentDesigner.Finalize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ComponentDesigner.InheritanceAttribute">
		<summary>
			<para> Gets an attribute that indicates the type of inheritance of the associated component.
      </para>
		</summary>
		<value>
			<para> The <see cref="System.ComponentModel.InheritanceAttribute"/> for the 
   associated component.</para>
		</value>
	</doc><doc for="ComponentDesigner.Inherited">
		<summary>
			<para> Gets a value indicating whether this component is inherited.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the component is inherited; otherwise,
<see langword="false"/>.</para>
		</value>
	</doc><doc for="ComponentDesigner.Initialize">
		<summary>
			<para> Prepares the designer to view, edit,
      and design the specified component.</para>
		</summary>
		<param name="component">The component for this designer. </param>
		<remarks>
			<para> The designer host calls this method when it is ready to use the
      designer.
      </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesignerHost"/>
	</doc><doc for="ComponentDesigner.OnSetComponentDefaults">
		<summary>
			<para> Sets the default properties for the component.
      </para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.ComponentDesigner.OnSetComponentDefaults"/>
is called when the designer is initialized. This
allows the designer to provide default values for the base component.</para>
			<para> The default implementation of this method sets the
   default property of the component to the name of the component if the default
   property is a string and the property is not already set. This method can be implemented in
   a derived class to customize the initialization of the component that this designer is
   designing.</para>
		</remarks>
	</doc><doc for="ComponentDesigner.PreFilterEvents">
		<summary>
			<para> Allows a designer to add to the
      set of events that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      
      .
      </para>
		</summary>
		<param name="events">The events for the class of the component. </param>
		<remarks>
			<para> This method provides a way to add items to the dictionary of events that
      a designer exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>. </para>
			<para>The keys in the dictionary of events are the names of the events. The objects
      are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method
      is called immediately before <see cref="System.ComponentModel.Design.ComponentDesigner.PostFilterEvents"/> .</para>
			<note type="inotes">
      You can directly
      modify the dictionary that is accessible through the <paramref name="events"/>
      parameter, or you can leave it unchanged. If you override this method, call the base
      implementation before you perform your own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc><doc for="ComponentDesigner.PreFilterProperties">
		<summary>
			<para> Allows a designer
      to add to the set of properties that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      
      .
      </para>
		</summary>
		<param name="properties">The properties for the class of the component. </param>
		<remarks>
			<para> This method provides a way to add items to the dictionary of properties
      that a designer exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of properties are the names of the properties. The
      objects are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method
      is called immediately before <see cref="System.ComponentModel.Design.ComponentDesigner.PostFilterProperties"/>.</para>
			<note type="inotes">
      You can directly
      modify the dictionary that is accessible through the <paramref name="properties"/>
      parameter, or you can leave it unchanged. If you override this method,
      call the base implementation before you perform your own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc><doc for="ComponentDesigner.PreFilterAttributes">
		<summary>
			<para> Allows a designer to add to the set
      of
      attributes that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
		</summary>
		<param name="attributes">The attributes for the class of the component. </param>
		<remarks>
			<para> This method provides a way to add items to the dictionary of attributes
      that a designer exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of attributes are the type 
      identifers of the attributes, as specified by the value of their <see cref="System.Attribute.TypeId"/> property.
      The objects are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method
      is called immediately before <see cref="System.ComponentModel.Design.ComponentDesigner.PostFilterAttributes"/> .</para>
			<note type="inotes">
      You can directly
      modify the dictionary that is accessible through the <paramref name="attributes"/>
      parameter, or you can leave it unchanged. If you override this method,
      call the base implementation before you perform your own filtering.
      
   </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc><doc for="ComponentDesigner.InitializeNonDefault">
		<summary>
			<para>Initializes the settings for an imported component that is already initialized to settings other than the
 defaults.</para>
		</summary>
		<remarks>
			<para> This method is called when the designer is associated with a
 control that is not in its default state, such as a control
 that you paste or move with a drag-and-drop operation onto the designer. This method provides an
 opportunity for implementers to modify or shadow the properties of the component
 rather than initialize the properties for the component to their defaults.
 This method is called after the other initialization functions.</para>
		</remarks>
	</doc><doc for="ComponentDesigner.PostFilterAttributes">
		<summary>
			<para> Allows a designer to change or remove items from the set
 of attributes that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.
 </para>
		</summary>
		<param name="attributes">The attributes for the class of the component. </param>
		<remarks>
			<para> This method provides a way to change or remove the items within the
 dictionary of attributes that are exposed through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of attributes are the type
 identifers of the attributes, as specified by the value of their <see cref="System.Attribute.TypeId"/> property.
 The objects are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method
 is called immediately after <see cref="System.ComponentModel.Design.ComponentDesigner.PreFilterAttributes"/>.</para>
			<note type="inotes">
 You can directly
 filter the dictionary that is accessible through the <paramref name="attributes"/>
 parameter, or you can leave it unchanged. If you override this method,
 call the base implementation after you perform your own filtering.
 
 </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc><doc for="ComponentDesigner.PostFilterEvents">
		<summary>
			<para> Allows a designer to change or remove items from the set
 of events that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.
 </para>
		</summary>
		<param name="events">The events for the class of the component.</param>
		<remarks>
			<para> This method provides a way to change or remove the
 items within the dictionary of events that are exposed through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of events are the names of the events. The objects
 are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method
 is called immediately after <see cref="System.ComponentModel.Design.ComponentDesigner.PreFilterEvents"/>.</para>
			<note type="inotes">
 You can directly
 filter the dictionary that is accessible through the <paramref name="events"/>
 parameter, or you can leave it unchanged. If you override this method, call the base
 implementation after you perform your own filtering.
 
 </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
	</doc><doc for="ComponentDesigner.RaiseComponentChanged">
		<summary>
			<para> Notifies the <see cref="System.ComponentModel.Design.IComponentChangeService"/> that
 this component has been changed.
 </para>
		</summary>
		<param name="member">A <see cref="System.ComponentModel.MemberDescriptor"/> that indicates the member that has been changed.</param>
		<param name=" oldValue">The old value of the member.</param>
		<param name=" newValue">The new value of the member.</param>
		<remarks>
			<para> Call this method only when you affect
 component properties directly and not through the accessors provided by <see cref="System.ComponentModel.MemberDescriptor"/>.
 </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService"/>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
	</doc><doc for="ComponentDesigner.RaiseComponentChanging">
		<summary>
			<para> Notifies the <see cref="System.ComponentModel.Design.IComponentChangeService"/> that
 this component is about to be changed.
 </para>
		</summary>
		<param name="member">A <see cref="System.ComponentModel.MemberDescriptor"/> that indicates the member that is about to be changed.</param>
		<remarks>
			<para> Call this method only when you affect
 component properties directly and not through accessors provided by <see cref="System.ComponentModel.MemberDescriptor"/>.
 </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IComponentChangeService"/>
		<seealso cref="System.ComponentModel.MemberDescriptor"/>
	</doc><doc for="ComponentDesigner.ShadowPropertyCollection.Contains">
		<summary>
			<para> Indicates whether a property
 matching the specified name exists in the collection.</para>
		</summary>
		<param name="propertyName">The name of the property to check for in the collection.</param>
		<returns>
			<para><see langword="true"/> if the property exists in the collection; otherwise,
<see langword="false"/>.</para>
		</returns>
	</doc><doc for="ComponentDesigner.ShadowPropertyCollection.this">
		<summary>
			<para>Gets or sets the object at the specified index.</para>
		</summary>
		<param name="propertyName">The name of the property to access in the collection.</param>
		<value>
			<para> The value of the specified property, if it exists in
 the collection. Otherwise, the value is retrieved from the current value of the
 nonshadowed property.</para>
		</value>
		<remarks>
			<para> This method returns the current value of a property, if the property has not been shadowed.
 Therefore, it is important to determine whether the property is shadowed by
 calling <see cref="System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Contains"/>.</para>
		</remarks>
	</doc><doc for="ComponentDesigner.Dispose2">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.ComponentModel.Design.ComponentDesigner"/> and optionally releases the managed
 resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public
 <see topic="frlrfSystemComponentModelDesignComponentDesignerClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
 <see langword="Dispose()"/> invokes the protected
 <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set
 to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
 <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
 resources held by any managed objects that this <see cref="System.ComponentModel.Design.ComponentDesigner"/>
 references. This method invokes the <see langword="Dispose()"/> method of each
 referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
 overriding <see langword="Dispose(Boolean)"/>, be careful not to reference objects
 that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="ComponentDesigner.PostFilterProperties">
		<summary>
			<para> Allows a designer to change or remove items from the set
 of properties that it exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>.
 </para>
		</summary>
		<param name="properties">The properties for the class of the component. </param>
		<remarks>
			<para> This method provides a way to change or remove the items
 within the dictionary of properties that are exposed through a <see cref="System.ComponentModel.TypeDescriptor"/>.</para>
			<para>The keys in the dictionary of properties are the names of the properties. The
 objects are of type <see cref="System.ComponentModel.PropertyDescriptor"/>. This method
 is called immediately after <see cref="System.ComponentModel.Design.ComponentDesigner.PreFilterProperties"/>.</para>
			<note type="inotes">
 You can directly
 filter the dictionary that is accessible through the <paramref name="properties"/>
 parameter, or you can leave it unchanged. If you override this method,
 call the base implementation after you perform your own filtering.
 
 </note>
		</remarks>
		<seealso cref="System.ComponentModel.TypeDescriptor"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ComponentDesigner.InvokeGetInheritanceAttribute">
		<summary>
			<para>Gets the <see cref="System.ComponentModel.InheritanceAttribute"/> of the specified
<see cref="System.ComponentModel.Design.ComponentDesigner"/>.</para>
		</summary>
		<param name="toInvoke">The <see cref="System.ComponentModel.Design.ComponentDesigner"/> whose inheritance attribute to retrieve.</param>
		<returns>
			<para>The <see cref="System.ComponentModel.InheritanceAttribute"/> of the specified designer.</para>
		</returns>
		<example>
			<codelink SampleID="ComponentDesignerInheritance" SnippetID="1,2"/>
		</example>
	</doc>
	<doc for="ComponentDesigner.IDesignerFilter.PostFilterAttributes">
		<internalonly/>
		<summary>
			<para> Allows a designer to filter the set of
      attributes that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/> object.</para>
		</summary>
		<param name="attributes">The attributes for the class of the component. The keys in the dictionary are attribute type IDs.</param>
		<returns>
			<para>The augmented set of attributes.</para>
		</returns>
		<remarks>
			<para>This method is called immediately after its
      corresponding <see langword="Pre"/><paramref name="XXX"/>
      method. If
      you are overriding this method, call the the base implementation after you
      perform your own filtering.</para>
   If the method does not modify any attributes, it may just return a
   reference to its input parameter. If you do make a change to the attributes, you
   must create a new array.
</remarks>
	</doc><doc for="ComponentDesigner.IDesignerFilter.PostFilterEvents">
		<internalonly/>
		<summary>
			<para> Allows a designer to filter the set of events
      that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      object.</para>
		</summary>
		<param name="events">The events for the class of the component. The keys in the dictionary are event names.</param>
		<returns>
			<para>The augmented set of events.</para>
		</returns>
		<remarks>
			<para>This method is called immediately after its
      corresponding <see langword="Pre"/><paramref name="XXX"/>
      method. If you are overriding this method, call the the base
      implementation after you perform your own filtering.</para>
   If the method does not modify any events, it may just return a reference to
   its input parameter. If you do make a change to the events, you must create a
   new array.
</remarks>
	</doc><doc for="ComponentDesigner.IDesignerFilter.PostFilterProperties">
		<internalonly/>
		<summary>
			<para> Allows a designer to filter the set of properties
      that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      object.</para>
		</summary>
		<param name="properties">The properties for the class of the component. The keys in the dictionary are property names.</param>
		<returns>
			<para>The augmented set of properties.</para>
		</returns>
		<remarks>
			<para>This method is called immediately after its
      corresponding <see langword="Pre"/><paramref name="XXX"/>
      method. If
      you are overriding this method, call the the base implementation after you
      perform your own filtering.</para>
   If the method does not modify any properties, it may just return a
   reference to its input parameter. If you do make a change to the properties, you
   must create a new array.
</remarks>
	</doc><doc for="ComponentDesigner.IDesignerFilter.PreFilterAttributes">
		<internalonly/>
		<summary>
			<para> Allows a designer to filter the set of
      attributes that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      object.</para>
		</summary>
		<param name="attributes">The attributes for the class of the component. The keys in the dictionary are attribute type IDs.</param>
		<returns>
			<para>The augmented set of attributes.</para>
		</returns>
		<remarks>
			<para>This method is called immediately before its
      corresponding <see langword="Post"/><paramref name="XXX"/>
      method. If
      you are overriding this method, call the base implementation before you perform
      your own filtering.</para>
   If the method does not modify any attributes, it may just return a
   reference to its input parameter. If you do make a change to the attributes, you
   must create a new array.
</remarks>
	</doc><doc for="ComponentDesigner.IDesignerFilter.PreFilterEvents">
		<internalonly/>
		<summary>
			<para> Allows a designer to filter the set of events
      that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      object.</para>
		</summary>
		<param name="events">The events for the class of the component. The keys in the dictionary are event names.</param>
		<returns>
			<para>The augmented set of events.</para>
		</returns>
		<remarks>
			<para>This method is called immediately before its
      corresponding <see langword="Post"/><paramref name="XXX"/>
      method. If
      you are overriding this method, call the base implementation before you perform
      your own filtering.</para>
   If the method does not modify any events, it may just return a reference to
   its input parameter. If you do make a change to the events, you must create a
   new array.
</remarks>
	</doc><doc for="ComponentDesigner.IDesignerFilter.PreFilterProperties">
		<internalonly/>
		<summary>
			<para> Allows a designer to filter the set of properties
      that a component exposes through a <see cref="System.ComponentModel.TypeDescriptor"/>
      object.</para>
		</summary>
		<param name="properties">The properties for the class of the component. The keys in the dictionary are event names.</param>
		<returns>
			<para>The augmented set of properties.</para>
		</returns>
		<remarks>
			<para>This method is called immediately before its
      corresponding <see langword="Post"/><paramref name="XXX"/>
      method. If
      you are overriding this method, call the base implementation before you perform
      your own filtering.</para>
   If the method does not modify any properties, it may just return a
   reference to its input parameter. If you do make a change to the properties, you
   must create a new array.
</remarks>
	</doc><doc for="ComponentDesigner.Verbs">
		<summary>
			<para> Gets the design-time verbs supported by the component that is associated with the designer.
      </para>
		</summary>
		<value>
			<para> A <see cref="System.ComponentModel.Design.DesignerVerbCollection"/>
of <see cref="System.ComponentModel.Design.DesignerVerb"/>
objects, or <see langword="null"/> if no designer verbs are available. This default
implementation always returns <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>This method returns <see langword="null"/> if the component
   has no design-time verbs.</para>
			<para>The design-time environment typically displays verbs returned by this method
   in a right-click menu. When a user selects one of the verbs, the <see cref="System.ComponentModel.Design.MenuCommand.Invoke"/> method of the
   corresponding <see cref="System.ComponentModel.Design.DesignerVerb"/> is invoked. </para>
			<note type="note">
   A design-time environment typically
   provides a <see langword="Properties..."/>
   
   entry on a component's
   right-click menu. Therefore, do not include such an entry in the collection
   of designer-specified verbs.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ComponentDesigner.Component">
		<summary>
			<para> Gets the component this designer is designing.
      </para>
		</summary>
		<value>
			<para> The component managed
      by the designer.
      </para>
		</value>
		<remarks>
			<para>The <see cref="System.ComponentModel.Design.ComponentDesigner.Initialize"/> method of <see cref="System.ComponentModel.Design.ComponentDesigner"/> 
sets this property.</para>
			<note type="note">
   When overriding the <see cref="System.ComponentModel.Design.ComponentDesigner.Initialize"/> method, be sure to call the base
   class <see cref="System.ComponentModel.Design.ComponentDesigner.Initialize"/> method before using this
   property.
</note>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ComponentDesigner.Initialize"/>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ComponentDesigner">
		<summary>
			<para> Base designer class for extending the design mode behavior of a component.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.ComponentDesigner"/>
provides a simple designer that can extend the behavior of an associated
component in design mode.</para>
			<para><see cref="System.ComponentModel.Design.ComponentDesigner"/>
provides an empty <see cref="System.ComponentModel.Design.IDesignerFilter"/> interface implementation, whose
methods can be overridden to adjust the attributes, properties and
events of the associated component at design time.</para>
			<para> You can associate a designer with a type using a <see cref="System.ComponentModel.DesignerAttribute"/>. For an overview of customizing design time behavior, see
<see topic="cpconenhancingdesign-timesupport"/>.</para>
		</remarks>
		<example>
			<para>The following example provides an example <see cref="System.ComponentModel.Design.ComponentDesigner"/> implementation and an example
   component associated with the designer. The designer implements an override of
   the <see cref="System.ComponentModel.Design.ComponentDesigner.Initialize"/> method that
   calls the base <see langword="Initialize"/> method, an override of the <see cref="System.ComponentModel.Design.ComponentDesigner.DoDefaultAction"/> method that
   displays a <see langword="MessageBox"/> when the component is
   double-clicked, and an override of the <see cref="System.ComponentModel.Design.ComponentDesigner.Verbs"/> property accessor that supplies a
   custom <see cref="System.ComponentModel.Design.DesignerVerb"/> menu command to the shortcut
   menu for the component.</para>
			<codelink SampleID="ComponentDesignerExample" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
		<seealso cref="System.ComponentModel.Design.IDesignerFilter"/>
		<seealso topic="cpconenhancingdesign-timesupport"/>
		<seealso cref="System.ComponentModel.DesignerAttribute"/>
	</doc>
	<doc for="ComponentDesigner.AssociatedComponents">
		<summary>
			<para> Gets the collection of components associated with the component managed by the designer.</para>
		</summary>
		<value>
			<para>The components that are associated with the component managed by the designer.</para>
		</value>
		<remarks>
			<para>This property indicates any components to copy or move along with 
      the component managed by the designer during a copy, drag or
      move operation.</para>
			<para>If this collection contains references to other components in the current 
      design mode document, those components will be copied along with the component
      managed by the designer during a copy operation.</para>
			<para>When the component managed by the designer is selected, this collection is 
      filled with any nested controls. This collection can also include other
      components, such as the buttons of a toolbar.</para>
		</remarks>
	</doc>
	<doc for="ComponentDesigner.DoDefaultAction">
		<summary>
			<para> Creates a method signature in the source code file for the
      default event on the component and navigates the user's cursor
      to that location.</para>
		</summary>
		<remarks>
			<para> In Windows Forms and Web Forms designers, this method is invoked when a
      user double-clicks a component.</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IDesigner"/>
	</doc>
	<doc for="ComponentDesigner.GetService">
		<summary>
			<para>Attempts to retrieve
      the specified type of service from the designer's component's design mode
      site.</para>
		</summary>
		<param name="serviceType">The type of service to request.</param>
		<returns>
			<para>An object implementing the requested service, or
   <see langword="null"/>
   if the service
   cannot be resolved.</para>
		</returns>
		<remarks>
			<para>The default implementation of this method requests the service from the site of the
      component.</para>
		</remarks>
	</doc>
	<doc for="ComponentDesigner.ShadowPropertyCollection">
		<summary>
			<para>Represents a collection of shadow properties that should override inherited default or assigned values for
      specific properties. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection"/> stores a
   collection of values for specific properties that override any other value for
   these properties at design time. This is useful for ensuring that a
   specific property is set to a specific value, for example, in situations
   when the background form should always have its visible property set to
<see langword="true"/>
. </para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.ComponentDesigner.ShadowProperties"/>
	</doc>
	<doc for="ComponentDesigner.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.ComponentModel.Design.ComponentDesigner"/>.</para>
		</overload>
		<summary>
			<para> Releases all resources used by the
   <see cref="System.ComponentModel.Design.ComponentDesigner"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.ComponentModel.Design.ComponentDesigner.Dispose"/> allows the resources
   used by the <see cref="System.ComponentModel.Design.ComponentDesigner"/>. to be reallocated for other purposes. For more
   information about <see cref="System.ComponentModel.Design.ComponentDesigner.Dispose"/>, see
<see topic="cpconcleaningupunmanagedresources"/>.</para>
		</remarks>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc>
	<doc for=".Finalize">
		<summary>
			<para>Attempts to free resources by calling <see langword="Dispose(false) "/>before
   the object is reclaimed by garbage collection.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/> and cleans up resources by calling
<see langword="Dispose(false)"/>. Override <see langword="Dispose(Boolean)"/> to 
   customize the cleanup.</para>
			<para>Application code should not call this method; an object's
<see langword="Finalize"/> method is automatically invoked during garbage 
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/> method.</para>
			<para>For more information, see <see topic="cpconfinalizemethodscdestructors"/>,
<see topic="cpconcleaningupunmanagedresources"/>, and 
<see topic="cpconoverridingfinalizemethod"/>. </para>
		</remarks>
	</doc>
</docs>
