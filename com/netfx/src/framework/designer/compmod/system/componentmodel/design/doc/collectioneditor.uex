<docs>
	<doc for="CollectionEditor.AddUndoAction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CollectionEditor.OnComponentChanged">
		<summary>
 reflect any change events to the instance object
 </summary>
	</doc>
	<doc for="CollectionEditor.OnComponentChanging">
		<summary>
  reflect any changed events to the instance object
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm">
		<summary>
      This is the collection editor's default implementation of a
      collection form.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.AddButton_click">
		<summary>
      Adds a new element to the collection.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.AddDownMenu_click">
		<summary>
      Processes a click of the drop down type menu.  This creates a 
      new instance.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.CancelButton_click">
		<summary>
      Aborts changes made in the editor.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.CreateAndAddInstance">
		<summary>
      Performs a create instance and then adds the instance to
      the list box.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.DownButton_click">
		<summary>
      Moves the selected item down one.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.GetDisplayText">
		<summary>
      Retrieves the display text for the specified list item.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.HelpButton_click">
		<summary/>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.InitializeComponent">
		<summary>
      Creates the UI for this form.  You can provide your
      own UI by overriding this.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.Listbox_drawItem">
		<summary>
     This draws a row of the listbox.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.Listbox_keyPress">
		<summary>
      Handles keypress events for the list box.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.Listbox_selectedIndexChanged">
		<summary>
      Event that fires when the selected list box index changes.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.OKButton_click">
		<summary>
      Commits the changes to the editor.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.OnEditValueChanged">
		<summary>
      This is called when the value property in the CollectionForm has changed.
      In it you should update your user interface to reflect the current value.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.PropertyGrid_propertyValueChanged">
		<summary>
      When something in the property grid changes, we update pertinent text here.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.RemoveButton_click">
		<summary>
      Removes the selected item.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.UpButton_click">
		<summary>
      Moves an item up one in the list box.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.UpdateEnabled">
		<summary>
      Updates the set of enabled buttons.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper">
		<summary>
     This class implements a custom type descriptor that is used to provide properties for the set of
     selected items in the collection editor.  It provides a single property that is equivalent
     to the editor's collection item type.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ComponentType">
		<summary>
			<para>
       When overridden in a derived class, gets the type of the
       component this property
       is bound to.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.Type"/> that represents
       the type of component this
       property is bound to.
    </para>
		</value>
		<remarks>
			<para>
       Typically, this property is implemented through reflection.
    </para>
		</remarks>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.IsReadOnly">
		<summary>
			<para>
       When overridden in
       a derived class, gets a value
       indicating whether this property is read-only.
    </para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the property is read-only; 
    <see langword="false "/> if the property is read/write.
    </para>
		</value>
		<seealso cref="System.ComponentModel.ReadOnlyAttribute"/>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.PropertyType">
		<summary>
			<para>
       When overridden in a derived class,
       gets the type of the property.
    </para>
		</summary>
		<value>
			<para>
       A <see cref="System.Type"/> that represents
       the type of the property.
    </para>
		</value>
		<remarks>
			<para>
       Typically, this property is implemented through reflection.
    </para>
		</remarks>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.CanResetValue">
		<summary>
			<para>
       When overridden in a derived class, indicates whether
       resetting the <paramref name="component "/>will change the value of the
    <paramref name="component"/>.
 </para>
		</summary>
		<param name="component">
			<para> The component to test for reset capability.</para>
		</param>
		<returns>
			<para>
				<see langword="true "/>if resetting 
          the <paramref name="component "/>will change the value of the <paramref name="component"/>; 
          otherwise, <see langword="false"/>.
       </para>
		</returns>
		<remarks>
			<para>
          Typically, this method
          is implemented through reflection.
       </para>
			<note type="inheritinfo">
          When overridden in a derived class, this method looks
          for a <see cref="System.ComponentModel.DefaultValueAttribute"/>. If it finds one, it compares the
          value of the attribute with the property's current value. It will return
       <see langword="true "/>when the default value 
          does not match the property's current value.
          If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for a <see langword="ShouldSerialize"/><paramref name="XXX"/> method. If it finds a <see langword="ShouldSerialize"/><paramref name="XXX"/> method, it returns what
       <see langword="ShouldSerialize"/><paramref name="XXX"/> returns.
          If this method cannot find a <see langword="ShouldSerialize"/><paramref name="XXX"/> method, it looks for a <see langword="Reset"/><paramref name="XXX"/> method. If it finds a
       <see langword="Reset"/><paramref name="XXX"/> method, it returns <see langword="true"/>.
          If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, a <see langword="ShouldSerialize"/><paramref name="XXX"/> method,
          or a <see langword="Reset"/><paramref name="XXX"/> method, then it returns <see langword="false"/>.
       </note>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.GetValue">
		<summary>
			<para>
       When overridden in a derived class, gets the current
       value
       of the
       property on a component.
    </para>
		</summary>
		<param name="component">
    The component with the property whose value will be retrieved.
 </param>
		<returns>
			<para>
       The value of a property for a specified component.
    </para>
		</returns>
		<remarks>
			<para>
       Typically, this method is implemented through reflection.
    </para>
			<note type="inheritinfo">
       When you override this method, it should get the current
       value of the property by invoking the appropriate <see langword="Get"/><paramref name="XXX "/> method.
       An exception in the <see langword="Get"/><paramref name="XXX "/> method should pass through.
    </note>
		</remarks>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ResetValue">
		<summary>
			<para>
       When overridden in a derived class, resets the
       value
       for this property
       of the component.
    </para>
		</summary>
		<param name="component">
			<para>The component with the property whose value will be reset. </para>
		</param>
		<remarks>
			<para>
          Typically, this method is implemented through reflection.
       </para>
			<note type="inheritinfo">
          When overridden in a derived class, this method looks for a <see cref="System.ComponentModel.DefaultValueAttribute"/>. If it finds
          one, it sets the value of the property to this.
          If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for a
       <see langword="Reset"/><paramref name="XXX"/> method. If it finds a <see langword="Reset"/><paramref name="XXX"/> method, it invokes it.
          If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/> or a <see langword="Reset"/><paramref name="XXX"/> method, then it does
          not perform an operation.
       </note>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.SetValue">
		<summary>
			<para>
       When overridden in a derived class, sets the value of
       the component to a different value.
    </para>
		</summary>
		<param name="component">
			<para> The component with the property whose value will be set.</para>
		</param>
		<param name="value">
       The new value.
    </param>
		<remarks>
			<para>
          Typically, this method is implemented through reflection.
       </para>
			<note type="inheritinfo">
          When you override
          this method, it should set the value of the property by invoking the appropriate
       <see langword="Set"/><paramref name="XXX"/> method of the component. If the value specified is invalid, 
          the component should throw an exception, which will be passed up. The component
          designer should design the property so that a <see langword="Set"/><paramref name="XXX"/> method
          following a <see langword="Set"/><paramref name="XXX"/> method will return the value passed in when the
       <see langword="Set"/><paramref name="XXX"/> method does not throw an exception.
       </note>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor"/>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ShouldSerializeValue">
		<summary>
			<para>
       When overridden in a derived class, indicates whether the
       value of
       this property needs to be persisted.
    </para>
		</summary>
		<param name="component">
			<para>The component with the property will be examined for persistance. </para>
		</param>
		<returns>
			<para>
				<see langword="true "/>when the property should be persisted; 
          otherwise, <see langword="false"/>.
       </para>
		</returns>
		<remarks>
			<para>
          Typically, this method is implemented through reflection.
       </para>
			<note type="inheritinfo">
          When overridden in a derived class, this method returns
       <see langword="true "/>if the current value of the property is different than 
          its
          default value. It looks for a default value by first looking for a
       <see cref="System.ComponentModel.DefaultValueAttribute"/>. 
          If the method finds this attribute, it compares
          the value of the attribute with the property's current value.
          If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/>, it looks for a
       <see langword="ShouldSerialize"/><paramref name="XXX"/> method. If this method finds a 
       <see langword="ShouldSerialize"/><paramref name="XXX"/> method, 
          it invokes it.
          If this method cannot find a <see cref="System.ComponentModel.DefaultValueAttribute"/> or a
       <see langword="ShouldSerialize"/><paramref name="XXX"/> method, it cannot create 
          optimizations and it returns <see langword="true"/>.
       </note>
		</remarks>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetAttributes">
		<summary>
     Retrieves an array of member attributes for the specified object.
 </summary>
		<returns>
     the array of attributes on the class.  This will never be null.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetClassName">
		<summary>
     Retrieves the class name for this object.  If null is returned,
     the type name is used.
 </summary>
		<returns>
     The class name for the object, or null if the default will be used.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetComponentName">
		<summary>
     Retrieves the name for this object.  If null is returned,
     the default is used.
 </summary>
		<returns>
     The name for the object, or null if the default will be used.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetConverter">
		<summary>
      Retrieves the type converter for this object.
 </summary>
		<returns>
     A TypeConverter.  If null is returned, the default is used.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetDefaultEvent">
		<summary>
     Retrieves the default event.
 </summary>
		<returns>
     the default event, or null if there are no
     events
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetDefaultProperty">
		<summary>
     Retrieves the default property.
 </summary>
		<returns>
     the default property, or null if there are no
     properties
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetEditor">
		<summary>
      Retrieves the an editor for this object.
 </summary>
		<returns>
     An editor of the requested type, or null.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetEvents">
		<summary>
     Retrieves an array of events that the specified component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.
 </summary>
		<returns>
     an array of events this component surfaces.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetEvents1">
		<summary>
     Retrieves an array of events that the specified component instance
     provides.  This may differ from the set of events the class
     provides.  If the component is sited, the site may add or remove
     additional events.  The returned array of events will be
     filtered by the specified set of attributes.
 </summary>
		<param name="attributes">
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the event does not have an instance of that attribute's
     class, this will still include the event if the
     Attribute is the same as it's Default property.
 </param>
		<returns>
     an array of events this component surfaces that match
     the specified set of attributes..
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetProperties">
		<summary>
     Retrieves an array of properties that the specified component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.
 </summary>
		<returns>
     an array of properties this component surfaces.
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetProperties1">
		<summary>
     Retrieves an array of properties that the specified component instance
     provides.  This may differ from the set of properties the class
     provides.  If the component is sited, the site may add or remove
     additional properties.  The returned array of properties will be
     filtered by the specified set of attributes.
 </summary>
		<param name="attributes">
     A set of attributes to use as a filter.

     If a Attribute instance is specified and
     the property does not have an instance of that attribute's
     class, this will still include the property if the
     Attribute is the same as it's Default property.
 </param>
		<returns>
     an array of properties this component surfaces that match
     the specified set of attributes..
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ICustomTypeDescriptor.GetPropertyOwner">
		<summary>
     Retrieves the object that directly depends on this value being edited.  This is
     generally the object that is required for the PropertyDescriptor's GetValue and SetValue
     methods.  If 'null' is passed for the PropertyDescriptor, the ICustomComponent
     descripotor implemementation should return the default object, that is the main
     object that exposes the properties and attributes,
 </summary>
		<param name="pd">
    The PropertyDescriptor to find the owner for.  This call should return an object
    such that the call "pd.GetValue(GetPropertyOwner(pd));" will generally succeed.
    If 'null' is passed for pd, the main object that owns the properties and attributes
    should be returned.
 </param>
		<returns>
     valueOwner
 </returns>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.ListItem">
		<summary>
      ListItem class.  This is a single entry in our list box.  It contains the value we're editing
      as well as accessors for the type converter and UI editor.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionEditorCollectionForm.TypeMenuItem">
		<summary>
      Menu items we attach to the drop down menu if there are multiple
      types the collection editor can create.
 </summary>
	</doc>
	<doc for="CollectionEditor.CollectionForm.CollectionForm">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.Design.CollectionEditor.CollectionForm"/> class.</para>
		</summary>
		<param name="editor">The <see cref="System.ComponentModel.Design.CollectionEditor"/> to use for editing the collection.</param>
	</doc>
	<doc for="CollectionEditor.CollectionForm.EditValue">
		<summary>
			<para> Gets or sets the collection object to edit.</para>
		</summary>
		<value>
			<para>The collection object to edit.</para>
		</value>
	</doc>
	<doc for="CollectionEditor.CollectionForm.DestroyInstance">
		<summary>
			<para>
       Destroys the specified instance of the object.
    </para>
		</summary>
		<param name="instance">
    The object to destroy.
 </param>
	</doc>
	<doc for="CollectionEditor.CollectionForm.DisplayError">
		<summary>
			<para>Displays the specified exception to the user.</para>
		</summary>
		<param name="e">The exception to display.</param>
	</doc>
	<doc for="CollectionEditor.CollectionValueSetActionUnit">
		<summary>
			<para>Provides an action unit for undoing and redoing collection value assignment 
       actions.</para>
		</summary>
	</doc>
	<doc for="CollectionEditor.CollectionValueSetActionUnit.Description">
		<summary>
			<para>
       Gets the description for this action unit.
    </para>
		</summary>
		<returns>
			<para>
       A description of the action encapsulated in this action unit.
    </para>
		</returns>
		<seealso cref="System.ComponentModel.Design.IUndoService"/>
	</doc>
	<doc for="CollectionEditor.CollectionValueSetActionUnit.CollectionValueSetActionUnit">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ComponentModel.Design.CollectionValueSetActionUnit"/> class using the specified settings.</para>
		</summary>
		<param name=" host">The designer host for the collection.</param>
		<param name="instance">The instance to set.</param>
		<param name=" targetProp">The target property.</param>
		<param name=" valueType">The type of each value of the collection.</param>
		<param name=" oldValues">The previous values of the collection.</param>
	</doc><doc for="CollectionEditor.CollectionValueSetActionUnit.DoAction">
		<nodoc/>
	</doc><doc for="CollectionEditor.CollectionValueSetActionUnit.GetTarget">
		<summary>
			<para>Gets the target of the action unit.</para>
		</summary>
	</doc><doc for="CollectionForm.editor;">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="CollectionEditor.Context">
		<summary>
			<para> Gets a type descriptor that indicates the current context.
      </para>
		</summary>
		<value>
			<para> An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that indicates the context currently
   in use, or <see langword="null"/> if no context is available.
   </para>
		</value>
	</doc><doc for="CollectionEditor.CollectionType">
		<summary>
			<para> Gets the data type of the collection object.</para>
		</summary>
		<value>
			<para>The data type of the collection object.</para>
		</value>
		<remarks>
			<para>This property represents the data type of the collection object.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CanSelectMultipleInstances">
		<summary>
			<para> Indicates whether multiple collection items can be selected at
      once.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if it 
   multiple collection members can be selected at the same
   time; otherwise, <see langword="false"/>. By default, this
   returns <see langword="true"/>.</para>
		</returns>
		<remarks>
			<para>This method indicates whether multiple collection members can be selected within the
      collection editor dialog box.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CreateCollectionForm">
		<summary>
			<para>Creates a new
      form to display and edit the current collection.</para>
		</summary>
		<returns>
			<para>An instance of <see cref="System.ComponentModel.Design.CollectionEditor.CollectionForm"/>
to provide as the user interface for
editing the collection.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      You can inherit from <see cref="System.ComponentModel.Design.CollectionEditor.CollectionForm"/>
      to provide your own form.
      
   </note>
		</remarks>
	</doc><doc for="CollectionEditor.DestroyInstance">
		<summary>
			<para> Destroys the specified instance of the object.
      </para>
		</summary>
		<param name="instance">The object to destroy. </param>
	</doc><doc for="CollectionEditor.GetItems">
		<summary>
			<para>Gets an array of objects containing the specified collection.</para>
		</summary>
		<param name="editValue">The collection to edit.</param>
		<returns>
			<para>An array containing the collection objects, or an empty object array if
      the specified collection does not inherit from <see cref="System.Collections.ICollection"/>.</para>
		</returns>
	</doc><doc for="CollectionEditor.GetService">
		<summary>
			<para> Gets the requested service, if it is available.
      </para>
		</summary>
		<param name="serviceType">The type of service to retrieve. </param>
		<returns>
			<para> An instance of the service, or <see langword="null"/> if the service cannot be
   found.
   </para>
		</returns>
	</doc><doc for="CollectionEditor.CollectionForm.NewItemTypes">
		<summary>
			<para>Gets the available item types that can be created for this collection.</para>
		</summary>
		<value>
			<para> The types of items that can be created.
      </para>
		</value>
		<remarks>
			<para>This property indicates the data types that can be added to the collection. 
      By default, this returns a single type of <see cref="System.ComponentModel.Design.CollectionEditor.CollectionItemType"/>. If more than one
      type is returned, the collection editor UI provides a way to choose which item
      type to create.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.GetService">
		<summary>
			<para> Gets the requested service, if it is available.
      </para>
		</summary>
		<param name="serviceType">The type of service to retrieve. </param>
		<returns>
			<para> An instance of the service, or <see langword="null"/>
if the service cannot be
found.</para>
		</returns>
	</doc><doc for="CollectionEditor.CollectionEditor">
		<summary>
			<para> Initializes a new instance of the <see cref="System.ComponentModel.Design.CollectionEditor"/> class using the
   specified collection type.
   </para>
		</summary>
		<param name="type">The type of the collection for this editor to edit. </param>
	</doc><doc for="CollectionEditor.CollectionItemType">
		<summary>
			<para> Gets the data type of each item in the collection.</para>
		</summary>
		<value>
			<para>The data type of the collection items.</para>
		</value>
		<remarks>
			<para>This property represents the data type of the items of the collection.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.CollectionItemType">
		<summary>
			<para> Gets the data type of each item in the collection.
      </para>
		</summary>
		<value>
			<para> The data type of the collection items.
      </para>
		</value>
		<remarks>
			<para> This property represents the data type of the items of the collection.
      </para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.CollectionType">
		<summary>
			<para> Gets the data type of the collection object.</para>
		</summary>
		<value>
			<para>The data type of the collection object.</para>
		</value>
		<remarks>
			<para>This property represents the data type of the collection object.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.Context">
		<summary>
			<para> Gets a type descriptor that indicates the current context.
      </para>
		</summary>
		<value>
			<para> An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that indicates the context currently in
   use, or <see langword="null"/> if no context is available.
   </para>
		</value>
	</doc><doc for="CollectionEditor.NewItemTypes">
		<summary>
			<para> Gets
      the available types of items that can be created for this collection.</para>
		</summary>
		<value>
			<para>The types of items that can be created.</para>
		</value>
		<remarks>
			<para> This property indicates the data types that
      can be added to the collection. By default, this returns a single type of <see cref="System.ComponentModel.Design.CollectionEditor.CollectionItemType"/>. If more than one type is returned, the collection
      editor UI provides a way to choose which item type to create.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CreateCollectionItemType">
		<summary>
			<para> Gets the
      data type that this collection contains.
      </para>
		</summary>
		<returns>
			<para> The data type of the items
      in the collection, or an instance of <see cref="System.Object"/> if no <see langword="Item"/> property can be located on the collection.
      </para>
		</returns>
		<remarks>
			<para> You can retrieve the data type of the items of the collection from the
   <see cref="System.ComponentModel.Design.CollectionEditor.CollectionItemType"/> property, which
      is faster than this method.</para>
			<para>This method does not need to be called by users, except in derived classes where
      this method has been overridden and implemented. </para>
			<para>The default implementation of this method returns the
      data type of the <see langword="Item"/> property of the collection, if it
      exists. </para>
			<note type="inotes">
      Developers
      can choose to override this method to support collections that do not
      follow the typical and supported collection model, or when performance is critical,
      and reflection-based type resolution is too slow.
      
   </note>
		</remarks>
	</doc><doc for="CollectionEditor.CreateNewItemTypes">
		<summary>
			<para> Gets the data types
      that this collection editor can contain.
      </para>
		</summary>
		<returns>
			<para> An array of data types that this collection can contain.
      </para>
		</returns>
		<remarks>
			<para>You can retrieve the data type of the items of the collection from the
   <see cref="System.ComponentModel.Design.CollectionEditor.NewItemTypes"/> property, which
      is faster than this method.</para>
			<para>This method does not need to be called by users, except in derived classes where
      this method has been overridden and implemented. </para>
			<para>The default implementation of this method returns the type of all the
      collection items in a Type array.</para>
			<note type="inheritinfo">
      This method
      must be overridden
      to support collections with multiple types. The default implementation of
      this method returns the data type of the <see langword="Item"/> property of the collection, if it
      exists. Use this method to override the default implementation.
      
   </note>
		</remarks>
	</doc><doc for="CollectionEditor.EditValue">
		<overload>
			<para>Edits the value of the specified object.</para>
		</overload>
		<summary>
			<para>Edits the value of the specified object using the specified service provider and context.</para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
		<param name="provider">A service provider object through which editing services can be obtained.</param>
		<param name="value">The object to edit the value of.</param>
		<returns>
			<para>The new value of the object. If the value of the object has not
      changed, this should return the same object it was passed.</para>
		</returns>
	</doc><doc for="CollectionEditor.ShowHelp">
		<summary>
			<para>Displays the default Help topic for the collection editor.</para>
		</summary>
	</doc><doc for="CollectionEditor.CollectionForm.Items">
		<summary>
			<para> Gets or sets
      the array of items for this form to display.
      </para>
		</summary>
		<value>
			<para> An array of objects for the form to display.
      </para>
		</value>
		<remarks>
			<para> The default implementation retrieves the current set of
      items from the <see langword="Item"/>
      property of the collection.
      </para>
		</remarks>
	</doc><doc for="CollectionEditor.CanRemoveInstance">
		<summary>
			<para> Indicates whether original members of the collection can be removed.</para>
		</summary>
		<param name="value">The value to remove.</param>
		<returns>
			<para><see langword="true"/> if it is permissible to remove this value from the collection; otherwise, <see langword="false"/> . The default
   implementation always returns <see langword="true"/>.</para>
		</returns>
		<remarks>
			<para> When implemented in a derived class, this method
      indicates whether the specified value can be removed from the collection. By
      default, this method always returns <see langword="true"/>.</para>
			<para> This method is called when the user tries
      to remove an item that is an original member of the collection. This method is not called
      when removing items that were added in the current editing session because they are
      not yet part of the collection.</para>
		</remarks>
	</doc><doc for="CollectionEditor.GetEditStyle">
		<overload>
			<para>Gets the edit style used by the <see cref="System.ComponentModel.Design.CollectionEditor.EditValue"/> method.</para>
		</overload>
		<summary>
			<para>Gets the edit style used by the <see cref="System.ComponentModel.Design.CollectionEditor.EditValue"/> method.</para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
		<returns>
			<para>A <see cref="System.Drawing.Design.UITypeEditorEditStyle"/> enumeration 
   value
   indicating the provided editing
   style. If the method is not supported in the specified context, this method will
   return the <see cref="System.Drawing.Design.UITypeEditorEditStyle.None"/>
   identifier.</para>
		</returns>
	</doc><doc for="CollectionEditor.CollectionForm.CanRemoveInstance">
		<summary>
			<para> Indicates whether you can remove the original members
      of the collection.</para>
		</summary>
		<param name="value">The value to remove.</param>
		<returns>
			<para><see langword="true"/> if it
   is permissible to remove this value from the collection;
   otherwise, <see langword="false"/>. By default, this method returns the value from
<see cref="System.ComponentModel.Design.CollectionEditor.CanRemoveInstance"/> of the <see cref="System.ComponentModel.Design.CollectionEditor"/> for this form. </para>
		</returns>
		<remarks>
			<para> When implemented in a derived class, this method indicates whether the
      specified value can be removed from the collection. By default, this returns the
      value from <see cref="System.ComponentModel.Design.CollectionEditor.CanRemoveInstance"/> of
      the <see cref="System.ComponentModel.Design.CollectionEditor"/>
      for this form.</para>
			<para> This method is called when the user tries to remove from the
      collection an item that is an original member of the collection. This method is
      not called when removing items that were added in this editing session, because they
      are not yet part of the collection.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.CanSelectMultipleInstances">
		<summary>
			<para> Indicates whether multiple collection items can be selected at
      once.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if it multiple collection members
   can be selected at the same time; otherwise, <see langword="false"/>. By default, this method returns the value from
<see cref="System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances"/> of the <see cref="System.ComponentModel.Design.CollectionEditor"/> for this form.</para>
		</returns>
		<remarks>
			<para>This method indicates whether multiple collection members can be selected within the
      collection editor dialog box.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.ShowEditorDialog">
		<summary>
			<para>Shows the dialog box for the collection editor using the
      specified <see cref="System.Windows.Forms.Design.IWindowsFormsEditorService"/> object.</para>
		</summary>
		<param name="edSvc">An <see cref="System.Windows.Forms.Design.IWindowsFormsEditorService"/> that can be used to show the dialog box.</param>
		<returns>
			<para>A <see cref="System.Windows.Forms.DialogResult"/> that indicates the result code
   returned from the dialog box.</para>
		</returns>
	</doc><doc for="CollectionEditor.CreateInstance">
		<summary>
			<para> Creates a new instance of the specified collection item type.
 </para>
		</summary>
		<param name="itemType">The type of item to create. </param>
		<returns>
			<para>A new instance of the specified object.</para>
		</returns>
		<remarks>
			<note type="inotes">
 This method
 should throw an exception if it cannot create a new instance of the specified
 type.
 </note>
		</remarks>
	</doc><doc for="CollectionEditor.SetItems">
		<summary>
			<para> Sets the specified array as the items of the collection.</para>
		</summary>
		<param name="editValue">The collection to edit.</param>
		<param name=" value">An array of objects to set as the collection items.</param>
		<returns>
			<para>The newly created collection object or, otherwise, the
 collection indicated by the <paramref name="editValue"/> parameter.</para>
		</returns>
		<remarks>
			<para> If setting requires that a new object be
 created, the new object is returned. Otherwise, the <paramref name="editValue"/>
 
 parameter is returned.</para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm">
		<summary>
			<para>Provides a modal dialog box for editing the contents of a
 collection using a <see cref="System.Drawing.Design.UITypeEditor"/>.</para>
		</summary>
		<remarks>
			<note type="inotes">
 
 You can provide implementations for the abstract methods on this form, together with your own user
 interface.
 
 </note>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.CreateInstance">
		<summary>
			<para> Creates a new instance of the specified collection item type.
 </para>
		</summary>
		<param name="itemType">The type of item to create. </param>
		<returns>
			<para>A new instance of the specified object, or <see langword="null"/> if the user
 chose to cancel the creation of this instance.</para>
		</returns>
		<remarks>
			<para> This method throws an exception if a new instance cannot be created. If
 the user chooses to cancel the creation of this instance, this method returns
 <see langword="null"/>. </para>
		</remarks>
	</doc><doc for="CollectionEditor.CollectionForm.OnEditValueChanged">
		<summary>
			<para>Provides an opportunity to perform processing when a collection value has
 changed.</para>
		</summary>
		<remarks>
			<para>This method is raised when the value of a collection
 item has changed.</para>
			<note type="inotes">
 In
 this method, update your user interface to reflect the current value.
 
 </note>
		</remarks>
	</doc><doc for="CollectionEditor.HelpTopic">
		<summary>
			<para>Gets the Help keyword to display the Help topic or topic 
      list for when the editor's dialog <SpecialLocalizableItem kind="UIElement">Help</SpecialLocalizableItem>
   button or the F1 key is
   pressed.</para>
		</summary>
		<value>
			<para>The Help keyword to display the Help topic or topic list for when Help is requested from the editor.</para>
		</value>
		<remarks>
			<para> Override this property to display a different Help topic.</para>
		</remarks>
	</doc>
	<doc for="CollectionEditor">
		<summary>
			<para> Provides a user interface that can edit most types of collections at design time.</para>
		</summary>
		<remarks>
			<note type="inheritinfo">
      This editor can edit collections that have an
   <see langword="Item"/> property. The editor can determine the type of the
      collection from the <see langword="Item"/>
      
      property, if it exists. If the collection does not have this property, or if you
      want to provide collections of more than one type, you can override certain
      protected members of this class to customize the editor to support other
      types of collections.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="EditorAttributesExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Design.UITypeEditor"/>
	</doc>
</docs>
