<docs>
	<doc for="AddRemoveComponentActionUnit">
		<summary>
			<para>Provides an action unit for undoing and redoing actions that create and destroy
       components on a form.</para>
		</summary>
		<remarks>
			<para><see cref="System.ComponentModel.Design.AddRemoveComponentActionUnit"/>is an undo unit designed to be 
    used only in the event of actually performing an undo. In other words, this unit
    is not designed to do the "initial do".</para>
		</remarks>
		<seealso cref="System.ComponentModel.Design.IActionUnit"/>
	</doc>
	<doc for="AddRemoveComponentActionUnit.Comparer">
		<summary>
			<para>Gets or sets the comparer to use.</para>
		</summary>
		<value>
			<para>An <see cref="System.Collections.IComparer"/> that indicates the comparer to use.</para>
		</value>
	</doc>
	<doc for="AddRemoveComponentActionUnit.ComponentName">
		<summary>
			<para>Gets or sets the component name.</para>
		</summary>
		<value>
			<para>The name of the component the action is occurring on.</para>
		</value>
	</doc>
	<doc for="AddRemoveComponentActionUnit.Description">
		<summary>
			<para>Gets a description about this action.</para>
		</summary>
	</doc>
	<doc for="AddRemoveComponentActionUnit.DesignerHost">
		<summary>
			<para>Gets or sets the designer host.</para>
		</summary>
		<value>
			<para>An <see cref="System.ComponentModel.Design.IDesignerHost"/> that indicates the designer 
    host.</para>
		</value>
	</doc>
	<doc for="AddRemoveComponentActionUnit.NextActionType">
		<summary>
			<para>Gets the current mode for this undo action.</para>
		</summary>
	</doc>
	<doc for="AddRemoveComponentActionUnit.CreateControlHierarchy">
		<summary>
     Invoked to save our component state -- since destroying a control will also
     destroy its children, we need to walk here and save the children too.  Also,
     we need to walk in child-to-parent order, so children don't get destroyed
     by their parents.
 </summary>
	</doc>
	<doc for="AddRemoveComponentActionUnit.DoAction">
		<summary>
			<para> Performs or redoes the undo action.</para>
		</summary>
	</doc>
	<doc for="AddRemoveComponentActionUnit.DoRedoAction">
		<summary>
			<para> 
       Redoes the
       action.</para>
		</summary>
		<remarks>
			<para>Because it may be necessary to redo child actions as well, the 
    <paramref name="components"/> parameter exists so the parent control can be passed in.</para>
		</remarks>
	</doc>
	<doc for="AddRemoveComponentActionUnit.GetDesignTimeProperties">
		<summary>
			<para> Gets the design time only properties that are stored in the
       hashtable, and sets them to the component.</para>
		</summary>
	</doc>
	<doc for="AddRemoveComponentActionUnit.SaveComponentState">
		<summary>
			<para>Creates a series of child undo units for all children of this control.</para>
		</summary>
		<remarks>
			<para>This method should be called right before the component is destroyed. Each 
       child unit is put in the redo state so that calling it will recreate the
       component.</para>
		</remarks>
	</doc>
	<doc for="AddRemoveComponentActionUnit.SaveDesignTimeProperties">
		<summary>
      This extracts all of the valid design time properties from the component and stores them in
      a hashtable, in case we need to re-create it.
 </summary>
	</doc>
	<doc for="AddRemoveComponentActionUnit.AddRemoveComponentActionUnit">
		<summary>
			<para>Creates a new action unit.</para>
		</summary>
		<param name="host">The designer host for the document.</param>
		<param name="component">The component that has just been created or destroyed.</param>
		<param name="deleteAction">If <see langword="true"/> , this action is being used as a delete, rather than a create. Since these two operations are just the exact opposite of each other, we just use the same unit. NOTE: This is wrong because a delete action needs to persist properties for the component.</param>
		<remarks>
			<para>This undo unit is used when creating a component. It should always be created
      after the actual create has ocurred, as it is only designed to undo an
      operation, not instigate it.</para>
		</remarks>
	</doc><doc for="AddRemoveComponentActionUnit.FindComponent">
		<summary>
			<para> Locates the control with the specified name.</para>
		</summary>
		<returns>
			<para>The component with the specified name, if the component can be
      found. If no control with the specified name could be found, the base
      component will be returned. If the base component isn't a control either,
      this will return <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>If no control with this name can be found, this will 
      return the base component. If the base component isn't a control either, then
      this will return <see langword="null"/>
      .</para>
		</remarks>
	</doc></docs>
