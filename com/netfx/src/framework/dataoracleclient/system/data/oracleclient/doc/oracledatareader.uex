<docs>
	<doc for="OracleDataReader.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleDataReader.GetIndexTable">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleDataReader.Depth">
		<summary>
			<para> Gets a value indicating the depth of nesting for the current row.</para>
		</summary>
		<value>
			<para> The depth of nesting for the current row.</para>
		</value>
		<remarks>
			<para>The outermost table has a depth of zero.</para>
		</remarks>
	</doc><doc for="OracleDataReader.Dispose">
		<summary>
			<para>Frees resources before the <see cref="System.Data.OracleClient.OracleDataReader"/> is reclaimed by the
   Garbage Collector.</para>
		</summary>
	</doc><doc for="OracleDataReader.GetFieldType">
		<summary>
			<para>Gets the <see cref="System.Type"/>
that is the data type of the object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The <see cref="System.Type"/>
that is the data type of the object.</para>
		</returns>
	</doc><doc for="OracleDataReader.GetName">
		<summary>
			<para>Gets the name of the specified column.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A string that is the name of the specified column.</para>
		</returns>
		<seealso cref="System.Data.OracleClient.OracleDataReader.GetOrdinal"/>
	</doc><doc for="OracleDataReader.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleDataReader.GetValue">
		<overload>
			<para>Gets the value of the specified column in its native format.</para>
		</overload>
		<summary>
			<para> Gets the
      value of the column at the specified ordinal in its native format.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value to return.</para>
		</returns>
		<remarks>
			<para> This method returns <see cref="System.DBNull"/> for
   null database columns.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetDataTypeName">
		<summary>
			<para>Gets the name of the source data type.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The name of the source data type.</para>
		</returns>
	</doc><doc for="OracleDataReader.GetValues">
		<summary>
			<para> Gets all the attribute columns in the current
      row.</para>
		</summary>
		<param name="values">An array of type <see cref="System.Object"/> into which to copy the attribute columns.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, the <see cref="System.Data.OracleClient.OracleDataReader.GetValues"/> method provides an efficient means for retrieving all columns, rather than retrieving
   each column individually.</para>
			<para>You can pass an <see cref="System.Object"/> array that contains fewer than the
number of columns contained in the resulting row. Only the amount of data
the <see cref="System.Object"/> array
holds is copied to the array. You can also pass an <see cref="System.Object"/>
array whose length is more than the
number of columns contained in the resulting row.</para>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</remarks>
	</doc><doc for="OracleDataReader.FieldCount">
		<summary>
			<para> Gets the number of columns in the current row.
      </para>
		</summary>
		<value>
			<para> When not positioned in a valid record set, 0; otherwise the number of columns
      in the current record. The default is -1.
      </para>
		</value>
		<exception cref="System.NotSupportedException">There is no current connection to a data source. </exception>
		<remarks>
			<para>After executing a query that does not return rows, <see cref="System.Data.OracleClient.OracleDataReader.FieldCount"/>
returns 0. </para>
		</remarks>
	</doc><doc for="OracleDataReader.IsDBNull">
		<summary>
			<para> Gets a value indicating whether the column contains non-existent or missing values.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para><see langword="true"/> if the specified
   column value is equivalent to <see cref="System.DBNull"/> ;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>To avoid raising an error, call this method to check for null column values before calling
      the typed Get methods (for example,
      <see cref="System.Data.OracleClient.OracleDataReader.GetByte"/>, <see cref="System.Data.OracleClient.OracleDataReader.GetChar"/>, and so on).</para>
		</remarks>
	</doc><doc for="OracleDataReader.IsClosed">
		<summary>
			<para> Indicates whether the <see cref="System.Data.OracleClient.OracleDataReader"/>
is closed.
</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   the <see cref="System.Data.OracleClient.OracleDataReader"/> is closed;
   otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para><see cref="System.Data.OracleClient.OracleDataReader.IsClosed"/>
and <see cref="System.Data.OracleClient.OracleDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.OracleClient.OracleDataReader"/> is closed. </para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.this">
		<overload>
			<para> Gets the value of
      a column in its native format.
      </para>
		</overload>
		<summary>
			<para>      Gets the value of the specified column in its native format given
      the column ordinal.
      </para>
		</summary>
		<param name="i">The column ordinal. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="OracleDataReader.this1">
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column name.
      </para>
		</summary>
		<param name="value">The column name. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">No column with the specified name was found.</exception>
		<remarks>
			<para>A case-sensitive lookup is performed first. If it fails, a second
      case-insensitive search is made.</para>
			<para>This method is kana-width insensitive.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.Item1">
		<overload>
			<para> Gets the value of
      a column in its native format.
      </para>
		</overload>
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column ordinal.
      </para>
		</summary>
		<param name="i">The column ordinal. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="System.Data.IDataRecord.FieldCount"/>.</exception>
	</doc>
	<doc for="OracleDataReader.Item2">
		<summary>
			<para> Gets the value of the specified column in its native format given
      the column name.
      </para>
		</summary>
		<param name="name">The column name. </param>
		<value>
			<para> The value of the specified column in its native format.
      </para>
		</value>
		<exception cref="System.IndexOutOfRangeException">No column with the specified name was found.</exception>
		<remarks>
			<para>A case-sensitive lookup is performed first. If it fails, a second
      case-insensitive search is made.</para>
			<para>This method is kana-width insensitive.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetBoolean">
		<summary>
			<para>Gets the value of the specified column as a Boolean.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>A Boolean that is the value of the column.</para>
		</returns>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetByte">
		<summary>
			<para>Gets the value of the specified column as a byte.</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a byte.</para>
		</returns>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetChar">
		<summary>
			<para>Gets the value of the specified column as a character.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a character.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetDateTime">
		<summary>
			<para>Gets the value of the specified column as a
      <see langword="DateTime"/>
   object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a
      <see langword="DateTime"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetDecimal">
		<summary>
			<para>Gets the value of the specified column as a
      <see langword="Decimal"/>
   object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a
      <see langword="Decimal"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetDouble">
		<summary>
			<para>Gets the value of the specified column as a double-precision floating point number.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a double-precision
      floating point number.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetFloat">
		<summary>
			<para> Gets the value of the specified column as a single-precision floating-point number.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a single-precision
      floating-point number.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetGuid">
		<summary>
			<para>Gets the value of the specified column as a globally-unique identifier (GUID).</para>
		</summary>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a GUID.</para>
		</returns>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetInt16">
		<summary>
			<para>Gets the
      value of the specified column as a 16-bit signed integer.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 16-bit signed
      integer.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetInt64">
		<summary>
			<para>Gets the
      value of the specified column as a 64-bit signed integer.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 64-bit signed
      integer.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetString">
		<summary>
			<para>Gets the value of the specified column as a string.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a string.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleBFile">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleBFile"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleBFile"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleBinary">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleBinary"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleBinary"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleDateTime">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleDateTime"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleDateTime"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleLob">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleLob"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleLob"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleNumber">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleNumber"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleNumber"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleString">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleString"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleString"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleValue">
		<overload>
			<para>Gets the value of the specified column in its Oracle format.</para>
		</overload>
		<summary>
			<para> Gets the
      value of the column at the specified ordinal in its Oracle format.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The Oracle value to return.</para>
		</returns>
		<remarks>
			<para> This method returns <see cref="System.DBNull"/> for
   null database columns.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleValues">
		<summary>
			<para> Gets all the attribute columns in the current
      row in Oracle format.</para>
		</summary>
		<param name="values">An array of type <see cref="System.Object"/> into which to copy the attribute columns.</param>
		<returns>
			<para>The number of instances of <see cref="System.Object"/> in the array.</para>
		</returns>
		<remarks>
			<para>For most applications, the <see cref="System.Data.OracleClient.OracleDataReader.GetOracleValues"/> method provides an efficient means for retrieving all columns, rather than retrieving
   each column individually.</para>
			<para>You can pass an <see cref="System.Object"/> array that contains fewer than the
number of columns contained in the resulting row. Only the amount of data
the <see cref="System.Object"/> array
holds is copied to the array. You can also pass an <see cref="System.Object"/>
array whose length is more than the
number of columns contained in the resulting row.</para>
			<para>This method returns <see cref="System.DBNull"/> for null database columns.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetTimeSpan">
		<summary>
			<para>Gets the value of the specified column as a 
   <see langword="System.TimeSpan"/> .</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 
   <see langword="System.TimeSpan"/> .</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleMonthSpan">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleMonthSpan"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleMonthSpan"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetOracleTimeSpan">
		<summary>
			<para>Gets the value of the specified column as an <see cref="System.Data.OracleClient.OracleTimeSpan"/> object.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as an <see cref="System.Data.OracleClient.OracleTimeSpan"/> object.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.Rowid">
		<summary>
			<para>Gets a base64 string representation of the actual row ID in the server.</para>
		</summary>
		<remarks>
			<para> A client application sends <see langword="Rowid"/> to a server in lieu of a key
   column value. </para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.Read">
		<summary>
			<para>Advances the <see cref="System.Data.OracleClient.OracleDataReader"/>
to the next record.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more rows; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The default position of the <see cref="System.Data.OracleClient.OracleDataReader"/> is prior to the first record.
   Therefore, you must call <see cref="System.Data.OracleClient.OracleDataReader.Read"/>
   to
   begin accessing any data.</para>
			<para>More than one <see cref="System.Data.OracleClient.OracleDataReader"/> can be open at any 
given time.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/>, an <see cref="System.Data.OracleClient.OracleCommand"/>, and an <see cref="System.Data.OracleClient.OracleDataReader"/>. The example reads through the data, writing it out to the console. Finally, the example closes the <see cref="System.Data.OracleClient.OracleDataReader"/>, then the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
			<codelink SampleID="Classic WebData IDataReader.Read Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleDataReader.HasRows">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Data.OracleClient.OracleDataReader"/> contains one or more rows.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.OracleClient.OracleDataReader"/> contains one or more rows;
   otherwise <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="OracleDataReader.RecordsAffected">
		<summary>
			<para> Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</para>
		</summary>
		<value>
			<para>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected, or the statement failed.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleDataReader.RecordsAffected"/>
property is not set until all rows are read and you close the <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
			<para><see cref="System.Data.OracleClient.OracleDataReader.IsClosed"/>
and <see cref="System.Data.OracleClient.OracleDataReader.RecordsAffected"/>
are the only properties that you can call after the <see cref="System.Data.OracleClient.OracleDataReader"/> is closed.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetInt32">
		<summary>
			<para>Gets the
      value of the specified column as a 32-bit signed integer.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>The value of the specified column as a 32-bit signed
      integer.</para>
		</returns>
		<exception cref="System.InvalidCastException"><para> The specified cast is not valid.</para></exception>
		<remarks>
			<para>Call <see cref="System.Data.OracleClient.OracleDataReader.IsDBNull"/> to check for null values before
   calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.NextResult">
		<summary>
			<para> Advances the <see cref="System.Data.OracleClient.OracleDataReader"/> 
to the next result
</para>
		</summary>
		<returns>
			<para><see langword="true"/> if there are more result sets; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>You must use a <see langword="REF CURSOR"/> when calling this method.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetBytes">
		<summary>
			<para> Reads a stream of bytes from the specified column offset into
      the
      buffer as an array, starting at the given buffer offset.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" fieldOffset">The index within the field where the read operation is to begin. </param>
		<param name=" buffer2">The buffer into which to read the stream of bytes. </param>
		<param name=" bufferoffset">The index where <paramref name="buffer"/> is to begin the write operation. </param>
		<param name=" length">The number of bytes to read. </param>
		<returns>
			<para>The actual number of bytes read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.OracleClient.OracleDataReader.GetBytes"/> returns the number of available
   bytes in the field. In most cases this is the exact length of the field.
   However, the number returned may be less than the true length of the field if
<see langword="GetBytes"/> has already been used to obtain bytes from the field. 
   This may be the case, for example, if the <see cref="System.Data.OracleClient.OracleDataReader"/> is reading a large data
   structure into a buffer. For more information, see the
<see langword="SequentialAccess"/> setting of <see cref="System.Data.CommandBehavior"/>.</para>
			<para> If you pass a buffer that is
   a null value, <see cref="System.Data.OracleClient.OracleDataReader.GetBytes"/>
   returns the length of the field in bytes.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetChars">
		<summary>
			<para>Reads a stream of characters from the specified column offset
      into the buffer as an array, starting at the given buffer offset.</para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<param name=" fieldOffset">The index within the row where the read operation is to begin. </param>
		<param name=" buffer2">The buffer into which to copy data. </param>
		<param name=" bufferoffset">The index where <paramref name="buffer"/> is to begin the write operation.</param>
		<param name=" length">The number of characters to read. </param>
		<returns>
			<para>The actual number of characters read.</para>
		</returns>
		<remarks>
			<para><see cref="System.Data.OracleClient.OracleDataReader.GetChars"/> returns the number of
   available characters in the field. In most cases this is the exact length of the
   field. However, the number returned may be less than the true length of the
   field if <see langword="GetChars"/> has already been used to obtain characters from
   the field. This may be the case, for example, if the <see cref="System.Data.OracleClient.OracleDataReader"/> is reading a large data structure into a
   buffer. For more information, see the <see langword="SequentialAccess"/> setting
   of <see cref="System.Data.CommandBehavior"/>.</para>
			<para> If you pass a buffer that
   is a null value. <see cref="System.Data.OracleClient.OracleDataReader.GetChars"/>
   returns the length of the field in characters.</para>
		</remarks>
	</doc>
	<doc for="OracleDataReader.GetData">
		<summary>
			<para> Not currently supported.
      </para>
		</summary>
		<param name="i">The zero-based column ordinal. </param>
		<returns>
			<para>Not currently supported.</para>
		</returns>
	</doc>
	<doc for="OracleDataReader">
		<summary>
			<para> Provides a way of reading
      a forward-only stream of data rows from a data source. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para>To create an <see cref="System.Data.OracleClient.OracleDataReader"/>, you must call
   the <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> method of the <see cref="System.Data.OracleClient.OracleCommand"/>
   
   object, rather than directly using a constructor.</para>
			<para>Changes made to a resultset by another process or thread while data is being
   read may be visible to the user of the <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
			<para><see cref="System.Data.OracleClient.OracleDataReader.IsClosed"/> and <see cref="System.Data.OracleClient.OracleDataReader.RecordsAffected"/> are the
only properties that you can call after the <see cref="System.Data.OracleClient.OracleDataReader"/> is closed. In some cases, you must call <see cref="System.Data.OracleClient.OracleDataReader.Close"/> before you can call <see cref="System.Data.OracleClient.OracleDataReader.RecordsAffected"/>.</para>
			<para>More than one <see cref="System.Data.OracleClient.OracleDataReader"/> can be open at any given time.</para>
			<para>The following two Visual Basic examples demonstrate how to use an
<see cref="System.Data.OracleClient.OracleDataReader"/> to 
   retrieve an Oracle <see langword="REF CURSOR"/> .
   These examples use tables that are defined in the Oracle Scott/Tiger schema,
   and require the following PL/SQL package and package body. You must create
   these on your server to use the examples.</para>
			<para>Create the following Oracle package on the Oracle server.</para>
			<code>
CREATE OR REPLACE PACKAGE CURSPKG AS 
    TYPE T_CURSOR IS REF CURSOR; 
    PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER, 
                               IO_CURSOR IN OUT T_CURSOR); 
    PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR, 
                                DEPTCURSOR OUT T_CURSOR);
END CURSPKG;
/
</code>
			<para>Create the following Oracle package body on the Oracle server. </para>
			<code>
CREATE OR REPLACE PACKAGE BODY CURSPKG AS
    PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,
                               IO_CURSOR IN OUT T_CURSOR)
    IS 
        V_CURSOR T_CURSOR; 
    BEGIN s 
        THEN
             OPEN V_CURSOR FOR 
             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME 
                  FROM EMP, DEPT 
                  WHERE EMP.DEPTNO = DEPT.DEPTNO 
                  AND EMP.EMPNO = N_EMPNO;

        ELSE 
             OPEN V_CURSOR FOR 
             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME 
                  FROM EMP, DEPT 
                  WHERE EMP.DEPTNO = DEPT.DEPTNO;

        END IF;
        IO_CURSOR := V_CURSOR; 
    END OPEN_ONE_CURSOR; 

    PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,
                                DEPTCURSOR OUT T_CURSOR)
    IS 
        V_CURSOR1 T_CURSOR; 
        V_CURSOR2 T_CURSOR; 
    BEGIN 
        OPEN V_CURSOR1 FOR SELECT * FROM EMP;
        OPEN V_CURSOR2 FOR SELECT * FROM DEPT;
        EMPCURSOR  := V_CURSOR1; 
        DEPTCURSOR := V_CURSOR2; 
    END OPEN_TWO_CURSORS; 
END CURSPKG;
/
</code>
			<para>This Visual Basic example executes a PL/SQL stored
   procedure that returns a <see langword="REF CURSOR"/>
   parameter, and reads the value as an
<see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
			<code lang="VB">Private Sub Button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim connString As New String("Data Source=Oracle8i;Integrated Security=yes")

    Dim conn As New OracleConnection(connString)

    conn.Open()

    Dim cmd As New OracleCommand()

    cmd.Connection = conn
    cmd.CommandText = "CURSPKG.OPEN_ONE_CURSOR"
    cmd.CommandType = CommandType.StoredProcedure
    cmd.Parameters.Add(New OracleParameter("N_EMPNO", OracleType.Number)).Value = 7369
    cmd.Parameters.Add(New OracleParameter("IO_CURSOR", OracleType.Cursor)).Direction = ParameterDirection.Output

    Dim rdr As OracleDataReader

    rdr = cmd.ExecuteReader()

    While (rdr.Read())
        REM do something with the values
    End While

    rdr.Close()
    conn.Close()

End Sub
</code>
			<para>This Visual Basic example executes a PL/SQL stored
   procedure that returns two <see langword="REF CURSOR"/>
   parameters, and reads the values using
   an <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
			<code lang="VB">Private Sub Button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim connString As New String("Data Source=Oracle8i;Integrated Security=yes")

    Dim ds As New DataSet()
    Dim conn As New OracleConnection(connString)
    Dim cmd As New OracleCommand()

    conn.Open()

    cmd.Connection = conn
    cmd.CommandText = "CURSPKG.OPEN_TWO_CURSORS"
    cmd.CommandType = CommandType.StoredProcedure
    cmd.Parameters.Add(New OracleParameter("EMPCURSOR", OracleType.Cursor)).Direction = ParameterDirection.Output
    cmd.Parameters.Add(New OracleParameter("DEPTCURSOR", OracleType.Cursor)).Direction = ParameterDirection.Output

    Dim rdr As OracleDataReader

    rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection)

    While (rdr.Read())
        REM do something with the values from the EMP table 
    End While

    rdr.NextResult()

    While (rdr.Read())
        REM do something with the values from the DEPT table 
    End While

    rdr.Close()
End Sub
</code>
			<para>This C# example creates an Oracle table and loads it with data. You must run this example prior to running the subsequent example, which demonstrates
   using an <see cref="System.Data.OracleClient.OracleDataReader"/> to access the data using OracleType structures.</para>
			<code lang="C#">public void Setup(string connectionString)
   {
   OracleConnection conn = new OracleConnection(connectionString);
   try
      {
      conn.Open();
      OracleCommand cmd = conn.CreateCommand();
      cmd.CommandText ="CREATE TABLE OracleTypesTable (MyVarchar2 varchar2(3000),MyNumber number(28,4) PRIMARY KEY ,MyDate date, MyRaw raw(255))";
      cmd.ExecuteNonQuery();
      cmd.CommandText ="INSERT INTO OracleTypesTable VALUES ( 'test', 2, to_date('2000-01-11 12:54:01','yyyy-mm-dd hh24:mi:ss'), '0001020304' )";
      cmd.ExecuteNonQuery();
      cmd.CommandText="SELECT * FROM OracleTypesTable";
      }
   catch(Exception)
   {
   }
   finally
   {
      conn.Close();
   }
}
</code>
			<para>This C# example uses an <see cref="System.Data.OracleClient.OracleDataReader"/> to access data, and uses several OracleType structures to display the data.</para>
			<code lang="C#">public void ReadOracleTypesExample(string connectionString)
   {
   OracleConnection myConnection = new OracleConnection(connectionString);
   myConnection.Open();
   OracleCommand myCommand = myConnection.CreateCommand();

   try
      {
      myCommand.CommandText = "SELECT * from OracleTypesTable";
      OracleDataReader oracledatareader1 = myCommand.ExecuteReader();
      oracledatareader1.Read();

      //Using the oracle specific getters for each type is faster than
      //using GetOracleValue.

      //First column, MyVarchar2, is a VARCHAR2 data type in Oracle Server
      //and maps to OracleString.
      OracleString oraclestring1 = oracledatareader1.GetOracleString(0);
      Console.WriteLine("OracleString " + oraclestring1.ToString());

      //Second column, MyNumber, is a NUMBER data type in Oracle Server
      //and maps to OracleNumber.
      OracleNumber oraclenumber1 = oracledatareader1.GetOracleNumber(1);
      Console.WriteLine("OracleNumber " + oraclenumber1.ToString());

      //Third column, MyDate, is a DATA data type in Oracle Server
      //and maps to OracleDateTime.
      OracleDateTime oracledatetime1 = oracledatareader1.GetOracleDateTime(2);
      Console.WriteLine("OracleDateTime " + oracledatetime1.ToString());

      //Fourth column, MyRaw, is a RAW data type in Oracle Server and
      //maps to OracleBinary.
      OracleBinary oraclebinary1 = oracledatareader1.GetOracleBinary(3);
      //Calling value on a null OracleBinary throws
      //OracleNullValueException; therefore, check for a null value.
      if (oraclebinary1.IsNull==false)
      {
         foreach(byte b in oraclebinary1.Value)
         {
            Console.WriteLine("byte " + b.ToString());
         }
      }
      oracledatareader1.Close();
   }
   catch(Exception e)
   {
       Console.WriteLine(e.ToString());
   }
   finally
   {
       myConnection.Close();
   }
}
</code>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/>, an <see cref="System.Data.OracleClient.OracleCommand"/>,
   and an <see cref="System.Data.OracleClient.OracleDataReader"/>. The example reads through the data, writing it
   out to the console. Finally, the example closes the <see cref="System.Data.OracleClient.OracleDataReader"/>,
   then the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
			<codelink SampleID="Classic WebData OracleDataReader" SnippetID="1"/>
		</example>
	</doc><doc for="OracleDataReader.GetOrdinal">
		<summary>
			<para>Gets the column ordinal, given the name of the column.</para>
		</summary>
		<param name="name">The name of the column.</param>
		<returns>
			<para>The zero-based column ordinal.</para>
		</returns>
		<remarks>
			<para><see langword="GetOrdinal"/> performs a case-sensitive lookup first. If it
   fails, a second case-insensitive search is made.</para>
			<para><see langword="GetOrdinal"/> is kana-width insensitive.</para>
			<para>Because ordinal-based lookups are more efficient than named lookups, it is
   inefficient to call <see langword="GetOrdinal"/> within a loop. Instead,
   call <see langword="GetOrdinal"/> once and then assign the results to an integer
   variable for use within the loop.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Data.OracleClient.OracleDataReader.GetOrdinal"/> 
method.</para>
			<codelink SampleID="Classic WebData OracleDataReader.GetOrdinal" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataReader.GetName"/>
	</doc><doc for="OracleDataReader.GetEnumerator">
		<summary>
			<para>This member supports the .NET Framework infrastructure
      and is not intended to be used directly from your code.</para>
		</summary>
		<returns>
			<para>Not currently supported.</para>
		</returns>
	</doc><doc for="OracleDataReader.Close">
		<summary>
			<para>Closes the <see cref="System.Data.OracleClient.OracleDataReader"/> object.</para>
		</summary>
		<remarks>
			<para>More than one <see cref="System.Data.OracleClient.OracleDataReader"/> can be open at any given time.</para>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
	</doc><doc for="OracleDataReader.GetSchemaTable">
		<summary>
			<para>Returns a <see langword="DataTable"/> that describes the column metadata
   of the <see cref="System.Data.OracleClient.OracleDataReader"/>. </para>
		</summary>
		<returns>
			<para>A <see langword="DataTable"/> that describes the column metadata.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.OracleClient.OracleDataReader"/> is closed.</exception>
		<remarks>
			<para> The <see cref="System.Data.OracleClient.OracleDataReader.GetSchemaTable"/>
method returns metadata about each column
in the following order:</para>
			<list type="table">
				<listheader>
					<term> DataReader Column</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> ColumnName</term>
					<description> The name of the column; this might not be unique. If the column name cannot be determined, a null value is returned. This name always reflects the most recent naming of the column in the current view or command text.</description>
				</item>
				<item>
					<term> ColumnOrdinal</term>
					<description>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other columns are numbered starting with 1. This column cannot contain a null value.</description>
				</item>
				<item>
					<term> ColumnSize</term>
					<description>The maximum possible length of a value in the column. For columns that use a fixed-length data type, this is the size of the data type. </description>
				</item>
				<item>
					<term> NumericPrecision</term>
					<description> If
      <see cref="System.Data.DbType"/> is a numeric data 
         type, this is the maximum precision of the column. The precision depends on the definition of the column.</description>
				</item>
				<item>
					<term> NumericScale</term>
					<description> If
      <see cref="System.Data.DbType"/>
      is a numeric data type, the number of digits to the right of the decimal point.</description>
				</item>
				<item>
					<term> DataType</term>
					<description>Maps to the common language runtime type of
   <see cref="System.Data.DbType"/>.</description>
				</item>
				<item>
					<term> IsLong</term>
					<description><see langword="true"/> if the column contains a Binary Long Object (BLOB)
   that contains very long data.</description>
				</item>
				<item>
					<term> AllowDBNull</term>
					<description><see langword="true"/> if the consumer can set the
   column to a null value;
   otherwise, <see langword="false"/>. A column may contain null
   values, even if it cannot be set to a null value.</description>
				</item>
				<item>
					<term> IsUnique</term>
					<description><see langword="true"/>: No two rows in the base
   table-the table returned in BaseTableName-can have the same value in this
   column. IsUnique is guaranteed to be <see langword="true"/> if the column
   constitutes a key by itself or if there is a constraint of type UNIQUE
   that applies only to this column. <see langword="false"/>: The column can
   contain duplicate values in the base table. The default for this column is
<see langword="false"/>.</description>
				</item>
				<item>
					<term> IsKey</term>
					<description><see langword="true"/>: The column is one of a set of
   columns in the rowset that, taken together, uniquely identify the row. The
   set of columns with IsKey set to <see langword="true"/> must uniquely
   identify a row in the rowset. There is no requirement that this set of
   columns is a minimal set of columns. This set of columns may be generated
   from a base table primary key, a unique constraint or a unique index.
<see langword="false"/> : The column is not required to uniquely identify the row.</description>
				</item>
				<item>
					<term> BaseTableName</term>
					<description>The name of the table or view in the data store that
      contains the column. A null value if the base table name cannot be
      determined. The default of this column is a null value.</description>
				</item>
				<item>
					<term> BaseColumnName</term>
					<description> The name of the column in the data store. This might
      be different than the column name returned in the ColumnName column if
      an alias was used. A null value if the base column name cannot be
      determined or if the rowset column is derived, but not identical to, a column in
      the data store. The default for this column is a null value.</description>
				</item>
				<item>
					<term> BaseSchemaName</term>
					<description>The name of the schema in the data store that
      contains the column. A null value if the base schema name cannot be determined.
      The default for this column is a null value.</description>
				</item>
			</list>
			<para>A row will be returned for every column in the results set.</para>
			<note type="note">
   To ensure that metadata columns
   return the correct information, you must call <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> with
   the <paramref name="behavior"/> parameter set to <SpecialLocalizableItem kind="UIElement">KeyInfo</SpecialLocalizableItem> . Otherwise, some of
the columns in the schema table may return default, null, or incorrect
data.
</note>
		</remarks>
	</doc></docs>
