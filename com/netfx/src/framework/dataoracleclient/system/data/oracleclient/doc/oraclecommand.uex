<docs>
	<doc for="OracleCommand.IDbCommand.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleCommand.IDbCommand.Parameters">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleCommand.ICloneable.Clone">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleCommand.IDbCommand.CreateParameter">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleCommand.IDbCommand.ExecuteReader">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleCommand.IDbCommand.ExecuteReader1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleCommand.Connection">
		<summary>
			<para>Gets or sets the <see cref="System.Data.OracleClient.OracleConnection"/>
used by this instance of the <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
		</summary>
		<value>
			<para>The connection to a database. The default is a null
      value.</para>
		</value>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.OracleClient.OracleCommand.Connection"/> property was changed while a transaction was in progress.</exception>
		<remarks>
			<para>You cannot set the <see cref="System.Data.OracleClient.OracleCommand.Connection"/>, <see cref="System.Data.OracleClient.OracleCommand.CommandType"/>, and <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> properties if the current
   connection is performing an execute or fetch operation. </para>
			<para>If you set <see cref="System.Data.OracleClient.OracleCommand.Connection"/> while a
transaction is in progress and the <see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property is not
null, an <see cref="System.InvalidOperationException"/> is generated. If you set
<see cref="System.Data.OracleClient.OracleCommand.Connection"/> after the transaction has been 
committed or rolled back, and the <see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property is not null, the
<see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property is then set to a null value.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.Connection" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandText"/>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandTimeout"/>
		<seealso cref="System.Data.IDbCommand.CommandType"/>
	</doc><doc for="OracleCommand.Cancel">
		<summary>
			<para>Attempts to cancel the execution of an <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
		</summary>
		<remarks>
			<para>If there is nothing to cancel, nothing happens. However,
      if there is a command in process, and the attempt to cancel fails, no exception is generated.</para>
		</remarks>
		<example>
			<para>The
      following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>, executes it, then cancels the
      execution. To accomplish this, the method is passed a string that is an SQL
      SELECT statement and a string to use to connect
      to the database.</para>
			<codelink SampleID="Classic WebData OracleCommand.Cancel" SnippetID="1"/>
		</example>
	</doc><doc for="OracleCommand.ExecuteReader">
		<overload>
			<para> Sends the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> to the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and builds an <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
		</overload>
		<summary>
			<para>Sends the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> to the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and builds an <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>You should set the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property to the
   full Oracle call syntax for stored procedures. The command executes this stored
   procedure when you call <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/>.</para>
While the <see cref="System.Data.OracleClient.OracleDataReader"/> is in use, the associated <see cref="System.Data.OracleClient.OracleConnection"/> is busy serving the <see cref="System.Data.OracleClient.OracleDataReader"/>. While in this state, no other operatons can
be performed on the <see cref="System.Data.OracleClient.OracleConnection"/> other than closing it. This is the case until
the <see cref="System.Data.OracleClient.OracleDataReader.Close"/> method of the <see cref="System.Data.OracleClient.OracleDataReader"/>
is called.
</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
, then executes it by passing a string that is
an SQL SELECT statement, and a string to use to connect to the database.</para>
			<codelink SampleID="Classic WebData OracleCommand.ExecuteReader1" SnippetID="1"/>
		</example>
	</doc><doc for="OracleCommand.ResetCommandTimeout">
		<summary>
			<para> Resets the <see cref="System.Data.OracleClient.OracleCommand.CommandTimeout"/> property to the default value.
   </para>
		</summary>
		<remarks>
			<para>The default value of the <see cref="System.Data.OracleClient.OracleCommand.CommandTimeout"/> is 30
   seconds.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>, sets the <see cref="System.Data.OracleClient.OracleCommand.CommandTimeout"/>, displays the property, resets the <see cref="System.Data.OracleClient.OracleCommand.CommandTimeout"/>
, and displays the property
again. To accomplish this, the method is passed a string that is an SQL SELECT
statement and a string to use to connect to the database.</para>
			<codelink SampleID="Classic WebData OracleCommand.ResetCommandTimeout" SnippetID="1"/>
		</example>
	</doc><doc for="OracleCommand.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged and, optionally, the managed
      resources used by the <see cref="System.Data.OracleClient.OracleCommand"/>
      object.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, the method releases all resources held by any managed 
objects that this <see cref="System.Data.OracleClient.OracleCommand"/> references. It does this by invoking the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see 
   "Implementing a Dispose Method" in the .NET Framework SDK
   documentation.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see "Cleaning Up Unmanaged Resources," and 
"Overriding the Finalize Method," in the .NET Framework SDK documentation.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OracleCommand.Dispose" SnippetID="1"/>
		</example>
	</doc><doc for="OracleCommand.Parameters">
		<summary>
			<para> Gets the <see cref="System.Data.OracleClient.OracleParameterCollection"/>.</para>
		</summary>
		<value>
			<para>The parameters of the SQL statement or stored procedure. The default is an empty collection.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.OracleClient.OracleCommand.CommandType"/> is set to <see langword="Text"/>,
   the Oracle .NET Provider does not support passing named parameters to an SQL
   statement or to a stored procedure called by an <see cref="System.Data.OracleClient.OracleCommand"/>. In either of these cases, use the question mark (?) placeholder. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = ?
</code>
The order in which <see cref="System.Data.OracleClient.OracleParameter"/> objects are added to the
<see cref="System.Data.OracleClient.OracleParameterCollection"/> must directly correspond to the position of 
the question mark placeholder for the parameter. For more information, see "Using Stored Procedures with a Command" in the .NET Framework SDK documentation.
<note type="note">
   If the parameters in the collection
   do not match the requirements of the query to be executed, an error may
   result.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/> and displays its parameters. To
   accomplish this, the method is passed an <see cref="System.Data.OracleClient.OracleConnection"/>, a query string that is an
   SQL SELECT statement, and an array of <see cref="System.Data.OracleClient.OracleParameter"/>
   objects.</para>
			<codelink SampleID="Classic WebData OracleCommand.Parameters" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleParameter"/>
	</doc><doc for="OracleCommand.CreateParameter">
		<summary>
			<para>Creates
      a new instance of an <see cref="System.Data.OracleClient.OracleParameter"/> object. </para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleParameter"/> object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleCommand.CreateParameter"/> method is a strongly-typed 
   version of <see langword="IDbCommand.CreateParameter"/>
   .</para>
		</remarks>
	</doc>
	<doc for="OracleCommand.OracleCommand">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/>
class.</para>
		</summary>
		<remarks>
			<para>The base constructor initializes all fields to their
      default values. The following table shows initial property values for an
      instance of <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandText"/></term>
					<description>empty
         string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandTimeout"/></term>
					<description>30</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.Connection"/></term>
					<description>null</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and sets
some of its properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.OracleCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter"/>
		<seealso cref="System.Data.OracleClient.OracleConnection"/>
	</doc>
	<doc for="OracleCommand.ExecuteReader1"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleCommand.ExecuteReader3"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleCommand.CreateParameter1">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleCommand.Parameters1">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleCommand.Connection1"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleCommand.CreateParameter2">
		<summary>
			<para>Creates
      a new instance of an <see cref="System.Data.OracleClient.OracleParameter"/> object. </para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleParameter"/> object.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleCommand.CreateParameter"/> method is a strongly-typed
   version of <see langword="IDbCommand.CreateParameter"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleCommand.Rowid">
		<summary>
			<para>Gets a binary representation of the actual row ID in the server.</para>
		</summary>
		<remarks>
			<para> A client application sends Rowid to a server in lieu of a key
      column value. </para>
		</remarks>
	</doc>
	<doc for="OracleCommand.Clone">
		<summary>
			<para>Creates a copy of this <see cref="System.Data.OracleClient.OracleCommand"/> object.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.OracleClient.OracleCommand"/> object in which all
   property values are the same as the original.</para>
		</returns>
	</doc>
	<doc for="OracleCommand.IDbCommand.Transaction">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleCommand.PrefetchMemory">
		<summary>
			<para>This member supports the .NET Framework infrastructure 
      and is not intended to be used directly from your code.</para>
		</summary>
	</doc>
	<doc for="OracleCommand.PrefetchRows">
		<summary>
			<para>This member supports the .NET Framework infrastructure 
      and is not intended to be used directly from your code.</para>
		</summary>
	</doc>
	<doc for="OracleCommand.OracleCommand1">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
		</summary>
		<remarks>
			<para>The base constructor initializes all fields to their
      default values. The following table shows initial property values for an
      instance of <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandText"/></term>
					<description>empty
         string ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.Connection"/></term>
					<description>null</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.OracleCommand" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleCommand.Connection2">
		<summary>
			<para>Gets or sets the <see cref="System.Data.OracleClient.OracleConnection"/>
used by this instance of the <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
		</summary>
		<value>
			<para>The connection to a data source. The default is a null
      value.</para>
		</value>
		<exception cref="System.InvalidOperationException">The <see cref="System.Data.OracleClient.OracleCommand.Connection"/> property was changed while a transaction was in progress.</exception>
		<remarks>
			<para>You cannot set the <see cref="System.Data.OracleClient.OracleCommand.Connection"/>, <see cref="System.Data.OracleClient.OracleCommand.CommandType"/>, and <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> properties if the current
   connection is performing an execute or fetch operation. </para>
			<para>If you set <see cref="System.Data.OracleClient.OracleCommand.Connection"/> while a
transaction is in progress and the <see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property is not
null, an <see cref="System.InvalidOperationException"/> is generated. If you set
<see cref="System.Data.OracleClient.OracleCommand.Connection"/> after the transaction has been 
committed or rolled back, and the <see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property is not null, the
<see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property is then set to a null value.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.Connection" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandText"/>
	</doc>
	<doc for="OracleCommand.Transaction">
		<summary>
			<para>Gets or sets
      the <see cref="System.Data.OracleClient.OracleTransaction"/> within which the <see cref="System.Data.OracleClient.OracleCommand"/> executes.
      </para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OracleClient.OracleTransaction"/>. The default is a null value.
   </para>
		</value>
		<remarks>
			<para>You cannot set the <see cref="System.Data.OracleClient.OracleCommand.Transaction"/> property if it is
   already set to a specific value, and the command is in the process of executing.
   If you set the transaction property to an <see cref="System.Data.OracleClient.OracleTransaction"/> object that is not connected
   to the same <see cref="System.Data.OracleClient.OracleConnection"/> as the <see cref="System.Data.OracleClient.OracleCommand"/> object, an exception will be thrown the next time you attempt to execute a statement.</para>
		</remarks>
	</doc>
	<doc for="OracleCommand.CommandTimeout"><nodoc/>
		<summary>
			<para> This property is only supported for compatibility purposes.</para>
		</summary>
		<value>
			<para> Zero (0).</para>
		</value>
		<exception cref="System.ArgumentException">The property value assigned is less than 0.</exception>
		<remarks>
			<para>Oracle does not support the concept of a command timing
      out. This property is only supported for compatibility purposes and always
      returns 0. Setting <see langword="CommandTimeout"/>
      does nothing.</para>
		</remarks>
		<seealso cref="System.Data.OracleClient.OracleCommand.Connection"/>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandText"/>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandType"/>
	</doc>
	<doc for="OracleCommand.ExecuteOracleScalar2">
		<summary>
			<para>Executes the query, and returns the first column of the 
      first row in the resultset returned by the query as an Oracle-specific data
      type. Extra columns or rows are ignored.</para>
		</summary>
		<param name="rowid">A base64 string representation of the actual row ID in the server.</param>
		<returns>
			<para>The first column of the first row in the resultset as an Oracle-specifc data type.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleScalar"/> method to retrieve a single
   value (for example, an aggregate value) from a database. This requires less
   code than using the <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value from the data returned by an <see cref="System.Data.OracleClient.OracleDataReader"/>. </para>
			<para>A typical <see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleScalar"/> query can be formatted as in the following C# example:</para>
			<code>
CommandText = "select count(*) as NumberOfRegions from region";
count = ExecuteOracleScalar(rowid);
</code>
		</remarks>
	</doc>
	<doc for="OracleCommand.OracleCommand2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/> class with the text of the query.</para>
		</summary>
		<param name="commandText">The text of the query.</param>
	</doc>
	<doc for="OracleCommand.OracleCommand3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/> class with the text of the query and an
<see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
		</summary>
		<param name="commandText">The text of the query.</param>
		<param name="connection">An <see cref="System.Data.OracleClient.OracleConnection"/> object that represents the connection to a database.</param>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>

.</para>
			<codelink SampleID="Classic WebData OracleCommand.OracleCommand2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleCommand.Prepare">
		<summary>
			<para> Creates a prepared (or compiled) version of the command at the data
      source.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>The <see cref="System.Data.OracleClient.OracleCommand.Connection"/> is not set.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleCommand.Connection"/> is not <see cref="System.Data.OracleClient.OracleConnection.Open"/>.</para></exception>
		<remarks>
			<para>Before you call <see cref="System.Data.OracleClient.OracleCommand.Prepare"/>, specify the data
   type of each parameter in the
   statement to be prepared. </para>
		</remarks>
	</doc>
	<doc for="OracleCommand">
		<summary>
			<para>Represents an SQL statement or stored procedure to execute against a database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleCommand"/> class provides the following methods for
   executing commands against a data
   source:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/></term>
					<description> Executes commands that return
      rows. </description>
				</item>
				<item>
					<term><see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery"/></term>
					<description>Executes an SQL statement against the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and returns the
number of rows affected.</description>
				</item>
				<item>
					<term><see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/></term>
					<description>Executes commands such as SQL INSERT,
   DELETE, UPDATE, and SET statements.</description>
				</item>
				<item>
					<term><see cref="System.Data.OracleClient.OracleCommand.ExecuteScalar"/></term>
					<description>Retrieves a single value (for example, an aggregate value) from a database as a
   .NET Framework data type.</description>
				</item>
				<item>
					<term><see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleScalar"/></term>
					<description>Retrieves a single value (for example, an aggregate
   value) from a database as an Oracle-specific data type.</description>
				</item>
			</list>
			<para>You can reset the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property and reuse
the <see cref="System.Data.OracleClient.OracleCommand"/>
object.</para>
			<para>If execution of the command results in a fatal
<see cref="System.Data.OracleClient.OracleException"/>, the
<see cref="System.Data.OracleClient.OracleConnection"/> may close. However, the
   user can reopen the connection and continue.</para>
			<note type="note">
   Unlike the Command object in
   the other .NET Framework data providers (SQL Server, OLE DB, and ODBC),
<see cref="System.Data.OracleClient.OracleCommand"/> does not support a 
<see langword="CommandTimeout"/> property. Setting a command timeout 
   has no effect and value returned is always zero.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> method of
<see cref="System.Data.OracleClient.OracleCommand"/>, 
   along with <see cref="System.Data.OracleClient.OracleDataReader"/> and <see cref="System.Data.OracleClient.OracleConnection"/>, to select rows from a table.</para>
			<codelink SampleID="Classic WebData OracleCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter"/>
		<seealso cref="System.Data.OracleClient.OracleConnection"/>
	</doc>
	<doc for="OracleCommand.ExecuteOracleNonQuery">
		<summary>
			<para>Executes an SQL statement against the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and returns the
   number of rows affected.</para>
		</summary>
		<param name="rowid">A base64 string representation of the actual row ID in the server.</param>
		<returns>
			<para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The connection does not exist.</para>
			<para>-or-</para>
			<para>The connection is not open.</para></exception>
		<remarks>
			<para> You can use <see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery"/> to perform catalog operations
   (for example, querying the structure of a database or creating database objects
   such as tables); or to change the data in a database, without using a
<see cref="System.Data.DataSet"/>
, by executing UPDATE, INSERT, or DELETE statements.</para>
			<para><see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery"/> differs from 
<see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/> in that it returns 
<paramref name="rowid"/> as an output parameter if you are executing an INSERT, DELETE, or 
UPDATE statement that affects exactly one row. This allows you to uniquely
identify a row in the Oracle database, which can allow you to increase performance in subsequent, related queries.</para>
			<para> Although <see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery"/> does not return any rows, any
output parameters or return values mapped to parameters are populated with
data.</para>
		</remarks>
	</doc>
	<doc for="OracleCommand.Parameters2">
		<summary>
			<para> Gets the <see cref="System.Data.OracleClient.OracleParameterCollection"/>.</para>
		</summary>
		<value>
			<para>The parameters of the SQL statement or stored procedure. The default is an empty collection.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.OracleClient.OracleCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property should be set to the 
   name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters.
   The command executes this stored procedure when
   you call one of the Execute methods.</para>
			<para> The .NET Framework Data Provider
   for Oracle does not support the question mark (?) placeholder for passing parameters to
   an SQL statement called by an <see cref="System.Data.OracleClient.OracleCommand"/> of <see langword="CommandType.Text"/>. In this case, named parameters must be
   used. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = :pCustomerID
</code>
			<para>When using named parameters in an SQL statement or
   stored procedure, you must precede the parameter name with a colon (:). However,
   when referring to a named parameter elsewhere in your code (for example, when
   calling <see cref="System.Data.OracleClient.OracleParameterCollection.Add"/>), do not
   precede the named parameter with a colon (:). The .NET
   Framework Data Provider for Oracle supplies the colon automatically. </para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/> and displays its parameters. To
   accomplish this, the method is passed an <see cref="System.Data.OracleClient.OracleConnection"/>, a query string that is an
   SQL SELECT statement, and an array of <see cref="System.Data.OracleClient.OracleParameter"/>
   objects.</para>
			<codelink SampleID="Classic WebData OracleCommand.Parameters" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleParameter"/>
	</doc>
	<doc for="OracleCommand.ExecuteReader2">
		<overload>
			<para> Sends the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> to the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and builds an <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
		</overload>
		<summary>
			<para>Sends the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> to the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and builds an <see cref="System.Data.OracleClient.OracleDataReader"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>When the <see cref="System.Data.OracleClient.OracleCommand.CommandType"/>
property is set to <see langword="StoredProcedure"/>, the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property should be set to
the name of the stored procedure. The command then executes this stored
procedure when you call <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/>.</para>
			<para>More than one <see cref="System.Data.OracleClient.OracleDataReader"/> can be open at any
given time.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/> , 
   and then executes it by passing a string that is
   an SQL SELECT statement, and a string to use to connect to the data source.</para>
			<codelink SampleID="Classic WebData OracleCommand.ExecuteReader1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleCommand.ExecuteReader4">
		<summary>
			<para>Sends the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> to the <see cref="System.Data.OracleClient.OracleCommand.Connection"/>, and builds an <see cref="System.Data.OracleClient.OracleDataReader"/> using one of the
<see langword="CommandBehavior"/> values.</para>
		</summary>
		<param name="behavior">One of the <see langword="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleDataReader"/> object.</para>
		</returns>
		<remarks>
			<para>If you expect your SQL statement to return only a single
      row, specifying <see langword="SingleRow"/> as the
   <see langword="CommandBehavior"/>
   value may improve application performance.</para>
			<para>When the <see cref="System.Data.OracleClient.OracleCommand.CommandType"/>
property is set to <see langword="StoredProcedure"/>, the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property should be set to the name of
the stored procedure. The command then executes this stored procedure when you
call <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/>.</para>
			<para>The <see cref="System.Data.OracleClient.OracleDataReader"/> supports a special mode that enables large binary
values to be read efficiently. For more information, see the
<see langword="SequentialAccess"/> setting for <see cref="System.Data.CommandBehavior"/>.</para>
			<para>More than one <see cref="System.Data.OracleClient.OracleDataReader"/> can be open at any given
time.</para>
		</remarks>
		<example>
			<para>The following example creates an
   <see cref="System.Data.OracleClient.OracleCommand"/>, and
      then executes it by passing a string that is an SQL SELECT statement, and a
      string to use to connect to the database. <see cref="System.Data.CommandBehavior"/> is then set to <see cref="System.Data.CommandBehavior.CloseConnection"/>.</para>
			<codelink SampleID="Classic WebData OracleCommand.ExecuteReader2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleCommand.OracleCommand4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleCommand"/> class with
   the text of the query, an <see cref="System.Data.OracleClient.OracleConnection"/> object,
   and an <see cref="System.Data.OracleClient.OracleTransaction"/>.</para>
		</summary>
		<param name="commandText">The text of the query.</param>
		<param name="connection">An <see cref="System.Data.OracleClient.OracleConnection"/> object that represents the connection to a database.</param>
		<param name="tx">The <see cref="System.Data.OracleClient.OracleTransaction"/> in which the <see cref="System.Data.OracleClient.OracleCommand"/> executes.</param>
		<remarks>
			<para>The following table shows initial property values for an instance of this implementation of the <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandText"/></term>
					<description><paramref name="cmdText"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.CommandType"/></term>
					<description><see langword="Text"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleCommand.Connection"/></term>
					<description>A
   new <see cref="System.Data.OracleClient.OracleConnection"/> that is the
   value for the <paramref name="connection"/> parameter.</description>
				</item>
			</list>
			<para> You can change the value for any of these parameters by
   setting the related property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.OracleCommand3" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleCommand.CommandText">
		<summary>
			<para> Gets or
      sets the SQL statement or stored procedure to execute against the database.</para>
		</summary>
		<value>
			<para> The SQL
      statement or stored procedure to execute. The default
      value is an empty string ("").</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.OracleClient.OracleCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property should be set to the 
   name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters.
   The command executes this stored procedure when
   you call one of the Execute methods.</para>
			<para> The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to
   an SQL statement called by an <see cref="System.Data.OracleClient.OracleCommand"/> of <see langword="CommandType.Text"/>. In this case, named parameters must be
   used. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = :pCustomerID
</code>
			<para>When using named parameters in an SQL statement or
   stored procedure, you must precede the parameter name with a colon (:). However,
   when referring to a named parameter elsewhere in your code (for example, when
   calling <see cref="System.Data.OracleClient.OracleParameterCollection.Add"/>), do not
   precede the named parameter with a colon (:). The .NET
   Framework Data Provider for Oracle supplies the colon automatically. </para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and sets some of its
properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.CommandText" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleCommand.Connection"/>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandType"/>
	</doc>
	<doc for="OracleCommand.CommandType">
		<summary>
			<para>Gets or sets a value indicating how the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> property is interpreted.</para>
		</summary>
		<value>
			<para>One of the <see langword="System.Data.CommandType"/>
values. The default is <see langword="Text"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The value was not a valid <see cref="System.Data.CommandType"/>.</exception>
		<remarks>
			<para>When the <see cref="System.Data.OracleClient.OracleCommand.CommandType"/> property is set to
<see langword="StoredProcedure"/>, you should set the <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> 
property to the full Oracle call syntax. The command then executes this stored
procedure when you call one of the Execute methods (for example, <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> or <see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/>
).</para>
			<para>The <see cref="System.Data.OracleClient.OracleCommand.Connection"/>, <see cref="System.Data.OracleClient.OracleCommand.CommandType"/> and <see cref="System.Data.OracleClient.OracleCommand.CommandText"/> properties cannot be set if the
current connection is performing an execute or fetch operation. </para>
			<para> The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to
   an SQL statement called by an <see cref="System.Data.OracleClient.OracleCommand"/> of <see langword="CommandType.Text"/>. In this case, named parameters must be
   used. For example:</para>
			<code>
SELECT * FROM Customers WHERE CustomerID = :pCustomerID
</code>
			<para>When using named parameters in an SQL statement or
   stored procedure, you must precede the parameter name with a colon (:). However,
   when referring to a named parameter elsewhere in your code (for example, when
   calling <see cref="System.Data.OracleClient.OracleParameterCollection.Add"/>), do not
   precede the named parameter with a colon (:). The .NET
   Framework Data Provider for Oracle supplies the colon automatically. </para>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class <see cref="System.Data.OracleClient.OracleCommand"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleCommand.CommandType" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleCommand.CommandText"/>
		<seealso cref="System.Data.OracleClient.OracleCommand.UpdatedRowSource"/>
	</doc>
	<doc for="OracleCommand.UpdatedRowSource">
		<summary>
			<para>Gets or sets a value that specifies how the
      <see langword="Update"/> method should apply command results to the
      <see langword="DataRow"/>
   .</para>
		</summary>
		<value>
			<para> One of the <see langword="System.Data.UpdateRowSource"/> values.</para>
		</value>
		<exception cref="System.ArgumentException">The value entered was not one of the <see langword="UpdateRowSource"/> values.</exception>
		<remarks>
			<para>The default <see langword="UpdateRowSource"/> value is <see langword="Both"/>
unless the command is automatically generated (as in the case of the <see cref="System.Data.OracleClient.OracleCommandBuilder"/> ), in which case the default is
<see langword="None"/>.</para>
			<para>For more information about using the <see cref="System.Data.OracleClient.OracleCommand.UpdatedRowSource"/> property, see <see topic="cpconusingparameterswithdataadapters"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleCommand.ExecuteOracleScalar">
		<overload>
			<para>Executes the query, and returns the first column of the first row in the result
      set returned by the query as an Oracle-specific data type.</para>
		</overload>
		<summary>
			<para>Executes the query, and returns the first column of the first
      row in the result set returned by the query as an Oracle-specific data type. Extra columns or rows are ignored.</para>
		</summary>
		<returns>
			<para>The first column of the first row in the result set as
      an Oracle-specific data type, or a null reference if the result is a
   <see langword="REF CURSOR"/>.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleScalar"/> method to retrieve a single
   value (for example, an aggregate value) from a database. This requires less
   code than using the <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value from the data returned by an <see cref="System.Data.OracleClient.OracleDataReader"/>. </para>
			<para>A typical <see cref="System.Data.OracleClient.OracleCommand.ExecuteOracleScalar"/> query can be formatted as in the following C# example:</para>
			<code>
cmd.CommandText = "select count(*) as NumberOfRegions from region";
count = cmd.ExecuteOracleScalar();
</code>
		</remarks>
	</doc>
	<doc for="OracleCommand.DesignTimeVisible">
		<summary>
			<para> Gets or sets a value indicating whether the command object should be visible in
      a customized interface control.</para>
		</summary>
		<value>
			<para><see langword="true"/>, if the command object should be
   visible in a control; otherwise <see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
	</doc><doc for="OracleCommand.ExecuteNonQuery">
		<summary>
			<para> Executes an SQL statement against the <see cref="System.Data.OracleClient.OracleCommand.Connection"/> and returns the number of rows
   affected.</para>
		</summary>
		<returns>
			<para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The connection does not exist.</para>
			<para>-or-</para>
			<para>The connection is not open.</para></exception>
		<remarks>
			<para> You can use <see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/> to perform catalog operations
   (for example, querying the structure of a database or creating database objects
   such as tables); or to change the data in a database, without using a
<see cref="System.Data.DataSet"/>
, by executing UPDATE, INSERT, or DELETE statements.</para>
			<para> Although <see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/> does not return any rows, any
output parameters or return values mapped to parameters are populated with
data.</para>
			<para>For UPDATE, INSERT, and DELETE statements, the return value is the number of 
   rows affected by the command. For all other types of statements, the return
   value is -1. If a rollback occurs, the return value is also -1.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/> and
   then executes it by using <see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/>. The example is passed a string that is an SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the database.</para>
			<codelink SampleID="Classic WebData OracleCommand.ExecuteNonQuery" SnippetID="1"/>
		</example>
	</doc><doc for="OracleCommand.ExecuteScalar">
		<summary>
			<para>Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type. Extra columns or rows are ignored.</para>
		</summary>
		<returns>
			<para>The first column of the first row in the result set as a .NET Framework data
      type, or a null reference if the result set is empty or the result is
      a <see langword="REF CURSOR"/>.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Data.OracleClient.OracleCommand.ExecuteScalar"/> method to retrieve a single
   value (for example, an aggregate value) from a database. This requires less
   code than using the <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> method, and then performing the operations necessary to generate the single value from the data returned by an <see cref="System.Data.OracleClient.OracleDataReader"/>. </para>
			<para>A typical <see cref="System.Data.OracleClient.OracleCommand.ExecuteScalar"/> query can be formatted as in the following C# example:</para>
			<code>
CommandText = "select count(*) from region";
Int32 count = (int32) ExecuteScalar();
</code>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/>
and then executes it using <see cref="System.Data.OracleClient.OracleCommand.ExecuteScalar"/>. The
example is passed a string that is an SQL statement that returns an aggregate result, and
a string to use to connect to the database.</para>
			<codelink SampleID="Classic WebData OracleCommand.ExecuteScalar" SnippetID="1"/>
		</example>
	</doc></docs>
