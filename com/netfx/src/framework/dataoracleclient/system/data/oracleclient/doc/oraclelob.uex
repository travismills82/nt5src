<docs>
	<doc for="OracleLob.WriteByte">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleLob.Buffered">
		<summary>
			<para>Specifies whether buffered read and write operations are 
      performed on the client rather than on the server.</para>
		</summary>
	</doc>
	<doc for="OracleLob.Duration">
		<summary>
			<para>Gets the <see cref="System.Data.OracleClient.OracleDuration"/>
used by this instance of the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.OracleClient.OracleDuration"/>.</para>
		</value>
	</doc>
	<doc for="OracleLob.IsInitialized">
		<summary>
			<para>Gets a value that indicates whether the LOB has data or is ready to receive data.</para>
		</summary>
	</doc>
	<doc for="OracleLob.IsOpen">
		<summary>
			<para>Gets a value that indicates whether the LOB is already open.</para>
		</summary>
	</doc>
	<doc for="OracleLob.Assign">
		<summary>
			<para>Specifies the LOB to which data should be appended.</para>
		</summary>
		<param name="source">LOB to which data should be appended.</param>
	</doc>
	<doc for="OracleLob.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OracleClient.OracleLob"/> and optionally releases the managed
   resources.</para>
		</summary>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Data.OracleClient.OracleLob"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see "Cleaning Up Unmanaged Resources," and
"Overriding the Finalize Method," in the .NET Framework SDK documentation.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.Erase3">
		<summary>
			<para>Erases the specified amount of data at a given offset from this <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<param name="amount">The quantity of data, in bytes, to erase.</param>
		<param name=" offset">The offset from which to erase.</param>
	</doc>
	<doc for="OracleLob.FreeTemporary">
		<summary>
			<para>Releases a temporary <see cref="System.Data.OracleClient.OracleLob"/> from memory.</para>
		</summary>
	</doc>
	<doc for="OracleLob.LoadFrom1">
		<overload>
			<para> Loads this <see cref="System.Data.OracleClient.OracleLob"/> from a source <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</overload>
		<summary>
			<para> Loads this <see cref="System.Data.OracleClient.OracleLob"/> from a source <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<param name="source"> The source <see cref="System.Data.OracleClient.OracleLob"/></param>
	</doc>
	<doc for="OracleLob.LoadFrom2">
		<summary>
			<para>Loads this <see cref="System.Data.OracleClient.OracleLob"/> from a source <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of 
   data.</para>
		</summary>
		<param name="source">The source <see cref="System.Data.OracleClient.OracleLob"/></param>
		<param name=" amount">The quantity of data, in bytes, to load.</param>
	</doc>
	<doc for="OracleLob.LoadFrom3">
		<summary>
			<para>Loads this <see cref="System.Data.OracleClient.OracleLob"/> from a source <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of data, and the source 
   offset.</para>
		</summary>
		<param name="source">The source <see cref="System.Data.OracleClient.OracleLob"/></param>
		<param name=" amount">The quantity of data, in bytes, to load.</param>
		<param name=" offset">The offset from which to load.</param>
	</doc>
	<doc for="OracleLob.LoadFrom4">
		<summary>
			<para>Loads this <see cref="System.Data.OracleClient.OracleLob"/> from a source <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of data, 
   and the source and
   destination offsets.</para>
		</summary>
		<param name="source">The source <see cref="System.Data.OracleClient.OracleLob"/></param>
		<param name=" amount">The quantity of data, in bytes, to load.</param>
		<param name=" sourceOffset">The offset from which to load.</param>
		<param name=" destinationOffset">The offset at the destination to which to load the data.</param>
	</doc>
	<doc for="OracleLob.Open1">
		<overload>
			<para>Opens a LOB from storage.</para>
		</overload>
		<summary>
			<para>Opens a LOB from storage.</para>
		</summary>
	</doc>
	<doc for="OracleLob.Open2">
		<summary>
			<para>Opens a LOB from storage with the specified <see cref="System.Data.OracleClient.OracleLobOpenMode"/>.</para>
		</summary>
		<param name="mode">One of the <see cref="System.Data.OracleClient.OracleLobOpenMode"/> values.</param>
	</doc>
	<doc for="OracleLob.IOracleType.GetCLSObject"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleLob.ValidateConnection">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleLob.ReadByte">
		<summary>
			<para>Reads a byte of data from the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
	</doc>
	<doc for="OracleLob.CopyTo4">
		<summary>
			<para>Copies from this <see cref="System.Data.OracleClient.OracleLob"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of data,
   and the source and
   destination offsets.</para>
		</summary>
		<param name="destination">The destination <see cref="System.Data.OracleClient.OracleLob"/></param>
		<param name=" amount">The quantity of data, in bytes, to copy.</param>
		<param name=" sourceOffset">The offset from which to copy.</param>
		<param name=" destinationOffset">The offset at the destination to which to copy the data.</param>
	</doc>
	<doc for="OracleLob.Dispose2">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleLob.OracleLob1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleLob"/> class.</para>
		</summary>
		<param name="connection">The <see cref="System.Data.OracleClient.OracleConnection"/> to use.</param>
		<param name=" lobType">One of the LOB data types.</param>
	</doc>
	<doc for="OracleLob.OracleLob">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleLob.CanWrite">
		<summary>
			<para>Always returns true, regardless of whether the <see langword="LOB"/> supports writing or not.</para>
		</summary>
		<value>
			<para>Always returns <see langword="true"/>, regardless of whether an opened or undisposed
<see langword="LOB"/> supports writing or not; 
<see langword="false"/> if a <see langword="LOB"/> is closed or disposed.</para>
		</value>
		<remarks>
			<para>To write to the <see langword="LOB"/>, you must have retrieved the
<see langword="LOB"/> using the FOR UPDATE clause in the SQL SELECT statement, 
   and you must have a local transaction started.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.Flush">
		<summary>
			<para> Not currently supported.</para>
		</summary>
		<remarks>
			<para> In this release, this method is a no-op.</para>
		</remarks></doc>
	<doc for="OracleLob.Close">
		<summary>
			<para> Closes the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<remarks>
			<para>When you are through using an <see cref="System.Data.OracleClient.OracleLob"/> object, you should 
   explicitly close the connection by calling <see cref="System.Data.OracleClient.OracleLob.Close"/>
    or <see langword="Dispose"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.CanRead">
		<summary>
			<para> Gets a value indicating whether the <see langword="LOB"/> stream can be read.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see langword="LOB "/>stream supports reading; 
<see langword="false"/> if a <see langword="LOB"/> is closed or 
   disposed.</para>
		</value>
	</doc>
	<doc for="OracleLob.CanSeek">
		<summary>
			<para>Gets a value indicating whether forward and
      backward seek operations can be performed.</para>
		</summary>
		<value>
			<para><see langword="false"/> if a <see langword="LOB"/> is 
   closed or disposed; otherwise,
<see langword="true"/>. Always <see langword="true"/> for <see cref="System.Data.OracleClient.OracleLob.Null"/> .</para>
		</value>
	</doc>
	<doc for="OracleLob.Connection">
		<summary>
			<para>Gets the <see cref="System.Data.OracleClient.OracleConnection"/>
used by this instance of the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<value>
			<para> The connection to a data
      source.</para>
		</value>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
	</doc>
	<doc for="OracleLob.Position">
		<summary>
			<para> Gets the current read position in the <see cref="System.Data.OracleClient.OracleLob"/> stream.</para>
		</summary>
		<value>
			<para>The current position within the <see cref="System.Data.OracleClient.OracleLob"/> stream.</para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<remarks>
			<para>The stream must support seeking to get or set the position. Use the <see cref="System.Data.OracleClient.OracleLob.CanSeek"/> property to
   determine whether the stream supports seeking.</para>
			<para>Seeking to any location beyond the length of the stream
   is supported. Seeking to an odd position for <see langword="CLOB"/> and <see langword="NCLOB"/> data types is also supported. For more
   information, see the Remarks section of the <see cref="System.Data.OracleClient.OracleLob.Read"/> property.</para>
			<para>The <see langword="Position"/> property does not keep track of the number of bytes from
the stream that have been consumed, skipped, or both.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.Clone">
		<summary>
			<para> Creates a new <see cref="System.Data.OracleClient.OracleLob"/> object that references the
   same Oracle <see langword="LOB"/> as the original
<see cref="System.Data.OracleClient.OracleLob"/> object.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.OracleClient.OracleLob"/> object that references the
   same Oracle <see langword="LOB"/> as the original <see cref="System.Data.OracleClient.OracleLob"/>
   object.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<remarks>
			<para>The properties of the new <see cref="System.Data.OracleClient.OracleLob"/> object initially have the same values
   as those of the original object. However, after the <see cref="System.Data.OracleClient.OracleLob.Clone"/> is
   complete, each <see cref="System.Data.OracleClient.OracleLob"/> object is independent from the other.
   For example, changing the value of the <see cref="System.Data.OracleClient.OracleLob.Position"/> property on
   the original <see cref="System.Data.OracleClient.OracleLob"/> does not change the value of <see cref="System.Data.OracleClient.OracleLob.Position"/> on the copy.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.EndBatch">
		<summary>
			<para>Allows server-side triggers to
      resume firing after performing multiple write
      operations.</para>
		</summary>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>Call the <see cref="System.Data.OracleClient.OracleLob.BeginBatch"/> method before you begin
   performing write operations on the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.Seek">
		<summary>
			<para> Sets the position on the current <see cref="System.Data.OracleClient.OracleLob"/> stream.</para>
		</summary>
		<param name="offset">A byte offset relative to origin. If <paramref name="offset "/> is negative, the new position will precede the position specified by <paramref name="origin "/>by the number of bytes specified by <paramref name="offset"/>. If <paramref name="offset "/>is zero, the new position will be the position specified by <paramref name="origin"/>. If <paramref name="offset "/>is positive, the new position will follow the position specified by <paramref name="origin "/> by the number of bytes specified by <paramref name="offset"/> .</param>
		<param name=" origin">A value of type <see langword="System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
		<returns>
			<para>The new position within the current stream.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="origin"/> parameter does not contain a valid value.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The resulting position is beyond the length of the value.</exception>
		<exception cref="System.ObjectDisposedException"> The <see cref="System.Data.OracleClient.OracleLob"/> object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>If <paramref name="offset"/> is negative, the new position is required to precede the
   position specified by <paramref name="origin"/> by the number of bytes specified by
<paramref name="offset"/>. If <paramref name="offset"/> is zero (0), the new position is required to be 
   the position specified by <paramref name="origin"/>. If <paramref name="offset"/> is positive, the new
   position is required to follow the position specified by <paramref name="origin"/> by the
   number of bytes specified by <paramref name="offset"/>.</para>
			<para>Seeking to any location beyond the length of the stream
   is supported. Seeking to an odd position for <see langword="CLOB"/> and
<see langword="NCLOB"/> data types is also supported. For more 
   information, see the Remarks section of the <see cref="System.Data.OracleClient.OracleLob.Read"/> property.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.Dispose1">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OracleClient.OracleLob"/> and optionally releases the managed
   resources.</para>
		</summary>
	</doc>
	<doc for="OracleLob.Null">
		<summary>
			<para> Represents a null <see cref="System.Data.OracleClient.OracleLob"/> object.</para>
		</summary>
		<remarks>
			<para>You can construct an <see cref="System.Data.OracleClient.OracleLob"/> that is NULL using this
   format:</para>
			<code>
OracleLob myLob = OracleLOB.Null;
</code>
			<para>This technique is used primarily to test whether a 
<see langword="LOB"/> returned from the
   server is NULL, as this example illustrates:</para>
			<code>
if( myLob == OracleLob.Null)
</code>
			<para>A NULL <see langword="LOB"/> behaves similarly to a zero 
byte <see langword="LOB"/>
in that <see cref="System.Data.OracleClient.OracleLob.Read"/> succeeds and always
returns zero bytes.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.LobType">
		<summary>
			<para>Gets a value that returns the <see langword="LOB"/> data type.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Data.OracleClient.OracleType"/>
				<see langword="LOB"/> data types.</para>
		</value>
		<remarks>
			<para>An <see cref="System.Data.OracleClient.OracleLob"/> may be one of these <see cref="System.Data.OracleClient.OracleType"/> data types:</para>
			<list type="table">
				<listheader>
					<term>OracleType data type</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="Blob"/></term>
					<description>An
      Oracle <see langword="BLOB"/> data type that contains binary data with a
      maximum size of 4 gigabytes. This maps to an <see cref="System.Array"/> of type <see cref="System.Byte"/>
      .</description>
				</item>
				<item>
					<term><see langword="Clob"/></term>
					<description>An
   Oracle <see langword="CLOB"/> data type that contains character data, based
   on the default character set on the server, with a maximum size of 4
   gigabytes. This maps to <see cref="System.String"/> .</description>
				</item>
				<item>
					<term><see langword="NClob"/></term>
					<description>An
   Oracle <see langword="NCLOB"/> data type that contains character data,
   based on the national character set on the server with a maximum size of 4
   gigabytes. This maps to <see cref="System.String"/>
   .</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="OracleLob.Value">
		<summary>
			<para>Gets the common language runtime stream value equivalent
      of the underlying value.</para>
		</summary>
		<value>
			<para>For <see cref="System.Data.OracleClient.OracleType.Blob"/>, an array of type Byte[].
   For <see cref="System.Data.OracleClient.OracleType.Clob"/> and <see cref="System.Data.OracleClient.OracleType.NClob"/>, a <see langword="String"/>.
   For null data, <see cref="System.DBNull"/> .</para>
		</value>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>For <see cref="System.Data.OracleClient.OracleType.Blob"/> data types, <see cref="System.Data.OracleClient.OracleLob.Value"/> returns the entire
   underlying data as a contiguous array of type Byte[]. For <see cref="System.Data.OracleClient.OracleType.Clob"/> and <see cref="System.Data.OracleClient.OracleType.NClob"/>
   data types, <see cref="System.Data.OracleClient.OracleLob.Value"/> returns all the data as a
<see langword="String"/>. For null data, <see cref="System.Data.OracleClient.OracleLob.Value"/> returns <see cref="System.DBNull"/>. By comparing the returned values, you can 
   distinguish among empty data, null data, and data.</para>
			<note type="note">
   A benefit of using <see langword="LOB"/>
   
   data types is the capability to retrieve large amounts of
   data in chunks at the client. However, when you use <see cref="System.Data.OracleClient.OracleLob.Value"/>, you obtain all the data for
   the <see langword="LOB"/>
   
   column as one contiguous chunk, which can significantly increase application
   overhead.
</note>
		</remarks>
	</doc>
	<doc for="OracleLob.BeginBatch1">
		<overload>
			<para>Prevents server-side triggers from firing while performing multiple write operations.</para>
		</overload>
		<summary>
			<para>Prevents server-side triggers from firing
      while performing multiple write operations.</para>
		</summary>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>To write to the <see langword="LOB"/>, you must have retrieved the
<see langword="LOB"/> using the FOR UPDATE clause in the SQL SELECT statement, 
   and you must have a local transaction started.</para>
			<para>Calling <see cref="System.Data.OracleClient.OracleLob.BeginBatch"/> more than one time within 
the same transaction currently throws the Oracle "ORA-22293: LOB already opened
in the same transaction" error. In addition, if you obtain the
<see langword="LOB"/> 

using another <see cref="System.Data.OracleClient.OracleDataReader"/>, and the original caller has not
called the <see cref="System.Data.OracleClient.OracleLob.EndBatch"/> method, the same error is
generated. Therefore, you must call the <see cref="System.Data.OracleClient.OracleLob.EndBatch"/> method when
you are finished using the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.BeginBatch2">
		<summary>
			<para>Prevents server-side triggers from firing while
      performing multiple write operations, and specifies one of the <see cref="System.Data.OracleClient.OracleLobOpenMode"/>
      values.</para>
		</summary>
		<param name="mode">One of the <see cref="System.Data.OracleClient.OracleLobOpenMode"/> values.</param>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>To write to the <see langword="LOB"/>, you must have retrieved the
<see langword="LOB"/> using the FOR UPDATE clause in the SQL SELECT statement, 
   and you must have a local transaction started.</para>
			<para>Calling <see cref="System.Data.OracleClient.OracleLob.BeginBatch"/> more than one time within 
the same transaction currently throws the Oracle "ORA-22293: LOB already opened
in the same transaction" error. In addition, if you obtain the
<see langword="LOB"/> 

using another <see cref="System.Data.OracleClient.OracleDataReader"/>, and the original
caller has not called the <see cref="System.Data.OracleClient.OracleLob.EndBatch"/> method, the same error is
generated. Therefore, you must call the <see cref="System.Data.OracleClient.OracleLob.EndBatch"/> method when you are finished
using the <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.ChunkSize">
		<summary>
			<para>Gets a value indicating the minimum number of bytes to retrieve from or 
      send to the server during a read/write operation.</para>
		</summary>
		<value>
			<para>The minimum number of bytes to retrieve or send.</para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>The value returned by the <see langword="ChunkSize"/> property is not a 
   setting of the .NET Framework Data Provider for Oracle. Instead, it is the value
   that the Oracle Call Interface (OCI) uses when communicating with the server.
   Use <see langword="ChunkSize"/> to ensure that client-side chunks are the same
   size. Reading or writing in smaller chunks does not cache data, and causes a
   less optimized round trip to the server because a full packet is not received or
   sent.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.IsBatched">
		<summary>
			<para>Gets a value indicating whether an application called the <see cref="System.Data.OracleClient.OracleLob.BeginBatch"/> method.</para>
		</summary>
		<value>
			<para><see langword="true"/> if application called the <see cref="System.Data.OracleClient.OracleLob.BeginBatch"/> method; otherwise 
<see langword="false"/>.</para>
		</value>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>When using an Oracle 8.0.5 server, an Oracle "ORA-00600: internal
      error code" exception is thrown.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.IsNull">
		<summary>
			<para>Gets a value that indicates whether the <see cref="System.Data.OracleClient.OracleLob"/> is a <see cref="System.Data.OracleClient.OracleBFile.Null"/> stream.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.OracleClient.OracleLob"/> is a <see cref="System.Data.OracleClient.OracleBFile.Null"/> stream; otherwise 
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="OracleLob.Length">
		<summary>
			<para>Gets a value that returns the size of the 
   <see cref="System.Data.OracleClient.OracleLob"/> .</para>
		</summary>
		<value>
			<para>The size of the <see cref="System.Data.OracleClient.OracleLob"/>in bytes.</para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>The size of the <see cref="System.Data.OracleClient.OracleLob"/> is always returned in bytes for all 
   data types.</para>
		</remarks>
	</doc>
	<doc for="OracleLob.IsTemporary">
		<summary>
			<para> Gets a value indicating whether the <see cref="System.Data.OracleClient.OracleLob"/> is a temporary
<see langword="LOB"/>.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.OracleClient.OracleLob"/> is a temporary <see langword="LOB"/>, otherwise <see langword="false"/> . </para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed.</exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>The following example demonstrates how to create a
      temporary <see langword="LOB"/> .</para>
			<code>
OracleConnection conn = new OracleConnection("server=myServer; integrated security=yes;");
conn.Open();

OracleTransaction tx = conn.BeginTransaction();

OracleCommand cmd = conn.CreateCommand();
cmd.Transaction = tx;
cmd.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";
cmd.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;
cmd.ExecuteNonQuery();
OracleLob tempLob = (OracleLob)cmd.Parameters[0].Value;
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);
tempLob.Write(tempbuff,0,tempbuff.Length);
tempLob.EndBatch();
cmd.Parameters.Clear();
cmd.CommandText = "myTable.myProc";
cmd.CommandType = CommandType.StoredProcedure;  
cmd.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;
cmd.ExecuteNonQuery();

tx.Commit();
   </code>
		</remarks>
	</doc>
	<doc for="OracleLob">
		<summary>
			<para> Represents a Large Object Binary (<see langword="LOB"/> ) data type stored on an Oracle server. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Data.OracleClient.OracleLob"/> differs from an
<see cref="System.Data.OracleClient.OracleBFile"/> in that the data is stored on the 
   server instead of in a physical file in the operating system. It can also be a
   read-write object, unlike an <see cref="System.Data.OracleClient.OracleBFile"/>, which is always read-only.</para>
			<para>An <see cref="System.Data.OracleClient.OracleLob"/> may be one of these <see cref="System.Data.OracleClient.OracleType"/> data types:</para>
			<list type="table">
				<listheader>
					<term>OracleType data type</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="Blob"/></term>
					<description>An
      Oracle <see langword="BLOB"/> data type that contains binary data with a
      maximum size of 4 gigabytes. This maps to an <see cref="System.Array"/> of type <see cref="System.Byte"/>
      .</description>
				</item>
				<item>
					<term><see langword="Clob"/></term>
					<description>An
   Oracle <see langword="CLOB"/> data type that contains character data, based
   on the default character set on the server, with a maximum size of 4
   gigabytes. This maps to <see cref="System.String"/> .</description>
				</item>
				<item>
					<term><see langword="NClob"/></term>
					<description>An
   Oracle <see langword="NCLOB"/> data type that contains character data,
   based on the national character set on the server with a maximum size of 4
   gigabytes. This maps to <see cref="System.String"/>.</description>
				</item>
			</list>
			<para>To obtain an <see cref="System.Data.OracleClient.OracleLob"/> object, call
the <see cref="System.Data.OracleClient.OracleDataReader.GetOracleLob"/> method.</para>
			<para>You can construct an <see cref="System.Data.OracleClient.OracleLob"/> that is NULL using this
format:</para>
			<code>
OracleLob myLob = OracleLob.Null;
</code>
			<para>This technique is used primarily to test whether a
<see langword="LOB"/> returned from the
   server is NULL, as this example illustrates:</para>
			<code>
if( myLob == OracleLob.Null)
</code>
			<para>A NULL <see langword="LOB"/> behaves similarly to a zero
byte <see langword="LOB"/>
in that <see cref="System.Data.OracleClient.OracleLob.Read"/> succeeds and always
returns zero bytes.</para>
			<para>Selecting a LOB column that contains a null value returns <see cref="System.Data.OracleClient.OracleLob.Null"/>.</para>
			<para>You must begin a transaction prior to obtaining a temporary
<see langword="LOB"/>. Otherwise, the <see cref="System.Data.OracleClient.OracleDataReader"/> may fail to obtain 
   subsequent data.</para>
			<para>You can also open a temporary <see langword="LOB"/> in Oracle by calling the
DBMS_LOB.CREATETEMPORARY system stored procedure and binding a
<see langword="LOB"/> output parameter. On the client side, a temporary 
<see langword="LOB"/>behaves like a table-based <see langword="LOB"/>. For 
example, to update the temporary <see langword="LOB"/>, it must be enclosed in a
transaction.</para>
			<para>The following C# example demonstrates how to open a temporary LOB.</para>
			<code>
OracleConnection conn = new OracleConnection("server=MyServer; integrated security=yes;");
conn.Open();

OracleTransaction tx = conn.BeginTransaction();

OracleCommand cmd = conn.CreateCommand();
cmd.Transaction = tx;
cmd.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";
cmd.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;
cmd.ExecuteNonQuery();
OracleLob tempLob = (OracleLob)cmd.Parameters[0].Value;
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);
tempLob.Write(tempbuff,0,tempbuff.Length);
tempLob.EndBatch();
cmd.Parameters.Clear();
cmd.CommandText = "myTable.myProc";
cmd.CommandType = CommandType.StoredProcedure;  
cmd.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;
cmd.ExecuteNonQuery();

tx.Commit();
</code>
			<note type="note">
   The inherited <see cref="System.IO.Stream.WriteByte"/> method fails if used with character data, and
   an InvalidOperationException is thrown. Use the <see cref="System.Data.OracleClient.OracleLob.Write"/>
   method instead.
</note>
		</remarks>
	</doc>
	<doc for="OracleLob.Read">
		<summary>
			<para> Reads a sequence of bytes from the
      current <see cref="System.Data.OracleClient.OracleLob"/> stream and advances the position
      within the stream by the number of bytes read.</para>
		</summary>
		<param name=" buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the bytes read from the current source.</param>
		<param name="offset">The zero-based byte offset in <paramref name="buffer "/> at which to begin storing the data read from the current stream. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<param name=" count">The maximum number of bytes to be read from the current stream. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<returns>
			<para>The total number of bytes read into the buffer. This may
      be less than the number of bytes requested if that many bytes are not currently
      available, or zero (0) if the end of the stream has been reached.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value in the <paramref name="offset"/> or <paramref name="count"/> parameter is not positive.</para>
			<para>-or-</para>
			<para>The sum of the offset and count parameters is larger than the buffer length.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="amount"/> or <paramref name="offset"/> parameter is less than zero, or greater than 4 gigabytes.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleLob.Read"/> method read a maximum of
<paramref name="count"/> bytes from the current stream and store them in <paramref name="buffer"/> 
beginning at <paramref name="offset"/>. The current position within the stream is advanced
by the number of bytes read; however, if an exception occurs, the current
position within the stream remains unchanged. <see cref="System.Data.OracleClient.OracleLob.Read"/> returns the number of bytes
read. The return value is zero only if the position is currently at the end of
the stream. <see cref="System.Data.OracleClient.OracleLob.Read"/> will block until at least
one byte of data can be read, in the event that no data is available.
<see cref="System.Data.OracleClient.OracleLob.Read"/> returns 0 if you attempt to 
read from a <see langword="LOB"/> when the current position is at the end of
<see langword="LOB"/>. <see cref="System.Data.OracleClient.OracleLob.Read"/> is free to return fewer bytes
than requested even if the end of the stream has not been reached.</para>
			<para>The .NET Framework Data Provider for Oracle handles all <see langword="CLOB"/>
and <see langword="NCLOB"/> data as Unicode. Therefore, when accessing
<see langword="CLOB"/> and <see langword="NCLOB"/> data types, you are always 
dealing with the number of bytes, where each character is 2 bytes. For example,
if a string of text containing three characters is saved as an
<see langword="NCLOB"/> on an Oracle server where the character set is 4 bytes 
per character, and you perform a <see langword="Read"/> operation, you
specify the length of the string as 6 bytes although it is stored as 12 bytes on the
server. </para>
			<para>The following C# example demonstrates how to read <see cref="System.Data.OracleClient.OracleLob"/> objects.</para>
			<code>
public static void ReadLobExample(OracleCommand cmd)
{
 int actual = 0;
 //Select some data.
 // Table Schema:
 //  "CREATE TABLE tablewithlobs (a int, b BLOB, c CLOB, d NCLOB)";
 //  "INSERT INTO tablewithlobs values (1, 'AA', 'AAA', N'AAAA')";
 cmd.CommandText   = "SELECT * FROM tablewithlobs";
 OracleDataReader reader = cmd.ExecuteReader();
 using(reader)
 {
  //Obtain the first row of data.
  reader.Read();
  
  //Obtain the LOBs (all 3 varieties).
  OracleLob BLOB = reader.GetOracleLob(1/*0:based ordinal*/);
  OracleLob CLOB  = reader.GetOracleLob(2/*0:based ordinal*/);
  OracleLob NCLOB = reader.GetOracleLob(3/*0:based ordinal*/);

  //Example - Reading binary data (in chunks).
  byte[] buffer = new byte[100];
  while((actual = blob.Read(buffer, 0/*buffer offset*/, buffer.Length/*count*/)) &gt;0)
   Console.WriteLine(blob.LobType + ".Read(" + buffer + ", " + buffer.Length + ") =&gt; " + actual);

  //Example - Reading CLOB/NCLOB data (in chunks).
  //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).
  //However, because the OracleLob object inherits directly from the .NET stream object, 
  //all the existing classes that manipluate streams can also be used. For example, the 
  //.NET StreamReader makes converting the raw bytes into actual characters easier.
  StreamReader streamreader = new StreamReader(clob, Encoding.Unicode);
  char[] cbuffer = new char[100];
  while((actual = streamreader.Read(cbuffer, 0/*buffer offset*/, cbuffer.Length/*count*/)) &gt;0)
   Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") =&gt; " + actual);

  //Example - Reading data (all at once).
  //You could use StreamReader.ReadToEnd to obtain all the string data,or simply
  //call OracleLob.Value to obtain a contiguous allocation of all the data.
  Console.WriteLine(NCLOB.LobType + ".Value =&gt; " + NCLOB.Value);
 }
}
</code>
			<para>You can construct an <see cref="System.Data.OracleClient.OracleLob"/> that is NULL using this
format:</para>
			<code>
OracleLob myLob = OracleLob.Null;
</code>
			<para>This technique is used primarily to test whether a
<see langword="LOB"/> returned from the
   server is NULL, as this example illustrates:</para>
			<code>
if( myLob == OracleLob.Null)
</code>
			<para>A NULL <see langword="LOB"/> behaves similarly to a zero
byte <see langword="LOB"/>
in that <see cref="System.Data.OracleClient.OracleLob.Read"/> succeeds and always
returns zero bytes.</para>
		</remarks>
	</doc><doc for="OracleLob.Append">
		<summary>
			<para>Appends data from the specified <see langword="LOB"/> to
   the current <see langword="LOB"/> .</para>
		</summary>
		<param name="source">The <see langword="LOB"/> from which to append data.</param>
		<exception cref="System.ArgumentNullException">The source <see cref="System.Data.OracleClient.OracleLob"/> is null.</exception>
		<exception cref="System.InvalidOperationException"><para>The source <see cref="System.Data.OracleClient.OracleLob"/> is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The source <see cref="System.Data.OracleClient.OracleLob"/> object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>To write to the <see langword="LOB"/>, you must have retrieved the
<see langword="LOB"/> using the FOR UPDATE clause in the SQL SELECT statement, 
   and you must have a local transaction started.</para>
			<para>All data from the source <see langword="LOB"/> is
appended to the end of the current <see langword="LOB"/>. The position of neither
<see langword="LOB"/> 
is evaluated or changed during this process.</para>
			<para>The underlying data types must always be the same. For
   example, if you are appending from an <see cref="System.Data.OracleClient.OracleType.NClob"/>, the
   destination <see cref="System.Data.OracleClient.OracleLob"/> must also be an <see cref="System.Data.OracleClient.OracleType.NClob"/> .</para>
			<note type="note">
   In this release, a write
   operation to a read-only <see langword="LOB "/>might succeed, but will not update the
<see langword="LOB"/> on the 
   server. In this case, however, the
   local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
   read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
</note>
		</remarks>
	</doc><doc for="OracleLob.CopyTo1">
		<overload>
			<para>Copies from this <see cref="System.Data.OracleClient.OracleLob"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</overload>
		<summary>
			<para>Copies from this <see cref="System.Data.OracleClient.OracleLob"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<param name="destination">The destination <see cref="System.Data.OracleClient.OracleLob"/>.</param>
		<returns>
			<para>The number of bytes copied. This excludes any
      padded bytes.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.OracleClient.OracleLob"/> specified in the <paramref name="destination"/> parameter is full.</exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>The underlying data types must always be the same. For example, if you are
      copying from an <see cref="System.Data.OracleClient.OracleType.NClob"/>, the
      destination <see cref="System.Data.OracleClient.OracleLob"/> must also be an
      <see cref="System.Data.OracleClient.OracleType.NClob"/>.</para>
			<para>If the destination offset is beyond the end of destination
      <see langword="LOB"/>, the <see langword="LOB"/> to which the data is being copied
      will be extended. The space between the end of <see langword="LOB"/> and
      destination offset beyond the end is padded with zeros for
      <see langword="BLOB"/>s and spaces for <see langword="CLOB"/> and
      <see langword="NCLOB"/> data types.</para>
			<note type="note">
      In this release, a write
      operation to a read-only <see langword="LOB "/>might succeed, but will not update the
   <see langword="LOB"/> on the 
      server. In this case, however, the
      local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
      read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
   </note>
		</remarks>
	</doc><doc for="OracleLob.CopyTo2">
		<summary>
			<para>Copies from this <see cref="System.Data.OracleClient.OracleLob"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of
   data.</para>
		</summary>
		<param name="destination">The destination <see cref="System.Data.OracleClient.OracleLob"/></param>
		<param name=" destinationOffset">The offset to which to copy. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<returns>
			<para>The number of bytes copied. This excludes any
      padded bytes.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.OracleClient.OracleLob"/> specified in the <paramref name="destination"/> parameter is full.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value specified in the <paramref name="destinationOffset"/> parameter is less than zero, or greater than 4 gigabytes.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="destinationOffset"/> parameter for a <see langword="CLOB"/> or <see langword="NCLOB"/> data type is not even.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<exception cref="System.ArgumentOutOfRangeException">You must specify <see langword="CLOB"/> and <see langword="NCLOB"/> data types as an even number of bytes.</exception>
		<exception cref="System.InvalidOperationException">Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</exception>
		<remarks>
			<para>The underlying data types must always be the same. For example, if you are
      copying from an <see cref="System.Data.OracleClient.OracleType.NClob"/>, the
      destination <see cref="System.Data.OracleClient.OracleLob"/> must also be an
      <see cref="System.Data.OracleClient.OracleType.NClob"/>.</para>
			<para>If the destination offset is beyond the end of destination
      <see langword="LOB"/>, the <see langword="LOB"/> to which the data is being copied
      will be extended. The space between the end of <see langword="LOB"/> and
      destination offset beyond the end is padded with zeros for
      <see langword="BLOB"/>s and spaces for <see langword="CLOB"/> and
      <see langword="NCLOB"/> data types.</para>
			<note type="note">
      In this release, a write
      operation to a read-only <see langword="LOB "/>might succeed, but will not update the
   <see langword="LOB"/> on the 
      server. In this case, however, the
      local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
      read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
   </note>
		</remarks>
	</doc><doc for="OracleLob.CopyTo3">
		<summary>
			<para>Copies from this <see cref="System.Data.OracleClient.OracleLob"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of data, and the source
   offset.</para>
		</summary>
		<param name=" sourceOffset">The offset from which to copy. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<param name="destination">The destination <see langword="OracleLob"/><see cref="System.Data.OracleClient"/>.</param>
		<param name=" destinationOffset">The destination offset to which to copy. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<param name=" amount">The quantity of data, in bytes, to copy. For <see langword="CLOB"/> and <see langword="NCLOB"/>data types, this must be an even number.</param>
		<returns>
			<para>The number of bytes copied. This excludes any
      padded bytes.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <see cref="System.Data.OracleClient.OracleLob"/> specified in the <paramref name="destination"/> parameter is full.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value specified in the <paramref name="amount"/>, <paramref name="sourceOffset"/>, or <paramref name="destinationOffset"/> parameter is less than zero, or greater than 4 gigabytes.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="amount"/>, <paramref name="sourceOffset"/>, or <paramref name="destinationOffset"/> parameter for a <see langword="CLOB"/> or <see langword="NCLOB"/> data type is not even.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>The underlying data types must always be the same. For example, if you are
      copying from an <see cref="System.Data.OracleClient.OracleType.NClob"/>, the
      destination <see cref="System.Data.OracleClient.OracleLob"/> must also be an
      <see cref="System.Data.OracleClient.OracleType.NClob"/>.</para>
			<para>If the destination offset is beyond the end of destination
      <see langword="LOB"/>, the <see langword="LOB"/> to which the data is being copied
      will be extended. The space between the end of <see langword="LOB"/> and
      destination offset beyond the end is padded with zeros for
      <see langword="BLOB"/>s and spaces for <see langword="CLOB"/> and
      <see langword="NCLOB"/> data types.</para>
			<note type="note">
      In this release, a write
      operation to a read-only <see langword="LOB "/>might succeed, but will not update the
   <see langword="LOB"/> on the 
      server. In this case, however, the
      local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
      read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
   </note>
		</remarks>
	</doc><doc for="OracleLob.Erase1">
		<overload>
			<para>Erases data from this <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</overload>
		<summary>
			<para>Erases all data from this <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<returns>
			<para>The number of bytes erased.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value in the <paramref name="offset"/> or <paramref name="count"/> parameter is not positive.</para>
			<para>-or-</para>
			<para>The sum of the <paramref name="offset"/> and <paramref name="count"/> parameters is larger than the buffer length.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="amount"/> or <paramref name="offset"/> parameter is less than zero, or greater than 4 gigabytes.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para><see cref="System.Data.OracleClient.OracleLob.Erase"/>
does not truncate data. The <see langword="LOB"/> length
remains the same for a <see langword="BLOB"/> data type, and the erased data is
replaced by 0x00. <see langword="CLOB"/> and <see langword="NCLOB"/>
data types are replaced by spaces.</para>
			<note type="note">
   In this release, a write
   operation to a read-only <see langword="LOB "/>might succeed, but will not update the
<see langword="LOB"/> on the 
   server. In this case, however, the
   local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
   read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
</note>
		</remarks>
	</doc><doc for="OracleLob.Erase2">
		<summary>
			<para>Erases the specified amount of data from this <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<param name=" offset">The offset from which to erase. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<param name="amount">The quantity of data, in bytes, to erase. For <see langword="CLOB"/> and <see langword="NCLOB"/>data types, this must be an even number.</param>
		<returns>
			<para>The number of bytes erased.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value in the <paramref name="offset"/> or <paramref name="count"/> parameter is not positive.</para>
			<para>-or-</para>
			<para>The sum of the <paramref name="offset"/> and <paramref name="count"/> parameters is larger than the buffer length.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="amount"/> or <paramref name="offset"/> parameter is less than zero, or greater than 4 gigabytes.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para> The sum of the values in the <paramref name="offset"/> and
<paramref name="amount"/> parameters can be 
   greater than that of the size of the <see cref="System.Data.OracleClient.OracleLob"/>. Therefore, specifying a value greater than that returned by
   the <see cref="System.Data.OracleClient.OracleLob.Length"/> property succeeds; however
<see cref="System.Data.OracleClient.OracleLob.Erase"/> only erases to the end of the <see cref="System.Data.OracleClient.OracleLob"/>. This behavior is different from that 
   of the <see cref="System.Data.OracleClient.OracleLob.Read"/> and <see cref="System.Data.OracleClient.OracleLob.Write"/>
   methods, and offers the advantage of being able to erase all data from
   the value specified by <paramref name="offset"/> without making an
   additional roundtrip to the server to verify the actual size.
   </para>
			<para><see cref="System.Data.OracleClient.OracleLob.Erase"/>
does not truncate data. The <see langword="LOB"/> length
remains the same for a <see langword="BLOB"/> data type, and the erased data is
replaced by 0x00. <see langword="CLOB"/> and <see langword="NCLOB"/>
data types are replaced by spaces.</para>
			<note type="note">
   In this release, a write
   operation to a read-only <see langword="LOB "/>might succeed, but will not update the
<see langword="LOB"/> on the 
   server. In this case, however, the
   local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
   read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
</note>
		</remarks>
	</doc><doc for="OracleLob.SetLength">
		<summary>
			<para>Sets the length of the <see cref="System.Data.OracleClient.OracleLob"/> stream to a value less than the
   current length.</para>
		</summary>
		<param name="value">The desired length of the current <see cref="System.Data.OracleClient.OracleLob"/> stream in bytes. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value specified in the <paramref name="value"/> parameter for a <see langword="CLOB"/> or <see langword="NCLOB"/> data type is not even.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="value"/> parameter is less than zero, or greater than 4 gigabytes.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>An attempt to increase the length of the <see cref="System.Data.OracleClient.OracleLob"/> stream fails, and returns "Message:
   ORA-22926: specified trim length is greater than current LOB value's length"
   from the Oracle server.</para>
			<para>A stream must support both writing and seeking for <see cref="System.Data.OracleClient.OracleLob.SetLength"/>
to function.</para>
			<para>The .NET Framework Data Provider for Oracle handles all <see langword="CLOB"/>
and <see langword="NCLOB"/> data as Unicode. Therefore, when accessing
<see langword="CLOB"/> and <see langword="NCLOB"/> data types, you are always 
dealing with the number of bytes, where each character is 2 bytes. For example,
if a string of text containing three characters is saved as an
<see langword="NCLOB"/> on an Oracle server where the character set is 4 bytes 
per character, and you perform a <see langword="SetLength"/> operation,
you specify the length of the string as 6 bytes although it is stored as 12 bytes on
the server. </para>
			<note type="note">
   In this release, a write
   operation to a read-only <see langword="LOB "/>might succeed, but will not update the
<see langword="LOB"/> on the 
   server. In this case, however, the
   local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
   read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
</note>
		</remarks>
	</doc><doc for="OracleLob.Write">
		<summary>
			<para>Writes a sequence of bytes to the current
   <see cref="System.Data.OracleClient.OracleLob"/> stream, and advances the current
      position within this stream by the number of bytes written.</para>
		</summary>
		<param name=" buffer">An array of bytes. This method copies the number of bytes specfied in <paramref name="count "/> from <paramref name="buffer "/> to the current stream.</param>
		<param name="offset">The zero-based byte offset in <paramref name="buffer "/>at which to begin copying bytes to the current stream. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<param name=" count">The number of bytes to be written to the current stream. For <see langword="CLOB"/> and <see langword="NCLOB"/> data types, this must be an even number.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="buffer"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>A value in the <paramref name="offset"/> or <paramref name="count"/> parameterv is not positive.</para>
			<para>-or-</para>
			<para>The sum of the <paramref name="offset"/> and <paramref name="count"/> parameters is larger than the <paramref name="buffer"/> length.</para>
			<para>-or-</para>
			<para>A value specified in the <paramref name="count"/> or <paramref name="offset"/> parameter is less than zero, or greater than 4 gigabytes.</para>
			<para>-or-</para>
			<para>You must specify <see langword="CLOB"/> and <see langword="NCLOB"/> data types as an even number of bytes.</para></exception>
		<exception cref="System.InvalidOperationException"><para>Writing to a <see langword="LOB"/> requires that the operation be within a transaction.</para>
			<para>-or-</para>
			<para>The <see cref="System.Data.OracleClient.OracleLob"/> object is null.</para>
			<para>-or-</para>
			<para>The connection is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The object was closed or disposed.</exception>
		<exception cref="System.Data.OracleClient.OracleException">An Oracle error has occurred.</exception>
		<remarks>
			<para>If the write operation is successful, the position within the stream advances
      by the number of bytes written. If an exception occurs, the position within the
      stream remains unchanged.</para>
			<para>Writing beyond the end of <see langword="LOB"/> is
   allowed and will enlarge the <see langword="LOB"/> by the
   number of bytes written.</para>
			<para>The .NET Framework Data Provider for Oracle handles all <see langword="CLOB"/>
and <see langword="NCLOB"/> data as Unicode. Therefore, when accessing
<see langword="CLOB"/> and <see langword="NCLOB"/> data types, you are always 
dealing with the number of bytes, where each character is 2 bytes. For example,
if a string of text containing three characters is saved as an
<see langword="NCLOB"/> on an Oracle server where the character set is 4 bytes 
per character, and you perform a <see langword="Write"/> operation,
you specify the length of the string as 6 bytes although it is stored as 12 bytes on
the server. </para>
			<para>To write to the <see langword="LOB"/>, you must have retrieved
the <see langword="LOB"/> using the FOR UPDATE clause in the SQL SELECT
statement. </para>
			<para>The following C# example demonstrates how to write to <see cref="System.Data.OracleClient.OracleLob"/> objects.</para>
			<code>
public static void WriteLobExample(OracleCommand cmd)
{
    //Note: Updating LOB data requires a transaction.
    cmd.Transaction = cmd.Connection.BeginTransaction();
        
    //Select some data.
    //    Table Schema:
    //        "CREATE TABLE tablewithlobs (a int, b BLOB, c CLOB, d NCLOB)";
    //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA', N'AAAA')";
    cmd.CommandText = "SELECT * FROM tablewithlobs FOR UPDATE";
    OracleDataReader reader = cmd.ExecuteReader();
    using(reader)
    {
        //Obtain the first row of data.
        reader.Read();

        //Obtain a LOB.
        OracleLob BLOB    = reader.GetOracleLob(1/*0:based ordinal*/);

        //Perform any desired operations on the LOB, (read, position, and so on).
        //...

        //Example - Writing binary data (directly to the backend).
        //To write, you can use any of the stream classes, or write raw binary data using 
        //the OracleLob write method. Writing character vs. binary is the same;
        //however note that character is always in terms of Unicode byte counts
        //(for example: even number of bytes - 2 bytes for every Unicode character).
        byte[] buffer = new byte[100];
        buffer[0] = 0xCC;
        buffer[1] = 0xDD;
        BLOB.Write(buffer, 0/*buffer offset*/, 2/*count*/);
        BLOB.Position = 0;
        Console.WriteLine(BLOB.LobType + ".Write(" + buffer + ", 0, 2) =&gt; " + BLOB.Value);
            
        //Example - Obtaining a temp LOB and copying data into it from another LOB.
        OracleLob templob = CreateTempLob(cmd, BLOB.LobType);
        long actual = BLOB.CopyTo(templob);
        Console.WriteLine(BLOB.LobType + ".CopyTo(" + templob.Value + ") =&gt; " + actual);

        //Commit the transaction now that everything succeeded.
        //Note: On error, Transaction.Dispose is called (from the using statement)
        //and will automatically roll-back the pending transaction.
        cmd.Transaction.Commit();
    }
}
</code>
			<note type="note">
   In this release, a write
   operation to a read-only <see langword="LOB "/>might succeed, but will not update the
<see langword="LOB"/> on the 
   server. In this case, however, the
   local copy of the <see langword="LOB"/> will be updated. Therefore, subsequent
   read operations on the <see cref="System.Data.OracleClient.OracleLob"/> object might return the results of the write operation.
</note>
		</remarks>
	</doc></docs>
