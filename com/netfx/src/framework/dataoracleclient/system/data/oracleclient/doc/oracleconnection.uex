<docs>
	<doc for="OracleConnection.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleConnection.CreateCommand">
		<summary>
			<para>Creates and returns an <see cref="System.Data.OracleClient.OracleCommand"/> object associated with
   the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleCommand"/> object. </para>
		</returns>
	</doc><doc for="OracleConnection.OracleConnection">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleConnection"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleConnection"/>
class.</para>
		</summary>
		<remarks>
			<para>When a new instance of <see cref="System.Data.OracleClient.OracleConnection"/> is created, the read/write properties are set
 to the following initial values unless they are specifically set using their
 associated keywords in the <see cref="System.Data.SqlClient.SqlConnection.ConnectionString"/>
 property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/></term>
					<description>empty string
 ("")</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleConnection.ConnectionTimeout"/></term>
					<description>15</description>
				</item>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleConnection.Database"/></term>
					<description>empty
 string ("")</description>
				</item>
			</list>
			<para>You can change the value for these properties only by
 using the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
 property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.OracleClient.OracleConnection"/>
.</para>
			<codelink SampleID="Classic WebData OracleConnection.OracleConnection" SnippetID="1"/>
		</example>
	</doc><doc for="OracleConnection.IDbConnection.BeginTransaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleConnection.IDbConnection.BeginTransaction1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleConnection.IDbConnection.CreateCommand">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleConnection.DriverName">
		<summary>
			<para>Gets the name of the Oracle driver to use for the current connection.</para>
		</summary>
		<value>
			<para>The name of the Oracle driver, which typically is the driver dynamic-link library (DLL) name (for example, Sqlsrv32.dll).</para>
		</value>
		<remarks>
			<para>Retrieving the <see cref="System.Data.OracleClient.OracleConnection.Driver"/> property is equivalent
   to calling the Oracle function <see langword="SQLGetInfo"/> with the
<paramref name="InfoType"/> parameter set to SQL_DRIVER_NAME.</para>
		</remarks>
		<example>
			<para>The following example creates an
   <see cref="System.Data.OracleClient.OracleConnection"/> and displays some of its read-only properties.</para>
			<codelink SampleID="Classic WebData OracleConnection.Driver" SnippetID="1"/>
		</example>
	</doc><doc for="OracleConnection.StateChange">
		<summary>
			<para>Occurs when the state of the connection changes.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleConnection.StateChange"/> event is raised immediately after
   the <see cref="System.Data.OracleClient.OracleConnection.State"/>
   changes from <see langword="Closed"/> to <see langword="Opened"/>, or from
<see langword="Opened"/> to <see langword="Closed"/>. </para>
			<para>If an event handler throws an exception from within the <see cref="System.Data.OracleClient.OracleConnection.StateChange"/>
event, the exception propagates to the caller of the <see cref="System.Data.OracleClient.OracleConnection.Open"/> or <see cref="System.Data.OracleClient.OracleConnection.Close"/> method.</para>
		</remarks>
	</doc><doc for="OracleConnection.ReleaseObjectPool">
		<summary>
			<para>Indicates that the <see cref="System.Data.OracleClient.OracleConnection"/> object pooling can be cleared when the last
   underlying Oracle driver is released.</para>
		</summary>
		<remarks>
			<para> The object pool is cached whenever one of the underlying Oracle drivers is
      created. This method should be called when the user is done using
      any <see cref="System.Data.OracleClient.OracleConnection"/> objects.
      </para>
			<para> This method can be used to conserve resources when the <see cref="System.Data.OracleClient.OracleConnection"/>
will not be used again for a period of time longer than Oracle services
would keep pooled connections alive.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/>, opens it, displays some of its properties,
   closes the connection and releases the object pool to conserve resources.</para>
			<codelink SampleID="Classic WebData OracleConnection.ReleaseObjectPool" SnippetID="1"/>
		</example>
	</doc><doc for="OracleConnection.BeginTransaction">
		<overload>
			<para>Begins a transaction at the database.</para>
		</overload>
		<summary>
			<para>Begins a transaction at the database.</para>
		</summary>
		<returns>
			<para>An object representing the new transaction. </para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para>To commit or roll back the transaction, you must
      explicitly use the <see cref="System.Data.OracleClient.OracleTransaction.Commit"/> or <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/> methods. </para>
			<para>To ensure that the Oracle .NET Data Provider transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and an <see cref="System.Data.OracleClient.OracleTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>, <see cref="System.Data.OracleClient.OracleTransaction.Commit"/>, and <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OracleConnection.BeginTransaction1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection.Open">
		<summary>
			<para>Opens a connection to a database with the property
      settings specified by the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para> The connection is already open.</para></exception>
		<exception cref="System.Data.OracleClient.OracleException">A connection-level error occurred while opening the connection.</exception>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleConnection"/> draws an open
   connection from the connection pool if one is available. Otherwise, it establishes a
   new connection to the
   database.
   </para>
			<note type="note">
   If the <see cref="System.Data.OracleClient.OracleConnection"/> goes out of scope, the
   connection it represents does not close automatically. Therefore, you must
   explicitly close the connection by calling <see cref="System.Data.OracleClient.OracleConnection.Close"/> or <see cref="System.Data.OracleClient.OracleConnection.Dispose"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/>
, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData OracleConnection.Close" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleConnection.Close"/>
	</doc>
	<doc for="OracleConnection.State">
		<summary>
			<para>Gets the current state of the connection.</para>
		</summary>
		<value>
			<para>A bitwise combination of the 
   <see langword="System.Data.ConnectionState"/> values. The default is <see langword="Closed"/>.</para>
		</value>
		<remarks>
			<para>The allowed state changes are:</para>
			<list type="bullet"><item>
					<term>
         
         From <see langword="Closed"/> to
      <see langword="Open"/>, using the <see langword="Open"/> method of the <see cref="System.Data.OracleClient.OracleConnection"/> object.</term>
				</item>
				<item>
					<term>
         
         From <see langword="Open"/> to
      <see langword="Closed"/>, using either the <see langword="Close"/> method or the <see langword="Dispose"/> method of the
      <see cref="System.Data.OracleClient.OracleConnection"/> object.</term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates an instance of a derived class, <see cref="System.Data.OracleClient.OracleConnection"/>, sets its <see cref="System.Data.IDbConnection.ConnectionString"/>, and displays its <see cref="System.Data.OracleClient.OracleConnection.State"/>.</para>
			<codelink SampleID="Classic WebData OracleConnection.State" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection.CloseAllOpenBFiles">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.CreateTemporaryLob1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.BeginTransaction1"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.BeginTransaction3"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.CreateCommand1">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.CreateTemporaryLob2">
		<summary>
			<para>Creates a temporary Lob object.</para>
		</summary>
		<param name=" lobType">One of the enumerated Lob types.</param>
		<param name="duration">One of the OracleDuration values.</param>
		<remarks>
			<para>This is useful when you need to create a Lob to insert 
      into the database, or when you need to modify an existing Lob.</para>
		</remarks>
	</doc>
	<doc for="OracleConnection.Clone">
		<summary>
			<para>Creates a copy of this <see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
		</returns>
	</doc>
	<doc for="OracleConnection.OracleConnection3">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.ICloneable.Clone">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.OracleConnection1">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</summary>
		<remarks>
			<para>When a new instance of <see cref="System.Data.OracleClient.OracleConnection"/> is created, the read/write properties are set
   to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/></term>
					<description><paramref name="connectionString"/></description>
				</item>
			</list>
			<para>You can change the value for these properties only by
   using the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.OracleClient.OracleConnection"/>
.</para>
			<codelink SampleID="Classic WebData OracleConnection.OracleConnection1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection.OracleConnection2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Data.OracleClient.OracleConnection"/>
class with the specified connection string.</para>
		</summary>
		<param name="connectionString">The connection used to open the database.</param>
		<remarks>
			<para>When a new instance of <see cref="System.Data.OracleClient.OracleConnection"/> is created, the read/write properties are set
   to the following initial values unless they are specifically set using their
   associated keywords in the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
   property.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/></term>
					<description><paramref name="connectionString"/></description>
				</item>
			</list>
			<para>You can change the value for these properties only by
   using the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
   property.</para>
		</remarks>
		<example>
			<para>The following example creates and opens an <see cref="System.Data.OracleClient.OracleConnection"/>
.</para>
			<codelink SampleID="Classic WebData OracleConnection.OracleConnection1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection.DataSource">
		<summary>
			<para> Gets the name of the Oracle server to which to connect.</para>
		</summary>
		<value>
			<para>The name of the Oracle server to which to
      connect. The default value is an empty string ("").</para>
		</value>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OracleConnection.DataSource" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
	</doc>
	<doc for="OracleConnection.Database"><nodoc/>
	</doc>
	<doc for="OracleConnection.ConnectionTimeout">
		<nodoc/>
	</doc>
	<doc for="OracleConnection.ChangeDatabase"><nodoc/>
	</doc>
	<doc for="OracleConnection.CreateCommand2">
		<summary>
			<para>Creates and returns an <see cref="System.Data.OracleClient.OracleCommand"/> object associated with
   the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Data.OracleClient.OracleCommand"/> object. </para>
		</returns>
	</doc>
	<doc for="OracleConnection.Close">
		<summary>
			<para>Closes the connection to the database. This is the preferred method of closing any open connection.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleConnection.Close"/> method rolls back
   any pending transactions. It then releases the connection to the connection
   pool, or closes the connection if connection pooling is disabled.</para>
			<para>An application can call <see cref="System.Data.OracleClient.OracleConnection.Close"/> more than one time without generating an exception.</para>
			<note type="note">
   When you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.
</note>
			<note type="caution">
   Do not call <see langword="Close"/> or
<see langword="Dispose"/> on a Connection, a DataReader, or any other managed 
   object in the <see langword="Finalize"/>
   
   method of your class. In a finalizer, you should only release unmanaged
   resources that your class owns directly. If your class does not own any
   unmanaged resources, do not include a Finalize method in your class definition.
   For more information, see <see topic="cpconProgrammingEssentialsForGarbageCollection"/>.
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/>, opens it, displays some of its properties, then closes the connection.</para>
			<codelink SampleID="Classic WebData OracleConnection.Close" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleConnection.Open"/>
	</doc>
	<doc for="OracleConnection.InfoMessage">
		<summary>
			<para>Occurs when Oracle sends a warning or an informational message.</para>
		</summary>
		<remarks>
			<para>Because the .NET Framework Data Provider for Oracle uses the Oracle Call
      Interface (OCI), whenever the data provider receives a Success With Info
      message, an <see cref="System.Data.OracleClient.OracleConnection.InfoMessage"/> event is generated. An example would be
      creating a stored procedure that contains a syntax error. The call to the
      <see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/> method would succeed.
      However an <see cref="System.Data.OracleClient.OracleConnection.InfoMessage"/> event would be generated informing you of
      the syntax error.</para>
			<para> Clients who want to process warnings or informational messages sent by the
      server should create an <see cref="System.Data.OracleClient.OracleInfoMessageEventHandler"/> delegate to listen to this
      event.</para>
		</remarks>
	</doc>
	<doc for="OracleConnection.ServerVersion">
		<summary>
			<para>Gets a string containing the version of the server to which the client is connected.</para>
		</summary>
		<value>
			<para> The version of the connected server. </para>
		</value>
		<exception cref="System.InvalidOperationException">The connection is closed. </exception>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleConnection.ServerVersion"/> property is in
   Oracle version format. For example, the format for an Oracle8 release is a
   string in the form "8.1.7.0.0 Oracle8 Release 8.1.7.0.0 - Production".</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and displays some
   of its read-only properties.
   </para>
			<codelink SampleID="Classic WebData OracleConnection.ServerVersion" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection">
		<summary>
			<para>Represents an open connection to a database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>An <see cref="System.Data.OracleClient.OracleConnection"/> object represents a unique connection to a database created by using a
   connection string. In the case of a client/server
   database system, it is equivalent to a network connection to the server.
   </para>
			<para> You should always explicitly close any open
<see cref="System.Data.OracleClient.OracleConnection"/> 
objects by calling <see cref="System.Data.OracleClient.OracleConnection.Close"/> or <see cref="System.Data.OracleClient.OracleConnection.Dispose"/> before the
<see cref="System.Data.OracleClient.OracleConnection"/> 
object goes out
of scope. Not doing so leaves the freeing of these native resources to
garbage collection, which may not free them immediately. For example, you might
encounter <see langword="Maximum Connections"/>-related errors while a number of
connections are waiting to be deleted by the garbage collector. Explicitly
closing the connections by calling <see cref="System.Data.OracleClient.OracleConnection.Close"/> or <see cref="System.Data.OracleClient.OracleConnection.Dispose"/> allows a more efficient use of native resources, enhancing scalability and improving overall application performance.</para>
			<note type="note">
   To deploy high-performance
   applications, you often need to use connection pooling. However, when you use
   the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling
   because the provider manages this automatically.
</note>
			<para>An application that creates an instance of the
<see cref="System.Data.OracleClient.OracleConnection"/> 
object can require all direct and indirect callers to have adequate permission
to the code by setting declarative or imperative security demands.
<see cref="System.Data.OracleClient.OracleConnection"/> 
creates security demands by using the <see cref="System.Data.OracleClient.OraclePermission"/> object. Users can
verify that their code has adequate permissions by using the
<see cref="System.Data.OracleClient.OraclePermissionAttribute"/>
object. Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security
policy at the machine, user, and enterprise levels. For more information, see
<see topic="cpconsecuringyourapplication"/>.</para>
			<note type="note">
   Unlike the Connection object in
   the other .NET Framework data providers (SQL Server, OLE DB, and ODBC),
<see cref="System.Data.OracleClient.OracleConnection"/> does not support a 
<see langword="ConnectionTimeout"/> property. Setting a connection 
   timeout using a property or in the connection string has no effect and
   value returned is always zero. <see cref="System.Data.OracleClient.OracleConnection"/> also
   does not support a <see langword="Database"/> property or a
<see langword="ChangeDatabase"/> method.
</note>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleCommand"/> and an
<see cref="System.Data.OracleClient.OracleConnection"/>.
   The <see cref="System.Data.OracleClient.OracleConnection"/> is opened and set as the <see cref="System.Data.OracleClient.OracleCommand.Connection" qualify="true"/> property. The example then calls
<see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/>, and closes the connection. To
   accomplish this, the <see cref="System.Data.OracleClient.OracleCommand.ExecuteNonQuery"/>
   is passed a connection string and a query string that is an SQL INSERT statement.</para>
			<codelink SampleID="Classic WebData OracleConnection" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter"/>
		<seealso cref="System.Data.OracleClient.OracleCommand"/>
	</doc>
	<doc for="OracleConnection.Dispose">
		<nodoc/>
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged and, optionally, the managed
      resources used by the <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</summary>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
   set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, the method releases all resources held by any managed 
objects that this <see cref="System.Data.OracleClient.OracleCommand"/> references. It does this by invoking the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconimplementingdisposemethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see <see topic="cpconcleaningupunmanagedresources"/> and
<see topic="cpconoverridingfinalizemethod"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleConnection.EnlistDistributedTransaction">
		<summary>
			<para>Enlists in the specified transaction as a distributed transaction.</para>
		</summary>
		<param name="distributedTransaction">A reference to an existing transaction in which to enlist.</param>
		<remarks>
			<para>You can enlist in an existing distributed transaction
      using the <see cref="System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction"/> method if
      auto-enlistment is disabled. Enlisting in an existing distributed transaction
      ensures that, if the transaction is committed or rolled back, modifications made
      by the code at the data source are also committed or rolled back. For more
      information about distributed transactions, see <see topic="cpconenlistingindistributedtransaction"/>.</para>
			<note type="caution">
				<see cref="System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction"/> returns an exception if the
      <see cref="System.Data.OracleClient.OracleConnection"/> has
      already started a transaction using
      <see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>. However, if
      the transaction is a local transaction started at the data source (for
      example, by explicity executing the BEGIN TRANSACTION statement using an
      <see cref="System.Data.OracleClient.OracleCommand"/> object),
      <see cref="System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction"/> rolls back the local
      transaction and enlists in the existing distributed transaction as requested.
      You will not receive notice that the local transaction was rolled back, and are
      responsible for managing any local transactions not started using
      <see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>.
      
      </note>
		</remarks>
	</doc>
	<doc for="OracleConnection.BeginTransaction2">
		<overload>
			<para>Begins a transaction at the database.</para>
		</overload>
		<summary>
			<para>Begins a transaction at the database.</para>
		</summary>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para> To commit or roll back the transaction, you must
      explicitly use the <see cref="System.Data.OracleClient.OracleTransaction.Commit"/> or <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
      methods.</para>
			<para>To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.</para>
			<note type="note">
      If you do not specify an isolation level, the default isolation level is used. To specify an isolation level
      with the <see cref="System.Data.Odbc.OdbcConnection.BeginTransaction"/> method, use the overload that
      takes the <paramref name="il"/> parameter.
      
      </note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and an <see cref="System.Data.OracleClient.OracleTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>, <see cref="System.Data.OracleClient.OracleTransaction.Commit"/>, and <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OracleConnection.BeginTransaction" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleTransaction.Commit"/>
		<seealso cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
	</doc>
	<doc for="OracleConnection.BeginTransaction4">
		<summary>
			<para>Begins a transaction at the database with the specified <see cref="System.Data.IsolationLevel"/>
value.</para>
		</summary>
		<param name="il">The transaction isolation level for this connection.</param>
		<returns>
			<para>An object representing the new transaction.</para>
		</returns>
		<exception cref="System.InvalidOperationException">Parallel transactions are not supported.</exception>
		<remarks>
			<para> To commit or roll back the transaction, you must
      explicitly use the <see cref="System.Data.OracleClient.OracleTransaction.Commit"/> or <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
      methods.</para>
			<para>To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and an <see cref="System.Data.OracleClient.OracleTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>, <see cref="System.Data.OracleClient.OracleTransaction.Commit"/>, and <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OracleConnection.BeginTransaction" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleTransaction.Commit"/>
		<seealso cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
	</doc>
	<doc for="OracleConnection.ConnectionString">
		<summary>
			<para>Gets or sets the string used to open an Oracle database.</para>
		</summary>
		<value>
			<para> The Oracle connection string that includes settings, such as the server
      name, needed to establish the initial connection. The default value is
      an empty string ("").</para>
		</value>
		<remarks>
			<para> The <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>
can be set only when the connection is
closed.</para>
			<para>You can use the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/> property to connect to
a database. The following example illustrates a typical connection string.</para>
			<code>
"Data Source=Oracle8i;Integrated Security=yes"
</code>
			<para>Many of the settings specified in the string have
   corresponding read-only properties (for example, Data Source=MyServer, which
   corresponds to the <see cref="System.Data.OracleClient.OracleConnection.DataSource"/>
   property). When the
   connection string is set, all of these properties are updated, except when an
   error is detected. In this case, none of the properties are updated.
<see cref="System.Data.OracleClient.OracleConnection"/> properties return only default settings or 
   those settings specified in the
<see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>.</para>
			<para>Resetting the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/> on a closed connection resets all connection string values (and related properties), including the password.</para>
			<para>The connection string is parsed immediately after being set. If errors in
   syntax are found when parsing, a runtime exception, such as <see cref="System.ArgumentException"/>, is
   generated. Other errors can be found only when an attempt is made to open the
   connection.</para>
			<para>The basic format of a connection string consists of a series of keyword/value
   pairs separated by semicolons. The equal sign (= ) connects each keyword and its
   value. To include values that contain a semicolon, single-quote character, or
   double-quote character, the value must be enclosed in double quotes. If the
   value contains both a semicolon and a double-quote character, the value can be
   enclosed in single quotes. The single quote is also useful if the value begins
   with a double-quote character. Conversely, the double quote can be used if the
   value begins with a single quote. If the value contains both single-quote and
   double-quote characters, the quote character used to enclose the value must be
   doubled each time it occurs within the value.</para>
			<para> To include preceding or trailing spaces in the string value,
   the value must be enclosed in either single quotes or double
   quotes. Any leading or trailing spaces around integer, boolean, or enumerated values are
   ignored, even if enclosed in quotes. However, spaces within a string literal keyword or
   value are preserved. Single or double quotes may be used within a connection string
   without using delimiters (for example, Data Source=
   
   my'Server or Data Source=
   
   my"Server)
   unless a quote character is the first or last character in the value. </para>
			<para>To include an equal sign (=) in a keyword or value, it must be preceded
   by another equal sign. For example, in the hypothetical connection string </para>
			<code>
"key==word=value"
</code>
			<para>the keyword is "key=word" and the value is "value".</para>
			<para>If a specific keyword in a keyword= value pair occurs multiple times in a
   connection string, the last occurrence listed is used in the value set.</para>
			<para>Keywords are not case sensitive.</para>
			<para>The following table lists the valid names for values within the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>.</para>
			<list type="table">
				<listheader>
					<term>Name</term>
					<description>Default</description>
					<description>Description</description>
				</listheader>
				<item>
					<term>
						<para>Data Source</para>
						<para>-or-</para>
						<para>Server</para></term>
					<description></description>
					<description>The
            name or network address of the instance of Oracle to which to connect.</description>
				</item>
				<item>
					<term>
						<para>Integrated
               Security</para></term>
					<description>'false'</description>
					<description>
						<para>Whether the connection is to be a secure connection or not.</para>
						<para> Recognized values are <see langword="true"/>
            (strongly recommended), <see langword="false"/>, <see langword="yes"/>, and
         <see langword="no"/>
         .</para></description>
				</item>
				<item>
					<term>
						<para>Password</para></term>
					<description></description>
					<description> The password for the Oracle account logging
            on (Not recommended. To maintain the highest level of security, it
            is strongly recommended that you use the Integrated Security keyword instead.).</description>
				</item>
				<item>
					<term>
						<para>Persist Security Info</para></term>
					<description>'false'</description>
					<description>
						<para> When
                  set to <see langword="false"/> or <see langword="no"/>
                  (strongly recommended), security-sensitive information, such
                  as the password, is not returned as part of the connection if the connection
                  is open or has ever been in an open
               <see cref="System.Data.OracleClient.OracleConnection.State"/>. Resetting the connection string resets all connection
                  string values, including the password.</para>
						<para> Recognized values are <see langword="true"/>
            , <see langword="false"/>, <see langword="yes"/>, and
         <see langword="no"/>
         .</para></description>
				</item>
				<item>
					<term> Unicode</term>
					<description>'false'</description>
					<description>Specifies whether the .NET Framework Data Provider for Oracle uses UTF16 mode
         API calls. This keyword is ignored except when not using distributed
         transactions with Oracle 9i client software. If Unicode is set to
      <see langword="true"/> when not using Oracle 9i client software to
         communicate with an Oracle 9i server, unpredictable results may
         occur.</description>
				</item>
				<item>
					<term>
						<para>User ID</para></term>
					<description></description>
					<description> The Oracle login account (Not
            recommended. To maintain the highest level of security, it is strongly
            recommended that you use the Integrated Security keyword instead.).</description>
				</item>
			</list>
			<para>The following table lists the valid names for connection
      pooling values within the <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/>.</para>
			<list type="table">
				<listheader>
					<term>Name</term>
					<description>Default</description>
					<description>Description</description>
				</listheader>
				<item>
					<term>
						<para>Connection Lifetime</para></term>
					<description>0</description>
					<description>
						<para>When a connection is returned to the pool, its
                  creation time is compared with the current time, and the connection is
                  destroyed if that time span (in seconds) exceeds the value specified by
               <see langword="Connection Lifetime"/> . This is useful in clustered configurations to force load balancing between a running server and a server just brought online. </para>
						<para>A value of zero (0) causes pooled connections to have the maximum connection timeout.</para></description>
				</item>
				<item>
					<term>
						<para>Enlist</para></term>
					<description>'true'</description>
					<description>
						<para>When
                     <see langword="true"/> or <see langword="yes"/> , the pooler automatically enlists the
                        connection in the creation thread's current transaction
                        context.</para>
						<para> Recognized values are <see langword="true"/>
                  , <see langword="false"/>, <see langword="yes"/>, and
               <see langword="no"/>
               .</para></description>
				</item>
				<item>
					<term>
						<para>Max Pool Size</para></term>
					<description>100</description>
					<description>The maximum number of connections allowed in the
                  pool. Setting the Max Pool Size value of the
               <see cref="System.Data.OracleClient.OracleConnection.ConnectionString"/> can affect
                  performance. If you plan to create and actively use more
                  than 100 connections, you should increase Max Pool Size to a
                  value that approximates the steady state connection usage for the
                  application.</description>
				</item>
				<item>
					<term>
						<para>Min Pool Size</para></term>
					<description>0</description>
					<description>The minimum number of connections allowed in the
                     pool.</description>
				</item>
				<item>
					<term>
						<para>Pooling</para></term>
					<description>'true'</description>
					<description>
						<para>When
                        <see langword="true"/> or <see langword="yes"/> , the <see langword="OracleConnection"/> object is drawn from the
                           appropriate pool, or if necessary, is created and added to the appropriate
                           pool.</para>
						<para> Recognized values are <see langword="true"/>
                     , <see langword="false"/>, <see langword="yes"/>, and
                  <see langword="no"/>
                  .</para></description>
				</item>
			</list>
			<para>When setting keyword or connection pooling values that
            require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead
            of 'false'. Integer values are represented as strings. </para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and sets some of its properties in the connection string.</para>
			<codelink SampleID="Classic WebData OracleConnection.DataSource" SnippetID="1"/>
		</example>
	</doc></docs>
