<docs>
	<doc for="OracleTransaction.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleTransaction.IDbTransaction.Connection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleTransaction.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="OracleTransaction.Connection">
		<summary>
			<para>Specifies the <see cref="System.Data.OracleClient.OracleConnection"/> object associated with the transaction. </para>
		</summary>
		<value>
			<para>The <see cref="System.Data.OracleClient.OracleConnection"/> object associated with the transaction.</para>
		</value>
		<remarks>
			<para> A single application may have multiple database connections, each with zero
      or more transactions. This property enables you to
      determine the connection object associated with a particular transaction.</para>
		</remarks>
	</doc><doc for="OracleTransaction.OracleTransaction">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleTransaction">
		<summary>
			<para> Represents a transaction to be made at a database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The
      application creates an <see cref="System.Data.OracleClient.OracleTransaction"/> object by calling <see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/> on
      the <see cref="System.Data.OracleClient.OracleConnection"/> object. All subsequent operations associated with the
      transaction (for example, committing or aborting the transaction), are performed
      on the <see cref="System.Data.OracleClient.OracleTransaction"/> object.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and an <see cref="System.Data.OracleClient.OracleTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>, <see cref="System.Data.OracleClient.OracleTransaction.Commit"/>, and <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OracleConnection.BeginTransaction" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter"/>
		<seealso cref="System.Data.OracleClient.OracleConnection"/>
	</doc>
	<doc for="OracleTransaction.Connection1"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleTransaction.Connection2">
		<summary>
			<para>Specifies the <see cref="System.Data.OracleClient.OracleConnection"/> object associated with the transaction. </para>
		</summary>
		<value>
			<para>The <see cref="System.Data.OracleClient.OracleConnection"/> object associated with the transaction.</para>
		</value>
		<remarks>
			<para> A single application may have multiple data source connections, each with zero
      or more transactions. This property enables you to
      determine the connection object associated with a particular transaction.</para>
		</remarks>
	</doc>
	<doc for="OracleTransaction.Commit">
		<summary>
			<para> Commits the SQL database transaction.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and an <see cref="System.Data.OracleClient.OracleTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/> , <see cref="System.Data.OracleClient.OracleTransaction.Commit"/>, and <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OracleConnection.BeginTransaction1" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>
		<seealso cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
	</doc>
	<doc for="OracleTransaction.Rollback">
		<summary>
			<para> Rolls back a transaction from a pending state.
      </para>
		</summary>
		<exception cref="System.Exception">An error occurred while trying to commit the transaction. </exception>
		<exception cref="System.InvalidOperationException"><para>The transaction has already been committed or rolled back.</para>
			<para>-or-</para>
			<para>The connection is broken.</para></exception>
		<remarks>
			<para> The transaction can be rolled back only from a pending state (after <see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/> has been called, but before
<see cref="System.Data.OracleClient.OracleTransaction.Commit"/> is called).
   </para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleConnection"/> and an <see cref="System.Data.OracleClient.OracleTransaction"/>. It also demonstrates how to use the
<see cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>, <see cref="System.Data.OracleClient.OracleTransaction.Commit"/>, and <see cref="System.Data.OracleClient.OracleTransaction.Rollback"/>
methods.</para>
			<codelink SampleID="Classic WebData OracleConnection.BeginTransaction1" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleTransaction.Commit"/>
		<seealso cref="System.Data.OracleClient.OracleConnection.BeginTransaction"/>
	</doc>
	<doc for="OracleTransaction.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OracleClient.OracleTransaction"/> .</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OracleClient.OracleTransaction"/> and optionally releases the managed
   resources.</para>
		</summary>
		<remarks>
			<para>This method is called by the public
      <see langword="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
      <see langword="Dispose()"/> invokes the protected
      <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter
      set to <see langword="true"/>. <see langword="Finalize"/> invokes <see langword="Dispose"/> with
      <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
   releases all resources held by any managed objects that this <see cref="System.Data.OracleClient.OracleTransaction"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconimplementingdisposemethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconcleaningupunmanagedresources"/> and <see topic="cpconoverridingfinalizemethod"/>.</para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleTransaction"/> and then disposes of it.
   </para>
			<codelink SampleID="Classic WebData OracleTransaction.Dispose" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleTransaction.IsolationLevel">
		<summary>
			<para>Specifies the <see cref="System.Data.IsolationLevel"/>
for this transaction.</para>
		</summary>
		<value>
			<para>The <see cref="System.Data.IsolationLevel"/> for this transaction. The default is
<see langword="ReadCommitted"/>.</para>
		</value>
		<remarks>
			<para>The .NET Framework Data Provider for Oracle only supports
      <see langword="ReadCommitted"/> and <see langword="Serializable"/> isolation
      levels. The behavior of these isolation levels does not correspond to the way
      they behave when used with the .NET Data Provider for SQL Server. For more
      information about how Oracle uses isolation levels, refer to your Oracle
      documentation.</para>
			<para>Parallel transactions are not supported. Therefore,
      the <see cref="System.Data.IsolationLevel"/> applies to the entire transaction.</para>
		</remarks>
	</doc></docs>
