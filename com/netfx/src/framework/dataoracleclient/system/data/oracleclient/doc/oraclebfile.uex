<docs>
	<doc for="OracleBFile.OracleBFile">
		<summary>
			<para>Creates an instance of the <see cref="System.Data.OracleClient.OracleBFile"/> object and conditionally initializes
   it to a null value.</para>
		</summary>
		<param name="isNull">Specifies whether to initialize the object to a null value.</param>
	</doc>
	<doc for="OracleBFile.CloseFile">
		<summary>
			<para>Closes the <see cref="System.Data.OracleClient.OracleBFile"/>.</para>
		</summary>
	</doc>
	<doc for="OracleBFile.OpenFile">
		<summary>
			<para>Opens the <see cref="System.Data.OracleClient.OracleBFile"/>.</para>
		</summary>
	</doc>
	<doc for="OracleBFile.IOracleType.GetCLSObject"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleBFile.Buffered">
		<summary>
			<para>Specifies whether buffered read and write operations are 
      performed on the client rather than on the server.</para>
		</summary>
	</doc>
	<doc for="OracleBFile.ChunkSize">
		<summary>
			<para>Gets a value indicating the minimum number of bytes to 
      retrieve or send from the server during a read/write operation.</para>
		</summary>
	</doc>
	<doc for="OracleBFile.Connection">
		<summary>
			<para>Gets the <see cref="System.Data.OracleClient.OracleConnection"/>
used by this instance of the <see cref="System.Data.OracleClient.OracleBFile"/>.</para>
		</summary>
		<value>
			<para>The connection to a data source. The default is a null
      value.</para>
		</value>
	</doc>
	<doc for="OracleBFile.IsBatched">
		<summary>
			<para>Gets a value indicating whether an application called 
      the <see cref="System.Data.OracleClient.OracleLob.BeginBatch"/> method.</para>
		</summary>
	</doc>
	<doc for="OracleBFile.Close">
		<summary>
			<para>Closes the <see cref="System.Data.OracleClient.OracleBFile"/>.</para>
		</summary>
	</doc>
	<doc for="OracleBFile.SetLength">
		<summary>
			<para>Not currently supported.</para>
		</summary>
		<param name="value"> Not supported.</param>
		<exception cref="System.InvalidOperationException">An Oracle <see langword="BFILE"/> is a read-only object.</exception>
	</doc>
	<doc for="OracleBFile.Clone">
		<summary>
			<para>Creates a copy of this <see cref="System.Data.OracleClient.OracleBFile"/> object associated with the same
   physical file as the original.</para>
		</summary>
		<returns>
			<para>A new <see cref="System.Data.OracleClient.OracleBFile"/> object associated with the same 
   physical file as the original <see langword="OracleBFile"/>
   object.</para>
		</returns>
		<remarks>
			<para>The properties of the new <see cref="System.Data.OracleClient.OracleBFile"/> object initially have the same
   values as those of the original object. However, after the
<see cref="System.Data.OracleClient.OracleBFile.Clone"/> is complete, each 
<see cref="System.Data.OracleClient.OracleBFile"/> object is independent from the other. 
   For example, changing the value of the <see cref="System.Data.OracleClient.OracleBFile.Position"/> property on the original
<see cref="System.Data.OracleClient.OracleBFile"/> does not change the value of 
<see cref="System.Data.OracleClient.OracleBFile.Position"/> on the copy.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.CanWrite">
		<summary>
			<para>Gets a value indicating whether the
      object supports writing.</para>
		</summary>
		<value>
			<para> Always
      returns <see langword="false"/>
      because the Oracle <see langword="BFILE"/>
      data type is
      read-only. </para>
		</value>
	</doc>
	<doc for="OracleBFile.Null">
		<summary>
			<para> Represents a null <see cref="System.Data.OracleClient.OracleBFile"/> object that is not bound to a physical file.</para>
		</summary>
		<remarks>
			<para><see cref="System.Data.OracleClient.OracleBFile.Null"/> can be useful when you
   want to perform a comparison operation on an <see cref="System.Data.OracleClient.OracleBFile"/> to determine nullability.</para>
			<para>Any attempt to perform a read operation on a <see cref="System.Data.OracleClient.OracleBFile.Null"/> 
object succeeds, but does not return any data. Any attempt to perform a
write operation on a <see cref="System.Data.OracleClient.OracleBFile.Null"/> object generates an
exception. Selecting a <see langword="BFILE"/> column that contains a null
value returns <see cref="System.Data.OracleClient.OracleBFile.Null"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.Value">
		<summary>
			<para>Gets an <see cref="System.Array"/> of type <see cref="System.Byte"/> that contains the <see cref="System.Data.OracleClient.OracleBFile"/> data. </para>
		</summary>
		<value>
			<para>An <see cref="System.Array"/> of type <see cref="System.Byte"/> that contains the <see cref="System.Data.OracleClient.OracleBFile"/> data.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleBFile.Value"/> property reads
   the entire <see langword="BFILE"/> at one time.</para>
			<note type="note">
   A
   benefit of using BFILEs is the capability to retrieve large amounts of
   data in chunks at the client. However, when you use <see cref="System.Data.OracleClient.OracleBFile.Value"/>,
   you obtain all the
   data for the BFILE column as one contiguous chunk, which can significantly increase application
   overhead.
</note>
		</remarks>
	</doc>
	<doc for="OracleBFile.Write">
		<summary>
			<para> Not currently supported.</para>
		</summary>
		<param name=" buffer">Not supported.</param>
		<param name="offset">Not supported.</param>
		<param name=" count">Not supported.</param>
		<exception cref="System.NotSupportedException">An Oracle <see langword="BFILE"/> is a read-only object.</exception>
	</doc>
	<doc for="OracleBFile.Flush">
		<summary>
			<para> Not currently supported.</para>
		</summary>
		<remarks>
			<para> In this release, this method is a no-op.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.CanRead">
		<summary>
			<para>Gets a value indicating whether
      the <see langword="BFILE"/> stream can be read.</para>
		</summary>
		<value>
			<para><see langword="false"/> if a <see langword="BFILE"/> is 
   closed or disposed; otherwise, <see langword="true"/>. Always true for <see cref="System.Data.OracleClient.OracleBFile.Null"/>.</para>
		</value>
	</doc>
	<doc for="OracleBFile.CanSeek">
		<summary>
			<para>Gets a value indicating whether forward and backward
      seek operations can be performed.</para>
		</summary>
		<value>
			<para><see langword="false"/> if a <see langword="BFILE"/> is 
   closed or disposed; otherwise,
<see langword="true"/>. Always <see langword="true"/> for <see cref="System.Data.OracleClient.OracleBFile.Null"/>.</para>
		</value>
	</doc>
	<doc for="OracleBFile.FileExists">
		<summary>
			<para> Gets a value indicating whether a physical file containing <see langword="BFILE"/> data exists in
   the operating system.</para>
		</summary>
		<value>
			<para><see langword="true"/> if a physical file containing <see langword="BFILE"/> data exists;
   otherwise <see langword="false"/> .</para>
		</value>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Data.OracleClient.OracleBFile"/> object is closed or disposed.</exception>
		<exception cref="System.InvalidOperationException">The connection with which a <see langword="BFILE"/> is associated is closed.</exception>
	</doc>
	<doc for="OracleBFile.Length">
		<summary>
			<para>Gets a value that returns the length in bytes of the physical file with which the <see cref="System.Data.OracleClient.OracleBFile"/> object is associated.</para>
		</summary>
		<value>
			<para>A long value representing the length of the physical file
      in bytes.</para>
		</value>
		<exception cref="System.ObjectDisposedException"><para> Methods were called after the stream was closed or disposed.</para></exception>
	</doc>
	<doc for="OracleBFile.Position">
		<summary>
			<para> Gets the current read position in the <see cref="System.Data.OracleClient.OracleBFile"/> stream.</para>
		</summary>
		<value>
			<para>The current position within the <see cref="System.Data.OracleClient.OracleBFile"/> stream.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">Attempted to set a position with a negative value or greater than the length of the stream. </exception>
		<exception cref="System.ObjectDisposedException">Methods were called after the stream  was closed or disposed.</exception>
		<remarks>
			<para>Seeking to any location beyond the length
      of the stream is not supported.</para>
			<para>The <see langword="Position"/> property does not keep track of the number of bytes from
   the stream that have been consumed, skipped, or both.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.Dispose1">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OracleClient.OracleBFile"/>.</para>
		</overload>
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Data.OracleClient.OracleBFile"/> and optionally releases the managed
   resources.</para>
		</summary>
	</doc>
	<doc for="OraOracleBFilecleLob.Seek">
		<summary>
			<para> Sets the position on the current <see cref="System.Data.OracleClient.OracleBFile"/> stream.</para>
		</summary>
		<param name="offset">A byte offset relative to origin. If <paramref name="offset "/>is negative, the new position will precede the position specified by <paramref name="origin "/>by the number of bytes specified by <paramref name="offset"/>. If <paramref name="offset "/>is zero, the new position will be the position specified by <paramref name="origin"/>. If <paramref name="offset "/>is positive, the new position will follow the position specified by <paramref name="origin "/>by the number of bytes specified by <paramref name="offset"/>.</param>
		<param name=" origin">A value of type <see langword="System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
		<returns>
			<para>The new position within the current stream.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">Attempted to set a position with a negative value or greater than the length of the stream. </exception>
		<exception cref="System.ObjectDisposedException">Methods were called after the stream was closed or disposed.</exception>
		<remarks>
			<para>If <paramref name="offset"/> is negative, the new position is required to precede the
   position specified by <paramref name="origin"/> by the number of bytes specified by
<paramref name="offset"/>. If <paramref name="offset"/> is zero (0), the new position is required to be 
   the position specified by <paramref name="origin"/>. If <paramref name="offset"/> is positive, the new
   position is required to follow the position specified by <paramref name="origin"/> by the
   number of bytes specified by <paramref name="offset"/>.</para>
			<para>Seeking to any location beyond the length of the stream is not supported.</para>
			<para>Any attempt to access a closed <see cref="System.Data.OracleClient.OracleBFile"/> using
the <see cref="System.Data.OracleClient.OracleBFile.Read"/> or <see cref="System.Data.OracleClient.OracleBFile.Seek"/> methods reopens an
<see cref="System.Data.OracleClient.OracleBFile"/> stream automatically.</para>
			<para>The following C# example assumes this schema in an Oracle table:</para>
			<code>
(col1 number, col2 BFILE)
</code>
			<para>The example demonstrates using the <see cref="System.Data.OracleClient.OracleBFile.Read"/> and 
<see cref="System.Data.OracleClient.OracleBFile.Seek"/> methods to access 
an <see cref="System.Data.OracleClient.OracleBFile"/> object.</para>
			<code>
byte[] buffer = new byte[100];
OracleDataReader myReader = myCommand.ExecuteReader();
using (myReader) {
    if (myReader.Read()) {
            OracleBFile myBFile = myReader.GetOracleBFile(1);
        using (myBFile) {
            myBFile.Seek(0, SeekOrigin.Begin);
            myBFile.Read(buffer, 0, 100);
        }
    }
}
</code>
		</remarks>
	</doc>
	<doc for="OracleBFile.SetFileName">
		<summary>
			<para>Binds the <see cref="System.Data.OracleClient.OracleBFile"/> object to a different file in the
   operating system.</para>
		</summary>
		<param name="directory">The alias of the directory object that contains a physical file.</param>
		<param name=" file">The name of the file in the operating system.</param>
		<exception cref="System.InvalidOperationException">The operation be within a transaction.</exception>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleBFile.SetFileName"/> operation must be within a
   transaction to succeed. Simply calling <see cref="System.Data.OracleClient.OracleBFile.SetFileName"/> on a
<see langword="BFILE"/> associates the <see cref="System.Data.OracleClient.OracleBFile"/> object with a different file, but 
   does not update the Oracle table. To update the
   Oracle table after calling <see cref="System.Data.OracleClient.OracleBFile.SetFileName"/>, you must call
   the <see langword="Update"/> method of
   the <see cref="System.Data.OracleClient.OracleDataAdapter"/> and then commit the transaction.</para>
			<para>An <see cref="System.Data.OracleClient.OracleBFile"/> object has an underlying Oracle
<see langword="LOB"/> 
locator. When you clone an <see cref="System.Data.OracleClient.OracleBFile"/>, the provider does not create a new
<see langword="LOB"/> locator, but shares references to the 
original <see langword="LOB"/> locator between the clones. When you call
<see cref="System.Data.OracleClient.OracleBFile.SetFileName"/> on a clone, there is 
only one <see langword="LOB"/> locator in which the file name is
changed. Therefore, all clones will reflect the new file
name. However, all clones of the <see cref="System.Data.OracleClient.OracleBFile"/> maintain
their previous <see cref="System.Data.OracleClient.OracleBFile.Position"/> settings, and each clone
may be reading from a different location. When a <see cref="System.Data.OracleClient.OracleBFile.SetFileName"/> operation
is performed on a clone, only the clone that has <see cref="System.Data.OracleClient.OracleBFile.SetFileName"/>
called on it has its <see cref="System.Data.OracleClient.OracleBFile.Position"/> reset to
zero. Any other clones retain their current <see cref="System.Data.OracleClient.OracleBFile.Position"/>
settings. </para>
			<para>The following C# example assumes this schema in an Oracle table:</para>
			<code>
(col1 number, col2 BFILE)
</code>
			<para>The example demonstrates using the
<see cref="System.Data.OracleClient.OracleBFile.SetFileName"/>, <see cref="System.Data.OracleClient.OracleBFile.Read"/> and 
<see cref="System.Data.OracleClient.OracleBFile.Seek"/> methods to access 
   an <see cref="System.Data.OracleClient.OracleBFile"/> object.</para>
			<code>
byte[] buffer = new byte[100];
OracleDataReader myReader = myCommand.ExecuteReader();
using (myReader) {
    if (myReader.Read()) {
        OracleBFile myBFile = myReader.GetOracleBFile(1);
        using (myBFile) {
            myBFile.Seek(0, SeekOrigin.Begin);
            myBFile.Read(buffer, 0, 100);

            myCommand.Transaction = myConnection.BeginTransaction();
            myBFile.SetFileName("MYDIR", "MyFile2.jpg");
            myBFile.Read(buffer, 0, 100);
        }
    }
}
</code>
		</remarks>
	</doc>
	<doc for="OracleBFile.DirectoryName">
		<summary>
			<para>Gets the name of the DIRECTORY object, with which an <see cref="System.Data.OracleClient.OracleBFile"/> object is associated.</para>
		</summary>
		<value>
			<para>The name of the DIRECTORY object.</para>
		</value>
		<exception cref="System.ObjectDisposedException">Attempted to call <see langword="DirectoryName"/> on a closed or disposed <see langword="OracleBFile"/> object.</exception>
		<remarks>
			<para>Each non-NULL <see cref="System.Data.OracleClient.OracleBFile"/> object is associated with two entities
   that define the location of underlying physical file:</para>
			<list type="number"><item>
					<term>
      An Oracle DIRECTORY object, which is a database alias
      for a directory in the file system, and</term>
				</item>
				<item>
					<term>
      The file name of the underlying physical file, which is located in the
      directory associated with the DIRECTORY object.</term>
				</item>
			</list>
			<para>The <see cref="System.Data.OracleClient.OracleBFile.DirectoryName"/> property returns the name
of the DIRECTORY object from the Oracle database. </para>
			<para>For more information about creating and using an Oracle
<see langword="BFILE"/>, see the appropriate topic in your Oracle 
   documentation.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.FileName">
		<summary>
			<para>Gets the name of the <see langword="BFILE"/> without the path.</para>
		</summary>
		<value>
			<para>The name of the BFILE.</para>
		</value>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Data.OracleClient.OracleBFile"/> object is closed or disposed.</exception>
		<remarks>
			<para>For <see cref="System.Data.OracleClient.OracleBFile.Null"/> , an empty string is returned.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.IsNull">
		<summary>
			<para>Gets a value that indicates whether
      the <see cref="System.Data.OracleClient.OracleBFile"/> is
      a <see cref="System.Data.OracleClient.OracleBFile.Null"/> stream.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Data.OracleClient.OracleBFile"/> is a <see cref="System.Data.OracleClient.OracleBFile.Null"/> stream; otherwise 
<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="OracleBFile">
		<summary>
			<para>Represents a managed <see cref="System.Data.OracleClient.OracleBFile"/> object designed to work with the
   Oracle <see langword="BFILE"/> data type. This class cannot
   be inherited.</para>
		</summary>
		<remarks>
			<para>The Oracle <see langword="BFILE"/>
data type is an Oracle <see langword="LOB"/> data type that contains a
reference to binary data with a maximum size of 4 gigabytes. An Oracle
<see langword="BFILE"/> differs from other Oracle <see langword="LOB"/> data types in that its data is stored in a physical file in the
operating system instead of on the server. Note that the <see langword="BFILE"/> data type provides
read-only access to data. Therefore, write-oriented methods inherited from the <see cref="System.IO.Stream"/> class are not
supported.</para>
			<para>Other characteristics of a <see langword="BFILE"/> data type that
distinguish it from a <see langword="LOB"/> data type are that it:</para>
			<list type="bullet"><item>
					<term>
      
      Contains unstructured data.</term>
				</item>
				<item>
					<term>
      
      Supports server-side chunking.</term>
				</item>
				<item>
					<term>
      
      Uses reference copy semantics. For example, if you
      perform a copy operation on a <see langword="BFILE"/>, only the
   <see langword="BFILE"/> locator (which is a
      reference to the file) is copied. The data in the file is not copied.</term>
				</item>
			</list>
			<para>The <see langword="BFILE"/> data type should be used for 
referencing <see langword="LOB"/>s that are large in size, and therefore, not
practical to store in the database. There is client, server, and communication
overhead for using a <see langword="BFILE"/> data type compared to the
<see langword="LOB"/> data type. It is more efficient to access a 
<see langword="BFILE"/> if you only need to obtain a small amount of data. It is 
more efficient to access database-resident <see langword="LOB"/>
s if you need to obtain the entire
object.</para>
			<para>Each non-NULL <see cref="System.Data.OracleClient.OracleBFile"/> object
is associated with two entities that define the
location of the underlying physical
file:</para>
			<list type="number"><item>
					<term>
      
      An Oracle DIRECTORY object, which is a database alias
      for a directory in the file system, and</term>
				</item>
				<item>
					<term>
      
      The file name of the underlying physical file, which is located in
      the directory associated with the DIRECTORY object.</term>
				</item>
			</list>
			<para>After a <see langword="BFILE"/> is created, you
can retrieve its locator in
the form of an <see cref="System.Data.OracleClient.OracleBFile"/> object using the <see cref="System.Data.OracleClient.OracleCommand.ExecuteReader"/> or <see cref="System.Data.OracleClient.OracleCommand.ExecuteScalar"/> methods.</para>
			<para>To obtain an <see cref="System.Data.OracleClient.OracleBFile"/> object, call the <see cref="System.Data.OracleClient.OracleDataReader.GetOracleBFile"/> method.</para>
			<para>The physical file that an <see cref="System.Data.OracleClient.OracleBFile"/> object is associated with does not
need to exist until you attempt to access it. An application
can bind an <see cref="System.Data.OracleClient.OracleBFile"/> to a non-existing file,
create the physical file in the expected location, and then call
<see cref="System.Data.OracleClient.OracleBFile.Read"/> 
. </para>
			<para>Any attempt to access a closed <see cref="System.Data.OracleClient.OracleBFile"/> using the <see cref="System.Data.OracleClient.OracleBFile.Read"/> or <see cref="System.Data.OracleClient.OracleBFile.Seek"/> methods reopens an
<see cref="System.Data.OracleClient.OracleBFile"/> stream 
automatically. </para>
			<para>The following C# example demonstrates how you can create a
<see langword="BFILE"/> in an Oracle table, and then retrieve it in the form of 
   an <see cref="System.Data.OracleClient.OracleBFile"/> object. The example demonstrates the
   use of the <see cref="System.Data.OracleClient.OracleDataReader"/> object and the
<see cref="System.Data.OracleClient.OracleBFile"/>
				<see cref="System.Data.OracleClient.OracleBFile.Seek"/> and <see cref="System.Data.OracleClient.OracleBFile.Read"/>
methods.</para>
			<code>
using System;
using System.IO;
using System.Data;
using System.Data.OracleClient;

public class Sample
{
    public static void Main(string[] args)
    {
        OracleConnection myConnection = new OracleConnection("Data Source=Oracle8i;Integrated Security=yes ");
        myConnection.Open();

        OracleCommand myCommand = myConnection.CreateCommand();
        myCommand.CommandText = "create or replace directory MyDir as 'c:\\bfiles'";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "create table MyTable(col1 number, col2 BFILE)";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "insert into MyTable values ('2', BFILENAME('MYDIR', 'MyFile.jpg'))";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "select * from MyTable";

        byte[]              buffer = new byte[100];

        OracleDataReader myReader = myCommand.ExecuteReader();
        using (myReader) {
            if (myReader.Read()) {
                   OracleBFile myBFile = myReader.GetOracleBFile(1);
                using (myBFile) {
                    myBFile.Seek(0, SeekOrigin.Begin);
                    myBFile.Read(buffer, 0, 100);
                }
            }
        }

        myConnection.Close();
    }

}
</code>
			<para>For more information about creating and using an Oracle
<see langword="BFILE"/>, see the appropriate topic in your 
   Oracle documentation. </para>
			<note type="note">
   The <see langword="BeginWrite"/>,
<see langword="EndWrite"/>, and <see langword="WriteByte"/> methods, 
   which are inherited from the <see langword="System.IO.Stream"/>
   class, are not supported because the <see langword="BFILE"/>
   
   data type is read-only.
</note>
		</remarks>
	</doc>
	<doc for="OracleBFile.Read">
		<summary>
			<para>Reads a sequence of bytes from the
      current <see cref="System.Data.OracleClient.OracleBFile"/> stream and advances the position
      within the stream by the number of bytes read.</para>
		</summary>
		<param name=" buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the bytes read from the current source.</param>
		<param name="offset">The zero-based byte offset in <paramref name="buffer "/>at which to begin storing the data read from the current stream.</param>
		<param name=" count">The maximum number of bytes to be read from the current stream.</param>
		<returns>
			<para> The total number of bytes read into the buffer. This
      may be less than the number of bytes requested if that many bytes are not
      currently available, or zero (0) if the end of the file has been reached.</para>
		</returns>
		<exception cref="System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
		<exception cref="System.InvalidOperationException">The connection with which a <see langword="BFILE"/> is associated is closed. </exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.ObjectDisposedException">Methods were called after the stream was closed or disposed.</exception>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleBFile.Read"/> method read a maximum of 
<paramref name="count"/> bytes from the current stream and store them in <paramref name="buffer"/> 
beginning at <paramref name="offset"/>
. The current position within the stream is advanced by the number of
bytes read; however, if an exception occurs, the current position within the
stream remains unchanged. <see cref="System.Data.OracleClient.OracleBFile.Read"/> returns the number of
bytes read. The return value is zero only if the position is currently at the
end of the stream. <see cref="System.Data.OracleClient.OracleBFile.Read"/> will block until at least
one byte of data can be read, in the event that no data is available.
<see cref="System.Data.OracleClient.OracleBFile.Read"/> returns 0 only when the 
end of the file has been reached. <see cref="System.Data.OracleClient.OracleBFile.Read"/>

is free to return fewer bytes
than requested even if the end of the stream has not been reached.</para>
			<para>Any attempt to access a closed <see cref="System.Data.OracleClient.OracleBFile"/> using
the <see cref="System.Data.OracleClient.OracleBFile.Read"/> or <see cref="System.Data.OracleClient.OracleBFile.Seek"/> methods reopens an
<see cref="System.Data.OracleClient.OracleBFile"/> 
stream automatically.</para>
			<para>The following C# example assumes this schema in an Oracle table:</para>
			<code>
(col1 number, col2 BFILE)
</code>
			<para>The example demonstrates using the <see cref="System.Data.OracleClient.OracleBFile.Read"/> and
<see cref="System.Data.OracleClient.OracleBFile.Seek"/> methods to access 
an <see cref="System.Data.OracleClient.OracleBFile"/> object.</para>
			<code>
byte[] buffer = new byte[100];
OracleDataReader myReader = myCommand.ExecuteReader();
using (myReader) {
    if (myReader.Read()) {
            OracleBFile myBFile = myReader.GetOracleBFile(1);
        using (myBFile) {
            myBFile.Seek(0, SeekOrigin.Begin);
            myBFile.Read(buffer, 0, 100);
        }
    }
}
</code>
		</remarks>
	</doc>
	<doc for="OracleBFile.CopyTo1">
		<overload>
			<para>Copies data from this <see cref="System.Data.OracleClient.OracleBFile"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</overload>
		<summary>
			<para>Copies the entire contents of this <see cref="System.Data.OracleClient.OracleBFile"/> to the beginning of a destination <see cref="System.Data.OracleClient.OracleLob"/>.</para>
		</summary>
		<param name="destination">The destination <see cref="System.Data.OracleClient.OracleLob"/></param>
		<returns>
			<para>The number of bytes copied.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The destination <see langword="OracleLob"/> is a null object reference.</exception>
		<exception cref="System.InvalidOperationException"><para>The destination is a null <see langword="OracleLob"/>.</para>
			<para>or</para><para>The connection with which this <see langword="OracleBFile"/> is associated is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see langword="OracleBFile"/> object is closed or disposed.</exception>
		<remarks>
			<para>The underlying data types of the source <see cref="System.Data.OracleClient.OracleBFile"/> and the
   destination <see cref="System.Data.OracleClient.OracleLob"/> must be compatible. For example, you
   cannot copy binary data to a destination <see cref="System.Data.OracleClient.OracleLob"/> that has a character data type.</para>
			<para> You must have write access to the destination <see cref="System.Data.OracleClient.OracleLob"/> for the <see cref="System.Data.OracleClient.OracleBFile.CopyTo"/>
operation to execute correctly.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.CopyTo2">
		<summary>
			<para>Copies the entire contents of this <see cref="System.Data.OracleClient.OracleBFile"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/> at the specified offset.</para>
		</summary>
		<param name="destination">The destination <see cref="System.Data.OracleClient.OracleLob"/>.</param>
		<param name=" destinationOffset">The offset to which to copy.</param>
		<returns>
			<para>The number of bytes copied.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The destination <see langword="OracleLob"/> is a null object reference.</exception>
		<exception cref="System.InvalidOperationException"><para>The destination is a null <see langword="OracleLob"/>.</para>
			<para>or</para>
			<para>The connection with which this <see langword="OracleBFile"/> is associated is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see langword="OracleBFile"/> object is closed or disposed.</exception>
		<remarks>
			<para>The underlying data types of the source <see cref="System.Data.OracleClient.OracleBFile"/> and the destination
<see cref="System.Data.OracleClient.OracleLob"/> must be compatible. For example, you 
   cannot copy binary data to a destination <see cref="System.Data.OracleClient.OracleLob"/> that has a character
   data type.</para>
			<para>You must have write access to the destination <see cref="System.Data.OracleClient.OracleLob"/> for the <see cref="System.Data.OracleClient.OracleBFile.CopyTo"/>
operation to execute correctly.</para>
		</remarks>
	</doc>
	<doc for="OracleBFile.CopyTo3">
		<summary>
			<para>Copies from this <see cref="System.Data.OracleClient.OracleBFile"/> to a destination <see cref="System.Data.OracleClient.OracleLob"/> with the specified amount of data, the source offset, and the destination
   offset.</para>
		</summary>
		<param name=" sourceOffset">The offset from which to copy.</param>
		<param name="destination">The destination <see cref="System.Data.OracleClient.OracleLob"/>.</param>
		<param name=" destinationOffset">The offset to which to copy.</param>
		<param name=" amount">The quantity of data, in bytes, to copy.</param>
		<returns>
			<para>The number of bytes copied.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">The value of the amount parameter is less than zero or greater than 4 gigabytes.</exception>
		<exception cref="System.ArgumentNullException">The destination <see langword="OracleLob"/> is a null object reference.</exception>
		<exception cref="System.InvalidOperationException"><para>The destination is a null <see langword="OracleLob"/>.</para>
			<para>or</para>
			<para>The connection with which this <see langword="OracleBFile"/> is associated is closed.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see langword="OracleBFile"/> object is closed or disposed.</exception>
		<remarks>
			<para>The underlying data types of the source <see cref="System.Data.OracleClient.OracleBFile"/> and the destination
<see cref="System.Data.OracleClient.OracleLob"/> must be compatible. For example, you 
   cannot copy binary data to a destination <see cref="System.Data.OracleClient.OracleLob"/> that has a character
   data type.</para>
			<para>You must have write access to the destination <see cref="System.Data.OracleClient.OracleLob"/> for the <see cref="System.Data.OracleClient.OracleBFile.CopyTo"/>
operation to execute correctly.</para>
		</remarks>
	</doc>
</docs>
