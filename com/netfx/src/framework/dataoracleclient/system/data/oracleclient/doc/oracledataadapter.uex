<docs>
	<doc for="OracleDataAdapter.OracleDataAdapter3">
		<summary>
			<para>Initializes a new instance of the 
 <see cref="System.Data.OracleClient.OracleDataAdapter"/> class with an SQL SELECT statement and a connection string.</para>
		</summary>
		<param name="selectCommandText">The text of the command.</param>
		<param name="selectConnectionString">The connection string.</param>
		<remarks>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter2" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="OracleDataAdapter.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Data.OracleClient.OracleDataAdapter"/> .</para>
		</overload>
		<summary>
			<para>Releases the resources used by the 
 <see cref="System.Data.OracleClient.OracleDataAdapter"/> .</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see topic="frlrfSystemComponentModelComponentClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
<see langword="Dispose()"/> invokes the protected 
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter 
 set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Data.OracleClient.OracleDataAdapter"/> references. It does this by invoking the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
 overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
 objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>. </para>
		</remarks>
		<example>
			<para> The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and then disposes of it.
 </para>
			<codelink SampleID="Classic WebData OracleDataAdapter.Dispose" SnippetID="1"/>
		</example>
	</doc><doc for="OracleDataAdapter.OracleDataAdapter2">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.OracleClient.OracleDataAdapter"/> class with an SQL SELECT statement and an
   <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</summary>
		<param name="selectCommandText">The text of the command.</param>
		<param name="selectConnection">An <see cref="System.Data.OracleClient.OracleConnection"/> that represents the connection.</param>
		<remarks>
			<para> This implementation of the <see cref="System.Data.OracleClient.OracleDataAdapter"/> opens the specified 
<see cref="System.Data.OracleClient.OracleConnection"/>
if it is not already open, and then closes it. This can be useful in an
application that must call the <see langword="Fill"/> method for two or more
<see cref="System.Data.OracleClient.OracleDataAdapter"/> 
objects. If the <see cref="System.Data.OracleClient.OracleConnection"/> is already open, you must explicitly call
<see cref="System.Data.OracleClient.OracleConnection.Close"/> or <see cref="System.Data.OracleClient.OracleConnection.Dispose"/> 
to close it.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter3" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="OracleDataAdapter.OracleDataAdapter">
		<overload>
			<para>Initializes a new
      instance of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>
      class.</para>
		</overload>
		<summary>
			<para>Initializes a new
      instance of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>
      class.</para>
		</summary>
		<remarks>
			<para>When you create an instance of
      <see cref="System.Data.OracleClient.OracleDataAdapter"/>, the following read/write properties are set to their default values, as shown in the table.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Default Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of
   its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc><doc for="OracleDataAdapter.CreateRowUpdatedEvent">
		<summary>
			<para>Initializes a new instance of the 
   <see langword="RowUpdatedEventArgs"/> class,
      regardless of whether the update is successful.</para>
		</summary>
		<param name="dataRow">The <see langword="DataRow"/> used to update the database.</param>
		<param name="command">The <see cref="System.Data.OracleClient.OracleCommand"/> executed during the update operation.</param>
		<param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
		<param name="tableMapping">A <see langword="DataTableMapping"/> object.</param>
		<returns>
			<para>A new instance of the 
   <see langword="System.Data.Common.RowUpdatedEventArgs"/> class.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      When overriding <see langword="CreateRowUpdatedEvent"/>
      in
      a derived class, be sure to call the <see cref="System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent"/> method of the
      base class.
      
   </note>
		</remarks>
	</doc>
	<doc for="OracleDataAdapter.CreateRowUpdatingEvent">
		<summary>
			<para>Initializes a new instance of the 
   <see langword="RowUpdatingEventArgs"/> class.</para>
		</summary>
		<param name="dataRow">The <see langword="DataRow"/> that updates the database.</param>
		<param name="command">The <see cref="System.Data.OracleClient.OracleCommand"/> to execute during the update operation.</param>
		<param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
		<param name="tableMapping">A <see langword="DataTableMapping"/> object.</param>
		<returns>
			<para>A new instance of the 
   <see langword="System.Data.Common.RowUpdatingEventArgs"/> class.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      When overriding <see langword="CreateRowUpdatingEvent"/> in
      a derived class, be sure to call the <see langword="CreateRowUpdatingEvent"/>
      
      method of the
      base class.
      
   </note>
		</remarks>
	</doc>
	<doc for="OracleDataAdapter.RowUpdated">
		<summary>
			<para>Occurs during an update 
      operation after a command is executed against the database.</para>
		</summary>
		<remarks>
			<para>When using the <see langword="Update"/> method, there are two events that
   occur per data row updated. The order of execution is as follows:</para>
			<list type="number"><item>
					<term>
      
      The values in the <see langword="DataRow"/> are moved
      to the parameter values.</term>
				</item>
				<item>
					<term>
      
      The <see langword="OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>
      
      The command executes.</term>
				</item>
				<item>
					<term>
      
      If the <see langword="UpdateRowSource"/>
      
      enumeration is set to
   <see langword="FirstReturnedRecord"/>, the first 
      returned result is placed in the <see langword="DataRow"/>.</term>
				</item>
				<item>
					<term>
      
      If there are output parameters, they are placed in
      the <see langword="DataRow"/>.</term>
				</item>
				<item>
					<term>
      
      The <see langword="OnRowUpdated"/>
      
      event is
      raised.<see langword=""/></term>
				</item>
				<item>
					<term><see langword="AcceptChanges"/>

is called.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="OracleDataAdapter.RowUpdating">
		<summary>
			<para>Occurs during <see cref="System.Data.Common.DbDataAdapter.Update"/> 
before a command is executed against the data
source.</para>
		</summary>
		<remarks>
			<para>When using the <see langword="Update"/> method, there are two events that
   occur per data row updated. The order of execution is as follows:</para>
			<list type="number"><item>
					<term>
      
      The values in the <see langword="DataRow"/> are moved
      to the parameter values.</term>
				</item>
				<item>
					<term>
      
      The <see langword="OnRowUpdating"/> event is raised.</term>
				</item>
				<item>
					<term>
      
      The command executes.</term>
				</item>
				<item>
					<term>
      
      If the <see langword="UpdateRowSource"/>
      
      enumeration is set to
   <see langword="FirstReturnedRecord"/>, the first 
      returned result is placed in the <see langword="DataRow"/>.</term>
				</item>
				<item>
					<term>
      
      If there are output parameters, they are placed in
      the <see langword="DataRow"/>.</term>
				</item>
				<item>
					<term>
      
      The <see langword="OnRowUpdated"/>
      
      event is
      raised.<see langword=""/></term>
				</item>
				<item>
					<term><see langword="AcceptChanges"/>

is called.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="OracleDataAdapter.OracleDataAdapter1">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.OracleClient.OracleDataAdapter"/> class with the specified SQL SELECT
      statement.</para>
		</summary>
		<param name="selectCommand">An <see cref="System.Data.OracleClient.OracleCommand"/> that is an SQL SELECT statement.</param>
		<remarks>
			<para>When you create an instance of <see cref="System.Data.OracleClient.OracleDataAdapter"/>, the following read/write properties are set to their default values, as shown
   in the table.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter1" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.MissingMappingAction"/>
		<seealso cref="System.Data.MissingSchemaAction"/>
	</doc>
	<doc for="OracleDataAdapter.IDbDataAdapter.DeleteCommand"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleDataAdapter.IDbDataAdapter.InsertCommand"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleDataAdapter.IDbDataAdapter.SelectCommand"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleDataAdapter.IDbDataAdapter.UpdateCommand">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="OracleConnection.OracleDataAdapter1">
		<overload>
			<para>Initializes a new
      instance of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>
      class.</para>
		</overload>
		<summary>
			<para>Initializes a new
      instance of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>
      class.</para>
		</summary>
		<remarks>
			<para>When you create an instance of
      <see cref="System.Data.OracleClient.OracleDataAdapter"/>, the following read/write properties are set to their default values, as shown in the table.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Default Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of
   its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection.OracleDataAdapter2">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.OracleClient.OracleDataAdapter"/> class with the specified SQL SELECT
      statement.</para>
		</summary>
		<param name="selectCommand">An <see cref="System.Data.OracleClient.OracleCommand"/> that is an SQL SELECT statement or stored procedure, and is set as the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>.</param>
		<remarks>
			<para> This implementation of the <see cref="System.Data.OracleClient.OracleDataAdapter"/> constructor sets the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property to the value
   specified in the <paramref name="selectCommand"/> parameter.</para>
			<para>When you create an instance of <see cref="System.Data.OracleClient.OracleDataAdapter"/>, the following read/write properties are set to their default values, as shown
in the table.</para>
			<list type="table">
				<listheader>
					<term>Properties</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingMappingAction"/></term>
					<description><see langword="MissingMappingAction.Passthrough"/></description>
				</item>
				<item>
					<term>
						<see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/></term>
					<description><see langword="MissingSchemaAction.Add"/></description>
				</item>
			</list>
			<para>You can change the value of any of these properties through a separate call
   to the property.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleDataAdapter.Fill1">
		<overload>
			<para>Adds or refreshes rows in the <see cref="System.Data.DataSet"/> to match those
   in the data source.</para>
		</overload>
		<summary>
			<para>Adds or refreshes rows in a specified range in the <see cref="System.Data.DataSet"/> to match those
   in the data source using the <see cref="System.Data.DataSet"/> and source table names, command string and command behavior.</para>
		</summary>
		<param name="dataSet">A <see cref="System.Data.DataSet"/> to fill with records and, if necessary, schema.</param>
		<param name="startRecord">The zero-based record number to start with.</param>
		<param name="maxRecords">The maximum number of records to retrieve.</param>
		<param name="srcTable">The name of the source table to use for table mapping. </param>
		<param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataSet"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<exception cref="System.InvalidOperationException">The source table is invalid.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="startRecord"/> parameter was less than 0.</para>
			<para> -or-</para>
			<para> The <paramref name="maxRecords"/> parameter was less than 0. </para></exception>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/>
operation then adds the rows to destination <see cref="System.Data.DataTable"/> objects in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> objects if they do not already exist. When creating
<see cref="System.Data.DataTable"/> objects, the <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para> If the <see cref="System.Data.Common.DbDataAdapter"/> encounters duplicate columns while populating
a <see cref="System.Data.DataTable"/>, it generates
names for the subsequent columns, using the pattern "columnname1",
"columnname2", "columnname3", and so on. If the incoming data contains unnamed
columns, they are placed in the <see cref="System.Data.DataSet"/> according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/> each result set is placed in a
separate table. Additional result sets are named by appending integral values to
the specified table name (for example, "Table", "Table1", "Table2", and so on).
Applications
should use caution when using column and table names to ensure that conflicts with these
naming patterns do not occur.</para>
			<para>The <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> method supports scenarios
where the <see cref="System.Data.DataSet"/> contains
multiple <see cref="System.Data.DataTable"/> objects whose names differ only by case. In
such situations, <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> performs a
case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
dataset.Tables.Add("AAA");
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".
</code>
			<para>If <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> is called and the <see cref="System.Data.DataSet"/> contains only
one <see cref="System.Data.DataTable"/> whose name differs only by case, that <see cref="System.Data.DataTable"/> is updated. In this scenario, the comparison is case insensitive.
The following C# code illustrates this behavior.</para>
			<code>
DataSet dataset = new DataSet();
dataset.Tables.Add("aaa");
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.
</code>
			<para> You can use the <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
			<note type="note">
   When handling batch SQL statements that
   return multiple results, the implementation of <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/>
   and <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>
   for a .NET data provider retrieves schema information for only the first result.
   
</note>
		</remarks>
	</doc>
	<doc for="OracleDataAdapter.Fill2">
		<summary>
			<para>Adds or refreshes rows in a <see cref="System.Data.DataTable"/> to match those
   in the data source using the <see cref="System.Data.DataTable"/> name, the specified SQL
   SELECT statement, and <see cref="System.Data.CommandBehavior"/>.</para>
		</summary>
		<param name="dataTable">A <see cref="System.Data.DataTable"/> to fill with records and, if necessary, schema.</param>
		<param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
		<param name="behavior">One of the <see cref="System.Data.CommandBehavior"/> values.</param>
		<returns>
			<para>The number of rows successfully added to or refreshed in the <see cref="System.Data.DataTable"/>. This does not include rows affected by statements
   that do not return rows.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/>
method retrieves rows from the data source using the SELECT statement specified by an associated <see cref="System.Data.IDbDataAdapter.SelectCommand"/>
property. The
connection object associated with the SELECT statement must be valid, but it does
not need to be open. If the connection is closed before <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> is called, it is opened to retrieve data, then
closed. If the connection is open before <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> is called, it remains open.</para>
			<para>The <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/>
operation then
adds the rows to the specified destination <see cref="System.Data.DataTable"/> object in the <see cref="System.Data.DataSet"/>,
creating the <see cref="System.Data.DataTable"/> object if it does not already exist. When creating a
<see cref="System.Data.DataTable"/> object, the <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> operation normally creates only column name metadata.
However, if the <see cref="System.Data.IDataAdapter.MissingSchemaAction"/> property
is set to <see langword="AddWithKey"/>, appropriate primary keys and constraints are also created.</para>
			<para>If the <see cref="System.Data.Common.DbDataAdapter"/> object
encounters duplicate columns while populating a <see cref="System.Data.DataTable"/>, it will generate names for the
subsequent columns, using the pattern "columnname1", "columnname2",
"columnname3", and so on. If the incoming data contains unnamed columns, they
are placed in the <see cref="System.Data.DataSet"/>according to the pattern "Column1", "Column2", and
so on. When multiple result sets are added to the <see cref="System.Data.DataSet"/>each result
set is placed in a separate table. Additional result sets are named by appending
integral values to the specified table name (for example, "Table", "Table1",
"Table2", and so on). Applications should use caution when using column and
table names to ensure that conflicts with these naming patterns do not
occur.</para>
			<para> You can use the <see cref="System.Data.OracleClient.OracleDataAdapter.Fill"/> method multiple times on the same
<see cref="System.Data.DataTable"/>. If a primary key exists, incoming rows
are merged with matching rows that already exist. If no primary key exists, incoming rows
are appended to the <see cref="System.Data.DataTable"/>.</para>
		</remarks>
	</doc>
	<doc for="OracleConnection.OracleDataAdapter3">
		<summary>
			<para>Initializes a new instance of the
   <see cref="System.Data.OracleClient.OracleDataAdapter"/> class with an SQL SELECT statement and a connection string.</para>
		</summary>
		<param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>.</param>
		<param name="selectConnectionString">The connection string.</param>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleConnection.OracleDataAdapter4">
		<summary>
			<para>Initializes a new instance
      of the <see cref="System.Data.OracleClient.OracleDataAdapter"/> class with an SQL SELECT statement and an
   <see cref="System.Data.OracleClient.OracleConnection"/>.</para>
		</summary>
		<param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>.</param>
		<param name="selectConnection">An <see cref="System.Data.OracleClient.OracleConnection"/> that represents the connection.</param>
		<remarks>
			<para> This implementation of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>
can be useful in an
application that must call the <see langword="Fill"/> method for two or more
<see cref="System.Data.OracleClient.OracleDataAdapter"/> 
objects.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets some of its properties.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.OracleDataAdapter3" SnippetID="1"/>
		</example>
	</doc>
	<doc for="OracleDataAdapter.SelectCommand">
		<summary>
			<para>Gets or sets an SQL statement
      or stored procedure used to select records in the database.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OracleClient.OracleCommand"/> that is used during a fill operation to
   select records from database for placement in the
<see langword="DataSet"/> 
.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> is assigned to a previously created <see cref="System.Data.OracleClient.OracleCommand"/>,
   the <see cref="System.Data.OracleClient.OracleCommand"/> is not cloned. Instead, the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> maintains a reference to the previously
   created <see cref="System.Data.OracleClient.OracleCommand"/>
   object.</para>
			<para> If <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> does not return any rows,
no tables are added to the <see langword="DataSet"/>
, and no exception is raised.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets the 
<see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> and <see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> properties. It assumes 
   you have already created an <see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.SelectCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="OracleDataAdapter.DeleteCommand">
		<summary>
			<para>Gets or sets an SQL statement or stored procedure used to delete records in the database.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OracleClient.OracleCommand"/> used during an update operation to delete
   records in the database that correspond to deleted rows in the
<see langword="DataSet"/> 
.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/> property is assigned to a
   previously created <see cref="System.Data.OracleClient.OracleCommand"/>, the <see cref="System.Data.OracleClient.OracleCommand"/> is not cloned. Instead, the
<see cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/> maintains a reference to the 
   previously created <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
			<para>During an update operation, if
<see cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/> is not set and primary key 
   information is present in the <see langword="DataSet"/>
   , you can use the <see cref="System.Data.OracleClient.OracleCommandBuilder"/> class to automatically
   generate the <see cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/> , and additional
   commands needed to reconcile the <see cref="System.Data.DataSet"/> to the database. To do this, set the
<see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property of the <see cref="System.Data.OracleClient.OracleDataAdapter"/>. The generation logic also requires key column 
   information to be present in the <see cref="System.Data.DataSet"/>. For more information see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an
      <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> and <see cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/> properties. It assumes
      you have already created an <see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.DeleteCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="OracleDataAdapter.InsertCommand">
		<summary>
			<para>Gets or sets an SQL statement or stored procedure used to insert new records into the database.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OracleClient.OracleCommand"/> used during an update operation to insert
   records in the database that correspond to new rows in the
<see langword="DataSet"/> 
.</para>
		</value>
		<remarks>
			<para>When the <see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> property is assigned to a
   previously created <see cref="System.Data.OracleClient.OracleCommand"/> object, the <see cref="System.Data.OracleClient.OracleCommand"/> is not cloned. Instead,
<see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> maintains a reference to the 
   previously created <see cref="System.Data.OracleClient.OracleCommand"/>.</para>
			<para>During an update operation, if
<see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> is not set and primary key 
   information is present in the <see langword="DataSet"/>
   , you can use the <see cref="System.Data.OracleClient.OracleCommandBuilder"/>class to automatically
   generate <see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> , and additional
   commands needed to reconcile the <see cref="System.Data.DataSet"/> to the database. To do this, set the
<see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property of the 
<see cref="System.Data.OracleClient.OracleDataAdapter"/>. 
   The generation logic also requires key column information to be present in the
<see cref="System.Data.DataSet"/>. For more information see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
			<note type="note">
   If execution of this command returns rows,
   these rows may be added to the <see cref="System.Data.DataSet"/> depending upon how you set the <see cref="System.Data.OracleClient.OracleCommand.UpdatedRowSource"/> property of the <see cref="System.Data.OracleClient.OracleCommand"/> object.
   
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> and <see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> properties. It assumes you
   have already created an <see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.InsertCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/>
	</doc>
	<doc for="OracleDataAdapter.OnRowUpdated">
		<summary>
			<para> Raises the <see cref="System.Data.OracleClient.OracleDataAdapter.RowUpdated"/> event using a RowUpdatedEventArgs
   object.</para>
		</summary>
		<param name="value">A <see langword="System.Data.Common.RowUpdatedEventArgs"/> object that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconprovidingeventfunctionality"/>.
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OracleClient.OracleDataAdapter.OnRowUpdated"/> in a derived class,
      be sure to call the <see cref="System.Data.OracleClient.OracleDataAdapter.OnRowUpdated"/> method of the base class.
      
      </note>
		</remarks>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.OnRowUpdating"/>
	</doc>
	<doc for="OracleDataAdapter.OnRowUpdating">
		<summary>
			<para> Raises the <see cref="System.Data.OracleClient.OracleDataAdapter.RowUpdating"/> event using a
<see langword="RowUpdatingEventArgs"/> object, whether
   or not the update operation is successful.</para>
		</summary>
		<param name="value">A <see langword="System.Data.Common.RowUpdatingEventArgs"/> object that contains the event data. </param>
		<remarks>
			<para> Raising an event invokes the event handler
      through a delegate. For an overview, see <see topic="cpconprovidingeventfunctionality"/>.
      </para>
			<note type="inheritinfo">
      When
      overriding <see cref="System.Data.OracleClient.OracleDataAdapter.OnRowUpdating"/> in a derived class,
      be sure to call the <see cref="System.Data.OracleClient.OracleDataAdapter.OnRowUpdating"/> method of the base class.
      
      </note>
		</remarks>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.OnRowUpdated"/>
	</doc>
	<doc for="OracleDataAdapter.UpdateCommand">
		<summary>
			<para>Gets or sets an SQL
      statement or stored procedure used to update records in the database.</para>
		</summary>
		<value>
			<para>An <see cref="System.Data.OracleClient.OracleCommand"/> used during an update operation to update
   records in the database that correspond to modified rows in the
<see langword="DataSet"/> 
.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/> is assigned to a previously
   created <see cref="System.Data.OracleClient.OracleCommand"/>, the <see cref="System.Data.OracleClient.OracleCommand"/> is not cloned. Instead, the
<see cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/> maintains a reference to the 
   previously created <see cref="System.Data.OracleClient.OracleCommand"/> object.</para>
			<para>During an update operation, if
<see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/> is not set and primary key 
   information is present in the DataSet, you can use the <see cref="System.Data.OracleClient.OracleCommandBuilder"/> class to automatically
   generate <see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/>, and additional
   commands needed to reconcile the <see cref="System.Data.DataSet"/>to the database. To do this, set the
<see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> property of the 
<see cref="System.Data.OracleClient.OracleDataAdapter"/>. 
   The generation logic also requires key column information to be present in the
<see cref="System.Data.DataSet"/>. For more information see <see topic="cpconautomaticallygeneratedcommands"/>.</para>
			<note type="note">
   If execution of this command returns rows,
   these rows may be merged with the <see cref="System.Data.DataSet"/> depending upon how you set the
<see cref="System.Data.OracleClient.OracleCommand.UpdatedRowSource"/> property of the <see cref="System.Data.OracleClient.OracleCommand"/> object.
   
</note>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Data.OracleClient.OracleDataAdapter"/> and sets the <see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/> and <see cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/> properties. It assumes
   you have already created an <see cref="System.Data.OracleClient.OracleConnection"/> object.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter.UpdateCommand" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/>
		<seealso cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/>
	</doc>
	<doc for="OracleDataAdapter">
		<summary>
			<para>Represents a set of data commands and a connection to a
      database that are used to fill the <see langword="DataSet"/>
      and update the database. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Data.OracleClient.OracleDataAdapter"/> serves as a bridge between a
<see langword="DataSet"/> 
and database for retrieving and saving
data. The <see cref="System.Data.OracleClient.OracleDataAdapter"/> provides this bridge by using <see cref="System.Data.Common.DbDataAdapter.Fill"/> to load data from the database
into the <see cref="System.Data.DataSet"/>, and
using <see cref="System.Data.Common.DbDataAdapter.Update"/>
to send changes made in the <see cref="System.Data.DataSet"/>
back to the data
source.</para>
			<para>When the <see cref="System.Data.OracleClient.OracleDataAdapter"/> fills a <see cref="System.Data.DataSet"/> , it will create the necessary
tables and columns for the returned data if they do not already exist. However,
primary key information will not be included in the implicitly created schema
unless the <see cref="System.Data.Common.DataAdapter.MissingSchemaAction"/> property is set to <see cref="System.Data.MissingSchemaAction.AddWithKey"/> . You may also have the <see cref="System.Data.OracleClient.OracleDataAdapter"/> create the schema of the <see cref="System.Data.DataSet"/> , including
primary key information, before filling it with data using <see cref="System.Data.Common.DbDataAdapter.FillSchema"/>. For more information, see
<see topic="cpconaddingexistingconstraintstodataset"/>.</para>
			<para>The <see cref="System.Data.OracleClient.OracleDataAdapter"/>also includes the
<see cref="System.Data.OracleClient.OracleDataAdapter.SelectCommand"/>, <see cref="System.Data.OracleClient.OracleDataAdapter.InsertCommand"/>, <see cref="System.Data.OracleClient.OracleDataAdapter.DeleteCommand"/>, <see cref="System.Data.OracleClient.OracleDataAdapter.UpdateCommand"/>, and 
<see langword="TableMappings"/>
properties to facilitate loading and updating of data.</para>
			<para>The .NET Framework Data Provider for Oracle does not support batched SQL statements.
   However, it does allow you to use multiple <see langword="REF CURSOR"/> output parameters to fill a <see langword="DataSet"/>, each
   in its own <see langword="DataTable"/>. You must define the parameters,
   mark them as output parameters, and indicate that they are <see langword="REF CURSOR"/> data types. Note that you will be unable to use the
<see cref="System.Data.Common.DbDataAdapter.Update"/> method 
   when the <see cref="System.Data.OracleClient.OracleDataAdapter"/> is filled from <see langword="REF CURSOR"/> parameters to a
   stored procedure, because Oracle does not provide the information necessary to
   determine what the table name and column names are
   when the SQL statement is executed. The following C# example
   assumes that you have created this stored procedure. </para>
			<code>
create or replace package sp_pkg as
      type refCursorxx is ref cursor;
procedure getdata(a1 out refCursorxx, a2 out refCursorxx);
end;
create or replace package body sp_pkg as
       procedure getdata(a1 in number, a2 out refCursorxx) is
       begin
            open a1 for select * from emp;
            open a2 for select * from dept;
            end getdata;
       end;
</code>
			<para>The following C# example demonstrates how you might
   obtain table and column information using the stored procedure.</para>
			<code lang="C#">
OracleConnection conn = new OracleConnection("Data Source=Oracle8i;Integrated Security=yes");
Conn.Open;
OracleCommand cmd = conn.CreateCommand();
cmd.CommandText = "sp_pkg.getdata";
cmd.CommandType = CommandType.StoredProcedure;
cmd.Parameters.Add(new OracleParameter("a1", OracleType.Cursor)).Direction = ParameterDirection.Output;
cmd.Parameters.Add(new OracleParameter("a2", OracleType.Cursor)).Direction = ParameterDirection.Output;
DataSet ds = new DataSet();
OracleDataAdapter adapter = new OracleDataAdapter(cmd);
adapter.Fill(ds);

</code>
			<para> The following Visual Basic example demonstrates how to use an
<see cref="System.Data.OracleClient.OracleDataAdapter"/> 
to fill a <see cref="System.Data.DataSet"/>
using an Oracle <see langword="REF CURSOR"/> .
These examples use tables that are defined in the Oracle Scott/Tiger schema,
and require the following PL/SQL package and package body. You must create
these on your server to use the examples.</para>
			<para>Create the following Oracle package on the Oracle server.</para>
			<code>
CREATE OR REPLACE PACKAGE CURSPKG AS 
    TYPE T_CURSOR IS REF CURSOR; 
    PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER, 
                               IO_CURSOR IN OUT T_CURSOR); 
    PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR, 
                                DEPTCURSOR OUT T_CURSOR);
END CURSPKG;
/
</code>
			<para>Create the following Oracle package body on the Oracle server. </para>
			<code>
CREATE OR REPLACE PACKAGE BODY CURSPKG AS
    PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,
                               IO_CURSOR IN OUT T_CURSOR)
    IS 
        V_CURSOR T_CURSOR; 
    BEGIN s 
        THEN
             OPEN V_CURSOR FOR 
             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME 
                  FROM EMP, DEPT 
                  WHERE EMP.DEPTNO = DEPT.DEPTNO 
                  AND EMP.EMPNO = N_EMPNO;

        ELSE 
             OPEN V_CURSOR FOR 
             SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME 
                  FROM EMP, DEPT 
                  WHERE EMP.DEPTNO = DEPT.DEPTNO;

        END IF;
        IO_CURSOR := V_CURSOR; 
    END OPEN_ONE_CURSOR; 

    PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,
                                DEPTCURSOR OUT T_CURSOR)
    IS 
        V_CURSOR1 T_CURSOR; 
        V_CURSOR2 T_CURSOR; 
    BEGIN 
        OPEN V_CURSOR1 FOR SELECT * FROM EMP;
        OPEN V_CURSOR2 FOR SELECT * FROM DEPT;
        EMPCURSOR  := V_CURSOR1; 
        DEPTCURSOR := V_CURSOR2; 
    END OPEN_TWO_CURSORS; 
END CURSPKG;
/
</code>
			<para>This Visual Basic example executes a PL/SQL stored
   procedure that returns two <see langword="REF CURSOR"/> parameters, and fills a
<see cref="System.Data.DataSet"/> with the rows 
   that are returned.</para>
			<code lang="VB">
Private Sub Button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles Button1.Click
Private Sub Button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim connString As New String("Data Source=Oracle8i;Integrated Security=yes")

    Dim ds As New DataSet()
    Dim conn As New OracleConnection(connString)
    Dim cmd As New OracleCommand()

    cmd.Connection = conn
    cmd.CommandText = "CURSPKG.OPEN_TWO_CURSORS"
    cmd.CommandType = CommandType.StoredProcedure
    cmd.Parameters.Add(New OracleParameter("EMPCURSOR", OracleType.Cursor)).Direction = ParameterDirection.Output
    cmd.Parameters.Add(New OracleParameter("DEPTCURSOR", OracleType.Cursor)).Direction = ParameterDirection.Output

    Dim da As New OracleDataAdapter(cmd)

    Try
        da.Fill(ds)
    Catch Myex As Exception
        MessageBox.Show(Myex.Message.ToString)
    End Try

    ds.Relations.Add("EmpDept", ds.Tables(0).Columns("Deptno"), ds.Tables(1).Columns("Deptno"), False)

    DataGrid1.DataSource = ds.Tables(0)

</code>
			<para>After using the <see cref="System.Data.OracleClient.OracleDataAdapter"/> to perform
a <see langword="Fill"/> or <see langword="FillSchema"/> operation, the
<see langword="DataColumn.ReadOnly"/> property always returns false, 
regardless of whether a column can be updated or
not, because the Oracle server does not return this information. </para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Data.OracleClient.OracleCommand"/>, <see cref="System.Data.OracleClient.OracleDataAdapter"/> and
<see cref="System.Data.OracleClient.OracleConnection"/> to select records from an Access database, 
   and populate a <see langword="DataSet"/>
   with the
   selected rows. The filled <see cref="System.Data.DataSet"/> is then returned. To accomplish this, the method is
   passed an initialized <see cref="System.Data.DataSet"/>, a connection string, and a query string that is an SQL
   SELECT statement.</para>
			<codelink SampleID="Classic WebData OracleDataAdapter" SnippetID="1"/>
		</example>
		<seealso cref="System.Data.OracleClient.OracleConnection"/>
		<seealso cref="System.Data.OracleClient.OracleCommand"/>
	</doc>
</docs>
