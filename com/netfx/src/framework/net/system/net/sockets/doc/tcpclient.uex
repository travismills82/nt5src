<docs>
	<doc for="TcpClient.client">
		<summary>
			<para>Used by the class to provide
       the underlying network socket.</para>
		</summary>
		<remarks>
			<para>
				<see cref="System.Net.Sockets.TcpClient"/> creates a <see cref="System.Net.Sockets.Socket"/> instance to handle the actual sending and
    recieving of data over the network. The socket is initialized with the
    following parameters passed to its constructor:</para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Address Family</term>
					<description>AfInet</description>
				</item>
				<item>
					<term> Socket Type</term>
					<description>SockStream</description>
				</item>
				<item>
					<term> Protocol Type</term>
					<description>ProtTCP</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="TcpClient.active">
		<summary>
			<para>
       Used by the class to indicate that a connection has been made.
    </para>
		</summary>
	</doc>
	<doc for="TcpClient.dataStream">
		<summary>
			<para>
       Used by the class to provide the network data stream.
    </para>
		</summary>
	</doc>
	<doc for="TcpClient.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="TcpClient.ReceiveBufferSize">
		<summary>
			<para> Gets or sets the size of the receive buffer.
      </para>
		</summary>
		<value>
			<para>The size of the receive buffer, in bytes. The default value is 8192
      bytes.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.ReceiveBufferSize"/>
property gets or sets the number of bytes that you are expecting to store in the
receive buffer for each read operation. This property actually manipulates the
network buffer space allocated for receiving incoming
data. </para>
			<para> Your network buffer should be at least as large as your 
   application buffer to ensure that the desired data will be available when you
   call the <see cref="System.Net.Sockets.NetworkStream.Read" qualify="true"/>
   method. Use the <see cref="System.Net.Sockets.TcpClient.ReceiveBufferSize"/>
   
   property to set this size. If
   your application will be receiving bulk data, you should pass the <see cref="System.Net.Sockets.NetworkStream.Read"/> method a very large
   application
   buffer. </para>
			<para>If the network buffer is smaller than the amount of data 
   you request in the <see cref="System.Net.Sockets.NetworkStream.Read"/> method, you will not be able to retrieve the
   desired amount of data in one read operation. This incurs the overhead of
   additional calls to the <see cref="System.Net.Sockets.NetworkStream.Read"/> method. </para>
		</remarks>
		<example>
			<para>The following example sets and gets the receive buffer size.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="8"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpClient.SendBufferSize"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
	</doc>
	<doc for="TcpClient.TcpClient">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Net.Sockets.TcpClient"/>
class.</para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Net.Sockets.TcpClient"/> class and binds it to the specified local endpoint.</para>
		</summary>
		<param name="localEP">The <see cref="System.Net.IPEndPoint"/> to which you bind the TCP <see cref="System.Net.Sockets.Socket"/>. </param>
		<exception cref="System.ArgumentNullException"><paramref name="localEP "/> is <see langword="null"/>.</exception>
		<remarks>
			<para>This constructor creates a new <see cref="System.Net.Sockets.TcpClient"/>
and binds it to the <see cref="System.Net.IPEndPoint"/> specified by the <paramref name="localEP"/> parameter.
Before you call this constructor, you must create an <see cref="System.Net.IPEndPoint"/> using the
IP address and port number from which you intend to send and receive data.
You do not need to specify a local IP address and port
number before connecting and communcating. If you create a <see cref="System.Net.Sockets.TcpClient"/> using any other
constructor, the underlying service provider will assign the most appropriate local IP address and port
number.</para>
			<para>You must call the <see cref="System.Net.Sockets.TcpClient.Connect"/> method before sending and receiving
data. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create an instance of the <see cref="System.Net.Sockets.TcpClient"/> class using a local endpoint.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.IPEndPoint"/>
		<seealso cref="System.Net.Sockets.TcpClient.Connect"/>
	</doc>
	<doc for="TcpClient.TcpClient2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.TcpClient"/> class and connects to the
   specified port on the specified host.</para>
		</summary>
		<param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
		<param name=" port">The port number of the remote host to which you intend to connect. </param>
		<exception cref="System.ArgumentNullException"><paramref name=" hostname "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="port"/> is not between <see cref="System.Net.IPEndPoint.MinPort"/> and <see cref="System.Net.IPEndPoint.MaxPort"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>This constructor creates a new <see cref="System.Net.Sockets.TcpClient"/> and makes a synchronous connection attempt
   to the provided host name and port number. The underlying service provider will
   assign the most appropriate local IP address and
   port number. <see cref="System.Net.Sockets.TcpClient"/> will block until it
   either connects or fails. This constructor allows you to initialize,
   resolve the DNS host name, and connect in one convenient
   step. </para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to create an instance of the <see cref="System.Net.Sockets.TcpClient"/> class using a host name and port number.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="3"/>
		</example>
		<seealso cref="M:System.Net.Sockets.TCPClient.#ctor"/>
		<seealso cref="System.Net.Sockets.TcpClient.Connect"/>
	</doc>
	<doc for="TcpClient.Client">
		<summary>
			<para>Gets or sets the underlying <see cref="System.Net.Sockets.Socket"/>.</para>
		</summary>
		<value>
			<para>The underlying network <see cref="System.Net.Sockets.Socket"/>.</para>
		</value>
		<remarks>
			<para><see cref="System.Net.Sockets.TcpClient"/> creates a <see cref="System.Net.Sockets.Socket"/> to send and receive data
   over a network. Classes deriving from <see cref="System.Net.Sockets.TcpClient"/> can use this property to
   get or set this <see cref="System.Net.Sockets.Socket"/>. Use the underlying <see cref="System.Net.Sockets.Socket"/>
   returned from <see cref="System.Net.Sockets.TcpClient.Client"/> if you require access beyond
   that which <see cref="System.Net.Sockets.TcpClient"/> provides. You can also use <see cref="System.Net.Sockets.TcpClient.Client"/> to set the underlying <see cref="System.Net.Sockets.Socket"/> to an
   existing <see cref="System.Net.Sockets.Socket"/>. This might be useful if you want to take
   advantage of the simplicity of <see cref="System.Net.Sockets.TcpClient"/> using a pre-existing <see cref="System.Net.Sockets.Socket"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a derived class using the protected
      property <see cref="System.Net.Sockets.TcpClient.Client"/>. In this example, <c>MyTcpClientDerivedClass</c> obtains the underlying
<see cref="System.Net.Sockets.Socket"/>
to enable
broadcasting.</para>
			<codelink SampleID="ClassicTcpClientProtectedMethodsAndPropertiesExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket"/>
	</doc>
	<doc for="TcpClient.Active">
		<summary>
			<para> Gets or set a value that indicates whether a connection has been made.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the connection has been made; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Classes deriving from <see cref="System.Net.Sockets.TcpClient"/> can use this property to determine if a
   connection attempt has succeeded. It does not monitor the ongoing
   connection state of <see cref="System.Net.Sockets.TcpClient"/>. If the remote host closes the
   connection, <see cref="System.Net.Sockets.TcpClient.Active"/> will not be updated. If you are
   deriving from <see cref="System.Net.Sockets.TcpClient"/> and require closer attention to the
   connection state, use the <see cref="System.Net.Sockets.Socket.Connected"/> property of the <see cref="System.Net.Sockets.Socket"/>
   returned by the <see cref="System.Net.Sockets.TcpClient.Client"/>
   method. </para>
		</remarks>
		<example>
			<para>The following example demonstrates a derived class using
      the protected property <see cref="System.Net.Sockets.TcpClient.Active"/>. In this example, <c>MyTcpClientDerivedClass</c> verifies that the connection
   is active before obtaining the underlying <see cref="System.Net.Sockets.Socket"/>. </para>
			<codelink SampleID="ClassicTcpClientProtectedMethodsAndPropertiesExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket.Connected"/>
		<seealso cref="System.Net.Sockets.TcpClient.Connect"/>
	</doc>
	<doc for="TcpClient.Connect">
		<overload>
			<para> Connects the client to a remote TCP host using the specified host name and port number.
      </para>
		</overload>
		<summary>
			<para> Connects the client to the specified port on the specified host.
      </para>
		</summary>
		<param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
		<param name="port">The port number of the remote host to which you intend to connect. </param>
		<exception cref="System.ArgumentNullException"><paramref name="hostname "/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="port "/> is not between <see cref="System.Net.IPEndPoint.MinPort"/> and <see cref="System.Net.IPEndPoint.MaxPort"/>. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ObjectDisposedException"><see cref="System.Net.Sockets.TcpClient"/> is closed.</exception>
		<remarks>
			<para>Call this method to establish a synchronous remote host
      connection to the specified host name and port number. The <see cref="System.Net.Sockets.TcpClient.Connect"/> method will block until it either connects or
      fails. After connecting with the remote host, use the <see cref="System.Net.Sockets.TcpClient.GetStream"/> method
      to obtain the underlying <see cref="System.Net.Sockets.NetworkStream"/>. Use this <see cref="System.Net.Sockets.NetworkStream"/>
      to send and receive data. </para>
			<note type="note">
      If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
      the specific error code. Once you have obtained this code, you can refer to the
      Windows Socket Version 2 API error code documentation in MSDN for a detailed
      description of the error.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses the host name and port number to connect with a
      remote host.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="5"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket.Connect"/>
		<seealso cref="System.Net.Sockets.TcpClient.GetStream"/>
	</doc>
	<doc for="TcpClient.Connect1">
		<summary>
			<para> Connects the client to a remote TCP host using the specified IP address and port number.
      </para>
		</summary>
		<param name="address">The <see cref="System.Net.IPAddress"/> of the host to which you intend to connect. </param>
		<param name=" port">The port number to which you intend to connect. </param>
		<exception cref="System.ArgumentNullException"><paramref name="address "/>parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="port "/> is not between <see cref="System.Net.IPEndPoint.MinPort"/> and <see cref="System.Net.IPEndPoint.MaxPort"/>. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ObjectDisposedException"><see cref="System.Net.Sockets.TcpClient"/> is closed.</exception>
		<remarks>
			<para>Call this method to establish a synchronous remote host
      connection to the specified <see cref="System.Net.IPAddress"/> and port number. The <see cref="System.Net.Sockets.TcpClient.Connect"/> method will block until it either connects
      or fails. After connecting with the remote host, use the <see cref="System.Net.Sockets.TcpClient.GetStream"/> method
      to obtain the underlying <see cref="System.Net.Sockets.NetworkStream"/>. Use this <see cref="System.Net.Sockets.NetworkStream"/> to send and receive data. </para>
			<note type="note">
      If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
      the specific error code. Once you have obtained this code, you can refer to the
      Windows Socket Version 2 API error code documentation in MSDN for a detailed
      description of the error.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses an IP Address and port
      number to connect with a remote host. </para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="6"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpClient.GetStream"/>
	</doc>
	<doc for="TcpClient.Connect2">
		<summary>
			<para> Connects the client to a remote TCP host using the specified remote network endpoint.
      </para>
		</summary>
		<param name="remoteEP">The <see cref="System.Net.IPEndPoint"/> to which you intend to connect. </param>
		<exception cref="System.ArgumentNullException"><paramref name="remoteEp "/> is <see langword="null"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.TcpClient"/> is closed.</exception>
		<remarks>
			<para>Call this method to establish a synchronous remote host
      connection to the specified <see cref="System.Net.IPEndPoint"/>. Before you call <see cref="System.Net.Sockets.TcpClient.Connect"/> you must create an instance of the
   <see cref="System.Net.IPEndPoint"/> class using an IP
      address and a port number. Use this <see cref="System.Net.IPEndPoint"/> as the <paramref name="remoteEP"/>
      parameter. The <see cref="System.Net.Sockets.TcpClient.Connect"/> method
      will block until it either connects
      or fails. After connecting with the remote host, use the <see cref="System.Net.Sockets.TcpClient.GetStream"/> method
      to obtain the underlying <see cref="System.Net.Sockets.NetworkStream"/>. Use this <see cref="System.Net.Sockets.NetworkStream"/> to send and receive data. </para>
			<note type="note">
      If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
      the specific error code. Once you have obtained this code, you can refer to the
      Windows Socket Version 2 API error code documentation in MSDN for a detailed
      description of the error.
      
   </note>
		</remarks>
		<example>
			<para>The following example uses an <see cref="System.Net.IPEndPoint"/> to connect with a remote host.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="7"/>
		</example>
		<seealso cref="System.Net.IPEndPoint"/>
		<seealso cref="System.Net.Sockets.TcpClient.GetStream"/>
	</doc>
	<doc for="TcpClient.GetStream">
		<summary>
			<para> Returns the <see cref="System.Net.Sockets.NetworkStream"/> used to send and
   receive data.
   </para>
		</summary>
		<returns>
			<para> The underlying <see cref="System.Net.Sockets.NetworkStream"/>.
   </para>
		</returns>
		<exception cref="System.InvalidOperationException">The <see cref="System.Net.Sockets.TcpClient"/> is not connected to a remote host. </exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.TcpClient"/> has been closed.</exception>
		<remarks>
			<para><see cref="System.Net.Sockets.TcpClient.GetStream"/> returns a <see cref="System.Net.Sockets.NetworkStream"/> that you can use to send and receive data. The <see cref="System.Net.Sockets.NetworkStream"/> class inherits from the <see cref="System.IO.Stream"/> class,
   which provides a rich collection
   of methods and properties used to facilitate network
   communications. </para>
			<para>You must call the <see cref="System.Net.Sockets.TcpClient.Connect"/> method first, or the <see cref="System.Net.Sockets.TcpClient.GetStream"/> method
will throw an <see cref="System.InvalidOperationException"/>. Once you have obtained the <see cref="System.Net.Sockets.NetworkStream"/>, call the <see cref="System.Net.Sockets.NetworkStream.Write"/> method to send data to the remote
host. Call the <see cref="System.Net.Sockets.NetworkStream.Read"/>
method to receive data arriving from the remote host. Both of these methods
block until the specified operation is performed. You can avoid blocking on a
read operation by checking the <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/> property. A <see langword="true"/> value
means that data has arrived from the remote host and is available for reading.
In this case, <see cref="System.Net.Sockets.NetworkStream.Read"/> is guaranteed to complete immediately. If the remote
host has shutdown its connection, <see cref="System.Net.Sockets.NetworkStream.Read"/>
will immediately return with zero
bytes. </para>
			<note type="note">
   You do not need to close the <see cref="System.Net.Sockets.NetworkStream"/> when you are through sending and receiving
   data. Closing <see cref="System.Net.Sockets.TcpClient"/> will release the <see cref="System.Net.Sockets.NetworkStream"/> to the garbage collector.
</note>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Net.Sockets.TcpClient.GetStream"/> to obtain the underlying <see cref="System.Net.Sockets.NetworkStream"/>. After obtaining the
<see cref="System.Net.Sockets.NetworkStream"/>, it sends and receives using its <see cref="System.Net.Sockets.NetworkStream.Write"/> and <see cref="System.Net.Sockets.NetworkStream.Read"/>
methods.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="14"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
		<seealso cref="System.Net.Sockets.NetworkStream.DataAvailable"/>
		<seealso cref="System.IO.Stream"/>
		<seealso cref="System.Net.Sockets.TcpClient.Connect"/>
	</doc>
	<doc for="TcpClient.Close">
		<summary>
			<para> Closes the TCP connection and releases all resources associated
      with the <see cref="System.Net.Sockets.TcpClient"/>.
      </para>
		</summary>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.Close"/> method closes the TCP
   connection. It calls the <see cref="System.Net.Sockets.TcpClient.Dispose"/>
   method passing a
<see langword="true"/> value to
   release all managed and unmanaged resources associated with the <see cref="System.Net.Sockets.TcpClient"/>. These resources include the
   underlying <see cref="System.Net.Sockets.Socket"/> used for connecting with the remote host, and
   the <see cref="System.Net.Sockets.NetworkStream"/> used to send and receive data. </para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates closing a <see cref="System.Net.Sockets.TcpClient"/> by calling the <see cref="System.Net.Sockets.TcpClient.Close"/> method.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="15"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket.Close"/>
		<seealso cref="System.Net.Sockets.Socket.Shutdown"/>
	</doc>
	<doc for="TcpClient.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Net.Sockets.TcpClient"/>
and optionally releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes this method with the <paramref name="disposing"/> parameter
set to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes this method with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Net.Sockets.TcpClient"/> references.
It does this by invoking the <see langword="Dispose()"/> method of each
referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>.
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
		<example>
			<para>The following example uses a derived class to
      demonstrate the <see cref="System.Net.Sockets.TcpClient.Dispose"/> method.
      Specifying <see langword="true "/>causes both managed and unmanaged resources to be released. </para>
			<codelink SampleID="ClassicTcpClientProtectedMethodsAndPropertiesExample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="TcpClient.SendBufferSize">
		<summary>
			<para> Gets or sets the size of the send buffer.
      </para>
		</summary>
		<value>
			<para>The size of the send buffer, in bytes. The default value is 8192 bytes.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.SendBufferSize"/> property gets or sets the number
   of bytes that you are expecting to send in each call to the <see cref="System.Net.Sockets.NetworkStream.Write" qualify="true"/> method. This property actually
   manipulates the network buffer space allocated for send operation. </para>
			<para> Your network buffer should
   be at least as large as your application buffer to ensure that
   the desired data will be stored and sent in one operation. Use the
<see cref="System.Net.Sockets.TcpClient.SendBufferSize"/> property 
   to set this size. If your application will be sending bulk data,
   you should pass the <see cref="System.Net.Sockets.NetworkStream.Write"/> method a very large
   application buffer.</para>
			<para>If the network buffer is smaller than the amount of data
   you provide the <see cref="System.Net.Sockets.NetworkStream.Write"/> method, several network send
   operations will be performed for every call you make to the <see cref="System.Net.Sockets.NetworkStream.Write"/> method. You can achieve
   greater data throughput by ensuring that your network buffer is at least as
   large as your application buffer. </para>
		</remarks>
		<example>
			<para>The following example sets and gets the send buffer size.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="9"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpClient.ReceiveBufferSize"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
	</doc>
	<doc for="TcpClient.ReceiveTimeout">
		<summary>
			<para> Gets or sets the amount of time a <see cref="System.Net.Sockets.TcpClient"/> will wait to receive data once a read operation is initiated.
   </para>
		</summary>
		<value>
			<para>The time-out value of the connection in milliseconds. The default value is
      0.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.ReceiveTimeout"/>
property determines the amount of time that the <see cref="System.Net.Sockets.NetworkStream.Read"/> method will block until it is able to
receive data. This time is measured in milliseconds. If the time-out expires
before <see cref="System.Net.Sockets.NetworkStream.Read"/> successfully completes, <see cref="System.Net.Sockets.TcpClient"/>
will throw a <see cref="System.Net.Sockets.SocketException"/>. There is no time-out by default. </para>
		</remarks>
		<example>
			<para>The following example sets and gets the receive time out.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="10"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
		<seealso cref="System.Net.Sockets.TcpClient.SendTimeout"/>
	</doc>
	<doc for="TcpClient.LingerState">
		<summary>
			<para> Gets or sets information about the sockets linger
      time.
      </para>
		</summary>
		<value>
			<para>A <see cref="System.Net.Sockets.LingerOption"/>. By default, lingering is enabled with a linger time of 0 seconds.</para>
		</value>
		<remarks>
			<para> This property controls the length of time that the TCP
      connection will remain open after a
      call to <see cref="System.Net.Sockets.TcpClient.Close"/> when data remains to be sent.
      When you call the <see cref="System.Net.Sockets.NetworkStream.Write"/> method, data is placed in the outgoing
      network buffer. This property can be used to ensure that this data is
      sent to the remote host before the <see cref="System.Net.Sockets.TcpClient.Close"/> method
      drops the connection. </para>
			<para> To enable lingering, create
      a <see cref="System.Net.Sockets.LingerOption"/> containing the disired values, and set
      this property to that <see cref="System.Net.Sockets.LingerOption"/>. If the <see cref="System.Net.Sockets.LingerOption.Enabled"/> property of the <see cref="System.Net.Sockets.LingerOption"/> is
   <see langword="true"/>, then data is sent to the network
      with a time-out of <see cref="System.Net.Sockets.LingerOption.LingerTime" qualify="true"/> seconds. Once the data is
      sent, or if the time-out
      expires, the connection is closed and any unsent data is lost. If
      the <see cref="System.Net.Sockets.LingerOption.Enabled"/>
      property of the <see cref="System.Net.Sockets.LingerOption"/> is
   <see langword="false"/>, then
      the connection closes immediately after a call to the <see cref="System.Net.Sockets.TcpClient.Close"/> method, even if data remains
      to be sent.</para>
		</remarks>
		<example>
			<para>The following example sets and gets the sockets linger time.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="12"/>
		</example>
		<seealso cref="System.Net.Sockets.LingerOption"/>
		<seealso cref="System.Net.Sockets.TcpClient.Close"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
	</doc>
	<doc for="TcpClient.NoDelay">
		<summary>
			<para> Gets or sets a value that disables a delay when send or receive buffers are not full.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the delay is disabled, otherwise <see langword="false"/>.
   The default value is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Net.Sockets.TcpClient.NoDelay"/> is <see langword="false"/>, a <see cref="System.Net.Sockets.TcpClient"/> does not send
   a packet over the network until it has collected a significant amount of
   outgoing data. Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient. However, situations
   do exist where you need to send very small amounts of data or expect immediate responses
   from each packet you send. Your decision should
   weigh the relative importance of network efficiency versus application
   requirements.</para>
		</remarks>
		<example>
			<para> The following example enables the delay. It then checks the
      value of <see cref="System.Net.Sockets.TcpClient.NoDelay"/> to
      verify that the property was successfully
      set.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="13"/>
		</example>
	</doc>
	<doc for="TcpClient.SendTimeout">
		<summary>
			<para>Gets or sets the amount of time a <see cref="System.Net.Sockets.TcpClient"/> will wait for a send operation to complete
   successfully.</para>
		</summary>
		<value>
			<para>The send time-out value, in milliseconds. The default is 0.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.SendTimeout"/> property determines the amount of
   time that the <see cref="System.Net.Sockets.Socket.Send"/>
   method will block until it is able to return successfully. This time is
   measured in milliseconds. </para>
			<para>After you call the <see cref="System.Net.Sockets.NetworkStream.Write"/> method, the underlying <see cref="System.Net.Sockets.Socket"/> returns the number
of bytes actually sent to the host. The <see cref="System.Net.Sockets.TcpClient.SendTimeout"/> property
determines the amount of time a <see cref="System.Net.Sockets.TcpClient"/> will wait before receiving the number of
bytes returned. If the time-out expires before the <see cref="System.Net.Sockets.Socket.Send"/> method succussfully completes,
<see cref="System.Net.Sockets.TcpClient"/> will throw a 
<see cref="System.Net.Sockets.SocketException"/>. There is no 
time-out by default. </para>
		</remarks>
		<example>
			<para>The following example sets and gets the <see cref="System.Net.Sockets.TcpClient.SendTimeout"/> value.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="11"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
		<seealso cref="System.Net.Sockets.TcpClient.ReceiveTimeout"/>
	</doc>
	<doc for="TcpClient">
		<summary>
			<para> Provides client connections for TCP network services.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient"/> class 
   provides simple methods for connecting, sending, and receiving stream data over
   a network in synchronous blocking mode. </para>
			<para> In order for <see cref="System.Net.Sockets.TcpClient"/> to
connect and exchange data, a <see cref="System.Net.Sockets.TcpListener"/> or <see cref="System.Net.Sockets.Socket"/> created with the TCP
<see cref="System.Net.Sockets.ProtocolType"/> must be 
listening for incoming connection requests. You can connect to this listener in
one of the following two ways: </para>
			<list type="bullet"><item>
					<term>
      
      Create a <see cref="System.Net.Sockets.TcpClient"/> and call one of the three available
   <see cref="System.Net.Sockets.TcpClient.Connect"/> 
   methods.</term>
				</item>
				<item>
					<term>
      
      Create a <see cref="System.Net.Sockets.TcpClient"/>
      using the host name
      and port number of the remote host. This constructor will automatically
      attempt a connection.</term>
				</item>
			</list>
			<note type="note">
   If you want to send connectionless datagrams in
   synchronous blocking mode, use the <see cref="System.Net.Sockets.UdpClient"/> class.
</note>
			<note type="inheritinfo">
   To send and receive
   data, use the <see cref="System.Net.Sockets.TcpClient.GetStream"/> method to obtain a <see cref="System.Net.Sockets.NetworkStream"/>. Call the
<see cref="System.Net.Sockets.NetworkStream.Write"/> and <see cref="System.Net.Sockets.NetworkStream.Read"/> methods of the <see cref="System.Net.Sockets.NetworkStream"/> to send and receive data with the remote
   host. Use the <see cref="System.Net.Sockets.TcpClient.Close"/> method to release all resources
   associated with the <see cref="System.Net.Sockets.TcpClient"/>.
</note>
		</remarks>
		<permission cref="System.Net.SocketPermission">to establish an outgoing connection or accept an incoming request.</permission>
		<example>
			<para>The following example establishes a <see cref="System.Net.Sockets.TcpClient"/>
connection.</para>
			<codelink SampleID="System.Net.Sockets.TcpClient" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpListener"/>
		<seealso cref="System.Net.Sockets.NetworkStream"/>
		<seealso topic="cpcontcpudp"/>
		<seealso cref="System.Net.Sockets.Socket"/>
		<seealso cref="System.Net.Sockets.ProtocolType"/>
		<seealso cref="System.Net.IPEndPoint"/>
		<seealso cref="System.Net.Sockets.TcpClient.Connect"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
	</doc>
	<doc for="TcpClient.Finalize">
		<summary>
			<para>Frees resources used by the <see cref="System.Net.Sockets.TcpClient"/>
class.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/>. Application code should not call this method; an
   object's <see cref="System.Object.Finalize"/> method is automatically invoked during garbage
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   
   method. </para>
			<para>The <see cref="System.Net.Sockets.TcpClient"/> class finalizer closes the TCP connection
and releases all managed resources associated with the <see cref="System.Net.Sockets.TcpClient"/>. These resources include the
underlying <see cref="System.Net.Sockets.Socket"/> used for connecting with the remote host,
and the <see cref="System.Net.Sockets.NetworkStream"/>
used to send and receive data.
The finalizer does not release any unmanaged resources. </para>
			<para>For more information, see <see topic="cpconFinalizeMethodscDestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>
.</para>
		</remarks>
		<seealso cref="System.Net.Sockets.TcpClient.Close"/>
		<seealso topic="cpconprogrammingessentialsforgarbagecollection"/>
	</doc>
	<doc for="TcpClient.TcpClient3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.TcpClient"/> class with the specified family.</para>
		</summary>
		<param name="family">The <see cref="System.Net.IPAddress.AddressFamily"/> of the IP protocol. </param>
		<exception cref="System.ArgumentException"><para><paramref name="family"/> != <SpecialLocalizableItem kind="UIElement">AddressFamily.InterNetwork</SpecialLocalizableItem>
			</para>
			<para>-or-</para>
			<para><paramref name="family"/> != <SpecialLocalizableItem kind="UIElement">AddressFamily.InterNetworkV6</SpecialLocalizableItem>
			</para></exception>
	</doc>
	<doc for="TcpClient.TcpClient1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Net.Sockets.TcpClient"/> class.
   </para>
		</summary>
		<remarks>
			<para>This constructor creates a new <see cref="System.Net.Sockets.TcpClient"/>
and allows the underlying service provider to assign the most appropriate
local IP address and port number. You must first call the <see cref="System.Net.Sockets.TcpClient.Connect"/> method before sending and receiving
data.</para>
			<note type="note">
   This constructor works only with IPv4
   address types.
</note>
		</remarks>
		<example>
			<para> The following example demonstrates how to use the default constructor to create
      a new <see cref="System.Net.Sockets.TcpClient"/>.</para>
			<codelink SampleID="ClassicTcpClient.PublicMethodsAndPropertiesExample" SnippetID="4"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpClient.Connect"/>
	</doc>
</docs>
