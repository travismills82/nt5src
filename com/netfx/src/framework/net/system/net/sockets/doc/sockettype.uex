<docs>
	<doc for="SocketType.Dgram">
		<summary>
			<para> Supports datagrams, which are
      connectionless, unreliable messages of a fixed (typically small) maximum length. Messages might
      be lost or duplicated and might arrive out of order. A <see cref="System.Net.Sockets.Socket"/> of type <see cref="System.Net.Sockets.SocketType.Dgram"/> requires no connection prior to sending and
      receiving data, and can communicate with multiple peers. <see cref="System.Net.Sockets.SocketType.Dgram"/> uses the Datagram Protocol
      (<see cref="System.Net.Sockets.ProtocolType.Udp"/>) and
      the <see cref="System.Net.Sockets.AddressFamily.InterNetwork"/>
				<see cref="System.Net.Sockets.AddressFamily"/>.
      
   </para>
		</summary>
	</doc><doc for="SocketType.Raw">
		<summary>
			<para>Supports access to the underlying transport protocol.
      Using the <see cref="System.Net.Sockets.SocketType"/>
				<see cref="System.Net.Sockets.SocketType.Raw"/> , you can communicate using protocols such
      as, Internet Control Message Protocol (<see cref="System.Net.Sockets.ProtocolType.Icmp"/>) and Internet Group
      Management Protocol (<see cref="System.Net.Sockets.ProtocolType.Igmp"/>
      ). Your application must provide a
      complete IP header when sending. Received datagrams return with the
      IP header and options intact. </para>
		</summary>
	</doc><doc for="SocketType.Rdm">
		<summary>
			<para> Supports connectionless,
      message-oriented, reliably delivered messages, and preserves
      message boundaries in data. Rdm ( Reliably-Delivered Messages) messages arrive
      unduplicated and in order. Furthermore, the sender is notified if messages
      are lost. If you initialize a <see langword="Socket"/> using <see cref="System.Net.Sockets.SocketType.Rdm"/>, you do not require a
      remote host connection before sending and receiving data. With <see cref="System.Net.Sockets.SocketType.Rdm"/>, you can communicate with multiple peers.</para>
		</summary>
	</doc><doc for="SocketType.Seqpacket">
		<summary>
			<para> Provides
      connection-oriented and reliable two-way transfer of ordered byte streams across
      a network. <see cref="System.Net.Sockets.SocketType.Seqpacket"/> does not duplicate data, and it preserves
      boundaries within the data stream. A <see langword="Socket"/> of type <see cref="System.Net.Sockets.SocketType.Seqpacket"/>
      
      communicates with a single peer and requires
      a remote host connection before communication can begin.</para>
		</summary>
	</doc><doc for="SocketType.Unknown">
		<summary>
			<para>Specifies an unknown <see langword="Socket "/> type.</para>
		</summary>
	</doc><doc for="SocketType.Stream">
		<summary>
			<para>Supports reliable, two-way, connection-based byte streams
      without the duplication of data and without preservation of boundaries. A
   <see langword="Socket"/> of this type communicates with a single peer
      and requires a remote host connection before communication can begin. <see cref="System.Net.Sockets.SocketType.Stream"/> uses
      the Transmission Control Protocol (<see cref="System.Net.Sockets.ProtocolType.Tcp"/>
      
      ) <see cref="System.Net.Sockets.ProtocolType"/> and the <see langword="InterNetwork"/>
				<see cref="System.Net.Sockets.AddressFamily"/> .</para>
		</summary>
	</doc><doc for="SocketType">
		<summary>
			<para> Specifies the type of socket an instance of the <see cref="System.Net.Sockets.Socket"/> class represents.
   </para>
		</summary>
		<remarks>
			<para>Before a <see cref="System.Net.Sockets.Socket"/> can send and receive data, it must first be
   created using an <see cref="System.Net.Sockets.AddressFamily"/>, a <see cref="System.Net.Sockets.SocketType"/> ,and a <see cref="System.Net.Sockets.ProtocolType"/>. The <see cref="System.Net.Sockets.SocketType"/> enumeration
   provides several options
   for defining the type of <see cref="System.Net.Sockets.Socket"/>
   that you intend to
   open. </para>
			<note type="note">
				<see cref="System.Net.Sockets.SocketType"/> will sometimes implicitly indicate which
<see cref="System.Net.Sockets.ProtocolType"/> will be used within an <see cref="System.Net.Sockets.AddressFamily"/>. For example when the <see cref="System.Net.Sockets.SocketType"/> 
is <see cref="System.Net.Sockets.SocketType.Dgram"/>, the <see cref="System.Net.Sockets.ProtocolType"/> is always <see cref="System.Net.Sockets.ProtocolType.Udp"/> .When the <see cref="System.Net.Sockets.SocketType"/>
is <see cref="System.Net.Sockets.SocketType.Stream"/>, the <see cref="System.Net.Sockets.ProtocolType"/>
is always <see cref="System.Net.Sockets.ProtocolType.Tcp"/>. If you try
to create a <see cref="System.Net.Sockets.Socket"/> with an incompatible combination, <see cref="System.Net.Sockets.Socket"/> will
throw a <see cref="System.Net.Sockets.SocketException"/>.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.Sockets.SocketType.Stream"/> enumerated member as a parameter
   to the <see cref="System.Net.Sockets.Socket"/>constructor. </para>
			<codelink SampleID="SelectModeExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.AddressFamily"/>
		<seealso cref="System.Net.Sockets.ProtocolType"/>
		<seealso cref="System.Net.Sockets.Socket"/>
	</doc>
</docs>
