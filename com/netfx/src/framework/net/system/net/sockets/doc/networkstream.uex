<docs>
	<doc for="NetworkStream.m_StreamSocket">
		<summary>
			<para>
       Used by the class to hold the underlying socket the stream uses.
    </para>
		</summary>
	</doc>
	<doc for="NetworkStream.m_Readable">
		<summary>
			<para>
       Used by the class to indicate that the stream is m_Readable.
    </para>
		</summary>
	</doc>
	<doc for="NetworkStream.m_Writeable">
		<summary>
			<para>
       Used by the class to indicate that the stream is writable.
    </para>
		</summary>
	</doc>
	<doc for="NetworkStream.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="NetworkStream.CanRead">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Net.Sockets.NetworkStream"/> supports reading. </para>
		</summary>
		<value>
			<para><see langword="true"/> if data can be read from the stream; otherwise,
<see langword="false"/>. The default value is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Net.Sockets.NetworkStream.CanRead"/> is <see langword="true"/>, 
<see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the <see cref="System.Net.Sockets.NetworkStream.Read"/> method. Provide 
   the appropriate <see cref="System.IO.FileAccess"/> enumerated value in the constructor to set the
   readablity and writability of the <see cref="System.Net.Sockets.NetworkStream"/>. The <see cref="System.Net.Sockets.NetworkStream.CanRead"/> property is set when the
<see cref="System.Net.Sockets.NetworkStream"/> is initialized. </para>
		</remarks>
		<example>
			<para>The following example checks <see cref="System.Net.Sockets.NetworkStream.CanRead"/> to verify that the <see cref="System.Net.Sockets.NetworkStream"/> is readable. It then performs a read
   operation on the <see cref="System.Net.Sockets.NetworkStream"/>.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="4"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.Readable"/>
		<seealso cref="System.IO.FileAccess"/>
	</doc>
	<doc for="NetworkStream.NetworkStream2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.NetworkStream"/> class for the specified
<see cref="System.Net.Sockets.Socket"/> with the specified <see cref="System.Net.Sockets.Socket"/> 
ownership.</para>
		</summary>
		<param name=" socket">The <see cref="System.Net.Sockets.Socket"/>that <see cref="System.Net.Sockets.NetworkStream"/> will use to send and receive data. </param>
		<param name=" ownsSocket"><see langword="true"/> to indicate that the <see cref="System.Net.Sockets.NetworkStream"/> will take ownership of the <see cref="System.Net.Sockets.Socket"/>; otherwise, <see langword="false"/>.</param>
		<exception cref="System.ArgumentNullException"><paramref name="socket"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="socket"/> is not connected.</para>
			<para>-or-</para>
			<para>The value of the <see cref="System.Net.Sockets.Socket.SocketType"/> property of <paramref name="socket"/> is not <see cref="System.Net.Sockets.SocketType.Stream" qualify="true"/>.</para>
			<para>-or-</para>
			<para><paramref name="socket "/>is in a nonblocking state.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream"/> is created with read/write access to the
   specified <see cref="System.Net.Sockets.Socket"/>. If <paramref name="ownsSocket"/> is
<see langword="true"/>, the <see cref="System.Net.Sockets.NetworkStream"/> takes ownership of the underlying 
<see cref="System.Net.Sockets.Socket"/>, and calling the NetworkStream's 
<see cref="System.Net.Sockets.NetworkStream.Close"/> 
method will also close the underlying
<see cref="System.Net.Sockets.Socket"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Net.Sockets.NetworkStream"/> with ownership of the
<see cref="System.Net.Sockets.Socket"/>.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.Close"/>
	</doc>
	<doc for="NetworkStream.Writeable">
		<summary>
			<para>Gets a value that indicates whether the <see cref="System.Net.Sockets.NetworkStream"/> is writable. </para>
		</summary>
		<value>
			<para><see langword="true"/> if data can be written to the stream; otherwise,
<see langword="false"/>. The default value is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>You must derive from the <see cref="System.Net.Sockets.NetworkStream"/> class to use the <see cref="System.Net.Sockets.NetworkStream.Writeable"/> property. If <see cref="System.Net.Sockets.NetworkStream.Writeable"/> is <see langword="true"/>, <see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the <see cref="System.Net.Sockets.NetworkStream.Write"/> method. You can also
   determine whether a <see cref="System.Net.Sockets.NetworkStream"/> is
   writable by checking the publicly accessible <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> property. </para>
			<para>The <see cref="System.Net.Sockets.NetworkStream.Writeable"/> property is set when the
<see cref="System.Net.Sockets.NetworkStream"/> is initialized. </para>
		</remarks>
		<example>
			<para>In this example, the fictitious property <c>CanCommunicate</c> checks the <see cref="System.Net.Sockets.NetworkStream.Writeable"/> property to determine if the
<see cref="System.Net.Sockets.NetworkStream"/> is writable.</para>
			<codelink SampleID="NetworkStream_Protected_Members" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.CanWrite"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Readable"/>
	</doc>
	<doc for="NetworkStream.CanSeek">
		<summary>
			<para> Gets a value indicating whether the
      stream supports seeking. This property always returns <see langword="false"/>.
      </para>
		</summary>
		<value>
			<para><see langword="false"/> to indicate that <see cref="System.Net.Sockets.NetworkStream"/> cannot seek a specific
   location in the stream.</para>
		</value>
		<remarks>
			<para>This property is not currently supported and will always
      return <see langword="false"/>.</para>
		</remarks>
	</doc>
	<doc for="NetworkStream.DataAvailable">
		<summary>
			<para>Gets a value indicating whether data is available on the
      <see cref="System.Net.Sockets.NetworkStream"/> to be
      read. </para>
		</summary>
		<value>
			<para><see langword="true"/> if data is available on the stream to be read;
   otherwise, <see langword="false"/>.</para>
		</value>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</exception>
		<exception cref="System.IO.IOException">The underlying <see cref="System.Net.Sockets.Socket"/> is closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">Use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/>to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.Read"/> method blocks execution until data is
   received from the remote host and queued in the network buffer for
   reading. If you want to avoid blocking, use the <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/> method to determine if this data is
   available. If <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/>
   is <see langword="true"/>, a call to <see cref="System.Net.Sockets.NetworkStream.Read"/> will return immediately. If
   the remote host shuts down or closes the connection, <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/> throws a <see cref="System.Net.Sockets.SocketException"/>. </para>
		</remarks>
		<example>
			<para>The following example reads from the <see cref="System.Net.Sockets.NetworkStream"/> as long as data is
   available.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="4"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
	</doc>
	<doc for="NetworkStream.Length">
		<summary>
			<para> Gets the length of the data available on the stream. This
      property always throws a <see cref="System.NotSupportedException"/>.
      </para>
		</summary>
		<value>
			<para> The length of the data available on the stream.
      This property is not currently supported, and will throw a <see cref="System.NotSupportedException"/>.</para>
		</value>
		<exception cref="System.NotSupportedException">Any access. </exception>
	</doc>
	<doc for="NetworkStream.Position">
		<summary>
			<para> Gets or sets the current position in the stream. This property always throws a <see cref="NotSupportedException"/>.
   </para>
		</summary>
		<value>
			<para>The current position in the stream. This property is
      not currently supported, and will throw a <see cref="System.NotSupportedException"/>.</para>
		</value>
		<exception cref="System.NotSupportedException">Any access. </exception>
	</doc>
	<doc for="NetworkStream.Seek">
		<summary>
			<para>Sets the current position of the stream to the given
      value. This method always throws a <see cref="System.NotSupportedException"/>.</para>
		</summary>
		<param name="offset">This parameter is not used.</param>
		<param name=" origin">This parameter is not used.</param>
		<returns>
			<para>The position in the stream. This method is not currently
      supported, and will throw a <see cref="System.NotSupportedException"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">Any access.</exception>
	</doc>
	<doc for="NetworkStream.Close">
		<summary>
			<para>Closes the <see cref="System.Net.Sockets.NetworkStream"/>. </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.Close"/> method frees both unmanaged
   and managed resources associated with
   the <see cref="System.Net.Sockets.NetworkStream"/>. If the <see cref="System.Net.Sockets.NetworkStream"/> owns the underlying <see cref="System.Net.Sockets.Socket"/>, it
   is closed as well. </para>
		</remarks>
		<example>
			<para>The following example closes the <see cref="System.Net.Sockets.NetworkStream"/>.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="5"/>
		</example>
	</doc>
	<doc for="NetworkStream.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Net.Sockets.NetworkStream"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public <see langword="Dispose()"/> method and the
<see cref="System.Object.Finalize"/> 
method. <see langword="Dispose()"/> invokes the protected
<see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set 
to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
<paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
releases all resources held by any managed objects that this <see cref="System.Net.Sockets.NetworkStream"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see 
<see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and <see cref="System.Object.Finalize"/>, see
<see topic="cpconCleaningUpUnmanagedResources "/> and <see topic="cpconOverridingFinalizeMethod "/>.</para>
		</remarks>
	</doc>
	<doc for="NetworkStream.NetworkStream3">
		<summary>
			<para>Creates a new instance of the <see cref="System.Net.Sockets.NetworkStream"/> class for the specified <see cref="System.Net.Sockets.Socket"/> with the specified access rights and the
   specified <see cref="System.Net.Sockets.Socket"/> ownership.</para>
		</summary>
		<param name=" socket">The <see cref="System.Net.Sockets.Socket"/>that <see cref="System.Net.Sockets.NetworkStream"/> will use to send and receive data. </param>
		<param name=" access">A bitwise combination of the <see cref="System.IO.FileAccess"/> values that specifies the type of access given to the <see cref="System.Net.Sockets.NetworkStream"/> over the provided <see cref="System.Net.Sockets.Socket"/>.</param>
		<param name=" ownsSocket"><see langword="true"/> to indicate that the <see cref="System.Net.Sockets.NetworkStream"/> will take ownership of the <see cref="System.Net.Sockets.Socket"/>; otherwise, <see langword="false"/>.</param>
		<exception cref="System.ArgumentNullException"><paramref name="socket"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="socket"/> is not connected.</para>
			<para>-or-</para>
			<para>The <see cref="System.Net.Sockets.Socket.SocketType"/> property of <paramref name="socket"/> is not <see cref="System.Net.Sockets.SocketType.Stream" qualify="true"/>.</para>
			<para>-or-</para>
			<para><paramref name="socket "/>is in a nonblocking state.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream"/> is created with read/write access to the
   specified <see cref="System.Net.Sockets.Socket"/>. If the value of
   the <paramref name="ownsSocket"/> parameter is
<see langword="true"/>, the <see cref="System.Net.Sockets.NetworkStream"/> takes ownership of the underlying <see cref="System.Net.Sockets.Socket"/>, and calling the <see cref="System.Net.Sockets.NetworkStream.Close" qualify="true"/> 
method will also close the underlying <see cref="System.Net.Sockets.Socket"/>.</para>
			<para>The <paramref name="access"/> parameter sets the <see cref="System.Net.Sockets.NetworkStream.CanRead"/> and <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> properties of the <see cref="System.Net.Sockets.NetworkStream"/>. If
you specify <see cref="System.IO.FileAccess.Write"/>, then <see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the
<see cref="System.Net.Sockets.NetworkStream.Write"/> method. If you specify <see cref="System.IO.FileAccess.Read"/>, then <see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the 
<see cref="System.Net.Sockets.NetworkStream.Read"/> method. If you specify <see cref="System.IO.FileAccess.ReadWrite"/>, 
both method calls will be allowed. </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Net.Sockets.NetworkStream"/> with the ability to read
   and write to the <see cref="System.Net.Sockets.Socket"/>. Ownership of the <see cref="System.Net.Sockets.Socket"/> is
   given to this <see cref="System.Net.Sockets.NetworkStream"/> by specifying <see langword="true "/>for
<paramref name="ownsSocket"/>.</para>
			<codelink SampleID="NetworkStream_Async_SendAndReceive" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileAccess"/>
		<seealso cref="System.Net.Sockets.NetworkStream.CanRead"/>
		<seealso cref="System.Net.Sockets.NetworkStream.CanWrite"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Close"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
	</doc>
	<doc for="NetworkStream.Socket">
		<summary>
			<para>Gets the underlying <see cref="System.Net.Sockets.Socket"/>.</para>
		</summary>
		<value>
			<para>A <see cref="System.Net.Sockets.Socket"/> that represents the underlying network
   connection.</para>
		</value>
		<remarks>
			<para>Classes deriving from <see cref="System.Net.Sockets.NetworkStream"/> can use this property to get the underlying
<see cref="System.Net.Sockets.Socket"/>. Use the 
   underlying <see cref="System.Net.Sockets.Socket"/> returned from the <see cref="System.Net.Sockets.NetworkStream.Socket"/> property if you require access beyond that
   which <see cref="System.Net.Sockets.NetworkStream"/> provides. </para>
			<note type="note">
   This property is accessible only
   through this class or a derived class.
</note>
		</remarks>
		<example>
			<para>The following example retrieves the underlying <see cref="System.Net.Sockets.Socket"/> to verify an active
   connection.</para>
			<codelink SampleID="NetworkStream_Protected_Members" SnippetID="1"/>
		</example>
	</doc>
	<doc for="NetworkStream.Flush">
		<summary>
			<para> Flushes data from the stream. This method is reserved for future use.
      </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.Flush"/> method implements the <see cref="System.IO.Stream.Flush" qualify="true"/> method; however,
   because <see cref="System.Net.Sockets.NetworkStream"/> is not buffered, it has no affect on network streams. Calling the <see cref="System.Net.Sockets.NetworkStream.Flush"/> method will not throw an exception.</para>
		</remarks>
	</doc>
	<doc for="NetworkStream.SetLength">
		<summary>
			<para>Sets the length of the stream. This method always throws a <see cref="NotSupportedException"/>.</para>
		</summary>
		<param name="value">This parameter is not used.</param>
		<exception cref="System.NotSupportedException">Any access.</exception>
	</doc>
	<doc for="NetworkStream.NetworkStream">
		<overload>
			<para>Creates a new instance of the <see cref="System.Net.Sockets.NetworkStream"/> class.</para>
		</overload>
		<summary>
			<para>Creates a new instance of the <see cref="System.Net.Sockets.NetworkStream"/> class for the specified <see cref="System.Net.Sockets.Socket"/>.</para>
		</summary>
		<param name=" socket">The <see cref="System.Net.Sockets.Socket"/> that the <see cref="System.Net.Sockets.NetworkStream"/> will use to send and receive data.</param>
		<exception cref="System.ArgumentNullException"><paramref name="socket"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="socket"/> is not connected.</para>
			<para>-or-</para>
			<para>The <see cref="System.Net.Sockets.Socket.SocketType"/> property of <paramref name="socket"/> is not <see cref="System.Net.Sockets.SocketType.Stream" qualify="true"/>.</para>
			<para>-or-</para>
			<para><paramref name="socket "/>is in a nonblocking state.</para></exception>
		<remarks>
			<para> The <see cref="System.Net.Sockets.NetworkStream"/> is created with read/write access to the
   specified <see cref="System.Net.Sockets.Socket"/>. The <see cref="System.Net.Sockets.NetworkStream"/> does not own the underlying
<see cref="System.Net.Sockets.Socket"/>, so calling 
   the <see cref="System.Net.Sockets.NetworkStream.Close"/>
   method will not close the
<see cref="System.Net.Sockets.Socket"/>.</para>
		</remarks>
		<example>
			<para>The following example illustrates how to create a <see cref="System.Net.Sockets.NetworkStream"/> with a <see cref="System.Net.Sockets.Socket"/>. </para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="2"/>
		</example>
		<seealso topic="cpconusingstreamsonnetwork"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Close"/>
	</doc>
	<doc for="NetworkStream.NetworkStream1">
		<summary>
			<para>Creates a new instance of the <see cref="System.Net.Sockets.NetworkStream"/> class for the specified <see cref="System.Net.Sockets.Socket"/> with the specified access rights.</para>
		</summary>
		<param name=" socket">The <see cref="System.Net.Sockets.Socket"/> that <see cref="System.Net.Sockets.NetworkStream"/> will use to send and receive data. </param>
		<param name=" access">A bitwise combination of the <see cref="System.IO.FileAccess"/> values. specifying the type of access given to the <see cref="System.Net.Sockets.NetworkStream"/> over the provided <see cref="System.Net.Sockets.Socket"/>. </param>
		<exception cref="System.ArgumentNullException"><paramref name="socket"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException"><para><paramref name="socket"/> is not connected.</para>
			<para>-or-</para>
			<para>The <see cref="System.Net.Sockets.Socket.SocketType"/> property of <paramref name="socket"/> is not <see cref="System.Net.Sockets.SocketType.Stream" qualify="true"/>.</para>
			<para>-or-</para>
			<para><paramref name="socket "/>is in a nonblocking state.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream"/> is created with the specified access to the
   specified <see cref="System.Net.Sockets.Socket"/>. With this constructor, the <see cref="System.Net.Sockets.NetworkStream"/> does not own the underlying
<see cref="System.Net.Sockets.Socket"/>, so 
   calling the NetworkStream's <see cref="System.Net.Sockets.NetworkStream.Close"/> method will not close the underlying
<see cref="System.Net.Sockets.Socket"/>. </para>
			<para>The <paramref name="access"/> parameter sets the <see cref="System.Net.Sockets.NetworkStream.CanRead"/> and <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> properties of the <see cref="System.Net.Sockets.NetworkStream"/>. If you specify <see cref="System.IO.FileAccess.Write"/>, then
the <see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the <see cref="System.Net.Sockets.NetworkStream.Write"/> method. If you specify <see cref="System.IO.FileAccess.Read"/>, then
the
<see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the <see cref="System.Net.Sockets.NetworkStream.Read"/> method. If you specify <see cref="System.IO.FileAccess.ReadWrite"/>, 
both method calls will be allowed. </para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Net.Sockets.NetworkStream"/> with the ability to read
   and write to the <see cref="System.Net.Sockets.Socket"/>.</para>
			<codelink SampleID="NetworkStream_Async_SendAndReceive" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileAccess"/>
		<seealso cref="System.Net.Sockets.NetworkStream.CanRead"/>
		<seealso cref="System.Net.Sockets.NetworkStream.CanWrite"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Read"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Write"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Close"/>
	</doc>
	<doc for="NetworkStream.CanWrite">
		<summary>
			<para>Gets a value that indicates whether the <see cref="System.Net.Sockets.NetworkStream"/> supports writing.</para>
		</summary>
		<value>
			<para><see langword="true"/> if data can be
   written to the <see cref="System.Net.Sockets.NetworkStream"/>;
   otherwise, <see langword=" false"/>. The default value is<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> is <see langword="true"/>,
<see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the <see cref="System.Net.Sockets.NetworkStream.Write"/> method. Provide 
   the appropriate <see cref="System.IO.FileAccess"/> enumerated value in the constructor to set the
   readablity and writability of the <see cref="System.Net.Sockets.NetworkStream"/>. The <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> property is set when the
<see cref="System.Net.Sockets.NetworkStream"/> is initialized. </para>
		</remarks>
		<example>
			<para> The following example checks <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> to verify that the <see cref="System.Net.Sockets.NetworkStream"/> is writable. It
   then performs a write operation on the <see cref="System.Net.Sockets.NetworkStream"/>.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="3"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.Writeable"/>
		<seealso cref="System.IO.FileAccess"/>
	</doc>
	<doc for="NetworkStream.Readable">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Net.Sockets.NetworkStream"/> can be read. </para>
		</summary>
		<value>
			<para><see langword="true"/> to indicate that the <see cref="System.Net.Sockets.NetworkStream"/> can be read; otherwise,
<see langword="false"/>. The default value is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>You must derive from the <see cref="System.Net.Sockets.NetworkStream"/> class to use the <see cref="System.Net.Sockets.NetworkStream.Readable"/> property. If <see cref="System.Net.Sockets.NetworkStream.Readable"/> is <see langword="true"/>, <see cref="System.Net.Sockets.NetworkStream"/> will allow calls to the <see cref="System.Net.Sockets.NetworkStream.Read"/> method. You can also determine
   whether a <see cref="System.Net.Sockets.NetworkStream"/> is readable by checking the publically
   accessible <see cref="System.Net.Sockets.NetworkStream.CanRead"/>
   property. </para>
			<para>The <see cref="System.Net.Sockets.NetworkStream.Readable"/> property is set when the
<see cref="System.Net.Sockets.NetworkStream"/> is 
initialized. </para>
		</remarks>
		<example>
			<para> In this example, the fictitious property <c>CanCommunicate</c> checks the <see cref="System.Net.Sockets.NetworkStream.Readable"/> property to determine if the
<see cref="System.Net.Sockets.NetworkStream"/> is readable.</para>
			<codelink SampleID="NetworkStream_Protected_Members" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.CanRead"/>
		<seealso cref="System.Net.Sockets.NetworkStream.CanWrite"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Writeable"/>
	</doc>
	<doc for="NetworkStream.Finalize">
		<summary>
			<para>Releases all resources used by the <see cref="System.Net.Sockets.NetworkStream"/>.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/>.
   Application code should not call this method; an object's <see cref="System.Object.Finalize"/> method
   is automatically invoked during garbage collection, unless finalization by the
   garbage collector has been disabled by a call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   
   method.</para>
For more
information, see <see topic="cpconFinalizeMethodsCDestructors"/> , <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>
.
</remarks>
	</doc>
	<doc for="NetworkStream.Read">
		<summary>
			<para>Reads data from the <see cref="System.Net.Sockets.NetworkStream"/>. </para>
		</summary>
		<param name=" buffer">An array of type <see cref="System.Byte"/> that is the location in memory to store data read from the <see cref="System.Net.Sockets.NetworkStream"/>. </param>
		<param name=" offset">The location in <paramref name="buffer "/>to begin storing the data to. </param>
		<param name=" size">The number of bytes to read from the <see cref="System.Net.Sockets.NetworkStream"/>. </param>
		<returns>
			<para>The number of bytes read from the <see cref="System.Net.Sockets.NetworkStream"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offset"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="offset"/> is greater than the length of <paramref name="buffer"/>. </para>
			<para>-or-</para>
			<para><paramref name="size"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="size"/> is less than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.</para></exception>
		<exception cref="System.IO.IOException">The underlying <see cref="System.Net.Sockets.Socket"/> is closed.</exception>
		<exception cref="System.ObjectDisposedException"><para>The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</para>
			<para>-or-</para>
			<para>There is a failure reading from the network.</para></exception>
		<exception cref="System.IO.IOException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>This method reads data into the <paramref name="buffer"/> parameter and returns the number of bytes
   successfully read. If no data is available for reading, the <see cref="System.Net.Sockets.NetworkStream.Read" qualify="true"/> method will block until data
   is available. To avoid blocking, you can use the <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/> property to determine if data is queued in
   the incoming network buffer for reading. If <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/> returns
<see langword="true"/>, the <see cref="System.Net.Sockets.NetworkStream.Read"/> operation will complete 
   immediately. The <see cref="System.Net.Sockets.NetworkStream.Read"/>
   operation will read as much data as is available, up to the number of bytes
   specified by the <paramref name="size"/>
   parameter.
   If the remote host shuts down the connection, and all available data has
   been received, the <see cref="System.Net.Sockets.NetworkStream.Read"/>
   method will complete immediately and return zero bytes. </para>
			<note type="note">
   Check to see if the <see cref="System.Net.Sockets.NetworkStream"/> is readable by calling <see cref="System.Net.Sockets.NetworkStream.CanRead"/>. If you attempt to read from a
<see cref="System.Net.Sockets.NetworkStream"/> that is not 
   readable, you will get an <see cref="System.IO.IOException"/>.
</note>
			<note type="note">
   If you receive a <see cref="System.IO.IOException"/> check the
<see cref="System.Exception.InnerException"/> property to determine if it was caused by a 
<see cref="System.Net.Sockets.SocketException"/>. If so, use <see cref="System.Net.Sockets.SocketException.ErrorCode"/> to obtain 
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Net.Sockets.NetworkStream.DataAvailable"/> to
   determine if data is available to be read. If data is available, it reads from the
<see cref="System.Net.Sockets.NetworkStream"/>.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="4"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket.Receive"/>
		<seealso topic="cpconusingstreamsonnetwork"/>
		<seealso cref="System.Net.Sockets.NetworkStream.DataAvailable"/>
		<seealso cref="System.Net.Sockets.NetworkStream.CanRead"/>
	</doc>
	<doc for="NetworkStream.Write">
		<summary>
			<para>Writes data to the <see cref="System.Net.Sockets.NetworkStream"/>.</para>
		</summary>
		<param name=" buffer">An array of type <see cref="System.Byte"/> that contains the data to write to the <see cref="System.Net.Sockets.NetworkStream"/>.</param>
		<param name=" offset">The location in <paramref name="buffer "/> from which to start writing data.</param>
		<param name=" size">The number of bytes to write to the <see cref="System.Net.Sockets.NetworkStream"/>.</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offset"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="offset"/> is greater than the length of <paramref name="buffer"/>. </para>
			<para>-or-</para>
			<para><paramref name="size"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="size"/> is greater than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.</para></exception>
		<exception cref="System.IO.IOException">There is a failure while writing to the network.</exception>
		<exception cref="System.ObjectDisposedException"><para>The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</para>
			<para>-or-</para>
			<para>There is a failure reading from the network.</para></exception>
		<exception cref="System.IO.IOException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.Write"/> method starts at the
   specified <paramref name="offset "/> and sends <paramref name="size "/> bytes from the contents of
<paramref name="buffer "/> to the network. The <see cref="System.Net.Sockets.NetworkStream.Write"/> method blocks until the requested number of 
   bytes are sent or a <see cref="System.Net.Sockets.SocketException"/> is thrown.
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of
   the
   error. </para>
			<note type="note">
   Check to see if the <see cref="System.Net.Sockets.NetworkStream"/> is writable by accessing the <see cref="System.Net.Sockets.NetworkStream.CanWrite"/> property. If you attempt to write to a
<see cref="System.Net.Sockets.NetworkStream"/> that is not writable, you will get an 
<see cref="System.IO.IOException"/>. If you receive 
   a <see cref="System.IO.IOException"/>
   check the <see cref="System.Exception.InnerException"/> property to determine if it was caused by a
<see cref="System.Net.Sockets.SocketException"/>. If so, use <see cref="System.Net.Sockets.SocketException.ErrorCode"/> to obtain 
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example checks to see whether the <see cref="System.Net.Sockets.NetworkStream"/> is writable. If it is, then <see cref="System.Net.Sockets.NetworkStream.Write"/> is
   used to write a small
   message.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="3"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.CanWrite"/>
		<seealso cref="System.Net.Sockets.NetworkStream.Writeable"/>
	</doc>
	<doc for="NetworkStream.EndRead">
		<summary>
			<para> Handles the end of an asynchronous read.
      </para>
		</summary>
		<param name="asyncResult">An <see cref="System.IAsyncResult"/> representing an asynchronous call. </param>
		<returns>
			<para>The number of bytes read from the <see cref="System.Net.Sockets.NetworkStream"/>. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="asyncResult"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException"><para>The underlying <see cref="System.Net.Sockets.Socket"/> is closed.</para>
			<para>-or-</para>
			<para>An error occurs while reading the network.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</exception>
		<exception cref="System.IO.IOException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.EndRead"/> method completes the
   asynchronous read operation started in the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method.</para>
			<para>Before calling <see cref="System.Net.Sockets.NetworkStream.BeginRead"/>, you need to create a callback
method that implements the <see cref="System.AsyncCallback"/> delegate. This
callback method executes in a separate thread and is called by the system after
<see cref="System.Net.Sockets.NetworkStream.BeginRead"/> returns. The
callback method must accept the <see cref="System.IAsyncResult"/> returned from the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method as a parameter. </para>
			<para>Within the callback method, call the <see cref="System.IAsyncResult.AsyncState"/> method of the <see cref="System.IAsyncResult"/> to obtain the state object
passed to the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method.
Extract the receiving <see cref="System.Net.Sockets.NetworkStream"/> from this state object. After obtaining the
<see cref="System.Net.Sockets.NetworkStream"/>, you can call the <see cref="System.Net.Sockets.NetworkStream.EndRead"/> method to successfully complete the 
read operation and return the number of bytes read.</para>
			<para>The <see cref="System.Net.Sockets.NetworkStream.EndRead"/> method will block until
data is available. The <see cref="System.Net.Sockets.NetworkStream.EndRead"/> method will
read as much data as is available up to the number of bytes specified in the
<paramref name="size"/> parameter of the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method. If the 
remote host shuts down the <see cref="System.Net.Sockets.Socket"/> connection and
all available data has been received, the <see cref="System.Net.Sockets.NetworkStream.EndRead"/> method will complete immediately and
return zero bytes. </para>
			<para>To obtain the received data, call the <see cref="System.IAsyncResult.AsyncState"/>
method of the <see cref="System.IAsyncResult"/>, and extract the buffer contained in the
resulting state object.</para>
			<note type="note">
   If you receive a <see cref="System.IO.IOException"/> check the
<see cref="System.Exception.InnerException"/> property to determine if it was caused by a 
<see cref="System.Net.Sockets.SocketException"/>. If so, use <see cref="System.Net.Sockets.SocketException.ErrorCode"/> to obtain 
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>In the following example, <c>myReadCallback</c> is provided to <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> as the callback method.
<see cref="System.Net.Sockets.NetworkStream.EndRead"/> is 
implemented in <c>myReadCallback</c>
to complete the asynchronous read call started by <see cref="System.Net.Sockets.NetworkStream.BeginRead"/>.</para>
			<codelink SampleID="NetworkStream_Async_SendAndReceive" SnippetID="5"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.BeginRead"/>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
	<doc for="NetworkStream.BeginWrite">
		<summary>
			<para> Begins an asynchronous write to a stream.
      </para>
		</summary>
		<param name=" buffer">An array of type <see cref="System.Byte"/> that contains the data to write to the <see cref="System.Net.Sockets.NetworkStream"/>. </param>
		<param name=" offset">The location in <paramref name="buffer"/> to begin sending the data. </param>
		<param name=" size">The number of bytes to write to the <see cref="System.Net.Sockets.NetworkStream"/>. </param>
		<param name=" callback">The <see cref="System.AsyncCallback"/> delegate that is executed when <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> completes. </param>
		<param name=" state">An object containing any additional user defined data. </param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> representing the asynchronous call. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offset"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="offset"/> is greater than the length of <paramref name="buffer"/>. </para>
			<para>-or-</para>
			<para><paramref name="size"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="size"/> is greater than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter. </para></exception>
		<exception cref="System.IO.IOException"><para>The underlying <see cref="System.Net.Sockets.Socket"/> is closed.</para>
			<para>-or-</para>
			<para>There is a failure while writing to the network.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</exception>
		<exception cref="System.IO.IOException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> method starts an asynchronous send
   operation to the remote host.
   Calling the <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> method gives you the ability to send
   data within a separate execution thread. </para>
			<para>You must create a<paramref name=" "/>callback method that implements the <see cref="System.AsyncCallback"/> delegate
and pass its name to the <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> method. At the very minimum, your
<paramref name="state"/> parameter must contain the <see cref="System.Net.Sockets.NetworkStream"/>. If your callback needs more 
information, you can create a small class or structure to hold the <see cref="System.Net.Sockets.NetworkStream"/> and the other required information. Pass the
structure or class instance to the <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> method through the <paramref name="state"/>
parameter. </para>
			<para>Your callback method should implement the <see cref="System.Net.Sockets.NetworkStream.EndWrite"/> method. When your application calls <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/>, the system will use a separate thread to
execute the specified callback method, and will block on <see cref="System.Net.Sockets.NetworkStream.EndWrite"/> until the
<see cref="System.Net.Sockets.NetworkStream"/> sends the number of bytes requested or 
throws an exception. If you want the original thread to block after you call the
<see cref="System.Net.Sockets.NetworkStream.BeginWrite"/>
method, use <see cref="System.Threading.WaitHandle.WaitOne"/>. Call <see cref="System.Threading.ManualResetEvent.Set"/>
in the callback method when you want the original thread to continue
executing. For additional information on writing callback methods, see
<see topic="cpconcallbacksample"/>. </para>
			<note type="note">
   If you receive a <see cref="System.IO.IOException"/> check the
<see cref="System.Exception.InnerException"/> property to determine if it was caused by a 
<see cref="System.Net.Sockets.SocketException"/>. If so, use <see cref="System.Net.Sockets.SocketException.ErrorCode"/> to obtain 
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
			<para>
			</para>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> to write data asynchronously
   to a network stream. The method <c>m</c><c>yWriteCallBack</c>
implements the <see cref="System.AsyncCallback"/> delegate
and will be called by the system when <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> returns.</para>
			<codelink SampleID="NetworkStream_Async_SendAndReceive" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.EndWrite"/>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
	<doc for="NetworkStream.EndWrite">
		<summary>
			<para> Handles the end of an asynchronous write.
      </para>
		</summary>
		<param name="asyncResult">The <see cref="System.IAsyncResult"/> representing the asynchronous call. </param>
		<exception cref="System.ArgumentNullException"><paramref name="asyncResult"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException"><para>The underlying <see cref="System.Net.Sockets.Socket"/> is closed.</para>
			<para>-or-</para>
			<para>An error occurs while writing to the network.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</exception>
		<exception cref="System.IO.IOException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para><see cref="System.Net.Sockets.NetworkStream.EndWrite"/> completes the asynchronous
   send operation started in <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/>.</para>
			<para>Before calling <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/>, you need to create a callback
method that implements the <see cref="System.AsyncCallback"/> delegate. This
callback method executes in a separate thread and is called by the system after
<see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> returns. The
callback method must accept the <see cref="System.IAsyncResult"/> returned from the <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> method as a parameter. </para>
			<para>Within the callback method, call the <see cref="System.IAsyncResult.AsyncState"/> method of the
<paramref name="IAsyncResult"/> parameter to obtain the <see cref="System.Net.Sockets.NetworkStream"/>. After obtaining the <see cref="System.Net.Sockets.NetworkStream"/>, you can call 
the <see cref="System.Net.Sockets.NetworkStream.EndWrite"/> method to successfully complete the
send operation and return the number of bytes sent.</para>
			<para> The <see cref="System.Net.Sockets.NetworkStream.EndWrite"/>
method will block until the requested number of bytes are
sent.</para>
			<note type="note">
   If you receive a <see cref="System.IO.IOException"/> check the
<see cref="System.Exception.InnerException"/> property to determine if it was caused by a 
<see cref="System.Net.Sockets.SocketException"/>. If so, use <see cref="System.Net.Sockets.SocketException.ErrorCode"/> to obtain 
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>In the following example, <c>myWriteCallback</c> is provided to <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/> as the callback method.
<see cref="System.Net.Sockets.NetworkStream.EndWrite"/> is 
implemented in <c>myWriteCallback</c>
to complete the asynchronous write call started by <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/>.</para>
			<codelink SampleID="NetworkStream_Async_SendAndReceive" SnippetID="4"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.BeginWrite"/>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
	<doc for="NetworkStream">
		<summary>
			<para>Provides the underlying stream of data for network
      access.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream"/> class provides methods for sending and
   receiving data over <see cref="System.Net.Sockets.SocketType.Stream"/>
   sockets in blocking mode. For more information of blocking versus
   non-blocking <see cref="System.Net.Sockets.Socket"/>,
   see<see langword=" "/><see topic="cpconusingnon-blockingclientsocket"/> .You can use the
<see cref="System.Net.Sockets.NetworkStream"/> class for both synchronous and asynchronous 
   data transfer. For more information on asynchronous versus synchronous
   communication, see <see topic="cpconsockets"/>. In order to create a <see cref="System.Net.Sockets.NetworkStream"/>, you must provide a connected <see cref="System.Net.Sockets.Socket"/>. You can also specify what <see cref="System.IO.FileAccess"/> permission
   the <see cref="System.Net.Sockets.NetworkStream"/> has over the provided <see cref="System.Net.Sockets.Socket"/>. By
   default, closing the <see cref="System.Net.Sockets.NetworkStream"/> does not close the provided <see cref="System.Net.Sockets.Socket"/>. If you want the <see cref="System.Net.Sockets.NetworkStream"/> to have permission to close the provided
<see cref="System.Net.Sockets.Socket"/>, you must specify <see langword="true"/> for the value of the
<paramref name="ownsSocket"/> 
constructor parameter. </para>
			<para>Use the <see cref="System.Net.Sockets.NetworkStream.Write"/> and <see cref="System.Net.Sockets.NetworkStream.Read"/> methods for simple single
thread synchronous blocking I/O. If you want to process your I/O using
separate threads, consider using the <see cref="System.Net.Sockets.NetworkStream.BeginWrite"/>/<see cref="System.Net.Sockets.NetworkStream.EndWrite"/> and <see cref="System.Net.Sockets.NetworkStream.BeginRead"/>/<see cref="System.Net.Sockets.NetworkStream.EndRead"/>
methods for communication. </para>
			<para>The <see cref="System.Net.Sockets.NetworkStream"/> does not support random access to the network data stream.
The value of the <see cref="System.Net.Sockets.NetworkStream.CanSeek"/> property, which indicates
whether the stream supports seeking, is always
<see langword="false"/>;
reading the <see cref="System.Net.Sockets.NetworkStream.Position"/> property, reading the <see cref="System.Net.Sockets.NetworkStream.Length"/>
property, or calling the
<see cref="System.Net.Sockets.NetworkStream.Seek"/> method will throw a <see cref="System.NotSupportedException"/>. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a <see cref="System.Net.Sockets.NetworkStream"/> from a connected <see cref="System.Net.Sockets.SocketType.Stream"/>
				<see cref="System.Net.Sockets.Socket"/> and perform basic
synchronous blocking I/O.</para>
			<codelink SampleID="NetworkStream_Synch_SendAndReceive" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpClient"/>
	</doc>
	<doc for="NetworkStream.BeginRead">
		<summary>
			<para>Begins an asynchronous read from the <see cref="System.Net.Sockets.NetworkStream"/>. </para>
		</summary>
		<param name=" buffer">An array of type <see cref="System.Byte"/> that is the location in memory to store data read from the <see cref="System.Net.Sockets.NetworkStream"/>. </param>
		<param name=" offset">The location in <paramref name="buffer "/>to begin storing the data. </param>
		<param name=" size">The number of bytes to read from the <see cref="System.Net.Sockets.NetworkStream"/>. </param>
		<param name=" callback">The <see cref="System.AsyncCallback"/> delegate that is executed when <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> completes. </param>
		<param name=" state">An object containing any additional user defined data. </param>
		<returns>
			<para> An <see cref="System.IAsyncResult"/> representing the asynchronous call.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="offset"/> is less than 0. </para>
			<para>-or-</para>
			<para><paramref name="offset"/> is greater than the length of <paramref name="buffer"/>.</para>
			<para>-or-</para>
			<para><paramref name="size"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="size"/> is greater than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.</para></exception>
		<exception cref="System.IO.IOException"><para>The underlying <see cref="System.Net.Sockets.Socket"/> is closed.</para>
			<para>-or-</para>
			<para>There is a failure while reading from the network.</para></exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.NetworkStream"/> is closed.</exception>
		<exception cref="System.IO.IOException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method starts asynchronously reading
   data from the incoming network buffers. Calling the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method gives you the ability to
   receive data within a separate execution thread. </para>
			<para>You must create a<paramref name=" "/>callback method that implements the <see cref="System.AsyncCallback"/> delegate and pass its name to the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method. At the very minimum, your
<paramref name="state"/> parameter must contain the <see cref="System.Net.Sockets.NetworkStream"/>. Since you will 
want to obtain the received data within your callback method, you should create
a small class or structure to hold a read buffer and any other useful
information. Pass the structure or class instance to the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method through the <paramref name="state"/>
parameter. </para>
			<para>Your callback method should implement the <see cref="System.Net.Sockets.NetworkStream.EndRead"/> method. When your application calls <see cref="System.Net.Sockets.NetworkStream.BeginRead"/>,
the system will use a separate thread to execute the specified callback method,
and will block on <see cref="System.Net.Sockets.NetworkStream.EndRead"/>
until the provided <see cref="System.Net.Sockets.NetworkStream"/> reads
data or throws an exception. If you want the original thread to block after you
call the <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method, use <see cref="System.Threading.WaitHandle.WaitOne"/>. Call <see cref="System.Threading.ManualResetEvent.Set"/>
in the callback method when you want the original thread to continue
executing. For additional information on writing callback methods, see
<see topic="cpconcallbacksample"/>. </para>
			<para> The <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> method will read as much data as
is available, up to the number of bytes specified by the <paramref name="size"/> parameter.</para>
			<note type="note">
   If you receive a <see cref="System.IO.IOException"/> check the
<see cref="System.Exception.InnerException"/> property to determine if it was caused by a 
<see cref="System.Net.Sockets.SocketException"/>. If so, use <see cref="System.Net.Sockets.SocketException.ErrorCode"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> to read data asynchronously
   from the network stream. The method <c>myReadCallBack</c> implements the <see cref="System.AsyncCallback"/> delegate and will be called by the
system when <see cref="System.Net.Sockets.NetworkStream.BeginRead"/> returns.</para>
			<codelink SampleID="NetworkStream_Async_SendAndReceive" SnippetID="3"/>
		</example>
		<seealso cref="System.Net.Sockets.NetworkStream.EndRead"/>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
</docs>
