<docs>
	<doc for="UdpClient.IDisposable.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="UdpClient.UdpClient3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/> class and establishes a default remote
   host.</para>
		</summary>
		<param name="hostname">The name of the remote DNS host to which you intend to connect.</param>
		<param name="port">The remote port number to which you intend to connect.</param>
		<exception cref="System.ArgumentNullException"><paramref name="hostname "/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="port "/> is not between <see cref="System.Net.IPEndPoint.MinPort"/> and <see cref="System.Net.IPEndPoint.MaxPort"/>. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occured when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>This constructor initializes a new <see cref="System.Net.Sockets.UdpClient"/> and establishes a remote host using
   the <paramref name="hostname "/>and <paramref name="port"/>
   parameters. Establishing a default remote host is optional. If
   you use this constructor, you do not have to specify a remote host in each call
   to the <see cref="System.Net.Sockets.UdpClient.Send"/>
   method. Specifying a default remote host limits you to that host only. You can change the
   default remote host at any time by calling the <see cref="System.Net.Sockets.UdpClient.Connect"/> method. If you want to
   specify a remote host in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method, do not use this
   constructor. </para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a detailed description of the
   error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to create an instance of the <see cref="System.Net.Sockets.UdpClient"/> class using a host name and port number.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="3"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient.Send"/>
		<seealso cref="System.Net.Sockets.UdpClient.Connect"/>
	</doc>
	<doc for="UdpClient.Client">
		<summary>
			<para>Gets or sets the underlying network <see cref="System.Net.Sockets.Socket"/>. </para>
		</summary>
		<value>
			<para>The underlying Network <see cref="System.Net.Sockets.Socket"/>.</para>
		</value>
		<remarks>
			<para><see cref="System.Net.Sockets.UdpClient"/> creates a <see cref="System.Net.Sockets.Socket"/> used to send and receive data
   over a network. Classes deriving from <see cref="System.Net.Sockets.UdpClient"/> can use this property to
   get or set this <see cref="System.Net.Sockets.Socket"/>. Use the underlying <see cref="System.Net.Sockets.Socket"/>
   returned from <see cref="System.Net.Sockets.UdpClient.Client"/> if you require access beyond
   that which <see cref="System.Net.Sockets.UdpClient"/> provides. You can also use <see cref="System.Net.Sockets.UdpClient.Client"/> to set the underlying <see cref="System.Net.Sockets.Socket"/> to an
   existing <see cref="System.Net.Sockets.Socket"/>. This is useful if you want to take
   advantage of the simplicity of <see cref="System.Net.Sockets.UdpClient"/> using a pre-existing <see cref="System.Net.Sockets.Socket"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a derived class using the protected
      property <see cref="System.Net.Sockets.UdpClient.Client"/>. In this example, <c>MyUdpClientDerivedClass</c> obtains the underlying
<see cref="System.Net.Sockets.Socket"/> 
to enable broadcasting.</para>
			<codelink SampleID="Classic UdpClient.ProtectedMethodsAndPropertiesExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket"/>
	</doc>
	<doc for="UdpClient.Active">
		<summary>
			<para>Gets or sets a value indicating whether a default remote host has been
      established. </para>
		</summary>
		<value>
			<para><see langword="true"/> if a connection is active; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Classes deriving from <see cref="System.Net.Sockets.UdpClient"/> can use this property to determine if a
   default remote host has been established. You can establish a
   default remote host by using the appropriate constructor or by calling
   the <see cref="System.Net.Sockets.UdpClient.Connect"/> method. If you do
   establish a default remote host, you cannot specify a remote host in
   your call to <see cref="System.Net.Sockets.UdpClient.Send"/>. </para>
		</remarks>
		<example>
			<para>The following example demonstrates a derived class using the protected
      property <see cref="System.Net.Sockets.UdpClient.Active"/>. In this example, <c>MyUdpClientDerivedClass</c> verifies that the connection
   is active before obtaining the underlying <see cref="System.Net.Sockets.Socket"/>. </para>
			<codelink SampleID="Classic UdpClient.ProtectedMethodsAndPropertiesExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient"/>
		<seealso cref="System.Net.Sockets.UdpClient.Connect"/>
		<seealso cref="System.Net.Sockets.UdpClient.Send"/>
	</doc>
	<doc for="UdpClient.Close">
		<summary>
			<para> Closes the UDP connection.</para>
		</summary>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.Close"/> disables the underlying <see cref="System.Net.Sockets.Socket"/>
and releases all managed and unmanaged resources associated with
the <see cref="System.Net.Sockets.UdpClient"/>

. </para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/>to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a detailed description of the
   error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates closing a <see cref="System.Net.Sockets.UdpClient"/> by calling the <see cref="System.Net.Sockets.UdpClient.Close"/> method.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="15"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket.Close"/>
	</doc>
	<doc for="UdpClient.Send">
		<overload>
			<para> Sends a UDP datagram to a remote host.
      </para>
		</overload>
		<summary>
			<para> Sends a UDP datagram to the host at the specified remote endpoint.
      </para>
		</summary>
		<param name="dgram">An array of type <see cref="System.Byte"/> that specifies the UDP datagram that you intend to send, represented as an array of bytes. </param>
		<param name=" bytes">The number of bytes in the datagram. </param>
		<param name=" endPoint">An <see cref="System.Net.IPEndPoint"/> that represents the host and port to which to send the datagram. </param>
		<returns>
			<para> The number
      of bytes sent.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="dgram "/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Net.Sockets.UdpClient"/> has already established a default remote host. </exception>
		<exception cref="System.ObjectDisposedException"><see cref="System.Net.Sockets.UdpClient"/> is closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.Send"/> method sends datagrams to the
   specified endpoint and returns the number of bytes
   successfully sent. Before calling this overload, you must first create an
<see cref="System.Net.IPEndPoint"/> using the IP address and 
   port number of the remote host to which your datagrams will be delivered. You
   can send datagrams to the default broadcast address, 255.255.255.255, by
   specifying <see cref="System.Net.Sockets.SocketOptionName.Broadcast" qualify="true"/> for the <see cref="System.Net.IPAddress.Address"/> property
   of the <see cref="System.Net.IPEndPoint"/>. After you have created this <see cref="System.Net.IPEndPoint"/>, pass it to the <see cref="System.Net.Sockets.UdpClient.Send"/> method as the <paramref name="endPoint"/> parameter. </para>
			<para>If you want to send datagrams to any other broadcast address, use the <see cref="System.Net.Sockets.UdpClient.Client"/>
method to obtain the underlying <see cref="System.Net.Sockets.Socket"/>, and set the
socket option
to <see cref="System.Net.Sockets.SocketOptionName.Broadcast" qualify="true"/>. You can also revert to using the <see cref="System.Net.Sockets.Socket"/> class. </para>
			<note type="note">
   
   Do not provide an <paramref name="endPoint"/> parameter to this method if you have already
   established a remote host with the <see cref="System.Net.Sockets.UdpClient.Connect"/> method. If you do, the
<see cref="System.Net.Sockets.UdpClient.Send"/> method will throw a <see cref="System.Net.Sockets.SocketException"/>. If you 
   receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the <see cref="System.Net.Sockets.UdpClient.Send"/>method. This example uses an
<see cref="System.Net.IPEndPoint"/> to specify the target host.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="8"/>
		</example>
		<seealso topic="cpconencodingbasetypes"/>
		<seealso cref="System.Net.Sockets.SocketOptionName.Broadcast"/>
		<seealso cref="System.Net.Sockets.UdpClient.Connect"/>
		<seealso cref="System.Net.Sockets.Socket"/>
		<seealso cref="System.Net.IPEndPoint"/>
	</doc>
	<doc for="UdpClient.Send1">
		<summary>
			<para> Sends a UDP datagram to a specified port on a specified remote host.
      </para>
		</summary>
		<param name="dgram">An array of type <see cref="System.Byte"/> that specifies the UDP datagram that you intend to send represented as an array of bytes.</param>
		<param name="bytes">The number of bytes in the datagram.</param>
		<param name="hostname">The name of the remote host to which you intend to send the datagram.</param>
		<param name="port">The remote port number with which you intend to communicate.</param>
		<returns>
			<para> The number of bytes sent.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="dgram"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The <see cref="System.Net.Sockets.UdpClient"/> has already established a default remote host. </exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.UdpClient"/> is closed. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.Send"/> method sends datagrams to the
   values specified by the <paramref name="hostname"/> and <paramref name="port"/> parameters and
   returns the number of
   bytes successfully sent. You can send datagrams to the default broadcast address
   by specifying "255.255.255.255" for the <paramref name="hostname"/>
   parameter
   value. </para>
			<para>If you want to send datagrams to any other broadcast address, use the <see cref="System.Net.Sockets.UdpClient.Client"/> method to obtain the underlying 
<see cref="System.Net.Sockets.Socket"/>, and set the socket option to <see cref="System.Net.Sockets.SocketOptionName.Broadcast" qualify="true"/>. You can also revert to 
using the <see cref="System.Net.Sockets.Socket"/> class. </para>
			<note type="note">
   Do not provide a host name or port number to this method if you
   have already established a remote host with the <see cref="System.Net.Sockets.UdpClient.Connect"/> method. If you
   do, the <see cref="System.Net.Sockets.UdpClient.Send"/> method will throw a <see cref="System.Net.Sockets.SocketException"/>. If you receive
   a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a detailed description of the
   error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the <see cref="System.Net.Sockets.UdpClient.Send"/> method. This example uses a host
   name and a port number to identify the target host.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="9"/>
		</example>
		<seealso topic="cpconencodingbasetypes"/>
		<seealso cref="System.Net.Sockets.SocketOptionName.Broadcast"/>
		<seealso cref="System.Net.Sockets.UdpClient.Connect"/>
		<seealso cref="System.Net.Sockets.Socket"/>
	</doc>
	<doc for="UdpClient.UdpClient2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/> class and binds it to the specified local
   endpoint.</para>
		</summary>
		<param name="localEP">An <see cref="System.Net.IPEndPoint"/> that respresents the local endpoint to which you bind the UDP connection. </param>
		<exception cref="System.ArgumentNullException"><paramref name="localEP "/> is <see langword="null"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>This constructor creates a new <see cref="System.Net.Sockets.UdpClient"/> and binds it to the <see cref="System.Net.IPEndPoint"/> specified by the <paramref name="localEP"/>
parameter. Before you call this constructor, you must create an <see cref="System.Net.IPEndPoint"/> using the IP address and port
number from which you intend to send and receive data. You do not need to specify
a local IP address and port number for sending and receiving data. If you do
not, the underlying
service provider will assign the most appropriate local IP address
and port number.</para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to create an instance of the <see cref="System.Net.Sockets.UdpClient"/>
class using a local endpoint.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.IPEndPoint"/>
	</doc>
	<doc for="UdpClient.Connect">
		<overload>
			<para>Establishes a default remote host.</para>
		</overload>
		<summary>
			<para>Establishes a default remote host using the specified host name and port
      number.</para>
		</summary>
		<param name=" hostname">The DNS name of the remote host to which you intend send data. </param>
		<param name=" port">The port number on the remote host to which you intend to send data. </param>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.UdpClient"/> is closed.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="port "/> is not between <see cref="System.Net.IPEndPoint.MinPort"/> and <see cref="System.Net.IPEndPoint.MaxPort"/>. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.Connect"/> method establishes a default
   remote host using the values specified in the <paramref name="port"/> and
<paramref name="hostname"/> parameters. Once established, you 
   do not have to specify a remote host in each call to the <see cref="System.Net.Sockets.UdpClient.Send"/>
   
   method. </para>
			<para>Establishing a default remote host is optional. Specifying a default
   remote host limits you to that host only. If you want to
   send datagrams to a different remote host, you must make another call to
   the <see cref="System.Net.Sockets.UdpClient.Connect"/> method or create another <see cref="System.Net.Sockets.UdpClient"/>
   without a default remote
   host. </para>
			<para> If you have established a default remote host
   and you also provide a remote host in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method, <see cref="System.Net.Sockets.UdpClient.Send"/> will throw a <see cref="System.Net.Sockets.SocketException"/>. If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a detailed description of the
   error. </para>
			<para>If you call the <see cref="System.Net.Sockets.Socket.Connect"/> method, any datagrams that arrive
from an address other than the specified default will be discarded. You cannot
set the default remote host to a broadcast address using this method unless you
inherit from <see cref="System.Net.Sockets.UdpClient"/>, use the client
method to obtain the underlying <see cref="System.Net.Sockets.Socket"/>, and set the socket option to <see cref="System.Net.Sockets.SocketOptionName.Broadcast" qualify="true"/>. </para>
			<para> You can
   however, broadcast data to the default broadcast address, 255.255.255.255,
   if you specify <see cref="System.Net.IPAddress.Broadcast" qualify="true"/> in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method. If your
   application requires greater control over broadcast addresses, you can also revert to using the
<see cref="System.Net.Sockets.Socket"/> class. </para>
			<note type="note">
   Since the UDP protocol is
   connectionless, the <see cref="System.Net.Sockets.UdpClient.Connect"/> method
   does not block. Do not call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method if you intend to
   receive multicasted datagrams.
</note>
		</remarks>
		<example>
			<para> The following example uses the host name and port number to connect to a
      remote host.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="5"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket"/>
		<seealso cref="System.Net.Sockets.UdpClient.Send"/>
		<seealso cref="System.Net.Sockets.UdpClient.Receive"/>
	</doc>
	<doc for="UdpClient.Connect1">
		<summary>
			<para>Establishes a default remote host using the specified IP
      address and port number.</para>
		</summary>
		<param name="addr">The <see cref="System.Net.IPAddress"/> of the remote host to which you intend to send data. </param>
		<param name="port">The port number to which you intend send data.</param>
		<exception cref="System.ObjectDisposedException"><see cref="System.Net.Sockets.UdpClient"/> is closed. </exception>
		<exception cref="System.ArgumentNullException"><paramref name="addr "/> is <see langword="null."/></exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="port"/> is not between <see cref="System.Net.IPEndPoint.MinPort"/> and <see cref="System.Net.IPEndPoint.MaxPort"/>. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para><see langword=""/>
			</para>
			<para>The <see cref="System.Net.Sockets.TcpClient.Connect"/> method establishes a default
remote host using the values specified in the <paramref name="addr"/> and <paramref name="port"/>
parameters. Once established, you do not have to specify a
remote host in each call to the <see cref="System.Net.Sockets.UdpClient.Send"/>
method. </para>
			<para>Establishing a default remote host is optional. Specifying a default
   remote host limits you to that host only. If you want to send datagrams to a
   different remote host, you must make another call to the <see cref="System.Net.Sockets.UdpClient.Connect"/> method or create another <see cref="System.Net.Sockets.UdpClient"/>
   without a
   default remote host. If you have established a default remote host and you also
   provide a remote host in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method, <see cref="System.Net.Sockets.UdpClient.Send"/> will throw a <see cref="System.Net.Sockets.SocketException"/>. If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a detailed description of the
   error. </para>
			<para>If you call the <see cref="System.Net.Sockets.Socket.Connect"/> method, any datagrams that arrive
from an address other than the specified default will be discarded. You cannot
set the default remote host to a broadcast address using this method unless you
inherit from <see cref="System.Net.Sockets.UdpClient"/>, use the client
method to obtain the
underlying <see cref="System.Net.Sockets.Socket"/>, and set the socket option to <see cref="System.Net.Sockets.SocketOptionName.Broadcast" qualify="true"/>. </para>
			<para> You can
   however, broadcast data to the default broadcast address, 255.255.255.255,
   if you specify <see cref="System.Net.IPAddress.Broadcast" qualify="true"/> in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method. If your
   application requires greater control over broadcast addresses, you can
   also revert to using the <see cref="System.Net.Sockets.Socket"/> class. </para>
			<note type="note">
   Since the UDP protocol is
   connectionless, the <see cref="System.Net.Sockets.UdpClient.Connect"/> method
   does not block. Do not call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method if you intend to
   receive multicasted datagrams.
</note>
		</remarks>
		<example>
			<para>The following example uses an IP address and port number to connect with a
      remote host. </para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="6"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket"/>
		<seealso cref="System.Net.Sockets.UdpClient.Send"/>
		<seealso cref="System.Net.Sockets.UdpClient.Receive"/>
	</doc>
	<doc for="UdpClient.Connect2">
		<summary>
			<para>Establishes a default remote host using the specified network endpoint.</para>
		</summary>
		<param name=" endPoint">An <see cref="System.Net.IPEndPoint"/> that specifies the network endpoint to which you intend to send data. </param>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="endPoint"/> is <see langword="null"/>.</exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.UdpClient"/> is closed.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.TcpClient.Connect"/> method establishes a default
   remote host using the value specified in the <paramref name="endPoint"/> parameter. Once established, you do not have to specify a remote
   host in each call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method. </para>
			<para>Establishing a default remote host is optional. Specifying a default
   remote host limits you to that host only. If you want to send datagrams to a
   different remote host, you must make another call to the <see cref="System.Net.Sockets.UdpClient.Connect"/> method or create another <see cref="System.Net.Sockets.UdpClient"/> without a
   default remote host. If you have established a default remote host and you also
   provide a remote host in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method, <see cref="System.Net.Sockets.UdpClient.Send"/> will throw a <see cref="System.Net.Sockets.SocketException"/>. If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a detailed description of the
   error. </para>
			<para>If you call the <see cref="System.Net.Sockets.Socket.Connect"/> method, any datagrams that arrive
from an address other than the specified default will be discarded. You cannot
set the default remote host to a broadcast address using this method unless you
inherit from <see cref="System.Net.Sockets.UdpClient"/>, use the Client
method to obtain the
underlying <see cref="System.Net.Sockets.Socket"/>, and set the socket option to <see cref="System.Net.Sockets.SocketOptionName.Broadcast" qualify="true"/>. </para>
			<para> You can
   however, broadcast data to the default broadcast address, 255.255.255.255,
   if you specify <see cref="System.Net.IPAddress.Broadcast" qualify="true"/> in your call to the <see cref="System.Net.Sockets.UdpClient.Send"/> method. If your
   application requires greater control over broadcast addresses, you can
   also revert to using the <see cref="System.Net.Sockets.Socket"/> class. </para>
			<note type="note">
   Since the UDP protocol is
   connectionless, the <see cref="System.Net.Sockets.UdpClient.Connect"/> method
   does not block. Do not call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method if you intend to
   receive multicasted datagrams.
</note>
		</remarks>
		<example>
			<para>The following example uses an <see cref="System.Net.IPEndPoint"/> to establish a default remote
   host.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="7"/>
		</example>
		<seealso cref="System.Net.Sockets.Socket"/>
		<seealso cref="System.Net.Sockets.UdpClient.Send"/>
		<seealso cref="System.Net.Sockets.UdpClient.Receive"/>
	</doc>
	<doc for="UdpClient.Send2">
		<summary>
			<para> Sends a UDP datagram to a
      remote host.
      </para>
		</summary>
		<param name="dgram">An array of type <see cref="System.Byte"/> that specifies the UDP datagram that you intend to send represented as an array of bytes. </param>
		<param name="bytes">The number of bytes in the datagram. </param>
		<returns>
			<para> The number of bytes sent.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="dgram "/> is <see langword="null"/>. </exception>
		<exception cref="System.InvalidOperationException">The <see cref="System.Net.Sockets.UdpClient"/> has already established a default remote host. </exception>
		<exception cref="System.ObjectDisposedException">The <see cref="System.Net.Sockets.UdpClient"/> is closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
		<remarks>
			<para>This overload sends datagrams to the remote host established in the <see cref="System.Net.Sockets.UdpClient.Connect"/> method and returns the number of
   bytes sent. If you do not call <see cref="System.Net.Sockets.UdpClient.Connect"/> before calling this
   overload, the <see cref="System.Net.Sockets.UdpClient.Send"/> method will throw a <see cref="System.Net.Sockets.SocketException"/>.
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/>to obtain the specific error
   code. Once you have obtained this code, you can refer to the Windows Socket
   Version 2 API error code documentation in MSDN for a
   detailed description of the error. </para>
			<para> 
   
   If you want to send datagrams to a
   different remote host, you must call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method and specify the desired
   remote host. Use either of the other <see cref="System.Net.Sockets.UdpClient.Send"/> method overloads to send datagrams
   to a broadcast address. </para>
		</remarks>
		<example>
			<para>The following example demonstrates the <see cref="System.Net.Sockets.UdpClient.Send"/> method. You must
   establish a default remote host prior to using this overload. </para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="10"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient.Connect"/>
		<seealso topic="cpconencodingbasetypes"/>
	</doc>
	<doc for="UdpClient.Receive">
		<summary>
			<para> Returns a UDP datagram that was sent by a remote host.
      </para>
		</summary>
		<param name="remoteEP">An <see cref="System.Net.IPEndPoint"/> representing the remote host from which the data was sent. </param>
		<returns>
			<para> An array of type <see cref="System.Byte"/> that contains
   datagram data.
   </para>
		</returns>
		<exception cref="System.ObjectDisposedException">The underlying <see cref="System.Net.Sockets.Socket"/> has been closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.Receive"/> method
   will block until a datagram arrives from a remote host. When data is
   available, the <see cref="System.Net.Sockets.UdpClient.Receive"/> method will read
   the first enqueued datagram and return the data portion as a byte array. This method
   populates the <paramref name="remoteEP
   "/>parameter with the
<see cref="System.Net.IPAddress"/> and port number of the sender. </para>
			<para>If you specify a default remote host in the <see cref="System.Net.Sockets.UdpClient.Connect"/> method, the <see cref="System.Net.Sockets.UdpClient.Receive"/> method will
accept datagrams from that host only. All other datagrams will be discarded. </para>
			<para> If the
   datagram you receive is larger than the size of the <paramref name="buffer "/>parameter,
<paramref name="buffer"/> gets filled with the first part of the message, 
   and the <see cref="System.Net.Sockets.UdpClient.Receive"/>
   method throws a
<see cref="System.Net.Sockets.SocketException"/>. The 
   remaining data is discarded. If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error. </para>
			<note type="note">
   If you intend to receive multicasted
   datagrams, do not call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method prior to calling the
<see cref="System.Net.Sockets.UdpClient.Receive"/> method. The <see cref="System.Net.Sockets.UdpClient"/> 
you use to receive datagrams must be created using the multicast port
number.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the <see cref="System.Net.Sockets.UdpClient.Receive"/>method. The <see cref="System.Net.Sockets.UdpClient.Receive"/> method
   blocks execution until it receives a message. Using the <see cref="System.Net.IPEndPoint"/> passed to <see cref="System.Net.Sockets.UdpClient.Receive"/>, the identity of the responding host is revealed.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="11"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient.Send"/>
		<seealso cref="System.Net.IPEndPoint"/>
		<seealso cref="System.Net.Sockets.UdpClient.Connect"/>
		<seealso cref="System.Net.IPAddress"/>
	</doc>
	<doc for="UdpClient.JoinMulticastGroup1">
		<summary>
			<para> Adds a <see cref="System.Net.Sockets.UdpClient"/> to a multicast group with the specified Time to Live (TTL).
   </para>
		</summary>
		<param name="multicastAddr">The <see cref="System.Net.IPAddress"/> of the multicast group to join. </param>
		<param name="timeToLive">The Time to Live (TTL), measured in router hops. </param>
		<exception cref="System.ArgumentOutOfRangeException">The TTL provided is not between 0 and 255</exception>
		<exception cref="System.ObjectDisposedException">The underlying <see cref="System.Net.Sockets.Socket"/> has been closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="multicastAddr"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The IP address is not compatible with the <see cref="System.Net.Sockets.AddressFamily"/> value that defines the addressing scheme of the socket.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/> method subscribes the <see cref="System.Net.Sockets.UdpClient"/> to a multicast
   group using the specified <see cref="System.Net.IPAddress"/>. After calling
   the <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/> method,
   the
   underlying <see cref="System.Net.Sockets.Socket"/> sends
   an Internet Group Management Protocol
   (IGMP) packet to the router requesting membership to the multicast group. The
   multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside
   this range or if the router to which the request is made is not multicast
   enabled, <see cref="System.Net.Sockets.UdpClient"/> will throw a
<see cref="System.Net.Sockets.SocketException"/>. If you 
   receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error. The
<paramref name="timeToLive"/> parameter specifies how many router hops will be allowed for 
   a multicasted datagram before being discarded. Once the <see cref="System.Net.Sockets.UdpClient"/> is listed with
   the router as a member of the multicast group, it will be able to receive
   multicasted datagrams sent to the specified <see cref="System.Net.IPAddress"/>. </para>
			<note type="note">
   You must create the <see cref="System.Net.Sockets.UdpClient"/>
   using the multicast port number otherwise you will not be able to receive
   multicasted datagrams. Do not call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method prior to calling the <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/> method or the receive method will not
   work. You do not need to belong to a multicast group to send datagrams to
   a multicast IP address.
</note>
			<para>Before joining a multicast group make sure the socket is bound to the port or 
   end point. You do that by calling one of the constructors that accept as
   parameter a port or an end point. </para>
			<para>To stop receiving multicasted datagrams, call the <see cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/> method
and provide the <see cref="System.Net.IPAddress"/> of the group from which
you would like to withdraw.</para>
		</remarks>
		<example>
			<para> The following example demonstrates how to join a
      multicast group by providing two parameters, a multicast address, and a
      number representing the TTL. </para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="13"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/>
	</doc>
	<doc for="UdpClient">
		<summary>
			<para> Provides User Datagram Protocol (UDP) network
      services.
      </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient"/> class provides simple methods for sending
   and receiving connectionless UDP datagrams in blocking synchronous mode. For
   more information of blocking versus nonblocking sockets, see
<see topic="cpconusingnon-blockingclientsocket.htm"/>. For information on asynchronous versus 
   synchronous communication, see
<see topic="_core_Windows_Sockets.3a_.Blocking.htm"/>. Because UDP is a connectionless transport protocol, you do not
   need to establish a remote host connection prior to sending and receiving data.
   You do, however, have the option of establishing a default remote host in one of
   the following two ways:</para>
			<list type="bullet"><item>
					<term>
      
      Create an instance of the <see cref="System.Net.Sockets.UdpClient"/> class using the remote host name and port
      number as parameters.</term>
				</item>
				<item>
					<term>
      
      Create an instance
      
      of the <see cref="System.Net.Sockets.UdpClient"/> class and then call the <see cref="System.Net.Sockets.TcpClient.Connect"/> method.</term>
				</item>
			</list>
			<para>You can use any of the send methods provided in the
<see cref="System.Net.Sockets.UdpClient"/> to send data to a remote device. Use the 
<see cref="System.Net.Sockets.UdpClient.Receive"/> method to receive data from remote hosts. </para>
			<note type="note">
   Do not call <see cref="System.Net.Sockets.UdpClient.Send"/> using a host name or <see cref="System.Net.IPEndPoint"/> if you
   
   have already specified a default remote host. If you do, <see cref="System.Net.Sockets.UdpClient"/> will throw an exception.
</note>
			<para><see cref="System.Net.Sockets.UdpClient"/>
methods also allow you to send and receive multicasted datagrams.
Use The <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/> method to subscribe a <see cref="System.Net.Sockets.UdpClient"/> to
a multicast group. Use the <see cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/> method to unsubscribe a
<see cref="System.Net.Sockets.UdpClient"/> from a multicast group. </para>
		</remarks>
		<permission cref="System.Net.SocketPermission">To establish an outgoing connection or accept an incoming request.</permission>
		<example>
			<para>The following example establishes a <see cref="System.Net.Sockets.UdpClient"/> connection using the host name www.contoso.com
   on port 11000. A small string
   message is sent to two separate remote host machines. The <see cref="System.Net.Sockets.UdpClient.Receive"/> method blocks execution until a message is
   received. Using the <see cref="System.Net.IPEndPoint"/> passed to <see cref="System.Net.Sockets.UdpClient.Receive"/>, the identity of the responding host is revealed.</para>
			<codelink SampleID="Classic UdpClientExample" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.TcpClient"/>
		<seealso topic="cpcontcpudp"/>
	</doc>
	<doc for="UdpClient.UdpClient4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/> class. </para>
		</summary>
		<param name="family">One of the <see cref="System.Net.Sockets.AddressFamily"/> values that specifies the addressing scheme of the socket.</param>
		<exception cref="System.ArgumentException"><paramref name="family"/> is not <see cref="System.Net.Sockets.AddressFamily.InterNetwork"/> or <see cref="System.Net.Sockets.AddressFamily.InterNetwork6"/>. </exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <paramref name="family"/> parameter determines whether the listener uses an IP version 4
   address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass
   the <see cref="System.Net.Sockets.AddressFamily.InterNetwork"/> value. To use an IPv6 address,
   pass the <see cref="System.Net.Sockets.AddressFamily.InterNetworkV6"/> value. Passing any other value
   will cause the method to throw an <see cref="System.ArgumentException"/>.</para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
			<para>The <see cref="M:System.Net.Sockets.UdpClient.#ctor"/> is not suitable for joining a multicast group
because it does not perform socket binding.</para>
		</remarks>
	</doc>
	<doc for="UdpClient.DropMulticastGroup1">
		<summary>
			<para>Leaves a multicast group.</para>
		</summary>
		<param name=" ifindex">The local address of the multicast group to leave.</param>
		<param name="multicastAddr">The <see cref="System.Net.IPAddress"/> of the multicast group to leave.</param>
	</doc>
	<doc for="UdpClient.JoinMulticastGroup">
		<overload>
			<para> Adds a <see cref="System.Net.Sockets.UdpClient"/> to a multicast group.
   </para>
		</overload>
		<summary>
			<para> Adds a <see cref="System.Net.Sockets.UdpClient"/> to a multicast group.</para>
		</summary>
		<param name="multicastAddr">The multicast <see cref="System.Net.IPAddress"/> of the group you want to join. </param>
		<exception cref="System.ObjectDisposedException">The underlying <see cref="System.Net.Sockets.Socket"/> has been closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ArgumentException">The IP address is not compatible with the <see cref="System.Net.Sockets.AddressFamily"/> value that defines the addressing scheme of the socket.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/> method subscribes the <see cref="System.Net.Sockets.UdpClient"/> to
   a multicast group using the specified <see cref="System.Net.IPAddress"/>. After calling the <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/> method,
   the underlying <see cref="System.Net.Sockets.Socket"/> sends
   an Internet Group Management Protocol (IGMP) packet to
   the router requesting membership to the multicast group. The multicast address
   range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this
   range or if the router to which the request is made is not multicast enabled,
<see cref="System.Net.Sockets.UdpClient"/> will throw a <see cref="System.Net.Sockets.SocketException"/>. If you 
   receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error. Once the <see cref="System.Net.Sockets.UdpClient"/> is listed with
   the router as a member of the multicast group, it will be able to receive
   multicasted datagrams sent to the specified <see cref="System.Net.IPAddress"/>. </para>
			<note type="note">
   You must create the <see cref="System.Net.Sockets.UdpClient"/>
   using the multicast port number; otherwise, you will not be able to receive
   multicasted datagrams. Do not call the <see cref="System.Net.Sockets.UdpClient.Connect"/> method prior to calling the <see cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/>
   method, or the <see cref="System.Net.Sockets.UdpClient.Receive"/> method will not
   work.
   You do not need to belong to a
   multicast group to send datagrams to a multicast IP address.
</note>
			<para>Before joining a multicast group make sure the socket is bound to the port or end point.
   You do that by calling one of the constructors that accept as parameter a port
   or an end point. </para>
			<para>To stop receiving multicasted datagrams, call the <see cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/> method
and provide the <see cref="System.Net.IPAddress"/> of the group from
which you would like to withdraw.</para>
			<note type="note">
   In the
   IPv6 case, there are
   several multicast address ranges you can choose
   from. Please, refer to the IETF RFC 2375.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to join a multicast group by providing
      a multicast address.</para>
			<codelink SampleID="System.Net.Sockets.UdpClient.JoinMulticastGroup" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/>
	</doc>
	<doc for="UdpClient.UdpClient">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/> class.
   </para>
		</summary>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>This constructor creates a new <see cref="System.Net.Sockets.UdpClient"/> and allows the underlying
   service provider to assign the most appropriate local IP address and port
   number. </para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
			<para>This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also,
   it works only with IPv4 address types.</para>
		</remarks>
		<example>
			<para> The following example demonstrates how to use the default constructor to create an
      instance of the <see cref="System.Net.Sockets.UdpClient"/> class.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="4"/>
		</example>
	</doc>
	<doc for="UdpClient.UdpClient1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/> class and binds it to the local
   port number provided.</para>
		</summary>
		<param name="port">The local port number from which you intend to communicate.</param>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="port "/>parameter is greater than <see cref="System.Net.IPEndPoint.MaxPort"/> or less than <see cref="System.Net.IPEndPoint.MinPort"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para> This
      constructor creates an underlying <see cref="System.Net.Sockets.Socket"/> and binds it to the
      port number from which you intend to communicate. Use this constructor if
      you are only interested in setting the local port number. The underlying service
      provider will assign the local IP address. </para>
			<note type="note">
      If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
      the specific error code. Once you have obtained this code, you can refer to the
      Windows Socket Version 2 API error code documentation in MSDN for a detailed
      description of the error.
      
   </note>
			<para>This constructor works only with IPv4 address types.</para>
		</remarks>
		<example>
			<para>The following example demonstrates using a local port number to create an instance of the
   <see cref="System.Net.Sockets.UdpClient"/> class.</para>
			<codelink SampleID="Classic UdpClient.PublicMethodsAndPropertiesExample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UdpClient.DropMulticastGroup">
		<overload>
			<para>Leaves a multicast group.</para>
		</overload>
		<summary>
			<para> Leaves a multicast group.
      </para>
		</summary>
		<param name="multicastAddr">The <see cref="System.Net.IPAddress"/> of the multicast group to leave. </param>
		<exception cref="System.ObjectDisposedException">The underlying <see cref="System.Net.Sockets.Socket"/> has been closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<exception cref="System.ArgumentException">The IP address is not compatible with the <see cref="System.Net.Sockets.AddressFamily"/> value that defines the addressing scheme of the socket.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="multicastAddr"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/> method withdraws the <see cref="System.Net.Sockets.UdpClient"/>
from the multicast group identified by the specified <see cref="System.Net.IPAddress"/>.
After calling the <see cref="System.Net.Sockets.UdpClient.DropMulticastGroup"/> method, the underlying
<see cref="System.Net.Sockets.Socket"/> sends 
an Internet Group Management Protocol (IGMP) packet to the router,
removing the router from the multicast group. After a <see cref="System.Net.Sockets.UdpClient"/>
withdraws from the group, it
will no longer be able to receive datagrams sent to
that group. </para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/> to obtain
   the specific error code. Once you have obtained this code, you can refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to drop a multicast group by
      providing a multicast address.</para>
			<codelink SampleID="System.Net.Sockets.UdpClient.JoinMulticastGroup" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.Sockets.UdpClient.JoinMulticastGroup"/>
	</doc>
	<doc for="UdpClient.UdpClient5">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.Sockets.UdpClient"/>
class and binds it to the local port number provided.</para>
		</summary>
		<param name=" port">The port on which to listen for incoming connection attempts.</param>
		<param name="family">One of the <see cref="System.Net.Sockets.AddressFamily"/> values that specifies the addressing scheme of the socket.</param>
		<exception cref="System.ArgumentException"><paramref name="family"/> is not <see cref="System.Net.Sockets.AddressFamily.InterNetwork"/> or <see cref="System.Net.Sockets.AddressFamily.InterNetwork6"/>. </exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="port "/> is greater than <see cref="System.Net.IPEndPoint.MaxPort"/> or less than <see cref="System.Net.IPEndPoint.MinPort"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>The <see cref="M:System.Net.Sockets.UdpClient.#ctor"/> creates an underlying <see cref="System.Net.Sockets.Socket"/> and binds it to the
   port number from which you intend to communicate.</para>
			<para>The <paramref name="family"/> parameter determines whether the listener uses an IP version 4
address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass
the <see cref="System.Net.Sockets.AddressFamily.InterNetwork"/> value. To use an IPv6 address,
pass the <see cref="System.Net.Sockets.AddressFamily.InterNetworkV6"/> value. Passing any other value
will cause the method to throw an <see cref="System.ArgumentException"/>.</para>
			<note type="note">
   If you receive a <see cref="System.Net.Sockets.SocketException"/>, use <see cref="System.Net.Sockets.SocketException.ErrorCode" qualify="true"/>
   to obtain the specific error code. Once you have obtained this code, refer to the
   Windows Socket Version 2 API error code documentation in MSDN for a detailed
   description of the error.
</note>
		</remarks>
		<example>
			<para>The following code example shows how to create a UDP client to use in a 
      multicast group. </para>
			<code>
[SampleID='System.Net.Sockets.UdpClient.JoinMulticastGroup' SnippetID='3']
--------- Languages displayed= cs, vb ---------

--------- cs ---------
--------- Snippet 3 ---------

      // Bind and listen on port 2000. This constructor creates a socket 
      // and binds it to the port number on which to receive data. The family 
      // parameter specifies that this connection is going to use an IPv6 address.
      clientOriginator = new UdpClient(2000, AddressFamily.InterNetworkV6);

      // Join or create a multicast group. The multicast address ranges to use
      // are specified in the RFC#2375. Try more addresses.
      
      // Transform the string address into the internal format.
      m_GrpAddr = IPAddress.Parse("FF01::1");

      // Display the multicast address used.
      Console.WriteLine("Multicast Address: [" + m_GrpAddr.ToString() + "]");
      
      // Join the specified multicast group.
      clientOriginator.JoinMulticastGroup(m_GrpAddr);

      // Define the endpoint data port. Note that this port number
      // must match the ClientTarget UDP port number that is the
      // port on which the ClientTarget is receiving data.
      m_ClientTargetdest = new IPEndPoint(m_GrpAddr, 1000);


--------- vb ---------
--------- Snippet 3 ---------
         ' Bind and listen on port 2000. This constructor creates a socket 
         ' and binds it to the port number on which to receive data. The family 
         ' parameter specifies that this connection is going to use an IPv6 address.
         clientOriginator = New UdpClient(2000, AddressFamily.InterNetworkV6)
         
         ' Join or create a multicast group. The multicast address ranges to use
         ' are specified in the RFC#2375. Try more addresses.
         ' Transform the string address into the internal format.
         m_GrpAddr = IPAddress.Parse("FF01::1")
         
         ' Display the multicast address used.
         Console.WriteLine(("Multicast Address: [" + m_GrpAddr.ToString() + "]"))
         
         ' Join the specified multicast group.
         clientOriginator.JoinMulticastGroup(m_GrpAddr)
         
         ' Define the endpoint data port. Note that this port number
         ' must match the ClientTarget UDP port number that is the
         ' port on which the ClientTarget is receiving data.
         m_ClientTargetdest = New IPEndPoint(m_GrpAddr, 1000)
   </code>
		</example>
	</doc>
	<doc for="UdpClient.JoinMulticastGroup2">
		<summary>
			<para>Adds a <see cref="System.Net.Sockets.UdpClient"/> to a multicast group.</para>
		</summary>
		<param name=" ifindex">The local address.</param>
		<param name="multicastAddr">The multicast <see cref="System.Net.IPAddress"/> of the group you want to join.</param>
		<exception cref="System.ObjectDisposedException">The underlying <see cref="System.Net.Sockets.Socket"/> has been closed.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information.</exception>
		<remarks>
			<para>Before joining a multicast group, be sure the socket is bound to the port or
      endpoint. You can do this by calling one of the constructors that accepts a
      port or an end point as parameter. </para>
			<para> The <paramref name="infindex"/>
parameter is used to identify a hardware interface on
the same link.</para>
			<note type="note">
   There are
   several multicast address ranges to choose from. Refer to the IETF RFC 2375.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Net.Sockets.UdpClient.JoinMulticastGroup" SnippetID="5"/>
		</example>
	</doc>
</docs>
