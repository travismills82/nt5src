<docs>
	<doc for="Dns.IpToString">
		<summary>
			<para>Converts an IP address to a dotted-quad string.</para>
		</summary>
		<param name="address">The IP address to convert.</param>
		<returns>
			<para>The string representation of the IP address.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Net.Dns.IpToString"/> method 
   converts an IP address expressed as an integer (for example, 33663168)
   to an IP address expressed in dotted-quad notation (for example,
   "192.168.1.2").</para>
		</remarks>
	</doc>
	<doc for="Dns.EndGetHostByName">
		<summary>
			<para>Ends an asynchronous request for DNS information.</para>
		</summary>
		<param name="asyncResult">The pending request for DNS information.</param>
		<returns>
			<para>An <see cref="System.Net.IPHostEntry"/> object containin DNS information about a host. </para>
		</returns>
		<exception cref="System.ArgumentNullException">
			<paramref name="asyncResult "/>is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Net.Dns.EndGetHostByName"/> method completes an asynchronous request for
   DNS information that was started with a call to <see cref="System.Net.Dns.BeginGetHostByName"/> . </para>
		</remarks>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
	<doc for="Dns.InetNtoa">
		<summary>
			<para>Creates a string containing the
               DNS name of the host specified in address.</para>
		</summary>
		<param name="address">An <see cref="System.Net.IPAddress"/> instance representing the IP (or dotted IP) address of the host.</param>
		<returns>
			<para>A string containing the DNS name of the host
               specified in the address.</para>
		</returns>
		<exception cref="System.ArgumentNullException">
			<paramref name="address "/>is null.</exception>
	</doc>
	<doc for="Dns.GetHostByInfo">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Dns.GetHostName">
		<summary>
			<para>Gets the host name of the local computer.</para>
		</summary>
		<returns>
			<para>A string containing the DNS host name
      of the local computer.</para>
		</returns>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving the local host name.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<para>The following example uses the <see cref="System.Net.Dns.GetHostName"/>
method to obtain the host name of the local computer.</para>
			<codelink SampleID="Dns_GetHostName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Dns.BeginGetHostByName">
		<summary>
			<para>Begins an asynchronous request for <see cref="System.Net.IPHostEntry"/> information about the specified DNS host name.</para>
		</summary>
		<param name="hostName">A string containing the DNS name of the host.</param>
		<param name=" requestCallback">The <see cref="System.AsyncCallback"/>.</param>
		<param name=" stateObject">The State object.</param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> instance that references the asynchronous request.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="hostName"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<exception cref="System.Net.Sockets.SocketException">An error was encountered executing the DNS query.</exception>
		<remarks>
			<para>The <see cref="System.Net.Dns.BeginGetHostByName"/> method starts an
   asynchronous request for DNS host information. The asynchronous callback method uses the
<see cref="System.Net.Dns.EndGetHostByName"/> method to return the actual host information.</para>
		</remarks>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
	<doc for="Dns.EndResolve">
		<summary>
			<para>Ends an asynchronous request for DNS information.</para>
		</summary>
		<param name="asyncResult">The pending request for DNS information.</param>
		<returns>
			<para>An <see cref="System.Net.IPHostEntry"/> object that contains DNS information about a host. </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="asyncResult "/>is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Net.Dns.EndResolve"/> method completes an asynchronous request for
   DNS information that was started with a call to <see cref="System.Net.Dns.BeginResolve"/> . </para>
		</remarks>
		<example>
			<para>The following example ends an asynchronous request for
      DNS host information.</para>
			<codelink SampleID="Dns_Begin_EndResolve" SnippetID="1"/>
		</example>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
	<doc for="Dns.GetHostByAddress1">
		<summary>
			<para>Creates an <see cref="System.Net.IPHostEntry"/> instance from the specified <see cref="System.Net.IPAddress"/>
.</para>
		</summary>
		<param name="address">An <see cref="System.Net.IPAddress"/> .</param>
		<returns>
			<para>An <see cref="System.Net.IPHostEntry"/>
.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="address "/>is <see langword="null"/> .</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<para>The following example creates a <see cref="System.Net.IPHostEntry"/> from an <see cref="System.Net.IPAddress"/>
.</para>
			<codelink SampleID="Dns_GetHostByAddress_IPAddress" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Dns.GetHostByName">
		<summary>
			<para> Gets the DNS information for the specified DNS host
      name.</para>
		</summary>
		<param name="hostName">A string containing the DNS name of the host.</param>
		<returns>
			<para>An <see cref="System.Net.IPHostEntry"/> object containing host information for the address
   specified in <paramref name="hostName"/>
   .</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="hostName "/>is <see langword="null"/> .</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostName"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Dns.GetHostByName"/> method queries the
   Internet DNS server for host information. </para>
			<para>For asychronous access to DNS information, use the <see cref="System.Net.Dns.BeginGetHostByName"/> and <see cref="System.Net.Dns.EndGetHostByName"/> methods.</para>
		</remarks>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<para>The following example uses the <see cref="System.Net.Dns.GetHostByName"/> to gets the DNS information for the
   specified DNS host name.</para>
			<codelink SampleID="Dns_GetHostByName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Dns">
		<summary>
			<para>Provides simple
      domain name resolution functionality.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Dns"/> class is a static
   class that retrieves
   information about a specific host from the Internet Domain Name System (DNS). </para>
			<para>The host information from the DNS query is returned in an
   instance of the <see cref="System.Net.IPHostEntry"/> class. If the specified
   host has more than one entry in the DNS database, <see cref="System.Net.IPHostEntry"/> contains
   multiple IP addresses and
   aliases. </para>
		</remarks>
		<permission cref="System.Net.DnsPermission">to allow the use of <see cref="System.Net.Dns"/> .</permission>
		<example>
			<para> The following example queries the DNS database for information on the host
      www.contoso.com:</para>
			<codelink SampleID="Classic Dns Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Dns.GetHostByAddress">
		<overload>
			<para> Gets DNS host information for an IP address.</para>
		</overload>
		<summary>
			<para>Creates an <see cref="System.Net.IPHostEntry"/> instance from an IP address.</para>
		</summary>
		<param name="address"> A string that represents an IP address.</param>
		<returns>
			<para>An <see cref="System.Net.IPHostEntry"/>
instance.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="address "/>is <see langword="null"/> .</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address"/> .</exception>
		<exception cref="System.FormatException"><paramref name="address "/>is not a valid IP address.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc>
	<doc for="Dns.Resolve">
		<summary>
			<para> Resolves a DNS host name or IP address to an <see cref="System.Net.IPHostEntry"/>
instance. </para>
		</summary>
		<param name="hostName"> A DNS-style host name or IP address.</param>
		<returns>
			<para>An <see cref="System.Net.IPHostEntry"/> instance
   containing address information about the host specified in
<paramref name="hostName"/>
.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="hostName "/>is <see langword="null"/> .</exception>
		<exception cref="System.Net.Sockets.SocketException">An error is encountered when resoloving <paramref name="hostName"/> .</exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission to access DNS information.</exception>
		<remarks>
			<para>The <see cref="System.Net.Dns.Resolve"/> method queries a DNS server for
   the IP address associated with a host name or IP address. </para>
			<para>When <paramref name="hostName "/>is a DNS-style host name associated with multiple IP
addresses, only the first IP address that resolves to that host name is
returned. </para>
		</remarks>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<para> The following example uses the Resolve method to resolve an IP address to an <see cref="System.Net.IPHostEntry"/> instance.</para>
			<codelink SampleID="Dns_Resolve" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Dns.BeginResolve">
		<summary>
			<para> Begins an asynchronous request to
      resolve a DNS host name or IP address to an <see cref="System.Net.IPAddress"/> instance.</para>
		</summary>
		<param name="hostName">A string containing the DNS name of the host.</param>
		<param name="requestCallback">The <see cref="System.AsyncCallback"/>.</param>
		<param name="stateObject">The State object.</param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> instance that references the asynchronous request.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="hostName"/> is <see langword="null"/>.</exception>
		<exception cref="System.Net.Sockets.SocketException">The caller does not have permission to access DNS information.</exception>
		<exception cref="System.Security.SecurityException">An error occurred when executing the DNS query.</exception>
		<remarks>
			<para>The <see cref="System.Net.Dns.BeginResolve"/> method starts an asynchronous request for DNS host information. The asynchronous callback method uses the <see cref="System.Net.Dns.EndResolve"/> method to return the actual host information.</para>
		</remarks>
		<permission cref="System.Net.DnsPermission">for accessing DNS. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<para>The following example uses <see cref="System.Net.Dns.BeginResolve"/> to
   resolve a DNS host name to an <see cref="System.Net.IPAddress"/> .</para>
			<codelink SampleID="Dns_Begin_EndResolve" SnippetID="1"/>
		</example>
		<seealso topic="cpconasynchronousprogramming"/>
	</doc>
</docs>
