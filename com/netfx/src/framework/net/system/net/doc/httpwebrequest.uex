<docs>
	<doc for="HttpWebRequest.CreateExtension">
		<summary>
		</summary>
	</doc>
	<doc for="HttpWebRequest.AddExtension">
		<summary>
		</summary>
	</doc>
	<doc for="HttpWebRequest.Address">
		<summary>
			<para> Gets the URI of the Internet resource that actually responds to the request.</para>
		</summary>
		<value>
			<para>A <see cref="System.Uri"/> 
identifying the Internet resource that actually responds to the request.
The default is the URI used by the <see cref="System.Net.WebRequest.Create" qualify="true"/> method to
initialize the
request. </para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.Address"/> 
property is set to the URI that actually responds to a
request, after any redirections that might happen during the request are
complete.</para>
			<para>The URI of the original request is kept in the <see cref="System.Net.HttpWebRequest.RequestUri"/> 
property.</para>
		</remarks>
		<example>
			<para>The following example checks to see if the <see cref="System.Net.HttpWebRequest"/> instance <c>req</c> was redirected to another location to fulfill the request, and sets the value of the <c>hasChanged</c> 
variable to <see langword="true"/> if the request was redirected; otherwise <c>hasChanged</c> is set to
<see langword="false"/> .</para>
			<codelink SampleID="Classic HttpWebRequest.RequestUri Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpWebRequest.Credentials">
		<summary>
			<para>Provides authentication information for the request.</para>
		</summary>
		<value>
			<para> An <see cref="System.Net.ICredentials"/> containing the authentication credentials associated 
   with the request. The default is
<see langword="null"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.Credentials"/> property contains authentication
   information to identify the maker of the request. The <see cref="System.Net.HttpWebRequest.Credentials"/> property can be either an instance
   of <see cref="System.Net.NetworkCredential"/>, in which case the user, password, and domain
   information contained in the <see cref="System.Net.NetworkCredential"/> instance is used to authenticate
   the request, or it can be an instance of <see cref="System.Net.CredentialCache"/>, in which case the uniform resource
   identifier (URI) of the request is used to determine the user, password, and
   domain information to use to authenticate the request.</para>
		</remarks>
	</doc><doc for="HttpWebRequest.EnableCookies">
		<summary>
			<para> Gets or sets a value indicating whether to
      send cookies with this request.</para>
		</summary>
		<value>
			<para><see langword="true"/> to enable cookies; otherwise, <see langword="false"/>. The default value is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.EnableCookies"/> property specifies whether to send 
   the cookies in the <see cref="System.Net.HttpWebRequest.CookieContainer"/>
   property with the request. When the <see cref="System.Net.HttpWebRequest.EnableCookies"/> property is <see langword="false"/>, cookies are not
   sent with the request.</para>
		</remarks>
	</doc><doc for="HttpWebRequest.RequestUri">
		<summary>
			<para> Gets the original URI of the request.</para>
		</summary>
		<value>
			<para>A <see cref="System.Uri"/>
containing the URI of the Internet resource passed to the <see cref="System.Net.WebRequest.Create" qualify="true"/> method.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri"/>
instance passed to <see cref="System.Net.HttpWebRequest"/> by the call to <see cref="System.Net.WebRequest.Create" qualify="true"/>. </para>
			<para>Following a redirection header does not change the<see cref="System.Net.HttpWebRequest.RequestUri"/> property. To get the actual
URI that responded to the request, examine the <see cref="System.Net.HttpWebRequest.Address"/>
property.</para>
		</remarks>
		<example>
			<para>The following example checks to see if the <see cref="System.Net.HttpWebRequest"/> 
instance <c>req</c> was redirected
to another location to fulfill the request, and sets the value of the <c>hasChanged</c> variable to
<see langword="true"/> if the request was redirected; otherwise <c>hasChanged</c> is set to 
<see langword="false"/> .</para>
			<codelink SampleID="Classic HttpWebRequest.RequestUri Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpWebRequest.MaximumAutomaticRedirections">
		<summary>
			<para>Gets or sets the maximum number of redirects that the request will follow.</para>
		</summary>
		<value>
			<para>The maximum number of redirection responses that the request will follow. The
      default value is 50.</para>
		</value>
		<exception cref="System.ArgumentException">The value is set to 0 or less.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.MaximumAutomaticRedirections"/> method 
   property sets the maximum number of
   redirections for the request to follow if the <see cref="System.Net.HttpWebRequest.AllowAutoRedirect"/> property
   is <see langword="true"/>. </para>
		</remarks>
	</doc><doc for="HttpWebRequest.ContinueDelegate">
		<summary>
			<para>Gets or sets the delegate method called when an HTTP 100-continue response is received
      from the Internet resource.</para>
		</summary>
		<value>
			<para> A delegate that implements the callback
      method that executes when an HTTP Continue response is returned from the Internet
      resource. The default value is <see langword="null"/>
      .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.ContinueDelegate"/>
property specifies the callback method to call when the
client receives a 100-Continue response.</para>
			<para> When the <see cref="System.Net.HttpWebRequest.ContinueDelegate"/> property is set, the client calls the delegate whenever protocol responses of type <see cref="System.Net.HttpStatusCode.Continue" qualify="true"/> (100) are
received. This is useful if you want
the client to display the status of the data being received from the Internet
resource.</para>
		</remarks>
	</doc><doc for="HttpWebRequest.AddRange2">
		<summary>
			<para>Adds a range header to a request for a specified range.</para>
		</summary>
		<param name="rangeSpecifier">The description of the range.</param>
		<param name=" from">The position at which to start sending data.</param>
		<param name=" to">The position at which to stop sending data. </param>
		<exception cref="System.ArgumentNullException"><paramref name="rangeSpecifier "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="from "/>is greater than <paramref name="to "/></para>
			<para>-or-</para>
			<para><paramref name="from "/>or <paramref name="to "/>is less than 0.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="rangeSpecifier"/> is invalid.</exception>
		<exception cref="System.InvalidOperationException">The range header could not be added.</exception>
	</doc><doc for="HttpWebRequest.AddRange3">
		<summary>
			<para> Adds a range header to a request for a specific range from the beginning or end of the requested data.</para>
		</summary>
		<param name="rangeSpecifier">The description of the range.</param>
		<param name="range">The starting or ending point of the range. </param>
		<exception cref="System.ArgumentNullException"><paramref name="rangeSpecifier "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="rangeSpecifier"/> is invalid.</exception>
		<exception cref="System.InvalidOperationException">The range header could not be added.</exception>
		<remarks>
			<para>If <paramref name="range "/>is positive, the range is from the start of the data to 
<paramref name="range"/>.</para>
			<para>If <paramref name="range "/>is negative, the range is from <paramref name="range "/>to the end of the 
data.</para>
		</remarks>
	</doc><doc for="HttpWebRequest.Finalize"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="HttpWebRequest.ConnectionGroupName">
		<summary>
			<para>Gets or sets the name of the connection group for the request.</para>
		</summary>
		<value>
			<para>The name of the connection group for this request. The default value is
   <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.ConnectionGroupName"/> property enables you to associate a request with a
   connection group. This is useful when your application makes requests to one
   server for different users, such as a Web site that retrieves customer
   information from a database server.</para>
			<note type="inotes">
   Each
   connection group creates additional connections for a server. This may
   result in exceeding <see cref="System.Net.ServicePoint.ConnectionLimit" qualify="true"/> for that server.
</note>
		</remarks>
		<example>
			<para>The following example show how to use user information
      to form a connection group, assuming that the variables <paramref name="username"/>,
   <paramref name="password"/>, and <paramref name="domain"/> are set by the application before this code
      is called.</para>
			<codelink SampleID="Classic HttpWebRequest.ConnectionGroupName Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpWebRequest.Abort">
		<summary>
			<para>Cancels a request to an Internet resource.</para>
		</summary>
		<remarks>
			<para><see cref="System.Net.HttpWebRequest.Abort"/> cancels a request to a
   resource. After a request is canceled, calling <see cref="System.Net.HttpWebRequest.GetResponse"/>, <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>, <see cref="System.Net.HttpWebRequest.EndGetResponse"/>, <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, or <see cref="System.Net.HttpWebRequest.EndGetRequestStream"/> will cause a <see cref="System.Net.WebException"/> with <see cref="System.Net.WebException.Status"/> set to <see cref="System.Net.WebExceptionStatus.RequestCanceled"/>
   .</para>
		</remarks>
	</doc><doc for="HttpWebRequest.ISerializable.GetObjectData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpWebRequest.PreAuthenticate">
		<summary>
			<para>Gets or sets a value indicating whether to send a preauthentication header with the request.</para>
		</summary>
		<value>
			<para><see langword="true "/>to send a
<see langword="WWW-authenticate"/> HTTP header with the initial
   request; otherwise, <see langword="false"/>. The default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Net.HttpWebRequest.PreAuthenticate"/> is <see langword="true"/> and credentials are supplied, the <see langword="WWW-authenticate"/> HTTP header is sent with the 
   initial request if its value is known; otherwise the request uses standard authentication
   procedures.
   If the authentication scheme does not support preauthentication, this property is ignored.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.SetServicePoint">
		<summary>
			<para>Sets the <see cref="System.Net.ServicePoint"/> to use for this request.</para>
		</summary>
		<param name="servicePoint">The <see cref="System.Net.ServicePoint"/> to use for this request.</param>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.SetServicePoint"/> methods sets the <see cref="System.Net.HttpWebRequest.ServicePoint" qualify="true"/> property to the specified <see cref="System.Net.ServicePoint"/>. This 
   method enables you to override the internal <see cref="System.Net.ServicePoint"/> assigned by the <see cref="System.Net.ServicePointManager"/>
   when making a request. The <see cref="System.Net.HttpWebRequest.ServicePoint" qualify="true"/> may be changed during
   authentication or if the request is redirected.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.CookieContainer">
		<summary>
			<para>Gets or sets the cookies associated with the request.</para>
		</summary>
		<value>
			<para> A <see cref="System.Net.CookieContainer"/> containing the cookies associated
   with this request.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.CookieContainer"/> property provides an instance of the <see cref="System.Net.CookieContainer"/> class
   that contains the cookies associated with this request. </para>
			<para><see cref="System.Net.HttpWebRequest.CookieContainer"/> is <see langword="null"/> by default. You must assign
a <see cref="System.Net.CookieContainer"/> instance to the property
to have cookies returned in the <see cref="System.Net.HttpWebResponse.Cookies"/> property of the <see cref="System.Net.HttpWebResponse"/>
returned by <see cref="System.Net.HttpWebRequest.GetResponse"/> .</para>
		</remarks>
		<seealso cref="System.Net.CookieContainer"/>
	</doc>
	<doc for="HttpWebRequest.GetObjectData">
		<summary>
			<para>Populates a <see cref="System.Runtime.Serialization.SerializationInfo"/> with the data 
   needed to serialize the target object.</para>
		</summary>
		<param name="serializationInfo">The <see cref="System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
		<param name=" streamingContext">The destination (see <see cref="System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
		<remarks>
			<para>Any objects included in the <see cref="System.Runtime.Serialization.SerializationInfo"/> are automatically 
   tracked and serialized by the formatter.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.AllowWriteStreamBuffering">
		<summary>
			<para>Gets or sets a value that indicates whether to buffer the data sent to the
      Internet resource.</para>
		</summary>
		<value>
			<para><see langword="true "/>to enable
   buffering of the data sent to the Internet resource; <see langword="false "/>to disable buffering. The default is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/> is <see langword="true"/>
, the data is buffered in memory so it is ready to be resent in the
event of redirections or authentication requests.</para>
			<note type="inotes">
   Setting <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/>
				<see langword="true"/> might cause performance
   problems
   when uploading large datasets
   because the data buffer could use all available memory.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/> property to disable data buffering.</para>
			<codelink SampleID="HttpWebRequest_AllowWriteStreamBuffering" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.GetHashCode">
		<summary>
			<para>Gets the hash code for this <see cref="System.Net.HttpWebRequest"/> .</para>
		</summary>
		<returns>
			<para>The hash code for the <see cref="System.Net.HttpWebRequest"/> .</para>
		</returns>
		<remarks>
			<para>The hash codes for <see cref="System.Net.HttpWebRequest"/><c>A</c> and <c>B</c> are guaranteed to be the same when <c>A.Equals(B)</c> is <see langword="true"/>.</para>
			<para>This method implements the <see cref="System.Object.GetHashCode" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.GetHashCode"/> method to create a hash table.</para>
			<codelink SampleID="HttpWebRequest_GetHashCode" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.HaveResponse">
		<summary>
			<para> Gets a value indicating whether a response has been received from an Internet
      resource.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if a response has been received; otherwise
<see langword="false"/>.</para>
		</value>
		<example>
			<para>The following example checks the <see cref="System.Net.HttpWebRequest.HaveResponse"/> property to determine if a response has been 
   received from an Internet resource.</para>
			<codelink SampleID="Httpwebrequest_HaveResponse" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Pipelined">
		<summary>
			<para>Gets or sets a value indicating whether to pipeline the request to the Internet resource.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the request should be pipelined; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>An application uses the <see cref="System.Net.HttpWebRequest.Pipelined"/> property to indicate a preference for pipelined connections. When <see cref="System.Net.HttpWebRequest.Pipelined"/> is <see langword="true"/> , an application makes pipelined connections to the servers that support them.</para>
			<para>Pipelined connections are made only when the <see cref="System.Net.HttpWebRequest.KeepAlive"/> property
is also <see langword="true"/>
.</para>
		</remarks>
		<example>
			<para>The following example prints the value of the <see cref="System.Net.HttpWebRequest.Pipelined"/> property to the console.</para>
			<codelink SampleID="HttpWebRequest_PipeLined" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.ProtocolVersion">
		<summary>
			<para>Gets or sets the
      version of HTTP to use for the request.</para>
		</summary>
		<value>
			<para> The HTTP version to use for the request. The default is <see cref="System.Net.HttpVersion.Version11" qualify="true"/> .</para>
		</value>
		<exception cref="System.ArgumentException">The HTTP version is set to a value other than 1.0 or 1.1.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest"/> class supports only versions 1.0 and 1.1 of
   HTTP. Setting <see cref="System.Net.HttpWebRequest.ProtocolVersion"/> to a different version throws
   an exception.</para>
			<note type="note">
   To set the HTTP version of the current
   request, use the
<see cref="System.Net.HttpVersion.Version10"/> and <see cref="System.Net.HttpVersion.Version11"/> fields of 
   the <see cref="System.Net.HttpVersion"/> class.
   
</note>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.ProtocolVersion"/> Property.</para>
			<codelink SampleID="HttpWebRequest_ProtocolVersion" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.ContentLength">
		<summary>
			<para> Gets or sets the <see langword="Content-length"/> HTTP header.</para>
		</summary>
		<value>
			<para>The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set
      and that there is no request data to send.</para>
		</value>
		<exception cref="System.InvalidOperationException">The request has been started by calling the <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The new <see cref="System.Net.HttpWebRequest.ContentLength"/> value is less than 0.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.ContentLength"/> property contains the value to send
   as the <see langword="Content-length"/>
   HTTP header with the request.</para>
			<para>Any value other than -1 in the <see cref="System.Net.HttpWebRequest.ContentLength"/>
property indicates that the request will upload data and that only methods that
upload data are allowed to be set in the <see cref="System.Net.HttpWebRequest.Method"/>
property.</para>
			<para> Once the <see cref="System.Net.HttpWebRequest.ContentLength"/> property is set to a value, that number of bytes must be
written to the request stream that is returned by calling <see cref="System.Net.HttpWebRequest.GetRequestStream"/> or both <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/> and <see cref="System.Net.HttpWebRequest.EndGetRequestStream"/> .</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.ContentLength"/> property to the length of the string being
   posted.</para>
			<codelink SampleID="HttpWebRequest_ContentLength" SnippetID="4"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.MediaType">
		<summary>
			<para> Gets or sets the media type of the request.</para>
		</summary>
		<value>
			<para>The media type of the request. The default value is
   <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>The value of the <see cref="System.Net.HttpWebRequest.MediaType"/> property affects the <see cref="System.Net.HttpWebResponse.CharacterSet"/> property. When you set the <see cref="System.Net.HttpWebRequest.MediaType"/> in the
   request, the corresponding media type is chosen from the list of character sets
   returned in the response <see langword="Content-type"/>
   HTTP header. </para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.TransferEncoding">
		<summary>
			<para>Gets or sets the value of the
   <see langword="Transfer-encoding"/> HTTP header.</para>
		</summary>
		<value>
			<para>The value of
      the <see langword="Transfer-encoding"/> HTTP header.
      The default value is <see langword="null"/>
      .</para>
		</value>
		<exception cref="System.InvalidOperationException"><see cref="System.Net.HttpWebRequest.TransferEncoding"/>is set when <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/> .</exception>
		<exception cref="System.ArgumentException"><see cref="System.Net.HttpWebRequest.TransferEncoding"/> is set to the value "Chunked".</exception>
		<remarks>
			<para>Before you can set the <see cref="System.Net.HttpWebRequest.TransferEncoding"/> property, you must first set the <see cref="System.Net.HttpWebRequest.SendChunked"/> property to <see langword="true"/>. Clearing <see cref="System.Net.HttpWebRequest.TransferEncoding"/> by setting it to <see langword="null "/>has no effect on
   the value of <see cref="System.Net.HttpWebRequest.SendChunked"/>
   .</para>
			<para>Values assigned to the <see cref="System.Net.HttpWebRequest.TransferEncoding"/> property replace any
existing contents.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.Accept">
		<summary>
			<para>Gets or sets the value of the <see langword="Accept"/> HTTP header.</para>
		</summary>
		<value>
			<para> The value of the <see langword="Accept"/> HTTP header. The default value is
<see langword="null"/>.</para>
		</value>
		<remarks>
			<para>To clear the <see langword="Accept "/>HTTP header, set the <see cref="System.Net.HttpWebRequest.Accept"/> property to <see langword="null "/>.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.Accept"/> property.</para>
			<codelink SampleID="HttpWebRequest_Accept" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Referer">
		<summary>
			<para>Gets or sets the value of the <see langword="Referer"/> HTTP header.</para>
		</summary>
		<value>
			<para> The value of the <see langword="Referer"/> HTTP header. The default value is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>If the <see cref="System.Net.HttpWebRequest.AllowAutoRedirect"/> property
   is <see langword="true"/>, the <see cref="System.Net.HttpWebRequest.Referer"/> property is set automatically when the request is
   redirected to another site.</para>
			<para>To clear the <see langword="Referer "/>HTTP header, set the <see cref="System.Net.HttpWebRequest.Referer"/> property to <see langword="null "/>.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.Referer"/> property.</para>
			<codelink SampleID="HttpWebRequest_Referer" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.UserAgent">
		<summary>
			<para>Gets or sets the value of the <see langword="User-agent"/> HTTP header.</para>
		</summary>
		<value>
			<para>The value of the <see langword="User-agent"/> HTTP header. The default value is <see langword="null"/>.</para>
		</value>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.UserAgent"/> property.</para>
			<codelink SampleID="HttpWebRequest_UserAgent" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Expect">
		<summary>
			<para>Gets or sets the value of the <see langword="Expect"/> HTTP header.</para>
		</summary>
		<value>
			<para> The contents of the <see langword="Expect"/> HTTP header. The default value is 
<see langword="null"/> . </para>
		</value>
		<exception cref="System.ArgumentException">Expect is set to a string that contains "100-continue" as a substring.</exception>
	</doc>
	<doc for="HttpWebRequest.IfModifiedSince">
		<summary>
			<para>Gets or sets the value of the
   <see langword="If-Modified-Since"/> HTTP
      header.</para>
		</summary>
		<value>
			<para>A <see cref="System.DateTime"/> that contains the
   contents of the <see langword="If-Modified-Since"/> HTTP header. The default value
   is the current date and time.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.IfModifiedSince"/> property is assumed to be local time. </para>
		</remarks>
		<example>
			<para>The following example checks the <see cref="System.Net.HttpWebRequest.IfModifiedSince"/> property.</para>
			<codelink SampleID="HttpWebRequest_IfModifiedSince" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.AddRange">
		<overload>
			<para>Adds a range header to the request.</para>
		</overload>
		<summary>
			<para>Adds a byte range header to the request for a specified range.</para>
		</summary>
		<param name="from">The position at which to start sending data.</param>
		<param name=" to">The position at which to stop sending data.</param>
		<exception cref="System.ArgumentOutOfRangeException"><para>
				<paramref name="from "/>is greater than <paramref name="to "/></para>
			<para>-or-</para>
			<para>
				<paramref name="from "/>or <paramref name="to "/>is less than 0.</para></exception>
		<exception cref="System.InvalidOperationException">The range header could not be added.</exception>
		<remarks>
			<para><see cref="System.Net.HttpWebRequest.AddRange"/> adds a byte range header to the request.</para>
		</remarks>
		<example>
			<para>The following example adds a range header to the request.</para>
			<codelink SampleID="HttpWebRequest_AddRange2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.AddRange1">
		<summary>
			<para>Adds a byte range header to a request for a specific
      range from the beginning or end
      of the requested data.</para>
		</summary>
		<param name="range">The starting or ending point of the range.</param>
		<exception cref="System.InvalidOperationException">The range header could not be added.</exception>
		<remarks>
			<para><see cref="System.Net.HttpWebRequest.AddRange"/> adds a byte range header to the request. </para>
			<para>If <paramref name="range "/> is positive, the range is from the start of
the data to <paramref name="range"/>.</para>
			<para>If <paramref name="range "/> is negative, the range is from <paramref name="range
"/>to the end of the data.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest">
		<summary>
			<para> Provides an HTTP-specific implementation of the <see cref="System.Net.WebRequest"/>
class.</para>
		</summary>
		<threadsafe>
			<para>An application must run in full trust mode when using serialization.</para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest"/> class provides support for the
   properties and methods defined in <see cref="System.Net.WebRequest"/> and for additional
   properties and methods that enable the user to interact directly with servers
   using HTTP.</para>
			<para>Do not use the <see cref="M:System.Net.HttpWebRequest.#ctor"/> constructor. Use the <see cref="System.Net.WebRequest.Create" qualify="true"/> method to initialize new <see cref="System.Net.HttpWebRequest"/> instances. If
the scheme for the URI is <c>http://</c> or <c>https://</c>
, <see cref="System.Net.WebRequest.Create"/> returns an <see cref="System.Net.HttpWebRequest"/>
instance.</para>
			<para>The <see cref="System.Net.HttpWebRequest.GetResponse"/> method makes a synchronous request to the
Internet resource specified in the <see cref="System.Net.HttpWebRequest.RequestUri"/> property and returns an <see cref="System.Net.HttpWebResponse"/>
instance containing the response. You can make an asynchronous request to the
Internet resource using the <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> and <see cref="System.Net.HttpWebRequest.EndGetResponse"/> methods. </para>
			<para>When you want to send data to the Internet resource, the <see cref="System.Net.HttpWebRequest.GetRequestStream"/> method returns a <see cref="System.IO.Stream"/> instance to use to send
data. The <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/> and <see cref="System.Net.HttpWebRequest.EndGetRequestStream"/> methods provide asynchronous access to the send data
stream.</para>
			<para>The <see cref="System.Net.HttpWebRequest"/> class throws a <see cref="System.Net.WebException"/> when errors occur while accessing
an Internet resource. The <see cref="System.Net.WebException.Status" qualify="true"/> property is one of the <see cref="System.Net.WebExceptionStatus"/>
values that indicates the source of the error. When <see cref="System.Net.WebException.Status" qualify="true"/> is <see cref="System.Net.WebExceptionStatus.ProtocolError" qualify="true"/>, the <see cref="System.Net.WebException.Response"/> property contains the <see cref="System.Net.HttpWebResponse"/>
received from the Internet resource. </para>
			<para><see cref="System.Net.HttpWebRequest"/> exposes common HTTP header values sent to the Internet resource as properties, set by methods, or set by the
system; the following table contains a complete list. You can set other
headers in the <see cref="System.Net.HttpWebRequest.Headers"/> property as name/value pairs.</para>
			<para>The following table lists the HTTP headers that are set either by properties or methods or the system.</para>
			<list type="table">
				<listheader>
					<term>Header</term>
					<description>Set by</description>
				</listheader>
				<item>
					<term> Accept</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Accept"/>
   property.</description>
				</item>
				<item>
					<term> Connection</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Connection"/>property,
<see cref="System.Net.HttpWebRequest.KeepAlive"/> property.</description>
				</item>
				<item>
					<term> Content-Length</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.ContentLength"/>property.</description>
				</item>
				<item>
					<term> Content-Type</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.ContentType"/>property.</description>
				</item>
				<item>
					<term> Expect</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Expect"/>property.</description>
				</item>
				<item>
					<term> Date</term>
					<description>Set by the system to current date.</description>
				</item>
				<item>
					<term> Host</term>
					<description>Set by the system to current host
      information.</description>
				</item>
				<item>
					<term> If-Modified-Since</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.IfModifiedSince"/> property.</description>
				</item>
				<item>
					<term> Range</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.AddRange"/>
method.</description>
				</item>
				<item>
					<term> Referer</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Referer"/>property.</description>
				</item>
				<item>
					<term> Transfer-Encoding</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.TransferEncoding"/> property (the
<see cref="System.Net.HttpWebRequest.SendChunked"/> 
property must be true).</description>
				</item>
				<item>
					<term> User-Agent</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.UserAgent"/>property.</description>
				</item>
			</list>
			<note type="note">
				<see cref="System.Net.HttpWebRequest"/> is registered automatically. You do not need to call <see cref="System.Net.WebRequest.RegisterPrefix"/> to register <see cref="System.Net.HttpWebRequest" qualify="true"/> before using URIs
   beginning with <c>http://</c> or
<c>https://</c> 
.
</note>
		</remarks>
		<permission cref="System.Net.WebPermission">to access the requested URI or any URI that the request is redirected to. Associated enumeration: <see cref="System.Net.NetworkAccess.Connect"/>.</permission>
		<example>
			<para>The following example creates an <see cref="System.Net.HttpWebRequest"/> for the URI http://www.contoso.com/ . </para>
			<codelink SampleID="Classic HttpWebRequest Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.HttpWebRequest">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.HttpWebRequest"/> class from the specified instances of the <see cref="System.Runtime.Serialization.SerializationInfo"/> and <see cref="System.Runtime.Serialization.StreamingContext"/>
classes.</para>
		</summary>
		<param name="serializationInfo">A <see cref="System.Runtime.Serialization.SerializationInfo"/> instance containing the information required to serialize the new <see cref="System.Net.HttpWebRequest"/> instance.</param>
		<param name=" streamingContext">A <see cref="System.Runtime.Serialization.StreamingContext"/> instance containing the source and destination of the serialized stream associated with the new <see cref="System.Net.HttpWebRequest"/> instance.</param>
		<remarks>
			<para>This constructor implements the <see cref="System.Runtime.Serialization.ISerializable"/> interface
   for the <see cref="System.Net.HttpWebRequest"/>class.</para>
			<para>An application must run in full trust mode when using serialization.</para>
		</remarks>
		<seealso topic="cpconserialization"/>
	</doc>
	<doc for="HttpWebRequest.BeginGetRequestStream">
		<summary>
			<para>Begins an asynchronous request for a <see cref="System.IO.Stream"/> instance to use to
   write data.</para>
		</summary>
		<param name="callback">The <see cref="System.AsyncCallback"/> delegate.</param>
		<param name=" state">The state object for this request.</param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> that references the asynchronous request.</para>
		</returns>
		<exception cref="System.Net.ProtocolViolationException"><para>The <see cref="System.Net.HttpWebRequest.Method"/> property is GET or HEAD.</para>
			<para>-or-</para>
			<para>
				<see cref="System.Net.HttpWebRequest.KeepAlive"/> is <see langword="true"/>, <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/> is <see langword="false"/>, <see cref="System.Net.HttpWebRequest.ContentLength"/> is -1, <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/> , and <see cref="System.Net.HttpWebRequest.Method"/> is POST or PUT.</para></exception>
		<exception cref="System.InvalidOperationException"><para>The stream is being used by a previous call to <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>
			</para>
			<para>-or- </para>
			<para>
				<see cref="System.Net.HttpWebRequest.TransferEncoding"/> is set to a value and <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/> .</para></exception>
		<exception cref="System.Net.WebException"><see cref="System.Net.HttpWebRequest.Abort"/> was previously called.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/> method starts an asynchronous
   request for a stream used to send data for the <see cref="System.Net.HttpWebRequest"/> .
   The asynchronous callback method uses the <see cref="System.Net.HttpWebRequest.EndGetRequestStream"/> method to return the actual stream.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/> method to make an asynchronous request for a stream instance. </para>
			<codelink SampleID="HttpWebRequest_BeginGetRequestStream" SnippetID="2"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Method">
		<summary>
			<para>Gets or sets the method for the request.</para>
		</summary>
		<value>
			<para>The request method to use to contact the Internet resource. The default value
      is GET.</para>
		</value>
		<exception cref="System.ArgumentException"><para>No method is supplied.</para>
			<para>-or-</para>
			<para>The method string contains invalid characters.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.Method"/> property can be set to any of the
   HTTP 1.1 protocol verbs: GET, HEAD, POST, PUT, DELETE, TRACE, or OPTIONS.</para>
			<para>If the <see cref="System.Net.HttpWebRequest.ContentLength"/> property is set to any value other
than -1, the <see cref="System.Net.HttpWebRequest.Method"/> property must be set to a protocol property that uploads data.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.Method"/> property to POST.</para>
			<codelink SampleID="HttpWebRequest_ContentLength" SnippetID="4"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Proxy">
		<summary>
			<para> Gets or sets proxy information for the request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Net.WebProxy"/> instance to
   use to proxy the request. The default value is set by calling <see cref="System.Net.GlobalProxySelection.Select" qualify="true"/>.</para>
		</value>
		<exception cref="System.ArgumentNullException"><see cref="System.Net.HttpWebRequest.Proxy"/>is set to <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The request has been started by calling <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>. </exception>
		<exception cref="System.Security.SecurityException">The caller does not have permission for the requested operation.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.Proxy"/>
property identifies the <see cref="System.Net.WebProxy"/> instance to use
to process requests to Internet resources. To specify that no proxy should be used, set the <see cref="System.Net.HttpWebRequest.Proxy"/>
property to the proxy instance returned by the <see cref="System.Net.GlobalProxySelection.GetEmptyWebProxy" qualify="true"/>
method.</para>
			<para>Changing the <see cref="System.Net.HttpWebRequest.Proxy"/> property after the request has been
started by calling <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method will throw an <see cref="System.InvalidOperationException"/>.</para>
		</remarks>
		<permission cref="System.Net.WebPermission">to get or set the <see cref="System.Net.HttpWebRequest.Proxy"/> property. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted"/>.</permission>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.Proxy"/> method to get
   the proxy information for the request.</para>
			<codelink SampleID="Httpwebrequest_proxy" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.SendChunked">
		<summary>
			<para>Gets or sets a value indicating whether to send data in segments to the Internet resource.</para>
		</summary>
		<value>
			<para><see langword="true "/>to send data to the Internet resource in segments; otherwise,
<see langword="false"/>. The default value is <see langword="false"/>.</para>
		</value>
		<exception cref="System.InvalidOperationException">The request has been started by calling the <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method.</exception>
		<remarks>
			<para>When <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="true"/>, the request sends data to the Internet resource in
   segments. The Internet resource must support receiving chunked data.</para>
			<para>Changing the <see cref="System.Net.HttpWebRequest.SendChunked"/> property after the request has been
started by calling <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method will throw an <see cref="System.InvalidOperationException"/>.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.SendChunked"/> property to true so that data can be sent in
   segments to the Internet resource.</para>
			<codelink SampleID="HttpWebRequest_SendChunked" SnippetID="2"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.ContentType">
		<summary>
			<para>Gets or sets the value of the
   <see langword="Content-type"/> HTTP header.</para>
		</summary>
		<value>
			<para>The value of the <see langword="Content-type"/> HTTP header. The default
   value is <see langword="null"/>. </para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.ContentType"/> property contains the media
   type of the request. Values assigned to the <see cref="System.Net.HttpWebRequest.ContentType"/> property replace any existing
   contents when the request sends the <see langword="Content-type"/> HTTP header. </para>
			<para>To clear the <see langword="Content-type"/> HTTP header, set the <see cref="System.Net.HttpWebRequest.ContentType"/> property 
to <see langword="null"/>.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.ContentType"/> property.</para>
			<codelink SampleID="HttpWebRequest_ContentLength" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.GetRequestStream">
		<summary>
			<para>Gets a <see cref="System.IO.Stream"/> instance to use to write request
   data.</para>
		</summary>
		<returns>
			<para>A <see cref="System.IO.Stream"/>
to use to write request data.</para>
		</returns>
		<exception cref="System.Net.ProtocolViolationException"><para>The <see cref="System.Net.HttpWebRequest.Method"/> property is GET or HEAD. </para>
			<para> -or- </para>
			<para>
				<see cref="System.Net.HttpWebRequest.KeepAlive"/> is <see langword="true"/>, <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/> is <see langword="false"/>, <see cref="System.Net.HttpWebRequest.ContentLength"/> is -1, <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/>, and <see cref="System.Net.HttpWebRequest.Method"/> is POST or PUT. </para></exception>
		<exception cref="System.InvalidOperationException"><para>The <see cref="System.Net.HttpWebRequest.GetRequestStream"/> method is called more than once.</para>
			<para> -or-</para>
			<para>
				<see cref="System.Net.HttpWebRequest.TransferEncoding"/> is set to a value and <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/> .</para></exception>
		<exception cref="System.Net.WebException"><para><see cref="System.Net.HttpWebRequest.Abort"/> was previously called.</para>
			<para>-or- </para>
			<para>The time-out period for the request expired.</para>
			<para>-or-</para>
			<para>An error occurred while processing the request.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.GetRequestStream"/> method returns a stream to use to
   send data for the <see cref="System.Net.HttpWebRequest"/>. Once the <see cref="System.IO.Stream"/> instance has been returned,
   you can send data with the <see cref="System.Net.HttpWebRequest"/> by using the <see cref="System.IO.Stream.Write" qualify="true"/> method. </para>
			<note type="note">
   You must set the value of the
<see cref="System.Net.HttpWebRequest.ContentLength"/> property before writing data to the
   stream.
   
</note>
			<note type="caution">
   You must call the <see cref="System.IO.Stream.Close" qualify="true"/> method to close the stream and release the
   connection for
   reuse. Failure to close the stream will cause your application to run out of
   connections.
   
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.GetRequestStream"/> method to return a stream instance.</para>
			<codelink SampleID="HttpWebRequest_ContentLength" SnippetID="4"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Headers">
		<summary>
			<para>Gets a collection of the name/value pairs that make up the HTTP headers.</para>
		</summary>
		<value>
			<para>A <see cref="System.Net.WebHeaderCollection"/> containing the name/value pairs that make up the headers for
   the HTTP request.</para>
		</value>
		<exception cref="System.InvalidOperationException">The request has been started by calling the <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.Headers"/>
collection contains the protocol headers associated with the request. The
following table lists the HTTP headers that are not stored in the <see cref="System.Net.HttpWebRequest.Headers"/>
collection but are either set by the system or set
by properties or methods.</para>
			<list type="table">
				<listheader>
					<term>Header</term>
					<description>Set by</description>
				</listheader>
				<item>
					<term> Accept</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Accept"/>
   property.</description>
				</item>
				<item>
					<term> Connection</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Connection"/>property and <see cref="System.Net.HttpWebRequest.KeepAlive"/>
property.</description>
				</item>
				<item>
					<term> Content-Length</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.ContentLength"/>property.</description>
				</item>
				<item>
					<term> Content-Type</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.ContentType"/>property.</description>
				</item>
				<item>
					<term> Expect</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Expect"/>property.</description>
				</item>
				<item>
					<term> Date</term>
					<description>Set
      by the system to the current date.</description>
				</item>
				<item>
					<term> Host</term>
					<description>Set
      by the system to the current host information.</description>
				</item>
				<item>
					<term> If-Modified-Since</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.IfModifiedSince"/> property.</description>
				</item>
				<item>
					<term> Range</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.AddRange"/>
method.</description>
				</item>
				<item>
					<term> Referer</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.Referer"/>property.</description>
				</item>
				<item>
					<term> Transfer-Encoding</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.TransferEncoding"/> property (the <see cref="System.Net.HttpWebRequest.SendChunked"/>
property must be true).</description>
				</item>
				<item>
					<term> User-Agent</term>
					<description>Set by the <see cref="System.Net.HttpWebRequest.UserAgent"/>property.</description>
				</item>
			</list>
			<para> The <see cref="System.Net.WebHeaderCollection.Add"/> method throws an <see cref="System.ArgumentException"/> if you try to set one of these
protected headers. </para>
			<para>Changing the <see cref="System.Net.HttpWebRequest.Headers"/> property after the request has been started by
calling <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method will throw an <see cref="System.InvalidOperationException"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.Headers"/> property to print the HTTP header name/value pairs
   to the console.</para>
			<codelink SampleID="HttpWebRequest_Headers" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.EndGetRequestStream">
		<summary>
			<para>Ends an asynchronous request for a <see cref="System.IO.Stream"/> instance to use to write data.</para>
		</summary>
		<param name="asyncResult">The pending request for a stream.</param>
		<returns>
			<para>A <see cref="System.IO.Stream"/>
to use to write request data.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="asyncResult "/>is <see langword="null"/>.</exception>
		<exception cref="System.IO.IOException">The request did not complete, and no stream is available.</exception>
		<exception cref="System.ArgumentException"><paramref name="asyncResult"/> was not returned by the current instance from a call to <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>.</exception>
		<exception cref="System.InvalidOperationException">This method was called previously using <paramref name="asyncResult"/>.</exception>
		<exception cref="System.Net.WebException"><para><see cref="System.Net.HttpWebRequest.Abort"/> was previously called.</para>
			<para>-or-</para>
			<para>An error occurred while processing the request.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.EndGetRequestStream"/> method
   completes an asynchronous request for a stream that was started by the <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/> method. Once the <see cref="System.IO.Stream"/> instance has been returned, you
   can send data with the <see cref="System.Net.HttpWebRequest"/> by using the <see cref="System.IO.Stream.Write" qualify="true"/> method. </para>
			<note type="note">
   You must set the value of the
<see cref="System.Net.HttpWebRequest.ContentLength"/> property before writing data to the stream.
   
</note>
			<note type="caution">
   You must call the <see cref="System.IO.Stream.Close" qualify="true"/> method to close the stream and release the
   connection for
   reuse. Failure to close the stream will cause your application to run out of
   connections.
   
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.EndGetRequestStream"/> to end an asynchronous request for a stream
   instance.</para>
			<codelink SampleID="HttpWebRequest_BeginGetRequestStream" SnippetID="2"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.EndGetResponse">
		<summary>
			<para> Ends an asynchronous request to an Internet resource.</para>
		</summary>
		<param name="asyncResult">The pending request for a response.</param>
		<returns>
			<para>A <see cref="System.Net.WebResponse"/> containing the response from the Internet
   resource.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="asyncResult "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><para>This method was called previously using <paramref name="asyncResult."/>
			</para>
			<para>-or- </para>
			<para> The <see cref="System.Net.HttpWebRequest.ContentLength"/> property is greater than 0 but the data has not been written to the request stream.</para></exception>
		<exception cref="System.Net.WebException"><para><see cref="System.Net.HttpWebRequest.Abort"/> was previously called.</para>
			<para> -or-</para>
			<para> An error occurred while processing the request.</para></exception>
		<exception cref="System.ArgumentException"><paramref name="asyncResult"/> was not returned by the current instance from a call to <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.EndGetResponse"/> method completes an asynchronous request for
   an Internet resource that was started by calling <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>.</para>
			<note type="caution">
   You must call the <see cref="System.Net.HttpWebResponse.Close"/> method to close the stream and
   release the connection. Failure to do so may cause your application to run out
   of connections.
</note>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.EndGetResponse"/> to end an asynchronous request for an internet
   resource.</para>
			<codelink SampleID="HttpWebRequest_BeginGetResponse" SnippetID="2"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.GetResponse">
		<summary>
			<para> Returns a response from an Internet resource.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Net.WebResponse"/> containing the response from the Internet
   resource.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para>The stream is already in use by a previous call to <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>. </para>
			<para>-or- </para>
			<para>
				<see cref="System.Net.HttpWebRequest.TransferEncoding"/> is set to a value and <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/>. </para></exception>
		<exception cref="System.Net.ProtocolViolationException"><para><see cref="System.Net.HttpWebRequest.Method"/> is GET or HEAD, and either <see cref="System.Net.HttpWebRequest.ContentLength"/> is greater or equal to zero or <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="true."/>
			</para>
			<para>-or- </para>
			<para>
				<see cref="System.Net.HttpWebRequest.KeepAlive"/> is <see langword="true"/>, <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/> is <see langword="false"/>, <see cref="System.Net.HttpWebRequest.ContentLength"/> is -1, <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/>, and <see cref="System.Net.HttpWebRequest.Method"/> is POST or PUT.</para></exception>
		<exception cref="System.Net.WebException"><para><see cref="System.Net.HttpWebRequest.Abort"/> was previously called.</para>
			<para>-or- </para>
			<para>The time-out period for the request expired. </para>
			<para>-or-</para>
			<para> An error occurred while processing the request.</para></exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.GetResponse"/> method returns a <see cref="System.Net.WebResponse"/> instance containing the response
   from the Internet resource. The actual instance returned is an instance of
<see cref="System.Net.HttpWebResponse"/> , and can be typecast to that class to access
   HTTP-specific properties.</para>
			<note type="caution">
   You must call the <see cref="System.Net.HttpWebResponse.Close"/> method to close the stream and
   release the connection. Failure to do so may cause your application to run out
   of connections.
</note>
		</remarks>
		<seealso cref="System.Net.HttpWebRequest.Timeout"/>
	</doc>
	<doc for="HttpWebRequest.KeepAlive">
		<summary>
			<para>Gets or sets a value indicating whether to make a persistent connection to the Internet resource.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the
   request to the Internet resource should contain a <see langword="Connection"/>
   HTTP
   header with the value Keep-alive; otherwise, <see langword="false"/>. The
   default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Set this property to <see langword="true "/>to send an <see langword="Connection"/> HTTP header
   with the value Keep-alive. An application uses <see cref="System.Net.HttpWebRequest.KeepAlive"/> to indicate a preference
   for persistent connections. When the <see cref="System.Net.HttpWebRequest.KeepAlive"/> property is <see langword="true"/>, the application makes persistent connections to
   the servers that support them.</para>
			<note type="note">
   When using HTTP/1.1, Keep-Alive is on
   by default. Setting <see cref="System.Net.HttpWebRequest.KeepAlive"/> false may result in sending a
<see langword="Connection: Close"/> header to the server.
</note>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.KeepAlive"/> property to <see langword="false"/> to avoid
   establishing a persistent connection with the internet resource.</para>
			<codelink SampleID="HttpWebRequest_Connection" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Connection">
		<summary>
			<para>Gets or sets the value of the
   <see langword="Connection"/> HTTP header.</para>
		</summary>
		<value>
			<para> The value of the <see langword="Connection"/> HTTP header. The
   default value is <see langword="null"/>. </para>
		</value>
		<exception cref="System.ArgumentException">The value of <see cref="System.Net.HttpWebRequest.Connection"/> is set to Keep-alive or Close.</exception>
		<remarks>
			<para>The request sends the <see cref="System.Net.HttpWebRequest.Connection"/> property to the Internet resource as
   the <see langword="Connection"/>
   HTTP header. If <see cref="System.Net.HttpWebRequest.KeepAlive"/> is true, the value "Keep-alive" is
   appended to the end of the <see langword="Connection"/>
   header.</para>
			<para>To clear the <see langword="Connection "/>HTTP header, set the <see cref="System.Net.HttpWebRequest.Connection"/> property to <see langword="null "/>.</para>
			<para>Changing the <see cref="System.Net.HttpWebRequest.Connection"/> property after the request has been started by
calling <see cref="System.Net.HttpWebRequest.GetRequestStream"/>, <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/>, <see cref="System.Net.HttpWebRequest.GetResponse"/>, or <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method will throw an <see cref="System.InvalidOperationException"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.Connection"/> property to set the value of the Connection HTTP
   Header.</para>
			<codelink SampleID="HttpWebRequest_Connection" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.DefaultMaximumResponseHeadersLength">
		<summary>
			<para> Gets or sets the default for the <see cref="System.Net.HttpWebRequest.MaximumResponseHeadersLength"/>
property.</para>
		</summary>
		<value>
			<para> The configuration file sets this value to
      64 kilobytes.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException"><para>The value is less than 0 and is not equal to -1.</para></exception>
		<remarks>
			<para>This value can be changed in the configuration
      file or can be overridden using the <see cref="System.Net.HttpWebRequest.MaximumResponseHeadersLength"/>
      property.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.MaximumResponseHeadersLength">
		<summary>
			<para>Gets or sets the maximum allowed length of the response
      headers.</para>
		</summary>
		<value>
			<para>The length in kilobytes (1024 bytes) of the response headers.</para>
		</value>
		<exception cref="System.InvalidOperationException">The property is set after the request has already been submitted.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><para>The value is less than 0 and is not equal to -1.</para></exception>
		<remarks>
			<para>The length is measured in kilobytes (1024 bytes) and it includes the response
      status line and the response headers as well as all extra control characters
      received as part of the HTTP protocol. A value of -1 means no such limit will be
      imposed on the response headers, a value of 0 means that all requests will fail.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.UnsafeAuthenticatedConnectionSharing">
		<summary>
			<para>Gets or sets a value indicating whether
      to allow high-speed NTLM-authenticated connection sharing.</para>
		</summary>
		<value>
			<para><see langword="true"/>, to keep the authenticated connection open;
   otherwise,<see langword=" false "/> .</para>
		</value>
		<remarks>
			<para>The default value for this property is
   <see langword="false"/>
   
   , which causes the current connection to be closed after a request is
   completed. Your application must go through the authentication sequence every time it
   issues a new request. </para>
			<para> If this property is
   set to <see langword="true"/>, <see langword=" "/>
   the connection used to retrieve the response remains open after
   the authentication sequence has been performed. In this case, other requests that have
   this property set to <see langword="true"/> may use the connection
   without repeating the authentication sequence. In other words, if a connection
   has been authenticated for user A, user B can use the same
   connection using the credentials of user A.</para>
			<para><see langword="Caution[note]"/> Because
it is possible for an application to use the connection without being authenticated, you
need to be sure that there is no security breach in your system when
setting this property to <see langword="true"/>
.</para>
			<para> You may want to consider enabling this mechanism if your are
   having performance problems and your application is running on a Web server with
   Windows Integrated Authentication. </para>
			<para>Enabling this setting opens the system to security 
   risks. If you set the <see cref="System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing"/> to <see langword="true"/>
   be sure to take the following
   precautions:
   </para>
			<list type="bullet"><item>
					<term>
      
      Use the <see cref="System.Net.HttpWebRequest.ConnectionGroupName"/> to manage connections for different users. This
      avoids the potential use of the connection by non-authenticated applications.</term>
				</item>
				<item>
					<term>
      
      Run your application in a protected environment to avoid
      possible connection exploits.</term>
				</item>
			</list>
			<para>If you control the back-end server, as an alternative you might consider turning off the authentication persistence. This
   will increase the perfomance to a lesser degree but it
   is safer. For more details, search for AuthPersistence in the
   MSDN
   
   library.
   </para>
		</remarks>
		<permission cref="System.Net.WebPermission">Unrestricted Web permission is required to set this property.</permission>
	</doc>
	<doc for="HttpWebRequest.ClientCertificates">
		<summary>
			<para>Gets the collection of security certificates associated
      with this request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> containing the
   security certificates associated with this request.</para>
		</value>
		<remarks>
			<para>In order for an application to use a certificate contained in the collection 
      it must have access rights to this certificate. The mere fact that an
      application adds a certificate to the collection does not assure that it
      can access it. The application must have the same access rigths of the
      entity that issued the certificate. </para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.ReadWriteTimeout">
		<summary>
			<para>Gets or sets a timeout when writing to or reading from a stream.</para>
		</summary>
		<value>
			<para>The number of milliseconds before the writing or reading times out. Its default value is 300000 milliseconds (5 minutes).</para>
		</value>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.ReadWriteTimeout"/> is used when writing to the stream
   returned by <see cref="System.Net.HttpWebRequest.GetRequestStream"/> or reading from the stream returned
   by <see cref="System.IO.HttpWebRequest.GetResponseStream"/>. </para>
			<para> Specifically, the <see cref="System.Net.HttpWebRequest.ReadWriteTimeout"/>
property controls the timeout for the <see cref="System.IO.Stream.Read"/> method, which is used to read the stream returned
by <see cref="System.Net.HttpWebRequest.GetResponseStream"/> method, and for the <see cref="System.IO.Stream.Write"/> method, which
is used to write to the stream returned by <see cref="System.IO.HttpWebRequest.GetRequestStream"/> method.</para>
		</remarks>
	</doc>
	<doc for="HttpWebRequest.BeginGetResponse">
		<summary>
			<para> Begins an asynchronous request to an Internet
      resource.</para>
		</summary>
		<param name="callback">The <see cref="System.AsyncCallback"/> delegate</param>
		<param name=" state">The state object for this request.</param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> that references the asynchronous request for a response.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para>The stream is already in use by a previous call to <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>
			</para>
			<para>-or-</para>
			<para><see cref="System.Net.HttpWebRequest.TransferEncoding"/>is set to a value and <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/>.</para></exception>
		<exception cref="System.Net.ProtocolViolationException"><para><see cref="System.Net.HttpWebRequest.Method"/> is GET or HEAD, and either <see cref="System.Net.HttpWebRequest.ContentLength"/> is greater than zero or <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="true"/> .</para>
			<para>-or-</para>
			<para><see cref="System.Net.HttpWebRequest.KeepAlive"/> is <see langword="true"/>, <see cref="System.Net.HttpWebRequest.AllowWriteStreamBuffering"/> is <see langword="false"/>, and either <see cref="System.Net.HttpWebRequest.ContentLength"/> is -1, <see cref="System.Net.HttpWebRequest.SendChunked"/> is <see langword="false"/>and <see cref="System.Net.HttpWebRequest.Method"/> is POST or PUT.</para></exception>
		<exception cref="System.Net.WebException"><see cref="System.Net.HttpWebRequest.Abort"/> was previously called.</exception>
		<remarks>
			<para>The <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method starts
   an asynchronous request for a response from the Internet resource. The
   asynchronous callback method uses the <see cref="System.Net.HttpWebRequest.EndGetResponse"/> method to return
   the actual <see cref="System.Net.WebResponse"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> method to make an asynchronous request for an
   internet resource.</para>
			<note type="note">
   In the case of asynchronous requests,
   it is the responsibility of the client application to implement its own timeout
   mechanism. The following example shows how to do it.
</note>
			<codelink SampleID="System.Net.HttpWebRequest.BeginGetResponse" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.Timeout">
		<summary>
			<para>Gets or sets the time-out value for a request.</para>
		</summary>
		<value>
			<para>The number of milliseconds to wait before the request times out.</para>
		</value>
		<remarks>
			<para><see cref="System.Net.HttpWebRequest.Timeout"/> is the number of milliseconds that a
   synchronous request made with the <see cref="System.Net.HttpWebRequest.GetResponse"/> method
   waits for a response, and the <see cref="System.Net.HttpWebRequest.GetRequestStream"/> methods waits for a stream. If a resource does
   not respond within the time-out period, the request throws a <see cref="System.Net.WebException"/> with
   the <see cref="System.Net.WebException.Status"/> property set to <see cref="System.Net.WebExceptionStatus.Timeout" qualify="true"/>.</para>
			<para>The <see cref="System.Net.HttpWebRequest.Timeout"/>
property has no effect on asynchronous requests made with the <see cref="System.Net.HttpWebRequest.BeginGetResponse"/> or <see cref="System.Net.HttpWebRequest.BeginGetRequestStream"/> methods.</para>
			<note type="caution">
   In the case of asynchronous requests, it
   is the responsibility of the client application to implement its own timeout
   mechanism. Refer to the example in the <see cref="System.Net.HttpWebRequest.BeginGetResponse"/>
   
   method.
</note>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Net.HttpWebRequest.Timeout"/> property of the <see cref="System.Net.HttpWebRequest"/>
instance.</para>
			<codelink SampleID="HttpWebRequest_Timeout" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.AllowAutoRedirect">
		<summary>
			<para>Gets or sets a value that indicates whether the request should follow redirection responses.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the request should automatically follow redirection
   responses from the Internet resource; otherwise <see langword="false "/>
   . The default value is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Set <see cref="System.Net.HttpWebRequest.AllowAutoRedirect"/> to <see langword="true"/> if you
   want the request to automatically follow
   HTTP redirection headers to the new location of the resource. The maximum number
   of redirections to follow is set by the <see cref="System.Net.HttpWebRequest.MaximumAutomaticRedirections"/>
   property.</para>
			<para>If <see cref="System.Net.HttpWebRequest.AllowAutoRedirect"/> is set to false all 
responses with an HTTP status code from 300 to 399 will be returned to the
application.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.HttpWebRequest.AllowAutoRedirect"/> property to allow the request to follow redirection
   responses.</para>
			<codelink SampleID="HttpWebRequest_AllowAutoRedirect" SnippetID="2"/>
		</example>
	</doc>
	<doc for="HttpWebRequest.ServicePoint">
		<summary>
			<para>Gets the service point to use for the request.</para>
		</summary>
		<value>
			<para>A <see cref="System.Net.ServicePoint"/> that represents
   the network connection to the Internet resource.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Net.ServicePoint.Address" qualify="true"/> property may be different from <see cref="System.Net.HttpWebRequest.Address" qualify="true"/> if the request is
   redirected.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Net.ServicePoint" SnippetID="6"/>
		</example>
	</doc>
</docs>
