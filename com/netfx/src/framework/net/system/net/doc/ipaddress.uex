<docs>
	<doc for="IPAddress.GetHashCode">
		<summary>
			<para>Returns a hash value for an IP address.</para>
		</summary>
		<returns>
			<para> An integer hash value.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.GetHashCode"/> method returns a hash code of the IP address.
   This value can be used as a key in hash tables.</para>
		</remarks>
	</doc>
	<doc for="IPAddress.HostToNetworkOrder">
		<overload>
			<para>Converts a value from host byte order to network byte order.</para>
		</overload>
		<summary>
			<para>Converts a long value from host byte order to network byte order.</para>
		</summary>
		<param name="host">The number to convert, expressed in host byte order.</param>
		<returns>
			<para>A long value, expressed in network byte order.</para>
		</returns>
		<remarks>
			<para>Different computers use different conventions for ordering the bytes within multibyte integer
      values. Some computers put the most significant byte first (known as
      big-endian order) and others put the least-significant byte first
      (known as little-endian order).
      To work with computers that use different byte ordering, all integer values sent over the
      network are sent in network byte order. </para>
			<para> The <see cref="System.Net.IPAddress.HostToNetworkOrder"/>
method converts multibyte integer values stored on the host system from the
byte order used by the host to the byte order used by the network. </para>
		</remarks>
		<seealso cref="System.Net.IPAddress.NetworkToHostOrder"/>
	</doc>
	<doc for="IPAddress.HostToNetworkOrder1">
		<summary>
			<para>Converts an integer value from host byte order to network byte order.</para>
		</summary>
		<param name="host">The number to convert, expressed in host byte order.</param>
		<returns>
			<para>An integer value, expressed in network byte order.</para>
		</returns>
		<remarks>
			<para>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values sent over the network are sent in network byte order. </para>
			<para>The <see cref="System.Net.IPAddress.HostToNetworkOrder"/> method converts multibyte integer values stored on the host system from the byte order used by the host to the byte order used by the network. </para>
		</remarks>
		<seealso cref="System.Net.IPAddress.NetworkToHostOrder"/>
	</doc>
	<doc for="IPAddress.HostToNetworkOrder2">
		<summary>
			<para>Converts a short value from host byte order to network byte order.</para>
		</summary>
		<param name="host">The number to convert, expressed in host byte order.</param>
		<returns>
			<para>A short value, expressed in network byte order.</para>
		</returns>
		<remarks>
			<para>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values sent over the network are sent in network byte order. </para>
			<para>The <see cref="System.Net.IPAddress.HostToNetworkOrder"/> method converts multibyte integer values stored on the host system from the byte order used by the host to the byte order used by the network. </para>
		</remarks>
		<seealso cref="System.Net.IPAddress.NetworkToHostOrder"/>
	</doc>
	<doc for="IPAddress.Equals">
		<summary>
			<para>Compares two IP addresses.</para>
		</summary>
		<param name="comparand">An <see cref="System.Net.IPAddress"/> instance to compare to the current instance.</param>
		<returns>
			<para><see langword="true"/> if the two addresses are equal; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.Equals"/> method compares the current <see cref="System.Net.IPAddress"/> instance
   with the <paramref name="comparand"/> parameter and returns <see langword="true"/> if the two
   instances contain the same IP address.</para>
		</remarks>
	</doc>
	<doc for="IPAddress.NetworkToHostOrder">
		<overload>
			<para>Converts a number from network byte order to host byte order.</para>
		</overload>
		<summary>
			<para>Converts a long value from network byte order to host byte order.</para>
		</summary>
		<param name="network">The number to convert, expressed in network byte order.</param>
		<returns>
			<para>A long value, expressed in host byte order.</para>
		</returns>
		<remarks>
			<para>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To worj with computers that use different byte ordering, all integer values sent over the network are sent in network byte order. </para>
			<para>The <see cref="System.Net.IPAddress.NetworkToHostOrder"/> method converts multibyte integer values stored on the host system from the byte order used by the network to the byte order used by the host. </para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.IPAddress.NetworkToHostOrder"/> method to convert
   a long value from network byte order to host byte order. </para>
			<codelink SampleID="IPAddress_NetworkToHost" SnippetID="3"/>
		</example>
		<seealso cref="System.Net.IPAddress.HostToNetworkOrder"/>
	</doc>
	<doc for="IPAddress.NetworkToHostOrder1">
		<summary>
			<para>Converts an integer value from network byte order to host byte order.</para>
		</summary>
		<param name="network">The number to convert, expressed in network byte order.</param>
		<returns>
			<para>An integer value, expressed in host byte order.</para>
		</returns>
		<remarks>
			<para>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values sent over the network are sent in network byte order. </para>
			<para>The <see cref="System.Net.IPAddress.NetworkToHostOrder"/> method converts multibyte integer values stored on the host system from the byte order used by the network to the byte order used by the host. </para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.IPAddress.NetworkToHostOrder"/> method to convert an
   integer value from network byte order to host byte order. </para>
			<codelink SampleID="IPAddress_NetworkToHost" SnippetID="2"/>
		</example>
		<seealso cref="System.Net.IPAddress.HostToNetworkOrder"/>
	</doc>
	<doc for="IPAddress.NetworkToHostOrder2">
		<summary>
			<para>Converts a short value from network byte order to host byte order.</para>
		</summary>
		<param name="network">The number to convert, expressed in network byte order.</param>
		<returns>
			<para>A short value, expressed in host byte order.</para>
		</returns>
		<remarks>
			<para>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To wprk with computers that use different byte ordering, all integer values sent over the network are sent in network byte order. </para>
			<para>The <see cref="System.Net.IPAddress.NetworkToHostOrder"/> method converts multibyte integer values stored on the host system from the byte order used by the network to the byte order used by the host. </para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.IPAddress.NetworkToHostOrder"/> method to convert a short value from network byte
   order to host byte order. </para>
			<codelink SampleID="IPAddress_NetworkToHost" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.IPAddress.HostToNetworkOrder"/>
	</doc>
	<doc for="IPAddress.Loopback">
		<summary>
			<para> Provides the IP loopback address. This field is
      read-only.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.Loopback"/>
field is equivalent to 127.0.0.1 in dotted-quad notation.</para>
		</remarks>
		<example>
			<para>The following example prints the <see cref="System.Net.IPAddress.Loopback"/> address to the console.</para>
			<codelink SampleID="IPAddress_Broadcast_Loopback" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress.Broadcast">
		<summary>
			<para> Provides the IP broadcast address. This field is read-only.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.Broadcast"/> field is equivalent to 255.255.255.255 in dotted-quad notation.</para>
		</remarks>
		<example>
			<para>The following example prints the <see cref="System.Net.IPAddress.Broadcast"/> address to the console.</para>
			<codelink SampleID="IPAddress_Broadcast_Loopback" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress.IPAddress">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.IPAddress"/>
class with the specified
address.</para>
		</summary>
		<param name="newAddress">The long value of the IP address.</param>
		<remarks>
			<para>The <see cref="System.Net.IPAddress"/> instance is created with the <see cref="System.Net.IPAddress.Address"/>
property set to <paramref name="newAddress"/>.</para>
		</remarks>
	</doc>
	<doc for="IPAddress.AddressBytes">
		<summary>
			<para>Provides a copy of the IPAddress internals as an array of bytes.</para>
		</summary>
		<remarks>
			<para>TBD</para>
		</remarks>
	</doc>
	<doc for="IPAddress.Any">
		<summary>
			<para>Provides an IP address indicating that the server should listen for client activity on
      all network interfaces. This field is read-only.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.Socket.Bind" qualify="true"/> method uses the <see cref="System.Net.IPAddress.Any"/> field
   to indicate that a <see cref="System.Net.Sockets.Socket"/> instance should listen for client activity
   on all network interfaces.</para>
			<para>The <see cref="System.Net.IPAddress.Any"/> field 
is equivalent to 0.0.0.0 in dotted-quad notation.</para>
		</remarks>
	</doc>
	<doc for="IPAddress.ToString">
		<summary>
			<para> Converts an Internet address to its standard notation.</para>
		</summary>
		<returns>
			<para>A string containing the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</para>
		</returns>
		<remarks>
   The <see cref="System.Net.IPAddress.ToString"/> method converts the IP address stored in the <see cref="System.Net.IPAddress.Address"/> property to either IPv4 dotted-quad or to
   IPv6 colon-hexadecimal notation.
</remarks>
	</doc>
	<doc for="IPAddress.IPAddress1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.IPAddress"/> class with the specified address and
   scope.</para>
		</summary>
		<param name=" scopeid">The long value of the scope identifier.</param>
		<param name="address">The byte array value of the IP address</param>
		<exception cref="System.ArgumentNullException"><para><paramref name="address "/>is <see langword="null"/> .</para>
			<para>-or-</para>
			<para><paramref name="address "/>length != 16 .</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="scopeid"/> &lt; 0 or</para>
			<para><paramref name="scopeid"/> &gt; 0x00000000FFFFFFFF </para></exception>
		<remarks>
			<para>The <paramref name="scopeid"/> identifies a
   network interface in the case of
   a link-local address. The scope is only valid for link-local
   and site-local addresses.</para>
		</remarks>
	</doc>
	<doc for="IPAddress.None">
		<summary>
			<para>Provides an IP address indicating that no network interface
      should be used. This field is read-only.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.Socket.Bind" qualify="true"/> method uses the <see cref="System.Net.IPAddress.None"/> field to indicate that a <see cref="System.Net.Sockets.Socket"/> should
   not listen for client activity. The <see cref="System.Net.IPAddress.None"/>field is equivalent to 255.255.255.255 in dotted-quad notation.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.IPAddress.None"/> property to indicate that no
   network interface should be used.</para>
			<codelink SampleID="IPAddress_None" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress">
		<summary>
			<para>Provides an Internet Protocol (IP) address.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.IPAddress"/> class contains the address of a computer on
   an IP network.</para>
		</remarks>
		<example>
			<para>The following code example shows how to query a
      server to obtain the family addresses and the IP addresses it supports.</para>
			<codelink SampleID="System.Net.IPAddress" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress.GetAddressBytes">
		<summary>
			<para>Provides a copy of the <see cref="System.Net.IPAddress"/> as an array of bytes.</para>
		</summary>
		<returns>
			<para>Array of bytes.</para>
		</returns>
		<example>
			<para>The following code example shows how to get a server IP 
      address in byte format.
   </para>
			<codelink SampleID="System.Net.IPAddress" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IPAddress.Parse">
		<summary>
			<para>Converts an IP address string to an <see cref="System.Net.IPAddress"/>
instance.</para>
		</summary>
		<param name="ipString">A string containing an IP address in dotted-quad notation in case of IPv4 and in colon-hexadecimal notation, in case of IPv6.</param>
		<returns>
			<para>An <see cref="System.Net.IPAddress"/> instance.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="ipString "/>is <see langword="null"/> .</exception>
		<exception cref="System.FormatException"><paramref name="ipString "/> is not a valid IP address.</exception>
		<remarks>
			<para>The static <see cref="System.Net.IPAddress.Parse"/> method creates an <see cref="System.Net.IPAddress"/> instance from an IP address expressed in dotted-quad
   notation in case of IPv4 and in colon-hexadecimal
   notation, in case of IPv6. </para>
		</remarks>
		<example>
			<para>The following code converts a string containing an IP 
      address, in dotted-quad notation for IPv4 or in colon-hexadecimal for IPv6, into
      an instance of the IPAddress class. Then it uses the overloaded <see cref="System.Net.IPAddress.ToString"/>
      method to display the address in standard
      notation.</para>
			<codelink SampleID="System.Net.IPAddress.Parse" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress.IPv6Any">
		<overload>
			<para>Provides an IP address indicating that the server should listen for client
      activity on all network interfaces. This property is read-only.</para>
		</overload>
		<summary>
			<para>The <see cref="System.Net.Sockets.Socket.Bind" qualify="true"/> method uses the <see cref="System.Net.IPAddress.IPv6Any"/>
field to indicate that a <see cref="System.Net.Sockets.Socket"/> should listen for client activity
on all network interfaces.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.IPv6Any"/> field is equivalent to 0:0:0:0:0:0:0:0 in
   colon-hexadecimal notation, or to :: in compact notation.</para>
		</remarks>
		<example>
			<para>The following code example displays the value of the current
      host's Any address in standard compressed
      format.</para>
			<codelink SampleID="System.Net.IPAddress.IPv6NoneAnyLoopback" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IPAddress.IPv6None">
		<summary>
			<para>Provides an IP address indicating that no network interface should be used.
      This property is read-only.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.Sockets.Socket.Bind" qualify="true"/> method uses the <see cref="System.Net.IPAddress.IPv6None"/>
field to indicate that a <see cref="System.Net.Sockets.Socket"/> should not listen for client
activity. The <see cref="System.Net.IPAddress.IPv6None"/>field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or
to ::0 in compact notation.</para>
		</remarks>
		<example>
			<para>The following code example displays the value of the current
      host's None address in standard compressed format.</para>
			<codelink SampleID="System.Net.IPAddress.IPv6NoneAnyLoopback" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IPAddress.IsLoopback">
		<summary>
			<para> Indicates whether the specified IP address is the loopback address.</para>
		</summary>
		<param name="address">An IP address.</param>
		<returns>
			<para><see langword="true "/>if
<paramref name="address "/> is the loopback address; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.IsLoopback"/> method compares <paramref name="address "/> to <see cref="System.Net.IPAddress.Loopback"/>
and returns <see langword="true "/>if the two IP addresses are the same.</para>
			<para>Notice, in the case of IPv4, the <see cref="System.Net.IPAddress.IsLoopback"/> returns <see langword="true"/> for any IP
address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not
just <see cref="System.Net.IPAddress.Loopback"/>
(127.0.0.1).</para>
		</remarks>
		<example>
			<para>The following code example uses the <see cref="System.Net.IPAddress.IsLoopback"/> property to determine whether the
   specified address is a loopback address.</para>
			<codelink SampleID="System.Net.IPAddress.IsLoopback" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress.IPv6Loopback">
		<summary>
			<para>Provides the IP loopback address. This property is read-only.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Net.IPAddress.IPv6Loopback"/> field is equivalent to 0:0:0:0:0:0:0:1
   in colon-hexadecimal notation, or to ::1 in compact notation.</para>
		</remarks>
		<example>
			<para>The following code example displays the value of the current
      host's loopback address in standard compressed format.
      </para>
			<codelink SampleID="System.Net.IPAddress.IPv6NoneAnyLoopback" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IPAddress.Address">
		<summary>
			<para>An Internet Protocol (IP) address.</para>
		</summary>
		<value>
			<para>The long value of the IP address.</para>
		</value>
		<remarks>
			<para>This property is obsolete. Use <see cref="System.Net.IPAddress.GetAddressBytes"/>
.</para>
			<para>To convert <see cref="System.Net.IPAddress.Address"/>
to dotted-quad notation, use the <see cref="System.Net.IPAddress.ToString"/> method.</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Net.IPAddress.Address"/> parameter to retrieve the ip
   Address of the <see cref="System.Net.IPAddress"/> instance.</para>
			<codelink SampleID="IPAddress_Address_AddressFamily" SnippetID="2"/>
		</example>
	</doc>
	<doc for="IPAddress.IPAddress2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Net.IPAddress"/> class with the specified address and scope equal to
   0.</para>
		</summary>
		<param name="address">The byte array value of the IP address.</param>
		<exception cref=""><para><paramref name=""/>
			</para></exception>
		<remarks>
			<para>The <see cref="System.Net.IPAddress"/> is created with the <see cref="System.Net.IPAddress.Address"/> property set to 
<paramref name="address"/>.</para>
		</remarks>
	</doc>
	<doc for="IPAddress.AddressFamily">
		<summary>
			<para>Gets the address family of the IP address.</para>
		</summary>
		<value>
			<para> Returns
   <see langword="AddressFamily.InterNetwork"/>
   in for IPv4 or <see langword="AddressFamily.InterNetworkV6"/>
   for IPv6.</para>
		</value>
		<example>
			<para> Refer to the example in the <see cref="System.Net.IPAddress"/>
class topic.</para>
			<codelink SampleID="System.Net.IPAddress" SnippetID="3"/>
		</example>
	</doc>
	<doc for="IPAddress.ScopeId">
		<summary>
			<para>Gets or sets the IPv6 address scope identifier.</para>
		</summary>
		<value>
			<para>A long integer specifying the scope of the address.</para>
		</value>
		<exception cref="System.Net.Sockets.SocketException"><para><see langword="AddressFamily"/>= <see langword="InterNetwork"/>.</para></exception>
		<exception cref="System.ArgumentOutOfRangeException"><para><paramref name="ScopeId"/> is less than 0.</para>
			<para>-or-</para>
			<para><paramref name="ScopeId"/> is greater than 0x00000000FFFFFFFF. </para></exception>
		<remarks>
			<para>The meaning of <see cref="System.Net.IPAddress.ScopeId"/>
changes depending on the context in which it is
used.</para>
			<list type="bullet"><item>
					<term>
      
      Link-local address. On a host with multiple interfaces connected
      to separate links, the same link-local address can be assigned to multiple
      interfaces. To eliminate this ambiguity, a scope identifier is
      used to specify the interface over which messages are exchanged.</term>
				</item>
			</list>
			<note type="note">
   Link-local addresses, identified by
   the Format Prefix (FP) FE80, are used by nodes when communicating with
   neighboring nodes on the same link.
</note>
			<list type="bullet"><item>
					<term>
      
      Site-local addresses. A host can be connected to multiple
      sites. In this case, a scope identifier is used to indicate a specific
      site to communicate with.</term>
				</item>
			</list>
			<note type="note">
   Site-local addresses, identified by
   the Format Prefix (FP) FEC0, are used by nodes when communicating on private
   intranets.
</note>
			<para>The notation that is used to specify the <paramref name="ScopeId"/>
with an address is <c>Address%ScopeId</c>. For example, <c>FE80::5EFE:192.168.41.30%2 .</c></para>
		</remarks>
		<example>
			<codelink SampleID="System.Net.IPAddress" SnippetID="3"/>
		</example>
	</doc>
</docs>
