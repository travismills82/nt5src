<docs>
	<doc for="SocketAddress.SocketAddress">
		<overload>
			<para>Creates a new instance of the <see cref="System.Net.SocketAddress"/> class.</para>
		</overload>
		<summary>
			<para>Creates a new instance of the <see cref="System.Net.SocketAddress"/> class
   for the given address family.</para>
		</summary>
		<param name="family">An <see cref="System.Net.Sockets.AddressFamily"/> enumerated value.</param>
		<remarks>
			<para>This overload sets the underlying buffer size to 32 bytes.</para>
		</remarks>
	</doc><doc for="SocketAddress.Equals">
		<nodoc/>
		<summary>
			<para>Determines whether two Object instances are equal.</para>
		</summary>
	</doc><doc for="SocketAddress.GetHashCode">
		<nodoc/>
		<summary>
			<para>Serves as a hash function for a particular type, suitable for use in hashing 
      algorithms and data structures like a hash table.</para>
		</summary>
	</doc><doc for="SocketAddress.Size">
		<summary>
			<para>Gets the underlying buffer size of the <see cref="System.Net.SocketAddress"/> .</para>
		</summary>
		<value>
			<para>The underlying buffer size of the <see cref="System.Net.SocketAddress"/>.</para>
		</value>
		<remarks>
			<para>This property gets the underlying buffer size of the <see cref="System.Net.SocketAddress"/> in
   bytes. </para>
		</remarks>
	</doc><doc for="SocketAddress.ToString">
		<summary>
			<para>Returns information about the socket address.</para>
		</summary>
		<returns>
			<para>A string containing information about the <see cref="System.Net.SocketAddress"/>
. </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Net.SocketAddress.ToString"/> method returns a string containing the
<see cref="System.Net.Sockets.AddressFamily"/> enumerated value, the size of the underlying buffer of the <see cref="System.Net.SocketAddress"/> structure, and 
   the remaining contents of the
   buffer.</para>
		</remarks>
	</doc><doc for="SocketAddress.this">
		<summary>
			<para>Gets or sets the specified index element in the
      underlying buffer.</para>
		</summary>
		<param name="offset">The array index element of the desired information.</param>
		<value>
			<para>The value of the specified index element in the underlying buffer.</para>
		</value>
		<exception cref="IndexOutOfRangeException">The specified index does not exist in the buffer.</exception>
		<remarks>
			<para> This
      property gets or sets the specified byte position in the underlying buffer.</para>
			<note type="note">
      Be sure to call <see cref="System.Net.SocketAddress.Size"/> before
      referring to elements in the underlying buffer. Referring to an index that
      does not exist will cause the <see cref="System.Net.SocketAddress"/> to throw an <see cref="System.IndexOutOfRangeException"/>.
      
   </note>
		</remarks>
		<seealso cref="System.Net.SocketAddress.Size"/>
	</doc>
	<doc for="SocketAddress.SocketAddress1">
		<summary>
			<para>Creates a new instance of the <see cref="System.Net.SocketAddress"/> class using the specified address
   family and buffer size.</para>
		</summary>
		<param name="family">An <see cref="System.Net.Sockets.AddressFamily"/> enumerated value.</param>
		<param name=" size">The number of bytes to allocate for the underlying buffer.</param>
		<exception cref="ArgumentOutOfRangeException"><paramref name="size "/> is less than 2. These two bytes are needed to store <paramref name="family "/> .</exception>
		<remarks>
			<para>Use this overload to create a new instance of the <see cref="System.Net.SocketAddress"/> class with a
   particular underlying buffer size.</para>
		</remarks>
	</doc>
	<doc for="SocketAddress">
		<summary>
			<para>Stores serialized information from <see cref="System.Net.EndPoint"/> derived classes. </para>
		</summary>
		<remarks>
			<para>The first two bytes of the underlying buffer are 
      reserved for the <see cref="System.Net.Sockets.AddressFamily"/>
      enumerated value. When the <see cref="System.Net.SocketAddress"/> is used to store a serialized <see cref="System.Net.IPEndPoint"/>. The third and fourth bytes are used
      to store port number information. The next bytes are used to store the IP
      address. You can access any information within this underlying byte buffer by referring to
      its index position; the byte buffer uses zero-based indexing. You can also use the
   <see cref="System.Net.SocketAddress.Family"/> and <see cref="System.Net.SocketAddress.Size"/> properties to get the <see cref="System.Net.Sockets.AddressFamily"/> value and the
      buffer size, respectively. To view any of this information as a string, use the
   <see cref="System.Net.SocketAddress.ToString"/> method. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use <see cref="System.Net.SocketAddress"/> to serialize an instance
   of the <see cref="System.Net.EndPoint"/> class. After serialization, the underlying byte buffer
   of the <see cref="System.Net.SocketAddress"/> contains all of the <see cref="System.Net.IPEndPoint"/> state
   information.</para>
			<codelink SampleID="Classic SocketAddressExample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SocketAddress.Family">
		<summary>
			<para>Gets the <see cref="System.Net.Sockets.AddressFamily"/> enumerated value of the current
<see cref="System.Net.SocketAddress"/>.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Net.Sockets.AddressFamily"/> enumerated values.</para>
		</value>
		<remarks>
			<para>This method gets the <see cref="System.Net.Sockets.AddressFamily"/> enumerated value representing the addressing
   scheme of the current <see cref="System.Net.SocketAddress"/> . If you want to view the corresponding
   string representation of <see cref="System.Net.Sockets.AddressFamily"/>, use the <see cref="System.Net.SocketAddress.ToString"/> method.</para>
		</remarks>
		<seealso cref="System.Net.Sockets.AddressFamily"/>
	</doc>
</docs>
