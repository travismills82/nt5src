<docs>
	<doc for="Uri.Canonicalize">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.CheckSecurity">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.DefaultPortForScheme">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.Escape">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.EscapeString1">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.IsBadFileSystemCharacter">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.IsExcludedCharacter">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.IsReservedCharacter">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.Parse">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.Unescape">
		<summary>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeFile">
		<summary>
			<para>Specifies that the URI is a pointer to a file. This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeFtp">
		<summary>
			<para>Specifies that the URI is accessed through the File Transfer Protocol (FTP). This field is
      read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeGopher">
		<summary>
			<para>Specifies that the URI is accessed through the Gopher protocol. This
      field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeHttp">
		<summary>
			<para>Specifies that the URI is accessed through the Hypertext Transfer Protocol
      (HTTP). This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeHttps">
		<summary>
			<para>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field
      is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeNews">
		<summary>
			<para>Specifes that the URI is an Internet news group and is accessed through the Network News Transport
      Protocol (NNTP). This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.UriSchemeNntp">
		<summary>
			<para>Specifes that the URI is an Internet news group and is accessed through the
      Network News Transport Protocol (NNTP). This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.SchemeDelimiter">
		<summary>
			<para>Specifies the characters that separate the communication protocol scheme from the address portion
      of the URI. This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.Uri2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Uri"/> class from the
   specified instances of the <see cref="System.Runtime.Serialization.SerializationInfo"/> and <see cref="System.Runtime.Serialization.StreamingContext"/> classes.</para>
		</summary>
		<param name="serializationInfo">An instance of the <see cref="System.Runtime.Serialization.SerializationInfo"/> class containing the information required to serialize the new <see cref="System.Uri"/> instance.</param>
		<param name=" streamingContext">An instance of the <see cref="System.Runtime.Serialization.StreamingContext"/> class containing the source of the serialized stream associated with the new <see cref="System.Uri"/> instance.</param>
		<remarks>
			<para>This constructor implements the <see cref="System.Runtime.Serialization.ISerializable"/> interface for the
<see cref="System.Uri"/> class.</para>
		</remarks>
		<seealso topic="cpconserialization"/>
	</doc>
	<doc for="Uri.AbsolutePath">
		<summary>
			<para>Gets the absolute path of the URI.</para>
		</summary>
		<value>
			<para>A string containing the absolute path to the resource.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.AbsolutePath"/> property contains the path information
   that the server uses to resolve requests for information. Typically this is the path
   to the desired information on the server's file system, although it also can
   indicate the application or script the server must run to provide the
   information.</para>
			<para>The path information does not include the scheme, host 
   name, or query portion of the URI. The <see cref="System.Uri.AbsolutePath"/>
   property always returns at least a slash (/).</para>
		</remarks>
		<example>
			<para> The following example writes the path
      /catalog/shownew.htm to the console.</para>
			<codelink SampleID="Classic Uri.AbsolutePath Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.AbsoluteUri">
		<summary>
			<para> 
      Gets the absolute URI.</para>
		</summary>
		<value>
			<para>A string containing the entire URI.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.AbsoluteUri"/> property includes the entire URI stored in the <see cref="System.Uri"/> instance, including
   all fragments and query strings.</para>
		</remarks>
		<example>
			<para>The following example writes the complete contents of 
      the <see cref="System.Uri"/> instance
      to the console. In the example shown, http://www.contoso.com/catalog/shownew.htm?date=today
      is written to the console:</para>
			<codelink SampleID="Classic Uri.AbsoluteUri Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Fragment">
		<summary>
			<para> Gets the escaped fragment.
      </para>
		</summary>
		<value>
			<para>A string containing any URI fragment information.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.Fragment"/> property gets 
   any text following a fragment marker (#) in the URI, including the fragment
   marker itself. Given the URI http://www.contoso.com/index.htm#main
   ,
   the fragment property would get #main. </para>
			<para> The <see cref="System.Uri.Fragment"/> property is not considered in any <see cref="System.Uri.Equals"/> comparison.</para>
		</remarks>
	</doc>
	<doc for="Uri.HostNameType">
		<summary>
			<para> Returns the type of the host name specified in the URI. 
   </para>
		</summary>
		<value>
			<para>A member of the <see cref="System.UriHostNameType"/> enumeration.</para>
		</value>
	</doc>
	<doc for="Uri.IsDefaultPort">
		<summary>
			<para>Gets a value indicating whether the port value of the URI is the default for this scheme.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the value in the <see cref="System.Uri.Port"/> property is the default port for
   this scheme; otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="Uri.IsFile">
		<summary>
			<para>Gets a value indicating whether the specified <see cref="System.Uri"/> is a file URI.</para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the <see cref="System.Uri"/> is a file URI; otherwise,
<see langword="false"/> .</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.IsFile"/> property is <see langword="true"/> when the <see cref="System.Uri.Scheme"/> property 
   equals <see cref="System.Uri.UriSchemeFile"/>.</para>
		</remarks>
	</doc>
	<doc for="Uri.LocalPath">
		<summary>
			<para> Gets a local operating-system representation of a
      file name.</para>
		</summary>
		<value>
			<para> A string containing the local operating-system representation of a file
      name.</para>
		</value>
	</doc>
	<doc for="Uri.PathAndQuery">
		<summary>
			<para> Gets the <see cref="System.Uri.AbsolutePath"/> and <see cref="System.Uri.Query"/> properties 
   separated by a question mark (?).</para>
		</summary>
		<value>
			<para>A string that contains the <see cref="System.Uri.AbsolutePath"/> and <see cref="System.Uri.Query"/> properties separated by a question mark
   (?).</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.PathAndQuery"/> property contains the absolute path on
   the server and the query information sent with the request. It is identical to
   concatenating the <see cref="System.Uri.AbsolutePath"/> and <see cref="System.Uri.Query"/>
   properties.</para>
			<para>The <see cref="System.Uri.PathAndQuery"/> property is escaped according to RFC 2396.</para>
		</remarks>
		<example>
			<para>The following example writes the URI's path 
      (/catalog/shownew.htm) and query (date= today) information to the console.</para>
			<codelink SampleID="Classic Uri.PathAndQuery Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Scheme">
		<summary>
			<para>Gets the scheme name of the specified URI.</para>
		</summary>
		<value>
			<para>A string containing the scheme of the specified URI.</para>
		</value>
		<remarks>
			<para>The following table lists the valid scheme names for the 
   <see cref="System.Uri.Scheme"/> property.</para>
			<list type="table">
				<listheader>
					<term>Scheme</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> file</term>
					<description>The
         resource is a file on the local computer.</description>
				</item>
				<item>
					<term> ftp</term>
					<description> 
         The resource is through FTP.</description>
				</item>
				<item>
					<term> gopher</term>
					<description>The
         resource is accessed through the Gopher protocol.</description>
				</item>
				<item>
					<term> http</term>
					<description> 
         The resource is accessed through HTTP.</description>
				</item>
				<item>
					<term> https</term>
					<description>The resource is accessed
         through secure HTTP.</description>
				</item>
				<item>
					<term> mailto</term>
					<description>The resource is an e-mail
         address and accessed through SMTP.</description>
				</item>
				<item>
					<term> news</term>
					<description> 
         The resources is accessed through NNTP.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example writes the scheme 
      name (http) to the console for the URI http://www.contoso.com/
      
      .</para>
			<codelink SampleID="Classic Uri.Scheme Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Segments">
		<summary>
			<para> Gets an array of the segments that make up the specified URI.</para>
		</summary>
		<value>
			<para>An array of strings containing the segments that make up the specified URI.</para>
		</value>
	</doc>
	<doc for="Uri.UserEscaped">
		<summary>
			<para> Indicates that the URI string was escaped before the
   <see cref="System.Uri"/>
   instance was created.
   </para>
		</summary>
		<value>
			<para>
				<see langword="true "/>if the <paramref name="dontEscape "/>parameter was set to
<see langword="true "/>when the <see cref="System.Uri"/> instance was created.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Uri.UserEscaped"/> property is set to <see langword="true "/>to indicate that
   the string used to create the <see cref="System.Uri"/> instance was escaped before it was passed to the
   constructor; that is, the <paramref name="dontEscape "/>parameter of the constructor call
   was set to <see langword="true"/>.
   </para>
		</remarks>
		<example>
			<para> The following example writes the value 
      (<see langword="true"/> ) of the
   <see cref="System.Uri.UserEscaped"/> property to the console. 
   </para>
			<codelink SampleID="Classic Uri.UserEscaped Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.UserInfo">
		<summary>
			<para> Gets the user name, password, and other user-specific
      information associated with the specified URI.</para>
		</summary>
		<value>
			<para>A string containing the user information associated with the URI.</para>
		</value>
	</doc>
	<doc for="Uri.CheckSchemeName">
		<summary>
			<para> Determines whether the specified scheme name is valid.
      </para>
		</summary>
		<param name="schemeName">The scheme name to validate. </param>
		<returns>
			<para>
				<see langword="true "/>if the scheme name is valid; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para> The CheckSchemeName method checks the scheme name for validity according to RFC 2396.
      The scheme name must begin with a letter, and must contain only letters, digits,
      and the characters ".", "+", or "-".
      </para>
		</remarks>
	</doc>
	<doc for="Uri.EscapeString">
		<summary>
			<para>Converts a string to its escaped representation.</para>
		</summary>
		<param name="str">The string to transform to its escaped representation.</param>
		<returns>
			<para>The escaped representation of the string.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Uri.EscapeString"/> method converts all characters
   with an ASCII value greater than 127 to hexidecimal representation. </para>
			<para>The string is escaped according to RFC 2396.</para>
		</remarks>
	</doc>
	<doc for="Uri.FromHex">
		<summary>
			<para> Returns the decimal value of a hexadecimal digit.
      </para>
		</summary>
		<param name="digit">The hexadecimal digit (0-9, a-f, A-F) to convert. </param>
		<returns>
			<para> A number from 1 - 15 that corresponds to the specified hexadecimal
      digit.
      </para>
		</returns>
		<exception cref="System.ArgumentException">
			<paramref name="digit "/>is not a valid hexadecimal digit (0-9, a-f, A-F).</exception>
		<remarks>
			<para>The <see cref="System.Uri.FromHex"/> method converts a character representing a hexadecimal
   digit (0-9, a-f, A-F) to its decimal value (0-15). If digit is not a valid
   hexadecimal digit, <see cref="System.ArgumentException"/> is thrown.</para>
		</remarks>
	</doc>
	<doc for="Uri.GetHashCode">
		<summary>
			<para>Returns the hash code for the specified URI.</para>
		</summary>
		<returns>
			<para>The hash value generated for the URI.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Uri.GetHashCode"/> method generates the URI's hash value 
   without including any fragment identifiers. For example, the URIs http://www.contoso.com/index.htm#search
   and http://www.contoso.com/index.htm
   
   yield the same hash code.</para>
		</remarks>
	</doc>
	<doc for="Uri.HexEscape">
		<summary>
			<para> Converts a specified character into its hexadecimal equivalent.
      </para>
		</summary>
		<param name="character">The character to convert to hexadecimal representation. </param>
		<returns>
			<para> The hexadecimal representation of the specified character.
      </para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException">
			<paramref name="character"/> is greater than 255. </exception>
	</doc>
	<doc for="Uri.IsHexDigit">
		<summary>
			<para> Determines whether a specified character is a valid hexadecimal digit.
      </para>
		</summary>
		<param name="character">The character to validate. </param>
		<returns>
			<para>
				<see langword="true "/>if the character is a valid hexadecimal digit;
   otherwise <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para> Hexadecimal digits are the digits 0-9 and the letters A-F or
      a-f.
      </para>
		</remarks>
	</doc>
	<doc for="Uri.ToString">
		<summary>
			<para> Returns the display string for the specified <see cref="System.Uri"/> instance.
   </para>
		</summary>
		<returns>
			<para> The string containing the unescaped display name of the <see cref="System.Uri"/> .
   </para>
		</returns>
	</doc>
	<doc for="Uri.Port">
		<summary>
			<para>Gets the port number of the specified URI.</para>
		</summary>
		<value>
			<para>The integer port number of the specified URI.</para>
		</value>
		<remarks>
			<para>The port number defines the protocol port used for
      contacting the server referenced in the URI. If a port is not is not specified
      as part of the URI, the <see cref="System.Uri.Port"/>
      property returns the default value for the protocol.</para>
		</remarks>
		<example>
			<para>The following example writes the URI's port number to the
      console. In this
      case, the value is the default port number for HTTP, port 80.</para>
			<codelink SampleID="Classic Uri.Port Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Query">
		<summary>
			<para>Gets any query information included in the specified URI.</para>
		</summary>
		<value>
			<para>A string containing any query information included in the specified URI.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.Query"/> property
   contains any query information included in the URI. Query information is separated from the path information
   by a question mark (?) and continues to the end of the URI.
   The query information returned includes the
   leading question mark.</para>
			<para> The query information
   is escaped according
   to RFC 2396.</para>
		</remarks>
		<example>
			<para> The
      following example writes the query ?date=
      today to the console.</para>
			<codelink SampleID="Classic Uri.Query Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.GetLeftPart">
		<summary>
			<para>Returns the specified portion of a URI.</para>
		</summary>
		<param name="part">One of the <see cref="System.UriPartial"/> values that specifies the the end of the portion of the URI to return.</param>
		<returns>
			<para>A string containing the specified portion of the URI.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Uri.GetLeftPart"/> method returns a string containing the left-most portion of
   the URI, ending with the portion specified by <paramref name="part"/>. The string returned includes delimiters but
   does not include any fragments or queries or their delimiters, except in
   certain cases.</para>
			<para>
				<see cref="System.Uri.GetLeftPart"/> includes delimiters in the following cases:</para>
			<list type="bullet">
				<item>
					<term>
						<see cref="System.UriPartial.Scheme"/> has 
      the scheme delimiter added.</term>
				</item>
				<item>
					<term>
						<see cref="System.UriPartial.Authority"/> does 
      not have the path delimiter added.</term>
				</item>
				<item>
					<term>
						<see cref="System.UriPartial.Path"/>
   includes any delimiters in the original URI up to the query or
   fragment delimiter.</term>
				</item>
			</list>
			<para>The following examples show a URI and the results of
   calling <see cref="System.Uri.GetLeftPart"/> with <see cref="System.UriPartial.Scheme"/>, <see cref="System.UriPartial.Authority"/>, or
<see cref="System.UriPartial.Path"/>.</para>
			<list type="table">
				<listheader>
					<term>URI</term>
					<description>Scheme</description>
					<description>Authority</description>
					<description>Path</description>
				</listheader>
				<item>
					<term> http://www.contoso.com/index.htm#main</term>
					<description>http://</description>
					<description>http://www.contoso.com</description>
					<description>http://www.contoso.com/</description>
				</item>
				<item>
					<term> mailto:user@contoso.com?subject=uri</term>
					<description>mailto:</description>
					<description>
					</description>
					<description>mailto:user@contoso.com</description>
				</item>
				<item>
					<term> nntp://news.contoso.com/123456@contoso.com</term>
					<description>nntp://</description>
					<description>nntp://news.contoso.com</description>
					<description>nntp://news.contoso.com/123456@contoso.com</description>
				</item>
				<item>
					<term> news:123456@contoso.com</term>
					<description>news:</description>
					<description>
					</description>
					<description>news:123456@contoso.com</description>
				</item>
				<item>
					<term> file://server/filename.ext</term>
					<description>file://</description>
					<description>file://server</description>
					<description>file://server/filename.ext</description>
				</item>
				<item>
					<term> file:/filename.ext</term>
					<description>file:</description>
					<description>
					</description>
					<description>file:/filename.ext</description>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="Uri.ISerializable.GetObjectData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="Uri.IsLoopback">
		<summary>
			<para>Gets a value indicating whether the specified <see cref="System.Uri"/> references the local host.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the <see cref="System.Uri"/> references the local host; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para><see langword="IsLoopback"/> returns <see langword="true"/> if the specified 
<see langword="Uri"/> address is either 127.0.0.1, loopback, or localhost. All 
   other addresses return <see langword="false"/>.</para>
		</remarks>
	</doc>
	<doc for="Uri.Authority">
		<summary>
			<para>Gets the Domain Name System (DNS) host name or IP address and the port number for a server.</para>
		</summary>
		<value>
			<para>A string containing the server DNS host name or IP address and the service port number.</para>
		</value>
		<remarks>
			<para>The Authority property returns the fully qualified DNS host name or IP address of
      the server specified in the URI, along with the port number for nondefault
      ports.</para>
		</remarks>
		<example>
			<para>The following example writes the host name (www.contoso.com
      ) and port number (8080)
      of the server to the
      console.</para>
			<codelink SampleID="Classic Uri.Authority Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Host">
		<summary>
			<para>Gets the Domain Name System (DNS) host name, or IP address of the server specified in the URI.</para>
		</summary>
		<value>
			<para>A string containing the DNS host name or IP address of the server.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Uri.Host"/> property gets the fully qualified DNS host name or IP address of the server specified in the URI.</para>
		</remarks>
		<example>
			<para>The following example writes the host name (www.contoso.com ) of
      the server to the console.</para>
			<codelink SampleID="Classic Uri.Host Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.IsHexEncoding">
		<summary>
			<para> Determines whether a string is hexadecimal
      encoded.
      </para>
		</summary>
		<param name="pattern">The string to check. </param>
		<param name=" index">The location in <paramref name="pattern "/>to check for hexadecimal encoding. </param>
		<returns>
			<para><see langword="true "/>if <paramref name="pattern "/>is hexadecimal encoded at the specified
   location; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>The <see cref="System.Uri.IsHexEncoding"/> method checks for hexadecimal encoding that follows the
   pattern
   "%hexhex" in a string, where "hex" is a digit
   from 0-9 or or a letter from A-F (case-insensitive).</para>
		</remarks>
	</doc>
	<doc for="Uri.Uri">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Uri"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Uri"/>
class with the specified
URI.</para>
		</summary>
		<param name="uriString">A URI.</param>
		<exception cref="System.ArgumentNullException"><paramref name="uriString"/> is <see langword="null"/>.</exception>
		<exception cref="System.UriFormatException"><para>
				<paramref name="uriString"/> is empty.</para>
			<para>-or-</para>
			<para>The scheme specified in <paramref name="uriString "/>is invalid.</para>
			<para>-or-</para>
			<para>
				<paramref name="uriString "/>contains too many slashes.</para>
			<para>-or-</para>
			<para>The password specified in <paramref name="uriString "/>is invalid.</para>
			<para>-or-</para>
			<para>The host name specified in <paramref name="uriString "/>is invalid.</para>
			<para>-or-</para>
			<para>The file name specified in <paramref name="uriString "/>is invalid.</para></exception>
		<remarks>
			<para>This constructor creates a <see cref="System.Uri"/> instance from a URI string. It parses the URI, puts it in canonical format,
   and makes any required escape encodings.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Uri"/> instance with the URI "http://www.contoso.com/".</para>
			<codelink SampleID="Classic Uri.Uri Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Uri3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Uri"/> class based
   on the specified
   base and relative URIs.</para>
		</summary>
		<param name="baseUri">The base URI.</param>
		<param name=" relativeUri">The relative URI to add to the base URI.</param>
		<exception cref="System.ArgumentNullException"><paramref name="uriString"/> is <see langword="null"/>.</exception>
		<exception cref="System.UriFormatException"><para>The URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/> is empty.</para>
			<para>-or-</para>
			<para>The scheme specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para>
			<para>-or-</para>
			<para> The URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>contains too many slashes.</para>
			<para>-or-</para>
			<para>The password specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para>
			<para>-or-</para>
			<para>The host name specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para>
			<para>-or-</para>
			<para>The file name specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para></exception>
		<remarks>
			<para>This constructor creates a <see cref="System.Uri"/>
instance by combining the <paramref name="baseUri "/>and the
<paramref name="relativeUri"/> 
. If <paramref name="relativeUri "/>is an absolute URI (containing a scheme, hostname, and optionally
a port number) the <see cref="System.Uri"/> instance is created using only <paramref name="relativeUri"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of the
   <see cref="System.Uri"/> class by combining the
      relative URIs http://www.contoso.com and
      catalog/showew.htm to form the absolute URI http://www.contoso.com/catalog/shownew.htm
      
      .</para>
			<codelink SampleID="Classic Uri.Uri3 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Uri4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Uri"/> class based on the specified base and releative URIs, with
   control of character escaping.</para>
		</summary>
		<param name="baseUri">The base URI.</param>
		<param name="relativeUri">The relative URI to add to the base URI.</param>
		<param name=" dontEscape"><see langword="true"/> if the URI contains escape characters; otherwise, <see langword="false"/>.</param>
		<exception cref="System.ArgumentNullException"><paramref name="uriString"/> is <see langword="null"/>.</exception>
		<exception cref="System.UriFormatException"><para>The URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/> is empty.</para>
			<para>-or-</para>
			<para>The scheme specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para>
			<para>-or-</para>
			<para> Ehe URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>contains too many slashes.</para>
			<para>-or-</para>
			<para>The password specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para>
			<para>-or-</para>
			<para>The host name specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para>
			<para>-or-</para>
			<para>The file name specified in the URI formed by combining <paramref name="baseUri "/>and <paramref name="relativeUri "/>is invalid.</para></exception>
		<remarks>
			<para>This constructor creates a <see cref="System.Uri"/> instance by combining <paramref name="baseUri "/>and <paramref name="relativeUri"/> . If the URI passed in <paramref name="relativeUri "/>is an absolute URI (containing a scheme, hostname, and optionally a port number) the <see cref="System.Uri"/> instance is created using only <paramref name="relativeUri"/>. The caller must set <paramref name="dontEscape "/>to
<see langword="true "/> if the URI is already escaped.</para>
		</remarks>
		<example>
			<para>The following example creates a new instance of the
   <see cref="System.Uri"/> class by combining the
      relative URIs http://www.contoso.com and
      Hello%20World.htm to form an absolute URI. Because the URI contains escaped
      characters, the third parameter, <paramref name="dontEscape"/>
      , is set to <see langword="true"/>.
      </para>
			<codelink SampleID="Classic Uri.Uri4 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.HexUnescape">
		<summary>
			<para> Converts a specified hexadecimal representation of a character to the character.
      </para>
		</summary>
		<param name="pattern">The hexadecimal representation of a character. </param>
		<param name=" index">The location in <paramref name="pattern"/> where the hexadecimal representation of a character begins. </param>
		<returns>
			<para> The character represented by the hexadecimal encoding at position
   <paramref name="index"/>. If the character at <paramref name="index "/>is not hexadecimal encoded,
      the character at <paramref name="index "/>is returned. The value of <paramref name="index "/>
      is incremented to point to the character following the one returned.
      </para>
		</returns>
		<exception cref="ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to the number of characters in <paramref name="pattern"/>.</exception>
	</doc>
	<doc for="Uri.MakeRelative">
		<summary>
			<para>Determines the difference between two <see cref="System.Uri"/> instances.</para>
		</summary>
		<param name="toUri">The URI to compare to the current URI.</param>
		<returns>
			<para> If the two URIs are the same except for the path information, then that difference; if the two
      have additional differences, the URI of <paramref name="toUri"/>.</para>
		</returns>
	</doc>
	<doc for="Uri.IsUnc">
		<summary>
			<para>Gets a value indicating whether the specified <see cref="System.Uri"/> is a universal naming convention (UNC) path.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the <see cref="System.Uri"/> is a UNC path; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Uri.IsUnc"/> property is <see langword="true "/>if the specified <see cref="System.Uri"/> instance is a UNC path (such as \\server\folder
   ).</para>
		</remarks>
	</doc>
	<doc for="Uri.CheckHostName">
		<summary>
			<para> Determines whether the specified host name is valid.
      </para>
		</summary>
		<param name="name">The host name to validate. </param>
		<returns>
			<para>A <see cref="System.UriHostNameType"/> that indicates the type of the host name. If the type of
   the host name cannot be determined, or the host name is <see langword="null "/>or
   a zero-length string, returns <see cref="System.UriHostNameType.Unknown"/>.
   </para>
		</returns>
		<remarks>
			<para> The <see cref="System.Uri.CheckHostName"/>
method checks that the host name provided
meets the requirements for a valid Internet host name. It does not, however,
perform a host-name lookup to verify the existence of the host.</para>
		</remarks>
		<example>
			<para> The following example checks the host name is checked for validity.
      </para>
			<codelink SampleID="Classic Uri.CheckHostName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.UriSchemeMailto">
		<summary>
			<para>Specifies that the URI is an email address and is accessed through the Simple Mail Transport Protocol
      (SMTP). This field is read-only.</para>
		</summary>
	</doc>
	<doc for="Uri.Uri1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Uri"/> class with the specified URI, with control of character
   escaping.</para>
		</summary>
		<param name="uriString">The URI.</param>
		<param name=" dontEscape"><see langword="true"/> if the URI contains escape characters; otherwise, <see langword="false"/>.</param>
		<exception cref="System.ArgumentNullException"><para>
				<paramref name="uriString "/>is <see langword="null"/> .</para></exception>
		<exception cref="System.UriFormatException"><para>uriString is empty or contains only spaces.</para>
			<para>-or-</para>
			<para>The scheme specified in <paramref name="uriString "/>is invalid.</para>
			<para>-or-</para>
			<para>
				<paramref name="uriString"/> contains too many slashes.</para>
			<para>-or-</para>
			<para>The password specified in <paramref name="uriString "/>is invalid.</para>
			<para>-or-</para>
			<para>The host name specified in <paramref name="uriString "/>is invalid.</para>
			<para>-or-</para>
			<para>The file name specified in <paramref name="uriString "/>is invalid.</para></exception>
		<remarks>
			<para>This constructor creates a <see cref="System.Uri"/> instance from a URI string. It parses the URI, and puts it in
   canonical format. The caller must set <paramref name="dontEscape "/>to <see langword="true "/>if the URI is already escaped, or false if the constructor should
   transform the URI to its escaped encoding.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Uri"/> instance for the URI
   http://www.contoso.com/Hello%20World.htm. Because the URI contains escaped
   characters, the third parameter, <paramref name="dontEscape"/> , is set to
<see langword="true"/> .</para>
			<codelink SampleID="Classic Uri.Uri1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Uri.Equals">
		<summary>
			<para>Compares two <see cref="System.Uri"/> instances for equality.</para>
		</summary>
		<param name="comparand">The <see cref="System.Uri"/> or a URI identifier to compare with the current instance.</param>
		<returns>
			<para><see langword="true "/>if the two
   instances represent
   the same URI; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Uri.Equals"/> method compares the two instances without regard to any
   fragments that they might contain. For instance, given the URIs http://www.contoso.com/index.htm#search
   and http://www.contoso.com/index.htm
   the <see cref="System.Uri.Equals"/>
   method would return <see langword="true"/>
   
   .</para>
		</remarks>
	</doc>
	<doc for="Uri">
		<summary>
			<para>Provides
      an object representation of a uniform resource identifier (URI) and easy
      access to the parts of the URI.</para>
		</summary>
		<remarks>
			<para> A
      URI is a compact representation of a resource available to your
      application on the Internet. The <see cref="System.Uri"/> class defines the properties and methods for handling
      URIs, including parsing, comparing, and combining. The <see cref="System.Uri"/> class properties are
      read-only, to modify a <see cref="System.Uri"/> instance use the <see cref="System.UriBuilder"/>
      class.</para>
			<para>The <see cref="System.Uri"/> class stores only
   absolute URIs (for example, "http://www.contoso.com/index.htm"). Relative URIs (for example, "/new/index.htm") must be expanded with respect to
   a base URI so that they are absolute. The <see cref="System.Uri.MakeRelative"/> method
   is provided to convert absolute URIs to relative URIs when necessary.</para>
			<para>The <see cref="System.Uri"/>
constructors will not escape URI strings if the string is a
well-formed URI including a scheme identifier that contains escape
sequences. The constructors will escape relative URI strings that contain a
percent sign (%).</para>
			<para>URIs are stored as canonical URIs in escaped
   encoding, with all characters with ASCII values greater than 127 replaced with
   their hexidecimal equivalents. To put the URI in canonical form, the <see cref="System.Uri"/>
   
   constructor performs the following steps.</para>
			<list type="bullet"><item>
					<term>
      
      Converts the URI scheme to lower case.</term>
				</item>
				<item>
					<term>
      
      Converts the host name to lower case.</term>
				</item>
				<item>
					<term>
      
      Removes default and empty port numbers.</term>
				</item>
				<item>
					<term>
      
      Simplifies the URI by removing superfluous segments such as "/" and
      "/test" segments.</term>
				</item>
			</list>
			<para>You can transform the contents of the <see cref="System.Uri"/> class from an escape encoded URI
reference to a readable URI reference using the <see cref="System.Uri.ToString"/> method.</para>
			<para> Some URIs include a fragment identifier or
   query. A fragment identifier is any text that follows a number sign (#) in the
   URI and is stored in the <see cref="System.Uri.Fragment"/> property. Query information is any text that follows a question
   mark (?) in the URI, and is stored in the <see cref="System.Uri.Query"/> property.</para>
			<note type="note">
   The URI class supports the use of IP
   addresses in both quad-notation for IPv4 protocol and colon-hexadecimal for IPv6
   protocol. Remember to enclose the IPv6 address in square brackets, as in http://[::1].
</note>
		</remarks>
		<example>
			<para>The following example creates an instance of the <see cref="System.Uri"/> class and uses it to create a
<see cref="System.Net.WebRequest"/>.</para>
			<codelink SampleID="Classic Uri Example" SnippetID="1"/>
		</example>
		<seealso cref="System.UriBuilder"/>
	</doc>
</docs>
