<docs>
	<doc for="Match.Debug">
		<summary>
		</summary>
	</doc>
	<doc for="Match.Dump">
		<summary>
		</summary>
	</doc>
	<doc for="Match.Synchronized">
		<summary>
			<para> Returns a <see langword="Match "/> instance equivalent to the one supplied that is safe to share
   between multiple threads.
   </para>
		</summary>
		<param name="inner">A <see langword="Match"/> instance equivalent to the one expected. </param>
		<returns>
			<para> A <see langword="Match "/> instance equivalent to the one supplied that is safe to share
   between multiple threads.
   </para>
		</returns>
	</doc><doc for="Match">
		<summary>
			<para> Represents
      the results from a single regular expression match.
      </para>
		</summary>
		<remarks>
			<para> Because a single match can involve multiple capturing
      groups, <see langword="Match "/>has a <see langword="Groups"/> property that returns the
   <see langword="GroupCollection"/>. The <see langword="GroupCollection"/> has
      accessors that return each group. <see langword="Match "/> inherits from
   <see langword="Group "/> so the entire substring matched can be accessed
      directly. That is, the <see langword="Match "/>instance itself is equivalent to
   <see langword="Match.Groups[0] "/>( <see langword="Match.Groups(0) "/>in Visual Basic)<see langword=". "/>The <see langword="Match "/>
   
   object is immutable and has no public constructor.
   </para>
		</remarks>
	</doc><doc for="Match.Result">
		<summary>
			<para> Returns the expansion of the passed replacement pattern.
 For example, if the replacement pattern is $1$2, <see langword="Result "/>returns the concatenation of
 <see langword="Groups[1].Value and Groups[2].Value"/>
 (<see langword="Groups(1).Value and Groups(2).Value "/>in Visual
 Basic).
 </para>
		</summary>
		<param name="replacement">The replacement pattern to be used by the function. </param>
		<returns>
			<para> The expanded version of <paramref name="replacement"/> .
 </para>
		</returns>
	</doc><doc for="Match.Empty">
		<summary>
			<para> Gets the empty group. All failed matches
      return this empty match.
      </para>
		</summary>
		<value>
			<para>An empty <see cref="System.Text.RegularExpressions.Match"/>.</para>
		</value>
		<remarks>
			<para>This property should not be used to determine if a match
      is successful. Use <see cref="System.Text.RegularExpressions.Group.Success"/> instead.</para>
		</remarks>
	</doc><doc for="Match.Groups">
		<summary>
			<para>Gets a collection of groups matched by the regular expression.</para>
		</summary>
		<value>
			<para>The character groups matched by the pattern.</para>
		</value>
		<example>
			<codelink SampleID="Regex Match, NextMatch, Groups, Captures" SnippetID="8"/>
		</example>
	</doc>
	<doc for="Match.NextMatch">
		<summary>
			<para>Returns a new <see langword="Match "/> with the results for the next match, starting
   at the position at which the last match ended (at the character beyond the last
   matched character).</para>
		</summary>
		<returns>
			<para>The next regular expression <see langword="Match "/> object.</para>
		</returns>
		<remarks>
			<para>This function is similar to calling <see langword="Match "/>again and passing (Index+Length) as the new starting position, but it
   differs from calling <see langword="Match "/>
   directly because it handles zero-length match cases in a way that
   guarantees progress to the end of the string.</para>
		</remarks>
		<example>
			<codelink SampleID="Regex Match, NextMatch, Groups, Captures" SnippetID="8"/>
		</example>
	</doc>
</docs>
