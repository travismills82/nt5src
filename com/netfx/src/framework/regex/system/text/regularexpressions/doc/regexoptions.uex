<docs>
	<doc for="RegexOptions.None">
		<summary>
			<para>Specifies that no options are set.</para>
		</summary>
	</doc><doc for="RegexOptions.#if DBG"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RegexOptions.#endif"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RegexOptions.#if ECMA"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RegexOptions.Debug"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RegexOptions.RightToLeft">
		<summary>
			<para>Specifies that the search will be from right to left
      instead of from left to right.</para>
		</summary>
	</doc><doc for="RegexOptions.IgnorePatternWhitespace">
		<summary>
			<para>Eliminates unescaped white space from the pattern and enables comments
      marked with #.</para>
		</summary>
	</doc><doc for="RegexOptions">
		<summary>
			<para> Provides enumerated values to use to
      set regular expression options.</para>
		</summary>
	</doc><doc for="RegexOptions.Compiled">
		<summary>
			<para> Specifies that the regular expression is
      compiled to an assembly. This yields faster execution but increases startup time.</para>
		</summary>
	</doc><doc for="RegexOptions.IgnoreCase">
		<summary>
			<para> Specifies case-insensitive matching.</para>
		</summary>
	</doc><doc for="RegexOptions.Multiline">
		<summary>
			<para> Multiline mode. Changes the meaning of ^ and $ so
      they match at the beginning and end, respectively, of any line, and not just
      the beginning and end of the entire string.</para>
		</summary>
	</doc><doc for="RegexOptions.Singleline">
		<summary>
			<para> Specifies single-line mode. Changes the meaning of the
      dot (.) so it matches every character (instead of every character except \n).</para>
		</summary>
	</doc><doc for="RegexOptions.ExplicitCapture">
		<summary>
			<para> Specifies that the only valid captures are
      explicitly named or numbered groups of the form (?&lt;name&gt;…). This allows unnamed parentheses
      to act as noncapturing groups without the syntactic clumsiness of the expression (?:…).</para>
		</summary>
	</doc><doc for="RegexOptions.ECMAScript">
		<summary>
			<para>
 Enables ECMAScript-compliant behavior for the expression.
					This flag can be 
 used only in conjunction with the <see cref="System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>, <see cref="System.Text.RegularExpressions.RegexOptions.Multiline"/>, and <see cref="System.Text.RegularExpressions.RegexOptions.Compiled"/> flags.
					The use of this flag with any other flags results in an
exception.
			</para>
		</summary>
	</doc><doc for="RegexOptions.CultureInvariant">
		<summary>
			<para>Specifies that cultural differences in language is 
      ignored. See <see topic="cpconPerformingCulture-InsensitiveOperationsInRegularExpressionsNamespace"/> for more information.</para>
		</summary>
	</doc>
</docs>
