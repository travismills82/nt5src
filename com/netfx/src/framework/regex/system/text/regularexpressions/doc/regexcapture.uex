<docs>
	<doc for="Capture.Length">
		<summary>
			<para> The length of the captured substring.
      </para>
		</summary>
		<value>
			<para> The length of the captured substring.
      </para>
		</value>
	</doc><doc for="Capture.Index">
		<summary>
			<para> The position in the original string where the first character of the
      captured substring was found.</para>
		</summary>
		<value>
			<para>The zero-based starting position in the original string where the captured substring was
      found.</para>
		</value>
	</doc><doc for="Capture.Value">
		<summary>
			<para>Gets the captured substring from the input string.</para>
		</summary>
		<value>
			<para>The actual substring that was captured by the match.</para>
		</value>
	</doc><doc for="Capture.ToString">
		<summary>
			<para> Gets the captured
      substring from the input string.
      </para>
		</summary>
		<returns>
			<para> The actual substring that was captured by the match.
      </para>
		</returns>
		<remarks>
			<para><see langword="ToString "/>is actually an internal call to <see cref="System.Text.RegularExpressions.Capture.Value"/>.</para>
		</remarks>
	</doc><doc for="Capture">
		<summary>
			<para> Represents the results from a single subexpression
      capture. <see langword="Capture "/> represents
      one substring for a single successful capture.</para>
		</summary>
		<remarks>
			<para>The object is immutable and has no public
      constructor. Instances are returned through the collection returned by <see cref="System.Text.RegularExpressions.Group.Captures"/>. The <see cref="System.Text.RegularExpressions.Match"/> and <see cref="System.Text.RegularExpressions.Group"/>classes extend <see langword="Capture "/>
      
      .</para>
		</remarks>
		<example>
			<codelink SampleID="Regex2" SnippetID="1"/>
		</example>
	</doc>
</docs>
