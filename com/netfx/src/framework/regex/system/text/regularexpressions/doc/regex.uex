<docs>
	<doc for="Regex.UseOptionC">
		<summary>
		</summary>
	</doc>
	<doc for="Regex.UseOptionR">
		<summary>
		</summary>
	</doc>
	<doc for="Regex.Debug">
		<summary>
		</summary>
	</doc>
	<doc for="Regex.UseOptionDebug">
		<summary>
		</summary>
	</doc>
	<doc for="Regex.Dump">
		<summary>
		</summary>
	</doc>
	<doc for="Regex.Dump1">
		<summary>
		</summary>
	</doc>
	<doc for="Regex.pattern">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.factory"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.roptions"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.caps"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.capnames"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.capslist"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.capsize"><nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex.ToString">
		<summary>
			<para> Returns the regular expression pattern that was passed 
      into the <see langword="Regex "/> constructor.
      </para>
		</summary>
		<returns>
			<para> The <paramref name="pattern "/>parameter that was passed into the
<see langword="Regex "/> constructor.
   </para>
		</returns>
	</doc><doc for="Regex.Finalize">
		<summary>
			<para>Forces a <see langword="Regex "/>object to free resources 
   before the object is destroyed by the Garbage Collector.</para>
		</summary>
	</doc><doc for="Regex.Regex2">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Text.RegularExpressions.Regex"/> class. </para>
		</overload>
		<summary>
			<para> Initializes a new instance of the <see cref="System.Text.RegularExpressions.Regex"/> class with
   no parameters.</para>
		</summary>
	</doc><doc for="Regex.RightToLeft">
		<summary>
			<para> Gets a value indicating whether the regular expression searches from right to
      left.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the regular expression searches
   from right to left; otherwise <see langword="false"/> .
   </para>
		</value>
		<remarks>
			<para><see langword="RightToLeft "/>is 
<see langword="true"/> if the <see langword="Regex "/>instance was constructed with
   the <see cref="System.Text.RegularExpressions.RegexOptions.RightToLeft"/>
   option.
   </para>
		</remarks>
	</doc><doc for="Regex.Options">
		<summary>
			<para> Returns the options passed into the <see cref="System.Text.RegularExpressions.Regex"/> constructor.</para>
		</summary>
		<value>
			<para> The <paramref name="options "/>parameter that was passed into the
<see langword="Regex "/> constructor.
   </para>
		</value>
	</doc><doc for="Regex.GetGroupNames">
		<summary>
			<para>Returns an array of capturing group names for the regular
      expression.</para>
		</summary>
		<returns>
			<para> A string array of group names.
      </para>
		</returns>
		<remarks>
			<para> The collection of group names contains the
      set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are
      automatically assigned numerical names (1, 2, 3, and so on). Therefore, this collection can be used to
      determine the number of groups.
      </para>
		</remarks>
	</doc><doc for="Regex.GetGroupNumbers">
		<summary>
			<para> Returns an array of capturing group
      numbers that correspond to group names in an array.</para>
		</summary>
		<returns>
			<para> An integer array of group numbers.
      </para>
		</returns>
		<remarks>
			<para> Referencing a group by its number instead of by
      string name can provide faster access.
      </para>
		</remarks>
	</doc><doc for="Regex.GroupNameFromNumber">
		<summary>
			<para> Gets the group name that corresponds to the specified group number.
      </para>
		</summary>
		<param name="i"> The group number to convert to the corresponding group name. </param>
		<returns>
			<para> The string containing the group name associated with the specified group number.
      </para>
		</returns>
	</doc><doc for="Regex.GroupNumberFromName">
		<summary>
			<para>Returns the group number that corresponds to the specified group name.</para>
		</summary>
		<param name="name"> The group name to convert to the corresponding group number.</param>
		<returns>
			<para> The group number that corresponds to the specified group name.</para>
		</returns>
	</doc><doc for="Regex.InitializeReferences">
		<nodoc/>
		<exception cref="NotSupportedException">References have already been initialized.</exception>
	</doc><doc for="Regex.IsMatch2">
		<summary>
			<para> Indicates whether the regular expression specified in 
      the <see cref="System.Text.RegularExpressions.Regex"/> constructor finds a match in the input string.</para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<returns>
			<para><see langword="true "/>if the regular expression 
   finds a match; otherwise, <see langword="false "/> .</para>
		</returns>
	</doc><doc for="Regex.IsMatch3">
		<summary>
			<para> Indicates whether the regular expression specified 
      in the <see cref="System.Text.RegularExpressions.Regex"/> constructor finds a match in the input string
      beginning at the specified starting position in the string.</para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="startat">The character position at which to start the search.</param>
		<returns>
			<para><see langword="true "/>if the 
   regular expression finds a match; otherwise,
<see langword="false "/> .</para>
		</returns>
	</doc><doc for="Regex.IsMatch">
		<overload>
			<para> Indicates whether the regular expression finds a match in the
      input string.</para>
		</overload>
		<summary>
			<para>Indicates whether the regular expression finds a match 
      in the input string using the regular expression specified in the
   <paramref name="pattern"/> parameter.
      </para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<returns>
			<para><see langword="true "/>if the regular 
   expression finds
   a match; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>The two static <see langword="IsMatch"/> methods are 
   equivalent to constructing a <see cref="System.Text.RegularExpressions.Regex"/>
   object with the specified regular expression
   pattern and calling the instance method <see langword="IsMatch"/>. The
   static methods are provided to allow an isolated, single use of a regular
   expression without explicitly creating a <see langword="Regex"/>
   
   object.</para>
		</remarks>
	</doc><doc for="Regex.IsMatch1">
		<summary>
			<para> Indicates whether the regular expression finds a match 
      in the input string, using the regular expression specified in the
   <paramref name="pattern"/> parameter and the matching options supplied in the 
   <paramref name="options"/>
   parameter.</para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<param name="options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values.</param>
		<returns>
			<para><see langword="true "/>if the regular expression 
   finds a match; otherwise, <see langword="false "/> .</para>
		</returns>
		<remarks>
			<para>The two static <see langword="IsMatch"/> methods are equivalent to 
   constructing a <see cref="System.Text.RegularExpressions.Regex"/>
   object with the specified regular expression pattern and calling the instance
   method <see langword="IsMatch"/> . The
   static methods are provided to allow an isolated, single use of a regular
   expression without explicitly creating a <see langword="Regex"/> object. </para>
		</remarks>
	</doc><doc for="Regex.Match">
		<overload>
			<para>Searches an input
      string for an occurrence
      of a regular expression and returns the precise result as a single <see cref="System.Text.RegularExpressions.Match"/>
      object.</para>
		</overload>
		<summary>
			<para> Searches the specified input string for an occurrence of
      the regular expression supplied in the <paramref name="pattern "/>
      parameter.
      </para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<returns>
			<para>A regular expression <see cref="System.Text.RegularExpressions.Match"/> object.</para>
		</returns>
		<remarks>
			<para>The static <see langword="Match"/> methods are equivalent 
   to constructing a <see cref="System.Text.RegularExpressions.Regex"/> object with the specified
   regular expression pattern and calling the instance method
<see langword="Match"/> . The static methods are provided to allow an isolated, 
   single use of a regular expression without explicitly creating a
<see langword="Regex"/> 
object. </para>
		</remarks>
	</doc><doc for="Regex.Match4">
		<summary>
			<para> Searches the input string for an occurrence
      of a regular expression with a specified input string starting position and input
      string length.</para>
		</summary>
		<param name="input">The string to be tested for a match. </param>
		<param name="beginning">The character position in the input string at which to begin the search.</param>
		<param name="length">The number of characters in the substring to include in the search.</param>
		<returns>
			<para>A regular expression <see cref="System.Text.RegularExpressions.Match"/> object.</para>
		</returns>
	</doc><doc for="Regex.Replace1">
		<summary>
			<para>Replaces all occurrences of a pattern defined by a specified regular expression
      with a specified replacement character string, starting at the first
      character in the input string. Options can be specified to modify matching
      behavior.</para>
		</summary>
		<param name="input">The string to modify.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<param name="replacement">The replacement string.</param>
		<param name=" options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values. </param>
		<returns>
			<para> The modified string.
      </para>
		</returns>
		<remarks>
			<para>The static <see langword="Replace"/> methods are equivalent to 
   constructing a <see cref="System.Text.RegularExpressions.Regex"/> object with the specified
   regular expression pattern and calling the instance method
<see langword="Replace"/>. The static methods are provided to allow an isolated, 
   single use of a regular expression without explicitly creating a
<see langword="Regex"/> object. </para>
		</remarks>
	</doc><doc for="Regex.Replace2">
		<summary>
			<para> Replaces all occurrences of
      a specified regular expression pattern with a replacement
      string, starting at the first character in the input string.
      </para>
		</summary>
		<param name="input">The string to modify. </param>
		<param name=" replacement">The replacement string. </param>
		<returns>
			<para> The modified character string.
      </para>
		</returns>
	</doc><doc for="Regex.Replace3">
		<summary>
			<para> Replaces up to a specified number of occurrences of a 
      pattern defined by the regular expression specified in the <see cref="System.Text.RegularExpressions.Regex"/>
      constructor with a specified replacement string,
      starting at the first character in the input string.</para>
		</summary>
		<param name="input">String to modify. </param>
		<param name=" replacement">The replacement string. </param>
		<param name=" count">The maximum number of times the replacement can occur. </param>
		<returns>
			<para> The modified character string.
      </para>
		</returns>
		<remarks>
			<para>If <paramref name="count"/> is negative, replacements continue to the end of the string.</para>
		</remarks>
	</doc><doc for="Regex.Replace">
		<overload>
			<para>Replaces all occurrences of a character pattern defined
      by a regular expression with a specified replacement character string.</para>
		</overload>
		<summary>
			<para> Replaces all occurrences of matches defined by the regular
      expression with a replacement string, starting at
      the first character in the input string.
      </para>
		</summary>
		<param name="input">The string to modify.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<param name="replacement">The replacement string.</param>
		<returns>
			<para>The modified character string.</para>
		</returns>
		<remarks>
			<para> Substitutions are allowed only within a replacement pattern. For similar
      functionality within a regular expression, use a <paramref name="backreference"/> such as \1.
      </para>
			<para> Character escapes and substitutions are the only special 
      constructs recognized in a replacement pattern. All other syntactic constructs
      are allowed in regular expressions only and not recognized in replacement
      patterns. For example, the replacement pattern a*${test}b inserts the string
      "a*"
      followed by the substring matched by the "test" capturing group, if any, followed by
      the string "b". The * character is not recognized as
      a metacharacter within a replacement pattern. Similarly, $-patterns are not recognized within a
      regular expression matching pattern. Within a regular expression, $ denotes the end of the
      string. Other examples are: $123 substitutes the last substring matched
      by group number 123 (decimal), and ${name) substitutes the last
      substring matched by a (?&lt;name&gt;) group.
      </para>
			<para>The static <see langword="Replace"/> methods are equivalent to
   constructing a <see cref="System.Text.RegularExpressions.Regex"/> object with the specified
   regular expression pattern and calling the instance method
<see langword="Replace"/>. The static methods are provided to allow an isolated, 
   single use of a regular expression without explicitly creating a
<see langword="Regex"/> object. </para>
		</remarks>
	</doc><doc for="Regex.CompileToAssembly">
		<overload>
			<para>Compiles regular expressions and saves them to disk in a single
      assembly.</para>
		</overload>
		<summary>
			<para>Compiles one or more specified
   <see langword="Regex"/> objects to a named file.</para>
		</summary>
		<param name=" regexinfos">An array of <see cref="System.Text.RegularExpressions.RegexCompilationInfo"/> objects describing the regular expressions to compile.</param>
		<param name="assemblyname">The file name of the assembly.</param>
		<exception cref="ArgumentNullException"><paramref name="assemblyname "/>or <paramref name="regexinfos "/>is <see langword="null"/>.</exception>
	</doc><doc for="Regex.CompileToAssembly1">
		<summary>
			<para>Compiles one or more specified <see langword="Regex"/> objects to a named file with specified
   attributes.</para>
		</summary>
		<param name=" regexinfos">An array of <see cref="System.Text.RegularExpressions.RegexCompilationInfo"/> objects describing the regular expressions to compile.</param>
		<param name=" assemblyname">The file name of the assembly.</param>
		<param name=" attributes">An array of <see cref="System.Reflection.Emit.CustomAttributeBuilder"/> objects describing the attributes of the assembly.</param>
		<exception cref="ArgumentNullException"><paramref name="assemblyname "/>or <paramref name="regexinfos "/>is <see langword="null"/>.</exception>
	</doc><doc for="Regex.CompileToAssembly2">
		<summary>
			<para>Compiles one or more specified
   <see langword="Regex"/> objects
      and a specified resource file to a named assembly with specified attributes.</para>
		</summary>
		<param name=" regexinfos">An array of <see cref="System.Text.RegularExpressions.RegexCompilationInfo"/> objects describing the regular expressions to compile.</param>
		<param name=" assemblyname">The file name of the assembly.</param>
		<param name=" attributes">An array of <see cref="System.Reflection.Emit.CustomAttributeBuilder"/>objects describing the attributes of the assembly.</param>
		<param name="resourceFile">The name of the Win32 resource file to include in the assembly.</param>
		<exception cref="ArgumentNullException"><paramref name="assemblyname "/>or <paramref name="regexinfos "/>is <see langword="null"/>.</exception>
	</doc><doc for="Regex.Regex">
		<overload>
			<para> Initializes a new instance of the <see cref="System.Text.RegularExpressions.Regex"/> class.
   </para>
		</overload>
		<summary>
			<para> Initializes and compiles an instance of the <see cref="System.Text.RegularExpressions.Regex"/> class for the specified regular
   expression.
   </para>
		</summary>
		<param name="pattern">The regular expression pattern to match. </param>
		<exception cref="ArgumentException">Regular expression parsing error </exception>
		<remarks>
			<para>A Regex object is immutable, which means that it can be used only for the match parameters
      defined when it is created. It can be used any number of times without
      being recompiled, however. </para>
		</remarks>
	</doc><doc for="Regex.Regex1">
		<summary>
			<para> Initializes and compiles an instance of the <see cref="System.Text.RegularExpressions.Regex"/> class for the
   specified regular expression,
   with options that modify the pattern.
   </para>
		</summary>
		<param name="pattern">The regular expression pattern to match. </param>
		<param name="options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values. </param>
		<exception cref="ArgumentException">Regular expression parsing error. </exception>
		<remarks>
			<para> A <see langword="Regex "/>object is
   immutable, which means that it can be used only for the match
   parameters defined when it is created. It can be used any number of times
   without being recompiled, however.</para>
		</remarks>
	</doc><doc for="Regex.Escape">
		<summary>
			<para> Escapes a minimal set of metacharacters (\, *, +, ?, |,
      {, [, (, ), ^, $, ., #, and white space) by replacing them with their escape codes.</para>
		</summary>
		<param name="str">The input string containing the text to convert. </param>
		<returns>
			<para> A string of characters with any metacharacters converted to their
      escaped form.
      </para>
		</returns>
		<remarks>
			<para><see langword="Escape "/> 
converts a string so it can be used safely as a constant within a regular
expression. (The number sign (#) and white-space characters must be escaped so the string can be
used safely within an expression parsed with the <see cref="System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace"/>

option enabled. If
future .NET regular expression features add additional metacharacters, <see langword="Escape "/>converts those characters to
escaped form as well.) </para>
		</remarks>
	</doc><doc for="Regex.Match1">
		<summary>
			<para> Searches the input string for an occurrence
      of the regular expression supplied in a <paramref name="pattern "/>parameter with matching options supplied in an <paramref name="options
      "/>
      
      parameter.
      </para>
		</summary>
		<param name="input">The string to be tested for a match.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<param name="options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values. </param>
		<returns>
			<para>A regular expression <see cref="System.Text.RegularExpressions.Match"/> object.</para>
		</returns>
		<remarks>
			<para> If you want to restrict a match so it does not scan, anchor
      the regular expression with a \G (at the left for a left-to-right pattern, or
      at the right for a right-to-left pattern). This restricts the match so it must
      start exactly at <paramref name="startpos"/>. </para>
			<para>When a Regex is left-to-right (the default), the match and the scan proceed
      rightward, starting at the character at <paramref name="startat"/>. When a Regex is right-to-left (constructed
      with the <see cref="System.Text.RegularExpressions.RegexOptions.RightToLeft"/>
      option enabled), the match and scan are in the
      opposite direction and begin with the character at <paramref name="startat"/>-1.</para>
			<para> The static <see langword="Match"/> methods are
   equivalent to constructing a <see cref="System.Text.RegularExpressions.Regex"/> object with the specified
   pattern and calling the instance method <see langword="Match"/>. The static
   methods are provided to allow an isolated, single use of a regular expression
   without explicitly creating a <see langword="Regex"/> object.</para>
		</remarks>
	</doc><doc for="Regex.Match3">
		<summary>
			<para> Searches the input
      string for an occurrence of a regular expression with a specified input string
      starting
      position.</para>
		</summary>
		<param name="input">The string to search for a match. </param>
		<param name="startat">The character position at which to start the search.</param>
		<returns>
			<para>A Regular Expression <see cref="System.Text.RegularExpressions.Match"/> object.</para>
		</returns>
		<remarks>
			<para>You can optionally specify a starting position in the string using the
   <paramref name="startat "/>parameter. If you do not specify a starting position, the search
      begins at the default <paramref name="startat "/>position. If the regular expression
      searches from left to right, the default <paramref name="startat"/> position is at the
      beginning of the interval; if it searches from right to left, the default
   <paramref name="startat"/> position is at the end of the inteval.</para>
			<para> If you want to restrict a match so it does not scan, anchor the
      regular expression with a \G (at the left for a left-to-right pattern, or at the
      right for a right-to-left pattern). This restricts the match so it must start
      exactly at <paramref name="startpos"/>. </para>
			<para>When a <see langword="Regex "/>is left-to-right (the default), the match and
   the scan proceed rightward, starting at the character specified
   in <paramref name="startat"/>. When a <see langword="Regex "/>is right-to-left (when it
   is constructed with the <see cref="System.Text.RegularExpressions.RegexOptions.RightToLeft"/> option), the match
   and scan proceed in the opposite direction and begin with the character at
<paramref name="startat"/>-1.</para>
		</remarks>
	</doc><doc for="Regex.Matches2">
		<summary>
			<para> Searches the specified input string for all occurrences of a regular expression.</para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<returns>
			<para>A <see cref="System.Text.RegularExpressions.MatchCollection"/> of the <see cref="System.Text.RegularExpressions.Match"/> objects found by the search.</para>
		</returns>
		<remarks>
			<para> The <see langword="Matches "/>methods are similar to the
<see langword="Match "/> methods, except they return the list of successful 
   matches that would result from iteratively calling
   match=<see langword="Match"/>(...), then <see langword="Match.NextMatch"/> (), and so on.
   The collection includes only successful matches and terminates at the first unsuccessful match.
   </para>
		</remarks>
	</doc><doc for="Regex.Matches">
		<overload>
			<para> Searches an input string for all occurrences of a
      regular expression and returns all the successful matches as if <see cref="System.Text.RegularExpressions.Match"/>
      were called numerous times.</para>
		</overload>
		<summary>
			<para> Searches the specified input string for all occurrences of the
      regular expression specified in the <paramref name="pattern "/>
      parameter.
      </para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<returns>
			<para>The <see cref="System.Text.RegularExpressions.MatchCollection"/> of <see cref="System.Text.RegularExpressions.Match"/> objects found by the search.</para>
		</returns>
		<remarks>
			<para>The <see langword="Matches "/>methods are similar to the
<see langword="Match "/> methods, except they return the list of successful 
   matches that would result from iteratively calling
   match=<see langword="Match"/>(...), then <see langword="Match.NextMatch"/> (), and so on. The collection
   includes only successful matches and terminates at the first unsuccessful match. </para>
			<para>The static <see langword="Matches"/> methods are equivalent to constructing a
<see cref="System.Text.RegularExpressions.Regex"/> object with the specified 
regular expression pattern and calling the instance method
<see langword="Matches"/> . The static methods are provided to allow an isolated, 
single use of a regular expression without explicitly creating a
<see langword="Regex"/> object. </para>
		</remarks>
	</doc><doc for="Regex.Matches1">
		<summary>
			<para> Searches the specified input string for all occurrences of
      the regular expression supplied in a <paramref name="pattern "/> parameter with
      matching options supplied in an <paramref name="options "/>
      parameter.
      </para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="pattern">The regular expression pattern to match.</param>
		<param name="options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values. </param>
		<returns>
			<para>The <see cref="System.Text.RegularExpressions.MatchCollection"/> of <see cref="System.Text.RegularExpressions.Match"/> objects found by the search.</para>
		</returns>
		<remarks>
			<para>The <see langword="Matches "/>methods are similar to the
<see langword="Match "/> methods, except they return the list 
   of successful matches that would result from iteratively calling match=<see langword="Match"/>(...), then <see langword="Match.NextMatch"/> (),
   and so on. The collection includes only successful matches and terminates at
   the first unsuccessful match. </para>
			<para>The static <see langword="Matches"/> methods are equivalent to constructing a
<see cref="System.Text.RegularExpressions.Regex"/> object with the specified 
regular expression pattern and calling the instance method
<see langword="Matches"/>. The static methods are provided to allow an isolated, 
single use of a regular expression without explicitly creating a
<see langword="Regex"/> object. </para>
		</remarks>
	</doc><doc for="Regex.Matches3">
		<summary>
			<para> Searches the specified
      input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</para>
		</summary>
		<param name="input">The string to search for a match.</param>
		<param name="startat">The character position in the input string at which to start the search.</param>
		<returns>
			<para>A <see cref="System.Text.RegularExpressions.MatchCollection"/> of the <see cref="System.Text.RegularExpressions.Match"/> objects found by the search.</para>
		</returns>
		<remarks>
			<para>The <see langword="Matches "/>methods are similar to the
<see langword="Match "/> methods, except they return the list of successful 
   matches that would result from iteratively calling
   match=<see langword="Match"/>(...), then <see langword="Match.NextMatch"/> (),
   and so on. The collection includes only successful matches and terminates at
   the first unsuccessful match. </para>
		</remarks>
	</doc><doc for="Regex.Replace4">
		<summary>
			<para> Replaces up to a specified number of occurrences of a
      pattern in the input string defined by the regular expression specified in the
   <see cref="System.Text.RegularExpressions.Regex"/>
   constructor with a specified replacement string, starting at a specified
   character position in the input string.</para>
		</summary>
		<param name="input">The string to modify.</param>
		<param name="replacement">The replacement string. </param>
		<param name="count">Maximum number of times the replacement can occur.</param>
		<param name="startat">The character position in the input string where the search will begin.</param>
		<returns>
			<para>The modified character string.</para>
		</returns>
		<remarks>
			<para>If <paramref name="count"/> is negative, replacements continue to the end of the string.
   The other two forms of replace simply supply default values for <paramref name="count"/>
   (-1) and <paramref name="startat"/> (zero when left-to-right, or input.Length when
   right-to-left). </para>
		</remarks>
	</doc><doc for="Regex.Replace5">
		<summary>
			<para>Replaces all occurrences of a character pattern defined
      by a regular expression with a replacement character string starting at the
      first character.
      A <see cref="System.Text.RegularExpressions.MatchEvaluator"/> delegate is called at each match
      to evaluate the replacement.</para>
		</summary>
		<param name="input">The string to modify.</param>
		<param name="pattern">The regular expression pattern to match. </param>
		<param name="evaluator">The <see langword="MatchEvaluator"/> which evaluates replacement at each step.</param>
		<returns>
			<para>The modified character string.</para>
		</returns>
		<remarks>
			<para>The <see langword="MatchEvaluator "/>type is a delegate that takes a single
<see langword="Match "/>as input and returns a string. It is declared as follows: </para>
			<para>public delegate String RegexMatchEvaluator(Match match); </para>
			<para>The delegate is called once per match during a replace.</para>
		</remarks>
	</doc><doc for="Regex.Replace6">
		<summary>
			<para> Replaces all occurrences of a character pattern defined by
      a specified regular expression with a replacement character string starting at the
      first character. Options can be specified to modify
      matching behavior and a <see cref="System.Text.RegularExpressions.MatchEvaluator"/> delegate is called at each match
      to evaluate the replacement.
      </para>
		</summary>
		<param name="input">The string to modify.</param>
		<param name="pattern">The regular expression pattern to match. </param>
		<param name="evaluator">The <see langword="MatchEvaluator"/> which evaluates replacement at each step. </param>
		<param name="options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values. </param>
		<returns>
			<para>The modified character string.</para>
		</returns>
		<remarks>
			<para> The <see langword="MatchEvaluator "/>type is a delegate
   that takes a single <see langword="Match "/>
   as input and returns a string. It is declared as follows:
   </para>
			<para> public delegate String RegexMatchEvaluator(Match
   match);
   </para>
The delegate is called once
per match during a replace.
</remarks>
	</doc><doc for="Regex.Replace8">
		<summary>
			<para> Replaces up to a specified number of occurrences of a
      pattern defined by the regular expression specified in the <see cref="System.Text.RegularExpressions.Regex"/>
      constructor with a replacement
      string, starting at the first character in the input string. A <see cref="System.Text.RegularExpressions.MatchEvaluator"/>
      delegate is called at each match to
      evaluate the replacement.
      </para>
		</summary>
		<param name="input">The string to be modified. </param>
		<param name=" evaluator">The <see langword="MatchEvaluator"/> which evaluates replacement at each step. </param>
		<param name=" count">The maximum number of times the replacement will occur. </param>
		<returns>
			<para> The modified character string.
      </para>
		</returns>
		<remarks>
			<para>The <see langword="MatchEvaluator "/>type is a delegate that takes a single
<see langword="Match "/>as input and returns a string. It is declared as follows: </para>
			<para>public delegate String RegexMatchEvaluator(Match match); </para>
The delegate is called once
per match during a replace.
</remarks>
	</doc><doc for="Regex.Replace9">
		<summary>
			<para> Replaces up to a specified number of occurrences of a
      pattern specified in the <see cref="System.Text.RegularExpressions.Regex"/>
      constructor with a replacement string,
      starting at a specified character position in the input string. A <see cref="System.Text.RegularExpressions.MatchEvaluator"/>
      delegate is called at each match to evaluate the replacement.
      </para>
		</summary>
		<param name=" input">The string to be modified. </param>
		<param name=" evaluator">The <see langword="MatchEvaluator"/> which evaluates replacement at each step. </param>
		<param name=" count">The maximum number of times the replacement will occur. </param>
		<param name="startat">The character position in the input string where the search will begin. </param>
		<returns>
			<para> The modified character string.
      </para>
		</returns>
		<remarks>
			<para>The <see langword="MatchEvaluator "/>type is a delegate that takes a single
<see langword="Match "/>as input and returns a string. It is declared as follows: </para>
			<para>public delegate String RegexMatchEvaluator(Match match); </para>
The delegate is called once
per match during a replace.
</remarks>
	</doc><doc for="Regex.Unescape">
		<summary>
			<para> Unescapes any escaped characters in the input string.
      </para>
		</summary>
		<param name="str">The input string containing the text to convert. </param>
		<returns>
			<para> A string of characters with any escaped characters converted to their
      unescaped form.
      </para>
		</returns>
		<remarks>
			<para> As an example, Unescape replaces \x61 with a and \n with a new-line
      character (ASCII 10). Unescape reverses the transformation done by
   <see langword="Escape"/>. (Of course, <see langword="Escape "/>cannot perfectly
      reverse <see langword="Unescape "/>
      because it cannot deduce from
      an unescaped string which characters may have been previously escaped.)
      </para>
		</remarks>
	</doc><doc for="Regex.Split">
		<overload>
			<para>Splits an input string into an array of substrings at the positions defined by a regular expression match.</para>
		</overload>
		<summary>
			<para> Splits the input string at the positions defined by a
 regular expression pattern.
 </para>
		</summary>
		<param name="input">The string to split. </param>
		<param name=" pattern">The regular expression to match. </param>
		<returns>
			<para> An array of strings.
 </para>
		</returns>
		<remarks>
			<para> The <see langword="Regex.Split "/>methods are similar to the <see cref="System.String.Split"/> method, except this method
 splits the string at a delimiter determined by a regular expression instead of a
 set of characters. If <paramref name="count"/> is specified, the string is split into at
 most <paramref name="count"/> strings (the last string containing the unsplit remainder of
 the string); a <paramref name="count"/> value of zero provides the default behavior of
 splitting as many times as possible. If <paramref name="startat"/> is specified, the first delimiter is searched
 for starting at the specified point (this can be used, for example, for skipping
 leading white space).</para>
			<para>If capturing groups are used in a 
<see langword="Regex.Split"/> expression, the capturing groups are included in the resulting string array. The following example would yield 
 the array items "one", "-", "two", "-", "banana".</para>
			<code>
				Regex r = new Regex("(-)"); // Split on hyphens. 
				string[] s = r.Split("one-two-banana");
			</code>
			<para> If the regular expression can match the 
 empty string (for example, x*), <see langword="Split"/>
 will split the string into an array of single-character
 strings because the empty string delimiter can be found at every location.</para>
			<para>The static <see langword="Split"/> methods are equivalent to constructing
a <see cref="System.Text.RegularExpressions.Regex"/> object with the specified
regular expression pattern and calling the instance method <see langword="Split"/>. The static methods are provided to allow an isolated, single use of a
regular expression without explicitly creating a <see langword="Regex"/> object. </para>
		</remarks>
	</doc><doc for="Regex.Split4">
		<summary>
			<para> Splits the specified input string a specified maximum
 number of times at the positions defined by a regular expression specified in
 the <see cref="System.Text.RegularExpressions.Regex"/>
 constructor,
 starting at a specified character position in the input string
 </para>
		</summary>
		<param name="input">The string to be split. </param>
		<param name=" count">The maximum number of array elements to return. </param>
		<param name=" startat">The character position in the input string where the search will begin. </param>
		<returns>
			<para> An array of strings.
 </para>
		</returns>
		<remarks>
			<para>The <see langword="Regex.Split"/> 
methods are similar to the <see cref="System.String.Split"/> method, except
this method splits the string at a delimiter determined by a regular expression
instead of a set of characters. If <paramref name="count"/> is specified, the string is
split into at most <paramref name="count"/> strings (the last string containing the unsplit
remainder of the string); a <paramref name="count"/> value of zero provides the default
behavior of splitting as many times as possible. If <paramref name="startat"/> is specified,
the first delimiter is searched for starting at the specified point (this can be
used, for example, for skipping leading white space).</para>
			<para>Also, if capturing groups are used in a split expression, these are included 
 in the array of split strings. For example:</para>
			<code>
				Regex r = new Regex("(-)"); // Split on hyphens.
				string[] s = r.Split("one-two-banana");
			</code>
			<para>would yield the following array items:"one", "-", "two", "-", 
 "banana"</para>
			<para> If the regular expression can match the empty string (for 
 example, x*), Split will split the string into an array of single-character
 strings because the empty string delimiter can be found at every location.</para>
The static <see langword="Split"/> methods are equivalent to constructing a
<see cref="System.Text.RegularExpressions.Regex"/> object with the specified 
regular expression pattern and calling the instance method <see langword="Split"/>. The static methods are provided to allow an isolated, single use of a
regular expression without explicitly creating a <see langword="Regex"/>
object.
</remarks>
	</doc><doc for="Regex.Split1">
		<summary>
			<para> Splits the input string at the positions defined by a specified
 regular expression pattern. Options can be
 specified to modify matching behavior.
 </para>
		</summary>
		<param name="input">The string to split. </param>
		<param name=" pattern">The regular expression defining to match. </param>
		<param name=" options">A bitwise OR combination of <see langword="RegexOption"/> enumeration values. </param>
		<returns>
			<para> An array of strings.
 </para>
		</returns>
		<remarks>
			<para>The <see langword="Regex.Split"/> 
methods are similar to the <see cref="System.String.Split"/> method, except
this method splits the string at a delimiter determined by a regular expression
instead of a set of characters. If <paramref name="count"/> is specified, the string is
split into at most <paramref name="count"/> strings (the last string containing the unsplit
remainder of the string); a <paramref name="count"/> value of zero provides the default
behavior of splitting as many times as possible. If <paramref name="startat"/> is specified,
the first delimiter is searched for starting at the specified point (this can be
used, for example, for skipping leading white space).</para>
			<para>If capturing groups are used in a 
<see langword="Regex.Split"/> expression, the 
 capturing groups are included in the resulting string array. The following example would yield
 the array items "one", "-", "two", "-", "banana".</para>
			<code>
				Regex r = new Regex("(-)"); // Split on hyphens.
				string[] s = r.Split("one-two-banana");
			</code>
			<para> If the regular expression can match the empty string 
 (for example, x*), <see langword="Split"/>
 will split the string into an array of single-character
 strings because the empty string delimiter can be found at every location.</para>
The static <see langword="Split"/> methods are equivalent to constructing a
<see cref="System.Text.RegularExpressions.Regex"/> object with the specified 
regular expression pattern and calling the instance method <see langword="Split"/>. The static methods are provided to allow an isolated, single use of a
regular expression without explicitly creating a <see langword="Regex"/> object.
</remarks>
	</doc><doc for="Regex.Split2">
		<summary>
			<para> Splits the specified input string at the positions
 defined by a regular expression pattern specified in the <see cref="System.Text.RegularExpressions.Regex"/>
 constructor..
 </para>
		</summary>
		<param name="input">The string to split. </param>
		<returns>
			<para> An array of strings.
 </para>
		</returns>
		<remarks>
			<para>The <see langword="Regex.Split "/>methods are similar to the <see cref="System.String.Split"/> method, except
 this method splits the string at a delimiter determined by a regular expression
 instead of a set of characters. If <paramref name="count"/> is specified, the string is
 split into at most <paramref name="count"/> strings (the last string contains the unsplit
 remainder of the string); a <paramref name="count"/> value of zero provides the default
 behavior of splitting as many times as possible. If <paramref name="startat"/> is specified,
 the first delimiter is searched for starting at the specified point (this can be
 used, for example, for skipping leading white space).</para>
			<para>If capturing groups are used in a <see langword="Regex.Split"/> expression, 
the capturing groups are included in the resulting string array. The following
example would yield the array items "one", "-", "two", "-", "banana".</para>
			<code>
				Regex r = new Regex("(-)"); // Split on hyphens.
				string[] s = r.Split("one-two-banana");
			</code>
			<para> If the regular expression can match the empty string 
 (for example, x*), <see langword="Split"/>
 will split the string into an array of single-character
 strings because the empty string delimiter can be found at every location.</para>
The static <see langword="Split"/> methods are equivalent to constructing a
<see cref="System.Text.RegularExpressions.Regex"/> object with the specified 
regular expression pattern and calling the instance method <see langword="Split"/>. The static methods are provided to allow an isolated, single use of a
regular expression without explicitly creating a <see langword="Regex"/>
object.
</remarks>
	</doc><doc for="Regex.Split3">
		<summary>
			<para> Splits the specified input string a specified maximum
 number of times at the positions defined by a regular expression specified in
 the <see cref="System.Text.RegularExpressions.Regex"/>
 constructor.
 </para>
		</summary>
		<param name="input">The string to be split. </param>
		<param name=" count">The maximum number of array elements to return. </param>
		<returns>
			<para> An array of strings.
 </para>
		</returns>
		<remarks>
			<para>The <see langword="Regex.Split"/> 
methods are similar to the <see cref="System.String.Split"/> method, except
this method splits the string at a delimiter determined by a regular expression
instead of a set of characters. If <paramref name="count"/> is specified, the string is
split into at most <paramref name="count"/> strings (the last string containing the unsplit
remainder of the string); a <paramref name="count"/> value of zero provides the default
behavior of splitting as many times as possible. If <paramref name="startat"/> is specified,
the first delimiter is searched for starting at the specified point (this can be
used, for example, for skipping leading white space).</para>
			<para>Also, if capturing groups are used in a split expression, these are included 
 in the array of split strings. For example:</para>
			<code>
				Regex r = new Regex("(-)"); // Split on hyphens.
				string[] s = r.Split("one-two-banana");
			</code>
			<para>would yield the following array items:"one", "-", "two", "-", 
 "banana"</para>
			<para> If the regular expression can match the empty string 
 (for example, x*), <see langword="Split"/>
 will split the string into an array of single-character
 strings because the empty string delimiter can be found at every location.</para>
The static <see langword="Split"/> methods are equivalent to constructing a
<see cref="System.Text.RegularExpressions.Regex"/> object with the specified 
regular expression pattern and calling the instance method <see langword="Split"/>. The static methods are provided to allow an isolated, single use of a
regular expression without explicitly creating a <see langword="Regex"/>
object.
</remarks>
	</doc><doc for="Regex.ISerializable.GetObjectData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Regex">
		<summary>
			<para> Represents an immutable regular expression.</para>
		</summary>
		<remarks>
			<para>The <see langword="Regex "/>class
   contains several static methods that allow you to use a regular expression
   without explicitly creating a <see langword="Regex"/>
   
   object. Using a static method
   is equivalent to constructing a <see langword="Regex"/> object, using it once and then destroying it.</para>
			<para>The <see langword="Regex"/> class is 
immutable (read-only) and is inherently thread safe. <see langword="Regex"/> objects can be created on any thread and
shared between threads. For more information, see <see topic="cpconThreadSafety"/>
. </para>
		</remarks>
		<seealso topic="cpconCOMRegularExpressions"/>
		<seealso topic="cpconRegularExpressionsLanguageElements"/>
	</doc>
	<doc for="MatchEvaluator">
		<summary>
			<para> The delegate that is called each time a regular
      expression match is found during a <see cref="System.Text.RegularExpressions.Regex.Replace"/> operation.</para>
		</summary>
		<param name="match">The <see cref="System.Text.RegularExpressions.Match"/>resulting from a single regular expression match during a <see langword="Replace"/>.</param>
		<remarks>
			<para>You can use <see langword="MatchEvaluator "/>to perform
   custom verifications or operations at each <see langword="Replace "/>operation. For each match, your
<see langword="MatchEvaluator"/> is called. Its return value is used as the 
   replacement for the match passed in, and it can do any arbitrary processing to
   generate the replacement.</para>
		</remarks>
		<example>
			<para>The following example uses 
   <see langword="MatchEvaluator"/> to replace every matched group of 
      characters with the number of the match occurrence.</para>
			<codelink SampleID="System.Text.RegularExpressions.MatchEvaluator" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Regex.Match2">
		<summary>
			<para> Searches the specified input string for an occurrence of
      the regular expression specified in the <see cref="System.Text.RegularExpressions.Regex"/>
      
      constructor. </para>
		</summary>
		<param name="input">The string to search for a match. </param>
		<returns>
			<para>A regular expression <see cref="System.Text.RegularExpressions.Match"/> object.</para>
		</returns>
		<example>
			<codelink SampleID="Regex Match, NextMatch, Groups, Captures" SnippetID="8"/>
		</example>
	</doc>
	<doc for="Regex.Replace7">
		<summary>
			<para> Replaces all occurrences of a character pattern defined
      by the regular expression specified in the <see cref="System.Text.RegularExpressions.Regex"/>
      constructor. A <see cref="System.Text.RegularExpressions.MatchEvaluator"/> delegate is
      called at each match to evaluate the replacement.
      </para>
		</summary>
		<param name="input">The string to modify. </param>
		<param name=" evaluator">The <see langword="MatchEvaluator"/> which evaluates replacement at each step. </param>
		<returns>
			<para> The modified character string.
      </para>
		</returns>
		<remarks>
			<para>The <see langword="MatchEvaluator "/>type is a delegate that takes a single
<see langword="Match "/>as input and returns a string. It is declared as follows: </para>
			<para>public delegate String RegexMatchEvaluator(Match match); </para>
The delegate is called once
per match during a replace.
</remarks>
		<example>
			<codelink SampleID="Regex3" SnippetID="1"/>
		</example>
	</doc>
</docs>
