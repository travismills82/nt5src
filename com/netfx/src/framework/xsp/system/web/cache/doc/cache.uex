<docs>
	<doc for="CacheItemPriority.Default">
		<summary>
			<para>The default value for a cached item's priority is 
    <see langword="Normal"/> .</para>
		</summary>
	</doc>
	<doc for="CacheItemPriority.Low">
		<summary>
			<para> Cache items with this priority level are
      the most likely to be deleted from the cache as the server frees system
      memory.</para>
		</summary>
	</doc>
	<doc for="CacheItemPriority.BelowNormal">
		<summary>
			<para> 
      Cache items with this priority level are more likely to
      be deleted from the cache as the server frees system memory than items assigned
      a <see langword="Normal"/>
      
      priority. </para>
		</summary>
	</doc>
	<doc for="CacheItemPriority.Normal">
		<summary>
			<para> Cache items with this priority level are likely to be 
      deleted from the cache as the server frees system memory only after those items
      with <see langword="Low"/> or <see langword="BelowNormal"/>
      priority. This is the default. </para>
		</summary>
	</doc>
	<doc for="CacheItemPriority.AboveNormal">
		<summary>
			<para> Cache items with this priority level are less likely to 
      be deleted as the server frees system memory than those assigned a
   <see langword="Normal"/>
   
   priority. </para>
		</summary>
	</doc>
	<doc for="CacheItemPriority.High">
		<summary>
			<para> Cache items with this priority level are the least likely
      to be deleted from the cache as the server frees system memory. </para>
		</summary>
	</doc>
	<doc for="CacheItemPriority.NotRemovable">
		<summary>
			<para> The cache items with this priority level will not be deleted
      from the cache as the server frees system memory. </para>
		</summary>
	</doc>
	<doc for="CacheItemPriorityDecay.Medium">
		<summary>
			<para> 
      When accessed
      infrequently, an item with medium priority decay is removed from the cache only
      after items assigned a fast priority decay. This is the default.</para>
		</summary>
	</doc>
	<doc for="CacheItemPriorityDecay.Slow">
		<summary>
			<para> When accessed infrequently, an item with slow priority decay is not likely
      to be removed from the cache.</para>
		</summary>
	</doc>
	<doc for="CacheItemPriorityDecay.Default">
		<summary>
			<para>The default <see langword="CacheItemPriorityDecay"/> value 
   is <see langword="Medium"/> .</para>
		</summary>
	</doc>
	<doc for="CacheItemRemovedReason.Removed">
		<summary>
			<para>The item is removed from the cache by a <see cref="System.Web.Caching.Cache.Remove"/> method call or by an <see cref="System.Web.Caching.Cache.Insert"/> method call that specified the same key.</para>
		</summary>
	</doc>
	<doc for="CacheItemRemovedReason.Expired">
		<summary>
			<para>The item is removed from the cache because it expired. </para>
		</summary>
	</doc>
	<doc for="CacheItemRemovedReason.DependencyChanged">
		<summary>
			<para> The item is removed from the cache because a file or key dependency
      changed.</para>
		</summary>
	</doc>
	<doc for="CacheItemPriorityDecay.Fast">
		<summary>
			<para> When accessed infrequently, an item with fast priority decay is most likely
      to be removed from the cache.</para>
		</summary>
	</doc>
	<doc for="CacheItemPriorityDecay.Never">
		<summary>
			<para>An item with a priority decay of <see langword="never"/> is not be removed from the
   cache even if accessed infrequently.</para>
		</summary>
	</doc>
	<doc for="Cache.MaxItems">
		<summary>
			<para> Gets or sets the maximum number of items that can be
      stored in an application's <see cref="System.Web.Caching.Cache"/>
      .</para>
		</summary>
		<value>
			<para>The maximum number of items that can be stored in the cache.</para>
		</value>
		<remarks>
			<para>If an item is cached after the <see langword="MaxItems"/> value is
   reached, the system removes older items from the cache to make room for the new
   item.</para>
			<para>An application's <see cref="System.Web.Caching.Cache"/> object uses the <see cref="System.Web.Caching.CacheItemPriority"/> and <see cref="System.Web.Caching.CacheItemPriorityDecay"/> enumeration settings for a given
item to determine whether it or another item is removed when the property value
is reached.</para>
		</remarks>
		<seealso cref="System.Web.Caching.CacheItemPriority"/>
		<seealso cref="System.Web.Caching.CacheItemPriorityDecay"/>
		<keyword term="ASP.NET cache, maximum number of items "/>
	</doc>
	<doc for="CacheItemPriorityDecay">
		<summary>
			<para>Specifies the rate at which the priority of items stored
      in the <see cref="System.Web.Caching.Cache"/>
      are downgraded when not accessed frequently.</para>
		</summary>
		<remarks>
			<para>The default is <see langword="Normal"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic CacheItemPriorityDecay Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<keyword term="caching, item priority decay"/>
		<keyword term="cache, item priority decay"/>
	</doc>
	<doc for="Cache.IEnumerable.GetEnumerator">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="CacheItemRemovedReason.Underused">
		<summary>
			<para>The item
      is removed from the cache because the system removed it to free memory.</para>
		</summary>
	</doc><doc for="Cache.NoAbsoluteExpiration">
		<summary>
			<para> Used in the
   <paramref name="absoluteExpiration"/> parameter in an <see cref="System.Web.Caching.Cache.Insert"/> method call
      to indicate the item should never
      expire. This field is read-only.</para>
		</summary>
		<remarks>
			<para>When used, this field sets the <paramref name="absoluteExpiration"/> parameter equal to
<see cref="System.DateTime.MaxValue"/> , which is a constant representing the largest 
   possible <see langword="DateTime"/> value, 12/31/9999 11:59:59 PM.</para>
		</remarks>
		<example>
			<para> The following example demonstrates how to use the
   <see langword="NoAbsoluteExpiration"/>
   field to disable absolute expirations when inserting an item in the
<see langword="Cache"/>.</para>
			<codelink SampleID="Classic Cache.NoAbsoluteExpiration Example" SnippetID="1"/>
		</example>
		<seealso cref="System.DateTime"/>
		<seealso cref="System.Web.Caching.Cache.Insert"/>
		<keyword term="ASP.NET caching, disabling absolute expirations"/>
	</doc><doc for="Cache.Get">
		<summary>
			<para>Retrieves the specified item from the <see cref="System.Web.Caching.Cache"/> object.</para>
		</summary>
		<param name="key">The identifier for the cache item to retrieve.</param>
		<returns>
			<para>The retrieved cache item, or <see langword="null"/> if the key is not found.</para>
		</returns>
		<example>
			<para> The following example demonstrates how to retrieve the value cached
      for an ASP.NET text box server control.</para>
			<codelink SampleID="Classic Cache.Get Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcacheapis"/>
		<keyword term="ASP.NET caching, retrieving items"/>
	</doc><doc for="Cache.Insert">
		<overload>
			<para>Inserts an item into the <see cref="System.Web.Caching.Cache"/> object. Use one of the versions of this
   method to overwrite an existing <see langword="Cache"/> item with the same
<paramref name="key"/> parameter. </para>
		</overload>
		<summary>
			<para>Inserts an item into the <see cref="System.Web.Caching.Cache"/> object with a cache key to reference its
   location and using default values provided by the <see cref="System.Web.Caching.CacheItemPriority"/>
   enumeration.</para>
		</summary>
		<param name="key">The cache key used to reference the item.</param>
		<param name="value">The object to be inserted into the cache.</param>
		<remarks>
			<para>This method will overwrite an existing <see langword="Cache"/> item with the
   same <paramref name="key"/> parameter. </para>
			<note type="note">
   If the <paramref name="key"/> or
<paramref name="value"/> parameter is null, an <see cref="System.ArgumentNullException"/> is 
   thrown.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to insert an item into an
      application's cache.</para>
			<codelink SampleID="Classic Cache.Insert Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcacheapis"/>
		<keyword term="ASP.NET caching, adding items"/>
	</doc><doc for="Cache.Insert1">
		<summary>
			<para>Inserts an object into the <see cref="System.Web.Caching.Cache"/> that has file or key
   dependencies.</para>
		</summary>
		<param name="key">The cache key used to identify the item.</param>
		<param name="value">The object to be inserted in the cache.</param>
		<param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains <see langword="null"/> .</param>
		<remarks>
			<para>This method will overwrite an existing <see langword="Cache"/> item with the
   same <paramref name="key"/> parameter.</para>
			<note type="note">
   If the <paramref name="key"/> or <paramref name="value"/> parameter
   is null, an <see cref="System.ArgumentNullException"/> is
   thrown.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to insert an item into an application's cache with a cache dependency of an .xml
      file that is used for configuration.</para>
			<codelink SampleID="Classic Cache.Insert1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.CacheDependency"/>
	</doc><doc for="Cache.Insert2">
		<summary>
			<para>Inserts an object into the <see cref="System.Web.Caching.Cache"/>
with dependencies and expiration policies. </para>
		</summary>
		<param name="key">The cache key used to reference the object.</param>
		<param name="value">The object to be inserted in the cache.</param>
		<param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains <see langword="null"/> . </param>
		<param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache.</param>
		<param name="slidingExpiration">The interval between the time the inserted object is last accessed and when that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed.</param>
		<remarks>
			<para>This method will overwrite an existing <see langword="Cache"/> item with the
   same <paramref name="key"/> parameter.</para>
			<para>If the <paramref name="slidingExpiration"/> parameter is set to
<see langword="NoSlidingExpiration"/>
, sliding expiration is disabled. If you set
the <paramref name="slidingExpiration"/> parameter to greater than <see cref="System.TimeSpan.Zero"/> , the
<paramref name="absoluteExpiration"/> parameter is set to <see cref="System.DateTime.Now"/> plus the value
contained in the <paramref name="slidingExpiration"/> parameter. If
the item is requested from the cache
before the amount of time specified by the <paramref name="absoluteExpiration"/> parameter, the item will be placed in the cache
again, and <paramref name="absoluteExpiration"/> will again be set to
<see langword="DateTime.Now"/>
plus the value contained in the <paramref name="slidingExpiration"/> parameter. If the
item is not requested from the cache before the date in the
<paramref name="absoluteExpiration"/> parameter, the item is removed from the
cache.</para>
			<note type="note">
   If the <paramref name="key"/> or <paramref name="value"/> parameter
   is null, an <see cref="System.ArgumentNullException"/> is thrown.
   If you set the
<paramref name="slidingexpiration"/> parameter to less than 
<see langword="TimeSpan.Zero"/>, or the equivalent of more than one year, 
   an <see cref="System.ArgumentOutOfRangeException"/> is thrown. You
   cannot set both sliding and absolute expirations on the same cached item. If you
   do so, an <see cref="System.ArgumentException"/> is thrown.
</note>
		</remarks>
		<example>
			<para> The following example demonstrates how to insert an item into
      an application's cache with an absolute expiration.</para>
			<note type="note">
      Since this form of the
   <see langword="Insert"/> method supports cache dependencies, if the
      item has no dependencies you must declare the <paramref name="dependency"/> parameter as
   <see langword="null"/>
   
   in the comma-delimited list
   of parameters.
   
</note>
			<codelink SampleID="Classic Cache.Insert2 Example" SnippetID="1"/>
			<para>The following example demonstrates how to insert an item
 into the cache with a sliding expiration.</para>
			<codelink SampleID="Classic Cache.Insert2 Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconcacheapis"/>
		<seealso cref="System.DateTime"/>
		<seealso cref="System.TimeSpan"/>
	</doc><doc for="Cache.Insert3">
		<summary>
			<para>Inserts an object into the <see cref="System.Web.Caching.Cache"/> object with dependencies,
   expiration and priority policies, and a delegate you can
   use to notify your application when the inserted item is removed from
   the <see langword="Cache"/>
   . </para>
		</summary>
		<param name="key">The cache key used to reference the object.</param>
		<param name="value">The object to be inserted in the cache.</param>
		<param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains <see langword="null"/> . </param>
		<param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache.</param>
		<param name="slidingExpiration">The interval between the time the inserted object was last accessed and when that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed.</param>
		<param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the <see cref="System.Web.Caching.CacheItemPriority"/> enumeration. This value is used by the cache when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
		<param name="onRemoveCallback">A delegate that, if provided, will be called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
		<remarks>
			<para>This method will overwrite an existing <see langword="Cache"/> item with the
   same <paramref name="key"/> parameter.</para>
			<note type="note">
   If the <paramref name="key"/> or <paramref name="value"/> parameter
   is null, an <see cref="System.ArgumentNullException"/> is thrown.
   If you set the
<paramref name="slidingexpiration"/> parameter to less than 
<see langword="TimeSpan.Zero"/>, or the equivalent of more than one year, 
   an <see cref="System.ArgumentOutOfRangeException"/> is thrown. You
   cannot set both sliding and absolute expirations on the same cached item. If you
   do so, an <see cref="System.ArgumentException"/> is thrown.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to assign an item high priority when you insert it
      into your application's <see langword="Cache"/>
      
      object. </para>
			<note type="note">
      For more information about how to use this
      method with the CacheItemRemovedCallback delegate, see <see topic="cpconnotifyingapplicationswhenitemisdeletedfromcache"/>
      .
      
   </note>
			<codelink SampleID="Classic Cache.Insert3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.DateTime"/>
		<seealso cref="System.TimeSpan"/>
		<seealso topic="cpconcacheapis"/>
		<seealso cref="System.Web.Caching.CacheItemPriority"/>
		<seealso cref="System.Web.Caching.CacheItemRemovedCallback"/>
	</doc><doc for="Cache.Cache">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.Cache"/> class.</para>
		</summary>
	</doc>
	<doc for="CacheItemPriority">
		<summary>
			<para> Specifies the relative priority of items stored in the <see cref="System.Web.Caching.Cache"/> .</para>
		</summary>
		<remarks>
			<para>When the Web server hosting an ASP.NET application runs low on memory, the
   <see langword="Cache"/>
   selectively purges items to free system memory. When an item is added to the cache, you
   can assign it a relative priority compared to the other items stored in the cache. Items you
   assign higher priority values to are less likely to be deleted from the cache
   when the server is processing a large number of requests, while items you
   assign lower priority values are more likely to be deleted. The default is
<see langword="Normal"/> .</para>
		</remarks>
		<example>
			<para>The following example uses the <see cref="System.Web.Caching.Cache.Insert"/> method to add an
   item to the <see cref="System.Web.Caching.Cache"/> object with its <paramref name="priority"/> parameter set to
<see langword="CacheItemPriority.High"/> .</para>
			<codelink SampleID="Classic CacheItemPriorityDecay Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso topic="cpconcacheapis"/>
	</doc>
	<doc for="Cache.Count">
		<summary>
			<para> Gets the number of items stored in the
      cache.</para>
		</summary>
		<value>
			<para>The number of items stored in the cache.</para>
		</value>
		<remarks>
			<para> This property can be useful when monitoring your application's performance
      or when using ASP.NET tracing functionality.</para>
		</remarks>
		<example>
			<para>The following example obtains the value of 
      the <see langword="Count"/> property, converts it to a string, and assigns
      the string to the <see cref="System.Web.UI.WebControls.Label.Text"/> property of a <see cref="System.Web.UI.WebControls.Label"/>
      Web server control, <c>Label1</c>.</para>
			<codelink SampleID="System.Web.Caching.Cache.Count" SnippetID="1"/>
		</example>
		<keyword term="ASP.NET caching, obtaining the number of cached items"/>
	</doc>
	<doc for="Cache.this">
		<summary>
			<para> Gets or sets the cache item at the specified key.</para>
		</summary>
		<param name="key">A <see cref="System.String"/> object that represents the key for the cache item.</param>
		<value>
			<para>The specified cache item.</para>
		</value>
		<remarks>
			<para>You can use this property to retrieve the value of a specified cache item, or to
      add an item and a key for it to the cache.</para>
		</remarks>
		<example>
			<para> The following example uses the <see langword="Item"/> 
property to retrieve the value of a cached object associated with the <c>Key1</c> key.
It then uses the <see cref="System.Web.HttpResponse.Write" qualify="true"/> method to write the value and introductory text and
a &lt;B&gt; HTML element to a Web Forms
page.</para>
			<codelink SampleID="System.Web.Caching Examples" SnippetID="5"/>
			<para>The following example demonstrates using this property to insert the value of a text box into
 the cache.</para>
			<codelink SampleID="Classic Cache.this Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconcacheapis"/>
		<keyword term="ASP.NET caching, adding items"/>
		<keyword term="ASP.NET caching, retrieving items"/>
	</doc>
	<doc for="CacheItemRemovedReason">
		<summary>
			<para> Specifies the reason an item was removed from
      the <see cref="System.Web.Caching.Cache"/> .</para>
		</summary>
		<remarks>
			<para>This enumeration works in concert with the <see cref="System.Web.Caching.CacheItemRemovedCallback"/> delegate to notify your ASP.NET applications
   when and why an object was removed from the <see cref="System.Web.Caching.Cache"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a 
      shared <see langword="Boolean"/> property, <c>itemRemoved</c>, a shared
<see langword="CacheItemRemovedReason"/> enumeration object, <c>reason</c>, and 
a <see cref="System.Web.Caching.CacheItemRemovedCallback"/> delegate, <c>onRemove</c>. The latter can be
included in an <see cref="System.Web.Caching.Cache.Insert"/> or <see cref="System.Web.Caching.Cache.Add"/> method call. It also
defines a method, <c>RemovedCallback</c>, with a signature that matches
the <see langword="CacheItemRemovedCallback"/> delegate. When the
<c>RemovedCallback</c> method is called, it changes the <c>itemRemoved</c> property value to <see langword="true"/> 
and assigns the reason property value to the reason provided by
the <see langword="CacheItemRemovedReason"/>
enumeration.</para>
			<codelink SampleID="System.Web.Caching Examples" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso cref="System.Web.Caching.Cache.Insert"/>
		<seealso cref="System.Web.Caching.CacheItemRemovedCallback"/>
		<keyword term="Web Applications, notifying when an item is removed from the cache"/>
		<keyword term="ASP.NET caching, reasons an item is removed from the cache"/>
	</doc>
	<doc for="Cache.Add">
		<summary>
			<para>Adds the specified item to the <see cref="System.Web.Caching.Cache"/> object with dependencies, expiration
   and priority policies, and a delegate you can use to notify your application
   when the inserted item is removed from the <see langword="Cache"/>
   . </para>
		</summary>
		<param name="key">The cache key used to reference the item.</param>
		<param name=" value">The item to be added to the cache.</param>
		<param name=" dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this paramter contains <see langword="null"/> .</param>
		<param name=" absoluteExpiration">The time at which the added object expires and is removed from the cache.</param>
		<param name=" slidingExpiration">The interval between the time the added object was last accessed and when that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed.</param>
		<param name=" priority">The relative cost of the object, as expressed by the <see cref="System.Web.Caching.CacheItemPriority"/> enumeration. The cache uses this value when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
		<param name=" onRemoveCallback">A delegate that, if provided, is called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
		<returns>
			<para>An <see cref="System.Object"/> if the item was
   previously stored in the <see langword="Cache"/>; otherwise
<see langword="null"/>. </para>
		</returns>
		<exception cref="ArgumentNullException">The <paramref name="key"/> or <paramref name="value"/> parameter is set to <see langword="null"/>.</exception>
		<exception cref="ArgumentOutOfRangeException">The <paramref name="slidingExpiration"/> parameter is set to less than <see langword="TimeSpan.Zero"/> or more than one year.</exception>
		<exception cref="ArgumentException">The <paramref name="absoluteExpiration"/> and <paramref name="slidingExpiration"/> parameters are both set for the item you are trying to add to the <see langword="Cache"/>.</exception>
		<remarks>
			<para>Calls to this method will fail if an item with
      the same <paramref name="key"/> parameter
      is already stored in the <see langword="Cache"/>. To overwrite an existing
   <see langword="Cache"/> item using the same <paramref name="key"/> parameter, use
      the <see cref="System.Web.Caching.Cache.Insert"/> method.</para>
			<note type="note">
      If the <paramref name="key"/> or <paramref name="value"/> parameter
      is null, an <see cref="System.ArgumentNullException"/> is thrown.
      If you set the
   <paramref name="slidingexpiration"/> parameter to less than
   <see langword="TimeSpan.Zero"/>, or the equivalent of more than one year,
      an <see cref="System.ArgumentOutOfRangeException"/> is thrown. You
      cannot set both sliding and absolute expirations on the same cached item. If you
      do so, an <see cref="System.ArgumentException"/> is thrown.
      
   </note>
		</remarks>
		<example>
			<para> The following example creates an <c>AddItemToCache</c> method. 
      When this method is called, it sets an <c>itemRemoved</c> property to
   <see langword="false"/> and registers an <c>onRemove</c> method with a new instance of 
      the <see cref="System.Web.Caching.CacheItemRemovedCallback"/> delegate. The delegate's signature is used
      in the <c>RemovedCallback</c> method. The method then checks the value associated with
      the <c>Key1</c> key in the cache. If the value is null, the <see langword="Add"/>
      method places an item in the cache with a key of <c>Key1</c>, a value of <c>Value 1</c>, an
      absolute expiration of 60 seconds, and a high cache priority. It also uses the
      <c>onRemove</c> method as an argument. This allows the <c>RemovedCallback</c> method to be
      called when this item is removed from
      the cache. </para>
			<note type="note">
      For examples of how to use
      the <see cref="System.Web.Caching.CacheDependency"/> class and the <see cref="System.Web.Caching.CacheItemRemovedCallback"/> delegate, see <see topic="cpconcacheapis"/>.
      
   </note>
			<codelink SampleID="System.Web.Caching Examples" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.Caching.CacheDependency"/>
		<seealso cref="System.Web.Caching.CacheItemPriority"/>
		<seealso cref="System.Web.Caching.CacheItemRemovedCallback"/>
		<seealso topic="cpconcacheapis"/>
		<keyword term="ASP.NET caching, adding items"/>
	</doc>
	<doc for="Cache.NoSlidingExpiration">
		<summary>
			<para> Used as the <paramref name="slidingExpiration"/>
parameter in an <see cref="System.Web.Caching.Cache.Insert"/> or <see cref="System.Web.Caching.Cache.Add"/> method call
to disable sliding
expirations. This field is read-only.</para>
		</summary>
		<remarks>
			<para>When used, this field sets the <paramref name="slidingExpiration"/> parameter to the <see cref="System.TimeSpan.Zero" qualify="true"/> field, which has
   a constant value of zero. The cached item expires in accordance with the
<paramref name="absoluteExpiration"/> parameter associated with the 
<see langword="Insert"/> or <see langword="Add"/> method 
   call</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the Insert method to add an
      item to the <see cref="System.Web.Caching.Cache"/> object using the
   <see langword="NoSlidingExpiration"/> field.</para>
			<codelink SampleID="Classic Cache.NoSlidingExpiration Example" SnippetID="1"/>
		</example>
		<seealso cref="System.TimeSpan.Zero"/>
		<seealso cref="System.Web.Caching.Cache.Insert"/>
		<keyword term="ASP.NET caching, disabling sliding expirations"/>
	</doc>
	<doc for="Cache.GetEnumerator">
		<summary>
			<para> Retrieves a dictionary
      enumerator used to iterate through the
      key settings and their values contained in the cache.</para>
		</summary>
		<returns>
			<para>An enumerator to iterate through the <see cref="System.Web.Caching.Cache"/> object.</para>
		</returns>
		<remarks>
			<para> Items can be added or removed from the cache while this method is
      enumerating through the items.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Collections.IDictionaryEnumerator"/> object, <c>CacheEnum</c>, using the
<see langword="GetEnumerator"/> method. The enumerator moves through the cache, converts the value of each cached item to a string, and then writes the values to a Web Forms page.</para>
			<codelink SampleID="Cache.GetEnumerator" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CacheItemRemovedCallback">
		<summary>
			<para> Defines a callback method for notifying
      applications when a cached item is removed from the <see cref="System.Web.Caching.Cache"/>
      .</para>
		</summary>
		<param name="key">The index location for the item removed from the cache.</param>
		<param name="value">The <see cref="System.Object"/> item removed from the cache.</param>
		<param name="reason">The reason the item was removed from the cache, as specified by the <see cref="System.Web.Caching.CacheItemRemovedReason"/> enumeration.</param>
		<example>
			<para>The following example is a page that shows users the value assigned to an item in the cache, then notifies them when the item is removed from the cache. It creates a <c>RemovedCallback</c> method, which uses the signature of
   the <see langword="CacheItemRemovedCallback"/> delegate, to notify users
   when the cache item is removed and uses the <see cref="System.Web.Caching.CacheItemRemovedReason"/> enumeration to tell them why it was removed.
   In addition, it uses the <see cref="System.Web.Caching.Cache.this" qualify="true"/> property to add objects to the cache and retrieve the value of those objects. In the <c>AddItemToCache</c> method, it uses the <see cref="System.Web.Caching.Cache.Add" qualify="true"/>
method to add an item to the cache. To use
the <see langword="CacheItemRemovedCallback"/> delegate, you must add an
item to the cache with this method or the <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method, so that that ASP.NET can automatically make the proper method calls when the item is removed. The custom <c>RemoveItemFromCache</c> method uses the <see cref="System.Web.Caching.Cache.Remove" qualify="true"/> method to explicitly delete the item from the cache, causing the <c>RemovedCallback</c> method to be
invoked.</para>
			<codelink SampleID="System.Web.Caching Examples" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso cref="System.Web.Caching.CacheItemRemovedReason"/>
		<keyword term="Web Applications, notifying when an item is removed from the cache"/>
		<keyword term="ASP.NET caching, notifying a Web application when an item is removed"/>
	</doc>
	<doc for="Cache">
		<summary>
			<para>Implements the cache for a Web application. This class cannot be inherited.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> One instance of this class is created per application domain, and it
      remains valid as long as the application domain remains active. Information about
      an instance of this class is available through the <see langword="Cache"/>
      property of the <see cref="System.Web.HttpContext"/> object or the <see langword="Cache"/> property of
      the <see cref="System.Web.UI.Page"/> object.</para>
		</remarks>
		<example>
			<para>The following example is a page that shows users the value assigned to an item in the cache, then notifies them when the item is removed from the cache. It creates a <c>RemovedCallback</c> method, which uses the signature of
   the <see langword="CacheItemRemovedCallback"/> delegate, to notify users
   when the cache item is removed and uses the <see cref="System.Web.Caching.CacheItemRemovedReason"/> enumeration to tell them why it was removed.
   In addition, it uses the <see cref="System.Web.Caching.Cache.this" qualify="true"/> property to add objects to the cache and retrieve the value of those objects. In the <c>AddItemToCache</c> method, it uses the <see cref="System.Web.Caching.Cache.Add" qualify="true"/>
method to add an item to the cache. To use
the <see langword="CacheItemRemovedCallback"/> delegate, you must add an
item to the cache with this method or the <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method, so that that ASP.NET can automatically make the proper method calls when the item is removed. The custom <c>RemoveItemFromCache</c> method uses the <see cref="System.Web.Caching.Cache.Remove" qualify="true"/> method to explicitly delete the item from the cache, causing the <c>RemovedCallback</c> method to be
invoked.</para>
			<codelink SampleID="System.Web.Caching Examples" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpContext"/>
		<seealso cref="System.Web.Caching.CacheDependency"/>
		<seealso cref="System.Web.Caching.CacheItemRemovedCallback"/>
		<seealso topic="cpconcacheapis"/>
	</doc>
	<doc for="Cache.Remove">
		<summary>
			<para>Removes the specified item from the
      application's <see cref="System.Web.Caching.Cache"/> object. </para>
		</summary>
		<param name="key">A <see cref="System.String"/> identifier for the cache item to remove.</param>
		<returns>
			<para> The item removed from the <see langword="Cache"/> . If the value in the key parameter is not found,
   returns <see langword="null"/>.</para>
		</returns>
		<example>
			<para>The following example creates a <c>RemoveItemFromCache</c>
   method. When this method is called, it uses the <see cref="System.Web.Caching.Cache.this"/>
   property to check whether the cache contains an object that is associated with a
<c>Key1</c> key value. If it does, the <see langword="Remove"/> method is called to
remove the object.</para>
			<codelink SampleID="System.Web.Caching Examples" SnippetID="4"/>
		</example>
		<seealso topic="cpconcacheapis"/>
		<keyword term="ASP.NET caching, removing items"/>
	</doc>
</docs>
