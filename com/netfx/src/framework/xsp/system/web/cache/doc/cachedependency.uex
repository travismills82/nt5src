<docs>
	<doc for="CacheDependency.Finalize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="CacheDependency.Dispose">
		<summary>
			<para>Releases the resources used by the <see cref="System.Web.Caching.CacheDependency"/> object.</para>
		</summary>
	</doc><doc for="CacheDependency.CacheDependency2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors an array of file paths (to files or directories), an
   array of cache keys, or both for changes.</para>
		</summary>
		<param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache. </param>
		<param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
		<remarks>
			<para>Also, if any of the directories or files specified in the <paramref name="filenames"/>
parameter is not found in the file system, they are treated as missing files. If
any of them are created after the object with the dependency is added to the
<see cref="System.Web.Caching.Cache"/>, the cached object will be removed from the 
<see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para> The following code fragment demonstrates how to
      insert an item into your application's <see cref="System.Web.Caching.Cache"/> with a dependency on a key to another item
      placed in the cache. Since this method uses array syntax, you must define the
      number of keys the item you are adding to the <see langword="Cache"/>
      is dependent on. </para>
			<codelink SampleID="Key based dependency" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso topic="cpconcacheapis"/>
		<keyword term="cache dependenices, on arrays"/>
		<keyword term="dependency support for cached items "/>
		<keyword term="arrays as cache dependencies"/>
	</doc><doc for="CacheDependency.CacheDependency3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors a file or directory for
   changes and indicates when change tracking is to begin.</para>
		</summary>
		<param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
		<param name=" start">The time when change tracking begins.</param>
		<remarks>
			<para>If the directory or file specified in the <paramref name="filename"/> parameter is not
   found in the file system, it will be treated as a missing file. If the file is
   created after the object with the dependency is added to the <see cref="System.Web.Caching.Cache"/>, the
   cached object will be removed from the <see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para>The following example uses this constructor to 
      instantiate a <see langword="CacheDependency"/> object, then inserts an item into
      the <see cref="System.Web.Caching.Cache"/> with that dependency. The dt value passed in
      the <paramref name="start"/> parameter is set to <see cref="System.DateTime.Now" qualify="true"/>
      . </para>
			<codelink SampleID="System.Web.Caching.CacheDependency_HasChanged" SnippetID="1"/>
		</example>
		<keyword term="dependency support for cached items"/>
	</doc>
	<doc for="CacheDependency.HasChanged">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Web.Caching.CacheDependency"/> object has changed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
<see langword="CacheDependency"/> object has changed; otherwise, 
<see langword="false"/>. The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>You can add an item to an ASP.NET application's <see cref="System.Web.Caching.Cache"/> with a <see langword="CacheDependency"/>
. When the <see langword="CacheDependency"/> changes, the
item added to the <see langword="Cache"/> is invalidated. You can use this
property to determine if a <see langword="CacheDependency"/> has changed, and recreate an item
in the <see langword="Cache"/>
if that has occurred.</para>
		</remarks>
		<example>
			<para>The following example demonstrates using the <see langword="HasChanged"/>
property to determine if a <see cref="System.Web.Caching.CacheDependency"/> changed since the previous
request for an item in the <see cref="System.Web.Caching.Cache"/>. The dt value passed in the <paramref name="start"/>
parameter is set to <see cref="System.DateTime.Now" qualify="true"/>. </para>
			<codelink SampleID="System.Web.Caching.CacheDependency_HasChanged" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CacheDependency">
		<summary>
			<para>Tracks cache dependencies, which can be files, directories,
      or keys to other objects in your application's <see cref="System.Web.Caching.Cache"/> . This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>You can add items with dependencies to your application's
      cache with the <see cref="System.Web.Caching.Cache.Add"/>
      and <see cref="System.Web.Caching.Cache.Insert"/> methods.</para>
			<para>When you add an item to an application's <see cref="System.Web.Caching.Cache"/> object and in doing so define a cache dependency for that
   item, an instance of the <see langword="CacheDependency"/> class is created
   automatically to track changes to the files, keys, or directories you have specified.
   This helps you avoid losing changes made to the object between the time it is
   created and the time it is inserted into the <see langword="Cache"/>
   . The <see langword="CacheDependency"/>
   instance can represent a single
   file or directory, an array of files or directories, or an array of files or
   directories along with an array of cache keys (these represent other items stored in
   the <see langword="Cache"/>
   object). </para>
		</remarks>
		<example>
			<para>The following example demonstrates using the <see langword="HasChanged"/> 
property to determine if a <see cref="System.Web.Caching.CacheDependency"/> changed since the previous
request for an item in the <see cref="System.Web.Caching.Cache"/>. The dt value passed in the <paramref name="start"/>
parameter is set to <see cref="System.DateTime.Now" qualify="true"/>.</para>
			<codelink SampleID="System.Web.Caching.CacheDependency_HasChanged" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso topic="cpconCacheAPIs"/>
		<seealso cref="System.Web.Caching.Cache.Insert"/>
		<keyword term="cache dependencies"/>
		<keyword term="dependencies, cache"/>
	</doc>
	<doc for="CacheDependency.CacheDependency">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that
   monitors a file or directory for changes.</para>
		</summary>
		<param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
		<remarks>
			<para>If the directory or file specified in the <paramref name="filename"/> parameter is not
   found in the file system, it will be treated as a missing file. If the file is
   created after the object with the dependency is added to the <see cref="System.Web.Caching.Cache"/>, the
   cached object will be removed from the <see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para>The following example creates an instance of the 
   <see cref="System.Web.Caching.CacheDependency"/> class with a 
      dependency on an XML file. The <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method then adds an item to
      the <see cref="System.Web.Caching.Cache"/> that is dependent upon that file.</para>
			<codelink SampleID="Classic CacheDependency.CacheDependency Example" SnippetID="1"/>
			<para>You can also use the following technique to add an item to the 
<see langword="Cache"/> with a dependency on a file.</para>
			<codelink SampleID="Single File Dependency Cache entry" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso topic="cpconcacheapis"/>
		<keyword term="cache dependencies"/>
		<keyword term="dependency support for cached items"/>
	</doc>
	<doc for="CacheDependency.CacheDependency4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors an array of file paths
   (to files or directories) for changes and specifies a time when change
   monitoring begins.</para>
		</summary>
		<param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
		<param name=" start">The time when change tracking begins.</param>
		<remarks>
			<para>Also, if any of the directories or files specified in the <paramref name="filenames"/>
parameter is not found in the file system, they are treated as missing files. If
any of them are created after the object with the dependency is added to the
<see cref="System.Web.Caching.Cache"/>, the cached object will be removed from the 
<see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Web.Caching.CacheDependency"/> object that passes two XML files and
   a<see cref="System.DateTime.Now" qualify="true"/> value when the object is included as a parameter
   argument in a <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method call.</para>
			<codelink SampleID="CacheDependency Constructor4" SnippetID="1"/>
		</example>
		<seealso topic="cpconCacheAPIs"/>
		<seealso cref="System.Web.Caching.Cache"/>
		<keyword term="cache dependenices, on arrays"/>
		<keyword term="arrays as cache dependencies "/>
		<keyword term="dependency support for cached items"/>
	</doc>
	<doc for="CacheDependency.CacheDependency5">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors an array of file paths
   (to files or directories), an array of cache keys, or both for changes.</para>
		</summary>
		<param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache. </param>
		<param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
		<param name=" start">The time when change tracking begins.</param>
		<remarks>
			<para>Also, if any of the directories or files specified in the <paramref name="filenames"/>
parameter is not found in the file system, they are treated as missing files. If
any of them are created after the object with the dependency is added to the
<see cref="System.Web.Caching.Cache"/>, the cached object will be removed from the 
<see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para>The following example creates a <c>CreateDependency</c> method. When
   this method is called, it creates a <see cref="System.DateTime"/> object and the <see cref="System.Web.Caching.Cache.this" qualify="true"/> property is used to add an item to the cache
   with a <paramref name="key"/>
   parameter of <c>key1</c> and a
value of <c>Value 1</c>. An array of strings, <c>dependencyKey</c>, is then created with the
value of <c>key1</c> as
well. This <see langword="CacheDependency"/> constructor then instantiates
a <see langword="CacheDependency"/>
object that passes <c>dependencyKey</c>
and the <see langword="DateTime"/> object as parameter arguments. The <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method is called next, using the
<see langword="CacheDependency"/> object as a parameter. This makes the object 
added to the cache using the <see langword="Insert"/>
method dependent on the <c>key1</c> key.</para>
			<codelink SampleID="CacheDependency Constructor6" SnippetID="1"/>
		</example>
		<keyword term="cache dependencies, on arrays"/>
		<keyword term="arrays as cache dependencies"/>
		<keyword term="dependency support for cached items"/>
	</doc>
	<doc for="CacheDependency.CacheDependency6">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors an array of file paths
   (to files or directories), an array of cache keys, or both for changes. It also
   makes itself dependent upon a separate instance of the
<see langword="CacheDependency"/> class.</para>
		</summary>
		<param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
		<param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
		<param name=" dependency">Another instance of the <see langword="CacheDependency"/> class that this instance is dependent upon.</param>
		<remarks>
			<para>Also, if any of the directories or files specified in the <paramref name="filenames"/>
parameter is not found in the file system, they are treated as missing files. If
any of them are created after the object with the dependency is added to the
<see cref="System.Web.Caching.Cache"/>, the cached object will be removed from the 
<see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para> The following example creates a <c>CreateDependency</c>
   method. When this method is called, it uses the<see cref="System.Web.Caching.Cache.this" qualify="true"/> property to add an item to the cache with a
<paramref name="key"/> parameter of <c>key1</c> and a value of <c>Value 1</c>.
An array of strings, <c>dependencyKey</c>, is then created with the value of <c>key1</c> as
well. Another <see langword="CacheDependency"/> constructor creates
a <see langword="CacheDependency"/> object, dep1, that passes <c>dependencyKey</c>
as parameter argument. A second <see langword="CacheDependency"/> object, <c>dep2</c>,
is created using this constructor with <c>dep1</c> passed as the third parameter
argument. This second dependency is dependent on the first. The <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method is called next, using the second
<see langword="CacheDependency"/>
object as a parameter. If the first dependency changes in any way, the cached
item will be invalidated.</para>
			<codelink SampleID="CacheDependency Constructor7" SnippetID="1"/>
		</example>
		<keyword term="cache dependencies, on arrays"/>
		<keyword term="arrays as cache dependencies"/>
		<keyword term="dependency support for cached items"/>
	</doc>
	<doc for="CacheDependency.CacheDependency7">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors an array of file paths
   (to files or directories), an array of cache keys, or both for changes. It also
   makes itself dependent upon another instance of the
<see langword="CacheDependency"/> class and a time when the change monitoring begins.</para>
		</summary>
		<param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
		<param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
		<param name=" dependency">Another instance of the <see langword="CacheDependency"/> class that this instance is dependent upon.</param>
		<param name=" start">The time when change tracking begins.</param>
		<remarks>
			<para>Also, if any of the directories or files specified in the <paramref name="filenames"/>
parameter is not found in the file system, they are treated as missing files. If
any of them are created after the object with the dependency is added to the
<see cref="System.Web.Caching.Cache"/>, the cached object will be removed from the 
<see langword="Cache"/>.</para>
			<para>For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.</para>
		</remarks>
		<example>
			<para>The following example creates a <c>CreateDependency</c> method. When this
   method is called, it creates a <see cref="System.DateTime"/>
   object and the <see cref="System.Web.Caching.Cache.this" qualify="true"/>
   property is used to add an item to the cache with a key parameter of <c>key1</c> and a
value of <c>Value 1</c>. An array of strings, <c>dependencyKey</c>, is then created with the
value of <c>key1</c> as
well. Another <see langword="CacheDependency"/> constructor creates
a <see langword="CacheDependency"/>
object, <c>dep1</c>, that passes <c>dependencyKey</c>
as a parameter argument. A second <see langword="CacheDependency"/>
object, <c>dep2</c>, is created using this constructor, with
<c>dep1</c> and the <see langword="DateTime"/> object passed as parameter 
arguments. This second dependency is dependent on the first and dependency
monitoring will begin ten seconds after the <c>CreateDependency</c> method is called. The <see cref="System.Web.Caching.Cache.Insert" qualify="true"/>
method is called next, using the second
<see langword="CacheDependency"/> 
object as a parameter. If the
first dependency changes in any way, the cached item will be invalidated.</para>
			<codelink SampleID="CacheDependency Constructor8" SnippetID="1"/>
		</example>
		<keyword term="cache dependencies, on arrays"/>
		<keyword term="arrays as cache dependencies"/>
		<keyword term="dependency support for cached items"/>
	</doc>
	<doc for="CacheDependency.CacheDependency1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Caching.CacheDependency"/> class that monitors an array of file paths (to files or
   directories) for
   changes.</para>
		</summary>
		<param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
		<remarks>
			<para>If any of the files or directories in the array were to change or be removed
      from the array, the cached item becomes obsolete and is removed from the
      application's <see cref="System.Web.Caching.Cache"/> object.</para>
			<para>Also, if any of the directories or files specified in the <paramref name="filenames"/>
parameter is not found in the file system, they are treated as missing files. If
any of them are created after the object with the dependency is added to the
<see cref="System.Web.Caching.Cache"/>, the cached object will be removed from the 
<see langword="Cache"/>.</para>
For example, assume that you add an object to the <see langword="Cache"/> with
a dependency on the following file path: c:\stocks\xyz.dat. If that file is not
found when the <see cref="System.Web.Caching.CacheDependency"/> object is created, but is created later, the
cached object is removed upon the creation of the xyz.dat file.
</remarks>
		<example>
			<para>The following example demonstrates how an used
      the <see cref="System.Web.Caching.Cache.Insert" qualify="true"/> method to add an item to the <see cref="System.Web.Caching.Cache"/> with
      dependencies on an array of files. You can also
      make the item dependent
      on an array of directories.</para>
			<para>
      When you create the array that
      contains the file dependencies, you must define the number of
      files the item you are adding to the <see langword="Cache"/> is
      dependent on.
      </para>
			<codelink SampleID="Multiple file based dependency" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso topic="cpconcacheapis"/>
		<keyword term="cache dependencies, on arrays"/>
		<keyword term="dependency support for cached items"/>
		<keyword term="arrays as cache dependencies"/>
	</doc>
</docs>
