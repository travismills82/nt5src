<docs>
	<doc for="BaseValidator.AddAttributesToRender">
		<summary>
			<para>Adds the attributes of this control to the output stream for rendering on the
       client.</para>
		</summary>
		<param name="writer">An <see cref="System.Web.UI.HtmlTextWriter" qualify="true"/> that contains the output stream to render on the client.</param>
	</doc>
	<doc for="BaseValidator.OnInit">
		<summary>
			<para> Registers the validator on the page.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs" qualify="true"/> that contains the event data.</param>
	</doc>
	<doc for="BaseValidator.OnPreRender">
		<summary>
			<para>Checks the client brower and configures the 
       validator for compatibility prior to rendering. </para>
		</summary>
	</doc>
	<doc for="BaseValidator.Render">
		<summary>
			<para>Displays the control on the client.</para>
		</summary>
		<param name="writer">An <see cref="System.Web.UI.HtmlTextWriter" qualify="true"/> that contains the output stream for rendering on the client.</param>
	</doc>
	<doc for="BaseValidator.ErrorMessage">
		<summary>
			<para> Gets or sets the text for the error message.</para>
		</summary>
		<value>
			<para> The error message displayed when validation fails. The default
      value is <see cref="System.String.Empty" qualify="true"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.ErrorMessage"/> property to specify the
   text to display in the
   validation control when validation fails. This text is also included in the <see cref="System.Web.UI.WebControls.ValidationSummary"/> control,
   if one is placed on the Web page.</para>
			<para>It is possible to display different text for the
   validation control and the <see cref="System.Web.UI.WebControls.ValidationSummary"/> control. Use the
<see cref="System.Web.UI.WebControls.Label.Text"/> property to specify the text to 
   display in the validation
   control. </para>
			<note type="note">
   If the <see cref="System.Web.UI.WebControls.Label.Text"/> property is
   set, that text will override the text specified in the <see cref="System.Web.UI.WebControls.BaseValidator.ErrorMessage"/>
   property and appear in the validation control. However, the text specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ErrorMessage"/>
   property always appears in the <see cref="System.Web.UI.WebControls.ValidationSummary"/> control.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Web.UI.WebControls.BaseValidator.ErrorMessage"/> property to specify different messages
   for the <see cref="System.Web.UI.WebControls.ValidationSummary"/> control and the <see cref="System.Web.UI.WebControls.RequiredFieldValidator"/> and <see cref="System.Web.UI.WebControls.CompareValidator"/>
   controls.</para>
			<codelink SampleID="Classic BaseValidator Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.ValidationSummary"/>
		<seealso cref="System.Web.UI.WebControls.Label.Text"/>
		<seealso cref="System.String.Empty" qualify="true"/>
	</doc><doc for="BaseValidator.ForeColor">
		<summary>
			<para> Gets or sets the color of
      the message displayed when validation fails.</para>
		</summary>
		<value>
			<para>A <see cref="System.Drawing.Color" qualify="true"/> object
   that represents
   the color of the message displayed when validation fails. The default color is
<see cref="System.Drawing.Color.Red" qualify="true"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.ForeColor"/> property to specify a custom
   text color for the message displayed when validation fails.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Web.UI.WebControls.BaseValidator.ForeColor"/> property to display the validation message in
   blue.</para>
			<codelink SampleID="Classic BaseValidator.ForeColor Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Drawing.Color" qualify="true"/>
	</doc><doc for="BaseValidator.Validate">
		<summary>
			<para>Performs validation on the associated input control and updates the <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.Validate"/> 
method to perform validation on the associated input control.
This method allows you to programmatically perform validation on the input
control. The <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property is
automatically updated with the validation results.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Web.UI.WebControls.BaseValidator.Validate"/> method to perform validation when the
<see langword="Submit"/> button is clicked.</para>
			<codelink SampleID="Classic BaseValidator Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.IsValid"/>
	</doc><doc for="BaseValidator.GetValidationProperty">
		<summary>
			<para>Helper function to get the validation
      property of a control (if it exists).</para>
		</summary>
		<param name="component">An <see cref="System.Object" qualify="true"/> that represents the control to get the validation property of.</param>
		<returns>
			<para>A <see cref="System.ComponentModel.PropertyDescriptor" qualify="true"/> that contains the
   validation property of the control.</para>
		</returns>
		<remarks>
			<para> The <see cref="System.Web.UI.WebControls.BaseValidator.GetValidationProperty"/> method is a helper
   function that gets the validation property of the specified input
   control.</para>
			<note type="note">
   This method is primarily used by
   control developers.
   
</note>
		</remarks>
		<seealso cref="System.ComponentModel.PropertyDescriptor" qualify="true"/>
	</doc><doc for="BaseValidator.GetControlRenderID">
		<summary>
			<para> Gets the client ID of the specified control.</para>
		</summary>
		<param name="name">The name of the control to get the client ID.</param>
		<returns>
			<para>The client ID of the specified control.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.GetControlRenderID"/> method to get the
   client ID of the specified control.</para>
			<note type="note">
   This method is primarily used by
   control developers.
</note>
		</remarks>
	</doc><doc for="BaseValidator.GetControlValidationValue">
		<summary>
			<para> Gets the value associated with the specified input control.</para>
		</summary>
		<param name="name">The name of the input control to get the value from.</param>
		<returns>
			<para>The value associated with the specified input control.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.GetControlValidationValue"/> method to get the
   value associated with the specified input control, regardless of the control type.
   For example, you can use this method to get the value in a <see cref="System.Web.UI.WebControls.TextBox"/> control, as well as the value of the selected
   item from a <see cref="System.Web.UI.WebControls.ListBox"/> control.</para>
			<note type="note">
   This method is primarily used by
   control developers.
   
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.TextBox"/>
		<seealso cref="System.Web.UI.WebControls.ListBox"/>
	</doc><doc for="BaseValidator.RegisterValidatorCommonScript">
		<summary>
			<para> Registers code on the page for client-side validation.
      </para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript"/> method to
   register code on the page to perform client-side validation. </para>
			<note type="inheritinfo">
   
   Call this method in the <see cref="System.Web.UI.Control.PreRender" qualify="true"/> event handler of the derived class to register the code that performs client-side
   validation.
</note>
			<note type="note">
   This method is primarily used by
   control developers.
   
</note>
		</remarks>
		<seealso cref="System.Web.UI.Control.PreRender" qualify="true"/>
	</doc><doc for="BaseValidator.BaseValidator">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.WebControls.BaseValidator"/> class.</para>
		</summary>
		<remarks>
			<para>This constructor is not called directly. Validation controls that inherit from
      this class can call this constructor from their own constructors to initialize the base properties.</para>
			<para>The following table shows initial property values for an instance of <see cref="System.Web.UI.WebControls.BaseValidator"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term> IsValid</term>
					<description><see langword="true"/></description>
				</item>
				<item>
					<term> ForeColor</term>
					<description><see cref="System.Drawing.Color.Red" qualify="true"/></description>
				</item>
			</list>
		</remarks>
		<seealso cref="M:System.Web.UI.WebControls.CompareValidator.#ctor"/>
		<seealso cref="M:System.Web.UI.WebControls.CustomValidator.#ctor"/>
		<seealso cref="M:System.Web.UI.WebControls.RangeValidator.#ctor"/>
		<seealso cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor"/>
		<seealso cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor"/>
	</doc><doc for="BaseValidator.OnUnload">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="BaseValidator.EvaluateIsValid">
		<summary>
			<para> When overridden in a derived class, this method contains the code to determine
      whether the value in the input
      control is valid.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the value
   in the input control is valid; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.EvaluateIsValid"/> method to determine
   whether the value in the input control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/>
   property is valid. </para>
			<note type="inheritinfo">
   You
   must implement this method in a derived class and return whether the value
   in the input control is valid.
</note>
			<note type="note">
   This method is primarily used by
   control
   developers.
   
</note>
		</remarks>
	</doc><doc for="BaseValidator.RegisterValidatorDeclaration">
		<overload>
			<para> Registers an ECMAScript array declaration used on the page by client-side code.</para>
		</overload>
		<summary>
			<para>Registers an ECMAScript array declaration using the array name, <see langword="Page_Validators"/>.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration"/> method to register an ECMAScript array declaration using the array name, <see langword="Page_Validators"/>.</para>
			<note type="note">
   This method is primarily used by
   control developers.
   
</note>
		</remarks>
		<seealso cref="System.Web.UI.Page.RegisterArrayDeclaration" qualify="true"/>
	</doc><doc for="BaseValidator.ControlToValidate">
		<summary>
			<para>Gets or sets the input control to validate.</para>
		</summary>
		<value>
			<para> The input control to validate. The default value is
 <see cref="System.String.Empty" qualify="true"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property to specify the input 
 control to validate. This property must be set to the ID of an input control
 for all validation controls except for the <see cref="System.Web.UI.WebControls.CustomValidator"/> control, which can be left blank. If
 you do not specify a valid input control, an exception will be thrown when the
 page is rendered. The ID must refer to a control within the same container
 as the validation control. It must be in the same page or user control, or it
 must be in the same template of a templated control.</para>
			<para> 
 The standard controls that can
 be validated are <see cref="System.Web.UI.WebControls.TextBox"/>, <see cref="System.Web.UI.WebControls.ListBox"/>, <see cref="System.Web.UI.WebControls.DropDownList"/>, <see cref="System.Web.UI.WebControls.RadioButtonList"/>, <see cref="System.Web.UI.HtmlControls.HtmlInputText" qualify="true"/>, <see cref="System.Web.UI.HtmlControls.HtmlInputFile" qualify="true"/>, <see cref="System.Web.UI.HtmlControls.HtmlSelect" qualify="true"/> and <see cref="System.Web.UI.HtmlControls.HtmlTextArea" qualify="true"/>.</para>
			<note type="note">
 
 For an input control to be validated, the <see cref="System.Web.UI.ValidationPropertyAttribute" qualify="true"/> must be applied to
 the control.
</note>
			<note type="note">
 All validation controls, except the <see cref="System.Web.UI.WebControls.RequiredFieldValidator"/> control,
 will pass validation if
 the input control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property contains no text.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/>
property to specify the input control to validate.</para>
			<codelink SampleID="Classic BaseValidator Example" SnippetID="1"/>
		</example>
		<seealso cref="System.String.Empty" qualify="true"/>
		<seealso cref="System.Web.UI.WebControls.RequiredFieldValidator"/>
	</doc><doc for="BaseValidator.Display">
		<summary>
			<para>Gets or sets the display behavior of the error message in a
 validation control.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Web.UI.WebControls.ValidatorDisplay"/> values. The default value
 is <see langword="Static"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The specified value is not one of the <see cref="System.Web.UI.WebControls.ValidatorDisplay"/> values.</exception>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.Display"/> property to specify the
 display behavior of the error
 message
 in the
 validation control. The following table lists the different values that can be
 used.</para>
			<list type="table">
				<listheader>
					<term>Display Behavior</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="None"/></term>
					<description>The validation
 message is never displayed
 inline.</description>
				</item>
				<item>
					<term><see langword="Static"/></term>
					<description>Space for the validation message is allocated in the page layout.</description>
				</item>
				<item>
					<term><see langword="Dynamic"/></term>
					<description>Space for the validation message is dynamically added to the page if validation
 fails.</description>
				</item>
			</list>
			<note type="note">
 The display behavior depends on whether
 client-side validation is performed. If client-side validation is
 not active (because the browser does not support it or because it has
 been disabled by using the <see cref="System.Web.UI.Page.ClientTarget" qualify="true"/>
 
 page directive or <see cref="System.Web.UI.WebControls.BaseValidator.EnableClientScript"/> property),
<see langword="ValidatorDisplay.Static"/> and 
<see langword="ValidatorDisplay.Dynamic"/> behave the same way: the 
 error message only
 takes up space if it is displayed. The ability to dynamically allocate space for the message
 when it is not being displayed (<see langword="ValidatorDisplay.Static"/>
 
 ) only works with client-side validation.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
 <see cref="System.Web.UI.WebControls.BaseValidator.Display"/> property to specify
 that space for the validation message is added to the Web page dynamically
 when validation fails.</para>
			<codelink SampleID="Classic BaseValidator.Display Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.ValidatorDisplay"/>
	</doc><doc for="BaseValidator.CheckControlValidationProperty">
		<summary>
			<para> Helper function that verifies whether the
 specified control is on the
 page and contains validation properties.</para>
		</summary>
		<param name="name">The control to verify.</param>
		<param name=" propertyName">Provides additional text to describe the source of the exception, if an exception is thrown from using this method. </param>
		<exception cref="System.Web.HttpException"><para>The specified control is not found.</para><para>-or-</para><para>The specified control does not have a <see langword="ValidationProperty"/> attribute associated with it; therefore, it cannot be validated with a validation control.</para></exception>
		<remarks>
			<para> The <see cref="System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty"/> method is a helper function
 primarily used by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid"/> method to verify whether the specified control is on the page and contains validation properties. This method
 does not return a value to report the result. Instead, it throws an exception when verification fails. </para>
			<note type="note">
 This method is primarily used by control
 developers.
 
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid"/>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.PropertiesValid"/>
	</doc><doc for="BaseValidator.ControlPropertiesValid">
		<summary>
			<para>Helper function that determines whether the control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property is a
 valid control.</para>
		</summary>
		<returns>
			<para><see langword="true "/>if the
 control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property is a valid control; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.Web.HttpException"><para>No value is specified for the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property.</para>
			<para>-or-</para>
			<para>The input control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property is not found on the page.</para>
			<para>-or-</para>
			<para>The input control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property does not have a <see langword="ValidationProperty"/> attribute associated with it; therefore, it cannot be validated with a validation control.</para></exception>
		<remarks>
			<para> The <see cref="System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid"/> method is a helper function
 primarily used by the <see cref="System.Web.UI.WebControls.BaseValidator.PropertiesValid"/> property to determine
 whether the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property contains a
 valid input control. To be a valid input control, the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property must be set to
 some value and that value must be a control on the page. </para>
			<note type="note">
 This method is primarily used by
 control developers.
</note>
		</remarks>
	</doc><doc for="BaseValidator.Enabled">
		<summary>
			<para> Gets or sets a value that indicates whether the validation control is
      enabled.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the validation control is enabled; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.Enabled"/> property to specify
   whether the validation control is enabled. You can programmatically disable the validation control by
   setting this property to <see langword="false"/>.</para>
			<para> Setting either the <see cref="System.Web.UI.Control.Visible" qualify="true"/> or <see cref="System.Web.UI.WebControls.BaseValidator.Enabled"/> properties to
<see langword="false"/> will prevent
validation from being performed. This causes the <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property to always evaluate to
<see langword="true"/>.</para>
			<para> The <see cref="System.Web.UI.WebControls.BaseValidator.Enabled"/> property is slightly different from
<see cref="System.Web.UI.Control.Visible" qualify="true"/> property. If 
the <see cref="System.Web.UI.Control.Visible" qualify="true"/>
property for a validation control is set to
<see langword="true"/>, but the <see cref="System.Web.UI.WebControls.BaseValidator.Enabled"/> property is set to 
<see langword=" false"/>, the validation control 
is still rendered for client-side validation, but in a disabled
state. You can then re-enable the validation control on the
client by using DHTML script.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
   <see cref="System.Web.UI.WebControls.BaseValidator.Enabled"/> property to enable or disable the
      validation controls on the Web page.</para>
			<codelink SampleID="Classic BaseValidator.Enabled Example" SnippetID="1"/>
		</example>
	</doc><doc for="BaseValidator.IsValid">
		<summary>
			<para>Gets or sets a value that indicates whether the associated input control passes
      validation.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the associated input control
   passes validation; otherwise, <see langword="false"/>. The default value is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property to
   determine whether the associated input control passes validation.</para>
			<note type="caution">
   Since the default value of this
   property is <see langword="true"/>, it will return <see langword="true"/> if you query this property before validation
   is performed. For example, this might occur if you attempt to use this
   property in the <see cref="System.Web.UI.Control.Load" qualify="true"/>
   
   event of page.
</note>
			<para> The <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property is
only evaluated when the <see cref="System.Web.UI.WebControls.BaseValidator.Validate"/> method is called. You
can call the <see cref="System.Web.UI.WebControls.BaseValidator.Validate"/> method for each validation control
on the page individually, or call all of them at once by using the
<see cref="System.Web.UI.Page.Validate" qualify="true"/> 
method.
Button controls with their <see langword="CausesValidation"/> property set
to <see langword="true"/> will also call the <see cref="System.Web.UI.Page.Validate" qualify="true"/>
method.</para>
			<note type="note">
   It is possible to change the value of this
   property manually after validation has taken place. This allows you to override the validation result, if
   necessary.
</note>
			<para> The <see cref="System.Web.UI.Page.IsValid" qualify="true"/> property for the page is set
to <see langword="true"/> only if the <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property for each validation control on
the page is also set to <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property to determine whether the
   associated input control passes validation.</para>
			<codelink SampleID="BaseValidatorIsValid" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/>
		<seealso cref="System.Web.UI.Control.Load" qualify="true"/>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.Validate"/>
		<seealso cref="System.Web.UI.Page.Validate" qualify="true"/>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.IsValid"/>
		<seealso cref="System.Web.UI.Page.IsValid" qualify="true"/>
	</doc><doc for="BaseValidator">
		<summary>
			<para> Serves as the abstract base
      class for validation controls.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Web.UI.WebControls.BaseValidator"/> class provides the core implementation for all
   validation controls.</para>
			<para>Validation is performed when a button control, such
   a <see langword="Button"/> or <see langword="LinkButton"/>, is clicked. The
   following table lists the button controls that invoke validation. </para>
			<list type="table">
				<listheader>
					<term>Server Control</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="System.Web.UI.WebControls.Button"/></term>
					<description> Creates a push button Web server control.</description>
				</item>
				<item>
					<term><see cref="System.Web.UI.HtmlControls.HtmlButton"/></term>
					<description> Creates a button HTML server control that allows you to programmatically
   access the <see langword="&lt;button&gt;"/> HTML
   element.</description>
				</item>
				<item>
					<term><see cref="System.Web.UI.HtmlControls.HtmlInputButton"/></term>
					<description> Creates a button HTML server control
   that allows you to programmatically access
   the <see langword="&lt;input type=button&gt;"/>, <see langword="&lt;input type=submit&gt;"/>, or <see langword="&lt;input type=reset&gt; "/> HTML elements.</description>
				</item>
				<item>
					<term><see cref="System.Web.UI.HtmlControls.HtmlInputImage"/></term>
					<description> Creates a button HTML server control that allows you to programmatically
   access the <see langword="&lt;input type=image&gt;"/>
   HTML element.</description>
				</item>
				<item>
					<term><see cref="System.Web.UI.WebControls.ImageButton"/></term>
					<description> Creates a button Web server control that displays an image.</description>
				</item>
				<item>
					<term><see cref="System.Web.UI.WebControls.LinkButton"/></term>
					<description> Creates a button Web server control with the
   appearance of a
   hyperlink.</description>
				</item>
			</list>
			<para>You can also manually perform validation by using the
<see cref="System.Web.UI.Page.Validate" qualify="true"/> 
method. </para>
			<note type="note">
   If you use the <see cref="System.Web.UI.Page.IsValid" qualify="true"/>
   property in the <see langword="Page_Load"/> method, you must first explicitly call
   the <see cref="System.Web.UI.Page.Validate" qualify="true"/> method. Since
   validation occurs after the
<see cref="System.Web.UI.Control.Load" qualify="true"/> event for the 
   page, but before the event handler for the
<see langword="Click"/> or <see langword="Command"/> events, the <see cref="System.Web.UI.Page.IsValid" qualify="true"/> property is not updated until the 
<see cref="System.Web.UI.Page.Validate" qualify="true"/> method is called. As an 
   alternative, you can place
   your code in the event handler for the
<see langword="Click"/> or <see langword="Command"/> event instead of 
<see langword="Page_Load"/> method.
</note>
			<para>Validation controls always validate the associated input control on the
   server. Validation controls also have complete client-side implementation that allow DHTML supported browsers (such as Internet Explorer version 4.0 and
   later) to perform validation on the client. Client-side validation enhances the validation process by
   checking user input before it is sent to the server. This allows
   errors to be detected on the client before the form
   is submitted, avoiding the round-trip of information necessary for server-side validation. </para>
			<para>Multiple validation controls can be used with an
   individual input control to validate different criteria. For example, you can apply
   multiple validation controls on a <see cref="System.Web.UI.WebControls.TextBox"/> control that allow
   the user to enter the quantity of items to add to a shopping cart. You can use a
<see cref="System.Web.UI.WebControls.RangeValidator"/> control 
   to ensure that the value specified is within a set range and a <see cref="System.Web.UI.WebControls.RequiredFieldValidator"/> control
   to ensure that the user
   enters a value into the <see cref="System.Web.UI.WebControls.TextBox"/>
   control. </para>
			<para>If an input control fails validation, the text specified
   by the <see cref="System.Web.UI.WebControls.BaseValidator.ErrorMessage"/> property is displayed
   in the validation control. This text is also displayed in the <see cref="System.Web.UI.WebControls.ValidationSummary"/> control, if one is placed on the Web
   page. </para>
			<para>It is possible to display different text for the
   validation control and the <see cref="System.Web.UI.WebControls.ValidationSummary"/>
   control. Use the <see cref="System.Web.UI.WebControls.Label.Text"/>
   property to specify the text to display in the validation control. The text specified
   by the <see cref="System.Web.UI.WebControls.BaseValidator.ErrorMessage"/> property is always used
   in the <see cref="System.Web.UI.WebControls.ValidationSummary"/> control. </para>
			<note type="inheritinfo">
   When you inherit from the <see cref="System.Web.UI.WebControls.BaseValidator"/> class, you must override the
   following member: <see cref="System.Web.UI.WebControls.BaseValidator.EvaluateIsValid"/>.
</note>
			<para>For a list of initial property values for an instance of <see cref="System.Web.UI.WebControls.BaseValidator"/>, see the <see cref="System.Web.UI.WebControls.BaseValidator()"/> constructor.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use multiple
      validation controls to verify that the user enters a valid value in a
      <see cref="System.Web.UI.WebControls.TextBox"/>
   control.</para>
			<codelink SampleID="Classic BaseValidator Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.CompareValidator"/>
		<seealso cref="System.Web.UI.WebControls.CustomValidator"/>
		<seealso cref="System.Web.UI.WebControls.RangeValidator"/>
		<seealso cref="System.Web.UI.WebControls.RegularExpressionValidator"/>
		<seealso cref="System.Web.UI.WebControls.RequiredFieldValidator"/>
		<seealso cref="System.Web.UI.WebControls.ValidationSummary"/>
	</doc><doc for="BaseValidator.EnableClientScript">
		<summary>
			<para>Gets or sets a value indicating whether client-side validation is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if
   client-side validation is enabled; otherwise,
<see langword="false"/>. The default value is 
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.EnableClientScript"/> property to specify whether
   client-side validation is enabled.</para>
			<para> Validation controls always perform validation on
   the server. They also have complete client-side implementation that allow
   DHTML supported browsers (such as Internet Explorer 4.0 and
   later) to perform validation on the client. Client-side validation enhances the
   validation process by checking user input before it is sent to
   the server. This allows errors to be detected on the client before the form is
   submitted, avoiding the round-trip of information necessary for server-side
   validation.</para>
			<para>By default, this value is set to
<see langword="true"/> , which enables client-side validation
   if the browser supports it. You can disable client-side validation on a
   control-by-control basis. This is useful if dynamic updating on the client creates problems with
   the layout of the page, or if you want to execute some server code before validation
   takes place.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
      <see cref="System.Web.UI.WebControls.BaseValidator.EnableClientScript"/> property
      to disable client-side validation so that the random numbers can be generated on the
      server.</para>
			<codelink SampleID="Classic BaseValidator Example" SnippetID="1"/>
		</example>
	</doc><doc for="BaseValidator.RenderUplevel">
		<summary>
			<para> Gets a value that indicates whether the client's browser
      supports uplevel rendering.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the browser supports uplevel
   rendering; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.RenderUplevel"/> property to determine whether the client's browser supports uplevel rendering. For
   a browser to support uplevel rendering, it must support Internet Explorer Document Object
   Model (DOM) version 4 or later
   and ECMAScript version 1.2 or later.</para>
			<note type="note">
   This property is primarily used
   by control developers.
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel"/>
	</doc><doc for="BaseValidator.DetermineRenderUplevel">
		<summary>
			<para> Helper function that determines whether the validator control can be rendered
      for an uplevel browser.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the validator control can be rendered for an uplevel
   browser; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> The <see cref="System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel"/> method is a helper function
   used primarily by the <see cref="System.Web.UI.WebControls.BaseValidator.RenderUplevel"/> property
   to determine whether the client's browser supports uplevel rendering. For a
   browser to support uplevel rendering, it must support Internet Explorer Document Object Model
   (DOM) version 4 or later and ECMAScript version 1.2 or later.</para>
			<note type="note">
   This method is primarily used by
   control developers.
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.RenderUplevel"/>
	</doc><doc for="BaseValidator.PropertiesValid">
		<summary>
			<para> Gets a value that indicates whether the control
      specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property is a valid control.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the control
   specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property is a valid
   control, otherwise, <see langword="false"/>.</para>
		</value>
		<exception cref="System.Web.HttpException"><para>No value is specified in the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property.</para>
			<para>-or-</para>
			<para>The input control specified by the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property is not found on the page.</para></exception>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseValidator.PropertiesValid"/> property to determine
   whether the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property contains a
   valid input control. To be a valid input control, the
<see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> 
property must set to a control
on the page. </para>
			<note type="note">
   This property is primarily
   used by control developers.
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid"/>
		<seealso cref="System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty"/>
	</doc>
</docs>
