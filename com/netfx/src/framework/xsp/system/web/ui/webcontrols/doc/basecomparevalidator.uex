<docs>
	<doc for="BaseCompareValidator.AddAttributesToRender">
		<summary>
    AddAttributesToRender method
 </summary>
	</doc>
	<doc for="BaseCompareValidator.GetDateElementOrder">
		<summary>
    Return the order of date elements for the current culture
 </summary>
	</doc>
	<doc for="BaseCompareValidator.DetermineRenderUplevel">
		<nodoc/>
		<summary>
			<para>Determines whether the validation control can be rendered
      for an uplevel browser.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the validation control can be
   rendered for an uplevel browser; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="BaseCompareValidator">
		<summary>
			<para> Serves as the abstract base
      class for validation controls that perform typed comparisons.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Web.UI.WebControls.BaseCompareValidator"/> class is inherited by validation
   controls that compare values, such as the <see cref="System.Web.UI.WebControls.CompareValidator"/> and <see cref="System.Web.UI.WebControls.RangeValidator"/> controls,
   to provide basic common functionality.</para>
			<para> Use the <see cref="System.Web.UI.WebControls.BaseCompareValidator.Type"/>
property to specify the data
type that that the values are converted to before being compared.</para>
			<note type="note">
   If the value of the
   input control being validated cannot be converted to the specified data type,
   validation fails. The <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property of the
   validation control is set to <see langword="false"/>.
</note>
			<para>The <see cref="System.Web.UI.WebControls.BaseCompareValidator"/>
class also contains several static properties and methods that are useful when
performing comparison
validations. You can
determine whether a string can be converted to a specific
data type by using the <see cref="System.Web.UI.WebControls.BaseCompareValidator.CanConvert"/>
method. The maximum year that can be represented by a two-digit
year is contained in the <see cref="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear"/> property.
The <see cref="System.Web.UI.WebControls.BaseCompareValidator.GetFullYear"/>
method allows you to convert a two-digit year to a
four-digit
year. </para>
			<para> For additional information on validation controls, see
<see cref="System.Web.UI.WebControls.BaseValidator"/>.</para>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.CompareValidator"/>
		<seealso cref="System.Web.UI.WebControls.RangeValidator"/>
		<seealso cref="System.Web.UI.WebControls.BaseValidator"/>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.Type"/>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.CanConvert"/>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear"/>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.GetFullYear"/>
	</doc>
	<doc for="BaseCompareValidator.CutoffYear">
		<summary>
			<para>Gets the maximum year that can be represented by a two-digit year.</para>
		</summary>
		<value>
			<para>The maximum year that can be represented by a two-digit year.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear"/> property
   to determine the maximum year that
   can be represented by a two-digit year in a 100-year range. For
   example, if this property contains the value <see langword="2029"/>, you can represent the years 1930 to 2029 by
   using a two-digit year. The two-digit year 30 is interpreted as 1930, while 29
   is interpreted as 2029.
   You cannot change the value of this property
   directly; however, you can change the maximum year that can be represented by a
   two-digit year by setting the <see cref="System.Globalization.Calendar.TwoDigitYearMax" qualify="true"/>
   property. </para>
			<note type="note">
   Since this property is
<see langword="static"/> 
, its value is shared with all instances
of a derived class. You can also access the property without
creating an instance of the class by qualifying the property name along with the class
name. For example, <see langword="BaseCompareValidator.CutoffYear"/>.
</note>
		</remarks>
		<seealso cref="System.Globalization.Calendar" qualify="true"/>
		<seealso cref="System.Globalization.Calendar.TwoDigitYearMax" qualify="true"/>
	</doc>
	<doc for="BaseCompareValidator.Type">
		<summary>
			<para> Gets or sets the data type that the values being compared
      are converted to before the comparison is made.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Web.UI.WebControls.ValidationDataType"/> enumeration values.
   The default value is <see langword="String"/>.</para>
		</value>
		<exception cref="System.ArgumentException">The specified data type is not one of the <see cref="System.Web.UI.WebControls.ValidationDataType"/> values. </exception>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseCompareValidator.Type"/> property
   to specify the data type used for comparison. The <see cref="System.Web.UI.WebControls.BaseCompareValidator.Type"/> property
   is used differently by the various comparison validation controls. For example, in
   the <see cref="System.Web.UI.WebControls.RangeValidator"/> control,
   all
   values being compared (the upper bound, lower bound, and value of the
   input control) are converted to the specified data type before any comparison is
   performed. However, if you use a <see cref="System.Web.UI.WebControls.CompareValidator"/> control and set its <see cref="System.Web.UI.WebControls.CompareValidator.Operator"/> property to
<see langword="ValidationCompareOperator.DataTypeCheck"/>, only the 
   value of the input control is converted to the specified data type. </para>
			<note type="note">
   If the value of the input control associated
   with the validation control cannot be converted to the specified data type,
   validation fails. The <see cref="System.Web.UI.WebControls.BaseValidator.IsValid"/> property of the
   validation control is set to <see langword="false"/>.
</note>
			<para> The following table lists the values that you can use
   for the <see cref="System.Web.UI.WebControls.BaseCompareValidator.Type"/>
   
   property. </para>
			<list type="table">
				<listheader>
					<term>Data Type</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see langword="String"/></term>
					<description>Specifies a string data type.</description>
				</item>
				<item>
					<term><see langword="Integer"/></term>
					<description>Specifies a 32-bit signed integer data type.</description>
				</item>
				<item>
					<term><see langword="Double"/></term>
					<description> Specifies a double-precision floating-point number data
   type.</description>
				</item>
				<item>
					<term><see langword="Date"/></term>
					<description>Specifies a date data type.</description>
				</item>
				<item>
					<term><see langword="Currency"/></term>
					<description>Specifies a monetary data
   type.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the <see cref="System.Web.UI.WebControls.BaseCompareValidator.Type"/> property to
   specify the data type that values being compared are converted to before the comparison is made. </para>
			<codelink SampleID="Classic CompareValidator Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.ValidationDataType"/>
	</doc>
	<doc for="BaseCompareValidator.GetFullYear">
		<summary>
			<para>Generates the four-digit year representation of the specified two-digit year.</para>
		</summary>
		<param name="shortYear">A two-digit year.</param>
		<returns>
			<para>The four-digit year representation of the specified two-digit year.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseCompareValidator.GetFullYear"/> method to
   generate the four-digit year representation of the specified two-digit year. The
   four-digit year representation depends on the value of the <see cref="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear"/> property, which contains the
   maximum year that can be represented by a two-digit year in a 100-year range. For
   example, if the <see cref="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear"/> property contains the
   value <see langword="2029"/>, the <see cref="System.Web.UI.WebControls.BaseCompareValidator.GetFullYear"/>
   method returns a year between 1930 and 2029. The two-digit year 30 is interpreted as
   1930, while 29 is interpreted as 2029. You can change the maximum year that can
   be represented by a two-digit year by setting the <see cref="System.Globalization.Calendar.TwoDigitYearMax" qualify="true"/>
   property.</para>
			<note type="note">
   Since this method is <see langword="static"/>, you can use it without creating an
   instance of the class by qualifying the method name along with the class name.
   For example, <see langword="BaseCompareValidator.GetFullYear"/>.
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear"/>
		<seealso cref="System.Globalization.Calendar" qualify="true"/>
		<seealso cref="System.Globalization.Calendar.TwoDigitYearMax" qualify="true"/>
	</doc>
	<doc for="BaseCompareValidator.Convert">
		<summary>
			<para> Converts the specified text into an object of the specified data type.</para>
		</summary>
		<param name="text">The text to convert.</param>
		<param name=" type">One of the <see cref="System.Web.UI.WebControls.ValidationDataType"/> values.</param>
		<param name=" value">When this method returns, contains an object with the conversion result. This parameter is passed uninitialized.</param>
		<returns>
			<para><see langword="true"/> if the conversion is successful;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Web.UI.WebControls.BaseCompareValidator.Convert"/> method is used 
   to convert text into an object of the specified data type. Although
   the method returns <see langword="true"/> or <see langword="false"/> to
   indicate whether the conversion is successful, the converted
   value is stored in the <paramref name="value"/> parameter. </para>
			<note type="note">
   If the conversion is
   unsuccessful, the <paramref name="value"/> parameter is set to
<see langword="null"/>.
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.ValidationDataType"/>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.Compare"/>
	</doc>
	<doc for="BaseCompareValidator.Compare">
		<summary>
			<para>Compares two strings using the specified operator and validation data type.</para>
		</summary>
		<param name="leftText">The value on the left side of the operator.</param>
		<param name=" rightText">The value on the right side of the operator.</param>
		<param name=" op">One of the <see cref="System.Web.UI.WebControls.ValidationCompareOperator"/> values.</param>
		<param name=" type">One of the <see cref="System.Web.UI.WebControls.ValidationDataType"/> values. </param>
		<returns>
			<para><see langword="true"/> if 
<paramref name="leftValue"/> relates to <paramref name="rightValue"/> in the manner specified by <paramref name="operator"/>; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Web.UI.WebControls.BaseCompareValidator.Compare"/> method is used 
   to test whether <paramref name="leftText"/> relates to <paramref name="rightText "/>in the
   manner specified by <paramref name="op"/>. The <paramref name="type"/> parameter specifies the data
   type of the values being compared. </para>
			<note type="note">
   
   If the <paramref name="op"/> parameter is set
   to <see langword="ValidationCompareOperator.DataTypeCheck"/>, this method
   tests only <paramref name="leftText"/> for the data type
   specified by the <paramref name="type"/> parameter. The
<paramref name="rightText"/> parameter is ignored.
</note>
		</remarks>
		<seealso cref="System.Web.UI.WebControls.ValidationCompareOperator"/>
		<seealso cref="System.Web.UI.WebControls.ValidationDataType"/>
		<seealso cref="System.Web.UI.WebControls.BaseCompareValidator.Convert"/>
	</doc>
	<doc for="BaseCompareValidator.CanConvert">
		<summary>
			<para>Determines whether the specified string can be converted to the specified data type.</para>
		</summary>
		<param name="text">The string to test. </param>
		<param name=" type">One of the <see cref="System.Web.UI.WebControls.ValidationDataType"/> enumeration values.</param>
		<returns>
			<para><see langword="true"/> if the specified data string can
   be converted to the specified data type; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.BaseCompareValidator.CanConvert"/> method to
   determine whether
   the specified string can be converted to the specified data type. This
   method is commonly used to test whether a string can be converted to a
   compatible data type before performing an operation that depends on that data
   type.</para>
			<note type="note">
   Since this method is
<see langword="static"/> , you can use 
   it without creating an instance of the class by qualifying the method
   name along with the class name. For example,
<see langword="BaseCompareValidator.CanConvert"/>.
</note>
		</remarks>
		<example>
			<codelink SampleID="BaseCompareValidatorCanConvert" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.ValidationDataType"/>
	</doc>
</docs>
