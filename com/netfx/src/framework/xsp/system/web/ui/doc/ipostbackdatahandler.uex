<docs>
	<doc for="IPostBackDataHandler.LoadPostData">
		<summary>
			<para> When implemented by a class, processes post back data for an ASP.NET server control. </para>
		</summary>
		<param name="postDataKey">The key identifier for the control.</param>
		<param name=" postCollection">The collection of all incoming name values.</param>
		<returns>
			<para><see langword="true"/> if the server control's state changes as a result of the
   post back; otherwise <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> The Web Forms page framework tracks all the server control's that return
      true to this method call, then invokes the <see cref="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent"/> on those controls.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a server control implementing a version of
      the <see langword="LoadPostData"/> method.</para>
			<codelink SampleID="Classic IPostBackDataHandler.LoadPostData Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconreceivingpostbackdatachangednotifications"/>
		<keyword term="loading post backdata to a server control"/>
		<keyword term="postback data"/>
	</doc><doc for="IPostBackDataHandler">
		<summary>
			<para> Defines methods that ASP.NET server controls must implement to
      automatically load post back data.</para>
		</summary>
		<remarks>
			<para> If you want a server control you design to examine form data
      that is posted back to the server by the client, you must implement the
   <see langword="IPostBackDataHandler"/> interface. The
      contract that this interface defines allows a server control to determine
      whether its state should be altered as a result of the post back, and to raise
      the appropriate events. For more information, see <see topic="cpconreceivingpostbackdatachangednotifications"/>
      
      .</para>
		</remarks>
		<example>
			<para>The following example demonstrates a custom text box
      server control that implements the <see langword="IPostBackDataHandler"/>
      interface. The <see langword="Text"/> property is changed as a result of the post
      back and the server control raises a text changed event after post-back data has
      been loaded.</para>
			<codelink SampleID="Classic IPostBackDataHandler Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconpostbackdataprocessingsample"/>
		<seealso topic="cpconreceivingpostbackdatachangednotifications"/>
		<keyword term="postback data"/>
		<keyword term="notifications, receiving postback"/>
		<keyword term="receiving postback notifications"/>
		<keyword term="ASP.NET server controls, postback notifications"/>
		<keyword term="server controls, postback notifications"/>
	</doc><doc for="IPostBackDataHandler.RaisePostDataChangedEvent">
		<summary>
			<para>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the
      control has changed.</para>
		</summary>
		<remarks>
			<para>Change events for the server control that implements
      this interface, if any, are raised from this method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how a server control can implement the
   <see langword="RaisePostDataChangedEvent"/> method.</para>
			<codelink SampleID="Classic IPostBackDataHandler.RaisePostDataChangedEvent Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconreceivingpostbackdatachangednotifications"/>
		<keyword term="ASP.NET server controls, postback notification"/>
		<keyword term="server controls, postback notification"/>
		<keyword term="notification of postback "/>
		<keyword term="receiving postback notifications"/>
		<keyword term="postback data"/>
	</doc></docs>
