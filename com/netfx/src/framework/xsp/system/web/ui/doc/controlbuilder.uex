<docs>
	<doc for="ControlBuilder.SubBuilders">
		<summary>
			<para>Gets an array of builders that represents the current control's children.</para>
		</summary>
		<value>
			<para>The array of builders.</para>
		</value>
	</doc>
	<doc for="ControlBuilder.TemplatesSetter">
		<summary>
			<para>Gets any template information associated with the server control to be 
       built.</para>
		</summary>
		<value>
			<para>The template information for the current server control.</para>
		</value>
	</doc>
	<doc for="ControlBuilder.BuildChildren">
		<summary>
			<para>Enumerates through the current <see cref="System.Web.UI.ControlBuilder"/> object's array of child 
    controls and builds them. If during enumeration a string is
    encountered, this method creates a <see cref="System.Web.UI.LiteralControl"/>
    object to represent that string. This method is used by RAD designers only.</para>
		</summary>
		<param name="parentObj">An object that represents the parent control to be built.</param>
	</doc>
	<doc for="BaseControlBuilder">
		<summary>
			<para>Provides a base set of functionality with which to build controls. In order 
       to build child controls, you must use the <see cref="System.Web.UI.ControlBuilder"/>
       class.</para>
		</summary>
		<seealso cref="System.Web.UI.ControlBuilder"/>
		<seealso cref="System.Web.UI.Control"/>
	</doc>
	<doc for="BaseControlBuilder.ComplexAttribSetter">
	</doc>
	<doc for="BaseControlBuilder.HasBody">
		<summary>
			<para>Determines if a control has both an opening and closing tag. </para>
		</summary>
		<returns>
			<para><see langword="true"/> if the control has an opening and closing tag; 
    otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="BaseControlBuilder.AppendSubBuilder">
		<summary>
			<para> Adds a secondary builder to the current control builder 
       when building a control.</para>
		</summary>
		<param name="subBuilder">The <see cref="System.Web.UI.ControlBuilder"/> object to add.</param>
	</doc>
	<doc for="BaseControlBuilder.AppendLiteralString">
		<summary>
			<para>Adds literal content to a control.</para>
		</summary>
		<param name="s">The content to add to the control.</param>
	</doc>
	<doc for="BaseControlBuilder.BuildObject">
		<summary>
			<para>Creates a Control object. This method is used by RAD designers.</para>
		</summary>
		<returns>
			<para>The Control object.</para>
		</returns>
	</doc>
	<doc for="BaseControlBuilder.InitObject">
		<summary>
			<para>Initializes the <see cref="System.Web.UI.Control"/> object. This method is used by RAD designers only.</para>
		</summary>
		<param name="obj">The control to be initialized.</param>
		<seealso cref="System.Web.UI.Control"/>
		<seealso cref="System.Object"/>
	</doc>
	<doc for="BaseControlBuilder.TagName">
		<summary>
			<para>Gets the tag name for the control to be built.</para>
		</summary>
		<value>
			<para>The tag name for the control.</para>
		</value>
	</doc>
	<doc for="BaseControlBuilder.PreprocessAttributes">
		<summary>
			<para>Parses all attributes in the the attribute collection. </para>
		</summary>
		<param name="attribs">The <see cref="System.Collections.IDictionary"/> object that contains the control's attributes.</param>
	</doc>
	<doc for="BaseControlBuilder.PreprocessAttribute">
		<summary>
			<para>Matches attribute names and values to properties on the Control. This information 
       is used when the control is built.</para>
		</summary>
		<param name="attribname">The attribute name.</param>
		<param name=" attribvalue">The value assigned to the attribute.</param>
	</doc>
	<doc for="ControlBuilder.InitObject">
		<summary>
			<para>Initializes the <see cref="System.Web.UI.Control"/> object. This method is used by RAD designers
   only.</para>
		</summary>
		<param name="obj">The object to be initialized.</param>
		<seealso cref="System.Web.UI.Control"/>
		<seealso cref="System.Object"/>
	</doc><doc for="BaseControlBuilder.NamingContainerType">
		<summary>
		</summary>
	</doc><doc for="ControlBuilder.AppendSubBuilder">
		<summary>
			<para>Adds builders to the <see cref="System.Web.UI.ControlBuilder"/> object for any child controls that
 belong to the container control.</para>
		</summary>
		<param name="subBuilder">The <see langword="ControlBuilder"/> object assigned to the child control.</param>
		<seealso cref="System.Web.UI.ControlBuilder"/>
	</doc><doc for="BaseControlBuilder.ControlType">
		<summary>
			<para>Gets the <see cref="System.Type"/> for the control to be created.</para>
		</summary>
		<value>
			<para>The <see cref="System.Type"/> for the control to be created.</para>
		</value>
		<seealso cref="System.Type"/>
	</doc><doc for="BaseControlBuilder.ID">
		<summary>
			<para>Gets or sets the identifier property for the control to be built.</para>
		</summary>
		<value>
			<para>The identifier property for the control.</para>
		</value>
	</doc><doc for="BaseControlBuilder.CloseControl">
		<summary>
			<para> Called by the parser to inform the builder that the parsing of the control is complete.</para>
		</summary>
	</doc><doc for="ControlBuilder">
		<summary>
			<para> Supports the page parser in building a control and the child controls it
 contains. </para>
		</summary>
		<remarks>
			<para> By default, every control on a page is associated with a
 default <see cref="System.Web.UI.ControlBuilder"/> class. This
 class adds a child control to the <see cref="System.Web.UI.Control.Controls"/> collection for every
 nested control that it encounters within the custom control tags. Additionally,
 it creates literal controls for the text located between nested control tags.
 You can override this default behavior by defining your own custom control
 builder class. This is done by applying a <see cref="System.Web.UI.ControlBuilderAttribute"/>
 
 
 to your control
 builder class as follows:</para>
			<c>[ControlBuilderAttribute(typeof(ControlBuilderType))]</c>
		</remarks>
		<example>
			<para> The following example creates a <see cref="System.Web.UI.WebControls.Table"/> control whose attributes and content are
 defined at the time the table is built. The following is the command line
 to use to build the executable.</para>
			<para lang="VB"><c>vbc /r:System.dll /r:System.Web.dll /r:System.Drawing.dll /t:library /out:myWebAppPath/bin/vb_mycontrolbuilder.dll myControlBuilder.vb</c>
			</para>
			<para lang="C#"><c>csc /t:library /out:myWebAppPath/bin/cs_mycontrolbuilder.dll myControlBuilder.cs</c>
			</para>
			<codelink SampleID="SystemWebUI_ControlBuilder_2" SnippetID="1"/>
			<para> 
The 
following example uses the previous custom control. In particular, it builds a table whose attributes
 and content are defined at runtime. Notice that, the values shown in the
<see langword="Register "/> 
directive reflect the previous command line.</para>
			<code lang="VB">&lt;%@ Register TagPrefix="custom" Assembly="vb_mycontrolbuilder" Namespace="CustomControls" %&gt;
&lt;html&gt;
&lt;body&gt;
 &lt;h4&gt;Using the ControlBuilder Class&lt;/h4&gt;

 &lt;form runat="server"&gt;
 &lt;custom:MyVB_CustomControl Rows="2" Columns="2" Title="VB Custom Control Table" runat="server"&gt;
 &lt;custom:MyCellVB CellID="r0c0" BackColor="magenta" Text="Hello"/&gt;
 &lt;custom:MyCellVB CellID="r0c1" BackColor="aqua" Text="Customer,"/&gt;
 &lt;custom:MyCellVB CellID="r1c0" BackColor="yellow" Text="How Are"/&gt;
 &lt;custom:MyCellVB CellID="r1c1" BackColor="red" Text="You?"/&gt;
 &lt;/custom:MyVB_CustomControl&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
			<code lang="C#">&lt;%@ Register TagPrefix="custom" Assembly="cs_mycontrolbuilder" Namespace="CustomControls" %&gt;
&lt;html&gt;
 &lt;body&gt;
 &lt;h4&gt;Using the ControlBuilder Class&lt;/h4&gt;

 &lt;form runat="server"&gt;
 &lt;custom:MyCS_CustomControl ID="csTableId" rows="2" columns="2" Title="C# Custom Control Table" runat=server&gt;
 &lt;custom:MyCell CellID="r0c0" BackColor="red" Text="Hello"/&gt;
 &lt;custom:MyCell CellID="r0c1" BackColor="yellow" Text="Customer,"/&gt;
 &lt;custom:MyCell CellID="r1c0" BackColor="aqua" Text="How Are"/&gt;
 &lt;custom:MyCell CellID="r1c1" BackColor="magenta" Text="You?"/&gt;
 &lt;/custom:MyCS_CustomControl&gt;
 &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code>
		</example>
		<seealso cref="System.Web.UI.Control"/>
		<seealso cref="System.Web.UI.Page"/>
		<seealso cref="System.Web.UI.ControlBuilderAttribute"/>
	</doc><doc for="BaseControlBuilder.FChildrenAsProperties">
		<summary>
			<para>Determines whether the control has a <see cref="System.Web.UI.ParseChildrenAttribute"/> with <see cref="System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties"/> set to 
<see langword="true."/>
			</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
 control has a <see cref="System.Web.UI.ParseChildrenAttribute"/> with <see cref="System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties"/> set to
<see langword="true"/>, otherwise <see langword="false"/> .</para>
		</value>
	</doc><doc for="BaseControlBuilder.FIsNonParserAccessor">
		<summary>
			<para>Determines whether the control implements the <see cref="System.Web.UI.IParserAccessor"/>
interface.</para>
		</summary>
		<value>
			<para><see langword="false"/> if the
 control implements the <see cref="System.Web.UI.IParserAccessor"/> interface, otherwise
<see langword="true"/>.</para>
		</value>
	</doc><doc for="ControlBuilder.HasAspCode">
		<summary>
			<para> Gets a value indicating whether the control contains any
 code blocks.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
 control contains at least one code block;
 otherwise, <see langword="false"/> .</para>
		</value>
		<seealso topic="cpconcodeblocks"/>
	</doc><doc for="BaseControlBuilder.InDesigner">
		<summary>
			<para>Returns whether the <see cref="System.Web.UI.ControlBuilder"/> is running in the designer.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the 
<see cref="System.Web.UI.ControlBuilder"/> is running in the designer; otherwise, 
<see langword="false"/> .</para>
		</value>
	</doc><doc for="BaseControlBuilder.CreateBuilderFromType">
		<summary>
			<para>Creates a <see cref="System.Web.UI.ControlBuilder"/> object for the specified tag.</para>
		</summary>
		<param name="parser">The <see cref="System.Web.UI.TemplateParser"/> object responsible for parsing the control.</param>
		<param name=" parentBuilder">The <see cref="System.Web.UI.ControlBuilder"/> object responsible for building the control.</param>
		<param name=" type">The <see cref="System.Type"/> assigned to the control that the builder will create.</param>
		<param name=" tagName">The name of the tag to be built. This allows the builder to support multiple tag types.</param>
		<param name=" id">The <see cref="System.Web.UI.ControlBuilder.ID"/> attribute assigned to the control.</param>
		<param name=" attribs">The <see cref="System.Collections.IDictionary"/> object that holds all the specified tag attributes.</param>
		<param name=" line">The source file line number for the specified control.</param>
		<param name=" sourceFileName">The name of the source file from which the control is to be created.</param>
		<returns>
			<para>The builder that is responsible for creating the control.</para>
		</returns>
	</doc><doc for="BaseControlBuilder.Init">
		<summary>
			<para>Initializes the control builder when a Web request is made.</para>
		</summary>
		<param name="parser">The <see cref="System.Web.UI.TemplateParser"/> object responsible for parsing the control.</param>
		<param name=" parentBuilder">The <see cref="System.Web.UI.ControlBuilder"/> object responsible for building the control.</param>
		<param name=" type">The <see cref="System.Type"/> assigned to the control that the builder will create.</param>
		<param name=" tagName">The name of the tag to be built. This allows the builder to support multiple tag types.</param>
		<param name=" id">The <see cref="System.Web.UI.ControlBuilder.ID"/> attribute assigned to the control.</param>
		<param name=" attribs">The <see cref="System.Collections.IDictionary"/> object that holds all the specified tag attributes.</param>
	</doc><doc for="BaseControlBuilder.HtmlDecodeLiterals">
		<summary>
			<para>Determines whether the literal string of an HTML control must be
 HTML decoded.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the HTML 
 control literal string is to be decoded; otherwise, <see langword="false"/>
 .</para>
		</returns>
		<remarks>
			<para>A literal string refers to the text between the opening and closing tag of an
 HTML control.</para>
		</remarks>
	</doc><doc for="BaseControlBuilder.NeedsTagInnerText">
		<summary>
			<para>Determines if the control builder needs to get its inner text. If so, the <see cref="System.Web.UI.ControlBuilder.SetTagInnerText"/> method must be called.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the control
 builder needs to get its inner text. The default is <see langword="false"/> .</para>
		</returns>
		<remarks>
 The inner text is the text between the opening and closing tags of the
 control.
</remarks>
	</doc><doc for="BaseControlBuilder.OnAppendToParentBuilder">
		<summary>
			<para> Notifies the <see cref="System.Web.UI.ControlBuilder"/> that it is being
 added to a parent control builder.</para>
		</summary>
		<param name="parentBuilder">The <see cref="System.Web.UI.ControlBuilder"/> object to which the current builder is added.</param>
	</doc><doc for="BaseControlBuilder.SetTagInnerText">
		<summary>
			<para>Provides the <see cref="System.Web.UI.ControlBuilder"/> with the inner text of the control
 tag.</para>
		</summary>
		<param name="text">The text to be provided.</param>
		<remarks>
			<para>This method is called only if <see cref="System.Web.UI.ControlBuilder.NeedsTagInnerText"/>previously
 returned <see langword="true"/>.</para>
		</remarks>
	</doc><doc for="BaseControlBuilder.Parser">
		<summary>
			<para>Gets the <see cref="System.Web.UI.TemplateParser"/> responsible for parsing the control.</para>
		</summary>
		<value>
			<para>The <see langword="TemplateParser"/> used to parse the control.</para>
		</value>
		<remarks>
			<para> This property retrieves 
      the <see langword="TemplateParser"/> responsible for parsing the control.</para>
		</remarks>
		<seealso cref="System.Web.UI.TemplateParser"/>
	</doc>
	<doc for="BaseControlBuilder.GetChildControlType">
		<summary>
			<para> Obtains the <see cref="System.Type"/> for the control's children.</para>
		</summary>
		<param name="tagName">The tag name of the child.</param>
		<param name=" attribs">An array of attributes contained in the child control.</param>
		<returns>
			<para>The <see cref="System.Type"/> of
   the specified control's child.</para>
		</returns>
		<example>
			<codelink SampleID="ControlBuilderSamples_1" SnippetID="2"/>
		</example>
	</doc>
	<doc for="BaseControlBuilder.AllowWhitespaceLiterals">
		<summary>
			<para> Determines whether the
      white space literals in the control must be processed or ignored.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the white
   space literals in the control must be processed; otherwise,
<see langword="false"/> 
.</para>
		</returns>
		<example>
			<codelink SampleID="ControlBuilderSamples_1" SnippetID="4"/>
		</example>
	</doc>
	<doc for="ControlBuilder.AppendLiteralString">
		<summary>
			<para> Adds literal content to a
      control.</para>
		</summary>
		<param name="s">The content to add to the control.</param>
		<remarks>
			<para>Literal content is any text that is passed by the browser to the server
      control. For example, any HTML elements and text, between their opening and
      closing tags, are literal content.</para>
		</remarks>
		<example>
			<codelink SampleID="ControlBuilderSamples_1" SnippetID="3"/>
		</example>
	</doc>
</docs>
