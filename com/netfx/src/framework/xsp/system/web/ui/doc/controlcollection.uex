<docs>
	<doc for="ControlCollection.SyncRoot">
		<summary>
			<para>Gets an object that can be used to synchronize access to the collection of controls.</para>
		</summary>
		<value>
			<para>The <see cref="System.Object"/> used to synchronize the collection.</para>
		</value>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc><doc for="ControlCollection.IsReadOnly">
		<summary>
			<para>Gets a value indicating whether the
   <see langword="ControlCollection"/> object is read-only.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is read-only; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc><doc for="ControlCollection.Owner">
		<summary>
			<para>Gets the ASP.NET server control to which the <see cref="System.Web.UI.ControlCollection"/> object belongs.</para>
		</summary>
		<value>
			<para>The <see cref="System.Web.UI.Control"/> object to which the
<see langword="ControlCollection"/> object belongs.</para>
		</value>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc><doc for="ControlCollection.CopyTo">
		<summary>
			<para> Copies the child controls stored in the <see cref="System.Web.UI.ControlCollection"/>
object to an <see cref="System.Array" qualify="true"/> object, beginning at the specified index location in
the <see langword="Array"/> .</para>
		</summary>
		<param name="array">The <see langword="Array"/> to copy the child controls to.</param>
		<param name=" index">The zero-based relative index in <paramref name="array"/> where copying begins.</param>
		<exception cref="ArgumentException"><para>Thrown if <paramref name="array"/> is not <see langword="null"/> and not one-dimensional.</para></exception>
		<seealso cref="System.Web.UI.Control.Controls" qualify="true"/>
		<seealso cref="System.Array"/>
		<keyword term="copying server controls to an array"/>
		<keyword term="ASP.NET server controls, copying child controls to an array"/>
		<keyword term="server controls, copying child controls to an array"/>
	</doc><doc for="ControlCollection.IsSynchronized">
		<summary>
			<para> Gets a value indicating whether the
 <see langword="ControlCollection"/>
 is synchronized.</para>
		</summary>
		<value>
			<para>This property is always <see langword="false"/> .</para>
		</value>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc><doc for="ControlCollection.Add">
		<summary>
			<para>Adds the specified <see cref="System.Web.UI.Control"/>
object to the collection.</para>
		</summary>
		<param name="child">The <see langword="Control"/> object to add to the collection.</param>
		<exception cref="System.ArgumentNullException">Thrown if the <paramref name="child"/> parameter does not specifiy a control.</exception>
		<exception cref="System.Web.HttpException">Thrown if the <see langword="ControlCollection"/> object is read-only.</exception>
		<remarks>
			<para> The new control is added to the end of an ordinal index array. The
 control can be an instance of any ASP.NET server control, a custom server
 control you create, or a literal control.</para>
			<para>To add a control to the collection at a specific index location, use
 the <see cref="System.Web.UI.ControlCollection.AddAt"/> method.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="Add"/> method to add a series of template items, the number of which are
 taken from the server control's view state, to a custom templated control.</para>
			<codelink SampleID="TemplatedDataBoundControl" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.ControlCollection.AddAt"/>
		<keyword term="ASP.NET server controls, adding child controls"/>
		<keyword term="server controls, adding child controls"/>
		<keyword term="adding children to ASP.NET server controls"/>
	</doc><doc for="ControlCollection.ControlCollection">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.ControlCollection"/> class for the parent
   server control specified in the <paramref name="owner"/> parameter.</para>
		</summary>
		<param name="owner">The ASP.NET server control that the control collection is created for.</param>
		<exception cref="ArgumentException">Occurs if the <paramref name="owner"/> parameter is <see langword="null"/> .</exception>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.Control"/>
		<keyword term="ASP.NET server controls, child control collection"/>
		<keyword term="server controls, child control collection"/>
	</doc><doc for="ControlCollection.Clear">
		<summary>
			<para>Removes all controls from the current server
      control's <see cref="System.Web.UI.ControlCollection"/> object.</para>
		</summary>
		<remarks>
			<para>Use this method to empty a custom control's <see langword="ControlCollection"/> when you override the <see cref="System.Web.UI.Control.CreateChildControls" qualify="true"/> and <see cref="System.Web.UI.Control.DataBind"/> methods. Do
   this when you develop composite, templated controls or templated data bound controls. For more information, see <see topic="cpconmethodsinwebformscontrols"/>.
   </para>
		</remarks>
		<example>
			<para>The following example demonstrates overriding the
   <see langword="CreateChildControls"/> method, and using the
   <see langword="Clear"/> method to delete all child controls previously in the
   <see langword="ControlCollection"/> object. In this case, you must do this so
      that outdated objects in your control's <see langword="ControlCollection"/> are
      not displayed inappropriately.</para>
			<codelink SampleID="TemplatedDataBoundControl" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso topic="cpcondevelopingwebformscontrols"/>
		<keyword term="ASP.NET server controls, removing child controls"/>
		<keyword term="server controls, removing child controls"/>
		<keyword term="removing child controls from ASP.NET server controls"/>
	</doc><doc for="ControlCollection.Count">
		<summary>
			<para> Gets the number of server controls in the
   <see langword="ControlCollection"/> object for the specified ASP.NET
      server control.</para>
		</summary>
		<value>
			<para> The number of server controls in the
   <see langword="ControlCollection"/> object.</para>
		</value>
		<example>
			<para>The following example demonstrates how to use the
   <see langword="Count"/> property to iterate through a control's <see cref="System.Web.UI.ControlCollection"/>
   object. The use of the <see cref="System.Web.UI.Control.HasControls" qualify="true"/> property verifies that the
   control has child controls. If <see langword="HasControls"/> returns <see langword="false"/> , the
   remaining code does not run.</para>
			<codelink SampleID="Classic Control.HasControls Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<keyword term="ASP.NET server controls, number of child controls"/>
		<keyword term="server controls, number of child controls"/>
	</doc><doc for="ControlCollection">
		<summary>
			<para> Provides a collection
      container that enables ASP.NET server controls to maintain a
      list of their child controls.</para>
		</summary>
		<remarks>
			<para>You can access any of the properties and methods of the
   <see langword="ControlCollection"/> class through
      the <see cref="System.Web.UI.Control.Controls" qualify="true"/>
      property. Since the <see langword="Control"/> class is the base class for all
      ASP.NET server controls, all server controls inherit this property. </para>
			<para>For more information about collections, see <see topic="cpcongroupingdataincollections"/>. </para>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Web.UI.Control.CreateChildControls" qualify="true"/> method to create two <see cref="System.Web.UI.LiteralControl"/> 
objects and a <see cref="System.Web.UI.WebControls.TextBox"/> object and add them to
another <see cref="System.Web.UI.Control"/> object's
<see langword="ControlCollection"/> . This is done with the
<c>this.Controls.Add</c> syntax found throughout the example. </para>
			<codelink SampleID="SystemWebUIControl CreateChildControls and EnsureChildControls" SnippetID="2"/>
		</example>
		<seealso topic="cpcongroupingdataincollections"/>
		<seealso cref="System.Web.UI.Control"/>
		<seealso cref="System.Web.UI.Page"/>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<keyword term="ASP.NET server controls, child controls"/>
		<keyword term="server controls, child controls"/>
	</doc>
	<doc for="ControlCollection.this">
		<summary>
			<para>Gets a reference to the server control at the specified index location in the
   <see langword="ControlCollection"/> object.</para>
		</summary>
		<param name="index">The location of the server control in the <see langword="ControlCollection"/> .</param>
		<value>
			<para>The reference to the control.</para>
		</value>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than or equal to the <see cref="System.Web.UI.ControlCollection.Count" qualify="true"/> property.</exception>
		<example>
			<para>The following example uses the <see langword="Item"/> property to specify the 
   index location of a child control that is removed in a <see cref="System.Web.UI.ControlCollection.Remove"/> method call. This is performed by the
   <c>myButton.Controls.Remove</c> syntax.</para>
			<codelink SampleID="ControlCollection_ReSubmit_2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc>
	<doc for="ControlCollection.AddAt">
		<summary>
			<para>Adds the specified <see cref="System.Web.UI.Control"/> object to the collection at the specified index location.</para>
		</summary>
		<param name=" index">The location in the array to add the child control.</param>
		<param name="child">The <see langword="Control"/> object to add to the collection.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="child"/> parameter does not specify a control.</exception>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="index"/> parameter is less than zero or greater than the <see cref="System.Web.UI.ControlCollection.Count" qualify="true"/> property.</exception>
		<exception cref="System.Web.HttpException">The <see langword="ControlCollection"/> object is read-only.</exception>
		<remarks>
			<para>The added control can be an instance of any ASP.NET server control, a custom
      server control you create, or a literal control.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="AddAt"/> method to create a 
   new <see cref="System.Web.UI.LiteralControl"/> named <c>ChildControl2</c> and add it to the <c>myButton</c>
control's <see cref="System.Web.UI.ControlCollection"/> at the index location of 1. </para>
			<codelink SampleID="ControlCollection_ReSubmit_1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.ControlCollection.Add"/>
		<keyword term="ASP.NET server controls, adding child controls"/>
		<keyword term="server controls, adding child controls"/>
		<keyword term="adding children to ASP.NET server controls"/>
	</doc>
	<doc for="ControlCollection.RemoveAt">
		<summary>
			<para>Removes a child control, at the specified index location, from the <see cref="System.Web.UI.ControlCollection"/> object.</para>
		</summary>
		<param name="index">The ordinal index of the server control to be removed from the collection.</param>
		<exception cref="HttpException">Thrown if the <see langword="ControlCollection"/> object is read-only.</exception>
		<remarks>
			<para>To remove a control from the collection based on its value, use
      the <see cref="System.Web.UI.ControlCollection.Remove"/> method.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="RemoveAt"/> method to delete a 
   child control from the <c>myButton</c> server control. The method call first specifies
an index location of 1 from which the control is deleted. The example then
writes to the containing page a text message saying that the control at that
location has been deleted from the <see cref="System.Web.UI.ControlCollection"/>. </para>
			<codelink SampleID="ControlCollection_ReSubmit_1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.ControlCollection.Remove"/>
		<keyword term="ASP.NET server controls, removing child controls programmatically"/>
		<keyword term="server controls, removing child controls programmatically"/>
	</doc>
	<doc for="ControlCollection.GetEnumerator">
		<summary>
			<para>Retrieves an enumerator that can iterate through the
   <see langword="ControlCollection"/> object.</para>
		</summary>
		<returns>
			<para>The enumerator to iterate through the collection.</para>
		</returns>
		<example>
			<para>The following example uses the <see langword="GetEnumerator"/> method to 
   implement the <see cref="System.Collections.IEnumerator"/> interface. It then iterates through the
   <c>myButton</c> server control's <see cref="System.Web.UI.ControlCollection"/>. The example checks each control
   to determine whether it is a <see cref="System.Web.UI.LiteralControl"/> object. If it is, an instance of
   the <see langword="LiteralControl"/> is created and its <see cref="System.Web.UI.LiteralControl.Text"/> property value is obtained and displayed in the
   containing ASP.NET page.</para>
			<codelink SampleID="ControlCollection_ReSubmit_1" SnippetID="1"/>
		</example>
		<seealso cref="System.Collections.IEnumerator"/>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc>
	<doc for="ControlCollection.Remove">
		<summary>
			<para> Removes the specified server control from the parent server control's <see cref="System.Web.UI.ControlCollection"/>
object.</para>
		</summary>
		<param name="value">The server control to be removed.</param>
		<remarks>
			<para>To remove a control from an index location, use the <see cref="System.Web.UI.ControlCollection.RemoveAt"/>method.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="Remove"/> method to delete a
   child control from the <c>myButton</c> server control. The control to delete is
specified by the <see cref="System.Web.UI.ControlCollection.this"/> property of the <c>myButton</c>
control, which specifies the first index location in the <see cref="System.Web.UI.ControlCollection"/>
object, 0.</para>
			<codelink SampleID="ControlCollection_ReSubmit_2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.ControlCollection.RemoveAt"/>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<keyword term="ASP.NET server controls, removing child controls "/>
		<keyword term="server controls, removing child controls"/>
		<keyword term="removing child controls from ASP.NET server controls"/>
	</doc>
	<doc for="ControlCollection.IndexOf">
		<summary>
			<para>Retrieves the index of a specified <see cref="System.Web.UI.Control"/>
object in the collection.</para>
		</summary>
		<param name="value">The <see langword="Control"/> object for which the index is returned.</param>
		<returns>
			<para>The index of the specified server control. If the server
      control is not currently a member of the collection, it returns
      -1.</para>
		</returns>
		<remarks>
			<para>Use this method to determine the index location of the specified server control in the <see langword="ControlCollection"/> object.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc>
	<doc for="ControlCollection.Contains">
		<summary>
			<para>Determines whether the specified server control is in the parent server control's <see cref="System.Web.UI.ControlCollection"/> object.</para>
		</summary>
		<param name="c">The server control to search for in the collection.</param>
		<returns>
			<para><see langword="true"/> if the specified server control exists
   in the collection; otherwise, <see langword="false"/> .</para>
		</returns>
		<example>
			<codelink SampleID="System.Web.UI.ctrlCollection_Contains" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
	</doc>
</docs>
