<docs>
	<doc for="DataBoundLiteralControl">
		<summary>
			<para>Creates a control for HTML text that does not contain
      code processed on the server, but persists the value of its <see cref="System.Web.UI.DataBoundLiteralControl.Text"/>
      property to view state. This class cannot be inherited. </para>
		</summary>
		<remarks>
			<para>This class allows the &lt;%# ... %&gt; data binding syntax to be
      implemented.</para>
		</remarks>
	</doc><doc for="DataBoundLiteralControl.Text">
		<summary>
			<para>Gets or sets the text content of the <see cref="System.Web.UI.DataBoundLiteralControl"/> object.</para>
		</summary>
		<value>
			<para>A <see cref="System.String" qualify="true"/> that represents
   the text content of the <see cref="System.Web.UI.DataBoundLiteralControl"/>
   object. The default
   is <see cref="System.String.Empty" qualify="true"/> .</para>
		</value>
	</doc><doc for="DataBoundLiteralControl.LoadViewState">
		<summary>
			<para>Loads the previously saved view state. You can
      override this method to synchronize <see cref="System.Web.UI.DataBoundLiteralControl.Text"/> property with new literal
      content.</para>
		</summary>
		<param name="savedState">The previously saved view state.</param>
	</doc><doc for="DataBoundLiteralControl.Render">
		<summary>
			<para>Writes the content of the <see cref="System.Web.UI.DataBoundLiteralControl"/> object to an output stream.</para>
		</summary>
		<param name="output">The output stream that renders HTML content to the client.</param>
	</doc><doc for="DataBoundLiteralControl.SaveViewState">
		<summary>
			<para> Saves any view state modified after the control began monitoring state changes. </para>
		</summary>
		<returns>
			<para>An <see cref="System.Object"/> that contains the savied view state values.</para>
		</returns>
	</doc><doc for="DataBoundLiteralControl.DataBoundLiteralControl">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataBoundLiteralControl.CreateControlCollection">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="LiteralControl.Render">
		<summary>
			<para>Writes the content of the <see cref="System.Web.UI.LiteralControl"/>
object to the ASP.NET page.</para>
		</summary>
		<param name="output">An <see cref="System.Web.UI.HtmlTextWriter"/> object that renders the content of the <see langword="LiteralControl"/> object to the requesting client. </param>
		<remarks>
			<para>When you create a custom server control and want to render specific HTML or
      text to a client, you can improve the performance of the control by passing the
      value of the <see cref="System.Web.UI.LiteralControl.Text" qualify="true"/> property to the <see cref="System.Web.UI.Control.Render" qualify="true"/> method rather than calling the
   <see langword="LiteralControl.Render"/>
   method.</para>
		</remarks>
		<seealso cref="System.Web.UI.HtmlTextWriter"/>
		<keyword term="writing text strings to a Web Forms page"/>
		<keyword term="Web Forms, writing text to a page"/>
	</doc><doc for="LiteralControl">
		<summary>
			<para> Represents HTML elements, text, and any other strings in 
 an ASP.NET page that do not require
 processing on the
 server. </para>
		</summary>
		<remarks>
			<para>ASP.NET compiles all HTML elements and readable text
 that do not require server-side processing into instances of this class. For
 example, an HTML element that does not contain a <see langword="runat=&quot;server&quot;"/>
 attribute/value pair in its opening tag is compiled into a <see langword="LiteralControl"/>
 object. </para>
			<para>Literal controls behave as text holders, meaning that you
 can extract text from the literal control and remove the literal control from the
 parent server control's <see cref="System.Web.UI.ControlCollection"/> through the parent's <see cref="System.Web.UI.Control.Controls"/> property.
 Therefore, when you
 develop a custom control derived from
 the <see langword="LiteralControl"/> class, make sure your control
 performs any required
 preprocessing steps itself, rather than using a call
 to the <see cref="System.Web.UI.LiteralControl.Render" qualify="true"/>
 method call to accomplish them. Typically you would do this
 to improve the response time of your Web
 application. </para>
			<para>You can add or remove literal controls from a page or
 server control programmatically using the <see cref="System.Web.UI.ControlCollection.Add" qualify="true"/>
 or <see cref="System.Web.UI.ControlCollection.Remove" qualify="true"/> method,
 respectively. </para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
 overloaded <see langword="LiteralControl"/> constructor when overriding
 the <see cref="System.Web.UI.Control.CreateChildControls" qualify="true"/> method. The code adds two new
 <see langword="LiteralControl"/> objects and a <see cref="System.Web.UI.WebControls.TextBox"/> Web server control to the current
 server control's <see cref="System.Web.UI.Control.Controls" qualify="true"/> property.</para>
			<codelink SampleID="SystemWebUILiteralControl" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control"/>
		<keyword term="Web Forms, literal content in"/>
		<keyword term="literal content in Web Forms"/>
		<keyword term="Web Forms, text not processed on the server"/>
		<keyword term="text strings in Web Forms"/>
	</doc><doc for="LiteralControl.LiteralControl1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.LiteralControl"/> class with
   the specified text.</para>
		</summary>
		<param name="text">The text to be rendered on the requested Web page.</param>
		<example>
			<codelink SampleID="SystemWebUILiteralControl" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.LiteralControl.Text" qualify="true"/>
	</doc>
	<doc for="LiteralControl.LiteralControl">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Web.UI.LiteralControl"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.LiteralControl"/> class that contains a literal string to be rendered on the requested ASP.NET page.</para>
		</summary>
		<example>
			<para>The following example creates a class, <c>CustLiteralControlClass</c>, that extends 
   the <see cref="System.Web.UI.LiteralControl"/> class. It creates an instance of the class, named
   <c>myLiteralControlClass1</c> using the constructor that does not specify the text of
   the <see langword="LiteralControl"/>. After the object is created,
   the <see cref="System.Web.UI.LiteralControl.Text"/> property is used to set the text that it contains.
</para>
			<codelink SampleID="LiteralControlSample" SnippetID="4"/>
		</example>
	</doc>
	<doc for="LiteralControl.Text">
		<summary>
			<para>Gets or sets the text content of the <see cref="System.Web.UI.LiteralControl"/> object.</para>
		</summary>
		<value>
			<para>A <see cref="System.String" qualify="true"/> that represents
   the text content of the literal control. The default is <see cref="System.String.Empty" qualify="true"/>
   .</para>
		</value>
		<example>
			<para>The following example creates a class, <c>CustLiteralControlClass</c>, that extends 
      the <see cref="System.Web.UI.LiteralControl"/> class. It creates an instance of the class, named
      <c>myLiteralControlClass1</c> using the constructor that does not specify the text of
      the <see langword="LiteralControl"/>. After the object is created, the
   <see langword="Text"/> property is used to set the text that it contains. </para>
			<codelink SampleID="LiteralControlSample" SnippetID="4"/>
		</example>
	</doc>
	<doc for="LiteralControl.CreateControlCollection">
		<summary>
			<para>Creates an <see cref="System.Web.UI.EmptyControlCollection"/> object for the current instance of the <see cref="System.Web.UI.LiteralControl"/> .</para>
		</summary>
		<returns>
			<para>The <see langword="EmptyControlCollection"/> object for
   the current control.</para>
		</returns>
		<remarks>
			<para>By default, <see langword="LiteralControl"/> objects contain only text and no
   child server controls. If you want to change this behavior, you must override
   this method.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see langword="CreateControlCollection"/> 
method to create an instance of the <see cref="System.Web.UI.ControlCollection"/>
class rather than an instance of the <see cref="System.Web.UI.EmptyControlCollection"/> class.</para>
			<codelink SampleID="LiteralControlSample" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.CreateControlCollection" qualify="true"/>
		<seealso cref="System.Web.UI.EmptyControlCollection"/>
	</doc>
</docs>
