<docs>
	<doc for="Page.postEventSourceID">
		<summary>
		</summary>
	</doc>
	<doc for="Page.postEventArgumentID">
		<summary>
		</summary>
	</doc>
	<doc for="Page.IsReusable">
		<summary>
		</summary>
	</doc>
	<doc for="Page.RegisterPostBackScript">
		<summary>
			<para>Allows controls on a page to access to the _doPostBack JavaScript handler on the
       client. This method can be called multiple times by multiple controls. It should
       render only one instance of the _doPostBack script.</para>
		</summary>
	</doc>
	<doc for="Page.ProcessRequest">
		<summary>
		</summary>
	</doc>
	<doc for="Page.WalkViewState">
		<summary>
		</summary>
	</doc>
	<doc for="Page.SetIntrinsics">
		<summary>
		</summary>
	</doc><doc for="Page.RegisterClientScriptFile">
		<summary>
			<para>Prevents server controls from sending duplicate
      client-side script files to the client. Any script files with the same "key"
      parameter values are considered duplicates. </para>
		</summary>
		<param name="key">Unique key that identifies the client-side script file.</param>
		<param name=" language">The programming language defined for the client-side script file.</param>
		<param name=" fileName">The name of the client-side script file.</param>
		<exception cref="HttpException">Occurs if the client-side script file cannot be found.</exception>
	</doc><doc for="Page.Buffer">
		<summary>
			<para>Sets a value indicating whether the page output is buffered.</para>
		</summary>
		<value>
			<para><see langword="true"/> if page output is buffered;
 otherwise, <see langword="false"/>. The default is <see langword="true"/> .</para>
		</value>
		<remarks>
			<para> In most circumstances, do not set this property 
 in code. Set the <see langword="buffer "/>attribute to <see langword="true"/>
 using the <see topic="cpconPage"/> directive in
 the .aspx file. When the page is requested, the dynamically generated class sets the property. </para>
		</remarks>
	</doc><doc for="Page.CodePage">
		<summary>
			<para>Sets the code page identifier for the
 current <see cref="System.Web.UI.Page"/>
 .</para>
		</summary>
		<value>
			<para>An integer that represents the code page identifier for
 the current <see langword="Page"/>
 . </para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="CodePage "/>attribute to the value you want using the 
 <see topic="cpconPage"/> directive in the .aspx 
 file. When the page is requested, the dynamically generated class sets the
 property.</para>
		</remarks>
		<seealso cref="System.Text.Encoding.CodePage"/>
	</doc><doc for="Page.ContentType">
		<summary>
			<para>Sets the HTTP MIME type for the <see cref="System.Web.HttpResponse"/> object
 associated with the page.</para>
		</summary>
		<value>
			<para>The HTTP MIME type associated with the current page.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="ContentType "/>attribute using the <see topic="cpconPage"/> directive in the .aspx file. When the page is 
 requested, the dynamically generated class sets the property.</para>
		</remarks>
		<seealso cref="System.Web.HttpResponse"/>
	</doc><doc for="Page.Culture">
		<summary>
			<para> 
 Sets the culture ID for the <see cref="System.Threading.Thread"/> object associated with the page.</para>
		</summary>
		<value>
			<para> A valid culture ID.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. 
 Set the <see langword="Culture "/>attribute in the <see topic="cpconPage"/> directive in the .aspx file. When the page is
 requested, the dynamically generated class sets the property.</para>
			<para>This property is used to help localize page content. You 
 can set it to any valid culture ID. For example, the <see langword="en-us"/>
 culture ID sets the page to American English, while the <see langword="fr"/>
 culture ID sets the page to French.</para>
		</remarks>
	</doc><doc for="Page.EnableViewStateMac">
		<summary>
			<para>Gets or sets a value indicating whether ASP.NET should run a machine 
 authentication check (MAC) on the page's view state when the page is posted back
 from the client.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the view state should be MAC checked; otherwise,
<see langword="false"/> . The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="EnableViewStateMac "/>attribute to <see langword="true"/> using the 
 <see topic="cpconPage"/> directive in the .aspx 
 file. When the page is requested, the dynamically generated class sets the
 property. </para>
			<para>A view state MAC is an encrypted version of the hidden variable that a page's 
 view state is persisted to when sent to the browser. When you set this attribute
 to <see langword="true"/>, the encrypted view state is checked to verify that it has not
 been tampered with on the client.</para>
		</remarks>
	</doc><doc for="Page.FileDependencies">
		<summary>
			<para>Sets an array of files that the
 current <see cref="System.Web.HttpResponse"/> object is dependent upon.</para>
		</summary>
		<value>
			<para>The array of files that the current
 <see langword="HttpResponse"/> object
 is dependent upon.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="FileDependencies "/>attribute to <see langword="true"/> using the 
 <see topic="cpconPage"/> directive in the .aspx 
 file. When the page is requested, the dynamically generated class sets the
 property. </para>
		</remarks>
		<seealso cref="System.Collections.ArrayList"/>
		<seealso cref="System.Web.HttpResponse.AddFileDependencies"/>
	</doc><doc for="Page.ID">
		<summary>
			<para>Gets or sets an identifier for a particular instance of
 the <see cref="System.Web.UI.Page"/> class.</para>
		</summary>
		<value>
			<para>The identifier for the instance of the
 <see langword="Page"/> class.</para>
		</value>
	</doc><doc for="Page.LCID">
		<summary>
			<para> 
 Sets the locale identifier for the <see cref="System.Threading.Thread"/> object associated with the page.</para>
		</summary>
		<value>
			<para>An the locale identifier to pass to the 
 <see langword="Thread"/> 
 .</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. 
 Set the <see langword="LCID "/>attribute in the <see topic="cpconPage"/> directive in the .aspx file. When the page is
 requested, the dynamically generated class sets the property.</para>
		</remarks>
		<seealso cref="System.Threading.Thread"/>
	</doc><doc for="Page.ResponseEncoding">
		<summary>
			<para>Sets the encoding language for the current <see cref="System.Web.HttpResponse"/> object.</para>
		</summary>
		<value>
			<para>A string that contains the encoding language for the 
 current <see langword="Response"/>
 object.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="ResponseEncoding "/>attribute to the value you want using the 
 <see topic="cpconPage"/> directive in the .aspx 
 file. When the page is requested, the dynamically generated class sets the
 property.</para>
		</remarks>
	</doc><doc for="Page.TransactionMode">
		<summary>
			<para>Sets the level of transaction support for the page.</para>
		</summary>
		<value>
			<para>An integer that represents one of the <see cref="System.EnterpriseServices.TransactionOption"/> enumeration members.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="Transaction "/>attribute in the <see topic="cpconPage"/> directive in the .aspx file. When the page is 
 requested, the dynamically generated class sets the property.</para>
		</remarks>
	</doc><doc for="Page.TraceModeValue">
		<summary>
			<para>Sets the mode in which trace statements are displayed on the page.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Web.TraceMode"/> enumeration members.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the 
 <see langword="TraceMode "/>attribute in the <see topic="cpconPage"/> directive in the .aspx file. When the page is 
 requested, the dynamically generated class sets the property.</para>
		</remarks>
	</doc><doc for="Page.UICulture">
		<summary>
			<para>Sets the UI ID for the <see cref="System.Threading.Thread"/> object associated 
 with the page.</para>
		</summary>
		<value>
			<para>The UI ID.</para>
		</value>
		<remarks>
			<para>This property is a shortcut for <see cref="System.Threading.Thread.CurrentThread"/>. The culture is a property of the executing
 thread</para>
		</remarks>
	</doc><doc for="Page.AspCompatBeginProcessRequest">
		<summary>
			<para>Initiates a request for Active Server Page (ASP) resources. This method is
 provided for compatibility with legacy ASP applications.</para>
		</summary>
		<param name="context">An <see cref="System.Web.HttpContext"/> object with information about the current request.</param>
		<param name=" cb">The callback method.</param>
		<param name=" extraData">Any extra data needed to process the request in the same manner as an ASP request.</param>
		<remarks>
			<para>Do not call this method.</para>
		</remarks>
	</doc><doc for="Page.AspCompatEndProcessRequest">
		<summary>
			<para>Terminates a request for Active Server Page (ASP)
 resources. This method is provided for compatibility with legacy ASP
 applications. </para>
		</summary>
		<param name="result">The ASP page generated by the request.</param>
		<remarks>
			<para>Do not call this method.</para>
		</remarks>
	</doc><doc for="Page.GetPostBackClientEvent">
		<summary>
			<para>Obtains a reference to a client-side script function
 that causes, when invoked, a server postback to the form.</para>
		</summary>
		<param name="control">The server control that receives the client event postback.</param>
		<param name=" argument">A <see cref="System.String"/> argument that is passed to the <see cref="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent" qualify="true"/> method.</param>
		<returns>
			<para>The <see langword="String"/> that represents the client event.</para>
		</returns>
	</doc><doc for="Page.Page">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.Page"/> class.</para>
		</summary>
		<remarks>
			<para>The default constructor initializes all fields to their default values.</para>
		</remarks>
	</doc><doc for="Page.AspCompatMode">
		<summary>
			<para>Sets a value indicating whether the page can be executed
 on a single-threaded apartment (STA) thread.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the page supports ASP code;
 otherwise, <see langword="false"/>. The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>When set to <see langword="true"/>, this allows the page
 to be executed on a single-threaded apartment (STA) thread. This allows the page
 to call STA components, such as components developed with Visual Basic 6.0.
 Setting this to <see langword="true"/> also allows the page to call COM+ 1.0
 components that require access to the unmanaged ASP built-in objects. These are
 accessible through the ASP <see langword="ObjectContext"/> object or the
<see langword="OnStartPage"/>method.</para>
			<note type="tip">
 In most circumstances, do not
 set this property in code. Set the <see langword="aspcompat"/> attribute to
<see langword="true"/> using the <see topic="cpconPage"/> directive in the .aspx file. When 
 the page is requested, the dynamically generated class sets the property.
</note>
		</remarks>
	</doc><doc for="Page.TraceEnabled">
		<summary>
			<para> Sets a value indicating whether tracing is enabled for
 the <see cref="System.Web.UI.Page"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if tracing is enabled for the page;
 otherwise, <see langword="false"/> .
 The default is <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the
 <see langword="Trace "/>attribute to <see langword="true"/> in the
 <see topic="cpconPage"/> directive in the .aspx
 file. When the page is requested, the dynamically generated class sets the
 property.</para>
		</remarks>
	</doc><doc for="Page.GetTypeHashCode">
		<summary>
			<para>Retrieves a hash code that is generated by <see langword="Page"/> objects that are generated at run time. This 
 hash code is unique to the <see langword="Page"/>
 object's control
 hierarchy.</para>
		</summary>
		<returns>
			<para>The hash code generated at run time. The default is 0.</para>
		</returns>
	</doc><doc for="OutputCacheLocation.Client">
		<summary>
			<para>The output cache is located on the browser client where the request originated. </para>
		</summary>
	</doc><doc for="OutputCacheLocation.Server">
		<summary>
			<para>The output cache is located on the Web server where the request was
 processed.</para>
		</summary>
	</doc><doc for="OutputCacheLocation.None">
		<summary>
			<para> The output cache is disabled for the requested page.</para>
		</summary>
	</doc><doc for="OutputCacheLocation.Any">
		<summary>
			<para>The output cache can be located on the browser client (where the request originated), on a proxy server (or any other
      server) participating in the request, or on the server where the request was
      processed.</para>
		</summary>
	</doc><doc for="Page.IsPostBack">
		<summary>
			<para>Gets a value indicating whether the page is being loaded in response to a
      client postback, or if it is being loaded and accessed for the first time.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the page is being loaded in
   response to a client postback; otherwise, <see langword="false"/> .</para>
		</value>
		<example>
			<para>The following example tests the value of the 
   <see langword="IsPostBack"/> property to
      conditionally call the <see cref="System.Web.UI.Page.Validate" qualify="true"/> method for all validation
      server controls when the <see langword="Page"/> is loaded. </para>
			<codelink SampleID="System.Web.UI.Page.Validate" SnippetID="1"/>
		</example>
	</doc><doc for="Page.IsValid">
		<summary>
			<para> Gets a value indicating whether page validation succeeded.</para>
		</summary>
		<value>
			<para><see langword="true"/> if page validation succeeded;
   otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para>For this property to return <see langword="true"/>, all
   validation server controls in the <see cref="System.Web.UI.Page.Validators" qualify="true"/> property must
   validate successfully. You should check this property only after you have called
   the <see cref="System.Web.UI.Page.Validate" qualify="true"/> method, or set the
<see langword="CausesValidation"/> property to true in the 
<see langword="OnServerClick"/> handler for an ASP.NET server control that 
   initiates form processing. These server controls include the <see cref="System.Web.UI.WebControls.Button"/>, <see cref="System.Web.UI.HtmlControls.HtmlButton"/>, <see cref="System.Web.UI.HtmlControls.HtmlInputButton"/>, <see cref="System.Web.UI.HtmlControls.HtmlInputImage"/>, <see cref="System.Web.UI.WebControls.ImageButton"/>, and <see cref="System.Web.UI.WebControls.LinkButton"/>
   classes.</para>
		</remarks>
		<example>
			<para>The following example demonstrates using the
   <see langword="IsValid"/> property to set up a conditional statement. If the
      property returns <see langword="true"/>, the <see langword="Text"/> property
      of the <see langword="lblOutput"/>
      control is set to "Page is valid!". Otherwise, it is set to "Some
      of the required fields are empty".</para>
			<codelink SampleID="System.Web.UI.Page.Validate" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Page.Validators"/>
		<seealso cref="System.Web.UI.ValidatorCollection"/>
	</doc><doc for="Page.DesignerInitialize">
		<summary>
			<para>Performs any initialization of the instance of
      the <see cref="System.Web.UI.Page"/> class that is required
      by RAD designers. This method is used only at design time.</para>
		</summary>
	</doc><doc for="Page.GetPostBackClientHyperlink">
		<summary>
			<para>Appends <see langword="javascript:"/> to the beginning of
   the return from a <see cref="System.Web.UI.Page.GetPostBackEventReference"/>
   call to allow hyperlink post-back processing on the server.</para>
		</summary>
		<param name="control">The server control to process the postback.</param>
		<param name=" argument">The parameter passed to the server control.</param>
		<returns>
			<para> The name of the client-side function and the 
   <see langword="ID"/> property of the server control
      that processed the function and argument passed to the control. </para>
		</returns>
	</doc><doc for="Page.LoadPageStateFromPersistenceMedium">
		<summary>
			<para>Loads any saved view-state information to
      the <see cref="System.Web.UI.Page"/> object. Override this method if you want to load
      the <see langword="Page"/> view-state information in anything other than a hidden field.</para>
		</summary>
		<returns>
			<para>The saved view state.</para>
		</returns>
		<remarks>
			<para>If you want to specify something other than hidden fields to save view state when
      using this method, you must also override the
   <see langword="SaveStateToPersistenceMedium"/>method.</para>
		</remarks>
	</doc><doc for="Page.SavePageStateToPersistenceMedium">
		<summary>
			<para> Saves any view-state information for the page.</para>
		</summary>
		<param name="viewState">An <see cref="System.Object"/> in which to store the view-state information.</param>
		<remarks>
			<para>Override this method if you want to save the
   <see langword="Page"/> view
      state in anything other than a hidden field. If you choose to do so, you must
      also override the <see cref="System.Web.UI.Page.LoadPageStateFromPersistenceMedium" qualify="true"/>
      method.</para>
		</remarks>
		<seealso cref="System.Web.UI.Page.LoadPageStateFromPersistenceMedium"/>
	</doc><doc for="OutputCacheLocation.Downstream">
		<summary>
			<para>The output cache can be stored in any HTTP 1.1
      cache-capable devices other than the origin server. This includes proxy servers and the client that
      made the request.</para>
		</summary>
	</doc><doc for="Page.DeterminePostBackMode">
		<summary>
			<para>Determines the type of request made for the
   <see langword="Page"/>
   class.</para>
		</summary>
		<returns>
			<para>If the post back used the <see langword="POST"/> method, the form
   information is returned from the <see langword="Context"/> object. If the postback used the
<see langword="GET"/>
method,
the query string information is returned. If the page is being requested
for the first time, <see langword="null"/>is returned.</para>
		</returns>
		<remarks>
			<para>This information is based on whether the page was posted back and whether the
   <see langword="GET"/> or <see langword="POST"/> HTTP method was used for the
      request.</para>
		</remarks>
		<seealso cref="System.Web.HttpContext"/>
	</doc><doc for="Page.IsClientScriptBlockRegistered">
		<summary>
			<para>Determines if the client script block is registered with the page.</para>
		</summary>
		<param name="key">The string key of the client script to search for.</param>
		<returns>
			<para>Returns <see langword="true"/> if the script block is registered; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Call this method before calling <see cref="System.Web.UI.Page.RegisterClientScriptBlock" qualify="true"/> to avoid unnecessarily
   assembling the client-side script. This is
   particularly important if the script requires a large amount of server resources
   to create.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of the <see cref="System.Web.UI.Page.RegisterClientScriptBlock"/> method in conjunction 
   with <see langword="IsClientScriptBlockRegistered "/>method. If the
   ECMAScript written in the code-declaration block has not already been
   registered, as tested by <see langword="IsClientScriptBlockRegistered"/>, the a
<see langword="RegisterClientScriptBlock"/> call is made.</para>
			<codelink SampleID="System.Web.UI.Page.RegisterClientScriptBlock" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Page.RegisterClientScriptBlock"/>
	</doc><doc for="Page.RegisterOnSubmitStatement">
		<summary>
			<para> Allows a page to access the client
   <see langword="OnSubmit"/> event.
      The script should be a function call to client code registered elsewhere.</para>
		</summary>
		<param name=" key">Unique key that identifies a script block.</param>
		<param name="script">The client-side script to be sent to the client.</param>
		<example>
			<para>The following example demonstrates using the 
   <see langword="RegisterOnSubmitStatement"/> to access a script that responds when 
      a client-side submit button is clicked. When this event occurs, the registered
      ECMAScript code is executed on the client.</para>
			<codelink SampleID="Page_RegisterHiddenField" SnippetID="2"/>
		</example>
	</doc><doc for="Page.IsStartupScriptRegistered">
		<summary>
			<para>Determines if the client startup script is registered
      with the <see cref="System.Web.UI.Page"/>
      object.</para>
		</summary>
		<param name="key">The string key of the startup script to search for.</param>
		<returns>
			<para><see langword="true"/> if the startup script is
   registered; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>Call this method before calling <see cref="System.Web.UI.Page.RegisterStartupScript" qualify="true"/> to avoid unnecessarily assembling the client-side
   script. This is particularly important if the script requires a large
   amount of server resources to create.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of the <see cref="System.Web.UI.Page.RegisterStartupScript"/> method in conjunction with 
<see langword="IsStartupScriptRegistered"/> method. If the ECMAScript written in 
   the code-declaration block has not already been registered, as tested by
<see langword="IsStartupScriptRegistered"/>, the a 
<see langword="RegisterStartupBlock"/> call is made.</para>
			<codelink SampleID="System.Web.UI.Page.RegisterStartupScriptBlock" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Page.RegisterStartupScript"/>
	</doc><doc for="Page.RegisterStartupScript">
		<summary>
			<para> Allows ASP.NET server controls to emit client-side script
      blocks in the <see cref="System.Web.UI.Page"/>
      .
      </para>
		</summary>
		<param name=" key">Unique key that identifies a script block. </param>
		<param name="script">Content of script that will be sent to the client. </param>
		<remarks>
			<para>Similar to the <see cref="System.Web.UI.Page.RegisterClientScriptBlock"/> method, this
   method emits the script just before the closing tag of the <see langword="Page"/> object's &lt;form runat=
   server&gt; element.
   
   The script block is emitted as the object
   that renders the page is defined, so you must include both tags of the
   &lt;script&gt; element.</para>
			<para>By identifying the script with the <paramref name="key"/>, multiple server control
instances can request the script block without it being emitted to the output
stream twice.</para>
			<para>Any script blocks with the same <paramref name="key"/> parameter values are considered
duplicates.</para>
			<note type="note">
   Remember to include HTML comment tags
   around your script so that it will not be rendered if a requesting browser does
   not support scripts.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the use of the 
   <see langword="RegisterStartupScript"/> method in conjunction
      with <see cref="System.Web.UI.Page.IsStartupScriptRegistered"/> method. If the ECMAScript
      written in the code-declaration block has not already been registered, as tested
      by <see langword="IsStartupScriptRegistered"/>, the a
   <see langword="RegisterStartupScriptBlock"/> call is made.</para>
			<codelink SampleID="System.Web.UI.Page.RegisterStartupScriptBlock" SnippetID="1"/>
		</example>
	</doc><doc for="Page.Trace">
		<summary>
			<para>Gets the <see cref="System.Web.TraceContext"/> object for the current Web request.</para>
		</summary>
		<value>
			<para>Data from the <see langword="TraceContext"/> object for
   the current Web request.</para>
		</value>
		<remarks>
			<para>Tracing tracks and presents the execution details about a Web request. For
      trace data to be visible in a rendered page, you must enable tracing at the page
      or application level.</para>
			<para>Tracing on a page is disabled by default. To enable tracing for a
      page, use the <see topic="cpconpage"/> directive: <see langword="&lt;%@ Page trace=&quot;true&quot; %&gt;"/>. To enable tracing for an entire application,
      you must enable it in the application's configuration file, web.config, which
      resides in the root directory ofthe application. For more information, see
   <see topic="cpcontracefunctionality"/>
   
   .</para>
		</remarks>
		<example>
			<para>The following example demonstrates accessing the <see cref="System.Web.TraceContext.IsEnabled" qualify="true"/> property and the <see cref="System.Web.TraceContext.Write" qualify="true"/> method
   accessed through the <see langword="Page.Trace"/> property. This code
   calls the <see langword="Trace.Write"/> method only when tracing is enabled for
   the <see langword="Page"/>. If it is not enabled, this code will not run, which
   can help reduce overhead for your application.</para>
			<codelink SampleID="System.Web.UI.Page.Trace" SnippetID="2"/>
		</example>
		<seealso topic="cpconpage"/>
		<seealso cref="System.Web.TraceContext"/>
		<seealso topic="cpcontracefunctionality"/>
		<keyword term="tracing, in a page"/>
		<keyword term="displaying trace messasges on a page"/>
	</doc><doc for="Page.ErrorPage">
		<summary>
			<para> Gets or sets the error page to which the requesting browser is
      redirected in the event of an unhandled page exception.</para>
		</summary>
		<value>
			<para>The error page to which the browser is redirected.</para>
		</value>
		<example>
			<codelink SampleID="Page_ErrorPage" SnippetID="1"/>
		</example>
		<keyword term="designating error pages for Web requests"/>
		<keyword term="error pages"/>
	</doc><doc for="Page.VerifyRenderingInServerForm">
		<summary>
			<para>Confirms that an <see cref="System.Web.UI.HtmlControls.HtmlForm"/> control is rendered for
   the specified ASP.NET server control at run time.</para>
		</summary>
		<param name="control">The ASP.NET server control that is required to be in the <see langword="HtmlForm"/> control.</param>
		<exception cref="System.Web.HttpException">The specified server control is not contained between the opening and closing tags of the <see langword="HtmlForm"/> server control at run time. </exception>
		<remarks>
			<para>This method will throw an exception if the page is not
      currently in the render phase of page processing, and inside the &lt;form
      runat=server&gt; tags. Controls that are required to be inside the server form
      can call this during render so that a clear error message is shown when they are
      placed outside. Controls that post back or depend on registered script blocks
      should call this in an override of the <see cref="System.Web.UI.Control.Render" qualify="true"/>
      
      method. Pages that have a different
      way of rendering the server form element can override this to throw an exception
      under different conditions.</para>
			<para>Server controls that post back or use client-side script
      will not work if they are not enclosed in the <see langword="HtmlForm"/> server control (&lt;form
      runat="server"&gt;). These controls can call this method when they render to
      provide a clear error message when they are not enclosed in the
   <see langword="HtmlForm"/>
   control.</para>
			<para>When you develop a custom server control, it is common
   to call this method when you override the <see langword="Render"/>
   method
   for any kind of input tag. This is particularly important if the input control
   calls <see cref="System.Web.UI.Page.GetPostBackEventReference"/>, or if it emits
   client script. A composite server control does not need to make this call.</para>
			<para>You should not override this
   method unless you are creating an alternative page framework.</para>
		</remarks>
	</doc>
	<doc for="Page">
		<summary>
			<para> Represents an .aspx file, also known as a Web Forms page, requested from a server
      that hosts an ASP.NET Web
      application.</para>
		</summary>
		<remarks>
			<para>The <see langword="Page"/>
class is associated with files that have
an .aspx extension. These files are compiled at run time as <see langword="Page"/>
objects and cached in server memory.</para>
			<para>If you want to create a Web Forms page using the code-behind technique, derive from this class.
   Rapid application development (RAD) designers, such as Visual Studio .NET,
   automatically use this model to create Web Forms pages. </para>
			<para>The <see langword="Page"/> object serves
as the naming container for all server controls in a page, except those
that implement the <see cref="System.Web.UI.INamingContainer"/> interface, or are children
of controls that implement this interface.</para>
		</remarks>
		<example>
			<para>The following example demonstrates extending the
   <see langword="Page"/> class to create a code-behind ASP.NET
      page. When you create a page this way, you must include
      the <see langword="System"/> and <see langword="System.Web.UI"/>
      namespaces, along with any other namespaces that contain the classes that
      your page uses. This example accesses
      the <see langword="System.Web.UI.WebControls"/> and
   <see langword="System.Web.UI.HtmlControls"/> namespaces.</para>
			<codelink SampleID="SysWebUIPage CodeBehind" SnippetID="1"/>
			<para> In addition to extending 
the <see langword="Page"/> class, you must create an .aspx file to 
visually display the UI associated with the classes you have invoked in your 
source file. The following example demonstrates an .aspx file that links to the 
<see langword="MyCodeBehind"/> class created in the previous example. You must use 
the <see topic="cpconPage"/> directive and use the 
<see langword="Inherits"/> and <see langword="Src"/> 
attributes to link the code-behind file 
to the .aspx file. In this case, the <see langword="Inherits"/> attribute 
indicates the <see langword="MyCodeBehind"/> class and the <see langword="Src"/> 
attribute indicates the path to the language-specific file that contains the 
class.</para>
			<note type="caution">

 RAD

 designers, such as Visual Studio .NET, 
create ASP.NET pages using the code-behind method automatically. Designers do 
not use the <see langword="Src"/>
 
attribute, however. 







</note>
			<codelink SampleID="SysWebUIPage ASPX files for Code Behind" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control"/>
		<seealso cref="System.Web.UI.TemplateControl"/>
		<seealso cref="System.Web.UI.UserControl"/>
		<seealso topic="cpconPage"/>
	</doc>
	<doc for="Page.Visible">
		<summary>
			<para> Gets or sets a value indicating whether
      the <see cref="System.Web.UI.Page"/>
      object is rendered.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
<see langword="Page"/> is to be rendered; otherwise,
<see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<example>
			<para>The following example sets the <see langword="Page.Visible"/> property to 
   false to hide the rendered content of a page. When this page is first requested,
   a data source is populated and displayed in the page. Whe a user clicks the
   button, the HideButton_Click event handler hides the entire rendered content of
   the page.</para>
			<codelink SampleID="Page_Visible" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.RegisterArrayDeclaration">
		<summary>
			<para> Declares a value that is declared as an
      ECMAScript array declaration when the page renders.</para>
		</summary>
		<param name="arrayName">The name of the array in which to declare the value.</param>
		<param name=" arrayValue">The value to place in the array.</param>
		<remarks>
			<para>This method can be used by script-based controls to declare themselves within
      an array so that a client script library can work with all the controls of the
      same type.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="RegisterArrayDeclaration"/> 
method to declare and array, myArray, that contains three objects named x, y,
and z. The example defines and registers a startup script using the <see cref="System.Web.UI.Page.RegisterStartupScript"/> method. When the JavaScript
<see langword="doClick"/> function is called from the page that contains this 
code, the array and its objects are initialized. </para>
			<codelink SampleID="Page_RegisterArrayDeclaration" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.RegisterRequiresRaiseEvent">
		<summary>
			<para>Registers an ASP.NET server control as requiring an
      event to be raised when the control is processed on the
   <see langword="Page"/>
   .</para>
		</summary>
		<param name="control">The control to register.</param>
		<remarks>
			<para>Only one server control can be registered per <see langword="Page"/>
request.</para>
		</remarks>
		<example>
			<para>This example uses the <see langword="RegisterRequiresRaiseEvent"/> method to 
   register a <see cref="System.Web.UI.WebControls.Button"/> Web server control as require a raise
   event. Once you have registered the first <see langword="Button"/>, you can cause
   the second <see langword="Button"/> declared in the code to post the results of
   the first button's click event to the page.</para>
			<codelink SampleID="Page_RaisePostBackEvent" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.RegisterRequiresPostBack">
		<summary>
			<para>Registers a control as one that requires post-back handling.</para>
		</summary>
		<param name="control">The control to be registered.</param>
		<example>
			<para>The following example uses the <see langword="RegisterRequiresPostBack"/> 
method to require a customized text box control, customTextBox, to be posted
back before any code associated with the text box will execute.</para>
			<codelink SampleID="Page_RegisterRequiresPostBack" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.RegisterHiddenField">
		<summary>
			<para> Allows server controls to automatically register a
      hidden field on the form. The field will be sent to the <see langword="Page"/>
      when the <see cref="System.Web.UI.HtmlControls.HtmlForm"/>
      server control is rendered.
      </para>
		</summary>
		<param name="hiddenFieldName">The unique name of the hidden field to be rendered. </param>
		<param name=" hiddenFieldInitialValue">The value to be emitted in the hidden form. </param>
		<example>
			<para>The following example uses the <see langword="RegisterHiddenField"/> method to 
   help create JavaSCript code that is passed to the requesting browser. The name
   of the hidden field is set to myHiddenField and its value is set to "Welcome to
   Microsoft .NET!" The <see cref="System.Web.UI.Page.RegisterStartupScript"/> method calls the myHiddenField
   value when the user clicks a button on the page.</para>
			<codelink SampleID="Page_RegisterHiddenField" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.MapPath">
		<summary>
			<para>Retrieves the physical path that a virtual path, either absolute or relative, maps to.</para>
		</summary>
		<param name="virtualPath">A <see cref="System.String"/> that represents the virtual path.</param>
		<returns>
			<para>The physical path associated with the virtual path.</para>
		</returns>
		<example>
			<para>The following example uses the <see langword="MapPath"/> method to obtain the 
   physical path of a subfolder. It then uses this information to set
   the <see cref="System.Web.UI.WebControls.TextBox.Text"/> property of a <see cref="System.Web.UI.WebControls.TextBox"/> Web server control.</para>
			<codelink SampleID="Page_MapPath_ResponseEncoding" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.CreateHtmlTextWriter">
		<summary>
			<para>Creates an <see cref="System.Web.UI.HtmlTextWriter"/>
object to render the page's content.</para>
		</summary>
		<param name="tw">The text writer to create.</param>
		<returns>
			<para>The specified <see cref="System.Web.UI.HtmlTextWriter"/> or <see cref="System.Web.UI.Html32TextWriter"/> object.</para>
		</returns>
		<remarks>
			<para>The object created is based on information from the <see cref="System.Web.HttpBrowserCapabilities"/> object associated with the page request. Usually,
   this object is an <see cref="System.Web.UI.HtmlTextWriter"/> or <see cref="System.Web.UI.Html32TextWriter"/> object. For derived pages, you
   can override this method to create a custom text writer.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="CreateHtmlTextWriter"/> method 
   to create an instance of a custom <see cref="System.Web.UI.HtmlTextWriter"/> object named MyHtmlTextWriter.
   The <see langword="CreateHtmlTextWriter"/> method is overridden in the MyPage
   class, which is derived from <see cref="System.Web.UI.Page"/>, so that MyHtmlTextWriter renders ASP.NET server
   controls when the page is requested.</para>
			<codelink SampleID="Page_CreateHtmlTextWriter" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.HtmlTextWriter"/>
		<seealso cref="System.Web.UI.Html32TextWriter"/>
		<seealso cref="System.Web.HttpBrowserCapabilities"/>
	</doc>
	<doc for="Page.Validate">
		<summary>
			<para> Instructs any validation controls included on
      the page to validate their assigned information.</para>
		</summary>
		<remarks>
			<para>This method is invoked when a user clicks any ASP.NET button server control
      that has the <see langword="CausesValidation"/> property set to
   <see langword="true"/>, which is the default. These include the <see cref="System.Web.UI.WebControls.Button"/>, <see cref="System.Web.UI.WebControls.ImageButton"/>, and <see cref="System.Web.UI.WebControls.LinkButton"/> Web server controls and the <see cref="System.Web.UI.HtmlControls.HtmlInputButton"/>, <see cref="System.Web.UI.HtmlControls.HtmlInputImage"/>, and <see cref="System.Web.UI.HtmlControls.HtmlButton"/> HTML server controls.</para>
			<para>To disable validation for a page, or any button control on the page, set the button control's
   <see langword="CausesValidation"/> property to <see langword="false"/>. </para>
			<para> When this method is invoked, it iterates through the
      validation controls contained in the <see cref="System.Web.UI.ValidatorCollection"/> object associated with the <see cref="System.Web.UI.Page.Validators" qualify="true"/>
      property and invokes the validation logic for each control. </para>
		</remarks>
		<example>
			<para>The following example demonstrates calling the
   <see langword="Validate"/> method on a page when
      it is loaded, as long as the <see cref="System.Web.UI.Page.IsPostBack"/> property returns
   <see langword="false"/>.</para>
			<codelink SampleID="System.Web.UI.Page.Validate" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.ValidatorCollection"/>
		<seealso cref="System.Web.UI.Page.Validators" qualify="true"/>
	</doc>
	<doc for="Page.Validators">
		<summary>
			<para>Gets a collection of all validation controls contained on the requested page.</para>
		</summary>
		<value>
			<para>The collection of validation controls.</para>
		</value>
		<remarks>
			<para>You can use this property to manipulate the methods and properties
      of <see cref="System.Web.UI.ValidatorCollection"/> object associated with the current
   <see langword="Page"/> instance.
      This collection contains all of the validation server controls that are
      contained in a page.</para>
			<para>Calling the <see cref="System.Web.UI.Page.Validate" qualify="true"/> method causes validation logic to be executed for
   each validation server control contained in this collection. If any of these
   controls to not pass, the <see cref="System.Web.UI.Page.IsValid" qualify="true"/> property returns
<see langword="false"/>.</para>
		</remarks>
		<example>
			<para> For an example of using this property, see <see topic="cpconbasevalidatorsample"/> . </para>
		</example>
		<seealso cref="System.Web.UI.ValidatorCollection"/>
	</doc>
	<doc for="Page.EnableViewState">
		<summary>
			<para>Gets or sets a value indicating whether the page
      maintains its view state, and the view state of any server controls it contains,
      when the current page request ends.</para>
		</summary>
		<value>
			<para><see langword=" true"/> if the page
   maintains its view state; otherwise,<see langword="false"/>.
   The default is<see langword=" true"/> .</para>
		</value>
		<example>
			<para>The following example sets the <see langword="EnableViewState"/> property to 
   false when the page is loaded. This disables view state for the
<see langword="Page"/> object, meaning that neither view-state information for 
   the page nor any controls contained by the page are saved.</para>
			<codelink SampleID="Page_EnableViewState_ReSubmit_1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.ClientTarget">
		<summary>
			<para> Gets or sets a value that allows you to override automatic
      detection of browser capabilities and
      to specify how a page renders
      for particular browser clients.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> that specifies the browser capabilities that you want to override.</para>
		</value>
		<remarks>
			<para>If you do not set this property, the <see cref="System.Web.HttpBrowserCapabilities"/> object associated with the <see cref="System.Web.UI.Page.Request" qualify="true"/> 
property reflects the capabilities of
the client browser. If you set this
property, client browser detection is disabled and the page will use
browser capabilities associated with the user agent string that you define. You can
set this property to any valid user agent string. </para>
			<para>The configuration file (Machine.config) on your Web server computer defines 
   four default aliases you can use as shorthand for common user agent strings.
   These defaults are <see langword="ie5"/>, which allows you to customize pages for
   Internet Explorer version 5.5 browsers, <see langword="ie4"/>, which allows you
   to customize pages for Internet Explorer version 4.0 browsers,
<see langword="uplevel"/>, which allows you to customize pages for Internet 
   Explorer 4.0 and later, and <see langword="downlevel"/>, which allows you to
   customize pages for browsers earlier than Internet Explorer 4.0.</para>
			<para> 
   You can set these user agent or alias
   strings programmatically using this property, or set them declaratively using
   the <see topic="cpconpage"/>
   directive's <see langword="clienttarget"/> attribute. If you want to customize
   the response a page sends to browsers other than the four defaults, you have two
   choices. You can set the property to a complete valid user agent string, or
   define a new alias in the <see langword="&lt;clientTarget&gt;"/> section of the
   application-level configuration file (Web.config) and set this property to that
   alias. For more information, see <see topic="cpconaspnetconfiguration"/>.</para>
			<para>The following example defines an <c>ie302</c> alias and includes sections needed to 
configure your application in its Web.config file. Using this alias, you can set
the <see langword="ClientTarget"/> property to <c>ie302</c> and customize pages
specifically for Internet Explorer version 3.02 browsers. </para>
			<code>
&lt;configuration&gt;
  &lt;system.web&gt;
   &lt;clientTarget&gt;
    &lt;add alias="ie302" useragent="Mozilla/2.0 (compatible; MSIE 3.02; Windows NT 3.5)" /&gt;
   &lt;/clientTarget&gt;
  &lt;/system.web&gt;
&lt;/configuration&gt;
</code>
		</remarks>
	</doc>
	<doc for="Page.RaisePostBackEvent">
		<summary>
			<para>Notifies the server control that caused the postback that it should handle an incoming
      post back event.</para>
		</summary>
		<param name="sourceControl">The ASP.NET server control that caused the postback. This control must implement the <see langword="IPostBackEventHandler"/> interface.</param>
		<param name=" eventArgument">The post-back argument.</param>
		<remarks>
			<para>The <see langword="Page"/> calls the 
<see langword="RaisePostBackEvent"/> method
   when a postback occurs. This
   call occurs in the page life cycle after loading and change notification
   are complete but before prerendering occurs.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="RaisePostBackEvent"/> method to 
   notify ASP.NET that a post-back event is raised when a custom <c>userButton</c> server
control is clicked.</para>
			<codelink SampleID="Page_RaisePostBackEvent" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.IPostBackEventHandler"/>
	</doc>
	<doc for="Page.Context">
		<summary>
			<para>Gets the <see cref="System.Web.HttpContext"/>
object associated with the page.</para>
		</summary>
		<value>
			<para>An <see langword="HttpContext "/> object that contains information associated with the
   current page.</para>
		</value>
		<remarks>
			<para> This property provides programmatic access to
      the context the page runs in, including information about the request,
      response, session and application.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="Context"/> property to access
   the <see cref="System.Web.HttpContext.AddError" qualify="true"/> and <see cref="System.Web.HttpContext.ClearError" qualify="true"/> methods and the <see cref="System.Web.HttpContext.AllErrors" qualify="true"/> property. The example creates three custom
   exceptions using the <see langword="AddError"/> method and uses the
<see langword="AllErrors"/> property to load these exceptions to an array. It 
   then writes the array to the containing page and uses the
<see langword="ClearError"/> method to clear all the errors from the 
<see langword="Context"/> object.</para>
			<codelink SampleID="System.Web.UI.Page.Context" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpContext"/>
	</doc>
	<doc for="Page.ViewStateUserKey">
		<summary>
			<para>Assigns an identifier to an
      individual user in the view state variable associated with the current
      page.
</para>
		</summary>
		<value>
			<para>The identifier for the individual user.</para>
		</value>
		<exception cref="HttpException">The <see langword="ViewStateUserKey"/> property was accessed too late during page processing.</exception>
		<remarks>
			<para>Setting 
      the <see langword="ViewStateUserKey"/> property can
      help you prevent one-click attacks on your application from malicious users. It
      does this by allowing you to assign an identifier to the view state variable for
      individual users so that they cannot use the variable to generate a one-click
      attack. You can set this property to any string value, such as the user's
      session ID or to the user's authenticated name.
</para>
			<note type="note">
      You must set this property during the
   <see langword="Page_Init"/> phase of page processing. Setting this property 
      during the <see langword="Page_Load"/> phase throws an exception.
   </note>
		</remarks>
	</doc>
	<doc for="OutputCacheLocation.ServerAndClient">
		<summary>
			<para>The output cache can be stored only at the origin server 
      or at the requesting client. Proxy servers are not allowed to cache the response.</para>
		</summary>
	</doc>
	<doc for="Page.InitOutputCache">
		<summary>
			<para>Initializes the output cache for the current page request.</para>
		</summary>
		<param name="duration"> The amount of time that objects stored in the output cache are valid.</param>
		<param name=" varyByHeader"> A semicolon-separated list of headers that content from the output cache will vary by.</param>
		<param name=" varyByCustom"> The <see langword="Vary"/> HTTP header.</param>
		<param name=" location"> One of the <see cref="System.Web.UI.OutputCacheLocation"/> values.</param>
		<param name=" varyByParam"> A semicolon-separated list of parameters, received by a GET or POST method, that content from the output cache will vary by.</param>
		<exception cref="ArgumentOutOfRangeException">An invalid value is specified for the output cache location.</exception>
		<remarks>
			<para>You should not call this method. To enable and manipulate output caching for
      a page, use either the <see topic="cpconOutputCache"/> directive in the .aspx file, or the methods
      and properties of the <see cref="System.Web.HttpCachePolicy"/> class. The latter are accessible
      through <see langword="Response.Cache"/> syntax in the page's
      code-declaration block or code-behind file. For more information, see <see topic="cpconASPOutputCache"/>.</para>
		</remarks>
		<seealso topic="cpconoutputcache"/>
		<seealso topic="cpconaspoutputcache"/>
		<seealso cref="System.Web.HttpCachePolicy"/>
	</doc>
	<doc for="Page.RegisterClientScriptBlock">
		<summary>
			<para> Allows ASP.NET server controls to emit client-side script
      blocks in the <see cref="System.Web.UI.Page"/>
      .</para>
		</summary>
		<param name=" key">Unique key that identifies a script block.</param>
		<param name="script">Content of script that is sent to the client.</param>
		<remarks>
			<para>The client-side script is emitted just after the opening
      tag of the <see langword="Page"/> object's &lt;form runat= server&gt;
      element. The script block
      is emitted as the object that renders the output is defined, so you must include
      both tags of the &lt;script&gt; element.</para>
			<para>By identifying the script with a key, multiple
      server control instances can request the script block without it being emitted
      to the output stream twice.</para>
			<para>Any script blocks with the same <paramref name="key"/> parameter values are considered
   duplicates.</para>
			<note type="note">
   Remember to include HTML comment tags
   around your script so that it will not be rendered if a requesting
   browser does not support scripts.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates the use of the
   <see langword="RegisterClientScriptBlock"/> method in conjunction with
      the <see cref="System.Web.UI.Page.IsClientScriptBlockRegistered"/> method. If the ECMAScript
      written in the code-declaration block has not already been registered, as tested
      by <see langword="IsClientScriptBlockRegistered"/> , the
   <see langword="RegisterClientScriptBlock"/>
   call is made.</para>
			<codelink SampleID="System.Web.UI.Page.RegisterClientScriptBlock" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.RegisterViewStateHandler">
		<summary>
			<para> Causes page view state to be persisted, if called.</para>
		</summary>
		<remarks>
			<para>If you do not call this method, the page will not calculate its view state.
      Server controls call this method to calculate the view state for their
      containing page. If this method is not called, the save-view-state stage of page
      processing is skipped.</para>
			<note type="note">
      Typically, only the <see cref="System.Web.UI.HtmlControls.HtmlForm"/> server control for the page calls
      this method.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="Page_RegisterViewStateHandler" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.SmartNavigation">
		<summary>
			<para>Gets or sets a value indicating whether smart navigation is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if smart navigation is enabled; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>In most circumstances, do not set this property in code. Set the
   <see langword="SmartNavigation "/>attribute to <see langword="true"/> in the
   <see topic="cpconPage"/> directive in the .aspx
      file. When the page is requested, the dynamically generated class sets this
      property.</para>
			<para>When a page is requested by an Internet Explorer 5.5 browser, or later, smart navigation
      enhances the user's experience of the page by performing the following:</para>
			<list type="bullet"><item>
					<term>
         
         eliminating the flash caused by navigation.</term>
				</item>
				<item>
					<term>
         
         persisting the scroll position when moving from page
         to page.</term>
				</item>
				<item>
					<term>
         
         persisting element focus between navigations.</term>
				</item>
				<item>
					<term>
         
         retaining only the last page state in the browser's history.</term>
				</item>
			</list>
			<para>Smart navigation is best used with ASP.NET pages that require frequent
   postbacks but with visual content that does not change dramatically on return.
   Consider this carefully when deciding whether to set this property to
<see langword="true"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Page_SmartNavigation" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.GetPostBackEventReference">
		<overload>
			<para>Obtains a reference to a client-side script function that causes, when invoked, the
      server to post back to the page.</para>
		</overload>
		<summary>
			<para>Obtains a reference to a client-side script function that causes, when invoked, the
      server to post back to the page.</para>
		</summary>
		<param name="control">The server control to process the post back on the server.</param>
		<returns>
			<para>The text of the client-side function call that can be inserted in a client-side event handler.</para>
		</returns>
		<example>
			<codelink SampleID="Page_GetPostBackEventReference" SnippetID="2"/>
		</example>
	</doc>
	<doc for="Page.GetPostBackEventReference1">
		<summary>
			<para>Obtains a reference to a client-side script function that causes, when
      invoked, the server to post back to the page. This method also passes a parameter to the server control that performs the post-back processing on the
      server.</para>
		</summary>
		<param name="control">The server control to process the post back.</param>
		<param name=" argument">The parameter passed to the server control.</param>
		<returns>
			<para> The text of the
      client-side function call that can be inserted into a client-side event
      handler. </para>
		</returns>
		<example>
			<codelink SampleID="Page_GetPostBackEventReference" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Page.Request">
		<summary>
			<para>Gets the <see cref="System.Web.HttpRequest"/>
object for the requested page.</para>
		</summary>
		<value>
			<para>The current <see langword="Request"/> object associated
   with the page.</para>
		</value>
		<exception cref="System.Web.HttpException">Occurs when the <see langword="Request"/> object is not available.</exception>
		<remarks>
			<para>The <see langword="Request"/> object
   contains information about
   the current HTTP request.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to obtain the
   <see langword="Headers"/> collection from the <see langword="Request"/> object and
      write it to an ASP.NET page.</para>
			<codelink SampleID="Classic HttpRequest.Headers Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpException"/>
		<seealso cref="System.Web.HttpRequest"/>
		<seealso cref="System.Web.HttpResponse"/>
		<keyword term="Request"/>
	</doc>
	<doc for="Page.Response">
		<summary>
			<para>Gets the <see cref="System.Web.HttpResponse"/>
				<see langword=" "/>object associated with the <see cref="System.Web.UI.Page"/>
. This object allows you to send HTTP
response data to a client and contains information about that response.</para>
		</summary>
		<value>
			<para>The current <see langword="Response "/>object associated
   with the page.</para>
		</value>
		<exception cref="System.Web.HttpException">The <see langword="Response"/> object is not available.</exception>
		<example>
			<para>The following examples demonstrates creating a cookie and
      adding it to the page's HTTP output by using the <see langword="Response"/>object.</para>
			<codelink SampleID="Classic HttpResponse.Cookies Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpResponse"/>
		<keyword term="Response"/>
	</doc>
	<doc for="Page.Server">
		<summary>
			<para>Gets the <see langword="Server"/> object, which is an
   instance of the <see cref="System.Web.HttpServerUtility"/> class.</para>
		</summary>
		<value>
			<para>The current <see langword="Server "/>object associated
   with the
   page.</para>
		</value>
		<remarks>
			<para>This property provides access to the frequently used <see cref="System.Web.HttpServerUtility.HtmlEncode"/> and <see cref="System.Web.HttpServerUtility.MapPath"/> methods, among
   others.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to access error information from the server
      by using the <see langword="Server"/> object. In particular, the example gets the
      requested URL from the <see langword="Request"/> object,
      the most recent error from the <see langword="Server"/>
      object (using the <see langword="GetLastError"/> method) and converts them both to
      strings that can be displayed by the client. Once the <see langword="message"/>
      variable is written to the client, the error is deleted using the
   <see langword="ClearError"/> method.</para>
			<codelink SampleID="System.Web.UI.Page_Error method" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpServerUtility"/>
		<keyword term="Server"/>
	</doc>
	<doc for="Page.Cache">
		<summary>
			<para>Gets the <see cref="System.Web.Caching.Cache"/> object associated with the
   application in which the page resides.</para>
		</summary>
		<value>
			<para>The <see langword="Cache"/>
object associated with the page's application.</para>
		</value>
		<exception cref="HttpException">The <see langword="Cache"/> is not instantiated.</exception>
		<remarks>
			<para>An application's <see langword="Cache"/> object allows
   you to store and retrieve arbitrary data on subsequent requests . The cache is
   not specifically associated with a page or user session. It is used
   primarily to enhance application performance. For more information, see <see topic="cpconCacheAPIs"/>.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="Cache"/> property to access
   the <see cref="System.Web.Caching.Cache"/> method. It then iterates through all the
   objects stored in the <see langword="Cache"/> object, storing their
<see langword="Key"/> and <see langword="Value"/> properties to a string that 
   contains an HTML table. It then writes the contents of the table to the
   containing page.</para>
			<codelink SampleID="Page_EnableViewState_ReSubmit_2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso topic="cpconCacheAPIs "/>
		<keyword term="Cache, ASP.NET caching, accessing cached data from a page"/>
	</doc>
	<doc for="Page.User">
		<summary>
			<para>Gets information about the user making the page request. </para>
		</summary>
		<value>
			<para>An <see cref="System.Security.Principal.IPrincipal"/> object that
   represents the user making the page request.</para>
		</value>
		<remarks>
			<para>An <see langword="IPrincipal"/> object represents the security context of the
   user on whose behalf the code is running, including that user's identity and any
   roles to which they belong.</para>
			<para>This property uses the <see langword="HttpContext"/> object's <see cref="System.Web.HttpContext.User"/>
property to determine where the request originates.</para>
		</remarks>
		<example>
			<para>The following example uses the
   <see langword="Page.User"/> property to obtain authentication
      information about the user who is requesting the page.</para>
			<codelink SampleID="Page_User" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpContext"/>
		<seealso cref="System.Security.Principal.IPrincipal"/>
		<keyword term="User"/>
	</doc>
	<doc for="OutputCacheLocation">
		<summary>
			<para> Specifies the valid values for the location of the output
      cache.</para>
		</summary>
		<remarks>
			<para>The values specified by this enumeration are used when
      you include an <see langword="@ OutputCache"/>
      directive in a .aspx file. These values set the
      cacheability of page output. For more information, see <see topic="cpconASPOutputCache"/>
      . </para>
		</remarks>
		<example>
			<codelink SampleID="OutputCacheLocation_Resubmit" SnippetID="1"/>
		</example>
		<seealso topic="cpconoutputcache"/>
		<seealso topic="cpconaspoutputcache"/>
		<seealso cref="System.Web.UI.Page"/>
	</doc>
	<doc for="Page.Application">
		<summary>
			<para>Gets the <see langword="Application"/> object for the current Web request.</para>
		</summary>
		<value>
			<para>The current data in the <see cref="System.Web.HttpApplicationState"/> class.</para>
		</value>
		<example>
			<codelink SampleID="Page.Application_Sample1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpApplicationState"/>
	</doc>
	<doc for="Page.Session">
		<summary>
			<para>Gets the current <see langword="Session"/>
object provided by ASP.NET.</para>
		</summary>
		<value>
			<para> The current session-state data.</para>
		</value>
		<exception cref="HttpException">Occurs when the session information is set to <see langword="null"/>.</exception>
		<remarks>
			<para>This property provides information about the current
      request's session. A <see langword="Session"/> object is maintained for each user
      that requests a page or document from an ASP.NET application. Variables stored
      in the <see langword="Session"/>
      object are not
      discarded when the user moves from page to page in the application; instead,
      these variables persist as long as the user is accessing pages in your
      application. For more information about session state, see <see topic="cpconsessionstate"/>.</para>
		</remarks>
		<example>
			<para>The
      following example creates a GetStyle function
      that retrieves a key stored in the session state of the Web Forms page and
      converts its value to a string.</para>
			<codelink SampleID="Page.Session_Samples1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpException"/>
	</doc>
</docs>
