<docs>
	<doc for="RenderMethod">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="Control.PreRenderRecursive">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="Control.IDataBindingsAccessor.HasDataBindings">
		<internalonly/>
		<summary>
			<para>Returns whether the control contains any data binding logic. This method is 
       only accessed by RAD designers.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the control contains data 
    binding logic; otherwise, <see langword="false"/> .</para>
		</returns>
		<seealso cref="IDataBindingsAccessor"/>
	</doc>
	<doc for="Control.IDataBindingsAccessor.DataBindings">
		<summary>
			<para>Indicates a collection of all data bindings on the control. This property is 
       read-only.</para>
		</summary>
		<value>
			<para>The collection of data bindings.</para>
		</value>
		<seealso cref="IDataBindingsAccessor"/>
	</doc>
	<doc for="Control.IParserAccessor.AddParsedSubObject">
		<summary>
			<para>Notifies the control that an element, XML or HTML, was parsed, and adds it to 
       the control.</para>
		</summary>
		<param name="obj">The parsed element.</param>
		<remarks>
			<para>If the parsed element is a control, it is added to 
       the <see cref="System.Web.UI.ControlCollection"/> object maintained by the parent control.</para>
		</remarks>
	</doc>
	<doc for="Control.DumpControlTree">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="Control.EventDataBinding">
		<summary>
			<para>Represents the <see langword="DataBinding"/> event. This field is read-only.</para>
		</summary>
		<seealso cref="System.Web.UI.Control.DataBind"/>
		<seealso cref="System.Web.UI.Control.DataBinding"/>
		<seealso topic="cpcondatabindinginwebforms"/>
	</doc>
	<doc for="Control.EventInit">
		<summary>
			<para>Represents the <see langword="Init"/> event. This field is read-only.</para>
		</summary>
		<seealso cref="System.Web.UI.Control.Init"/>
		<seealso cref="System.Web.UI.Control.OnInit"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconeventsinheritedfromcontrol"/>
	</doc>
	<doc for="Control.EventLoad">
		<summary>
			<para>Represents the <see langword="Load"/> event. This field is read-only.</para>
		</summary>
		<seealso topic="cpconwebformspageprocessing"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso cref="System.Web.UI.Control.Load"/>
		<seealso cref="System.Web.UI.Control.OnLoad"/>
	</doc>
	<doc for="Control.EventUnload">
		<summary>
			<para>Represents the <see langword="Unload"/> event. This field is read-only.</para>
		</summary>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconwebformspageprocessing"/>
		<seealso cref="System.Web.UI.Control.Unload"/>
		<seealso cref="System.Web.UI.Control.OnUnload"/>
	</doc>
	<doc for="Control.EventPreRender">
		<summary>
			<para>Represents the <see langword="PreRender"/> event. This field is read-only.</para>
		</summary>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso cref="System.Web.UI.Control.PreRender"/>
		<seealso cref="System.Web.UI.Control.OnPreRender"/>
	</doc>
	<doc for="Control.EventDisposed">
		<summary>
			<para>Represents the <see langword="Disposed"/> event. This field is read-only.</para>
		</summary>
		<seealso cref="System.Web.UI.Control.Disposed"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
	</doc><doc for="Control.ChildControlsCreated">
		<summary>
			<para>Gets a value that indicates whether the server control's child controls have been created.</para>
		</summary>
		<value>
			<para><see langword="true"/> if child controls have been
   created; otherwise, <see langword="false"/> .</para>
		</value>
		<example>
			<para>The following example demonstrates an override of the <see cref="System.Web.UI.Control.OnDataBinding"/>
method. To ensure that child controls are not created until data binding occurs
again, the <see langword="ChildControlsCreated"/> property is set to
<see langword="true"/> once
the <see langword="RepeaterItem"/> objects are created and added to the
control's <see cref="System.Web.UI.ControlCollection"/> object.</para>
			<codelink SampleID="TemplatedDataBoundControl" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.UI.Control.CreateChildControls"/>
	</doc><doc for="BuildMethod">
		<summary>
			<para>Represents the method that is used to build a <see cref="System.Web.UI.Control"/> .</para>
		</summary>
		<remarks>
			<para>This delegate passes the information necessary to build ASP.NET server 
 controls as defined by the TemplateControl class, or one of the classes that
 inherit from TemplateControl, Page and UserControl.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control"/>
		<seealso cref="System.Web.UI.TemplateControl"/>
		<seealso cref="System.Web.UI.Page"/>
		<seealso cref="System.Web.UI.UserControl"/>
	</doc><doc for="Control.BindingContainer">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Control.Controls">
		<summary>
			<para> Gets a <see cref="System.Web.UI.ControlCollection"/> object that represents the child controls for a specified server control in the
   UI hierarchy.</para>
		</summary>
		<value>
			<para>The collection of child controls for the specified server control.</para>
		</value>
		<remarks>
			<para> On an ASP.NET page, when controls are added declaratively between
      the opening and closing tags of a server control, ASP.NET automatically
      adds the controls to the containing server control's <see cref="System.Web.UI.ControlCollection"/>. Any HTML tags or text strings that are not
      processed on the server are treated as <see cref="System.Web.UI.LiteralControl"/>
      objects. These are added to the collection like other server controls.</para>
			<para>The <see langword="Controls"/> property allows you programmatic access to the instance of
   the <see langword="ControlCollection"/>
   class for any server control. You can
   add controls to the collection, remove controls from the collection, or iterate through the
   server controls in the collection.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to add child
      controls to a server control's <see langword="ControlCollection"/> object through its
   <see langword="Controls"/>
   property.</para>
			<codelink SampleID="Classic Control.Controls Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.ControlCollection"/>
		<seealso cref="System.Web.UI.Control.CreateControlCollection"/>
		<seealso cref="System.Web.UI.Control.CreateChildControls"/>
		<keyword term="ASP.NET server controls, programmatic access to child controls"/>
		<keyword term="server controls, programmatic access to child controls"/>
	</doc><doc for="Control.FindControl1">
		<summary>
			<para>Searches the current naming container for a server control with the specified
   <paramref name="id"/> and an integer,
      specified in the
   <paramref name="pathOffset"/> parameter, that aids in 
      the search. You should not override this version of the
   <see langword="FindControl"/> 
   method.</para>
		</summary>
		<param name="id">The identifier for the control to be found.</param>
		<param name=" pathOffset">The number of controls up the page control hierarchy needed to reach a naming container.</param>
		<returns>
			<para>The specified control, or <see langword="null"/> if the specified control does not exist.</para>
		</returns>
	</doc><doc for="Control.HasControls">
		<summary>
			<para>Determines if the server control contains any child
      controls.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the control contains other
   controls; otherwise, <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para> Since this method simply determines if any child controls 
      exist, it can enhance performance by allowing you to avoid an unnecessary
   <see langword="Controls.Count"/> property call. Calls to the this property 
      require a <see cref="System.Web.UI.ControlCollection"/> object to be instantiated. If there are no
      children, this object creation wastes server
      resources.</para>
		</remarks>
		<example>
			<para>The following example uses the
   <see langword="HasControls"/> method to determine if any controls exist
      before using the <see langword="Control.Count"/> property to iterate through a
   <see langword="ControlCollection"/>object.</para>
			<codelink SampleID="Classic Control.HasControls Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.ControlCollection"/>
	</doc><doc for="Control.ClearChildViewState">
		<summary>
			<para> Deletes the view-state information for all the server control's child
      controls.</para>
		</summary>
		<remarks>
			<para>This method is commonly used when you override the <see cref="System.Web.UI.Control.DataBind"/> method
   when developing templated data-bound server controls. If you do not call this
   method, child control view-state information can be written to a parent server
   control, only to be overridden when data binding occurs.</para>
			<para>For more information about using this method, see <see topic="cpcondevelopingtemplateddataboundcontrol"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to override
      the <see cref="System.Web.UI.Control.OnDataBinding"/> method for a templated data-bound control. If the
   <see langword="DataSource"/> that the control binds to is populated, the
      control's <see cref="System.Web.UI.ControlCollection"/> is emptied, using the
   <see langword="Controls.Clear"/> method, and the
   <see langword="ClearChildViewState"/> method is used to remove any view-state
      information that had been saved for the child controls.</para>
			<codelink SampleID="TemplatedDataBoundControl" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<seealso cref="System.Web.UI.Control.DataBind"/>
		<seealso topic="cpcondevelopingtemplateddataboundcontrol"/>
		<keyword term="ASP.NET server controls, deleting view state information"/>
		<keyword term="server controls, deleting view state information"/>
	</doc><doc for="Control.Render">
		<summary>
			<para>Sends server control content to a provided <see cref="System.Web.UI.HtmlTextWriter"/> object, which writes the content to
   be rendered on
   the client.</para>
		</summary>
		<param name="writer">The <see langword="HtmlTextWriter"/> object that receives the server control content.</param>
		<remarks>
			<para>When developing custom server controls, you can override
      this method to generate content for an ASP.NET page. For more information, see
   <see topic="cpconmethodsinwebformscontrols"/>
   .</para>
		</remarks>
		<example>
			<para>The following example overrides the
   <see langword="Render"/> method, using the <see cref="System.Web.UI.Control.HasControls"/> method to determine whether the server control has any
      child controls stored in its <see cref="System.Web.UI.ControlCollection"/> object, which is accessible through
      the <see cref="System.Web.UI.Control.Controls" qualify="true"/>
      property. If so, it determines
      whether the first server control in the collection is literal text. If
      both conditions are met, the literal text is appended to an HTML string. </para>
			<codelink SampleID="Classic Control.Render Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.HtmlTextWriter"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconmethodsinwebformscontrols"/>
		<keyword term="ASP.NET server controls, rendering content to the page"/>
		<keyword term="server controls, rendering content to the page"/>
	</doc><doc for="Control">
		<summary>
			<para> Defines the properties, methods, and events
      that are shared by all ASP.NET server controls.</para>
		</summary>
		<remarks>
			<para> This is the primary class that you derive from when you
      develop custom ASP.NET server controls. <see langword="Control"/> does not have any user
      interface (UI) specific features. If you are authoring a control that does not
      have a UI, or combines other controls that render their own UI, derive from
   <see langword="Control"/>
   . </para>
			<para>ASP.NET server controls include ASP.NET pages. Pages are instantiations classes
   derived from the <see cref="System.Web.UI.Page"/>
   class when a request for an ASP.NET page is processed. Also included are literal controls (strings of HTML and
   text that are not processed on the server), HTML server
   controls, Web server controls, and any custom server controls that you create or
   download.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a custom server control that derives from
      the <see langword="Control"/>
      class. The <see langword="InnerContent"/> class overrides the <see cref="System.Web.UI.Control.Render" qualify="true"/>
      method, checks to see if the class has any
      child controls on the page and determines whether the first child of the control is a
      literal control. If both of these conditions are met, the overridden method
      writes the HTML string &lt;H2&gt;Your Message: , the contents of the
      literal control, and a closing &lt;/H2&gt; tag to the Web Forms page. </para>
			<codelink SampleID="Classic Control Example" SnippetID="1"/>
		</example>
		<seealso topic="cpcondevelopingwebformscontrols"/>
		<seealso cref="System.Web.UI.Page"/>
		<seealso cref="System.Web.UI.TemplateControl"/>
		<seealso cref="System.Web.UI.LiteralControl"/>
		<keyword term="ASP.NET server controls, creating custom"/>
		<keyword term="server controls, creating custom"/>
		<keyword term="creating custom ASP.NET server controls"/>
		<keyword term="ASP.NET server controls, members inherited by all"/>
		<keyword term="server controls, members inherited by all"/>
	</doc><doc for="Control.CreateChildControls">
		<summary>
			<para> Notifies server controls that use composition-based implementation to create any child
      controls they contain in preparation for posting back or rendering.
      </para>
		</summary>
		<remarks>
			<para>When you develop a composite or templated server control, you must override this
      method. For more information, see <see topic="cpconcustomizingcontrolswithtemplates"/> and <see topic="cpcondevelopingcompositecontrols"/>.</para>
			<para>For an overview of <see langword="Control"/> class methods that are commonly overridden, see <see topic="cpconmethodsinwebformscontrols"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates an overridden version
      of the <see langword="CreatChildControls"/>
      method. In this implementation, the composite control displays
      a <see cref="System.Web.UI.WebControls.TextBox"/> control enclosed in two literal controls that render
      HTML.</para>
			<codelink SampleID="SystemWebUIControl CreateChildControls and EnsureChildControls" SnippetID="2"/>
		</example>
		<seealso topic="cpcondevelopingcompositecontrols"/>
		<seealso topic="cpconcustomizingcontrolswithtemplates"/>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.ControlCollection"/>
		<seealso cref="System.Web.UI.Control.ChildControlsCreated"/>
	</doc><doc for="Control.Control">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.Control"/> class.</para>
		</summary>
		<example>
			<para>The following example demonstrates using the <see langword="Control"/> 
constructor to instantiate a custom server control, MyControl.</para>
			<codelink SampleID="Control_Control" SnippetID="1"/>
		</example>
		<keyword term="ASP.NET server controls, initializing"/>
		<keyword term="server controls, initializing"/>
	</doc><doc for="Control.Events">
		<summary>
			<para>Gets a list of event handler delegates for the control. This property is
      read-only.</para>
		</summary>
		<value>
			<para>The list of event handler delegates.</para>
		</value>
		<remarks>
			<para>This property is of type <see cref="System.ComponentModel.EventHandlerList"/>, which uses a linear search algorithm to find entries in
   the list of delegates. A linear search algorithm is inefficient when working with
   a large number of entries. Therefore, when you have a large list, finding entries
   with this property will be slow.</para>
		</remarks>
		<seealso cref="System.ComponentModel.EventHandlerList"/>
	</doc><doc for="Control.NamingContainer">
		<summary>
			<para> Gets a reference to the server control's naming
      container, which creates a unique namespace for differentiating between server
      controls with the same <see cref="System.Web.UI.Control.ID" qualify="true"/>
      property value.</para>
		</summary>
		<value>
			<para> The server control's naming container.</para>
		</value>
		<remarks>
			<para> Each page in an ASP.NET Web application contains a hierarchy of controls. This hierarchy
      is not dependent on whether a control generates UI visible to the user. The
      naming container for a given control is the parent control above it in the
      hierarchy that implements the <see langword="INamingContainer"/> interface. A server control that
      implements this interface creates a unique namespace for the <see langword="ID "/>
      property values of its child server controls.</para>
			<para>Creating a unique namespace for server controls is particularly important when you bind data against list Web
      server controls, such as the <see cref="System.Web.UI.WebControls.Repeater"/> and <see cref="System.Web.UI.WebControls.DataList"/> server controls. When
      multiple entries in the data source create multiple instances of a server control that is
      a child of the repeating control, the naming container ensures that each
      instance of these child controls have <see cref="System.Web.UI.Control.UniqueID"/> property values that do not
      conflict. The default naming container for a page is the instance of
      the <see cref="System.Web.UI.Page"/> class generated when that page is requested.</para>
			<para>You can use this property to determine the naming container where a specific
      server control is located. </para>
		</remarks>
		<example>
			<para>The following example demonstrates using the 
   <see langword="NamingContainer"/> property.</para>
			<codelink SampleID="Control_NamingContainer" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.INamingContainer"/>
		<seealso cref="System.Web.UI.Control.UniqueID"/>
		<seealso cref="System.Web.UI.Control.ID" qualify="true"/>
		<keyword term="ASP.NET server controls, unique namespaces for repeated controls"/>
		<keyword term="server controls, unique namespaces for repeated controls"/>
	</doc><doc for="Control.Site">
		<summary>
			<para> Gets information about the Web site to which the server control belongs.</para>
		</summary>
		<value>
			<para> Information about the server control's Web site. </para>
		</value>
		<remarks>
			<para>Sites bind a <see langword="Component"/> to a
<see langword="Container"/> and enable communication between them. They also 
   provide a way for the container to manage its components.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ISite"/>
	</doc><doc for="Control.Visible">
		<summary>
			<para> Gets or sets a value that indicates whether a server control is rendered as UI on
      the page.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is visible on the page; otherwise
<see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> If this property is <see langword="false"/>, the server control is
   not rendered. You should take this into account when organizing the lay out of your page.</para>
		</remarks>
	</doc><doc for="Control.AddParsedSubObject">
		<summary>
			<para>Notifies the server control that an element, either XML
      or HTML, was parsed, and adds the element to the server control's <see cref="System.Web.UI.ControlCollection"/>
      object.</para>
		</summary>
		<param name="obj">An <see cref="System.Object"/> that represents the parsed element.</param>
		<remarks>
			<para>Unless you override it, this method automatically
      adds <see cref="System.Web.UI.LiteralControl"/> objects to the server control's
   <see langword="ControlCollection"/> object. This
      collection is accessible through <see cref="System.Web.UI.Control.Controls" qualify="true"/> property.</para>
		</remarks>
		<example>
			<para>The following example is a custom server control that uses the <see langword="AddParsedSubObject"/> method to determine if elements declared between the opening and closing tags of this control are <see cref="System.Web.UI.WebControls.TextBox"/> Web server controls. If they are, they are added to an <see cref="System.Collections.ArrayList"/> object, <c>items</c>. When the overridden <see cref="System.Web.UI.Control.CreateChildControls"/> method is called, it iterates through the <see langword="ArrayList"/> and adds each object in it to the <see cref="System.Web.UI.ControlCollection"/> of the custom server control.</para>
			<codelink SampleID="Control_AddParsedSubObject" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.ControlCollection"/>
	</doc><doc for="Control.RenderChildren">
		<summary>
			<para>Outputs the content of a server control's children to a provided <see cref="System.Web.UI.HtmlTextWriter"/> object, which writes
   the content to be rendered on
   the client.</para>
		</summary>
		<param name="writer">The <see langword="HtmlTextWriter"/> object that receives the rendered content.</param>
		<remarks>
			<para>This method notifies ASP.NET to render any Active Server Pages
      (ASP) code on the page. If no ASP code exists on the page, this method
      renders any child controls for the server control.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see langword="RenderChildren"/> method in a custom server control. It determines whether the current control has any child controls in its <see cref="System.Web.UI.ControlCollection"/> object. If it does, it uses the <see cref="System.Web.UI.ControlCollection.Count"/> property to iterate through the collection. As it encounters each child control, it uses the <see cref="System.Web.UI.Control.RenderControl"/> method to render the parent control, and all of its child controls, to the containing page.</para>
			<para>
The overridden <see cref="System.Web.UI.Control.Render"/> method then calls the overridden <see cref="System.Web.UI.Control.RenderChildren"/> method.
</para>
			<codelink SampleID="Control_Sample_1" SnippetID="4"/>
		</example>
		<seealso cref="System.Web.UI.Control.Render"/>
		<seealso cref="System.Web.UI.Control.RenderControl"/>
	</doc><doc for="Control.IsLiteralContent">
		<summary>
			<para> Determines
      if the server control holds only literal content.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the server control contains solely
   literal content; otherwise <see langword="false"/> .</para>
		</returns>
		<remarks>
			<para>When this method returns <see langword="true"/>
, the server control's collection holds
a single literal control.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control.HasControls"/>
		<seealso cref="System.Web.UI.LiteralControl"/>
		<keyword term="ASP.NET server controls, detecting literal content"/>
		<keyword term="server controls, detecting literal content"/>
	</doc><doc for="Control.OnLoad">
		<summary>
			<para>Raises the <see cref="System.Web.UI.Control.Load"/>
event.</para>
		</summary>
		<param name="e">The <see cref="System.EventArgs"/> object that contains the event data.</param>
		<remarks>
			<para>This method notifies the server control that it should
      perform actions common to each HTTP request for the page it is
      associated with, such as setting up a database query. At this stage in the
      page lifecycle, server controls in the hierarchy are created and initialized, view state
      is restored, and form controls reflect client-side data.</para>
		</remarks>
		<example>
			<para>The following example creates a text stream object, <c>myFile</c>, and uses it to print messages to a text file when defined <see cref="System.Web.UI.Page"/> and control lifecycle events occur during request processing. During the <see langword="OnLoad"/> method call, the string "Custom control has loaded" is written to the file and the text stream object is closed.</para>
			<codelink SampleID="Control_OnUnload" SnippetID="1"/>
		</example>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso cref="System.Web.UI.Page"/>
		<keyword term="ASP.NET server controls, loading to the page"/>
		<keyword term="server controls, loading to the page"/>
		<keyword term="ASP.NET page lifecycle"/>
	</doc><doc for="Control.SetRenderMethodDelegate">
		<internalonly/>
		<summary>
			<para> Assigns an event handler
      delegate to render the server control and its content into its parent
      control. </para>
		</summary>
		<param name="renderMethod">The information necessary to pass to the delegate so that it can render the server control.</param>
		<remarks>
			<para>This method is supplied for implementation purposes only; you should never
      call it directly.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control.RenderChildren"/>
	</doc><doc for="Control.BuildProfileTree">
		<internalonly/>
		<summary>
			<para>Gathers information about the server control and delivers it to the <see cref="System.Web.UI.Page.Trace"/>
property to be displayed when tracing is enabled for the page.</para>
		</summary>
		<param name="parentId">The identifier of the control's parent.</param>
		<param name=" calcViewState">A <see langword="Boolean"/> that indicates whether the view-state size is calculated.</param>
		<remarks>
			<para>This property gathers the information necessary about a
      page's UI hierarchy and passes it to the page's <see langword="Trace"/> property.
      When you enable tracing, either for a page or for your application, this
      information is displayed in the <see langword="Control Tree"/> section of the trace output. Trace output
      for a page is appended to the end of the page; while
      trace output for an application can be viewed from the trace viewer
      (trace.axd file) which is stored in the application's root directory. For more information
      about tracing, see <see topic="cpcontracefunctionality"/>.</para>
		</remarks>
	</doc><doc for="Control.Dispose">
		<summary>
			<para> Enables a server control
      to perform final clean up before it is released from memory.</para>
		</summary>
		<remarks>
			<para>Call <see langword="Dispose"/> when you are finished using the <see cref="System.Web.UI.Control"/>. The
<see langword="Dispose"/> method leaves the <see langword="Control"/>in an unusable state. After 
   calling this method, you must release all references to the control so the memory it was occupying can be reclaimed by garbage collection. </para>
			<note type="note">
   Always call <see cref="System.Web.UI.Control.Dispose"/>
   before you release your last reference to the <see cref="System.Web.UI.Control"/>. Otherwise, the resources the
<see cref="System.Web.UI.Control"/> 
is using will not be freed until garbage collection calls the <see cref="System.Web.UI.Control"/> object's
destructor.
</note>
			<para>For more information on methods that are commonly overridden when
   creating custom server controls, see <see topic="cpconmethodsinwebformscontrols"/>.</para>
		</remarks>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconmethodsinwebformscontrols"/>
		<keyword term="server control lifecycle "/>
	</doc><doc for="Control.RenderControl">
		<summary>
			<para>Outputs server control content to a provided <see cref="System.Web.UI.HtmlTextWriter"/> object and stores
   tracing information about the control if tracing is enabled.</para>
		</summary>
		<param name="writer">The <see langword="HtmlTextWriter"/> object that receives the control content.</param>
		<remarks>
			<para>If a server control's <see cref="System.Web.UI.Control.Visible"/>
property is set to <see langword="true"/> , this method determines whether tracing is enabled for
the page. If so, it stores trace information associated with the control, and renders the server control content to the
page.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Web.UI.Control.RenderChildren"/> method in a custom server control. It determines whether the current control has any child controls in its <see cref="System.Web.UI.ControlCollection"/> object. If it does, it uses the <see cref="System.Web.UI.ControlCollection.Count"/> property to iterate through the collection. As it encounters each child control, it uses the <see langword="RenderControl"/> method to render the parent control, and all of its child controls, to the containing page.</para>
			<codelink SampleID="Control_Sample_1" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.UI.HtmlTextWriter"/>
	</doc>
	<doc for="Control.CreateControlCollection">
		<summary>
			<para>Creates a new <see cref="System.Web.UI.ControlCollection"/> object to hold the child controls (both literal and server) of the server control.</para>
		</summary>
		<returns>
			<para>A <see langword="ControlCollection"/> object to contain the current server control's
   child server controls.</para>
		</returns>
		<remarks>
			<para>Override this method in a custom server control if you have created a
      collection object that is derived from the <see langword="ControlCollection"/>
      class. You can then instantiate that collection class in the override of this
      method.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="CreateControlCollection"/> method in a custom server control override of the <see cref="System.Web.UI.Control.CreateChildControls"/> method. The new collection is created, and then populated with two child controls, <c>firstControl</c> and <c>secondControl</c>.
   method.</para>
			<codelink SampleID="Control_Sample_1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.ControlCollection"/>
	</doc>
	<doc for="Control.Page">
		<summary>
			<para> Gets a reference to the <see cref="System.Web.UI.Page"/> instance that contains the
   server control.</para>
		</summary>
		<value>
			<para> The <see langword="Page"/>
instance that
contains the server control.</para>
		</value>
		<remarks>
			<para> This property's value reflects the name of
      the .aspx file that contains the server control.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Web.UI.Control.Render" qualify="true"/> 
method. It uses the <see langword="Page"/> property to access the <see cref="System.Web.UI.Page.IsPostBack" qualify="true"/> property and determine whether the page that
contains this control has just been loaded for the first time or is the result
of a postback.</para>
			<codelink SampleID="Control_Sample" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Page"/>
	</doc>
	<doc for="Control.TemplateSourceDirectory">
		<summary>
			<para> Gets the virtual directory of the <see cref="System.Web.UI.Page"/>
or <see cref="System.Web.UI.UserControl"/> that contains the current server control.</para>
		</summary>
		<value>
			<para>The virtual directory of the page or user control that contains the
      server control. </para>
		</value>
		<example>
			<para>The following example uses the 
   <see langword="TemplateSourceDirectory"/> property twice. The first time it is 
      used in a <see cref="System.Web.UI.Control.MapPathSecure" qualify="true"/> method call to obtain the path to the directory
      in which the control resides. The second time it is in a <see cref="System.IO.Directory.GetFiles" qualify="true"/>
      method call to obtain the list of all the files contained within that directory. </para>
			<codelink SampleID="Control_TemplateSourceDirectory" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Page"/>
		<seealso cref="System.Web.UI.UserControl"/>
	</doc>
	<doc for="Control.LoadViewState">
		<summary>
			<para> Restores view-state information from a previous page
      request that was saved by the <see cref="System.Web.UI.Control.SaveViewState"/> method.</para>
		</summary>
		<param name="savedState">An <see cref="System.Object"/> that represents the control state to be restored.</param>
		<remarks>
			<para>Override this method when you need to customize how a
      custom server control restores its view state. For more information, see
   <see topic="cpconmantainingstateincontrol"/>.</para>
		</remarks>
		<example>
			<para>The following example overrides the 
   <see langword="LoadViewState"/> method for a custom ASP.NET server control. It 
      creates an <see cref="System.Object"/> array to contain the view state information passed in
      the <paramref name="savedState"/> parameter, and then calls the base implementation of the
   <see langword="LoadViewState"/> method for the first index location of the array. 
      It assigns the values stored at the next two index locations to variables named
     <c> UserText</c> and <c>PasswordText</c>, respectively.</para>
			<codelink SampleID="Control_StateManagement" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<seealso cref="System.Web.UI.Control.SaveViewState"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconmethodsinwebformscontrols"/>
	</doc>
	<doc for="Control.SaveViewState">
		<summary>
			<para> Saves any server control view-state changes that have occurred since the time the page
      was posted back to the server. </para>
		</summary>
		<returns>
			<para>Returns the server control's current view state. If there is no
      view state associated with the control, this method returns <see langword="null"/> .</para>
		</returns>
		<remarks>
			<para>View state is the accumulation of the values of a server control's
      properties. These values are automatically placed in the server
      control's <see cref="System.Web.UI.Control.ViewState"/> property,
      which is an instance of the <see cref="System.Web.UI.StateBag"/> class. This
      property's value is then persisted to a string object after the save state stage
      of the server control life cycle. For more information, see <see topic="cpconcontrolexecutionlifecycle"/>
      .</para>
			<para>When view state is saved, this string object is returned to the client as a
      variable that is stored in an HTML <see langword="Hidden"/> element. When you
      author custom server controls, you can improve efficiency by overriding this
      method and modifying your server control's <see langword="ViewState"/> property. For more information, see
   <see topic="cpconmethodsinwebformscontrols"/> and <see topic="cpconmantainingstateincontrol"/> .</para>
		</remarks>
		<example>
			<para>The following example overrides the 
   <see langword="SaveViewState"/> method in a custom ASP.NET server control. When 
      this method is invoked, it determines whether the control has any child controls
      and whether the containing <see cref="System.Web.UI.Page"/> object is the result of a postback. If both are
      true, it changes the <see cref="System.Web.UI.WebControls.Label.Text"/> property of a <see cref="System.Web.UI.WebControls.Label"/>
      Web server control to read <c>Custom Control Has Saved State</c>. It then saves the
      view state of the control as an array of objects, named <c>allStates</c>.</para>
			<codelink SampleID="Control_StateManagement" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.LoadViewState"/>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<seealso cref="System.Web.UI.StateBag"/>
		<seealso topic="cpconmethodsinwebformscontrols"/>
		<seealso topic="cpconmantainingstateincontrol"/>
		<keyword term="ASP.NET server controls, saving view state"/>
		<keyword term="server controls, saving view state"/>
	</doc>
	<doc for="Control.FindControl">
		<overload>
			<para>Searches the current naming container for the specified server control.</para>
		</overload>
		<summary>
			<para>Searches the current naming container for a server control with
      the specified <paramref name="id"/> parameter.</para>
		</summary>
		<param name="id">The identifier for the control to be found.</param>
		<returns>
			<para>The specified control, or <see langword="null"/> if the specified control
   does not exist.</para>
		</returns>
		<example>
			<para>The following example defines a <c>Button1_Click</c> event 
      handler. When invoked, this handler uses the <see langword="FindControl"/> method
      to locate a control with an <see cref="System.Web.UI.Control.ID"/> property of <c>TextBox2</c> on the
      containing page. If the control is found, its parent is determined using
      the <see cref="System.Web.UI.Control.Parent"/> property and the parent control's
   <see langword="ID"/> is written to the page. If <c>TextBox2</c> is not found, "Control 
      Not Found" is written to the
      page.</para>
			<codelink SampleID="System.Web.UI.Page.Parent_FindControl" SnippetID="1"/>
		</example>
		<keyword term="ASP.NET server controls, using ID property to find"/>
		<keyword term="server controls, using ID property to find"/>
	</doc>
	<doc for="Control.TrackViewState">
		<summary>
			<para> Causes tracking of view-state changes to the server control so
      they can be stored in the server control's <see cref="System.Web.UI.StateBag"/> object. This object is accessible through
      the <see cref="System.Web.UI.Control.ViewState" qualify="true"/>
      property.</para>
		</summary>
		<remarks>
			<para>This method is called automatically at the end of
      the <see cref="System.Web.UI.Control.Init"/> event in the server control's lifecycle.</para>
			<para>Invoke this method when you develop templated data-bound
      controls. This method alerts ASP.NET to monitor changes to a server control's
      view state, which is required when you override the <see cref="System.Web.UI.Control.DataBind" qualify="true"/> method. For more information, see <see topic="cpcondevelopingtemplateddataboundcontrol"/>.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Web.UI.Control.DataBind"/> 
method in a custom ASP.NET server control. It begins by calling the
base <see cref="System.Web.UI.Control.OnDataBinding"/> method and then uses the <see cref="System.Web.UI.ControlCollection.Clear"/> method to delete all the child controls and
the <see cref="System.Web.UI.Control.ClearChildViewState"/> method to delete any saved view-state settings
for those child controls. Finally, the <see cref="System.Web.UI.Control.ChildControlsCreated"/> property is set to <see langword="true"/>. The
control then uses the <see cref="System.Web.UI.Control.IsTrackingViewState"/> property to determine whether
view-state change tracking is enabled for the control. If it is not enabled, the
<see langword="TrackViewState"/> method is called.</para>
			<codelink SampleID="Control_StateManagement" SnippetID="5"/>
		</example>
		<seealso cref="System.Web.UI.IStateManager"/>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<seealso cref="System.Web.UI.Control.LoadViewState"/>
		<seealso cref="System.Web.UI.Control.SaveViewState"/>
		<seealso topic="cpcondevelopingtemplateddataboundcontrol"/>
		<keyword term="ASP.NET server controls, monitoring view state changes"/>
		<keyword term="server controls, monitoring view state changes"/>
	</doc>
	<doc for="Control.EnsureChildControls">
		<summary>
			<para> Determines whether the server control contains child controls.
      If it does not, it creates child
      controls. </para>
		</summary>
		<remarks>
			<para>This method first checks the current value of the <see cref="System.Web.UI.Control.ChildControlsCreated"/> property. If this value is false,
   the <see cref="System.Web.UI.Control.CreateChildControls"/> method is called.</para>
			<para>ASP.NET calls it this method when it needs to make sure that child controls
   have been created. In most cases, custom server control developers do not need
   to override this method. If you do override this method, use it in a similar
   fashion as its default behavior.</para>
		</remarks>
		<example>
			<para>The following example uses the 
   <see langword="EnsureChildControls"/> method to ensure
      that the current server control has child controls. It then gets or
      sets a <see langword="Text"/> property for a child
   <see langword="TextBox"/> Web control in the current server control's
   <see langword="ControlCollection"/> object.</para>
			<codelink SampleID="SystemWebUIControl CreateChildControls and EnsureChildControls" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.Control.ChildControlsCreated"/>
		<seealso cref="System.Web.UI.Control.CreateChildControls"/>
		<keyword term="ASP.NET server controls, verifying that child controls exist"/>
		<keyword term="server controls, verifying that child controls exist"/>
	</doc>
	<doc for="Control.GetSecureMappedPath">
		<summary>
			<para>Retrieves the physical path that a virtual path, either absolute or relative, 
      maps to.</para>
		</summary>
		<param name="virtualPath">A relative or root relative URL.</param>
		<returns>
			<para>The physical path to the requested file.</para>
		</returns>
		<exception cref="HttpException">Occurs when the server control does not have permissions to read the resulting mapped file.</exception>
		<remarks>
			<para>This method can only be used by server controls that have permissions to
      read files and which are part of fully trusted .dll files, such as
      System.Web.dll. This helps prevent security breaches.</para>
		</remarks>
		<example>
			<para>The following example uses the <see langword="MapPathSecure"/> method to obtain the physical path of a virtual directory of the containing <see cref="System.Web.UI.Page"/> or <see cref="System.Web.UI.UserControl"/> object.</para>
			<codelink SampleID="Control_MapPathSecure" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Control.IsTrackingViewState">
		<summary>
			<para>Gets a value that indicates whether the server control
      is saving changes to
      its view state. </para>
		</summary>
		<value>
			<para><see langword="true"/> if the control is marked to save its state; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>For a sample custom server control that uses this property, see <see topic="cpcontemplateddataboundcontrolsample"/>.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see cref="System.Web.UI.Control.DataBind"/>
method in a custom ASP.NET server control. It begins by calling the
base <see cref="System.Web.UI.Control.OnDataBinding"/> method and then uses the
ControlCollection.<see cref="System.Web.UI.ControlCollection.Clear" qualify="true"/> method to delete all the child
controls and the <see cref="System.Web.UI.Control.ClearChildViewState"/> method to delete any saved
view-state settings for those child controls. Finally, the <see cref="System.Web.UI.Control.ChildControlsCreated"/> property is set to <see langword="true"/>. The
control then uses the <see langword="IsTrackingViewState"/> property to determine
whether view-state change tracking is enabled for the control. If it is not
enabled, the <see cref="System.Web.UI.Control.TrackViewState"/> method is called.</para>
			<codelink SampleID="Control_StateManagement" SnippetID="4"/>
		</example>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<seealso cref="System.Web.UI.Control.LoadViewState"/>
		<seealso cref="System.Web.UI.Control.SaveViewState"/>
		<keyword term="ASP.NET server controls, monitoring view state changes"/>
		<keyword term="server controls, monitoring view state changes"/>
	</doc>
	<doc for="Control.OnUnload">
		<summary>
			<para>Raises the <see cref="System.Web.UI.Control.Unload"/> event.</para>
			<note type="note">
   
   Server controls should perform any final cleanup, such as
   closing files, closing database connections, and discarding objects, during this stage
   of the server control lifecycle.
</note>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> object that contains event data.</param>
		<example>
			<para>The following example creates a text stream object, <c>myFile</c>, and uses it to print messages to a text file when defined <see cref="System.Web.UI.Page"/> and control lifecycle events occur during request processing. During the <see langword="OnUnload"/> method call, the string "Custom control was unloaded" is written to the file and the text stream object is closed.</para>
			<codelink SampleID="Control_OnUnload" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.Unload"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<keyword term="ASP.NET server controls, unloading"/>
		<keyword term="server controls, unloading"/>
		<keyword term="page lifecycle, Unload"/>
	</doc>
	<doc for="Control.ClientID">
		<summary>
			<para> Gets the server control identifier
      generated by ASP.NET. </para>
		</summary>
		<value>
			<para> The server control identifier generated by ASP.NET.</para>
		</value>
		<remarks>
			<para> ASP.NET automatically generates a
   <see langword="ClientID"/> for a server control regardless of
      whether you have specified an <see langword="ID"/>
      property for it or not.
      This property is used to identify a control for client-side operations, such as ECMAScript
      functions.</para>
			<para>Any name you assign to a server control using the <see cref="System.Web.UI.Control.ID"/>
property overrides the value of this property.</para>
		</remarks>
		<example>
			<para>The following example iterates through the
   <see cref="System.Web.UI.ControlCollection"/> object for a page and displays the <see langword="ClientID"/>
   property for each control contained by the
   page.</para>
			<codelink SampleID="Control_ClientID" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.NamingContainer"/>
		<seealso cref="System.Web.UI.Control.ID"/>
		<seealso cref="System.Web.UI.INamingContainer"/>
		<seealso topic="cpconcompositionvsrendering"/>
		<keyword term="ASP.NET server controls, automatically generated ID"/>
		<keyword term="server controls, automatically generated ID"/>
	</doc>
	<doc for="Control.Parent">
		<summary>
			<para> Gets a reference to the server control's parent control in the page control hierarchy.</para>
		</summary>
		<value>
			<para> A reference to the server control's parent control.</para>
		</value>
		<remarks>
			<para>Whenever a page is requested, a hierarchy of server controls on that page is built. This property allows you to
      determine the parent control of the current server control in that hierarchy, and
      to program against it.</para>
		</remarks>
		<example>
			<para>The following example sets a new <see cref="System.Web.UI.Control"/> object on a page, <c>myControl1</c>, to the control specified in a <see cref="System.Web.UI.Control.FindControl"/> method call. If the call returns a control, the code uses the <see langword="Parent"/> property to identify the control that contains <c>myControl1</c>. If the parent control exists, the string "The parent of the text box is" is concatenated with the <see cref="System.Web.UI.Control.ID"/> property of the parent control and written to the <see cref="System.Web.UI.Control.Page"/>. If no parent control is found, the string "Control not found" is written.</para>
			<codelink SampleID="System.Web.UI.Page.Parent_FindControl" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Control.UniqueID">
		<summary>
			<para> Gets the unique, hierarchically-qualified identifier for the server control.</para>
		</summary>
		<value>
			<para>The fully-qualified identifier for the server control.</para>
		</value>
		<remarks>
			<para>This property differs from the <see langword="ID"/> property, in that the <see langword="UniqueID"/>
property includes the identifier for the server control's
naming container. This identifier is generated automatically when a page request
is processed.</para>
			<para>This property is particularly important in
   differentiating server controls contained within a data binding server
   control that repeats. The repeating control, which are <see cref="System.Web.UI.WebControls.Repeater"/>, <see cref="System.Web.UI.WebControls.DataList"/>, and <see cref="System.Web.UI.WebControls.DataGrid"/> Web server controls (or any custom
   server controls that you create that include repeating functionality when data
   bound), serves as the naming container for its child controls. This means that
   it creates a unique namespace for its child controls so that their
<see langword="ID"/> property values do not conflict.</para>
			<para> For example, if you include an ASP.NET <see cref="System.Web.UI.WebControls.Label"/> Web server control in a
<see langword="Repeater"/> server control, and assign the
<see langword="Label"/> control 
an <see langword="ID"/> property value of
<see langword="MyLabel"/>, and the <see langword="Repeater"/> 
an <see langword="ID"/> of <see langword="MyRepeater"/>. If you bind data to the
<see langword="Repeater"/> to an <see cref="System.Collections.ArrayList"/> object with three
entries, the resulting <see langword="UniqueID"/> properties for each
instance of the <see langword="Label"/> server controls are
<see langword="MyRepeater:ctl0:MyLabel"/>, 
<see langword="MyRepeater:Ctl1:MyLabel"/>, and 
<see langword="MyRepeater:Ctl2:MyLabel"/> .</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Collections.ArrayList"/>
object and populates it with three text strings, then binds the data in the
<see langword="ArrayList"/> to a <see cref="System.Web.UI.WebControls.Repeater"/> Web server control 
when the page is loaded. When a user clicks the button associated with the
<c>Button1_Click</c> method, the <see langword="UniqueID"/> property is obtained 
for each child control of the <see langword="Repeater"/>
that was added when the <see cref="System.Web.UI.Control.DataBind"/>
method was called.</para>
			<codelink SampleID="Control_UniqueID" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.ID"/>
		<seealso cref="System.Web.UI.Control.NamingContainer"/>
		<seealso topic="cpconpostbackeventsample"/>
		<keyword term="ASP.NET server controls, unique naming"/>
		<keyword term="server controls, unique naming"/>
	</doc>
	<doc for="Control.EnableViewState">
		<summary>
			<para> Gets or sets a value indicating whether the server control persists
      its view state, and the view state of any child controls it contains, to
      the requesting client.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if the server control maintains its view state; otherwise
<see langword="false"/>. The default is <see langword="true"/>.
   </para>
		</value>
		<remarks>
			<para>You must enable view state for the server control to maintain its state across HTTP
      requests.</para>
			<para>A server control's view state is the accumulation of all
      its property values. In order to preserve these values across HTTP requests,
      ASP.NET uses an instance of the <see cref="System.Web.UI.StateBag"/> class to store the property values. The values
      are then passed as a variable to a hidden field when subsequent requests are
      processed. For more information about view state, see <see topic="cpconintroductiontowebformsstatemanagement"/> . </para>
			<para> There are times when it is appropriate to disable view state,
      particularly to improve application performance. For example, if you are loading
      a database request into a server control, set this property to
   <see langword="false"/> . If you do not, processor time will be wasted loading
      view state into the server control that will only be overridden by the database
      query.</para>
			<para> For information about how to enable or disable view state
      declaratively for an ASP.NET page, see <see topic="cpconpage"/>
      .</para>
		</remarks>
		<example>
			<para> The following example sets the
   <see langword="EnableViewState"/> property to <see langword="false"/>.</para>
			<codelink SampleID="Control_StateManagement" SnippetID="7"/>
		</example>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<seealso cref="System.Web.UI.Control.LoadViewState"/>
		<seealso cref="System.Web.UI.Control.SaveViewState"/>
		<seealso topic="cpconpage"/>
		<seealso topic="cpconwebformspageprocessingstages"/>
		<seealso topic="cpconmantainingstateincontrol"/>
		<seealso topic="cpconintroductiontowebformsstatemanagement"/>
		<keyword term="enabling ASP.NET server control view state"/>
		<keyword term="ASP.NET server controls, enabling view state"/>
		<keyword term="server controls, enabling view state"/>
	</doc>
	<doc for="Control.Init">
		<summary>
			<para> Occurs when
      the server control is initialized, which is the first step in the its
      lifecycle.</para>
		</summary>
		<remarks>
			<para> Server controls should
      perform any initialization steps that are required to create and set up an instance. You cannot use view-state information within this event; it is not
      populated yet. You should not access another server control during this event,
      regardless of whether it is a child or parent to this control. Other server controls
      are not certain to be created and ready for access.</para>
		</remarks>
		<example>
			<para>The following example assigns a custom event handler, <c>Control_Init</c>, to the <see langword="Init"/> event of a control, <c>myControl</c>, when the <see langword="Page_Init"/> method is called on the page that contains the control.</para>
			<codelink SampleID="Control_Sample" SnippetID="2"/>
		</example>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconwebformspageprocessingstages"/>
		<keyword term="page lifecycle events"/>
		<keyword term="server control lifecycle events"/>
		<keyword term="ASP.NET server control lifecycle, events"/>
		<keyword term="events, ASP.NET server control lifecycle"/>
	</doc>
	<doc for="Control.PreRender">
		<summary>
			<para>Occurs when the server control is about to render to its
      containing <see cref="System.Web.UI.Page"/> object.</para>
		</summary>
		<remarks>
			<para> Use this event to perform any updates before the output the server control is rendered
      to the page. Any changes in the view state of the server control
      can be saved during this event. Such changes made in the rendering phase will
      not be saved.</para>
		</remarks>
		<seealso cref="System.Web.UI.Page"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconwebformspageprocessingstages"/>
		<keyword term="ASP.NET server controls, prerendering"/>
		<keyword term="server controls, prerendering"/>
	</doc>
	<doc for="Control.Unload">
		<summary>
			<para> Occurs
      when the server control is unloaded from memory. </para>
		</summary>
		<remarks>
			<para> Server controls must perform any
      final clean-up, such as closing files, database connections and discarding objects, during this stage of the control lifecycle before the instance
      is unloaded.</para>
		</remarks>
		<seealso cref="System.Web.UI.Page"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconwebformspageprocessingstages"/>
		<keyword term="ASP.NET server control lifecycle, events"/>
		<keyword term="server control lifecycle, events"/>
	</doc>
	<doc for="Control.DataBind">
		<summary>
			<para> Binds a data source to the invoked server control and all its child
      controls.</para>
		</summary>
		<remarks>
			<para>Use this method to bind data from a source to a server control. This method
      is commonly used after retrieving a data set through a database query.</para>
			<note type="note">
      
      When called on a server control, this method resolves all
      data-binding expressions
      in the server control
      and in any of its child controls.
      
   </note>
			<para>This method is commonly overridden when creating custom templated
      data-bound controls. For more information, see <see topic="cpcondevelopingtemplateddataboundcontrol"/>.</para>
			<para>For more information about data binding to server
      controls, see <see topic="cpconDatabindingExpressionSyntax"/>
      . </para>
		</remarks>
		<example>
			<para>The following example overrides the
   <see langword="DataBind"/> method in a custom ASP.NET server control. It begins
      by calling the base <see cref="System.Web.UI.Control.OnDataBinding"/> method and then uses
      the <see cref="System.Web.UI.ControlCollection.Clear" qualify="true"/> method to delete all the child controls and
      the <see cref="System.Web.UI.Control.ClearChildViewState"/> method to delete any saved view-state settings
      for those child controls. Finally, the <see cref="System.Web.UI.Control.ChildControlsCreated"/> property is set to <see langword="true"/> and the
      control is instructed to track any changes to the view state of the newly
      created controls with the <see cref="System.Web.UI.Control.TrackViewState"/> method. This is a common
      technique when binding data to a control to ensure that new data does not
      conflict with data stored from a previous <see langword="DataBind"/> method call.</para>
			<codelink SampleID="Control_StateManagement" SnippetID="6"/>
		</example>
		<seealso cref="System.Web.UI.Control.OnDataBinding"/>
		<seealso cref="System.Web.UI.Control.DataBinding"/>
		<seealso topic="cpconaccessingdatawithaspnet"/>
		<seealso topic="cpcondevelopingwebformscontrols"/>
		<keyword term="ASP.NET server controls, data binding to"/>
		<keyword term="server controls, data binding to"/>
		<keyword term="data binding, ASP.NET server controls"/>
	</doc>
	<doc for="Control.ViewState">
		<summary>
			<para>Gets a dictionary of state information that allows you to save and restore the view
      state of a server control across multiple requests for the same page.</para>
		</summary>
		<value>
			<para>An instance of the <see cref="System.Web.UI.StateBag"/> class that contains the server control's view-state information.</para>
		</value>
		<remarks>
			<para>A server control's view state is the accumulation of all its property values. In order to
      preserve these values across HTTP requests, ASP.NET server controls use this property,
      which is an instance of the <see langword="StateBag"/> class, to store the property values. The
      values are then passed as a variable to an HTML hidden input element when
      subsequent requests are processed. For more information about saving
      server control view state, see <see topic="cpconmantainingstateincontrol"/>
      . </para>
			<para>View state is enabled for all server controls by default,
      but there are circumstances in which you will want to disable it. For more
      information, see <see topic="cpcondevelopinghigh-performanceaspnetapplications"/> . </para>
			<para>For information about dictionaries and how to use them,
      see <see topic="cpcongroupingdataincollections"/> . </para>
		</remarks>
		<example>
			<para>The following examples demonstrates a
   <see langword="Text"/> property that stores and retrieves its value from its
      control's <see langword="ViewState"/> property.</para>
			<codelink SampleID="SysWebUIControlViewState" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.StateBag"/>
		<seealso topic="cpconmantainingstateincontrol"/>
		<keyword term="ASP.NET server controls, view state"/>
		<keyword term="server controls, view state"/>
		<keyword term="server controls, properties"/>
	</doc>
	<doc for="Control.ViewStateIgnoresCase">
		<summary>
			<para>Gets a value that indicates whether the <see cref="System.Web.UI.StateBag"/> object is case-insensitive.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
<see langword="StateBag"/> instance is
   case-insensitive; otherwise, <see langword="false"/>. The default is
<see langword="true"/> .</para>
		</value>
		<remarks>
			<para>Override this method if you create a custom server control that saves its
      view state taking case into account. </para>
		</remarks>
		<seealso cref="System.Web.UI.StateBag"/>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<keyword term="ASP.NET server controls, view state"/>
		<keyword term="server controls, view state"/>
		<keyword term="server controls, properties"/>
	</doc>
	<doc for="Control.OnBubbleEvent">
		<summary>
			<para> Determines whether the event for the server control is passed up the page's UI server
      control hierarchy.</para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name=" args">An <see cref="System.EventArgs"/> object that contains the event data.</param>
		<returns>
			<para><see langword="true"/> if the event has been canceled; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>ASP.NET server controls such as the <see cref="System.Web.UI.WebControls.Repeater"/>, <see cref="System.Web.UI.WebControls.DataList"/> and <see cref="System.Web.UI.WebControls.DataGrid"/> Web controls can
   contain child controls that raise events. For example, each row in a
<see langword="DataGrid"/> control can contain one or more buttons created 
   dynamically by templates.</para>
			<para> Rather than each button raising an event individually, events from
   the nested controls are "bubbled"—that is, they are sent to the naming container. The
   naming container in turn raises a generic event called
<see langword="ItemCommand"/> with parameter values. These values allow you to 
   determine which individual control that raised the original event. By responding
   to this single event, you can avoid having to write individual event-handling
   methods for child controls.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see langword="OnBubbleEvent"/> method in
   a custom ASP.NET server control, <c>ParentControl</c>. This method is invoked when a
child control of <c>ParentControl</c> calls the <see cref="System.Web.UI.Control.RaiseBubbleEvent"/> method. When this happens, the <c>ParentControl</c>
class writes two strings to the containing ASP.NET page, the first stating that
its <see langword="OnBubbleEvent"/> method has been called, the second
identifying the source control of the <see langword="RaiseBubbleEvent"/>
method.</para>
			<codelink SampleID="System.Web.UI.Control.RaiseBubbleEvent_OnBubbleEvent" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.RaiseBubbleEvent"/>
		<seealso topic="cpconbubblingcommandevent"/>
		<keyword term="ASP.NET server controls, bubbled events"/>
		<keyword term="server controls, bubbled events"/>
	</doc>
	<doc for="Control.OnDataBinding">
		<summary>
			<para>Raises the <see cref="System.Web.UI.Control.DataBinding"/>
event.</para>
		</summary>
		<param name="e">An <see langword="EventArgs"/> object that contains the event data.</param>
		<remarks>
			<para>This method notifies a server control to perform any data binding
      logic that is associated with it.</para>
			<para>If you want to handle the <see cref="System.Web.UI.Control.DataBinding"/> event, you should override this
   event-handling method. This ensures that all delegates attached to the
<see langword="DataBinding"/> 
event are invoked.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to override the
   <see langword="OnDataBinding"/> method to add child controls
      to the parent control
      from a data source.</para>
			<codelink SampleID="TemplatedDataBoundControl" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.UI.Control.DataBinding"/>
		<seealso cref="System.Web.UI.Control.DataBind"/>
	</doc>
	<doc for="Control.RaiseBubbleEvent">
		<summary>
			<para> Assigns any sources of the event and its information to the control's parent. </para>
		</summary>
		<param name="source">The source of the event.</param>
		<param name=" args">An <see cref="System.EventArgs"/> object that contains the event data.</param>
		<remarks>
			<para>ASP.NET server controls such as the <see cref="System.Web.UI.WebControls.Repeater"/>, <see cref="System.Web.UI.WebControls.DataList"/> and <see cref="System.Web.UI.WebControls.DataGrid"/> Web controls can contain child
   controls that raise events. For example, each row in a <see langword="DataGrid"/> control
   can contain one or more buttons created dynamically by templates.</para>
			<para> Rather than each button raising an event individually, events
   from the nested controls are "bubbled"—that is, they are sent to the control's parent.
   The parent in turn raises a generic event called <see langword="ItemCommand"/> with parameter values.
   These values allow you to determine which individual control that raised the
   original event. By responding to this single event, you can avoid having to
   write individual event-handling methods for child controls.</para>
			<para> While you cannot override this method, controls you
   author can handle or raise bubbled events by overriding the OnBubbleEvent
   method. For more information, see <see topic="cpconbubblingcommandevent"/>.</para>
		</remarks>
		<example>
			<para>The following example is a custom class, <c>ChildControl</c>,
   that overrides the <see cref="System.Web.UI.WebControls.Button.OnClick" qualify="true"/> method to call the
<see langword="RaiseBubbleEvent"/> method that sends the <see cref="System.Web.UI.WebControls.Button.Click" qualify="true"/> 
event to its parent ASP.NET server control. When the user clicks a button in an
ASP.NET page that includes an instance of <c>ChildControl</c>, it raises the <see cref="System.Web.UI.Control.OnBubbleEvent"/>
method on the parent control that contains the instance of
<c>ChildControl</c> and writes the string "The ChildControl class OnClick method is
called" to the page. </para>
			<codelink SampleID="System.Web.UI.Control.RaiseBubbleEvent_OnBubbleEvent" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.OnBubbleEvent"/>
		<seealso topic="cpconbubblingcommandevent"/>
		<keyword term="ASP.NET server controls, bubbled events"/>
		<keyword term="server controls, bubbled events"/>
	</doc>
	<doc for="Control.OnPreRender">
		<summary>
			<para>Raises the <see cref="System.Web.UI.Control.PreRender"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> object that contains the event data.</param>
		<remarks>
			<para>This method notifies the server control to perform any
      necessary prerendering steps prior to saving view state and rendering content.</para>
		</remarks>
		<example>
			<para>The following example overrides the <see langword="OnPreRender"/> method in a custom server control. When the custom control is requested from an ASP.NET page, during the <see cref="System.Web.UI.Control.PreRender"/> stage of page processing, <see langword="OnPreRender"/> method is called and the custom <c>PreRender_Handler</c> method sends its _message property value, "Parent Text was changed by PreRender method", to the page.</para>
			<codelink SampleID="Control_Sample_1_snipper" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Page"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
	</doc>
	<doc for="Control.RemovedControl">
		<summary>
			<para> Called after a control is removed from the <see cref="System.Web.UI.Control.Controls"/> collection of another control.</para>
		</summary>
		<param name="control">The <see cref="System.Web.UI.Control"/> that has been removed.</param>
		<remarks>
			<para>The <see cref="System.Web.UI.Control.RemovedControl"/> method is called immediately after a
   control is removed from the <see cref="System.Web.UI.Control.Controls"/>
   collection of
   another control.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.Control.AddedControl"/>
	</doc>
	<doc for="Control.AddedControl">
		<summary>
			<para> Called after a control is added to the <see cref="System.Web.UI.Control.Controls"/> collection of another control.</para>
		</summary>
		<param name="control">The <see cref="System.Web.UI.Control"/> that has been added.</param>
		<param name=" index"> The index of the control in the <see cref="System.Web.UI.Control.Controls"/> collection. </param>
		<remarks>
			<para>The <see cref="System.Web.UI.Control.AddedControl"/> method is
   called immediately after a control is added to the <see cref="System.Web.UI.Control.Controls"/> collection of another control.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control.Controls"/>
		<seealso cref="System.Web.UI.Control.RemovedControl"/>
	</doc>
	<doc for="Control.HasChildViewState">
		<summary>
			<para> Gets a value indicating whether the current server control's child controls have any
      saved view-state settings.</para>
		</summary>
		<value>
			<para><see langword="true"/> if any child controls have saved view state
   information; otherwise, <see langword="false"/>. </para>
		</value>
		<remarks>
			<para>You can avoid unnecessary calls to the <see cref="System.Web.UI.Control.ClearChildViewState"/> method by using this property to verify that any
   child controls of the server control are storing view-state information.</para>
		</remarks>
		<example>
			<codelink SampleID="Control_StateManagement" SnippetID="5"/>
		</example>
		<seealso cref="System.Web.UI.Control.ViewState"/>
		<keyword term="ASP.NET server controls, checking child controls forview state"/>
		<keyword term="server controls, properties"/>
	</doc>
	<doc for="Control.Context">
		<summary>
			<para>Gets the <see cref="System.Web.HttpContext"/> object associated with the server control for the current Web request.</para>
		</summary>
		<value>
			<para>The specified <see langword="HttpContext"/> object assciated with the current
   request.</para>
		</value>
		<remarks>
			<para> This property gives you access to the
   <see langword="Context"/> object for the current Web request. The
      object provides properties that access the <see langword="Application"/>,
   <see langword="Session"/>, <see langword="Request"/>, <see langword="Response"/> and other objects
      that contain information about the current HTTP request. It also
      provides methods that allow you to obtain configuration information and set or
      clear errors for the request.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Web.UI.Control_Context_OnInit_ResolveUrl" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.HttpContext"/>
		<seealso cref="System.Web.HttpApplication"/>
		<seealso cref="System.Web.HttpServerUtility"/>
		<seealso cref="System.Web.HttpRequest"/>
		<seealso cref="System.Web.HttpResponse"/>
		<keyword term="ASP.NET server controls, obtaining information about the current HTTP request"/>
		<keyword term="server controls, obtaining information about the current HTTP request"/>
	</doc>
	<doc for="Control.OnInit">
		<summary>
			<para>Raises the <see cref="System.Web.UI.Control.Init"/>
event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> object that contains the event data.</param>
		<remarks>
			<para>When notified by this method, server controls must perform any initialization steps that
      are required to create and set up an instance. In this stage of the server control's
      lifecycle, the control's view state has yet to be populated. Additionally, you can not
      access other server controls when this method is called either, regardless of
      whether it is a child or parent to this control. Other server controls are not certain to be created and
      ready for access.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Web.UI.Control_Context_OnInit_ResolveUrl" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.UI.Page"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<keyword term="page lifecycle, initialize"/>
		<keyword term="server control lifecycle, initialize"/>
		<keyword term="ASP.NET server controls, initializing"/>
		<keyword term="server controls, initializing"/>
		<keyword term="initializing ASP.NET server controls"/>
	</doc>
	<doc for="Control.Load">
		<summary>
			<para>Occurs when the server control is loaded into the <see cref="System.Web.UI.Page"/>
object.</para>
		</summary>
		<remarks>
			<para>Notifies the server control to perform any processing steps that are set to occur
      on each page request. You can acess view state information and form POST data from this event. You can also access other server
      controls within the page's control hierarchy.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Web.UI.Control_Load" SnippetID="2"/>
		</example>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<seealso topic="cpconwebformspageprocessingstages"/>
	</doc>
	<doc for="Control.ID">
		<summary>
			<para> Gets or
      
      sets the programmatic identifier assigned to the server control.</para>
		</summary>
		<value>
			<para> The programmatic identifier assigned to the control.</para>
		</value>
		<remarks>
			<para>Setting this property on a server control provides you with programmatic access to the
      server control's properties, events, and methods. This property can be set by Web
      developers by declaring an <see langword="id"/> attribute in the opening tag of an
      ASP.NET server control.</para>
			<para> If this property is not specified for a server control,
      either declaratively or programmatically, you can obtain a reference to the
      control through its parent control's <see cref="System.Web.UI.Control.Controls"/>
      property.</para>
			<note type="note">
      Including spaces in this property
      will cause an ASP.NET page parser
      error.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="Control_Sample" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.NamingContainer" qualify="true"/>
		<seealso cref="System.Web.UI.INamingContainer"/>
		<keyword term="ASP.NET server controls, naming for programmatic accessibility"/>
		<keyword term="server controls, naming for programmatic accessibility"/>
	</doc>
	<doc for="Control.Disposed">
		<summary>
			<para> Occurs when a server control is released from memory,
      which is the last stage of the server control
      lifecycle when an ASP.NET page is requested.</para>
		</summary>
		<remarks>
			<para>Resources that require significant processor time, such as database connections, should be released with
      this event.</para>
		</remarks>
		<seealso cref="System.Web.UI.Control.Dispose"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<keyword term="ASP.NET server controls, resource disposal"/>
		<keyword term="server controls, resource disposal"/>
	</doc>
	<doc for="Control.DataBinding">
		<summary>
			<para> Occurs when the server control binds to a data source.</para>
		</summary>
		<remarks>
			<para>This event notifies the server control to perform any data binding logic that
      has been written for it.</para>
		</remarks>
		<example>
			<codelink SampleID="ITemplate_Interface" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.OnDataBinding"/>
		<seealso topic="cpconcontrolexecutionlifecycle"/>
		<keyword term="ASP.NET server controls, data binding to"/>
		<keyword term="server controls, data binding to"/>
		<keyword term="data binding to ASP.NET server controls"/>
	</doc>
	<doc for="Control.ResolveUrl">
		<summary>
			<para>Converts a URL into one that is usable on the
      requesting
      client. </para>
		</summary>
		<param name="relativeUrl">The URL associated with the <see langword="TemplateSourceDirectory"/> property.</param>
		<returns>
			<para>The converted URL.</para>
		</returns>
		<exception cref="ArgumentNullException">Occurs if the <paramref name="relativeUrl"/> parameter contains <see langword="null"/>. </exception>
		<remarks>
			<para>If the <paramref name="relativeUrl"/> parameter contains an absolute
   URL, the URL is returned unchanged. If the <paramref name="relativeUrl"/>
   parameter contains a relative URL, that URL is
   changed to a relative URL that is correct for the current request path, so that
   the browser can resolve the URL.</para>
			<para>For example, consider the following scenario: </para>
			<list type="bullet"><item>
					<term>
      
      A client has requested an ASP.NET page that contains a
      user control that has an image associated with it.</term>
				</item>
				<item>
					<term>
      
      The ASP.NET page is located at /-//Store/page1.aspx.</term>
				</item>
				<item>
					<term>
      
      The user control is located at
      /-//Store/UserControls/UC1.ascx.</term>
				</item>
				<item>
					<term>
      
      The image file is located at
      /-//UserControls/Images/MyPhoto1.jpg.</term>
				</item>
			</list>
			<para>If the user control passes the relative path to the image (that is,
   /-//Store/UserControls/Images/MyPhoto1.jpg ) to the
<see langword="ResolveUrl"/> method, the method
   will return the value /-//UserControls/Images/MyPhoto1.jpg.</para>
			<para>This method uses the <see cref="System.Web.UI.Control.TemplateSourceDirectory"/>
property to resolve to the absolute URL. The returned
URL is for client use.</para>
		</remarks>
		<example>
			<para>The following example creates an <see cref="System.Web.UI.WebControls.Image"/> Web server control object and uses the <see langword="ResolveUrl"/> method to set the path to the image, which is stored by the <see cref="System.Web.UI.WebControls.Image.ImageUrl"/> property.</para>
			<codelink SampleID="System.Web.UI.Control_Context_OnInit_ResolveUrl" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Control.TemplateSourceDirectory"/>
	</doc>
</docs>
