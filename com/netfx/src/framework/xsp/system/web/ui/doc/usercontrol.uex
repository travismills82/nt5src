<docs>
	<doc for="UserControl.InitializeAsUserControlInternal">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="UserControl.IAttributeAccessor.SetAttribute">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="UserControl.OnInit">
		<summary>
			<para>Raises the <see langword="Init"/> event.</para>
		</summary>
		<param name="e">An <see cref="System.EventArgs"/> object that contains the event data.</param>
		<remarks>
			<para>When notified by this method, the <see cref="System.Web.UI.UserControl"/> must perform any initialization steps that are 
 required to create and set up an instance. This method confirms site information
 associated with the <see langword="UserControl"/> instance and ensures that the
 class is initialized correctly as a <see langword="UserControl"/>
 
 
 object.</para>
			<para>In this stage of the user control's lifecycle, the control's view state has 
 yet to be populated. Additionally, you can not access other server controls when
 this method is called, regardless of whether it is a child or parent to this
 control. Other server controls are not certain to be created and ready for
 access.</para>
		</remarks>
	</doc><doc for="UserControl.IAttributeAccessor.GetAttribute">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="UserControl.Trace">
		<summary>
			<para>Gets the <see cref="System.Web.TraceContext"/>
object for the current Web request.</para>
		</summary>
		<value>
			<para>The data from the <see langword="TraceContext"/> object
   for the current Web request.</para>
		</value>
		<remarks>
			<para> Tracing tracks and presents the execution details about a Web request.
      For trace data to be visible in a rendered page, you must enable tracing for that
      page.</para>
			<para>By default, page tracing is disabled. To enable tracing
      for a page, use the <see topic="cpconpage"/>
      directive as follows: &lt;%@ Page trace="true"
      %&gt;</para>
		</remarks>
		<seealso cref="System.Web.TraceContext"/>
		<seealso cref="System.Web.UI.Page.Trace"/>
		<seealso topic="cpconpage"/>
	</doc><doc for="UserControl.LoadViewState">
		<summary>
			<para> Restores the view-state information from a previous user
      control request that was saved by the <see cref="System.Web.UI.UserControl.SaveViewState"/> method.</para>
		</summary>
		<param name="savedState">An <see cref="System.Object"/> that represents the user control state to be restored.</param>
		<remarks>
			<para>In general, you do not need to call this method. However, if you store custom
      information in view state, you could override this method to do so.</para>
			<para> For example, you can load a view-state value into a field
      so that you do not have to retrieve it from the <see cref="System.Web.UI.Control.ViewState" qualify="true"/> property later. You can also insert the value
      into the <see langword="ViewState"/> property just before calling
   <see langword="base.SaveViewState"/>
   , which is an effective
   way to make a field persist across round trips to the server.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a user control that manages its view state
      using the <see langword="LoadViewState"/> and <see cref="System.Web.UI.UserControl.SaveViewState"/> methods.</para>
			<codelink SampleID="UserControl_StateManagement" SnippetID="1"/>
		</example>
	</doc><doc for="UserControl.SaveViewState">
		<summary>
			<para> Saves any user control view-state changes that have
      occurred since the last page postback.</para>
		</summary>
		<returns>
			<para>Returns the user control's current view state. If there is no view state associated
      with the control, it returns <see langword="null"/>.</para>
		</returns>
		<remarks>
			<para>In general, you do not need to call this method. However, if you store custom
      information in view state, you can override this method to do so.</para>
		</remarks>
		<example>
			<para>The following example demonstrates a user control that manages its view state
      using the <see cref="System.Web.UI.UserControl.LoadViewState"/> and <see langword="SaveViewState "/>methods.</para>
			<codelink SampleID="UserControl_StateManagement" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Control.ViewState" qualify="true"/>
		<seealso cref="System.Web.UI.StateBag"/>
	</doc><doc for="UserControlControlBuilder.NeedsTagInnerText">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControlControlBuilder.SetTagInnerText">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.IUserControlDesignerAccessor.TagName">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.IUserControlDesignerAccessor.InnerText">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="UserControl.Request">
		<summary>
			<para>Gets the <see langword="Request"/>
object for the current Web request.</para>
		</summary>
		<value>
			<para> The <see cref="System.Web.HttpRequest"/> object associated with the <see cref="System.Web.UI.Page"/> that
   contains the <see cref="System.Web.UI.UserControl"/> instance.</para>
		</value>
		<example>
			<para>The 
      following example uses the <see langword="Request"/>
      property to obtain the physical path of the user control. With an
   <see langword="ID"/> property set to <c>myControl</c>, the user control's location is 
      obtained by a containing page or user control using the <c>myControl.Request.Path</c>
      syntax. </para>
			<codelink SampleID="UserControl1" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.HttpRequest"/>
		<seealso cref="System.Web.UI.Page.Request"/>
	</doc>
	<doc for="UserControl.Response">
		<summary>
			<para>Gets the <see langword="Response "/>
object for the current Web request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Web.HttpResponse"/> object associated with the <see cref="System.Web.UI.Page"/> that
   contains the <see cref="System.Web.UI.UserControl"/> instance.</para>
		</value>
		<example>
			<para>The 
      following example uses the <see langword="Response"/>
      property to write the name of the Web server computer on which the user control
      is running. The <c>myControl.Response.Write</c> syntax instructs the user control to
      display the information the control obtains with the
      <c>myControl.Server.Machinename</c> syntax.</para>
			<codelink SampleID="UserControl1" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.HttpResponse"/>
		<seealso cref="System.Web.UI.Page.Response"/>
	</doc>
	<doc for="UserControl.Server">
		<summary>
			<para> Gets the <see langword="Server"/>
object for the current Web request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Web.HttpServerUtility"/> object
   associated with the <see cref="System.Web.UI.Page"/> that contains the <see cref="System.Web.UI.UserControl"/>
   instance.</para>
		</value>
		<remarks>
			<para>The <see langword="Server"/> object is compatible with ASP pages.</para>
		</remarks>
		<example>
			<para>The 
      following example uses the <see langword="Server"/>
      property to write the name of the Web server computer on which the user control
      is running. The <c>myControl.Response.Write</c> syntax instructs the user control to
      display the information the control obtains with the
      <c>myControl.Server.Machinename</c> syntax.</para>
			<codelink SampleID="UserControl1" SnippetID="5"/>
		</example>
		<seealso cref="System.Web.HttpServerUtility"/>
		<seealso cref="System.Web.UI.Page.Server"/>
	</doc>
	<doc for="UserControl.Session">
		<summary>
			<para>Gets the <see langword="Session"/> object for the current Web request.</para>
		</summary>
		<value>
			<para>An <see cref="System.Web.SessionState.HttpSessionState"/> object associated with
   the <see cref="System.Web.UI.Page"/>
   that contains the <see cref="System.Web.UI.UserControl"/>
   instance.</para>
		</value>
		<example>
			<para>The following example adds values to the 
   <see langword="Session"/> property of a user control. The <c>myControl.Session.Add</c> 
      syntax inserts the values of two <see cref="System.Web.UI.WebControls.TextBox"/> Web server controls
      to the session associated with the user control and the page that contains
      it.</para>
			<codelink SampleID="UserControl1" SnippetID="6"/>
		</example>
		<seealso cref="System.Web.UI.Page.Session" qualify="true"/>
		<seealso cref="System.Web.SessionState.HttpSessionState"/>
	</doc>
	<doc for="UserControl.DesignerInitialize">
		<summary>
			<para>Performs any initialization steps on the user control
      that are required by RAD designers.</para>
		</summary>
		<example>
			<para>The 
      following example calls the <see langword="DesignerInitialize"/> method during the <see langword="Page_Init"/> stage of request processing.
      This makes the user control available to a RAD designer such as Visual Studio
      .NET.</para>
			<codelink SampleID="UserControl1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UserControl.InitializeAsUserControl">
		<summary>
			<para>Initializes the <see langword="UserControl"/> object that has been created declaratively. Since there are some
   differences between pages and user controls, this method makes sure that the
   user control is initialized properly.</para>
		</summary>
		<param name=" page">The <see cref="System.Web.UI.Page"/> object that contains the user control.</param>
		<example>
			<para>The 
      following example calls the <see langword="InitializeAsUserControl"/> method during
      the <see langword="Page_Init"/> stage of request
      processing. In this case it is initialized from the page itself, but you could
      initialize it from another control and pass the <see langword="ID"/> property value of the containing
      page as the parameter for this method.</para>
			<codelink SampleID="UserControl1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="UserControl.MapPath">
		<summary>
			<para>Assigns a virtual file path, either absolute or relative, to a
      physical file path.</para>
		</summary>
		<param name="virtualPath">The virtual file path to map.</param>
		<returns>
			<para>The physical path to the file.</para>
		</returns>
		<remarks>
			<para>While similar to the <see cref="System.Web.UI.Page.MapPath" qualify="true"/> method, this method maps the path from the
   .ascx file's location, not the .aspx file's location. You can use this
   method to obtain a path to a directory of images or other resources associated
   with your <see cref="System.Web.UI.UserControl"/> object. </para>
		</remarks>
		<example>
			<para>The 
      following example calls the <see langword="MapPath"/>
      method to associate an <c>actualServerPath</c> variable with the physical path
      associated with the user control named <c>myControl</c>.</para>
			<codelink SampleID="UserControl1" SnippetID="3"/>
		</example>
	</doc>
	<doc for="UserControl.Cache">
		<summary>
			<para>Gets the <see cref="System.Web.Caching.Cache"/>
object that is associated with the
application that contains the user control.</para>
		</summary>
		<value>
			<para>The <see langword="Cache"/> object in which to store the user control's
   data.</para>
		</value>
		<remarks>
			<para>The <see langword="Cache"/>
allows you to store data for later retrieval, and is shared across the
application. The data that you store is independent of the current page or user session.
Access data through this property to boost page or application performance if
creating the data is slow. For more information about using the Cache, see
<see topic="cpconcacheapis"/> 
.</para>
		</remarks>
		<example>
			<para>The following example uses the Cache property to store the Text property 
      value of a Label Web server control, <c>txtValue</c>, in the Cache object
   associated with the user control's application. It uses the Cache.this property
   to do so, assigning the item a key parameter value of <c>txtName.Text</c>.</para>
			<codelink SampleID="Classic Cache.this Example" SnippetID="2"/>
			<para>
			</para>
		</example>
		<seealso cref="System.Web.Caching.Cache"/>
		<seealso cref="System.Web.UI.Page.Cache" qualify="true"/>
		<keyword term="ASP.NET caching, accessing cached data from a user control"/>
	</doc>
	<doc for="UserControl.Application">
		<summary>
			<para>Gets the <see langword="Application"/> object for the
   current Web request.</para>
		</summary>
		<value>
			<para> The <see cref="System.Web.HttpApplicationState"/>
object for the current Web request.</para>
		</value>
		<example>
			<para>The following example adds two key value pairs to the 
      application state associated with a user control if the user
      control's <see cref="System.Web.UI.UserControl.IsPostBack"/> property returns <see langword="false"/>. When
      this condition is met, the code uses the <see cref="System.Web.HttpApplicationState.Add"/>method, through the user control's
   <see langword="Application"/> 
   property, to add the keys and
   their values.</para>
			<codelink SampleID="UserControl_Properties" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.HttpApplicationState"/>
		<seealso cref="System.Web.UI.Page.Application"/>
	</doc>
	<doc for="UserControl.IsPostBack">
		<summary>
			<para>Gets a value indicating whether the user control is being loaded in response to a
      client postback, or if it is being loaded and accessed for the first time.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the user control is being loaded in
   response to a client postback; otherwise, <see langword="false"/> .</para>
		</value>
		<example>
			<para>The following example adds two key value pairs to the application state 
      associated with a user control if the user control's <see cref="System.Web.UI.UserControl.IsPostBack"/> property returns <see langword="false"/>. When
      this condition is met, the code uses the <see cref="System.Web.HttpApplicationState.Add"/>method, through the user control's <see langword="Application"/> property, to add the keys and their
      values.</para>
			<codelink SampleID="UserControl_Properties" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.UI.Page.IsPostBack"/>
	</doc>
	<doc for="UserControl.Attributes">
		<summary>
			<para>Gets a collection of all attribute name and value pairs declared in the user
      control tag within the .aspx file.</para>
		</summary>
		<value>
			<para>An <see cref="System.Web.UI.AttributeCollection"/> object that contains all the name and value
   pairs declared in the user control tag.</para>
		</value>
		<example>
			<para>The following example uses the user 
      control's <see langword="Attributes"/> property to access the <c>Message</c>
      attribute declared in the custom control tag that instantiated the user control
      on the page that contains it.</para>
			<codelink SampleID="UserControl_Properties" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.AttributeCollection"/>
	</doc>
	<doc for="UserControlControlBuilder">
		<summary>
			<para>Supports
      the page parser in building a user control and any child user controls that it
      contains.
   </para>
		</summary>
		<remarks>
			<para>By default, every user control on a page is associated with a default <see cref="System.Web.UI.UserControlControlBuilder"/> class. This class adds a child control to the
<see cref="System.Web.UI.Control.Controls"/> property for every nested user control 
   that it encounters within the custom control tags. Additionally, it creates
   literal controls for the text located between nested control tags. You can
   create custom user control builder funtionality by extending this
   class.</para>
		</remarks>
		<seealso cref="System.Web.UI.UserControl"/>
		<seealso cref="System.Web.UI.ControlBuilder"/>
	</doc>
	<doc for="UserControl">
		<summary>
			<para> Represents an .ascx file, also known as a user control,
      requested from a server that hosts an ASP.NET Web application. The file must be
      called from a Web Forms page or a parser error will occur.</para>
		</summary>
		<remarks>
			<para> The <see langword="UserControl"/> class is associated
   with files that have .ascx extensions. These files are compiled at run time as
<see langword="UserControl"/> 
objects and cached in
server memory.</para>
			<para>You can nest user controls by declaring one .ascx file in another including
   the latter in a Web Forms page.</para>
			<para> User controls are contained in ASP.NET Web Forms pages, and offer Web
   developers an easy way to capture commonly used Web UI. They are instantiated and cached
   in ways similar to <see cref="System.Web.UI.Page"/> objects.
   Unlike pages, however, user controls cannot be called independently. They can
   only be called from the page or other user control that contains them.</para>
			<para>Derive from this class if you want to create a user control using the
   code-behind technique. This is recommended if you are developing Web Forms pages
   using this technique.</para>
			<para>For information about creating user controls declaratively, see <see topic="cpconWebFormsUserControls"/>. </para>
		</remarks>
		<example>
			<para>The class defined in the following example, <c>SimpleControl</c>, inherits the <see langword="UserControl"/> class and can be
used as an ASP.NET code-behind class. It uses the <see cref="System.Web.UI.WebControls.TextBox"/>, <see cref="System.Web.UI.WebControls.Label"/>, and <see cref="System.Web.UI.WebControls.Button"/>
Web server controls and defines
a <c>myButton_Click</c> method that assigns the <see cref="System.Web.UI.WebControls.TextBox.Text" qualify="true"/> property value, along with two
strings, to the <see cref="System.Web.UI.WebControls.Label.Text" qualify="true"/>
property.</para>
			<codelink SampleID="Sys.Web.UI.TemplateControl_UserControl" SnippetID="2"/>
			<para>The 
following example is markup contained in a .ascx file. You can use the 
<c>SimpleControl</c> 
class defined in the previous example as a code-behind class for the markup in 
this .ascx file. 
</para>
			<codelink SampleID="Sys.Web.UI.TemplateControl_UserControl" SnippetID="3"/>
		</example>
		<seealso cref="System.Web.UI.TemplateControl"/>
		<seealso cref="System.Web.UI.IAttributeAccessor"/>
		<seealso cref="System.Web.UI.Page"/>
		<seealso topic="cpconwebformsusercontrols"/>
	</doc>
</docs>
