<docs>
	<doc for="CustomValidator.EventServerValidate">
		<internalonly/>
		<summary>
			<para>Represents the <see langword="ServerValidate "/>event for a <see cref="System.Web.UI.WebControls.CustomValidator"/>.</para>
		</summary>
	</doc>
	<doc for="CustomValidator.AddAttributesToRender">
		<internalonly/>
		<summary>
			<para>Adds the properties of the <see cref="System.Web.UI.WebControls.CustomValidator"/> control to the 
    output stream for rendering on the client.</para>
		</summary>
		<param name="writer">A <see cref="System.Web.UI.HtmlTextWriter" qualify="true"/> that contains the output stream for rendering on the client.</param>
	</doc>
	<doc for="CustomValidator.ControlPropertiesValid">
		<internalonly/>
		<summary>
			<para>Checks the properties of the control for valid values.</para>
		</summary>
		<returns>
			<para>
				<see langword="true"/> if the control properties are 
    valid; otherwise<see langword="false"/> .</para>
		</returns>
	</doc>
	<doc for="CustomValidator.EvaluateIsValid">
		<internalonly/>
		<summary>
    EvaluateIsValid method
 </summary>
	</doc>
	<doc for="CustomValidator.ServerValidate">
		<summary>
			<para>Occurs when validation is performed on the
      server.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/> event is raised when
   validation is performed on the server. This event is used to provide a custom
   validation routine for an input control, such as a <see cref="System.Web.UI.WebControls.TextBox"/>
   control.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to specify and code a handler for a server-side <see cref="System.Web.UI.WebControls.CustomValidator"/> control. It creates a custom
   validation routine, validates the value of a <see cref="System.Web.UI.WebControls.TextBox"/> control for an even number, and
   then displays the result of the
   validation. </para>
			<codelink SampleID="CustomValidatorServerValidate" SnippetID="1"/>
			<codelink SampleID="CustomValidatorServerValidate2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.CustomValidator.OnServerValidate"/>
		<seealso cref="System.Web.UI.WebControls.ServerValidateEventHandler"/>
	</doc>
	<doc for="CustomValidator.OnServerValidate">
		<summary>
			<para>Raises the <see cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/> event for the <see cref="System.Web.UI.WebControls.CustomValidator"/>
control.</para>
		</summary>
		<param name="value">The value to validate.</param>
		<returns>
			<para><see langword="true"/> if the value
   specified by the <paramref name="value"/> parameter passes validation; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>The <see cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/> event is raised when
   validation is performed on the server.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Web.UI.WebControls.CustomValidator.OnServerValidate"/> method also allows
derived classes to handle the event without attaching a delegate. This is the
preferred technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Web.UI.WebControls.CustomValidator.OnServerValidate"/> in a derived class, 
   be sure to call the base class's <see cref="System.Web.UI.WebControls.CustomValidator.OnServerValidate"/>
   method so that registered delegates receive the event.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to specify and code a handler for a
      server-side <see cref="System.Web.UI.WebControls.CustomValidator"/>.</para>
			<codelink SampleID="CustomValidatorServerValidate" SnippetID="1"/>
			<codelink SampleID="CustomValidatorServerValidate2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/>
	</doc>
	<doc for="CustomValidator.ClientValidationFunction">
		<summary>
			<para> Gets or sets the name of the custom client-side script function used
      for validation.</para>
		</summary>
		<value>
			<para>The name of the custom client script function used for validation.
      The default value is <see cref="System.String.Empty" qualify="true"/>, which indicates that this property is not
      set.</para>
			<note type="note">
      The
      function name should not include
      any parentheses or parameters.
      
   </note>
		</value>
		<remarks>
			<para>Set this property to the name of the function that performs
      the client-side validation. </para>
			<para> Because the client validation function runs on the
      target browser, the function must be written using a scripting language
      supported by the browser, such as JScript or VBScript.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
   <see cref="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction"/> property to specify
      the name of the function that performs client-side validation. The validation function checks for even
      numbers.</para>
			<codelink SampleID="CustomValidatorClient" SnippetID="1"/>
		</example>
		<seealso cref="System.String.Empty" qualify="true"/>
	</doc>
	<doc for="CustomValidator">
		<summary>
			<para> Performs user-defined validation on an input control.</para>
		</summary>
		<remarks>
			<para>Use the <see cref="System.Web.UI.WebControls.CustomValidator"/> control to provide a user-defined
   validation function for an input control. The <see cref="System.Web.UI.WebControls.CustomValidator"/> control is a separate
   control from the input control it validates, which allows you to control where the validation message is
   displayed. </para>
			<para> Validation controls always perform validation on
   the server. They also have complete client-side implementation that allows DHTML-supported
   browsers (such as Internet Explorer 4.0 and later) to perform validation
   on the client. Client-side validation enhances the validation process by
   checking user input before it is sent to the
   server. This allows errors to be detected on the client
   before the form is submitted, thus avoiding the round-trip of information necessary for server-side
   validation. </para>
			<para>To create a server-side validation function, provide a
   handler for the <see cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/> event that performs
   the validation. The string from the input control to validate can be accessed
   by using the <see cref="System.Web.UI.WebControls.ServerValidateEventArgs.Value"/> property of
   the <see cref="System.Web.UI.WebControls.ServerValidateEventArgs"/>
   passed into the event handler as
   a parameter. The result of the validation is then stored in the
<see cref="System.Web.UI.WebControls.ServerValidateEventArgs.IsValid"/> property of 
   the <see cref="System.Web.UI.WebControls.ServerValidateEventArgs"/>.</para>
			<para>To create a client-side validation function, first add the
   server-side validation function described earlier. Next, add the client-side validation
   script function to the ASP.NET
   (.aspx) page.</para>
			<para> If you are using
<see langword="VBScript"/>, the function must be in
   the form:</para>
			<code>
Sub ValidationFunctionName(source, arguments)
</code>
			<para> If you are using
<see langword="JScript"/>, the function must be in
   the form:</para>
			<code>
function ValidationFunctionName(source, arguments)
</code>
			<para>Use the <see cref="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction"/> property to specify
the name of the client-side validation script function associated with the
<see cref="System.Web.UI.WebControls.CustomValidator"/>. Because 
the script function is executed on the client, the function must be in a
language that the target browser supports, such as VBScript or JScript.</para>
			<para> Like server-side validation, the string from the input control to validate is accessed
   by using the <see cref="System.Web.UI.WebControls.ServerValidateEventArgs.Value"/>
   property of the
<paramref name="arguments"/> 
parameter. Return the result of the validation by setting the
<see cref="System.Web.UI.WebControls.ServerValidateEventArgs.IsValid"/> property of 
the
<paramref name="arguments"/> parameter.</para>
			<note type="caution">
   When creating
   a client-side validation function, be
   sure to also include the functionality of the server-side validation function. If
   you create a client-side
   validation
   function without a corresponding server-side function,
   it is possible for malicious code to bypass validation.
</note>
			<para>Multiple validation controls can be used with
   an individual input control to validate different criteria. For example, you can
   apply multiple validation controls on a <see cref="System.Web.UI.WebControls.TextBox"/> control that allows the user to enter
   the quantity of items to add to a shopping cart. You can use a <see cref="System.Web.UI.WebControls.CustomValidator"/> control to ensure that the value
   specified is less than the amount in inventory and a <see cref="System.Web.UI.WebControls.RequiredFieldValidator"/> control
   to ensure that the user enters a value into the <see cref="System.Web.UI.WebControls.TextBox"/>
   
   control. </para>
			<note type="note">
   If the input control is empty,
   no validation functions are called
   and validation succeeds. Use a <see cref="System.Web.UI.WebControls.RequiredFieldValidator"/> control to require the
   user to enter data in the input control.
</note>
			<para>It is possible to use a <see cref="System.Web.UI.WebControls.CustomValidator"/> control without setting the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property. This is commonly done when
you are validating multiple input controls or validating input controls that
cannot be used with validation controls, such as the <see cref="System.Web.UI.WebControls.CheckBox"/> control. In this case, the <see cref="System.Web.UI.WebControls.ServerValidateEventArgs.Value"/> property of
the <paramref name="arguments"/> parameter passed to the event handler for the <see cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/> event and to the client-side
validation function always contains an empty string (""). However, these
validation functions are still called, where appropriate, to determine validity
on both the server and client. To access the value to validate, you must
programmatically reference the input control you want to validate and then
retrieve the value from the appropriate property. For example, to validate a
<see cref="System.Web.UI.WebControls.CheckBox"/> control on the server, do not set 
the <see cref="System.Web.UI.WebControls.BaseValidator.ControlToValidate"/> property of the
validation control and use the following code for the handler for the <see cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/>
event. </para>
			<code lang="VB">Sub ServerValidation (source As object, args As ServerValidateEventArgs)
 
   args.IsValid = (CheckBox1.Checked = True)

End Sub
</code>
			<code lang="C#">void ServerValidation (object source, ServerValidateEventArgs args)
{
      
   args.IsValid = (CheckBox1.Checked == true);
   
}
</code>
			<para>For additional information on validation controls, see <see cref="System.Web.UI.WebControls.BaseValidator"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to create a server-side <see cref="System.Web.UI.WebControls.CustomValidator"/>.</para>
			<codelink SampleID="CustomValidatorServerValidate" SnippetID="1"/>
			<para>The following example demonstrates how to create a client-side <see cref="System.Web.UI.WebControls.CustomValidator"/>.</para>
			<codelink SampleID="CustomValidatorClient" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.WebControls.BaseValidator"/>
		<seealso cref="System.Web.UI.WebControls.RequiredFieldValidator"/>
		<seealso cref="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction"/>
		<seealso cref="System.Web.UI.WebControls.CustomValidator.ServerValidate"/>
		<seealso cref="System.Web.UI.WebControls.CustomValidator.OnServerValidate"/>
		<seealso cref="System.Web.UI.WebControls.ServerValidateEventArgs"/>
		<seealso cref="System.Web.UI.WebControls.ServerValidateEventArgs.Value"/>
		<seealso cref="System.Web.UI.WebControls.ServerValidateEventArgs.IsValid"/>
	</doc>
</docs>
