<docs>
	<doc for="HtmlButton.EventServerClick">
		<internalonly/>
		<summary>
			<para>Represents the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event of an <see cref="System.Web.UI.HtmlControls.HtmlButton"/>.</para>
		</summary>
	</doc>
	<doc for="HtmlButton.RenderAttributes">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="HtmlButton.IPostBackEventHandler.RaisePostBackEvent">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="HtmlButton.OnPreRender">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HtmlButton.HtmlButton">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> class.</para>
		</summary>
		<remarks>
			<para>Use this constructor to create and initialize a new instance of the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control.</para>
			<para>The following table shows initial property values for an instance of <see cref="System.Web.UI.HtmlControls.HtmlButton"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value </description>
				</listheader>
				<item>
					<term><see langword="TagName"/></term>
					<description>The "button" literal
      string.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates how dynamically add an <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control to the Web forms page.</para>
			<codelink SampleID="HtmlButtonConstructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HtmlButton.OnServerClick">
		<summary>
			<para>Raises the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event. This allows you
   to provide a custom handler for the event.</para>
		</summary>
		<param name="e">A <see cref="System.EventArgs" qualify="true"/> that contains the event data.</param>
		<remarks>
			<para> The <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event is raised when the
<see cref="System.Web.UI.HtmlControls.HtmlButton"/> control is clicked. This event causes a roundtrip to occur from the client
   to the server and back. It is deliberately different from the client-side
<see langword="OnClick"/> event.
   In the event that a conflict exists between code run with a <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event and code run by a
   client-side <see langword="OnClick"/>
   event, the server-side event
   instructions will override the client-side code.</para>
			<para>Raising an event invokes the event handler through a delegate. For more
   information, see <see topic="cpconProvidingEventFunctionality"/>. </para>
			<para>The <see cref="System.Web.UI.HtmlControls.HtmlButton.OnServerClick"/> method also allows
derived classes to handle the event without attaching a delegate. This is the
preferred technique for handling the event in a derived class.</para>
			<note type="inheritinfo">
   When overriding
<see cref="System.Web.UI.HtmlControls.HtmlButton.OnServerClick"/> in a derived class, be 
   sure to call the base class's <see cref="System.Web.UI.HtmlControls.HtmlButton.OnServerClick"/> method
   so that registered delegates receive the event.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to declaratively 
      specify and code an event handler for the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event. When the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control
      is clicked, the value entered in the text box displayed.</para>
			<codelink SampleID="Classic HtmlButton Example" SnippetID="1"/>
			<para>The following example demonstrates how to 
programmatically specify and code an event handler for the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event.</para>
			<codelink SampleID="HtmlButtonConstructor" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/>
	</doc>
	<doc for="HtmlButton.ServerClick">
		<summary>
			<para>Occurs when the user clicks an <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control on the client Web
   page.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event is raised when the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control 
   is clicked. This server event causes a roundtrip to occur from the client to the
   server and back. It is deliberately different from the client-side
<see langword="OnClick"/> event. In the event that a conflict exists between code 
   run with a <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event and code run by a
   client-side <see langword="OnClick"/>
   event, the server-side event instructions will override
   the
   client-side code.</para>
			<para>For more information about handling events, see <see topic="cpconEventsOverview"/>.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to declaratively 
      specify and code an event handler for the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event.
      When the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control is clicked, the value
      entered in the text box displayed.</para>
			<codelink SampleID="Classic HtmlButton Example" SnippetID="1"/>
			<para>The following example demonstrates 
how to programmatically specify and code an event handler for the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event.</para>
			<codelink SampleID="HtmlButtonConstructor" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.HtmlControls.HtmlButton.OnServerClick"/>
	</doc>
	<doc for="HtmlButton">
		<summary>
			<para> Allows programmatic access to the HTML
   <see langword="&lt;button&gt;"/>
   tag
   on the server.</para>
		</summary>
		<remarks>
			<para>The <see langword="&lt;button&gt;"/> element allows Web developers
   to create UI form buttons that can be composed of embedded HTML elements, including
   other server controls.</para>
			<note type="note">
   The <see langword="&lt;button&gt;"/>
   element is
   defined in the HTML 4.0 specification and is supported only in Microsoft
   Internet Explorer version 4.0 and later. To create UI form buttons for use in
   other browsers, consider using the <see cref="System.Web.UI.HtmlControls.HtmlInputImage"/> class.
   
</note>
			<para>To perform a set of custom instructions when the <see cref="System.Web.UI.HtmlControls.HtmlButton"/>
control is clicked, provide a custom
event handler for the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/>
event.</para>
			<note type="note">
   The <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control
   renders JavaScript to the client browser. The client browser must have JavaScript enabled for this control to function properly. For more
   information on client script, see <see topic="cpConClientScriptInWebForms"/>.
</note>
			<para>For a list of initial property values for an instance of <see cref="System.Web.UI.HtmlControls.HtmlButton"/>, see the <see cref="M:System.Web.UI.HtmlControls.HtmlButton.#ctor"/> constructor.</para>
			<note type="caution">
   This control can be used to
   display user input, which might include malicious client script. Check any
   information that is sent from a client for executable script, SQL statements, or
   other code before displaying it in your application. ASP.NET provides an input
   request validation feature to block script and HTML in user input. Validation
   server controls are also provided to assess user input. For more information,
   see <see topic="cpconASPNETSyntaxForValidationControls"/>.
</note>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
   <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event to display the name entered
      in the text box.</para>
			<codelink SampleID="Classic HtmlButton Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.HtmlControls.HtmlContainerControl"/>
		<seealso cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/>
		<seealso topic="cpConClientScriptInWebForms"/>
	</doc>
	<doc for="HtmlButton.CausesValidation">
		<summary>
			<para>Gets or sets a value indicating whether validation is
      performed when the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control is clicked.</para>
		</summary>
		<value>
			<para><see langword="true"/> if validation is performed when
   the <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control is clicked; otherwise,
<see langword="false"/>. The default value is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>By default, page validation is performed when an <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control is clicked. Page validation
   determines whether the input controls associated with a validation control on
   the page all pass the validation rules specified by the validation control. </para>
			<para>You can specify or determine whether validation is performed on both the
   client and the server when an <see cref="System.Web.UI.HtmlControls.HtmlButton"/> control is clicked by using the
<see cref="System.Web.UI.HtmlControls.HtmlButton.CausesValidation"/> property. To prevent 
   validation from being performed, set the <see cref="System.Web.UI.HtmlControls.HtmlButton.CausesValidation"/> property
   to <see langword="false"/>.</para>
			<para>This property is commonly used in the event handler for the <see cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/> event to prevent page 
validation from occurring when a <SpecialLocalizableItem kind="UIElement">Cancel</SpecialLocalizableItem> or
<SpecialLocalizableItem kind="UIElement">Reset</SpecialLocalizableItem> button is clicked.</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
   <see cref="System.Web.UI.HtmlControls.HtmlButton.CausesValidation"/>
   property to prevent page validation
   from occurring. Notice how the <see cref="System.Web.UI.WebControls.BaseValidator.Validate"/> method activates
   each validation control independently.</para>
			<codelink SampleID="HtmlButtonCausesValidation" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.UI.Page.Validate" qualify="true"/>
		<seealso cref="System.Web.UI.HtmlControls.HtmlButton.ServerClick"/>
	</doc>
</docs>
