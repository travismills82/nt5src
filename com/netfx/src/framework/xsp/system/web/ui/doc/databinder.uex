<docs>
	<doc for="DataBinder.Eval1">
		<summary>
		</summary>
	</doc>
	<doc for="DataBinder.GetIndexedPropertyValue"><nodoc/>
		<internalonly/>
		<summary>
		</summary>
	</doc><doc for="DataBinder.GetIndexedPropertyValue1">
		<nodoc/>
		<internalonly/>
	</doc><doc for="DataBinder.DataBinder">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="DataBinder">
		<summary>
			<para> Provides support for RAD designers to
      generate and parse <see topic="cpconDatabindingExpressionSyntax"/> . This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>You can use the overloaded <see cref="System.Web.UI.DataBinder.Eval"/> method of this class in Web Forms
   page data-binding syntax. This provides an easier syntax to remember than standard
   data binding, but because <see langword="DataBinder.Eval"/> provides
   automatic type conversion, can result in slower server
   response times. </para>
			<para>For more information about data binding to ASP.NET
   server controls, see <see topic="cpconDatabindingExpressionSyntax"/>.</para>
		</remarks>
		<seealso topic="cpconDatabindingExpressionSyntax"/>
		<seealso topic="cpconaccessingdatawithaspnet"/>
		<keyword term="data binding to ASP.NET server controls"/>
		<keyword term="ASP.NET server controls, data binding to"/>
		<keyword term="server controls, data binding to"/>
	</doc>
	<doc for="DataBinder.Eval">
		<overload>
			<para> Uses reflection to parse and
      evaluate a data-binding expression
      against an object
      at run time. This method allows RAD designers, such as Visual Studio .NET,
      to easily generate and parse data-binding syntax. This method can also be used
      declaratively on a Web Forms page to simplify casting from one type to
      another.</para>
		</overload>
		<summary>
			<para> Evaluates data-binding expressions at runtime.</para>
		</summary>
		<param name="container">The object reference against which the expression is evaluated. This must be a valild object identifier in the page's specified language.</param>
		<param name=" expression">The navigation path from the <paramref name="container"/> to the property value to be placed in the bound control property. This must be a string type of property or field names separated by dots, such as <see langword="Tables[0].DefaultView.[0].Price"/> in C# or <see langword="Tables(0).DefaultView.(0).Price"/> in Visual Basic.</param>
		<returns>
			<para> An <see cref="System.Object"/> that results from the evaluation
   of the data-binding expression.</para>
		</returns>
		<remarks>
			<para> While this method is automatically called when you create data bindings in
      a RAD designer, you can also use it declaratively if you want to simplify
      the casting to a text string to be displayed on a browser. To do so, you must
      place the &lt;%# and %&gt; tags, which are also used in standard ASP.NET data
      binding, around the data-binding expression.</para>
			<para>This method is particularly useful when binding data against controls that
      are in a templated list.</para>
			<note type="caution">
      Since this method
      performs late-bound evaluation, using reflection, at
      runtime, it can cause performance to noticeably slow compared to standard
      ASP.NET data-binding syntax.
      
   </note>
			<para>For any of the list Web controls, such as <see cref="System.Web.UI.WebControls.DataList"/>, <see cref="System.Web.UI.WebControls.DataGrid"/>, or <see cref="System.Web.UI.WebControls.Repeater"/>, the
<paramref name="container"/> parameter should be
<see langword="Container.DataItem"/> . If you are binding
   against the page, the <paramref name="container"/> parameter should be
<see langword="Page"/> .</para>
		</remarks>
		<example>
			<para>The following example demonstrates how you could use
   <see langword="DataBinder.Eval"/> declaratively to bind to a
   <see langword="Price"/>
   field. This
   example uses container syntax that assumes you are using one of the list Web
   controls.</para>
			<codelink SampleID="Classic DataBinder.Eval Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconDataBindingexpressionsyntax"/>
		<seealso cref="System.Web.UI.Control.DataBind"/>
		<seealso cref="System.Web.UI.DataBinding"/>
		<keyword term="data binding, evaluating expressions"/>
	</doc>
	<doc for="DataBinder.Eval2">
		<summary>
			<para> Evaluates data-binding expressions at runtime and formats the result as text to be displayed
      in the requesting browser.</para>
		</summary>
		<param name="container">The object reference against which the expression is evaluated. This must be a valild object identifier in the page's specified language.</param>
		<param name=" expression">The navigation path from the <paramref name="container"/> to the property value to be placed in the bound control property. This must be a string type of property or field names separated by dots, such as <see langword="Tables[0].DefaultView.[0].Price"/> in C# or <see langword="Tables(0).DefaultView.(0).Price"/> in Visual Basic. </param>
		<param name=" format">A .NET Framework format string, similar to those used by <see cref="System.String.Format" qualify="true"/> , that converts the <see cref="System.Object"/> (which results from the evaluation of the data-binding expression) to a <see cref="System.String"/> that can be displayed by the requesting browser.</param>
		<returns>
			<para>A<see cref="System.String"/>
that results from the evaluation
of the data-binding expression and conversion to a string type.</para>
		</returns>
		<remarks>
			<para>To learn more about format strings in the .NET Framework, see <see topic="cpconformattingoverview"/>.</para>
			<para>While this method is automatically called when you
   create data bindings in a RAD designer, you can also use it declaratively if you
   need to convert the resulting <see cref="System.Object"/> from the evaluated data-binding
   expression to a <see cref="System.String"/> .
   This allows the results of the data-binding expression to be displayed on the requesting browser.
   This method offers a simpler syntax than standard data-binding syntax, making it easier to remember. To
   do so, you must place the &lt;%# and %&gt; tags, which are also used in standard
   ASP.NET data binding, around the data binding expression.</para>
			<para>This method is particularly useful when data binding against controls that
   are in a templated list.</para>
			<note type="caution">
   Since this method performs late-bound
   evaluation, using reflection, at
   runtime, it can cause performance to noticeably slow compared to standard ASP.NET
   data-binding syntax. Use this method judiciously, particularly when string
   formatting is not required.
   
</note>
			<para>For any of the list Web controls, such as <see cref="System.Web.UI.WebControls.DataList"/>, <see cref="System.Web.UI.WebControls.DataGrid"/>, or <see cref="System.Web.UI.WebControls.Repeater"/>, the
<paramref name="container"/> parameter should be <see langword="Container.Dataitem"/> . If
you are binding against the page, the <paramref name="container"/> parameter should be
<see langword="Page"/> .</para>
		</remarks>
		<example>
			<para>The following example demonstrates how to use the
   <see langword="Eval"/> method declaratively to bind to a
   <see langword="Price"/>
   field. This example uses container syntax that assumes you are using one of the list Web server controls. The format parameter formats the number as a locale-specific currency string that will be displayed by the requesting browser. </para>
			<codelink SampleID="Classic DataBinder.Eval2 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconDatabindingExpressionSyntax "/>
		<seealso topic="cpconformattingoverview"/>
	</doc>
	<doc for="DataBinder.GetPropertyValue">
		<overload>
			<para> Retrieves the value of a property.</para>
		</overload>
		<summary>
			<para> Retrieves the value of 
      the specified property of the specified object.</para>
		</summary>
		<param name="container">The object that contains the property.</param>
		<param name=" propName">The property that contains the value to retrieve.</param>
		<returns>
			<para>The value of the specified property.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="container"/> parameter is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="propName "/>parameter is <see langword="null"/> or an empty string (""). </para></exception>
		<exception cref="System.Web.HttpException">The object in <paramref name="container"/> does not have the property in <paramref name="propName"/>.</exception>
		<remarks>
			<para>The <see cref="System.Web.UI.DataBinder.GetPropertyValue"/> method is used to retrieve the value
   of a property in an object. </para>
		</remarks>
	</doc>
	<doc for="DataBinder.GetPropertyValue1">
		<summary>
			<para> Retrieves the value of the specified property of the specified object and formats the results.</para>
		</summary>
		<param name="container">The object that contains the property.</param>
		<param name=" propName">The property that contains the value to retrieve.</param>
		<param name=" format">A string that specifies the format to display the results.</param>
		<returns>
			<para>The value of the specified property in the format specified
      by <paramref name="format"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="container"/> parameter is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="propName "/>parameter is <see langword="null"/> or an empty string (""). </para></exception>
		<exception cref="System.Web.HttpException">The object in <paramref name="container"/> does not have the property in <paramref name="propName"/>.</exception>
		<remarks>
			<para>This version of the <see cref="System.Web.UI.DataBinder.GetPropertyValue"/> method is used
   to retrieve and format the value of a property in an object.</para>
		</remarks>
	</doc>
</docs>
