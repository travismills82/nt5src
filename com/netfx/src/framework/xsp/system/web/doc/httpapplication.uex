<docs>
	<doc for="HttpApplication.EventDisposed">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventErrorRecorded">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventPreSendRequestHeaders">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventPreSendRequestContent">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventBeginRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventAuthenticateRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventAuthorizeRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventResolveRequestCache">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventAcquireRequestState">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventPreRequestHandlerExecute">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventPostRequestHandlerExecute">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventReleaseRequestState">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventUpdateRequestCache">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.EventEndRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpApplication.IHttpAsyncHandler.BeginProcessRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="HttpApplication.IHttpHandler.IsReusable">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="HttpApplication.IHttpAsyncHandler.EndProcessRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="HttpApplication.IHttpHandler.ProcessRequest">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="HttpApplication.Init">
		<summary>
			<para> 
      Executes custom
      initialization code after all event-handler modules
      have been added.</para>
		</summary>
		<remarks>
			<para>Your derived class can override this method to add 
      custom one-time initialization code.</para>
		</remarks>
	</doc><doc for="EndEventHandler">
		<summary>
			<para>Represents the method that handles asynchronous events 
      such as application events. This delegate is called by the event source when
      completion of the asynchronous operation is signaled by a callback to the
   <see cref="System.Web.BeginEventHandler"/> 
   
   delegate.</para>
		</summary>
		<param name="ar">The <see cref="System.IAsyncResult"/> that is the result of the <see cref="System.Web.BeginEventHandler"/> operation.</param>
	</doc><doc for="BeginEventHandler">
		<summary>
			<para> Represents the method
      that handles asynchronous events such as application events. This delegate is called at the
      start of an asynchronous operation.</para>
		</summary>
		<param name="sender">The source of the event.</param>
		<param name=" e">An <see cref="System.EventArgs"/> that contains the event data.</param>
		<param name=" cb">The delegate to call when the asynchronous method call is complete. If <paramref name="cb"/> is <see langword="null"/> , the delegate is not called.</param>
		<param name=" extraData">Any additional data needed to process the request.</param>
		<returns>
			<para>The <see cref="System.IAsyncResult"/> that represents the result of
   the <see langword="BeginEventHandler"/> operation.</para>
		</returns>
	</doc><doc for="HttpApplication.Events">
		<summary>
			<para>Gets the list of event handler delegates that process all
      application events.</para>
		</summary>
		<value>
			<para>An <see cref="System.ComponentModel.EventHandlerList"/> that contains the names of
   the event handler delegates.</para>
		</value>
	</doc><doc for="HttpApplication.Modules">
		<summary>
			<para> Gets the collection of modules for the current application.</para>
		</summary>
		<value>
			<para>An <see cref="System.Web.HttpModuleCollection"/> containing the names of the modules for the
   application.</para>
		</value>
	</doc><doc for="HttpApplication.Site">
		<summary>
			<para>Provides a site interface for an <see cref="System.ComponentModel.IComponent"/> implementation.</para>
		</summary>
		<value>
			<para>An <see cref="System.ComponentModel.ISite"/> that allows a container to manage and
   communicate with its child components.</para>
		</value>
	</doc><doc for="HttpApplication.AddOnBeginRequestAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.BeginRequest"/> event to the collection of asynchronous
<see langword="BeginRequest"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AddOnAuthenticateRequestAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.AuthenticateRequest"/> event to
   the collection of asynchronous <see langword="AuthenticateRequest"/>
   event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AddOnAuthorizeRequestAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.AuthorizeRequest"/> event to the collection of asynchronous
<see langword="AuthorizeRequest"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AddOnPostRequestHandlerExecuteAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.PostRequestHandlerExecute"/> event to the
   collection of asynchronous <see langword="PostRequestHandlerExecute"/>
   event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh"><para>The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</para></param>
	</doc><doc for="HttpApplication.AddOnEndRequestAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.EndRequest"/> event to the collection of asynchronous
<see langword="EndRequest"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AddOnPreRequestHandlerExecuteAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.PreRequestHandlerExecute"/> event to the collection of asynchronous
<see langword="PreRequestHandlerExecute"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AddOnReleaseRequestStateAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.ReleaseRequestState"/> event to the collection of asynchronous
<see langword="ReleaseRequestState"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.CompleteRequest">
		<summary>
			<para>Causes ASP.NET to bypass all events in the HTTP pipeline chain of
      execution and directly execute <see cref="System.Web.HttpApplication.EndRequest"/>.
      </para>
		</summary>
	</doc><doc for="HttpApplication.AddOnResolveRequestCacheAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.ResolveRequestCache"/> event handler to the collection of asynchronous
<see langword="ResolveRequestCache"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AddOnUpdateRequestCacheAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.UpdateRequestCache"/> event to the collection of asynchronous
<see langword="UpdateRequestCache"/> event handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc><doc for="HttpApplication.AcquireRequestState">
		<summary>
			<para> Occurs when ASP.NET acquires the current state (for
      example, session state) associated with the current request.</para>
		</summary>
		<remarks>
			<para>This event is raised after the handler has been created.</para>
		</remarks>
	</doc><doc for="HttpApplication.Server">
		<summary>
   Gets the intrinsic server<see langword=" "/>object for the current request.
</summary>
		<value>
			<para>The <see cref="System.Web.HttpServerUtility"/> that the 
   application is processing.</para>
		</value>
	</doc><doc for="HttpApplication.PreSendRequestHeaders">
		<summary>
			<para> Occurs just before ASP.NET sends HTTP headers
      to the client.</para>
		</summary>
	</doc><doc for="HttpApplication.PreSendRequestContent">
		<summary>
			<para> Occurs just before ASP.NET sends content to the client.</para>
		</summary>
	</doc><doc for="HttpApplication.PreRequestHandlerExecute">
		<summary>
			<para> Occurs just before ASP.NET begins executing a handler such as
      a page or XML Web service.</para>
		</summary>
	</doc><doc for="HttpApplication.ReleaseRequestState">
		<summary>
			<para> Occurs after ASP.NET finishes executing all request 
      handlers. This event causes state
      modules to save the current state data.</para>
		</summary>
	</doc><doc for="HttpApplication">
		<summary>
			<para> Defines the methods, properties, and events common to all
      application objects within an ASP.NET application. This class is the
      base class for applications defined
      by the user in the global.asax file.</para>
		</summary>
		<remarks>
			<para> Instances of this class are created in the ASP.NET infrastructure, not by the user directly. One
      instance is used to process many requests in its lifetime but it can
      process only one at a time. Thus member variables can be used to store per-request
      data.</para>
			<para> An application executes events
      that are
      handled by modules or
      user code
      defined in the global.asax file in the
      following sequence:</para>
			<para> BeginRequest </para>
			<para> AuthenticateRequest </para>
			<para> AuthorizeRequest </para>
			<para> ResolveRequestCache </para>
			<para> [A handler (a page corresponding to the request URL) is created at this point.] </para>
			<para> AcquireRequestState </para>
			<para> PreRequestHandlerExecute </para>
			<para> [The handler is executed.] </para>
			<para> PostRequestHandlerExecute </para>
			<para> ReleaseRequestState </para>
			<para> [Response filters, if any, filter the output.] </para>
			<para> UpdateRequestCache </para>
			<para> EndRequest</para>
		</remarks>
	</doc><doc for="HttpApplication.Request">
		<summary>
			<para>Gets the intrinsic request<see langword=" "/> object
   for the current request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Web.HttpRequest"/> that the application is processing.</para>
		</value>
		<exception cref="HttpException">The <see langword="HttpRequest"/> is <see langword="null"/> .</exception>
	</doc><doc for="HttpApplication.Response">
		<summary>
			<para>Gets the intrinsic response<see langword=" "/>
object for the current
request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Web.HttpResponse"/> that the application is processing.</para>
		</value>
		<exception cref="HttpException">The <see langword="HttpResponse"/> is <see langword="null"/> .</exception>
	</doc><doc for="HttpApplication.Session">
		<summary>
			<para> Gets the intrinsic session<see langword=" "/> object that provides access to session data.
   </para>
		</summary>
		<value>
			<para>The <see cref="System.Web.SessionState.HttpSessionState"/> for the current session.</para>
		</value>
		<exception cref="HttpException">The <see langword="HttpSessionState"/> is <see langword="null"/> .</exception>
	</doc><doc for="HttpApplication.User">
		<summary>
			<para>Gets the intrinsic user object for the current request.</para>
		</summary>
		<value>
			<para>The <see cref="System.Security.Principal.IPrincipal"/>
representing the current authenticated or anonymous user.</para>
		</value>
		<exception cref="HttpException">The <see langword="IPrincipal"/> is <see langword="null"/>.</exception>
	</doc><doc for="HttpApplication.Dispose">
		<summary>
			<para> Cleans up the instance variables of a
      module.
      </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Web.HttpApplication.Request"/>, <see cref="System.Web.HttpApplication.Response"/>, <see cref="System.Web.HttpApplication.Session"/>, and <see cref="System.Web.HttpApplication.Application"/> properties are not available for use at the time
<see cref="System.Web.HttpApplication.Dispose"/>
is executed.</para>
		</remarks>
	</doc><doc for="HttpApplication.AuthenticateRequest">
		<summary>
			<para> Occurs when a security module has established the identity of the user.</para>
		</summary>
	</doc><doc for="HttpApplication.AuthorizeRequest">
		<summary>
			<para> Occurs when a security module has verified user authorization.</para>
		</summary>
	</doc><doc for="HttpApplication.BeginRequest">
		<summary>
			<para>Occurs as the first event in the HTTP pipeline
      chain of execution when ASP.NET responds to a request.</para>
		</summary>
	</doc><doc for="HttpApplication.GetVaryByCustomString">
		<summary>
			<para>Provides an application-wide implementation of the <see cref="System.Web.UI.PartialCachingAttribute.VaryByCustom"/> property.</para>
		</summary>
		<param name="context">An <see cref="System.Web.HttpContext"/> that contains information about the current Web request</param>
		<param name=" custom">The custom string that specifies which cached response is used to response to the current request.</param>
		<returns>
			<para> If
      the value of the <paramref name="custom"/> parameter is "browser", the browser's
   <see cref="System.Web.HttpBrowserCapabilities.Type"/> ; otherwise,
   <see langword="null"/> .</para>
		</returns>
		<remarks>
			<para>You can override <see langword="GetVaryByCustomString"/> to add a new method for calculating custom vary-by
   values based on the current request. The implementation has to
   call the base class for custom values that it does not recognize. For more
   information, see <see topic="cpconCachingVersionsOfPageBasedOnCustomStrings"/>
   
   .</para>
		</remarks>
		<seealso topic="cpconCachingVersionsOfPageBasedOnCustomStrings"/>
	</doc><doc for="HttpApplication.EndRequest">
		<summary>
			<para> Occurs as the last event to in the HTTP pipeline chain of execution
      when ASP.NET responds to a request.</para>
		</summary>
		<remarks>
			<para>The <see langword="EndRequest"/> event is always raised
   when <see cref="System.Web.HttpApplication.CompleteRequest"/> is called.</para>
		</remarks>
	</doc><doc for="HttpApplication.Error">
		<summary>
			<para> Occurs when an unhandled exception is
      thrown.</para>
		</summary>
		<remarks>
			<para>The exception that raises the <see langword="Error"/> event can be accessed by a call to <see cref="System.Web.HttpServerUtility.GetLastError"/> method. 
   If your application generates custom error output, suppress the default error
   message generated by ASP.NET by a call to the <see cref="System.Web.HttpServerUtility.ClearError"/>
   method.</para>
		</remarks>
	</doc><doc for="HttpApplication.PostRequestHandlerExecute">
		<summary>
			<para> Occurs when the ASP.NET handler (page,
      XML Web service) finishes execution.</para>
		</summary>
	</doc><doc for="HttpApplication.UpdateRequestCache">
		<summary>
			<para> Occurs when ASP.NET finishes executing a handler in order
      to let caching modules store responses that will be used to serve
      subsequent requests from the cache.</para>
		</summary>
	</doc><doc for="HttpApplication.ResolveRequestCache">
		<summary>
			<para> Occurs when ASP.NET completes an authorization event to let the
      caching modules serve requests from the cache, bypassing execution of the handler (the
      page or XML Web service, for example).</para>
		</summary>
	</doc>
	<doc for="HttpApplication.Application">
		<summary>
			<para> 
      Gets the current state of an application.</para>
		</summary>
		<value>
			<para>The <see cref="System.Web.HttpApplicationState"/> for the
   current request.</para>
		</value>
		<remarks>
			<para>The current state of an application consists of a key-value dictionary 
      of application-wide objects that you can use to store both .NET Framework
      objects and scalar values related to multiple Web requests from multiple
      clients.</para>
		</remarks>
	</doc>
	<doc for="HttpApplication.Context">
		<summary>
			<para> Gets HTTP-specific information about
      the current request.
      </para>
		</summary>
		<value>
			<para>The <see cref="System.Web.HttpContext"/> 
for the current request.</para>
		</value>
	</doc>
	<doc for="HttpApplication.AddOnAcquireRequestStateAsync">
		<summary>
			<para>Adds the specified <see cref="System.Web.HttpApplication.AcquireRequestState"/> event to 
   the collection of asynchronous <see langword="AcquireRequestState"/> event
   handlers for the current request.</para>
		</summary>
		<param name="bh">The <see cref="System.Web.BeginEventHandler"/> delegate that starts asynchronous processing of the event.</param>
		<param name=" eh">The <see cref="System.Web.EndEventHandler"/> delegate that ends asynchronous processing of the event.</param>
	</doc>
	<doc for="HttpApplication.Disposed">
		<summary>
			<para> Adds an event handler to listen to the
   <see langword="Disposed"/>
   event on the application.</para>
		</summary>
		<remarks>
			<para>When you create a <see langword="Disposed"/> delegate, you identify the method that 
   handles the event. To associate the event with your event handler, add an
   instance of the delegate to the event. The event handler is called whenever the
   event occurs, unless you remove the
   
   delegate.</para>
		</remarks>
	</doc>
</docs>
