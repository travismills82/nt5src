<docs>
	<doc for="HttpRuntime.GetResourceString">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.DebuggingEnabled">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.GetAssemblyType">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.GetAssemblyType1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.LoadAssembly">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.LoadAssembly1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.AppDomainAppVirtualPath">
		<summary>
			<para>Gets the virtual path of the directory that
      contains the application hosted in the current application domain.</para>
		</summary>
		<value>
			<para>The virtual path of the directory that contains the application hosted in the 
      current application domain.</para>
		</value>
	</doc><doc for="HttpRuntime.AspInstallDirectory">
		<summary>
			<para>Gets the physical path of the directory where the
      ASP.NET executable files are installed.</para>
		</summary>
		<value>
			<para>The physical path to the ASP.NET executable files.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the information in the path itself. This protects sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.ConfigurationDirectory">
		<summary>
			<para>Gets the physical path to the directory where the
      Machine.config file for the current application is located.</para>
		</summary>
		<value>
			<para>The physical path to the Machine.config file for the current application.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the information in the path itself. This protects sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.CodegenDir">
		<summary>
			<para>Gets the physical path to the directory where ASP.NET stores temporary
      files (generated sources, compiled assemblies, and so on) for the
      current application.</para>
		</summary>
		<value>
			<para>The physical path to the application's temporary file storage directory.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the information in the path itself. This protects sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.AppDomainAppPath">
		<summary>
			<para>Gets the physical drive path of the application
      directory for the application hosted in the current application domain.</para>
		</summary>
		<value>
			<para>The physical drive path of the application directory for the application
      hosted in the current application domain.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the information in the path itself. This protects sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.AppDomainId">
		<summary>
			<para>Gets the application identification of the application domain where
      the <see cref="System.Web.HttpRuntime"/> exists.</para>
		</summary>
		<value>
			<para>The unique application domain identifier.</para>
		</value>
		<remarks>
			<para><see langword="AppDomainID"/> changes whenever the application is restarted
   and a new application domain is created.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by the permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.IsOnUNCShare">
		<summary>
			<para>Gets a value that indicates whether the application is mapped to
      a universal naming convention (UNC) share.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the application is mapped to a UNC share; otherwise,
<see langword="false"/>.</para>
		</value>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by the permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.ProcessRequest">
		<summary>
			<para> Drives
      all ASP.NET Web processing execution.</para>
		</summary>
		<param name="wr">An <see cref="System.Web.HttpWorkerRequest"/> for the current application. </param>
		<exception cref="ArgumentNullException">THe <paramref name="wr"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>This method is provided for use when your code
      implements its own hosting environment. It also can be used to execute
      child requests when your code implements its own <see cref="System.Web.HttpWorkerRequest"/>
			</para>
		</remarks>
	</doc><doc for="HttpRuntime.Cache">
		<summary>
			<para>Gets the <see cref="System.Web.Caching.Cache"/> for the current application.</para>
		</summary>
		<value>
			<para>The current <see cref="System.Web.Caching.Cache"/><see langword="."/>
			</para>
		</value>
	</doc><doc for="HttpRuntime.AppDomainAppId">
		<summary>
			<para>Gets the application identification of the
      application domain where the <see cref="System.Web.HttpRuntime"/> exists.</para>
		</summary>
		<value>
			<para>The application identification of the application domain 
      where the <see cref="System.Web.HttpRuntime"/> exists.</para>
		</value>
		<remarks>
			<para><see langword="AppDomainAppID"/> uniquely identifies
   the application. It does not change after the application is restarted and a
   new application domain is created.</para>
		</remarks>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by the permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.BinDirectory">
		<summary>
			<para> Gets the physical path to the /bin directory for the
      current application.</para>
		</summary>
		<value>
			<para>The path to the current application's /bin directory.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the information in the path itself. This protects sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.ClrInstallDirectory">
		<summary>
			<para> Gets the physical path to the directory where the
      common language runtime executable files are installed.</para>
		</summary>
		<value>
			<para>The physical path to the common language runtime executable files.</para>
		</value>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to the information in the path itself. This protects sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc><doc for="HttpRuntime.Close">
		<summary>
			<para> Removes all items from the cache.</para>
		</summary>
		<remarks>
			<para>This method is provided for use when your code implements its own hosting
      environment. There is no need to call this method in the course of
      normal request processing.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="HttpRuntime.HttpRuntime">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.HttpRuntime"/> class.</para>
		</summary>
	</doc>
	<doc for="HttpRuntime.UnloadAppDomain">
		<summary>
			<para>Terminates the current application. The
      application restarts the next time a request is received for it.</para>
		</summary>
		<remarks>
			<para><see langword="UnloadAppDomain"/> is useful for servers that have a large
   number of applications that infrequently receive requests. Rather than keep
   application resources alive for the lifetime of the process,
<see langword="UnloadAppDomain"/> allows programmatic shutdown of unused 
   applications.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
	</doc>
	<doc for="HttpRuntime">
		<summary>
			<para>Provides a set of ASP.NET run-time services for the current application.</para>
		</summary>
		<example>
			<codelink SampleID="SystemWebHttpRuntime" SnippetID="1"/>
		</example>
	</doc>
</docs>
