<docs>
	<doc for="HttpResponse.AddFileDependency">
		<summary>
			<para>Adds a single file name to the collection of file names on which the current response is dependent.</para>
		</summary>
		<param name="filename"> The name of the file to add.</param>
		<example>
			<para>The following example adds a single file name to the file dependency 
       list.</para>
			<codelink SampleID="Classic HttpResponse.AddFileDependency Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.AddFileDependencies">
		<summary>
			<para>Adds a group of file names to the collection of file names on which the current response is dependent.</para>
		</summary>
		<param name="filenames">The collection of files to add.</param>
		<example>
			<para>The following example adds an <see langword="ArrayList "/> of file names to the file 
    dependency list.</para>
			<codelink SampleID="Classic HttpResponse.AddFileDependencies Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.StatusDescription">
		<summary>
			<para>Gets or sets the HTTP status string of the output returned to the
       client.</para>
		</summary>
		<value>
			<para>A string describing the status of the HTTP output returned to the
       client. The default value is "OK".</para>
		</value>
		<exception cref="System.Web.HttpException">
			<paramref name="StatusDescription "/>is set after the HTTP headers have been sent.</exception>
		<example>
			<para> The following example takes action if the status code is not 
       "OK".</para>
			<codelink SampleID="Classic HttpResponse.StatusDescription Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.BufferOutput">
		<summary>
			<para>Gets or sets a value indicating whether to buffer output and send it after 
       the entire page is finished processing.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the output to client is 
    buffered, otherwise <see langword="false"/>. The default is
 <see langword="true"/>
 .</para>
		</value>
		<example>
			<para> The following example takes action only if the output is buffered.</para>
			<codelink SampleID="Classic HttpResponse.BufferOutput Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Cache">
		<summary>
			<para> Gets the caching policy (expiration time, privacy, vary
       clauses) of a Web page.</para>
		</summary>
		<value>
			<para>An<see cref="System.Web.HttpCachePolicy"/>
 object containing information about the caching policy of the current
 response.</para>
		</value>
		<example>
			<para> The following example writes properties of the current 
       cache policy to the HTTP output stream.</para>
			<codelink SampleID="Classic HttpResponse.Cache Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.IsClientConnected">
		<summary>
			<para>Gets a value
       indicating whether the client is still connected to the server.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the client is currently connected; 
    otherwise, <see langword="false"/>
    .</para>
		</value>
		<example>
			<para> The following example takes action if the client is currently connected.</para>
			<codelink SampleID="Classic HttpResponse.IsClientConnected Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Close">
		<summary>
			<para>Closes the socket connection to a client.</para>
		</summary>
		<example>
			<para> The following example closes the socket connection if content is to be suppressed.</para>
			<codelink SampleID="Classic HttpResponse.Close Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.OutputStream">
		<summary>
			<para>Enables binary output to the outgoing HTTP content body.</para>
		</summary>
		<value>
			<para> An IO <see cref="System.IO.Stream"/>
 representing the raw contents of the
 outgoing HTTP content body.</para>
		</value>
		<exception cref="System.Web.HttpException">
			<paramref name="OutputStream "/>is not available.</exception>
	</doc>
	<doc for="HttpResponse.BinaryWrite">
		<summary>
			<para>Writes a string of binary characters to the HTTP output stream.</para>
		</summary>
		<param name="buffer"> The bytes to write to the output stream.</param>
		<example>
			<para>The following example reads a text file into a buffer and writes 
       the buffer to the HTTP output stream.</para>
			<codelink SampleID="Classic HttpResponse.BinaryWrite Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Pics">
		<summary>
			<para> Appends a <see langword="PICS-Label "/> HTTP header to the output stream.</para>
		</summary>
		<param name="value">The string to add to the <see langword="PICS-Label"/> header.</param>
		<remarks>
			<para>Platform for Internet Content Selection (PICS) is a World Wide Web Consortium 
       (W3C) standard for content labeling. PICS is essentially a language for
       creating a ratings system.</para>
			<para> Any value can be a PICS 
       label; ASP.NET does not validate the label. The maximum length of the string is
       255 characters. For more information about PICS standards and syntax, see the
       World Wide Web Consortium's Web site at http://www.w3c.org
       . </para>
		</remarks>
	</doc>
	<doc for="HttpResponse.AppendCookie">
		<summary>
			<para>Adds an HTTP cookie
       to the intrinsic cookie collection.</para>
		</summary>
		<param name="cookie">The cookie to add to the output stream.</param>
		<exception cref="System.Web.HttpException">A cookie is appended after the HTTP headers have been sent.</exception>
		<example>
			<para>The following example creates a new cookie named LastVisit, sets the value of 
       the cookie to the current date and time, and appends the cookie to the
       current cookie collection. All cookies in the cookie collection are sent to the
       client in the <see langword="Set-Cookie "/>header with the HTTP output
       stream.</para>
			<codelink SampleID="Classic HttpResponse.AppendCookie Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.SetCookie">
		<summary>
			<para>Updates an existing cookie in the cookie collection.</para>
		</summary>
		<exception cref="System.Web.HttpException">The cookie is set after the HTTP headers have been sent.</exception>
		<exception cref="System.Web.HttpException">Attempted to set the cookie after the HTTP headers were sent.</exception>
		<example>
			<para> The following example updates the value of 
       an existing cookie.</para>
			<codelink SampleID="Classic HttpResponse.SetCookie Example" SnippetID="1"/>
		</example>
		<exception cref="System.Web.HttpException">The cookie is set after the HTTP headers have been sent.</exception>
		<exception cref="System.Web.HttpException">Attempted to set the cookie after the HTTP headers were sent.</exception>
	</doc>
	<doc for="HttpResponse.ClearHeaders">
		<summary>
			<para>Clears all headers from the buffer stream.</para>
		</summary>
		<exception cref="System.Web.HttpException">Headers are cleared after the HTTP headers have been sent.</exception>
		<example>
			<para>The following example clears all headers from the current buffer stream.</para>
			<codelink SampleID="Classic HttpResponse.ClearHeaders Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.ClearContent">
		<summary>
			<para>Clears all content output from the buffer stream.</para>
		</summary>
		<example>
			<para>The following example clears all content from the buffer stream.</para>
			<codelink SampleID="Classic HttpResponse.ClearContent Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Clear">
		<summary>
			<para> Clears all content output from the buffer stream.</para>
		</summary>
		<example>
			<para>The following example clears the current buffer stream.</para>
			<codelink SampleID="Classic HttpResponse.Clear Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Flush">
		<summary>
			<para>Sends all currently buffered output to the client.</para>
		</summary>
		<exception cref="System.Web.HttpException">The cache is flushed after the response has been sent.</exception>
		<remarks>
			<para>Forces all currently buffered output to be sent to the 
       client. <see cref="System.Web.HttpResponse.Flush"/>
       can be called multiple
       times during request processing.</para>
		</remarks>
		<example>
			<para>The following example flushes the buffer to the output 
       stream.</para>
			<codelink SampleID="Classic HttpResponse.Flush Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.AppendToLog">
		<summary>
			<para>Adds custom log information to the IIS log file.</para>
		</summary>
		<param name="param">The text to add to the log file.</param>
		<example>
			<para>The following example appends a string to the log.</para>
			<codelink SampleID="Classic HttpResponse.AppendToLog Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.WriteFile">
		<overload>
			<para>Writes the specified file directly to an HTTP content output stream.</para>
		</overload>
		<summary>
			<para>Writes
       the specified file directly to an HTTP content output stream.</para>
		</summary>
		<param name="filename"> The name of the file to write to the HTTP output.</param>
		<example>
			<para>The following example writes the entire contents of a text file named "login.txt", (which might contain 
       literal HTML text and input controls) directly to the output stream.</para>
			<codelink SampleID="Classic HttpResponse.WriteFile Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.WriteFile1">
		<summary>
			<para> Writes the contents of the specified file into a memory block.</para>
		</summary>
		<param name="filename"> The name of the file to write into a memory block.</param>
		<param name="readIntoMemory">Indicates whether the file will be written into a memory block.</param>
		<example>
			<para>The following example writes a file to memory.</para>
			<codelink SampleID="Classic HttpResponse.WriteFile1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.WriteFile2">
		<summary>
			<para>Writes the specified file directly to an HTTP content output stream.</para>
		</summary>
		<param name=" filename">The name of the file to write to the HTTP output stream.</param>
		<param name="offset">The byte position in the file where writing will start.</param>
		<param name=" size"> The number of bytes to write to the output stream.</param>
		<example>
			<para>The following example writes the entire contents of a text file named "login.txt" (which might 
       contain literal text and HTML input controls) directly to the output
       stream.</para>
			<codelink SampleID="Classic HttpResponse.WriteFile2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.HasSubstBlock">
		<nodoc/>
		<summary>
			<para>Returns a value indicating whether the specified substitution block exists.</para>
		</summary>
		<param name="name">The name of the substitution block.</param>
		<returns>
			<para>
				<see langword="true "/>if a substitution block exists; 
    otherwise <see langword="false"/> .</para>
		</returns>
	</doc>
	<doc for="HttpResponse.MakeSubstitution">
		<nodoc/>
	</doc>
	<doc for="HttpResponse.Output">
		<summary>
			<para> Enables output of text to the outgoing HTTP response stream.</para>
		</summary>
		<value>
			<para>A<see cref="System.IO.TextWriter"/>
object enabling custom output to the client.</para>
		</value>
	</doc>
	<doc for="HttpResponse.Buffer">
		<summary>
			<para> Gets or sets a value indicating whether to
      buffer output and send it after the entire response is finished processing.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the output to client is
   buffered; otherwise, <see langword="false."/></para>
		</value>
		<remarks>
			<para>
				<see cref="System.Web.HttpResponse.Buffer"/> 
has been deprecated in favor of <see cref="System.Web.HttpResponse.BufferOutput"/> and is
provided only for compatibility with previous versions of ASP. With ASP.NET, use
<see cref="System.Web.HttpResponse.BufferOutput"/>. </para>
		</remarks>
	</doc>
	<doc for="HttpResponse.SuppressContent">
		<summary>
			<para> Gets or sets a value indicating whether to send HTTP content to the client.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> to suppress output; otherwise,
<see langword="false"/>. </para>
		</value>
		<example>
			<para>The following example sets <see langword="SuppressContent "/> to <see langword="true"/>.</para>
			<codelink SampleID="Classic HttpResponse.SuppressContent Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Status">
		<summary>
			<para>Sets the <see langword="Status "/>line that is returned to the client.</para>
		</summary>
		<value>
			<para>Setting the status code causes a string
      describing the status of the HTTP output to be returned to
      the client. The default value is "200 OK".</para>
		</value>
		<exception cref="System.Web.HttpException">Status is set to an invalid status code.</exception>
		<remarks>
			<para>
				<see cref="System.Web.HttpResponse.Status"/> has been deprecated in favor of <see cref="System.Web.HttpResponse.StatusDescription"/> and is
   provided only for compatibility with previous versions of ASP. With ASP.NET,
   use <see cref="System.Web.HttpResponse.StatusDescription"/> instead.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.Expires">
		<summary>
			<para> Gets or sets the number of minutes before a page cached on a browser
      expires. If the user returns to the same page before it expires, the cached
      version is displayed.</para>
			<see cref="System.Web.HttpResponse.Expires"/>
is provided for compatiblility with previous versions of ASP.
</summary>
		<value>
			<para>The number of minutes before the page expires.</para>
		</value>
		<remarks>
			<para>The <see langword="Expires"/>, <see cref="System.Web.HttpResponse.ExpiresAbsolute"/> and <see cref="System.Web.HttpResponse.CacheControl"/> properties have been deprecated in favor of the 
   methods of the <see cref="System.Web.HttpCachePolicy"/> class available through the <see cref="System.Web.HttpResponse.Cache"/>
   intrinsic object to control the IIS
   output
   cache and client caches.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.ExpiresAbsolute">
		<summary>
			<para> Gets or sets the absolute date and time at which
      to remove cached information from
      the cache.</para>
			<para>
				<see cref="System.Web.HttpResponse.ExpiresAbsolute"/> is provided
   for compatibility with previous versions of ASP.</para>
		</summary>
		<value>
			<para> The date and time at which the page expires.</para>
		</value>
		<remarks>
			<para>The <see langword="ExpiresAbsolute"/>, <see cref="System.Web.HttpResponse.Expires"/> 
and <see cref="System.Web.HttpResponse.CacheControl"/> properties have been deprecated in favor of the
methods of the <see cref="System.Web.HttpCachePolicy"/> class available through the <see cref="System.Web.HttpResponse.Cache"/>
intrinsic object to control the IIS output cache and client caches.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.Write2">
		<summary>
			<para>Writes a character to an HTTP output content stream.</para>
		</summary>
		<param name="ch">The character to write to the HTTP output stream.</param>
	</doc><doc for="HttpResponse.Write1">
		<summary>
			<para>Writes an <see langword="Object"/> to an HTTP output content stream.</para>
		</summary>
		<param name="obj">The <see langword="Object"/> to write to the HTTP output stream.</param>
	</doc><doc for="HttpResponse.Write3">
		<summary>
			<para> Writes an array of characters to an 
      HTTP output content stream.</para>
		</summary>
		<param name="buffer"> The character array to write.</param>
		<param name=" index">The position in the character array where writing starts.</param>
		<param name=" count">The number of characters to write, beginning at <paramref name="index"/>.</param>
	</doc><doc for="HttpResponse.WriteFile3">
		<summary>
			<para>Writes the specified file directly to an HTTP content output stream.</para>
		</summary>
		<param name="fileHandle">The file handle of the file to write to the HTTP output stream.</param>
		<param name=" offset">The byte position in the file where writing will start.</param>
		<param name=" size">The number of bytes to write to the output stream.</param>
		<example>
			<para>The following example writes the entire contents of a text file named "login.txt" (which might
      contain literal HTML text and input controls) directly to the output
      stream.</para>
			<codelink SampleID="Classic HttpResponse.WriteFile3 Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpResponse.AddHeader">
		<summary>
			<para> Adds an HTTP header to the output stream.</para>
			<para><see langword="AddHeader"/> is provided
   for compatibility with previous versions of ASP.</para>
		</summary>
		<param name="name">The name of the HTTP header to add <paramref name="value "/> to.</param>
		<param name=" value">The string to add to the header.</param>
		<remarks>
			<para><see langword="AddHeader"/>is the 
   same as <see cref="System.Web.HttpResponse.AppendHeader"/> and is provided only for compatibility
   with previous versions of ASP. With ASP.NET, use <see langword="AppendHeader"/> .</para>
		</remarks>
		<example>
			<codelink SampleID="Classic HttpResponse.AddHeader Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpResponse.ContentType">
		<summary>
			<para>Gets or sets the HTTP MIME
      type of the output stream.</para>
		</summary>
		<value>
			<para>The HTTP MIME type of the output stream. The default
      value is "<see langword="text/html"/>
      ".</para>
		</value>
		<exception cref="System.Web.HttpException"><paramref name="ContentType "/>is set to a null reference (in Visual Basic <see langword="Nothing"/> ).</exception>
		<remarks>
			<para>The following example takes action if the content type of the output is not
      "Text/HTML".</para>
			<code lang="VB">If Response.ContentType &lt;&gt; "Text/HTML" Then
    ...
 End If
   </code>
			<code lang="C#">if (Response.ContentType != "Text/HTML")
 {
    ...
 }
   </code>
		</remarks>
	</doc><doc for="HttpResponse.RemoveOutputCacheItem">
		<summary>
			<para>Static method removes from the cache all cached 
      items associated with the specified path.</para>
		</summary>
		<param name="path">The physical path to the items that are removed from the cache.</param>
	</doc><doc for="HttpResponse.AddCacheItemDependency">
		<summary>
			<para>Makes the validity of a cached item dependent 
      on another item in the cache.</para>
		</summary>
		<param name="cacheKey">The key of the item that the cached response is dependent upon.</param>
		<remarks>
			<para>When the item corresponding to <paramref name="cacheKey"/> is 
   removed from the cache, the cached response of the current item is
   invalid.</para>
		</remarks>
	</doc><doc for="HttpResponse.AddCacheItemDependencies">
		<summary>
			<para>Makes the validity of a cached item dependent 
      on other items in the cache.</para>
		</summary>
		<param name="cacheKeys">The <see cref="System.Collections.ArrayList"/> containing the keys of the items the current cached response is dependent upon.</param>
		<remarks>
			<para>When the items referred to in <paramref name="cacheKeys"/> are removed 
   from the cache, the cached response of the current item is invalid.</para>
		</remarks>
	</doc><doc for="HttpResponse.Filter">
		<summary>
			<para>Gets or sets a wrapping filter object used to modify the HTTP entity body
      before transmission.</para>
		</summary>
		<value>
			<para>The <see cref="System.IO.Stream"/> object that acts as the output filter.</para>
		</value>
		<exception cref="System.Web.HttpException">Filtering is not allowed with the entity.</exception>
		<remarks>
			<para>When you create a <see langword="Stream "/>object and set the
<see langword="Response.Filter "/>property to the <see langword="Stream "/>object, 
   all HTTP output sent by <see langword="Response.Write "/>passes through the
   filter.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see langword="Stream "/>object named
<see langword="UpperCaseFilter "/>in the namespace 
<see langword="ResponseFilters"/>. The C# or Visual Basic file is compiled into a file named 
   ResponseFilters.dll. An ASP.NET page sets the <see langword="Response.Filter "/>property to the new object in order to change all text sent by the
   page through <see langword="Response.Write "/>to Upper case. </para>
			<codelink SampleID="Classic HttpResponse.Filter Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpResponse.CacheControl">
		<summary>
			<para>Sets the <see langword="Cache-Control "/>HTTP header to
<see langword="Public "/>or <see langword="Private"/>
.</para>
		</summary>
		<value>
			<para> "Public" or "Private".</para>
		</value>
		<exception cref="System.ArgumentException"><see langword="CacheControl"/>is an invalid cache control value (not <see langword="Private"/>or <see langword="Public"/> ).</exception>
		<remarks>
			<para>The values for <see langword="Private "/>and
<see langword="Public "/> are strings and must
   be enclosed in quotation marks (" ").</para>
The <see langword="CacheControl"/>
, <see cref="System.Web.HttpResponse.Expires"/>, and <see cref="System.Web.HttpResponse.ExpiresAbsolute"/> properties
have been deprecated in
favor of the methods of the <see cref="System.Web.HttpCachePolicy"/>class available through the <see cref="System.Web.HttpResponse.Cache"/>
intrinsic object to control the IIS output cache and client caches.
</remarks>
	</doc><doc for="HttpResponse.StatusCode">
		<summary>
			<para>Gets or sets
      the HTTP status code of the output returned to the
      client.</para>
		</summary>
		<value>
			<para>An Integer representing the status of
      the HTTP output
      returned to the client. The default value is 200 (OK).</para>
		</value>
		<exception cref="System.Web.HttpException"><see cref="System.Web.HttpResponse.StatusCode"/> is set after the HTTP headers have been sent.</exception>
		<example>
			<para> The following example takes action if the status code is not 200.</para>
			<codelink SampleID="Classic HttpResponse.StatusCode Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpResponse.End">
		<summary>
			<para> Sends all currently buffered output to the client,
      stops execution of the page, and raises the <see langword="Application_EndRequest "/>
      event.</para>
		</summary>
		<exception cref="ThreadAbortException">The call to <see cref="System.Web.HttpResponse.End"/> has terminated the current request.</exception>
		<remarks>
			<para>Calls to <see cref="System.Web.HttpResponse.End"/>, <see cref="System.Web.HttpResponse.Redirect"/>, and <see cref="System.Web.HttpServerUtility.Transfer"/> raise a ThreadAbortException when the current 
   response ends prematurely.</para>
		</remarks>
		<example>
			<para>The following example simply closes a connection.</para>
			<codelink SampleID="Classic HttpResponse.End Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Charset">
		<summary>
			<para>Gets or sets the HTTP character set of
      the output stream.</para>
		</summary>
		<value>
			<para>The HTTP character set of the output stream.</para>
		</value>
		<exception cref="System.Web.HttpException"><paramref name="Charset "/>was set after headers were sent.</exception>
		<remarks>
			<para><paramref name="Charset "/> can be set to <see langword="null "/>to suppress the HTTP Content-Type
   header.</para>
		</remarks>
		<example>
			<para> The following example takes action only if the character set of the output stream
      is Central European (ISO).</para>
			<codelink SampleID="Classic HttpResponse.Charset Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.RedirectLocation">
		<summary>
			<para> Gets or sets the value of the Http 
      Location header.</para>
		</summary>
		<value>
			<para>The absolute URI that is transmitted to the client in the HTTP Location 
      header.</para>
		</value>
	</doc>
	<doc for="HttpResponse.Redirect">
		<overload>
			<para>Redirects a client to a new URL.</para>
		</overload>
		<summary>
			<para>Redirects a client to a new URL and specifies the new URL.</para>
		</summary>
		<param name="url">The target location.</param>
		<exception cref="System.Web.HttpException">A redirection is attempted after the HTTP headers have been sent.</exception>
		<remarks>
			<para><see cref="System.Web.HttpResponse.Redirect"/> calls <see cref="System.Web.HttpResponse.End"/> which raises a <see cref="System.Threading.ThreadAbortException"/> 
exception upon completion.</para>
		</remarks>
		<example>
			<para>The following example forces an unconditional redirection to another Web site.</para>
			<codelink SampleID="Classic HttpResponse.Redirect Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.AppendHeader">
		<summary>
			<para>Adds an HTTP
      header to the output stream.</para>
		</summary>
		<param name="name">The name of the HTTP header to add to the output stream.</param>
		<param name="value">The string to append to the header.</param>
		<exception cref="System.Web.HttpException">The header is appended after the HTTP headers have been sent.</exception>
		<remarks>
			<para> If you use the <see cref="System.Web.HttpResponse.AppendHeader"/> method to send cache-specific headers and at the
   same time use the cache object model (<see cref="System.Web.HttpResponse.Cache"/> ) to set cache policy, HTTP response
   headers pertaining to caching (<see langword="Cache-Control"/>,
<see langword="Expires"/>, <see langword="Last-Modified"/>,
<see langword="Pragma"/>, and <see langword="Vary"/>)<see langword=" "/>might be deleted when the cache object model
   is used. This behavior enables ASP.NET to maintain the most restrictive
   settings. For example, consider a page that includes user controls. If those
   controls have conflicting cache policies, the most restrictive cache policy will
   be used. If one user control sets the header "<see langword="Cache-Control: Public"/>" and another sets the more restrictive header
   "<see langword="Cache-Control: Private"/>" via calls to <see cref="System.Web.HttpCachePolicy.SetCacheability"/>, then the "<see langword="Cache-Control: Private"/>
   "
   header will be sent with the response.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.HttpResponse">
		<internalonly/>
		<summary>
			<para>Initializes a new instance of the <see langword="HttpResponse"/> class.</para>
		</summary>
		<param name="writer">A <see langword="TextWriter"/> object enabling custom HTTP output.</param>
		<remarks>
			<para>This member supports the .NET Framework infrastructure and is not intended to 
      be used directly from your code.</para>
			<para>The methods and properties of the 
   <see langword="HttpResponse"/> class are exposed through ASP.NET's intrinsic 
   <see cref="System.Web.HttpContext.Response"/> object.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse">
		<summary>
			<para> Encapsulates HTTP response
      information from an ASP.NET operation .</para>
		</summary>
		<remarks>
			<para>The methods and properties of the <see langword="HttpResponse"/> class are exposed through the 
<see langword="Response"/> property of the <see cref="System.Web.HttpApplication"/>, 
<see cref="System.Web.HttpContext"/>, 
<see cref="System.Web.UI.Page"/>, 
   and <see cref="System.Web.UI.UserControl"/> classes.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.Cookies">
		<summary>
			<para> Gets the response cookie collection.</para>
		</summary>
		<value>
			<para>The response cookie collection.</para>
		</value>
		<remarks>
			<para>ASP.NET includes two intrinsic cookie collections. The 
      collection accessed through the <see cref="System.Web.HttpRequest.Cookies"/> collection of <see cref="System.Web.HttpRequest"/> contains
      cookies transmitted by the client to the server in the <see langword="Cookie"/>
      header. The collection accessed through the <see cref="System.Web.HttpResponse.Cookies"/> collection of <see cref="System.Web.HttpResponse"/>
      contains new cookies created on the server and transmitted to the client in the
   <see langword="Set-Cookie "/>header.</para>
		</remarks>
		<example>
			<para> The following example creates a new
      cookie named "LastVisit", sets the value of the cookie to the current date
      and time, and adds the cookie to the current cookie collection. All cookies
      in the cookie collection are sent to the client in the <see langword="Set-Cookie "/>
      header with the HTTP output stream.</para>
			<codelink SampleID="Classic HttpResponse.Cookies Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.ApplyAppPathModifier">
		<summary>
			<para>Adds a session ID to the virtual path if the session is 
      using cookieless session state and returns the combined path. If cookieless
      session state is not used, <see cref="System.Web.HttpResponse.ApplyAppPathModifier"/> returns the original
      virtual path.</para>
		</summary>
		<param name="virtualPath">The virtual path to a resource.</param>
		<returns>
			<para>The <paramref name="virtualPath"/> with the session ID inserted.</para>
		</returns>
		<remarks>
			<para><see langword="ApplyAppPathModifier"/>
is used only with cookieless sessions to
construct absolute HREFs.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.Write">
		<overload>
			<para>Writes information to an HTTP output content stream.</para>
		</overload>
		<summary>
			<para>Writes a string to an HTTP output content stream.</para>
		</summary>
		<param name="s">The string to write to the HTTP output stream.</param>
		<remarks>
			<para> Dynamically generated HTML pages can introduce security risks if input received from
      Web clients is not validated either when it is received from a client or
      when it is transmitted back to a client. Malicious script that
      is embedded in input submitted to a Web site and later written
      back out to a client can appear to be originating from a trusted
      source. This vulnerability is referred to as a cross-site scripting
      attack. You should always validate data that is received from a
      client when it will be transmitted from your site to client browsers.</para>
			<para>Moreover, whenever you write out as HTML any data that
      was received as input, you should encode it using a technique such
      as <see cref="System.Web.HttpServerUtility.HtmlEncode"/> or <see cref="System.Web.HttpServerUtility.UrlEncode"/>
      to
      prevent malicious script from executing. This technique is useful for data that
      was not validated when it was received.</para>
			<para>When you encode or filter data, you must specify a character set for your Web
      pages so that your filter can identify and remove any byte sequences that do not
      belong to that set (such as nonalphanumeric sequences) and could potentially
      have malicious script embedded in them. </para>
			<para>For more information about cross-site scripting attacks, see MSDN article
      Q252985 at http://msdn.microsoft.com.</para>
		</remarks>
		<example>
			<para>The following example echoes the client's name back to the client's
      browser. <see cref="System.Web.HttpServerUtility.HtmlEncode"/> strips any malicious script and
      invalid characters that may have been submitted in the UserName input field.</para>
			<codelink SampleID="System.Web.HttpResponse.Write" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpResponse.Redirect2">
		<summary>
			<para> Redirects a client to a new URL. Specifies the new URL
      and whether execution of the current page should terminate.</para>
		</summary>
		<param name="url">The target location.</param>
		<param name=" endResponse">Indicates whether execution of the current page should terminate. </param>
		<exception cref="HttpException">A redirection is attempted after the HTTP headers have been sent.</exception>
		<remarks>
			<para>An absolute URL (for example, http://www.contoso.com/default.aspx)
      or a relative URL (for example, default.aspx) can be specified for the
      target location but some browsers may reject a relative URL. </para>
			<para><see cref="System.Web.HttpResponse.Redirect"/> calls <see cref="System.Web.HttpResponse.End"/> which raises a
<see cref="System.Threading.ThreadAbortException"/>
exception upon completion.</para>
		</remarks>
	</doc>
	<doc for="HttpResponse.ContentEncoding">
		<summary>
			<para> Gets or sets the HTTP
      character set of the output stream.</para>
		</summary>
		<value>
			<para>A <see cref="System.Text.Encoding"/> object containing information about the character
   set of the current response.</para>
		</value>
		<exception cref="System.ArgumentException">Attempted to set <paramref name="ContentEncoding "/>to <see langword="null"/>.</exception>
		<remarks>
			<para>Default <see langword="ContentEncoding "/>can be specified in an ASP.NET 
   configuration file in the <see topic="gngrfGlobalizationSection"/> section. If <see langword="ContentEncoding "/>is specified by the client, the default configuration settings are
   overridden.</para>
		</remarks>
		<example>
			<para>The following example writes a human-readable description of the character
      set encoding to the output stream.</para>
			<codelink SampleID="Classic HttpResponse.ContentEncoding Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
