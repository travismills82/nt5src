<docs>
	<doc for="HttpApplicationState.Add">
		<summary>
			<para>Adds a new object to the <see cref="System.Web.HttpApplicationState"/>
 collection.</para>
		</summary>
		<param name="name">The name of the object to be added to the collection.</param>
		<param name=" value">The value of the object.</param>
		<example>
			<para>The following example adds two application variables named MyAppVar1 and 
       MyAppVar2 to the Application collection.</para>
			<codelink SampleID="Classic HttpApplicationState.Add Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.GetKey">
		<summary>
			<para> Gets an <see cref="System.Web.HttpApplicationState"/> object name by index.</para>
		</summary>
		<param name="index">The index of the application state object.</param>
		<returns>
			<para>The name under which the application state object was saved.</para>
		</returns>
		<example>
			<para>The following example returns the names of all the objects in the
      application state collection and stores the names in a string array.</para>
			<codelink SampleID="Classic HttpApplicationState.GetKey Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.this1">
		<summary>
			<para> Gets a single <see cref="System.Web.HttpApplicationState"/>
object by index.</para>
		</summary>
		<param name="index">The numerical index of the object in the collection.</param>
		<value>
			<para>The object referenced by <paramref name="index"/> .</para>
		</value>
		<example>
			<para>The following example returns the first object (index = 0) from
      the <see cref="System.Web.HttpApplicationState"/> collection of the intrinsic <see cref="System.Web.HttpContext.Application"/> object and copies it to a new object
      variable.</para>
			<codelink SampleID="Classic HttpApplicationState.this1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.AllKeys">
		<summary>
			<para> Gets the access keys in the <see cref="System.Web.HttpApplicationState"/>
collection.</para>
		</summary>
		<value>
			<para>A string array of <see cref="System.Web.HttpApplicationState"/> object names.</para>
		</value>
		<example>
			<para> The following example fills a string array with all the object names
      in the application state collection.</para>
			<codelink SampleID="Classic HttpApplicationState.AllKeys Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Get">
		<overload>
			<para> Gets an <see cref="System.Web.HttpApplicationState"/> object by name or index.</para>
		</overload>
		<summary>
			<para> Gets an <see cref="System.Web.HttpApplicationState"/> object by name.</para>
		</summary>
		<param name="name">The name of the object.</param>
		<returns>
			<para>The object referenced by <paramref name="name"/>.</para>
		</returns>
		<remarks>
			<para>The following example returns an object named
      MyAppVar1 from the <see cref="System.Web.HttpApplicationState"/> collection of the intrinsic <see cref="System.Web.HttpContext.Application"/> object and copies it to a new
      object variable.</para>
			<code lang="VB">Dim MyObject As Object
MyObject = Application.Get("MyAppVar1")
   </code>
			<code lang="C#">Object MyObject;
MyObject = Application.Get("MyAppVar1");
   </code>
		</remarks>
	</doc>
	<doc for="HttpApplicationState.this">
		<overload>
			<para> Gets access to an object in an <see cref="System.Web.HttpApplicationState"/> collection. This
   property is overloaded
   to allow access to an object by name or numerical index.</para>
		</overload>
		<summary>
			<para> Gets the value of a single <see cref="System.Web.HttpApplicationState"/> object by name.</para>
		</summary>
		<param name="name">The name of the object in the collection.</param>
		<value>
			<para>The object referenced by <paramref name="name"/>.</para>
		</value>
		<example>
			<para>The following example returns an object named
      MyAppVar1 from the <see cref="System.Web.HttpApplicationState"/> collection of the intrinsic <see cref="System.Web.HttpContext.Application"/> object and copies it to a new
      object variable.</para>
			<codelink SampleID="Classic HttpApplicationState.this Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Get1">
		<summary>
			<para> Gets an <see cref="System.Web.HttpApplicationState"/>
object by numerical index.</para>
		</summary>
		<param name="index">The index of the application state object.</param>
		<returns>
			<para> The object referenced by <paramref name="index"/> .</para>
		</returns>
		<example>
			<para>The following example returns the first object (index = 0) from the
   <see cref="System.Web.HttpApplicationState"/> collection of the intrinsic <see cref="System.Web.HttpContext.Application"/> object and copies it to a new object
      variable.</para>
			<codelink SampleID="Classic HttpApplicationState.Get1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Count">
		<summary>
			<para> Gets the number of objects in the <see cref="System.Web.HttpApplicationState"/>
collection.</para>
		</summary>
		<value>
			<para>The number of item objects in the collection. The default is 0.</para>
		</value>
		<example>
			<para>The following example executes only if the number of objects in the collection
      exceeds five.</para>
			<codelink SampleID="Classic HttpApplicationState.Count Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Set">
		<summary>
			<para>Updates the value of an object
      in an <see cref="System.Web.HttpApplicationState"/> collection.</para>
		</summary>
		<param name="name">The name of the object to be updated.</param>
		<param name=" value">The updated value of the object.</param>
		<example>
			<para>The following example updates the value of an existing application state 
      variable.</para>
			<codelink SampleID="Classic HttpApplicationState.Set Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Clear">
		<summary>
			<para>Removes all objects from an <see cref="System.Web.HttpApplicationState"/>
collection.</para>
		</summary>
		<example>
			<para>The following example removes all 
   <see langword="ApplicationState "/> variables from the
      collection.</para>
			<codelink SampleID="Classic HttpApplicationState.Clear Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.RemoveAll">
		<summary>
			<para>Removes all objects from an <see cref="System.Web.HttpApplicationState"/>
collection.</para>
		</summary>
		<remarks>
			<para>
				<see cref="System.Web.HttpApplicationState.RemoveAll"/> is an internal call to <see cref="System.Web.HttpApplicationState.Clear"/>.</para>
		</remarks>
		<example>
			<para>The following example removes all 
   <see langword="ApplicationState "/> variables from the
      collection.</para>
			<codelink SampleID="Classic HttpApplicationState.RemoveAll Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Contents">
		<summary>
			<para> Gets a reference to the <see cref="System.Web.HttpApplicationState"/> object.</para>
		</summary>
		<value>
			<para>A reference to the <see cref="System.Web.HttpApplicationState"/> object.</para>
		</value>
		<remarks>
			<para>This property provides compatibility with earlier versions of ASP.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.Web.HttpApplicationState"/> object that is used to access the object names in
   the application state collection.</para>
			<codelink SampleID="Classic HttpApplicationState.Contents Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.Lock">
		<summary>
			<para>Locks access to an <see cref="System.Web.HttpApplicationState"/>
variable to facilitate access
synchronization.</para>
		</summary>
		<example>
			<para>The following example uses <see langword="Lock() "/>and 
<see langword="UnLock() "/> to prevent other sessions from
   changing the value of two application variables until after the local
   session has changed them.</para>
			<codelink SampleID="Classic HttpApplicationState.Lock Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState.UnLock">
		<summary>
			<para>Unlocks access to an <see cref="System.Web.HttpApplicationState"/> variable to facilitate access
   synchronization.</para>
		</summary>
		<example>
			<para>The following example uses <see langword="Lock() "/>and 
<see langword="UnLock() "/> to prevent other sessions from
   changing the value of two application variables until after the local
   session has changed them.</para>
			<codelink SampleID="Classic HttpApplicationState.Lock Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpApplicationState">
		<summary>
			<para> Enables sharing of global information across multiple sessions
      and requests within an ASP.NET application.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>An ASP.NET application is the sum of all files, pages, handlers, modules, and
      code within the scope of a virtual directory and its subdirectories on a single
      Web server.</para>
			<para>A single instance of an <see cref="System.Web.HttpApplicationState"/>class is created the
   first time a client requests any URL resource from within a particular ASP.NET
   application virtual directory. A separate single instance is created for
   each ASP.NET application on a Web server. A reference to each
   instance is then exposed via the intrinsic <see cref="System.Web.HttpContext.Application"/>
   object.</para>
			<para>Application state is not shared across either a Web farm (in which an
   application is hosted across multiple servers) or a Web garden (in which an
   application is hosted across multiple processes on the same computer).</para>
		</remarks>
	</doc><doc for="HttpApplicationState.RemoveAt">
		<summary>
			<para>Removes an object from an <see cref="System.Web.HttpApplicationState"/> 
collection by index.</para>
		</summary>
		<param name="index">The position in the collection of the item to be removed.</param>
	</doc><doc for="HttpApplicationState.StaticObjects">
		<summary>
			<para>Gets all objects declared by an &lt;object&gt; tag where the scope is set to 
      "Application" within the ASP.NET application.</para>
		</summary>
		<value>
			<para>A collection of objects on the page.</para>
		</value>
		<remarks>
			<para>Application objects are defined in the Global.asax file inside the <c>&lt;object runat="server" 
      scope="Application"&gt; &lt;/object&gt;</c> tags.</para>
		</remarks>
		<example>
			<para> The following example gets all application objects into
      a <see cref="System.Web.HttpStaticObjectsCollection"/> variable and
      executes a routine only if the number of
      objects is greater than 0.</para>
			<codelink SampleID="Classic HttpApplicationState.StaticObjects Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpApplicationState.Remove">
		<summary>
			<para>Removes the named object from an <see cref="System.Web.HttpApplicationState"/>
collection.</para>
		</summary>
		<param name="name">The name of the object to be removed from the collection.</param>
		<example>
			<para>The following example removes one application 
      state<see langword=" "/> variable from the
      collection.</para>
			<codelink SampleID="Classic HttpApplicationState.Remove Example" SnippetID="1"/>
		</example>
	</doc></docs>
