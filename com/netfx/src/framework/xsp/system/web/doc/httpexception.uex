<docs>
	<doc for="HttpExceptionInfo">
	</doc>
	<doc for="HttpException">
		<summary>
			<para> Provides a means of generating HTTP exceptions.</para>
		</summary>
	</doc>
	<doc for="HttpException.HttpException1">
		<summary>
			<para> Constructs an <see cref="System.Exception"/> using a supplied error message.
   </para>
		</summary>
		<param name="message"> The message displayed to the client when the exception is thrown. </param>
		<example>
			<para> The following example throws an exception if a user-entered
      value is 0.</para>
			<codelink SampleID="Classic HttpException.HttpException1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpException.HttpException2">
		<summary>
			<para>Constructs an <see cref="System.Exception"/> using error message and an exception code.</para>
		</summary>
		<param name="message"> The error message displayed to the client when the exception is thrown. </param>
		<param name=" hr">The exception code that defines the error.</param>
		<example>
			<para> The following example throws an exception if a user-entered
      value is 0.</para>
			<codelink SampleID="Classic HttpException.HttpException2 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpException.HttpException5">
		<summary>
			<para>Constructs an <see cref="System.Exception"/> using
   an HTTP error code and an error message.</para>
		</summary>
		<param name="httpCode"> The HTTP error code displayed on the client. </param>
		<param name=" message">The message displayed to the client when the exception is thrown.</param>
	</doc>
	<doc for="HttpParseException.FileName">
		<summary>
			<para>Gets the name of the file being parsed when the error occurs.</para>
		</summary>
		<value>
			<para>The name of the source file being parsed when the error occurs.</para>
		</value>
	</doc>
	<doc for="HttpCompileException">
		<summary>
			<para>The exception that is thrown when a compiler error occurs.</para>
		</summary>
	</doc><doc for="HttpCompileException.Results">
		<summary>
			<para>Gets compiler output and error information for
 the exception. </para>
		</summary>
		<value>
			<para>A 
 <see cref="System.CodeDom.Compiler.CompilerResults"/> containing compiler output and
 error information. </para>
		</value>
	</doc><doc for="HttpParseException">
		<summary>
			<para>The exception that is thrown when a parse error occurs.</para>
		</summary>
	</doc><doc for="HttpCompileException.HttpCompileException">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.HttpCompileException"/> class.</para>
		</summary>
		<param name="results">A <see cref="System.CodeDom.Compiler.CompilerResults"/> containing compiler output and error information.</param>
		<param name=" sourceCode">The name of the file being compiled when the error occurs.</param>
	</doc><doc for="HttpParseException.Line">
		<summary>
			<para>Gets the number of the line being parsed when the error occurs.</para>
		</summary>
		<value>
			<para> The number of the line being parsed
      when the error occurs. </para>
		</value>
	</doc><doc for="HttpUnhandledException.HttpUnhandledException">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Web.HttpUnhandledException"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.HttpUnhandledException"/> class with the 
   specified error message and inner exception.</para>
		</summary>
		<param name="message">The message displayed to the client when the exception is thrown.</param>
		<param name=" innerException">The <see cref="System.Exception.InnerException"/>, if any, that threw the current exception.</param>
	</doc><doc for="HttpUnhandledException.HttpUnhandledException1">
		<summary>
			<para>Initializes a new instance of the <see langword="HttpUnhandledException"/> class with the 
   specified error messages and inner exception.</para>
		</summary>
		<param name=" message">The message displayed to the client when the exception is thrown.</param>
		<param name=" postMessage">An additional message displayed to the client when the exception is thrown.</param>
		<param name="innerException">The <see cref="System.Exception.InnerException"/>, if any, that threw the current exception.</param>
	</doc><doc for="HttpException.GetHtmlErrorMessage">
		<summary>
			<para>Returns the HTML error message to send back to the
      client.</para>
		</summary>
		<returns>
			<para>The HTML error message.</para>
		</returns>
	</doc><doc for="HttpUnhandledException">
		<nodoc/>
		<summary>
			<para> The exception that is thrown when a generic exception occurs.</para>
		</summary>
	</doc><doc for="HttpCompileException.SourceCode">
		<summary>
			<para>Gets a string containing the
      source code being compiled when the error occurs. </para>
		</summary>
		<value>
			<para> The source code being compiled when the error
      occurs.</para>
		</value>
	</doc><doc for="HttpException.CreateFromLastError">
		<summary>
			<para>Creates a new <see cref="System.Exception"/> based on the error code returned from the Win32 API 
<see langword="GetLastError()"/> method. </para>
		</summary>
		<param name="message">The message to be displayed to the client when the exception is thrown. </param>
		<returns>
			<para>An <see langword="Exception"/> based 
   on the error code that is returned from a
   call to the Win32 API <see langword="GetLastError()"/> method.</para>
		</returns>
	</doc><doc for="HttpException.GetHttpCode">
		<summary>
			<para>Returns the HTTP error code to send back to the client.
      If there is a nonzero HTTP code, it is returned. Otherwise, the <see cref="System.Exception.InnerException"/>
      code is returned. If neither an <see cref="System.Exception.InnerException"/> code nor a
      nonzero HTTP code is available,
      
      the HTTP error code 500 is returned.</para>
		</summary>
		<returns>
			<para>The HTTP code representing the exception.</para>
		</returns>
	</doc>
	<doc for="HttpRequestValidationException">
		<summary>
			<para>The exception that is thrown when a potentially 
      dangerous input string is received from the client.</para>
		</summary>
	</doc>
	<doc for="HttpException.HttpException6">
		<summary>
			<para> Constructs an <see cref="System.Exception"/> using HTTP error code, an error message, and an exception
   code.</para>
		</summary>
		<param name="httpCode">The HTTP error code displayed on the client.</param>
		<param name=" message">The error message displayed to the client. </param>
		<param name=" hr">The error code that defines the error.</param>
		<example>
			<codelink SampleID="HttpException_Constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpException.HttpException">
		<overload>
			<para>Constructs a new <see cref="System.Exception"/> object.</para>
		</overload>
		<summary>
			<para>Constructs an empty <see cref="System.Exception"/> object.</para>
		</summary>
		<remarks>
			<para>When handling exceptions, it is sometimes useful to capture a series of
      related exceptions with the outer exceptions being thrown in response to an
      inner exceptions.</para>
			<para>A reference to the inner exceptions that cause the outer exceptions is
      available from the InnerException property of the outer exception. This
      mechanism preserves the error information carried by earlier exceptions,
      including the original exceptions, while allowing you to create more meaningful
      outer exceptions. For more information, see <see cref="System.Exception.InnerException"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="HttpException_Constructor1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpException.HttpException3">
		<summary>
			<para>Constructs an <see cref="System.Exception"/> using an error message and the
<see cref="System.Exception.InnerException"/> property.</para>
		</summary>
		<param name="message">The message displayed to the client when the exception is thrown. </param>
		<param name=" innerException">The <see cref="System.Exception.InnerException"/>, if any, that threw the current exception.</param>
		<remarks>
			<para>When handling exceptions, it is sometimes useful to capture a series of
      related exceptions with the outer exceptions being thrown in response to an
      inner exception.</para>
   A reference to the inner exceptions that
   causes the outer exceptions is available from the
<see cref="System.Exception.InnerException"/> property of the outer exception. This
   mechanism preserves the error information carried by earlier exceptions,
   including the original exceptions, while allowing you to create more meaningful
   outer exceptions. For more information, see <see cref="System.Exception.InnerException"/>.
</remarks>
		<example>
			<codelink SampleID="HttpException_Constructor2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpException.HttpException4">
		<summary>
			<para>Constructs an <see cref="System.Exception"/> using an HTTP error code, an error message,
   and the <see cref="System.Exception.InnerException"/>
   property.
   </para>
		</summary>
		<param name="httpCode">The HTTP error code displayed to the client. </param>
		<param name=" message">The message displayed to the client. </param>
		<param name=" innerException">The <see cref="System.Exception.InnerException"/> , if any, that threw the current exception.</param>
		<remarks>
			<para>When handling exceptions, it is sometimes useful to capture a series of
      related exceptions with the outer exceptions being thrown in response to an
      inner exceptions.</para>
   A reference to the inner exceptions that
   causes the outer exceptions is available from the <see cref="System.Exception.InnerException"/>
   
   property of the outer exception. This
   mechanism preserves the error information carried by earlier exceptions,
   including the original exceptions, while allowing you to create more meaningful
   outer exceptions. For more information, see <see cref="System.Exception.InnerException"/>.
</remarks>
		<example>
			<codelink SampleID="HttpException_Constructor3" SnippetID="1"/>
		</example>
	</doc>
</docs>
