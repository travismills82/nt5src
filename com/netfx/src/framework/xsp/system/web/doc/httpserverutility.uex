<docs>
	<doc for="HttpServerUtility">
		<summary>
			<para> 
      Provides helper methods for processing Web requests.</para>
		</summary>
		<remarks>
			<para>The methods and properties of the <see cref="System.Web.HttpServerUtility"/> class are exposed
   through ASP.NET's intrinsic <see cref="System.Web.HttpContext.Server"/> object.</para>
		</remarks>
	</doc>
	<doc for="HttpServerUtility.CreateObjectFromClsid">
		<summary>
			<para> Creates a server instance of a COM object identified by the object's class identifier (CLSID).</para>
		</summary>
		<param name="clsid">The class identifier of the object to be instantiated.</param>
		<returns>
			<para> The new object.</para>
		</returns>
		<exception cref="HttpException">The object could not be instantiated.</exception>
		<example>
			<codelink SampleID="Classic HttpServerUtility.CreateObjectFromClsid Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.GetLastError">
		<summary>
			<para> Returns the previous exception.</para>
		</summary>
		<returns>
			<para>The previous exception that was thrown.</para>
		</returns>
		<example>
			<para> The following example prints a description of the
      application's last error to the HTTP output stream. It prints "No Errors" if no errors have
      been encountered.</para>
			<codelink SampleID="Classic HttpServerUtility.GetLastError Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.ClearError">
		<summary>
			<para>Clears the previous exception.</para>
		</summary>
		<example>
			<para>The following example clears the last exception that was thrown.</para>
			<codelink SampleID="Classic HttpServerUtility.ClearError Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.ScriptTimeout">
		<summary>
			<para>Gets and sets the request time-out in seconds.</para>
		</summary>
		<value>
			<para>The time-out setting for requests.</para>
		</value>
		<exception cref="HttpException">The time-out period is <see langword="null"/> or otherwise could not be set.</exception>
		<example>
			<para> The following example sets the request time-out
      period to 60 seconds.</para>
			<codelink SampleID="Classic HttpServerUtility.ScriptTimeout Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpUtility">
		<summary>
			<para>Provides methods for encoding and decoding URLs when processing Web
 requests.</para>
		</summary>
	</doc><doc for="HttpUtility.UrlDecode">
		<overload>
			<para>Converts a string that has been encoded for
      transmission in a URL into a decoded string.</para>
		</overload>
		<summary>
			<para>Converts a string that has been encoded for
      transmission in a URL into a decoded string.</para>
		</summary>
		<param name="str">The string to decode.</param>
		<returns>
			<para>The decoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation
      are passed in an HTTP stream, they might be misinterpreted at the receiving end.
      URL encoding converts characters that are not allowed in a URL into
      character-entity equivalents; URL decoding reverses the encoding. For example, when embedded in
      a block of text to be transmitted in a URL, the characters &lt; and
      &gt; are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncode"/>
	</doc><doc for="HttpUtility.UrlEncode">
		<overload>
			<para> Encodes a URL string for reliable HTTP transmission from the Web
      server to a client.</para>
		</overload>
		<summary>
			<para> Encodes a URL string for reliable HTTP
      transmission from the Web server to a client.</para>
		</summary>
		<param name="str">The text to encode.</param>
		<returns>
			<para>The encoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an HTTP
      stream, they might be misinterpreted at the receiving end. URL encoding
      converts characters that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a block of text to
      be transmitted in a URL, the characters &lt; and &gt; are encoded as %3c and
      %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecode"/>
	</doc><doc for="HttpUtility.UrlEncode2">
		<summary>
			<para>Converts a byte array into an encoded
      URL string for reliable HTTP transmission from the Web server to a client.</para>
		</summary>
		<param name="bytes">The byte array to encode.</param>
		<returns>
			<para>The encoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in
      an HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts
      characters that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecode"/>
	</doc><doc for="HttpUtility.UrlEncodeToBytes2">
		<summary>
			<para>Converts an array of bytes into a
      URL-encoded array of bytes.</para>
		</summary>
		<param name="bytes">The array of bytes to encode.</param>
		<returns>
			<para>The encoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecodeToBytes"/>
	</doc><doc for="HttpUtility.UrlDecodeToBytes">
		<overload>
			<para>Converts a URL-encoded string or byte array into a decoded array
      of bytes.</para>
		</overload>
		<summary>
			<para>Converts a URL-encoded string into a decoded array of
      bytes .</para>
		</summary>
		<param name="str">The string to decode.</param>
		<returns>
			<para>The decoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncodeToBytes"/>
	</doc><doc for="HttpUtility.UrlDecodeToBytes2">
		<summary>
			<para>Converts a URL-encoded array of bytes into a decoded array of bytes.</para>
		</summary>
		<param name="bytes">The array of bytes to decode.</param>
		<returns>
			<para>The decoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncodeToBytes"/>
	</doc><doc for="HttpUtility.UrlDecodeToBytes3">
		<summary>
			<para> Converts a URL-encoded array of bytes into a
      decoded array of bytes, starting at the specified position in the
      array and continuing for the specified number of bytes.</para>
		</summary>
		<param name="bytes">The array of bytes to decode.</param>
		<param name=" offset">The position in the byte array to begin decoding.</param>
		<param name=" count">The number of bytes to decode, starting at <paramref name="offset"/>.</param>
		<returns>
			<para>The decoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncodeToBytes"/>
	</doc><doc for="HttpUtility.UrlEncode3">
		<summary>
			<para> Converts a byte array into a URL-encoded string for
      reliable HTTP transmission from the Web server to a client, starting at the
      specified position in the array and continuing for the specified number of bytes.</para>
		</summary>
		<param name="bytes">The byte array to encode.</param>
		<param name=" offset">The position in the byte array to begin encoding.</param>
		<param name=" count">The number of bytes to encode, starting at <paramref name="offset"/>.</param>
		<returns>
			<para>The encoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecode"/>
	</doc><doc for="HttpUtility.UrlEncodeToBytes">
		<overload>
			<para>Converts a string or a byte array into an encoded
      array of bytes for reliable HTTP transmission from the Web server to a
      client.</para>
		</overload>
		<summary>
			<para>Converts a string into a URL-encoded array of bytes .</para>
		</summary>
		<param name="str">The string to encode.</param>
		<returns>
			<para>The encoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecodeToBytes"/>
	</doc><doc for="HttpUtility.UrlEncodeToBytes3">
		<summary>
			<para>Converts an array of bytes into a
      URL-encoded array of bytes, starting at the specified position in the
      array and continuing for the specified number of bytes.</para>
		</summary>
		<param name="bytes">The array of bytes to encode.</param>
		<param name=" offset">The position in the byte array to begin encoding.</param>
		<param name=" count">The number of bytes to encode, starting at <paramref name="offset"/>.</param>
		<returns>
			<para>The encoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecodeToBytes"/>
	</doc><doc for="HttpUtility.HtmlDecode1">
		<summary>
			<para>Converts a string that has been HTML-encoded into a
      decoded string, and sends the decoded string to a <see cref="System.IO.TextWriter"/> output stream.</para>
		</summary>
		<param name=" s">The string to decode.</param>
		<param name="output">A <see cref="System.IO.TextWriter"/> stream of output.</param>
		<remarks>
			<para> If characters such
      as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted
      at the receiving end. HTML encoding converts characters that are not allowed in
      HTML into character-entity equivalents; HTML decoding reverses the encoding. For
      example, when embedded in a block of text, the characters &lt; and &gt;, are
      encoded as &amp;lt and &amp;gt for HTTP transmission.</para>
		</remarks>
	</doc><doc for="HttpUtility.HtmlAttributeEncode">
		<overload>
			<para> Minimally converts a string into an HTML-encoded string.</para>
		</overload>
		<summary>
			<para> Minimally converts a string to an HTML-encoded string.
      </para>
		</summary>
		<param name="s">The string to encode. </param>
		<returns>
			<para> The encoded string.
      </para>
		</returns>
		<remarks>
			<para><see langword="HtmlAttributeEncode"/> converts only quotes (") and ampersands
   (&amp;) to equivalent character entities. It is considerably faster than
   the <see cref="System.Web.HttpUtility.HtmlEncode"/> methods.</para>
		</remarks>
	</doc><doc for="HttpUtility.HtmlAttributeEncode1">
		<summary>
			<para> Minimally converts a string into an HTML-encoded string and sends
      the encoded string to a <see cref="System.IO.TextWriter"/>
      output
      stream.
      </para>
		</summary>
		<param name="s">The string to encode </param>
		<param name=" output">A <see cref="System.IO.TextWriter"/> output stream. </param>
		<remarks>
			<para><see langword="HtmlAttributeEncode"/> converts only
   quotes (") and ampersands (&amp;) to equivalent character entities. It is
   considerably faster than the <see cref="System.Web.HttpUtility.HtmlEncode"/>
   methods.</para>
		</remarks>
	</doc><doc for="HttpServerUtility.CreateObject">
		<overload>
			<para>Creates a server instance of a COM object.</para>
		</overload>
		<summary>
			<para> Creates a server instance of a COM object identified by the object's Programmatic Identifier (ProgID).</para>
		</summary>
		<param name="progID">The class or type of object to be instantiated.</param>
		<returns>
			<para> The new object.</para>
		</returns>
		<exception cref="HttpException">The object could not be instantiated.</exception>
		<example>
			<para>The following example creates an object using the object's ProgID.</para>
			<codelink SampleID="Classic HttpServerUtility.CreateObject Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpServerUtility.MachineName">
		<summary>
			<para>Gets
      the server's computer name.</para>
		</summary>
		<value>
			<para>The name of the local computer.</para>
		</value>
		<exception cref="HttpException">The computer name cannot be found.</exception>
		<permission cref="System.Security.Permissions.EnvironmentPermission">for full access to the resource protected by the permission. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<para> The following example stores the server's computer name as
      a string variable.</para>
			<codelink SampleID="Classic HttpServerUtility.MachineName Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpServerUtility.CreateObject1">
		<summary>
			<para>Creates a server instance of a COM object identified by
      the object's type.</para>
		</summary>
		<param name="type">A <see cref="System.Type"/> representing the object to create.</param>
		<returns>
			<para>The new object.</para>
		</returns>
	</doc><doc for="HttpUtility.HtmlDecode">
		<overload>
			<para>Converts a string that has been HTML-encoded for HTTP transmission into a decoded
      string.</para>
		</overload>
		<summary>
			<para>Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.</para>
		</summary>
		<param name="s">The string to decode.</param>
		<returns>
			<para> The decoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as
      blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at
      the receiving end. HTML encoding converts characters that are not allowed in
      HTML into character-entity equivalents; HTML decoding reverses the encoding. For
      example, when embedded in a block of text, the characters &lt; and &gt;, are
      encoded as &amp;lt and &amp;gt for HTTP transmission.</para>
		</remarks>
		<example>
			<para> The following example demonstrates the <see cref="System.Web.HttpUtility.HtmlEncode"/> and <see cref="System.Web.HttpUtility.HtmlDecode"/> methods of the HttpUtility class. The input string 
   is taken from user and encoded using the <see langword="HtmlEncode"/> method.The
   encoded string thus obtained is then decoded using the
<see langword="HtmlDecode"/> 

method.</para>
			<codelink SampleID="HttpUtility_HtmlDecode" SnippetID="1"/>
		</example>
	</doc><doc for="HttpServerUtility.Execute">
		<overload>
			<para>Executes the current request using another page.</para>
		</overload>
		<summary>
			<para> Executes the current request using another page at the specified
      URL path.</para>
		</summary>
		<param name="path">The URL path of the new page.</param>
		<exception cref="HttpException">Current Context is <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
		<exception cref="ArgumentNullException"><paramref name="path"/> is <see langword="null"/> (<see langword="Nothing"/> in Visual Basic).</exception>
		<remarks>
			<para>The <see cref="System.Web.HttpServerUtility.Execute"/> method continues execution of the
   original page after execution of the new page is completed. The <see cref="System.Web.HttpServerUtility.Transfer"/> method unconditionally transfers
   execution to another page.</para>
		</remarks>
		<example>
			<para>The following example displays an informational page.
      Control will return to the original page after updateinfo.aspx is displayed.</para>
			<codelink SampleID="Classic HttpServerUtility.Execute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.Execute1">
		<summary>
			<para>Executes the current request using
      another page at the specified URL. A <see cref="System.IO.TextWriter"/> captures output from
      the page.</para>
		</summary>
		<param name="path">The URL path of the new page.</param>
		<param name="writer">The <see cref="System.IO.TextWriter"/>to capture the output.</param>
		<exception cref="HttpException">The child process could not be executed.</exception>
		<remarks>
			<para>The <see cref="System.Web.HttpServerUtility.Execute"/> method continues execution of the
   original page after execution of the new page is completed. The <see cref="System.Web.HttpServerUtility.Transfer"/> method unconditionally transfers
   execution to another page.</para>
		</remarks>
		<example>
			<para>The following example executes the aspx page
      "Login.aspx" on the server in the current directory and receives the output from
      the page through the <see cref="System.IO.StringWriter"/> object <see langword="writer"/>.
      It writes the HTML stream received from <see langword="writer"/>
      to the HTTP output stream.</para>
			<codelink SampleID="Classic HttpServerUtility.Execute1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpUtility.UrlEncode1">
		<summary>
			<para>Encodes a URL string for reliable HTTP transmission from the Web server
      to a client, using the specified encoding object.</para>
		</summary>
		<param name="str">The text to encode.</param>
		<param name=" e">The <see cref="System.Text.Encoding"/> object that specifies the encoding scheme.</param>
		<returns>
			<para>The encoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecode"/>
	</doc>
	<doc for="HttpUtility.UrlEncodeToBytes1">
		<summary>
			<para>Converts a string into a URL-encoded array of bytes, using the specified encoding object.</para>
		</summary>
		<param name="str">The string to encode</param>
		<param name=" e">The <see cref="System.Text.Encoding"/> that specifies the encoding scheme.</param>
		<returns>
			<para> The encoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlDecodeToBytes"/>
	</doc>
	<doc for="HttpUtility.UrlDecode1">
		<summary>
			<para>Converts a URL-encoded string into a decoded string,
      using the specified encoding object.</para>
		</summary>
		<param name="str">The string to decode.</param>
		<param name=" e">The <see cref="System.Text.Encoding"/> that specifies the decoding scheme.</param>
		<returns>
			<para>The decoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncode"/>
	</doc>
	<doc for="HttpUtility.UrlDecode2">
		<summary>
			<para>Converts a URL-encoded byte array into a decoded
      string, using the specified decoding object.</para>
		</summary>
		<param name="bytes">The byte array to decode.</param>
		<param name=" e">The <see cref="System.Text.Encoding"/> that specifies the decoding scheme.</param>
		<returns>
			<para>The decoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in
      an HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts
      characters that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncode"/>
	</doc>
	<doc for="HttpUtility.UrlDecode3">
		<summary>
			<para> Converts a URL-encoded byte array into a decoded
      string, using the specified encoding object, starting at the specified position
      in the array, and continuing for the specified number of bytes.</para>
		</summary>
		<param name="bytes">The array of bytes to decode.</param>
		<param name=" offset">The position in the byte to begin decoding.</param>
		<param name=" count">The number of bytes to decode starting at <paramref name="offset"/>.</param>
		<param name=" e">The <see cref="System.Text.Encoding"/> object that specifies the decoding scheme.</param>
		<returns>
			<para> The decoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncode"/>
	</doc>
	<doc for="HttpUtility.UrlDecodeToBytes1">
		<summary>
			<para>Converts a URL-encoded string into a decoded array of
      bytes, using the specified decoding object.</para>
		</summary>
		<param name="str">The string to decode.</param>
		<param name=" e">The <see cref="System.Text.Encoding"/> object that specifies the decoding scheme.</param>
		<returns>
			<para>The decoded array of bytes.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not allowed in a URL into character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
		<seealso cref="System.Web.HttpUtility.UrlEncodeToBytes"/>
	</doc>
	<doc for="HttpUtility.UrlEncodeUnicode">
		<summary>
			<para>Converts a string into a Unicode string.</para>
		</summary>
		<param name="str">The string to convert.</param>
		<returns>
			<para>The Unicode string in %XXXX notation.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not valid in a URL to character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
	</doc>
	<doc for="HttpUtility.UrlEncodeUnicodeToBytes">
		<summary>
			<para>Converts a Unicode string into an array of bytes.</para>
		</summary>
		<param name="str">The string to convert.</param>
		<returns>
			<para> The byte array.</para>
		</returns>
		<remarks>
			<para> If characters such as blanks and punctuation are passed in an
      HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters
      that are not valid in a URL to character-entity equivalents; URL
      decoding reverses the encoding. For example, when embedded in a
      block of text to be transmitted in a URL, the characters &lt; and &gt;
      are encoded as %3c and %3d.</para>
		</remarks>
	</doc>
	<doc for="HttpServerUtility.Transfer1">
		<summary>
			<para>For the current request, terminates execution of the current page and begins
      execution of a new page using the specified
      URL path to the page.</para>
		</summary>
		<param name="path">The URL path of the new page on the server to execute.</param>
		<remarks>
			<para>The page transferred to should be another .aspx page. For instance, a 
      transfer to an .asp or .asmx page is not valid.</para>
			<para><see cref="System.Web.HttpServerUtility.Transfer"/>calls <see cref="System.Web.HttpResponse.End"/>
which raises a <see cref="System.Threading.ThreadAbortException"/> exception upon
completion.</para>
		</remarks>
	</doc>
	<doc for="HttpServerUtility.MapPath">
		<summary>
			<para>Returns the physical file path that corresponds to the specified virtual path on the Web server.</para>
		</summary>
		<param name="path">The virtual path on the Web server.</param>
		<returns>
			<para>The physical file path that corresponds to <paramref name="path"/>.</para>
		</returns>
		<exception cref="HttpException">The <see langword="Server"/> object is not available.</exception>
		<remarks>
			<para>If <paramref name="path"/> is <see langword="NULL"/>, <see langword="MapPath"/> returns
   the full physical path to the directory containing the current
   application.</para>
		</remarks>
		<example>
			<para> The following page example returns the physical path of 
      the virtual directory that contains the specified Web site. To read
   <see langword="MapPath"/> in a code-behind module, use <c>HttpContext.Current.Server.MapPath</c> 
   .</para>
			<codelink SampleID="Classic HttpServerUtility.MapPath Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpUtility.HtmlEncode">
		<overload>
			<para>Converts a string into an HTML-encoded string for reliable HTTP
      transmission from the Web server to a client.</para>
		</overload>
		<summary>
			<para>Converts a string to an HTML-encoded string for reliable
      HTTP transmission from the Web server to a client.</para>
		</summary>
		<param name="s">The string to encode.</param>
		<returns>
			<para> The encoded string.</para>
		</returns>
		<remarks>
			<para> If characters such as
      blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at
      the receiving end. HTML encoding converts characters that are not allowed
      in HTML into character-entity equivalents; HTML decoding reverses the encoding.
      For example, when embedded in a block of text, the characters &lt; and &gt;,
      are encoded as &amp;lt and &amp;gt for HTTP transmission.</para>
		</remarks>
	</doc>
	<doc for="HttpUtility.HtmlEncode1">
		<summary>
			<para>Converts a string into an HTML-encoded string, and returns the output as a TextWriter stream of
      output.</para>
		</summary>
		<param name="s">The string to encode</param>
		<param name=" output">A <see cref="System.IO.TextWriter"/> output stream.</param>
		<remarks>
			<para> If characters such as blanks
      and punctuation are passed in an HTTP stream, they might be misinterpreted at the
      receiving end. HTML encoding converts characters that are not allowed in
      HTML into character-entity equivalents; HTML decoding reverses the encoding. For
      example, when embedded in a block of text, the characters &lt; and &gt;, are
      encoded as &amp;lt and &amp;gt for HTTP transmission.</para>
		</remarks>
	</doc>
	<doc for="HttpServerUtility.HtmlEncode1">
		<summary>
			<para> HTML-encodes a string and sends the resulting output to
      a <see cref="System.IO.TextWriter"/>
      output stream.</para>
		</summary>
		<param name="s">The string to encode.</param>
		<param name=" output">The <see cref="System.IO.TextWriter"/> output stream containing the encoded string.</param>
		<remarks>
			<para> HTML encoding ensures that text will be correctly
      displayed in the browser, not interpreted by the browser as HTML. For example, if
      a text string contains &lt; or &gt; characters, the browser would
      interpret these characters as part of HTML tags. The HTML
      encoding of these two characters is &amp;lt and &amp;gt, respectively, which causes the browser
      to display the angle brackets correctly.</para>
		</remarks>
		<example>
			<para> The following example encodes a string for transmission by HTTP. It
      encodes the string named TestString, which contains the text "This is a
      &lt;Test String&gt;.", and copies it into the string named EncodedString as
      "This+is+a+%3cTest+String%3e.".</para>
			<codelink SampleID="Classic HttpServerUtility.HtmlEncode1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.HtmlDecode">
		<overload>
			<para> Decodes a string that has been encoded to eliminate
      invalid HTML characters.</para>
		</overload>
		<summary>
			<para> Decodes an HTML-encoded string and
      returns the decoded string.</para>
		</summary>
		<param name="s">The HTML string to decode.</param>
		<returns>
			<para> The decoded text.</para>
		</returns>
		<remarks>
			<para> URL encoding ensures that all browsers will correctly transmit text
      in URL strings. Characters such as ?, &amp;, /, and spaces
      may be truncated or corrupted by some browsers so those
      characters cannot must be encoded in &lt;A&gt; tags or in query strings where the strings may be
      re-sent by a browser in a request string.</para>
			<para><see cref="System.Web.HttpServerUtility.HtmlDecode"/><see langword=" "/> decodes text that has been transmitted to the
   server.</para>
		</remarks>
		<example>
			<para>The following example contains the function
   <see langword="LoadDecodedFile "/>
   which decodes the data from a file and copies it into one
   string.</para>
			<codelink SampleID="Classic HttpServerUtility.HtmlDecode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.HtmlDecode1">
		<summary>
			<para> Decodes an HTML-encoded string and sends the resulting
      output to a <see cref="System.IO.TextWriter"/>
      output
      stream.</para>
		</summary>
		<param name="s">The HTML string to decode.</param>
		<param name=" output">The <see cref="System.IO.TextWriter"/> output stream containing the decoded string.</param>
		<remarks>
			<para> URL encoding ensures that all browsers
      will correctly transmit text in URL strings. Characters such as ?, &amp;,
      /, and spaces may be truncated or corrupted by some browsers so those characters
      must be encoded in &lt;A&gt; tags or in query strings where the strings
      may be re-sent by a browser in a request string.</para>
			<see cref="System.Web.HttpServerUtility.HtmlDecode"/> decodes text that has been transmitted to the
   server.
</remarks>
		<example>
			<para>The following example decodes a string that has been HTML-encoded for transmission over HTTP. It decodes the supplied
      string named EncodedString which contains the text "This is a &amp;ltTest
      String&amp;gt.", and copies it into the string named DecodedString as "This is
      a &lt;Test String&gt;."</para>
			<codelink SampleID="Classic HttpServerUtility.HtmlDecode1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.HtmlEncode">
		<overload>
			<para> Encodes a string to be displayed in a browser.</para>
		</overload>
		<summary>
			<para> HTML-encodes a string and
      returns the encoded string.</para>
		</summary>
		<param name="s">The text string to encode.</param>
		<returns>
			<para> The HTML-encoded text.</para>
		</returns>
		<remarks>
			<para> URL encoding ensures that all browsers will correctly transmit text in
      URL strings. Characters such as ?, &amp;, /, and spaces may be
      truncated or corrupted by some browsers so those characters must be encoded in &lt;A&gt; tags or
      in query strings where the strings may be re-sent by a
      browser in a request string.</para>
		</remarks>
		<example>
			<para>The following example encodes a string for transmission
      by HTTP. It encodes the string named TestString, which contains the text "This is a &lt;Test String&gt;.", and copies it into the
      string named EncodedString as "This+is+a+%3cTest+String%3e.".</para>
			<codelink SampleID="Classic HttpServerUtility.HtmlEncode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.UrlEncode">
		<overload>
			<para> Encodes a string for reliable HTTP transmission from the
      Web server to a client via the URL.</para>
		</overload>
		<summary>
			<para> URL-encodes a
      string and returns the encoded string.</para>
		</summary>
		<param name="s">The text to URL-encode.</param>
		<returns>
			<para>The URL encoded text.</para>
		</returns>
		<remarks>
			<para> URL encoding ensures
      that all browsers will correctly transmit text in URL strings. Characters such as ?,
      &amp;, /, and spaces may be truncated or corrupted by some
      browsers so those characters cannot be used in ASP.NET pages
      in &lt;A&gt; tags or in query strings where the strings may be re-sent by
      a browser in a request string.</para>
		</remarks>
		<example>
			<para>The following example URL-encodes a string before
      sending it to a browser client. In this example, the string MyURL
      will be encoded as "http%3a%2f%2fwww.contoso.com%2farticles.aspx%3ftitle+%3d+ASP.NET+Examples".</para>
			<codelink SampleID="Classic HttpServerUtility.UrlEncode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.UrlPathEncode">
		<overload>
			<para> Encodes the path portion of a URL
      string for reliable HTTP transmission from the Web server to a client.</para>
		</overload>
		<summary>
			<para> URL-encodes the path portion of a URL string and returns the encoded string.</para>
		</summary>
		<param name="s">The text to URL-encode.</param>
		<returns>
			<para>The URL encoded text.</para>
		</returns>
		<remarks>
			<para> URL encoding ensures that all browsers will correctly transmit text in URL strings.
      Characters such as ?, &amp;, /, and spaces may be truncated
      or corrupted by some browsers so those characters must be encoded
      in &lt;A&gt; tags or in query strings where the strings may be re-sent by
      a browser in a request string.</para>
		</remarks>
		<example>
			<para>The following example URL-encodes a string before
      sending it to a browser client. In this example, the string MyURL will be
      encoded as "http%3a%2f%2fwww.contoso.com%2farticles.aspx?title =
      ASP.NET Examples".</para>
			<codelink SampleID="Classic HttpServerUtility.UrlPathEncode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.UrlEncode1">
		<summary>
			<para> URL encodes
      a string and sends the resulting output to a TextWriter output stream.</para>
		</summary>
		<param name="s">The text string to encode.</param>
		<param name=" output">The <see cref="System.IO.TextWriter"/> output stream containing the encoded string. </param>
		<remarks>
			<para> URL encoding ensures that all browsers
      will correctly transmit text in URL strings. Characters such as ?, &amp;, /,
      and spaces may be truncated or corrupted by some browsers so those must
      be encoded in &lt;A&gt; tags or in query strings where the strings may be re-sent by
      a browser in a request string.</para>
		</remarks>
		<example>
			<para> The following example encodes
      a string for transmission by HTTP. It encodes the string named TestString, which contains the text "This is
      a &lt;Test String&gt;.", and copies it into the string named EncodedString as
      "This+is+a+%3cTest+String%3e.".</para>
			<codelink SampleID="Classic HttpServerUtility.UrlEncode1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.UrlDecode">
		<overload>
			<para>Decodes a string encoded for HTTP transmission and sent to the server in a URL.</para>
		</overload>
		<summary>
			<para> URL-decodes a string and returns the decoded string.</para>
		</summary>
		<param name="s">The text string to decode.</param>
		<returns>
			<para> The decoded
      text.</para>
		</returns>
		<remarks>
			<para> URL encoding ensures
      that all browsers will correctly transmit text in URL strings. Characters such
      as ?, &amp;, /, and spaces may be truncated or corrupted by some
      browsers so those characters must be encoded in &lt;A&gt; tags or in query strings where the
      strings may be re-sent by a browser in a request string.</para>
		</remarks>
		<example>
			<para>The following example decodes the string named EncodedString (received in a URL)
      into the string named DecodedString.</para>
			<codelink SampleID="Classic HttpServerUtility.UrlDecode Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpServerUtility.UrlDecode1">
		<summary>
			<para> Decodes an HTML string received
      in a URL and sends the resulting output to a
   <see cref="System.IO.TextWriter"/> output
      stream.</para>
		</summary>
		<param name="s">The HTML string to decode.</param>
		<param name=" output">The <see cref="System.IO.TextWriter"/> output stream containing the decoded string. </param>
		<remarks>
			<para> URL encoding ensures that all browsers will correctly transmit text in URL
      strings. Characters such as ?, &amp;, /, and spaces may be
      truncated or corrupted by some browsers so those characters must be
      encoded in &lt;A&gt; tags or in query strings where the strings may be re-sent by
      a browser in a request string.</para>
		</remarks>
		<example>
			<para>The following example decodes the string named EncodedString (received in a
      URL) into the string named DecodedString.</para>
			<codelink SampleID="Classic HttpServerUtility.UrlDecode1 Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpUtility.UrlPathEncode">
		<summary>
			<para> Encodes the path portion of a URL
      string for reliable HTTP transmission from the Web server to a client.</para>
		</summary>
		<param name="str">The text to URL-encode.</param>
		<returns>
			<para> The URL-encoded text.</para>
		</returns>
		<remarks>
			<para> URL encoding ensures that all browsers will correctly transmit
      text in URL strings. Characters such as ?, &amp;, /, and spaces may
      be truncated or corrupted by some browsers so those characters must be encoded
      in &lt;A&gt; tags or in query strings where the strings may be re-sent by a
      browser in a request string.</para>
		</remarks>
	</doc>
	<doc for="HttpServerUtility.Transfer">
		<overload>
			<para>Terminates execution of the current page and begins execution of a new page for the current
      request.</para>
		</overload>
		<summary>
			<para> Terminates execution of the current page and begins
      execution of a new page using the specified URL path to the page. Specifies
      whether to clear the <see cref="System.Web.HttpRequest.QueryString"/> and <see cref="System.Web.HttpRequest.Form"/>
      collections.</para>
		</summary>
		<param name="path">The URL path of the new page on the server to execute.</param>
		<param name=" preserveForm">If <see langword="true"/>, the <see langword="QueryString"/> and <see langword="Form"/> collections are preserved. If <see langword="false"/>, they are cleared. The default is <see langword="false"/> .</param>
		<exception cref="HttpException">The resource cannot be found.</exception>
		<remarks>
			<para>The page transferred to should be another .aspx page. For instance,
      a transfer to an .asp or .asmx page is not valid.</para>
			<para><see cref="System.Web.HttpServerUtility.Transfer"/>calls <see cref="System.Web.HttpResponse.End"/> which raises a <see cref="System.Threading.ThreadAbortException"/> exception upon completion.</para>
			<para>If you set <paramref name="preserveForm"/>
to <see langword="true"/> and if
the <see langword="enableViewStateMac"/>
attribute of the <see topic="gngrfPagesSection"/> configuration element is
<see langword="true"/> , ASP.NET will
raise an exception when <see cref="System.Web.HttpServerUtility.Transfer"/> is executed because the view state
from the page that calls <see cref="System.Web.HttpServerUtility.Transfer"/> is not valid on the destination
page. One of the preserved form fields on the calling page is the hidden
__VIEWSTATE form field, which holds the view state for the page. When
<see langword="enableViewStateMac"/> is <see langword="true"/>, ASP.NET runs a 
message authentication check (MAC) on the view state of the destination page
when the page is posted back from the client and the check will fail. For
security purposes, you should keep the <see langword="enableViewStateMac"/>
attribute set to <see langword="true"/> but there are other methods available
to transfer Forms data. For more information, including recommended solutions, see article Q316920, "View State
is Invalid Error Message When You Use Server.Transfer" in the
Microsoft Knowledge Base at http://support.microsoft.com.</para>
		</remarks>
		<example>
			<para> The following example executes a new page in the
      same directory as the current page.</para>
			<codelink SampleID="Classic HttpServerUtility.Transfer Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
