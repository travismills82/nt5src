<docs>
	<doc for="FormsAuthentication.SetAuthCookie">
		<overload>
			<para>Creates an authentication ticket and attaches
 it to the cookie's collection of the outgoing response. It does not perform a
 redirect.</para>
		</overload>
		<summary>
			<para> Creates an authentication ticket for the given 
 <paramref name="userName"/> and <paramref name="createPersistentCookie"/>
 and attaches it to the cookie's collection of the outgoing
 response. It does not perform a redirect.</para>
		</summary>
		<param name="userName">The name of an authenticated user. This does not have to map to a Windows account.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
		<remarks>
			<para>This has the effect of creating an authenticated user. Applications can use
 this when they intend to manually redirect, or if they do not
 want to redirect. For example, you can use this for an embedded logon area
 on a page.</para>
		</remarks>
	</doc><doc for="FormsAuthentication.SetAuthCookie1">
		<summary>
			<para>Creates an authentication ticket for the given <paramref name="userName,"/>
				<paramref name="createPersistentCookie,"/> and <paramref name="strCookiePath"/> and attaches it 
to the cookie's collection of the outgoing response. It does not perform a
redirect.</para>
		</summary>
		<param name="userName">The name of an authenticated user. This does not have to map to a Windows account.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
		<param name="strCookiePath"> Specifies cookie path.</param>
		<remarks>
			<para>This has the effect of creating an authenticated user. Applications can use 
 this when they intend to manually redirect, or if they do not want to redirect.
 For example, you can use this for an embedded logon area on a page.</para>
		</remarks>
	</doc><doc for="FormsAuthentication.Initialize">
		<summary>
			<para>Initializes <see cref="System.Web.Security.FormsAuthentication"/> by reading the
   configuration and getting the cookie values and encryption keys for the given
   application.</para>
		</summary>
	</doc><doc for="FormsAuthentication.GetAuthCookie">
		<overload>
			<para>Creates an authentication cookie for a given user name. </para>
		</overload>
		<summary>
			<para>Creates an authentication cookie for a given
      user name. This does not set the cookie as part of the outgoing response, so
      that an application can have more control over how the cookie is issued.</para>
		</summary>
		<param name="userName">Name of the authenticated user. This does not have to map to a Windows account.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (a cookie that is saved across browser sessions) should be issued. Cookie path defaults to'/'.</param>
		<returns>
			<para>Returns an HTTP cookie.</para>
		</returns>
	</doc><doc for="FormsAuthentication.GetAuthCookie1">
		<summary>
			<para>Creates an authentication cookie for a given user name.
      This does not set the cookie as part of the outgoing response, so that an
      application can have more control over how the cookie is issued.</para>
		</summary>
		<param name="userName">Name of the authenticated user. This does not have to map to a Windows account.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (a cookie that is saved across browser sessions) should be issued.</param>
		<param name=" strCookiePath">Specifies cookie path.</param>
		<returns>
			<para>Returns an HTTP cookie. </para>
		</returns>
	</doc><doc for="FormsAuthentication.RenewTicketIfOld">
		<summary>
			<para>Conditionally
      updates the sliding expiration on a <see cref="System.Web.Security.FormsAuthenticationTicket"/>.
      </para>
		</summary>
		<param name="tOld">The authentication ticket to update.</param>
		<returns>
			<para> The updated <see cref="System.Web.Security.FormsAuthenticationTicket"/>.</para>
		</returns>
		<remarks>
			<para>The ticket is updated with the <see cref="System.Web.Security.FormsAuthenticationTicket.IssueDate"/> property set to 
   the current time and the <see cref="System.Web.Security.FormsAuthenticationTicket.Expiration"/> property based on
   the difference between the previous expiration time and the previous issue time. The
   ticket will be updated if the current date and time minus <see langword="IssueDate"/> is greater than the expiration date minus the current
   date and time [(DateTime.Now - IssueDate) &gt; (Expiration - DateTime.Now)].</para>
		</remarks>
	</doc>
	<doc for="FormsAuthentication.Decrypt">
		<summary>
			<para> Returns an instance of a <see cref="System.Web.Security.FormsAuthenticationTicket"/> class, given
   a valid encrypted authentication ticket obtained from an HTTP
   cookie.</para>
		</summary>
		<param name="encryptedTicket">The encrypted authentication ticket.</param>
		<returns>
			<para>Returns a <see cref="System.Web.Security.FormsAuthenticationTicket"/> object. If 
<paramref name="encryptedTicket"/> is 
   not a valid ticket, <see cref="System.Web.Security.FormsAuthentication.Decrypt"/> returns
<see langword="null"/>
.</para>
		</returns>
		<exception cref="ArgumentException"><paramref name="encryptedTicket "/>is not in a invalid format.</exception>
	</doc>
	<doc for="FormsAuthentication">
		<summary>
			<para> Provides static methods that supply helper utilities for manipulating
      authentication tickets. This class cannot be inherited.</para>
		</summary>
		<example>
			<codelink SampleID="FormsAuthenticationClass" SnippetID="1"/>
			<codelink SampleID="FormsAuthenticationClass" SnippetID="2"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.Authenticate">
		<summary>
			<para> Attempts to validate the
      credentials against those contained in the configured credential store, given the
      supplied credentials.</para>
		</summary>
		<param name="name">The user name</param>
		<param name=" password">The user password.</param>
		<returns>
			<para><see langword="true "/>if the credentials are
   valid, otherwise returns <see langword="false"/>
   .</para>
		</returns>
		<codelink SampleID="FormsAuthenticationClass" SnippetID="1"/>
		<codelink SampleID="FormsAuthenticationClass" SnippetID="2"/>
	</doc>
	<doc for="FormsAuthentication.RedirectFromLoginPage1">
		<summary>
			<para> Redirects an authenticated user back to the originally requested
      URL.</para>
		</summary>
		<param name="userName">Name of the user for cookie authentication purposes. This does not need to map to an account name and will be used by URL Authorization.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
		<param name=" strCookiePath">Specifies cookie path.</param>
		<remarks>
			<para>The<see langword=" RedirectFromLoginPage"/> method
   redirects to the return URL key specified in the query string. For example, in
   the URL <c>http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx</c>,
<c>caller.aspx</c> is the return URL that <see langword="RedirectFromLoginPage"/> redirects to. If the return 
key does not exist, <see langword="RedirectFromLoginPage"/>
redirects to <c>Default.aspx</c>. ASP.NET automatically adds the return
URL when the browser is redirected to the login page specified in
the <see langword="loginUrl"/> attribute in the <see topic="gngrfForms"/>
configuration directive. The method
issues an authentication ticket and does a SetForms
with the ticket, using the
appropriately configured cookie name for the application as part of the redirect
response.</para>
		</remarks>
		<codelink SampleID="FormsAuthenticationClass" SnippetID="1"/>
		<codelink SampleID="FormsAuthenticationClass" SnippetID="2"/>
	</doc>
	<doc for="FormsAuthentication.SignOut">
		<summary>
			<para>Removes the authentication ticket.</para>
		</summary>
		<remarks>
			<para>This removes either durable or session cookies.</para>
		</remarks>
		<example>
			<codelink SampleID="FormsAuthenticationSignOut" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.FormsCookieName">
		<summary>
			<para>Returns the configured cookie name used for the current application.</para>
		</summary>
		<value>
			<para>A string containing the configured cookie name used for the current application.</para>
		</value>
		<remarks>
			<para>Returns a <see langword="String"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="FormsAuthenticationProperties" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.FormsCookiePath">
		<summary>
			<para>Returns the configured cookie path used for the current application.</para>
		</summary>
		<value>
			<para>A string containing the configured cookie path used for the current
      application.</para>
		</value>
		<example>
			<codelink SampleID="FormsAuthenticationProperties" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.RequireSSL">
		<summary>
			<para>Gets a value indicating whether a cookie must be
      transmitted only over a secure connection.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the cookie must be transmitted
   over a secure connection (https); otherwise, <see langword="false"/>
   .</para>
		</value>
		<example>
			<codelink SampleID="FormsAuthenticationProperties" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.SlidingExpiration">
		<summary>
			<para>Gets a value indicating whether sliding expiration is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if sliding expiration is enabled; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Sliding expiration resets an active authentication cookie's time to
      expiration upon each request during a single session.</para>
		</remarks>
		<example>
			<codelink SampleID="FormsAuthenticationProperties" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.HashPasswordForStoringInConfigFile">
		<summary>
			<para>Given a password and a string identifying the hash type,
      this routine produces a hash password suitable for storing in a configuration
      file.</para>
		</summary>
		<param name="password"><para>The password to hash.</para></param>
		<param name="passwordFormat"><para>The hash algorithm to use. Choices are "sha1" or "md5".</para></param>
		<returns>
			<para>Returns a <see langword="String "/> containing a hashed password.</para>
		</returns>
		<remarks>
			<para>Password algorithms supported are SHA1 and MD5.</para>
		</remarks>
		<example>
			<codelink SampleID="FormsAuthenticationHashPassword" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.Encrypt">
		<summary>
			<para>Produces a string containing an encrypted authentication
      ticket suitable for use in an HTTP cookie, given a <see cref="System.Web.Security.FormsAuthenticationTicket"/>
      .</para>
		</summary>
		<param name="ticket">An authentication ticket class.</param>
		<returns>
			<para> A string containing an
      encrypted authentication ticket.</para>
		</returns>
		<example>
			<codelink SampleID="FormsAuthenticationTicketClass" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.GetRedirectUrl">
		<summary>
			<para>Returns the redirect URL for the original
      request that caused the redirect to the logon page.</para>
		</summary>
		<param name="userName">Name of the authenticated user. This does not have to map to a Windows account.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (a cookie that is saved across browser sessions) should be issued. Cookie path defaults to'/'.</param>
		<returns>
			<para>A string containing the redirect URL.</para>
		</returns>
		<remarks>
			<para>If there is no original URL, Default.aspx is used. If
      the redirect URL specifies a different server, this method also returns the
      authentication ticket as part of the query string. This method can be used by
      applications that need to do the redirect themselves instead of using <see cref="System.Web.Security.FormsAuthentication.RedirectFromLoginPage"/>
      
      .</para>
		</remarks>
		<example>
			<codelink SampleID="FormsAuthenticationTicketClass" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FormsAuthentication.RedirectFromLoginPage">
		<overload>
			<para> Redirects an authenticated user back to the originally requested
      URL.</para>
		</overload>
		<summary>
			<para> Redirects an
      authenticated user back to the originally requested URL.</para>
		</summary>
		<param name="userName">Name of the user for cookie authentication purposes. This does not need to map to an account name and will be used by URL Authorization.</param>
		<param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
		<remarks>
			<para> The<see langword=" RedirectFromLoginPage"/> method
   redirects to the return URL key specified in
   the query string. For example, in the URL <c>http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx</c>, <c>caller.aspx</c>
is the return URL that <see langword="RedirectFromLoginPage"/>
redirects
to. If the return key does not
exist, <see langword="RedirectFromLoginPage"/> redirects to <c>Default.aspx</c>. ASP.NET automatically adds the return
URL when the browser is redirected to the login page specified in
the <see langword="loginUrl"/> attribute in the <see topic="gngrfForms"/>
configuration
directive. The
method issues an authentication ticket and does a SetForms
with the ticket, using the appropriately configured cookie name for the
application as part of the redirect response.</para>
		</remarks>
	</doc>
</docs>
