<docs>
	<doc for="FileSystemWatcher.directory">
		<summary>
     Private instance variables
 </summary>
	</doc>
	<doc for="FileSystemWatcher.Site">
		<internalonly/>
		<summary>
		</summary>
	</doc>
	<doc for="FileSystemWatcher.CompletionStatusChanged">
		<summary>
     Callback from thread pool.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.Finalize">
		<internalonly/>
		<summary>
			<para>
       Unregisters ourselves from the
       directory monitor and dumps any delegates.
    </para>
		</summary>
	</doc>
	<doc for="FileSystemWatcher.FreeBuffers">
		<summary>
		</summary>
	</doc>
	<doc for="FileSystemWatcher.IsSuspended">
		<summary>
     Returns true if the component is either in a Begin/End Init block or in design mode.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.MatchPattern">
		<summary>
     Sees if the name given matches the name filter we have.
 </summary>
		<param name="relativePath">
     name of file or directory
 </param>
		<returns>
     true if name matches pattern, false otherwise
 </returns>
	</doc>
	<doc for="FileSystemWatcher.Monitor">
		<summary>
     Calls native API and sets up handle with the directory change API.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.NotifyFileSystemEventArgs">
		<summary>
     Raises the event to each handler in the list.
 </summary>
		<param name="action">
     FileSystemEventArgs action.
 </param>
		<param name="name">
     name of file or directory
 </param>
	</doc>
	<doc for="FileSystemWatcher.NotifyInternalBufferOverflowEvent">
		<summary>
     Raises the event to each handler in the list.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.NotifyRenameEventArgs">
		<summary>
     Raises the event to each handler in the list.
 </summary>
		<param name="action">
     FileSystemEventArgs action.
 </param>
		<param name="name">
     name of file or directory
 </param>
		<param name="oldName">
     oldName of file or directory
 </param>
	</doc>
	<doc for="FileSystemWatcher.OnInternalFileSystemEventArgs">
		<summary>
     Internal method used for synchronous notification.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.OnInternalRenameEventArgs">
		<summary>
     Internal method used for synchronous notification.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.OnRenamed">
		<summary>
			<para>
       Raises the <see cref="System.IO.FileSystemWatcher.Renamed"/> event.
    </para>
		</summary>
		<param name="e">
    A <see cref="System.IO.RenamedEventArgs"/> that contains the event data.
 </param>
		<remarks>
			<para>
				<see cref="System.IO.FileSystemWatcher.OnRenamed"/> is called when a file or directory within the
       directory being monitored is renamed.
    </para>
			<para>
       Raising an event invokes the event handler
       through a delegate. For more information, see
    <see topic="cpconProvidingEventFunctionality"/>.
    </para>
			<note type="inheritinfo">
       When overriding <see cref="System.IO.FileSystemWatcher.OnRenamed"/> in a derived class, be sure to call the base class's
    <see cref="System.IO.FileSystemWatcher.OnRenamed"/> method. 
    </note>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.Renamed"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
		<seealso cref="System.IO.RenamedEventHandler"/>
	</doc>
	<doc for="FileSystemWatcher.Restart">
		<summary>
     Stops and starts this object.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.StartRaisingEvents">
		<summary>
			<para>
       Starts monitoring the specified directory.
    </para>
		</summary>
		<remarks>
			<para>
       You can also start monitoring the specified directory by setting
       the <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> property to <see langword="true"/>.
    </para>
			<para>
       The component will not raise events if you do
       not call <see cref="System.IO.FileSystemWatcher.StartRaisingEvents"/> or set <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> to <see langword="true"/>.
    </para>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/>
		<seealso cref="System.IO.FileSystemWatcher.StopRaisingEvents"/>
	</doc>
	<doc for="FileSystemWatcher.StopRaisingEvents">
		<summary>
			<para>
       Stops monitoring the specified directory.
    </para>
		</summary>
		<remarks>
			<para>
       You can also stop monitoring the specified directory by setting the <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/>
       property to <see langword="false"/>.
    </para>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/>
		<seealso cref="System.IO.FileSystemWatcher.StartRaisingEvents"/>
	</doc>
	<doc for="Direct">
		<summary>
    Helper class to hold to N/Direct call declaration and flags.
 </summary>
	</doc>
	<doc for="FileSystemWatcher.OnError">
		<summary>
			<para> Raises the <see cref="System.IO.FileSystemWatcher.Error"/> event.
   </para>
		</summary>
		<param name="e">An <see cref="System.IO.ErrorEventArgs"/> that contains the event data. </param>
		<remarks>
			<para>
				<see cref="System.IO.FileSystemWatcher.OnError"/> is called when an error occurs.
   </para>
			<para> Raising an event invokes the event handler
   through a delegate. For more information, see
<see topic="cpconProvidingEventFunctionality"/>.
   </para>
			<note type="inheritinfo">
   When overriding <see cref="System.IO.FileSystemWatcher.OnError"/> in a derived class, be sure to call
   the base class's <see cref="System.IO.FileSystemWatcher.OnError"/> method.
   
</note>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.Error"/>
		<seealso cref="System.IO.ErrorEventArgs"/>
		<seealso cref="System.IO.ErrorEventHandler"/>
		<seealso cref="System.IO.InternalBufferOverflowException"/>
	</doc>
	<doc for="FileSystemWatcher.Filter">
		<summary>
			<para> Gets or sets the filter string, used to determine what files are monitored in a directory.</para>
		</summary>
		<value>
			<para>The filter string. The default is "*.*" (Watch all files
      with an extension. For example, "MyFile.txt" would be watched, but "README" would not.)</para>
		</value>
		<remarks>
			<para> To watch changes in all files, set the <see cref="System.IO.FileSystemWatcher.Filter"/> property to an empty string (""). To watch a
   specific file, set the <see cref="System.IO.FileSystemWatcher.Filter"/> property to
   the file name. For example, to watch for changes in the file MyDoc.txt, set the
<see cref="System.IO.FileSystemWatcher.Filter"/> property to "MyDoc.txt". You can also
   watch for changes in a certain type of file. For example, to watch for changes
   in any text files, set the <see cref="System.IO.FileSystemWatcher.Filter"/> property to "*.txt".</para>
			<para>The <see cref="System.IO.FileSystemWatcher.Filter"/> applies to change notifications
after they have gone through
the buffer and does not limit what goes
into the buffer. For more information on filtering out unwanted notifications before recording
them in the buffer, see the <see cref="System.IO.FileSystemWatcher.NotifyFilter"/>, <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>, and <see cref="System.IO.FileSystemWatcher.InternalBufferSize"/> properties.</para>
			<para>The <see cref="System.IO.FileSystemWatcher.Filter"/> accepts wildcards similarly to the Windows "dir" command.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.IO.FileSystemWatcher"/> to watch the directory 
   specified at runtime. The component is set to watch for changes in
<see langword="LastWrite"/> and <see langword="LastAccess"/> 
time, the creation, deletion,
or renaming of text files in the directory. If a file is changed, created, or
deleted, the path to the file prints to the console. When a file is renamed, the
old and new paths print to the console.</para>
			<para>Use the <see cref="N:System.Diagnostics"/> and <see cref="System.IO"/>
namespaces for this example.</para>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter"/>
		<seealso cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
		<seealso cref="System.IO.FileSystemWatcher.InternalBufferSize"/>
	</doc>
	<doc for="FileSystemWatcher.FileSystemWatcher">
		<overload>
			<para>Initializes a new instance of the <see cref="System.IO.FileSystemWatcher"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.FileSystemWatcher"/> class.</para>
		</summary>
		<remarks>
			<para>You cannot watch a remote computer that does not have Windows NT
      or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a
      Windows NT 4.0 computer.</para>
			<para>The following table shows initial property values for an instance of <see cref="System.IO.FileSystemWatcher"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.IO.FileSystemWatcher.NotifyFilter"/>
					</term>
					<description>bitwise OR combination of
<see langword="LastWrite"/>, <see langword="FileName"/>, and 
<see langword="DirectoryName"/></description>
				</item>
				<item>
					<term>
						<see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/>
					</term>
					<description>
						<see langword="false"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.IO.FileSystemWatcher.Filter"/>
					</term>
					<description> "*.*" (Watch all files with an extension. For
   example, "MyFile.txt" would be watched, but "README" would not.)</description>
				</item>
				<item>
					<term>
						<see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
					</term>
					<description>
						<see langword="false"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.IO.FileSystemWatcher.InternalBufferSize"/>
					</term>
					<description>8192</description>
				</item>
				<item>
					<term>
						<see cref="System.IO.FileSystemWatcher.Path"/>
					</term>
					<description>empty string ("")</description>
				</item>
			</list>
			<note type="note">
   The component will not watch
   the specified directory until the <see cref="System.IO.FileSystemWatcher.Path"/> is set, and <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> is <see langword="true"/>.
   
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.IO.FileSystemWatcher"/> to watch the directory 
   specified at runtime. The component is set to watch for changes in
<see langword="LastWrite"/> and <see langword="LastAccess"/> 
time, the creation, deletion,
or renaming of text files in the directory. If a file is changed, created, or
deleted, the path to the file prints to the console. When a file is renamed, the
old and new paths print to the console.</para>
			<para>Use the <see cref="N:System.Diagnostics"/> and <see cref="System.IO"/>
namespaces for this example.</para>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.NotifyFilters"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
		<seealso cref="System.IO.InternalBufferOverflowException"/>
		<seealso cref="System.IO.FileSystemWatcher.Path"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
		<seealso cref="System.IO.RenamedEventHandler"/>
		<seealso cref="System.IO.WaitForChangedResult"/>
		<seealso cref="System.IO.WatcherChangeTypes"/>
	</doc>
	<doc for="FileSystemWatcher.NotifyFilter">
		<summary>
			<para> Gets or sets the type of changes to watch for.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.IO.NotifyFilters"/> values. The default is the bitwise OR combination of <see langword="LastWrite"/>, <see langword="FileName"/>, and
<see langword="DirectoryName"/>.</para>
		</value>
		<exception cref="T:System.ArgumentException">
			<para>The value is not a valid bitwise OR combination of the <see cref="System.IO.NotifyFilters"/> values.</para>
		</exception>
		<remarks>
			<para>You can combine the members of the <see cref="System.IO.NotifyFilters"/> enumeration to watch for
   more than one type of change at a time. For example, you can watch for changes in size
   of a file, and for changes in the <see langword="LastWrite"/> time.
   This raises an event anytime there is a change in file or folder size, or a
   change in the <see langword="LastWrite"/>
   time of the file or folder.</para>
			<para>This is one way to filter out unwanted notifications. For more information on
   filtering out unwanted notifications, see the <see cref="System.IO.FileSystemWatcher.Filter"/>, <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>, and <see cref="System.IO.FileSystemWatcher.InternalBufferSize"/> properties.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.IO.FileSystemWatcher"/> to watch the directory 
   specified at runtime. The component is set to watch for changes in
<see langword="LastWrite"/> and <see langword="LastAccess"/> 
time, the creation, deletion,
or renaming of text files in the directory. If a file is changed, created, or
deleted, the path to the file prints to the console. When a file is renamed, the
old and new paths print to the console.</para>
			<para>Use the <see cref="N:System.Diagnostics"/> and <see cref="System.IO"/>
namespaces for this example.</para>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.NotifyFilters"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
		<seealso cref="System.IO.FileSystemWatcher.InternalBufferSize"/>
	</doc>
	<doc for="FileSystemWatcher.IncludeSubdirectories">
		<summary>
			<para> Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if you want to monitor subdirectories; otherwise,
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Set <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/> to
<see langword="true"/> when you want to watch for change notifications
   for files and directories contained within the directory specified
   through the <see cref="System.IO.FileSystemWatcher.Path"/>
   property, and its subdirectories. Setting the <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/> property to <see langword="false"/>
   helps reduce the number of notifications sent to the internal
   buffer. For more information on filtering out unwanted notifications, see
   the <see cref="System.IO.FileSystemWatcher.NotifyFilter"/>, and <see cref="System.IO.FileSystemWatcher.InternalBufferSize"/>
   properties.</para>
			<para>When <see langword="true"/>, <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/> 
is recursive through the entire sub tree, not just the immediate
child directories. The relative path to a file or directory within the sub tree
returns in the <see cref="System.IO.FileSystemEventArgs.Name"/>
property of
<see cref="System.IO.FileSystemEventArgs"/> and the <see cref="System.IO.RenamedEventArgs.OldName"/> property of <see cref="System.IO.RenamedEventArgs"/> , depending on changes
you are watching for. You can get the fully qualified path from the <see cref="System.IO.FileSystemEventArgs.FullPath"/>
property of <see cref="System.IO.FileSystemEventArgs"/> and the <see cref="System.IO.RenamedEventArgs.OldFullPath"/> property
of <see cref="System.IO.RenamedEventArgs"/>, depending on the changes you are watching for.</para>
			<para>If a directory is created in the sub tree of the directory you are watching,
   and <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/> is <see langword="true"/>, that
   directory will automatically be watched.</para>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.FileSystemEventArgs.FullPath" qualify="true"/>
		<seealso cref="System.IO.RenamedEventArgs.OldFullPath" qualify="true"/>
		<seealso cref="System.IO.FileSystemWatcher.InternalBufferSize"/>
		<seealso cref="System.IO.FileSystemEventArgs.Name" qualify="true"/>
		<seealso cref="System.IO.RenamedEventArgs.OldName" qualify="true"/>
		<seealso cref="System.IO.FileSystemWatcher.Path"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
	</doc>
	<doc for="FileSystemWatcher.OnCreated">
		<summary>
			<para> Raises the <see cref="System.IO.FileSystemWatcher.Created"/> event.
   </para>
		</summary>
		<param name="e">A <see cref="System.IO.FileSystemEventArgs"/> that contains the event data. </param>
		<remarks>
			<para>
				<see cref="System.IO.FileSystemWatcher.OnCreated"/> is called
   when a file or directory is created in the directory being monitored.
   </para>
			<para> Some common occurrences, such as copying or moving a file
   or directory, do not correspond directly to an event, but these occurrences do
   cause events to be raised. When you copy a file or directory, the system raises
   a <see cref="System.IO.FileSystemWatcher.Created"/> event in the directory to which the file was
   copied, if that directory is being watched. If the directory from which you copied
   was being watched by another instance of <see cref="System.IO.FileSystemWatcher"/>, no event would be raised. For
   example, you create two instances of <see cref="System.IO.FileSystemWatcher"/>.
   FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is
   set to watch "C:\Your Documents". Now, if you copy a file from "My Documents"
   and paste it into "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event will be raised in FileSystemWatcher2, but
   no event is raised for FileSystemWatcher1. Unlike copying, moving a file
   or directory raises two events. From the previous example, if you moved a file
   from "My Documents" to "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event would be raised in FileSystemWatcher2 and a
<see cref="System.IO.FileSystemWatcher.Deleted"/> event would be raised in FileSystemWatcher1.
   </para>
			<para> Raising an event invokes the event handler
   through a delegate. For more information, see
<see topic="cpconProvidingEventFunctionality"/>.
   </para>
			<note type="inheritinfo">
   When overriding <see cref="System.IO.FileSystemWatcher.OnCreated"/> in a derived class, be sure to call
   the base class's <see cref="System.IO.FileSystemWatcher.OnCreated"/> method.
   
</note>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.Created"/>
		<seealso cref="System.IO.FileSystemWatcher.Deleted"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
	</doc>
	<doc for="FileSystemWatcher.OnDeleted">
		<summary>
			<para> Raises the <see cref="System.IO.FileSystemWatcher.Deleted"/> event.
   </para>
		</summary>
		<param name="e">A <see cref="System.IO.FileSystemEventArgs"/> that contains the event data. </param>
		<remarks>
			<para>
				<see cref="System.IO.FileSystemWatcher.OnDeleted"/> is called when a file or directory,
   within the directory being monitored, is deleted.
   </para>
			<para> Some common occurrences, such as copying or moving a
   file or directory, do not correspond directly to an event, but these occurrences
   do cause events to be raised. When you copy a file or directory, the system
   raises a <see cref="System.IO.FileSystemWatcher.Created"/> event in the directory to which
   the file was copied, if that directory is being watched. If the directory from
   which you copied was being watched by another instance of <see cref="System.IO.FileSystemWatcher"/>,
   no event would be raised. For example, you create two instances of <see cref="System.IO.FileSystemWatcher"/>.
   FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is
   set to watch "C:\Your Documents". Now, if you copy a file from "My Documents"
   into "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event will be raised
   by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.
   Unlike copying, moving a file or directory raises two events. From the previous
   example, if you moved a file from "My Documents" to "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event would be raised by
   FileSystemWatcher2 and a <see cref="System.IO.FileSystemWatcher.Deleted"/> event would be raised by FileSystemWatcher1.
   </para>
			<para> Raising an event invokes the event handler
   through a delegate. For more information, see
<see topic="cpconProvidingEventFunctionality"/>.
   </para>
			<note type="inheritinfo">
   When overriding
<see cref="System.IO.FileSystemWatcher.OnDeleted"/> in a derived class, be sure to call
   the base class's <see cref="System.IO.FileSystemWatcher.OnDeleted"/> method.
   
</note>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.Created"/>
		<seealso cref="System.IO.FileSystemWatcher.Deleted"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
	</doc>
	<doc for="FileSystemWatcher.WaitForChanged">
		<overload>
			<para>A synchronous method that returns a structure that contains specific information on the change that occurred.</para>
		</overload>
		<summary>
			<para> A synchronous method that returns a structure
      that contains specific information on the change that occurred, given the
      type of change you want to monitor.</para>
		</summary>
		<param name="changeType">The <see cref="System.IO.WatcherChangeTypes"/> to watch for.</param>
		<returns>
			<para>A <see cref="System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</para>
		</returns>
		<remarks>
			<para>This
      method waits indefinately until the first change occurs and then
      returns. This is the same as using <see cref="System.IO.FileSystemWatcher.WaitForChanged"/> with the
   <paramref name="timeout"/> parameter set to -1.</para>
		</remarks>
		<seealso cref="System.IO.WaitForChangedResult"/>
	</doc>
	<doc for="FileSystemWatcher.WaitForChanged1">
		<summary>
			<para> A
      synchronous method that returns a structure that contains specific information on the change that occurred, given
      the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</para>
		</summary>
		<param name="changeType">The <see cref="System.IO.WatcherChangeTypes"/> to watch for.</param>
		<param name="timeout">The time (in milliseconds) to wait before timing out.</param>
		<returns>
			<para>A <see cref="System.IO.WaitForChangedResult"/> that contains specific information on the change that occurred.</para>
		</returns>
		<remarks>
			<para>This method waits until a change occurs or it has timed out. A value of -1
      for the <paramref name="timeout"/> parameter means wait indefinitely.</para>
		</remarks>
		<seealso cref="System.IO.WaitForChangedResult"/>
	</doc>
	<doc for="FileSystemWatcher.Dispose">
		<nodoc/>
		<summary>
			<para> Disposes of resources (other than memory) used by
      the <see cref="System.IO.FileSystemWatcher"/>.
      </para>
		</summary>
		<remarks>
			<para> Call <see cref="System.IO.FileSystemWatcher.Dispose"/> when you are finished using the
<see cref="System.IO.FileSystemWatcher"/>. The <see cref="System.IO.FileSystemWatcher.Dispose"/> method leaves
   the <see cref="System.IO.FileSystemWatcher"/> in an unusable state. After calling <see cref="System.IO.FileSystemWatcher.Dispose"/> , release all references to
   the <see cref="System.IO.FileSystemWatcher"/> so the memory it occupied can be reclaimed by
   garbage collection.
   </para>
			<para> The memory for the internal buffer is automatically
   released when <see cref="System.IO.FileSystemWatcher.Dispose"/>
   is called.
   </para>
			<note type="note">
   Call <see cref="System.IO.FileSystemWatcher.Dispose"/> before you release your last
   reference to the <see cref="System.IO.FileSystemWatcher"/>. Otherwise, the resources the <see cref="System.IO.FileSystemWatcher"/>
   is using will not be freed until garbage collection calls the <see cref="System.IO.FileSystemWatcher"/> object's finalizer.
   
</note>
		</remarks>
	</doc><doc for="FileSystemWatcher.Dispose1">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="FileSystemWatcher.FileSystemWatcher1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.FileSystemWatcher"/> class,
   given the specified directory to monitor.</para>
		</summary>
		<param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
		<exception cref="T:System.ArgumentNullException">
			<para>The <paramref name="path"/> parameter is <see langword="null"/>.</para>
		</exception>
		<exception cref="T:System.ArgumentException">
			<para>The <paramref name="path"/> parameter is an empty string ("").</para>
			<para>-or-</para>
			<para>The path specified through the <paramref name="path"/> parameter does not exist. </para>
		</exception>
		<remarks>
			<note type="note">
      The component will not watch
      the specified directory until the <see cref="System.IO.FileSystemWatcher.Path"/> is set, and <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> is <see langword="true"/>.
      
      </note>
			<para> The component can watch files on your personal computer, a network
      drive, or a remote computer.</para>
			<para>You cannot watch a remote
      computer that does not have Windows
      NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a
      Windows NT 4.0 computer. The <see cref="System.IO.FileSystemWatcher.Filter"/> property is set by default to watch
      all files.</para>
		</remarks>
		<seealso cref="System.IO.NotifyFilters"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.InternalBufferOverflowException"/>
		<seealso cref="System.IO.FileSystemWatcher.Path"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
		<seealso cref="System.IO.RenamedEventHandler"/>
		<seealso cref="System.IO.WaitForChangedResult"/>
		<seealso cref="System.IO.WatcherChangeTypes"/>
	</doc><doc for="FileSystemWatcher.FileSystemWatcher2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.FileSystemWatcher"/> class,
   given the specified directory and type of files to monitor.</para>
		</summary>
		<param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
		<param name="filter"> The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
		<exception cref="T:System.ArgumentNullException">
			<para>The <paramref name="path"/> parameter is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="filter"/> parameter is <see langword="null"/>.</para>
		</exception>
		<exception cref="T:System.ArgumentException">
			<para>The <paramref name="path"/> parameter is an empty string ("").</para>
			<para>-or-</para>
			<para>The path specified through the <paramref name="path"/> parameter does not exist. </para>
		</exception>
		<remarks>
			<note type="note">
      The component will not watch
      the specified directory until the <see cref="System.IO.FileSystemWatcher.Path"/> is set, and <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> is <see langword="true"/>.
      
      </note>
			<para> The component can watch files on your personal computer, a network
      drive, or a remote computer.</para>
			<para>You cannot watch a remote
      computer that does not have Windows
      NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a
      Windows NT 4.0 computer.</para>
		</remarks>
		<seealso cref="System.IO.NotifyFilters"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.InternalBufferOverflowException"/>
		<seealso cref="System.IO.FileSystemWatcher.Path"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
		<seealso cref="System.IO.RenamedEventHandler"/>
		<seealso cref="System.IO.WaitForChangedResult"/>
		<seealso cref="System.IO.WatcherChangeTypes"/>
	</doc><doc for="FileSystemWatcher.InternalBufferSize">
		<summary>
			<para> Gets
      or sets the size of the internal buffer.</para>
		</summary>
		<value>
			<para>The internal buffer size. The default is 8192 (8K).</para>
		</value>
		<remarks>
			<para>The buffer can be set to anything above 4096 (4K), but for best performance,
      it should be a multiple of 4K on Intel-based computers.</para>
			<para> The
      system notifies the
      component of file changes, it stores those changes in
      a buffer the component creates and passes to the Win32 Application Programming Interfaces
      (APIs). If there are many changes in a short time, the buffer can
      overflow. This causes the component to lose track of changes in the directory,
      and it will only provide blanket notification. Increasing the size of the buffer
      is expensive, as it comes from non paged memory that cannot be swapped out to
      disk, so keep the buffer as small as possible. To avoid a buffer overflow, use the <see cref="System.IO.FileSystemWatcher.NotifyFilter"/>, and <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
      properties to filter out unwanted change notifications.</para>
			<para>If the internal buffer overflows, the component raises the <see cref="System.IO.FileSystemWatcher.Error"/> event.</para>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter"/>
		<seealso cref="System.IO.FileSystemWatcher.OnError"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
		<seealso cref="System.IO.InternalBufferOverflowException"/>
	</doc><doc for="FileSystemWatcher.Path">
		<summary>
			<para> Gets or sets the path of the directory to watch.</para>
		</summary>
		<value>
			<para>The path to monitor. The default is an empty string ("").</para>
		</value>
		<exception cref="T:System.ArgumentException"><para>The specified path contains wildcard characters.</para>
			<para>-or-</para>
			<para>The specified path contains invalid path characters.</para>
			<para>-or-</para>
			<para>The specified path specified does not exist. </para></exception>
		<remarks>
			<para> This is a fully qualified path to a directory. The directory is the root
 at which the system watches for changes. To watch a specific file, set the
 <see cref="System.IO.FileSystemWatcher.Path"/> property to the correct directory, and the <see cref="System.IO.FileSystemWatcher.Filter"/> property to the filename.</para>
			<para>The <see cref="System.IO.FileSystemWatcher.Path"/> property supports Universal Naming Convention (UNC) paths.</para>
			<note type="note">
 This property must be set before the component can watch for changes.
 
</note>
			<para>When a directory is renamed,
 the <see cref="System.IO.FileSystemWatcher"/> automatically reattaches itself to the newly
 renamed item. For example, if you set the <see cref="System.IO.FileSystemWatcher.Path"/>
 property to "C:\My Documents" and then manually rename the directory to
 "C:\Your Documents", the component continues listening for change notifications on the newly
 renamed directory. However, when you ask for the <see cref="System.IO.FileSystemWatcher.Path"/>
 property, it contains the old path. This happens because the component
 determines what directory watches based on the handle, rather than the name of the
 directory. Renaming does not affect the handle. So, if you destroy the
 component, and then recreate it without updating the <see cref="System.IO.FileSystemWatcher.Path"/> property, your
 application will fail because the directory no longer exists.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.IO.FileSystemWatcher"/> to watch the directory
 specified at runtime. The component is set to watch for changes in
<see langword="LastWrite"/> and <see langword="LastAccess"/> 
time, the creation, deletion,
or renaming of text files in the directory. If a file is changed, created, or
deleted, the path to the file prints to the console. When a file is renamed, the
old and new paths print to the console.</para>
			<para>Use the <see cref="N:System.Diagnostics"/> and <see cref="System.IO"/>
namespaces for this example.</para>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
	</doc><doc for="FileSystemWatcher.OnChanged">
		<summary>
			<para>Raises the <see cref="System.IO.FileSystemWatcher.Changed"/> event.</para>
		</summary>
		<param name="e">A <see cref="System.IO.FileSystemEventArgs"/> that contains the event data.</param>
		<remarks>
			<para>
				<see cref="System.IO.FileSystemWatcher.OnChanged"/> is called when changes are
 made to the size, system attributes, last write time, last access time, or
 security permissions of a file or directory in the directory being monitored.</para>
			<para>Use the <see cref="System.IO.FileSystemWatcher.NotifyFilter"/> property to restrict the number of
events raised when the <see cref="E:System.IO.FileSystemWatcher.Changed"/>
event is handled.</para>
			<para>Raising an event invokes the event handler
 through a delegate. For more information, see <see topic="cpconProvidingEventFunctionality"/>.</para>
			<note type="inheritinfo">
 When overriding <see cref="System.IO.FileSystemWatcher.OnChanged"/> in a derived class, be sure to call
 the base class's <see cref="System.IO.FileSystemWatcher.OnChanged"/> method.
 </note>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.Changed"/>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
	</doc><doc for="FileSystemWatcher.Error">
		<summary>
			<para>Occurs when the internal buffer overflows.</para>
		</summary>
		<remarks>
			<para>      The system
      notifies you of file changes, it stores those changes
      in a buffer that the component creates and passes to the Application Programming
      Interfaces (APIs). If there are many changes in a short time, the buffer
      can overflow. This causes the component to lose track of changes in the
      directory, and it will only provide blanket notification. Increasing the size of the buffer
      is expensive, as it comes from non paged memory that cannot be swapped out to
      disk, so keep the buffer as small as possible. To avoid a buffer overflow, use the <see cref="System.IO.FileSystemWatcher.NotifyFilter"/>, <see cref="System.IO.FileSystemWatcher.Filter"/>, and <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
      properties to filter out unwanted change notifications.</para>
			<note type="note">
   Common file system operations might raise
   more than one event. For example, when a file is moved from one directory to
   another, several <see cref="System.IO.FileSystemWatcher.OnChanged"/> and some <see cref="System.IO.FileSystemWatcher.OnCreated"/> and <see cref="System.IO.FileSystemWatcher.OnDeleted"/> events might be raised. Moving a
   file is a complex operation that consists of multiple
   simple operations, therefore raising multiple events. Likewise, some
   applications (for example, anti-virus software) might cause additional file
   system events that are detected by <see cref="System.IO.FileSystemWatcher"/>.
</note>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter"/>
		<seealso cref="System.IO.ErrorEventArgs"/>
		<seealso cref="System.IO.ErrorEventHandler"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
		<seealso cref="System.IO.FileSystemWatcher.OnError"/>
	</doc><doc for="FileSystemWatcher.EnableRaisingEvents">
		<summary>
			<para> Gets or sets a value indicating whether the component is enabled.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the component is enabled; otherwise,
<see langword="false"/>. The default is <see langword="false"/>. If you are
   using the component on a designer in Visual Studio .NET, the default is
<see langword="true"/>.</para>
		</value>
		<remarks>
			<para> The component will not raise events unless you set <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> to <see langword="true"/>.</para>
			<note type="note">
   The component will not watch the
   specified directory until the <see cref="System.IO.FileSystemWatcher.Path"/> property has been set and <see cref="System.IO.FileSystemWatcher.EnableRaisingEvents"/> is <see langword="true"/>.
   
</note>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.IO.FileSystemWatcher"/> to watch the directory
   specified at runtime. The component is set to watch for changes in
<see langword="LastWrite"/> and <see langword="LastAccess"/> 
time, the creation, deletion,
or renaming of text files in the directory. If a file is changed, created, or
deleted, the path to the file prints to the console. When a file is renamed, the
old and new paths print to the console.</para>
			<para>Use the <see cref="N:System.Diagnostics"/> and <see cref="System.IO"/>
namespaces for this example.</para>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
	</doc><doc for="FileSystemWatcher.SynchronizingObject">
		<summary>
			<para> Gets or sets the object used to marshal the event handler calls issued as a
      result of a directory change.</para>
		</summary>
		<value>
			<para>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object used to
   marshal the event handler calls issued as a result of a directory change. The
   default is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.IO.FileSystemWatcher.SynchronizingObject"/> is <see langword="null"/>, methods
   handling the <see cref="E:System.IO.FileSystemWatcher.Changed"/>,
<see cref="E:System.IO.FileSystemWatcher.Created"/>, <see cref="E:System.IO.FileSystemWatcher.Deleted"/>, and <see cref="E:System.IO.FileSystemWatcher.Renamed"/> events are called on a thread from the system thread pool. For more
   information on system thread pools, see <see cref="T:System.Threading.ThreadPool"/>.</para>
			<para>When the <see cref="E:System.IO.FileSystemWatcher.Changed"/>,
<see cref="E:System.IO.FileSystemWatcher.Created"/>, <see cref="E:System.IO.FileSystemWatcher.Deleted"/>, and <see cref="E:System.IO.FileSystemWatcher.Renamed"/>
events are handled by a visual Windows Forms component, such as a <see cref="T:System.Windows.Forms.Button"/>, accessing the component through the
system thread pool might not work, or may result in an
exception. Avoid this by setting <see cref="System.IO.FileSystemWatcher.SynchronizingObject"/> to a Windows Forms component, which causes the methods
that handle the <see cref="E:System.IO.FileSystemWatcher.Changed"/>,
<see cref="E:System.IO.FileSystemWatcher.Created"/>, <see cref="E:System.IO.FileSystemWatcher.Deleted"/>, and <see cref="E:System.IO.FileSystemWatcher.Renamed"/> events to be called on the same thread on
which the component was created.</para>
			<para>If the <see cref="System.IO.FileSystemWatcher"/> is used inside Visual Studio .NET in a Windows Forms designer,
<see cref="System.IO.FileSystemWatcher.SynchronizingObject"/> automatically sets to the control that contains the
<see cref="System.IO.FileSystemWatcher"/>. For example, if you place a <see cref="System.IO.FileSystemWatcher"/> on
a designer for Form1 (which inherits from <see cref="T:System.Windows.Forms.Form"/>) the <see cref="System.IO.FileSystemWatcher.SynchronizingObject"/> property of <see cref="System.IO.FileSystemWatcher"/> is set to the instance of
Form1.</para>
		</remarks>
		<seealso cref="T:System.ComponentModel.ISynchronizeInvoke"/>
	</doc><doc for="FileSystemWatcher.BeginInit">
		<summary>
			<para>Begins the initialization of a <see cref="System.IO.FileSystemWatcher"/> used on a form or used by
   another component. The initialization occurs at run time.</para>
		</summary>
		<remarks>
			<para> The Visual Studio .NET  design environment
      uses this method to start the initialization of a component used on a form or used
      by another component. The <see cref="System.IO.FileSystemWatcher.EndInit"/> method ends the initialization.
      Using the <see cref="System.IO.FileSystemWatcher.BeginInit"/> and <see cref="System.IO.FileSystemWatcher.EndInit"/> methods prevents the control from
      being used before it is fully initialized.</para>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.EndInit"/>
	</doc><doc for="FileSystemWatcher.EndInit">
		<summary>
			<para>Ends the initialization of a <see cref="System.IO.FileSystemWatcher"/> used on a form or used by
   another component. The initialization occurs at run time.</para>
		</summary>
		<remarks>
			<para> The Visual Studio .NET design environment
      uses this method to end the initialization of a component used on a form or used
      by another component. The <see cref="System.IO.FileSystemWatcher.BeginInit"/> method starts the initialization.
      Using the <see cref="System.IO.FileSystemWatcher.BeginInit"/> and <see cref="System.IO.FileSystemWatcher.EndInit"/> methods prevents the control from
      being used before it is fully initialized.</para>
		</remarks>
		<seealso cref="System.IO.FileSystemWatcher.BeginInit"/>
	</doc><doc for="FileSystemWatcher">
		<summary>
			<para>Listens to the file system change notifications and
      raises events when a directory, or file in a directory, changes.</para>
		</summary>
		<remarks>
			<para>Use <see cref="System.IO.FileSystemWatcher"/> to watch
   for changes in a specified directory. You can watch for changes in
   files and subdirectories of the specified directory. The component can watch files on a local computer,
   a network drive, or a remote computer.</para>
			<note type="note">
   The <see cref="System.IO.FileSystemWatcher"/> can watch disks as long as they are
   not switched or removed. The <see cref="System.IO.FileSystemWatcher"/> does not raise events for
   CDs
   and DVDs, because time stamps and
   properties cannot change. Remote computers must
   have one of these platforms installed
   for the component to function properly. However, you cannot watch a remote Windows NT 4.0 computer
   from a Windows NT 4.0 computer.
</note>
			<para>To watch for changes in all files, set the <see cref="System.IO.FileSystemWatcher.Filter"/> property to an empty string (""). To
watch a specific file, set the <see cref="System.IO.FileSystemWatcher.Filter"/> property to
the file name. For example, to watch for changes in the file MyDoc.txt, set the
<see cref="System.IO.FileSystemWatcher.Filter"/>
property to "MyDoc.txt". You can also watch for changes in a certain type of file. For example, to watch
for changes in text files, set the <see cref="System.IO.FileSystemWatcher.Filter"/> property to "*.txt".</para>
			<note type="note">
   Hidden files are not ignored.
   
</note>
			<para>There are several types of changes you can watch for in
   a directory or file. For example, you can watch for changes in
<see langword="Attributes"/>, the <see langword="LastWrite"/> date and time, or the
<see langword="Size"/> of files or directories. This is done by
   setting the <see cref="System.IO.FileSystemWatcher.NotifyFilter" qualify="true"/> property to one of the <see cref="System.IO.NotifyFilters"/>
   values. For more information on the type of changes you can watch, see
<see cref="System.IO.NotifyFilters"/>.</para>
			<para> You can watch for renaming, deletion, or creation
   of files or directories. For example, to watch for renaming of text files, set
   the <see cref="System.IO.FileSystemWatcher.Filter"/> property to "*.txt" and call one of
   the <see cref="System.IO.FileSystemWatcher.WaitForChanged"/> methods with the <see cref="System.IO.WatcherChangeTypes"/>
   value <see langword="Renamed"/> given.</para>
			<note type="note">
   Common file system operations might raise
   more than one event. For example, when a file is moved from one directory to
   another, several <see cref="System.IO.FileSystemWatcher.OnChanged"/> and some <see cref="System.IO.FileSystemWatcher.OnCreated"/> and <see cref="System.IO.FileSystemWatcher.OnDeleted"/> events might be raised. Moving a
   file is a complex operation that consists of multiple
   simple operations, therefore raising multiple events. Likewise, some
   applications (for example, anti-virus software) might cause additional file
   system events that are detected by <see cref="System.IO.FileSystemWatcher"/>.
</note>
			<para> The system notifies the component of file
   changes in
   a buffer the component creates and passes to the Application Programming
   Interfaces. If there are many changes in a short time, the buffer can overflow. This causes
   the component to lose track of changes in the directory, and it will only provide blanket
   notification. Increasing the size of the buffer is expensive, as it
   comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as
   small as possible. To avoid a buffer overflow, use the <see cref="System.IO.FileSystemWatcher.NotifyFilter"/>, and <see cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
   properties so you can filter out unwanted change notifications. For
   more information on buffer size, see <see cref="System.IO.FileSystemWatcher.InternalBufferSize"/>.</para>
			<note type="note">
   Setting the <see cref="System.IO.FileSystemWatcher.Filter"/> does not decrease what goes into the buffer.
   
</note>
			<para>For a list of initial property values for an instance of <see cref="System.IO.FileSystemWatcher"/>,
see
the <see cref="System.IO.FileSystemWatcher()"/>
constructor.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.IO.FileSystemWatcher"/> to watch the directory specified at runtime. The
   component is set to watch for changes in <see langword="LastWrite"/> and
<see langword="LastAccess"/> 
time, the creation, deletion,
or renaming of text files in the directory. If a file is changed, created, or
deleted, the path to the file prints to the console. When a file is renamed, the
old and new paths print to the console.</para>
			<para>Use the <see cref="N:System.Diagnostics"/> and <see cref="System.IO"/>
namespaces for this example.</para>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter" qualify="true"/>
		<seealso cref="System.IO.NotifyFilters"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
		<seealso cref="System.IO.FileSystemWatcher.Filter"/>
		<seealso cref="System.IO.FileSystemWatcher.IncludeSubdirectories"/>
		<seealso cref="System.IO.InternalBufferOverflowException"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
		<seealso cref="System.IO.RenamedEventHandler"/>
		<seealso cref="System.IO.WaitForChangedResult"/>
		<seealso cref="System.IO.WatcherChangeTypes"/>
	</doc>
	<doc for="FileSystemWatcher.Changed">
		<summary>
			<para>Occurs when a file or directory in the specified <see cref="System.IO.FileSystemWatcher.Path"/>
is changed.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.IO.FileSystemWatcher.Changed"/> event is raised when
   changes are made to the size, system attributes, last write time, last access
   time, or security permissions of a file or directory in the directory being monitored.</para>
			<note type="note">
   Common file system operations might raise
   more than one event. For example, when a file is moved from one directory to
   another, several <see cref="System.IO.FileSystemWatcher.OnChanged"/> and some <see cref="System.IO.FileSystemWatcher.OnCreated"/> and <see cref="System.IO.FileSystemWatcher.OnDeleted"/> events might be raised. Moving a
   file is a complex operation that consists of multiple
   simple operations, therefore raising multiple events. Likewise, some
   applications (for example, anti-virus software) might cause additional file
   system events that are detected by <see cref="System.IO.FileSystemWatcher"/>.
</note>
			<para>Use <see cref="System.IO.FileSystemWatcher.NotifyFilter"/> to restrict the number of
notifications raised when this event is handled.</para>
			<note type="note">
   The <see cref="System.IO.FileSystemWatcher.Changed"/> event is raised unexpectedly when a file is renamed,
   but is not raised when a directory is renamed. To watch for renaming, use
   the <see cref="System.IO.FileSystemWatcher.Renamed"/> event.
</note>
		</remarks>
		<example>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher.NotifyFilter"/>
		<seealso cref="System.IO.FileSystemWatcher.OnChanged"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
	</doc>
	<doc for="FileSystemWatcher.Created">
		<summary>
			<para> Occurs when a file or directory in the specified <see cref="System.IO.FileSystemWatcher.Path"/>
is created.</para>
		</summary>
		<remarks>
			<para> Some common occurrences, such as copying or moving a
      file or directory, do not correspond directly to an event, but these occurrences
      do cause events to be raised. When you copy a file or directory, the system
      raises a <see cref="System.IO.FileSystemWatcher.Created"/> event in the directory to which the file was
      copied, if that directory is being watched. If the directory from which you copied
      was being watched by another instance of <see cref="System.IO.FileSystemWatcher"/>,
      no event would be raised. For example, you create two instances of <see cref="System.IO.FileSystemWatcher"/>. FileSystemWatcher1 is
      set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your
      Documents". Now, if you copy a file from "My Documents" into "Your Documents",
      a <see cref="System.IO.FileSystemWatcher.Created"/> event will be raised by FileSystemWatcher2, but no
      event is raised for FileSystemWatcher1. Unlike copying, moving a file or
      directory would raise two events. From the previous example, if you moved a file
      from "My Documents" to "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event would be raised by FileSystemWatcher2 and a
   <see cref="System.IO.FileSystemWatcher.Deleted"/> event would be raised by FileSystemWatcher1.
      </para>
			<note type="note">
      Common file system operations might raise
      more than one event. For example, when a file is moved from one directory to
      another, several <see cref="System.IO.FileSystemWatcher.OnChanged"/> and some <see cref="System.IO.FileSystemWatcher.OnCreated"/> and <see cref="System.IO.FileSystemWatcher.OnDeleted"/> events might be raised. Moving a
      file is a complex operation that consists of multiple
      simple operations, therefore raising multiple events. Likewise, some
      applications (for example, anti-virus software) might cause additional file
      system events that are detected by <see cref="System.IO.FileSystemWatcher"/>.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher.Deleted"/>
		<seealso cref="System.IO.FileSystemWatcher.OnDeleted"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
		<seealso cref="System.IO.FileSystemWatcher.OnCreated"/>
	</doc>
	<doc for="FileSystemWatcher.Deleted">
		<summary>
			<para> Occurs when a file or directory in the specified <see cref="System.IO.FileSystemWatcher.Path"/>
is deleted.</para>
		</summary>
		<remarks>
			<para> Some common occurrences, such as copying or moving a
      file or directory, do not correspond directly to an event, but these occurrences
      do cause events to be raised. When you copy a file or directory, the system
      raises a <see cref="System.IO.FileSystemWatcher.Created"/> event in the directory to which
      the file was copied, if that directory is being watched. If the directory from
      which you copied was being watched by another instance of <see cref="System.IO.FileSystemWatcher"/>,
      no event would be raised. For example, you create two instances of <see cref="System.IO.FileSystemWatcher"/>.
      FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is
      set to watch "C:\Your Documents". Now, if you copy a file from "My Documents"
      into "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event will be raised by
      FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike
      copying, moving a file or directory would raise two events. From the previous
      example, if you moved a file from "My Documents" to "Your Documents", a <see cref="System.IO.FileSystemWatcher.Created"/> event would be raised by
      FileSystemWatcher2 and a <see cref="System.IO.FileSystemWatcher.Deleted"/> event would be raised by FileSystemWatcher1.
      </para>
			<note type="note">
      Common file system operations might raise
      more than one event. For example, when a file is moved from one directory to
      another, several <see cref="System.IO.FileSystemWatcher.OnChanged"/> and some <see cref="System.IO.FileSystemWatcher.OnCreated"/> and <see cref="System.IO.FileSystemWatcher.OnDeleted"/> events might be raised. Moving a
      file is a complex operation that consists of multiple
      simple operations, therefore raising multiple events. Likewise, some
      applications (for example, anti-virus software) might cause additional file
      system events that are detected by <see cref="System.IO.FileSystemWatcher"/>.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher.Created"/>
		<seealso cref="System.IO.FileSystemWatcher.OnCreated"/>
		<seealso cref="System.IO.FileSystemEventArgs"/>
		<seealso cref="System.IO.FileSystemEventHandler"/>
		<seealso cref="System.IO.FileSystemWatcher.OnDeleted"/>
	</doc>
	<doc for="FileSystemWatcher.Renamed">
		<summary>
			<para> Occurs when a file or directory in the specified <see cref="System.IO.FileSystemWatcher.Path"/>
is renamed.</para>
		</summary>
		<remarks>
			<para> Renaming the directory you are watching will not raise a notification.
      Notifications are only raised for entries inside the directory you are
      watching.
      </para>
		</remarks>
		<example>
			<codelink SampleID="Classic NotifyFilters Example" SnippetID="1"/>
		</example>
		<seealso cref="System.IO.FileSystemWatcher.OnRenamed"/>
		<seealso cref="System.IO.FileSystemWatcher.Path"/>
		<seealso cref="System.IO.RenamedEventArgs"/>
		<seealso cref="System.IO.RenamedEventHandler"/>
	</doc>
</docs>
