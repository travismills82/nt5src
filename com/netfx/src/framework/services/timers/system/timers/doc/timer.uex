<docs>
	<doc for="Timer.Site">
		<summary>
			<para>
       Sets the enable property in design mode to true by default.
    </para>
		</summary>
	</doc>
	<doc for="Timer.CompletionCallback">
		<internalonly/>
	</doc>
	<doc for="Timer.TimerCallback">
		<summary>
			<para>
       Callback function that emulates the thread-pool
      waitable timer behavior, it will be called by the
      SystemEvents message pump. 
    </para>
		</summary>
	</doc>
	<doc for="Timer.Timer">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Timers.Timer"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Timers.Timer"/> class, and sets all the properties
   to their initial values.</para>
		</summary>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Timers.Timer"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Timers.Timer.AutoReset"/>
					</term>
					<description>
						<see langword="true"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Timers.Timer.Enabled"/>
					</term>
					<description>
						<see langword="false"/>
					</description>
				</item>
				<item>
					<term>
						<see cref="System.Timers.Timer.Interval"/>
					</term>
					<description>100 milliseconds</description>
				</item>
				<item>
					<term>
						<see cref="System.Timers.Timer.SynchronizingObject"/>
					</term>
					<description>
						<see langword="null"/>
					</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Timers.Timer"/> that displays "Hello World!" on the
   console every five seconds.</para>
			<para>Use the <see cref="System.Timers"/> namespace for this example.</para>
			<codelink SampleID="Classic Timer Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.AutoReset"/>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.Interval"/>
		<seealso cref="System.Timers.Timer.SynchronizingObject"/>
	</doc>
	<doc for="Timer.Timer1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Timers.Timer"/> class, and sets the <see cref="System.Timers.Timer.Interval"/> property to the specified time period.</para>
		</summary>
		<param name="interval">The time, in milliseconds, between events.</param>
		<exception cref="T:System.ArgumentException">The value of the <paramref name="interval"/> parameter is less than zero.</exception>
		<example>
			<para>The following example creates a <see cref="System.Timers.Timer"/> that displays "Hello World!"
   on the console after ten seconds.</para>
			<para>Use the <see cref="System.Timers"/> namespace for this example.</para>
			<codelink SampleID="Classic Timer.Timer1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.Interval"/>
	</doc>
	<doc for="Timer.Finalize">
		<summary>
			<para> Closes the <see cref="System.Timers.Timer"/>, and releases the
   object's resources.
   </para>
		</summary>
		<seealso cref="System.Timers.Timer.Close"/>
	</doc>
	<doc for="Timer.Dispose1">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Timer.Close">
		<summary>
			<para> Releases the resources used by
      the <see cref="System.Timers.Timer"/>.</para>
		</summary>
	</doc><doc for="Timer.Dispose">
		<internalonly/>
		<summary>
			<para> Disposes of
      the <see cref="System.Timers.Timer"/>.</para>
		</summary>
		<remarks>
			<para>This implementation calls the <see cref="System.Timers.Timer.Close"/> method.</para>
		</remarks>
		<seealso cref="System.Timers.Timer.Close"/>
	</doc><doc for="Timer.Interval">
		<summary>
			<para> Gets or sets the interval at which to raise the <see cref="System.Timers.Timer.Elapsed"/>
event.</para>
		</summary>
		<value>
			<para> The time, in milliseconds, between raisings of the
      <see cref="System.Timers.Timer.Elapsed"/> event. The default is 100
      milliseconds.</para>
		</value>
		<exception cref="T:System.ArgumentException">The interval is less than zero.</exception>
		<remarks>
			<para>If the interval is set
   after the <see cref="System.Timers.Timer"/> has started,
   the count is reset. For example, if you set the interval
   to 5 seconds and then set the <see cref="System.Timers.Timer.Enabled"/> property to <see langword="true"/>, the count starts at the
   time <see cref="System.Timers.Timer.Enabled"/> is set. If you reset
the interval to 10 seconds when count is 3
   seconds, the <see cref="System.Timers.Timer.Elapsed"/> event is raised for the first time 13 seconds after
<see cref="System.Timers.Timer.Enabled"/> was set to <see langword="true"/>.</para>
			<para>If <see cref="System.Timers.Timer.Enabled"/> is set to <see langword="true"/> and <see cref="System.Timers.Timer.AutoReset"/> is set to <see langword="false"/>, the <see cref="System.Timers.Timer"/> raises the <see cref="System.Timers.Timer.Elapsed"/> event only once, the first time
the interval elapses.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Timers.Timer"/> that displays "Hello World!" on the
   console every five seconds.</para>
			<para>Use the <see cref="System.Timers"/> namespace for this example.</para>
			<codelink SampleID="Classic Timer Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.AutoReset"/>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
	</doc><doc for="Timer.BeginInit">
		<summary>
			<para>Begins the run-time initialization of a <see cref="System.Timers.Timer"/> that is used on a form or by another component.</para>
		</summary>
		<remarks>
			<para> The Visual Studio .NET design environment uses this method to start the initialization of
      a component that is used on a form or by another component. The <see cref="System.Timers.Timer.EndInit"/>
      method ends the initialization. Using the <see cref="System.Timers.Timer.BeginInit"/> and <see cref="System.Timers.Timer.EndInit"/> methods prevents
      the control from being used before it is fully initialized.</para>
		</remarks>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.EndInit"/>
		<seealso cref="System.Timers.Timer.Interval"/>
	</doc><doc for="Timer.EndInit">
		<summary>
			<para> Ends the run-time initialization of a <see cref="System.Timers.Timer"/> that
   is used on a form or by another component.</para>
		</summary>
		<remarks>
			<para> The Visual Studio .NET design
      environment uses this method to end the initialization of a component that is used on a
      form or by another component. The <see cref="System.Timers.Timer.BeginInit"/> method starts the
      initialization. Using the <see cref="System.Timers.Timer.BeginInit"/> and <see cref="System.Timers.Timer.EndInit"/> methods prevents the
      control from being used before it is fully initialized.</para>
		</remarks>
		<seealso cref="System.Timers.Timer.BeginInit"/>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.Interval"/>
	</doc><doc for="Timer.AutoReset">
		<summary>
			<para> Gets or sets a value indicating whether the <see cref="System.Timers.Timer"/> should raise the <see cref="System.Timers.Timer.Elapsed"/> event each time the specified
   interval elapses or only after the first
   time it elapses.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
<see cref="System.Timers.Timer"/> should raise the <see cref="System.Timers.Timer.Elapsed"/> event
   each time the interval elapses; <see langword="false"/> if it should raise the <see cref="System.Timers.Timer.Elapsed"/> event only once, after the first time
   the interval elapses. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para> If the <see cref="System.Timers.Timer"/> is already enabled
   when the <see cref="System.Timers.Timer.Start"/> method is called,
   the interval is reset.
   If <see cref="System.Timers.Timer.AutoReset"/> is <see langword="false"/>, the <see cref="System.Timers.Timer.Start"/> method must be called in order to
   start the count again.</para>
			<para>Resetting the interval affects when the <see cref="System.Timers.Timer.Elapsed"/> event
is raised.
For example, if you set the interval
to 5 seconds and then set the <see cref="System.Timers.Timer.Enabled"/> property to <see langword="true"/>, the count starts at the
time <see cref="System.Timers.Timer.Enabled"/> is set. If you reset
the interval to 10 seconds when the count is 3
seconds, the <see cref="System.Timers.Timer.Elapsed"/> event is raised for the first time 13 seconds after the
<see cref="System.Timers.Timer.Enabled"/> property was set to <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Timers.Timer"/> that displays "Hello World!"
   on the console after ten seconds.</para>
			<para>Use the <see cref="System.Timers"/> namespace for this example.</para>
			<codelink SampleID="Classic Timer.Timer1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.Interval"/>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.Start"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
	</doc><doc for="Timer.Enabled">
		<summary>
			<para> Gets or sets a value indicating whether the <see cref="System.Timers.Timer"/> should raise the <see cref="System.Timers.Timer.Elapsed"/>
event.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
<see cref="System.Timers.Timer"/> should raise the <see cref="System.Timers.Timer.Elapsed"/>
event; otherwise, <see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Setting <see cref="System.Timers.Timer.Enabled"/> to <see langword="true"/> is the same as calling
<see cref="System.Timers.Timer.Start"/>, while setting <see cref="System.Timers.Timer.Enabled"/> to <see langword="false"/> is the same as
   calling <see cref="System.Timers.Timer.Stop"/>.</para>
			<para>If <see cref="System.Timers.Timer.Enabled"/> is 
set to <see langword="true"/> and <see cref="System.Timers.Timer.AutoReset"/> is set to <see langword="false"/>, the <see cref="System.Timers.Timer"/> raises the <see cref="System.Timers.Timer.Elapsed"/> event only once, the first time
the interval elapses.</para>
			<para>If the interval is set
   after the <see cref="System.Timers.Timer"/> has started,
   the count is reset. For example, if you set the interval
   to 5 seconds and then set the <see cref="System.Timers.Timer.Enabled"/> property to <see langword="true"/>, the count starts at the
   time <see cref="System.Timers.Timer.Enabled"/> is set. If you reset
   the interval to 10 seconds when count is 3
   seconds, the <see cref="System.Timers.Timer.Elapsed"/> event is raised for the first time 13 seconds after
<see cref="System.Timers.Timer.Enabled"/> was set to <see langword="true"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Timers.Timer"/> that displays "Hello World!" on the
   console every five seconds.</para>
			<para>Use the <see cref="System.Timers"/> namespace for this example.</para>
			<codelink SampleID="Classic Timer Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.Interval"/>
		<seealso cref="System.Timers.Timer.AutoReset"/>
		<seealso cref="System.Timers.Timer.Start"/>
		<seealso cref="System.Timers.Timer.Stop"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
	</doc><doc for="Timer.Start">
		<summary>
			<para>Starts raising the <see cref="System.Timers.Timer.Elapsed"/> event by setting <see cref="System.Timers.Timer.Enabled"/> to <see langword="true"/>.</para>
		</summary>
		<remarks>
			<para>If <see cref="System.Timers.Timer.Enabled"/> is 
   set to <see langword="true"/> and <see cref="System.Timers.Timer.AutoReset"/> is set to <see langword="false"/>, the <see cref="System.Timers.Timer"/> raises the <see cref="System.Timers.Timer.Elapsed"/> event only once, the first time he
   interval elapses. When <see cref="System.Timers.Timer.Enabled"/> is <see langword="true"/> and <see cref="System.Timers.Timer.AutoReset"/>
   is <see langword="true"/>, the <see cref="System.Timers.Timer"/> continues to raise the <see cref="System.Timers.Timer.Elapsed"/> event on the specified interval.</para>
			<para>You can also start timing by setting <see cref="System.Timers.Timer.Enabled"/> to <see langword="true"/>.</para>
			<note type="note">
   
   If <see cref="System.Timers.Timer.AutoReset"/> is <see langword="false"/>, the <see cref="System.Timers.Timer.Start"/> method must be called in order to
   start the count again.
   
</note>
		</remarks>
		<seealso cref="System.Timers.Timer.Interval"/>
		<seealso cref="System.Timers.Timer.AutoReset"/>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.Stop"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
	</doc><doc for="Timer.Stop">
		<summary>
			<para>Stops raising the <see cref="System.Timers.Timer.Elapsed"/> event by setting <see cref="System.Timers.Timer.Enabled"/> to <see langword="false"/>.</para>
		</summary>
		<remarks>
			<para>You can also stop timing by setting <see cref="System.Timers.Timer.Enabled"/> to <see langword="false"/>.</para>
			<note type="note">
   The event-handling method might be called even after
   the <see cref="System.Timers.Timer.Stop"/> method is called. The <see cref="System.Timers.Timer"/>
   component is multithreaded to ensure more accuracy. However, this means that the call
   to the event-handling method might run on one thread at the same time
   that a call to the <see cref="System.Timers.Timer.Stop"/> method runs on another thread. This might result
   in the <see cref="System.Timers.Timer.Elapsed"/> event being raised even after the <see cref="System.Timers.Timer.Stop"/> method
   is called. To prevent this, use the <see cref="System.Timers.ElapsedEventArgs.SignalTime"/> property to compare the time the event was raised
   to the time the <see cref="System.Timers.Timer.Stop"/> method was called. If the event was raised
   after the <see cref="System.Timers.Timer.Stop"/> method was called, do not process the
   event.
</note>
		</remarks>
		<seealso cref="System.Timers.Timer.Enabled"/>
		<seealso cref="System.Timers.Timer.Start"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
	</doc>
	<doc for="Timer">
		<summary>
			<para>Generates recurring events in an application.</para>
		</summary>
		<threadsafe>
			<para>Any public <see langword="static"/>
members of this type are safe for
multithreaded operations. Any instance members are not guaranteed to be thread safe.</para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.Timers.Timer"/> component
   is a server-based timer, which allows you to specify a recurring interval at
   which the <see cref="System.Timers.Timer.Elapsed"/>
   event is raised in
   your application. You can then handle this event to provide regular processing.
   For example, suppose you have a critical server that must be kept running 24 hours
   a day, 7 days a week. You could create a service that uses a <see cref="System.Timers.Timer"/> to
   periodically check the server and ensure that the system is up and running. If the system
   is not responding, the service could attempt to restart the server or notify an
   administrator.</para>
			<para>The server-based <see cref="System.Timers.Timer"/>
is designed for use with worker threads in a
multithreaded environment. Server timers can move among threads to handle the
raised <see cref="System.Timers.Timer.Elapsed"/> event,
resulting in more accuracy than Windows timers in raising the event on time. For
more information on server-based timers, see <see topic="cpconServerBasedTimers" title="Introduction to Server-Based Timers"/>.</para>
			<note type="note">
   The event-handling method might be called even after
   the <see cref="System.Timers.Timer.Stop"/>
   method is
   called. The event-handling method might run on one thread at the same time
   that a call to the <see cref="System.Timers.Timer.Stop"/> method runs on another thread. This might result
   in the <see cref="System.Timers.Timer.Elapsed"/> event being raised even after the <see cref="System.Timers.Timer.Stop"/> method
   is called. To prevent this, use the <see cref="System.Timers.ElapsedEventArgs.SignalTime"/> property to compare the time the event was raised
   to the time the <see cref="System.Timers.Timer.Stop"/> method was called. If the event was raised
   after the <see cref="System.Timers.Timer.Stop"/> method was called, do not process the
   event.
</note>
			<para>The <see cref="System.Timers.Timer"/> component raises the <see cref="System.Timers.Timer.Elapsed"/> event,
based
on the value of the <see cref="System.Timers.Timer.Interval"/> property. You can handle this event to perform
the processing you need. For example, suppose that you have an online sales
application that continuously posts sales orders to a database. The service that
compiles the instructions for shipping operates on a batch of orders rather than
processing each order individually. You could use a <see cref="System.Timers.Timer"/>
to start the batch processing every 30 minutes.</para>
			<note type="note">
   When <see cref="System.Timers.Timer.AutoReset"/> is set
   to <see langword="false"/>, the <see cref="System.Timers.Timer"/> raises the <see cref="System.Timers.Timer.Elapsed"/> event only
   once, after the first <see cref="System.Timers.Timer.Interval"/> has elapsed. To keep raising
   the <see cref="System.Timers.Timer.Elapsed"/> event on the <see cref="System.Timers.Timer.Interval"/>,
   set <see cref="System.Timers.Timer.AutoReset"/> to <see langword="true"/>.
   
</note>
			<para>The <see cref="System.Timers.Timer"/> is not visible at run time.</para>
			<para>For a list of initial property values for an instance of <see cref="System.Timers.Timer"/>, see the
<see cref="System.Timers.Timer()"/> constructor.</para>
		</remarks>
		<example>
			<para>The following example creates a <see cref="System.Timers.Timer"/> that displays "Hello World!" on the
   console every five seconds.</para>
			<para>Use the <see cref="System.Timers"/> namespace for this example.</para>
			<codelink SampleID="Classic Timer Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.AutoReset"/>
		<seealso cref="System.Timers.Timer.Interval"/>
		<seealso topic="cpconServerBasedTimers" title="Introduction to Server-Based Timers"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
		<seealso cref="System.Timers.Timer()"/>
	</doc>
	<doc for="Timer.SynchronizingObject">
		<summary>
			<para> Gets or sets the object used to marshal event-handler calls that are issued when
      an interval has elapsed.</para>
		</summary>
		<value>
			<para>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>
representing the object used to marshal
the event-handler calls that are issued when an interval has elapsed. The
default is <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Timers.Timer.SynchronizingObject"/> is <see langword="null"/>, the method
   that handles the <see cref="System.Timers.Timer.Elapsed"/> event is called on a thread from
   the system-thread pool. For more information on system-thread pools, see <see cref="T:System.Threading.ThreadPool"/>.</para>
			<para>When the <see cref="System.Timers.Timer.Elapsed"/> event is handled by a visual
Windows Forms component, such as a button,
accessing the component through the system-thread pool
might result in an exception or just might not work. Avoid this effect by setting
<see cref="System.Timers.Timer.SynchronizingObject"/> to a Windows Forms component, which causes the method
that handles the <see cref="System.Timers.Timer.Elapsed"/> event to be called on the same thread that the
component was created on.</para>
			<para>If the <see cref="System.Timers.Timer"/> is used inside Visual Studio in a Windows Forms
designer, <see cref="System.Timers.Timer.SynchronizingObject"/> is automatically set to the control that contains
the <see cref="System.Timers.Timer"/>. For example, if you place a <see cref="System.Timers.Timer"/> on a
designer for Form1 (which inherits from <see cref="T:System.Windows.Forms.Form"/>), the <see cref="System.Timers.Timer.SynchronizingObject"/> property of <see cref="System.Timers.Timer"/> is set to the instance of
Form1.</para>
		</remarks>
		<seealso cref="T:System.Windows.Forms.Form"/>
		<seealso cref="T:System.ComponentModel.ISynchronizeInvoke"/>
		<seealso cref="T:System.Threading.ThreadPool"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
	</doc>
	<doc for="Timer.Tick">
		<summary>
			<para>Occurs when the interval elapses.</para>
		</summary>
		<remarks>
			<para>If <see cref="System.Timers.Timer.Enabled"/> is
   set to <see langword="true"/> and <see cref="System.Timers.Timer.AutoReset"/> is set to <see langword="false"/>, the <see cref="System.Timers.Timer"/> raises the <see cref="System.Timers.Timer.Elapsed"/> event only once, the first time the
   interval elapses.</para>
			<para>If <see cref="System.Timers.Timer.Interval"/> is set
after the <see cref="System.Timers.Timer"/> has started,
the count is reset. For example, if you set the interval
to 5 seconds and then set <see cref="System.Timers.Timer.Enabled"/> to <see langword="true"/>, the count starts at the
time <see cref="System.Timers.Timer.Enabled"/> is set. If you reset
the interval to 10 seconds when count is 3
seconds, the <see cref="System.Timers.Timer.Elapsed"/> event is raised for the first time 13 seconds after
<see cref="System.Timers.Timer.Enabled"/> was set to <see langword="true"/>.</para>
			<note type="note">
   The event-handling method might be called even after
   the <see cref="System.Timers.Timer.Stop"/> method is called. The <see cref="System.Timers.Timer"/>
   component is multithreaded to ensure more accuracy. However, this means that the call
   to the event-handling method might run on one thread at the same time
   that a call to the <see cref="System.Timers.Timer.Stop"/> method runs on another thread. This might result
   in the <see cref="System.Timers.Timer.Elapsed"/> event being raised even after the <see cref="System.Timers.Timer.Stop"/> method
   is called. To prevent this, use the <see cref="System.Timers.ElapsedEventArgs.SignalTime"/> property to compare the time the event was raised
   to the time the <see cref="System.Timers.Timer.Stop"/> method was called. If the event was raised
   after the <see cref="System.Timers.Timer.Stop"/> method was called, do not process the
   event.
</note>
		</remarks>
		<example>
			<codelink SampleID="Classic Timer Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Timers.Timer.Interval"/>
		<seealso cref="System.Timers.Timer.AutoReset"/>
		<seealso cref="System.Timers.Timer.Elapsed"/>
		<seealso cref="System.Timers.ElapsedEventArgs"/>
		<seealso cref="System.Timers.ElapsedEventHandler"/>
		<seealso cref="System.Timers.Timer.Enabled"/>
	</doc>
</docs>
