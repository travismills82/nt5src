<docs>
	<doc for="EventLogEntry.EventLogEntry">
		<summary>
		</summary>
		<seealso cref="ISerializable"/>
	</doc>
	<doc for="EventLogEntry.Size">
		<summary>
     Retrieves the size, in bytes, of this entry, as stored in the system.
 </summary>
	</doc>
	<doc for="EventLogEntry.FormatMessageWrapper">
		<summary>Calls Win32's FormatMessage on the given dll, getting the message identified by
     messageNum. If the message requires insertion strings, they should be passed in
     insertionStrings. If the DLL cannot be found, the return value will be null.</summary>
	</doc>
	<doc for="EventLogEntry.TranslateEnvironmentVars">
		<summary>Translates a string with %envvar%-type parts and substitutes the real
     value of the environment variable.</summary>
	</doc>
	<doc for="EventLogEntry.ISerializable.GetObjectData">
		<summary>
			<para>
       Saves an entry as a stream of data.
       
    </para>
		</summary>
		<param name="info">
    The <see cref="T:System.IO.Stream"/> that writes the chunk containing the <see cref="System.Diagnostics.EventLogEntry"/> to disk.
 </param>
		<param name="context">
     A streaming context.
 </param>
		<remarks>
			<para>
       This method performs a byte-wise write of the entry to disk.
       
    </para>
		</remarks>
	</doc>
	<doc for="EventLogEntry.FieldOffsets">
		<summary>
     Stores the offsets from the beginning of the record to fields within the record.
 </summary>
	</doc>
	<doc for="EventLogEntry.CategoryNumber">
		<summary>
			<para> Gets the entry's category number.
 
 </para>
		</summary>
		<value>
			<para> The application-specific category number for this entry .
 
 </para>
		</value>
		<remarks>
			<para>Each application (event source) can define its own numbered categories and 
 the text strings to which they are mapped. The Event Viewer can use the category
 to filter events in the log. The categories must be numbered consecutively
 beginning with the number 1.</para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLogEntry.EntryType"/>
		<seealso cref="System.Diagnostics.EventLogEntry.Category"/>
	</doc><doc for="EventLogEntry.ReplacementStrings">
		<summary>
			<para> Gets the replacement strings
 associated with the entry.
 
 </para>
		</summary>
		<value>
			<para> An array of type <see cref="System.String"/> that holds the insertion strings stored in the event
 entry.
 </para>
		</value>
		<remarks>
			<para> This member retrieves only the replacement strings for 
 the entry. To get the full message, read the <see cref="System.Diagnostics.EventLogEntry.Message"/>
 property.
 
 </para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLogEntry.Message"/>
	</doc><doc for="EventLogEntry.MachineName">
		<summary>
			<para> Gets the name of the computer on which this entry was generated.
 
 </para>
		</summary>
		<value>
			<para> 
 The name of the computer that contains the event log.
 
 </para>
		</value>
	</doc><doc for="EventLogEntry.Equals">
		<overload>Performs a comparison between two items.</overload>
		<summary>
			<para> Performs a comparison between two event log entries.
 
 </para>
		</summary>
		<param name="otherEntry">The <see cref="System.Diagnostics.EventLogEntry"/> to compare. </param>
		<returns>
			<para><see langword="true "/>if the <see cref="System.Diagnostics.EventLogEntry"/> objects are
 identical; otherwise, <see langword="false"/>.
 </para>
		</returns>
		<remarks>
			<para> This method performs a byte-by-byte comparison
 between the two objects. It does not determine whether the two <see cref="System.Diagnostics.EventLogEntry"/> instances refer to the same object.
 </para>
		</remarks>
	</doc><doc for="EventLogEntry.Data">
		<summary>
			<para> Gets the binary data associated with the entry.
 
 </para>
		</summary>
		<value>
			<para> An array of bytes that holds the binary data associated
 with the entry.</para>
		</value>
		<remarks>
			<para> Getting this property creates
 an array that holds a copy of the entry's event-specific
 binary data, which the Event Viewer displays in combined hexadecimal and text format.
 Event-specific data is sometimes used to store information that the application will process independently
 of the Event Viewer, for example, to make reports from the log
 file.
 
 </para>
		</remarks>
	</doc><doc for="EventLogEntry.UserName">
		<summary>
			<para> Gets the name of
 the user who's responsible for this event.
 </para>
		</summary>
		<value>
			<para> The security identifier (SID) that uniquely identifies a user or group.
 </para>
		</value>
		<exception cref="System.SystemException">Account information could not be obtained for the user's SID. </exception>
		<remarks>
			<para> This property is often blank for events in logs other than the Security
 log.
 </para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLogEntry.Source"/>
	</doc><doc for="EventLogEntry.Index">
		<summary>
			<para> Gets the index of this entry in the event
      log.
      </para>
		</summary>
		<value>
			<para> The index of this entry in the event log.
      </para>
		</value>
		<remarks>
			<para> This number is not necessarily zero based.
      </para>
			<para>
			</para>
		</remarks>
	</doc><doc for="EventLogEntry.Category">
		<summary>
			<para> Gets the text associated with the <see cref="System.Diagnostics.EventLogEntry.CategoryNumber"/> for this entry.
   </para>
		</summary>
		<value>
			<para> The application-specific category text.
      
   </para>
		</value>
		<exception cref="System.Exception">The space could not be allocated for one of the insertion strings associated with the category. </exception>
		<remarks>
			<para>
			</para>
			<para> Each application (event source) can define its own
      numbered categories and the text strings to which they are mapped. The text strings associated with the category are stored in the computer's
      registry. The Event Viewer can use the category to
      filter events in the log.
      
   </para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLogEntry.CategoryNumber"/>
	</doc><doc for="EventLogEntry.EventID">
		<summary>
			<para> Gets the application-specific event identifier of this event entry.
      
   </para>
		</summary>
		<value>
			<para>The application-specific identifier for the event. </para>
		</value>
		<remarks>
			<para> Event identifiers, together with the event
      source, uniquely identify an event.
      
   </para>
		</remarks>
	</doc>
	<doc for="EventLogEntry">
		<summary>
			<para>Encapsulates a single record in
      the event log. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>You usually will not create instances of <see cref="System.Diagnostics.EventLogEntry"/> directly when working with the <see cref="System.Diagnostics.EventLog"/>
class. The <see cref="System.Diagnostics.EventLog.Entries"/> member of the <see cref="System.Diagnostics.EventLog"/>
class contains a collection of <see cref="System.Diagnostics.EventLogEntry"/>
instances, which you iterate over when reading by using the <see cref="System.Diagnostics.EventLogEntryCollection.this" qualify="true"/> class index member.</para>
		</remarks>
		<example>
			<codelink SampleID="EventLogEntry_Source" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog"/>
		<seealso cref="System.Diagnostics.EventLogEntryCollection"/>
	</doc><doc for="EventLogEntry.TimeGenerated">
		<summary>
			<para> Gets the local time at which this event was generated.
      
      </para>
		</summary>
		<value>
			<para> A <see cref="System.DateTime"/> that
   represents the local time at which this event was generated.
   </para>
		</value>
		<remarks>
			<para> This member holds the time that an event was generated.
      This might not be the same as the time when the event information was written to
      the event log. For the latter, read the <see cref="System.Diagnostics.EventLogEntry.TimeWritten"/>
      property.
      </para>
			<para>Thereâ€™s almost always going to be a lag between the time something happens and the time it is logged, if only milliseconds. Usually, it is more important to know when the event was generated, unless you want to see if there is a significant lag in logging. That can happen if your log files are on a different server and you are experiencing a bottleneck.
      </para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLogEntry.TimeWritten"/>
	</doc>
	<doc for="EventLogEntry.TimeWritten">
		<summary>
			<para> Gets the local time at which this event was written to the log.
      
      </para>
		</summary>
		<value>
			<para> A <see cref="System.DateTime"/> that
   represents the
   local time at which this event was written to the log.
   </para>
		</value>
		<remarks>
			<para> This member holds the time that an event's information is written
      to the event log. This might not be the same time as when the event was generated. For the
      latter, read the <see cref="System.Diagnostics.EventLogEntry.TimeGenerated"/> property.</para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLogEntry.TimeGenerated"/>
	</doc>
	<doc for="EventLogEntry.EntryType">
		<summary>
			<para> Gets the event type
      of this entry.
      
      </para>
		</summary>
		<value>
			<para> The <see cref="System.Diagnostics.EventLogEntryType"/> that
   indicates the event type associated with the entry in the event log. This is
   usually used to indicate the severity of the event log entry.</para>
		</value>
		<remarks>
			<para>All event types have well-defined common data and can optionally include event-specific data. Each event is
      of a single type, which the application indicates when it reports the
      event. The Event Viewer uses the event type to determine which icon, representing the
      severity of the entry, to display in the list view of the event log. </para>
		</remarks>
		<example>
			<codelink SampleID="EventLogEntry_Source" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntry.CategoryNumber"/>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
	</doc>
	<doc for="EventLogEntry.Source">
		<summary>
			<para> Gets the name of the application that generated this event.
      </para>
		</summary>
		<value>
			<para> The name registered with the event log as the
      source of this event.
      </para>
		</value>
		<remarks>
			<para>The event source indicates what logged the event. It is often the name of the
      application, or the name of a subcomponent of the application if the
      application is large. Applications and services usually write to (and therefore
      are sources for) the Application log or a custom log. Device drivers
      usually write to the System log.</para>
		</remarks>
		<example>
			<codelink SampleID="EventLogEntry_Source" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source" qualify="true"/>
	</doc>
	<doc for="EventLogEntry.Message">
		<summary>
			<para> Gets the localized message associated with this event entry.
      
      </para>
		</summary>
		<value>
			<para> The formatted, localized text for the message. This includes associated
      replacement strings.
      
      </para>
		</value>
		<exception cref="System.Exception">The space could not be allocated for one of the insertion strings associated with the message. </exception>
		<remarks>
			<para> Getting this property opens the registry to determine the filename
      of the .dll file containing the localized text. If you receive a registry
      error when testing your source code, verify the .dll file's existence on
      the computer. If insertion strings are included in the message, catch
      errors in their allocation.
      
      </para>
		</remarks>
		<example>
			<codelink SampleID="Classic EventLog.Entries Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
