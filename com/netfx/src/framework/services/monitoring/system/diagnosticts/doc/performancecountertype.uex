<docs>
	<doc for="PerformanceCounterType.AverageBase">
		<summary>
			<para> A base counter that is used in the calculation of time or count
      averages, such as <see langword="AverageTimer32"/> and
   <see langword="AverageCount64"/> . Stores the denominator
      for calculating a counter to present "time per operation" or "count per
      operation".</para>
		</summary>
	</doc><doc for="PerformanceCounterType.AverageTimer32">
		<summary>
			<para> 
      An average counter that measures the time it takes,
      on average, to complete a process or operation. Counters of this
      type display a ratio of the total elapsed time of the sample interval to the
      number of processes or operations completed during that time. This counter type measures time in ticks
      of the system
      
      clock.</para>
			<para>Formula: ((N<subscript term="1"/>-N<subscript term="0"/>)/F)/(B<subscript term="1"/>-B<subscript term="0"/>), 
   where N<subscript term="1"/> and N<subscript term="0"/> are performance counter readings,
   B<subscript term="1"/> and B<subscript term="0"/> are their corresponding
<see langword="AverageBase"/> values, and F is the number of ticks per second. 
   The value of F is factored into the equation so that the result can be displayed
   in seconds. Thus, the numerator represents the numbers of ticks counted during
   the last sample interval, F represents the frequency of the ticks, and the
   denominator represents the number of operations completed during the last sample
   interval.</para>
			<para>Counters of this type include PhysicalDisk\ Avg. Disk sec/Transfer.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterDelta32">
		<summary>
			<para>A difference counter that shows the change in the measured attribute between 
      the two most recent sample intervals.</para>
			<para><subscript term=""/>
			</para>
			<para>Formula: N<subscript term="1"/>-N<subscript term="0"/>, where N<subscript term="1"/> and N<subscript term="0"/> 
are performance counter readings.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterDelta64">
		<summary>
			<para>A difference counter that shows the change in the 
      measured attribute between the two most recent sample intervals. It is the same
      as the <see langword="CounterDelta32"/>
      counter type except that is uses larger fields to accomodate larger values.</para>
			<para>Formula: N<subscript term="1"/>-N<subscript term="0"/>, where N<subscript term="1"/> and N<subscript term="0"/> 
are performance counter readings.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterMultiTimer100Ns">
		<summary>
			<para>A percentage counter that shows the active time of one or more 
      components as a percentage of the total time of the sample interval. It measures
      time in 100 nanosecond (ns) units.</para>
			<para>This counter type is a multitimer. Multitimers are designed to monitor more 
      than one instance of a component, such as a processor or disk.</para>
			<para>Formula: ((N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 
   "/>- D<subscript term="0"/>)) x 100 / B, where N<subscript term="1"/> and N<subscript term="0"/>
   are performance counter readings, D<subscript term="1"/> and D<subscript term="0"/> are their
   corresponding time readings in 100-nanosecond units, and the variable B denotes
   the base count for the monitored components (using a base counter of type
<see langword="CounterMultiBase"/> 
).
Thus, the numerator represents the portions of the sample interval during
which the monitored components were active, and the denominator represents the total elapsed time
of the sample interval.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterTimerInverse">
		<summary>
			<para>A percentage counter that displays the average 
      percentage of active time observed during sample interval. The value of these
      counters is calculated by monitoring the percentage of time that the service was
      inactive and then subtracting
      that value from 100 percent.</para>
			<para>This is an inverse counter type. Inverse counters measure the time that a 
      component is note active and derive the active time from that
      measurement. This counter type is the same as
   <see langword="CounterTimer100NsInv"/> except that it measures time in units of 
      ticks of the system performance timer rather than in 100 nanosecond units.</para>
			<para>Formula: (1- ((N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- 
   D<subscript term="0"/>))) x 100, where the numerator represents the time during the
   interval when the monitored components were inactive, and the denominator
   represents the total elapsed time of the sample interval.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CountPerTimeInterval32">
		<summary>
			<para>An average counter designed to monitor the average 
      length of a queue to a resource over time. It shows the difference between the
      queue lengths observed during the last two sample intervals<see langword=" "/>divided by
      the duration of the interval. This
      type of counter is typically used to track the number of items that are queued or waiting.</para>
			<para>Formula: (N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- D<subscript term="0"/>), 
   where the numerator represents the number of items in the queue and the
   denominator represents the time elapsed during the last sample interval.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CountPerTimeInterval64">
		<summary>
			<para>An average counter that monitors the average length of a 
      queue to a resource over time. Counters of this type display the difference
      between the queue lengths observed during the last two sample intervals,<see langword=" "/>divided by the duration of the interval. This counter type is the same
      as <see langword="CountPerTimeInterval32"/> except that it uses larger
      fields to accommodate larger values. This type
      of counter is typically used to track a high-volume or very large number of
      items that are queued or waiting.</para>
			<para>Formula: (N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- D<subscript term="0"/>), 
   where the numerator represents the number of items in a queue and the
   denominator represents the time elapsed during the sample interval.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterMultiTimerInverse">
		<summary>
			<para>A percentage counter that shows the active time of one 
      or more components as a percentage of the total time of the sample interval. It
      derives the active time by measuring the time that the components were not
      active and subtracting the result from 100 percent by the number of objects
      monitored.</para>
			<para>This counter type is an inverse multitimer. Multitimers 
      monitor more than one instance of a component, such as a processor or disk.
      Inverse counters measure the time that a component is not active and derive its active time from
      that measurement.</para>
			<para>This counter differs from 
   <see langword="CounterMultiTimer100NsInverse"/> in that it measures time 
      in units of ticks of the system performance timer, rather than in 100 nanosecond
      units.</para>
			<para>Formula: (B- ((N<subscript term="1 "/>- N<subscript term="0"/>) / 
   (D<subscript term="1 "/>- D<subscript term="0"/>))) x 100, where the denominator represents
   the total elapsed time of the sample interval, the numerator represents the time
   during the interval when monitored components were inactive, and B represents
   the number of components being monitored, using a base counter of type
<see langword="CounterMultiBase"/> 

.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterMultiTimer100NsInverse">
		<summary>
			<para>A percentage counter that shows the active time of one 
      or more components as a percentage of the total time of the sample interval.
      Counters of this type measure time in 100 nanosecond (ns) units. They derive the
      active time by measuring the time that the components were not active and
      subtracting the result from multiplying 100 percent by the number of objects
      monitored.</para>
			<para>This counter type is an inverse multitimer. Multitimers are designed to 
      monitor more than one instance of a component, such as a processor or disk.
      Inverse counters measure the time that a component is <paramref name="not"/> active and
      derive its active time from the measurement of inactive time</para>
			<para>Formula: (B - ((N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- 
   D<subscript term="0"/>))) x 100, where the denominator represents
   the total elapsed time of the sample interval, the numerator represents the time
   during the interval when monitored components were inactive, and B represents
   the number of components being monitored, using a base counter of type
<see langword="CounterMultiBase"/> 

.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterMultiBase">
		<summary>
			<para> A base counter
      that indicates the number of items sampled. It is used as the denominator
      in the calculations to get an average among the items sampled when taking
      timings of multiple, but similar items. Used with
   <see langword="CounterMultiTimer"/>, <see langword="CounterMultiTimerInverse"/>,
   <see langword="CounterMultiTimer100Ns"/>, and
   <see langword="CounterMultiTimer100NsInverse"/> 
   .</para>
		</summary>
	</doc><doc for="PerformanceCounterType.NumberOfItems32">
		<summary>
			<para> 
      An instantaneous counter that
      shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.</para>
			<para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected.</para>
			<para>Counters of this type include Memory\Available Bytes. </para>
		</summary>
	</doc><doc for="PerformanceCounterType.NumberOfItems64">
		<summary>
			<para>An instantaneous counter that shows the most recently observed value. Used, for 
      example, to maintain a simple count of a very large number of items or
      operations. It is the same as <see langword="NumberOfItems32"/> except that it
      uses larger fields to accommodate larger values.</para>
			<para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.NumberOfItemsHEX32">
		<summary>
			<para>An instantaneous counter that shows the most recently observed value in 
      hexadecimal format. Used, for example, to maintain a simple count of items
      or operations.</para>
			<para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.NumberOfItemsHEX64">
		<summary>
			<para>An instantaneous counter that shows the most recently observed value. Used, 
      for example, to maintain a simple count of a very large number of items or
      operations. It is the same as <see langword="NumberOfItemsHEX32"/> except that it
      uses larger fields to accommodate larger values.</para>
			<para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected</para>
		</summary>
	</doc><doc for="PerformanceCounterType.ElapsedTime">
		<summary>
			<para> 
      A difference timer that shows the total time between when the component or process
      started and the time when this value is calculated.</para>
			<para>Formula: (D<subscript term="0"/> - N<subscript term="0"/>) / F, where D<subscript term="0"/> represents 
   the current time, N<subscript term="0"/> represents the time the object was started, and
   F represents the number of time units that elapse in one second. The value of F
   is factored into the equation so that the result can be displayed in
   seconds.</para>
			<para>Counters of this type include System\ System Up Time.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.RateOfCountsPerSecond64">
		<summary>
			<para>A difference counter that shows the average number of operations completed 
      during each second of the sample interval. Counters of this type measure time in
      ticks of the system clock. This counter type is the same as the
   <see langword="RateOfCountsPerSecond32"/> type, but it uses larger fields to 
      accommodate larger values to track a high-volume number of items or operations
      per second, such as a byte-transmission rate.</para>
			<para>Formula: (N<subscript term="1"/>- N<subscript term="0"/>) / ( (D<subscript term="1"/>-D<subscript term="0"/>) / 
   F), where N<subscript term="1"/> and N<subscript term="0"/> are performance counter readings,
   D<subscript term="1"/> and D<subscript term="0"/> are their corresponding time readings, and F
   represents the number of ticks per second. Thus, the numerator represents the
   number of operations performed during the last sample interval, the denominator
   represents the number of ticks elapsed during the last sample interval, and F is
   the frequency of the ticks. The value of F is factored into the equation so that
   the result can be displayed in seconds.</para>
			<para>Counters of this type include System\ File Read Bytes/sec.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.RawFraction">
		<summary>
			<para>An instantaneous percentage counter that shows the ratio 
      of a subset to its set as a percentage. For example, it compares the number of
      bytes in use on a disk to the total number of bytes on the disk. Counters of
      this type display the current percentage only, not an average over time.</para>
			<para>Formula: (N<subscript term="0"/> / D<subscript term="0"/>) x 100, where D<subscript term="0"/> 
represents a measured attribute
(using a base counter of type <see langword="RawBase"/>
) and N<subscript term="0"/> represents one component of that
attribute.</para>
			<para>Counters of this type include Paging File\% Usage Peak.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.RawBase">
		<summary>
			<para>A base counter that stores the denominator of a
      counter that presents a general arithmetic fraction. Check that this value
      is greater than zero before using it as the denominator in a
   <see langword="RawFraction"/> value calculation.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.SampleFraction">
		<summary>
			<para>A percentage counter that shows the average ratio 
      of hits to all operations during the last two sample intervals.</para>
			<para>Formula: ((N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- D<subscript term="0"/>)) x 100, where the numerator represents the number 
   of successful operations during the last sample interval, and the denominator
   represents the change in the number of all operations (of the type measured)
   completed during the sample interval, using counters of type
<see langword="SampleBase"/> 

.</para>
			<para>Counters of this type include Cache\Pin Read Hits %.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.SampleCounter">
		<summary>
			<para>An average counter that shows the average number of 
      operations completed in one second. When a counter of this type samples the
      data, each sampling interrupt returns one or zero. The counter data is
      the number of ones that were sampled. It measures time in units of
      ticks of the system performance timer.</para>
			<para>Formula: (N<subscript term="1 "/>- N<subscript term="0"/>) / ((D<subscript term="1 "/>- D<subscript term="0"/>) / F), where N<subscript term="1"/> and N<subscript term="0"/> are 
   performance counter readings, D<subscript term="1"/> and D<subscript term="0"/> are their
   corresponding <see langword="SampleBase"/> values, and F is the number of ticks
   that elapse in one second. Thus, the numerator represents the number of
   operations completed and the denominator represents elapsed time in units
   of ticks of the system performance timer. F is factored into the equation so
   that the result can be displayed in seconds.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.SampleBase">
		<summary>
			<para>A base counter that stores the number of sampling 
      interrupts taken and is used as a denominator in the sampling fraction. The
      sampling fraction is the number of samples that were 1 (or
   <see langword="true"/>) for a sample interrupt. Check that this 
      value is greater than zero before using it as the denominator in a calculation
      of <see langword="SampleCounter"/>
      or <see langword="SampleFraction"/> .</para>
		</summary>
	</doc><doc for="PerformanceCounterType.Timer100Ns">
		<summary>
			<para>A percentage counter that shows the active time of a 
      component as a percentage of the total elapsed time of the sample interval. It
      measures time in units of 100 nanoseconds (ns). Counters of this type are
      designed to measure
      the
      activity of one component at a time. </para>
			<para>Formula: (N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- D<subscript term="0"/>) x 
   100, where the numerator represents the portions of the sample interval during
   which the monitored components were active, and the denominator represents the
   total elapsed time of the sample interval.</para>
			<para>Counters of this type include Processor\ % User Time.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.Timer100NsInverse">
		<summary>
			<para>A percentage counter that shows the average percentage 
      of
      active time observed during the sample interval.</para>
			<para>This is an inverse counter. Counters of this type calculate active time by 
      measuring the time that the service was inactive and then subtracting the
      percentage of active time from 100 percent.</para>
			<para>Formula: (1- ((N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- 
   D<subscript term="0"/>))) x 100, where the numerator represents the time during the
   interval when the monitored components were inactive, and the denominator
   represents the total elapsed time of the sample interval.</para>
			<para>Counters of this type include Processor\ % Processor Time.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.RateOfCountsPerSecond32">
		<summary>
			<para> A
      difference counter that shows the average number of operations completed during each
      second of the sample
      interval. Counters of this type measure time in ticks of the system clock.</para>
			<para>Formula: (N<subscript term="1"/>- N<subscript term="0"/>) / ( (D<subscript term="1"/>-D<subscript term="0"/>) /
   F), where N<subscript term="1"/> and N<subscript term="0"/> are performance counter
   readings, D<subscript term="1"/> and D<subscript term="0"/> are their corresponding time
   readings, and F represents the number of ticks per second. Thus, the numerator
   represents the number of operations performed during the last sample interval,
   the denominator represents the number of ticks elapsed during the last sample
   interval, and F is the frequency of the ticks. The value of F is factored into
   the equation so that the result can be displayed in seconds.</para>
			<para>Counters of this type include System\ File Read Operations/sec.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterTimer">
		<summary>
			<para> 
      A percentage counter that shows the
      average time that a component
      is active as a percentage of the total sample time. </para>
			<para>Formula: (N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1 "/>- D<subscript term="0"/>),
   where N<subscript term="1"/> and N<subscript term="0"/> are performance counter readings, and
   D<subscript term="1"/> and D<subscript term="0"/> are their corresponding time readings. Thus, the
   numerator represents the portions of the sample interval during which the
   monitored components were active, and the denominator represents the total
   elapsed time of the sample interval. </para>
		</summary>
	</doc><doc for="PerformanceCounterType.CounterMultiTimer">
		<summary>
			<para>A percentage counter that displays the active time of one
      or more components as a percentage of the total time of the sample interval.
      Because the numerator records the active time
      of components operating simultaneously, the resulting percentage can exceed 100 percent.</para>
			<para> This counter is a multitimer. Multitimers collect
      data from more than one instance of a component, such
      as a processor or disk. This counter type differs from
   <see langword="CounterMultiTimer100Ns"/> in that it
      measures time in units of ticks of the system performance timer, rather than in
      100 nanosecond units.</para>
			<para>Formula: ((N<subscript term="1 "/>- N<subscript term="0"/>) / (D<subscript term="1
   "/>- D<subscript term="0"/>)) x 100 / B, where N<subscript term="1"/> and N<subscript term="0"/> are
   performance counter readings, D<subscript term="1"/> and D<subscript term="0"/> are their
   corresponding time readings in 100-nanosecond units, and the variable B denotes
   the base count for the monitored components (using a base counter of type
<see langword="CounterMultiBase"/> 
).
Thus, the numerator represents the portions of the sample interval during
which the monitored components were active, and the denominator represents the total elapsed time
of the sample interval.</para>
		</summary>
	</doc><doc for="PerformanceCounterType.AverageCount64">
		<summary>
			<para> An average counter that
      shows how many items are processed, on average, during an operation. Counters of
      this type display a ratio of the items processed to the number of operations
      completed. The ratio is calculated by comparing the number of items processed
      during the last interval to the number of operations completed during the last
      interval.</para>
			<para> Formula:
      (N<subscript term="1"/>-N<subscript term="0"/>)/(B<subscript term="1"/>-B<subscript term="0"/>), where N<subscript term="1"/> and N<subscript term="0"/> are performance counter readings, and
      the B<subscript term="1"/> and
      B<subscript term="0"/>
      are their corresponding
   <see langword="AverageBase"/>
   values. Thus, the numerator represents the numbers of items processed during
   the sample interval, and the denominator represents the number of
   operations completed during the sample interval.</para>
			<para>Counters of this type include PhysicalDisk\ Avg. Disk Bytes/Transfer.</para>
		</summary>
	</doc>
	<doc for="PerformanceCounterType">
		<summary>
			<para> Specifies the formula used to calculate the <see cref="System.Diagnostics.PerformanceCounter.NextValue"/> method for a <see cref="System.Diagnostics.PerformanceCounter"/> instance.</para>
		</summary>
		<remarks>
			<para> Some counter types
      represent raw data, while others represent calculated values that are based on
      one or more counter samples. The following categories classify the types of counters
      available.</para>
			<list type="bullet"><item>
					<term>
         
         Average: measure a value over time and display the
         average of the last two measurements. Associated with each average counter is
         a base counter that tracks the number of samples involved.</term>
				</item>
				<item>
					<term>
         
         Difference: subtract the last measurement from the
         previous one and display the difference, if it is positive; if negative, they
         display a zero.</term>
				</item>
				<item>
					<term>
         
         Instantaneous: display the most recent measurement.</term>
				</item>
				<item>
					<term>
         
         Percentage: display calculated values as a percentage.</term>
				</item>
				<item>
					<term>
         
         Rate: sample an increasing count of events over time and divide the cache
         in count values by the change in time to display a rate of activity.</term>
				</item>
			</list>
			<para> When
   sampling performance counter data, using a counter type that represents an average can make
   raw data values meaningful for your use. For example, the raw data counter
<see langword="NumberOfItems64"/> can expose data
   that is fairly random from sample to sample. The formula for an average calculation
   of the values that the counter returns would be
   (X<subscript term="0"/>+X<subscript term="1"/>+…+X<subscript term="n"/>
   )/n, where each
   X<subscript term="i"/> is a raw counter sample.</para>
			<para>Rate counters are similar to average counters, but more useful for situations in which the rate increases as a
   resource is used. A formula that quickly calculates the average is
   ((X<subscript term="n"/>-X<subscript term="0"/>)/(T<subscript term="n"/>-T<subscript term="0"/>
   )) / frequency, where each
   X<subscript term="i"/> is a counter sample and each T<subscript term="i"/> is the time that
   the corresponding sample was taken. The result is the average usage per
   second.</para>
			<note type="note">
   Unless otherwise indicated, the time
   base is seconds.
   
</note>
			<para> When instrumenting applications (creating and writing
   custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is
   used in the calculations. The base counter must be immediately after its associated
   counter in the <see cref="System.Diagnostics.CounterCreationDataCollection"/> collection your
   application uses. The following table lists the
   base counter types with their corresponding performance counter
   types.</para>
			<list type="table">
				<listheader>
					<term> Base counter type</term>
					<description>Performance counter types</description>
				</listheader>
				<item>
					<term>
						<para><see langword="AverageBase"/></para></term>
					<description>
						<para><see langword="AverageTimer32"/></para>
						<para><see langword="AverageCount64"/></para></description>
				</item>
				<item>
					<term>
						<para><see langword="CounterMultiBase"/></para></term>
					<description>
						<para><see langword="CounterMultiTimer"/></para>
						<para><see langword="CounterMultiTimerInverse"/></para>
						<para><see langword="CounterMultiTimer100Ns"/></para>
						<para><see langword="CounterMultiTimer100NsInverse"/></para></description>
				</item>
				<item>
					<term>
						<para><see langword="RawBase"/></para></term>
					<description><see langword="RawFraction"/></description>
				</item>
				<item>
					<term>
						<para><see langword="SampleBase"/></para></term>
					<description>
						<para><see langword="SampleCounter"/></para>
						<para><see langword="SampleFraction"/></para></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following examples demonstrate several of the counter types 
      in the <see cref="System.Diagnostics.PerformanceCounterType"/> enumeration.</para>
			<para><see langword="AverageCount64"/></para>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="1"/>
			<para><see langword="AverageTimer32"/></para>
			<codelink SampleID="PerformanceCounterType.AverageTimer32" SnippetID="1"/>
			<para><see langword="ElapsedTime"/></para>
			<codelink SampleID="PerformanceCounterType.ElapsedTime" SnippetID="1"/>
			<para><see langword="NumberOfItems32"/></para>
			<codelink SampleID="PerformanceCounterType.NumberOfItems32" SnippetID="1"/>
			<para><see langword="NumberOfItems64"/></para>
			<codelink SampleID="PerformanceCounterType.NumberOfItems64" SnippetID="1"/>
			<para><see langword="RateOfCountsPerSecond32"/></para>
			<codelink SampleID="PerformanceCounterType.RateOfCountsPerSecond" SnippetID="1"/>
			<para><see langword="RateOfCountsPerSecond64"/></para>
			<codelink SampleID="PerformanceCounterType.RateOfCountsPerSecond64" SnippetID="1"/>
			<para><see langword="RawFraction"/></para>
			<codelink SampleID="PerformanceCounterType.RawFraction" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.PerformanceCounter"/>
	</doc>
</docs>
