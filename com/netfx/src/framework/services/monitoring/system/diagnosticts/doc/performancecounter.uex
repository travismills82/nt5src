<docs>
	<doc for="PerformanceCounter.Initialize">
		<summary>
     Intializes required resources
 </summary>
	</doc>
	<doc for="PerformanceCounter.RefreshSharedResources">
		<summary>
			<para> Refreshes all the resources
      allocated for all performance counters. Refreshes the file mapping used to write to custom
      counters and reloads the .dll's used to read system counters.</para>
		</summary>
		<remarks>
		</remarks>
	</doc><doc for="PerformanceCounter.DefaultFileMappingSize">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="PerformanceCounter.MachineName">
		<summary>
			<para>Gets or sets the computer name for this performance counter</para>
		</summary>
		<value>
			<para>The server on which the performance counter and its associated category
      reside.</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> format is invalid.</exception>
		<remarks>
			<para>You can write values only to counters that reside on the local computer. However, you can
      read counter values from any computer in the enterprise for which you have access
      privileges.</para>
			<para>When you set the <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> property to point
   to a remote computer, the <see cref="System.Diagnostics.PerformanceCounter"/> instance
   attempts to open
   the counter on that computer. If the counter does not exist, setting
   this property throws an exception.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.Dispose">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="PerformanceCounter.PerformanceCounter4">
		<summary>
			<para>Initializes a new, read-only instance of the <see cref="System.Diagnostics.PerformanceCounter"/> class and associates it with the specified
   system or custom performance counter on the local computer. This constructor requires that the category
   have a single instance.</para>
		</summary>
		<param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
		<param name="counterName">The name of the performance counter. </param>
		<exception cref="System.InvalidOperationException"><para>The <paramref name="categoryName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The <paramref name="counterName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para> The category that you specified does not exist.</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="categoryName"/> or <paramref name="counterName"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The parameter strings are not case sensitive. </para>
			<para> Use this overload to access a counter on the local computer that belongs to a category containing
      a single performance counter category instance. If you attempt to use this
      constructor to point this <see cref="System.Diagnostics.PerformanceCounter"/> instance to a
      category that contains multiple instances, the constructor throws an exception.
      This overload can access any read-only or read/write counter, but does so
      in a read-only mode. A <see cref="System.Diagnostics.PerformanceCounter"/> instance created using
      this overload cannot write to the counter, even if the counter itself is read/write. </para>
			<para>This overload of the constructor sets the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/> and <see cref="System.Diagnostics.PerformanceCounter.CounterName"/> properties to
   the values you pass in, sets the <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> property to the local
   computer, ".", and sets the <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> property to an empty string (""). </para>
			<para> This constructor initializes the performance
   counter and associates the instance with an existing counter (either a system or
   a custom counter) on the local computer. The values that you pass in for the
<see cref="System.Diagnostics.PerformanceCounter.CategoryName"/> and <see cref="System.Diagnostics.PerformanceCounter.CounterName"/> 


properties must point to an existing performance counter on the local
computer.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.PerformanceCounter1">
		<summary>
			<para>Initializes a new, read-only instance of the <see cref="System.Diagnostics.PerformanceCounter"/> class
   and associates it with the
   specified system or custom performance counter and category instance, on the specified computer.</para>
		</summary>
		<param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
		<param name="counterName">The name of the performance counter. </param>
		<param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance. </param>
		<param name="machineName">The computer on which the performance counter and its associated category exist. </param>
		<exception cref="System.InvalidOperationException"><para>The <paramref name="categoryName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The <paramref name="counterName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The read/write permission setting that you requested is invalid for this counter.</para>
			<para>-or-</para>
			<para>The counter does not exist on the specified computer.</para></exception>
		<exception cref="System.ArgumentException">The <paramref name="machineName"/> parameter is not valid.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="categoryName"/> or <paramref name="counterName"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The parameter strings are not case sensitive. </para>
			<para>This overload of the constructor sets the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> , and <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> properties to the values you pass in. </para>
			<para> This constructor initializes the performance
   counter and associates the instance with an existing counter (either a system or
   a custom counter) on the specified computer. The values that you pass in for the
<see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> and <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> properties must point to 
   an existing performance counter. If the performance counter instance you point
   to is not valid, calling the constructor throws an exception. This overload can
   access any read-only or read/write counter, but does so in a read-only mode. A
<see cref="System.Diagnostics.PerformanceCounter"/> 
instance created using this overload
cannot write to the counter, even if the counter itself is
read/write. </para>
			<note type="note">
   You cannot write to remote
   performance counters. There is no overload that allows you to specify
   a read/write instance of the <see cref="System.Diagnostics.PerformanceCounter"/> class that connects to a
   remote computer.
</note>
			<para>To create a performance category instance, specify an 
<paramref name="instanceName"/> on the <see cref="M:System.Diagnostics.PerformanceCounter.#ctor"/> constructor. If the 
   category instance specified by <paramref name="instanceName"/> already exists the new object will reference
   the existing category instance.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.PerformanceCounter2">
		<summary>
			<para>Initializes a new, read-only instance of the <see cref="System.Diagnostics.PerformanceCounter"/> class
   and associates it with the specified system or
   custom performance counter and category instance on the local computer.</para>
		</summary>
		<param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
		<param name="counterName">The name of the performance counter. </param>
		<param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance. </param>
		<exception cref="System.InvalidOperationException"><para>The <paramref name="categoryName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The <paramref name="counterName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para> The category that you specified is not valid.</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="categoryName"/> or <paramref name="counterName"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The parameter strings are not case sensitive. </para>
			<para>This overload of the constructor sets the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> properties to the
   values you pass in, and sets the <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> property to the local computer, ".". </para>
			<para> This constructor initializes the
   performance counter and associates the instance with an existing counter (either a system
   or a custom counter) on the local computer. The values that you pass in for the
<see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> 
properties must point to
an existing performance counter on the local computer. If the performance counter instance
you point to is not valid, calling the constructor throws an
exception.</para>
			<para>This overload can access any read-only or read/write counter, but does so in
   a read-only mode. A <see cref="System.Diagnostics.PerformanceCounter"/> instance created using this overload cannot
   write to the counter, even if the counter itself is read/write. </para>
			<para>To create a performance category instance, specify an 
<paramref name="instanceName"/> on the <see cref="M:System.Diagnostics.PerformanceCounter.#ctor"/> constructor. If the 
   category instance specified by <paramref name="instanceName"/> already exists the new object will reference
   the existing category instance.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.PerformanceCounter3">
		<summary>
			<para>Initializes a new, read-only or read/write instance
      of the <see cref="System.Diagnostics.PerformanceCounter"/> class and
      associates it with the specified system or custom performance counter and category instance on the local computer.</para>
		</summary>
		<param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
		<param name="counterName">The name of the performance counter. </param>
		<param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance. </param>
		<param name="readOnly"><see langword="true"/> to access a counter in read-only mode; <see langword="false"/> to access a counter in read/write mode.</param>
		<exception cref="System.InvalidOperationException"><para>The <paramref name="categoryName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The <paramref name="counterName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The read/write permission setting that you requested is invalid for this counter.</para>
			<para>-or-</para>
			<para>The category you specified does not exist. (If <paramref name="readOnly"/> is <see langword="true"/> .)</para>
			<para>-or-</para>
			<para>The category you specified is not a .NET Framework custom category. (If <paramref name="readOnly"/> is <see langword="false"/>.)</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="categoryName"/> or <paramref name="counterName"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The parameter strings are not case sensitive. </para>
			<para>Use this overload to access a performance counter in either read-only or read/write mode. </para>
			<para>This overload of the constructor sets the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> properties to the
   values you pass in, and sets the <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> property to the local computer, ".". </para>
			<para> This constructor initializes the performance counter
   and associates the instance with an existing counter (either a system or a
   custom counter) on the local computer. The values that you pass in for the
<see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> properties must point to 
   an existing performance counter on the local computer. If either the performance
   counter instance that you point to is not
   
   valid, calling the constructor throws an
   exception.</para>
			<note type="note">
   You can use this overload to connect
   to a system counter, but you cannot write to a system counter. Therefore,
   setting <paramref name="readOnly"/> to <see langword="false"/> when connecting to a system
   counter causes the constructor to throw an exception.
</note>
			<para>To create a performance category instance, specify an 
<paramref name="instanceName"/> on the <see cref="M:System.Diagnostics.PerformanceCounter.#ctor"/> constructor. If the 
   category instance specified by <paramref name="instanceName"/> already exists the new object will reference the existing category
   instance.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.CounterType">
		<summary>
			<para>Gets the counter type of the associated performance counter.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.PerformanceCounterType"/> that describes both how the counter
   interacts with a monitoring application and the nature of the values it contains
   (for example, calculated or uncalculated).</para>
		</value>
		<exception cref="System.InvalidOperationException">The instance is not correctly associated with a performance counter.</exception>
		<remarks>
			<para>The <see cref="System.Diagnostics.PerformanceCounterType"/> enumeration
   contains the types of performance counters that you can interact
   with. Some of the counter types represent calculated values, such as the
   average of the counter measurements the system has taken. Other types represent raw,
   or uncalculated, values. The following table shows the counter types that you will
   interact with most frequently.</para>
			<list type="table">
				<listheader>
					<term>Counter's Responsibility</term>
					<description>PerformanceCounterType Value</description>
					<description>Example</description>
				</listheader>
				<item>
					<term> Maintain a simple count of items or
         operations.</term>
					<description><see langword="NumberOfItems32"/></description>
					<description>Tracking the number of orders received as a
      32-bit integer.</description>
				</item>
				<item>
					<term> Maintain a higher-capacity simple count.</term>
					<description><see langword="NumberOfItems64"/></description>
					<description>Tracking the number of orders for a site with very high volume, stored
   as a 64-bit integer.</description>
				</item>
				<item>
					<term> Track the number of items or operations per second.</term>
					<description><see langword="RateOfCountsPerSecond32"/></description>
					<description>Tracking orders received per second on a site.</description>
				</item>
				<item>
					<term> Track a higher-capacity number of items or operations per second.</term>
					<description><see langword="RateOfCountsPerSecond64"/></description>
					<description>Tracking orders received per second on a site with very high
   volume.</description>
				</item>
				<item>
					<term> Calculate the average time to perform a process or to process an
      item</term>
					<description><see langword="AverageTimer32"/></description>
					<description>Calculate the average time an order takes to be processed.</description>
				</item>
			</list>
			<para>When you create a counter whose type requires the use of
   a corresponding base counter, you must declare the counter and the base
   in the <see cref="System.Diagnostics.CounterCreationDataCollection"/> you pass into the <see cref="System.Diagnostics.PerformanceCounterCategory.Create" qualify="true"/> method. </para>
		</remarks>
		<seealso cref="System.Diagnostics.PerformanceCounterType"/>
	</doc><doc for="PerformanceCounter.ReadOnly">
		<summary>
			<para> Gets or sets a value indicating whether this
   <see cref="System.Diagnostics.PerformanceCounter"/> instance is in read-only mode.</para>
		</summary>
		<value>
			<para><see langword="true"/> , if the
<see cref="System.Diagnostics.PerformanceCounter"/> instance is in 
   read-only
   mode (even if the counter itself is a custom .NET Framework counter);
<see langword="false"/> if it 
   is in read/write mode. The default is the value set by the constructor.</para>
		</value>
		<remarks>
			<para>For a system counter, <see cref="System.Diagnostics.PerformanceCounter.ReadOnly"/> should always
<see langword="true"/>. You cannot write to a system 
   counter.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.RawValue">
		<summary>
			<para> Gets or sets the raw, or uncalculated, value of this counter.</para>
		</summary>
		<value>
			<para>The raw value of the counter. </para>
		</value>
		<exception cref="System.InvalidOperationException"><para>You are trying to set the counter's raw value, but the counter is read-only.</para>
			<para>-or-</para>
			<para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>If the counter type is a 32-bit size and you attempt to set this property to a value that is
      too large to fit, the property truncates the value to 32 bits.
      When reading custom counters on the local computer, using the <see cref="System.Diagnostics.PerformanceCounter.RawValue"/> property rather than a calculated value can
      produce significantly better performance in scenarios where the raw value is
      sufficient.</para>
			<para>If the counter that you are reading is read-only, getting the
   <see cref="System.Diagnostics.PerformanceCounter.RawValue"/> property samples the
      counter at
      the time that the property is called. This action is equivalent to making an initial call to the
   <see cref="System.Diagnostics.PerformanceCounter.NextSample"/>
   method. If you
   subsequently call <see cref="System.Diagnostics.PerformanceCounter.NextSample"/>, you can perform
   calculations on the values that both calls returned.</para>
			<para> Because system counters are
   read-only, you can get but not
   set their raw
   values.
   </para>
		</remarks>
	</doc><doc for="PerformanceCounter.Close">
		<summary>
			<para>Closes the performance counter and frees all the resources allocated by this performance counter
      instance.</para>
		</summary>
		<remarks>
			<para>When you associate this <see cref="System.Diagnostics.PerformanceCounter"/> instance with a performance
   counter that resides on the server, the system initializes the instance
   and allocates memory to contain counter sample information. The <see cref="System.Diagnostics.PerformanceCounter.Close"/>
   method frees the resources allocated by
   the object.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.CloseSharedResources">
		<summary>
			<para>Frees the performance counter library shared state allocated by the counters.</para>
		</summary>
	</doc><doc for="PerformanceCounter.Decrement">
		<summary>
			<para>Decrements the associated performance counter by one through an efficient atomic operation.</para>
		</summary>
		<returns>
			<para>The decremented counter value.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The counter is read-only, so the application cannot decrement it.</para>
			<para>-or-</para>
			<para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>You can write only to custom counters. All system counters are read-only.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.Increment">
		<summary>
			<para>Increments the associated performance counter by one through an efficient atomic operation.</para>
		</summary>
		<returns>
			<para>The incremented counter value.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The counter is read-only, so the application cannot increment it.</para>
			<para>-or-</para>
			<para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>You can write only to custom counters. All system counters are read-only.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.RemoveInstance">
		<summary>
			<para>Deletes the category instance specified by the <see cref="System.Diagnostics.PerformanceCounter"/> object <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> property.</para>
		</summary>
		<exception cref="System.InvalidOperationException"><para>This counter is read-only, so any instance that is associated with the category cannot be removed.</para>
			<para>-or-</para>
			<para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>You can remove an instance only for a custom counter. All system
      counters are read-only, so attempting to remove one of them throws an
      exception.</para>
			<para>To create a performance category instance, specify an 
   <paramref name="instanceName"/> on the <see cref="M:System.Diagnostics.PerformanceCounter.#ctor"/> constructor. If the 
      category instance specified by <paramref name="instanceName"/> already exists the new object will reference the existing category instance.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.BeginInit">
		<summary>
			<para>Begins the initialization of a <see cref="System.Diagnostics.PerformanceCounter"/> instance used on a form or by another component.
   The initialization occurs at runtime.</para>
		</summary>
		<remarks>
			<para>The Visual Studio .NET design environment uses this method to start the initialization of
      a component that is used on a form or by another component. The
   <see cref="System.Diagnostics.PerformanceCounter.EndInit"/> method ends the
      initialization. Using the <see cref="System.Diagnostics.PerformanceCounter.BeginInit"/> and <see cref="System.Diagnostics.PerformanceCounter.EndInit"/> methods prevents the
      component from being used before it is fully initialized.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.EndInit">
		<summary>
			<para>Ends the initialization of a <see cref="System.Diagnostics.PerformanceCounter"/> instance that is
   used on a form or by another component. The
   initialization occurs at runtime.</para>
		</summary>
		<remarks>
			<para>The Visual Studio .NET design environment uses this method to end the initialization of
      a component that is used on a form or by another component. The
   <see cref="System.Diagnostics.PerformanceCounter.BeginInit"/> method starts the
      initialization. Using the <see cref="System.Diagnostics.PerformanceCounter.BeginInit"/> and <see cref="System.Diagnostics.PerformanceCounter.EndInit"/> methods prevents the
      component from being used before it is fully initialized.</para>
		</remarks>
	</doc><doc for="PerformanceCounter.IncrementBy">
		<summary>
			<para> Increments or decrements the value of the
      associated performance counter by a specified amount through an efficient atomic operation.</para>
		</summary>
		<param name="value">The value to increment by. (A negative value decrements the counter.) </param>
		<returns>
			<para>The new counter value.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> The counter is read-only, so the application cannot increment it.</para>
			<para>-or-</para>
			<para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>You can write only to custom counters. All system
      counters are read-only.</para>
		</remarks>
		<example>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PerformanceCounter.NextSample">
		<summary>
			<para>Obtains a counter sample, and returns the raw, or uncalculated, value for it.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Diagnostics.CounterSample"/> that represents the next raw value that the system obtains for this counter.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>This method is generally used for counters that contain uncalculated values.</para>
		</remarks>
		<example>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PerformanceCounter.NextValue">
		<summary>
			<para> Obtains a counter sample
      and returns the calculated value for it.</para>
		</summary>
		<returns>
			<para> The next calculated value that the system obtains for this counter.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para>The instance is not correctly associated with a performance counter.</para></exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<note type="note">
      If
      the calculated value of a
      counter depends on two counter reads, the first read returns 0.0.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="PerformanceCounterType.ElapsedTime" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PerformanceCounter">
		<summary>
			<para> Represents a Windows NT performance
      counter component.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>The <see cref="System.Diagnostics.PerformanceCounter"/> component can be
   used for both reading existing predefined or custom counters and publishing
   (writing) performance data to custom counters.</para>
			<para>To read from a performance counter, create an instance
   of the <see cref="System.Diagnostics.PerformanceCounter"/> class, set the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and, optionally, the <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> or <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> properties, and then call the
<see cref="System.Diagnostics.PerformanceCounter.NextValue"/> method to take a performance counter 
   reading.</para>
			<para>To publish performance counter data, create one or more
   custom counters using the <see cref="System.Diagnostics.PerformanceCounterCategory.Create" qualify="true"/> method, create an instance
   of the <see cref="System.Diagnostics.PerformanceCounter"/> class, set the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/> and, optionally, <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> or <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> properties, and then call the <see cref="System.Diagnostics.PerformanceCounter.IncrementBy"/>, <see cref="System.Diagnostics.PerformanceCounter.Increment"/>, or <see cref="System.Diagnostics.PerformanceCounter.Decrement"/> methods, or set the <see cref="System.Diagnostics.PerformanceCounter.RawValue"/> property to change the value of
   your custom counter.</para>
			<para>The counter is the mechanism by which performance data
   is collected. The Registry stores the names of all the counters, each of which
   is related to a specific area of system functionality. Examples include a
   processor's busy time, memory usage, or the number of bytes received over a
   network connection.</para>
			<para> Each counter is uniquely identified through its name and its location. In
   the same way that a file path includes a drive, a directory, one
   or more subdirectories, and a file name, counter information consists of
   four elements: the computer, the category, the category instance, and the counter name.</para>
			<para> The counter information must include the category, or 
   performance object, that the counter measures data for. A computer's categories
   include physical components, such as processors, disks, and memory. There are
   also system categories, such as processes and threads. Each category is related
   to a functional element within the computer and has a set of standard counters
   assigned to it. These objects are listed in the <SpecialLocalizableItem kind="UIElement">Performance object</SpecialLocalizableItem> drop-down list of the <SpecialLocalizableItem kind="UIElement">Add Counters</SpecialLocalizableItem>
dialog box within the Windows 2000 System Monitor, and you must
include them in the counter path. Performance data is grouped by the category
to which is it related. </para>
			<para> In certain cases, several copies of the same category
   can exist. For example, several processes and threads run simultaneously, and
   some computers contain more than one processor. The category copies are called
   category instances, and each instance has a set of standard counters assigned to
   it. If a category can have more than one instance, an instance specification must
   be included in the counter information. </para>
			<para>To obtain performance data for counters
   that required an initial or previous value for performing the necessary calculation, call the
<see cref="System.Diagnostics.PerformanceCounter.NextValue"/> method twice and use the 
   information returned as your application requires.</para>
		</remarks>
		<example>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.PerformanceCounterType"/>
		<seealso cref="System.Diagnostics.CounterCreationData"/>
		<seealso cref="System.Diagnostics.CounterCreationDataCollection"/>
		<seealso cref="System.Diagnostics.CounterSample"/>
		<seealso cref="System.Diagnostics.CounterSampleCalculator"/>
	</doc>
	<doc for="PerformanceCounter.CounterHelp">
		<summary>
			<para> Gets the description for this performance counter.</para>
		</summary>
		<value>
			<para>A description of the item or quantity that this
      performance counter measures.</para>
		</value>
		<exception cref="System.InvalidOperationException">The <see cref="System.Diagnostics.PerformanceCounter"/> instance is not associated with a performance counter.</exception>
		<remarks>
			<para>The <SpecialLocalizableItem kind="UIElement">Add Counters</SpecialLocalizableItem>
   dialog box of the Performance Counter Manager MMC snap in
   displays the <see cref="System.Diagnostics.PerformanceCounter.CounterHelp"/> text when a user selects
   a counter from the counters list and clicks the <SpecialLocalizableItem kind="UIElement">Explain</SpecialLocalizableItem>
button.</para>
			<para>When you create a new counter, use the <see cref="System.Diagnostics.PerformanceCounter.CounterHelp"/> text to describe what the counter monitors
do so the user can determine whether to add the counter to the
System Monitor's display.</para>
		</remarks>
	</doc>
	<doc for="PerformanceCounter.PerformanceCounter5">
		<summary>
			<para>Initializes a new, read-only or read/write instance
      of the <see cref="System.Diagnostics.PerformanceCounter"/> class and associates it with the specified
      system or custom performance counter on the local computer. This constructor
      requires that the category contain a single instance.</para>
		</summary>
		<param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
		<param name="counterName">The name of the performance counter. </param>
		<param name=" readOnly"><see langword="true"/> to access the counter in read-only mode (though the counter itself could be read/write); <see langword="false"/> to access the counter in read/write mode.</param>
		<exception cref="System.InvalidOperationException"><para>The <paramref name="categoryName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The <paramref name="counterName"/> is an empty string ("").</para>
			<para>-or-</para>
			<para>The category you specified does not exist. (If <paramref name="readOnly"/> is <see langword="true"/> .)</para>
			<para>-or-</para>
			<para>The category you specified is not a .NET Framework custom category. (If <paramref name="readOnly"/> is <see langword="false"/>.)</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="categoryName"/> or <paramref name="counterName"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The parameter strings are not case sensitive. </para>
			<para>Use this overload to access a read-only or read/write counter on the local computer that belongs to a category
      containing a single performance counter category instance. If you attempt to use this
      constructor to point this <see cref="System.Diagnostics.PerformanceCounter"/> instance to a category
      that contains multiple instances, the constructor throws an exception. </para>
			<para>This overload of the constructor sets the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/> ,
<see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and <see cref="System.Diagnostics.PerformanceCounter.ReadOnly"/> properties 
   to the values you pass in, sets the <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> property
   to the local computer, ".", and sets the <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> property
   to an empty string (""). </para>
			<para> This constructor initializes the performance counter
   and associates the instance with an existing counter (either a system or a custom
   counter) on the local computer. The values that you pass in for the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/> and <see cref="System.Diagnostics.PerformanceCounter.CounterName"/> properties must
   point to an existing performance counter on the local computer. If the performance
   counter instance that you point to is not valid, calling the constructor throws
   an exception.</para>
			<note type="note">
   
   You can use this overload
   to connect to a system counter, but you cannot write to a system
   counter. Therefore, setting <paramref name="readOnly"/> to <see langword="false"/>
   when connecting to a system counter causes the constructor to throw an
   exception.
</note>
		</remarks>
		<example>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="2"/>
		</example>
	</doc>
	<doc for="PerformanceCounter.CategoryName">
		<summary>
			<para>Gets or sets the name of the performance counter category for this performance counter.</para>
		</summary>
		<value>
			<para>The name of the performance counter category
      (performance object) with which this performance counter is associated.</para>
		</value>
		<exception cref="System.ArgumentNullException">The <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/> is <see langword="null"/>.</exception>
		<remarks>
			<para> The <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/> is displayed in the <see langword="Performance Object"/> field of Performance
   Counter Manager MMC snap in's <see langword="Add Counter"/> dialog
   box.</para>
			<para> A performance counter monitors the
   behavior of a category, or performance object, on a computer. Categories include
   physical components (such as processors, disks, and memory) and system objects
   (such as processes and threads). System counters that are related
   to the same performance object are grouped into a category that indicates
   their common focus. When you create an instance of the <see cref="System.Diagnostics.PerformanceCounter"/>
   
   class, you first indicate the category with
   which the component will interact, and then you choose a counter from that
   category.</para>
			<para>For example, one Windows
   counter category is the Memory category. System counters within this category track memory
   data such as the number of bytes available and the number of bytes
   cached. If you wanted to work with the bytes cached in your application, you
   would create an instance of the <see cref="System.Diagnostics.PerformanceCounter"/> component, connect it to the Memory category, and then pick the appropriate counter (in this case, Cached Bytes) from that category.</para>
			<para>Although your system makes many more counter categories available, the categories that
   you will probably interact with most frequently are the Cache,
   Memory, Objects, PhysicalDisk, Process, Processor, Server, System, and Thread
   categories.</para>
		</remarks>
		<example>
			<codelink SampleID="PerfCounter" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.Process.ProcessName" qualify="true"/>
	</doc>
	<doc for="PerformanceCounter.CounterName">
		<summary>
			<para>Gets or sets the name of the performance counter that
      is associated with this <see cref="System.Diagnostics.PerformanceCounter"/> instance.</para>
		</summary>
		<value>
			<para>The name of the counter, which generally describes the
      quantity being counted. This name is displayed in the list of counters of the
      Performance Counter Manager MMC snap in's <SPECIALLOCALIZABLEITEM kind="UIElement">
      Add Counters</SPECIALLOCALIZABLEITEM>
   dialog box.</para>
		</value>
		<exception cref="System.ArgumentNullException">The <see cref="System.Diagnostics.PerformanceCounter.CounterName"/> is <see langword="null"/>.</exception>
		<example>
			<codelink SampleID="PerfCounter" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PerformanceCounter.InstanceName">
		<summary>
			<para>Gets or sets an instance name for this performance counter.</para>
		</summary>
		<value>
			<para>The name of the performance counter category instance, or an empty string
      (""), if the counter is a single-instance counter.</para>
		</value>
		<remarks>
			<para> In some situations, categories are subdivided into instances, which track data about multiple occurrences of the object that a category relates to. Instances apply to the category as whole, rather than to individual counters. Every counter within a category has each instance defined for the category. For example, the Process category contains instances named Idle and System. Every counter within the Process category thus contains data for each instance, showing information about either idle processes or system processes.</para>
			<para> Many categories do not contain multiple instances, so you can leave this property empty to indicate that no instance is associated with the category.</para>
			<para>If this <see cref="System.Diagnostics.PerformanceCounter"/> instance points
   to a noncustom category, you can choose from only the existing
   category instances. You can create new category instances only in custom categories, which
   allow you to define as many counters and category instances as you need.</para>
			<para>To create a performance category instance, specify an
<paramref name="instanceName"/> on the <see cref="M:System.Diagnostics.PerformanceCounter.#ctor"/> constructor. If the 
   category instance specified by <paramref name="instanceName"/> already exists the new object will reference
   the existing category instance.</para>
		</remarks>
		<example>
			<codelink SampleID="PerfCounter" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PerformanceCounter.PerformanceCounter">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.PerformanceCounter"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new, read-only instance of the <see cref="System.Diagnostics.PerformanceCounter"/> class, without associating the
   instance with any system or custom performance counter.</para>
		</summary>
		<remarks>
			<para>This overload of the constructor sets the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> properties to empty strings (""), and
   sets the <see cref="System.Diagnostics.PerformanceCounter.MachineName"/> property to the local computer, ("."). </para>
			<para>This constructor does not initialize the performance
   counter, so it does not associate the instance with
   an existing counter on the local computer. To point to a specific
   performance counter, set the <see cref="System.Diagnostics.PerformanceCounter.CategoryName"/>, <see cref="System.Diagnostics.PerformanceCounter.CounterName"/>, and, optionally, the <see cref="System.Diagnostics.PerformanceCounter.InstanceName"/> and <see cref="System.Diagnostics.PerformanceCounter.MachineName"/>
   properties before reading any other properties or attempting to read
   from a counter. To write to a performance counter, set the <see cref="System.Diagnostics.PerformanceCounter.ReadOnly"/> property to <see langword="false"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="PerfCounter" SnippetID="1"/>
		</example>
	</doc>
</docs>
