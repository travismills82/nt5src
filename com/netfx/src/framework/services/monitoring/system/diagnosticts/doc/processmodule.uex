<docs>
	<doc for="ProcessModule.ProcessModule">
		<summary>
     Initialize the module.
 </summary>
	</doc>
	<doc for="ProcessModule.EnsureNtProcessInfo">
		<summary>
     Make sure we are running on NT.
 </summary>
	</doc>
	<doc for="ProcessModule">
		<summary>
			<para> Represents a .dll
      or .exe file that is loaded
      into a particular process.</para>
		</summary>
		<remarks>
			<para>A module is an executable file or a dynamic link library (DLL). Each process consists of one or more modules.
      You can use this class to get information about the
      module.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessModule" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.ModuleName">
		<summary>
			<para>Gets the name of the process module.</para>
		</summary>
		<value>
			<para> The name of the
      module. </para>
		</value>
		<remarks>
			<para> If the name is longer than the maximum number of characters
      allowed, it is truncated.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessModule_ModuleName" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.FileName">
		<summary>
			<para> Gets the full path to the module.</para>
		</summary>
		<value>
			<para>The fully qualified path that defines the location of the module. </para>
		</value>
		<remarks>
			<para>If the file name is longer than the maximum number of
      characters allowed, the file name is truncated.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessModule_FileName" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.BaseAddress">
		<summary>
			<para> Gets the memory address where the module was loaded.</para>
		</summary>
		<value>
			<para>The load address of the module.</para>
		</value>
		<example>
			<codelink SampleID="ProcessModule_BaseAddress" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.ModuleMemorySize">
		<summary>
			<para> Gets
      the amount of memory that is required
      to load the module.</para>
		</summary>
		<value>
			<para>The size, in bytes, of the memory that the module occupies.</para>
		</value>
		<remarks>
			<para><see cref="System.Diagnostics.ProcessModule.ModuleMemorySize"/> does not include any additional memory allocations that the module
   makes once it is running; it includes only the size of the static code and data in the
   module file.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessModule_ModuleMemorySize" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.EntryPointAddress">
		<summary>
			<para>Gets the memory address for the function that runs when the system loads and
      runs the module.</para>
		</summary>
		<value>
			<para>The entry point of the module.</para>
		</value>
		<remarks>
			<para>The module's entry point is the location of the function that is called during process startup, thread startup,
      process shutdown, and thread shutdown. While the entry point is not the address of
      the DllMain function, it should be close enough for most purposes.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessModule_EntryPoint" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.FileVersionInfo">
		<summary>
			<para>Gets version information about the module.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.FileVersionInfo"/> that contains the module's version information.</para>
		</value>
		<example>
			<codelink SampleID="ProcessModule_FileVersionInfo" SnippetID="1"/>
		</example>
	</doc><doc for="ProcessModule.ToString">
		<summary>
			<para>Converts the name of the module to a string.</para>
		</summary>
		<returns>
			<para>The value of the <see cref="System.Diagnostics.ProcessModule.ModuleName"/> property.</para>
		</returns>
		<example>
			<codelink SampleID="ProcessModule_ToString" SnippetID="1"/>
		</example>
	</doc></docs>
