<docs>
	<doc for="ProcessThread.ProcessThread">
		<summary>
     Internal constructor.
 </summary>
	</doc>
	<doc for="ProcessThread.CloseThreadHandle">
		<summary>
     Helper to close a thread handle.
 </summary>
	</doc>
	<doc for="ProcessThread.EnsureState">
		<summary>
     Helper to check preconditions for property access.
 </summary>
		<internalonly/>
	</doc>
	<doc for="ProcessThread.OpenThreadHandle">
		<summary>
     Helper to open a thread handle.
 </summary>
	</doc>
	<doc for="ProcessThread.Id">
		<summary>
			<para> Gets the unique identifier of the thread.</para>
		</summary>
		<value>
			<para>The unique identifier associated with a specific thread. </para>
		</value>
		<remarks>
			<para>The operating system reuses thread identification numbers, which identify threads
      only during their lifetimes.</para>
		</remarks>
	</doc><doc for="ProcessThread.IdealProcessor">
		<summary>
			<para> Sets the preferred processor for this thread to run on.</para>
		</summary>
		<value>
			<para>The preferred processor for the thread, used when the system schedules 
      threads, to determine which processor to run the thread on.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">The system could not set the thread to start on the specified processor.</exception>
		<remarks>
			<para> 
      
      The system
      schedules threads on their preferred processors whenever possible.</para>
			<para>A process thread can migrate from processor to processor, with each 
      migration reloading the processor cache. Specifying a processor for a
      thread can improve performance under heavy system loads by reducing the
      number of times the processor cache is reloaded.</para>
		</remarks>
	</doc><doc for="ProcessThread.StartTime">
		<summary>
			<para>Gets the time that the operating system started the thread.</para>
		</summary>
		<value>
			<para>A <see cref="System.DateTime"/> representing the time that
   was on the system when the operating system started the thread.</para>
		</value>
	</doc><doc for="ProcessThread.TotalProcessorTime">
		<summary>
			<para>Gets the total amount of time that this thread has spent
      using the processor. </para>
		</summary>
		<value>
			<para>A <see cref="System.TimeSpan"/> that indicates the 
   amount of time that the thread has had control of the processor.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Diagnostics.ProcessThread.TotalProcessorTime"/> property indicates the total amount of
   time that the system has taken the thread out of the wait state and given it
   priority on any processor. On a multiple processor system, this value would include time spent
   on each processor, if the thread used more than one processor.</para>
			<para>The <see cref="System.Diagnostics.ProcessThread.TotalProcessorTime"/> property is the sum of the 
<see cref="System.Diagnostics.ProcessThread.UserProcessorTime"/> and <see cref="System.Diagnostics.ProcessThread.PrivilegedProcessorTime"/> properties.</para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessThread.PrivilegedProcessorTime"/>
		<seealso cref="System.Diagnostics.ProcessThread.UserProcessorTime"/>
	</doc><doc for="ProcessThread.WaitReason">
		<summary>
			<para> Gets the reason that the thread is waiting.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.ThreadWaitReason"/> representing the reason 
   that the thread is in the wait
   state. </para>
		</value>
		<exception cref="System.InvalidOperationException">The thread is not in the wait state.</exception>
		<remarks>
			<para>The <see cref="System.Diagnostics.ProcessThread.WaitReason"/> property is valid only when
   the <see cref="System.Diagnostics.ProcessThread.ThreadState"/> is <see cref="System.Diagnostics.ThreadState.Wait"/>. Therefore, check the <see cref="System.Diagnostics.ProcessThread.ThreadState"/> value before you get the <see cref="System.Diagnostics.ProcessThread.WaitReason"/>
   property.</para>
		</remarks>
		<seealso cref="System.Diagnostics.ThreadWaitReason"/>
		<seealso cref="System.Diagnostics.ProcessThread.ThreadState"/>
	</doc><doc for="ProcessThread.CurrentPriority">
		<summary>
			<para> Gets the current priority
      of the thread.</para>
		</summary>
		<value>
			<para>The current priority of the thread, which may deviate from the base priority based on
      how the operating system is scheduling the thread. The priority may
      be temporarily boosted for an active thread.</para>
		</value>
		<remarks>
			<para>The thread's current priority might deviate from the
      base priority. For example, the operating system can change the <see cref="System.Diagnostics.ProcessThread.CurrentPriority"/> property based on the time
      elapsed, or other boosts, when a process must be put ahead of others for access to
      the processor. In addition, you can set the <see cref="System.Diagnostics.Process.PriorityBoostEnabled"/> property to cause the system to
      temporarily boost the priority of a
      thread whenever the process is taken out of the wait state. The priority is reset
      when the process returns to the wait state.</para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessThread.BasePriority"/>
		<seealso cref="System.Diagnostics.ProcessThread.PriorityBoostEnabled"/>
	</doc><doc for="ProcessThread.PriorityLevel">
		<summary>
			<para> Gets or
      sets the priority level of the thread.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Diagnostics.ThreadPriorityLevel"/> values,
   specifying a range that bounds the thread's priority.</para>
		</value>
		<remarks>
			<para>The priority level is not a single value, but rather
      a range of values. The operating system computes the thread's base priority by
      using the process's <see cref="System.Diagnostics.Process.PriorityClass"/>
      to choose a value from the range specified in
      the <see cref="System.Diagnostics.ProcessThread.PriorityLevel"/>
      property.</para>
		</remarks>
		<seealso cref="System.Diagnostics.ThreadPriorityLevel"/>
		<seealso cref="System.Diagnostics.Process.PriorityClass"/>
		<seealso cref="System.Diagnostics.ProcessThread.BasePriority"/>
		<seealso cref="System.Diagnostics.ProcessThread.CurrentPriority"/>
	</doc><doc for="ProcessThread.PrivilegedProcessorTime">
		<summary>
			<para>Gets the amount of time that the thread has spent running code inside the operating
      system core.</para>
		</summary>
		<value>
			<para>A <see cref="System.TimeSpan"/> indicating
   the amount of time that the thread has spent running code inside the operating system
   core.</para>
		</value>
		<remarks>
			<para>Windows NT uses several different protection mechanisms,
      and at the root of them all is the distinction between user mode and privileged
      mode. <see cref="System.Diagnostics.ProcessThread.PrivilegedProcessorTime"/> corresponds to the amount
      of time that the application has spent running in privileged mode, inside the
      operating system core. The <see cref="System.Diagnostics.ProcessThread.UserProcessorTime"/>
      
      
      property indicates the amount of time that the application has spent running
      code in user mode, outside the system core. </para>
			<para> 
      User mode restricts the application in two important ways. First,
      the application cannot directly access the peripherals, but instead must call the operating system
      core to get or set peripheral data. The operating system can thus
      ensure that one application does not destroy peripheral data that is needed by another. Second, the application cannot read
      or change data that the operating system itself maintains. This restriction prevents applications from either
      inadvertently or intentionally corrupting the core. If the application needs the operating system to perform an operation, it
      calls one of the system's routines. Many of these transition into privileged mode, perform
      the operation, and smoothly return to user mode. </para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessThread.UserProcessorTime"/>
		<seealso cref="System.Diagnostics.ProcessThread.TotalProcessorTime"/>
	</doc><doc for="ProcessThread.ProcessorAffinity">
		<summary>
			<para> Sets the processors on which the associated thread can run.</para>
		</summary>
		<value>
			<para>An <see cref="System.IntPtr"/> that points to a set of bits, each of which represents a processor that the thread can
   run on.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">The processor affinity could not be set.</exception>
		<remarks>
			<para> The processor affinity of a thread is the set of
      processors it has a relationship to. In other words, those it can be
      scheduled to run on.</para>
			<para><see cref="System.Diagnostics.ProcessThread.ProcessorAffinity"/> represents each processor
   as a bit. Bit 0 represents processor one, bit 1 represents processor two, and so
   on. The following table shows a subset of the possible <see cref="System.Diagnostics.ProcessThread.ProcessorAffinity"/>
   for a four-processor system.</para>
			<list type="table">
				<listheader>
					<term>Property value (in hexadecimal)</term>
					<description>Valid processors</description>
				</listheader>
				<item>
					<term> 0x0001</term>
					<description>1</description>
				</item>
				<item>
					<term> 0x0002</term>
					<description>2</description>
				</item>
				<item>
					<term> 0x0003</term>
					<description>1 or 2</description>
				</item>
				<item>
					<term> 0x0004</term>
					<description>3</description>
				</item>
				<item>
					<term> 0x0005</term>
					<description>1 or 3</description>
				</item>
				<item>
					<term> 0x0007</term>
					<description>1, 2, or 3</description>
				</item>
				<item>
					<term> 0x000F</term>
					<description>1, 2, 3, or 4</description>
				</item>
			</list>
			<para> You can also specify the single,
   preferred processor for a thread by setting the <see cref="System.Diagnostics.ProcessThread.IdealProcessor"/> property. A process thread can
   migrate from processor to processor, with each migration reloading the processor
   cache. Specifying a processor for a thread can improve performance under heavy
   system loads by reducing the number
   of times the processor cache is reloaded. </para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessThread.IdealProcessor"/>
	</doc><doc for="ProcessThread.StartAddress">
		<summary>
			<para> Gets the memory address of the function that the operating system called that
      started this thread.</para>
		</summary>
		<value>
			<para> The thread's starting address,
      which points to the application-defined function that the thread executes.</para>
		</value>
		<remarks>
			<para> Each process starts with a single thread, which is
      known as the primary thread. Any thread can create additional threads.</para>
			<para>A process has a virtual address space, executable code, data, object handles, environment
      variables, a base priority, and minimum and maximum working set sizes.
      All the threads of a process share its virtual address space and system resources. In
      addition, each thread maintains exception handlers, a scheduling priority, and
      a set of structures in which the system saves the thread context while the thread is
      waiting to be scheduled. The thread context includes the thread's set of machine
      registers, the kernel stack, a thread environment block, and a user stack in the
      address space of the thread's process.</para>
			<para>Every Windows thread actually begins execution in a system-supplied function, not the application-supplied function.
      The starting address for the primary thread is, therefore, the same (as
      it represents the address of the system-supplied function) for every Windows process in the system. However,
      the <see cref="System.Diagnostics.ProcessThread.StartAddress"/> property allows you to get
      the starting function address that is specific to your
      application.</para>
		</remarks>
	</doc><doc for="ProcessThread.ThreadState">
		<summary>
			<para> Gets the current state of this thread.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.ThreadState"/>
that indicates the thread's execution,
for example, running, waiting, or terminated.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Diagnostics.ProcessThread.WaitReason"/> property value is valid only when
   the <see cref="System.Diagnostics.ProcessThread.ThreadState"/> value is <see cref="System.Diagnostics.ThreadState.Wait"/>. Therefore, check the <see cref="System.Diagnostics.ProcessThread.ThreadState"/>
   value before you get
   the <see cref="System.Diagnostics.ProcessThread.WaitReason"/> property.</para>
		</remarks>
	</doc><doc for="ProcessThread.UserProcessorTime">
		<summary>
			<para> Gets the amount of time that the associated
      thread has spent running code inside the application.</para>
		</summary>
		<value>
			<para>A <see cref="System.TimeSpan"/> indicating the
   amount of time that the thread has spent running code inside the application, as opposed to
   inside the operating system core.</para>
		</value>
		<remarks>
			<para>Windows NT uses several different protection mechanisms,
      and at the root of them all is the distinction between user mode and privileged
      mode. <see cref="System.Diagnostics.ProcessThread.UserProcessorTime"/> corresponds to the amount
      of time that the application has spent running in user mode, outside the
      operating system core. The <see cref="System.Diagnostics.ProcessThread.PrivilegedProcessorTime"/>
      
      corresponds to the amount of time that the application has spent
      running code in privileged mode, inside the system core. </para>
			<para> User mode restricts the application in two important ways.
      First, the application cannot directly access the peripherals, but instead must
      call the operating system core to get or set peripheral data. The operating
      system can thus ensure that one application does not destroy peripheral data
      that is needed by another. Second, the application cannot read or change data
      that the operating system itself maintains. This restriction prevents
      applications from either inadvertently or intentionally corrupting the core. If
      the application needs the operating system to perform an operation, it calls one
      of the system's routines. Many of these transition into privileged mode, perform
      the operation, and smoothly return to user mode. </para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessThread.PrivilegedProcessorTime"/>
		<seealso cref="System.Diagnostics.ProcessThread.TotalProcessorTime"/>
	</doc><doc for="ProcessThread.ResetIdealProcessor">
		<summary>
			<para>Resets the ideal processor for this thread to indicate that there is no single ideal processor. In other words, so
      that any processor is ideal.</para>
		</summary>
		<seealso cref="System.Diagnostics.ProcessThread.IdealProcessor"/>
	</doc><doc for="ProcessThread.BasePriority">
		<summary>
			<para> Gets the base priority of the thread.</para>
		</summary>
		<value>
			<para>The base priority of the thread, which the operating system computes by combining the process
      priority class with the priority level of the associated thread.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Diagnostics.ProcessThread.BasePriority"/> is the starting priority for the process thread. You can view information
   about the base priority through the System Monitor's Priority Base counter. </para>
			<para>The operating system computes a thread's base priority
   by combining the thread's priority level range with the process's priority
   class. You can set the process's <see cref="System.Diagnostics.Process.PriorityClass" qualify="true"/> property to one of the
   values in the <see cref="System.Diagnostics.ProcessPriorityClass"/>
   enumeration, which are <see cref="System.Diagnostics.ProcessPriorityClass.Idle"/>, <see cref="System.Diagnostics.ProcessPriorityClass.Normal"/>,
<see cref="System.Diagnostics.ProcessPriorityClass.High"/>, <see cref="System.Diagnostics.ProcessPriorityClass.AboveNormal"/>, 
<see cref="System.Diagnostics.ProcessPriorityClass.BelowNormal"/>, or <see cref="System.Diagnostics.ProcessPriorityClass.RealTime"/>. You can set the thread's <see cref="System.Diagnostics.ProcessThread.PriorityLevel"/> property
   to a range of values that bounds the thread's base priority. Win32 uses four priority
   classes with seven base priority levels per class. </para>
			<para>The thread's current priority might deviate from
   the base priority. For example, the operating system can change the
<see cref="System.Diagnostics.ProcessThread.CurrentPriority"/> 
property based on the time elapsed or other
boosts when a process must be put ahead of others for access to the processor.
In addition, you can set the <see cref="System.Diagnostics.Process.PriorityBoostEnabled"/> property
to cause the system to temporarily boost the priority
of a thread whenever the process is taken out of the wait state. The priority is reset
when the process returns to the wait state. </para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessThread.PriorityBoostEnabled"/>
		<seealso cref="System.Diagnostics.ProcessPriorityClass"/>
		<seealso cref="System.Diagnostics.Process.PriorityClass" qualify="true"/>
		<seealso cref="System.Diagnostics.ProcessThread.CurrentPriority"/>
	</doc><doc for="ProcessThread.PriorityBoostEnabled">
		<summary>
			<para>Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main
 window of the thread's process receives the focus.</para>
		</summary>
		<value>
			<para><see langword="true"/> to boost the thread's priority when the user interacts with the
 process's interface; otherwise, <see langword="false"/>. The default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Diagnostics.ProcessThread.PriorityBoostEnabled"/> is <see langword="true"/>, the system temporarily
 boosts the thread's priority whenever its associated process is taken out of the wait
 state. This action prevents other processes from interrupting the processing of
 the current thread. The <see cref="System.Diagnostics.ProcessThread.PriorityBoostEnabled"/> setting affects all existing threads
 as well as any threads subsequently created by the process. To restore
 normal behavior, set the <see cref="System.Diagnostics.Process.PriorityBoostEnabled"/> property to
<see langword="false"/>. </para>
			<para><see cref="System.Diagnostics.ProcessThread.PriorityBoostEnabled"/> has an effect only when the
thread is running in a process that has a <see cref="System.Diagnostics.Process.PriorityClass"/>
set to one of the dynamic priority
enumecref="System.Diagnostics.ProcessPriorityClass.RunTime"/&gt;). </para>
			<note type="note">
 
 Boosting the
 priority too high can drain resources
 from essential operating system and network functions. This could cause
 problems with other operating system tasks.
</note>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessPriorityClass"/>
	</doc><doc for="ProcessThread">
		<summary>
			<para>Represents an operating system process thread.</para>
		</summary>
		<remarks>
			<para>Use <see cref="System.Diagnostics.ProcessThread"/> to obtain information about a thread that is currently running on the system.
   Doing so allows you, for example, to monitor the thread's performance
   characteristics.</para>
			<para> A thread is a
   path of execution through a program. It is the smallest unit of execution
   that Win32 schedules. It consists of a stack, the state of the CPU registers, and an
   entry in the execution list of the system scheduler.</para>
			<para>
   
   A process
   consists of one or more threads and the code, data, and other resources of
   a program in memory. Typical program resources are open files, semaphores,
   and dynamically allocated memory. Each resource of a process is
   shared by all that process's threads.</para>
			<para>A program executes when the system scheduler gives execution control to one
   of the program's threads. The scheduler determines which threads should run and
   when. A lower-priority thread might be forced to wait while
   higher-priority threads complete their tasks. On multiprocessor computers, the
   scheduler can move individual threads to different processors,
   thus balancing the CPU load.</para>
			<para>Each process starts with a single thread, which is known as the primary thread. Any thread can
   create additional threads. All the threads within a process share the
   address space of that process.</para>
			<note type="note">
   The primary thread is not necessarily
   located at the first index in the collection.
</note>
			<para> The threads of a
   process execute individually and are unaware of each other unless you make them
   visible to each other. Threads that share common resources, however, must coordinate
   their work by using semaphores or another method of interprocess
   communication.</para>
			<para>To get a collection of all the <see cref="System.Diagnostics.ProcessThread"/> objects associated with the current process,
get the <see cref="System.Diagnostics.Process.Threads"/>
property of the <see cref="System.Diagnostics.Process"/>
instance.</para>
		</remarks>
		<seealso cref="System.Diagnostics.Process"/>
		<seealso cref="System.Diagnostics.Process.Threads"/>
	</doc>
</docs>
