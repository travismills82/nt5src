<docs>
	<doc for="ProcessStartInfo.CreateSuspended">
		<summary>
			<para>Gets or sets a value indicating whether to start the 
      process in a suspended state.</para>
		</summary>
		<value>
			<para><see langword="true"/> to suspend the process immediately upon starting it; 
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
	</doc><doc for="ProcessStartInfo.EnvironmentVariables">
		<summary>
			<para>Gets search paths for files, directories for temporary 
      files, application-specific options, and other similar information.</para>
		</summary>
		<value>
			<para>A StringDictionary that provides environment variables 
      that apply to this process and child processes. The default is <see langword="null"/>.</para>
		</value>
		<remarks>
		</remarks>
	</doc><doc for="ProcessStartInfo.ErrorDialog">
		<summary>
			<para> Gets or sets a value indicating whether an error dialog is displayed to the
      user if the process cannot be started.</para>
		</summary>
		<value>
			<para><see langword="true"/> to display an error dialog on the screen if the process 
   cannot be started; otherwise, <see langword="false"/>. </para>
		</value>
		<remarks>
			<note type="note">
				<see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> must be <see langword="true "/>if you want to set <see cref="System.Diagnostics.ProcessStartInfo.ErrorDialog"/> to <see langword="true"/>.
      
   </note>
		</remarks>
	</doc><doc for="ProcessStartInfo.ErrorDialogParentHandle">
		<summary>
			<para> Gets or sets the
      window handle to use when an error dialog is shown for a process that cannot be started.</para>
		</summary>
		<value>
			<para>An IntPtr that identifies the handle of the error dialog that results from a 
      process start failure.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Diagnostics.ProcessStartInfo.ErrorDialog"/> is true, this specifies the 
   parent window for the dialog that is shown. It is useful to specify a parent in
   order to keep the dialog in front of the application.</para>
		</remarks>
	</doc><doc for="ProcessStartInfo.Verb">
		<summary>
			<para> Gets or sets the verb to use when opening the application or document
      specified by the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/>
      property.
      </para>
		</summary>
		<value>
			<para>The action to take with the file that the process opens. The default is an empty string ("").</para>
		</value>
		<remarks>
			<para> Each file name extension has its own set of verbs, which can be obtained using the
   <see cref="System.Diagnostics.ProcessStartInfo.Verbs"/> property. For example, the "print"
      verb will print a document specified using <see cref="System.Diagnostics.ProcessStartInfo.FileName"/>. The default verb can be
      specified using an empty string (""). </para>
			<para>When you use the <see cref="System.Diagnostics.ProcessStartInfo.Verbs"/> property, you must include the
   file name extension when you set the value of the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property.
   The file name does not need to have an extension if you manually enter a value
   for the <see cref="System.Diagnostics.ProcessStartInfo.Verb"/> property. </para>
		</remarks>
	</doc>
	<doc for="ProcessStartInfo.Verbs">
		<summary>
			<para>Gets the set of verbs associated with the type of file specified by the
   <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property.</para>
		</summary>
		<value>
			<para>The actions that the system can apply to the file indicated by the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property.</para>
		</value>
		<remarks>
			<para>When you use the <see cref="System.Diagnostics.ProcessStartInfo.Verbs"/> property, you must
   include the file name extension when you set the value of the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property. The file
   name extension determines the set of possible verbs.</para>
		</remarks>
		<seealso cref="System.Diagnostics.ProcessStartInfo.Verb"/>
	</doc>
	<doc for="ProcessStartInfo.WorkingDirectory">
		<summary>
			<para> Gets or sets the
      initial directory for the process to be started.</para>
		</summary>
		<value>
			<para>The fully qualified name of the directory that contains the process to be
      started. The default is an empty string ("").</para>
		</value>
		<remarks>
			<para>If the directory is already part of the system path
      variable, it is not necessary to repeat the directory's location in this
      property.</para>
			<para>The <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> property behaves differently when <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="true"/>
than when <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>.
When <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="true"/>,
the <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> property specifies the
location of the executable. If <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> is an
empty string, the current directory is understood to contain the executable. </para>
			<para>When <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>,
the <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> property is not used to
find the executable. Instead, it is used by the process that is launched and
only has meaning within the context of the new process.</para>
		</remarks>
	</doc>
	<doc for="ProcessStartInfo.Arguments">
		<summary>
			<para>Gets or sets the set of command line arguments to use when starting the application.</para>
		</summary>
		<value>
			<para>File type-specific arguments that the system can associate with the
      application specified in the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property. The default is an
      empty string ("").</para>
		</value>
		<example>
			<codelink SampleID="Process.Start_static" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ProcessStartInfo.WindowStyle">
		<summary>
			<para> Gets or sets the window state to use when the process is started.</para>
		</summary>
		<value>
			<para>A <see cref="System.Diagnostics.ProcessWindowStyle"/> that indicates whether the process is started in a
   window that is maximized, minimized, normal (neither maximized nor minimized),
   or not visible. The default is <see langword="normal"/>.</para>
		</value>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The window style is not one of the <see cref="System.Diagnostics.ProcessWindowStyle"/> enumeration members.</exception>
		<example>
			<codelink SampleID="Process.Start_static" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ProcessStartInfo.CreateNoWindow">
		<summary>
			<para>Gets or sets a value indicating whether to start the process in a new window.</para>
		</summary>
		<value>
			<para><see langword="true"/> to start the process without creating a new window to
   contain it; otherwise, <see langword="false"/>. The default is
<see langword="false"/>.</para>
		</value>
		<example>
			<codelink SampleID="Process.Start_instance" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ProcessStartInfo.RedirectStandardInput">
		<summary>
			<para>Gets or sets a value indicating whether the process
      command input is read from the <see cref="System.Diagnostics.Process"/> instance's <see cref="System.Diagnostics.Process.StandardInput"/> member, enabling you to
      read from a source other than the standard input stream (usually the keyboard). Used to read
      data from a file, for example.</para>
		</summary>
		<value>
			<para><see langword="true"/> to read input
   from <see cref="System.Diagnostics.Process.StandardInput" qualify="true"/> ;
   otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="ProcessStartInfo.UseShellExecute">
		<summary>
			<para>Gets or sets a value indicating whether to use the
      operating system shell to start the process.</para>
		</summary>
		<value>
			<para><see langword="true"/> to use the
   shell when starting the process; otherwise, the process is created directly from
   the executable file. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Setting this property to <see langword="false"/> enables
   you to redirect input, output, and error streams.</para>
			<para>When you use the operating system shell to start
   processes, you are able to start any document (which is any registered file
   type associated with an executable that has a default open action) and perform
   operations on the file, such as printing, with the <see cref="System.Diagnostics.Process"/>
   component. When <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>,
   you are able to start only executables with the <see cref="System.Diagnostics.Process"/> component.</para>
			<note type="note">
				<see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> must be <see langword="true "/> if you set <see cref="System.Diagnostics.ProcessStartInfo.ErrorDialog"/> to <see langword="true"/>.
   
</note>
			<para>The <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> property behaves differently when <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="true"/> than when <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>. When <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="true"/>, the <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> property specifies the location of the
executable. If <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/>
is an empty string, the current directory is understood to contain
the executable. </para>
			<para>When <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>, the <see cref="System.Diagnostics.ProcessStartInfo.WorkingDirectory"/> property is not used to find the executable.
Instead, it is used by the process that is launched and only has meaning within
the context of the new process.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessOneStream" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.ProcessStartInfo.RedirectStandardInput"/>
		<seealso cref="System.Diagnostics.ProcessStartInfo.RedirectStandardOutput"/>
		<seealso cref="System.Diagnostics.ProcessStartInfo.RedirectStandardError"/>
	</doc>
	<doc for="ProcessStartInfo.RedirectStandardError">
		<summary>
			<para>Gets or sets a value indicating whether the process's
      error output is written to the <see cref="System.Diagnostics.Process"/> instance's <see cref="System.Diagnostics.Process.StandardError"/> member,
      enabling you to write to a destination other than the standard error stream
      (usually the monitor screen). Used to write error data to a file or a log, for example.</para>
		</summary>
		<value>
			<para><see langword="true"/> to write error
   output to <see cref="System.Diagnostics.Process.StandardError" qualify="true"/>
   ; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Diagnostics.Process"/>
component
communicates with a child process using a pipe. If a child process writes enough data to the
pipe to fill the buffer, the child will block until the parent reads the data
from the pipe. This can cause deadlock if your application is reading all output to standard error
and standard output, for example, using the following C# code.</para>
			<code lang="C#">ProcessStartInfo ps = new ProcessStartInfo("...", "...");
ps.UseShellExecute = false;
ps.RedirectStandardOutput = true;
Process p=new Process();
p.Start(ps);
p.WaitForExit();
string output = p.StandardOutput.ReadToEnd();
</code>
			<para> In this
   instance, both the parent and the child processes would
   be blocked, as the filled pipe prevents the child process from completing, while the parent process is waiting
   indefinitely for the child process to exit.</para>
			<para>This problem can be solved by moving the <c>ReadToEnd()</c> before the <c>WaitForExit()</c>, as follows. </para>
			<code lang="C#">ProcessStartInfo ps = new ProcessStartInfo("...", "...");
ps.UseShellExecute = false;
ps.RedirectStandardOutput = true;
Process p=new Process();
p.Start(ps);
string output = p.StandardOutput.ReadToEnd();
p.WaitForExit();
</code>
			<para>A similar problem arises if you redirect both standard output and standard
   error and then try to read both, for example using the following C# code.</para>
			<code lang="C#">string output = p.StandardOutput.ReadToEnd();
string error = p.StandardError.ReadToEnd();
p.WaitForExit();
</code>
			<para>In this case, if the child process writes any text
   to standard error it will block the process, because the parent
   process cannot read from standard error until it has finished reading from standard output.
   However, the parent process will not read from standard output until the process ends.
   A recommended solution to this situation is to create two threads so that your application can
   read the output of each stream on a separate thread.</para>
		</remarks>
	</doc>
	<doc for="ProcessStartInfo.RedirectStandardOutput">
		<summary>
			<para>Gets or sets a value indicating whether the process
      output is written to the <see cref="System.Diagnostics.Process"/> instance's <see cref="System.Diagnostics.Process.StandardOutput"/> member, enabling you to write to a destination
      other than the standard output stream (usually the monitor screen). Used
      to write data to a file, for example.</para>
		</summary>
		<value>
			<para><see langword="true"/> to write
   output to <see cref="System.Diagnostics.Process.StandardOutput" qualify="true"/>
   ; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Diagnostics.Process"/>
component
communicates with a child process using a pipe. If a child process writes enough data to the
pipe to fill the buffer, the child will block until the parent reads the data
from the pipe. This can cause deadlock if your application is reading all output to standard error
and standard output, for example, using the following C# code.</para>
			<code lang="C#">ProcessStartInfo ps = new ProcessStartInfo("...", "...");
ps.UseShellExecute = false;
ps.RedirectStandardOutput = true;
Process p=new Process();
p.Start(ps);
p.WaitForExit();
string output = p.StandardOutput.ReadToEnd();
</code>
			<para> In this
   instance, both the parent and the child processes would
   be blocked, as the filled pipe prevents the child process from completing, while the parent process is waiting
   indefinitely for the child process to exit.</para>
			<para>This problem can be solved by moving the <c>ReadToEnd()</c> before the <c>WaitForExit()</c>, as follows. </para>
			<code lang="C#">ProcessStartInfo ps = new ProcessStartInfo("...", "...");
ps.UseShellExecute = false;
ps.RedirectStandardOutput = true;
Process p=new Process();
p.Start(ps);
string output = p.StandardOutput.ReadToEnd();
p.WaitForExit();
</code>
			<para>A similar problem arises if you redirect both standard output and standard
   error and then try to read both, for example using the following C# code.</para>
			<code lang="C#">string output = p.StandardOutput.ReadToEnd();
string error = p.StandardError.ReadToEnd();
p.WaitForExit();
</code>
			<para>In this case, if the child process writes any text
   to standard error it will block the process, because the parent
   process cannot read from standard error until it has finished reading from standard output.
   However, the parent process will not read from standard output until the process ends.
   A recommended solution to this situation is to create two threads so that your application can
   read the output of each stream on a separate thread.</para>
		</remarks>
		<example>
			<codelink SampleID="ProcessOneStream" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ProcessStartInfo">
		<summary>
			<para>Specifies a set of values used when starting a
      process.</para>
		</summary>
		<remarks>
			<para><see cref="System.Diagnostics.ProcessStartInfo"/> is used in conjunction with the <see cref="System.Diagnostics.Process"/>
component. When you start a process using the <see cref="System.Diagnostics.Process"/> class, you have access to
process information in addition to that available when attaching to a running
process. </para>
			<para>You can use the <see cref="System.Diagnostics.ProcessStartInfo"/> class for greater control over the process
you start. You must at least set the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property, either manually
or using the constructor. The file name is any application or document. Here a
document is defined to be any file type that has an open or default action
associated with it. You can view registered file types and their associated
applications for your computer using the <SpecialLocalizableItem kind="UIElement">Folder Options</SpecialLocalizableItem> dialog available through the operating system. The <SpecialLocalizableItem kind="UIElement">Advanced</SpecialLocalizableItem> button
leads to a dialog that shows whether there is an open action associated with
a specific registered file type.</para>
			<para> In addition, you can set other properties that define actions to
   take with that file. You can specify a value specific to the type of
   the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property for the <see cref="System.Diagnostics.ProcessStartInfo.Verb"/> property. For example, you can specify
   "print" for a document type. Additionally, you can specify <see cref="System.Diagnostics.ProcessStartInfo.Arguments"/> property values to be command
   line arguments to pass to the file's open procedure.
   For example, if you specify a text editor application in the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property, you can use the <see cref="System.Diagnostics.ProcessStartInfo.Arguments"/> property to specify a text
   file to be opened by the editor.</para>
			<para>Standard input is usually the keyboard, and standard output and
   error are usually the monitor screen. However, you can use the <see cref="System.Diagnostics.ProcessStartInfo.RedirectStandardInput"/>, <see cref="System.Diagnostics.ProcessStartInfo.RedirectStandardOutput"/> and <see cref="System.Diagnostics.ProcessStartInfo.RedirectStandardError"/>
   properties to cause the process to get input from or return output to a file or
   other device. If you use the <see cref="System.Diagnostics.Process.StandardInput"/>, <see cref="System.Diagnostics.Process.StandardOutput"/>, or <see cref="System.Diagnostics.Process.StandardError"/> properties on the <see cref="System.Diagnostics.Process"/>
   component, you must first set the corresponding value on the <see cref="System.Diagnostics.ProcessStartInfo"/> property. Otherwise, the system
   throws an exception when you read or write to the stream.</para>
			<para>Set <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> to specify whether to start
the process using the operating system shell. </para>
			<para>You can change the value of any <see cref="System.Diagnostics.ProcessStartInfo"/> property up to the time
that the process starts. After you start the process, changing these values has
no effect. </para>
		</remarks>
		<example>
			<codelink SampleID="Process.Start_static" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ProcessStartInfo.ProcessStartInfo">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.ProcessStartInfo"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.ProcessStartInfo"/> class without specifying a
   file name with which to start the process.</para>
		</summary>
		<remarks>
			<para> You must set at least the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property before starting 
   the process. The file name is any application or document. In this case, a
   document is defined to be any file type that has an open or default action
   associated with it. You can view registered file types and their associated
   applications for your computer using the <SpecialLocalizableItem kind="UIElement">Folder Options</SpecialLocalizableItem> dialog available through the operating system. The <SpecialLocalizableItem kind="UIElement">Advanced</SpecialLocalizableItem> button leads to a
dialog that shows whether there is an open action associated
with a specific registered file type.</para>
			<para> Optionally, you can also set other properties before starting the
   process. The <see cref="System.Diagnostics.ProcessStartInfo.Verb"/> property supplies actions to take, such as
   "print", with the file indicated in the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property. The <see cref="System.Diagnostics.ProcessStartInfo.Arguments"/>
   property supplies a way to pass command line arguments to the file when the
   system opens it.</para>
		</remarks>
	</doc>
	<doc for="ProcessStartInfo.ProcessStartInfo1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.ProcessStartInfo"/> class and specifies a file name such as an application or document with which to start the process.</para>
		</summary>
		<param name="fileName">An application or document with which to start a process.</param>
		<remarks>
			<para>The file name is any application or document. In this 
      case, a document is defined to be any file type that has an open or default
      action associated with it. You can view registered file types and their
      associated applications for your computer using the <SpecialLocalizableItem kind="UIElement">Folder Options</SpecialLocalizableItem> dialog available through the operating
   system. The <SpecialLocalizableItem kind="UIElement">Advanced</SpecialLocalizableItem>
button leads to a dialog that shows whether there is an open
action associated with a specific registered file type.</para>
			<para>You can change the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property after calling this
constructor, up to the time that the process starts. After you start the
process, changing these values has no effect.</para>
		</remarks>
	</doc>
	<doc for="ProcessStartInfo.ProcessStartInfo2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.ProcessStartInfo"/> class and specifies an application file name with which to start the process, as well as a set
   of command line arguments to pass to the application.</para>
		</summary>
		<param name="fileName">An application with which to start a process.</param>
		<param name=" arguments">Command line arguments to pass to the application when the process starts.</param>
		<remarks>
			<para>The file name is any application or document. In this 
      case, a document is defined to be any file type that has an open or default
      action associated with it. You can view registered file types and their
      associated applications for your computer using the <SpecialLocalizableItem kind="UIElement">Folder Options</SpecialLocalizableItem> dialog available through the operating
   system. The <SpecialLocalizableItem kind="UIElement">Advanced</SpecialLocalizableItem>
button leads to a dialog that shows whether there is an open action associated
with a specific registered file type.</para>
			<para>You can change the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> or <see cref="System.Diagnostics.ProcessStartInfo.Arguments"/> properties after calling
this constructor, up to the time that the process starts. After you start the
process, changing these values has no effect.</para>
		</remarks>
	</doc>
	<doc for="ProcessStartInfo.FileName">
		<summary>
			<para> Gets or sets the application or document to start.
      </para>
		</summary>
		<value>
			<para>The name of the application to start, or the name of a document of
      a file type that is associated with an application and that has a
      default open action available to it. The default is an empty string ("").</para>
		</value>
		<remarks>
			<para>You must set at least the <see cref="System.Diagnostics.ProcessStartInfo.FileName"/> property before starting 
   the process. The file name is any application or document. Here a document is
   defined to be any file type that has an open or default action associated with
   it. You can view registered file types and their associated applications for
   your computer using the <SpecialLocalizableItem kind="UIElement">Folder Options</SpecialLocalizableItem> dialog
available through the operating system. The <SpecialLocalizableItem kind="UIElement">Advanced</SpecialLocalizableItem> button leads to a dialog
that shows whether there is an open action associated with a specific registered
file type.</para>
			<para>The set of file types available to you depends in part on the value of
   the <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> property. If <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/>is <see langword="true"/> ,
   you are able to start any document and perform operations on the file, such as
   printing, with the <see cref="System.Diagnostics.Process"/> component. When <see cref="System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>,
   you are able to start only executables with the <see cref="System.Diagnostics.Process"/> component.</para>
		</remarks>
		<example>
			<codelink SampleID="Process.Start_instance" SnippetID="1"/>
		</example>
	</doc>
</docs>
