<docs>
	<doc for="EventLog.EntryCount">
		<summary>
     Gets the number of entries in the log
 </summary>
		<returns>
     the number of entries in the log
 </returns>
	</doc>
	<doc for="EventLog.IsOpen">
		<summary>
     Determines whether the event log is open in either read or write access
 </summary>
	</doc>
	<doc for="EventLog.IsOpenForRead">
		<summary>
     Determines whether the event log is open with read access
 </summary>
	</doc>
	<doc for="EventLog.IsOpenForWrite">
		<summary>
     Determines whether the event log is open with write access.
 </summary>
	</doc>
	<doc for="EventLog.CompletionCallback">
		<internalonly/>
	</doc>
	<doc for="EventLog.FindSourceRegistration">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="EventLog.FindSourceRegistration1">
		<summary>
     Gets a RegistryKey that points to the LogName entry in the registry that is
     the parent of the given source on the given machine, or null if none is found.
 </summary>
	</doc>
	<doc for="EventLog.GetAllEntries">
		<summary>
     Gets an array of EventLogEntry's, one for each entry in the log.
 </summary>
	</doc>
	<doc for="EventLog.GetCachedEntryPos">
		<summary>
     Searches the cache for an entry with the given index
 </summary>
		<returns>
     the position of the entry in the cache, or -1 if it's not there
 </returns>
	</doc>
	<doc for="EventLog.GetEntryAt">
		<summary>
     Gets the entry at the given index
 </summary>
		<param name="index">
     0-based index specifying which entry to retrieve
 </param>
		<returns>
     the specified entry
 </returns>
	</doc>
	<doc for="EventLog.GetNextEntryPos">
		<summary>
     Finds the index into the cache where the next entry starts
 </summary>
	</doc>
	<doc for="EventLog.GetPreviousEntryPos">
		<summary>
     Finds the index into the cache where the previous entry starts
 </summary>
	</doc>
	<doc for="EventLog.IntFrom">
		<summary>
     Extracts a 32-bit integer from the ubyte buffer, beginning at the byte offset
     specified in offset.
 </summary>
	</doc>
	<doc for="EventLog.OpenForRead">
		<summary>
     Opens the event log with read access
 </summary>
	</doc>
	<doc for="EventLog.OpenForWrite">
		<summary>
     Opens the event log with write access
 </summary>
	</doc>
	<doc for="EventLog.Reset">
		<summary>Closes any handles that may be open and re-opens them to put the object
     back in the same state it was in.</summary>
	</doc>
	<doc for="EventLog.StartListening">
		<summary>
     Sets up the event monitoring mechanism.  We don't track event log changes
     unless someone is interested, so we set this up on demand.
 </summary>
	</doc>
	<doc for="EventLog.StopListening">
		<summary>
     Tears down the event listening mechanism.  This is called when the last
     interested party removes their event handler.
 </summary>
	</doc>
	<doc for="EventLog.StopRaisingEvents">
		<summary>
		</summary>
		<remarks>
			<para>
       The <see cref="System.Diagnostics.EventLog.EnableRaisingEvents"/> property determines whether the <see cref="System.Diagnostics.EventLog"/> instance should raise events when entries are written to the log. When the property is <see langword="true"/>, components sinking the <see cref="System.Diagnostics.EventLog.EntryWritten"/> event will receive notification any time an entry is written to the log specified in the <see cref="System.Diagnostics.EventLog.Log"/> property. If <see cref="System.Diagnostics.EventLog.EnableRaisingEvents"/> is <see langword="false"/>, no events will be raised.Setting <see cref="System.Diagnostics.EventLog.EnableRaisingEvents"/> to <see langword="true"/> is equivalent to calling the <see cref="System.Diagnostics.EventLog.StartRaisingEvents"/> method; setting it to <see langword="false"/> is equivalent to calling <see cref="System.Diagnostics.EventLog.StopRaisingEvents"/>.
    </para>
		</remarks>
	</doc>
	<doc for="EventLog.WriteEvent">
		<summary>
     Logs an entry in the event log.
 </summary>
		<param name="eventID">
     the ID number of the entry
 </param>
		<param name="category">
     an arbitrary category associated with the entry
 </param>
		<param name="type">
     a member of the EventLogEntryType enum
 </param>
		<param name="strings">
     insertion strings to be used in displaying the message
 </param>
		<param name="rawData">
     binary data associated with the entry
 </param>
	</doc>
	<doc for="EventLog.Entries">
		<summary>
			<para>Gets the contents of the event log.</para>
		</summary>
		<value>
			<para>An <see cref="System.Diagnostics.EventLogEntryCollection"/> holding the
   entries in the event log. Each entry is associated with an instance of
   the <see cref="System.Diagnostics.EventLogEntry"/>
   
   class.</para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Diagnostics.EventLog.Entries"/>
member when reading from the event
log.</para>
			<para>Because the property is read-only, you cannot modify an
   entry or write to the log using <see cref="System.Diagnostics.EventLog.Entries"/>. Instead,
   specify a <see cref="System.Diagnostics.EventLog.Source"/> and call <see cref="System.Diagnostics.EventLog.WriteEntry"/> to write a new log entry. You can
   use <see cref="System.Diagnostics.EventLog.Entries"/>
   to count the
   number of entries in the event log, and view each <see cref="System.Diagnostics.EventLogEntry"/> in the collection.
   Use the indexed <see cref="System.Diagnostics.EventLogEntryCollection.this"/> member to retrieve
   information about a specific entry, such as <see cref="System.Diagnostics.EventLogEntry.Message"/>, <see cref="System.Diagnostics.EventLogEntry.Category"/>, <see cref="System.Diagnostics.EventLogEntry.TimeWritten"/>, or <see cref="System.Diagnostics.EventLogEntry.EntryType"/>.</para>
			<para>It is not necessary to specify a <see cref="System.Diagnostics.EventLog.Source"/>
when only reading from a log. You can specify
only the <see cref="System.Diagnostics.EventLog.Log"/> name and <see cref="System.Diagnostics.EventLog.MachineName"/> (server
computer name) properties for the
<see cref="System.Diagnostics.EventLog"/> instance. In either case, the <see cref="System.Diagnostics.EventLog.Entries"/> member is automatically populated
with the event log's list of entries. You can select the appropriate index for
an item in this list to read individual entries.</para>
			<para>An important distinction between reading and writing log entries is that it
   is not necessary to explicitly call a read method. Once the <see cref="System.Diagnostics.EventLog.Log"/> and <see cref="System.Diagnostics.EventLog.MachineName"/> are specified, the <see cref="System.Diagnostics.EventLog.Entries"/>
   property is automatically populated. If you change the value of the <see cref="System.Diagnostics.EventLog.Log"/>
   or <see cref="System.Diagnostics.EventLog.MachineName"/> property, the <see cref="System.Diagnostics.EventLog.Entries"/> property is repopulated the next time you read
   it.</para>
			<note type="note">
   You are not required to
   specify the <see cref="System.Diagnostics.EventLog.MachineName"/> if you
   are connecting to a log. If you do
   not specify the <see cref="System.Diagnostics.EventLog.MachineName"/>, the local computer, ".", is
   assumed.
   
</note>
		</remarks>
		<example>
			<para>The following example reads entries in the event log,
      "MyNewLog", on the local computer.</para>
			<codelink SampleID="Classic EventLog.Entries Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryCollection"/>
		<seealso cref="System.Diagnostics.EventLogEntry"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.WriteEntry"/>
	</doc>
	<doc for="EventLog.GetEventLogs">
		<overload>
			<para> Creates an array of the event logs.
      </para>
		</overload>
		<summary>
			<para> Searches for all event logs on the local computer and
      creates an array of <see cref="System.Diagnostics.EventLog"/>
      objects that contain the
      list.
      </para>
		</summary>
		<returns>
			<para> An array of type <see cref="System.Diagnostics.EventLog"/>
that represents the logs on the
local computer.</para>
		</returns>
		<exception cref="System.SystemException">
			<para>You do not have read access to the registry.</para>
			<para>-or-</para>
			<para>There is no event log service on the computer. </para>
		</exception>
		<remarks>
			<para> The array of <see cref="System.Diagnostics.EventLog"/> objects is a
   snapshot of all event logs on the local computer when the call to <see cref="System.Diagnostics.EventLog.GetEventLogs"/> is made. This is not
   a dynamic collection, so it does not reflect the deletion or creation of logs
   in real time. You should verify that a log in the array exists before you read
   or write to it. The array usually includes at least
   three logs: Application, System, and Security. If you created custom logs on
   the local computer, they will appear in the array as well.
   </para>
			<para>To retrieve the list of event logs, you must have the appropriate registry permissions.
   These permissions are identical to those required to call <see cref="System.Diagnostics.EventLog.Exists"/> and <see cref="System.Diagnostics.EventLog.SourceExists"/>. </para>
		</remarks>
		<example>
			<para> The
      following example gets a list of logs on the local computer. It then outputs
      the name of each log.
      </para>
			<codelink SampleID="Classic EventLog.GetEventLogs Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Exists"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
	</doc>
	<doc for="EventLog.GetEventLogs1">
		<summary>
			<para> Searches for all event logs on the given computer and
      creates an array of <see cref="System.Diagnostics.EventLog"/>
      objects that contain the
      list.
      </para>
		</summary>
		<param name="machineName">The computer on which to search for event logs. </param>
		<returns>
			<para> An array of type <see cref="System.Diagnostics.EventLog"/>
that represents the logs on the
given computer.</para>
		</returns>
		<exception cref="System.ArgumentException">
			<para>The <paramref name="machineName"/> parameter is an invalid computer name. </para>
		</exception>
		<exception cref="System.SystemException">
			<para>You do not have read access to the registry.</para>
			<para> -or-</para>
			<para>There is no event log service on the computer.</para>
		</exception>
		<remarks>
			<para> The array of <see cref="System.Diagnostics.EventLog"/> objects is a snapshot of all event
   logs on the computer specified by the <paramref name="machineName"/>
   parameter when the call to <see cref="System.Diagnostics.EventLog.GetEventLogs"/> is made. This is not a
   dynamic collection, so it does not reflect the deletion or creation of logs in
   real time. You should verify that a log in the array exists before you read
   or write to it. The array usually includes at least
   three logs: Application, System, and Security. If you created custom logs on
   the specified computer, they will appear in the array as well.
   </para>
			<para>
				<see cref="System.Diagnostics.EventLog.GetEventLogs"/> is a <see langword="static "/> method, so it can be
called on the <see cref="System.Diagnostics.EventLog"/> class itself. It is not necessary to create an
instance of an <see cref="System.Diagnostics.EventLog"/>
object to make
a call to the method.</para>
			<para> To retrieve the list of event logs, you must have the appropriate registry permissions.
   These permissions are identical to those required to call <see cref="System.Diagnostics.EventLog.Exists"/> and <see cref="System.Diagnostics.EventLog.SourceExists"/>.
   </para>
		</remarks>
		<example>
			<para> The following example gets a list of logs on the computer "myServer".
      It then outputs the name of each log.
      </para>
			<codelink SampleID="Classic EventLog.GetEventLogs1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Exists"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
	</doc>
	<doc for="EventLog.SourceExists">
		<overload>
			<para> Searches a computer's registry for a given event source.
      </para>
		</overload>
		<summary>
			<para> Determines whether an event source is registered on the local computer.
      </para>
		</summary>
		<param name="source">The name of the event source. </param>
		<returns>
			<para>
				<see langword="true"/> if the event source is registered on the local
   computer; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para> Use
      this method to determine if an event source exists on the
      local computer. If you want to determine whether a log exists on the local
      computer, use <see cref="System.Diagnostics.EventLog.Exists"/> .
      </para>
			<para> Because this method accesses the registry, you must have the appropriate
      registry permissions on the local computer; otherwise, the query will return
   <see langword="false"/> .
      </para>
			<para> Because you cannot give a new source the name of an
      existing source on the same computer, use this method before attempting to call
   <see cref="System.Diagnostics.EventLog.CreateEventSource"/> to
      ensure
      that
      a source with the name specified by <paramref name="source "/>does not already exist on the local
      computer. The <paramref name="source"/>
      parameter is not case-sensitive.
      </para>
		</remarks>
		<example>
			<para> The following example writes an entry to an event log, "MyNewLog", on
      the local computer, and creates the source "MySource" if the source does not
      exist. </para>
			<note type="note">
      It is not necessary for you to create
      the event source in your code. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does not exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log. If you do not specify the <see cref="System.Diagnostics.EventLog.Log"/> property of the
   <see cref="System.Diagnostics.EventLog"/> instance, the log defaults to the
      Application log.
      
   </note>
			<codelink SampleID="Classic EventLog.Source Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Exists"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
	</doc>
	<doc for="EventLog.SourceExists1">
		<summary>
			<para> Determines whether an event
      source is registered on a specified computer.
      </para>
		</summary>
		<param name="source">The name of the event source. </param>
		<param name="machineName">The name the computer on which to look, or an empty string ("") for the local computer. </param>
		<returns>
			<para>
				<see langword="true "/>if the event source is registered on the given computer;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="machineName"/> parameter is an invalid computer name. </exception>
		<remarks>
			<para> Use
      this method to determine if an event source exists on the
      computer specified by the <paramref name="machineName "/>parameter.
      If you want to determine whether a log exists on the specified
      computer, use <see cref="System.Diagnostics.EventLog.Exists"/> .
      </para>
			<para> Because this method accesses the registry, you must have the appropriate
      registry permissions on the given server; otherwise, the query will return
   <see langword="false"/> .
      </para>
			<para> Because you cannot give a new source the name of an
      existing source on the same computer, use this method before attempting to call
   <see cref="System.Diagnostics.EventLog.CreateEventSource"/> to
      ensure
      that
      a source with the name specified by <paramref name="source "/> does not already exist on the
      computer. The <paramref name="source"/> and <paramref name="machineName"/>
      parameters are not case sensitive.
      </para>
			<para>
				<see cref="System.Diagnostics.EventLog.SourceExists"/> is a <see langword="static "/>method, so it can be called on the class itself. It is not necessary to create an instance
   of <see cref="System.Diagnostics.EventLog"/> to call <see cref="System.Diagnostics.EventLog.SourceExists"/>.
   </para>
		</remarks>
		<example>
			<para> The following example writes an entry to an event log, "MyNewLog", on
      the computer "MyServer", and creates the source "MySource" if the source does
      not exist. </para>
			<note type="note">
      It is not necessary for you to create
      the event source in your code. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does not exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log. If you do not specify the <see cref="System.Diagnostics.EventLog.Log"/> property of the
   <see cref="System.Diagnostics.EventLog"/> instance, the log defaults to the
      Application log.
      
   </note>
			<codelink SampleID="Classic EventLog.SourceExists1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Exists"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
	</doc>
	<doc for="EventLog.Finalize">
		<summary>
			<para> Prepares an <see cref="System.Diagnostics.EventLog"/>
instance for garbage collection.</para>
		</summary>
		<remarks>
			<para> Open resources are closed and the base class's
   <see langword="Dispose"/> method is called. The process to close open resources
      can generate exceptions that must be handled by the method that calls <see cref="System.Diagnostics.EventLog.Finalize"/>
      .
      </para>
		</remarks>
	</doc><doc for="EventLog.Dispose">
		<nodoc/>
		<internalonly/>
		<summary>
			<para> Disposes of the resources (other than memory) used by the <see cref="System.Diagnostics.EventLog"/>.</para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception"><para>The event log's read handle or write handle was not released successfully.</para></exception>
		<remarks>
			<para>Call <see cref="System.Diagnostics.EventLog.Dispose"/> when you are finished using the <see cref="System.Diagnostics.EventLog"/>.
   The <see cref="System.Diagnostics.EventLog.Dispose"/> method leaves the <see cref="System.Diagnostics.EventLog"/> in
   an unusable state. After calling <see cref="System.Diagnostics.EventLog.Dispose"/>, you must release all
   references to the <see cref="System.Diagnostics.EventLog"/> so the memory it was occupying can be
   reclaimed by garbage collection. </para>
			<note type="note">
   Always call <see cref="System.Diagnostics.EventLog.Dispose"/> before you release your last reference to
   the <see cref="System.Diagnostics.EventLog"/>. Otherwise, the resources the <see cref="System.Diagnostics.EventLog"/> is
   using will not be freed until garbage collection calls the <see cref="System.Diagnostics.EventLog"/>
   object's destructor.
</note>
		</remarks>
		<seealso cref="System.Diagnostics.EventLog.Close"/>
		<seealso cref="System.ComponentModel.Component.Dispose"/>
	</doc><doc for="EventLog.Dispose1">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="EventLog.Close">
		<summary>
			<para> Closes the event log and releases read and write handles.
      </para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception"><para>The event log's read handle or write handle was not released successfully.</para></exception>
		<remarks>
			<para> The <see cref="System.Diagnostics.EventLog.Close"/> method is called by the protected 
<see cref="System.ComponentModel.Component.Dispose"/> method. You do not need to
   invoke <see cref="System.Diagnostics.EventLog.Close"/> before calling <see cref="System.ComponentModel.Component.Dispose"/> .</para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.Clear"/>
	</doc><doc for="EventLog.Clear">
		<summary>
			<para> Removes all entries from the event log.
      </para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception"><para>The event log was not cleared successfully. </para>
			<para> -or- </para>
			<para>The log cannot be opened. A Windows error code is available.</para></exception>
		<exception cref="System.ArgumentException">A value is not specified for the <see cref="System.Diagnostics.EventLog.Log"/> property. Make sure the log name is not an empty string. </exception>
		<exception cref="System.Exception">The log cannot be opened. No Windows error code is available. </exception>
		<remarks>
			<para> Event logs are set with a maximum size that determines 
      how many entries they can contain. When an event
      log is full, it stops recording new event information or begins to overwrite earlier entries.
      If event recording stops, you can use this method to clear the log of existing
      entries and
      allow it to start recording events again. You must have administrator permissions
      to the computer on which the log resides in order to clear event log
      entries.
      </para>
			<para><see cref="System.Diagnostics.EventLog.Clear"/>
closes the event log, releases the event handles, retrieves new read
and write handles, and reopens the event log. Events received after the call to
the method are not cleared along with the existing events.</para>
		</remarks>
		<example>
			<para> The following example clears an event log.
      </para>
			<note type="caution">
      Because Application, System, Security,
      and other non-custom logs can contain crucial information; make sure
      "mySource" is registered to a custom log before executing this sample code.
      
   </note>
			<codelink SampleID="Classic EventLog.Clear Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Close"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
	</doc><doc for="EventLog.EntryWritten">
		<summary>
			<para> Occurs when an entry is written to an event log on the local computer.
      </para>
		</summary>
		<remarks>
			<para>To get event notifications, you must set <see cref="System.Diagnostics.EventLog.EnableRaisingEvents"/> to <see langword="true"/>. You can only receive event
   notifications when entries are written on the local computer. You cannot
   receive notifications for entries written on remote computers. </para>
			<para> When you create an <see cref="System.Diagnostics.EventLog.EntryWritten"/> delegate, you identify the
method that will handle the event. To associate the event with your
event handler, add an instance of the delegate to the event. The
event handler is called whenever the event occurs, until you remove the
delegate. For more information about handling events with delegates, see
<see topic="cpconEventsOverview"/>.</para>
			<para>The system responds to <see cref="System.Diagnostics.EventLog.WriteEntry"/> only if the last write
event occurred at least five seconds previously. This implies you will only
receive one <see cref="System.Diagnostics.EventLog.EntryWritten"/> event notification within a five-second
interval, even if more than one event log change occurs. If you
insert a sufficiently long sleep interval (around 10 seconds) between calls to
<see cref="System.Diagnostics.EventLog.WriteEntry"/>, no events will be lost. However, if write 
events occur more frequently, the most recent write events could be lost. </para>
		</remarks>
		<example>
			<para>The following example handles an entry written event.</para>
			<codelink SampleID="Classic EventLog.EntryWritten Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.EnableRaisingEvents"/>
	</doc><doc for="EventLog.BeginInit">
		<summary>
			<para>Begins the initialization of an <see cref="System.Diagnostics.EventLog"/> used on a form
   or used by another component. The initialization occurs at runtime.</para>
		</summary>
		<remarks>
			<para> The Visual Studio .NET design environment uses this method
      to start the initialization of a component used on a form or by another
      component. The <see cref="System.Diagnostics.EventLog.EndInit"/> method ends the initialization. Using the
   <see cref="System.Diagnostics.EventLog.BeginInit"/> and <see cref="System.Diagnostics.EventLog.EndInit"/> methods prevents the
      control from being used before it is fully initialized.</para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLog.EndInit"/>
	</doc><doc for="EventLog.EndInit">
		<summary>
			<para>Ends the initialization of an <see cref="System.Diagnostics.EventLog"/> used on a form or
   by another component. The initialization occurs at runtime.</para>
		</summary>
		<remarks>
			<para> The Visual Studio .NET design
      environment uses this method to end the initialization of a component used on a form or
      by another component. The <see cref="System.Diagnostics.EventLog.BeginInit"/> method starts the
      initialization. Using the <see cref="System.Diagnostics.EventLog.BeginInit"/> and <see cref="System.Diagnostics.EventLog.EndInit"/> methods prevents the control from being used
      before it is fully initialized.</para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLog.BeginInit"/>
	</doc><doc for="EventLog.LogDisplayName">
		<summary>
			<para>Gets the event log's friendly name.</para>
		</summary>
		<value>
			<para>A name that represents the event log in the system's event viewer.</para>
		</value>
		<exception cref="System.Exception">The log does not exist on the computer specified by the <see cref="System.Diagnostics.EventLog.MachineName"/> property.</exception>
		<exception cref="System.SystemException">The application could not open the registry key associated with this event log.</exception>
		<permission cref="System.Diagnostics.EventLogPermission">for browsing the event log information on the computer.</permission>
		<permission cref="T:System.Security.Permissions.RegistryPermission">for accessing the event log registry information on the computer.</permission>
		<example>
			<codelink SampleID="EventLog_LogDisplayNameWriteEntry" SnippetID="1"/>
		</example>
	</doc><doc for="EventLog.Exists">
		<overload>
			<para> Determines whether the specified log
      exists.
      </para>
		</overload>
		<summary>
			<para> Determines whether the log
      exists on the local computer.
      </para>
		</summary>
		<param name="logName">The name of the log to search for. Possible values include: Application, Security, System, other application-specific logs (such as those associated with Active Directory), or any custom log on the computer. </param>
		<returns>
			<para><see langword="true "/>if the log exists on the local computer; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentException">The logName is <see langword="null"/> or the value is empty. </exception>
		<remarks>
			<para> Use this method to determine if a log exists on the
      local computer. If you want to determine whether a source exists on the
      local computer, use <see cref="System.Diagnostics.EventLog.SourceExists"/>
      .
      </para>
			<para> Because this method accesses the
      registry, you must have the appropriate registry permissions on the local computer; otherwise, the query
      returns <see langword="false"/>.
      </para>
			<para> Because you cannot give a new log the name
      of an existing log on the same computer, use this method before creating a new log
      to determine if the specified <paramref name="logName "/>already exists on the local computer.
      The <paramref name="logName"/>
      parameter
      is not case sensitive.
      </para>
			<para><see cref="System.Diagnostics.EventLog.Exists"/> is a <see langword="static "/>method, so it can be called on the class itself. It is not necessary to create an
   instance of <see cref="System.Diagnostics.EventLog"/> to call <see cref="System.Diagnostics.EventLog.Exists"/>.
   </para>
		</remarks>
		<example>
			<codelink SampleID="EventLog_Exists_1" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
	</doc><doc for="EventLog.CreateEventSource">
		<overload>
			<para> Establishes an application as
      able to write event information to a particular log on the system.</para>
		</overload>
		<summary>
			<para> Establishes an application, using the
      specified <see cref="System.Diagnostics.EventLog.Source"/> , as a valid
      event source
      for writing entries to a log on the local
      computer. This method can also create
      a new custom log on the local computer.</para>
		</summary>
		<param name="source">The source name by which the application is registered on the local computer.</param>
		<param name="logName">The name of the log the source's entries are written to. Possible values include: Application, Security, System, or a custom event log.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="source "/>parameter is <see langword="null"/> or is an empty string ("").</para></exception>
		<exception cref="System.ArgumentException">The source cannot be registered because it already exists on the local computer.</exception>
		<exception cref="System.Exception">The application cannot open the registry key for the source on the local computer.</exception>
		<remarks>
			<para> Use
      this overload to create a custom log or to create and register a <see cref="System.Diagnostics.EventLog.Source"/> to
      an existing log on the local
      computer.</para>
			<para> If the <paramref name="logname "/>is
<see langword="null"/> or an empty string ("") when you call
<see cref="System.Diagnostics.EventLog.CreateEventSource"/>, the log defaults to 
   the Application log. If the log does not exist on the local
   computer, the system creates a custom log and registers your application as a
<see cref="System.Diagnostics.EventLog.Source"/>
for that
log.</para>
			<note type="note">
				<see cref="System.Diagnostics.EventLog.CreateEventSource"/> defines the new log, but <see cref="System.Diagnostics.EventLog.WriteEntry"/> creates the log the first time you call
   it.
</note>
			<para> You only need to create an event source
   if you are writing to the event log. Before writing an entry to an event
   log, you must register the event source with the event log as a valid source of events. When
   you write a log entry using <see cref="System.Diagnostics.EventLog.WriteEntry"/>, the system
   uses the <see cref="System.Diagnostics.EventLog.Source"/> to find the appropriate log in
   which to place your entry. If you are reading the event log, you can either
   specify the <see cref="System.Diagnostics.EventLog.Source"/> , or a <see cref="System.Diagnostics.EventLog.Log"/> and <see cref="System.Diagnostics.EventLog.MachineName"/>.</para>
			<note type="note">
   You are not required to specify the <see cref="System.Diagnostics.EventLog.MachineName"/> if you are connecting to a log.
   If you do not specify the <see cref="System.Diagnostics.EventLog.MachineName"/> when reading from a log,
   the local computer (".") is assumed.
   
</note>
			<para>The <paramref name="source "/>
parameter can be
any string, although often it will be the name of
your application or a component of your application. The source must be unique
on the local computer. However, a single event
log can have many different sources writing to it at
once.</para>
			<note type="note">
   If a source has already been mapped
   to a log and you remap it to a new log, you must reboot the computer for the
   changes to take effect.
</note>
			<para>Calling this method is optional; if you do not call
<see cref="System.Diagnostics.EventLog.CreateEventSource"/> , it is
   called the first time you call <see cref="System.Diagnostics.EventLog.WriteEntry"/>
   .</para>
		</remarks>
		<example>
			<para>The following example writes an entry to an event log, "MyNewLog", on the
      local computer, and creates the source "MySource" if the source does not already
      exist. </para>
			<note type="note">
      It is not necessary for you to create
      the event source in your code. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does not exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log. If you do not specify the <see cref="System.Diagnostics.EventLog.Log"/> property of the
   <see cref="System.Diagnostics.EventLog"/> instance, the log defaults to the
      Application log.
      
   </note>
			<codelink SampleID="Classic EventLog.CreateEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
	</doc>
	<doc for="EventLog">
		<summary>
			<para> Provides interaction with Windows event logs.
      </para>
		</summary>
		<remarks>
			<para><see cref="System.Diagnostics.EventLog"/> lets
   you
   access or customize Windows 2000 event logs, which record
   information about important software or hardware events. Using <see cref="System.Diagnostics.EventLog"/> , you can read from existing logs, write
   entries to logs, create or delete event sources, delete
   logs, and respond to log entries. You can also create new
   logs when creating an event source.</para>
			<para> If
   the log that you specify in a call to <see cref="System.Diagnostics.EventLog.CreateEventSource"/> does
   not exist on the computer, the system creates a custom log
   and registers your application as a source for that log.
   Use the <see cref="System.Diagnostics.EventLog"/> class to read and write entries to any event
   log for which you have the appropriate access.</para>
			<note type="note">
   The Security log is
   read-only.
   
</note>
			<para> If you write to an event log, you must
   specify or create an event <see cref="System.Diagnostics.EventLog.Source"/>. The <see cref="System.Diagnostics.EventLog.Source"/>
   registers your application
   with the event log as a valid source of entries. You can only use the
<see cref="System.Diagnostics.EventLog.Source"/>
to write
to one log at a time. The <see cref="System.Diagnostics.EventLog.Source"/> can be any random
string, but the name must be distinct from other sources on the computer.
It is common for the
source to be the name of the application or another identifying string. An
attempt to create a duplicated <see cref="System.Diagnostics.EventLog.Source"/>
value throws an exception. However, a single event log
can be associated with multiple sources.</para>
			<para> To read from a log, specify the <see cref="System.Diagnostics.EventLog.Log"/> name and <see cref="System.Diagnostics.EventLog.MachineName"/> (server computer name) for the
<see cref="System.Diagnostics.EventLog"/> . It is
not necessary to specify the <see cref="System.Diagnostics.EventLog.Source"/> , as a source is required only for writing to logs. The <see cref="System.Diagnostics.EventLog.Entries"/>
member is automatically populated with
the event log's list of entries.</para>
			<note type="note">
   You are not
   required to specify the <see cref="System.Diagnostics.EventLog.MachineName"/> if you are connecting to a log by
   specifying a <see cref="System.Diagnostics.EventLog.Log"/>/<see cref="System.Diagnostics.EventLog.MachineName"/> pair. If you do
   not specify the <see cref="System.Diagnostics.EventLog.MachineName"/>, the local computer, ".", is
   assumed.
   
</note>
			<para> When writing to an event log, you can specify the
   type of information sent with the <paramref name="message"/> parameter. In addition to sending
   the message, you can send an <see cref="System.Diagnostics.EventLogEntryType"/>
   to indicate whether the message is an
   error, warning, or information entry type. You can also specify application-defined <paramref name="eventId "/>and <paramref name="category "/>parameters
   to display in the Type and Category columns of the event
   viewer. Finally, you can also attach binary data to your event entry if you need to
   associate additional information with a given event.</para>
			<para> In addition to accessing individual event logs and their
   entries, the <see cref="System.Diagnostics.EventLog"/> class provides
   access to
   the collection of all event logs. You can use the <see langword="static "/>members of <see cref="System.Diagnostics.EventLog"/> to delete logs, get log lists, create
   or delete a source, or determine if a computer already contains a
   particular
   source.
   </para>
			<para> Windows 2000 has three
   default logs: Application, System, and Security. Other installed applications and
   services, such as Active Directory, can have additional event logs. You can use
<see cref="System.Diagnostics.EventLog"/>
to create
custom event logs you can view through the server's Event Viewer.</para>
			<para> Event logging consumes disk space,
   processor time, and other system resources. It is important to log only essential
   information. It is recommended that you place event log calls in an error
   path, rather than in
   the main code path, so as not to adversely affect performance.
   </para>
			<para>For a list of initial property values for an instance of <see cref="System.Diagnostics.EventLog"/>, see
the <see cref="M:System.Diagnostics.EventLog.#ctor"/> constructor.</para>
		</remarks>
		<example>
			<para> The following example writes an entry to an event log, "MyNewLog", on
      the local computer, and creates the source "MySource" if it does not already
      exist. </para>
			<note type="note">
      It is not necessary for you to create
      the event source in your code. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does not exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log.
      
   </note>
			<codelink SampleID="Classic EventLog.CreateEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntry"/>
		<seealso cref="System.Diagnostics.EntryWrittenEventArgs"/>
		<seealso cref="T:System.ServiceProcess.ServiceBase"/>
	</doc>
	<doc for="EventLog.EventLog">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.EventLog"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.EventLog"/> class. Does not associate the instance with
   any
   log.</para>
		</summary>
		<remarks>
			<para> 
      Before calling <see cref="System.Diagnostics.EventLog.WriteEntry"/>
      , specify the <see cref="System.Diagnostics.EventLog.Source"/> property of the <see cref="System.Diagnostics.EventLog"/>
      instance. If you are only reading <see cref="System.Diagnostics.EventLog.Entries"/> from the log,
      you can alternatively specify only the <see cref="System.Diagnostics.EventLog.Log"/> and <see cref="System.Diagnostics.EventLog.MachineName"/>
      properties.</para>
			<note type="note">
      If you do not specify a <see cref="System.Diagnostics.EventLog.MachineName"/>
      , the local computer (".") is assumed.
      
   </note>
			<para>The following table shows initial property values for an
      instance of <see cref="System.Diagnostics.EventLog"/>
      
      .</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Source"/></term>
					<description>An empty string ("").</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Log"/></term>
					<description>An
            empty string ("").</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.MachineName"/></term>
					<description>The local computer (".").</description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example writes an entry to an
      event log, "MyNewLog", on the local computer, and creates the source
      "MySource" if it does not already exist. </para>
			<note type="note">
      It is not necessary for you to
      create the event source in your code. If the source you set in
      the <see cref="System.Diagnostics.EventLog.Source"/> property does not already exist, the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to the
      event log.
      
   </note>
			<codelink SampleID="Classic EventLog.CreateEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
		<seealso cref="System.Diagnostics.EventLog.WriteEntry"/>
		<seealso cref="System.Diagnostics.EventLogEntry"/>
	</doc>
	<doc for="EventLog.EventLog1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.EventLog"/> class. Associates the instance with a log on
   the local computer.</para>
		</summary>
		<param name="logName">The name of the log on the local computer.</param>
		<remarks>
			<para> 
      This overload sets the <see cref="System.Diagnostics.EventLog.Log"/> property to the <paramref name="logName"/> parameter.
      Before calling <see cref="System.Diagnostics.EventLog.WriteEntry"/>, specify the <see cref="System.Diagnostics.EventLog.Source"/> property of the <see cref="System.Diagnostics.EventLog"/>
      instance. If you are only reading <see cref="System.Diagnostics.EventLog.Entries"/> from the log, you can alternatively
      specify only the <see cref="System.Diagnostics.EventLog.Log"/> and
   <see cref="System.Diagnostics.EventLog.MachineName"/> 
   properties.</para>
			<note type="note">
   If you do not specify a <see cref="System.Diagnostics.EventLog.MachineName"/> , the local computer (".") is
   assumed. This overload of the constructor specifies the <see cref="System.Diagnostics.EventLog.Log"/>
   property, but you can change this before reading the <see cref="System.Diagnostics.EventLog.Entries"/> property.
</note>
			<para>If the source you specify in the <see cref="System.Diagnostics.EventLog.Source"/> property is unique from other sources on the
computer, a subsequent call to <see cref="System.Diagnostics.EventLog.WriteEntry"/> creates a log with the
specified name, if it does not already exist. </para>
			<para>The following table shows initial property values for an
   instance of <see cref="System.Diagnostics.EventLog"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Source"/></term>
					<description>An empty string ("").</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Log"/></term>
					<description>The <paramref name="logName"/>
   parameter.</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.MachineName"/></term>
					<description>The local computer (".").</description>
				</item>
			</list>
		</remarks>
		<example>
			<para> The following example reads entries in
      the event log, "myNewLog", on the local computer. </para>
			<codelink SampleID="Classic EventLog.EventLog1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
		<seealso cref="System.Diagnostics.EventLog.WriteEntry"/>
		<seealso cref="System.Diagnostics.EventLogEntry"/>
	</doc>
	<doc for="EventLog.EventLog2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.EventLog"/> class. Associates the instance with a log on
   the specified computer.</para>
		</summary>
		<param name="logName">The name of the log on the specified computer.</param>
		<param name=" machineName">The computer on which the log exists.</param>
		<remarks>
			<para> 
      This overload sets the <see cref="System.Diagnostics.EventLog.Log"/> property to the <paramref name="logName"/> parameter and the <see cref="System.Diagnostics.EventLog.MachineName"/> property to the <paramref name="machineName"/> parameter.
      Before calling <see cref="System.Diagnostics.EventLog.WriteEntry"/>, specify the <see cref="System.Diagnostics.EventLog.Source"/> property of the <see cref="System.Diagnostics.EventLog"/>
      . If you are only reading <see cref="System.Diagnostics.EventLog.Entries"/> from the log, you can alternatively
      specify only the <see cref="System.Diagnostics.EventLog.Log"/> and
   <see cref="System.Diagnostics.EventLog.MachineName"/> 
   properties.</para>
			<note type="note">
   
   This overload of the constructor specifies the <see cref="System.Diagnostics.EventLog.Log"/> and
<see cref="System.Diagnostics.EventLog.MachineName"/>
properties, but you can change either before reading the <see cref="System.Diagnostics.EventLog.Entries"/> property.
</note>
			<para>The following table shows initial property values for an
   instance of <see cref="System.Diagnostics.EventLog"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Source"/></term>
					<description>An empty string ("").</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Log"/></term>
					<description>The <paramref name="logName"/>
   parameter.</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.MachineName"/></term>
					<description>The <paramref name="machineName"/> parameter.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example reads entries in the event
      log, "myNewLog", on the computer "myServer".</para>
			<codelink SampleID="Classic EventLog.EventLog2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
		<seealso cref="System.Diagnostics.EventLog.WriteEntry"/>
		<seealso cref="System.Diagnostics.EventLogEntry"/>
	</doc>
	<doc for="EventLog.EventLog3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Diagnostics.EventLog"/>
class. Associates the instance with a log on the specified computer and creates
or assigns the specified source to the <see cref="System.Diagnostics.EventLog"/> .</para>
		</summary>
		<param name="logName">The name of the log on the specified computer</param>
		<param name=" machineName">The computer on which the log exists.</param>
		<param name=" source">The source of event log entries.</param>
		<exception cref="System.ArgumentException"><para>The log name is invalid.</para>
			<para>-or-</para>
			<para>The computer name is invalid.</para></exception>
		<remarks>
			<para> 
      This constructor sets the <see cref="System.Diagnostics.EventLog.Log"/> property to the <paramref name="logName"/> parameter, the <see cref="System.Diagnostics.EventLog.MachineName"/> property to the <paramref name="machineName"/> parameter, and the <see cref="System.Diagnostics.EventLog.Source"/> property to the <paramref name="source"/> parameter.
      The <see cref="System.Diagnostics.EventLog.Source"/> property is required when writing
      to an event log. However, if you are only reading from an event log, only the
   <see cref="System.Diagnostics.EventLog.Log"/> and 
   <see cref="System.Diagnostics.EventLog.MachineName"/> properties 
      are required (as long as the event log on the server has a source already
      associated with it). If you are only reading from the event log, another
      overload of the constructor might
      suffice.</para>
			<para>The following table shows initial property values for an
      instance of <see cref="System.Diagnostics.EventLog"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Source"/></term>
					<description>The <paramref name="source"/> parameter.</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.Log"/></term>
					<description>The <paramref name="logName"/>
   parameter.</description>
				</item>
				<item>
					<term>
						<see cref="System.Diagnostics.EventLog.MachineName"/></term>
					<description>The <paramref name="machineName"/> parameter.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example writes an entry to an event log, "MyNewLog", on the
      local computer, using the source "MySource". </para>
			<note type="note">
      If "MySource" does not already exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log.
      
   </note>
			<codelink SampleID="Classic EventLog.EventLog3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
		<seealso cref="System.Diagnostics.EventLog.WriteEntry"/>
		<seealso cref="System.Diagnostics.EventLogEntry"/>
	</doc>
	<doc for="EventLog.Log">
		<summary>
			<para>Gets or sets the name of the log to read from or write to.</para>
		</summary>
		<value>
			<para>The name of the
      log. This can
      be Application, System, Security, or a custom log name. The default is an
      empty string ("").</para>
		</value>
		<remarks>
			<para> Three log files exist by default on the server:
      Application, System, and Security. Applications and services use the Application
      log file. Device drivers use the System log file. The system generates
      success and failure audit events in the Security log when auditing is turned on. If
      you have other applications installed, like Active Directory on Windows 2000,
      there might be other default log files. In addition, you can create custom
      log files on a local or remote computer. Custom logs help organize your
      entries in a more detailed way than is allowed when your components write events
      to the default Application
      log.</para>
			<note type="note">
      Log names are limited to eight
      characters. According to the system, MyLogSample1 and MyLogSample2 are the
      same log.
      
   </note>
			<para>If you write to an event log, it is not enough
      to specify the <see cref="System.Diagnostics.EventLog.Log"/>
      property. You must associate a <see cref="System.Diagnostics.EventLog.Source"/> property
      with your event log resource in order to connect it to
      a particular log. It is not necessary to specify a <see cref="System.Diagnostics.EventLog.Source"/>
      when only reading from a log, but
      an event source must be associated with the event log resource in the server's registry. You can specify only the <see cref="System.Diagnostics.EventLog.Log"/> name and <see cref="System.Diagnostics.EventLog.MachineName"/> (server computer name) to
      read from it.</para>
			<note type="note">
      You are not
      required to specify the <see cref="System.Diagnostics.EventLog.MachineName"/> if you
      are connecting to a log. If you do
      not specify the <see cref="System.Diagnostics.EventLog.MachineName"/>, the local computer (".") is
      assumed.
      
   </note>
			<para>If the <see cref="System.Diagnostics.EventLog.Source"/> property has not been specified, a
   call to <see cref="System.Diagnostics.EventLog.Log"/> returns
   an empty string if <see cref="System.Diagnostics.EventLog.Log"/> has not
   been explicitly set (by setting the <see cref="System.Diagnostics.EventLog.Log"/> property, or through the constructor). If the
<see cref="System.Diagnostics.EventLog.Source"/> has been specified, <see cref="System.Diagnostics.EventLog.Log"/>
returns the name of the
log to which that source was registered.</para>
			<para>A source can only be registered to one log at a time. If the <see cref="System.Diagnostics.EventLog.Source"/> property was set for an
instance of <see cref="System.Diagnostics.EventLog"/> , you cannot change the <see cref="System.Diagnostics.EventLog.Log"/> property for that <see cref="System.Diagnostics.EventLog"/>
without changing the value of <see cref="System.Diagnostics.EventLog.Source"/> or calling <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> first. If you change the
<see cref="System.Diagnostics.EventLog.Log"/> property once the <see cref="System.Diagnostics.EventLog.Source"/> property 
has been set, writing a log entry throws an exception.</para>
			<para>You cannot create a new log using the <see cref="System.Diagnostics.EventLog.Log"/> property alone (without
specifying a source for the log). You can call <see cref="System.Diagnostics.EventLog.CreateEventSource"/>, passing in a new log name as a
parameter, and then call <see cref="System.Diagnostics.EventLog.DeleteEventSource"/>
. However, the intent is usually either to create (and write entries
to) new application-specific logs, or
to read from existing logs.</para>
			<para> If the <see cref="System.Diagnostics.EventLog.Log"/>
value changes, the
event log is closed and all event handles are released.</para>
			<note type="caution">
   If you set the <see cref="System.Diagnostics.EventLog.Log"/>
   property to the name of a log that does not exist, the system attaches
   the <see cref="System.Diagnostics.EventLog"/> to the Application log,
   but does not warn you that it is using a log other than the one you
   specified.
</note>
		</remarks>
		<example>
			<para>The following example reads entries in the event log,
      "NewEventLog", on the local computer.</para>
			<codelink SampleID="Classic EventLog.Log Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
		<seealso cref="System.Diagnostics.EventLog.Exists"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLogEntryCollection"/>
	</doc>
	<doc for="EventLog.MachineName">
		<summary>
			<para> Gets or sets the name of the computer on which to read or write events.
      </para>
		</summary>
		<value>
			<para> The
      name of the server on which the
      event log resides. The default is the local computer (".").
      </para>
		</value>
		<exception cref="System.ArgumentException">The computer name is invalid. </exception>
		<remarks>
			<para> If you write to an event log, you must associate a
   <see cref="System.Diagnostics.EventLog.Source"/> 
   with your event log object in order to connect it to a particular log. It is
   not necessary to specify the <see cref="System.Diagnostics.EventLog.Source"/> property
   when only reading from a log. You can specify only the <see cref="System.Diagnostics.EventLog.Log"/> name and <see cref="System.Diagnostics.EventLog.MachineName"/> (server computer name).
   </para>
			<note type="note">
   You need
   not specify the <see cref="System.Diagnostics.EventLog.MachineName"/> if you
   are connecting to a log. If you do
   not specify the <see cref="System.Diagnostics.EventLog.MachineName"/>, the local computer (".") is
   assumed.
   
</note>
			<para> A source can only be registered to one log at a time. If the <see cref="System.Diagnostics.EventLog.Source"/> property was set for an
instance of <see cref="System.Diagnostics.EventLog"/> , you cannot change the <see cref="System.Diagnostics.EventLog.MachineName"/> property for that <see cref="System.Diagnostics.EventLog"/>
without changing the value of <see cref="System.Diagnostics.EventLog.Source"/> or calling <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> first.
If you change the <see cref="System.Diagnostics.EventLog.MachineName"/> property, the <see cref="System.Diagnostics.EventLog"/>
closes all handles
and reattaches to the log and source on the new computer.
</para>
			<para> The <see cref="System.Diagnostics.EventLog.MachineName"/> value cannot be an empty
string. If it is not explicitly set,
it defaults to the local computer (".").</para>
		</remarks>
		<example>
			<para>The following example reads entries in the event log,
      "NewEventLog", on a specified computer.</para>
			<codelink SampleID="Classic EventLog.MachineName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Exists"/>
		<seealso cref="System.Diagnostics.EventLog.GetEventLogs"/>
	</doc>
	<doc for="EventLog.EnableRaisingEvents">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.Diagnostics.EventLog"/> 
receives <see cref="System.Diagnostics.EventLog.EntryWritten"/> event notifications.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the <see cref="System.Diagnostics.EventLog"/> receives notification when an entry is
   written to the log; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> The <see cref="System.Diagnostics.EventLog.EnableRaisingEvents"/> property determines whether the <see cref="System.Diagnostics.EventLog"/>
raises events when entries are written to the log. When the
property is <see langword="true"/>, components receiving the <see cref="System.Diagnostics.EventLog.EntryWritten"/> event will receive notification any time an
entry is written to the log specified in the <see cref="System.Diagnostics.EventLog.Log"/> property. If <see cref="System.Diagnostics.EventLog.EnableRaisingEvents"/> is <see langword="false"/> , no events are
raised.</para>
		</remarks>
		<example>
			<para>The following example handles an <see cref="System.Diagnostics.EventLog.EntryWritten"/>
event.</para>
			<codelink SampleID="Classic EventLog.EnableRaisingEvents Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.EntryWritten"/>
	</doc>
	<doc for="EventLog.Source">
		<summary>
			<para> Gets or sets the source name to register and use when writing to the event log.
      </para>
		</summary>
		<value>
			<para> The name registered with the
      event log as a source of entries. The default is
      an
      empty string ("").
      </para>
		</value>
		<remarks>
			<para> The event source indicates what logs the event. It is often the name of the
      application, or the name of a subcomponent of the application, if the application
      is large. Applications and services should write to
      the Application log or a custom log. Device drivers should write to
      the System log.
      </para>
			<para> If you write to an event log, you must specify or create
      an event source, and set the <see cref="System.Diagnostics.EventLog.Source"/>
      property appropriately. If you create
      a new source, which can only write to one log at a time, it registers your application with the
      event log as a valid source of entries. The <see cref="System.Diagnostics.EventLog.Source"/> property can be
      any string, but the name cannot be used by other sources on the computer.
      An attempt to create a duplicated <see cref="System.Diagnostics.EventLog.Source"/> value throws an exception.
      However, a single event log can have many different sources writing to
      it.</para>
			<note type="note">
      If
      a source has already been mapped to a log and you remap it to a new
      log, you must reboot the computer for the changes to take effect.
      
   </note>
			<para> It is not necessary to specify the <see cref="System.Diagnostics.EventLog.Source"/> property
   when only reading from a log. You can
   specify only the <see cref="System.Diagnostics.EventLog.Log"/> name and <see cref="System.Diagnostics.EventLog.MachineName"/> (server computer name) for the
<see cref="System.Diagnostics.EventLog"/> . In either case, the <see cref="System.Diagnostics.EventLog.Entries"/> member 
   is
   automatically populated with the event log's list of entries.</para>
			<note type="note">
   You are not required to
   specify the <see cref="System.Diagnostics.EventLog.MachineName"/> if you
   are connecting to a log. If you do
   not specify the <see cref="System.Diagnostics.EventLog.MachineName"/>, the local computer (".") is
   assumed.
   
</note>
			<para> The <see cref="System.Diagnostics.EventLog.Source"/> value can be an empty
string if you are only reading from the event log.
If the <see cref="System.Diagnostics.EventLog.Source"/> value changes, the <see cref="System.Diagnostics.EventLog"/>
to which it is registered is closed
and all event handles are released.</para>
			<para> If you do not specify a log name when calling
<see cref="System.Diagnostics.EventLog.CreateEventSource"/>, your source will be registered to the
   Application log. If you specify the name of a log that does not exist, the
   system creates a custom event log for you and registers the <see cref="System.Diagnostics.EventLog.Source"/>
   to that log.
   </para>
			<para> When you write a log entry using <see cref="System.Diagnostics.EventLog.WriteEntry"/>, the system uses the source
you identified to find the appropriate log
in which to place your entry.</para>
			<note type="note">
   If you call <see cref="System.Diagnostics.EventLog.WriteEntry"/> without first having
   registered the <see cref="System.Diagnostics.EventLog.Source"/> for your <see cref="System.Diagnostics.EventLog"/> , the method
   registers the source for you.
   
</note>
		</remarks>
		<example>
			<para>The following example writes an entry to an event log, "MyNewLog", on the
      local computer, and creates the source "MySource" if the source does not already
      exist. </para>
			<note type="note">
      It is not necessary for you to create
      the event source in your code. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does not already exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log. If you do not specify the <see cref="System.Diagnostics.EventLog.Log"/> property of the <see cref="System.Diagnostics.EventLog"/>
      , the log defaults to the application log.
      
   </note>
			<codelink SampleID="Classic EventLog.Source Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
	</doc>
	<doc for="EventLog.CreateEventSource1">
		<summary>
			<para>Establishes an application, using the specified
      <see cref="System.Diagnostics.EventLog.Source"/>, as a valid event source for writing
      entries to a log on the computer
      specified by <paramref name="machineName"/>. This method can also be used to create a new
      custom log on the specified computer.</para>
		</summary>
		<param name="source">The source by which the application is registered on the specified computer.</param>
		<param name="logName">The name of the log the source's entries are written to. Possible values include: Application, Security, System, or a custom event log. If you do not specify a value, the <paramref name="logName"/> defaults to Application.</param>
		<param name="machineName">The name of the computer to register this event source with, or "." for the local computer.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="machineName "/>parameter is invalid. </para></exception>
		<exception cref="System.ArgumentException">The <paramref name="source "/>parameter is <see langword="null"/> or is an empty string ("").</exception>
		<exception cref="System.ArgumentException">The source cannot be registered because it already exists on the specified computer.</exception>
		<exception cref="System.Exception">The application cannot open the registry key for the source on the specified computer.</exception>
		<remarks>
			<para> Use this overload to create a
      custom log or to create and register a <see cref="System.Diagnostics.EventLog.Source"/> to an existing log
      on the specified computer.</para>
			<para>If the <paramref name="logname "/>is <see langword="null"/> when you call <see cref="System.Diagnostics.EventLog.CreateEventSource"/>, the log defaults to the
   Application log. If the log does not exist on the specified computer, the
   system creates a custom log and registers your application as a <see cref="System.Diagnostics.EventLog.Source"/> for that log.</para>
			<para> You only need to create an event source if you are writing to the
   event log. Before writing an entry to an event log, you must register the event source with the
   event log as a valid source of events. When you write a log entry using <see cref="System.Diagnostics.EventLog.WriteEntry"/>, the system uses the <see cref="System.Diagnostics.EventLog.Source"/> to find the appropriate log in
   which to place your entry. If you are reading the event log, you might either
   specify the <see cref="System.Diagnostics.EventLog.Source"/> , or a <see cref="System.Diagnostics.EventLog.Log"/> and <see cref="System.Diagnostics.EventLog.MachineName"/>.</para>
			<para>The <paramref name="source "/>parameter can be any string, although often it will be the
name of your application or a component of your application. The source must be
unique on the local computer. However, a single event log can have many
different sources writing to it at once.</para>
			<note type="note">
   If a source has already been mapped
   to a log and you remap it to a new log, you must reboot the computer for the
   changes to take effect.
</note>
			<para>Calling this method is optional; if you do not call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> , it is called the first time you
call <see cref="System.Diagnostics.EventLog.WriteEntry"/> .</para>
		</remarks>
		<example>
			<para>The following example writes an entry to an event log, "MyNewLog", on the
      computer "MyServer", and creates the source "MySource" if the source does not
      already exist. </para>
			<note type="note">
      It is not necessary for you to create
      the event source in your code. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does not exist,
      the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log. If you do not specify the <see cref="System.Diagnostics.EventLog.Log"/> property of the
      <see cref="System.Diagnostics.EventLog"/> instance, the log defaults to the
      Application log.
      
      </note>
			<codelink SampleID="Classic EventLog.SourceExists1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
	</doc>
	<doc for="EventLog.Delete">
		<overload>
			<para> Removes
      a log resource.
      </para>
		</overload>
		<summary>
			<para> Removes
      an event
      log from the local computer.
      </para>
		</summary>
		<param name="logName">The name of the log to delete. Possible values include: Application, Security, System, and any custom event logs on the computer. </param>
		<exception cref="System.ArgumentException"><para>The log name is <see langword="null"/>or is an empty string ("").</para></exception>
		<exception cref="System.SystemException"><para>There is no event log service or you do not have access to read the registry.</para></exception>
		<exception cref="System.SystemException">The log was not found. </exception>
		<remarks>
			<para> Use this method
      when
      the log you want to delete
      is on
      the local computer. You can delete any log on the computer, provided you have the appropriate registry
      permissions.
      </para>
			<para><see cref="System.Diagnostics.EventLog.Delete"/> removes the log specified by
<paramref name="logName "/> from the local computer. If you want to
   delete only the source registered to a log, call <see cref="System.Diagnostics.EventLog.DeleteEventSource"/>. If you only want to delete
   the log entries, call <see cref="System.Diagnostics.EventLog.Clear"/>. <see cref="System.Diagnostics.EventLog.Delete"/>
   and <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> are <see langword="static "/>methods, so they can be called on the class itself. It is not necessary to create a new
   instance of <see cref="System.Diagnostics.EventLog"/>
   to call either
   method.
   </para>
			<para> This method first deletes the file holding the contents of
   the log. It then accesses the registry and removes all the event sources registered for
   that log. Even if you recreate the log at a later point, you will not
   be able to register the event sources
   again.
   Therefore, applications that previously were able
   to write
   entries to that log using the specified source will not be able to write to the new
   log.
   </para>
			<note type="note">
   
   Recreating an event log can be a difficult process. Avoid deleting any of the
   system-created event logs, such as the Application log.
   
</note>
			<para>Deleting a log through a call to <see cref="System.Diagnostics.EventLog.Delete"/> automatically
deletes the sources registered to that log. This can make other applications
using that log inoperative.</para>
		</remarks>
		<example>
			<para> The following example deletes a log from the local computer. The example determines the
      log from its source.
      </para>
			<note type="note">
      
      More than one source might write to an event log. Before deleting a custom log,
      make sure there
      are no other
      sources writing to that log.
      
      </note>
			<codelink SampleID="Classic EventLog.DeleteEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Clear"/>
		<seealso cref="System.Diagnostics.EventLog.Close"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
	</doc>
	<doc for="EventLog.Delete1">
		<summary>
			<para> Removes
      an
      event
      log from the specified computer.
      </para>
		</summary>
		<param name="logName">The name of the log to delete. Possible values include: Application, Security, System, and any custom event logs on the specified computer. </param>
		<param name="machineName">The name of the computer to delete the log from, or "." for the local computer. </param>
		<exception cref="System.ArgumentException"><para>The computer name format is invalid.</para></exception>
		<exception cref="System.ArgumentException">The log name is <see langword="null"/> or is an empty string (""). </exception>
		<exception cref="System.SystemException"><para>There is not an event log service or you do not have access to read the registry.</para></exception>
		<exception cref="System.SystemException">The log was not found. </exception>
		<remarks>
			<para> Use this method
      when
      the log you want to delete
      is on
      a remote computer. You can delete any log on the computer, provided you have the appropriate registry
      permissions.
      </para>
			<para><see cref="System.Diagnostics.EventLog.Delete"/> removes the log specified by
<paramref name="logName "/> from the computer
   specifed by <paramref name="machineName"/> . If you want to
   delete only the source registered to a log, call <see cref="System.Diagnostics.EventLog.DeleteEventSource"/>. If you only want to delete
   the log entries, call <see cref="System.Diagnostics.EventLog.Clear"/>. <see cref="System.Diagnostics.EventLog.Delete"/>
   and <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> are <see langword="static "/>methods, so they can be called on the class itself. It is not necessary to create an
   instance of <see cref="System.Diagnostics.EventLog"/>
   to call either
   method.
   </para>
			<para> This method first deletes the file holding the contents of the
   log. It then accesses the registry and removes all the event sources registered for that
   log. Even if you recreate the log at a later point, you will not be
   able to register the event sources again,
   so
   some applications that previously were able
   to write
   entries using the specified source to that log will not be able to write to the new
   log.
   </para>
			<note type="note">
   
   Recreating an event log can be a difficult process. Avoid deleting any of the
   system-created event logs, such as the Application log.
   
</note>
			<para>Deleting a log through a call to <see cref="System.Diagnostics.EventLog.Delete"/> automatically
deletes the sources registered to that log. This can make other applications
using that log inoperative.</para>
		</remarks>
		<example>
			<para>The following example deletes a log from the specified
      computer. The example determines the log from its source. </para>
			<note type="note">
      More than one source might
      write to an event log. Before deleting a custom log, make sure there are no other
      sources writing to that log.
      
      </note>
			<codelink SampleID="Classic EventLog.Delete1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Clear"/>
		<seealso cref="System.Diagnostics.EventLog.Close"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
	</doc>
	<doc for="EventLog.DeleteEventSource">
		<overload>
			<para> Removes an application's event source registration from the event
      log.
      </para>
		</overload>
		<summary>
			<para> Removes the event source
      registration from the event log of the local computer.
      </para>
		</summary>
		<param name="source">The name by which the application is registered in the event log system. </param>
		<exception cref="System.ArgumentException"><para>The <paramref name="source "/> parameter does not exist in the registry of the local computer.</para></exception>
		<exception cref="System.ArgumentException">You do not have write access on the registry key for the event log. </exception>
		<remarks>
			<para> Use this method to remove the registration of a
      <see cref="System.Diagnostics.EventLog.Source"/> from the local computer. <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> accesses the registry on the local
      computer and removes the
      registration of your application as a valid source of events.
      </para>
			<para> You can remove your component as a valid source of events if you no longer need it
      to write entries to that log. For example, you might do this if you need to change your
      component from one log to another. Because a source can only be registered to
      one log at a time, changing the log requires you to remove the current
      registration.
      </para>
			<para><see cref="System.Diagnostics.EventLog.DeleteEventSource"/> removes only the source registered
   to a log. If you want to remove the log itself, call <see cref="System.Diagnostics.EventLog.Delete"/>. If you only want to delete
   the log entries, call <see cref="System.Diagnostics.EventLog.Clear"/>. <see cref="System.Diagnostics.EventLog.Delete"/> and <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> are <see langword="static "/>methods, so they can be called on the class itself. It is not necessary to create an
   instance of <see cref="System.Diagnostics.EventLog"/> to call either method.
   </para>
			<para> Deleting a log through a call to <see cref="System.Diagnostics.EventLog.Delete"/> automatically deletes the sources
registered to that log. This can make
other applications using that log inoperative. </para>
			<note type="note">
   If a source has already been mapped
   to a log and you remap it to a new log, you must reboot the computer for the
   changes to take effect.
</note>
		</remarks>
		<example>
			<para>The following example deletes a source from the
      local computer. The example determines the log from its source, and then deletes
      the log. </para>
			<note type="note">
      More than one source might
      write to an event log. Before deleting a custom log, make sure there are no other
      sources writing to that log.
      
      </note>
			<codelink SampleID="Classic EventLog.DeleteEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.Clear"/>
	</doc>
	<doc for="EventLog.DeleteEventSource1">
		<summary>
			<para> Removes
      the application's event source registration from the specified computer.
      </para>
		</summary>
		<param name="source">The name by which the application is registered in the event log system. </param>
		<param name="machineName">The name of the computer to remove the registration from, or <see langword="null"/> for the local computer. </param>
		<exception cref="System.ArgumentException"><para>The <paramref name="machineName"/> parameter is invalid.</para></exception>
		<exception cref="System.ArgumentException">The <paramref name="source "/>parameter does not exist in the registry of the specified computer. </exception>
		<exception cref="System.ArgumentException">You do not have write access on the registry key for the event log. </exception>
		<remarks>
			<para> Use this overload to remove the registration of a
      <see cref="System.Diagnostics.EventLog.Source"/> from a remote computer. <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> accesses the registry on the
      computer specified by <paramref name="machineName"/> and removes the registration of your
      application as a valid source
      of events.
      </para>
			<para> You can remove your component as a valid source of events if you no longer need
      it to write entries to that log. For example, you might do this if you need to
      change your component from one log to another. Because a source can only be
      registered to one log at a time, changing the log requires you to remove the current
      registration.
      </para>
			<para><see cref="System.Diagnostics.EventLog.DeleteEventSource"/> removes only the source registered
   to a log. If you want to remove the log itself, call <see cref="System.Diagnostics.EventLog.Delete"/>. If you only want to delete
   the log entries, call <see cref="System.Diagnostics.EventLog.Clear"/>. <see cref="System.Diagnostics.EventLog.Delete"/> and <see cref="System.Diagnostics.EventLog.DeleteEventSource"/> are <see langword="static "/>methods, so they can be called on the class itself. It is not necessary to create an
   instance of <see cref="System.Diagnostics.EventLog"/> to call either method.
   </para>
			<para> Deleting a log through a call to <see cref="System.Diagnostics.EventLog.Delete"/> automatically deletes the sources
registered to that log. This can make
other applications using that log inoperative.</para>
			<note type="note">
   If a source has already been mapped
   to a log and you remap it to a new log, you must reboot the computer for the
   changes to take effect.
</note>
		</remarks>
		<example>
			<para>The following example deletes a source from the specified computer. The
      example determines the log from its source, and then deletes the log. </para>
			<note type="note">
      More than one source might write to
      an event log. Before deleting a custom log, make sure there are no other
      sources writing to that log.
      
      </note>
			<codelink SampleID="Classic EventLog.Delete1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.Clear"/>
	</doc>
	<doc for="EventLog.LogNameFromSourceName">
		<summary>
			<para> Gets the name of the log to which the specified source is registered.</para>
		</summary>
		<param name="source">The name of the event source.</param>
		<param name=" machineName">The name the computer on which to look, or an empty string ("") for the local computer.</param>
		<returns>
			<para>The name of the log associated with the specified source in the registry.</para>
		</returns>
		<remarks>
			<para> The event source indicates what logs the event. It is often the name
      of the application, or the name of a subcomponent of the application,
      if the application is large. Applications and services should write to
      the Application log or a custom log. Device drivers should write to the System log. </para>
			<para> When you create a new source, which can only write to one log at a
      time, the system registers your application with the event log as a valid source of entries.
      The <see cref="System.Diagnostics.EventLog.Source"/> property can be any string, but the
      name cannot be used by other sources on the computer. An attempt to create a
      duplicated <see cref="System.Diagnostics.EventLog.Source"/> value throws an exception.
      However, a single event log can have many different sources writing to it.</para>
		</remarks>
		<example>
			<para>The following example deletes a source from the local computer. The example
      determines the log from its source, and then deletes the log. </para>
			<note type="note">
      More than one source might write to
      an event log. Before deleting a custom log, make sure there are no other
      sources writing to that log.
      
      </note>
			<codelink SampleID="Classic EventLog.DeleteEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
	</doc>
	<doc for="EventLog.WriteEntry">
		<overload>
			<para> Writes an entry in the event log.
      </para>
		</overload>
		<summary>
			<para> Writes an information type entry, with the given message text, to the event log.
      </para>
		</summary>
		<param name="message">The string to write to the event log. </param>
		<exception cref="System.ArgumentException">
			<para>The <see langword="Source"/> property of the <see cref="System.Diagnostics.EventLog"/> has not been set.</para>
			<para>-or-</para>
			<para>The method attempted to create a new event source, but the computer name is not valid.</para>
			<para> -or-</para>
			<para> The method attempted to create a new event source, but the source name was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source already exists on the computer.</para>
			<para> -or-</para>
			<para>The method attempted to create a new log, but the first eight characters of the log name are not unique on the computer.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access, but the <see langword="Log"/> property was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with write access, but the <see langword="Source"/>property was not specified.</para>
			<para> -or-</para>
			<para>The message string is too long. The size must be less than 16384 bytes.</para>
			<para> -or-</para>
			<para>The source is not registered to the given log.</para>
		</exception>
		<exception cref="System.Exception">The registry entry for the log could not be opened on a remote computer. </exception>
		<exception cref="System.InvalidOperationException">The method attempted to open the event log with write access, but you do not have write access to the log. </exception>
		<exception cref="System.ComponentModel.Win32Exception">The method attempted to release the event log's read or write handle but failed. <para> -or-</para><para>The method attempted to open the event log with read access but failed.</para><para> -or-</para><para>The event could not be reported to the log.</para></exception>
		<exception cref="System.SystemException">The event log could not be notified to start receiving events. </exception>
		<remarks>
			<para> Use this method to write an
      information entry to the event log associated with
      this <see cref="System.Diagnostics.EventLog"/>
      instance.
      If you want to specify any other <see cref="System.Diagnostics.EventLogEntryType"/>, use a different overload
      of <see cref="System.Diagnostics.EventLog.WriteEntry"/>.</para>
			<para> You must set the <see cref="System.Diagnostics.EventLog.Source"/> property on
   your <see cref="System.Diagnostics.EventLog"/> component before you can write entries to
   the log. You can call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> on a new source to register it
   before you write to the event log, but this is not necessary. If the source
   specified in the <see cref="System.Diagnostics.EventLog.Source"/> property of this <see cref="System.Diagnostics.EventLog"/>
   instance is not registered on the computer your component is writing to, <see cref="System.Diagnostics.EventLog.WriteEntry"/> calls <see cref="System.Diagnostics.EventLog.CreateEventSource"/>
   and registers the source.</para>
			<note type="note">
   If you do not specify a <see cref="System.Diagnostics.EventLog.MachineName"/> for your <see cref="System.Diagnostics.EventLog"/> instance
   before you call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> or <see cref="System.Diagnostics.EventLog.WriteEntry"/> , the
   local computer (".") is assumed.
</note>
			<para> If the system needs to register the <see cref="System.Diagnostics.EventLog.Source"/> through a call
to <see cref="System.Diagnostics.EventLog.WriteEntry"/> and the <see cref="System.Diagnostics.EventLog.Log"/> property has
not been set on your <see cref="System.Diagnostics.EventLog"/>
instance, it defaults to the Application log.</para>
			<note type="note"> Many of the exceptions listed above are generated
   by errors raised during the process of registering the <see cref="System.Diagnostics.EventLog.Source"/>. </note>
			<para>
				<see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file. </para>
			<note type="note"> If you write an
   entry to a remote computer, the value of the message (the text string) might not
   be what you expect if the remote computer is not running the .NET
   Framework.</note>
		</remarks>
		<example>
			<para>The following example writes an entry to an event
      log, "MyNewLog", on the local computer, and creates the source "MySource"
      if the source does not already exist. </para>
			<note type="note">
      It is not necessary for you to
      create the event source in your code. If the source you set in
      the <see cref="System.Diagnostics.EventLog.Source"/> property does not already exist, the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to the
      event log.
      
      </note>
			<codelink SampleID="Classic EventLog.CreateEventSource Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry1">
		<summary>
			<para> Writes an information type entry with the given
      message text to the event log, using the specified registered event source.
      </para>
		</summary>
		<param name=" source">The source by which the application is registered on the specified computer.</param>
		<param name="message">The string to write to the event log.</param>
		<remarks>
			<para> Use this method to write an information entry to the event log, using
      a source that is already registered as an event source for the
      appropriate log. If you want to specify any other <see cref="System.Diagnostics.EventLogEntryType"/>, use a different overload of <see cref="System.Diagnostics.EventLog.WriteEntry"/>.</para>
			<para>
				<see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you
   specify a string message to write to the log. This method writes the given
   string directly to the log; it does not use a localizable message file. </para>
			<note type="note"> If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework. </note>
		</remarks>
		<example>
			<para> The following example writes an entry to an event
      log, "MyNewLog", on the local computer, and creates the source "MySource" if
      the source does not exist.</para>
			<note type="note"> The code in this example that creates the event
      source is not necessary. If the source you set in the <see cref="System.Diagnostics.EventLog.Source"/> property does
      not exist, the <see cref="System.Diagnostics.EventLog.WriteEntry"/> method creates it before writing to
      the event log.</note>
			<codelink SampleID="Classic EventLog.WriteEntry1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry2">
		<summary>
			<para>Writes an error, warning, information, success audit, or failure audit
      entry with the given message text to the event log. </para>
		</summary>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<exception cref="System.ArgumentException">
			<para>The <see langword="Source"/> property of the <see cref="System.Diagnostics.EventLog"/> has not been set.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the computer name is not valid.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source name was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source already exists on the computer.</para>
			<para> -or-</para>
			<para> The method attempted to create a new log, but the first eight characters of the log name are not unique on the computer.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access, but the <see langword="Log"/> property was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with write access, but the <see langword="Source"/>property was not specified.</para>
			<para> -or-</para>
			<para>The message string is too long. The size must be less than 16384 bytes.</para>
			<para> -or-</para>
			<para>The source is not registered to the given log.</para>
		</exception>
		<exception cref="System.Exception">The registry entry for the log could not be opened on a remote computer. </exception>
		<exception cref="System.InvalidOperationException">The method attempted to open the event log with write access, but you do not have write access to the log. </exception>
		<exception cref="System.ComponentModel.Win32Exception">The method attempted to release the event log's read or write handle but did not do so successfully. <para> -or-</para><para>The method attempted to open the event log with read access but was unable to do so.</para><para> -or-</para><para>The event could not be reported to the log.</para></exception>
		<exception cref="System.SystemException">The event log could not be notified to start checking for events. </exception>
		<remarks>
			<para> Use this method to write an entry of a specified <see cref="System.Diagnostics.EventLogEntryType"/> to the event log. The <paramref name="type "/>is
   indicated in the Event Viewer for a log by an icon and text in the Type
   column.</para>
			<para>You must set the <see cref="System.Diagnostics.EventLog.Source"/> property on your <see cref="System.Diagnostics.EventLog"/>
component before writing entries to the log. You can call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> on a new source to register
it before writing to the event log, but this is not necessary. If the source
specified in the <see cref="System.Diagnostics.EventLog.Source"/> property of this <see cref="System.Diagnostics.EventLog"/>
instance is not registered on the computer your component is writing to, <see cref="System.Diagnostics.EventLog.WriteEntry"/> calls <see cref="System.Diagnostics.EventLog.CreateEventSource"/> and registers the
source.</para>
			<note type="note"> If you do not specify a
<see cref="System.Diagnostics.EventLog.MachineName"/> for your <see cref="System.Diagnostics.EventLog"/> 
instance before you call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> or <see cref="System.Diagnostics.EventLog.WriteEntry"/> , the local computer (".") is
assumed.</note>
			<para>If the system needs to register the <see cref="System.Diagnostics.EventLog.Source"/> through a call to
<see cref="System.Diagnostics.EventLog.WriteEntry"/> and the <see cref="System.Diagnostics.EventLog.Log"/> property has not 
been set on your <see cref="System.Diagnostics.EventLog"/> instance, it defaults to the Application
log.</para>
			<note type="note"> Many exceptions listed above are generated by
   errors raised during the process of registering the <see cref="System.Diagnostics.EventLog.Source"/>. </note>
			<para>
				<see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file. </para>
			<note type="note"> If you write an
   entry to a remote computer, the value of the message (the text string) might not
   be what you expect if the remote computer is not running the .NET
   Framework.</note>
		</remarks>
		<example>
			<para> The following example writes a warning entry
      to an event log, "MyNewLog", on the local computer.
      </para>
			<note type="note">
				<see cref="System.Diagnostics.EventLog.WriteEntry"/> creates the source "MySource" if the source
      does not already exist.
      
      </note>
			<codelink SampleID="Classic EventLog.WriteEntry2 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry3">
		<summary>
			<para>Writes an error, warning, information, success audit, or failure audit entry with
      the given message text to the event log, using the specified registered event
      source.</para>
		</summary>
		<param name=" source">The source by which the application is registered on the specified computer.</param>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<remarks>
			<para> Use this method to write an entry of a specified <see cref="System.Diagnostics.EventLogEntryType"/> to
   the event log, using a source already registered as an event source for the appropriate log. The <paramref name="type "/>is
   indicated in the Event Viewer for a log by an icon and text in the Type
   column.</para>
			<para>
				<see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file. </para>
			<note type="note"> If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework. </note>
		</remarks>
		<example>
			<para>The following example writes a warning entry to an
      event log, "MyNewLog", on the local computer. </para>
			<note type="note">
				<see cref="System.Diagnostics.EventLog.WriteEntry"/> creates the source "MySource" if the
      source does not exist.
      
      </note>
			<codelink SampleID="Classic EventLog.WriteEntry3 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry4">
		<summary>
			<para>Writes an entry with the given message text and application-defined
      event identifier to the event log.</para>
		</summary>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<param name="eventID">The application-specific identifier for the event. </param>
		<exception cref="System.ArgumentException"><para>The <see langword="Source"/> property of the <see cref="System.Diagnostics.EventLog"/> has not been set.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the computer name is not valid.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source name was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source already exists on the computer.</para>
			<para> -or-</para>
			<para> The method attempted to create a new log, but the first eight characters of the log name are not unique on the computer.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access, but the <see langword="Log"/> property was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with write access, but the <see langword="Source"/>property was not specified.</para>
			<para> -or-</para>
			<para>The message string is too long. The size must be less than 16384 bytes.</para>
			<para> -or-</para>
			<para>The source is not registered to the given log.</para></exception>
		<exception cref="System.Exception">The registry entry for the log could not be opened on a remote computer. </exception>
		<exception cref="System.InvalidOperationException">The method attempted to open the event log with write access, but you do not have write access to the log. </exception>
		<exception cref="System.ComponentModel.Win32Exception">The method attempted to release the event log's read or write handle but did not do so successfully. <para> -or-</para><para>The method attempted to open the event log with read access but was unable to do so.</para><para> -or-</para><para>The event could not be reported to the log.</para></exception>
		<exception cref="System.SystemException">The event log could not be notified to start checking for events. </exception>
		<remarks>
			<para>Use this method to write an entry with an application-defined <paramref name="eventID
      "/>to the event log. The <paramref name="eventID"/> together
      with the source uniquely identify an event. Each application can define
      its own numbered events and the description strings to which they map. Event
      viewers display these string values in the Event column. They are intended to help the
      user understand what went wrong and suggest what actions to take.</para>
			<para>In addition to the event identifier, you can specify an <see cref="System.Diagnostics.EventLogEntryType"/> for the event being written to the event
   log. The <paramref name="type "/>is indicated in the Event Viewer for a log by an icon and text in the Type
   column. This indicates whether the event type is error, warning, information,
   success audit, or failure audit.</para>
			<para>You must set the <see cref="System.Diagnostics.EventLog.Source"/> property on your <see cref="System.Diagnostics.EventLog"/>
component before writing entries to the log. You can call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> on a new source to register
it before writing to the event log, but this is not necessary. If the source
specified in the <see cref="System.Diagnostics.EventLog.Source"/> property of this <see cref="System.Diagnostics.EventLog"/>
instance is not registered on the computer your component is writing to, <see cref="System.Diagnostics.EventLog.WriteEntry"/> calls <see cref="System.Diagnostics.EventLog.CreateEventSource"/> and registers the
source.</para>
			<note type="note">
   If you do not specify a
<see cref="System.Diagnostics.EventLog.MachineName"/> for your <see cref="System.Diagnostics.EventLog"/> 
instance before you call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> or <see cref="System.Diagnostics.EventLog.WriteEntry"/> , the local computer (".") is
assumed.
</note>
			<para>If the system needs to register the <see cref="System.Diagnostics.EventLog.Source"/> through a call to
<see cref="System.Diagnostics.EventLog.WriteEntry"/> and the <see cref="System.Diagnostics.EventLog.Log"/> property has not 
been set on your <see cref="System.Diagnostics.EventLog"/> instance, it defaults to the Application
log.</para>
			<note type="note">
   Many exceptions listed above
   are generated by errors raised during the process of registering the <see cref="System.Diagnostics.EventLog.Source"/>
   .
</note>
			<para><see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string
message to write to the log. This method writes the string directly to the log; it
does not use a localizable message file. </para>
			<note type="note">
   If you write an entry to a remote
   computer, the value of the message (the text string) might not be what you expect
   if the remote computer is not running the .NET Framework.
</note>
		</remarks>
		<example>
			<codelink SampleID="EventLog_LogDisplayNameWriteEntry" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry5">
		<summary>
			<para>Writes an entry with the given message text and application-defined event identifier to the event
      log, using the specified registered event source. </para>
		</summary>
		<param name=" source">The source by which the application is registered on the specified computer.</param>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<param name="eventID">The application-specific identifier for the event. </param>
		<remarks>
			<para>Use this method to write an entry with an
      application-defined <paramref name="eventID "/> to the event
      log, using a source already registered as an event source for the appropriate log. The <paramref name="eventID"/> , along with the source, uniquely identify an event.
      Each application can define its own numbered events and the description strings to which
      they map. Event viewers present these strings to the user in the Event
      column. They are intended to help the user understand what went wrong and suggest what
      actions to take.</para>
			<para>In addition to the event identifier, this overload of
      <see cref="System.Diagnostics.EventLog.WriteEntry"/> lets
      you specify an <see cref="System.Diagnostics.EventLogEntryType"/> for
      the event being written to the event log. The <paramref name="type
      "/>is indicated in the Event Viewer for a log by an icon and text in the Type
      column. This indicates whether the event type is error, warning, information,
      success audit, or failure audit.</para>
			<para><see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
   to write to the log. This method writes the given string directly to the log; it
   does not use a localizable message file. </para>
			<note type="note">
   If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework.
</note>
		</remarks>
		<example>
			<codelink SampleID="EventLog_WriteEntry_4" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry6">
		<summary>
			<para> Writes an entry with the given message text,
      application-defined event identifier, and application-defined category to the event log.
      </para>
		</summary>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<param name="eventID">The application-specific identifier for the event. </param>
		<param name="category">The application-specific subcategory associated with the message. </param>
		<exception cref="System.ArgumentException"><para>The <see langword="Source"/> property of the <see cref="System.Diagnostics.EventLog"/> has not been set.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the computer name is not valid.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source name was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source already exists on the computer.</para>
			<para> -or-</para>
			<para> The method attempted to create a new log, but the first eight characters of the log name are not unique on the computer.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access, but the <see langword="Log"/> property was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with write access, but the <see langword="Source"/> property was not specified.</para>
			<para> -or-</para>
			<para>The message string is too long. The size must be less than 16384 bytes.</para>
			<para> -or-</para>
			<para>The source is not registered to the given log.</para></exception>
		<exception cref="System.Exception">The registry entry for the log could not be opened on a remote computer. </exception>
		<exception cref="System.InvalidOperationException">The method attempted to open the event log with write access, but you do not have write access to the log. </exception>
		<exception cref="System.ComponentModel.Win32Exception"><para>The method attempted to release the event log's read or write handle but did not do so successfully.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access but was unable to do so.</para>
			<para> -or-</para>
			<para>The event could not be reported to the log.</para></exception>
		<exception cref="System.SystemException">The event log could not be notified to start checking for events. </exception>
		<remarks>
			<para>Use this method to write an entry with an application-defined <paramref name="category
      "/> to the event log. The category can be used by the event viewer to
      filter events in the log. Each application can define its own numbered categories
      and the text strings to which they map. The categories must be numbered
      consecutively beginning with the number 1. The Event Viewer presents the
      category to the user in the Category column. </para>
			<para> In addition to the category, you can specify an event
      identifier for the event being written to the event log. Event identifiers,
      along with the event source, uniquely identify an event. Each application can
      define its own numbered events and the description strings to which they map.
      Event viewers display these string values in the Event column. They are intended to help the user understand what went wrong and suggest what actions to take.</para>
			<para>Finally, you can specify an <see cref="System.Diagnostics.EventLogEntryType"/> for the event being written to the event
   log. The <paramref name="type "/>is indicated in the Event Viewer for a log by an icon and
   text in the Type column. This indicates whether the event type is error,
   warning, information, success audit, or failure audit.</para>
			<para>You must set the <see cref="System.Diagnostics.EventLog.Source"/> property on your <see cref="System.Diagnostics.EventLog"/>
component before writing entries to the log. You can call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> on a new source to register
it before writing to the event log, but this is not necessary. If the source
specified in the <see cref="System.Diagnostics.EventLog.Source"/> property of this <see cref="System.Diagnostics.EventLog"/>
instance is not registered on the computer your component is writing to, <see cref="System.Diagnostics.EventLog.WriteEntry"/> calls <see cref="System.Diagnostics.EventLog.CreateEventSource"/> and registers the
source.</para>
			<note type="note">
   If you do not specify a
<see cref="System.Diagnostics.EventLog.MachineName"/> for your <see cref="System.Diagnostics.EventLog"/> 
instance before you call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> or <see cref="System.Diagnostics.EventLog.WriteEntry"/> , the local computer (".") is
assumed.
</note>
			<para>If the system needs to register the <see cref="System.Diagnostics.EventLog.Source"/> through a call to
<see cref="System.Diagnostics.EventLog.WriteEntry"/> and the <see cref="System.Diagnostics.EventLog.Log"/> property has not 
been set on your <see cref="System.Diagnostics.EventLog"/> instance, it defaults to the Application
log.</para>
			<note type="note">
   Many exceptions listed above are generated by
   errors raised during the process of registering the <see cref="System.Diagnostics.EventLog.Source"/>.
</note>
			<para><see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file. </para>
			<note type="note">
   If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework.
</note>
		</remarks>
		<example>
			<codelink SampleID="EventLog_WriteEntry_1_3" SnippetID="3"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry7">
		<summary>
			<para>Writes an entry with the given message text, application-defined event identifier, and application-defined category
      to the event log, using the specified
      registered event source. The <paramref name="category"/> can be used by the event viewer to filter
      events in the log.</para>
		</summary>
		<param name=" source">The source by which the application is registered on the specified computer.</param>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<param name="eventID">The application-specific identifier for the event. </param>
		<param name="category">The application-specific subcategory associated with the message. </param>
		<remarks>
			<para>Use this method to write an entry with an application-defined <paramref name="category
      "/> to
      the event log, using a source that is already registered as an event source for the appropriate log. The Event Viewer can use the category to
      filter events in the log. Each application can define its own numbered categories
      and the text strings to which they map. The categories must be numbered
      consecutively beginning with the number 1. The Event Viewer presents the
      category to the user in the Category column. </para>
			<para> In addition to the category, you can specify an event identifier for
      the event being written to the event log. Event identifiers, along with the
      event source, uniquely identify an event. Each application can define its own
      numbered events and the description strings to which they map. Event viewers display
      these string values in the Event column. They areintended to help the user
      understand what went wrong and suggest what actions to take.</para>
			<para>Finally, you can specify an <see cref="System.Diagnostics.EventLogEntryType"/> for the event being written
   to the event log. The <paramref name="type "/>is indicated in the Event Viewer for a log by
   an icon and text in the Type column. This indicates whether the event type is
   error, warning, information, success audit, or failure audit.</para>
			<para><see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file. </para>
			<note type="note">
   If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework.
</note>
		</remarks>
		<example>
			<codelink SampleID="EventLog_WriteEntry_1_3" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry8">
		<summary>
			<para> Writes an entry
      with the given message text, application-defined event identifier, and application-defined category
      to the event log, and appends binary data to the message.
      </para>
		</summary>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<param name="eventID">The application-specific identifier for the event. </param>
		<param name="category">The application-specific subcategory associated with the message. </param>
		<param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
		<exception cref="System.ArgumentException"><para>The <see langword="Source"/> property of the <see cref="System.Diagnostics.EventLog"/> has not been set.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the computer name is not valid.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source name was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to create a new event source, but the source already exists on the computer.</para>
			<para> -or-</para>
			<para> The method attempted to create a new log, but the first eight characters of the log name are not unique on the computer.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access, but the <see langword="Log"/> property was not specified.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with write access, but the <see langword="Source"/> property was not specified.</para>
			<para> -or-</para>
			<para>The message string is too long. The size must be less than 16384 bytes.</para>
			<para> -or-</para>
			<para>The source is not registered to the given log.</para></exception>
		<exception cref="System.Exception">The registry entry for the log could not be opened on a remote computer. </exception>
		<exception cref="System.InvalidOperationException">The method attempted to open the event log with write access, but you do not have write access to the log. </exception>
		<exception cref="System.ComponentModel.Win32Exception"><para>The method attempted to release the event log's read or write handle but did not do so successfully.</para>
			<para> -or-</para>
			<para>The method attempted to open the event log with read access but was unable to do so.</para>
			<para> -or-</para>
			<para>The event could not be reported to the log.</para></exception>
		<exception cref="System.SystemException">The event log could not be notified to start checking for events. </exception>
		<remarks>
			<para>Use this overload to write application-defined event-specific data to the
      event log. The Event Viewer does not interpret this data; it displays raw data
      only in a combined hexadecimal and text format. Use event-specific data
      sparingly, including it only if you are sure it will be useful to someone
      debugging the problem. You can also use event-specific data to store information
      the application can process independently of the Event Viewer. For example, you
      could write a viewer specifically for your events, or write a program that scans
      the logfile and creates reports that include information from the event-specific
      data.</para>
			<para> In addition to the binary data, you
      can specify an application-defined category and an application-defined event identifier. The Event Viewer can use
      the category to filter events in the log. Each application can define its own
      numbered categories and the text strings to which they map. The categories must be
      numbered consecutively beginning with the number 1. The Event Viewer presents
      the category to the user in the Category column. </para>
			<para> Event identifiers, along with the event source, uniquely identify an
      event. Each application can define its own numbered events and the description
      strings to which they map. Event viewers display these string values in the
      Event column. They are intended to help the user understand what went wrong and
      suggest what actions to take.</para>
			<para>Finally, you can specify an <see cref="System.Diagnostics.EventLogEntryType"/> for the event being written
   to the event log. The <paramref name="type "/>is indicated in the Event Viewer for a log by
   an icon and text in the Type column. This indicates whether the event type is
   error, warning, information, success audit, or failure audit.</para>
			<para>You must set the <see cref="System.Diagnostics.EventLog.Source"/> property on your <see cref="System.Diagnostics.EventLog"/>
component before writing entries to the log. You can call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> on a new source to register
it before writing to the event log, but this is not necessary. If the source
specified in the <see cref="System.Diagnostics.EventLog.Source"/> property of this <see cref="System.Diagnostics.EventLog"/>
instance is not registered on the computer your component is writing to, <see cref="System.Diagnostics.EventLog.WriteEntry"/> calls <see cref="System.Diagnostics.EventLog.CreateEventSource"/> and registers the
source.</para>
			<note type="note">
   If you do not specify a
<see cref="System.Diagnostics.EventLog.MachineName"/> for your <see cref="System.Diagnostics.EventLog"/> 
instance before you call <see cref="System.Diagnostics.EventLog.CreateEventSource"/> or <see cref="System.Diagnostics.EventLog.WriteEntry"/> , the local computer (".") is
assumed.
</note>
			<para>If the system needs to register the <see cref="System.Diagnostics.EventLog.Source"/> through a call to
<see cref="System.Diagnostics.EventLog.WriteEntry"/> and the <see cref="System.Diagnostics.EventLog.Log"/> property has not 
been set on your <see cref="System.Diagnostics.EventLog"/> instance, it defaults to the Application
log.</para>
			<note type="note">
   Many exceptions listed above are generated by
   errors raised during the process of registering the <see cref="System.Diagnostics.EventLog.Source"/>.
</note>
			<para><see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file. </para>
			<note type="note">
   If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework.
</note>
		</remarks>
		<example>
			<codelink SampleID="EventLog_WriteEntry_5" SnippetID="1"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.WriteEntry9">
		<summary>
			<para>Writes an entry with the given message text, application-defined event identifier, and application-defined category
      to the event log (using the specified registered
      event source) and appends binary data to the message.</para>
		</summary>
		<param name=" source">The source by which the application is registered on the specified computer.</param>
		<param name="message">The string to write to the event log. </param>
		<param name="type">One of the <see cref="System.Diagnostics.EventLogEntryType"/> values. </param>
		<param name="eventID">The application-specific identifier for the event. </param>
		<param name="category">The application-specific subcategory associated with the message. </param>
		<param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
		<remarks>
			<para> Use this method to
      write application-defined event-specific data to the event log, using a source already registered as an event source for the
      appropriate log. The Event Viewer does not interpret this data; it displays raw data
      only in a combined hexadecimal and text format. Use event-specific data
      sparingly, including it only if you are sure it will be useful to someone
      debugging the problem. You can also use event-specific data to store information
      the application can process independently of the Event Viewer. For example, you
      could write a viewer specifically for your events, or write a program that scans
      the logfile and creates reports that include information from the event-specific
      data.</para>
			<para> In addition to the binary data, you can
      specify an application-defined category and an application-defined event identifier. The Event
      Viewer can use the category to filter events in the log. Each application can define
      its own numbered categories and the text strings to which they map. The
      categories must be numbered consecutively beginning with the number 1. The Event
      Viewer presents the category to the user in the Category column. </para>
			<para> Event identifiers, together with the event source, uniquely identify an
      event. Each application can define its own numbered events and the description
      strings to which they map. Event viewers display these string values in the
      Event column. They are intended to help the user understand what went wrong and
      suggest what actions to take.</para>
			<para>Finally, you can specify an <see cref="System.Diagnostics.EventLogEntryType"/> for the event being written
   to the event log. The <paramref name="type "/>is indicated in the Event Viewer for a log by
   an icon and text in the Type column. This indicates whether the event type is
   error, warning, information, success audit, or failure audit.</para>
			<para><see cref="System.Diagnostics.EventLog.WriteEntry"/> lets you specify a string message
to write to the log. This method writes the given string directly to the log; it
does not use a localizable message file.</para>
			<note type="note">
   If you write an entry to a remote computer, the
   value of the message (the text string) might not be what you expect if the
   remote computer is not running the .NET Framework.
</note>
		</remarks>
		<example>
			<codelink SampleID="EventLog_WriteEntry_1_3" SnippetID="2"/>
		</example>
		<seealso cref="System.Diagnostics.EventLogEntryType"/>
		<seealso cref="System.Diagnostics.EventLog.Source"/>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.DeleteEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Entries"/>
	</doc>
	<doc for="EventLog.Exists1">
		<summary>
			<para> Determines whether the
      log exists on the specified computer.
      </para>
		</summary>
		<param name="logName">The log for which to search. Possible values include: Application, Security, System, other application-specific logs (such as those associated with Active Directory), or any custom log on the computer. </param>
		<param name="machineName">The name of the computer on which to search for the log, or "." for the local computer. </param>
		<returns>
			<para><see langword="true"/> if the log exists on the specified computer; otherwise,
<see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentException"><para>The <paramref name="machineName"/> parameter is an invalid format. Make sure you have used proper syntax for the computer on which you are searching.</para>
			<para>-or-</para>
			<para>The <paramref name="logName"/> is <see langword="null"/> or the value is empty.</para></exception>
		<remarks>
			<para> Use this method to determine if a log exists on
      a remote computer. If you want to determine whether a source exists on a remote
      computer, use <see cref="System.Diagnostics.EventLog.SourceExists"/>
      .
      </para>
			<para> Because this method accesses the registry, you must have
      the appropriate registry permissions on the specified computer; otherwise, the
      query returns <see langword="false"/> .
      </para>
			<para> Because you cannot give a new log the name of
      an existing log on the same computer, use this method before creating a new log to
      determine if one with the specified <paramref name="logName "/>already exists on the server
      specified by the <paramref name="machineName"/> parameter.
      The <paramref name="logName"/> and <paramref name="machineName "/>
      parameters are not case sensitive.
      </para>
			<para><see cref="System.Diagnostics.EventLog.Exists"/> is a <see langword="static "/>method, so it can be called on the class itself. It is not necessary to create a new
   instance of <see cref="System.Diagnostics.EventLog"/> to call <see cref="System.Diagnostics.EventLog.Exists"/>.
   </para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLog.CreateEventSource"/>
		<seealso cref="System.Diagnostics.EventLog.Delete"/>
		<seealso cref="System.Diagnostics.EventLog.SourceExists"/>
		<seealso cref="System.Diagnostics.EventLog.Log"/>
		<seealso cref="System.Diagnostics.EventLog.MachineName"/>
	</doc>
	<doc for="EventLog.SynchronizingObject">
		<summary>
			<para> Gets or sets the object used to marshal the event handler
      calls issued as a result of an <see cref="System.Diagnostics.EventLog"/> entry written
      event.
      </para>
		</summary>
		<value>
			<para> The <see cref="System.ComponentModel.ISynchronizeInvoke"/> used to marshal
   event-handler calls issued as a result of an <see cref="System.Diagnostics.EventLog.EntryWritten"/> event on the
   event log.
   </para>
		</value>
		<remarks>
			<para>When <see cref="System.Diagnostics.EventLog.SynchronizingObject"/> is <see langword="null"/>, methods handling
   the <see cref="System.Diagnostics.EventLog.EntryWritten"/> event are called on a thread from the system
   thread pool. For more information on system thread pools, see <see cref="System.Threading.ThreadPool"/>.</para>
			<para>When the <see cref="System.Diagnostics.EventLog.EntryWritten"/> event is handled by a visual
Windows Forms component, such as a button, accessing the component through the system
thread pool might not work, or might result in an exception. Avoid this by setting
<see cref="System.Diagnostics.EventLog.SynchronizingObject"/> to a Windows Forms component, which 
causes the methods handling the <see cref="System.Diagnostics.EventLog.EntryWritten"/> event to be called on the
same thread on which the component was created.</para>
			<para>If the <see cref="System.Diagnostics.EventLog"/> is used inside Visual Studio .NET in a
Windows Forms designer, <see cref="System.Diagnostics.EventLog.SynchronizingObject"/> is automatically set to
the control containing the <see cref="System.Diagnostics.EventLog"/>. For example, if you place an <see cref="System.Diagnostics.EventLog"/> on
a designer for Form1 (which inherits from <see cref="T:System.Windows.Forms.Form"/>) the <see cref="System.Diagnostics.EventLog.SynchronizingObject"/> property of <see cref="System.Diagnostics.EventLog"/> is set to the instance of
Form1. </para>
		</remarks>
		<seealso cref="System.Diagnostics.EventLog.EntryWritten"/>
		<seealso cref="System.Threading.ThreadPool"/>
	</doc>
</docs>
