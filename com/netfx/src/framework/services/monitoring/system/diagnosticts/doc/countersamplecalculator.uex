<docs>
	<doc for="CounterSampleCalculator.GetTimeInterval">
		<summary>
    Get the difference between the current and previous time counts,
        then divide by the frequency.
 </summary>
		<param name="currentTime">
     Current time count.
 </param>
		<param name="previousTime">
     Past time count.
 </param>
		<param name="freq">
     Frequency upon which the time counts were kept (ticks/sec).
 </param>
		<returns>
    Floating point representation of Time Interval (seconds)
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.IsCounterBulk">
		<summary>
    Helper function, determines if a given counter type is of a bulk count type.
 </summary>
		<param name="counterType">
     Counter type to check.
 </param>
		<returns>
    True if it's a bulk counter type, false otherwise
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.CounterCounterCommon">
		<summary>
    Take the difference between the current and previous counts
        then divide by the time interval
 </summary>
		<param name="oldSample">
     Previous CounterSample to use.
 </param>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.CounterAverageTimer">
		<summary>
    Take the differences between the current and previous times and counts
    divide the time interval by the counts multiply by 10,000,000 (convert
    from 100 nsec to sec)
 </summary>
		<param name="oldSample">
     Previous CounterSample to use.
 </param>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.CounterAverageBulk">
		<summary>
    Take the differences between the current and previous byte counts and
    operation counts divide the bulk count by the operation counts
 </summary>
		<param name="oldSample">
     Previous CounterSample to use.
 </param>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.CounterTimerCommon">
		<summary>
    Take the difference between the current and previous counts,
      Normalize the count (counts per interval)
      divide by the time interval (count = % of interval)
      if (invert)
        subtract from 1 (the normalized size of an interval)
      multiply by 100 (convert to a percentage)
      this value from 100.
 </summary>
		<param name="oldSample">
     Previous CounterSample to use.
 </param>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.CounterRawFraction">
		<summary>
    Evaluate a raw fraction (no time, just two values: Numerator and
        Denominator) and multiply by 100 (to make a percentage;
 </summary>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.SampleCommon">
		<summary>
    Divites "Top" differenced by Base Difference
 </summary>
		<param name="oldSample">
     Previous CounterSample to use.
 </param>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.GetElapsedTime">
		<summary>
    Converts 100NS elapsed time to fractional seconds
 </summary>
		<param name="oldSample">
     Previous CounterSample to use.
 </param>
		<param name="newSample">
     Curent CounterSample to use.
 </param>
		<returns>
    Floating point representation of outcome
 </returns>
	</doc>
	<doc for="CounterSampleCalculator.ComputeCounterValue">
		<overload>
			<para>Computes the calculated value of a raw counter sample.</para>
		</overload>
		<summary>
			<para>Computes the calculated value given a single raw counter sample.</para>
		</summary>
		<param name="newSample">A <see cref="System.Diagnostics.CounterSample"/> that indicates the most recent sample the system has taken. </param>
		<returns>
			<para>A floating-point representation of the performance counter's calculated value.</para>
		</returns>
	</doc><doc for="CounterSampleCalculator">
		<summary>
			<para>Provides a set of utility functions for interpreting performance counter
      data. </para>
		</summary>
		<example>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CounterSampleCalculator.ComputeCounterValue1">
		<summary>
			<para>Computes the calculated value given two raw counter samples.</para>
		</summary>
		<param name="oldSample">A <see cref="System.Diagnostics.CounterSample"/> that indicates a previous sample the system has taken. </param>
		<param name="newSample">A <see cref="System.Diagnostics.CounterSample"/> that indicates the most recent sample the system has taken. </param>
		<returns>
			<para>A floating-point representation of the performance counter's calculated value.</para>
		</returns>
		<exception cref="System.Exception">The counter samples are of different types.</exception>
		<example>
			<codelink SampleID="PerformanceCounterType.AverageCounter64" SnippetID="1"/>
		</example>
	</doc>
</docs>
