<docs>
	<doc for="DirectoryEntries.ChildEnumerator">
		<summary>
			<para>
       Supports a simple ForEach-style iteration over a collection and defines
       enumerators, size, and synchronization methods.
    </para>
		</summary>
		<seealso cref="System.DirectoryServices.DirectoryEntries"/>
	</doc>
	<doc for="DirectoryEntries.ChildEnumerator.Current">
		<summary>
			<para>Gets the current element in the collection.</para>
		</summary>
		<value>
			<para>The current element in the collection.</para>
		</value>
		<exception cref="T:System.InvalidOperationException"><para> The enumerator is positioned before the first element of the collection or after the last element.</para>
			<para>-or-</para>
			<para>The collection is modified after this enumerator was created.</para></exception>
		<remarks>
			<para>After an enumerator is created or after a <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Reset"/>, <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/> must be called to
    advance the enumerator to the first element of the collection before reading the
    value of the <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Current"/> property.</para>
			<para>The <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Current"/> property will also
 throw an exception if the last call to <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/> returned
 <see langword="false"/> which indicates the end of the collection.</para>
			<para>The <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Current"/> property does not
 move the position of the enumerator and multiple calls to <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Current"/> will return the same
 object until either <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/> or <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Reset"/> is called.</para>
		</remarks>
		<seealso cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/>
		<seealso cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Reset"/>
	</doc>
	<doc for="DirectoryEntries.ChildEnumerator.MoveNext">
		<summary>
			<para>Advances
       the enumerator to the next element of the collection
       and returns a Boolean value indicating whether a valid element is available.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the enumerator was successfully advanced to the next 
    element; <see langword="false"/> if
    the enumerator has passed the end of the collection.</para>
		</returns>
		<exception cref="T:System.InvalidOperationException">The underlying set of objects has been modified since this enumerator was created.</exception>
		<remarks>
			<para>After an enumerator is created and after a <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Reset"/>, an enumerator is conceptually
    positioned before the first element of the collection, and the first call to
 <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/> positions the 
    enumerator over the first element of the collection.</para>
			<para>If elements
    are added, removed or repositioned in the collection after this enumerator was created,
 <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/> 
 may throw an exception.</para>
			<para>Once the end of the collection is passed, subsequent calls to
 <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/> 
 will return <see langword="false"/>
 until <see cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Reset"/>
 is called.</para>
		</remarks>
		<seealso cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.Reset"/>
	</doc>
	<doc for="DirectoryEntries.ChildEnumerator.Reset">
		<summary>
			<para>Resets the enumerator back to its initial position before the first element in the collection.</para>
		</summary>
		<exception cref="T:System.InvalidOperationException">The underlying set of objects has been modified since this enumerator was created.</exception>
		<seealso cref="System.DirectoryServices.DirectoryEntries.ChildEnumerator.MoveNext"/>
	</doc>
	<doc for="DirectoryEntries.GetEnumerator">
		<nodoc/>
	</doc><doc for="DirectoryEntries.SchemaFilter">
		<summary>
			<para>Gets the schemas that specify which children are contained in the collection.</para>
		</summary>
		<value>
			<para>A <see cref="System.DirectoryServices.SchemaNameCollection"/> that 
   specifies which children are contained in the <see cref="System.DirectoryServices.DirectoryEntries"/>
   
   instance.</para>
		</value>
		<remarks>
			<para>If <see cref="System.DirectoryServices.DirectoryEntries.SchemaFilter"/> 
is empty, children of all types are visible in
the collection; otherwise, only those of the specified types are visible.</para>
		</remarks>
		<seealso cref="System.DirectoryServices.SchemaNameCollection"/>
	</doc><doc for="DirectoryEntries.Find">
		<overload>
			<para>Returns the child with the specified name.</para>
		</overload>
		<summary>
			<para>Returns the child with the specified name.</para>
		</summary>
		<param name="name">The name of the child you are looking for.</param>
		<returns>
			<para>A <see cref="System.DirectoryServices.DirectoryEntry"/> that represents the child that was found.</para>
		</returns>
		<exception cref="T:System.InvalidOperationException">The Active Directory object is not a container.</exception>
		<exception cref="T:System.Runtime.InteropServices.COMException">An error occurred in the underlying interface.</exception>
		<remarks>
			<para>If children of different types have the same name, the first matching child
      is returned.</para>
			<note type="note">
      The Internet Information Services
      (IIS) provider does not support this <see cref="System.DirectoryServices.DirectoryEntries.Find"/> method. Use the overloaded <see cref="System.DirectoryServices.DirectoryEntries.Find"/> method and specify an empty string
      ("") for the <paramref name="schemaClassName"/> parameter.
      
   </note>
		</remarks>
		<seealso cref="System.DirectoryServices.DirectoryEntry"/>
	</doc><doc for="DirectoryEntries">
		<summary>
			<para>Contains the children (child entries) of an entry in Active Directory.</para>
		</summary>
		<seealso cref="System.DirectoryServices.DirectoryEntry"/>
		<seealso cref="System.DirectoryServices.PropertyCollection"/>
		<seealso cref="System.DirectoryServices.PropertyValueCollection"/>
		<seealso cref="System.DirectoryServices.DirectorySearcher"/>
		<seealso cref="System.DirectoryServices.ReferralChasingOption"/>
		<seealso cref="System.DirectoryServices.SearchResultCollection"/>
		<seealso cref="System.DirectoryServices.SearchResult"/>
		<seealso cref="System.DirectoryServices.ResultPropertyCollection"/>
		<seealso cref="System.DirectoryServices.ResultPropertyValueCollection"/>
		<seealso cref="System.DirectoryServices.SearchScope"/>
		<seealso cref="System.DirectoryServices.SortDirection"/>
		<seealso cref="System.DirectoryServices.SortOption"/>
	</doc><doc for="DirectoryEntries.Find1">
		<summary>
			<para>Returns the child with the specified name and of the specified type.</para>
		</summary>
		<param name="name">The name of the child you are looking for.</param>
		<param name="schemaClassName">The type of the child you are looking for.</param>
		<returns>
			<para>A <see cref="System.DirectoryServices.DirectoryEntry"/> that represents the child you found.</para>
		</returns>
		<exception cref="T:System.InvalidOperationException">The Active Directory object is not a container.</exception>
		<exception cref="T:System.Runtime.InteropServices.COMException">An error occurred in the underlying interface.</exception>
		<example>
			<para>The following example creates a new <see cref="System.DirectoryServices.DirectoryEntry"/> with the specified path,
   then creates a new entry in the container and saves it. It attempts to
   retrieve the newly created entry.</para>
			<codelink SampleID="DirectoryEntries_Find" SnippetID="1"/>
		</example>
		<seealso cref="System.DirectoryServices.DirectoryEntry"/>
	</doc>
	<doc for="DirectoryEntries.Remove">
		<summary>
			<para>Deletes a child <see cref="System.DirectoryServices.DirectoryEntry"/> from this collection.</para>
		</summary>
		<param name="entry">The <see cref="System.DirectoryServices.DirectoryEntry"/> to delete.</param>
		<exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
		<remarks>
			<para>The entry must be an empty container or a noncontainer.
      To delete an entry and all its children, use the <see cref="System.DirectoryServices.DirectoryEntry.DeleteTree"/> method from <see cref="System.DirectoryServices.DirectoryEntry"/>.</para>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.DirectoryServices.DirectoryEntry"/> 
with the specified path, then creates a new entry in the container and
saves it. Finally, it retrieves the newly created entry and deletes it.</para>
			<codelink SampleID="DirectoryEntries_Remove" SnippetID="1"/>
		</example>
	</doc>
	<doc for="DirectoryEntries.Add">
		<summary>
			<para>Creates a request to create a new entry in the container.</para>
		</summary>
		<param name="name">The name of the new entry.</param>
		<param name=" schemaClassName">The name of the schema used for this new entry.</param>
		<returns>
			<para>A <see cref="System.DirectoryServices.DirectoryEntry"/> that represents the new entry.</para>
		</returns>
		<exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
		<remarks>
			<note type="note">
      You must call the <see cref="System.DirectoryServices.DirectoryEntry.CommitChanges"/> method on the new entry
      to make the creation permanent. This allows you to set mandatory property values
      on the new entry. The providers each have different requirements for properties
      that need to be set before a call to the <see cref="System.DirectoryServices.DirectoryEntry.CommitChanges"/>
      method is made. If those requirements are not met, the provider might throw an exception. Check with your provider to determine which properties must be set before committing changes.
      
   </note>
		</remarks>
		<example>
			<para>The following example creates a new <see cref="System.DirectoryServices.DirectoryEntry"/> with a specified path,
   then creates a new entry in the container and saves it.</para>
			<codelink SampleID="DirectoryEntries_Add" SnippetID="1"/>
		</example>
		<seealso cref="System.DirectoryServices.DirectoryEntry"/>
	</doc>
</docs>
