<docs>
	<doc for="InstallException">
		<summary>
			<para>The exception that is thrown when an error occurs during
      the commit, rollback, or uninstall phase of an installation.</para>
		</summary>
		<example>
			<para> The following example, plus the examples in the <see cref="M:System.Configuration.Install.InstallException.#ctor"/> constructors, together make up an example
   showing an assembly having its own installer. The installer is named <c>MyInstaller</c>,
which has an attribute
<c>RunInstallerAttribute</c>, indicating that this installer 
will be invoked by <see topic="cpconInstallerUtilityInstallutilexe"/>. <see topic="cpconInstallerUtilityInstallutilexe"/>
calls the methods
<see cref="System.Configuration.Install.Installer.Commit"/>, <see cref="System.Configuration.Install.Installer.Rollback"/>, <see cref="System.Configuration.Install.Installer.Install"/> and  
<see cref="System.Configuration.Install.Installer.Uninstall"/>. The code 
in <see cref="System.Configuration.Install.Installer.Commit"/> presumes that a file named <c>FileDoesNotExist.txt</c> exists before the installation
of the assembly can be committed. If the file<c>FileDoesNotExist.txt</c> does not
exist, <see cref="System.Configuration.Install.Installer.Commit"/> raises an <see cref="System.Configuration.Install.InstallException"/>. The
same is the case with <see cref="System.Configuration.Install.Installer.Uninstall"/> in
which an uninstallation will only happen if a file named <c>FileDoesNotExist.txt</c>
exists. Otherwise it
raises an <see cref="System.Configuration.Install.InstallException"/>. In <see cref="System.Configuration.Install.Installer.Rollback"/>, a code fragment
is executed, which might raise an exception. If the exception is raised, it is
caught and an <see cref="System.Configuration.Install.InstallException"/> is raised with that exception being
passed to
it. </para>
			<note type="note">
   Run this example with the help of
   Installutil.exe. Type this in the command prompt:
</note>
			<para><see langword="Installutil InstallException.exe"/>
			</para>
			<para>-or-</para>
			<para><see langword="Installutil /u InstallException.exe"/>
			</para>
			<codelink SampleID="InstallException" SnippetID="1"/>
		</example>
		<seealso cref="System.Configuration.Install.Installer.Commit"/>
		<seealso cref="System.Configuration.Install.Installer"/>
		<seealso cref="System.Configuration.Install.Installer.Rollback"/>
		<seealso cref="System.Configuration.Install.Installer.Uninstall"/>
	</doc>
	<doc for="InstallException.InstallException">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Configuration.Install.InstallException"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Configuration.Install.InstallException"/> class.</para>
		</summary>
		<example>
			<para>The following example demonstrates the <see cref="M:System.Configuration.Install.InstallException.#ctor"/> constructor.
   It is a part of the example of the <see cref="System.Configuration.Install.InstallException"/> class.</para>
			<para>In this example, Installutil.exe calls
   the <see cref="System.Configuration.Install.Installer.Commit"/> method. The code
   in <see cref="System.Configuration.Install.Installer.Commit"/> presumes that a file named <c>FileDoesNotExist.txt</c> exists before
the installation of the assembly can be committed. If the file <c>FileDoesNotExist.txt</c> does not
exist, <see cref="System.Configuration.Install.Installer.Commit"/> raises an <see cref="System.Configuration.Install.InstallException"/> . </para>
			<note type="note">
   This example shows how to use one of
   the overloaded versions of the <see cref="System.Configuration.Install.InstallException"/>
   constructor. For other examples that might be available, see the individual
   overload topics.
</note>
			<codelink SampleID="InstallException" SnippetID="2"/>
		</example>
	</doc>
	<doc for="InstallException.InstallException1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Configuration.Install.InstallException"/> class, and specifies the message to
   display to the user.</para>
		</summary>
		<param name="message">The message to display to the user.</param>
		<example>
			<para>The following example demonstrates the <see cref="M:System.Configuration.Install.InstallException.#ctor"/> constructor. It 
   is a part of the example of the <see cref="System.Configuration.Install.InstallException"/> class.</para>
			<para>In this example, Installutil.exe calls
   the <see cref="System.Configuration.Install.Installer.Uninstall"/>
   method. Uninstallation will only happen if a file named <c>FileDoesNotExist.txt</c>
exists. Otherwise it
raises an <see cref="System.Configuration.Install.InstallException"/> .</para>
			<note type="note">
   This example shows how to use one of
   the overloaded versions of the <see cref="System.Configuration.Install.InstallException"/> constructor. For
   other examples that might be available, see the individual overload topics.
</note>
			<codelink SampleID="InstallException" SnippetID="4"/>
		</example>
	</doc>
	<doc for="InstallException.InstallException3">
		<internalonly/>
		<summary>
			<para>Initializes a new instance of the 
   <see cref="System.Configuration.Install.InstallException"/> class with serialized data.</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
		<param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
	</doc>
	<doc for="InstallException.InstallException2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Configuration.Install.InstallException"/> class, and specifies the message
   to display to the user, and a reference to the inner
   exception that is the cause of this exception.</para>
		</summary>
		<param name="message">The message to display to the user.</param>
		<param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not <see langword="null"/> , the current exception is raised in a <see langword="catch"/> block that handles the inner exception. </param>
	</doc>
</docs>
