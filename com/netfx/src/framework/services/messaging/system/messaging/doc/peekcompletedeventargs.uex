<docs>
	<doc for="PeekCompletedEventArgs.PeekCompletedEventArgs">
		<internalonly/>
	</doc>
	<doc for="PeekCompletedEventArgs.AsyncResult">
		<summary>
			<para>Gets or sets the result of the asynchronous
       operation requested.</para>
		</summary>
		<value>
			<para>An <see cref="System.IAsyncResult"/> that contains the data associated with the peek 
    operation.</para>
		</value>
		<remarks>
			<para>
				<see cref="System.Messaging.PeekCompletedEventArgs.AsyncResult"/> identifies ongoing or 
    completed asynchronous operations. The property contains data that helps
    determine which of several potential asynchronous operations to complete, and
    when passed to the event handler, enables <see cref="System.Messaging.MessageQueue.EndPeek"/>
    to access the message associated with the completed
    operation.</para>
			<para>When you call <see cref="System.Messaging.MessageQueue.BeginPeek"/>, an <see cref="System.IAsyncResult"/> is returned immediately, even though a 
 message, if one exists, has not yet been retrieved because the operation is not
 completed. The <see cref="System.Messaging.PeekCompletedEventArgs.AsyncResult"/> indicates the state of the
 asynchronous operation. <see cref="System.Messaging.MessageQueue.BeginPeek"/> creates the object, which is
 modified throughout the operation until <see cref="System.Messaging.MessageQueue.EndPeek"/>
 completes it.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueue.BeginPeek"/>
		<seealso cref="System.Messaging.MessageQueue.EndPeek"/>
		<seealso cref="System.IAsyncResult"/>
	</doc>
	<doc for="PeekCompletedEventArgs.Message">
		<summary>
			<para> Gets the message associated with the asynchronous peek operation.</para>
		</summary>
		<value>
			<para>A <see cref="System.Messaging.Message"/> that represents the end result of the
 asynchronous peek operation.</para>
		</value>
		<exception cref="System.Messaging.MessageQueueException">The <see cref="System.Messaging.PeekCompletedEventArgs.Message"/> could not be retrieved. The timeout on the asynchronous operation might have expired.</exception>
		<remarks>
			<para>The <see cref="System.Messaging.PeekCompletedEventArgs.Message"/> property provides a means
 for retrieving the message that initiated the end of the asynchronous peek
 operation.</para>
			<note type="note">
				<see cref="System.Messaging.MessageQueue.EndPeek" qualify="true"/> is called the first time the <see cref="System.Messaging.PeekCompletedEventArgs.Message"/> property is read, so it is not
 necessary to call <see cref="System.Messaging.MessageQueue.EndPeek"/> prior to getting the value of
 this property.
 
</note>
		</remarks>
		<seealso cref="System.Messaging.PeekCompletedEventHandler"/>
		<seealso cref="System.Messaging.MessageQueue.BeginPeek"/>
		<seealso cref="System.Messaging.MessageQueue.EndPeek"/>
		<seealso cref="System.Messaging.Message"/>
	</doc><doc for="PeekCompletedEventArgs">
		<summary>
			<para>Provides data for the <see cref="System.Messaging.MessageQueue.PeekCompleted"/> event. When your asynchronous peek
   operation calls an event handler, an instance of this class is passed to the
   handler.</para>
		</summary>
		<remarks>
			<para> When
      you use event notification to peek (read without removing) messages asynchronously from
      the queue, you must create a method that handles your message
      processing. Your code must call <see cref="System.Messaging.MessageQueue.BeginPeek"/> to begin the asynchronous
      processing. When a message is peeked, your application is notified through the
   <see cref="System.Messaging.MessageQueue.PeekCompleted"/> event.
      An instance of <see cref="System.Messaging.PeekCompletedEventArgs"/> is passed into the event
      delegate that calls your event handler. The data associated with the <see cref="System.Messaging.MessageQueue.PeekCompleted"/> event is contained in the delegate's <see cref="System.Messaging.ReceiveCompletedEventArgs.AsyncResult"/> parameter.</para>
			<note type="note">
      There are two ways to provide notification of
      event completion: event notification and callbacks. <see cref="System.Messaging.PeekCompletedEventArgs"/> is used only with
      event notification. For information comparing callbacks and event notification, see
      "Events vs. Callbacks" on MSDN.
      
   </note>
			<para><see cref="System.Messaging.PeekCompletedEventArgs"/> provides access to the
   message that initiated the end of the asynchronous peek operation, through the
<see cref="System.Messaging.PeekCompletedEventArgs.Message"/> member. This is an alternate access to the
   message, and behaves much the same as a call to <see cref="System.Messaging.MessageQueue.EndPeek" qualify="true"/>.</para>
		</remarks>
		<example>
			<para>The following example creates an event handler for the <see cref="System.Messaging.MessageQueue.PeekCompleted"/> event and associates it with the
   event delegate by using the <see cref="System.Messaging.PeekCompletedEventHandler"/>. The event
   handler, <c>MyPeekCompleted</c>
, peeks a message and writes its label to the screen.</para>
			<codelink SampleID="MessageQueue.BeginPeek_noparms" SnippetID="1"/>
		</example>
		<seealso cref="System.Messaging.MessageQueue"/>
		<seealso cref="System.Messaging.PeekCompletedEventHandler"/>
		<seealso cref="System.Messaging.MessageQueue.PeekCompleted"/>
		<seealso cref="System.Messaging.MessageQueue.BeginPeek"/>
		<seealso cref="System.Messaging.MessageQueue.EndPeek"/>
		<seealso cref="System.Messaging.Message"/>
	</doc></docs>
