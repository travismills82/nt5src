<docs>
	<doc for="MessageEnumerator.CursorHandle">
		<summary>
			<para>Gets the native Message Queuing cursor handle used to browse messages
      in the queue.</para>
		</summary>
		<value>
			<para> The native cursor handle.</para>
		</value>
		<exception cref="System.Messaging.MessageQueueException">The handle does not exist.</exception>
		<remarks>
			<para>This property contains the native handle to 
      the enumeration. When you have finished working with the enumerator, call
   <see cref="System.Messaging.MessageEnumerator.Close"/>
   
   to release
   this resource.
   </para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
	</doc><doc for="MessageEnumerator.Close">
		<summary>
			<para> Frees the resources associated with the enumerator.
      </para>
		</summary>
		<remarks>
			<para> The operating system retains an open handle to the queue 
      during the lifetime of the cursor. When you have finished working with the
      enumerator, call <see cref="System.Messaging.MessageEnumerator.Close"/>
      to release the resources associated with the handle.
      </para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
	</doc><doc for="MessageEnumerator.MoveNext">
		<overload>
			<para>Advances the enumerator to the next message in the queue.</para>
		</overload>
		<summary>
			<para>Advances the enumerator to the next message in the queue, if one
      is currently available.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the enumerator was
   succesfully advanced to the next message; <see langword="false"/> if the enumerator has
   reached the end of the queue.</para>
		</returns>
		<exception cref="System.Messaging.MessageQueueException">An exception specific to Message Queuing was thrown.</exception>
		<remarks>
			<para>This overload returns immediately if there is no
      message in the queue. There is another overload that waits a specified
   <see cref="System.TimeSpan"/> for a message
      to arrive.</para>
			<para>If a message is not currently available because the queue is empty or
      because you have moved beyond the last element in the collection, <see cref="System.Messaging.MessageEnumerator.MoveNext"/> returns <see langword="false"/> to the
      calling method.</para>
			<para>Upon creation, an enumerator is conceptually positioned before the first
      message of the queue, and the first call to <see cref="System.Messaging.MessageEnumerator.MoveNext"/> brings the first message of the queue
      into view.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageEnumerator.Reset"/>
		<seealso cref="System.Messaging.Message"/>
	</doc><doc for="MessageEnumerator.Reset">
		<summary>
			<para> Resets the current enumerator so it points to
      the head of the queue.</para>
		</summary>
		<remarks>
			<para>An enumerator can only move in a forward direction. Use this method to start 
      over at the beginning of the queue. </para>
			<para>After calling <see cref="System.Messaging.MessageEnumerator.Reset"/>, the cursor points to the first message. You 
   do not need to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.Reset"/> to move the cursor forward to the first
   message in the queue. </para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
	</doc><doc for="MessageEnumerator.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Messaging.MessageEnumerator"/>.</para>
		</overload>
		<summary>
			<para>Releases all resources used by the <see cref="System.Messaging.MessageEnumerator"/>.</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.Messaging.MessageEnumerator.Dispose"/> allows the resources used by the <see cref="System.Messaging.MessageEnumerator"/> to be reallocated for other purposes. For more
   information about <see cref="System.Messaging.MessageEnumerator.Dispose"/>, see
<see topic="cpconCleaningUpUnmanagedResources"/> .</para>
		</remarks>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="MessageEnumerator.Dispose1">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Messaging.MessageEnumerator"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public
   <see topic="frlrfSystemMessagingMessageEnumeratorClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
   <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set
      to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
   <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method
   releases all resources held by any managed objects that this <see cref="System.Messaging.MessageEnumerator"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced
   object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="MessageEnumerator.Current">
		<summary>
			<para>Gets the current <see cref="System.Messaging.Message"/> that this
 enumerator points to.</para>
		</summary>
		<value>
			<para>The current message.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>You called <see cref="System.Messaging.MessageEnumerator.Current"/> before the first call to <see cref="System.Messaging.MessageEnumerator.MoveNext"/>. The cursor is located before the first element of the message enumeration.</para>
			<para>-or-</para>
			<para>You called <see cref="System.Messaging.MessageEnumerator.Current"/> after a call to <see cref="System.Messaging.MessageEnumerator.MoveNext"/> had returned <see langword="false"/> (indicating the cursor is located after the last element of the message enumeration.)</para></exception>
		<exception cref="System.Messaging.MessageQueueException">The message the enumerator is currently pointing to no longer exists. It might have been deleted.</exception>
		<remarks>
			<para>When the enumerator is created, it points to the head of
 the queue, at a location before the first message. In this case, <see cref="System.Messaging.MessageEnumerator.Current"/> is not valid and will throw an exception if it
 is accessed. You must call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> to position the cursor at the
 first message in the queue.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Reset"/>
		<seealso cref="System.Messaging.MessageQueue.GetMessageEnumerator" qualify="true"/>
	</doc><doc for="MessageEnumerator.MoveNext1">
		<summary>
			<para>Advances the enumerator to the next message in the queue.
 If the enumerator is positioned at the end of the queue, <see cref="System.Messaging.MessageEnumerator.MoveNext"/> waits until a message is available or the
 given timeout
 expires.</para>
		</summary>
		<param name="timeout">The <see cref="System.TimeSpan"/> to wait for a message to be available if the enumerator is positioned at the end of the queue.</param>
		<returns>
			<para><see langword="true"/> if the enumerator successfully
 advanced to the next message; <see langword="false"/> if the enumerator has
 reached the end of the queue and a message does not become available within the
 time specified by the <paramref name="timeout"/>
 parameter.</para>
		</returns>
		<exception cref="System.ArgumentException">The value specified for the timeout parameter is invalid. It might represent a negative number.</exception>
		<exception cref="System.Messaging.MessageQueueException"><para>An exception specific to Message Queuing was thrown.</para>
			<para>-or-</para>
			<para>The timeout has expired. </para></exception>
		<remarks>
			<para> This overload waits if there is no message in the queue or
 if the cursor has reached the end of the queue. If a message is not currently
 available because the queue is empty or because you have moved beyond the last
 element in the collection, <see cref="System.Messaging.MessageEnumerator.MoveNext"/>
 
 waits the specified timeout.</para>
			<para> If the cursor is already at the end of the queue, <see cref="System.Messaging.MessageEnumerator.MoveNext"/> only returns <see langword="true"/> if the new
 message arrives within the specified time interval, has lower priority than all
 messages currently in the queue and is placed at the end of the queue. An
 overload with no parameter returns immediately if no further
 messages
 are in the queue.</para>
			<para> Upon creation, an enumerator is conceptually positioned
 before the first message of the enumeration, and the first call to <see cref="System.Messaging.MessageEnumerator.MoveNext"/>
 brings the first message
 of
 the enumeration into view.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageEnumerator.Reset"/>
		<seealso cref="System.Messaging.Message"/>
	</doc><doc for="MessageEnumerator.IEnumerator.Current">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="MessageEnumerator.RemoveCurrent">
		<overload>
			<para>Removes the current message from the queue and returns the message to the calling application. Removing the message deletes it from
      the queue.</para>
		</overload>
		<summary>
			<para>Removes the current message from a transactional or non-transactional queue and returns the
      message to the calling application. There is no timeout specified for a message
      to arrive in the queue.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Messaging.Message"/> that references the first message available in the queue.</para>
		</returns>
		<remarks>
			<para><see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> 
removes and returns the message at the cursor's
current location.</para>
			<para> 
   If you are using queue journaling, removing the message causes a copy
   to be kept in the journal queue, just as the <see cref="System.Messaging.MessageQueue"/> class's <see cref="System.Messaging.MessageQueue.Receive"/> method does. </para>
			<para>When you remove the current message, the
   cursor is moved to the next message. You do not have to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   .
   </para>
			<para>If you call this overload on a transactional queue, Message Queuing
   creates a single internal transaction. </para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
	</doc><doc for="MessageEnumerator.RemoveCurrent1">
		<summary>
			<para> Removes the current message from a transactional queue
      and returns the message to the calling application. There is no
      timeout specified for a message to arrive in the queue.</para>
		</summary>
		<param name="transaction">The <see cref="System.Messaging.MessageQueueTransaction"/> object that specifies the transaction in which the message will be removed.</param>
		<returns>
			<para>A <see cref="System.Messaging.Message"/> that references the first message available in the queue.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="transaction "/>parameter is <see langword="null"/>.</para></exception>
		<remarks>
			<para><see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> removes and returns the 
   message at the cursor's current location, using the internal transaction context
   defined by the <paramref name="transaction"/>
   
   parameter.</para>
			<para> 
   If you are using queue journaling, removing the message causes a copy
   to be kept in the journal queue, just as the <see cref="System.Messaging.MessageQueue"/> class's <see cref="System.Messaging.MessageQueue.Receive"/> method does. </para>
			<para>When working with transactional queues, a
   rollback of a transaction causes any messages removed by a call to <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   to be returned to the queue. The
   removal is not
   irreversible until the transaction is committed.
   </para>
			<para>When you remove the current message, the
   cursor is moved to the next message. You do not have to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   .</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageQueueTransaction"/>
	</doc><doc for="MessageEnumerator.RemoveCurrent2">
		<summary>
			<para> Removes the current message from the queue and returns
      the message to the calling application. If there is a message to remove, the method returns it
      immediately. Otherwise, the method waits the specified timeout for a new message to arrive.</para>
		</summary>
		<param name="timeout">The interval of time to wait for a message to arrive in the queue.</param>
		<returns>
			<para>A <see cref="System.Messaging.Message"/> that references the first message available in the queue.</para>
		</returns>
		<exception cref="System.ArgumentException">The value specified for the <paramref name="timeout"/> parameter is invalid.</exception>
		<exception cref="System.Messaging.MessageQueueException">The timeout has expired.</exception>
		<remarks>
			<para><see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> removes and returns the
   message at the cursor's current location. If the cursor is at the end of the
   queue, this overload of the method waits until a message is available or the
   interval specified by the <paramref name="timeout"/> parameter has expired.</para>
			<para> If you
   are using queue journaling, removing the message causes a copy to be kept in the
   journal queue, just as the <see cref="System.Messaging.MessageQueue"/> class's <see cref="System.Messaging.MessageQueue.Receive"/>
   method does.</para>
			<para>When you remove the current message, the cursor is moved
   to the next message. You do not have to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>.</para>
			<para>If you call this overload on a transactional queue, Message Queuing creates a
   single internal transaction.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
	</doc><doc for="MessageEnumerator.RemoveCurrent3">
		<summary>
			<para> Removes the current message from a transactional queue
      and returns the message to the calling application. If there is a message to
      remove, the method returns it
      immediately. Otherwise, the method waits the specified timeout for a new message to arrive.</para>
		</summary>
		<param name="timeout">The interval of time to wait for the message to be removed.</param>
		<param name="transaction">The <see cref="System.Messaging.MessageQueueTransaction"/> object that specifies the transaction context for the message. </param>
		<returns>
			<para>A <see cref="System.Messaging.Message"/> that references the first message available in the queue.</para>
		</returns>
		<exception cref="System.ArgumentException">The value specified for the <paramref name="timeout"/> parameter is invalid.</exception>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="transaction "/>parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.Messaging.MessageQueueException">The timeout has expired. </exception>
		<remarks>
			<para><see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> removes and returns the
   message at the cursor's current location. If the cursor is at the end of the
   queue, this overload of the method waits until a message is available or the
   interval specified by the <paramref name="timeout"/> parameter has expired.</para>
			<para>When working with transactional queues, a rollback of a
   transaction causes any messages removed by a call to <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> to be returned to the queue. The removal is
   not irreversible until the transaction is committed.</para>
			<para> If you
   are using queue journaling, removing the message causes a copy to be kept in the
   journal queue, just as the <see cref="System.Messaging.MessageQueue"/> class's <see cref="System.Messaging.MessageQueue.Receive"/>
   method does.</para>
			<para>When you remove the current message, the cursor is moved
   to the next message. You do not have to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageQueueTransaction"/>
	</doc><doc for="MessageEnumerator.RemoveCurrent5">
		<summary>
			<para> Removes the current message from a queue
      and returns the message to the calling application. There is no
      timeout specified for a message to arrive in the queue.</para>
		</summary>
		<param name="transactionType">One of the <see cref="System.Messaging.MessageQueueTransactionType"/> values, describing the type of transaction context to associate with the message.</param>
		<returns>
			<para>A <see cref="System.Messaging.Message"/> that references the first message available in the queue.</para>
		</returns>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The <paramref name="transactionType"/> parameter is not one of the <see cref="System.Messaging.MessageQueueTransactionType"/> members.</exception>
		<remarks>
			<para><see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> removes and returns the
   message at the cursor's current location, using a transaction context defined by
   the <paramref name="transactionType"/>
   
   parameter.</para>
			<para>Specify <see langword="Automatic"/> for the <paramref name="transactionType"/> parameter
if there is already an external transaction context attached to the thread that
you want to use to receive the message. Specify <see langword="Single"/> if you
want to receive the message as a single internal transaction. You can specify
<see langword="None"/> if you want to receive a message from a transactional 
queue outside of a transaction context. </para>
			<para> If you are using queue journaling, removing the message causes a copy
   to be kept in the journal queue, just as the <see cref="System.Messaging.MessageQueue"/> class's <see cref="System.Messaging.MessageQueue.Receive"/> method does. </para>
			<para>When working with transactional queues, a
   rollback of a transaction causes any messages removed by a call to <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   to be returned to the queue. The
   removal is not
   irreversible until the transaction is committed.
   </para>
			<para>When you remove the current message, the
   cursor is moved to the next message. You do not have to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   .</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageQueueTransactionType"/>
	</doc><doc for="MessageEnumerator.RemoveCurrent4">
		<summary>
			<para> Removes the current message from a queue and returns the message to the calling application. If there is a
      message to remove, the method returns it immediately. Otherwise, the method
      waits the specified timeout for a new message to arrive.</para>
		</summary>
		<param name="timeout">The interval of time to wait for the message to be removed.</param>
		<param name="transactionType">One of the <see cref="System.Messaging.MessageQueueTransactionType"/> values, describing the type of transaction context to associate with the message.</param>
		<returns>
			<para>A <see cref="System.Messaging.Message"/> that references the first message available in the queue.</para>
		</returns>
		<exception cref="System.ArgumentException">The value specified for the <paramref name="timeout"/> parameter is invalid.</exception>
		<exception cref="System.Messaging.MessageQueueException">The timeout has expired. </exception>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The <paramref name="transactionType"/> parameter is not one of the <see cref="System.Messaging.MessageQueueTransactionType"/> members.</exception>
		<remarks>
			<para><see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/> removes and returns the
   message at the cursor's current location, using a transaction context defined by
   the <paramref name="transactionType"/> parameter. If the cursor is at
   the end of the queue, this overload of the method waits until a message is
   available or the interval specified by the <paramref name="timeout"/>
   parameter
   
   has expired.
   </para>
			<para>Specify <see langword="Automatic"/> for the <paramref name="transactionType"/> parameter
if there is already an external transaction context attached to the thread that
you want to use to receive the message. Specify <see langword="Single"/> if you
want to receive the message as a single internal transaction. You can specify
<see langword="None"/> if you want to receive a message from a transactional 
queue outside of a transaction context. </para>
			<para> If you are using queue journaling, removing the message causes a copy
   to be kept in the journal queue, just as the <see cref="System.Messaging.MessageQueue"/> class's <see cref="System.Messaging.MessageQueue.Receive"/> method does. </para>
			<para>When working with transactional queues, a
   rollback of a transaction causes any messages removed by a call to <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   to be returned to the queue. The
   removal is not
   irreversible until the transaction is committed.
   </para>
			<para>When you remove the current message, the
   cursor is moved to the next message. You do not have to call <see cref="System.Messaging.MessageEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageEnumerator.RemoveCurrent"/>
   
   .</para>
		</remarks>
		<seealso cref="System.Messaging.MessageEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageQueueTransactionType"/>
	</doc><doc for="MessageEnumerator.Finalize">
		<internalonly/>
		<summary>
			<para>Releases the resources held by the enumerator.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/>.
   Application code should not call this method; an object's <see cref="System.Messaging.MessageEnumerator.Finalize"/> method is automatically invoked during garbage
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   method.</para>
			<para>For more information, see <see topic="cpconFinalizeMethodscDestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
	</doc>
	<doc for="MessageEnumerator">
		<summary>
			<para>Provides a
      forward-only cursor to enumerate through messages in a
      message queue.</para>
		</summary>
		<remarks>
			<para>Use <see cref="System.Messaging.MessageEnumerator"/> for dynamic interaction with
   messages in a queue. Methods available through the <see cref="System.Messaging.MessageQueue"/>
   class can return either a <see cref="System.Messaging.MessageEnumerator"/> pointing to a dynamic list of
   messages in the queue, or an array that contains a copy at a given instant - a
   snapshot - of the queue at the time the specified method was called.</para>
			<para>Unlike a static snapshot, an enumerator allows you to
   modify the collection. Using a <see cref="System.Messaging.MessageEnumerator"/>, you can remove messages from
   the queue, and the change is immediately reflected in the queue.</para>
			<para>An enumerator does not remove the messages from the
   queue when it queries the queue. It returns information about the message at the
   current cursor position, but it leaves the message in the queue.</para>
			<para>A <see cref="System.Messaging.MessageEnumerator"/> is a cursor, initialized to
the head of a dynamic list. The list order is the same as the order of the
messages in the queue, according to message priority. You can move the cursor to
the first message in the queue by calling <see cref="System.Messaging.MessageEnumerator.MoveNext"/>. After the enumerator has been initialized,
you can use <see cref="System.Messaging.MessageEnumerator.MoveNext"/> to step forward through the remaining
messages. You can specify whether to wait for a message to become available by
passing a timeout into the <see cref="System.Messaging.MessageEnumerator.MoveNext"/>method.</para>
			<para>Because the enumerator is dynamic, a message that is
   appended beyond the cursor's current position (for example, due to low
   priority), can be accessed by the enumerator. A message that is inserted before
   the cursor's current position cannot be accessed. It is not possible to step
   backward with a <see cref="System.Messaging.MessageEnumerator"/>. A cursor allows forward-only
   movement. The <see cref="System.Messaging.MessageEnumerator.Reset"/> method enables you to place the cursor back at
   the beginning of the queue.</para>
			<para>Instances of <see cref="System.Messaging.MessageEnumerator"/> for a given queue work
independently. You can create two <see cref="System.Messaging.MessageEnumerator"/> instances that apply to the
same queue. The changes that one <see cref="System.Messaging.MessageEnumerator"/> makes to the messages in the
queue will be reflected immediately in a second enumerator if the second
enumerator is positioned before the first. However, if two enumerators have the
same position and one of them removes the message at that position, an exception
is thrown if the other enumerator attempts to get the value of the <see cref="System.Messaging.MessageEnumerator.Current"/> property on the now-deleted message.</para>
			<note type="note">
   If you create an instance of <see cref="System.Messaging.MessageQueue"/>
   with <see cref="System.Messaging.MessageQueue.DenySharedReceive" qualify="true"/> set to <see langword="true"/>, no other
   application can modify the messages in your enumerator while you have the
   connection to the queue.
</note>
		</remarks>
		<example>
			<para>The following example gets a dynamic list of messages in
      a queue and counts all messages with the <see cref="System.Messaging.Message.Priority"/> property set to <see cref="System.Messaging.MessagePriority.Lowest" qualify="true"/>.</para>
			<codelink SampleID="MessageQueue.GetMessageEnumerator" SnippetID="1"/>
		</example>
		<seealso cref="System.Messaging.Message"/>
		<seealso cref="System.Messaging.MessageQueue.GetMessageEnumerator" qualify="true"/>
	</doc>
</docs>
