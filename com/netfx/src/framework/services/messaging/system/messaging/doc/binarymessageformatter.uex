<docs>
	<doc for="BinaryMessageFormatter.BinaryMessageFormatter">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Messaging.BinaryMessageFormatter"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Messaging.BinaryMessageFormatter"/> class,
   without specifying a type style or top object assembly style.</para>
		</summary>
		<remarks>
			<para>You must specify values for the <see cref="System.Messaging.BinaryMessageFormatter.TopObjectFormat"/> property (which defines how the root object in
   a graph is laid out) and the <see cref="System.Messaging.BinaryMessageFormatter.TypeFormat"/> property (which defines how object type
   descriptions are laid out) before using an instance of the <see cref="System.Messaging.BinaryMessageFormatter"/>
   class to serialize
   and send a message.</para>
			<para>
			</para>
		</remarks>
	</doc><doc for="BinaryMessageFormatter.BinaryMessageFormatter1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Messaging.BinaryMessageFormatter"/> class, specifying the formats of the root
   object and the type descriptions.</para>
		</summary>
		<param name="topObjectFormat">Determines how the top (root) object of a graph is laid out in the serialized stream. </param>
		<param name="typeFormat">Determines how type descriptions are laid out in the serialized stream. </param>
		<remarks>
			<para>
			</para>
		</remarks>
	</doc><doc for="BinaryMessageFormatter.TopObjectFormat">
		<summary>
			<para>Gets or sets a value that defines how the top (root) object of a graph
      is laid out in the serialized stream.</para>
		</summary>
		<value>
			<para>A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"/> that defines the root object format.</para>
		</value>
		<remarks>
			<para>Currently, you should accept the default value,
   <see langword="AssemblyStyle"/>.</para>
		</remarks>
		<seealso cref="System.Messaging.BinaryMessageFormatter.TypeFormat"/>
	</doc><doc for="BinaryMessageFormatter.TypeFormat">
		<summary>
			<para>Gets or sets a value that defines how type descriptions are laid out in the
      serialized stream.</para>
		</summary>
		<value>
			<para>A <see cref="T:System.Runtime.Serialization.Formatters.FormatterTypeStyle"/> that defines the type description format.</para>
		</value>
		<remarks>
			<para>Currently, you should accept the default value, <see langword="TypesWhenNeeded"/>.</para>
			<para>
			</para>
		</remarks>
		<seealso cref="System.Messaging.BinaryMessageFormatter.TopObjectFormat"/>
	</doc><doc for="BinaryMessageFormatter.CanRead">
		<summary>
			<para> Determines whether the formatter can deserialize the contents of the message.</para>
		</summary>
		<param name="message">The <see cref="System.Messaging.Message"/> to inspect.</param>
		<returns>
			<para><see langword="true"/> if the binary message
   formatter can deserialize the message; otherwise, <see langword="false"/> .</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="message "/>parameter is <see langword="null"/>.</exception>
		<remarks>
			<para><see cref="System.Messaging.BinaryMessageFormatter.CanRead"/> returns
<see langword="false"/> if the message
   body is not a binary object. </para>
			<para>On the receiving computer, <see cref="System.Messaging.BinaryMessageFormatter.CanRead"/> returns true if the assembly for the
class to be deserialized exists locally. The assembly must be found in the global
assembly cache, or be linked to the application (for example, if the object
represents a custom class).</para>
		</remarks>
	</doc>
	<doc for="BinaryMessageFormatter.Read">
		<summary>
			<para>Reads the contents from the given message and creates an object
      containing the deserialized message.</para>
		</summary>
		<param name="message">The <see cref="System.Messaging.Message"/> , in binary format, to deserialize.</param>
		<returns>
			<para> The deserialized message.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para>The message's <see cref="System.Messaging.Message.BodyType"/> property does not indicate a binary object.</para>
		</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="message "/>parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> The body of the message must be in binary format, and the
      same serializer must
      be used to deserialize the message as that which initially serialized it. If the
      body represents a custom class, the assembly for that class must exist locally. </para>
		</remarks>
		<seealso cref="System.Messaging.BinaryMessageFormatter.CanRead"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Write"/>
		<seealso cref="System.Messaging.Message"/>
	</doc>
	<doc for="BinaryMessageFormatter.Write">
		<summary>
			<para> Serializes an object into the body of the message.</para>
		</summary>
		<param name="message">The <see cref="System.Messaging.Message"/> whose <see cref="System.Messaging.Message.Body"/> property will contain the serialized object.</param>
		<param name="obj">The object to be serialized into the message body.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="message "/>parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The top object format and type format need not be specified to write to the queue as they must be
      when reading. The <see cref="System.Messaging.BinaryMessageFormatter.TopObjectFormat"/> and <see cref="System.Messaging.BinaryMessageFormatter.TypeFormat"/> properties are used by the formatter only when deserializing a
      message.</para>
			<para> The <see cref="System.Messaging.BinaryMessageFormatter"/> can 
   serialize most objects, but the result is
   not loosely coupled. However, it is compact, so the formatter
   is efficient for large objects. </para>
		</remarks>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Read"/>
	</doc>
	<doc for="BinaryMessageFormatter.Clone">
		<summary>
			<para>Creates an instance of the <see cref="System.Messaging.BinaryMessageFormatter"/> class whose read/write properties (the root object and type description formats) are
   the same as the current <see cref="System.Messaging.BinaryMessageFormatter"/> . </para>
		</summary>
		<returns>
			<para>An object whose properties are identical to those of
      this <see cref="System.Messaging.BinaryMessageFormatter"/>
      , but whose metadata does not specify it to be a
      formatter class instance.</para>
		</returns>
		<remarks>
			<para>This method creates a copy of the formatter and
      initializes all its properties to the values of this <see cref="System.Messaging.BinaryMessageFormatter"/> . It is used for scalability, but
      does not guarantee read or write thread safety.</para>
			<para>
			</para>
		</remarks>
		<seealso cref="System.Messaging.IMessageFormatter"/>
	</doc>
	<doc for="BinaryMessageFormatter">
		<summary>
			<para> Serializes or deserializes an object, or an
      entire graph of connected objects, to or from the body of a
      Message Queuing message, using a binary format.</para>
		</summary>
		<remarks>
			<para> The <see cref="System.Messaging.BinaryMessageFormatter"/> is very efficient
   and can be used to serialize most objects. The result is very compact and fast
   to parse, but does not allow for loosely coupled messaging as the <see cref="System.Messaging.XmlMessageFormatter"/>
   does.</para>
			<note type="note">
   Loosely coupled means that the client
   and the server can independently version the type that is sent and received.
   
</note>
			<para>When the application sends a message to the queue using an
   instance of the <see cref="System.Messaging.MessageQueue"/> class, the formatter serializes the object
   into a stream and inserts it into the message body. When reading from a queue
   using a <see cref="System.Messaging.MessageQueue"/>
   , the formatter deserializes the message data into the <see cref="System.Messaging.Message.Body"/>
   property of a <see cref="System.Messaging.Message"/> .</para>
			<para><see cref="System.Messaging.BinaryMessageFormatter"/> provides faster throughput than the <see cref="System.Messaging.XmlMessageFormatter"/>. Use the <see cref="System.Messaging.BinaryMessageFormatter"/> when pure speed rather than loosely
coupled messaging is desired. </para>
		</remarks>
		<example>
			<codelink SampleID="MessagingBinaryFormatter" SnippetID="1"/>
		</example>
		<seealso cref="System.Messaging.XmlMessageFormatter"/>
		<seealso cref="System.Messaging.ActiveXMessageFormatter"/>
		<seealso cref="System.Messaging.Message.Formatter" qualify="true"/>
		<seealso cref="System.Messaging.MessageQueue.Formatter" qualify="true"/>
	</doc>
</docs>
