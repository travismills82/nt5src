<docs>
	<doc for="MessageQueueInstaller.RestoreQueue">
		<summary>
 Called by Rollback and Uninstall to restore a queue to its state prior to Install
 </summary>
	</doc>
	<doc for="MessageQueueInstaller.ShouldSerializeCategory">
		<summary>
			<para>Indicates whether the value of the Category property should be persisted in 
       generated code.</para>
		</summary>
		<remarks>
		</remarks>
	</doc>
	<doc for="MessageQueueInstaller.IsEquivalentInstaller">
		<summary>
			<para>Determines whether the specified installer can handle the
      same kind of installation as this installer.</para>
		</summary>
		<param name="otherInstaller">The installer to compare.</param>
		<returns>
			<para><see langword="true"/> if this installer and the
   installer specified by the <paramref name="otherInstaller"/> parameter can handle the
   same kind of installation; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Typically, <see cref="System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller"/> returns <see langword="true"/> only
   if this installer and the installer specified by the
<paramref name="otherInstaller"/> parameter are of the same type.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.MessageQueueInstaller">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Messaging.MessageQueueInstaller"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Messaging.MessageQueueInstaller"/> class. Does not set any instance properties.</para>
		</summary>
	</doc><doc for="MessageQueueInstaller.Permissions">
		<summary>
			<para>Gets or sets permissions associated with the queue.</para>
		</summary>
		<value>
			<para>An <see cref="System.Messaging.AccessControlList"/> that contains one or more access control 
   entries that specify the trustees and permissions to grant for the queue.</para>
		</value>
		<remarks>
			<para>By default, the creator of a public or private queue has 
      full control, and the domain group Everyone has permission to
      get queue properties, get permissions, and write to the queue. Message Queuing
      accesses each permission list entry in turn until it finds one that applies to
      the current user and the current attempted action. As with the operating system
      permissions, the rights that you specifically deny to a user take precedence
      over those you allow.</para>
			<para>When you construct the <see cref="System.Messaging.MessageQueueInstaller.Permissions"/> property, add <see cref="System.Messaging.AccessControlEntry"/> instances to your <see cref="System.Messaging.AccessControlList"/> collection. When you construct each access 
   control entry, you can specify generic or standard access rights. The rights to
   a queue can be any combination of the following:</para>
			<list type="bullet"><item>
					<term>
      Delete</term>
				</item>
				<item>
					<term>
      Read Security</term>
				</item>
				<item>
					<term>
      Write Security</term>
				</item>
				<item>
					<term>
      Synchronize</term>
				</item>
				<item>
					<term>
      Modify Owner</term>
				</item>
				<item>
					<term>
      Read</term>
				</item>
				<item>
					<term>
      Write</term>
				</item>
				<item>
					<term>
      Execute</term>
				</item>
				<item>
					<term>
      Required</term>
				</item>
				<item>
					<term>
      All</term>
				</item>
				<item>
					<term>
      None</term>
				</item>
			</list>
			<para>These rights are a set of bit flags that you can combine using the bitwise 
   OR.</para>
			<list type="bullet"><item>
					<term>
      Full Control</term>
				</item>
				<item>
					<term>
      Delete Message</term>
				</item>
				<item>
					<term>
      Receive Message</term>
				</item>
				<item>
					<term>
      Peek Message</term>
				</item>
				<item>
					<term>
      Receive Journal Message</term>
				</item>
				<item>
					<term>
      Get Queue Properties</term>
				</item>
				<item>
					<term>
      Set Queue Properties</term>
				</item>
				<item>
					<term>
      Get Permissions</term>
				</item>
				<item>
					<term>
      Set Permissions</term>
				</item>
				<item>
					<term>
      Take Queue Ownership</term>
				</item>
				<item>
					<term>
      Write Message</term>
				</item>
			</list>
		</remarks>
		<seealso cref="System.Messaging.MessageQueue.SetPermissions" qualify="true"/>
	</doc><doc for="MessageQueueInstaller.Transactional">
		<summary>
			<para> 
      Gets or sets a value indicating whether the queue accepts only
      messages sent as part of a transaction.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the queue can only accept messages sent as part 
   of a transaction; otherwise, <see langword="false"/>. The default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Messages can be retrieved from a local transaction queue with or without 
      using a transaction. If you do not specify a transaction context, Message
      Queuing creates a single internal transaction for you.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.MessageQueueInstaller1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Messaging.MessageQueueInstaller"/> class, initializing the installation settings
   to those of an existing <see cref="System.Messaging.MessageQueue"/> instance.</para>
		</summary>
		<param name="componentToCopy">The <see cref="System.Messaging.MessageQueue"/> component whose settings determine the property settings of the new queue installed.</param>
		<remarks>
			<para>
			</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.Label">
		<summary>
			<para>Gets or sets a description of the queue.</para>
		</summary>
		<value>
			<para>The label that describes the message queue. The default is an empty string
      ("").</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="System.Messaging.MessageQueueInstaller.Label"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>The <see cref="System.Messaging.MessageQueue.Label"/> 
property does not need
to be unique across queues.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.MaximumJournalSize">
		<summary>
			<para>Gets or sets the maximum size of the journal that is associated with the queue.</para>
		</summary>
		<value>
			<para>The maximum size, in kilobytes, of the journal queue, which records messages that
      are removed from the queue. The Message Queuing default is no limit. </para>
		</value>
		<remarks>
			<para>When a queue is created, Message Queuing automatically creates a queue journal in the same
      location as the new queue. The queue journal is used to track the messages that
      are removed from the queue.</para>
			<note type="note">
      Two types of messages
      remain untracked: those that are
      removed from the queue because their time-to-be-received timer expired, and those
      that are purged from the queue.
      
   </note>
			<para>Applications cannot send messages to the journal queue. However,
      you must periodically clear the queue to remove the messages that are
      no longer needed. Messages that are stored in journal queues count toward the quota for the computer where the queues reside. (The
      computer quota is set by the administrator.) </para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.UseJournalQueue">
		<summary>
			<para>Gets or sets a value indicating whether messages that are retrieved from the queue are also copied to the
      associated journal queue.</para>
		</summary>
		<value>
			<para><see langword="true"/> to copy messages that are retrieved from the queue to the
   journal queue; otherwise, <see langword="false"/>. The default is
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>A journal queue lets you keep track of messages even after they have been retrieved from the queue. However, two types
      of messages remain untracked: those that are removed from the queue when their
      time-to-be-received timer expires, and those that are purged from the
      queue.</para>
			<para>A journal queue should be cleared periodically to remove messages that are no
      longer needed. Messages stored in the journal queue count toward the quota for
      the computer on which the journal is located.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.Authenticate">
		<summary>
			<para> Gets or sets a value indicating whether the queue to be installed accepts only authenticated messages.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the queue accepts only authenticated messages;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> When a nonauthenticated message is sent to a queue that accepts
      only authenticated messages, the message is rejected. The sending application
      can request notification of a message rejection by setting the <see cref="System.Messaging.Message.AcknowledgeType"/> for the message. Otherwise, there is no
      indication that the message was rejected, so the message can be lost unless you
      send it to the dead-letter queue.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.BasePriority">
		<summary>
			<para> Gets or sets
      the base priority that is used
      to route a public queue's messages over the network.</para>
		</summary>
		<value>
			<para>The single base priority for all messages sent to the public queue. The default
      is zero (0).</para>
		</value>
		<remarks>
			<para>The <see cref="System.Messaging.MessageQueueInstaller.BasePriority"/> is used for routing the queue's messages over
   the network. Use the <see cref="System.Messaging.MessageQueueInstaller.BasePriority"/>
   to give the messages sent to the queue a higher or lower priority than
   that for messages sent to other queues. When a queue's base priority is set,
   all the messages sent to it are given a higher priority than that of the
   messages sent to queues with a lower base priority. The queue's base priority has
   no effect on the order of the messages in the queue or on how messages are read from
   the queue.</para>
			<para>The <see cref="System.Messaging.MessageQueueInstaller.BasePriority"/> applies only to public queues that are accessed through the domain
controller (in other words, using the public format name). The base priority
of private queues and of directly-accessed public queues is always zero.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.Category">
		<summary>
			<para> Gets or
      sets an implementation-specific queue type.</para>
		</summary>
		<value>
			<para>A <see cref="System.Guid"/> that represents
   the queue category (or Message Queuing type identifier), which allows
   applications to categorize their queues according to how they are used. The
   default is <see langword="Guid.empty"/> .</para>
		</value>
		<remarks>
			<para>The queue category enables an application to categorize
      associated queues according to the way they are used. The <see cref="System.Messaging.MessageQueue.Category"/> can be a null reference. You can
      also define a new category.</para>
			<para>The <see cref="System.Messaging.MessageQueue.Category"/> property provides access to
   the Message Queuing type identifier property, which is associated with
   a particular queue and is read/write. You can use the
<see cref="M:System.Guid.NewGuid"/> method to create a category
   value that is guaranteed to be unique across all <see cref="System.Guid"/> values. However, it is necessary only for the category
   value to be distinct from other categories, not from all other <see cref="System.Guid"/> values. For example, you can set the <see cref="System.Messaging.MessageQueue.Category"/>
   for one group of queues to {00000000-0000-0000-0000-000000000001} and the <see cref="System.Messaging.MessageQueue.Category"/>
   for another group to {00000000-0000-0000-0000-000000000002}.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.EncryptionRequired">
		<summary>
			<para> Gets or sets a value indicating whether the queue accepts only private, or
      encrypted, messages.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Messaging.EncryptionRequired"/> values that indicates the encryption level
   required on messages sent to the queue. The default is <see langword="Optional"/>
   .</para>
		</value>
		<remarks>
			<para>When encryption is specified, only the <see cref="System.Messaging.Message.Body"/> of a message is encrypted. Other
   properties, such as the <see cref="System.Messaging.Message.Label"/>,
   are not encrypted.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.MaximumQueueSize">
		<summary>
			<para> Gets or sets the maximum size of the queue.</para>
		</summary>
		<value>
			<para>The maximum size, in kilobytes, of the queue. The Message Queuing default is
      no limit.</para>
		</value>
		<remarks>
			<para> The maximum queue size is
      typically set at the time of queue creation, although it can be reset later.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.Path">
		<summary>
			<para> Gets or
      sets the
      location of the
      queue
      that is referenced by this object.</para>
		</summary>
		<value>
			<para>The path that represents the location of the queue in the network.</para>
		</value>
		<exception cref="System.ArgumentException"><para>The <see cref="System.Messaging.MessageQueueInstaller.Path"/> was set to an invalid value, possibly because the syntax is invalid.</para>
			<para>-or-</para>
			<para>The <see cref="System.Messaging.MessageQueueInstaller.Path"/> is <see langword="null"/>.</para></exception>
		<remarks>
			<para>The syntax for the <see cref="System.Messaging.MessageQueue.Path"/> property depends on the
   type of queue it references. The following table shows the syntax you should use
   for queues of various types.</para>
			<list type="table">
				<listheader>
					<term>Queue type</term>
					<description>Syntax</description>
				</listheader>
				<item>
					<term> Public queue</term>
					<description><paramref name="machineName"/>\<paramref name="queueName"/></description>
				</item>
				<item>
					<term> Private queue</term>
					<description><paramref name="machineName"/>\Private$\<paramref name="queueName"/></description>
				</item>
				<item>
					<term> Journal queue</term>
					<description><paramref name="machineName"/>\<paramref name="queueName"/>\Journal$</description>
				</item>
				<item>
					<term> Machine journal queue</term>
					<description><paramref name="machineName"/>\Journal$</description>
				</item>
				<item>
					<term> Machine deadletter queue</term>
					<description><paramref name="machineName"/>\Deadletter$</description>
				</item>
				<item>
					<term> Machine transactional deadletter
      queue</term>
					<description><paramref name="machineName"/>\XactDeadletter$</description>
				</item>
			</list>
			<para>Use "." for the local computer.</para>
			<para>You can also use the <see cref="System.Messaging.MessageQueue.FormatName"/> or <see cref="System.Messaging.MessageQueue.Label"/> of a Message
Queuing application object to describe the queue path. The following table shows
the proper syntax for each type of reference.</para>
			<list type="table">
				<listheader>
					<term>Reference</term>
					<description>Syntax</description>
				</listheader>
				<item>
					<term> Format name</term>
					<description>FormatName:[<paramref name="format name"/> ]</description>
				</item>
				<item>
					<term> Label</term>
					<description>Label:[<paramref name="label"/>]</description>
				</item>
			</list>
			<para> If you are working offline, you must use the format name
   to define the queue <see cref="System.Messaging.MessageQueue.Path"/>
   . If you
   do not, the application will throw an exception, because the primary domain
   controller is unavailable to resolve the <see cref="System.Messaging.MessageQueue.Path"/> into the
<see cref="System.Messaging.MessageQueue.FormatName"/>.</para>
		</remarks>
	</doc><doc for="MessageQueueInstaller.UninstallAction">
		<summary>
			<para>Gets or sets a value indicating what the installer does with the queue at uninstall time: remove it, restore it
      to its pre-installation state, or leave it in its current installed state.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Configuration.Install.UninstallAction"/> values that indicates what state
   to leave the queue in when the <see cref="System.Messaging.MessageQueue"/> is uninstalled. The default
   is <see langword="Remove"/>
   .</para>
		</value>
		<remarks>
			<para> When you install a queue, you can
      optionally use an existing queue. If you do so, you must decide whether the queue
      should return to its pre-installation state, or remain in its current, post-installation state.
      If you elect to return the queue to its pre-installation state, messages that
      were deleted from the queue at install time are not restored. You can reset only
      queue properties that are associated with the <see cref="System.Messaging.MessageQueueInstaller"/> to their pre-installation values. </para>
		</remarks>
		<seealso cref="T:System.Configuration.Install.UninstallAction"/>
	</doc><doc for="MessageQueueInstaller.CopyFromComponent">
		<summary>
			<para>Copies the property values of a <see cref="System.Messaging.MessageQueue"/> component that are required at install time
   for a message queue.
   </para>
		</summary>
		<param name="component">An <see cref="System.ComponentModel.IComponent"/> to use as a template for the <see cref="System.Messaging.MessageQueueInstaller"/>.</param>
		<exception cref="T:System.ArgumentException">The component associated with this <see cref="System.Messaging.MessageQueueInstaller"/> is not a <see cref="System.Messaging.MessageQueue"/>.</exception>
		<remarks>
			<para>Typically, you do not call the methods of the <see cref="System.Messaging.MessageQueueInstaller"/> from within your code; they are generally called
   only by the installutil.exe installation utility. <see cref="System.Messaging.MessageQueueInstaller.CopyFromComponent"/> is used by the installation utility to set the
   property values for the <see cref="System.Messaging.MessageQueueInstaller"/> to the values of an
   existing <see cref="System.Messaging.MessageQueue"/>.</para>
			<para>If the <see cref="System.Messaging.MessageQueue.Path"/> of the <see cref="System.Messaging.MessageQueue"/> that is passed
in is an empty string (""), you must set the <see cref="System.Messaging.MessageQueue.Path"/>
property to a nonempty value before the
installer executes. </para>
		</remarks>
	</doc><doc for="MessageQueueInstaller">
		<summary>
			<para>Allows you to install and configure a queue that your application needs
      in order to run. This class is called by the installation utility, for
      example InstallUtil.exe, when installing a <see cref="System.Messaging.MessageQueue"/>.
      </para>
		</summary>
		<remarks>
			<para>The <see cref="System.Messaging.MessageQueueInstaller"/> is used by the installation
   utility to write registry values that are associated with the queue. For
   more information on installation utilities, see <see topic="cpconInstallerUtilityInstallutilexe"/>
   . </para>
			<para>To install a queue, create a project installer class that inherits from the
<see cref="System.Configuration.Install.Installer"/> , and 
   set the <see cref="T:System.ComponentModel.RunInstallerAttribute"/> for the class to <see langword="true"/>. Within your project, create a <see cref="System.Messaging.MessageQueueInstaller"/> instance
   for each queue in the installation and add the
   instance to your project installer
   class.</para>
			<para>When creating a <see cref="System.Messaging.MessageQueueInstaller"/> instance, you can optionally pass an existing
<see cref="System.Messaging.MessageQueue"/> (for example, from a test server) to the
<see cref="System.Messaging.MessageQueueInstaller()"/> constructor. This approach automatically provides the
configuration settings for the new queue by mirroring the settings of the
queue passed in. Alternatively, you can manually set the properties in the
<see cref="System.Messaging.MessageQueueInstaller"/> instance to the states you want and call the default
constructor. </para>
			<para>When the install utility is called, it looks for the
<see cref="T:System.ComponentModel.RunInstallerAttribute"/>.
   If it is <see langword="true"/>, the utility installs all the
   queues in the <see cref="System.Configuration.Install.Installer.Installers"/> collection associated
   with your project installer. If <see cref="T:System.ComponentModel.RunInstallerAttribute"/>
   is <see langword="false"/>
   , the utility ignores the project installer. </para>
			<para> You modify other properties of a <see cref="System.Messaging.MessageQueueInstaller"/> instance either
before or after adding the instance to the
<see cref="System.Configuration.Install.Installer.Installers"/> collection of your 
project installer. For example, a queue's <see cref="System.Messaging.MessageQueue.Path"/>
must be set before the install utility
executes.</para>
			<para>Typically, you do not call the methods of the <see cref="System.Messaging.MessageQueueInstaller"/> from within your code; they are generally called only by the installutil.exe installation utility. The utility
automatically calls the <see cref="System.Messaging.MessageQueueInstaller.Install"/> method during the
installation process and calls <see cref="System.Messaging.MessageQueueInstaller.Commit"/> if the installation did not throw an
exception. It backs out failures, if necessary, by calling <see cref="System.Messaging.MessageQueueInstaller.Rollback"/> for the object that
generated the exception.</para>
			<para> An application's install routine uses the project installer's
<see cref="System.Configuration.Install.Installer.Context" qualify="true"/> to automatically 
   maintain information about the components that have already been installed. This state information
   is continuously updated as each <see cref="System.Messaging.MessageQueueInstaller"/> instance is installed by the utility.
   It is not usually necessary for your code to explicitly modify the state
   information.</para>
		</remarks>
		<seealso topic="cpconInstallerUtilityInstallutilexe"/>
	</doc>
	<doc for="MessageQueueInstaller.Commit">
		<summary>
			<para>Completes the installation process by committing the <see cref="System.Messaging.MessageQueue"/>
installation information that the <see cref="System.Messaging.MessageQueueInstaller.Install"/> method wrote to the
registry. This method is meant to be used by installation tools, which
automatically call the appropriate methods.</para>
		</summary>
		<param name="savedState">An <see cref="System.Collections.IDictionary"/> that contains the post-installation state of the computer. </param>
		<remarks>
			<para>Typically, you do not call the methods of the <see cref="System.Messaging.MessageQueueInstaller"/> from within your code; they are
   generally called only by the installutil.exe installation utility. The utility
   automatically calls the <see cref="System.Messaging.MessageQueueInstaller.Install"/> method during the
   installation process. Installation is transactional, so if there is a failure
   of any installation project component during the installation, all the previously-installed
   components are rolled back to their pre-installation states. This is
   accomplished by calling each component's <see cref="System.Messaging.MessageQueueInstaller.Rollback"/> method. </para>
			<para>After a successful installation of all the components that are associated
   with the installation project has occurred, the installation utility
   commits the installations. <see cref="System.Messaging.MessageQueueInstaller.Commit"/> completes the installation
   of the <see cref="System.Messaging.MessageQueue"/> by setting the queue to the appropriate
   initial state. If the queue specified by the <see cref="System.Messaging.MessageQueueInstaller.Path"/> property already exists and contains
   messages, <see cref="System.Messaging.MessageQueueInstaller.Commit"/> clears the messages. <see cref="System.Messaging.MessageQueueInstaller.Commit"/>, rather than <see cref="System.Messaging.MessageQueueInstaller.Install"/>,
   clears the messages because the act of purging the messages cannot
   be rolled back.</para>
			<para> An application's install routine uses the project installer's
<see cref="System.Configuration.Install.Installer.Context" qualify="true"/> to automatically 
   maintain information about the components that have already been
   installed. This state information, which is
   passed to <see cref="System.Messaging.MessageQueueInstaller.Commit"/> as the <paramref name="savedState"/> parameter, is continuously
   updated as the utility commits each <see cref="System.Messaging.MessageQueueInstaller"/> instance.
   Usually, it is not necessary for your code to explicitly modify this state information.
   When the queue has been cleared, <see cref="System.Messaging.MessageQueueInstaller.Commit"/> posts
   a log entry to the <paramref name="savedState"/>
   that is associated with the installation. </para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueInstaller.Commit"/>
		<seealso cref="System.Messaging.MessageQueueInstaller.Rollback"/>
		<seealso cref="System.Messaging.MessageQueueInstaller.Uninstall"/>
	</doc>
	<doc for="MessageQueueInstaller.Install">
		<summary>
			<para>Performs the installation and writes message queue
      information to the registry. This method is meant to be
      used by installation tools, which automatically call the appropriate methods.</para>
		</summary>
		<param name="stateSaver"><para>An <see cref="T:System.Collections.IDictionary"/> used to save information needed to perform a commit, rollback, or uninstall operation. </para></param>
		<remarks>
			<para>The <see cref="System.Messaging.MessageQueueInstaller.Install"/> method writes message queue information to
   the registry, and associates the <see cref="System.Messaging.MessageQueue"/> instance with a queue that is located at the path specified by
   the <see cref="System.Messaging.MessageQueueInstaller.Path"/> property. If the queue does
   not already exist, <see cref="System.Messaging.MessageQueueInstaller.Install"/> creates a transactional
   queue. <see cref="System.Messaging.MessageQueueInstaller.Install"/> sets the new or existing queue
   properties to those that you have specified in the <see cref="System.Messaging.MessageQueueInstaller"/>. If the queue already exists, its properties
   are reset to those of the <see cref="System.Messaging.MessageQueueInstaller"/>.
   If the existing queue is not transactional,
   it is deleted and then recreated as a transactional queue. </para>
			<note type="caution">
   If it is necessary to recreate
   the queue, messages in the queue will be lost.
   
</note>
			<para>Typically, you do not call the methods of the <see cref="System.Messaging.MessageQueueInstaller"/> from within your code; they are generally
called only by the installutil.exe installation utility. The utility
automatically calls the <see cref="System.Messaging.MessageQueueInstaller.Install"/> method during the
installation process to write registry information that is associated with the
MessageQueue being installed. Installation is transactional, so if there is a
failure of any installation project component during the installation, all the
previously-installed components are rolled back to their pre-installation
states. This is accomplished by calling each component's <see cref="System.Messaging.MessageQueueInstaller.Rollback"/>
method. </para>
			<para>After a successful installation of all the components that are associated with
   the installation project has occurred, the installation utility commits the
   installations. <see cref="System.Messaging.MessageQueueInstaller.Commit"/> completes the
   installation of the <see cref="System.Messaging.MessageQueue"/> by setting the queue to the appropriate
   initial state. If the queue specified by the <see cref="System.Messaging.MessageQueueInstaller.Path"/>
   property already exists and contains messages, <see cref="System.Messaging.MessageQueueInstaller.Commit"/> clears
   the messages. <see cref="System.Messaging.MessageQueueInstaller.Commit"/>, rather than <see cref="System.Messaging.MessageQueueInstaller.Install"/>, clears the messages
   because the act of purging the messages cannot be rolled back.</para>
			<para>An application's install routine uses the project
   installer's <see cref="System.Configuration.Install.Installer.Context" qualify="true"/> to automatically
   maintain information about the components that have already been installed. This
   state information, which is passed to <see cref="System.Messaging.MessageQueueInstaller.Install"/> as the
<paramref name="stateSaver"/> parameter, is continuously updated as the utility installs 
   each <see cref="System.Messaging.MessageQueueInstaller"/> instance. Usually, it
   is not necessary for your code to explicitly modify this state
   information.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueInstaller.Commit"/>
		<seealso cref="System.Messaging.MessageQueueInstaller.Rollback"/>
		<seealso cref="System.Messaging.MessageQueueInstaller.Uninstall"/>
		<seealso cref="T:System.Collections.IDictionary"/>
	</doc>
	<doc for="MessageQueueInstaller.Rollback">
		<summary>
			<para> Restores the computer to the state it was in before the
      installation, by rolling back the queue information that the installation procedure wrote to the
      registry. This method is meant to be used by installation tools, which automatically call
      the appropriate methods.
      </para>
		</summary>
		<param name="savedState"><para>An <see cref="T:System.Collections.IDictionary"/> that contains the pre-installation state of the computer.</para></param>
		<remarks>
			<para>The <see cref="System.Messaging.MessageQueueInstaller.Rollback"/> method undoes the effects of the <see cref="System.Messaging.MessageQueueInstaller.Install"/> method. <see cref="System.Messaging.MessageQueueInstaller.Rollback"/> is
   called if the installation of any component in the installation project fails.
   The <see cref="System.Messaging.MessageQueueInstaller.Install"/> method creates or sets the properties for a queue.
<see cref="System.Messaging.MessageQueueInstaller.Rollback"/> either 
   deletes the queue or
   resets the properties of a pre-existing queue to their pre-installation values. </para>
			<para>Typically, you do not call the methods of the <see cref="System.Messaging.MessageQueueInstaller"/> from within your
code; they are generally called only by the InstallUtil.exe installation
utility. The utility automatically calls the <see cref="System.Messaging.MessageQueueInstaller.Rollback"/>
method after an installation failure
to undo any changes that the installation process has already
made. </para>
			<para>An application's install routine uses the project
   installer's <see cref="System.Configuration.Install.Installer.Context" qualify="true"/> to automatically
   maintain information about the components that have already been installed. This
   state information, which is passed to <see cref="System.Messaging.MessageQueueInstaller.Rollback"/> as the
<paramref name="savedState"/> parameter, is continuously updated as the utility rolls back 
   each <see cref="System.Messaging.MessageQueueInstaller"/>
   instance. Usually, it is not necessary for your code to explicitly
   modify this state information.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueInstaller.Commit"/>
		<seealso cref="System.Messaging.MessageQueueInstaller.Install"/>
		<seealso cref="System.Messaging.MessageQueueInstaller.Uninstall"/>
		<seealso cref="T:System.Collections.IDictionary"/>
	</doc>
	<doc for="MessageQueueInstaller.Uninstall">
		<summary>
			<para> Removes an installation by removing queue information
      from the registry. This method is meant to be used by uninstallation tools, which automatically call the appropriate methods.
      </para>
		</summary>
		<param name="savedState"><para>An <see cref="T:System.Collections.IDictionary"/> that contains the post-installation state of the computer. </para></param>
		<remarks>
			<para>If the <see cref="System.Messaging.MessageQueueInstaller.UninstallAction"/> is <see langword="Remove"/>, <see cref="System.Messaging.MessageQueueInstaller.Uninstall"/>
also deletes the queue associated with the <see cref="System.Messaging.MessageQueue"/>.</para>
			<para>Typically, you do not call the methods of the <see cref="System.Messaging.MessageQueueInstaller"/> from within your
code; they are generally called only by the InstallUtil.exe installation utility
(in uninstall mode). The utility automatically calls the <see cref="System.Messaging.MessageQueueInstaller.Uninstall"/> method to restore the
parts of the system that were affected by the installation to their
pre-installation states.
This includes deleting registry information that is associated with the MessageQueue
being uninstalled. </para>
			<para>An application's uninstall routine uses the project
   installer's <see cref="System.Configuration.Install.Installer.Context" qualify="true"/> to automatically
   maintain information about the components that have already been uninstalled. This
   state information, which is passed to <see cref="System.Messaging.MessageQueueInstaller.Uninstall"/> as the <paramref name="savedState"/> parameter, is continuously updated as
   the utility uninstalls each <see cref="System.Messaging.MessageQueueInstaller"/> instance. Usually,
   it is not necessary for your code to explicitly modify this state
   information.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueInstaller.Install"/>
		<seealso cref="T:System.Collections.IDictionary"/>
	</doc>
</docs>
