<docs>
	<doc for="MessageQueueEnumerator.MessageQueueEnumerator">
	</doc>
	<doc for="MessageQueueEnumerator.MessageQueueEnumerator1">
	</doc>
	<doc for="MessageQueueEnumerator.Current">
		<summary>
			<para>Gets the current <see cref="System.Messaging.MessageQueue"/> of the enumeration.</para>
		</summary>
		<value>
			<para>The queue at which the cursor is currently positioned.</para>
		</value>
		<exception cref="System.InvalidOperationException"><para>You called <see cref="System.Messaging.MessageQueueEnumerator.Current"/> before the first call to <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/>. The cursor is located before the first queue in the enumeration.</para>
			<para>-or-</para>
			<para>You called <see cref="System.Messaging.MessageQueueEnumerator.Current"/> after a call to <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> had returned false (indicating the cursor is located after the last queue in the enumeration).</para></exception>
		<remarks>
			<para>When the enumerator is created, it does not point to 
      anything, so <see cref="System.Messaging.MessageQueueEnumerator.Current"/> is not valid and will throw
      an exception if it is accessed. You must call <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> to position the cursor at the first queue in
      the enumeration.</para>
			<para>Multiple calls to <see cref="System.Messaging.MessageQueueEnumerator.Current"/> with no intervening calls to <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> will return the same <see cref="System.Messaging.MessageQueue"/>object.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageQueueEnumerator.Reset"/>
	</doc><doc for="MessageQueueEnumerator.Close">
		<summary>
			<para>Frees the resources associated with the enumerator.</para>
		</summary>
		<remarks>
			<para>The operating system retains an open handle, <see cref="System.Messaging.MessageQueueEnumerator.LocatorHandle"/>, to the queue enumerator during the lifetime 
   of the cursor. When you finish working with the enumerator, call <see cref="System.Messaging.MessageQueueEnumerator.Close"/> to release the resources associated with the
   handle.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueEnumerator.MoveNext"/>
	</doc><doc for="MessageQueueEnumerator.Reset">
		<summary>
			<para>Resets the cursor, so it points to the beginning of the enumeration.</para>
		</summary>
		<remarks>
			<para> An enumerator moves in a forward-only
      direction. Use this method to return to the beginning of the enumeration of queues.</para>
			<para><see cref="System.Messaging.MessageQueueEnumerator.Reset"/> positions the cursor at the 
   first queue in the list. You do not need to call <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> after calling <see cref="System.Messaging.MessageQueueEnumerator.Reset"/>
   to move the cursor forward to the first queue in the enumeration.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueEnumerator.MoveNext"/>
		<seealso cref="System.Messaging.MessageQueueEnumerator.Current"/>
	</doc><doc for="MessageQueueEnumerator.LocatorHandle">
		<summary>
			<para> Gets the native Message Queuing handle used to locate queues
      in a network.</para>
		</summary>
		<value>
			<para>The native handle to the current queue.</para>
		</value>
		<exception cref="System.Messaging.MessageQueueException">The handle does not exist.</exception>
		<exception cref="System.Security.SecurityException">The calling code does not have browse permissions.</exception>
		<remarks>
			<para> When you no longer need this <see cref="System.Messaging.MessageQueueEnumerator"/> instance, call <see cref="System.Messaging.MessageQueueEnumerator.Close"/>
to free this handle to the resource.
</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueEnumerator.Current"/>
	</doc><doc for="MessageQueueEnumerator.MoveNext">
		<summary>
			<para> Advances the enumerator to the next queue of the enumeration, if one
      is currently available.</para>
		</summary>
		<returns>
			<para><see langword="true,"/> if the enumerator was succesfully
   advanced to the next queue; <see langword="false"/> , if the
   enumerator has reached the end of the enumeration.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The calling code does not have browse permissions.</exception>
		<remarks>
			<para><see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> returns
<see langword="false"/> 
immediately if there are no queues associated with the
enumeration.</para>
			<para><see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> will return 
<see langword="true"/> until it has reached the end of the collection. It will 
then return <see langword="false"/> for each successive call. However once
<see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> has returned <see langword="false"/>, accessing 
the <see cref="System.Messaging.MessageQueueEnumerator.Current"/>
property will throw an
exception.</para>
			<para>Upon creation, an enumerator is conceptually positioned
   before the first <see cref="System.Messaging.MessageQueue"/> of the enumeration, and the first call to
<see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> brings the first queue of the enumeration into 
   view.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueEnumerator.Current"/>
		<seealso cref="System.Messaging.MessageQueueEnumerator.Reset"/>
		<seealso cref="System.Messaging.MessageQueue"/>
	</doc><doc for="MessageQueueEnumerator.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Messaging.MessageQueueEnumerator"/>.</para>
		</overload>
		<summary>
			<para> Releases all resources used by
      the <see cref="System.Messaging.MessageQueueEnumerator"/> .</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.Messaging.MessageQueueEnumerator.Dispose"/> allows the resources
   used by the <see cref="System.Messaging.MessageQueueEnumerator"/> to be reallocated for other purposes. For more
   information about <see cref="System.Messaging.MessageQueueEnumerator.Dispose"/>, see
<see topic="cpconCleaningUpUnmanagedResources"/> .</para>
		</remarks>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="MessageQueueEnumerator.Dispose1">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Messaging.MessageQueueEnumerator"/> and optionally releases the managed
   resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the public
   <see topic="frlrfSystemMessagingMessageQueueEnumeratorClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method.
   <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set
      to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
   <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
   resources held by any managed objects that this <see cref="System.Messaging.MessageQueueEnumerator"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced
   object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconImplementingDisposeMethod"/>
		<seealso topic="cpconCleaningUpUnmanagedResources"/>
	</doc><doc for="MessageQueueEnumerator.IEnumerator.Current">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="MessageQueueEnumerator.Finalize">
		<summary>
			<para>Releases the resources held by the queue.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/>.
   Application code should not call this method; an object's <see cref="System.Messaging.MessageQueueEnumerator.Finalize"/> method is automatically invoked during garbage
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   method.</para>
			<para>For more information, see <see topic="cpconFinalizeMethodscDestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
	</doc>
	<doc for="MessageQueueEnumerator">
		<summary>
			<para>Provides a forward-only cursor to enumerate through messages in a message
      queue. </para>
		</summary>
		<remarks>
			<para>Use <see cref="System.Messaging.MessageQueueEnumerator"/> for dynamic interaction with queues on the
   network. Methods available through the <see cref="System.Messaging.MessageQueue"/> class can return either a
<see cref="System.Messaging.MessageQueueEnumerator"/> containing a dynamic list of queues, or an 
   array that contains a snapshot of the queue collection at the time the specified
   method was called. </para>
			<note type="note">
   There is no defined ordering of
   queues in a network. They are not ordered, for example, by computer, label,
   public/private status, or other user-accessible criteria. A <see cref="System.Messaging.MessageQueueEnumerator"/> is a cursor, initialized to the head of a
   dynamic list. You can move the cursor to the first queue of the enumeration by
   calling <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/>. After the enumerator has been initialized,
   you can use <see cref="System.Messaging.MessageQueueEnumerator.MoveNext"/> to step forward through the
   remaining queues.
</note>
			<para>It is not possible to step backward with a <see cref="System.Messaging.MessageQueueEnumerator"/>. A cursor only allows forward movement through
the queue enumeration. However, you can call <see cref="System.Messaging.MessageQueueEnumerator.Reset"/> to reset the enumeration and put the cursor at
the beginning of the list again. Because the enumerator is dynamic, a queue that
is appended beyond the cursor's current position can be accessed by the
enumerator. A queue that is inserted before the cursor's current position cannot
be accessed without first calling Reset. </para>
		</remarks>
		<example>
			<para>The following example iterates through all the message queues in the network, 
      and examines the path for each queue. Finally, it displays the number of public
      queues on the network. </para>
			<codelink SampleID="MessageQueue.GetMessageQueueEnumerator_noparms" SnippetID="1"/>
		</example>
		<seealso cref="System.Messaging.MessageQueue"/>
		<seealso cref="System.Messaging.MessageQueue.GetMessageQueueEnumerator" qualify="true"/>
	</doc>
</docs>
