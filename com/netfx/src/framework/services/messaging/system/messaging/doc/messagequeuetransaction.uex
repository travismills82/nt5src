<docs>
	<doc for="MessageQueueTransaction.AbortInternalTransaction">
	</doc>
	<doc for="MessageQueueTransaction.BeginQueueOperation">
	</doc>
	<doc for="MessageQueueTransaction.EndQueueOperation">
	</doc>
	<doc for="MessageQueueTransaction.MessageQueueTransaction">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Messaging.MessageQueueTransaction"/> class.
   </para>
		</summary>
		<remarks>
			<para>This constructor sets the <see cref="System.Messaging.MessageQueueTransaction.Status"/> property to <see langword="Initialized"/>.</para>
		</remarks>
	</doc><doc for="MessageQueueTransaction.Dispose1">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Messaging.MessageQueueTransaction"/> and optionally releases the managed resources. </para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources. </param>
		<remarks>
			<para>This method is called by the public 
   <see topic="frlrfSystemMessagingMessageQueueTransactionClassDisposeTopic1" title="Dispose()"/> method and the <see cref="System.Object.Finalize"/> method. 
   <see langword="Dispose()"/> invokes the protected 
   <see langword="Dispose(Boolean)"/> method with the <paramref name="disposing"/> parameter set 
      to <see langword="true"/>. <see cref="System.Object.Finalize"/> invokes <see langword="Dispose"/> with
   <paramref name="disposing"/> set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
   releases all resources held by any managed objects that this <see cref="System.Messaging.MessageQueueTransaction"/> references. This method invokes the
<see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When 
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed of in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose"/>, see <see topic="cpconImplementingDisposeMethod"/> . 
</note>
			<para>For more information about <see langword="Dispose"/> and 
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/> . </para>
		</remarks>
	</doc><doc for="MessageQueueTransaction.Abort">
		<summary>
			<para> Rolls back the pending internal transaction.
      </para>
		</summary>
		<exception cref="System.InvalidOperationException">The internal transaction you are attempting to roll back has not started. </exception>
		<exception cref="System.Messaging.MessageQueueException">An internal Message Queuing error occurs. </exception>
		<remarks>
			<para><see cref="System.Messaging.MessageQueueTransaction.Abort"/> marks the unsuccessful completion of a process
   begun at a call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/>
   . </para>
			<para>Typically, one makes a call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/> within a <c>Try...Catch</c> exception-handling block, putting a call
to <see cref="System.Messaging.MessageQueueTransaction.Commit"/> in the <c>Try</c> clause, and a call to
<see cref="System.Messaging.MessageQueueTransaction.Abort"/> in the <c>Catch</c> 
clause. </para>
			<para><see cref="System.Messaging.MessageQueueTransaction.Abort"/> rolls back the entire transaction. This
includes all messages sent or received after the call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/>
. </para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueTransaction.Begin"/>
		<seealso cref="System.Messaging.MessageQueueTransaction.Commit"/>
		<seealso cref="System.Messaging.MessageQueue.Transactional" qualify="true"/>
	</doc>
	<doc for="MessageQueueTransaction.Status">
		<summary>
			<para> Gets the status of the transaction.
      </para>
		</summary>
		<value>
			<para>One of the <see cref="System.Messaging.MessageQueueTransactionStatus"/> values that indicates whether the transaction
   has been committed, aborted, initialized, or is pending.</para>
		</value>
		<remarks>
			<para>When an instance of the <see cref="System.Messaging.MessageQueueTransaction"/> class has been created, the
<see cref="System.Messaging.MessageQueueTransaction.Status"/> is set by the constructor to 
<see langword="Initialized"/>. After a call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/> but before a call to <see cref="System.Messaging.MessageQueueTransaction.Commit"/> or <see cref="System.Messaging.MessageQueueTransaction.Abort"/>, the <see cref="System.Messaging.MessageQueueTransaction.Status"/> is <see langword="Pending"/>.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueTransactionStatus"/>
	</doc>
	<doc for="MessageQueueTransaction.Commit">
		<summary>
			<para> Commits a pending internal transaction.
      </para>
		</summary>
		<exception cref="System.InvalidOperationException">The transaction you are trying to commit has not started. </exception>
		<exception cref="System.Messaging.MessageQueueException">An internal Message Queuing error occurs. </exception>
		<remarks>
			<para><see cref="System.Messaging.MessageQueueTransaction.Commit"/> marks the successful
   completion of processing begun at a call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/>. If an exception occurs between the call the
<see cref="System.Messaging.MessageQueueTransaction.Begin"/> and the call to <see cref="System.Messaging.MessageQueueTransaction.Commit"/> 
, the entire
transaction is rolled back. This includes all messages sent or received
after the call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/> . </para>
			<para>Typically, one makes a call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/>
within a <c>Try...Catch</c>
exception-handling block, putting a call to <see cref="System.Messaging.MessageQueueTransaction.Commit"/> in the <c>Try</c> clause, and a call to <see cref="System.Messaging.MessageQueueTransaction.Abort"/> in the <c>Catch</c> clause. </para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueTransaction.Abort"/>
		<seealso cref="System.Messaging.MessageQueueTransaction.Begin"/>
		<seealso cref="System.Messaging.MessageQueue.Transactional" qualify="true"/>
	</doc>
	<doc for="MessageQueueTransaction.Begin">
		<summary>
			<para> Begins a new Message Queuing internal transaction.
      </para>
		</summary>
		<exception cref="System.InvalidOperationException">The transaction has already been started. </exception>
		<exception cref="System.Messaging.MessageQueueException">An internal Message Queuing error occurs. </exception>
		<remarks>
			<para><see cref="System.Messaging.MessageQueueTransaction.Begin"/> marks the start of
   processing that will be committed or rolled back, depending on the success of
   the transaction. If an exception occurs during processing, the entire
   transaction is rolled back. This includes all messages sent or received
   after the call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/> . </para>
			<para>Typically, one makes a call to <see cref="System.Messaging.MessageQueueTransaction.Begin"/>
within a <c>Try...Catch</c>
exception-handling block, putting a call to <see cref="System.Messaging.MessageQueueTransaction.Commit"/> in the <c>Try</c> clause, and a call to <see cref="System.Messaging.MessageQueueTransaction.Abort"/> in the <c>Catch</c> clause. </para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueueTransaction.Abort"/>
		<seealso cref="System.Messaging.MessageQueueTransaction.Commit"/>
		<seealso cref="System.Messaging.MessageQueue.Transactional" qualify="true"/>
	</doc><doc for="MessageQueueTransaction.Dispose">
		<overload>
			<para>Releases the resources used by the <see cref="System.Messaging.MessageQueueTransaction"/>. </para>
		</overload>
		<summary>
			<para> Releases all resources used by the <see cref="System.Messaging.MessageQueueTransaction"/>
.</para>
		</summary>
		<remarks>
			<para>Calling <see cref="System.Messaging.MessageQueueTransaction.Dispose"/> allows the resources used by the <see cref="System.Messaging.MessageQueueTransaction"/> to be
   reallocated for other purposes. For more information about <see langword="Dispose"/>, see
<see topic="cpconCleaningUpUnmanagedResources"/> .</para>
			<para>Any pending internal transactions are rolled back by <see cref="System.Messaging.MessageQueueTransaction.Dispose"/>.</para>
		</remarks>
	</doc><doc for="MessageQueueTransaction">
		<summary>
			<para> Provides a Message Queuing internal transaction.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>To send or receive a message as part of a transaction, you can use
      the <see cref="System.Messaging.MessageQueueTransaction"/> class to create a transaction and pass
      it to an overload of the <see cref="System.Messaging.MessageQueue.Send" qualify="true"/> method or the <see cref="System.Messaging.MessageQueue.Receive" qualify="true"/> method that takes a
   <paramref name="transaction"/> parameter. Messages sent as part of a 
      transaction must be sent to transactional queues. Messages received from transactional queues must be received using a
      specified transaction.</para>
			<note type="note">
      In addition to the <see cref="System.Messaging.MessageQueue.Receive"/> method, you can receive messages with a
      specified identifier or specified correlation identifier. See the <see cref="System.Messaging.MessageQueue.ReceiveById"/> and <see cref="System.Messaging.MessageQueue.ReceiveByCorrelationId"/> methods for more information about selectively
      receiving messages from transactional queues.
   </note>
			<para>Messages sent to transactional queues are removed if the 
      transaction is rolled back. Similarly, messages received from transactional
      queues are returned to the queue if the transaction is rolled
      back.</para>
			<para>If you instantiate a <see cref="System.Messaging.MessageQueueTransaction"/> and pass it to an applicable overload of
   the <see cref="System.Messaging.MessageQueue.Send"/> method or <see cref="System.Messaging.MessageQueue.Receive"/> method to send a message to a nontransactional
   queue or receive a message from a nontransational queue, the method throws an exception indicating "Wrong Transaction
   Usage."</para>
			<note lang="VB" type="note">
				<see cref="System.Messaging.MessageQueueTransaction"/> is threading apartment aware,
   so if your apartment state is <see langword="STA"/>, you cannot use the
   transaction in multiple threads. Visual Basic sets the state of the main thread
   to <see langword="STA"/>, so you must apply the <see cref="System.MTAThreadAttribute"/> in
   the <c>Main</c> subroutine.
Otherwise, sending a transactional message using another thread throws a <see cref="System.Messaging.MessageQueueException"/> exception. You apply the <see cref="System.MTAThreadAttribute"/> by
using the following fragment.
</note>
			<code lang="VB">&lt;System.MTAThreadAttribute&gt;
public sub Main()
</code>
		</remarks>
		<seealso cref="System.Messaging.MessageQueue.Transactional" qualify="true"/>
		<seealso cref="System.Messaging.MessageQueue.Send" qualify="true"/>
	</doc><doc for="MessageQueueTransaction.Finalize">
		<internalonly/>
		<summary>
			<para>Releases the resources held by the current instance.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.Object.Finalize" qualify="true"/>.
   Application code should not call this method; an object's <see cref="System.Messaging.MessageQueueTransaction.Finalize"/> method is automatically invoked during garbage
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="System.GC.SuppressFinalize" qualify="true"/>
   method.</para>
			<para>For more information, see <see topic="cpconFinalizeMethodscDestructors"/>, <see topic="cpconCleaningUpUnmanagedResources"/>, and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
	</doc>
</docs>
