<docs>
	<doc for="IMessageFormatter.Read">
		<summary>
			<para>When implemented in a class, reads the contents from the given message and creates an object containing
      data from the message.</para>
		</summary>
		<param name="message">The <see cref="System.Messaging.Message"/> to deserialize.</param>
		<returns>
			<para> The deserialized message.</para>
		</returns>
		<remarks>
			<para>
			</para>
		</remarks>
		<seealso cref="System.Messaging.BinaryMessageFormatter.CanRead"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Write"/>
		<seealso cref="System.Messaging.ActiveXMessageFormatter.Read" qualify="true"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Read" qualify="true"/>
		<seealso cref="System.Messaging.XmlMessageFormatter.Read" qualify="true"/>
		<seealso cref="System.Messaging.Message"/>
	</doc><doc for="IMessageFormatter">
		<summary>
			<para> Serializes or deserializes
      objects from the body of a Message
      Queuing message.</para>
		</summary>
		<remarks>
			<para>When an application sends a message to the queue using an instance of the
   <see cref="System.Messaging.MessageQueue"/> class,
      the formatter serializes the object (which can be a instance of any
      class) into a stream and inserts it into the message body. When reading from a queue
      using a <see cref="System.Messaging.MessageQueue"/> , the formatter deserializes the
      message data into the <see cref="System.Messaging.Message.Body"/> property of a <see cref="System.Messaging.Message"/>
      .</para>
			<para><see cref="System.Messaging.BinaryMessageFormatter"/> and <see cref="System.Messaging.ActiveXMessageFormatter"/> provide faster throughput than the <see cref="System.Messaging.XmlMessageFormatter"/>. The <see cref="System.Messaging.ActiveXMessageFormatter"/> allows 
   interoperability with Visual Basic 6.0 Message Queuing applications. The <see cref="System.Messaging.XmlMessageFormatter"/>
   is loosely coupled, which means that the server and client can version the type that is
   sent and received independently.</para>
		</remarks>
		<seealso cref="System.Messaging.MessageQueue.Formatter" qualify="true"/>
		<seealso cref="System.Messaging.Message.Formatter" qualify="true"/>
		<seealso cref="System.Messaging.ActiveXMessageFormatter"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter"/>
		<seealso cref="System.Messaging.XmlMessageFormatter"/>
	</doc>
	<doc for="IMessageFormatter.Write">
		<summary>
			<para> When implemented in a class, serializes an object into the body of the message.</para>
		</summary>
		<param name="message">The <see cref="System.Messaging.Message"/> that will contain the serialized object.</param>
		<param name="obj">The object to be serialized into the message.</param>
		<seealso cref="System.Messaging.BinaryMessageFormatter.CanRead"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Read"/>
		<seealso cref="System.Messaging.ActiveXMessageFormatter.Read" qualify="true"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Read" qualify="true"/>
		<seealso cref="System.Messaging.XmlMessageFormatter.Read" qualify="true"/>
	</doc>
	<doc for="IMessageFormatter.CanRead">
		<summary>
			<para> When implemented in a class, determines whether the formatter can deserialize the contents of the message.</para>
		</summary>
		<param name="message">The <see cref="System.Messaging.Message"/> to inspect.</param>
		<returns>
			<para><see langword="true"/> if
   the formatter can deserialize the message; otherwise, <see langword="false"/> .</para>
		</returns>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Read"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.Write"/>
		<seealso cref="System.Messaging.ActiveXMessageFormatter.CanRead" qualify="true"/>
		<seealso cref="System.Messaging.BinaryMessageFormatter.CanRead" qualify="true"/>
		<seealso cref="System.Messaging.XmlMessageFormatter.CanRead" qualify="true"/>
	</doc>
</docs>
