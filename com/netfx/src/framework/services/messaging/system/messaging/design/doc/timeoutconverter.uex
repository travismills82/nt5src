<docs>
   <doc for="TimeoutConverter">
 <summary>
      TimeoutConverter is a class that can be used to convert
      Timeout from one data type to another.  Access this
      class through the TypeDescriptor.
 </summary>
   </doc>
   <doc for="TimeoutConverter.CanConvertFrom">
 <summary>
      Determines if this converter can convert an object in the given source
      type to the native type of the converter.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='sourceType'>
      The type you wish to convert from.
 </param>
 <returns>
      True if this object can perform the conversion.
 </returns>
   </doc>
   <doc for="TimeoutConverter.ConvertFrom">
 <summary>
      Converts the given object to the converter's native type.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='culture'>
      Culture to use to perform the conversion
 </param>
 <param name='value'>
      The object to convert.
 </param>
 <returns>
      The converted object.  This will throw an excetpion if the converson
      could not be performed.
 </returns>
   </doc>
   <doc for="TimeoutConverter.ConvertTo">
 <summary>
      Converts the given object to another type.  The most common types to convert
      are to and from a string object.  The default implementation will make a call
      to ToString on the object if the object is valid and if the destination
      type is string.  If this cannot convert to the desitnation type, this will
      throw a NotSupportedException.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='culture'>
      Culture to use to perform the conversion
 </param>
 <param name='value'>
      The object to convert.
 </param>
 <param name='destinationType'>
      The type to convert the object to.
 </param>
 <returns>
      The converted object.
 </returns>
   </doc>
</docs>

