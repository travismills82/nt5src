<docs>
	<doc for="WebService.SoapVersion">
		<summary>
			<para> Gets the version of the SOAP protocol used to
      make the SOAP request to the XML Web service.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Web.Services.Protocols.SoapProtocolVersion"/> values. The default is <see cref="System.Web.Services.Protocols.SoapProtocolVersion.Default"/>.</para>
		</value>
		<remarks>
			<para>If the SOAP protocol was not used to communicate with the
      XML Web service, such as HTTP-GET or HTTP-POST, the value of the <see cref="System.Web.Services.WebService.SoapVersion"/>
      property is <see cref="System.Web.Services.Protocols.SoapProtocolVersion.Default"/>.</para>
			<para>For XML Web services that do not derive from the <see cref="System.Web.Services.WebService"/>
class, the version of the SOAP protocol used to make the SOAP request to the XML
Web service can be also be accessed using the "WebServiceSoapVersion" entry
of the <see cref="System.Web.HttpContext.Items" qualify="true"/>
property. That entry is of type <see cref="System.Web.Services.Protocols.SoapProtocolVersion"/> .</para>
		</remarks>
		<seealso cref="System.Web.Services.Protocols.SoapProtocolVersion"/>
		<seealso cref="System.Web.HttpContext.Items"/>
	</doc>
	<doc for="WebService.Server">
		<summary>
			<para> Gets the <see cref="T:System.Web.HttpServerUtility"/>
for the current request.</para>
		</summary>
		<value>
			<para> An <see cref="T:System.Web.HttpServerUtility"/>
object.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Web.HttpServerUtility"/>
class provides several methods that can be used in the processing of Web
requests, including <see cref="System.Web.HttpServerUtility.CreateObject"/> (for instantiating
COM objects).</para>
		</remarks>
		<example>
			<para>The example below returns the computer name of the Web
      server using the <see cref="System.Web.Services.WebService.Server"/> property.</para>
			<codelink SampleID="Classic WebService.Server Example" SnippetID="1"/>
		</example>
		<seealso cref="T:System.Web.HttpServerUtility"/>
		<seealso cref="System.Web.HttpServerUtility.CreateObject"/>
	</doc>
	<doc for="WebService.Application">
		<summary>
			<para> Gets the application object for the current HTTP request.</para>
		</summary>
		<value>
   An <see cref="T:System.Web.HttpApplicationState"/> object.
</value>
		<remarks>
			<para> XML Web services can use both application
      state and session state. Application state is maintained across all sessions
      accessing an XML Web service regardless of whether session state is turned off for a method(by
      using the <see cref="System.Web.Services.WebMethodAttribute.EnableSession"/> property of the <see cref="System.Web.Services.WebMethodAttribute"/>
      ).</para>
		</remarks>
		<example>
			<para> The example below demonstrates a hit
      counter, incrementing the count every time a browser calls the XML Web service
      method.</para>
			<codelink SampleID="Classic WebService.Application Example" SnippetID="1"/>
		</example>
		<seealso cref="T:System.Web.HttpApplicationState"/>
	</doc>
	<doc for="WebService">
		<summary>
			<para> Defines the optional base class for XML Web
      services, which provides direct access to common ASP.NET objects, such as application and
      session
      state.</para>
		</summary>
		<remarks>
			<para>If you don't need access to the common ASP.NET objects,
      you can still create an XML Web service without deriving from <see cref="System.Web.Services.WebService"/>. Additional ASP.NET objects can be accessed through <see cref="System.Web.Services.WebService.Context"/>.</para>
			<para>XML Web service methods that have the <see cref="System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay"/> property
   of either <see cref="System.Web.Services.Protocols.SoapRpcMethodAttribute"/> or <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/> set to <see langword="true"/>, do not have access to their <see cref="System.Web.HttpContext"/>. As such, accessing any
   of the properties of the <see cref="System.Web.Services.WebService"/>
   class, from within that XML Web service method, return <see langword="null"/>.</para>
			<para>If you are using the .NET Framework version 1.0 XML Web service methods that have either the <see cref="System.Web.Services.Protocols.SoapRpcMethodAttribute"/> or <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/> attribute applied to them with
the <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay"/> property of set to
<see langword="true"/>, do not have access to their <see cref="System.Web.HttpContext"/> using 
the static <see cref="System.Web.HttpContext.Current"/> property. To access the <see cref="System.Web.HttpContext"/>, derive
the class implementing the XML Web service method from <see cref="System.Web.Services.WebService"/>
and access the <see cref="System.Web.Services.WebService.Context"/> property.</para>
		</remarks>
		<example>
			<para>The example below creates an XML Web service, deriving from <see cref="System.Web.Services.WebService"/>, in order to use the <see cref="System.Web.Services.WebService.Context"/> property to obtain the time of
   the request on the server.</para>
			<codelink SampleID="Classic WebService Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WebService.Context">
		<summary>
			<para>Gets the ASP.NET <see cref="System.Web.HttpContext"/> for the current request,
   which encapsulates all HTTP-specific context
   used by the HTTP server to process Web requests.</para>
		</summary>
		<value>
			<para>The ASP.NET <see cref="System.Web.HttpContext"/> for the current request.</para>
		</value>
		<exception cref="T:System.Exception"><paramref name="Context"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>XML Web service methods that have either the <see cref="System.Web.Services.Protocols.SoapRpcMethodAttribute"/> or <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/> attribute applied to them with
   the <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay"/>
   property of set to <see langword="true"/>, do not have access to their <see cref="System.Web.HttpContext"/> using
   the static <see cref="System.Web.HttpContext.Current"/> property. To access the <see cref="System.Web.HttpContext"/>, derive
   the class implementing the XML Web service method from <see cref="System.Web.Services.WebService"/>
   and access the <see cref="System.Web.Services.WebService.Context"/> property.</para>
		</remarks>
		<example>
			<para>The Example below uses the <see cref="System.Web.Services.WebService.Context"/> property to obtain the time of the
   request on the server.</para>
			<codelink SampleID="Classic WebService Example" SnippetID="1"/>
		</example>
		<seealso cref="T:System.Web.HttpContext"/>
	</doc>
	<doc for="WebService.Session">
		<summary>
			<para> Gets the <see cref="System.Web.SessionState.HttpSessionState"/>
instance for the current request.</para>
		</summary>
		<value>
			<para>A <see cref="System.Web.HttpSessionState"/> representing the ASP.NET session state object for the current session.</para>
		</value>
		<example>
			<para>The example below uses session state to determine how many times a particular session accesses the
      XML Web service method <c>SessionHitCounter</c> . In this example, the
<see cref="System.Web.Services.WebMethodAttribute.EnableSession"/> property of the <see cref="System.Web.Services.WebMethodAttribute"/> is set to <see langword="true"/> in order to gain 
   access to
   session state.</para>
			<codelink SampleID="Classic WebMethodAttribute.EnableSession Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.SessionState.HttpSessionState"/>
	</doc>
	<doc for="WebService.User">
		<summary>
			<para>Gets the ASP.NET server <see cref="System.Web.HttpContext.User"/> object. Can be used to authenticate whether a user is authorized to execute the request.</para>
		</summary>
		<value>
			<para>A <see cref="System.Security.Principal.IPrincipal"/> representing the ASP.NET server <see cref="System.Web.HttpContext.User"/> object.</para>
		</value>
		<remarks>
			<para>Both Internet Information Services (IIS) and the .NET
      Framework need to be configured for authentication in order for the <see cref="System.Web.Services.WebService.User"/>
      
      property to be meaningful.
      Authentication is the process of accepting credentials from a user
      and validating those credentials against some authority. If the
      credentials are valid, you have an authenticated identity. Authentication in
      the .NET Framework is configured by placing entries in the web.config file.</para>
			<para> The following example demonstrates the entries you
      place in the web.config file to enable Windows authentication.</para>
			<code>
&lt;security&gt;
 &lt;authentication mode="Windows"&gt; &lt;!-- Mode Options are Windows, Cookie, Passport and None or Empty String --&gt;
 &lt;/authentication&gt;
 &lt;/security&gt;
   </code>
			<para>For more information on setting up security for an XML 
      Web service see <see topic="cpconSecuringASPNETWebServices "/>.</para>
		</remarks>
		<example>
			<para> The example below looks
      up the authenticated user name
      and returns
      that
      name. </para>
			<codelink SampleID="Classic WebService.User Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Security.Principal.IPrincipal"/>
		<seealso topic="cpconSecuringASPNETWebServices"/>
	</doc>
</docs>
