<docs>
	<doc for="LogicalMethodTypes.Sync">
		<summary>
			<para> The XML Web service method is invoked synchronously.</para>
		</summary>
	</doc><doc for="LogicalMethodTypes.Async">
		<summary>
			<para> The XML Web service method is invoked asynchronously.</para>
		</summary>
	</doc><doc for="LogicalMethodInfo">
		<summary>
			<para>Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> is
   used primarily by a SOAP extension to interrogate the details of the
   XML Web service method with which the SOAP extension is configured to run.
   Depending on how the SOAP extension is configured, it can find out details about
   the XML Web service method in the <see cref="System.Web.Services.Protocols.SoapExtension.GetInitializer"/> method of <see cref="System.Web.Services.Protocols.SoapExtension"/> that takes a <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>. The <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> provides details such as the
   XML Web service method's parameters by accessing the <see cref="System.Web.Services.Protocols.LogicalMethodInfo.Parameters"/> property and any custom
   attributes applied to the XML Web service method using the <see cref="System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes"/>
   
   property.</para>
			<para>For more details on SOAP extensions see the <see cref="System.Web.Services.Protocols.SoapExtension"/> class or <see topic="cpconAlteringSOAPMessageUsingSOAPExtensions"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.SoapExtension"/>
		<seealso cref="System.Web.Services.Protocols.SoapExtension.GetInitializer"/>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.BeginInvoke">
		<summary>
			<para>Begins an asynchronous invocation of the method
      represented by this <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> .</para>
		</summary>
		<param name=" target">The instance of the <see cref="System.Object"/> on which to invoke the method on.</param>
		<param name=" values">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, <paramref name="values"/> should be <see langword="null"/>.</param>
		<param name=" callback">The delegate to call when the asynchronous invoke is complete. If <paramref name="callback"/> is <see langword="null"/>, the delegate is not called.</param>
		<param name=" asyncState">State information that is passed on to the delegate.</param>
		<returns>
			<para>An <see cref="T:System.IAsyncResult"/> which is passed to <see cref="System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke"/> to obtain the return values from
   the remote method call.</para>
		</returns>
		<exception cref="System.Reflection.TargetException">The <paramref name=" target"/> parameter<paramref name=" "/>is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The number, type, and order of parameters in <paramref name="values"/> do not match the signature of the invoked method.</exception>
		<exception cref="System.MemberAccessException">The caller does not have permission to invoke the method.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_BeginInvoke" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.EndInvoke">
		<summary>
			<para>Ends an asynchronous invocation of the method represented by the current
   <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> .</para>
		</summary>
		<param name=" target">The instance of the <see cref="System.Object"/> on which to invoke the method.</param>
		<param name="asyncResult">The <see cref="T:System.IAsyncResult"/> returned from <see cref="System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke"/>.</param>
		<returns>
			<para>An array of objects containing the return value and any by-reference or out
      parameters of the derived class method.</para>
		</returns>
		<exception cref="System.Reflection.TargetException">The <paramref name="target"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.MemberAccessException">The caller does not have permission to invoke the method.</exception>
		<exception cref="System.Reflection.TargetInvocationException">The invoked method throws an exception.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_BeginInvoke" SnippetID="2"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.IsBeginMethod">
		<summary>
			<para>Returns a value indicating whether the method passed in
      represents a <see langword="Begin"/>
      method of an asynchronous invocation.</para>
		</summary>
		<param name="methodInfo">The <see cref="System.Reflection.MethodInfo"/> that might be a <see langword="Begin"/> method of an asynchronous invocation.</param>
		<returns>
			<para><see langword="true"/> if
   the <paramref name="methodInfo"/> parameter is a
<see langword="Begin"/> 
method of an asynchronous invocation; otherwise,
<see langword="false"/>.</para>
		</returns>
		<example>
			<codelink SampleID="LogicalMethodInfo_IsBeginMethod" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.IsEndMethod">
		<summary>
			<para>Returns a value indicating whether the method passed in
      represents an <see langword="End"/>
      method of an asynchronous invocation.</para>
		</summary>
		<param name="methodInfo">The <see cref="System.Reflection.MethodInfo"/> that might be an <see langword="End"/> method of an asynchronous invocation.</param>
		<returns>
			<para><see langword="true"/> if
   the
<paramref name="methodInfo"/> parameter is an 
<see langword="End"/> 
method of an asynchronous invocation; otherwise,
<see langword="false"/>.</para>
		</returns>
		<example>
			<codelink SampleID="LogicalMethodInfo_IsBeginMethod" SnippetID="2"/>
		</example>
	</doc>
	<doc for="LogicalMethodTypes">
		<summary>
			<para>Specifies how the XML Web service method was invoked.</para>
		</summary>
		<example>
			<codelink SampleID="LogicalMethodInfo_GetCustomAttribute" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.MethodInfo">
		<summary>
			<para> Gets the attributes and metadata for a
      synchronous method.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.MethodInfo"/>
representing the attributes and metadata for a method. If <see cref="System.Web.Services.Protocols.LogicalMethodInfo.IsAsync"/> is <see langword="true"/>, then the value of
this property is <see langword="null"/>.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_GetCustomAttribute" SnippetID="3"/>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.GetCustomAttribute">
		<summary>
			<para> Returns the first custom attribute applied to the
      type, if any custom attributes are applied to the type.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> to which the custom attributes are applied.</param>
		<returns>
			<para> An <see cref="System.Object"/> containing the first custom attribute applied to the
<paramref name="type"/>parameter.</para>
		</returns>
		<exception cref="System.TypeLoadException">The custom attribute type can not be loaded.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_GetCustomAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.GetCustomAttributes">
		<summary>
			<para>Returns the custom attributes applied to the specified type.</para>
		</summary>
		<param name="type">The <see cref="System.Type"/> to which the custom attributes are applied.</param>
		<returns>
			<para>An array of <see cref="System.Object"/> containing the custom attributes applied to
<paramref name="type"/>.</para>
		</returns>
		<exception cref="System.TypeLoadException">The custom attribute type can not be loaded.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_GetCustomAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.CustomAttributeProvider">
		<summary>
			<para>Gets the custom attributes applied to the method.</para>
		</summary>
		<value>
			<para>An <see cref="System.Reflection.ICustomAttributeProvider"/> representing the custom attributes for
   the method.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_GetCustomAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.ReturnTypeCustomAttributeProvider">
		<summary>
			<para>Gets the custom attributes for the return type.</para>
		</summary>
		<value>
			<para>An <see cref="System.Reflection.ICustomAttributeProvider"/> representing the custom attributes for
   the return type.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_GetCustomAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.Create">
		<overload>
			<para>Given an array of <see cref="System.Reflection.MethodInfo"/>, creates an array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</overload>
		<summary>
			<para>Given an array of <see cref="System.Reflection.MethodInfo"/> that can contain information about both asynchronous and synchronous
   methods, creates an array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</summary>
		<param name="methodInfos">An array of <see cref="System.Reflection.MethodInfo"/> representing the asynchronous and synchronous methods for which to create <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> objects. </param>
		<returns>
			<para>An array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>, representing the methods within
<paramref name="methodInfos"/>.</para>
		</returns>
		<exception cref="System.InvalidOperationException">A <see langword="Begin"/> asynchronous method is included in <paramref name="methodInfos"/> without a corresponding <see langword="End"/> method.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create1" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.Name">
		<summary>
			<para>Gets the name of the method represented by this <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> .</para>
		</summary>
		<value>
			<para>The name of the method represented by this <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>
.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.InParameters">
		<summary>
			<para>Gets the parameters passed into the method represented
      by the instance of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</summary>
		<value>
			<para>An array of type <see cref="System.Reflection.ParameterInfo"/> containing the parameters passed into the
   method represented by the instance of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</value>
		<remarks>
			<para>Use an instance of <see cref="System.Reflection.ParameterInfo"/> to obtain information about
   the parameter's data type, default value, and so on.</para>
			<para><see cref="System.Web.Services.Protocols.LogicalMethodInfo.InParameters"/> returns an array
of <see cref="System.Reflection.ParameterInfo"/> objects representing the parameters passed
into a method, in order.</para>
		</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.Parameters"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.OutParameters"/>
	</doc>
	<doc for="LogicalMethodInfo.OutParameters">
		<summary>
			<para>Gets the out parameters for the method.</para>
		</summary>
		<value>
			<para>An array of <see cref="System.Reflection.ParameterInfo"/> representing the out parameters for the method, in
   order.</para>
		</value>
		<remarks>
			<para> Use a <see cref="System.Reflection.ParameterInfo"/> to obtain information about
   the parameter's data type, default value, and so on.</para>
		</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create1" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.InParameters"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.Parameters"/>
	</doc>
	<doc for="LogicalMethodInfo.IsVoid">
		<summary>
			<para>Gets a value indicating whether the return type for the
      method represented by the instance of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> is
   <see langword="void"/>
   .</para>
		</summary>
		<value>
			<para><see langword="true"/> if the return type is void;
   otherwise, <see langword="false"/>.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.LogicalMethodInfo">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> class with the <see cref="System.Reflection.MethodInfo"/> passed in.</para>
		</summary>
		<param name="methodInfo">A <see cref="System.Reflection.MethodInfo"/> to initialize the properties of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> common to the <see cref="System.Reflection.MethodInfo"/>.</param>
		<exception cref="System.InvalidOperationException"><para> The <see cref="System.Reflection.MethodBase.IsStatic" qualify="true"/> property of the <paramref name="methodInfo "/>parameter is <see langword="true"/>.</para>
			<para>-or-</para>
			<para>The <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/> method of the <paramref name="methodInfo"/> parameter does not contain all the parameters required by the method represented by the instance of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> .</para></exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_Constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.Invoke">
		<summary>
			<para>Invokes the method represented by the current <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> .</para>
		</summary>
		<param name=" target">The instance of the <see cref="System.Object"/> to invoke the method.</param>
		<param name=" values">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, the <paramref name="values"/> parameter should be <see langword="null"/>.</param>
		<returns>
			<para>An array of type <see cref="System.Object"/> representing the return value and out
   parameters of the invoked method.</para>
		</returns>
		<exception cref="System.Reflection.TargetException">The <paramref name="target "/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The number, type, and order of parameters in the <paramref name="values"/> parameter do not match the signature of the invoked method.</exception>
		<exception cref="System.MemberAccessException">The caller does not have permission to invoke the method.</exception>
		<exception cref="System.Reflection.TargetInvocationException">The invoked method throws an exception.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_Constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.DeclaringType">
		<summary>
			<para> Gets the class that declares the method represented
      by the current <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</summary>
		<value>
			<para>The <see cref="System.Type"/> for
   the class declaring the method represented by the <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType"/> property retrieves a reference to
   a <see cref="System.Type"/> for the type that
   declares this member. A member of a class (or interface) is either declared or
   inherited from a base class (or interface). The returned <see cref="System.Type"/>
   
   might not be the same as the <see cref="System.Type"/> of the class implementing
   the XML Web service (if that class derives from a base class and the method
   represented by this class is declared in that base class then the <see cref="System.Type"/>
   returned is the base class).</para>
		</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.ReturnType">
		<summary>
			<para>Gets the return type of this method.</para>
		</summary>
		<value>
			<para>The <see cref="System.Type"/>
returned by this method.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_Constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.Parameters">
		<summary>
			<para> Gets the parameters for the method.</para>
		</summary>
		<value>
			<para>An array of <see cref="System.Reflection.ParameterInfo"/> representing the parameters for
   the method.</para>
		</value>
		<remarks>
			<para> Use a <see cref="System.Reflection.ParameterInfo"/> to obtain information about
   the parameter's data type, default value, and so on.</para>
			<para><see cref="System.Web.Services.Protocols.LogicalMethodInfo.Parameters"/> returns an array
of <see cref="System.Reflection.ParameterInfo"/> objects representing the parameters passed
into a method, in order.</para>
		</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Constructor" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.InParameters"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.OutParameters"/>
	</doc>
	<doc for="LogicalMethodInfo.ToString">
		<summary>
			<para>Returns a string that represents the current <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</summary>
		<returns>
			<para>A <see cref="System.String"/> that
   represents the current <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</returns>
		<example>
			<codelink SampleID="LogicalMethodInfo_Constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LogicalMethodInfo.Create1">
		<summary>
			<para>Given an array of <see cref="System.Reflection.MethodInfo"/>, where the
   returned array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> can be restricted to only asynchronous or synchronous
   methods, creates an array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</para>
		</summary>
		<param name="methodInfos">An array of <see cref="System.Reflection.MethodInfo"/> representing the asynchronous and synchronous methods for which to create <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> objects. </param>
		<param name=" types">A bitwise combination of the <see cref="System.Web.Services.Protocols.LogicalMethodTypes"/> values. Determines whether just asynchronous or synchronous methods or both are included in the returned array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>.</param>
		<returns>
			<para>An array of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/>,
   representing the methods within <paramref name="methodInfos, "/>filtered by the value of
<paramref name="types"/>.</para>
		</returns>
		<exception cref="System.InvalidOperationException">A <see langword="Begin"/> asynchronous method is included in <paramref name="methodInfos"/> without a corresponding <see langword="End"/> method.</exception>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.AsyncResultParameter">
		<summary>
			<para>Gets the return value of a <see langword="Begin"/> asynchronous method invocation.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.ParameterInfo"/> representing the <see cref="System.IAsyncResult"/> returned from a <see langword="Begin"/>
asynchronous method invocation.</para>
		</value>
		<remarks>
			<para>The asynchronous design pattern in the common language
      runtime involves calling a <see langword="Begin"/> method to start the
      asynchronous method invocation and an <see langword="End"/> method to complete
      the invocation. The <see langword="Begin"/>
      method typically returns
      immediately with an object implementing the <see cref="System.IAsyncResult"/> interface, which can then be passed to the
      <see langword="End"/> method at a
      later time to complete the asynchronous method invocation. The returned object implementing
      the <see cref="System.IAsyncResult"/> interface is represented by this property.</para>
			<para>For more information on invoking XML Web services asynchronously, see <see topic="cpconInvokingWebServicesAsynchronously"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
		<seealso cref="System.IAsyncResult"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter"/>
		<seealso cref="System.Reflection.ParameterInfo"/>
		<seealso topic="cpconInvokingWebServicesAsynchronously"/>
	</doc>
	<doc for="LogicalMethodInfo.AsyncCallbackParameter">
		<summary>
			<para>Gets the parameter information for the
   <paramref name="AsyncCallback"/>
   parameter of a Begin method in an asynchronous invocation.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.ParameterInfo"/> representing the <paramref name="AsyncCallback"/>
parameter of a <see langword="Begin"/>
asynchronous method invocation.</para>
		</value>
		<remarks>
			<para>The asynchronous design pattern in the common language
      runtime involves calling a <see langword="Begin"/> method to start the
      asynchronous method invocation and an <see langword="End"/> method to complete
      the invocation. The <see langword="Begin"/> method takes two additional parameters besides the parameters defined
      by the synchronous version of the method: one to store a delegate and
      one to store any state information that needs to be passed on to the delegate. This
      property represents the parameter for the delegate with a parameter name of
   <paramref name="AsyncCallback"/>
   
   . </para>
For more information on invoking XML Web services asynchronously, see <see topic="cpconInvokingWebServicesAsynchronously"/>.
</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter"/>
		<seealso cref="System.Reflection.ParameterInfo"/>
		<seealso topic="cpconInvokingWebServicesAsynchronously"/>
	</doc>
	<doc for="LogicalMethodInfo.AsyncStateParameter">
		<summary>
			<para>Gets the parameter information for the
      <paramref name="AsyncState"/> parameter of a <see langword="Begin"/>
   method in an asynchronous invocation.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.ParameterInfo"/> representing the <paramref name="AsyncState"/>
parameter of a <see langword="Begin"/>
method in an asynchronous invocation.</para>
		</value>
		<remarks>
			<para>The asynchronous design pattern in the common language
      runtime involves calling a <see langword="Begin"/> method to start the
      asynchronous method invocation and an <see langword="End"/> method to complete
      the invocation. The <see langword="Begin"/> method takes two additional
      parameters besides the parameters
      defined by the synchronous version of the method: one to store a
      delegate and one to store any state information that needs to be passed on to the
      delegate. This property represents the state information that needs to be
      passed into the delegate.</para>
   For more information on invoking XML Web services asynchronously, see <see topic="cpconInvokingWebServicesAsynchronously"/>.
</remarks>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter"/>
		<seealso cref="System.Reflection.ParameterInfo"/>
		<seealso topic="cpconInvokingWebServicesAsynchronously"/>
	</doc>
	<doc for="LogicalMethodInfo.BeginMethodInfo">
		<summary>
			<para> Gets the attributes and metadata for a
      <see langword="Begin"/> method in an
      asynchronous invocation.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.MethodInfo"/>
representing the attributes and metadata for a <see langword="Begin"/>
asynchronous method invocation.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.EndMethodInfo">
		<summary>
			<para> Gets the attributes and metadata for an
      <see langword="End"/> method of an asynchronous invocation to
      a method.</para>
		</summary>
		<value>
			<para>A <see cref="System.Reflection.MethodInfo"/>
representing the attributes and metadata for an <see langword="End"/>
asynchronous method invocation.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo"/>
		<seealso cref="System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo"/>
	</doc>
	<doc for="LogicalMethodInfo.IsAsync">
		<summary>
			<para>Gets a value indicating whether the method represented
      by the instance of <see cref="System.Web.Services.Protocols.LogicalMethodInfo"/> is invoked asynchronously.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the method is invoked
   asynchronously; otherwise, <see langword="false"/>.</para>
		</value>
		<example>
			<codelink SampleID="LogicalMethodInfo_Create2" SnippetID="1"/>
		</example>
	</doc>
</docs>
