<docs>
	<doc for="WebClientProtocol.GetFromCache">
		<nodoc/>
		<summary>
			<para>Gets an instance of a client protocol handler from the cache.</para>
		</summary>
		<param name="type">
		</param>
	</doc>
	<doc for="WebClientProtocol.AddToCache">
		<nodoc/>
		<summary>
			<para> Add an instance of the client protocol handler to the cache.
      </para>
		</summary>
		<param name="type">
		</param>
		<param name=" value">
		</param>
	</doc>
	<doc for="HttpWebClientProtocol.ServicePoint">
		<summary>
			<para>Gets a <see cref="System.Net.ServicePoint"/> for the current connection to the XML Web service.</para>
		</summary>
		<value>
			<para> The <see cref="System.Net.ServicePoint"/> for the current connection.
   </para>
		</value>
		<seealso cref="P:System.Net.ServicePoint"/>
		<seealso cref="P:System.Net.ServicePointManager.FindServicePoint"/>
	</doc>
	<doc for="HttpWebClientProtocol.Cookies">
		<summary>
			<para>Gets a collection of cookies sent by the client.</para>
		</summary>
		<value>
			<para>A <see cref="System.Net.CookieCollection"/> object representing the client's cookie variables.</para>
		</value>
		<remarks>
			<para>Setting <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.EnableCookies"/> to <see langword="true"/> automatically populates <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.Cookies"/>
with any cookies returned from the server. These cookies will be included in requests that match the cookie's Uri.</para>
		</remarks>
		<seealso cref="System.Net.CookieContainer"/>
	</doc>
	<doc for="WebClientProtocol.BeginSend">
		<nodoc/>
		<summary>
			<para> Starts an asynchronous request to
      an XML Web service method.</para>
		</summary>
		<param name="requestUrl">The url of the XML Web service method.</param>
		<param name="internalAsyncState">Custom state that the caller wants passed to <see cref="System.Web.Services.Protocols.WebClientProtocol.InitializeAsyncRequest"/> and <see cref="System.Web.Services.Protocols.WebClientProtocol.WriteAsyncRequest"/> and then returned from <see cref="System.Web.Services.Protocols.WebClientProtocol.EndSend"/> .</param>
		<param name="outerCallback">The callback method that should be called when the asynchronous request processing has completed from <see cref="System.Web.Services.Protocols.WebClientProtocol.EndSend"/> .</param>
		<param name="outerAsyncState">The asynchronous state instance that should be placed in the IAsyncResult.AsyncState property of the return value.</param>
		<param name="callWriteAsyncRequest">Specifies if the caller wants to write to the request stream. If <see langword="true"/>then the request stream is asynchronously retrieved and <see cref="System.Web.Services.Protocols.WebClientProtocol.WriteAsyncRequest"/> is called. If <see langword="false"/> then the response is asynchronously retrieved directly.</param>
		<returns>
			<para>The <see cref="System.IAsyncResult"/> instance that can be used to monitor the async processing.
   This value should be passed to EndSend to complete async request processing.</para>
		</returns>
		<remarks>
			<note type="inheritinfo">
      Classes deriving from <see cref="System.Web.Services.Protocols.WebClientProtocol"/> can use the <see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/> and <see cref="System.Web.Services.Protocols.WebClientProtocol.EndSend"/> methods to implement higher level
      asynchronous methods, such as the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> and <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/> methods in <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>. The <see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/> method calls <see cref="System.Web.Services.Protocols.WebClientProtocol.GetWebRequest"/> and <see cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/> to start the asyncrhonous
      retrieval of the request and response for the XML Web service method call. Classes
      deriving from <see cref="System.Web.Services.Protocols.WebClientProtocol"/> can add custom behavior to this,
      by overriding the <see cref="System.Web.Services.Protocols.WebClientProtocol.GetWebRequest"/> and <see cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/>
      
      methods.
      
   </note>
		</remarks>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.EndSend"/>
	</doc>
	<doc for="WebClientProtocol.InitializeAsyncRequest">
		<nodoc/>
		<summary>
			<para>Called prior to the request stream being obtained by
      the <see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/> method, allowing derived classes
      to add custom request headers to asynchronous requests.</para>
		</summary>
		<param name="request">The <see cref="System.Net.WebRequest"/> instance that will be used to make the request. </param>
		<param name="internalAsyncState">The state object passed to <see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/> . The derived class can use this to pass custom state along to each stage of the asynchronous request processing. </param>
		<remarks>
			<para>
				<see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/> starts an
   asynchronous request to an XML Web service method, calling
<see cref="System.Web.Services.Protocols.WebClientProtocol.InitializeAsyncRequest"/> prior to 
   retrieving the request stream. <see cref="System.Web.Services.Protocols.WebClientProtocol.InitializeAsyncRequest"/>
   allows derived classes an opportunity to modify the <see cref="System.Net.WebRequest"/>, to add
   request headers. <see cref="System.Web.Services.Protocols.WebClientProtocol.InitializeAsyncRequest"/>
   
   is the last time request headers can be modified during
   an asynchronous request. </para>
			<para>A derived class can use the <paramref name="internalAsyncState"/> parameter to pass
custom state information along to the different stages of the
asynchronous request processing. </para>
			<para>The base implementation does nothing. </para>
		</remarks>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.WriteAsyncRequest"/>
		<seealso cref="System.Net.WebRequest"/>
	</doc>
	<doc for="WebClientProtocol.WriteAsyncRequest">
		<nodoc/>
		<summary>
			<para> Called during an asynchronous request to an XML Web service,
      giving a derived class an opportunity to add additional data into
      the request stream. </para>
		</summary>
		<param name="requestStream">The <see cref="System.IO.Stream"/> object to write the request data into.</param>
		<param name="internalAsyncState">The <see cref="System.IAsyncResult"/> to pass to <see cref="System.Net.WebRequest.EndGetResponse"/> .</param>
		<exception cref="System.NotSupportedException">Base implemenentation called.</exception>
		<remarks>
			<para>
				<see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/>starts an
   asynchronous request to an XML Web service method, calling <see cref="System.Web.Services.Protocols.WebClientProtocol.WriteAsyncRequest"/>
   if the
<paramref name="callWriteAsyncRequest"/> parameter to <see cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/> is <see langword="true"/>
.</para>
			<para> The base implementation throws a <see cref="System.NotSupportedException"/> .</para>
			<para>The request headers for the <see cref="System.Net.WebRequest"/> cannot be
modified during <see cref="System.Web.Services.Protocols.WebClientProtocol.WriteAsyncRequest"/>. To add
request headers, override <see cref="System.Web.Services.Protocols.WebClientProtocol.InitializeAsyncRequest"/>
, where you can modify
the request headers.</para>
		</remarks>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.InitializeAsyncRequest"/>
	</doc>
	<doc for="WebClientProtocol.EndSend">
		<nodoc/>
		<summary>
			<para>Completes an asynchronous request to an XML Web service method.</para>
		</summary>
		<param name="asyncResult">The <see cref="System.IAsyncResult"/> instance that was returned from BeginSend.</param>
		<param name="internalAsyncState">An out parameter that returns the async state object originally passed to BeginSend.</param>
		<returns>
			<para>A <see cref="System.Net.WebResponse"/> object representing the results from the XML Web service
   method.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="asyncResult "/>parameter is null.</exception>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.BeginSend"/>
		<seealso cref="System.Net.WebResponse"/>
	</doc>
	<doc for="HttpWebClientProtocol.EnableCookies">
		<summary>
			<para> Gets or sets whether cookies are
      automatically handled for requests and responses.</para>
		</summary>
		<value>
			<para><see langword="true"/> to handle cookies received from the server;
   otherwise, <see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Setting <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.EnableCookies"/> to
<see langword="true"/> will automatically populate <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.Cookies"/> with any
   cookies returned from the server. These cookies will be included in requests
   that match the cookie's Uri.</para>
		</remarks>
		<example>
			<para>The following example calls an XML Web service named <c>Math</c> setting the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.EnableCookies"/> property to 
<see langword="false"/> 
to disallow cookies.</para>
			<codelink SampleID="Classic HttpWebClientProtocol.EnableCookies Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.HttpWebClientProtocol.Cookies"/>
	</doc><doc for="WebClientProtocol.ConnectionGroupName">
		<summary>
			<para> Gets or sets the name of the connection
      group for the request.</para>
		</summary>
		<value>
			<para>The name of the connection group. The default is <see cref="System.String.Empty"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName"/> property
   enables you to associate a request to a connection group. For more details, see
<see cref="System.Net.HttpWebRequest.ConnectionGroupName"/> 
.</para>
		</remarks>
		<seealso cref="P:System.Net.WebRequest.ConnectionGroupName"/>
		<seealso cref="System.Net.HttpWebRequest.ConnectionGroupName"/>
	</doc><doc for="HttpWebClientProtocol.HttpWebClientProtocol">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol"/> class.</para>
		</summary>
	</doc><doc for="HttpWebClientProtocol.GetWebRequest">
		<summary>
			<para>Creates a <see cref="System.Net.WebRequest"/> for the specified URI.</para>
		</summary>
		<param name="uri">The <see cref="System.Uri"/> for creating the <see cref="System.Net.WebRequest"/>.</param>
		<returns>
			<para>The made <see cref="System.Net.WebRequest"/> . </para>
		</returns>
		<exception cref="System.InvalidOperationException">The <paramref name="uri"/> parameter is <see langword="null"/> .</exception>
	</doc><doc for="WebClientAsyncResult.IsCompleted">
		<summary>
			<para>Gets a value indicating whether the asynchronous XML Web service request has completed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the 
   asynchronous XML Web service request has
   completed; otherwise, <see langword="false"/>.</para>
		</value>
	</doc><doc for="HttpWebClientProtocol.GetWebResponse">
		<overload>
			<para>Returns a response from a request to an XML Web service method.</para>
		</overload>
		<summary>
			<para>Returns a response from a synchronous request to an XML Web service method.</para>
		</summary>
		<param name="request">The <see cref="System.Net.WebRequest"/> from which to get the response.</param>
		<returns>
			<para>The <see cref="System.Net.WebResponse"/>.</para>
		</returns>
	</doc><doc for="HttpWebClientProtocol.GetWebResponse1">
		<summary>
			<para>Returns a response from an asynchronous request to an XML Web service method.</para>
		</summary>
		<param name="request">The <see cref="System.Net.WebRequest"/> from which to get the response.</param>
		<param name=" result">The <see cref="System.IAsyncResult"/> to pass to <see cref="System.Net.HttpWebRequest.EndGetResponse"/>. when the response has completed.</param>
		<returns>
			<para>The <see cref="System.Net.WebResponse"/>.</para>
		</returns>
	</doc><doc for="WebClientProtocol.Url">
		<summary>
			<para>Gets or sets the base URL of the XML Web service the client is requesting.</para>
		</summary>
		<value>
			<para> The base URL of the XML Web service the client is
      requesting. The default is a <see cref="System.String.Empty"/>
      .</para>
		</value>
		<remarks>
			<para> Proxy classes generated using Wsdl.exe will set a
      default <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/> property for the client
      to use. The default <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/>
      is
      determined by the location attribute found in the service description from which the
      proxy class was generated.</para>
			<para>      Derived classes supporting specific
      protocols, such as <see cref="System.Web.Services.Protocols.HttpGetClientProtocol"/> and <see cref="System.Web.Services.Protocols.HttpPostClientProtocol"/> might add extra information
      to <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/>
      
      to make
      the XML Web service request.</para>
			<para>      The <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/>
property can be changed to refer
to any XML Web service that implements the same service description that the proxy
class was generated from.</para>
		</remarks>
		<example>
			<para> The following example changes the
      <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/>
   property for the <c>math</c> XML Web service to the Web server named http:// <c>www.contoso.com</c>.</para>
			<codelink SampleID="Classic WebClientProtocol.Url Example" SnippetID="1"/>
		</example>
	</doc><doc for="HttpWebClientProtocol.Proxy">
		<summary>
			<para>Gets or sets proxy information for making an XML Web service request through a firewall.</para>
		</summary>
		<value>
			<para> An <see cref="System.Net.IWebProxy"/>, containing the proxy information for
   making requests through a firewall. The default value is the operating system proxy settings.
   </para>
		</value>
		<remarks>
			<para>Use the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.Proxy"/> property if a
   client needs to use different proxy settings than those in the system settings.
   You can use the <see cref="System.Net.WebProxy"/> class to set the proxy settings, because it implements
<see cref="System.Net.IWebProxy"/>. </para>
			<para>Default proxy setting can be set in a configuration file. For 
   details, see <see topic="cpconconfiguringinternetapplications"/>. </para>
		</remarks>
		<example>
			<para>The following example sets the following proxy settings
      prior to invoking the <c>Math</c>
   XML Web service: the proxy server to http://proxyserver, the proxy port to 80
   and to bypass the proxy server for local
   addresses.</para>
			<codelink SampleID="Classic HttpWebClientProtocol.Proxy Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.IWebProxy"/>
		<seealso cref="System.Net.WebProxy"/>
	</doc><doc for="WebClientProtocol.PreAuthenticate">
		<summary>
			<para> Gets or sets whether pre-authentication is enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> to pre-authenticate the request;
   otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>When <see cref="System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate"/> is <see langword="true"/> , the
<see langword="WWW-authenticate"/> header is sent with the 
   first request if the authentication mechanism supports doing so. When <see cref="System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate"/> is
<see langword="false"/>, a request is made to the XML Web service method without initially
   attempting to authenticate the user. If the XML Web
   service allows anonymous access, then the XML Web service method is
   executed. If anonymous access is disallowed, a 401 HTTP return
   code is sent back to the client. In response, the <see cref="System.Web.Services.Protocols.WebClientProtocol"/> class
   returns authentication credentials to the Web server. If the client is
   authenticated and subsequently authorized to access the XML Web service, the XML
   Web service method is executed; otherwise the client is denied access.</para>
		</remarks>
		<seealso cref="P:System.Net.HttpWebRequest.PreAuthenticate"/>
	</doc><doc for="WebClientProtocol.RequestEncoding">
		<summary>
			<para>The <see cref="System.Text.Encoding"/> used to make the client request to the XML Web service.</para>
		</summary>
		<value>
			<para>The character encoding for the client request. The default is
   <see langword="null"/>, which uses the default 
      encoding for the underlying transport and protocol. </para>
		</value>
		<remarks>
			<para>The <see cref="System.Web.Services.Protocols.WebClientProtocol.RequestEncoding"/> determines the
   encoding for the request message. The
<see cref="System.Net.WebRequest.ContentType"/> of the request will be annotated with the 
   encoding value.</para>
			<para>Classes deriving from <see cref="System.Web.Services.Protocols.WebClientProtocol"/>support a particular protocol,
such as <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/> does for SOAP, set this property
to conform to encoding requirements for the specific protocol. For
example, the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>
sets the default encoding to UTF-8.</para>
		</remarks>
		<example>
			<para>The following example is an ASP.NET Web Form, which calls an XML Web service named
      <c>Math</c>. Within the <c>EnterBtn_Click</c> function, the Web
      Form explicitly sets RequestEncoding to UTF-8.</para>
			<codelink SampleID="Classic WebClientProtocol.RequestEncoding Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Text.Encoding"/>
		<seealso cref="System.Net.WebRequest.ContentType"/>
		<seealso cref="System.Net.WebRequest"/>
	</doc><doc for="WebClientProtocol.Abort">
		<summary>
			<para>Cancels a request to an XML Web service method.</para>
		</summary>
		<returns>
			<para><see cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/> cancels a 
   synchronous XML Web service request. Since a synchronous request will block the
   thread until the response has been processed you must call <see cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/> from a separate thread.
   Calling <see cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/> will cause a <see cref="System.Net.WebException"/> to be
   thrown from the XML Web service method call. The <see cref="System.Net.WebException.Status" qualify="true"/> property will have the value <see cref="System.Net.WebExceptionStatus.RequestCanceled" qualify="true"/>. To abort an asynchronous call, you need to cast the
<see cref="System.IAsyncResult"/> 
returned from the <see langword="Begin"/> method to a <see cref="System.Web.Services.Protocols.WebClientAsyncResult"/> and call the <see cref="System.Web.Services.Protocols.WebClientAsyncResult.Abort" qualify="true"/> method.</para>
		</returns>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.GetWebRequest"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Net.WebRequest.Abort"/>
		<seealso cref="System.Web.Services.Protocols.WebClientAsyncResult"/>
	</doc><doc for="WebClientProtocol.GetWebResponse">
		<overload>
			<para>Returns a response from a request to an XML Web service 
      method. This protected method is called by the XML Web service client
      infrastructure to get the response from a synchronous XML Web service request.</para>
		</overload>
		<summary>
			<para> Returns a response from a synchronous request to an XML Web service method.</para>
		</summary>
		<param name="request">The <see cref="System.Net.WebRequest"/> to get the response from. </param>
		<returns>
			<para> A <see cref="System.Net.WebResponse"/> .
   </para>
		</returns>
		<exception cref="System.Net.WebException">If <see cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/> is invoked prior to calling <see cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/>.</exception>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.GetWebRequest"/>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/>
	</doc><doc for="HttpWebClientProtocol.AllowAutoRedirect">
		<summary>
			<para> Gets or sets whether the client automatically follows server redirects.</para>
		</summary>
		<value>
			<para><see langword="true"/> to
   automatically redirect the client to follow server
   redirects; otherwise, <see langword="false"/>. The default is <see langword="false"/>.
   </para>
		</value>
		<exception cref="System.Net.WebException">The <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect"/> property is <see langword="false"/> and the Web server attempts to redirect the request.</exception>
		<remarks>
			<para> If a client sends authentication information, such
      as a user name and password, you do not want to enable the server
      to redirect, because this can compromise security.</para>
			<para>An <see cref="System.Net.WebException"/> is thrown if the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect"/> property is 
<see langword="false"/> and the Web server attempts to redirect 
   the request. The <see cref="System.Net.WebException.Response"/> property contains an <see cref="System.Net.HttpWebResponse"/>
   object, where both the <see cref="System.Net.HttpWebResponse.StatusCode"/> and <see cref="System.Net.HttpWebResponse.Headers"/> properties will reflect details regarding the
   attempted redirect. The <see cref="System.Net.HttpWebResponse.StatusCode"/> property will contain an <see cref="System.Net.HttpStatusCode"/>
   equivalent to one the HTTP redirect status codes (301, 302, and 307) and
   the <see langword="Location"/> header within the <see cref="System.Net.HttpWebResponse.Headers"/> collection will point to the URI that the request
   was attempted to be redirected to.</para>
		</remarks>
		<seealso cref="P:System.Net.HttpWebRequest.AllowAutoRedirect"/>
	</doc><doc for="WebClientProtocol">
		<summary>
			<para> Specifies the base class for all
      XML Web service client proxies created using ASP.NET.</para>
		</summary>
		<threadsafe>
			<para>The properties on this class are copied into a new
      instance of a <see cref="System.Net.WebRequest"/> object for each XML Web service method call. While
      you can call XML Web service methods on the same <see cref="System.Web.Services.Protocols.WebClientProtocol"/> instance from different threads
      at the same time, there is no synchronization done to ensure that a consistent
      snapshot of the properties will get transferred to the <see cref="System.Net.WebRequest"/> object.
      Therefore if you need to modify the properties and make concurrent method calls
      from different threads you should use a different instance of the XML Web
      service proxy or provide your own synchronization.</para>
		</threadsafe>
		<remarks>
			<para> The properties of the <see cref="System.Web.Services.Protocols.WebClientProtocol"/> class are used to control the
   behavior of the transport used to transmit the XML Web service request and
   response. The properties on this class map to properties found on <see cref="System.Net.WebRequest"/>.
   Instances of classes deriving from <see cref="System.Net.WebRequest"/>, such as <see cref="System.Net.HttpWebRequest"/>, are
   used as the transport mechanism for XML Web services created using
   ASP.NET.</para>
To communicate with an XML Web service, you must create a proxy class deriving
indirectly or directly from <see cref="System.Web.Services.Protocols.WebClientProtocol"/> for
the XML Web service you want to call. Instead of creating the proxy class
manually, you can use the Wsdl.exe tool to create a proxy class for a given XML
Web service's service description. Since <see cref="System.Web.Services.Protocols.WebClientProtocol"/>

is the base
class for your client proxy, you will find its properties on your proxy
classes. These properties are useful for controlling the request behavior of the underlying
transport. For instance, use the <see cref="System.Web.Services.Protocols.WebClientProtocol.Credentials"/> property for
calling authenticated XML Web services. Many of the <see cref="System.Web.Services.Protocols.WebClientProtocol"/>
properties are used to
initialize the <see cref="System.Net.WebRequest"/>
object that is used to make the Web
request.
</remarks>
		<example>
			<para>The following example is an ASP.NET Web Form, which
      calls an XML Web service named <c>Math</c>. Within the <c>EnterBtn_Click</c> function, the Web
   Form sets proxy information and client credentials on the proxy class prior to
   calling the remote XML Web service method.</para>
			<codelink SampleID="Classic WebClientProtocol Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>
		<seealso cref="T:System.Net.HttpWebRequest"/>
	</doc><doc for="HttpWebClientProtocol">
		<summary>
			<para> The base class for all XML Web service client proxies that use the HTTP transport
      protocol.</para>
		</summary>
		<threadsafe>
			<para>The properties on this class are copied into a new
      instance of a <see cref="System.Net.WebRequest"/> object for each XML Web service method call. While
      you can call XML Web service methods on the same <see cref="System.Web.Services.Protocols.WebClientProtocol"/> instance from different threads
      at the same time, there is no synchronization done to ensure that a consistent
      snapshot of the properties will get transferred to the <see cref="System.Net.WebRequest"/> object.
      Therefore, if you need to modify the properties and make concurrent method calls
      from different threads you should use a different instance of the XML Web
      service proxy or provide your own synchronization.</para>
		</threadsafe>
		<remarks>
			<para> The properties on this class are used to control the
      behavior of the HTTP request object used to transmit the XML Web service request
      and response. The properties map to properties found on <see cref="System.Net.HttpWebRequest"/>
      . </para>
			<para> To communicate with an
      XML Web service using HTTP, you must create a proxy class deriving indirectly
      or directly from <see cref="System.Web.Services.Protocols.HttpWebClientProtocol"/> for
      the XML Web service. Instead of creating the proxy class manually, you can use
      the Wsdl.exe tool to create a proxy class
      for a given XML Web service's service description. </para>
			<para> Since HttpWebClientProtocol is the base class for all
      proxy classes, you will find its properties on your proxy classes. These
      properties are useful for controlling the request behavior of the underlying
      transport. For example, use the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.Proxy"/> property
      for calling XML Web services through a firewall. Many of these properties are
      used to initialize the <see cref="System.Net.HttpWebRequest"/> making the Web request.</para>
			<para><see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>, <see cref="System.Web.Services.Protocols.HttpGetClientProtocol"/>, and <see cref="System.Web.Services.Protocols.HttpPostClientProtocol"/> derive directly or indirectly
   from <see cref="System.Web.Services.Protocols.HttpWebClientProtocol"/> to provide support for SOAP,
   HTTP-GET and HTTP-POST respectively.</para>
		</remarks>
		<example>
			<para>The following example is an ASP.NET Web Form, which calls an XML Web service named
         <c>Math</c>. Within the <c>EnterBtn_Click</c> function, the Web
      Form allows the server to automatically redirect the client to other sites.
      It also sets client authentication credentials, proxy settings, the
      request encoding and the time out for the request before calling the XML Web service
      method.</para>
			<codelink SampleID="Classic HttpWebClientProtocol Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol"/>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>
		<seealso cref="System.Web.Services.Protocols.HttpGetClientProtocol"/>
		<seealso cref="System.Web.Services.Protocols.HttpPostClientProtocol"/>
	</doc><doc for="WebClientAsyncResult.AsyncWaitHandle">
		<summary>
			<para> Gets a <see cref="System.Threading.WaitHandle"/> that is used to wait for an
   asynchronous operation to complete.</para>
		</summary>
		<value>
			<para>A <see cref="System.Threading.WaitHandle"/> that is used to wait for an asynchronous
   operation to complete.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Threading.WaitHandle"/> can be used to perform a <see cref="System.Threading.WaitHandle.WaitOne"/>, <see cref="System.Threading.WaitHandle.WaitAny"/>, or
<see cref="System.Threading.WaitHandle.WaitAll"/> to wait for the asynchronous call to 
   complete.</para>
			<para>For more details, see <see cref="System.IAsyncResult.AsyncWaitHandle"/>.</para>
		</remarks>
		<seealso cref="System.IAsyncResult.AsyncWaitHandle"/>
	</doc><doc for="WebClientAsyncResult">
		<summary>
			<para> Provides an implementation of <see cref="System.IAsyncResult"/>
for use by XML Web service proxies to implement the standard asynchronous method pattern.</para>
		</summary>
		<remarks>
			<para>When you call the <c>BeginMyMethodName</c> method, where <c>MyMethodName</c> is the synchronous version of the method, on an XML Web service
   proxy class, an instance of the <see cref="System.Web.Services.Protocols.WebClientAsyncResult"/> is returned.
   Following the standard asynchronous design pattern, that instance of <see cref="System.Web.Services.Protocols.WebClientAsyncResult"/> must
   later be passed to <c>EndMyMethodName</c>

to complete the asynchronous method call.</para>
			<para>For details on calling XML Web services asynchronously,
   see <see topic="cpconInvokingWebServicesAsynchronously"/>
   
   .</para>
		</remarks>
		<seealso cref="System.IAsyncResult"/>
		<seealso topic="cpconInvokingWebServicesAsynchronously"/>
	</doc><doc for="WebClientAsyncResult.AsyncState">
		<summary>
			<para>Gets the object provided in the last parameter to the 
   <see langword="Begin"/> 
   method asynchronous call.</para>
		</summary>
		<value>
			<para>The <see cref="System.Object"/> provided in the 
   last parameter to the <see langword="Begin"/>
   method call.</para>
		</value>
		<seealso cref="System.IAsyncResult.AsyncState"/>
	</doc><doc for="WebClientAsyncResult.CompletedSynchronously">
		<summary>
			<para> Gets a value indicating
      whether the Begin call completed synchronously.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the Begin call completed synchronously; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If <see cref="System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously"/> is set to <see langword="true"/>
within the <see cref="System.AsyncCallback"/> delegate, it is probable that the thread that called
<see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> is the current thread. In this case, 
you should be careful about making another asynchronous Begin call from
the callback method, since it can cause the stack to grow without bound if the
calls continue to complete synchronously. Instead, the call should be completed
at the original call site, outside the callback method.</para>
		</remarks>
	</doc><doc for="WebClientAsyncResult.Abort">
		<summary>
			<para>Cancels an asynchronous XML Web service request.</para>
		</summary>
		<example>
			<para>The XML Web service request is canceled if the underlying transport supports the
   <see cref="System.Net.WebRequest.Abort" qualify="true"/> method. If the corresponding 
   <see langword="End"/> method is
      subsequently called after the <see cref="System.Web.Services.Protocols.WebClientAsyncResult.Abort"/> method, a
   <see cref="System.Net.WebException"/> is thrown, setting the
   <see cref="System.Net.WebException.Status"/> property to <see cref="System.Net.WebExceptionStatus.RequestCanceled"/>.</para>
		</example>
	</doc><doc for="HttpWebClientProtocol.CookieContainer">
		<summary>
			<para>Gets or sets the collection of cookies.</para>
		</summary>
		<value>
			<para>A <see cref="System.Net.CookieContainer"/> that represents the cookies for a Web
   Services client.</para>
		</value>
		<remarks>
   If an XML Web service method uses session state, then a
   cookie is passed back in the response headers to the XML Web service client that
   uniquely identifies the session for that XML Web service client. In order
   for an XML Web service to maintain session state for a client, the client must
   persist the cookie. Clients can receive the HTTP cookie by creating a new
   instance of <see cref="System.Net.CookieContainer"/> and assigning
   that to the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer"/> property of
   the proxy class before calling the XML Web service method. If you need to
   maintain session state beyond when the proxy class instance goes out of scope,
   the client must persist the HTTP cookie between calls to the XML Web service.
   For instance, a Web Forms client can persist the HTTP cookie by saving the
<see cref="System.Net.CookieContainer"/> in its own session 
   state. Because not all XML Web services use session state and thus clients
   are not always required to use the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer"/> property of
   a client proxy, the documentation for the XML Web service should state whether
   session state is used.
</remarks>
		<example>
			<para> The following code example is
      a Web Forms client of an XML Web service that uses session state. The client
      persists the HTTP cookie that uniquely identifies the session by storing it in
      the client's session state.</para>
			<codelink SampleID="HttpWebClientProtocol.CookieContainer" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.CookieContainer"/>
		<seealso cref="System.Web.Services.WebMethodAttribute.EnableSession"/>
	</doc>
	<doc for="HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing">
		<summary>
			<para>Gets or sets a value indicating whether connection sharing is 
      enabled when the client uses NTLM authentication to connect to the Web server
      hosting the XML Web service.</para>
		</summary>
		<value>
			<para><see langword="true"/> if connection sharing is enabled; otherwise, 
<see langword="false"/>. The default is <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This property sets the value of the 
   <see cref="System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing"/> property of the <see cref="System.Net.HttpWebRequest"/> used 
      to communicate with the Web server.</para>
		</remarks>
		<seealso cref="System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName"/>
	</doc>
	<doc for="WebClientProtocol.GetWebRequest">
		<summary>
			<para> Creates a <see cref="System.Net.WebRequest"/> instance for the specified
<paramref name="uri"/>. This protected method is called by the XML 
   Web service client infrastructure to get a new <see cref="System.Net.WebRequest"/> transport object to transmit the
   XML Web service request.</para>
		</summary>
		<param name="uri">The <see cref="System.Uri"/> to use when creating the <see cref="System.Net.WebRequest"/>. </param>
		<returns>
			<para> The <see cref="System.Net.WebRequest"/> instance.
   </para>
		</returns>
		<exception cref="System.InvalidOperationException">The <paramref name="uri"/> parameter is <see langword="null"/> .</exception>
		<remarks>
			<para>This method can be overridden to customize the <see cref="System.Net.WebRequest"/> object
   before the XML Web service request is made. For example you could add a custom
   header to the request. </para>
		</remarks>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/>
		<seealso cref="System.Net.HttpWebRequest"/>
		<seealso cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/>
	</doc>
	<doc for="HttpWebClientProtocol.ClientCertificates">
		<summary>
			<para> Gets the collection of client certificates.</para>
		</summary>
		<value>
			<para>An <see cref="System.Security.Cryptography.X509Certificates.X509CertificateCollection"/>
that represents the client certificates. </para>
		</value>
		<remarks>
			<para>This property allows a client to pass one or more client certificates, also known
      as Authenticode X.509 v.3 certificates, when calling an XML Web service method. If
      the XML Web service method has been configured to use client certificates, a
      client certificate can be used as one mechanism for authenticating a
      client. For details on setting up client certificates, see the Internet Information
      Services (IIS) documentation.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates how to load in a
      client certificate from a file and then add it to the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates"/> property for calling an XML Web
      service method that uses client certificates for authentication. </para>
			<codelink SampleID="HttpWebClientProtocol.ClientCertificates" SnippetID="1"/>
		</example>
		<seealso topic="cpconsecuringaspnetwebservices"/>
		<seealso cref="System.Security.Cryptography.X509Certificates.X509CertificateCollection"/>
	</doc>
	<doc for="WebClientProtocol.Credentials">
		<summary>
			<para> Gets or sets security credentials for XML Web
      service client authentication.</para>
		</summary>
		<value>
			<para>The <see cref="System.Net.ICredentials"/> for the
   XML Web service client.</para>
		</value>
		<remarks>
			<para>When using the <see langword="Credentials"/> property, a
   XML Web service client must instantiate a class implementing <see cref="System.Net.ICredentials"/>, such
   as <see cref="System.Net.NetworkCredential"/>, and then set the client
   credentials specific to the authentication mechanism. The <see cref="System.Net.NetworkCredential"/> class can be used to set authentication credentials using the basic, digest, NTLM
   and Kerberos authentication
   mechanisms.</para>
			<para>When the <see cref="System.Web.Services.Protocols.WebClientProtocol.Credentials"/> property is set
to <see cref="System.Net.CredentialCache.DefaultCredentials" qualify="true"/> then the client negotiates with the
server to do Kerberos and/or NTLM authentication depending on how the server is
configured.</para>
		</remarks>
		<example>
			<para>The following example is an ASP.NET Web Form, which calls an XML Web service
      named <c>Math</c>. Within the <c>EnterBtn_Click</c> function, the Web
   Form explicitly sets authentication credentials using the
<see langword="Credentials"/> property. The user name, password and domain
   are passed into the constructor for the <see cref="System.Net.NetworkCredential"/>
   class.</para>
			<codelink SampleID="Classic WebClientProtocol.Credentials Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Net.ICredentials"/>
		<seealso cref="System.Net.NetworkCredential"/>
	</doc>
	<doc for="WebClientProtocol.Timeout">
		<summary>
			<para> Indicates the time an XML Web service client waits for a synchronous XML Web service request to complete (in milliseconds).</para>
		</summary>
		<value>
			<para> The time out, in milliseconds, for synchronous calls to the XML Web service.
      The default is 100000 milliseconds.</para>
		</value>
		<remarks>
			<para>Setting the <see cref="System.Web.Services.Protocols.WebClientProtocol.Timeout"/> property to <see cref="System.Threading.Timeout.Infinite" qualify="true"/>indicates that the request does not time
   out. Even though an XML Web service client can set the <see cref="System.Web.Services.Protocols.WebClientProtocol.Timeout"/> property to
   not time out, the Web server can still cause the request to time out on the server
   side.</para>
		</remarks>
		<example>
			<para>The following example sets the <see langword="Timeout"/> value to 15000 (15 seconds) for the synchronous call to the <c>Add</c> XML Web
service method within the <c>Math</c> XML Web service.</para>
			<codelink SampleID="Classic WebClientProtocol.Timeout Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WebClientProtocol.GetWebResponse1">
		<summary>
			<para>Returns a response from an asynchronous request to an XML Web
      service method. This protected method is called by the XML Web service
      client infrastructure to get the response from an asynchronous XML Web
      service request.</para>
		</summary>
		<param name="request">The <see cref="System.Net.WebRequest"/> to get the response from. </param>
		<param name="result">The <see cref="System.IAsyncResult"/> to pass to <see cref="System.Net.HttpWebRequest.EndGetResponse"/> when the response has completed. </param>
		<returns>
			<para> The <see cref="System.Net.WebResponse"/> instance.
   </para>
		</returns>
		<exception cref="System.Net.WebException">If <see cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/> is invoked prior to calling <see cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/>.</exception>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.GetWebRequest"/>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.Abort"/>
	</doc>
	<doc for="WebClientProtocol.WebClientProtocol">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.Protocols.WebClientProtocol"/> class.</para>
		</summary>
		<example>
			<codelink SampleID="System.Web.Services.Protocols.WebClientProtocol constructor" SnippetID="1"/>
		</example>
	</doc>
	<doc for="HttpWebClientProtocol.UserAgent">
		<summary>
			<para> Gets or sets the value for the user agent header that is
      sent with each request.
      </para>
		</summary>
		<value>
			<para>The value of the HTTP protocol User-agent header. The
      default is "MS Web Services Client Protocol <paramref name="number"/>", where
   <paramref name="number"/>
   is the version
   of the common language runtime (for example, 1.0.3705.0).</para>
		</value>
		<remarks>
			<para> The user agent string allows a Web server to identify the client.
      </para>
		</remarks>
		<example>
			<codelink SampleID="HttpWebClientProtocol_UserAgent" SnippetID="1"/>
		</example>
		<seealso cref="P:System.Net.HttpWebRequest.UserAgent"/>
	</doc>
</docs>
