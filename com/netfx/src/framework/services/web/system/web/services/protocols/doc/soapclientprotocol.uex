<docs>
	<doc for="SoapHttpClientProtocol.SoapHttpClientProtocol">
		<summary>
			<para>
       Initializes a new instance of the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/> class.
    </para>
		</summary>
	</doc>
	<doc for="SoapHttpClientProtocol.InitializeAsyncRequest">
		<nodoc/>
		<summary>
			<para>Called prior to the request stream being obtained,
      allowing derived classes to add custom request headers to asynchronous requests.</para>
		</summary>
		<param name="request">The <see cref="System.Net.WebRequest"/> instance that will be used to make the request.</param>
		<param name=" internalAsyncState">The state object passed to <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> . </param>
		<remarks>
			<para>
				<see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> starts an
   asynchronous request to an XML Web service method, calling InitializeAsyncRequest prior to
   retrieving the request stream. InitializeAsyncRequest allows
   derived classes an opportunity to modify the <see cref="System.Net.WebRequest"/>, to add request headers. InitializeAsyncRequest is the last
   time request headers can be modified during an asynchronous request. </para>
			<para>A derived class can use the <paramref name="internalAsyncState"/> parameter to pass
custom state information along to the different stages of the
asynchronous request processing. </para>
		</remarks>
	</doc>
	<doc for="SoapHttpClientProtocol.WriteAsyncRequest">
		<nodoc/>
		<summary>
			<para>Called during an asynchronous request to an XML Web service,
      giving a derived class an opportunity to add additional data into the request
      stream asynchronously retrieved.</para>
		</summary>
		<param name="requestStream">The <see cref="System.IO.Stream"/> object to write the request data into.</param>
		<param name=" internalAsyncState">The <see cref="System.IAsyncResult"/> to pass to <see cref="System.Net.WebRequest.EndGetResponse"/> .</param>
		<remarks>
			<para>
				<see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>starts an
   asynchronous request to an XML Web service method, calling <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.WriteAsyncRequest"/>. An
   overridden <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.WriteAsyncRequest"/> in a derived
   class can add additional data into the request stream.</para>
			<para>The request headers for the <see cref="System.Net.WebRequest"/> cannot be modified during <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.WriteAsyncRequest"/>. To add
request headers, override InitializeAsyncRequest , where
you can modify the request headers.</para>
		</remarks>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>
		<seealso cref="System.IAsyncResult"/>
		<seealso cref="System.IO.Stream"/>
		<seealso cref="System.Net.WebRequest.EndGetResponse"/>
	</doc>
	<doc for="SoapHttpClientProtocol.GetWebRequest">
		<summary>
			<para>Creates a <see cref="System.Net.WebRequest"/> instance for the specified
<paramref name="url"/> .</para>
		</summary>
		<param name="uri">The <see cref="System.Uri"/> to use when creating the <see cref="System.Net.WebRequest"/>.</param>
		<returns>
			<para>The <see cref="System.Net.WebRequest"/> instance. </para>
		</returns>
		<exception cref="System.InvalidOperationException">The <paramref name="uri"/> parameter is <see langword="null"/> .</exception>
		<remarks>
			<para>This method can be overridden to customize the <see cref="System.Net.WebRequest"/> object
   before the XML Web service request is made. For example you could add a custom
   header to the request. </para>
		</remarks>
		<seealso cref="System.Net.WebRequest"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol.GetWebResponse"/>
		<seealso cref="System.Net.HttpWebRequest"/>
		<seealso cref="System.Uri"/>
	</doc><doc for="SoapHttpClientProtocol">
		<summary>
			<para> Specifies the class client proxies derive from when using SOAP.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> If you are
      building an XML Web service client, then a proxy class deriving indirectly or
      directly from <see cref="System.Web.Services.Protocols.WebClientProtocol"/> needs to be
      created for the XML Web service. When the XML Web service client is calling using SOAP, the
      proxy class must derive from <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>, which derives
      from <see cref="System.Web.Services.Protocols.HttpWebClientProtocol"/>. <see cref="System.Web.Services.Protocols.HttpWebClientProtocol"/> in turn derives from <see cref="System.Web.Services.Protocols.WebClientProtocol"/></para>
			<para> To communicate with an XML Web service, you must create
      a proxy class deriving indirectly or directly from <see cref="System.Web.Services.Protocols.WebClientProtocol"/> for
      the XML Web service you want to call. Instead of creating the proxy class
      manually, you
      can use the Wsdl.exe tool to create a proxy class for a given XML Web
      service's service description. When a proxy class is generated for the SOAP
      protocol, synchronous calls to XML Web service methods are made via <see cref="System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke"/>, whereas
      asynchronous calls are made via <see cref="System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke"/> and <see cref="System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke"/>.</para>
			<note type="inheritinfo">
      When
      you override this class, you can introduce methods in the
      derived class which are specific to a particular type of XML Web service. The methods
      simply capture the parameters, and call the base class to do the work of communicating
      with the XML Web service. If the introduced methods are asynchronous, call
   <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> and <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/>. If the introduced methods are
      synchronous, call <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke"/>. The overridden
      constructor typically sets the <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/> property to the Url of the XML Web service
      method.
      
   </note>
		</remarks>
		<example>
			<para>The following example is a proxy class generated by the Wsdl.exe utility for the
      <c>Math</c> XML Web service below. The
      proxy class derives from <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol"/>, which derives
      from the abstract <see cref="System.Web.Services.Protocols.WebClientProtocol"/> class.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol Example" SnippetID="1"/>



 The following example is the <c>Math</c> XML Web service, from which the above proxy class was
 generated.
<codelink SampleID="Classic SoapHttpClientProtocol Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.HttpSimpleClientProtocol"/>
	</doc><doc for="SoapHttpClientProtocol.Discover">
		<summary>
			<para>Dynamically binds to an XML Web service described in the
      discovery document at <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/> .</para>
		</summary>
		<exception cref="System.Exception">The binding defined in the proxy class could not be found in the discovery document at <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/> .</exception>
		<exception cref="System.Exception">The proxy class does not have a binding defined.</exception>
		<remarks>
			<para>An XML Web service client can dynamically bind to an XML Web
      service other than the one referenced in the proxy class using the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Discover"/> method.
      Typically, the <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/> property refers to the base
      address of the XML Web service, however prior to invoking the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Discover"/> method, set the <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/> property to a URL of a discovery
      document. Invoking the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Discover"/> method
      attempts
      to find
      a match in the discovery document to the binding defined in the proxy
      class and then dynamically bind to
      it. If successful, future method invocations are directed to the XML Web
      service described in the discovery document.</para>
			<para>If the proxy class is built using the Wsdl.exe utility,
      the proxy class defines the binding implemented by the XML Web service methods
      it invokes using the <see cref="System.Web.Services.WebServiceBindingAttribute"/>. When a
      XML Web service implements multiple bindings, the Wsdl.exe utility creates a proxy
      class for each binding. Applied to each proxy class is a <see cref="System.Web.Services.WebServiceBindingAttribute"/>
      defining the name of the binding and its namespace. The discovery document you
      set the <see cref="System.Web.Services.Protocols.WebClientProtocol.Url"/>
      
      property to must contain
      a reference to an XML Web service implementing the same binding name and
      namespace or an exception is thrown. </para>
		</remarks>
		<example>
			<para>The following example is a proxy class generated using
      the Wsdl.exe utility for the <c>Math</c> XML Web service. A <see cref="System.Web.Services.WebServiceBindingAttribute"/> is applied to the <c>Math</c> proxy class setting
   the binding name to <c>MathSoap</c> and its namespace to <c>http://tempuri.org/</c>.</para>
			<codelink SampleID="SoapHttpClientProtocol.Discover Example" SnippetID="1"/>
			<para> The following example is a Web 
Service client using the above proxy class. Within the <c>EnterBtn_Click</c> event of 
the Web Form, the XML Web service client calls the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Discover"/> method attempting to dynamically 
bind to the URL supplied by the user.</para>
			<codelink SampleID="SoapHttpClientProtocol.Discover Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.Services.WebServiceBindingAttribute"/>
		<seealso topic="cpconwebservicediscovery"/>
	</doc>
	<doc for="SoapHttpClientProtocol.Invoke">
		<summary>
			<para>Invokes an XML Web service method synchronously using SOAP.</para>
		</summary>
		<param name="methodName">The name of the XML Web service method.</param>
		<param name=" parameters">An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.</param>
		<returns>
			<para>An array of objects containing the return value and any by reference or out
      parameters of the derived class method.</para>
		</returns>
		<exception cref="System.Web.Services.Protocols.SoapException">The request reached the server computer, but was not processed successfully.</exception>
		<remarks>
			<para>Typically, you would not call the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke"/> method
   directly, unless you were building your own proxy class for an XML Web service.</para>
			<para>A proxy class generated by the Wsdl.exe utility for an XML Web
   service exposes the XML Web service methods as names off of the proxy class. The
   proxy class calls the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke"/> method to
   invoke an XML Web service method call. For example, if an XML Web service exposes an XML Web
   service method named <c>Add</c>, the proxy class also contains a method named
<c>Add</c>.
Within the code for the <c>Add</c> method in the proxy class, a synchronous call is
made to the XML Web service method through the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke"/>method<see langword=" "/>and then the results are coerced into the
expected return type for <c>Add</c>. </para>
			<para>The <paramref name="methodName"/> is used
to find the custom attributes which may have been added to the method, such as
<see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/>. <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/> provides additional information on the derived method which is required for
the SOAP protocol.</para>
		</remarks>
		<example>
			<para>The following example is a proxy class generated by the
      Wsdl.exe utility for the <c>Math</c> XML Web
   service below. Within the <c>Add</c>
method of the proxy class, the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke"/> method<see langword=" "/>is calling the <c>Add</c>
XML Web service method.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol.Invoke Example" SnippetID="1"/>
			<para>The following example is the <c>Math</c> XML Web service, from which the above proxy class was
created.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol.Invoke Example" SnippetID="2"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol"/>
	</doc>
	<doc for="SoapHttpClientProtocol.BeginInvoke">
		<summary>
			<para>Starts an asynchronous invocation of an XML Web service method using SOAP.</para>
		</summary>
		<param name="methodName">The name of the XML Web service method in the derived class that is invoking <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>.</param>
		<param name=" parameters">An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.</param>
		<param name=" callback">The delegate to call when the asynchronous invoke is complete. If <paramref name="callback"/> is <see langword="null"/>, the delegate is not called.</param>
		<param name=" asyncState">Extra information supplied by the caller.</param>
		<returns>
			<para>An <see cref="T:System.IAsyncResult"/> which is passed to <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/> to obtain the return values from
   the remote method call.</para>
		</returns>
		<exception cref="System.Web.Services.Protocols.SoapException">The request reached the server computer, but was not processed successfully.</exception>
		<remarks>
			<para>Typically, you would not call the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> method
   directly, unless you were building your own proxy class for an XML Web service.</para>
			<para> A proxy class generated by the Wsdl.exe utility from a Service Description exposes the XML Web
   service methods as names off of the proxy class for calling the XML Web service
   methods synchronously. For calling the XML Web service methods asynchronously, two
   additional methods are added to the proxy class for each XML Web service method:One
   with the <c>Begin</c> prefix added
to the name of the XML Web service method and one with the <c>End</c> prefix added.</para>
			<para>The proxy class calls the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> method to
start an asynchronous invocation call to the XML Web service method. For example, if
an XML Web service exposes an XML Web service method named <c>Add</c>, the proxy class contains a method named <c>BeginAdd</c>, for starting an
invocation to the XML Web service method. Within the code for the <c>BeginAdd</c> a call is made to <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/><see langword=" "/>and then the results are coerced into the expected return type for
<c>Add</c>.</para>
			<para>The <paramref name="methodName"/> is used to find the custom
attributes which may have been added to the method, such as <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/>. <see cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/> provides
additional information about the derived method which is required for the SOAP
protocol.</para>
			<paramref name="asyncState"/> is passed into <paramref name="callback"/> and is included in the
<see cref="T:System.IAsyncResult"/>
that is returned from <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>. The
<paramref name="asyncState"/> parameter can be used to pass information 
about the context of the asynchronous call to the delegate, specified in the
<paramref name="callback"/> parameter, handling the result.
</remarks>
		<example>
			<para>The following example is a proxy class generated by the Wsdl.exe utility for the
      <c>Math</c> XML Web service below.
      Within the <c>BeginAdd</c> method of
   the proxy class, the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/> method<see langword=" "/>is starting an asynchronous invocation to the <c>Add</c> XML Web service method.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol.BeginInvoke Example" SnippetID="1"/>
			<para>The following example is the <c>Math</c> XML Web service, from which the above proxy class
was created.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol.BeginInvoke Example" SnippetID="2"/>
		</example>
		<seealso cref="T:System.IAsyncResult"/>
		<seealso cref="System.AsyncCallback"/>
		<seealso cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/>
		<seealso cref="System.Web.Services.Protocols.SoapDocumentMethodAttribute"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol"/>
	</doc>
	<doc for="SoapHttpClientProtocol.EndInvoke">
		<summary>
			<para>Ends an asynchronous invocation of an XML Web service method using SOAP.</para>
		</summary>
		<param name="asyncResult">The <see cref="T:System.IAsyncResult"/> returned from <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>.</param>
		<returns>
			<para>An array of objects containing the return value and any by-reference or out
      parameters of the derived class method.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="asyncResult"/> is not the return value from <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>.</exception>
		<exception cref="System.Web.Services.Protocols.SoapException">The request reached the server computer, but was not processed successfully.</exception>
		<remarks>
			<para>Typically, you would not call the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/> method 
   directly, unless you were building your own proxy class for an XML Web
   service.</para>
			<para>A proxy class generated by the Wsdl.exe utility for an XML Web service exposes the XML Web
   service methods as names off of the proxy class for calling the XML Web service
   methods synchronously. For calling the XML Web service methods asynchronously, two
   additional methods are added to the proxy class for each XML Web service method:One
   with the <c>End</c> prefix added to
the name of the XML Web service method and one with the <c>End</c> prefix added.</para>
The proxy class calls the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/> method to
complete an asynchronous invocation call to the XML Web service method. For example,
if an XML Web service exposes an XML Web service method named <c>Add</c>, the proxy class contains a method named <c>EndAdd</c>, for completing an
asynchronous invocation of an XML Web service method. Within the code for the <c>EndAdd</c> a call is made to <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/><see langword=" "/>and then the results are coerced into the expected return type for
<c>Add</c>.
</remarks>
		<example>
			<para>The following example is a proxy class generated by the Wsdl.exe utility for the
      <c>Math</c> XML Web service below.
      Within the <c>EndAdd</c> method of
   the proxy class, the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke"/> method<see langword=" "/>is completing the asynchronous invocation to the <c>Add</c> XML Web service method.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol.EndInvoke Example" SnippetID="1"/>
			<para>The following example is the <c>Math</c> XML Web service, from which the above proxy class was
created.</para>
			<codelink SampleID="Classic SoapHttpClientProtocol.EndInvoke Example" SnippetID="2"/>
		</example>
		<seealso cref="System.IAsyncResult"/>
		<seealso cref="System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke"/>
		<seealso cref="System.Web.Services.Protocols.WebClientProtocol"/>
	</doc>
	<doc for="SoapHttpClientProtocol.SoapVersion">
		<summary>
			<para> Gets or sets the version of the SOAP protocol used to
      make the SOAP request to the XML Web service.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Web.Services.Protocols.SoapProtocolVersion"/> values. The default is <see cref="System.Web.Services.Protocols.SoapProtocolVersion.Soap11"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion"/> property is set in the proxy
   class generated by the Web Services Description Language tool (Wsdl.exe) to
<see cref="System.Web.Services.Protocols.SoapProtocolVersion.Soap11"/> by default 
   when a WSDL document
   for an XML Web service supports SOAP version 1.1.
   However, when an XML Web service only supports SOAP 1.2, Wsdl.exe
   sets the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion"/> property to
<see cref="System.Web.Services.Protocols.SoapProtocolVersion.Soap12"/>. To choose 
   the version of the SOAP protocol when generating the proxy class
   with Wsdl.exe, use the <see langword="/protocol"/> switch with the
<see langword="SOAP"/> or <see langword="SOAP12"/> 
settings to set the <see cref="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion"/> property to <see cref="System.Web.Services.Protocols.SoapProtocolVersion.Soap11"/> and <see cref="System.Web.Services.Protocols.SoapProtocolVersion.Soap12"/>, respectively.</para>
		</remarks>
		<example>
			<para>The following code example sets the version of the
      protocol used to communicate with an XML Web service to SOAP 1.2.</para>
			<codelink SampleID="SoapHttpClientProtocol.SoapVersion" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.SoapProtocolVersion"/>
		<seealso cref="System.Web.HttpContext.Items"/>
	</doc>
</docs>
