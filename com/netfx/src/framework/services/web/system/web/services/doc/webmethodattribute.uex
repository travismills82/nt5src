<docs>
	<doc for="WebMethodAttribute.CacheDuration">
		<summary>
			<para> Gets or sets the number of seconds the response should be held in the cache.</para>
		</summary>
		<value>
			<para>The number of seconds the response should be held in the cache. The
      default is 0, which means the response is not cached.</para>
		</value>
		<remarks>
			<para> When caching is enabled requests and responses are held
      in memory on the server for at least the cache duration so caution must be used
      if you expect requests or responses to be very large or you
      expect requests to vary widely.</para>
		</remarks>
		<example>
			<para>The following example places the result of the call to
      the <c>ServiceUsage</c> XML Web service method in the cache for 60 seconds. Any time
   an XML Web service client executes the <c>ServiceUsage</c> XML Web service method during
that time, the same result is returned.</para>
			<codelink SampleID="Classic WebMethodAttribute.CacheDuration Example" SnippetID="1"/>
		</example>
	</doc><doc for="WebMethodAttribute.Description">
		<summary>
			<para> A descriptive message describing the XML Web service method.</para>
		</summary>
		<value>
			<para>A descriptive message describing the XML Web service method.
      The default value is <see cref="System.String.Empty" qualify="true"/>
      . </para>
		</value>
		<remarks>
			<para>The descriptive message is displayed to prospective
      consumers of the XML Web service when description documents for
      the XML Web service are generated, such as the Service Description and the Service
      help page.</para>
		</remarks>
		<example>
			<para> In the example below, the string <c>Obtains the Server Computer Name</c> is used to describe the XML Web service method in
   the Service Description and Service help page for the XML Web service.</para>
			<codelink SampleID="Classic WebMethodAttribute.Description Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.WebMethodAttribute"/>
	</doc><doc for="WebMethodAttribute">
		<summary>
			<para> Adding this attribute to a method within an XML Web service created using ASP.NET makes the method callable from remote Web clients.
      This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Methods within a class that have this attribute set are called XML Web
      service methods. The method and class must be public and running inside an
      ASP.NET Web application.</para>
		</remarks>
		<example>
			<para>In the example below the method <c>GetMachineName</c> can be remotely
   called across the Web, because it has a <see cref="System.Web.Services.WebMethodAttribute"/>
   . <c>GetUserName</c> cannot be called
remotely, because it does not have a <see cref="System.Web.Services.WebMethodAttribute"/>, even though it is
<see langword="public"/> 
. </para>
			<codelink SampleID="Classic WebMethodAttribute Example" SnippetID="1"/>
		</example>
		<seealso cref="System.EnterpriseServices.TransactionOption"/>
		<seealso cref="System.Web.Services.WebService"/>
	</doc>
	<doc for="WebMethodAttribute.BufferResponse">
		<summary>
			<para> Gets or sets whether the response for this request is buffered.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the response for this request is buffered;
   otherwise, <see langword="false"/>. The default is <see langword="true"/>.</para>
		</value>
		<remarks>
			<para>Setting <see cref="System.Web.Services.WebMethodAttribute.BufferResponse"/> to
<see langword="true"/>, serializes the response of the XML Web service method 
   into a memory buffer until either the response is completely serialized or
   the buffer is full. Once the response is buffered, it is returned to the XML Web
   service client over the network. When <see cref="System.Web.Services.WebMethodAttribute.BufferResponse"/> is <see langword="false"/>, the response to
   the XML Web service method is sent back to the client as it is serialized. In
   general, you only want to set <see cref="System.Web.Services.WebMethodAttribute.BufferResponse"/> to <see langword="false"/>, if it is known
   that an XML Web service method returns large amounts of data to the client. For
   smaller amounts of data, XML Web service performance is better with <see cref="System.Web.Services.WebMethodAttribute.BufferResponse"/> to <see langword="true"/>
   .</para>
			<para>When <see cref="System.Web.Services.WebMethodAttribute.BufferResponse"/> is <see langword="false"/>,
SOAP extensions are disabled for the XML Web service method.</para>
		</remarks>
		<example>
			<para>The following code example sets the <see cref="System.Web.Services.WebMethodAttribute.BufferResponse"/> property to <see langword="false"/> and
   handles the streaming of a text file back to the client. The code example
   demonstrates how to stream a large piece of data back to the client using a
   class that implements the <see cref="System.Collections.IEnumerable"/> interface.</para>
			<codelink SampleID="Classic WebMethodAttribute.BufferResponse Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WebMethodAttribute.MessageName">
		<summary>
			<para> The name used for the XML Web service method in the data passed
      to and returned from an XML Web service method.</para>
		</summary>
		<value>
			<para>The name used for the XML Web service
      method in the data passed to and from an XML Web service method. The default is the
      name of the XML Web service method.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Web.Services.WebMethodAttribute.MessageName"/> property can be used to alias method or
   property names. The most common use of the <see cref="System.Web.Services.WebMethodAttribute.MessageName"/> property will be to uniquely identify
   polymorphic methods. By default, <see cref="System.Web.Services.WebMethodAttribute.MessageName"/> is set to the name of the XML Web service method.
   Therefore, if an XML Web service contains two or more XML Web service methods
   with the same name, you can uniquely identify the individual XML Web
   service methods by setting the <see cref="System.Web.Services.WebMethodAttribute.MessageName"/> to a name unique within the XML Web service,
   without changing the name of the actual method name in code.</para>
			<para>When data is passed to an XML Web service it is sent in a
   request and when it is returned it is sent in a response. Within the
   request and response, the name used for the XML Web service method is its <see cref="System.Web.Services.WebMethodAttribute.MessageName"/>
   property. </para>
			<para> The
   message name associated with an XML Web service method must be unique within
   the XML Web service. </para>
			<para>If a new XML Web serivce method with the same name but different
   parameters is added after clients are calling the original method,
   a different message name should be specified for the new method but
   the original message name should be left as is to ensure compatability
   with existing clients.</para>
		</remarks>
		<example>
			<para>In the example below, <see cref="System.Web.Services.WebMethodAttribute.MessageName"/>
is used to disambiguate the two <c>Add</c> methods.</para>
			<codelink SampleID="Classic WebMethodAttribute.MessageName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.WebMethodAttribute"/>
	</doc>
	<doc for="WebMethodAttribute.TransactionOption">
		<summary>
			<para> Indicates the transaction support of an XML Web service method. </para>
		</summary>
		<value>
			<para>The transaction support of an XML Web service method. The
      default is <see cref="System.EnterpriseServices.TransactionOption.Disabled"/>.</para>
		</value>
		<remarks>
			<para> XML Web service methods can only participate as the root object
      in a transaction, due to the stateless nature of the HTTP protocol. XML Web service
      methods can invoke COM objects that participate in the same transaction as the
      XML Web service method, if the COM object is marked to run within a transaction in
      the Component Services administrative tool. If an XML Web service method with a <see cref="System.Web.Services.WebMethodAttribute.TransactionOption"/> property of <see langword="Required"/> or
   <see langword="RequiresNew"/> invokes another XML Web service method with
      a <see cref="System.Web.Services.WebMethodAttribute.TransactionOption"/>
      property of <see langword="Required"/> or <see langword="RequiresNew"/>
      ,
      each XML Web service method participates in its own transaction, because
      an XML Web service method can only act as the root object in a
      transaction. </para>
			<list type="table">
				<listheader>
					<term>Item</term>
					<description>Description</description>
				</listheader>
				<item>
					<term> Disabled</term>
					<description>Indicates that the XML Web service method does not run within the scope of
            a transaction. When a request is processed, the XML Web service method is
            executed without a transaction.
            
            <para>[WebMethod(TransactionOption=
            <see langword="TransactionOption.Disabled"/> )] </para></description>
				</item>
				<item>
					<term> NotSupported</term>
					<description>
						<para> Indicates that the
                  XML Web service method does not run within the scope
                  of a transaction. When a request is processed, the XML Web
                  service method is executed without a transaction. </para>
						<para>[WebMethod(TransactionOption=
               <see langword="TransactionOption.NotSupported"/> )] </para></description>
				</item>
				<item>
					<term> Supported</term>
					<description>
						<para>Indicates that the XML Web service
                     method does not run within the scope of transactions. When a request is
                     processed, the XML Web service is created without a
                     transaction.</para>
						<para>[WebMethod(TransactionOption=
                  <see langword="TransactionOption.Supported"/> )] </para></description>
				</item>
				<item>
					<term> Required</term>
					<description>
						<para>Indicates that the XML Web service method requires a transaction. Since XML Web service
                        methods can only participate as the root object in a transaction, a new transaction will be created for the XML Web
                        service method. </para>
						<para>[WebMethod(TransactionOption=<see langword="TransactionOption.Required"/>)] </para></description>
				</item>
				<item>
					<term> RequiresNew</term>
					<description>Indicates that the XML Web service method requires a new
                     transaction. When a request is processed, the XML Web service is created
                     within a new transaction.
                     
                  <para>[WebMethod(TransactionOption=<see langword="TransactionOption.RequiresNew"/>)] </para></description>
				</item>
			</list>
			<para>If an exception is thrown from or not caught by an XML Web
               service method, the transaction is automatically aborted. If no exceptions occur
               the transaction is automatically committed unless the method explicitly calls
            <see langword="SetAbort"/>
            .</para>
		</remarks>
		<example>
			<para>The example below begins a new transaction when the
            <c>Transfer</c> method is
            called.</para>
			<codelink SampleID="Classic WebMethodAttribute.TransactionOption Example" SnippetID="1"/>
		</example>
		<seealso cref="System.EnterpriseServices.TransactionOption"/>
	</doc>
	<doc for="WebMethodAttribute.WebMethodAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Web.Services.WebMethodAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.WebMethodAttribute"/>
class.</para>
		</summary>
		<example>
			<codelink SampleID="WebMethodAttributeDefaultConstructor" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.WebMethodAttribute"/>
	</doc>
	<doc for="WebMethodAttribute.EnableSession">
		<summary>
			<para> Indicates whether session state is enabled for an XML Web service method.</para>
		</summary>
		<value>
			<see langword="true "/>if session
   state is enabled for an XML Web service method. The default is
<see langword="false."/>
		</value>
		<remarks>
			<para>In order to store session state in the ASP.NET <see cref="System.Web.SessionState.HttpSessionState"/> object, the
   XML Web service must inherit from <see cref="System.Web.Services.WebService"/> and a <see cref="System.Web.Services.WebMethodAttribute"/> applied to the XML Web service method, setting
   the <see cref="System.Web.Services.WebMethodAttribute.EnableSession"/> property to <see langword="true"/>
   . If session state is not needed for an XML Web service
   method, then disabling it may improve performance.</para>
			<para> An XML Web
   service client is uniquely identified by an HTTP cookie returned by an XML Web service. In order
   for an XML Web service to maintain session state for a client, the client must
   persist the cookie. Clients can receive the HTTP cookie by creating a new instance of <see cref="System.Net.CookieContainer"/>
   and assigning that to the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer"/> property of
   the proxy class before calling the XML Web service method. If you need to
   maintain session state beyond when the proxy class instance goes out of scope,
   the client must persist the HTTP cookie between calls to the XML Web
   service. For instance, a Web Forms client can persist the HTTP cookie
   by saving the <see cref="System.Net.CookieContainer"/>
   in its own session state. Because not all XML Web services
   use session state and thus clients are not always required to use the <see cref="System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer"/> property of a client proxy, the documentation for the XML Web service
   should state whether session state is used.</para>
		</remarks>
		<example>
			<para>The example below uses session state to determine how many
      times a particular session accesses the XML Web service method <c>SessionHitCounter</c>
   .</para>
			<codelink SampleID="Classic WebMethodAttribute.EnableSession Example" SnippetID="1"/>
			<para> The 
following code example is a Web Forms client of an XML Web service that uses session 
state. The client persists the HTTP cookie that uniquely identifies the session by storing it in 
the client's session state.</para>
			<codelink SampleID="HttpWebClientProtocol.CookieContainer" SnippetID="1"/>
		</example>
		<seealso cref="System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer"/>
	</doc>
	<doc for="WebMethodAttribute.WebMethodAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.WebMethodAttribute"/>
class.</para>
		</summary>
		<param name="enableSession">Initializes whether session state is enabled for the XML Web service method.</param>
		<example>
			<codelink SampleID="WebMethodAttributeConstructor_EnableSession" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WebMethodAttribute.WebMethodAttribute2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.WebMethodAttribute"/>
class.</para>
		</summary>
		<param name="enableSession">Initializes whether session state is enabled for the XML Web service method.</param>
		<param name=" transactionOption">Initializes the transaction support of an XML Web service method.</param>
		<example>
			<codelink SampleID="WebMethodAttributeConstructor_TransactionOption" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WebMethodAttribute.WebMethodAttribute3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.WebMethodAttribute"/>
class.</para>
		</summary>
		<param name="enableSession">Initializes whether session state is enabled for the XML Web service method.</param>
		<param name=" transactionOption">Initializes the transaction support of an XML Web service method.</param>
		<param name=" cacheDuration">Initializes the number of seconds the response is cached.</param>
		<example>
			<codelink SampleID="WebMethodAttributeConstructor_CacheDuration" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WebMethodAttribute.WebMethodAttribute4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Web.Services.WebMethodAttribute"/>
class.</para>
		</summary>
		<param name="enableSession">Initializes whether session state is enabled for the XML Web service method.</param>
		<param name="transactionOption">Initializes the transaction support of an XML Web service method.</param>
		<param name=" cacheDuration">Initializes the number of seconds the response is cached.</param>
		<param name=" bufferResponse">Initializes whether the response for this request is buffered.</param>
		<example>
			<codelink SampleID="WebMethodAttributeConstructor_BufferResponse" SnippetID="1"/>
		</example>
	</doc>
</docs>
