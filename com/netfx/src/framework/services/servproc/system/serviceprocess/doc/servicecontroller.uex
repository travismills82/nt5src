<docs>
	<doc for="ServiceController.ServiceController3">
		<summary>
 Used by the GetServices and GetDevices methods. Avoids duplicating work by the static
 methods and our own GenerateInfo().
 </summary>
	</doc>
	<doc for="ServiceController.ServiceController4">
		<summary>
 Used by the GetServicesInGroup method.
 </summary>
	</doc>
	<doc for="ServiceController.GetDataBaseHandle">
		<summary>
		</summary>
	</doc>
	<doc for="ServiceController.GetServiceHandle">
		<summary>
 Opens a handle for the current service. The handle must be closed with
 a call to NativeMethods.CloseServiceHandle().
 </summary>
	</doc>
	<doc for="ServiceController.GetServicesInGroup">
		<summary>
 Helper function for DependentServices.
 </summary>
	</doc>
	<doc for="ServiceController.GetServicesOfType">
		<summary>
 Helper function for GetDevices and GetServices.
 </summary>
	</doc>
	<doc for="ServiceController.MachineName">
		<summary>
			<para>Gets or sets the name of the computer on which this service resides.</para>
		</summary>
		<value>
			<para>The name of the computer that is running the service associated with this
   <see cref="System.ServiceProcess.ServiceController"/> instance. The default is the local
      computer (".").</para>
		</value>
		<exception cref="System.ArgumentException">The <see cref="System.ServiceProcess.ServiceController.MachineName"/> syntax is invalid.</exception>
		<remarks>
			<para>The computer name is the name of the server that is running this service, without the
      preceding backslash characters (\\). </para>
		</remarks>
	</doc><doc for="ServiceController.Close">
		<summary>
			<para>Disconnects this <see cref="System.ServiceProcess.ServiceController"/> instance from 
   the service and frees all the resources that the instance allocated.</para>
		</summary>
		<remarks>
			<para><see cref="System.ServiceProcess.ServiceController.Close"/> releases all the handles associated with the
<see cref="System.ServiceProcess.ServiceController"/> instance.</para>
		</remarks>
	</doc><doc for="ServiceController.Finalize">
		<nodoc/>
		<summary>
			<para>Frees the resources associated with this <see cref="System.ServiceProcess.ServiceController"/> instance.</para>
		</summary>
		<remarks>
			<para>The garbage collector calls the <see cref="System.ServiceProcess.ServiceController.Finalize"/> method
   to free all resources associated with the <see cref="System.ServiceProcess.ServiceController"/>. <see cref="System.ServiceProcess.ServiceController.Finalize"/> calls
   <c>base.Finalize</c> and <c>this.Close</c>.</para>
			<note type="inheritinfo">
      When overriding
   <see cref="System.ServiceProcess.ServiceController.Finalize"/> in a derived class, be
      sure to call the base class's <see cref="System.ServiceProcess.ServiceController.Finalize"/> method.
      
   </note>
		</remarks>
	</doc><doc for="ServiceController.Dispose1">
		<nodoc/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ServiceController.Dispose">
		<nodoc/>
		<summary>
			<para>Disposes of all the resources, other than memory, used by the
   <see cref="System.ServiceProcess.ServiceController"/> .</para>
		</summary>
		<remarks>
			<para>Call <see cref="System.ServiceProcess.ServiceController.Dispose"/> when you are finished
   using the <see cref="System.ServiceProcess.ServiceController"/>. The <see cref="System.ServiceProcess.ServiceController.Dispose"/> method
   leaves the <see cref="System.ServiceProcess.ServiceController"/> in an unusable state. After calling
<see cref="System.ServiceProcess.ServiceController.Dispose"/>, you must release all 
   references to the <see cref="System.ServiceProcess.ServiceController"/>
   so the memory it was occupying can be
   reclaimed by garbage collection.</para>
			<note type="note">
   Always call <see cref="System.ServiceProcess.ServiceController.Dispose"/> before you release your
   last reference to the <see cref="System.ServiceProcess.ServiceController"/>. Otherwise, the resources the <see cref="System.ServiceProcess.ServiceController"/> is using will not be freed until garbage
   collection calls the <see cref="System.ServiceProcess.ServiceController"/> object's destructor.
</note>
		</remarks>
	</doc><doc for="ServiceController">
		<summary>
			<para> Represents a Windows service and allows you to connect to a running or stopped
      service, manipulate it, or get information about it.</para>
		</summary>
		<remarks>
			<para>You can use the <see cref="System.ServiceProcess.ServiceController"/> class to connect to and
   control the behavior of existing services. When you create an instance of the
<see cref="System.ServiceProcess.ServiceController"/> 
class, you set its properties so it interacts with a
specific Windows service. You can then use the class to start, stop, and otherwise manipulate
the service.</para>
			<para>You will most likely use the <see cref="System.ServiceProcess.ServiceController"/> component in an administrative capacity.
For example, you could create a Windows or Web application that sends custom
commands to a service through the <see cref="System.ServiceProcess.ServiceController"/> instance.
This would be useful, because the Service Control Manager (SCM) Microsoft Management Console snapin does not
support custom commands. </para>
			<para>After you create an instance of <see cref="System.ServiceProcess.ServiceController"/> , you must set two
properties on it to identify the service with which it interacts: the computer
name and the name of the service you want to control. </para>
			<note type="note">
   By default, <see cref="System.ServiceProcess.ServiceController.MachineName"/>
   is set to the
   local computer, so you do not need to change it unless you want to set the
   instance to point to another computer.
   
</note>
			<para>Generally, the service author writes code that customizes the action
   associated with a specific command. For example, a service can contain code to
   respond to a <see cref="System.ServiceProcess.ServiceBase.OnPause" qualify="true"/> command. In that case, the custom
   processing for the <see cref="System.ServiceProcess.ServiceController.Pause"/> task runs before
   the system pauses the service.</para>
			<para> The set of commands a service can process depends on its
   properties; for example, you can set the <see cref="System.ServiceProcess.ServiceController.CanStop"/> property for a service
   to <see langword="false"/> . This setting renders the <see langword="Stop"/> command unavailable on that
   particular service; it prevents you from stopping the service from the SCM by
   disabling the necessary button. If you try to stop the service from
   your code, the system raises an error and displays the error
   message "Failed to stop <paramref name="servicename"/>
   
   ."</para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceBase"/>
		<seealso cref="System.ServiceProcess.ServiceControllerStatus"/>
		<seealso cref="System.ServiceProcess.ServiceType"/>
	</doc><doc for="ServiceController.Refresh">
		<summary>
			<para>Refreshes all the property values, setting them to the current values.</para>
		</summary>
		<remarks>
			<para><see cref="System.ServiceProcess.ServiceController.Refresh"/> sets the <see cref="System.ServiceProcess.ServiceController"/> properties back to their default values.
   The method also sets the <see cref="System.ServiceProcess.ServiceController.ServicesDependedOn"/> and <see cref="System.ServiceProcess.ServiceController.DependentServices"/> properties to <see langword="null"/> . </para>
		</remarks>
	</doc><doc for="ServiceController.ServiceController2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ServiceProcess.ServiceController"/> class that is associated with an existing service
   on the specified computer.</para>
		</summary>
		<param name="name">The short name that identifies the service to the system. </param>
		<param name="machineName">The computer on which the service resides. </param>
		<exception cref="System.ArgumentException"><para>The <paramref name="name"/> parameter is <see langword="null"/> or has length zero (0).</para>
			<para>-or-</para>
			<para>The <paramref name="machineName"/> parameter syntax is invalid.</para></exception>
		<remarks>
			<para>For the <paramref name="machineName"/> parameter, you can use "."
   to represent the local computer. </para>
		</remarks>
	</doc>
	<doc for="ServiceController.CanShutdown">
		<summary>
			<para> Gets a value indicating whether the service should be notified when the system is shutting down.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the service should be notified when the system is
   shutting down; otherwise, <see langword="false"/>.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
	</doc>
	<doc for="ServiceController.CanStop">
		<summary>
			<para> Gets a value indicating whether the service can be stopped after it has started.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the service can be stopped and the <see cref="System.ServiceProcess.ServiceBase.OnStop"/> method called; otherwise,
<see langword="false"/>.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
	</doc>
	<doc for="ServiceController.CanPauseAndContinue">
		<summary>
			<para> Gets a value indicating whether the service can be paused and resumed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the service can be paused; otherwise,
<see langword="false"/>.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
	</doc>
	<doc for="ServiceController.ServiceType">
		<summary>
			<para>Gets the type of service that this object references.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.ServiceProcess.ServiceType"/> values, used to indicate the network service
   type.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The service type indicates how the service is used by
      the system. The value of the <see cref="System.ServiceProcess.ServiceController.ServiceType"/> property represents a set of flags
      combined using the bitwise OR operator. </para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceType"/>
	</doc>
	<doc for="ServiceController.Continue">
		<summary>
			<para>Continues a service after it has been paused.</para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.InvalidOperationException">The service cannot be resumed.</exception>
		<remarks>
			<para>When you call <see cref="System.ServiceProcess.ServiceController.Continue"/> for a service, its
   status is first changed to <see langword="ContinuePending"/> and then, when the <see cref="System.ServiceProcess.ServiceController.Continue"/> method returns, it is
   changed to
<see langword="Running"/>. </para>
			<para>You cannot call <see cref="System.ServiceProcess.ServiceController.Continue"/> for the service until the
service controller status is <see langword="Paused"/>. </para>
		</remarks>
		<permission cref="System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="System.ServiceProcess.ServiceControllerPermissionAccess.Control" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<seealso cref="System.ServiceProcess.ServiceController.CanPauseAndContinue"/>
		<seealso cref="System.ServiceProcess.ServiceController.Pause"/>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.ExecuteCommand">
		<summary>
			<para>Executes a custom command on the service.</para>
		</summary>
		<param name="command">An application-defined command flag that indicates which custom command to execute. </param>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.InvalidOperationException">The service cannot handle the custom command.</exception>
		<remarks>
			<para>When you call <see cref="System.ServiceProcess.ServiceController.ExecuteCommand"/>, the status of
   the service does not change. If the service was started, the status remains
<see langword="Running"/>. If the service was stopped, the status 
   remains <see langword="Stopped"/>, and so on.</para>
		</remarks>
		<permission cref="System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="System.ServiceProcess.ServiceControllerPermissionAccess.Control" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
	</doc>
	<doc for="ServiceController.GetServices">
		<overload>
			<para>Retrieves the non-device driver services on a computer, and those that are not drivers.</para>
		</overload>
		<summary>
			<para>Retrieves all the services on the local computer, except for the device driver services.</para>
		</summary>
		<returns>
			<para>An array of type <see cref="System.ServiceProcess.ServiceController"/> in which each element
   is associated with a service on the local computer.</para>
		</returns>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para><see cref="System.ServiceProcess.ServiceController.GetServices"/> returns only the
   non-device driver services and the services that are not drivers from
   the local computer. To retrieve device driver services, call
   the <see cref="System.ServiceProcess.ServiceController.GetDevices"/> method. Together, the two methods
   provide access to all the services on a computer. </para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceController.GetDevices"/>
	</doc>
	<doc for="ServiceController.GetDevices1">
		<summary>
			<para>Retrieves the device driver services on the specified computer.</para>
		</summary>
		<param name="machineName"><para>The computer from which to retrieve the device driver services. </para></param>
		<returns>
			<para>An array of type <see cref="System.ServiceProcess.ServiceController"/> in which each element is associated
   with a device driver service on the specified computer.</para>
		</returns>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.ArgumentException">The <paramref name="machineName"/> parameter has invalid syntax.</exception>
		<remarks>
			<para><see cref="System.ServiceProcess.ServiceController.GetDevices"/> returns only the device
   driver services from the specified computer.
   To retrieve the non-device driver services or services that are not
   drivers, call the <see cref="System.ServiceProcess.ServiceController.GetServices"/> method. Together, the two methods
   provide access to all the services on a computer.</para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceController.GetServices"/>
	</doc>
	<doc for="ServiceController.GetServices1">
		<summary>
			<para>Retrieves all the services on the specified computer, except for the device driver services.</para>
		</summary>
		<param name="machineName"><para> The computer from which to retrieve the services. </para></param>
		<returns>
			<para>An array of type <see cref="System.ServiceProcess.ServiceController"/> in which each element
   is associated with a service on the specified computer.</para>
		</returns>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.ArgumentException">The <paramref name="machineName"/> parameter has invalid syntax.</exception>
		<remarks>
			<para><see cref="System.ServiceProcess.ServiceController.GetServices"/> returns only the
   non-device driver services and the services
   that are not drivers from the specified computer. To retrieve device
   driver services, call the <see cref="System.ServiceProcess.ServiceController.GetDevices"/> method. Together, the two methods
   provide access to all the services on a computer. </para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceController.GetDevices"/>
	</doc>
	<doc for="ServiceController.Pause">
		<summary>
			<para>Suspends a service's operation.</para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.InvalidOperationException">The service cannot be paused.</exception>
		<remarks>
			<para>You cannot call <see cref="System.ServiceProcess.ServiceController.Continue"/> for the service until
   the service controller status is <see langword="Paused"/>. </para>
		</remarks>
		<permission cref="System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="System.ServiceProcess.ServiceControllerPermissionAccess.Control" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<seealso cref="System.ServiceProcess.ServiceController.CanPauseAndContinue"/>
		<seealso cref="System.ServiceProcess.ServiceController.Continue"/>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.Start1">
		<summary>
			<para> Starts a service, passing the specified arguments.</para>
		</summary>
		<param name="args"> An array of arguments to pass to the service when it starts.</param>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.InvalidOperationException">The service cannot be started.</exception>
		<remarks>
			<para>You cannot call <see cref="System.ServiceProcess.ServiceController.Stop"/> for 
   the service until the service controller status is <see langword="Running"/>. </para>
		</remarks>
		<permission cref="System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="System.ServiceProcess.ServiceControllerPermissionAccess.Control" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<seealso cref="System.ServiceProcess.ServiceController.Stop"/>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.WaitForStatus">
		<overload>
			<para>Waits for the service to reach the specified status.</para>
		</overload>
		<summary>
			<para> Infinitely waits for the service to reach the specified status.</para>
		</summary>
		<param name="desiredStatus">The status to wait for.</param>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The <paramref name="desiredStatus"/> parameter is not any of the values defined in the <see cref="System.ServiceProcess.ServiceControllerStatus"/> enumeration.</exception>
		<remarks>
			<para> Use <see cref="System.ServiceProcess.ServiceController.WaitForStatus"/> to suspend an
   application's processing until the service has reached the required
   status.</para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.WaitForStatus1">
		<summary>
			<para>Waits for the service to reach the specified status or for the specified time-out
      to expire.</para>
		</summary>
		<param name="desiredStatus">The status to wait for.</param>
		<param name=" timeout">The amount of time to wait for the service to reach the specified status.</param>
		<exception cref="System.ComponentModel.InvalidEnumArgumentException">The <paramref name="desiredStatus"/> parameter is not any of the values defined in the <see cref="System.ServiceProcess.ServiceControllerStatus"/> enumeration.</exception>
		<exception cref="System.ServiceProcess.TimeoutException">The value specified for the <paramref name="timeout "/>parameter expires.</exception>
		<remarks>
			<para> Use <see cref="System.ServiceProcess.ServiceController.WaitForStatus"/> to suspend an
   application's processing until the service has reached the required
   status.</para>
		</remarks>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.ServiceController">
		<overload>
			<para>Initializes a new instance of the <see cref="System.ServiceProcess.ServiceController"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.ServiceProcess.ServiceController"/> class that is not associated with a specific service.</para>
		</summary>
		<example>
			<codelink SampleID="ServiceController" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ServiceController.ServiceName">
		<summary>
			<para> Gets or sets the name that identifies the service that this instance
      references.</para>
		</summary>
		<value>
			<para>The name that identifies the service that
      this <see cref="System.ServiceProcess.ServiceController"/> instance references. The default is an empty string ("").</para>
		</value>
		<exception cref="System.ArgumentNullException">The <see cref="System.ServiceProcess.ServiceController.ServiceName"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The syntax of the <see cref="System.ServiceProcess.ServiceController.ServiceName"/> property is invalid.</exception>
		<remarks>
			<para>The <see cref="System.ServiceProcess.ServiceController.ServiceName"/> identifies the service
   to the Service Control Manager. Changing this property causes the <see cref="System.ServiceProcess.ServiceController"/> instance to bind to another service, it
   does not change what the Service Control Manager's Microsoft Management Console snapin displays.</para>
			<para> When you
   are implementing a custom service, the value of this property must be identical to
   the name recorded for the service in the <see cref="System.ServiceProcess.ServiceInstaller.ServiceName"/> property of the
   corresponding <see cref="System.ServiceProcess.ServiceInstaller"/>
   class. In code, the <see cref="System.ServiceProcess.ServiceController.ServiceName"/> is
   usually set in the <c>main()</c>
function of the executable.</para>
			<para>When you reset the <see cref="System.ServiceProcess.ServiceController.ServiceName"/> property, the method
that sets the property sets this instance's <see cref="System.ServiceProcess.ServiceController.DisplayName"/> to an empty string ("").</para>
		</remarks>
		<example>
			<codelink SampleID="ServiceController" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ServiceController.Start">
		<overload>
			<para>Starts the service.</para>
		</overload>
		<summary>
			<para>Starts the service, passing no arguments.</para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.InvalidOperationException">The service cannot be started.</exception>
		<remarks>
			<para> You cannot call <see cref="System.ServiceProcess.ServiceController.Stop"/> for the service until the
   service controller status is <see langword="Running"/>. </para>
		</remarks>
		<permission cref="System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="System.ServiceProcess.ServiceControllerPermissionAccess.Control" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="ServiceController" SnippetID="1"/>
		</example>
		<seealso cref="System.ServiceProcess.ServiceController.Stop"/>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.ServiceController1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.ServiceProcess.ServiceController"/> class that is associated with an existing service on the
   local computer.</para>
		</summary>
		<param name="name">The short name that identifies the service to the system. </param>
		<exception cref="System.ArgumentException">The <paramref name="name"/> parameter is <see langword="null"/> or has length zero (0).</exception>
		<example>
			<codelink SampleID="ServiceController" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ServiceController.Status">
		<summary>
			<para> Gets the status of the service that
      is referenced by this instance.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.ServiceProcess.ServiceControllerStatus"/> values that indicates whether
   the service is running, stopped, or paused, or whether a start,
   stop, pause, or continue command is pending.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The status indicates the current state of the service. The set of possible values includes several that
      indicate whether a state-changing command is pending.</para>
		</remarks>
		<example>
			<codelink SampleID="ServiceController" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ServiceController.Stop">
		<summary>
			<para> Stops this service and any services that are dependent on
      this service.</para>
		</summary>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<exception cref="System.InvalidOperationException">The service cannot be stopped.</exception>
		<remarks>
			<para>If any services depend on this service for their operation,
      they will be stopped before this service is stopped. The <see cref="System.ServiceProcess.ServiceController.DependentServices"/> property contains
      the set of services that depend on this one.</para>
			<para>If you stop a service that this service depends on, call
      the <see cref="System.ServiceProcess.ServiceController.Stop"/> method on this service within the
   <see cref="System.ServiceProcess.ServiceController.Stop"/> method of the parent service. The
   <see cref="System.ServiceProcess.ServiceController.ServicesDependedOn"/>
   property contains the services that this service depends on.</para>
		</remarks>
		<permission cref="System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="System.ServiceProcess.ServiceControllerPermissionAccess.Control" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="System.Security.Permissions.PermissionState.Unrestricted" qualify="true"/></permission>
		<example>
			<codelink SampleID="ServiceController" SnippetID="2"/>
		</example>
		<seealso cref="System.ServiceProcess.ServiceController.CanStop"/>
		<seealso cref="System.ServiceProcess.ServiceController.Start"/>
		<seealso cref="System.ServiceProcess.ServiceController.Status"/>
	</doc>
	<doc for="ServiceController.DisplayName">
		<summary>
			<para> Gets or sets a friendly name for the service. </para>
		</summary>
		<value>
			<para>The friendly name of the service, which can
      be used to identify the service.</para>
		</value>
		<exception cref="System.ArgumentNullException">The <see cref="System.ServiceProcess.ServiceController.DisplayName"/> is <see langword="null"/>.</exception>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>You can set the <see cref="System.ServiceProcess.ServiceController.DisplayName"/> to an empty string (""),
   but setting the property to <see langword="null"/>
   throws an exception.</para>
		</remarks>
		<example>
			<codelink SampleID="ServiceController" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ServiceController.DependentServices">
		<summary>
			<para>Gets the set of services that depends on the service
      associated with this <see cref="System.ServiceProcess.ServiceController"/>
      instance.</para>
		</summary>
		<value>
			<para>An array of <see cref="System.ServiceProcess.ServiceController"/> instances, each of
   which is associated with a service that depends on this service.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>The <see cref="System.ServiceProcess.ServiceController.DependentServices"/>
array represents the services that the system stops if your
application calls <see cref="System.ServiceProcess.ServiceController.Stop"/> for this service. </para>
		</remarks>
		<example>
			<codelink SampleID="ServiceController" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ServiceController.ServicesDependedOn">
		<summary>
			<para>The set of services that this service depends on.</para>
		</summary>
		<value>
			<para>An array of <see cref="System.ServiceProcess.ServiceController"/> instances, each of which is associated
   with a service that must be running for this service to run.</para>
		</value>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para>If any service in the <see cref="System.ServiceProcess.ServiceController.ServicesDependedOn"/> array is not running, you will not be
   able to start this service.</para>
		</remarks>
		<example>
			<codelink SampleID="ServiceController" SnippetID="4"/>
		</example>
	</doc>
	<doc for="ServiceController.GetDevices">
		<overload>
			<para>Retrieves the device driver services on a computer.</para>
		</overload>
		<summary>
			<para>Retrieves the device driver services on the local computer.</para>
		</summary>
		<returns>
			<para>An array of type <see cref="System.ServiceProcess.ServiceController"/> in which each element is associated
   with a device driver service on the local computer.</para>
		</returns>
		<exception cref="System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
		<remarks>
			<para><see cref="System.ServiceProcess.ServiceController.GetDevices"/> returns only the device
   driver services from the local computer. To retrieve the non-device
   driver services or services that are not drivers, call
   the <see cref="System.ServiceProcess.ServiceController.GetServices"/> method. Together, the two methods
   provide access to all the services on a computer. </para>
		</remarks>
		<example>
			<codelink SampleID="ServiceController" SnippetID="5"/>
		</example>
		<seealso cref="System.ServiceProcess.ServiceController.GetServices"/>
	</doc>
</docs>
