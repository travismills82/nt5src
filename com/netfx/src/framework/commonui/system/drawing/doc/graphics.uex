<docs>
   <doc for="Graphics">
 <summary>
    <para>
       Encapsulates a GDI+ drawing surface.
    </para>
 </summary>
 <remarks>
    The <see cref='System.Drawing.Graphics'/> class
    provides methods for drawing objects to the display device. An instance of the
 <see cref='System.Drawing.Graphics'/> class is associated with a specific device 
    context.
 </remarks>
   </doc>
   <doc for="Graphics.DrawImageAbort">
 <summary>
    Represents the method that handles the
 <see langword='DrawImageAbort'/> event.
 </summary>
 <param name='callbackdata'>
    A pointer to a value that represents the reason the <see cref='System.Drawing.Graphics.DrawImage'/> operation was aborted.
 </param>
 <remarks>
    When you create
    a <see langword='DrawImageAbort'/> delegate, you identify the method that will handle
    the event. To associate the event with your event handler, add an instance of
    the delegate to the event. The event handler is called whenever the event
    occurs, unless you remove the delegate.
 </remarks>
   </doc>
   <doc for="Graphics.EnumerateMetafileProc">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.FromHdc">
 <overload>
    <para>
       Creates a new instance
       of the <see cref='System.Drawing.Graphics'/> class.
    </para>
 </overload>
 <summary>
    <para>
       Creates a new instance of the <see cref='System.Drawing.Graphics'/> class from the specified
       handle to a device context.
    </para>
 </summary>
 <param name='hdc'>
    The handle to a device context.
 </param>
 <returns>
    <para>
       The new <see cref='System.Drawing.Graphics'/>
       object that this method creates.
    </para>
 </returns>
 <remarks>
    <para>
       A device context is a structure that defines
       a set of graphic objects and their associated attributes, as well as the graphic
       modes that affect output.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FromHdcInternal">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.FromHdc1">
 <summary>
    <para>
       Creates a new instance of the <see cref='System.Drawing.Graphics'/>
       class from the
       specified handle to
       a device context and handle to a device.
    </para>
 </summary>
 <param name='hdc'>
    A handle to a device context.
 </param>
 <param name='hdevice'>
    A handle to a device.
 </param>
 <returns>
    <para>
       The <see cref='System.Drawing.Graphics'/> that this method creates.
    </para>
 </returns>
 <remarks>
    <para>
       A device context is a structure that defines a set of graphic objects and
       their associated attributes, as well as the graphic modes that affect
       output.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FromHwnd">
 <summary>
    Creates a new instance of the <see cref='System.Drawing.Graphics'/> class
    from a window handle.
 </summary>
 <param name='hwnd'>
    A handle to a window.
 </param>
 <returns>
    The new <see cref='System.Drawing.Graphics'/> that
    this method creates.
 </returns>
   </doc>
   <doc for="Graphics.FromHwndInternal">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.FromImage">
 <summary>
    Creates an instance of the <see cref='System.Drawing.Graphics'/> class
    from an existing <see cref='System.Drawing.Image'/>.
 </summary>
 <param name='image'>
    The <see cref='System.Drawing.Image'/> from which to create the new <see cref='System.Drawing.Graphics'/>.
 </param>
 <returns>
    The new <see cref='System.Drawing.Graphics'/> this method creates.
 </returns>
   </doc>
   <doc for="Graphics.GetHdc">
 <summary>
    Gets the handle for the device context
    associated with this <see cref='System.Drawing.Graphics'/>.
 </summary>
 <returns>
    The handle to the device context
    associated with this <see cref='System.Drawing.Graphics'/>.
 </returns>
   </doc>
   <doc for="Graphics.ReleaseHdc">
 <summary>
    <para>
       Releases the memory allocated for the handle to a device context.
    </para>
 </summary>
 <param name='hdc'>
    The handle to a device context to release.
 </param>
 <remarks>
    The device context is a structure that
    defines a set of graphic objects and their associated attributes, as well as the
    graphic modes that affect output.
 </remarks>
   </doc>
   <doc for="Graphics.ReleaseHdcInternal">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.Flush">
 <overload>
    <para>
       Forces execution of
       all operations currently on the stack.
    </para>
 </overload>
 <summary>
    <para>
       Forces immediate execution of all
       operations currently on the stack.
    </para>
 </summary>
 <remarks>
    <para>
       This method uses
    <see langword='Flush'/> as the <see cref='System.Drawing.Drawing2D.FlushIntention'/>. This causes the stack dump to be performed 
       immediately, without waiting for an existing operation to finish.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.Flush1">
 <summary>
    <para>
       Forces execution of all operations
       currently on the stack.
    </para>
 </summary>
 <param name='intention'>
    Specifies whether execution takes place immediately or waits for an existing operation to finish.
 </param>
 <remarks>
    <para>
       A value of <see langword='Flush'/>
       for the <paramref name="intention"/> parameter
       specifies that the execution of stack operations begins immidiately, while
       a value of Sync specifies that execution begins after an existing operation
       finishes.
    </para>
 </remarks>
 <seealso cref='System.Drawing.Drawing2D.FlushIntention'/>
   </doc>
   <doc for="Graphics.Dispose">
 <summary>
    Deletes this <see cref='System.Drawing.Graphics'/>, and
    frees the memory allocated for it.
 </summary>
   </doc>
   <doc for="Graphics.Finalize">
 <summary>
    Deletes this <see cref='System.Drawing.Graphics'/>, and
    frees the memory allocated for it.
 </summary>
   </doc>
   <doc for="Graphics.CompositingMode">
 <summary>
    <para>
       Gets or sets the <see cref='System.Drawing.Drawing2D.CompositingMode'/> associated with this <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <value>
    <para>
       The <see cref='System.Drawing.Drawing2D.CompositingMode'/> associated with this <see cref='System.Drawing.Graphics'/>.
    </para>
 </value>
 <remarks>
    <para>
       A <see cref='System.Drawing.Drawing2D.CompositingMode'/> determines whether pixels
       from a source image overwrite or are combined with background pixels.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.RenderingOrigin">
 <summary>
    <para>Indicates the origin of the drawing surface relative to
       the display surface.</para>
 </summary>
 <value>
    A <see cref='System.Drawing.Point'/> that
    represents the origin of the drawing surfsce relative to the display surface.
 </value>
   </doc>
   <doc for="Graphics.CompositingQuality">
 <summary>
    Indicates the rendering quality level of
    composited images.
 </summary>
 <value>
    A <see cref='System.Drawing.Drawing2D.CompositingQuality'/> that indicates the rendering quality
    level of compisited images.
 </value>
   </doc>
   <doc for="Graphics.TextRenderingHint">
 <summary>
    <para>
       Gets or sets the rendering mode for text associated with
       this <see cref='System.Drawing.Graphics'/>
       .
    </para>
 </summary>
 <value>
    <para>
       The <see cref='System.Drawing.Text.TextRenderingHint'/> associated with this <see cref='System.Drawing.Graphics'/>.
    </para>
 </value>
 <remarks>
    The <see cref='System.Drawing.Text.TextRenderingHint'/> specifies whether this
 <see cref='System.Drawing.Graphics'/> renders text with antialiasing.
 </remarks>
   </doc>
   <doc for="Graphics.TextContrast">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.SmoothingMode">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.PixelOffsetMode">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.InterpolationMode">
 <summary>
    <para>
       Gets or sets the interpolation mode associated with this
    <see cref='System.Drawing.Graphics'/> object.
    </para>
 </summary>
 <value>
    <para>
       The <see cref='System.Drawing.Drawing2D.InterpolationMode'/> associated with this <see cref='System.Drawing.Graphics'/>.
    </para>
 </value>
 <remarks>
    <para>
       The interpolation mode determines how
       intermediate values between two endpoints are calculated.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.Transform">
 <summary>
    Gets or sets the world transform
    for this <see cref='System.Drawing.Graphics'/>.
 </summary>
 <value>
    The <see cref='System.Drawing.Drawing2D.Matrix'/> that represents
    the world transform for this <see cref='System.Drawing.Graphics'/>.
 </value>
   </doc>
   <doc for="Graphics.ResetTransform">
 <summary>
    <para>Resets the world transform to identity.</para>
 </summary>
 <seealso cref='System.Drawing.Drawing2D.Matrix'/>
   </doc>
   <doc for="Graphics.MultiplyTransform">
 <overload>
    <para>
       Multiplies the <see cref='System.Drawing.Drawing2D.Matrix'/> that
       represents the world transform and the specified <see cref='System.Drawing.Drawing2D.Matrix'/>.
    </para>
 </overload>
 <summary>
    <para>
       Multiplies the <see cref='System.Drawing.Drawing2D.Matrix'/> that
       represents the world transform and <paramref name="matrix"/>.
    </para>
 </summary>
 <param name='matrix'>
    The 4x4 <see cref='System.Drawing.Drawing2D.Matrix'/> by which to multiply the world transform.
 </param>
 <remarks>
    <para>
       This method prepends <paramref name="matrix"/>, so
       that the result is <paramref name="matrix"/> x world transform.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.MultiplyTransform1">
 <summary>
    Multiplies the <see cref='System.Drawing.Drawing2D.Matrix'/> that
    represents the world transform and <paramref name="matrix"/>.
 </summary>
 <param name='matrix'>
    The 4x4 <see cref='System.Drawing.Drawing2D.Matrix'/> by which to multiply the world transform.
 </param>
 <param name='order'>
    The <see cref='System.Drawing.Drawing2D.MatrixOrder'/> that determines the order of the matrices in the multiplication.
 </param>
 <remarks>
    <para>
       A value of <see langword='Prepend'/> for <paramref name="order"/> specifies that the order of the multiplication
       is <paramref name="matrix"/> x world transform. A value of <see langword='Append'/> for
    <paramref name="order"/> specifies that the order of the multiplicaton is world transform 
       x <paramref name="matrix"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.TranslateTransform">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.TranslateTransform1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.ScaleTransform">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.ScaleTransform1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.RotateTransform">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.RotateTransform1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.PageUnit">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.PageScale">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DpiX">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DpiY">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.TransformPoints">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.TransformPoints1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.GetNearestColor">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawLine">
 <overload>
    <para>
       Draws a line.
    </para>
 </overload>
 <summary>
    <para>
       Draws a line connecting the two
       specified points.
    </para>
 </summary>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the line.
 </param>
 <param name='x1'>
    The x-coordinate of the first point.
 </param>
 <param name='y1'>
    The y-coordinate of the first point.
 </param>
 <param name='x2'>
    The x-coordinate of the second point.
 </param>
 <param name='y2'>
    The y-coordinate of the second point.
 </param>
 <remarks>
    This method draws a line connecting the two
    points specified by <paramref name="x1"/>, <paramref name="y1"/>, <paramref name="x2"/>, and <paramref name="y2"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawLine1">
 <summary>
    <para>
       Draws a line connecting the two
       specified points.
    </para>
 </summary>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the line.
 </param>
 <param name='pt1'>
    A PointF that represents the first point to connect.
 </param>
 <param name='pt2'>
    A PointF that represents the second point to connect.
 </param>
 <remarks>
    This method draws a line connecting
 <paramref name="pt1"/> to <paramref name="pt2"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawLines">
 <overload>
    <para>
       Draws a series of line
       segments that connect an array of points.
    </para>
 </overload>
 <summary>
    <para>
       Draws a series of line segments that
       connect an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the line segments.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points to connect.
 </param>
 <remarks>
    This method draws a series of
    lines connecting an array of endpoints. The first two points in the array
    specify the first line. Each additional point specifies the end of a line
    segment whose starting point is the ending point of the previous line segment.
 </remarks>
   </doc>
   <doc for="Graphics.DrawLine2">
 <summary>
    <para>
       Draws a line connecting the two
       specified points.
    </para>
 </summary>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the line.
 </param>
 <param name='x1'>
    The x-coordinate of the first point.
 </param>
 <param name='y1'>
    The y-coordinate of the first point.
 </param>
 <param name='x2'>
    The x-coordinate of the second point.
 </param>
 <param name='y2'>
    The y-coordinate of the second point.
 </param>
 <remarks>
    This method draws a line connecting the two
    points specified by <paramref name="x1"/>, <paramref name="y1"/>, <paramref name="x2"/>, and <paramref name="y2"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawLine3">
 <summary>
    <para>
       Draws a line connecting the two
       specified points.
    </para>
 </summary>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the line.
 </param>
 <param name='pt1'>
    A PointF that represents the first point to connect.
 </param>
 <param name='pt2'>
    A PointF that represents the second point to connect.
 </param>
 <remarks>
    This method draws a line connecting
 <paramref name="pt1"/> to <paramref name="pt2"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawLines1">
 <summary>
    <para>
       Draws a series of line segments that connect an array of
       points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the line segments.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points to connect.
 </param>
 <remarks>
    <para>
       This method draws a series of
       lines connecting an array of endpoints. The first two points in the array
       specify the first line. Each additional point specifies the end of a line
       segment whose starting point is the ending point of the previous line segment.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawArc">
 <overload>
    <para>
       Draws an arc
       from the specified ellipse.
    </para>
 </overload>
 <summary>
    <para>
       Draws an arc from the specified ellipse.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the arc.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the rectangular region that bounds the ellipse.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the rectangular region that bounds the ellipse.
 </param>
 <param name='width'>
    The width of the rectangular region that bounds the ellipse.
 </param>
 <param name='height'>
    The height of the rectangular region that bounds the ellipse.
 </param>
 <param name='startAngle'>
    The angle, measured counterclockwise from the x-axis, that describes the starting point of the arc.
 </param>
 <param name='sweepAngle'>
    The angle, measured counterclockwise from <paramref name="startAngle"/>, that describes the arc.
 </param>
 <remarks>
    <para>
       This method draws an arc. The arc is described by a
       portion of the perimeter of an ellipse. The ellipse is the ellipse bounded by
       the rectangle<see langword=' '/> described by <paramref name="x"/>, <paramref name="y"/>,
    <paramref name="width"/>, and <paramref name="height"/>. The arc is described by the portion of the 
       perimeter of the ellipse between <paramref name="startAngle"/> and <paramref name="sweepAngle"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawArc1">
 <summary>
    <para>
       Draws an arc from the specified
       ellipse.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the arc.
 </param>
 <param name='rect'>
    The <see cref='System.Drawing.RectangleF'/> that describes the bounds of the ellipse.
 </param>
 <param name='startAngle'>
    The angle, measured counterclockwise from the x-axis, that describes the starting point of the arc.
 </param>
 <param name='sweepAngle'>
    The angle, measured counterclockwise from <paramref name="startAngle"/>, that describes the arc.
 </param>
 <remarks>
    This method draws an arc. The arc is
    described by a portion of the perimeter of an ellipse. The ellipse is the
    ellipse bounded by the rectangle<see langword=' '/>described by <paramref name="rect"/>. The
    arc is described by the portion of the perimeter of the ellipse between
 <paramref name="startAngle"/> and <paramref name="sweepAngle"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawArc2">
 <summary>
    <para>
       Draws an arc from the specified ellipse.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the arc.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the rectangular region that bounds the ellipse.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the rectangular region that bounds the ellipse.
 </param>
 <param name='width'>
    The width of the rectangular region that bounds the ellipse.
 </param>
 <param name='height'>
    The height of the rectangular region that bounds the ellipse.
 </param>
 <param name='startAngle'>
    The angle, measured counterclockwise from the x-axis, that describes the starting point of the arc.
 </param>
 <param name='sweepAngle'>
    The angle, measured counterclockwise from <paramref name="startAngle"/>, that describes the arc.
 </param>
 <remarks>
    This method draws an arc. The arc is described by a portion of the perimeter
    of an ellipse. The ellipse is the ellipse bounded by the rectangle<see langword=' '/>described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>. The
    arc is described by the portion of the perimeter of the ellipse between
 <paramref name="startAngle"/> and <paramref name="sweepAngle"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawArc3">
 <summary>
    <para>
       Draws an arc from the specified ellipse.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the arc.
 </param>
 <param name='rect'>
    The <see cref='System.Drawing.RectangleF'/> that describes the bounds of the ellipse.
 </param>
 <param name='startAngle'>
    The angle, measured counterclockwise from the x-axis, that describes the starting point of the arc.
 </param>
 <param name='sweepAngle'>
    The angle, measured counterclockwise from <paramref name="startAngle"/>, that describes the arc.
 </param>
 <remarks>
    <para>
       This method draws an arc. The arc is described by a portion of the perimeter
       of an ellipse. The ellipse is the ellipse bounded by the rectangle<see langword=' '/>described by <paramref name="rect"/>. The arc is described by the portion of the
       perimeter of the ellipse between <paramref name="startAngle"/> and <paramref name="sweepAngle"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawBezier">
 <overload>
    <para>
       Draws a cubic bezier
       curve.
    </para>
 </overload>
 <summary>
    <para>
       Draws a cubic bezier curve defined by
       four ordered pairs that represent points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the curve.
 </param>
 <param name='x1'>
    The x-coordinate of the starting point of the curve.
 </param>
 <param name='y1'>
    The y-coordinate of the starting point of the curve.
 </param>
 <param name='x2'>
    The x-coordinate of the first control point of the curve.
 </param>
 <param name='y2'>
    The y-coordinate of the first control point of the curve.
 </param>
 <param name='x3'>
    The x-coordinate of the second control point of the curve.
 </param>
 <param name='y3'>
    The y-coordinate of the second control point of the curve.
 </param>
 <param name='x4'>
    The x-coordinate of the ending point of the curve.
 </param>
 <param name='y4'>
    The y-coordinate of the ending point of the curve.
 </param>
 <remarks>
    <para>
       The bezier curve is drawn from the first
       point to the fourth point, using the second and third points as control
       points that determine the shape of the curve.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawBezier1">
 <summary>
    <para>
       Draws a cubic bezier curve defined by
       four points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the curve.
 </param>
 <param name='pt1'>
    A <see cref='System.Drawing.PointF'/> that represents the starting point of the curve.
 </param>
 <param name='pt2'>
    A <see cref='System.Drawing.PointF'/> that represents the first control point for the curve.
 </param>
 <param name='pt3'>
    A <see cref='System.Drawing.PointF'/> that represents the second control point for the curve.
 </param>
 <param name='pt4'>
    A <see cref='System.Drawing.PointF'/> that represents the ending point of the curve.
 </param>
 <remarks>
    The bezier curve is drawn from the first
    point to the fourth point, using the second and third points as control points
    that determine the shape of the curve.
 </remarks>
   </doc>
   <doc for="Graphics.DrawBeziers">
 <overload>
    <para>
       Draws a series of cubic
       Bezier curves.
    </para>
 </overload>
 <summary>
    <para>
       Draws a series of cubic Bezier curves
       from an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that determine the curve.
 </param>
 <remarks>
    <para>
       The first curve is drawn from the first point to the fourth point in the
       point array using the second and third points as control points that determine the shape
       of the curve. Each subsequent curve needs exactly three more points: two
       more control points and an ending point. The ending point of the previous curve
       is used as the starting point for each additional curve.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawBezier2">
 <summary>
    <para>
       Draws a cubic bezier curve defined by four points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the curve.
 </param>
 <param name='pt1'>
    A <see cref='System.Drawing.Point'/> that represents the starting point of the curve.
 </param>
 <param name='pt2'>
    A <see cref='System.Drawing.Point'/> that represents the first control point for the curve.
 </param>
 <param name='pt3'>
    A <see cref='System.Drawing.Point'/> that represents the second control point for the curve.
 </param>
 <param name='pt4'>
    A <see cref='System.Drawing.Point'/> that represents the ending point of the curve.
 </param>
 <remarks>
    <para>
       The bezier curve is drawn from the first point to the fourth point, using the
       second and third points as control points that determine the shape of the
       curve.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawBeziers1">
 <summary>
    <para>
       Draws a series of cubic Bezier curves from an array of
       points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that determine the curve.
 </param>
 <remarks>
    <para>
       The first curve is drawn from the first point to the
       fourth point in the point array using the second and third points as control
       points that determine the shape of the curve. Each subsequent curve needs
       exactly three more points: two more control points and an ending point. The
       ending point of the previous curve is used as the starting point for each
       additional curve.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawRectangle">
 <overload>
    <para>
       Draws the outline of a rectangle.
    </para>
 </overload>
 <summary>
    <para>
       Draws the outline of a rectangle specified by
    <paramref name="rect"/>.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the rectangle.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the rectangle to draw.
 </param>
   </doc>
   <doc for="Graphics.DrawRectangle1">
 <summary>
    <para>
       Draws the outline of the specified
       rectangle.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the rectangle.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the rectangle to draw.
 </param>
 <param name='y'>
    The y-coordingate of the upper-left corner of the rectangle to draw.
 </param>
 <param name='width'>
    The width of the rectangle to draw.
 </param>
 <param name='height'>
    The height of the rectangle to draw.
 </param>
   </doc>
   <doc for="Graphics.DrawRectangles">
 <overload>
    <para>
       Draws the outlines of a
       series of rectangles.
    </para>
 </overload>
 <summary>
    <para>
       Draws the outlines of a series of
       rectangles.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outlines of the rectangles.
 </param>
 <param name='rects'>
    An array of <see cref='System.Drawing.RectangleF'/> objects that represent the rectangles to draw.
 </param>
   </doc>
   <doc for="Graphics.DrawRectangle2">
 <summary>
    <para>
       Draws the outline of the specified rectangle.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the rectangle.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the rectangle to draw.
 </param>
 <param name='y'>
    The y-coordingate of the upper-left corner of the rectangle to draw.
 </param>
 <param name='width'>
    The width of the rectangle to draw.
 </param>
 <param name='height'>
    The height of the rectangle to draw.
 </param>
   </doc>
   <doc for="Graphics.DrawRectangles1">
 <summary>
    <para>
       Draws the outlines of a series of rectangles.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outlines of the rectangles.
 </param>
 <param name='rects'>
    An array of <see cref='System.Drawing.Rectangle'/> objects that represent the rectangles to draw.
 </param>
   </doc>
   <doc for="Graphics.DrawEllipse">
 <overload>
    <para>
       Draws an ellipse.
    </para>
 </overload>
 <summary>
    <para>
       Draws the outline of an
       ellipse defined by a bounding rectangle.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the ellipse.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the rectangle that specifies the bounds of the ellipse to draw.
 </param>
 <remarks>
    <para>
       This method draws the outline of an
       ellipse. The ellipse is defined by the bounding rectangle <paramref name="rect"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawEllipse1">
 <summary>
    <para>
       Draws the outline of an
       ellipse defined by a bounding rectangle.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the ellipse.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse.
 </param>
 <remarks>
    This method draws the outline of an
    ellipse. The ellipse is defined by the bounding rectangle described by
 <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawEllipse2">
 <summary>
    <para>
       Draws the outline of an ellipse specified by a bounding
       rectangle.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the ellipse.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the rectangle that specifies the bounds of the ellipse to draw.
 </param>
 <remarks>
    This method draws the outline of an
    ellipse. The ellipse is defined by the bounding rectangle <paramref name="rect"/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawEllipse3">
 <summary>
    <para>
       Draws the outline of an ellipse defined by a bounding rectangle.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the ellipse.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse.
 </param>
 <remarks>
    <para>
       This method draws the outline of an ellipse. The ellipse is defined by the
       bounding rectangle described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and
    <paramref name="height"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPie">
 <overload>
    <para>
       Draws the outline of a
       pie section.
    </para>
 </overload>
 <summary>
    <para>
       Draws the outline of a pie section
       defined by an ellipse and two radial lines.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the pie section.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method draws the outline of a pie section defined
       by an arc of an ellipse and the two radial lines that intersect with the
       endpoints of the arc. The ellipse is defined by the bounding rectangle
    <paramref name="rect"/>. The pie section consists of the two radial lines defined by 
    <paramref name="startAngle"/> and <paramref name="sweepAngle"/> 
    , and the arc between the intersections of those radial lines with the outline
    of the ellipse.
 </para>
 <para>
    If <paramref name="sweepAngle"/> is greater than 360 degrees
    or less than -360 degrees, it is treated as if it were 360 degrees or
    -360 degrees, respectively.
 </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPie1">
 <summary>
    <para>
       Draws the outline of a pie section
       defined by an ellipse and two radial lines.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the pie section.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method draws the outline of a pie section defined by
       an arc of an ellipse and the two radial lines that intersect with the endpoints
       of the arc. The ellipse is defined by the bounding rectangle described by
    <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>. The pie section
       consists of the two radial lines defined by <paramref name="startAngle"/> and
    <paramref name="sweepAngle"/> , and the arc between the intersections of those radial lines 
       with the outline of the ellipse.
    </para>
    <para>
       If <paramref name="sweepAngle"/> is greater than 360 degrees or less than -360 degrees,
       it is treated as if it were 360 degrees or -360 degrees, respectively.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPie2">
 <summary>
    <para>
       Draws the outline of a pie section defined by an ellipse
       and two radial lines.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the pie section.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method draws the outline of a pie section defined
       by an arc of an ellipse and the two radial lines that intersect with the
       endpoints of the arc. The ellipse is defined by the bounding rectangle
    <paramref name="rect"/>. The pie section consists of the two radial lines defined by 
    <paramref name="startAngle"/> and <paramref name="sweepAngle"/>, and the arc between the 
       intersections of those radial lines with the outline of the ellipse.
    </para>
    <para>
       If <paramref name="sweepAngle"/> is greater than 360 degrees or
       less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees,
       respectively.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPie3">
 <summary>
    <para>
       Draws the outline of a pie section defined by an ellipse and two radial
       lines.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the outline of the pie section.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method draws the outline of a pie section defined by
       an arc of an ellipse and the two radial lines that intersect with the endpoints
       of the arc. The ellipse is defined by the bounding rectangle described by
    <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>. The pie section
       consists of the two radial lines defined by <paramref name="startAngle"/> and
    <paramref name="sweepAngle"/> , and the arc between the intersections of those radial lines 
       with the outline of the ellipse.
    </para>
    <para>
       If <paramref name="sweepAngle"/> is greater than 360 degrees or less than -360 degrees,
       it is treated as if it were 360 degrees or -360 degrees, respectively.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPolygon">
 <overload>
    Draws the outline of a
    polygon.
 </overload>
 <summary>
    Draws the outline of a polygon defined
    by an array of points.
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the polygon.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the polygon.
 </param>
 <remarks>
    <para>
       The first two points in the <paramref name="points"/> array specify the first side of
       the polygon. Each additional point specifies a new side whose vertices include
       the point and the previous point. In addition, if the last point and the first
       point do not coincide, they specify the last side of the polygon.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPolygon1">
 <summary>
    Draws the outline of a polygon defined
    by an array of points.
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the polygon.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the polygon.
 </param>
 <remarks>
    <para>
       The first two points in the <paramref name="points"/> array specify the first side of
       the polygon. Each additional point specifies a new side whose vertices include
       the point and the previous point. In addition, if the last point and the first
       point do not coincide, they specify the last side of the polygon.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawPath">
 <summary>
    <para>
       Draws the lines and curves defined by a
    <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and style of the path.
 </param>
 <param name='path'>
    The <see cref='System.Drawing.Drawing2D.GraphicsPath'/> to draw.
 </param>
 <remarks>
    <para>
       The current transform in the graphic context
       is applied to <paramref name="path"/> before it is drawn.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawCurve">
 <overload>
    <para>
       Draws a curve defined
       by an array of points.
    </para>
 </overload>
 <summary>
    <para>
       Draws a curve defined by an array of
       points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       This method draws a smooth curve that
       passes through each point in the <paramref name="points"/> array.
    </para>
    The <paramref name="points"/>
    array must contain a minimum of four elements.
 </remarks>
   </doc>
   <doc for="Graphics.DrawCurve1">
 <summary>
    <para>
       Draws a curve defined by an array of
       points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <param name='tension'>
    Specifies how tightly the curve bends through the points through which it passes.
 </param>
 <remarks>
    <para>
       This method draws a smooth curve that passes through each
       point in the <paramref name="points"/> array.
    </para>
    The <paramref name="points"/> array must contain a minimum of four elements.
    The <paramref name="tension"/>
    parameter determines the shape of the
    curve. <see cref='System.Drawing.Graphics.DrawCurve'/> with tension 0 is equivalent to the
    corresponding <see cref='System.Drawing.Graphics.DrawLines'/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawCurve2">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.DrawCurve3">
 <summary>
    <para>
       Draws a curve defined by an array of
       points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <param name='offset'>
    The offset from the first element in the points array to the starting point in the curve.
 </param>
 <param name='numberOfSegments'>
    The number of points after the starting point to include in the curve.
 </param>
 <param name='tension'>
    Specifies how tightly the curve bends through the points through which it passes.
 </param>
 <remarks>
    <para>
       This method draws a smooth curve that passes through each point in the
    <paramref name="points"/> array. 
    </para>
    <para>
       The <paramref name="points"/> array must contain a minimum of four elements.
    </para>
    <para>
       The value of <paramref name="offset"/> specifies the number of
       elements to skip in the <paramref name="points"/> array. The first element after the
       skipped elements represents the starting point of the curve.
    </para>
    <para>
       The value of <paramref name="numberOfSegments"/> specifies the
       number of points, after the starting point, the curve passes through. The value
       of <paramref name="numberOfSegments"/> must be at least 1. The value of
    <paramref name="numberOfSegments"/> plus the value of <paramref name="offset"/> must be less than 
       the number of elements in <paramref name="points"/> .
    </para>
    <para>
       The <paramref name="tension"/>
       parameter determines the shape of the curve. <see cref='System.Drawing.Graphics.DrawCurve'/> with tension 0 is equivalent to the
       corresponding <see cref='System.Drawing.Graphics.DrawLines'/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawCurve4">
 <summary>
    <para>
       Draws a curve defined by an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       This method draws a smooth curve that passes through each point in the
    <paramref name="points"/> array. 
    </para>
    The <paramref name="points"/> array must contain a minimum of four
    elements.
 </remarks>
   </doc>
   <doc for="Graphics.DrawCurve5">
 <summary>
    <para>
       Draws a curve defined by an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <param name='tension'>
    Specifies how tightly the curve bends through the points through which it passes.
 </param>
 <remarks>
    <para>
       This method draws a smooth curve that passes through each point in the
    <paramref name="points"/> array. 
    </para>
    The <paramref name="points"/> array must contain a minimum of four elements.
    The <paramref name="tension"/>
    parameter determines the shape of the curve. <see cref='System.Drawing.Graphics.DrawCurve'/> with tension 0 is equivalent to the
    corresponding <see cref='System.Drawing.Graphics.DrawLines'/>.
 </remarks>
   </doc>
   <doc for="Graphics.DrawCurve6">
 <summary>
    <para>
       Draws a curve defined by an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <param name='offset'>
    The offset from the first element in the points array to the starting point in the curve.
 </param>
 <param name='numberOfSegments'>
    The number of points after the starting point to include in the curve.
 </param>
 <param name='tension'>
    Specifies how tightly the curve bends through the points through which it passes.
 </param>
 <remarks>
    <para>
       This method draws a smooth curve that passes through each point in the
    <paramref name="points"/> array. 
    </para>
    <para>
       The <paramref name="points"/> array must contain a minimum of four elements.
    </para>
    <para>
       The value of <paramref name="offset"/> specifies the number of elements to skip in the
    <paramref name="points"/> array. The first element after the skipped elements represents the 
       starting point of the curve.
    </para>
    <para>
       The value of <paramref name="numberOfSegments"/> specifies the number of points, after
       the starting point, the curve passes through. The value of
    <paramref name="numberOfSegments"/> must be at least 1. The value of <paramref name="numberOfSegments"/> 
    plus the value of <paramref name="offset"/> must be less than the number of elements in
 <paramref name="points"/> . 
 </para>
 <para>
    The <paramref name="tension"/>
    parameter determines the shape of the curve. <see cref='System.Drawing.Graphics.DrawCurve'/> with tension 0 is equivalent to the
    corresponding <see cref='System.Drawing.Graphics.DrawLines'/>.
 </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawClosedCurve">
 <overload>
    <para>
       Draws a closed curve
       defined by an array of points.
    </para>
 </overload>
 <summary>
    <para>
       Draws a closed curve defined by an
       array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points through which the curve passes.
 </param>
 <remarks>
    <para>
       This method draws a smooth closed curve that passes through each point in
       the <paramref name="points"/> array. If the last
       point in <paramref name="points"/> does not match the first point, then the curve is
       closed by connecting the last point to the first point.
    </para>
    <para>
       The points array must contain at least 4 elements.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawClosedCurve1">
 <summary>
    <para>
       Draws a closed curve defined by an
       array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points through which the curve passes.
 </param>
 <param name='tension'>
    Specifies how tightly the curve bends through the points through which it passes.
 </param>
 <param name='fillmode'>
    A <see cref='System.Drawing.Drawing2D.FillMode'/> that determines the
 </param>
 <remarks>
    <para>
       This method draws a smooth closed curve that passes
       through each point in the <paramref name="points"/> array. If the last
       point in <paramref name="points"/> does not match the first point, then
       the curve is closed by connecting the last point to the first point.
    </para>
    <para>
       The <paramref name="tension"/> parameter determines the shape of the curve. If the
       value of <paramref name="tension"/> is 0, this method draws line segments to connect the
       points.
    </para>
    <para>
       The points array must contain at least 4 elements.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawClosedCurve2">
 <summary>
    <para>
       Draws a closed curve defined by an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points through which the curve passes.
 </param>
 <remarks>
    <para>
       This method draws a smooth closed curve that passes through each point in the
    <paramref name="points"/> array. If the last point in <paramref name="points"/> does not match the first 
       point, then the curve is closed by connecting the last point to the first point.
    </para>
    <para>
       The points array must contain at least 4 elements.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawClosedCurve3">
 <summary>
    <para>
       Draws a closed curve defined by an array of points.
    </para>
 </summary>
 <param name='pen'>
    A <see cref='System.Drawing.Pen'/> that determines the color, width, and height of the curve.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points through which the curve passes.
 </param>
 <param name='tension'>
    Specifies how tightly the curve bends through the points through which it passes.
 </param>
 <param name='fillmode'>
    A <see cref='System.Drawing.Drawing2D.FillMode'/> that determines the
 </param>
 <remarks>
    <para>
       This method draws a smooth closed curve that passes through each point in the
    <paramref name="points"/> array. If the last point in <paramref name="points"/> does not match the first 
       point, then the curve is closed by connecting the last point to the first point.
    </para>
    <para>
       The <paramref name="tension"/> parameter determines the shape of the curve. If the value
       of <paramref name="tension"/> is 0, this method draws line segments to connect the points.
    </para>
    <para>
       The points array must contain at least 4 elements.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.Clear">
 <summary>
    Fills the entire drawing surface with the
    specified color.
 </summary>
 <param name='color'>
    The color to paint the drawing surface.
 </param>
   </doc>
   <doc for="Graphics.FillRectangle">
 <overload>
    <para>
       Fills the interior of a rectangle with
       a <see cref='System.Drawing.Brush'/>.
    </para>
 </overload>
 <summary>
    <para>
       Fills the interior of a rectangle with a <see cref='System.Drawing.Brush'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the rectangle to fill.
 </param>
 <remarks>
    This method fills the interior of the rectangle
    represented by <paramref name="rect"/> with the pattern defined by <paramref name="brush"/>.
 </remarks>
   </doc>
   <doc for="Graphics.FillRectangle1">
 <summary>
    <para>
       Fills the interior of a rectangle with a
    <see cref='System.Drawing.Brush'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the rectangle to fill.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the rectangle to fill.
 </param>
 <param name='width'>
    The width of the rectangle to fill.
 </param>
 <param name='height'>
    The height of the rectangle to fill.
 </param>
 <remarks>
    <para>
       This method fills the interior of the
       rectangle defined by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>
       with the pattern defined by <paramref name="brush"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillRectangles">
 <overload>
    <para>
       Fills the interiors of
       a series of rectangles with a <see cref='System.Drawing.Brush'/>.
    </para>
 </overload>
 <summary>
    <para>
       Fills the interiors of a series of
       rectangles with a <see cref='System.Drawing.Brush'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rects'>
    An array of <see cref='System.Drawing.RectangleF'/> objects that represent the rectangles to fill.
 </param>
 <remarks>
    <para>
       This method fills the interiors of the
       rectangles represented by <paramref name="rects"/> with the pattern defined by <paramref name="brush"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillRectangle2">
 <summary>
    <para>
       Fills the interior of a rectangle with a <see cref='System.Drawing.Brush'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the rectangle to fill.
 </param>
 <remarks>
    <para>
       This method fills the interior of the rectangle represented by <paramref name="rect"/>
       with the pattern defined by <paramref name="brush"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillRectangle3">
 <summary>
    <para>
       Fills the interior of a rectangle with a <see cref='System.Drawing.Brush'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the rectangle to fill.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the rectangle to fill.
 </param>
 <param name='width'>
    The width of the rectangle to fill.
 </param>
 <param name='height'>
    The height of the rectangle to fill.
 </param>
 <remarks>
    <para>
       This method fills the interior of the rectangle defined by <paramref name="x"/>,
    <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> with the pattern defined by 
    <paramref name="brush"/>. 
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillRectangles1">
 <summary>
    <para>
       Fills the interiors of a series of rectangles with a <see cref='System.Drawing.Brush'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rects'>
    An array of <see cref='System.Drawing.Rectangle'/> objects that represent the rectangles to fill.
 </param>
 <remarks>
    <para>
       This method fills the interiors of the rectangles represented by <paramref name="rects"/>
       with the pattern defined by <paramref name="brush"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillPolygon">
 <overload>
    <para>
       Fills the interior of
       a polygon defined by an array of points.
    </para>
 </overload>
 <summary>
    <para>
       Fills the interior of a polygon defined
       by an array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the vertices of the polygon to fill.
 </param>
 <remarks>
    <para>
       The first two points in the <paramref name="points"/> array specify
       the
       first side of the polygon. Each additional point
       specifies a new side whose vertices include the point and the previous point. In addition, if the
       last point and the first point do not coincide, they specify the last side of
       the polygon.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillPolygon1">
 <summary>
    <para>
       Fills the interior of a polygon defined by an array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the vertices of the polygon to fill.
 </param>
 <param name='fillMode'>
    A FillMode that determines the style of the fill.
 </param>
 <remarks>
    The first two points in the <paramref name="points"/> array specify
    the first side of the polygon. Each additional point specifies a new side whose
    vertices include the point and the previous point. In addition, if the last
    point and the first point do not coincide, they specify the last side of the
    polygon.
 </remarks>
   </doc>
   <doc for="Graphics.FillPolygon2">
 <summary>
    <para>
       Fills the interior of a polygon defined by an array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the vertices of the polygon to fill.
 </param>
 <remarks>
    The first two points in the <paramref name="points"/> array specify
    the first side of the polygon. Each additional point specifies a new side whose
    vertices include the point and the previous point. In addition, if the last
    point and the first point do not coincide, they specify the last side of the
    polygon.
 </remarks>
   </doc>
   <doc for="Graphics.FillPolygon3">
 <summary>
    <para>
       Fills the interior of a polygon defined by an array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the vertices of the polygon to fill.
 </param>
 <param name='fillMode'>
    A FillMode that determines the style of the fill.
 </param>
 <remarks>
    <para>
       The first two points in the <paramref name="points"/> array specify
       the first side of the polygon. Each additional point specifies a new side whose
       vertices include the point and the previous point. In addition, if the last
       point and the first point do not coincide, they specify the last side of the
       polygon.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillEllipse">
 <overload>
    <para>
       Fills
       the interior of an ellipse defined by a bounding rectangle.
    </para>
 </overload>
 <summary>
    <para>
       Fills the interior of an ellipse
       defined by a bounding rectangle.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the bounding rectangle that defines the ellipse.
 </param>
 <remarks>
    <para>
       This method fills the interior of an ellipse. The
       ellipse is defined by the bounding rectangle represented by <paramref name="rect"/>
       .
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillEllipse1">
 <summary>
    <para>
       Fills the interior of an ellipse defined by a bounding rectangle.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse.
 </param>
 <remarks>
    <para>
       This method fills the interior of an ellipse. The
       ellipse is defined by the bounding rectangle represented by <paramref name="x"/>,
    <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/> 
    .
 </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillEllipse2">
 <summary>
    <para>
       Fills the interior of an ellipse defined by a bounding rectangle.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the bounding rectangle that defines the ellipse.
 </param>
 <remarks>
    <para>
       This method fills the interior of an ellipse. The ellipse is
       defined by the bounding rectangle represented by rect.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillEllipse3">
 <summary>
    <para>
       Fills the interior of an ellipse defined by a bounding
       rectangle.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse.
 </param>
 <remarks>
    <para>
       This method fills the interior of an ellipse. The
       ellipse is defined by the bounding rectangle represented by <paramref name="x"/>,
    <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillPie">
 <overload>
    <para>
       Fills the interior of a pie section.
    </para>
 </overload>
 <summary>
    <para>
       Fills the interior of a pie section defined by an ellipse and two radial
       lines.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method fills the interior of a pie section defined by an arc of an
       ellipse and the two radial lines that intersect with the endpoints of the arc.
       The ellipse is defined by the bounding rectangle <paramref name="rect"/>. The pie section
       consists of the two radial lines defined by <paramref name="startAngle"/> and
    <paramref name="sweepAngle"/> , and the arc between the intersections of those radial lines 
       with the outline of the ellipse.
    </para>
    <para>
       If <paramref name="sweepAngle"/> is greater than 360 degrees or less than -360 degrees,
       it is treated as if it were 360 degrees or -360 degrees, respectively.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillPie1">
 <summary>
    <para>
       Fills the interior of a pie section defined by an ellipse and two radial
       lines.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method fills the interior of a pie section defined by an arc of an
       ellipse and the two radial lines that intersect with the endpoints of the arc.
       The ellipse is defined by the bounding rectangle <paramref name="rect"/>. The pie section
       consists of the two radial lines defined by <paramref name="startAngle"/> and
    <paramref name="sweepAngle"/> , and the arc between the intersections of those radial lines 
       with the outline of the ellipse.
    </para>
    <para>
       If <paramref name="sweepAngle"/> is greater than 360 degrees or less than -360 degrees,
       it is treated as if it were 360 degrees or -360 degrees, respectively.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillPie2">
 <summary>
    <para>
       Fills the interior of a pie section defined by an ellipse
       and two radial lines.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse from which the pie section comes.
 </param>
 <param name='startAngle'>
    An angle measured clockwise from the x-axis to the first side of the pie section.
 </param>
 <param name='sweepAngle'>
    An angle measured clockwise from <paramref name="startAngle"/> to the second side of the pie section.
 </param>
 <remarks>
    <para>
       This method fills the interior of a pie section defined
       by an arc of an ellipse and the two radial lines that intersect with the
       endpoints of the arc. The ellipse is defined by the bounding rectangle <paramref name="rect"/>. The pie section consists of the two radial lines
       defined by <paramref name="startAngle"/> and <paramref name="sweepAngle"/> , and the arc between the intersections of
       those radial lines with the outline of the ellipse.
    </para>
    <para>
       If <paramref name="sweepAngle"/> is greater than
       360 degrees or less than -360 degrees, it is treated as if it were 360 degrees
       or -360 degrees, respectively.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillPath">
 <summary>
    <para>
       Fills the interior of a path.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='path'>
    A <see cref='System.Drawing.Drawing2D.GraphicsPath'/> that represents the path to fill.
 </param>
 <remarks>
    A <see cref='System.Drawing.Drawing2D.GraphicsPath'/> consists of a series of line
    and curve segments. If the path represented by <paramref name="path"/> is not closed, an
    additional segment is added from the last point to the first point to close the
    path.
 </remarks>
   </doc>
   <doc for="Graphics.FillClosedCurve">
 <overload>
    <para>
       Fills the interior of a closed curve
       defined by an array of points.
    </para>
 </overload>
 <summary>
    <para>
       Fills the interior a closed
       curve defined by an
       array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       This method fills the interior of a smooth closed curve that passes
       through each point in the <paramref name="points"/> array. If the last point in
    <paramref name="points"/> does not match the first point, then the curve is closed by 
       connecting the last point to the first point.
    </para>
    The points array must contain at least 4 elements.
 </remarks>
   </doc>
   <doc for="Graphics.FillClosedCurve1">
 <summary>
    <para>
       Fills the
       interior of a closed curve defined by an array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points through which the curve passes.
 </param>
 <param name='fillmode'>
    A <see cref='System.Drawing.Drawing2D.FillMode'/> that determines the
 </param>
 <remarks>
    <para>
       This method fills the interior of a smooth closed curve that passes
       through each point in the <paramref name="points"/> array. If the last point in
    <paramref name="points"/> does not match the first point, then the curve is closed by 
       connecting the last point to the first point.
    </para>
    <para>
       The <paramref name="tension"/> parameter determines the shape of the curve. If the value
       of <paramref name="tension"/> is 0, this method draws line segments to connect the points.
    </para>
    <para>
       The points array must contain at least 4 elements.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.FillClosedCurve2">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.FillClosedCurve3">
 <summary>
    <para>
       Fills the interior a closed curve defined by an array of points.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       This method fills the interior of a smooth closed curve that passes through
       each point in the <paramref name="points"/> array. If the last point in <paramref name="points"/> does
       not match the first point, then the curve is closed by connecting the last point
       to the first point.
    </para>
    The points array must contain at least 4 elements.
 </remarks>
   </doc>
   <doc for="Graphics.FillClosedCurve4">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.FillClosedCurve5">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.FillRegion">
 <summary>
    <para>
       Fills the interior of a <see cref='System.Drawing.Region'/>.
    </para>
 </summary>
 <param name='brush'>
    A <see cref='System.Drawing.Brush'/> that determines the characteristics of the fill pattern.
 </param>
 <param name='region'>
    A <see cref='System.Drawing.Region'/> that represents the area to fill.
 </param>
 <remarks>
    <para>
       A <see cref='System.Drawing.Region'/> is composed
       of rectangles and paths. If the region is not closed, an additional segment
       is added from the last point to the first point to close it.
    </para>
 </remarks>
   </doc>
   <doc for="Graphics.DrawString">
 <overload>
    <para>
       Draws a string.
    </para>
 </overload>
 <summary>
    <para>
       Draws a string with the specified font.
    </para>
 </summary>
 <param name='s'>
    The <see cref='System.String'/> to draw.
 </param>
 <param name='font'>
    The font to draw with.
 </param>
 <param name='brush'>
    The brush to draw with.
 </param>
 <param name='x'>
    The x coordinate to draw at.
 </param>
 <param name='y'>
    The y coordinate to draw at.
 </param>
   </doc>
   <doc for="Graphics.DrawString1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawString2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawString3">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawString4">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawString5">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString3">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString4">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString5">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureString6">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.MeasureCharacterRanges">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawIcon">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawIcon1">
 <summary>
    Draws this image to a graphics object.  The drawing command originates on the graphics
    object, but a graphics object generally has no idea how to render a given image.  So,
    it passes the call to the actual image.  This version crops the image to the given
    dimensions and allows the user to specify a rectangle within the image to draw.
 </summary>
 <param name='icon'>
 </param>
 <param name='targetRect'>
    The rectangle to crop to.
 </param>
   </doc>
   <doc for="Graphics.DrawIconUnstretched">
 <summary>
    Draws this image to a graphics object.  The drawing command originates on the graphics
    object, but a graphics object generally has no idea how to render a given image.  So,
    it passes the call to the actual image.  This version stretches the image to the given
    dimensions and allows the user to specify a rectangle within the image to draw.
 </summary>
 <param name='icon'>
 </param>
 <param name='targetRect'>
    The rectangle to stretch the image to.
 </param>
   </doc>
   <doc for="Graphics.DrawCachedBitmap">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage">
 <overload>
    <para>
       Draws an image.
    </para>
 </overload>
 <summary>
    <para>
       Draws the specified image at the
       specified location.
    </para>
 </summary>
 <param name='image'>
    The Image to draw.
 </param>
 <param name='point'>
    A PointF that represents the upper-left corner of the drawn image.
 </param>
   </doc>
   <doc for="Graphics.DrawImage1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage3">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage4">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage5">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage6">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage7">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImageUnscaled">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImageUnscaled1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImageUnscaled2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImageUnscaled3">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage8">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage9">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage10">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage11">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage12">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage13">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage14">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage15">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage16">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage17">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage18">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage19">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage20">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage21">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage22">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage23">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage24">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage25">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage26">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage27">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage28">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.DrawImage29">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile1">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile2">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile3">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile4">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile5">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile6">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile7">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile8">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile9">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile10">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile11">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile12">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile13">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile14">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile15">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile16">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile17">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile18">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile19">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile20">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile21">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile22">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile23">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile24">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile25">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile26">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile27">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile28">
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile29">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile30">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile31">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile32">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile33">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile34">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.EnumerateMetafile35">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Graphics.SetClip">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip3">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip4">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip5">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip6">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip7">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.SetClip8">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IntersectClip">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IntersectClip1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IntersectClip2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.ExcludeClip">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.ExcludeClip1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.ResetClip">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.TranslateClip">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.TranslateClip1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.Clip">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.ClipBounds">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsClipEmpty">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.VisibleClipBounds">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisibleClipEmpty">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible3">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible4">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible5">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible6">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.IsVisible7">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.Save">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.Restore">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.BeginContainer">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.BeginContainer1">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.EndContainer">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.BeginContainer2">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.AddMetafileComment">
 <summary>
 </summary>
   </doc>
   <doc for="Graphics.GetHalftonePalette">
 <summary>
 </summary>
   </doc>
</docs>

