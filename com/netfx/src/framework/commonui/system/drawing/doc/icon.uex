<docs>
   <doc for="Icon">
 <summary>
     This class represents a Windows icon, which is a small bitmap image used to
     represent an object.  Icons can be thought of as transparent bitmaps, although
     their size is determined by the system.
 </summary>
   </doc>
   <doc for="Icon.Icon">
 <summary>
     Loads an icon object from the given filename.
 </summary>
 <param name='fileName'>
     The file to load the icon from.
 </param>
   </doc>
   <doc for="Icon.Icon1">
 <summary>
     Duplicates the given icon, attempting to find a version of the icon
     that matches the requested size.  If a version cannot be found that
     exactally matches the size, the closest match will be used.  Note
     that if original is an icon with a single size, this will
     merely create a dupicate icon.  You can use the stretching modes
     of drawImage to force the icon to the size you want.
 </summary>
 <param name='original'>
     The icon to load the different size from.
 </param>
 <param name='size'>
     The new size of the icon.
 </param>
   </doc>
   <doc for="Icon.Icon2">
 <summary>
     Duplicates the given icon, attempting to find a version of the icon
     that matches the requested size.  If a version cannot be found that
     exactally matches the size, the closest match will be used.  Note
     that if original is an icon with a single size, this will
     merely create a dupicate icon.  You can use the stretching modes
     of drawImage to force the icon to the size you want.
 </summary>
 <param name='original'>
     The icon to load the different size from.
 </param>
 <param name='width'>
     The width of the new icon.
 </param>
 <param name='height'>
     The height of the new icon.
 </param>
   </doc>
   <doc for="Icon.Icon3">
 <summary>
     Loads an icon object from the given resource.
 </summary>
 <param name='type'>
     The type of the resource class.
 </param>
 <param name='resource'>
     The resource name to load.
 </param>
   </doc>
   <doc for="Icon.Icon4">
 <summary>
     Loads an icon object from the given data stream.
 </summary>
 <param name='stream'>
     The data stream to load the icon from.
 </param>
 <seealso cref='System.IO.Stream'/>
   </doc>
   <doc for="Icon.Icon5">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Icon.Icon6">
 <summary>
     Constructor used in deserialization
 </summary>
   </doc>
   <doc for="Icon.Handle">
 <summary>
     The Win32 handle for this object.  This is not a copy of the handle; do
     not free it.
 </summary>
   </doc>
   <doc for="Icon.Height">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Icon.Size">
 <summary>
     The size of this icon object.
 </summary>
   </doc>
   <doc for="Icon.Width">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Icon.Clone">
 <summary>
     Clones the icon object, creating a duplicate image.
 </summary>
 <returns>
     an object that can be casted to an Icon.
 </returns>
   </doc>
   <doc for="Icon.DestroyHandle">
 <summary>
     Called when this object is going to destroy it's Win32 handle.  You
     may override this if there is something special you need to do to
     destroy the handle.  This will be called even if the handle is not
     owned by this object, which is handy if you want to create a
     derived class that has it's own create/destroy semantics.

     The default implementation will call the appropriate Win32
     call to destroy the handle if this object currently owns the
     handle.  It will do nothing if the object does not currently
     own the handle.
 </summary>
   </doc>
   <doc for="Icon.Dispose">
 <summary>
     Cleans up the resources allocated by this object.  Once called, the cursor
     object is no longer useful.
 </summary>
   </doc>
   <doc for="Icon.DrawIcon">
 <summary>
     Draws this image to a graphics object.  The drawing command originates on the graphics
     object, but a graphics object generally has no idea how to render a given image.  So,
     it passes the call to the actual image.  This version crops the image to the given
     dimensions and allows the user to specify a rectangle within the image to draw.
 </summary>
 <param name='dc'>
     The graphics object to render to.
 </param>
 <param name='imageRect'>
     The rectanglular area of the image to draw.
 </param>
 <param name='targetRect'>
     The rectangle to crop to.
 </param>
 <param name='stretch'>
     true to stretch the image, false to crop it.
 </param>
   </doc>
   <doc for="Icon.Draw">
 <summary>
     Draws this image to a graphics object.  The drawing command originates on the graphics
     object, but a graphics object generally has no idea how to render a given image.  So,
     it passes the call to the actual image.  This version stretches the image to the given
     dimensions and allows the user to specify a rectangle within the image to draw.
 </summary>
 <param name='graphics'>
     The graphics object to render to.
 </param>
 <param name='targetRect'>
     The rectangle to stretch the image to.
 </param>
   </doc>
   <doc for="Icon.DrawUnstretched">
 <summary>
     Draws this image to a graphics object.  The drawing command originates on the graphics
     object, but a graphics object generally has no idea how to render a given image.  So,
     it passes the call to the actual image.  This version crops the image to the given
     dimensions and allows the user to specify a rectangle within the image to draw.
 </summary>
 <param name='graphics'>
     The graphics object to render to.
 </param>
 <param name='targetRect'>
     The rectangle to crop to.
 </param>
   </doc>
   <doc for="Icon.Finalize">
 <summary>
     Cleans up Windows resources for this object.
 </summary>
   </doc>
   <doc for="Icon.FromHandle">
 <summary>
     Creates an icon object from a given Win32 icon handle.  The Icon object
     does not claim ownership of the icon handle; you must free it when you are
     done.
 </summary>
 <param name='handle'>
     The Win32 icon handle.
 </param>
   </doc>
   <doc for="Icon.Initialize">
 <summary>
     Initializes this Image object.  This is identical to calling the image's
     constructor with picture, but this allows non-constructor initialization,
     which may be necessary in some instances.
 </summary>
 <param name='width'>
     The width of the requested icon.  If zero this will use the system defined
     default icon width.
 </param>
 <param name='height'>
     The height of the requested icon.  If zero this will use the system defined
     default icon height.
 </param>
   </doc>
   <doc for="Icon.Save">
 <summary>
     Saves this image to the given output stream.
 </summary>
 <param name='outputStream'>
     The stream to save to.  This can be a file, data object, or other
     Stream.
 </param>
   </doc>
   <doc for="Icon.ToBitmap">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="Icon.ToString">
 <summary>
     Retrieves a human readable string representing the cursor.
 </summary>
 <returns>
     a string describing the cursor.
 </returns>
   </doc>
   <doc for="Icon.ISerializable.GetObjectData">
 <summary>
     ISerializable private implementation
 </summary>
   </doc>
</docs>

