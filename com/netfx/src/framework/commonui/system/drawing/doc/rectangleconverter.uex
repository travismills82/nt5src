<docs>
   <doc for="RectangleConverter">
 <summary>
      RectangleConverter is a class that can be used to convert
      rectangles from one data type to another.  Access this
      class through the TypeDescriptor.
 </summary>
   </doc>
   <doc for="RectangleConverter.CanConvertFrom">
 <summary>
      Determines if this converter can convert an object in the given source
      type to the native type of the converter.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='sourceType'>
      The type you wish to convert from.
 </param>
 <returns>
      True if this object can perform the conversion.
 </returns>
   </doc>
   <doc for="RectangleConverter.CanConvertTo">
 <summary>
    <para>Gets a value indicating whether this converter can
       convert an object to the given destination type using the context.</para>
 </summary>
 <param name='context'><para>An <see cref='System.ComponentModel.ITypeDescriptorContext'/> that provides a format context. </para></param>
 <param name='destinationType'>A <see cref='System.Type'/> that represents the type you wish to convert to.</param>
 <returns>
 <para><see langword='true '/>if this converter can perform the conversion; otherwise, 
 <see langword='false'/>. </para>
 </returns>
 <remarks>
 <para>The <paramref name="context"/> parameter can be used to extract additional information 
    about the environment this converter is being invoked from. This can be
 <see langword='null'/>, so always check. Also, properties on the context object 
    can return <see langword='null'/>.</para>
 <note type="inheritinfo">
    Override this method to provide your own conversion requirements.
 </note>
 </remarks>
 <seealso cref='System.ComponentModel.ITypeDescriptorContext'/>
   </doc>
   <doc for="RectangleConverter.ConvertFrom">
 <summary>
      Converts the given object to the converter's native type.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='culture'>
     An optional culture info.  If not supplied the current culture is assumed.
 </param>
 <param name='value'>
      The object to convert.
 </param>
 <returns>
      The converted object.  This will throw an excetpion if the converson
      could not be performed.
 </returns>
   </doc>
   <doc for="RectangleConverter.ConvertTo">
 <summary>
      Converts the given object to another type.  The most common types to convert
      are to and from a string object.  The default implementation will make a call
      to ToString on the object if the object is valid and if the destination
      type is string.  If this cannot convert to the desitnation type, this will
      throw a NotSupportedException.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='culture'>
     An optional culture info.  If not supplied the current culture is assumed.
 </param>
 <param name='value'>
      The object to convert.
 </param>
 <param name='destinationType'>
      The type to convert the object to.
 </param>
 <returns>
      The converted object.
 </returns>
   </doc>
   <doc for="RectangleConverter.CreateInstance">
 <summary>
      Creates an instance of this type given a set of property values
      for the object.  This is useful for objects that are immutable, but still
      want to provide changable properties.
 </summary>
 <param name='context'>
      A type descriptor through which additional context may be provided.
 </param>
 <param name='propertyValues'>
      A dictionary of new property values.  The dictionary contains a series
      of name-value pairs, one for each property returned from GetProperties.
 </param>
 <returns>
      The newly created object, or null if the object could not be created.
      The default implementation returns null.
 </returns>
   </doc>
   <doc for="RectangleConverter.GetCreateInstanceSupported">
 <summary>
      Determines if changing a value on this object should require a call to
      CreateInstance to create a new value.
 </summary>
 <param name='context'>
      A type descriptor through which additional context may be provided.
 </param>
 <returns>
      Returns true if CreateInstance should be called when a change is
      made to one or more properties of this object.
 </returns>
   </doc>
   <doc for="RectangleConverter.GetProperties">
 <summary>
      Retrieves the set of properties for this type.  By default, a type has
      does not return any properties.  An easy implementation of this method
      can just call TypeDescriptor.GetProperties for the correct data type.
 </summary>
 <param name='context'>
      A type descriptor through which additional context may be provided.
 </param>
 <param name='value'>
      The value of the object to get the properties for.
 </param>
 <param name='attributes'>
 </param>
 <returns>
      The set of properties that should be exposed for this data type.  If no
      properties should be exposed, thsi may return null.  The default
      implementation always returns null.
 </returns>
   </doc>
   <doc for="RectangleConverter.GetPropertiesSupported">
 <summary>
      Determines if this object supports properties.  By default, this
      is false.
 </summary>
 <param name='context'>
      A type descriptor through which additional context may be provided.
 </param>
 <returns>
      Returns true if GetProperties should be called to find
      the properties of this object.
 </returns>
   </doc>
</docs>

