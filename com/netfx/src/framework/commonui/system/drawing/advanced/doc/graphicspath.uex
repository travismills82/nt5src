<docs>
   <doc for="GraphicsPath">
 <summary>
    Represents a series of connected lines and
    curves.
 </summary>
 <remarks>
    <para>
       Applications use paths to draw outlines of shapes, fill the interiors of
       shapes, and create clipping regions. The graphics engine maintains the
       coordinates of geometric shapes in a path in world coordinate space. The
       coordinates are transformed by the current transform to the physical coordinate
       space when the path is used. As a result, an application can use a path multiple
       times. A path may be composed of any number of figures. Each figure is either
       composed of a sequence of connected lines and curves or a geometric shape
       primitive. The starting point of a figure is the first point in the sequence of
       connected lines and curves. The ending point is the last point in the sequence.
       The starting and ending points of a geometric shape primitive are defined by the
       primitive specification. A figure that consists of a sequence of connected lines
       and curves (whose starting and ending points may be coincident) is an open
       figure, unless it is closed explicitly. An open figure does not have an
       interior, and will be ignored when a path is filled or converted to clipping
       regions. The closeFigure method closes the current figure by connecting a line
       from the ending point to the starting point. A figure that consists of a
       geometric shape primitive is a closed figure. A new figure is implicitly started
       when a path is created, when a figure is closed, or explicitly when the
       startFigure method is called. When a geometric shape primitive is added to a
       path, it adds a figure containing the geometric shape, and also implicitly
       starts a new figure. Consequently, there is always a current figure in a path.
       When lines and curves are added to a path, an implicit line is added as needed
       to connect the ending point of the current figure to the starting point of the
       new lines and curves to form a sequence of connected lines and curves. A figure
       has a direction that describes how line and curve segments are traced between
       the starting point and the ending point. The direction is defined in the order
       that lines and curves are added to a figure, or is defined by the geometric
       shape primitive. The direction is used in determining the path interiors for
       clipping and fill.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.GraphicsPath">
 <overload>
    <para>
       Initializes a new instance of the <see cref='System.Drawing.Drawing2D.GraphicsPath'/> class.
    </para>
 </overload>
 <summary>
    <para>
       Initializes a new instance of the <see cref='System.Drawing.Drawing2D.GraphicsPath'/> class with a <see cref='System.Drawing.Drawing2D.FillMode'/> of <see langword='Alternate'/>
       .
    </para>
 </summary>
   </doc>
   <doc for="GraphicsPath.GraphicsPath1">
 <summary>
    Initializes a new instance of the <see cref='System.Drawing.Drawing2D.GraphicsPath'/> class with the specified <see cref='System.Drawing.Drawing2D.FillMode'/>.
 </summary>
 <param name='fillMode'>
    The <see cref='System.Drawing.Drawing2D.FillMode'/> that determines how the interior of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> is filled.
 </param>
   </doc>
   <doc for="GraphicsPath.GraphicsPath2">
 <summary>
    <para>
    Initializes a new instance of the
    <see cref='System.Drawing.Drawing2D.GraphicsPath'/> array with the
    specified <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/>
    and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> arrays.
    </para>
 </summary>
 <param name='pts'>
    An array of <see cref='System.Drawing.PointF'/> objects that define the coordinates of the points that make up this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
 <param name=' types'>
    An array of <see cref='System.Drawing.Drawing2D.PathPointType'/> objects that specify the type of each corresponging point in the <paramref name="pts"/> array.
 </param>
   </doc>
   <doc for="GraphicsPath.GraphicsPath3">
 <summary>
    <para>
       Initializes a new instance of the <see cref='System.Drawing.Drawing2D.GraphicsPath'/> array with the
       specified <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/> and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> arrays and with the
       specified <see cref='System.Drawing.Drawing2D.FillMode'/>.
    </para>
 </summary>
 <param name=' pts'>
    An array of <see cref='System.Drawing.PointF'/> objects that define the coordinates of the points that make up this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
 <param name=' types'>
    An array of <see cref='System.Drawing.Drawing2D.PathPointType'/> objects that specify the type of each corresponging point in the <paramref name="pts"/> array.
 </param>
 <param name=' fillMode'>
    A <see cref='System.Drawing.Drawing2D.FillMode'/> that specifies how the interiors of shapes in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> are filled.
 </param>
   </doc>
   <doc for="GraphicsPath.GraphicsPath4">
 <summary>
    <para>
    Initializes a new instance of the
    <see cref='System.Drawing.Drawing2D.GraphicsPath'/> array with the
    specified <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/>
    and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> arrays.
    </para>
 </summary>
 <param name='pts'>
    An array of <see cref='System.Drawing.Point'/> objects that define the coordinates of the points that make up this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
 <param name=' types'>
    An array of <see cref='System.Drawing.Drawing2D.PathPointType'/> objects that specify the type of each corresponging point in the <paramref name="pts"/> array.
 </param>
   </doc>
   <doc for="GraphicsPath.GraphicsPath5">
 <summary>
    <para>
       Initializes a new instance of the <see cref='System.Drawing.Drawing2D.GraphicsPath'/> array with the
       specified <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/> and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> arrays and with the
       specified <see cref='System.Drawing.Drawing2D.FillMode'/>.
    </para>
 </summary>
 <param name=' pts'>
    An array of <see cref='System.Drawing.Point'/> objects that define the coordinates of the points that make up this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
 <param name=' types'>
    An array of <see cref='System.Drawing.Drawing2D.PathPointType'/> objects that specify the type of each corresponging point in the <paramref name="pts"/> array.
 </param>
 <param name=' fillMode'>
    A <see cref='System.Drawing.Drawing2D.FillMode'/> that specifies how the interiors of shapes in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> are filled.
 </param>
   </doc>
   <doc for="GraphicsPath.Clone">
 <summary>
    Creates an exact copy of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <returns>
    The <see cref='System.Drawing.Drawing2D.GraphicsPath'/> this method creates, cast as an
    object.
 </returns>
   </doc>
   <doc for="GraphicsPath.Dispose">
 <summary>
    Eliminates resources for this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
   </doc>
   <doc for="GraphicsPath.Finalize">
 <summary>
    Eliminates resources for this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
   </doc>
   <doc for="GraphicsPath.Reset">
 <summary>
    <para>
       Empties the <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/>
       and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/> arrays
       and sets the <see cref='System.Drawing.Drawing2D.GraphicsPath.FillMode'/> to
    <see langword='Alternate'/>.
    </para>
 </summary>
   </doc>
   <doc for="GraphicsPath.FillMode">
 <summary>
    Gets or sets a <see cref='System.Drawing.Drawing2D.FillMode'/> that determines how the interiors of
    shapes in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> are filled.
 </summary>
 <value>
    A <see cref='System.Drawing.Drawing2D.FillMode'/> that specifies how
    the interiors of shapes in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> are filled.
 </value>
   </doc>
   <doc for="GraphicsPath.PathData">
 <summary>
    Gets a <see cref='System.Drawing.Drawing2D.PathData'/> object that
    encapsulates both the <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/> arrays of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <value>
    A <see cref='System.Drawing.Drawing2D.PathData'/> object that
    encapsulates both the <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> and <see cref='System.Drawing.Drawing2D.GraphicsPath.PathTypes'/> arrays of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </value>
   </doc>
   <doc for="GraphicsPath.StartFigure">
 <summary>
    <para>
       Starts a new figure without closing the
       current figure. All subsequent points added to the path are added to this new
       figure.
    </para>
 </summary>
 <remarks>
    The user must keep the original points if
    they are needed. Because they are converted to cubic Bezier control points
    internally, there is no mechanism for returning the original points.
 </remarks>
   </doc>
   <doc for="GraphicsPath.CloseFigure">
 <summary>
    Closes the current figure and starts a new
    figure. If the current figure contains a sequence of connected lines and curves,
    it closes the loop by connecting a line from the ending point to the starting
    point.
 </summary>
   </doc>
   <doc for="GraphicsPath.CloseAllFigures">
 <summary>
    Closes all open figures in a path and
    starts a new figure. It closes each open figure by connecting a line from it's
    ending point to it's starting point.
 </summary>
   </doc>
   <doc for="GraphicsPath.SetMarkers">
 <summary>
    <para>
       Sets a marker on this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> .
    </para>
 </summary>
   </doc>
   <doc for="GraphicsPath.ClearMarkers">
 <summary>
    Clears all markers from this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
   </doc>
   <doc for="GraphicsPath.Reverse">
 <summary>
    Reverses the order of points in the <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> array of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
   </doc>
   <doc for="GraphicsPath.GetLastPoint">
 <summary>
    Gets the last point in the <see cref='System.Drawing.Drawing2D.GraphicsPath.PathPoints'/> array of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <returns>
    A <see cref='System.Drawing.PointF'/> that represents the last point
    in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </returns>
   </doc>
   <doc for="GraphicsPath.IsVisible">
 <overload>
    <para>
       Indicates whether the specified point is contained
       within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>
       .
    </para>
 </overload>
 <summary>
    <para>
       Indicates whether the specified point is contained
       within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>
       .
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> 
    if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise, <see langword='false'/>.
 </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsVisible1">
 <summary>
    <para>
       Indicates whether the specified point is contained
       within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='point'>
    A <see cref='System.Drawing.PointF'/> that represents the point to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> 
    if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise, <see langword='false'/>.
 </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsVisible2">
 <summary>
    <para>
       Indicates whether the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> in the visible clip region of the
       specified <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
 <see langword='true'/> if the specified 
    point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the
    visible clip region associated with <paramref name="graphics"/>; otherwise,
 <see langword='false'/>.
 </returns>
 <remarks>
    The coordinates of the point to be tested are
    given in world coordinates. The transform matrix of <paramref name="graphics "/>is
    applied before testing for visibility.
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsVisible3">
 <summary>
    <para>
       Indicates whether the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='pt'>
    A <see cref='System.Drawing.PointF'/> that represents the point to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region 
       associated with <paramref name="graphics"/>; otherwise, <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    <para>
       The coordinates of the point to be tested are given in world coordinates. The
       transform matrix of <paramref name="graphics "/>is applied before testing for
       visibility.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsVisible4">
 <summary>
    <para>
       Indicates whether the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> .
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise, <see langword='false'/>. 
    </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsVisible5">
 <summary>
    <para>
       Indicates whether the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='point'>
    A <see cref='System.Drawing.Point'/> that represents the point to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise, <see langword='false'/>. 
    </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsVisible6">
 <summary>
    <para>
       Indicates whether the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> in the visible clip region of the
       specified <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region 
       associated with <paramref name="graphics"/>; otherwise, <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    <para>
       The coordinates of the point to be tested are given in world coordinates. The
       transform matrix of <paramref name="graphics "/>is applied before testing for
       visibility.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsVisible7">
 <summary>
    <para>
       Indicates whether the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='pt'>
    A <see cref='System.Drawing.Point'/> that represents the point to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if the specified point is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region 
       associated with <paramref name="graphics"/>; otherwise, <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    <para>
       The coordinates of the point to be tested are given in world coordinates. The
       transform matrix of <paramref name="graphics "/>is applied before testing for
       visibility.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible">
 <overload>
    Indicates whether an
    outline drawn by the specified <see cref='System.Drawing.Pen'/> at the specified location is contained
    within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </overload>
 <summary>
    Indicates whether an outline drawn by the
    specified <see cref='System.Drawing.Pen'/> at the specified location is contained
    within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <returns>
 <see langword='true'/> if an outline 
    drawn by the specified Pen at the specified location is contained within this
 <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise, <see langword='false'/>.
 </returns>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible1">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified <see cref='System.Drawing.Pen'/> at the
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='point'>
    A <see cref='System.Drawing.PointF'/> that specifies the location to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline drawn by the specified Pen at the 
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise,
    <see langword='false'/>.
    </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible2">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified <see cref='System.Drawing.Pen'/> at the
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region of
       the specified <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline drawn by the specified Pen at the 
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within
       the visible clip region of the specified graphics context; otherwise,
    <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    The coordinates of the point to be tested
    are given in world coordinates. The transform matrix of <paramref name="graphics "/>is
    applied before testing for visibility.
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible3">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified
    <see cref='System.Drawing.Pen'/> at the specified 
       location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region of
       the specified <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <param name='pt'>
    A <see cref='System.Drawing.PointF'/> that specifies the location to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline 
       drawn by the specified Pen at the specified location is contained within this
    <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within 
       the visible clip region of the specified graphics context; otherwise, <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    <para>
       The coordinates of the point to be tested
       are given in world coordinates. The transform matrix of <paramref name="graphics "/>is
       applied before testing for visibility.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible4">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified <see cref='System.Drawing.Pen'/> at the
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline drawn by the specified Pen at the 
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise,
    <see langword='false'/>.
    </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible5">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified <see cref='System.Drawing.Pen'/> at the
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='point'>
    A <see cref='System.Drawing.Point'/> that specifies the location to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline drawn by the specified Pen at the 
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>; otherwise,
    <see langword='false'/>.
    </para>
 </returns>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible6">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified <see cref='System.Drawing.Pen'/> at the
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region of
       the specified <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the point to test.
 </param>
 <param name='y'>
    The y-coordinate of the point to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline drawn by the specified Pen at the 
       specified location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within
       the visible clip region of the specified graphics context; otherwise,
    <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    The coordinates of the point to be tested
    are given in world coordinates. The transform matrix of <paramref name="graphics "/>is
    applied before testing for visibility.
 </remarks>
   </doc>
   <doc for="GraphicsPath.IsOutlineVisible7">
 <summary>
    <para>
       Indicates whether an outline drawn by the specified
    <see cref='System.Drawing.Pen'/> at the specified 
       location is contained within this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within the visible clip region of
       the specified <see cref='System.Drawing.Graphics'/>.
    </para>
 </summary>
 <param name='pt'>
    A <see cref='System.Drawing.Point'/> that specifies the location to test.
 </param>
 <param name='pen'>
    The <see cref='System.Drawing.Pen'/> to test.
 </param>
 <param name='graphics'>
    The <see cref='System.Drawing.Graphics'/> for which to test visibility.
 </param>
 <returns>
    <para>
    <see langword='true'/> if an outline 
       drawn by the specified Pen at the specified location is contained within this
    <see cref='System.Drawing.Drawing2D.GraphicsPath'/> and within 
       the visible clip region of the specified graphics context; otherwise, <see langword='false'/>.
    </para>
 </returns>
 <remarks>
    <para>
       The coordinates of the point to be tested
       are given in world coordinates. The transform matrix of <paramref name="graphics "/>is
       applied before testing for visibility.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddLine">
 <overload>
    Appends a line segment to
    this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </overload>
 <summary>
    Appends a line segment to this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <param name='pt1'>
    A <see cref='System.Drawing.PointF'/> that represents the starting point of the line to add.
 </param>
 <param name=' pt2'>
    A <see cref='System.Drawing.PointF'/> that represents the ending point of the line to add.
 </param>
 <remarks>
    This method adds the line segment defined
    by the specified points to the end of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>. If there are previous lines or curves
    in the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>, a line segment is drawn to connect
    the last point in the path to the first point in the new line segment.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddLine1">
 <summary>
    Appends a line segment to this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <param name=' x1'>
    The x-coordinate of the starting point of the line to add.
 </param>
 <param name=' y1'>
    The y-coordinate of the starting point of the line to add.
 </param>
 <param name=' x2'>
    The x-coordinate of the ending point of the line to add.
 </param>
 <param name=' y2'>
    The y-coordinate of the ending point of the line to add.
 </param>
 <remarks>
    This method adds the line segment defined
    by the specified points to the end of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>. If there are previous lines or curves
    in the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>, a line segment is drawn to connect
    the last point in the path to the first point in the new line segment.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddLines">
 <overload>
    Appends a series of
    connected line segments to the end of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </overload>
 <summary>
    Appends a series of connected line
    segments to the end of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the line segments to add.
 </param>
 <remarks>
    If there are previous lines or curves in the figure, a
    line is added to connect the ending point of the previous segment the the
    starting point of the line. The <paramref name="points"/> argument specifies an array of
    endpoints. The first two specify the first line. Each additional point specifies
    the ending point of a line segment whose starting point is the ending point of
    the previous line.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddLine2">
 <summary>
    <para>
       Appends a line segment to this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name=' pt1'>
    A <see cref='System.Drawing.Point'/> that represents the starting point of the line to add.
 </param>
 <param name=' pt2'>
    A <see cref='System.Drawing.Point'/> that represents the ending point of the line to add.
 </param>
 <remarks>
    <para>
       This method adds the line segment defined by the specified points to the end
       of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>. If there are previous lines or curves
       in the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>, a line segment is drawn to connect
       the last point in the path to the first point in the new line segment.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddLine3">
 <summary>
    <para>
       Appends a line segment to this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name='x1'>
    The x-coordinate of the starting point of the line to add.
 </param>
 <param name='y1'>
    The y-coordinate of the starting point of the line to add.
 </param>
 <param name='x2'>
    The x-coordinate of the ending point of the line to add.
 </param>
 <param name='y2'>
    The y-coordinate of the ending point of the line to add.
 </param>
 <remarks>
    <para>
       This method adds the line segment defined
       by the specified points to the end of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>. If there are previous lines or curves
       in the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>, a line segment is drawn to connect
       the last point in the path to the first point in the new line segment.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddLines1">
 <summary>
    <para>
       Appends a series of connected line segments to the end of this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the line segments to add.
 </param>
 <remarks>
    <para>
       If there are previous lines or curves in the figure, a line is added to
       connect the ending point of the previous segment the the starting point of the
       line. The <paramref name="points"/> argument specifies an array of endpoints. The first two
       specify the first line. Each additional point specifies the ending point of a
       line segment whose starting point is the ending point of the previous line.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddArc">
 <overload>
    <para>
       Appends an elliptical arc
       to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Appends an elliptical arc to the current
       figure.
    </para>
 </summary>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the rectangular bounds of the ellipse from which the arc is taken.
 </param>
 <param name='startAngle'>
    The starting angle of the arc, measured in degrees clockwise from the x-axis.
 </param>
 <param name='sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the arc.
 </param>
 <remarks>
    <para>
       If there are previous lines or curves in the
       figure, a line is added to connect the ending point of the previous
       segment to the beginning of the arc.
    </para>
    <para>
       The arc is traced along the perimenter of the ellipse bounded by the
       specified rectangle. The starting point of the arc is determined by measuring
       clockwise from the x-axis of the ellipse (at 0 degree angle) by the number of
       degrees in the start angle. The ending point is similarly located by measuring
       clockwise from the starting point by the number of degrees in the sweep angle.
       If the sweep angle is greater than 360 degrees or less than -360 degrees, the
       arc is swept by exactly 360 degrees or -360 degrees respectively. The method
       returns a parameter of type Status which can be queried to see if the method was
       successfull.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddArc1">
 <summary>
    <para>
       Appends an elliptical arc to the current figure.
    </para>
 </summary>
 <param name=' x'>
    The x-coordinate of the upper left corner of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name=' y'>
    The y-coordinate of the upper left corner of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name=' width'>
    The width of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name=' height'>
    The height of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name=' startAngle'>
    The starting angle of the arc, measured in degrees clockwise from the x-axis.
 </param>
 <param name=' sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the arc.
 </param>
 <remarks>
    <para>
       If there are previous lines or curves in the figure, a line is added to
       connect the ending point of the previous segment to the beginning of the
       arc.
    </para>
    <para>
       The arc is traced along the perimenter of the ellipse bounded by the
       specified rectangle. The starting point of the arc is determined by measuring
       clockwise from the x-axis of the ellipse (at 0 degree angle) by the number of
       degrees in the start angle. The ending point is similarly located by measuring
       clockwise from the starting point by the number of degrees in the sweep angle.
       If the sweep angle is greater than 360 degrees or less than -360 degrees, the
       arc is swept by exactly 360 degrees or -360 degrees respectively. The method
       returns a parameter of type Status which can be queried to see if the method was
       successfull.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddArc2">
 <summary>
    <para>
       Appends an elliptical arc to the current figure.
    </para>
 </summary>
 <param name=' rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the rectangular bounds of the ellipse from which the arc is taken.
 </param>
 <param name=' startAngle'>
    The starting angle of the arc, measured in degrees clockwise from the x-axis.
 </param>
 <param name=' sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the arc.
 </param>
 <remarks>
    <para>
       If there are previous lines or curves in the figure, a line is added to
       connect the ending point of the previous segment to the beginning of the arc.
    </para>
    <para>
       The arc is traced along the perimenter of the ellipse bounded by the
       specified rectangle. The starting point of the arc is determined by measuring
       clockwise from the x-axis of the ellipse (at 0 degree angle) by the number of
       degrees in the start angle. The ending point is similarly located by measuring
       clockwise from the starting point by the number of degrees in the sweep angle.
       If the sweep angle is greater than 360 degrees or less than -360 degrees, the
       arc is swept by exactly 360 degrees or -360 degrees respectively. The method
       returns a parameter of type Status which can be queried to see if the method was
       successfull.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddArc3">
 <summary>
    <para>
       Appends an elliptical arc to the current figure.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the upper left corner of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name='y'>
    The y-coordinate of the upper left corner of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name='width'>
    The width of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name='height'>
    The height of the rectangular region that defines the ellipse from which the arc is drawn.
 </param>
 <param name='startAngle'>
    The starting angle of the arc, measured in degrees clockwise from the x-axis.
 </param>
 <param name='sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the arc.
 </param>
 <remarks>
    <para>
       If there are previous lines or curves in the figure, a line is added to
       connect the ending point of the previous segment to the beginning of the arc.
    </para>
    <para>
       The arc is traced along the perimenter of the ellipse bounded by the
       specified rectangle. The starting point of the arc is determined by measuring
       clockwise from the x-axis of the ellipse (at 0 degree angle) by the number of
       degrees in the start angle. The ending point is similarly located by measuring
       clockwise from the starting point by the number of degrees in the sweep angle.
       If the sweep angle is greater than 360 degrees or less than -360 degrees, the
       arc is swept by exactly 360 degrees or -360 degrees respectively. The method
       returns a parameter of type Status which can be queried to see if the method was
       successfull.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddBezier">
 <overload>
    <para>
       Adds a cubic Bezier curve
       to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds a cubic Bezier curve to the current
       figure.
    </para>
 </summary>
 <param name='pt1'>
    A <see cref='System.Drawing.PointF'/> that represents the starting point of the curve.
 </param>
 <param name='pt2'>
    A <see cref='System.Drawing.PointF'/> that represents the first control point for the curve.
 </param>
 <param name='pt3'>
    A <see cref='System.Drawing.PointF'/> that represents the second control point for the curve.
 </param>
 <param name='pt4'>
    A <see cref='System.Drawing.PointF'/> that represents the ending point of the curve.
 </param>
 <remarks>
    <para>
       The
       cubic curve is constructed from the first point to the fourth point by using the
       second and third points as control points.
    </para>
    <para>
       If there is a previous line or curve segment in the figure, a line is added
       to connect the ending point of the previous segment to the starting point of the
       cubic curve.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddBezier1">
 <summary>
    <para>
       Adds a cubic Bezier curve to the current
       figure.
    </para>
 </summary>
 <param name='x1'>
    The x-coordinate of the starting point of the curve.
 </param>
 <param name=' y1'>
    The y-coordinate of the starting point of the curve.
 </param>
 <param name=' x2'>
    The x-coordinate of the first control point for the curve.
 </param>
 <param name=' y2'>
    The y-coordinate of the first control point for the curve.
 </param>
 <param name=' x3'>
    The x-coordinate of the second control point for the curve.
 </param>
 <param name=' y3'>
    The y-coordinate of the second control point for the curve.
 </param>
 <param name=' x4'>
    The x-coordinate of the ending point of the curve.
 </param>
 <param name=' y4'>
    The y-coordinate of the ending point of the curve.
 </param>
 <remarks>
    <para>
       The cubic curve is constructed from the first point to the fourth point by
       using the second and third points as control points.
    </para>
    <para>
       If there is a previous line or curve segment in the figure, a line is added
       to connect the ending point of the previous segment to the starting point of the
       cubic curve.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddBeziers">
 <overload>
    <para>
       Adds a sequence of
       connected cubic Bezier curves to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds a sequence of connected cubic Bezier
       curves to the current figure.
    </para>
 </summary>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curves.
 </param>
 <remarks>
    <para>
       The <paramref name="points"/> parameter specifies an array of
       endpoints and control points of the connected curves. The first curve is
       constructed from the first point to the fourth point in the <paramref name="points"/>
       array by using the second and third
       points as control points. Each subsequent curve in the sequence needs exactly three more points: the ending point of the previous
       curve is used as the starting point, the next two points in the sequence
       are control points, and the third is the ending point.
    </para>
    <para>
       If there are previous lines or curves in the figure, a line is added to
       connect the ending point of the previous segment to the starting point of the
       first cubic curve in the sequence.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddBezier2">
 <summary>
    <para>
       Adds a cubic Bezier curve to the current figure.
    </para>
 </summary>
 <param name=' pt1'>
    A <see cref='System.Drawing.Point'/> that represents the starting point of the curve.
 </param>
 <param name=' pt2'>
    A <see cref='System.Drawing.Point'/> that represents the first control point for the curve.
 </param>
 <param name=' pt3'>
    A <see cref='System.Drawing.Point'/> that represents the second control point for the curve.
 </param>
 <param name=' pt4'>
    A <see cref='System.Drawing.Point'/> that represents the ending point of the curve.
 </param>
 <remarks>
    <para>
       The cubic curve is constructed from the first point to the fourth point by
       using the second and third points as control points.
    </para>
    <para>
       If there is a previous line or curve segment in the figure, a line is added
       to connect the ending point of the previous segment to the starting point of the
       cubic curve.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddBezier3">
 <summary>
    <para>
       Adds a cubic Bezier curve to the current
       figure.
    </para>
 </summary>
 <param name='x1'>
    The x-coordinate of the starting point of the curve.
 </param>
 <param name='y1'>
    The y-coordinate of the starting point of the curve.
 </param>
 <param name='x2'>
    The x-coordinate of the first control point for the curve.
 </param>
 <param name='y2'>
    The y-coordinate of the first control point for the curve.
 </param>
 <param name='x3'>
    The x-coordinate of the second control point for the curve.
 </param>
 <param name='y3'>
    The y-coordinate of the second control point for the curve.
 </param>
 <param name='x4'>
    The x-coordinate of the ending point of the curve.
 </param>
 <param name='y4'>
    The y-coordinate of the ending point of the curve.
 </param>
 <remarks>
    <para>
       The cubic curve is constructed from the first point to the fourth point by
       using the second and third points as control points.
    </para>
    <para>
       If there is a previous line or curve segment in the figure, a line is added
       to connect the ending point of the previous segment to the starting point of the
       cubic curve.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddBeziers1">
 <summary>
    <para>
       Adds a sequence of connected cubic Bezier curves to the
       current figure.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curves.
 </param>
 <remarks>
    <para>
       The<paramref name=" points"/> parameter
       specifies an array of endpoints and control points of the connected curves. The
       first curve is constructed from the first point to the fourth point in the<paramref name="points"/> array by using the second and third points as
       control points. Each subsequent curve in the sequence needs exactly three more
       points: the ending point of the previous curve is used as the starting point,
       the next two points in the sequence are control points, and the third is the
       ending point.
    </para>
    <para>
       If there are previous lines or curves in the figure, a line is added to
       connect the ending point of the previous segment to the starting point of the
       first cubic curve in the sequence.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddCurve">
 <overload>
    <para>
       Adds a spline curve to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds a spline curve to the current figure.
       A Cardinal spline curve is used because the curve travels through each of the
       points in the array.
    </para>
 </summary>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are
       needed. Since they are converted to cubic Bezier control points internally,
       there is no mechanism for returning the original points.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddCurve1">
 <summary>
    Adds a spline curve to the current figure.
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <param name=' tension'>
    A value between 0 and 1 that specifies the amount that the curve bends between control points.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddCurve2">
 <summary>
    <para>
       Adds a spline curve to the current figure.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <param name=' offset'>
    The offset from the first point in the <paramref name="points"/> array to the first point in the curve.
 </param>
 <param name=' numberOfSegments'>
    The number of segments used to draw the curve.
 </param>
 <param name=' tension'>
    A value between 0 and 1 that specifies the amount that the curve bends between control points.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
    <para>
       The curve begins at the point in the array specified by
    <paramref name="offset"/>, and includes the number of points specified by 
    <paramref name="numberOfSegments"/>
    .
 </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddCurve3">
 <summary>
    <para>
       Adds a spline curve to the current figure. A Cardinal spline curve is used
       because the curve travels through each of the points in the array.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddCurve4">
 <summary>
    <para>
       Adds a spline curve to the current figure.
    </para>
 </summary>
 <param name='points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <param name='tension'>
    A value between 0 and 1 that specifies the amount that the curve bends between control points.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddCurve5">
 <summary>
    <para>
       Adds a spline curve to the current figure.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <param name=' offset'>
    The offset from the first point in the <paramref name="points"/> array to the first point in the curve.
 </param>
 <param name=' numberOfSegments'>
    The number of segments used to draw the curve.
 </param>
 <param name=' tension'>
    A value between 0 and 1 that specifies the amount that the curve bends between control points.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
    <para>
       The curve begins at the point in the array specified by <paramref name="offset"/>, and
       includes the number of points specified by <paramref name="numberOfSegments"/> .
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddClosedCurve">
 <overload>
    <para>
       Adds a closed curve to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds a closed curve to the current figure. A Cardinal spline curve is
       used because the curve travels through each of the points in the array.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
    If the first point and the last point in the
 <paramref name="points"/> array are not the same point, the curve is closed by connecting 
    these two points.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddClosedCurve1">
 <summary>
    <para>
       Adds a closed curve to the current figure. A Cardinal spline curve is
       used because the curve travels through each of the points in the array.
    </para>
 </summary>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that represent the points that define the curve.
 </param>
 <param name='tension'>
    A value between 0 and 1 that specifies the amount that the curve bends between points.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
    If the first point and the last point in the
 <paramref name="points"/> array are not the same point, the curve is closed by connecting 
    these two points.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddClosedCurve2">
 <summary>
    <para>
       Adds a closed curve to the current figure. A Cardinal spline curve is used
       because the curve travels through each of the points in the array.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
    If the first point and the last point in the
 <paramref name="points"/> array are not the same point, the curve is closed by connecting 
    these two points.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddClosedCurve3">
 <summary>
    <para>
       Adds a closed curve to the current figure. A Cardinal spline curve is used
       because the curve travels through each of the points in the array.
    </para>
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that represent the points that define the curve.
 </param>
 <param name=' tension'>
    A value between 0 and 1 that specifies the amount that the curve bends between points.
 </param>
 <remarks>
    <para>
       The user must keep the original points if they are needed. Since they are
       converted to cubic Bezier control points internally, there is no mechanism for
       returning the original points.
    </para>
    If the first point and the last point in the
 <paramref name="points"/> array are not the same point, the curve is closed by connecting 
    these two points.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddRectangle">
 <overload>
    Adds a rectangle to the
    current figure.
 </overload>
 <summary>
    Adds a rectangle to the current figure.
 </summary>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the rectangle to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddRectangles">
 <overload>
    <para>
       Adds a series of
       rectangles to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds a series of rectangles to the current
       figure.
    </para>
 </summary>
 <param name='rects'>
    An array of <see cref='System.Drawing.RectangleF'/> objects that represent the rectangles to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddRectangle1">
 <summary>
    <para>
       Adds a rectangle to the current figure.
    </para>
 </summary>
 <param name=' rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the rectangle to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddRectangles1">
 <summary>
    <para>
       Adds a series of rectangles to the current figure.
    </para>
 </summary>
 <param name=' rects'>
    An array of <see cref='System.Drawing.Rectangle'/> objects that represent the rectangles to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddEllipse">
 <overload>
    Adds an ellipse to the
    current figure.
 </overload>
 <summary>
    Adds an ellipse to the current figure.
 </summary>
 <param name='rect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the bounding rectangle that defines the ellipse to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddEllipse1">
 <summary>
    Adds an ellipse to the current figure.
 </summary>
 <param name='x'>
    The x-coordinate of the upper left corner of the bounding rectangle that defines the ellipse to add.
 </param>
 <param name=' y'>
    The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse to add.
 </param>
 <param name=' width'>
    The width of the bounding rectangle that defines the ellipse to add.
 </param>
 <param name=' height'>
    The height of the bounding rectangle that defines the ellipse to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddEllipse2">
 <summary>
    <para>
       Adds an ellipse to the current figure.
    </para>
 </summary>
 <param name=' rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the bounding rectangle that defines the ellipse to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddEllipse3">
 <summary>
    <para>
       Adds an ellipse to the current figure.
    </para>
 </summary>
 <param name=' x'>
    The x-coordinate of the upper left corner of the bounding rectangle that defines the ellipse to add.
 </param>
 <param name=' y'>
    The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse to add.
 </param>
 <param name=' width'>
    The width of the bounding rectangle that defines the ellipse to add.
 </param>
 <param name=' height'>
    The height of the bounding rectangle that defines the ellipse to add.
 </param>
   </doc>
   <doc for="GraphicsPath.AddPie">
 <overload>
    <para>
       Adds the outline of a pie
       shape to the current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds the outline of a pie shape to the
       current figure.
    </para>
 </summary>
 <param name='rect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name=' startAngle'>
    The starting angle for the pie section, measured in degrees clockwise from the x-axis.
 </param>
 <param name=' sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle"/>.
 </param>
 <remarks>
    <para>
       The pie shape is defined by an partial outline of
       an ellipse and the two radial lines that intersect the endpoints of the partial
       outline.The partial outline begins at <paramref name="startAngle"/>
       (measured clockwise from the x-axis) and ends at <paramref name="startAngle"/> +
    <paramref name="sweepAngle"/>.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddPie1">
 <summary>
    <para>
       Adds the outline of a pie shape to the current
       figure.
    </para>
 </summary>
 <param name=' x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name=' y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name=' width'>
    The width of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name=' height'>
    The height of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name=' startAngle'>
    The starting angle for the pie section, measured in degrees clockwise from the x-axis.
 </param>
 <param name=' sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle"/>.
 </param>
 <remarks>
    <para>
       The pie shape is defined by an partial outline of an
       ellipse and the two radial lines that intersect the endpoints of the partial
       outline.The partial outline begins at
    <paramref name="startAngle"/> 
    (measured clockwise from the x-axis) and ends at<paramref name="startAngle
    "/> +<paramref name="sweepAngle"/>.
 </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddPie2">
 <summary>
    <para>
       Adds the outline of a pie shape to the current
       figure.
    </para>
 </summary>
 <param name='x'>
    The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name='y'>
    The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name='width'>
    The width of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name='height'>
    The height of the bounding rectangle that defines the ellipse from which the pie is drawn.
 </param>
 <param name='startAngle'>
    The starting angle for the pie section, measured in degrees clockwise from the x-axis.
 </param>
 <param name='sweepAngle'>
    The angle between <paramref name="startAngle"/> and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle"/>.
 </param>
 <remarks>
    <para>
       The pie shape is defined by an partial outline of an
       ellipse and the two radial lines that intersect the endpoints of the partial
       outline.The partial outline begins at <paramref name="startAngle"/>
       (measured clockwise from the x-axis) and ends at <paramref name="startAngle"/> + <paramref name="sweepAngle"/>.
    </para>
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddPolygon">
 <overload>
    Adds a polygon to the
    current figure.
 </overload>
 <summary>
    Adds a polygon to the current figure.
 </summary>
 <param name='points'>
    An array of <see cref='System.Drawing.PointF'/> objects that define the polygon to add.
 </param>
 <remarks>
    The points in the <paramref name="points"/> array
    specify the vertices of a polygon. If the first point in the array is not the
    same as the last point, those two points are connected to close the polygon.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddPolygon1">
 <summary>
    Adds a polygon to the current figure.
 </summary>
 <param name=' points'>
    An array of <see cref='System.Drawing.Point'/> objects that define the polygon to add.
 </param>
 <remarks>
    The points in the <paramref name="points"/> array
    specify the vertices of a polygon. If the first point in the array is not the
    same as the last point, those two points are connected to close the polygon.
 </remarks>
   </doc>
   <doc for="GraphicsPath.AddPath">
 <summary>
    Appends the specified <see cref='System.Drawing.Drawing2D.GraphicsPath'/> to this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <param name='addingPath'>
    The <see cref='System.Drawing.Drawing2D.GraphicsPath'/> to add.
 </param>
 <param name=' connect'>
 <see langword='true'/> to connect the new path to the existing path; <see langword='false'/> to leave the new path disconnected.
 </param>
   </doc>
   <doc for="GraphicsPath.AddString">
 <overload>
    <para>
       Adds a text string to the
       current figure.
    </para>
 </overload>
 <summary>
    <para>
       Adds a text string to the current figure.
    </para>
 </summary>
 <param name='s'>
    The <see cref='System.String'/> to add.
 </param>
 <param name=' family'>
    The <see cref='System.Drawing.FontFamily'/> that represents the name of the font with which the test is drawn.
 </param>
 <param name=' style'>
    A FontStyle that represents style information about the text (bold, italic, and so on).
 </param>
 <param name=' emSize'>
    A value that specifies the height of the Em square box that bounds the character.
 </param>
 <param name=' origin'>
    A <see cref='System.Drawing.PointF'/> that represents the point where the text starts.
 </param>
 <param name=' format'>
    A <see cref='System.Drawing.StringFormat'/> that specifies formatting information, such as line spacing and alignment, for the text.
 </param>
   </doc>
   <doc for="GraphicsPath.AddString1">
 <summary>
    <para>
       Adds a text string to the current figure.
    </para>
 </summary>
 <param name=' s'>
    The <see cref='System.String'/> to add.
 </param>
 <param name=' family'>
    The <see cref='System.Drawing.FontFamily'/> that represents the name of the font with which the test is drawn.
 </param>
 <param name=' style'>
    A FontStyle that represents style information about the text (bold, italic, and so on).
 </param>
 <param name=' emSize'>
    A value that specifies the height of the Em square box that bounds the character.
 </param>
 <param name=' origin'>
    A <see cref='System.Drawing.Point'/> that represents the point where the text starts.
 </param>
 <param name=' format'>
    A <see cref='System.Drawing.StringFormat'/> that specifies formatting information, such as line spacing and alignment, for the text.
 </param>
   </doc>
   <doc for="GraphicsPath.AddString2">
 <summary>
    <para>
       Adds a text string to the current figure.
    </para>
 </summary>
 <param name=' s'>
    The <see cref='System.String'/> to add.
 </param>
 <param name=' family'>
    The <see cref='System.Drawing.FontFamily'/> that represents the name of the font with which the test is drawn.
 </param>
 <param name=' style'>
    A FontStyle that represents style information about the text (bold, italic, and so on).
 </param>
 <param name=' emSize'>
    A value that specifies the height of the Em square box that bounds the character.
 </param>
 <param name=' layoutRect'>
    A <see cref='System.Drawing.RectangleF'/> that represents the rectangle that bounds the text.
 </param>
 <param name=' format'>
    A <see cref='System.Drawing.StringFormat'/> that specifies formatting information, such as line spacing and alignment, for the text.
 </param>
   </doc>
   <doc for="GraphicsPath.AddString3">
 <summary>
    <para>
       Adds a text string to the current figure.
    </para>
 </summary>
 <param name=' s'>
    The <see cref='System.String'/> to add.
 </param>
 <param name=' family'>
    The <see cref='System.Drawing.FontFamily'/> that represents the name of the font with which the test is drawn.
 </param>
 <param name=' style'>
    A FontStyle that represents style information about the text (bold, italic, and so on).
 </param>
 <param name=' emSize'>
    A value that specifies the height of the Em square box that bounds the character.
 </param>
 <param name=' layoutRect'>
    A <see cref='System.Drawing.Rectangle'/> that represents the rectangle that bounds the text.
 </param>
 <param name=' format'>
    A <see cref='System.Drawing.StringFormat'/> that specifies formatting information, such as line spacing and alignment, for the text.
 </param>
   </doc>
   <doc for="GraphicsPath.Transform">
 <summary>
    Applies a transform matrix to this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </summary>
 <param name='matrix'>
    A <see cref='System.Drawing.Drawing2D.Matrix'/> that represents the transformation to apply.
 </param>
 <remarks>
    The transformation can scale, translate,
    rotate, or skew the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </remarks>
   </doc>
   <doc for="GraphicsPath.GetBounds">
 <overload>
    <para>
       Returns a rectangle that
       bounds this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </overload>
 <summary>
    <para>
       Returns a rectangle that bounds this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
    </para>
 </summary>
 <returns>
    A <see cref='System.Drawing.RectangleF'/> that represents a rectangle
    that bounds this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </returns>
   </doc>
   <doc for="GraphicsPath.GetBounds1">
 <summary>
    <para>
       Returns a rectangle that bounds this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> when it
       is transformed by the specified <see cref='System.Drawing.Drawing2D.Matrix'/>.
    </para>
 </summary>
 <param name='matrix'>
    The <see cref='System.Drawing.Drawing2D.Matrix'/> by which to transform the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
 <returns>
    A <see cref='System.Drawing.RectangleF'/> that represents a rectangle
    that bounds this <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </returns>
   </doc>
   <doc for="GraphicsPath.GetBounds2">
 <summary>
    <para>
       Returns a rectangle that bounds this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> when it is
       transformed by the specified <see cref='System.Drawing.Drawing2D.Matrix'/>. and drawn with the specified <see cref='System.Drawing.Pen'/>.
    </para>
 </summary>
 <param name=' matrix'>
    The <see cref='System.Drawing.Drawing2D.Matrix'/> by which to transform the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
 <param name=' pen'>
    The <see cref='System.Drawing.Pen'/> with which to draw the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>.
 </param>
   </doc>
   <doc for="GraphicsPath.Flatten">
 <overload>
    Converts each curve in
    this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> into a sequence of connected line
    segments.
 </overload>
 <summary>
    Converts each curve in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> into a sequence of connected line
    segments.
 </summary>
   </doc>
   <doc for="GraphicsPath.Flatten1">
 <summary>
    Converts each curve in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> into a sequence of connected line
    segments.
 </summary>
 <param name='matrix'>
    A <see cref='Matrix'/> by which to transform this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> before flattening.
 </param>
   </doc>
   <doc for="GraphicsPath.Flatten2">
 <summary>
    Converts each curve in this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> into a sequence of connected line
    segments.
 </summary>
 <param name='matrix'>
    A <see cref='Matrix'/> by which to transform this <see cref='System.Drawing.Drawing2D.GraphicsPath'/> before flattening.
 </param>
 <param name='flatness'>
    A value between 0 and 1 that specifies how flat the curves are. A value of 0 flattens curves completely, a value of 1 does nothing, and values greater than 1 amplifies the peaks in the path.
 </param>
   </doc>
   <doc for="GraphicsPath.Widen">
 <overload>
    <para>
       Adds an additional outline to the <see cref='System.Drawing.Drawing2D.GraphicsPath'/>
       .
    </para>
 </overload>
 <summary>
 </summary>
   </doc>
   <doc for="GraphicsPath.Widen1">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.Widen2">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.Warp">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.Warp1">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.Warp2">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.Warp3">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.PointCount">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.PathTypes">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="GraphicsPath.PathPoints">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
</docs>

