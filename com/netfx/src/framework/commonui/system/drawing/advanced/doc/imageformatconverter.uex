<docs>
   <doc for="ImageFormatConverter">
 <summary>
      ImageFormatConverter is a class that can be used to convert
      colors from one data type to another.  Access this
      class through the TypeDescriptor.
 </summary>
   </doc>
   <doc for="ImageFormatConverter.ImageFormatConverter">
 <summary>
    <para>[To be supplied.]</para>
 </summary>
   </doc>
   <doc for="ImageFormatConverter.CanConvertFrom">
 <summary>
      Determines if this converter can convert an object in the given source
      type to the native type of the converter.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='sourceType'>
      The type you wish to convert from.
 </param>
 <returns>
      True if this object can perform the conversion.
 </returns>
   </doc>
   <doc for="ImageFormatConverter.CanConvertTo">
 <summary>
    <para>Gets a value indicating whether this converter can
       convert an object to the given destination type using the context.</para>
 </summary>
 <param name='context'><para>An <see cref='System.ComponentModel.ITypeDescriptorContext'/> that provides a format context. </para></param>
 <param name='destinationType'>A <see cref='System.Type'/> that represents the type you wish to convert to.</param>
 <returns>
 <para><see langword='true '/>if this converter can perform the conversion; otherwise, 
 <see langword='false'/>. </para>
 </returns>
 <remarks>
 <para>The <paramref name="context"/> parameter can be used to extract additional information 
    about the environment this converter is being invoked from. This can be
 <see langword='null'/>, so always check. Also, properties on the context object 
    can return <see langword='null'/>.</para>
 <note type="inheritinfo">
    Override this method to provide your own conversion requirements.
 </note>
 </remarks>
 <seealso cref='System.ComponentModel.ITypeDescriptorContext'/>
   </doc>
   <doc for="ImageFormatConverter.ConvertFrom">
 <summary>
      Converts the given object to the converter's native type.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='culture'>
      Culture to use to perform the conversion
 </param>
 <param name='value'>
      The object to convert.
 </param>
 <returns>
      The converted object.  This will throw an excetpion if the converson
      could not be performed.
 </returns>
   </doc>
   <doc for="ImageFormatConverter.ConvertTo">
 <summary>
      Converts the given object to another type.  The most common types to convert
      are to and from a string object.  The default implementation will make a call
      to ToString on the object if the object is valid and if the destination
      type is string.  If this cannot convert to the desitnation type, this will
      throw a NotSupportedException.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <param name='culture'>
      Culture to use to perform the conversion
 </param>
 <param name='value'>
      The object to convert.
 </param>
 <param name='destinationType'>
      The type to convert the object to.
 </param>
 <returns>
      The converted object.
 </returns>
   </doc>
   <doc for="ImageFormatConverter.GetProperties">
 <summary>
      Retrieves the properties for the available image formats.
 </summary>
   </doc>
   <doc for="ImageFormatConverter.GetStandardValues">
 <summary>
      Retrieves a collection containing a set of standard values
      for the data type this validator is designed for.  This
      will return null if the data type does not support a
      standard set of values.
 </summary>
 <param name='context'>
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
 <returns>
      A collection containing a standard set of valid values,
      or null.  The default implementation always returns null.
 </returns>
   </doc>
   <doc for="ImageFormatConverter.GetStandardValuesSupported">
 <summary>
      Determines if this object supports a standard set of values
      that can be picked from a list.
 </summary>
 <param name='context'>
      A type descriptor through which additional context may be provided.
 </param>
 <returns>
      Returns true if GetStandardValues should be called to find
      a common set of values the object supports.
 </returns>
   </doc>
</docs>

