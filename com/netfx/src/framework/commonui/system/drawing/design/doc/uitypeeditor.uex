<docs>
	<doc for="UITypeEditor.UITypeEditor">
		<summary>
      In this static constructor we provide default UITypeEditors to
      the TypeDescriptor.
 </summary>
	</doc>
	<doc for="UITypeEditor.UITypeEditor1">
		<summary>
			<para>Initializes
       a new instance of the <see cref="System.Drawing.Design.UITypeEditor"/> class.</para>
		</summary>
	</doc>
	<doc for="UITypeEditor.GetPaintValueSupported">
		<overload>
			<para> Indicates whether this editor supports painting a
      representation of an object's value.</para>
		</overload>
		<summary>
			<para> Indicates whether this editor supports painting a
      representation of an object's value.</para>
		</summary>
		<returns>
			<para><see langword="true"/>
if <see cref="System.Drawing.Design.UITypeEditor.PaintValue"/> is implemented;
otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.Drawing.Design.UITypeEditor.PaintValue"/>
	</doc><doc for="UITypeEditor.GetPaintValueSupported1">
		<summary>
			<para> Indicates whether the specified context supports painting a representation of an object's value
      within the specified context.</para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
		<returns>
			<para><see langword="true"/>
if <see cref="System.Drawing.Design.UITypeEditor.PaintValue"/> is implemented; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
		<seealso cref="System.Drawing.Design.UITypeEditor.PaintValue"/>
	</doc><doc for="UITypeEditor.EditValue1">
		<summary>
			<para>Edits the specified object's value using the editor style
      indicated by <see cref="System.Drawing.Design.UITypeEditor.GetEditStyle"/>.</para>
		</summary>
		<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
		<param name="provider">An <see cref="System.IServiceProvider"/> that this editor can use to obtain services.</param>
		<param name="value">The object to edit.</param>
		<returns>
			<para>The new value of the object.</para>
		</returns>
		<remarks>
			<para> A service provider is provided so that the editor
      can obtain any required services.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
		<seealso cref="System.IServiceProvider"/>
	</doc><doc for="UITypeEditor.GetEditStyle1">
		<summary>
			<para>Gets the editor style used by the <see cref="System.Drawing.Design.UITypeEditor.EditValue"/> method.</para>
		</summary>
		<param name="context">An <see cref="System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
		<returns>
			<para> A <see cref="System.Drawing.Design.UITypeEditorEditStyle"/> value that
   indicates the style of editor used by <see cref="System.Drawing.Design.UITypeEditor.EditValue"/>. If the <see cref="System.Drawing.Design.UITypeEditor"/> does not support this
   method, then <see cref="System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="System.Drawing.Design.UITypeEditorEditStyle.None"/>.</para>
		</returns>
		<seealso cref="System.Drawing.Design.UITypeEditorEditStyle"/>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="UITypeEditor.GetEditStyle">
		<overload>
			<para>Gets the editor style used by
      the <see cref="System.Drawing.Design.UITypeEditor.EditValue"/> method.</para>
		</overload>
		<summary>
			<para>Gets the editor style used by the <see cref="System.Drawing.Design.UITypeEditor.EditValue"/> method.</para>
		</summary>
		<returns>
			<para> A <see cref="System.Drawing.Design.UITypeEditorEditStyle"/> enumeration 
   value that indicates the style of editor used by the current <see cref="System.Drawing.Design.UITypeEditor"/>. By default, this method will return
<see cref="System.Drawing.Design.UITypeEditorEditStyle.None"/> .</para>
		</returns>
		<remarks>
			<para>If a <see cref="System.Drawing.Design.UITypeEditor"/> does not overrride and implement this 
   method, <see cref="System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="System.Drawing.Design.UITypeEditorEditStyle.None"/> by default.</para>
		</remarks>
		<seealso cref="System.Drawing.Design.UITypeEditorEditStyle"/>
	</doc><doc for="UITypeEditor.EditValue">
		<overload>
			<para>Edits the value of the specified object using the editor style indicated by <see cref="System.Drawing.Design.UITypeEditor.GetEditStyle"/>.</para>
		</overload>
		<summary>
			<para>Edits the value of the specified object using the editor style
      indicated by <see cref="System.Drawing.Design.UITypeEditor.GetEditStyle"/>.</para>
		</summary>
		<param name="provider">An <see cref="System.IServiceProvider"/> that this editor can use to obtain services.</param>
		<param name="value">The object to edit.</param>
		<returns>
			<para>The new value of the object.</para>
		</returns>
		<remarks>
			<para>This method launches the user-interface for value 
      editing, and is called by the Properties window when a user attempts to edit
      the value of a type that this editor is configured to edit the value of. A
      service provider is provided so that the editor can obtain any
      required services.</para>
		</remarks>
		<seealso cref="System.IServiceProvider"/>
	</doc><doc for="UITypeEditor.PaintValue">
		<overload>
			<para> Paints a representation of the value of an object.</para>
		</overload>
		<summary>
			<para>Paints a representation of the value of the specified object to the specified
      canvas.</para>
		</summary>
		<param name="value">The object whose value this type editor will display.</param>
		<param name="canvas">A drawing canvas on which to paint the representation of the object's value.</param>
		<param name="rectangle">A <see cref="System.Drawing.Rectangle"/> within whose boundaries to paint the value. </param>
		<remarks>
			<para> Editors should paint within the boundaries of the
      specified rectangle. This rectangle indicates the area of the Properties window to draw a representation of the value within.</para>
		</remarks>
	</doc><doc for="UITypeEditor.PaintValue1">
		<summary>
			<para> Paints a representation of the value of an
      object using the specified <see cref="System.Drawing.Design.PaintValueEventArgs"/>.</para>
		</summary>
		<param name="e">A <see cref="System.Drawing.Design.PaintValueEventArgs"/> that indicates what to paint and where to paint it.</param>
		<remarks>
			<para> Editors should paint within the boundaries of the
      specified rectangle. This rectangle indicates the area of the Properties window to draw a representation of the value
      within.</para>
		</remarks>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
	</doc><doc for="UITypeEditor">
		<summary>
			<para> Provides a base class that can be used to design
      value editors that can provide a user interface for representing and
      editing the values of objects of the supported data type(s).</para>
		</summary>
		<remarks>
			<para><see cref="System.Drawing.Design.UITypeEditor"/> provides a base class that
   you can derive from and extend to implement a custom type
   editor for the design-time environment. Custom type editors are useful in
   situations where a text-box value editor is insufficient to effectively select the values
   of certain types. </para>
			<para> To implement a custom design-time UI type editor, you must at least:</para>
			<list type="bullet"><item>
					<term>
      
      Define a class that derives from
   <see langword="System.Drawing.Design.UITypeEditor"/>.</term>
				</item>
				<item>
					<term>
      
      Override the <see cref="System.Drawing.Design.UITypeEditor.EditValue"/> method to handle the user
      interface, user input processing, and value assignment.</term>
				</item>
				<item>
					<term>
      
      Override the <see cref="System.Drawing.Design.UITypeEditor.GetEditStyle"/> method to inform
      the Properties window of the
      type of editor style that the editor will use.</term>
				</item>
			</list>
			<para>You can add additional support for painting a value's representation
   in the Properties window by implementing the following:</para>
			<list type="bullet"><item>
					<term>
      
      Override <see cref="System.Drawing.Design.UITypeEditor.GetPaintValueSupported"/> to indicate that the
      editor supports displaying the value's representation.</term>
				</item>
				<item>
					<term>
      
      Override <see cref="System.Drawing.Design.UITypeEditor.PaintValue"/> to implement the display
      of the value's representation.</term>
				</item>
				<item>
					<term>
      
      Override the <see cref="System.Drawing.Design.UITypeEditor"/> constructor method if the
      editor should have initialization behavior.</term>
				</item>
			</list>
			<para>For more information about enhancing design-time support, see <see topic="cpconEnhancingDesign-TimeSupport"/>. For more information on
implementing a <see cref="System.Drawing.Design.UITypeEditor"/>, see <see topic="cpconImplementingUITypeEditor"/>.</para>
		</remarks>
		<example>
			<para>The following example <see cref="System.Drawing.Design.UITypeEditor"/> can be associated with
   an integer, double, or float property using an <see cref="System.ComponentModel.EditorAttribute"/> to provide an angle selection interface
   from the properties window in design mode. This example uses
   the <see cref="System.Windows.Forms.Design.IWindowsFormsEditorService"/>
   interface to display a drop-down control in the properties window in design mode.
   Compile the code and add the assembly to the toolbox using the <SpecialLocalizableItem kind="UIElement">Customize Toolbox</SpecialLocalizableItem> command on
the <SpecialLocalizableItem kind="UIElement">Tools</SpecialLocalizableItem> menu of Visual Studio .NET.
Create an instance of the <c>AngleTestControl</c> and click the drop-down button next to the Angle property in the properties
window to configure the property using the editor.</para>
			<codelink SampleID="AngleEditor" SnippetID="1"/>
		</example>
		<seealso cref="System.ComponentModel.ITypeDescriptorContext"/>
		<seealso cref="System.IServiceProvider"/>
	</doc>
</docs>
