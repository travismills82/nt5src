<docs>
	<doc for="Registry.CurrentUser">
		<summary>
			<para> Contains information about the current user preferences. This field
      reads the Windows registry base key HKEY_CURRENT_USER
      </para>
		</summary>
		<remarks>
			<para>Information stored in this key includes the settings of environment variables and
      data about program groups, colors, printers, network connections, and application
      preferences. This key makes it easier to establish the current user's
      settings. In this key, software vendors store the current
      user-specific preferences to be used within their applications. Microsoft, for
      example, creates the HKEY_CURRENT_USER\Software\Microsoft key for its
      applications to use, with each application creating its own subkey under the
      Microsoft key. </para>
		</remarks>
		<example>
			<para> The following example demonstrates how to retrieve the subkeys of this key,
      and prints their names to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create an instance of the particular
      subkey of interest. You can then use other operations in <see cref="Microsoft.Win32.RegistryKey"/> to
      manipulate that key.</para>
			<codelink SampleID="Classic Registry.CurrentUser Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Registry.LocalMachine">
		<summary>
			<para> Contains the configuration data for the local machine. This
      field reads the Windows registry base key HKEY_LOCAL_MACHINE.</para>
		</summary>
		<remarks>
			<para><see langword="LocalMachine"/> contains five keys:</para>
			<list type="termdef">
				<item>
					<term> 
         Hardware </term>
					<description> Describes the physical
         hardware in the computer, the way device drivers use that hardware, and
         mappings and related data that link kernel-mode drivers with user-mode
         code. All data in this key is recreated each time the system is started.
         The Description subkey describes the actual computer hardware. The
         DeviceMap subkey contains miscellaneous data in formats specific to
         particular classes of drivers. The ResourceMap subkey describes which
         device drivers claim which hardware resources. The Windows NT Diagnostics
         program (Winmsdp.exe) can report on its contents in an easy-to-read
         form.</description>
				</item>
				<item>
					<term> 
         SAM</term>
					<description> The directory services database of security
         information for user and group accounts, and for the domains in Windows 2000 Server (SAM
         is the Security Account Manager, known as the directory services
         database).</description>
				</item>
				<item>
					<term> 
         Security </term>
					<description> Contains the local security
         policy, such as specific user rights. This key is used only by the Windows 2000
         security subsystem.</description>
				</item>
				<item>
					<term> 
         Software </term>
					<description>The per-computer software database. This key contains
         data about software installed on the local computer, along with various
         items of miscellaneous configuration data.</description>
				</item>
				<item>
					<term> 
         System </term>
					<description> Controls system startup, device
         driver loading, Windows 2000 services, and operating system behavior. </description>
				</item>
			</list>
			<para>By convention, if similar data exists under <see cref="Microsoft.Win32.Registry.CurrentUser"/> and under
<see cref="Microsoft.Win32.Registry.LocalMachine"/> , the data in
<see cref="Microsoft.Win32.Registry.CurrentUser"/> 
takes
precedence. However, values in this key can also extend (rather than replace)
data in Registry.LocalMachine. Also, some items (such as device driver loading
entries) are meaningless if they occur outside of Registry.LocalMachine.</para>
		</remarks>
		<example>
			<para> The following example demonstrates how to retrieve the subkeys of this
      key, and prints their names to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create an instance of the particular
      subkey of interest. You can then use other operations in <see cref="Microsoft.Win32.RegistryKey"/> to
      manipulate that key.</para>
			<codelink SampleID="Classic Registry.LocalMachine Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Registry.ClassesRoot">
		<summary>
			<para> Defines the types (or classes) of documents and the properties associated
      with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.
      </para>
		</summary>
		<remarks>
			<para>Both conventional applications and OLE applications use data that is stored under
      this key. This key also provides backward compatibility with the Windows 3.1
      registration database by storing information for DDE and OLE support. File viewers
      and user interface extensions store their OLE class identifiers in this
      key, and processing servers are registered in this key.</para>
		</remarks>
		<example>
			<para> The
      following example demonstrates how to retrieve the subkeys of this key, and prints
      their names to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create an instance of the
      particular subkey of interest. You can then use other operations in <see cref="Microsoft.Win32.RegistryKey"/> to
      manipulate that key.</para>
			<codelink SampleID="Classic Registry.ClassesRoot Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Registry.Users">
		<summary>
			<para> Contains information about the default user configuration. This field reads
      the Windows registry base key HKEY_USERS.
      </para>
		</summary>
		<remarks>
			<para>This key contains a branch for each user of the computer. The default configuration is
      supplied for new users on the local computer and for the default current
      user if the user has not changed preferences. Because Windows 98/ME also
      supports Registry.Users, applications can access the user-specific information
      the same way they do under Windows 2000. Each user's information is stored
      in a separate file, which can be stored locally or on a network server. Windows
      98/ME can copy this file to the user's current system so that settings can
      move from one computer to another with the user. </para>
		</remarks>
		<example>
			<para> The following
      example demonstrates how to retrieve the subkeys of this key, and prints their names
      to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create an instance
      of the particular subkey of interest. You can then use other operations in
   <see cref="Microsoft.Win32.RegistryKey"/> to manipulate that key.</para>
			<codelink SampleID="Classic Registry.Users Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Registry.PerformanceData">
		<summary>
			<para> Contains performance information for software components. This field reads
      the Windows registry base key HKEY_PERFORMANCE_DATA.
      </para>
		</summary>
		<remarks>
			<para> Each software component creates keys for its objects,
      counters when it is installed, and writes counter data while it is executing. You
      can access this data as you would access any other registry data, using
      the <see cref="Microsoft.Win32.RegistryKey"/>
      
      functions.</para>
			<para>Although you use the registry to collect performance data,
      the data is not stored in the registry database. Instead, accessing the registry
      with this key causes the system to collect the data
      from the appropriate system object managers.</para>
			<para>To obtain performance data from the local system, use
      the <see cref="Microsoft.Win32.RegistryKey.GetValue"/> method, with the Registry.PerformanceData
      key. The first call opens the key (you do not need to explicitly open the key
      first). However, be sure to use the <see cref="Microsoft.Win32.RegistryKey.Close"/> method to close the handle to
      the key when you are finished obtaining performance data. The user cannot
      install or remove a software component while its performance data is in use.</para>
			<para>To obtain performance data from a remote system, you
      must use the <see cref="Microsoft.Win32.RegistryKey.OpenRemoteBaseKey"/> method, with the computer name
      of the remote system and the Registry.PerformanceData key. This call retrieves a
      key representing the performance data for the remote system. To retrieve the
      data, call <see cref="Microsoft.Win32.RegistryKey.GetValue"/> using this key, rather than the
      Registry.PerformanceData key.</para>
		</remarks>
		<example>
			<para> The following example demonstrates how to retrieve the subkeys of this
      key, and prints their names to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create an instance of the
      particular subkey of interest. You can then use other operations in <see cref="Microsoft.Win32.RegistryKey"/> to
      manipulate that key.
      Note that this example can often return no results, since there might be
      no performance data.</para>
			<codelink SampleID="Classic Registry.PerformanceData Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Registry.CurrentConfig">
		<summary>
			<para> Contains configuration information pertaining to the
      hardware that is not specific to the user. This
      field reads the Windows registry base key HKEY_CURRENT_CONFIG.
      </para>
		</summary>
		<remarks>
			<para>This member is mapped to a subkey within <see cref="Microsoft.Win32.Registry.LocalMachine"/>.</para>
			<para> An example of using this member is an application that stores a
   different server name for its data depending on whether the system is attached
   to a network. </para>
		</remarks>
		<example>
			<para> The following
      example demonstrates how to retrieve the subkeys of this key, and prints
      their names to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create
      an instance of the particular subkey of interest. You can then use other
      operations in <see cref="Microsoft.Win32.RegistryKey"/> to manipulate that key.</para>
			<codelink SampleID="Classic Registry.CurrentConfig Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Registry">
		<summary>
			<para> Supplies the base <see langword="Registrykeys"/> that access
   values and subkeys in the registry.
   </para>
		</summary>
		<remarks>
			<para> This class provides the set of standard root keys found in the
      registry on machines running Windows. The registry is a storage
      facility for information about applications, users, and default system settings. For example, applications can
      use the registry for storing information that needs to be preserved once the
      application is closed, and access that same information when
      the application is reloaded. For instance, you can store color preferences, screen locations,
      or the size of the window. You can control this for
      each user by storing the information in a different location in the
      registry. </para>
			<para> The base (root) <see cref="Microsoft.Win32.RegistryKey"/> instances that are exposed by
<see langword="Registry"/> delineate the basic storage mechanism for subkeys and 
   values in the registry. The keys are all readonly since the registry depends on
   their existence. The keys exposed by <see langword="Registry"/>
   
   are:</para>
			<list type="termdef">
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.CurrentUser"/></term>
					<description>Stores information about user preferences. </description>
				</item>
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.LocalMachine"/></term>
					<description>Stores configuration information for the local machine. </description>
				</item>
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.ClassesRoot"/></term>
					<description>Stores information about types (and classes) and their
   properties.</description>
				</item>
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.Users"/></term>
					<description>Stores information about the default user
   configuration.</description>
				</item>
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.PerformanceData"/></term>
					<description>Stores performance information for software
   components.</description>
				</item>
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.CurrentConfig"/></term>
					<description>Stores non-user-specific hardware
   information.</description>
				</item>
				<item>
					<term>
						<see cref="Microsoft.Win32.Registry.DynData"/></term>
					<description>Stores dynamic data.</description>
				</item>
			</list>
			<para>Once you have identified the root key under which you want to store/retrieve information from the
   registry, you can use the <see cref="Microsoft.Win32.RegistryKey"/> class to add
   or remove subkeys, and manipulate the values for a given key.</para>
			<para>Hardware devices can place information in the registry automatically using
   the Plug and Play interface. Software for installing device drivers can place
   information in the registry by writing to standard APIs.</para>
		</remarks>
		<seealso cref="Microsoft.Win32.RegistryHive"/>
		<seealso cref="Microsoft.Win32.RegistryKey"/>
	</doc>
	<doc for="Registry.DynData">
		<summary>
			<para> Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.
      </para>
		</summary>
		<remarks>
			<para>The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic
      data (which changes frequently, such as performance statistics). This dynamic data
      area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time
      data to Win32 applications that can run remotely as well as locally. It
      also allows the system monitor to provide performance statistics on remote Windows
      98/Windows Me systems.</para>
			<para> VxDs are not limited to performance data. They can provide any data they want to
      pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU. The registry supports dynamic
      data by storing a pointer to a function that returns a value (or many
      values). When a Registry call queries values associated with a dynamic key, that
      function is called to return the desired value or values. </para>
			<note type="note">
      Dynamic
      keys were introduced
      in Microsoft Windows 95 to handle dynamic Registry data. They are supported
      only in Windows 98/Windows Me.
      
   </note>
		</remarks>
		<example>
			<para> The following
      example demonstrates how to retrieve the subkeys of this key, and prints their names
      to the screen. Use the <see cref="Microsoft.Win32.RegistryKey.OpenSubKey"/> method to create an instance of the
      particular subkey of interest. You can then use other operations in <see cref="Microsoft.Win32.RegistryKey"/>
      to manipulate that key. Note that this
      example can return no results, since there might not be dynamic data available, or
      you might not be running Windows 98/ME. Using this key may cause an error
      on other systems.</para>
			<codelink SampleID="Classic Registry.DynData Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
