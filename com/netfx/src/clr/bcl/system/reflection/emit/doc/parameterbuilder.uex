<docs>
	<doc for="ParameterBuilder.GetToken">
		<summary>
			<para>
       Retrieves the token for this parameter.
    </para>
		</summary>
		<returns>
			<para>
       Returns the token for this parameter.
    </para>
		</returns>
	</doc>
	<doc for="ParameterBuilder.Name">
		<summary>
			<para>
       Retrieves the name of this parameter.
    </para>
		</summary>
		<value>
			<para>
       Read-only. Retrieves the name of this parameter.
    </para>
		</value>
	</doc>
	<doc for="ParameterBuilder.Position">
		<summary>
			<para>
       Retrieves the signature position for this parameter.
    </para>
		</summary>
		<value>
			<para>
       Read-only. Retrieves the signature position for this parameter.
    </para>
		</value>
	</doc>
	<doc for="ParameterBuilder.SetCustomAttribute1">
		<summary>
			<para> Set a custom attribute using a custom attribute builder.
      </para>
		</summary>
		<param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/>is <see langword="null"/>. </exception>
	</doc><doc for="ParameterBuilder.SetMarshal">
		<summary>
			<para> Specifies the marshaling for this parameter.
      </para>
		</summary>
		<param name="unmanagedMarshal">The marshaling information for this parameter. </param>
		<exception cref="System.ArgumentNullException"><paramref name="unmanagedMarshal "/>is <see langword="null"/>. </exception>
		<remarks>
			<para> This method should throw the following exception but currently does not:
      </para>
			<para><see cref="System.InvalidOperationException"/>
if the containing type has been created using TypeBuilder.CreateType().</para>
		</remarks>
	</doc><doc for="ParameterBuilder.SetConstant">
		<overload>
			<para> Sets the default value of the parameter.
      </para>
		</overload>
		<summary>
			<para> Sets the default value of the parameter.
      </para>
		</summary>
		<param name="defaultValue">The default value of this parameter. </param>
		<exception cref="System.ArgumentException">The type of <paramref name="defaultValue"/> is not one of the types mentioned in the remarks section.</exception>
		<remarks>
			<para><paramref name="defaultValue"/> is restricted
   to the following types: <see langword="Boolean"/>, <see langword="SByte"/>,
<see langword="Int16"/>, <see langword="Int32"/>, <see langword="Int64"/>, 
<see langword="Byte"/>, <see langword="UInt16"/>, <see langword="UInt32"/>, 
<see langword="UInt64"/>, <see langword="Single"/>, <see langword="Double"/>, 
<see langword="DateTime"/>, <see langword="Char"/>, <see langword="String"/>, and 
<see langword="Enum"/>. If the type of the parameter is <see langword="Decimal "/>or <see langword="Object"/> , <paramref name="defaultValue"/> can only be null.</para>
		</remarks>
	</doc><doc for="ParameterBuilder.IsIn">
		<summary>
			<para> Retrieves whether this is an input parameter.
      </para>
		</summary>
		<value>
			<para> Read-only. Retrieves whether this is an input parameter.
      </para>
		</value>
		<remarks>
			<para> This method depends on an optional metadata flag. This flag
      can be inserted by compilers, but the compilers are not obligated to do so.
      </para>
		</remarks>
	</doc><doc for="ParameterBuilder.Attributes">
		<summary>
			<para> Retrieves the attributes for this parameter.
      </para>
		</summary>
		<value>
			<para> Read-only. Retrieves the attributes for this parameter.
      </para>
		</value>
		<remarks>
   The values of the attribute correspond to
   the values of the <see cref="System.Reflection.ParameterAttributes"/> enumeration.
</remarks>
	</doc><doc for="ParameterBuilder.IsOut">
		<summary>
			<para> Retrieves whether this parameter is an output parameter.
      </para>
		</summary>
		<value>
			<para> Read-only. Retrieves whether this parameter is an output parameter.
      </para>
		</value>
	</doc><doc for="ParameterBuilder.IsOptional">
		<summary>
			<para> Retrieves whether this parameter is optional.
      </para>
		</summary>
		<value>
			<para> Read-only. Specifies whether this parameter is optional.
      </para>
		</value>
	</doc><doc for="ParameterBuilder.SetCustomAttribute">
		<overload>
			<para>Sets a custom attribute.</para>
		</overload>
		<summary>
			<para> Set a custom attribute using a specified custom attribute blob.
      </para>
		</summary>
		<param name="con">The constructor for the custom attribute. </param>
		<param name="binaryAttribute">A byte blob representing the attributes. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>. </exception>
		<remarks>
			<para> See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition
      II documentation is included with the .NET Framework SDK installation, and can
      be found in the %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs
      directory.
      </para>
		</remarks>
	</doc>
	<doc for="ParameterBuilder">
		<summary>
			<para> Creates or associates parameter information.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para>Parameter attributes need to consistent with the method
      signature. If you specify <see langword="Out"/>
      attributes for a parameter, you should ensure that
      the type of that method parameter is a <see langword="ByRef "/>
      type. </para>
   Some <see cref="System.Reflection.Emit.ParameterBuilder"/> attributes require that you call <see cref="System.Reflection.Emit.TypeBuilder.DefineMethod"/> with viable parameters in
   order for the Microsoft intermediate language (MSIL) to work correctly at runtime. For example, if you define
   a <see cref="System.Reflection.Emit.ParameterBuilder"/> with ParameterAttributes.Out for
   parameter 1 of a <see langword="MethodBuilder"/>
   , then parameter 1 of <see cref="System.Reflection.Emit.MethodBuilder"/>
   must be a reference such as Type.GetType("System.String&amp;"),
   rather than Type.GetType("System.String").
</remarks>
		<example>
			<para>The following example demonstrates how to create a dynamic method with a 
      parameter passed by reference using <see langword="ParameterBuilder"/>.</para>
			<codelink SampleID="System.Reflection.Emit.ParameterBuilder Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
