<docs>
	<doc for="EnumBuilder.DefineLiteral">
		<summary>
			<para>
       Defines the named static field in an
       enumeration type with the specified constant value.
    </para>
		</summary>
		<param name="literalName">
    The name of the static field.
 </param>
		<param name=" literalValue">
    The constant value of the literal.
 </param>
		<returns>
			<para>
       The defined field.
    </para>
		</returns>
		<remarks>
			<para>
       The defined field will have the field
       attributes <see cref="System.Reflection.FieldAttributes.Public"/>, <see cref="System.Reflection.FieldAttributes.Static"/>, and <see cref="System.Reflection.FieldAttributes.Literal"/> set.
    </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.TypeToken">
		<summary>
			<para>
       Returns the internal metadata type token of this
       enum.
    </para>
		</summary>
		<value>
			<para>
       Read-only.
       The type token of this enum.
    </para>
		</value>
	</doc>
	<doc for="EnumBuilder.UnderlyingField">
		<summary>
			<para>
       Returns the underlying field for
       this enum.
    </para>
		</summary>
		<value>
			<para>
       Read-only. The underlying field for this enum.
    </para>
		</value>
	</doc>
	<doc for="EnumBuilder.EnumBuilder">
		<summary>
			<para>
       Returns the internal metadata type token of this
       enum.
    </para>
		</summary>
		<value>
			<para>
       Read-only.
       The type token of this enum.
    </para>
		</value>
	</doc>
	<doc for="EnumBuilder.ReflectedType">
		<summary>
			<para>Returns the type that was used to obtain this <see cref="System.Reflection.Emit.EnumBuilder"/> 
.</para>
		</summary>
		<value>
			<para>Read-only. The type that was used to obtain this <see cref="System.Reflection.Emit.EnumBuilder"/> 
.</para>
		</value>
	</doc><doc for="EnumBuilder.UnderlyingSystemType">
		<summary>
			<para>Returns the underlying system type for this
      enum.</para>
		</summary>
		<value>
			<para>Read-only. Returns the underlying system type.</para>
		</value>
	</doc><doc for="EnumBuilder.IsDefined">
		<summary>
			<para>Checks if the specified custom attribute type is defined. </para>
		</summary>
		<param name="attributeType">The <see langword="Type"/> object to which the custom attributes are applied.</param>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
		<returns>
			<para><see langword="true"/> if one or more instance of <paramref name="attributeType"/> is defined on this member; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
		<remarks>
			<para>As a workaround, to check if a custom attribute is 
      defined for a finished type, retrieve the type using <see cref="System.Type.GetType"/> and call <see cref="System.Reflection.MemberInfo.GetCustomAttributes"/> on the returned
   <see cref="System.Type"/>.</para>
		</remarks>
	</doc><doc for="EnumBuilder.DeclaringType">
		<summary>
			<para> Returns the type that declared this <see cref="System.Reflection.Emit.EnumBuilder"/>.
   </para>
		</summary>
		<value>
			<para>Read-only. The type that declared this <see cref="System.Reflection.Emit.EnumBuilder"/>.</para>
		</value>
	</doc><doc for="EnumBuilder.GetElementType">
		<summary>
			<para>Calling this method always throws <see cref="System.NotSupportedException"/> .</para>
		</summary>
		<returns>
			<para>This method is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. </exception>
	</doc><doc for="EnumBuilder.GetNestedTypes">
		<summary>
			<para>Returns the public and non-public nested types that are declared or inherited by this type. </para>
		</summary>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> , such as <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>An array of <see cref="System.Type"/> objects representing all the types nested within the current <see cref="System.Type"/> that match the specified binding constraints.</para>
			<para>An empty array of type <see cref="System.Type"/>, if no types are nested within the current <see cref="System.Type"/>, or if none of the nested types match the binding constraints.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the nested types of a 
      finished type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.InvokeMember">
		<summary>
			<para>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes. </para>
		</summary>
		<param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
		<param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags"/> . </param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects using reflection. If binder is <see langword="null"/>, the default binder is used. See <see cref="System.Reflection.Binder"/> . </param>
		<param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
		<param name="args">An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
		<param name="modifiers">An array of the same length as <paramref name="args"/> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this. </param>
		<param name="culture">An instance of <see langword="CultureInfo"/> used to govern the coercion of types. If this is null, the <see langword="CultureInfo"/> for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.) </param>
		<param name="namedParameters">Each parameter in the <paramref name="namedParameters"/> array gets the value in the corresponding element in the <paramref name="args"/> array. If the length of <paramref name="args"/> is greater than the length of <paramref name="namedParameters"/> , the remaining argument values are passed in order. </param>
		<returns>
			<para>Returns the return value of the invoked member. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> You can retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or 
<see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.TypeHandle">
		<summary>
			<para> Retrieves the internal handle for this enum.</para>
		</summary>
		<value>
			<para>Read-only. The internal handle for
      this enum.</para>
		</value>
		<exception cref="System.NotSupportedException">This property is not currently supported. </exception>
		<remarks>
			<para> You can retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or 
<see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
			<para>Use this handle to access the underlying metadata handle.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetConstructorImpl">
		<summary>
			<para>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</para>
		</summary>
		<param name="bindingAttr"><para>A bitmask comprised of one or more <see cref="System.Reflection.BindingFlags"/> that specify how the search is conducted. </para><para>-or-</para><para>Zero, to conduct a case-sensitive search for public methods.</para></param>
		<param name="binder"><para>A <see cref="System.Reflection.Binder"/> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para><para>-or-</para><para><see langword="null"/>, to use the <see cref="System.Type.DefaultBinder"/>.</para></param>
		<param name="callConvention">The <see cref="System.Reflection.CallingConventions"/> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
		<param name="types"><para>An array of <see cref="System.Type"/> objects representing the number, order, and type of the parameters for the constructor to get.</para><para>-or-</para><para>An empty array of the type <see cref="System.Type"/> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para></param>
		<param name="modifiers">An array of <see cref="System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array.</param>
		<returns>
			<para>A <see cref="System.Reflection.ConstructorInfo"/> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround to retrieve the constructor of a 
      finished type, you can retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or
   <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetConstructors">
		<summary>
			<para>Returns an array of <see cref="System.Reflection.ConstructorInfo"/> objects representing the public and non-public constructors defined for this class, as specified. </para>
		</summary>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> : <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.ConstructorInfo"/> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the constructor of a 
      finished type, you can retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or
   <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetMethodImpl">
		<summary>
			<para>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</para>
		</summary>
		<param name="name">The <see cref="System.String"/> containing the name of the method to get.</param>
		<param name="bindingAttr"><para>A bitmask comprised of one or more <see cref="System.Reflection.BindingFlags"/> that specify how the search is conducted. </para><para>-or-</para><para>Zero, to conduct a case-sensitive search for public methods.</para></param>
		<param name="binder"><para>A <see cref="System.Reflection.Binder"/> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para><para>-or-</para><para><see langword="null"/>, to use the <see cref="System.Type.DefaultBinder"/>.</para></param>
		<param name="callConvention">The <see cref="System.Reflection.CallingConventions"/> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
		<param name="types"><para>An array of <see cref="System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</para><para>-or-</para><para>An empty array of the type <see cref="System.Type"/> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para></param>
		<param name="modifiers">An array of <see cref="System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array.</param>
		<returns>
			<para>A <see cref="System.Reflection.MethodInfo"/> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the method, retrieve the 
      type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetMethods">
		<summary>
			<para>Returns all the public and non-public methods declared or inherited by this type, as specified. </para>
		</summary>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> , such as <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.MethodInfo"/> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic"/> is used; otherwise, only the public methods are returned. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the methods of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetField">
		<summary>
			<para>Returns the field specified by the given name. </para>
		</summary>
		<param name="name">The name of the field to get. </param>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/>: <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns the <see cref="System.Reflection.FieldInfo"/> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the field of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetFields">
		<summary>
			<para>Returns the public and non-public fields that are declared by this type. </para>
		</summary>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> , such as InvokeMethod, NonPublic, and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.FieldInfo"/> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the field of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetEvents">
		<summary>
			<para>Returns the events for the public events declared or inherited by this type. </para>
		</summary>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.EventInfo"/> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the events of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetPropertyImpl">
		<summary>
			<para>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</para>
		</summary>
		<param name="name">The <see cref="System.String"/> containing the name of the property to get.</param>
		<param name="bindingAttr"><para>A bitmask comprised of one or more <see cref="System.Reflection.BindingFlags"/> that specify how the search is conducted. </para><para>-or-</para><para>Zero, to conduct a case-sensitive search for public properties.</para></param>
		<param name="binder"><para>A <see cref="System.Reflection.Binder"/> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</para><para>-or-</para><para><see langword="null"/>, to use the <see cref="System.Type.DefaultBinder"/>.</para></param>
		<param name="returnType">The return type of the property.</param>
		<param name="types"><para>An array of <see cref="System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.</para><para>-or-</para><para>An empty array of the type <see cref="System.Type"/> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para></param>
		<param name="modifiers">An array of <see cref="System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array.</param>
		<returns>
			<para>A <see cref="System.Reflection.PropertyInfo"/> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the property of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetProperties">
		<summary>
			<para>Returns all the public and non-public properties declared or inherited by this type, as specified. </para>
		</summary>
		<param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> : <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.PropertyInfo"/> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic"/> is used; otherwise, only the public properties are returned. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the properties of a 
      finished type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetMember">
		<summary>
			<para>Returns all the public and non-public members declared or inherited by this type, as specified. </para>
		</summary>
		<param name="name">The name of the member. </param>
		<param name=" type">The type of member that is to be returned.</param>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> : <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.MemberInfo"/> objects representing the public and non-public members defined on this type if <paramref name="nonPublic"/> is used; otherwise, only the public members are returned. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the member of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetMembers">
		<summary>
			<para>Returns all the public and non-public members declared or inherited by this type, as specified. </para>
		</summary>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> : <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.MemberInfo"/> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the members of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetInterfaceMap">
		<summary>
			<para> Returns an interface mapping
      for the interface requested.</para>
		</summary>
		<param name="interfaceType">The type of the interface for which the interface mapping is to be retrieved. </param>
		<returns>
			<para>The requested interface mapping.</para>
		</returns>
		<exception cref="System.ArgumentException">The type does not implement the interface. </exception>
		<remarks>
			<para>As a workaround, to retrieve the interface mapping types 
      of a finished type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or
   <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetEvents1">
		<summary>
			<para>Returns the public and non-public events that are declared by this type. </para>
		</summary>
		<param name="bindingAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> , such as <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an array of <see cref="System.Reflection.EventInfo"/> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the events of a finished 
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type to retrieve the events.
      </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.IsArrayImpl">
		<summary>
			<para>Returns <see langword="false"/>.</para>
		</summary>
		<returns>
			<para> The return value is<see langword=" false"/>.</para>
		</returns>
	</doc>
	<doc for="EnumBuilder.IsPrimitiveImpl">
		<summary>
			<para>Returns <see langword="false"/>.</para>
		</summary>
		<returns>
			<para> The return value is<see langword=" false"/>.</para>
		</returns>
	</doc>
	<doc for="EnumBuilder.IsValueTypeImpl">
		<summary>
			<para>Returns <see langword="true"/>.</para>
		</summary>
		<returns>
			<para> The return value is<see langword=" true"/>.</para>
		</returns>
	</doc>
	<doc for="EnumBuilder.IsCOMObjectImpl">
		<summary>
			<para>Returns <see langword="false"/>.</para>
		</summary>
		<returns>
			<para> The return value is<see langword=" false"/>.</para>
		</returns>
	</doc>
	<doc for="EnumBuilder.HasElementTypeImpl">
		<summary>
			<para>Calling this method always throws <see cref="System.NotSupportedException"/> .</para>
		</summary>
		<returns>
			<para>This method is not supported. No value is returned.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported. </exception>
		<remarks>
			<para>Retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or 
<see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetCustomAttributes">
		<overload>
			<para> Returns the
      custom attributes defined for this constructor.</para>
		</overload>
		<summary>
			<para>Returns all the custom attributes defined
      for this constructor.</para>
		</summary>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
		<returns>
			<para> Returns an array of objects representing all the custom
      attributes of the constructor represented by this <see cref="System.Reflection.Emit.ConstructorBuilder"/>
      instance.
      </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
		<remarks>
			<para>As a workaround, to retrieve the custom attributes of a
      finished type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> and call <see cref="System.Reflection.MemberInfo.GetCustomAttributes"/> on the returned
   <see cref="System.Type"/>.</para>
			<para>The following code sample illustrates the use of 
   <see langword="GetCustomAttribute"/> in the context of <see cref="System.Reflection.Emit.EnumBuilder"/>.
      </para>
			<codelink SampleID="EnumBuilder_SetCustomAttribute2" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetCustomAttributes1">
		<summary>
			<para>Returns the custom attributes identified by
      the given type.</para>
		</summary>
		<param name="attributeType">The <see langword="Type"/> object to which the custom attributes are applied.</param>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
		<returns>
			<para>Returns an array of objects
      representing the attributes of this constructor that are of <see cref="System.Type"/>
				<paramref name="attributeType"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete.</exception>
		<remarks>
			<para>As a workaround, to retrieve the custom attributes of a
      finished type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> and call <see cref="System.Reflection.MemberInfo.GetCustomAttributes" qualify="true"/> on the returned <see cref="System.Type"/>.</para>
			<para>The following code sample illustrates the use of <see langword="GetCustomAttribute"/> in the context of <see cref="System.Reflection.Emit.EnumBuilder"/>. </para>
			<codelink SampleID="EnumBuilder_SetCustomAttribute1" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetInterface">
		<summary>
			<para> Returns the interface implemented (directly or indirectly) by
      this class with the fully-qualified name matching the given interface name.
      </para>
		</summary>
		<param name="name">The name of the interface. </param>
		<param name="ignoreCase">If <see langword="true"/>, the search is case-insensitive. If <see langword="false"/>, the search is case-sensitive. </param>
		<returns>
			<para> Returns a <see cref="System.Type"/> object representing the
   implemented interface. Returns null if no interface matching name is found.
   </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the interface of a finished
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.SetCustomAttribute">
		<overload>
			<para> Sets custom attributes for this constructor.
      </para>
		</overload>
		<summary>
			<para> Sets a custom attribute using a specified custom attribute blob.
      </para>
		</summary>
		<param name="con">The constructor for the custom attribute. </param>
		<param name="binaryAttribute">A byte blob representing the attributes. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>.</exception>
		<remarks>
			<para>See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition II documentation is
      included with the .NET Framework SDK installation, and can be found in the
      %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs directory. </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="SetCustomAttribute"/> in the context of <see cref="System.Reflection.Emit.EnumBuilder"/>, passing a byte blob.</para>
			<codelink SampleID="EnumBuilder_SetCustomAttribute2" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EnumBuilder.SetCustomAttribute1">
		<summary>
			<para> Sets a custom attribute using a custom attribute builder.
      </para>
		</summary>
		<param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/>is <see langword="null"/>. </exception>
		<example>
			<para>The following code sample illustrates the use 
      of<see langword="SetCustomAttribute"/> in the context of <see cref="System.Reflection.Emit.EnumBuilder"/>, passing a <see cref="System.Reflection.Emit.CustomAttributeBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_SetCustomAttribute2" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EnumBuilder">
		<summary>
			<para> Describes
      and represents an enumeration type.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<example>
			<para>The following code sample demonstrates the construction of an enumeration 
      within a dynamic assembly, using <see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_4.cs" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EnumBuilder.CreateType">
		<summary>
			<para> Creates a <see cref="System.Type"/> object for this enum.
   </para>
		</summary>
		<returns>
			<para>A <see cref="System.Type"/> object for this
   enum.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><para> This type has been previously created.</para><para>-or-</para><para> The enclosing type has not been created.</para></exception>
		<example>
		</example>
	</doc>
	<doc for="EnumBuilder.Name">
		<summary>
			<para> Returns the name of this enum.
      </para>
		</summary>
		<value>
			<para> Read-only. The name of this enum.
      </para>
		</value>
		<example>
			<para>The following code sample demonstrates the use of 
      the <see langword="Name"/> property to reference the name of the
      current <see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_5" SnippetID="4"/>
		</example>
	</doc>
	<doc for="EnumBuilder.GUID">
		<summary>
			<para> Returns the GUID of this enum.
      </para>
		</summary>
		<value>
			<para> Read-only. The GUID of this enum.
      </para>
		</value>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<example>
			<para>The following code sample demonstrates the use of 
      the <see langword="GUID"/> property to reference the associated <see cref="System.Guid"/> of the current
   <see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_4.cs" SnippetID="4"/>
		</example>
	</doc>
	<doc for="EnumBuilder.Module">
		<summary>
			<para> Retrieves the dynamic module that contains this <see cref="System.Reflection.Emit.EnumBuilder"/> definition.
   </para>
		</summary>
		<value>
			<para>Read-only. The dynamic module that contains this <see cref="System.Reflection.Emit.EnumBuilder"/>
definition.</para>
		</value>
		<example>
			<para>The following code sample demonstrates the use of the <see langword="Module"/> 
property to reference the parent module of the current
<see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_5" SnippetID="3"/>
		</example>
	</doc>
	<doc for="EnumBuilder.Assembly">
		<summary>
			<para> Retrieves the dynamic assembly that contains this enum definition.</para>
		</summary>
		<value>
			<para>Read-only. The dynamic assembly that contains this enum definition.</para>
		</value>
		<example>
			<para>The following code sample demonstrates the use of 
      the <see langword="Assembly"/> property to reference the parent
      assembly of the current <see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_5" SnippetID="1"/>
		</example>
	</doc>
	<doc for="EnumBuilder.FullName">
		<summary>
			<para> Returns the full path of this enum.</para>
		</summary>
		<value>
			<para> Read-only. The full path of
      this enum.</para>
		</value>
		<remarks>
			<para>The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.AssemblyQualifiedName">
		<summary>
			<para> Returns the full path of this enum
      qualified by the display name of the parent assembly.</para>
		</summary>
		<value>
			<para> Read-only. The full path of
      this enum qualified by the display name of the parent assembly.</para>
		</value>
		<exception cref="System.NotSupportedException">If <see cref="System.Reflection.Emit.EnumBuilder.CreateType"/> has not been called previously.</exception>
		<remarks>
			<para>The format of the returned string is: </para>
			<para>&lt;FullTypeName&gt;, &lt;AssemblyDisplayName&gt; </para>
			<para>See <see cref="System.Reflection.AssemblyName"/> for a description of the format of the display name of an assembly. </para>
		</remarks>
		<example>
			<para>The following code sample demonstrates the use of
      the <see langword="AssemblyQualifiedName"/> property to reference
      the qualified parent assembly name of the current
   <see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_5" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EnumBuilder.Namespace">
		<summary>
			<para>Returns the namespace of this enum.</para>
		</summary>
		<value>
			<para>Read-only. The namespace of this
      enum.</para>
		</value>
		<example>
			<para>The following code sample demonstrates the use of 
      the <see langword="Namespace"/> property to reference the associated
      namespace of the current <see langword="EnumBuilder"/>.</para>
			<codelink SampleID="EnumBuilder_Properties_5" SnippetID="5"/>
		</example>
	</doc>
	<doc for="EnumBuilder.BaseType">
		<summary>
			<para>Returns the parent <see cref="System.Type"/> of this type which is always <see cref="System.Enum"/> .</para>
		</summary>
		<value>
			<para>Read-only. The parent <see cref="System.Type"/> of this type.</para>
		</value>
	</doc>
	<doc for="EnumBuilder.GetInterfaces">
		<summary>
			<para> Returns an array of all the interfaces implemented on this a
      class and its base classes.
      </para>
		</summary>
		<returns>
			<para>Returns an array of <see cref="System.Type"/> objects representing the implemented interfaces. If none are defined, an empty array is returned. </para>
		</returns>
		<remarks>
			<para>As a workaround, to retrieve the interface of a finished type, retrieve the
      type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection
      on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetEvent">
		<summary>
			<para>Returns the event with the specified name. </para>
		</summary>
		<param name="name">The name of the event to get. </param>
		<param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="System.Reflection.BindingFlags"/> : <see langword="InvokeMethod"/>, <see langword="NonPublic"/> , and so on. </param>
		<returns>
			<para>Returns an <see cref="System.Reflection.EventInfo"/> object representing the event declared or inherited by this type with the specified name. If there are no matches, then an empty array is returned. </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para> As a workaround, to retrieve the event of a finished
      type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type.</para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.GetAttributeFlagsImpl">
		<summary>
			<para> Gets the implementation attribute flags.
      </para>
		</summary>
		<returns>
			<para>The implementation attribute flags.</para>
		</returns>
	</doc>
	<doc for="EnumBuilder.GetNestedType">
		<summary>
			<para>Returns the public and non-public nested types that are declared by this type. </para>
		</summary>
		<param name="name">The <see cref="System.String"/> containing the name of the nested type to get.</param>
		<param name="bindingAttr"><para>A bitmask comprised of one or more <see cref="System.Reflection.BindingFlags"/> that specify how the search is conducted. </para><para>-or-</para><para>Zero, to conduct a case-sensitive search for public methods.</para></param>
		<returns>
			<para>A <see cref="System.Type"/> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
		<remarks>
			<para>As a workaround, to retrieve the nested type of a
      finished type, retrieve the type using <see cref="System.Type.GetType" qualify="true"/> or <see cref="System.Reflection.Assembly.GetType" qualify="true"/> and use reflection on the retrieved type. </para>
		</remarks>
	</doc>
	<doc for="EnumBuilder.IsByRefImpl">
		<summary>
			<para>Returns <see langword="false"/>.</para>
		</summary>
		<returns>
			<para>The return value is<see langword=" false"/>.</para>
		</returns>
	</doc>
	<doc for="EnumBuilder.IsPointerImpl">
		<summary>
			<para>Returns <see langword="false"/>.</para>
		</summary>
		<returns>
			<para>The return value is<see langword=" false"/>.</para>
		</returns>
	</doc>
</docs>
