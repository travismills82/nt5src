<docs>
	<doc for="ILGenerator.UsingNamespace">
		<summary>
			<para>Specifies the namespace to be used in evaluating locals
      and watches for the current active lexical scope.</para>
		</summary>
		<param name="usingNamespace">The namespace to be used in evaluating locals and watches for the current active lexical scope</param>
		<exception cref="System.ArgumentException"> Length of <paramref name="usingNamespace"/> is zero.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="usingNamespace"/> is <see langword="null"/>.</exception>
	</doc><doc for="ILGenerator.MarkSequencePoint">
		<summary>
			<para> Marks a sequence point in the Microsoft intermediate language (MSIL)
      stream.
      </para>
		</summary>
		<param name="document">The document for which the sequence point is being defined. </param>
		<param name=" startLine">The line where the sequence point begins. </param>
		<param name=" startColumn">The column in the line where the sequence point begins. </param>
		<param name=" endLine">The line where the sequence point ends. </param>
		<param name=" endColumn">The column in the line where the sequence point ends. </param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="startLine "/>or <paramref name="endLine "/>is &lt;= 0. </exception>
		<remarks>
			<para> Line numbers are
      indexed from 1. Columns are indexed from 0.
      </para>
			<para> The symbolic information normally includes at least one
      Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a
      method, it asks the profiling services for a list of MSIL offsets that should be
      preserved. These MSIL offsets are called <paramref name="sequence points"/>
      .
      </para>
		</remarks>
	</doc><doc for="ILGenerator.Emit1">
		<summary>
			<para>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
		<param name="arg">The character argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes"/> enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit2">
		<summary>
			<para>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
		<param name="arg">The character argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes"/> enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit3">
		<summary>
			<para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
		<param name="arg">The <see langword="Int"/> argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes "/>enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit4">
		<summary>
			<para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
		<param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes "/>enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit5">
		<summary>
			<para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
      metadata token for the given method.</para>
		</summary>
		<param name="opcode">The MSIL instruction to be emitted onto the stream.</param>
		<param name="meth">A <see langword="MethodInfo"/> representing a method.</param>
		<exception cref="System.ArgumentNullException"><paramref name="meth "/>is <see langword="null"/>.</exception>
		<remarks>
			<para>The instruction values are defined in the
   <see langword="OpCodes "/>
   enumeration.</para>
The location of <paramref name="meth"/> is recorded
so that the instruction stream can be patched if necessary when persisting the
module to a portable executable file.
</remarks>
	</doc><doc for="ILGenerator.Emit6">
		<summary>
			<para>Puts the specified instruction and
      a signature token onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
		<param name="signature">A helper for constructing a signature token.</param>
		<exception cref="System.ArgumentNullException"><paramref name="signature "/>is <see langword="null"/>.</exception>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes "/>enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit7">
		<summary>
			<para>Puts the specified instruction and metadata token for
      the specified constructor onto the Microsoft intermediate language (MSIL) stream
      of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
		<param name="con">A <see langword="ConstructorInfo"/> representing a constructor.</param>
		<remarks>
			<para>The instruction values are defined in the
   <see langword="OpCodes"/>
   enumeration.</para>
The location of <paramref name="con"/> is
recorded so that the instruction stream can be patched if necessary when
persisting the module to a PE.
</remarks>
	</doc><doc for="ILGenerator.Emit8">
		<summary>
			<para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by
      the metadata token for the given type.</para>
		</summary>
		<param name="opcode">The MSIL instruction to be put onto the stream.</param>
		<param name="cls">A <see langword="Type"/> .</param>
		<exception cref="System.ArgumentNullException"><paramref name="cls"/> is <see langword="null"/>.</exception>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes"/>
enumeration. The location of <paramref name="cls"/> is recorded so that the token can be patched if
necessary when persisting the module to a portable executable (PE).
</remarks>
	</doc><doc for="ILGenerator.Emit9">
		<summary>
			<para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
		<param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes "/>enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit10">
		<summary>
			<para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
		<param name="arg">The <see langword="Single"/> argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes"/> enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit11">
		<summary>
			<para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream. Defined in the <see langword="OpCodes"/> enumeration.</param>
		<param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes "/>enumeration.
</remarks>
	</doc><doc for="ILGenerator.Emit14">
		<summary>
			<para>Puts the specified instruction and metadata token for
      the specified field onto the Microsoft intermediate language (MSIL) stream
      of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
		<param name="field">A <see langword="FieldInfo"/> representing a field.</param>
		<remarks>
   The instruction values are defined in the
<see langword="OpCodes "/>
enumeration. The location of <paramref name="field"/> is recorded so that the instruction stream can be
patched if necessary when persisting the module to a portable executable (PE).
</remarks>
	</doc><doc for="ILGenerator.Emit15">
		<summary>
			<para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
      metadata token for the given string.</para>
		</summary>
		<param name="opcode">The MSIL instruction to be emitted onto the stream.</param>
		<param name="str">The <see langword="String"/> to be emitted.</param>
		<remarks>
			<para>The instruction values are defined in the
   <see langword="OpCodes"/>
   enumeration. The location of <paramref name="str"/> is recorded for
   future fixups if the module is persisted to a portable executable (PE).</para>
		</remarks>
	</doc><doc for="ILGenerator.Emit16">
		<summary>
			<para> Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by
      the index of the given local
      variable.</para>
		</summary>
		<param name="opcode">The MSIL instruction to be emitted onto the stream.</param>
		<param name="local">A local variable.</param>
		<exception cref="System.ArgumentException"><paramref name="local"/>'s parent method does not match the method associated with this ILGenerator.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="local"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><paramref name="instruction"/> is a single-byte instruction and <paramref name="local"/> represents a local with an index of greater than Byte.MaxValue.</exception>
		<remarks>
			<para>The instruction values are defined in the
   <see langword="OpCodes "/>
   enumeration.</para>
		</remarks>
	</doc><doc for="ILGenerator">
		<summary>
			<para> Generates Microsoft intermediate language (MSIL)
      instructions.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para> MSIL is used as input to a just-in-time (JIT) compiler.</para>
		</remarks>
	</doc><doc for="ILGenerator.BeginExceptionBlock">
		<summary>
			<para> Begins an exception block for a non-filtered exception.
      </para>
		</summary>
		<returns>
			<para> The label for the end of the block. This will leave you in the
      correct place to execute finally blocks or to finish the try.
      </para>
		</returns>
		<remarks>
			<para> Creating an exception block records some information, but does
      not actually emit any Microsoft intermediate language (MSIL) onto the stream.
      </para>
		</remarks>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="BeginExceptionBlock"/> method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.ThrowException Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.BeginCatchBlock">
		<summary>
			<para> Begins a catch block.
      </para>
		</summary>
		<param name="exceptionType">The Type object that represents the exception. </param>
		<exception cref="System.ArgumentException"><para>The catch block is within a filtered exception. </para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="exceptionType "/>is <see langword="null"/> and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located. </exception>
		<exception cref="System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
		<remarks>
			<para>Emits a branch instruction to the end of the current exception block.</para>
			<note type="note">
      If the filter exception block returns
      the <see langword="constant exception_execute_handler"/> (see the documentation
      for the Common Language Infrastructure Instruction Set), the argument to the
   <see langword="BeginCatchBlock"/> is not checked.
      
   </note>
		</remarks>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="BeginCatchBlock"/> method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.ThrowException Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.DeclareLocal">
		<summary>
			<para> Declares
      a local
      variable.
      </para>
		</summary>
		<param name="localType">The <see cref="System.Type"/> of the local variable. </param>
		<returns>
			<para> The
      declared local
      variable.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="localType "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The containing type has been created with <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/>. </exception>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="DeclareLocal"/> method.</para>
			<codelink SampleID="LocalBuilder_Sample_SetLocalSymInfo" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ILGenerator.Emit12">
		<summary>
			<para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space
      to include a label when fixes are done.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
		<param name="label">The label to which to branch from this location.</param>
		<remarks>
			<para>The instruction values are defined in the
   <see langword="OpCodes"/>
   enumeration.</para>
Labels are created using <see cref="System.Reflection.Emit.ILGenerator.DefineLabel"/> and their location within the stream is
fixed by using <see cref="System.Reflection.Emit.ILGenerator.MarkLabel"/>.
If a single-byte instruction is used, the label can represent a jump of at most
127 bytes along the stream. <paramref name="instruction"/> must represent a branch
instruction. Since branches are relative instructions, <paramref name="label"/> will be replaced with the correct offset to branch
during the fixup process.
</remarks>
		<example>
			<para>The code sample below illustrates the creation of a dynamic method with a 
      jump table. The jump table is built using an array of <see cref="System.Reflection.Emit.Label"/>. </para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.Emit Example 2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.Emit13">
		<summary>
			<para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space
      to include a label when fixes are done.</para>
		</summary>
		<param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
		<param name="labels">The array of label objects to which to branch from this location. All of the labels will be used.</param>
		<remarks>
			<para> Emits
      a switch table.</para>
			<para>The instruction values are defined in the
   <see langword="OpCodes"/> enumeration.</para>
   Labels are created using <see cref="System.Reflection.Emit.ILGenerator.DefineLabel"/>
   and their location within the stream is fixed by using <see cref="System.Reflection.Emit.ILGenerator.MarkLabel"/>.
   If a single-byte instruction is used, the label can represent a jump of at most
   127 bytes along the stream. <paramref name="instruction"/> must represent a branch
   instruction. Since branches are relative instructions, <paramref name="label"/> will be replaced with the correct offset to
   branch during the fixup process.
   
</remarks>
		<example>
			<para>The code sample below illustrates the creation of a dynamic method with a 
      jump table. The jump table is built using an array of <see cref="System.Reflection.Emit.Label"/>. </para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.Emit Example 2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.EndExceptionBlock">
		<summary>
			<para> Ends an exception block.
      </para>
		</summary>
		<exception cref="System.InvalidOperationException">The end exception block occurs in an unexpected place in the code stream.</exception>
		<exception cref="System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="EndExceptionBlock"/> method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.ThrowException Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.DefineLabel">
		<summary>
			<para> Declares a new label.
      </para>
		</summary>
		<returns>
			<para> Returns a new label that can be used as a token for branching.
      </para>
		</returns>
		<remarks>
			<para> In order to set the position of the label within the
      stream, you must call <see cref="System.Reflection.Emit.ILGenerator.MarkLabel"/>.
      </para>
			<para>This is just a token and does not yet represent any particular location
      within the stream. </para>
		</remarks>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="DefineLabel"/> method.</para>
			<codelink SampleID="System.Reflection.Emit.Label Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.BeginFaultBlock">
		<summary>
			<para> Begins an exception fault block in the
      Microsoft intermediate
      language (MSIL)
      stream.
      </para>
		</summary>
		<exception cref="System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="BeginFaultBlock"/>.</para>
			<codelink SampleID="ILGenerator_BeginFaultBlock" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ILGenerator.BeginFinallyBlock">
		<summary>
			<para> Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
      </para>
		</summary>
		<exception cref="System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="BeginFinallyBlock"/>.</para>
			<codelink SampleID="ILGenerator_BeginFinallyBlock_2" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ILGenerator.BeginScope">
		<summary>
			<para> Begins a
      lexical scope.
      </para>
		</summary>
		<remarks>
			<para> This method is used to emit symbolic information. Local
      variables declared after <see cref="System.Reflection.Emit.ILGenerator.BeginScope"/> are scoped until the corresponding
   <see cref="System.Reflection.Emit.ILGenerator.EndScope"/>
   is called.
   </para>
			<para>The following code sample illustrates the use of <see langword="BeginScope"/> 
and <see langword="EndScope"/>.</para>
			<codelink SampleID="ILGenerator_Begin_EndScope" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ILGenerator.EndScope">
		<summary>
			<para> Ends a
      lexical scope.
      </para>
		</summary>
		<remarks>
			<para> This method is used to emit symbolic information. It is
      used with <see cref="System.Reflection.Emit.ILGenerator.BeginScope"/>.
      </para>
			<para>The following code sample illustrates the use of <see langword="BeginScope"/> 
and <see langword="EndScope"/>.</para>
			<codelink SampleID="ILGenerator_Begin_EndScope" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ILGenerator.EmitCall">
		<summary>
			<para> Puts a
      call or callvirt instruction onto the Microsoft intermediate language (MSIL) stream.
      </para>
		</summary>
		<param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
		<param name="methodInfo">The method to be called. </param>
		<param name="optionalParameterTypes">The types of the optional arguments if the method is a <see langword="varargs"/> method. </param>
		<exception cref="System.ArgumentNullException"><paramref name="methodInfo"/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The calling convention for the method is not <see langword="varargs"/> but optional parameter types are supplied.</exception>
		<remarks>
			<para>This method cannot be used to call a
      constructor. Instead, use the overloaded <see cref="System.Reflection.Emit.ILGenerator.Emit"/> method that
      takes a <see cref="System.Reflection.ConstructorInfo"/> argument.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates the contextual usage of the
   <see langword="EmitCall"/> method to call a 
      method external to the dynamic class.</para>
			<codelink SampleID="System.Reflection.Emit.AssemblyBuilder.Save Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.BeginExceptFilterBlock">
		<summary>
			<para> Begins
      an exception block for a filtered exception.
      </para>
		</summary>
		<exception cref="System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
		<remarks>
			<para> Emits
      a branch instruction to the end of the current exception block.
      </para>
		</remarks>
		<example>
		</example>
	</doc>
	<doc for="ILGenerator.MarkLabel">
		<summary>
			<para> Marks the Microsoft intermediate language (MSIL) stream's current position with
      the given label.
      </para>
		</summary>
		<param name="loc">The label for which to set an index. </param>
		<exception cref="System.ArgumentException"><para>
				<paramref name="loc "/>represents an invalid index into the label array. </para>
			<para>-or-</para>
			<para> An index for <paramref name="loc "/>has already been defined. </para></exception>
		<remarks>
			<para> A label cannot be defined more than once.
      </para>
		</remarks>
		<example>
			<para> The code sample below demonstrates the contextual usage of
   <see langword="MarkLabel"/> to implement IL branching in a 
      dynamic method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.Emit Example 2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.EmitWriteLine">
		<overload>
			<para>Helper functions to emit a
      call to <see cref="System.Console.WriteLine"/> with different types of values.</para>
		</overload>
		<summary>
			<para> Emits the Microsoft intermediate language (MSIL) to call <see cref="System.Console.WriteLine"/>
with a string.</para>
		</summary>
		<param name="value">The string to be printed. </param>
		<remarks>
			<para>The string must have already been defined. </para>
		</remarks>
		<example>
			<para>The code sample below demonstrates the contextual usage of the
   <see langword="EmitWriteLine"/> method to write a 
      string to the console in a dynamic method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.OpCodes Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.EmitWriteLine2">
		<summary>
			<para> Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="System.Console.WriteLine"/>
with the given field.</para>
		</summary>
		<param name="fld">The field whose value is to be written to the console. </param>
		<exception cref="System.ArgumentException">There is no TextWriter.WriteLine method for the type of the specified field.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="fld "/>is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The type of the field is <see langword="TypeBuilder"/> or <see langword="EnumBuilder"/> .</exception>
		<example>
			<para>The code sample below demonstrates the contextual usage 
      of the <see langword="EmitWriteLine"/> method to write a
      string to the console in a dynamic method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.OpCodes Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.ThrowException">
		<summary>
			<para>Emits an instruction to throw an exception.</para>
		</summary>
		<param name="excType">The class of the type of exception to throw. </param>
		<exception cref="System.ArgumentException"><para><paramref name="excType "/>is not the <see cref="System.Exception"/> class or a derived class of <see cref="System.Exception"/>. </para>
			<para>-or-</para>
			<para>The type does not have a default constructor. </para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="excType "/>is <see langword="null"/>.</exception>
		<example>
			<para> The following code sample demonstrates the contextual usage of
   <see langword="ThrowException"/> to throw an 
      exception inside the IL of a dynamic method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.ThrowException Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.Emit">
		<overload>
			<para>Puts an instruction onto the Microsoft Intermediate Language (MSIL) stream for the
      just-in-time (JIT) compiler.</para>
		</overload>
		<summary>
			<para>Puts the specified instruction onto the stream of instructions.</para>
		</summary>
		<param name="opcode">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream. </param>
		<remarks>
			<para>If the opcode requires an argument, the caller must
      ensure that the argument length matches the length of the declared parameter.
      Otherwise, results will be unpredictable. For example, if the Emit instruction
      requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime
      will emit two additional bytes to the instruction stream. These extra bytes will
      be <see cref="System.Reflection.Emit.OpCodes.Nop"/>
      instructions.</para>
   The instruction values are defined in <see cref="System.Reflection.Emit.OpCodes"/>.
</remarks>
		<example>
			<para>The code sample below demonstrates the use of <see langword="Emit"/> to generate MSIL output via an instance of
<see cref="System.Reflection.Emit.ILGenerator"/>.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.Emit Example 2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.EmitWriteLine1">
		<summary>
			<para> Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="System.Console.WriteLine"/>
with
the given local variable.</para>
		</summary>
		<param name="localBuilder">The local variable whose value is to be written to the console. </param>
		<exception cref="System.ArgumentException">The type of <paramref name="localBuilder "/>is not supported (<see langword="TypeBuilder"/> , for example). </exception>
		<remarks>
			<para>It is an error to call <see langword="EmitWriteLine "/>with a <see langword="LocalBuilder "/>which is not of one of the types for
   which <see cref="System.Console.WriteLine"/>
   implements overloads.</para>
		</remarks>
		<example>
			<para>The code sample below demonstrates the contextual usage
      of the <see langword="EmitWriteLine"/> method to write a
      string to the console in a dynamic method.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.OpCodes Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ILGenerator.EmitCalli">
		<summary>
			<para> Puts a <see cref="System.Reflection.Emit.OpCodes.Calli"/> instruction onto the Microsoft 
   intermediate language (MSIL)
   stream, specifying a managed
   calling
   convention for the indirect call.
   </para>
		</summary>
		<param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
		<param name="callingConvention">The managed calling convention to be used. </param>
		<param name="returnType">The <see cref="System.Type"/> of the result. </param>
		<param name="parameterTypes">The types of the required arguments to the instruction. </param>
		<param name="optionalParameterTypes">The types of the optional arguments for vararg calls. </param>
		<remarks>
			<para>Use <see cref="System.Reflection.Emit.ILGenerator.EmitCalli"/> to put a <see cref="System.Reflection.Emit.OpCodes.Calli"/> instruction onto the stream. Do not use 
<see cref="System.Reflection.Emit.ILGenerator.Emit"/>.</para>
		</remarks>
	</doc>
	<doc for="ILGenerator.EmitCalli1">
		<summary>
			<para>Puts a <see cref="System.Reflection.Emit.OpCodes.Calli"/> instruction onto the Microsoft 
   intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call. </para>
		</summary>
		<param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
		<param name="unmanagedCallConv">The unmanaged calling convention to be used. </param>
		<param name="returnType">The <see cref="System.Type"/> of the result. </param>
		<param name="parameterTypes">The types of the required arguments to the instruction. </param>
		<remarks>
			<para>Use <see cref="System.Reflection.Emit.ILGenerator.EmitCalli"/> to put a <see cref="System.Reflection.Emit.OpCodes.Calli"/> instruction onto the stream. Do 
   not use <see cref="System.Reflection.Emit.ILGenerator.Emit"/>.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates the contextual usage of the <see cref="System.Reflection.Emit.ILGenerator.EmitCalli"/> method to call an unmanaged type method 
   external to the dynamic class.</para>
			<codelink SampleID="System.Reflection.Emit.ILGenerator.EmitCalli Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
