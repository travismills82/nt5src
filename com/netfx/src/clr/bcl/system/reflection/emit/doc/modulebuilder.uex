<docs>
	<doc for="ModuleBuilder.GetSymWriter">
		<summary>
			<para>
       Returns
       the symbol writer associated with
       this dynamic module.
    </para>
		</summary>
		<returns>
			<para>
       Returns
       the symbol writer associated with
       this dynamic module.
    </para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">
    SecurityAction.Demand, ReflectionEmit
 </permission>
	</doc>
	<doc for="ModuleBuilder.GetMethodToken">
		<summary>
			<para> Returns the token used to identify the specified method within
      this module.
      </para>
		</summary>
		<param name="method">A <see langword="MethodToken"/> object representing the method to get a token for. </param>
		<returns>
			<para> Returns the token used to identify the method represented by method within this module.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException">
			<paramref name="method "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"> The declaring type for the method is not in this module.</exception>
	</doc>
	<doc for="ModuleBuilder.GetSignatureToken1">
		<overload>
			<para> Defines a signature token.
      </para>
		</overload>
		<summary>
			<para> Defines a signature token specified by the character array and
      signature length.
      </para>
		</summary>
		<param name="sigBytes">The signature blob. </param>
		<param name="sigLength">The length of the signature blob. </param>
		<returns>
			<para> A <see langword="SignatureToken "/> for
   the defined signature.
   </para>
		</returns>
	</doc>
	<doc for="ModuleBuilder.SetSymCustomAttribute">
		<summary>
			<para> Sets the custom attribute that is stored
      with the symbolic information.
      </para>
		</summary>
		<param name="name">The name of the custom attribute </param>
		<param name=" data">An opaque blob of bytes that represents the value of the custom attribute. </param>
		<exception cref="System.ArgumentNullException">
			<paramref name="url "/>is <see langword="null"/>. </exception>
		<exception cref="System.InvalidOperationException"> This method is called on a dynamic module that is not a debug module. </exception>
		<remarks>
			<para>The custom attribute that is set by this
      method is associated only with the symbolic information written by the symbol
      writer and is different from the custom attribute set using the <see cref="System.Reflection.Emit.ModuleBuilder.SetCustomAttribute"/> method.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
	</doc>
	<doc for="ModuleBuilder.IsTransient">
		<summary>
			<para> Checks if this dynamic module is transient.
      </para>
		</summary>
		<returns>
			<para>Returns <see langword="true "/> if
   this dynamic module is transient; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc>
	<doc for="ModuleBuilder.SetCustomAttribute1">
		<summary>
			<para> Set a custom attribute using a custom attribute builder.
      </para>
		</summary>
		<param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/>is <see langword="null"/>. </exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
	</doc><doc for="ModuleBuilder.GetTypes">
		<summary>
			<para>Returns
      all the classes defined within this module.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="Type"/>
containing classes defined within the module that is reflected by this
instance.</para>
		</returns>
		<exception cref="System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para><see langword="ReflectionTypeLoadException"/> is a special class load exception. The <see langword="ReflectionTypeLoadException.Types"/> property contains the array of classes that were defined in the module and loaded. This array can contain some null values. The <see langword="ReflectionTypeLoadException.LoaderExceptions"/> property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.</para>
			<para>For example, if the class initializers of one of the
   classes throws an exception while it is being loaded, a
<see langword="TargetInvocationException"/> is stored in the corresponding
   element of the <see langword="LoaderExceptions"/>
   array.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">Reflection permission for the current module.</permission>
		<seealso cref="System.Reflection.ReflectionTypeLoadException"/>
	</doc><doc for="ModuleBuilder.GetTypeToken">
		<overload>
			<para> Returns
      a type token.
      </para>
		</overload>
		<summary>
			<para> Returns the token used to identify the specified type within this
      module.
      </para>
		</summary>
		<param name="type">The type object that represents the class type. </param>
		<returns>
			<para> Returns the <see langword="TypeToken"/> used to identify
   the given type within this module.
   </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="type "/>is a <see langword="ByRef"/> or <paramref name="type"/> is a <see langword="SymbolType"/> that is not a pointer or an array. </exception>
		<exception cref="System.ArgumentNullException"><paramref name="type "/>is null. </exception>
		<exception cref="System.InvalidOperationException">A non-transient module that references a transient module. </exception>
		<remarks>
			<para> Tokens are used in Microsoft intermediate language
      (MSIL) instructions to identify objects. Tokens are relative to the module in
      which they are contained. For example, the token value for <see langword="String "/>is likely to be different from module to module. When
   <see langword="GetTypeToken "/>
   is invoked, a reference is added to the module.
   The reference becomes a permanent part of the module; multiple calls with the
   same argument have no additional affect.
   </para>
		</remarks>
	</doc><doc for="ModuleBuilder.GetTypeToken1">
		<summary>
			<para> Returns the token used to identify the type given its
      name.
      </para>
		</summary>
		<param name="name">A string representing the name of the class. </param>
		<returns>
			<para> Returns the <see langword="TypeToken"/> used to identify
   the type given by name within this module.
   </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="type "/>is a <see langword="ByRef"/> or <paramref name="type"/> is a <see langword="SymbolType"/> that is not a pointer or an array. </exception>
		<exception cref="System.ArgumentNullException"><paramref name="type "/>is null. </exception>
		<exception cref="System.InvalidOperationException">This is a non-transient module that references a transient module. </exception>
		<exception cref="System.TypeLoadException">The type named <paramref name="name"/> cannot be found.</exception>
		<remarks>
			<para>This method is useful for clients of the
   <see cref="System.Reflection.Emit.MethodRental"/> class who want to directly modify the 
      body of a method.</para>
		</remarks>
	</doc><doc for="ModuleBuilder.GetFieldToken">
		<summary>
			<para> Returns the token used to identify the specified field within
      this module.
      </para>
		</summary>
		<param name="field">A <see langword="FieldInfo"/> object representing the field to get a token for. </param>
		<returns>
			<para> Returns the token used to identify the field represented 
      by <paramref name="con"/> within this module.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="con "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The field is defined in a different module.</exception>
	</doc><doc for="ModuleBuilder.GetStringConstant">
		<summary>
			<para> Returns the token of the given string in the moduleâ€™s constant
      pool.
      </para>
		</summary>
		<param name="str">The string to add to the module's constant pool. </param>
		<returns>
			<para> Returns the <see langword="StringToken"/> of the string
   added to the constant pool.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="str "/>is <see langword="null"/>. </exception>
		<remarks>
			<para> If <paramref name="str "/> has already been defined, the
   existing token will be returned.
   </para>
		</remarks>
	</doc><doc for="ModuleBuilder.GetSignatureToken">
		<overload>
			<para>Defines a signature token
      given a signature helper.</para>
		</overload>
		<summary>
			<para> Defines a signature token using the given
   <see langword="SignatureHelper"/>
   object.
   </para>
		</summary>
		<param name="sigHelper">A reference to a <see langword="SignatureHelper"/> . </param>
		<returns>
			<para> A <see langword="SignatureToken"/> for
   the defined signature.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="sigHelper "/>is <see langword="null"/>. </exception>
		<remarks>
			<para> This will define a metadata token for the signature 
      described by <see langword="SignatureHelper"/> .
      </para>
		</remarks>
	</doc><doc for="ModuleBuilder.GetConstructorToken">
		<summary>
			<para> Returns the token used to identify the specified constructor
      within this module.
      </para>
		</summary>
		<param name="con">A <see langword="ConstructorInfo"/> object representing the constructor to get a token for. </param>
		<returns>
			<para> Returns the token used to identify the constructor 
      represented by <paramref name="con"/>
      within this module.
      </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="con "/>is <see langword="null"/>. </exception>
	</doc><doc for="ModuleBuilder.SetUserEntryPoint">
		<summary>
			<para> Sets the user entry point.
      </para>
		</summary>
		<param name="entryPoint">The user entry point. </param>
		<exception cref="System.ArgumentNullException"><paramref name="entryPoint "/>is <see langword="null"/>. </exception>
		<exception cref="System.InvalidOperationException"><para> This method is called on a dynamic module that is not a debug module. </para>
			<para>-or-</para>
			<para>
				<paramref name="entryPoint"/> is not contained in this dynamic module. </para></exception>
		<remarks>
			<para> The compiler might generate a startup stub before calling user
      main. The startup stub will be the entry point. While the user main
      will be the user entry point so that debugger will not step into the compiler
      entry point.
      </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
	</doc><doc for="ModuleBuilder.FullyQualifiedName">
		<summary>
			<para>Gets a <see langword="String"/> representing the
   fully-qualified name and path to this module.</para>
		</summary>
		<value>
			<para> The fully-qualified module name.</para>
		</value>
		<remarks>
			<para>To get the name without the path, use <see langword="Name"/>.</para>
			<note type="note">
   The case of a module name is
   platform dependent.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission"> Accesses information in the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
	</doc><doc for="ModuleBuilder.DefineUnmanagedResource1">
		<summary>
			<para>Defines an unmanaged resource given the name of Win32 resource file.</para>
		</summary>
		<param name="resourceFileName">The name of the unmanaged resource file</param>
		<exception cref="System.ArgumentException"><para>An unmanaged resource has already been defined in the module's assembly.</para>
			<para>-or-</para>
			<para><paramref name="resourceFileName"/> is the empty string ("").</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="resource"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para><paramref name="resourceFileName"/> is not found</para>
			<para>-or-</para>
			<para><paramref name="resourceFileName"/> is a directory</para></exception>
		<remarks>
			<para>An assembly can be associated with only one unmanaged resource. This means that calling <see langword="DefineVersionInfoResource"/> or <see langword="DefineUnmanagedResource"/> after either one of the
   methods was called previously will throw the System.ArgumentException.
   Multiple unmanaged resources need to be merged with a tool such as the Microsoft
   ResMerge utility (not supplied with the common language runtime).</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
	</doc>
	<doc for="ModuleBuilder.GetType">
		<overload>
			<para>Gets a named type defined in the module.</para>
		</overload>
		<summary>
			<para> 
      Gets the named type defined in the module.
      </para>
		</summary>
		<param name="className">The name of the <see cref="System.Type"/> to get.</param>
		<returns>
			<para>The requested type. Returns
   <see langword="null "/>if the type is not found.</para>
		</returns>
		<exception cref="System.ArgumentException">Length of <paramref name="className"/> is zero or if length of <paramref name="className"/> is greater than 1023.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="className"/> is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The requested <see cref="System.Type"/> is non-public and the caller does not have <see cref="System.Security.Permissions.ReflectionPermission"/> to reflect non-public objects outside the current assembly.</exception>
		<exception cref="System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
		<exception cref="System.TypeLoadException">An error is encountered while loading the <see cref="System.Type"/>.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
	</doc><doc for="ModuleBuilder.GetType1">
		<summary>
			<para>Gets the named type defined in the module optionally ignoring the case of the type name. </para>
		</summary>
		<param name="className">The name of the <see cref="System.Type"/> to get.</param>
		<param name="ignoreCase"><para>If <see langword="true"/>, the search is case-insensitive. If <see langword="false"/>, the search is case-sensitive.</para></param>
		<returns>
			<para>The requested type. Returns <see langword="null "/>if the type is not found. </para>
		</returns>
		<exception cref="System.ArgumentException"><para>Length of <paramref name="className"/> is zero.</para><para>-or-</para><para>The length of <paramref name="className"/> is greater than 1023.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="className "/>is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The requested <see cref="System.Type"/> is non-public and the caller does not have <see cref="System.Security.Permissions.ReflectionPermission"/> to reflect non-public objects outside the current assembly.</exception>
		<exception cref="System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
	</doc>
	<doc for="ModuleBuilder.GetType2">
		<summary>
			<para>Gets the named type defined in the module optionally ignoring the
      case of the type name. Optionally throws an exception if the type is not found. </para>
		</summary>
		<param name="className">The name of the <see cref="System.Type"/> to get.</param>
		<param name="throwOnError"><para> If<see langword=" true"/> , throw a <see cref="System.TypeLoadException"/> when an error occurs while loading the <see cref="System.Type"/>. If<see langword="false"/> , ignore errors while loading the <see cref="System.Type"/>.</para></param>
		<param name="ignoreCase"><para> If <see langword="true"/>, the search is case-insensitive. If <see langword="false"/>, the search is case-sensitive.</para></param>
		<returns>
			<para> The requested type. Returns
   <see langword="null "/>if the type is not found.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><para>Length of <paramref name="className"/> is zero.</para>
			<para>-or-</para>
			<para> The length of <paramref name="className"/> is greater than 1023.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="className "/>is <see langword="null"/>.</exception>
		<exception cref="System.Security.SecurityException">The requested <see cref="System.Type"/> is non-public and the caller does not have <see cref="System.Security.Permissions.ReflectionPermission"/> to reflect non-public objects outside the current assembly.</exception>
		<exception cref="System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
		<exception cref="System.TypeLoadException"><paramref name="throwOnError"/> is <see langword="true"/> and an error is encountered while loading the <see cref="System.Type"/>.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
	</doc>
	<doc for="ModuleBuilder.SetCustomAttribute">
		<overload>
			<para>Sets a custom attribute.</para>
		</overload>
		<summary>
			<para> Set a custom attribute using a specified custom attribute blob.
      </para>
		</summary>
		<param name="con">The constructor for the custom attribute. </param>
		<param name="binaryAttribute">A byte blob representing the attributes. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>. </exception>
		<remarks>
			<para> See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition
      II documentation is included with the .NET Framework SDK installation, and can
      be found in the %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs
      directory.
      </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
	</doc>
	<doc for="ModuleBuilder">
		<summary>
			<para> Defines and represents a module. Get an instance of
      ModuleBuilder by calling <see cref="System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule"/>.
      </para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<example>
			<para>The following code sample demonstrates the use of 
   <see langword="ModuleBuilder"/> to create a dynamic module. Note that the 
      ModuleBuilder is created by calling <see cref="System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule"/> in <see cref="System.Reflection.Emit.AssemblyBuilder"/>, rather than through a constructor.</para>
			<codelink SampleID="ModuleBuilder_Class" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineDocument">
		<summary>
			<para> Define a document for source.
      </para>
		</summary>
		<param name="url">The URL for the document. </param>
		<param name="language">The GUID identifying the document language. This can be null. </param>
		<param name="languageVendor">The GUID identifying the document language vendor. This can be null. </param>
		<param name="documentType">The GUID identifying the document type. This can be null. </param>
		<returns>
			<para> An <see langword="ISymbolDocumentWriter"/> object
   representing the defined document.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="url "/>is <see langword="null"/>. </exception>
		<exception cref="System.InvalidOperationException">This method is called on a dynamic module that is not a debug module. </exception>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="DefineDocument"/> to attach an external symbol document (in this 
      case, a raw IL file) to a dynamic module.</para>
			<codelink SampleID="ModuleBuilder_DefineDocument" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineEnum">
		<summary>
			<para> Defines an enumeration type with that is a value type
      with a single non-static field called <paramref name="value__ "/>
      of
      the specified type.
      </para>
		</summary>
		<param name="name">The full path of the enumeration type. <paramref name="name"/> cannot contain embedded nulls. </param>
		<param name=" visibility">The type attributes for the enumeration. The attributes are any bits defined by <see cref="System.Reflection.TypeAttributes.VisibilityMask"/>. </param>
		<param name=" underlyingType">The underlying type for the enumeration. </param>
		<returns>
			<para> Returns the defined enumeration.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><para> Attributes other than visibility attributes are provided. </para>
			<para>-or-</para>
			<para>An enum with the given name exists in the parent assembly of this module. </para>
			<para>-or-</para>
			<para>When the visibility attributes are incorrect for the scope of the enum. For example, if <see cref="System.Reflection.TypeAttributes.NestedPublic"/> is specified as the <paramref name="visibility"/> but the enum is not a nested type.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>is <see langword="null"/>.</exception>
		<remarks>
			<para> The defined enum is a derived class of <see cref="System.Enum"/>. The defined field has <see cref="System.Reflection.FieldAttributes.Private"/> and <see cref="System.Reflection.FieldAttributes.SpecialName"/>
set.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="DefineEnum"/> to implement an enumeration class in a dynamic 
      module.</para>
			<codelink SampleID="ModuleBuilder_DefineEnum" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineResource">
		<overload>
			<para>Defines a managed embedded
      resource to be stored in this module.</para>
		</overload>
		<summary>
			<para>Defines the named managed embedded resource
      to be stored in this module.</para>
		</summary>
		<param name="name">The name of the resource. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name=" description">The description of the resource.</param>
		<returns>
			<para>Returns a resource writer for the
      defined resource.</para>
		</returns>
		<exception cref="System.ArgumentException">Length of <paramref name="name"/> is zero.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<exception cref="System.InvalidOperationException"><para> This module is transient.</para>
			<para>-or-</para>
			<para>The containing assembly is not persistable.</para></exception>
		<remarks>
			<para>The caller must not call the
   <see langword="ResourceWriter.Generate()"/> and
   <see langword="ResourceWriter.Close()"/> methods since these methods are called
      by <see langword="ModuleBuilder.Save"/>
      when the dynamic assembly is written to
      disk.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following code sample illustrates the use of DefineResource to add an 
      external resource to the current <see cref="System.Reflection.Emit.ModuleBuilder"/>.</para>
			<codelink SampleID="ModuleBuilder_DefineResource1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineResource1">
		<summary>
			<para>Defines the named managed embedded resource
      with the given attributes that is to be stored in this module.</para>
		</summary>
		<param name="name">The name of the resource. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="description">The description of the resource.</param>
		<param name=" attribute">The resource attributes.</param>
		<returns>
			<para>Returns a resource writer for the defined resource.</para>
		</returns>
		<exception cref="System.ArgumentException">Length of <paramref name="name"/> is zero.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<exception cref="System.InvalidOperationException"><para> This module is transient.</para>
			<para>-or-</para>
			<para>The containing assembly is not persistable.</para></exception>
		<remarks>
			<para>The caller must not call the
   <see langword="ResourceWriter.Generate()"/> and
   <see langword="ResourceWriter.Close()"/> methods since these methods are called
      by <see langword="ModuleBuilder.Save"/>
      when the dynamic assembly is written to
      disk.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following code sample illustrates the use of DefineResource to add an 
      external resource to the current <see cref="System.Reflection.Emit.ModuleBuilder"/>.</para>
			<codelink SampleID="ModuleBuilder_DefineResource2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.GetArrayMethodToken">
		<summary>
			<para> Returns the token for the named method on an
      array class.
      </para>
		</summary>
		<param name="arrayClass">The <see langword="Type"/> object for the array. </param>
		<param name="methodName">A string containing the name of the method. </param>
		<param name="callingConvention">The calling convention for the method. </param>
		<param name="returnType">The return type of the method. </param>
		<param name="parameterTypes">The types of the parameters of the method. </param>
		<returns>
			<para> The token for
      the named method on an array class.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><para>
				<paramref name="arrayClass "/>is not an array. </para>
			<para>-or-</para>
			<para> Length of <paramref name="methodName"/> is zero. </para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="arrayClass "/>or <paramref name="methodName "/>is <see langword="null"/>.</exception>
		<remarks>
			<para>This method is similar to <see cref="System.Reflection.Emit.ModuleBuilder.GetArrayMethod"/>, except that it returns the
   token of the array method instead of the method itself.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates how to obtain the <see cref="System.Reflection.Emit.MethodToken"/> corresponding to 
   a method which returns an array value, using
<see langword="GetArrayMethod"/>.</para>
			<codelink SampleID="ModuleBuilder_GetArrayMethod" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.GetArrayMethod">
		<summary>
			<para> Returns the named method on an array
      class.
      </para>
		</summary>
		<param name="arrayClass">An array class. </param>
		<param name=" methodName">The name of a method on the array class. </param>
		<param name=" callingConvention">The method's calling convention. </param>
		<param name=" returnType">The return type of the method. </param>
		<param name=" parameterTypes">The types of the method's parameters. </param>
		<returns>
			<para>The named method on an array class.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="arrayClass "/>is not an array. </exception>
		<exception cref="System.ArgumentNullException"><paramref name="arrayClass "/>or <paramref name="methodName "/>is <see langword="null"/>. </exception>
		<remarks>
			<para><see langword="GetArrayMethod"/> is useful when you have
   an array of a type whose definition has not been completed and you want to access
   methods defined on <see cref="System.Array"/> . For example, you might define a type and want to define
   a method that takes an array of the type as a parameter. In order to access the
   elements of the array, you will need to call methods of the <see cref="System.Array"/> class.</para>
		</remarks>
		<example>
			<para>The following code sample demonstrates how to obtain the <see cref="System.Reflection.MethodInfo"/> 
corresponding to a method which returns an array value, using
<see langword="GetArrayMethod"/>.</para>
			<codelink SampleID="ModuleBuilder_GetArrayMethod" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefinePInvokeMethod">
		<overload>
			<para> Defines a <see langword="PInvoke"/> method.
   </para>
		</overload>
		<summary>
			<para> Defines a <see langword="PInvoke"/> method given its
   name, the name of the DLL in which the method is defined, the attributes of the
   method, the calling convention of the method, the return type of the method, the
   types of the parameters of the method, and the <see langword="PInvoke"/>
   
   flags.
   </para>
		</summary>
		<param name="name">The name of the <see langword="PInvoke"/> method. <paramref name="name"/> cannot contain embedded nulls. </param>
		<param name=" dllName">The name of the DLL in which the <see langword="PInvoke"/> method is defined. </param>
		<param name=" attributes">The attributes of the method. </param>
		<param name=" callingConvention">The method's calling convention. </param>
		<param name=" returnType">The method's return type. </param>
		<param name=" parameterTypes">The types of the method's parameters. </param>
		<param name=" nativeCallConv">The native calling convention. </param>
		<param name=" nativeCharSet">The method's native character set.</param>
		<returns>
			<para> The defined <see langword="PInvoke"/> method.
   </para>
		</returns>
		<exception cref="System.ArgumentException"><para> The method is not static or if the containing type is an interface. </para>
			<para>-or-</para>
			<para>The method is abstract.</para>
			<para>-or-</para>
			<para>The method was previously defined. </para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>or <paramref name="dllName "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The containing type has been previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/></exception>
		<remarks>
			<para>Some DLL import attributes (see the description of
      System.Runtime.InteropServices.DllImportAttribute) cannot be specified as
      arguments to this method. Such attributes should be set by emitting a custom
      attribute for the method. For example, the DLL import attribute
   <see langword="PreserveSig"/> is set by emitting a custom attribute.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
		<example>
			<para>The following code sample illustrates the use of <see langword="DefinePInvokeMethod"/> to implement a <see cref="System.Reflection.Emit.MethodBuilder"/> with the same 
   signature as an external unmanaged method for platform invocation.</para>
			<codelink SampleID="ModuleBuilder_DefinePInvokeMethod1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefinePInvokeMethod1">
		<summary>
			<para> Defines a <see langword="PInvoke"/> method given its
   name, the name of the DLL in which the method is defined, the attributes of the
   method, the calling convention of the method, the return type of the method, the
   types of the parameters of the method, and the <see langword="PInvoke"/>
   
   flags.
   </para>
		</summary>
		<param name="name">The name of the <see langword="PInvoke"/> method. <paramref name="name"/> cannot contain embedded nulls. </param>
		<param name="dllName">The name of the DLL in which the <see langword="PInvoke"/> method is defined. </param>
		<param name="entryName">The name of the entry point in the DLL. </param>
		<param name="attributes">The attributes of the method. </param>
		<param name="callingConvention">The method's calling convention. </param>
		<param name="returnType">The method's return type. </param>
		<param name="parameterTypes">The types of the method's parameters. </param>
		<param name="nativeCallConv">The native calling convention. </param>
		<param name=" nativeCharSet">The method's native character set.</param>
		<returns>
			<para> The defined PInvoke method.
      </para>
		</returns>
		<exception cref="System.ArgumentException">The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined. </exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>or <paramref name="dllName "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The containing type has been previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/></exception>
		<remarks>
			<para>Some DLL import attributes (see the description of
      System.Runtime.InteropServices.DllImportAttribute) cannot be specified as
      arguments to this method. Such attributes should be set by emitting a custom
      attribute for the method. For example, the DLL import attribute
   <see langword="PreserveSig "/> is set by emitting a custom attribute.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="DefinePInvokeMethod"/> to implement a <see cref="System.Reflection.Emit.MethodBuilder"/> with the same 
      signature as an external unmanaged method for platform invocation.</para>
			<codelink SampleID="ModuleBuilder_DefinePInvokeMethod1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.CreateGlobalFunctions">
		<summary>
			<para> Complete the global function definitions for this dynamic module.
      </para>
		</summary>
		<exception cref="System.InvalidOperationException">This method was called previously. </exception>
		<remarks>
			<para>This method should be called when the user
      is done with defining all of the global functions within this dynamic module.
      After calling this function, no more new global functions or new global data are
      allowed.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
		<example>
			<para>The following sample illustrates the use of 
   <see langword="CreateGlobalFunctions"/> to create a static global 
      method from a <see cref="System.Reflection.Emit.MethodBuilder"/> implemented with <see cref="System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod"/>. Note that
   <see langword="CreateGlobalFunctions"/> must be called after 
   <see langword="DefineGlobalMethod"/> has been used to implement at least one global method.</para>
			<codelink SampleID="ModuleBuilder_CreateGlobalFunctions" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineUnmanagedResource">
		<overload>
			<para>Defines an unmanaged
      resource in this module. The blob must have the right format for a Win32
      resource.</para>
		</overload>
		<summary>
			<para>Defines an unmanaged embedded resource given an opaque
      blob of bytes.</para>
		</summary>
		<param name="resource">An opaque blob that represents an unmanaged resource</param>
		<exception cref="System.ArgumentException">An unmanaged resource has already been defined in the module's assembly.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="resource"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>An assembly can be associated with only one unmanaged resource. This means that calling <see langword="DefineVersionInfoResource"/> or <see langword="DefineUnmanagedResource"/> after either one of the
   methods was called previously will result in the System.ArgumentException being
   throw. Multiple unmanaged resources need to be merged with a tool such as the
   Microsoft ResMerge utility (not supplied with the common language runtime).</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
	</doc>
	<doc for="ModuleBuilder.DefineType">
		<overload>
			<para>Constructs a <see langword="TypeBuilder"/>. To define a value type, define a type
   that is derives <see cref="System.ValueType"/>.</para>
		</overload>
		<summary>
			<para>Constructs a <see langword="TypeBuilder"/> for a type with the specified name.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<returns>
			<para>Returns the created <see langword="TypeBuilder"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>A type with the given name exists in the parent assembly of this module.</para>
			<para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested. </para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para> Type names must be unique
      within an assembly. You cannot have two types with the same name in two different
      modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current dynamic module using
<see langword="CreateType"/> , bakes the
   type, and saves the assembly.
   </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineType1">
		<summary>
			<para>Constructs a <see langword="TypeBuilder "/> given the
   type name, attributes, the type that the defined type extends, and the interfaces
   that the defined type implements.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="attr">The attributes to be associated with the type.</param>
		<param name="parent">The type that the defined type extends.</param>
		<param name="interfaces">The list of interfaces that the type implements.</param>
		<returns>
			<para>Returns a <see langword="TypeBuilder "/> created with all of
   the requested attributes.</para>
		</returns>
		<exception cref="System.ArgumentException">A type with the given name exists in the parent assembly of this module. <para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested. </para>
		</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para> Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current
   dynamic module using <see langword="CreateType"/>, bakes the type, and saves the
   assembly. </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineType2">
		<summary>
			<para>Constructs a <see langword="TypeBuilder "/> given type name, its attributes, and the type
   that the defined type extends.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="attr">The attribute to be associated with the type.</param>
		<param name=" parent">The Type that the defined type extends.</param>
		<returns>
			<para>Returns a <see langword="TypeBuilder"/> created with all of
   the requested attributes.</para>
		</returns>
		<exception cref="System.ArgumentException">A type with the given name exists in the parent assembly of this module. <para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested. </para>
		</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para> Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current
   dynamic module using <see langword="CreateType"/>, bakes the type, and saves the
   assembly. </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineType3">
		<summary>
			<para>Constructs a <see langword="TypeBuilder"/> given the
   type name and the type attributes.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="attr">The attributes of the defined type.</param>
		<returns>
			<para>Returns a <see langword="TypeBuilder "/> created with all of
   the requested attributes.</para>
		</returns>
		<exception cref="System.ArgumentException">A type with the given name exists in the parent assembly of this module. <para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested. </para>
		</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para> Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current
   dynamic module using <see langword="CreateType"/>, bakes the type, and saves the
   assembly. </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineType4">
		<summary>
			<para>Constructs a <see langword="TypeBuilder"/> given the
   type name, attributes, the type that
   the defined type extends, the packing size of the defined type, and the total
   size of the defined type.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="attr">The attributes of the defined type.</param>
		<param name=" parent">The type that the defined type extends.</param>
		<param name="packingSize">The packing size of the type.</param>
		<param name="typesize">The total size of the type.</param>
		<returns>
			<para>Returns a <see langword="TypeBuilder"/> created with all of
   the requested attributes.</para>
		</returns>
		<exception cref="System.ArgumentException">A type with the given name exists in the parent assembly of this module. <para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested.</para>
		</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para> Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current
   dynamic module using <see langword="CreateType"/>, bakes the type, and saves the
   assembly. </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineType5">
		<summary>
			<para>Constructs a <see langword="TypeBuilder"/> given the type name, the
   attributes, the type that the defined type extends, and the total size of the type.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="attr">The attributes of the defined type.</param>
		<param name="parent">The Type that the defined type extends.</param>
		<param name="typesize">The total size of the type.</param>
		<returns>
			<para>Returns a <see langword="TypeBuilder"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">A type with the given name exists in the parent assembly of this module. <para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested. </para>
		</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para>Type names must be unique within an assembly. It is forbidden to have two types with the same name in two different modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current
   dynamic module using <see langword="CreateType"/>, bakes the type, and saves the
   assembly. </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineType6">
		<summary>
			<para>Constructs a <see langword="TypeBuilder "/> given the type name,
   the attributes, the type that the defined type extends, and the packing size of
   the type.</para>
		</summary>
		<param name="name">The full path of the type. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name="attr">The attributes of the defined type.</param>
		<param name="parent">The Type that the defined type extends.</param>
		<param name="packsize">The packing size of the type.</param>
		<returns>
			<para>Returns a <see langword="TypeBuilder"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">A type with the given name exists in the parent assembly of this module. <para>-or-</para>
			<para>Nested type attributes are set on a type that is not nested. </para>
		</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is null.</exception>
		<remarks>
			<para> Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following example spawns a <see cref="System.Reflection.Emit.TypeBuilder"/> in the current
   dynamic module using <see langword="CreateType"/>, bakes the type, and saves the
   assembly. </para>
			<codelink SampleID="Classic ModuleBuilder.DefineType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineUninitializedData">
		<summary>
			<para> Defines uninitialized data field in the .sdata section of
      the portable executable (PE) file.
      </para>
		</summary>
		<param name="name">The name used to refer to the data. <paramref name="name"/> cannot contain embedded nulls. </param>
		<param name="size">The size of the data field. </param>
		<param name="attributes">The attributes for the field. </param>
		<returns>
			<para> A field to reference the data.
      </para>
		</returns>
		<exception cref="System.ArgumentException"><para>The length of <paramref name="name"/> is zero.</para>
			<para> -or-</para>
			<para><paramref name="size"/> is less than or equal to zero or greater than or equal to 0x003f0000.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> has been previously called. </exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit </permission>
	</doc>
	<doc for="ModuleBuilder.DefineInitializedData">
		<summary>
			<para>Defines initialized data field in the .sdata section of
      the portable executable (PE) file.</para>
		</summary>
		<param name="name">The name used to refer to the data. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name=" data">The blob of data.</param>
		<param name=" attributes">The attributes for the field. The default is <see langword="Static"/> .</param>
		<returns>
			<para>A field to reference the data.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>The length of <paramref name="name"/> is zero.</para>
			<para>-or-</para>
			<para>The size of <paramref name="data"/> is less than or equal to zero or greater than or equal to 0x3f0000.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>or <paramref name="data"/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> has been previously called.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<codelink SampleID="ModuleBuilder_DefineInitializedData" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineGlobalMethod">
		<overload>
			<para>Defines a global method.</para>
		</overload>
		<summary>
			<para>Defines a global method given its name,
      attributes, return type, and parameter types.</para>
		</summary>
		<param name="name">The name of the method. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name=" attributes">The attributes of the method.</param>
		<param name=" returnType">The return type of the method.</param>
		<param name=" parameterTypes">The types of the method's parameters.</param>
		<returns>
			<para>Returns the defined global method.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>The method is not static.</para>
			<para>-or-</para>
			<para> The length of <paramref name="name"/> is zero</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> has been previously called.</exception>
		<remarks>
			<note type="inotes">
      The global method
      that this method defines is not usable until you call <see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/>.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following code sample illustrates the use of
   <see langword="DefineGlobalMethod"/> to create a type-independent method tied to
      the current <see cref="System.Reflection.Emit.ModuleBuilder"/>. After building the global
      method, <see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> must be called
      in order to complete it.</para>
			<codelink SampleID="ModuleBuilder_CreateGlobalFunctions" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ModuleBuilder.DefineGlobalMethod1">
		<summary>
			<para>Defines a
      global method given its name, attributes, calling
      convention, return type, and parameter types.</para>
		</summary>
		<param name="name">The name of the method. <paramref name="name"/> cannot contain embedded nulls.</param>
		<param name=" attributes">The attributes of the method.</param>
		<param name=" callingConvention">The calling convention for the method.</param>
		<param name=" returnType">The return type of the method.</param>
		<param name=" parameterTypes">The types of the method's parameters.</param>
		<returns>
			<para>Returns the defined global method.</para>
		</returns>
		<exception cref="System.ArgumentException">The method is not static.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="name "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> has been previously called.</exception>
		<remarks>
			<note type="inotes">
      You cannot use the global
      method that this method defines until you call <see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/>.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">SecurityAction.Demand, ReflectionEmit</permission>
		<example>
			<para>The following code sample illustrates the use of
   <see langword="DefineGlobalMethod"/> to create a type-independent method tied to
      the current <see cref="System.Reflection.Emit.ModuleBuilder"/>. After building the global
      method, <see cref="System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions"/> must be called
      in order to complete it.</para>
			<codelink SampleID="ModuleBuilder_CreateGlobalFunctions" SnippetID="1"/>
		</example>
	</doc>
</docs>
