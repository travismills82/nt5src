<docs>
	<doc for="ConstructorBuilder.Signature">
		<summary>
			<para> Retrieves the signature of the field in the form of a string.
      </para>
		</summary>
		<value>
			<para>Returns the signature of the field.</para>
		</value>
	</doc>
	<doc for="ConstructorBuilder.MethodHandle">
		<summary>
			<para>
       Retrieves the internal handle for the method. Use this handle to
       access the underlying metadata handle.
    </para>
		</summary>
		<value>
    Returns the internal handle for the
    method. Use this handle to access the underlying metadata handle.
 </value>
		<exception cref="System.NotSupportedException">
    This property is not supported on this class.
 </exception>
	</doc>
	<doc for="ConstructorBuilder.GetCustomAttributes1">
		<summary>
			<para>Returns the custom attributes identified by the given type.</para>
		</summary>
		<param name="attributeType">The custom attribute type.</param>
		<param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
		<returns>
			<para>Returns an array of type <see cref="System.Object"/> representing the
   attributes of this
   constructor.</para>
		</returns>
		<remarks>
			<para> The <paramref name="inherit"/> parameter is ignored because a class never inherits constructors from base classes.</para>
		</remarks>
	</doc><doc for="ConstructorBuilder.ToString">
		<summary>
			<para>Returns this <see cref="System.Reflection.Emit.ConstructorBuilder"/> instance as a <see cref="System.String"/>.</para>
		</summary>
		<returns>
			<para>Returns a <see cref="System.String"/> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language
   (MSIL) stream.</para>
		</returns>
	</doc><doc for="ConstructorBuilder.ReturnType">
		<summary>
			<para>Retrieves the <see langword="Type"/> of this constructor's
   return value.</para>
		</summary>
		<value>
			<para>Returns the <see langword="Type"/>
of this constructor's return value. This is always <see langword="null"/>
.</para>
		</value>
		<remarks>
			<para>This property might be removed in a future
      version.</para>
		</remarks>
	</doc><doc for="ConstructorBuilder.GetCustomAttributes">
		<overload>
			<para> Returns the custom attributes defined for this
      constructor.
      </para>
		</overload>
		<summary>
			<para> Returns all the custom attributes defined for this constructor.
      </para>
		</summary>
		<param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
		<returns>
			<para> Returns an array of objects representing all the custom
      attributes of the constructor represented by this <see cref="System.Reflection.Emit.ConstructorBuilder"/>
      instance.
      </para>
		</returns>
		<remarks>
			<para>The <paramref name="inherit"/> parameter is ignored because a class never inherits constructors from base classes.</para>
		</remarks>
	</doc><doc for="ConstructorBuilder.IsDefined">
		<summary>
			<para> Checks if the specified custom attribute type is defined.
      </para>
		</summary>
		<param name="attributeType">A custom attribute type. </param>
		<param name=" inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
		<returns>
			<para><see langword="true "/>if the specified custom attribute
   type is defined; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.NotSupportedException"> This method is not currently supported. You can retrieve the constructor using <see cref="System.Type.GetConstructor"/> and call <see cref="System.Reflection.MemberInfo.IsDefined"/> on the returned <see cref="System.Reflection.ConstructorInfo"/>.</exception>
		<remarks>
			<para>See the metadata specification for details on how to format <paramref name="binaryAttribute"/>. </para>
		</remarks>
	</doc><doc for="ConstructorBuilder">
		<summary>
			<para> Defines and represents a constructor of a dynamic class.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para><see cref="System.Reflection.Emit.ConstructorBuilder"/> is used to fully describe a constructor in
   Microsoft intermediate language (MSIL), including the name, attributes, signature,
   and constructor body. It is used in conjunction with the <see cref="System.Reflection.Emit.TypeBuilder"/>
   class to create classes at run time. Call <see cref="System.Reflection.Emit.TypeBuilder.DefineConstructor"/> to get an instance of
<see cref="System.Reflection.Emit.ConstructorBuilder"/>.</para>
			<para>The following code sample illustates the contextual usage 
   of a <see langword="ConstructorBuilder"/>.</para>
			<codelink SampleID="System.Reflection.Emit.ConstructorBuilder Example" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.GetModule">
		<summary>
			<para> Returns a reference to the module that contains this constructor.
      </para>
		</summary>
		<returns>
			<para>The module that contains this
      constructor.</para>
		</returns>
		<remarks>
			<para>The following code sample illustrates the usage of 
   <see langword="GetModule"/>.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.GetModule" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.Name">
		<summary>
			<para> Retrieves the name of this constructor.
      </para>
		</summary>
		<value>
			<para>Returns the name of this constructor.</para>
		</value>
		<remarks>
			<para>The following code sample illustrates the use of <see langword="Name"/>.</para>
			<codelink SampleID="ConstructorBuilder_Name_5" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.AddDeclarativeSecurity">
		<summary>
			<para>Adds declarative security to this constructor.</para>
		</summary>
		<param name="action">The security action to be taken, such as Demand, Assert, and so on.</param>
		<param name="pset">The set of permissions the action applies to.</param>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="action"/> is invalid (RequestMinimum, RequestOptional, and RequestRefuse are invalid).</exception>
		<exception cref="System.InvalidOperationException"><para>The containing type has been previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> .</para>
			<para>-or-</para>
			<para> The permission set <paramref name="pset"/> contains an action that was added earlier by <see langword="AddDeclarativeSecurity"/>.</para></exception>
		<exception cref="System.ArgumentNullException"><paramref name="pset"/> is <see langword="null"/> .</exception>
		<remarks>
			<para><see cref="System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity"/> can be called several
   times, with each call specifying a security action (such as
<see langword="Demand"/>,
<see langword="Assert"/>, and <see langword="Deny"/>) and a set of permissions that
   the action applies to.</para>
			<para>The following code sample illustrates the use of 
<see langword="AddDeclarativeSecurity"/>.</para>
			<codelink SampleID="ConstructorBuilder_Attributes_4" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.DefineParameter">
		<summary>
			<para>Defines a parameter of this constructor.</para>
		</summary>
		<param name="iSequence">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</param>
		<param name="attributes">The attributes of the parameter.</param>
		<param name="strParamName">The name of the parameter. The name can be the null string.</param>
		<returns>
			<para>Returns a <see langword="ParameterBuilder"/> object that
   represents the new parameter of this constructor.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="position"/> is less than or equal to zero, or it is greater than the number of parameters of the constructor.</exception>
		<exception cref="System.InvalidOperationException">The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> .</exception>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="DefineParameter"/>.</para>
			<codelink SampleID="ConstructorBuilder_Attributes_4" SnippetID="3"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.Attributes">
		<summary>
			<para> Retrieves the attributes for this constructor.
      </para>
		</summary>
		<value>
			<para>Returns the attributes for this
      constructor.</para>
		</value>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="Attributes"/>.</para>
			<codelink SampleID="ConstructorBuilder_Attributes_4" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.DeclaringType">
		<summary>
			<para>Retrieves a reference to the <see cref="System.Type"/> object for the type that declares this member.</para>
		</summary>
		<value>
			<para>Returns the <see cref="System.Type"/> object for the type that declares this member.</para>
		</value>
		<remarks>
			<para>A member of a class (or interface) is either declared or inherited from a
      base class (or interface).</para>
			<para>The following code sample illustrates the use of 
   <see langword="DeclaringType"/>.</para>
			<codelink SampleID="ConstructorBuilder_Attributes_4" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.GetILGenerator">
		<summary>
			<para>Gets an <see cref="System.Reflection.Emit.ILGenerator"/>
for this constructor.</para>
		</summary>
		<returns>
			<para>Returns an <see cref="System.Reflection.Emit.ILGenerator"/> object for this
   constructor.</para>
		</returns>
		<exception cref="System.InvalidOperationException">If the constructor is a default constructor.</exception>
		<remarks>
			<para>The runtime generates the code for default constructors.
      Therefore, if an attempt is made to obtain an <see langword="ILGenerator"/>, an
      exception will be thrown.</para>
			<para>The following code sample illustrates the use of 
   <see langword="GetILGenerator"/>.</para>
			<codelink SampleID="System.Reflection.Emit.ConstructorBuilder Example" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.GetToken">
		<summary>
			<para>Returns the <see cref="System.Reflection.Emit.MethodToken"/> that represents the token for this constructor.</para>
		</summary>
		<returns>
			<para>Returns the <see cref="System.Reflection.Emit.MethodToken"/> of this
   constructor.</para>
		</returns>
		<remarks>
			<para>This code sample illustrates the use of <see langword="GetToken"/>.</para>
			<codelink SampleID="ConstructorBuilder_GetModule_4" SnippetID="2"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.SetSymCustomAttribute">
		<summary>
			<para> Sets this constructor's custom attribute associated with symbolic information.
      </para>
		</summary>
		<param name="name">The name of the custom attribute. </param>
		<param name=" data">The value of the custom attribute. </param>
		<exception cref="System.InvalidOperationException"><para> The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/>. </para>
			<para>-or-</para>
			<para>The module does not have a symbol writer defined. For example, the module is not a debug module. </para></exception>
		<remarks>
			<para>The following code sample illustrates the ise of 
   <see langword="SetSymCustomAttributes"/>.</para>
			<codelink SampleID="ConstructorBuilder_SetSymCustomAttribute" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.GetParameters">
		<summary>
			<para> Returns the parameters of this constructor.
      </para>
		</summary>
		<returns>
			<para> Returns an array of <see cref="System.Reflection.ParameterInfo"/>
objects that represent the parameters of this constructor.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has not been called on this constructor's type.</exception>
		<remarks>
			<para>The code sample illustrates the use of <see langword="GetParameters"/>.</para>
			<codelink SampleID="ConstructorBuilder_GetModule_4" SnippetID="4"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.GetMethodImplementationFlags">
		<summary>
			<para> Returns the method implementation flags for this constructor.
      </para>
		</summary>
		<returns>
			<para> The method implementation flags for this constructor.
      </para>
		</returns>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="GetMethodImplementationFlags"/>.</para>
			<codelink SampleID="ConstructorBuilder_GetModule_4" SnippetID="3"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.InitLocals">
		<summary>
			<para> Gets or sets whether the local variables in this
      constructor
      should
      be zero-initialized.
      </para>
		</summary>
		<value>
			<para> Read/write. Gets or sets whether the local variables
      in this constructor
      should
      be zero-initialized.
      </para>
		</value>
	</doc>
	<doc for="ConstructorBuilder.SetImplementationFlags">
		<summary>
			<para> Sets the method implementation flags for this constructor.
      </para>
		</summary>
		<param name="attributes">The method implementation flags. </param>
		<exception cref="System.InvalidOperationException">The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> .</exception>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="SetImplementationFlags"/>.</para>
			<codelink SampleID="ConstructorBuilder_SetImplementationFlags" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="ConstructorBuilder.ReflectedType">
		<summary>
			<para> Holds a reference to the <see cref="System.Type"/>
object from which this object was
obtained.</para>
		</summary>
		<value>
			<para>Returns the <see langword="Type "/>object from which this object was obtained.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Reflection.Emit.ConstructorBuilder"/> object represents a constructor on a
   particular class. In order to obtain a <see cref="System.Reflection.ConstructorInfo"/> object, the <see cref="System.Type"/> object that
   represents the class that supports the constructor is queried. This property
   holds a reference to that <see cref="System.Type"/> object.</para>
		</remarks>
		<seealso cref="System.Reflection.MemberInfo.ReflectedType"/>
	</doc>
	<doc for="ConstructorBuilder.Invoke">
		<overload>
			<para> Invokes the constructor dynamically reflected by this instance.</para>
		</overload>
		<summary>
			<para> Invokes the constructor dynamically reflected by this instance on
      the given object, passing along the specified parameters, and under the
      constraints of the given binder.
      </para>
		</summary>
		<param name="invokeAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/>, such as InvokeMethod, NonPublic, and so on. </param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects using reflection. If binder is <see langword="null"/>, the default binder is used. See <see cref="System.Reflection.Binder"/>. </param>
		<param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be <see langword="null"/>. </param>
		<param name="culture">An instance of <see cref="System.Globalization.CultureInfo"/> used to govern the coercion of types. If this is null, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. (For example, this is necessary to convert a <see cref="System.String"/> that represents 1000 to a <see cref="System.Double"/> value, since 1000 is represented differently by different cultures.) </param>
		<returns>
			<para> Returns an <see cref="System.Object"/> that is the return value of the invoked constructor.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="System.Type.GetConstructor"/> and call <see cref="System.Reflection.ConstructorInfo.Invoke"/> on the returned <see cref="System.Reflection.ConstructorInfo"/>. </exception>
		<remarks>
			<para> If the constructor has no parameters, the value of the 
   <paramref name="parameters"/> 
   parameter should be <see langword="null"/>. Otherwise, the number, type, and order of
   elements in the <paramref name="parameters"/>
   array
   should be identical to the number, type, and order of parameters for the
   constructor reflected by this instance.
   </para>
			<para> For example, if the constructor reflected by this 
   instance is declared as public class taking two strings, then the
<paramref name="parameters"/> parameter should be an array of <see cref="System.Object"/> 
with length 2.</para>
			<note type="note">
   Access restrictions are ignored
   for fully-trusted code. That is, private constructors, methods, fields, and
   properties can be accessed and invoked using Reflection whenever the code is
   fully trusted.
   
</note>
		</remarks>
		<seealso cref="System.Reflection.Binder"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="ConstructorBuilder.SetCustomAttribute">
		<overload>
			<para>Sets a custom attribute.</para>
		</overload>
		<summary>
			<para> Set a custom attribute using a specified custom attribute blob.
      </para>
		</summary>
		<param name="con">The constructor for the custom attribute. </param>
		<param name="binaryAttribute">A byte blob representing the attributes. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>.</exception>
		<remarks>
			<para> See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition II documentation is
      included with the .NET Framework SDK installation, and can be found in the
      %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs directory.
      </para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="SetCustomAttribute"/> of the context of a <see cref="System.Reflection.Emit.ConstructorBuilder"/>, passing a byte blob.</para>
			<codelink SampleID="ConstructorBuilder_SetCustomAttribute2" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ConstructorBuilder.SetCustomAttribute1">
		<summary>
			<para> Set a custom attribute using a custom attribute builder.
      </para>
		</summary>
		<param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
		<exception cref="System.ArgumentNullException"><paramref name="customBuilder "/>is <see langword="null"/>.</exception>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="SetCustomAttribute"/> of the context of a <see cref="System.Reflection.Emit.ConstructorBuilder"/>, passing a <see cref="System.Reflection.Emit.CustomAttributeBuilder"/>.</para>
			<codelink SampleID="ConstructorBuilder_SetCustomAttribute1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ConstructorBuilder.Invoke1">
		<summary>
			<para> Dynamically invokes the constructor reflected by
      this instance with the specified arguments, under the
      constraints of the specified <see langword="Binder"/>.</para>
		</summary>
		<param name=" obj">The object that needs to be reinitialized.</param>
		<param name="invokeAttr">One of the <see langword="BindingFlags"/> values that specifies the type of binding that is desired.</param>
		<param name=" binder">A <see langword="Binder"/> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder "/>is <see langword="null"/>, then Binder.DefaultBinding is used.</param>
		<param name=" parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (<see langword="Nothing"/> in Visual Basic).</param>
		<param name=" culture">A <see cref="System.Globalization.CultureInfo"/> used to govern the coercion of types. If this is null, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used.</param>
		<returns>
			<para>An instance of the class associated with the constructor.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="System.Type.GetConstructor"/> and call <see cref="System.Reflection.ConstructorInfo.Invoke"/> on the returned <see cref="System.Reflection.ConstructorInfo"/>. </exception>
		<remarks>
			<para>The number, type, and order of elements in the parameters
      array should be identical to the number, type, and order of parameters for the
      constructor reflected by this instance.</para>
			<para>Before calling the constructor, <see langword="Invoke "/>
ensures that the caller has access permission, and that the parameters are of the
correct number, order and type.</para>
			<para> Access restrictions are ignored for fully-trusted code.
   That is, private constructors, methods, fields, and properties can be accessed
   and invoked using Reflection whenever the code is fully trusted.</para>
		</remarks>
		<seealso cref="System.Reflection.Binder"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
</docs>
