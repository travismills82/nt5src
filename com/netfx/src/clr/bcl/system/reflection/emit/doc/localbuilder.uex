<docs>
	<doc for="LocalBuilder">
		<summary>
			<para>Represents a local variable within a method or
      constructor.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para>A <see langword="LocalBuilder "/>object can be defined using the <see cref="System.Reflection.Emit.ILGenerator.DeclareLocal"/> method.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the use of 
   <see langword="LocalBuilder"/>.</para>
			<codelink SampleID="LocalBuilder_Sample_SetLocalSymInfo" SnippetID="1"/>
		</example>
	</doc>
	<doc for="LocalBuilder.SetLocalSymInfo">
		<overload>
			<para> Sets the local variable's
      symbolic information.
      </para>
		</overload>
		<summary>
			<para> Sets the name of this local variable.
      </para>
		</summary>
		<param name="name">The name of the local variable. </param>
		<exception cref="System.InvalidOperationException"><para> The containing type has been created with <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> . </para>
			<para>-or-</para>
			<para>There is no symbolic writer defined for the containing module. </para></exception>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="SetSymLocalInfo"/>.</para>
			<codelink SampleID="LocalBuilder_Sample_SetLocalSymInfo" SnippetID="3"/>
		</example>
	</doc>
	<doc for="LocalBuilder.SetLocalSymInfo1">
		<summary>
			<para> Sets the name and lexical scope of this
      local variable.
      </para>
		</summary>
		<param name="name">The name of the local variable. </param>
		<param name="startOffset">The beginning offset of the lexical scope of the local variable. </param>
		<param name="endOffset">The ending offset of the lexical scope of the local variable. </param>
		<exception cref="System.InvalidOperationException"><para> The containing type has been created with <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> . </para>
			<para>-or-</para>
			<para>There is no symbolic writer defined for the containing module. </para></exception>
		<example>
			<para>The following code sample illustrates the use of
   <see langword="SetSymLocalInfo"/>.</para>
			<codelink SampleID="LocalBuilder_Sample_SetLocalSymInfo" SnippetID="3"/>
		</example>
	</doc>
	<doc for="LocalBuilder.LocalType">
		<summary>
			<para> Returns the type of the local variable.</para>
		</summary>
		<value>
			<para>The type of the local variable.</para>
		</value>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="LocalType"/>.</para>
			<codelink SampleID="LocalBuilder_Sample_SetLocalSymInfo" SnippetID="3"/>
		</example>
	</doc>
</docs>
