<docs>
	<doc for="MethodRental">
		<summary>
			<para> Provides a fast way
      to swap method body implementation given a method of a class.
      </para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MethodRental.SwapMethodBody">
		<summary>
			<para>Swaps the body of a method.</para>
		</summary>
		<param name="cls">The class containing the method. </param>
		<param name="methodtoken">The token for the method. </param>
		<param name="rgIL">A pointer to the method. This should include the method header. </param>
		<param name="methodSize">The size of the new method body in bytes. </param>
		<param name="flags">Flags that control the swapping. See the definitions of the constants. </param>
		<exception cref="System.ArgumentNullException"><paramref name="cls"/> is <see langword="null"/>.</exception>
		<exception cref="System.NotSupportedException">The type <paramref name="cls"/> is not complete.</exception>
		<remarks>
			<para>You cannot use this method to swap the body
      of a global method.</para>
			<para>The method can only be called by the client that created the dynamic module
      that contains the type whose method's body is being swapped.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para>The following example illustrates how to swap a method body for a new body.
      It also illustrates how to obtain a method token for an existing method and how
      to construct a blob of bytes representing the Microsoft Intermediate Language (MSIL) code to be passed to
   <see langword="SwapMethodBody"/>.</para>
			<codelink SampleID="Classic MethodRental.SwapMethodBody Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodRental.JitOnDemand">
		<summary>
			<para> Specifies that
      the method
      should be just-in-time (JIT) compiled when needed.
      </para>
		</summary>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MethodRental.JitImmediate">
		<summary>
			<para> Specifies that the
      method should be just-in-time (JIT) compiled immediately.
      </para>
		</summary>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
</docs>
