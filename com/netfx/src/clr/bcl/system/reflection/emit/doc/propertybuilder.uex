<docs>
	<doc for="PropertyBuilder.PropertyToken">
		<summary>
			<para>
       Retrieves the token for this property.
    </para>
		</summary>
		<value>
			<para>
       Read-only. Retrieves the token for this property.
    </para>
		</value>
	</doc>
	<doc for="PropertyBuilder.SetValue">
		<overload>
			<para>Sets the property value for the given object to the given value.</para>
		</overload>
		<summary>
			<para>Sets the value of the property with optional index values for index properties.</para>
		</summary>
		<param name="obj">The object whose property value will be set.</param>
		<param name="value">The new value for this property.</param>
		<param name="index">Optional index values for indexed properties. This value should be <see langword="null"/> for non-indexed properties.</param>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>To set the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.SetValue.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetIndexParameters">
		<summary>
			<para> Returns an array of all the index parameters for the property.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="ParameterInfo "/>containing the parameters for the indexes.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.Attributes">
		<summary>
			<para>Gets the attributes for this property.</para>
		</summary>
		<value>
			<para>Attributes of this property.</para>
		</value>
	</doc><doc for="PropertyBuilder.CanRead">
		<summary>
			<para>Gets a value indicating whether the property can be read.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this property can be read; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para> Boolean property indicating if the property can be read. If the property does not have a get accessor, it cannot be read.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.CanWrite">
		<summary>
			<para>Gets a value indicating whether the property can be written to.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this property can be written to; otherwise, <see langword="false"/> .</para>
		</value>
		<remarks>
			<para> Boolean property indicating if the property can be written to. If the property does not have a set accessor, it cannot be written to.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.Name">
		<summary>
			<para>Gets the name of this member.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing the name of this member.</para>
		</value>
	</doc><doc for="PropertyBuilder.DeclaringType">
		<summary>
			<para>Gets the class that declares this member.</para>
		</summary>
		<value>
			<para>The <see langword="Type "/>object for
   the class that declares this member.</para>
		</value>
	</doc><doc for="PropertyBuilder.ReflectedType">
		<summary>
			<para>Gets the class object that was used to obtain this
      instance of <see langword="MemberInfo"/>.
			</para>
		</summary>
		<value>
			<para>The <see langword="Type"/> object
   through which this <see langword="MemberInfo"/> object was obtained.</para>
		</value>
	</doc><doc for="PropertyBuilder.PropertyType">
		<summary>
			<para>Gets the type of the field of this property.</para>
		</summary>
		<value>
			<para>The type of this property.</para>
		</value>
	</doc><doc for="PropertyBuilder.GetSetMethod">
		<summary>
			<para> Returns the set accessor for this property.</para>
		</summary>
		<param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. <see langword="true"/> if non-public methods are to be included; otherwise, <see langword="false"/> .</param>
		<returns>
			<list type="table">
				<listheader>
					<term>Value</term>
					<description>Condition</description>
				</listheader>
				<item>
					<term> A <see cref="System.Reflection.MethodInfo"/> object representing the Set method for this property.</term>
					<description><para>The set accessor is public.</para>
						<para><paramref name="nonPublic "/>is true and non-public methods can be returned.</para></description>
				</item>
				<item>
					<term> null</term>
					<description><para><paramref name="nonPublic "/>is true, but the property is read-only.</para>
						<para><paramref name="nonPublic "/>is false and the set accessor is non-public.</para></description>
				</item>
			</list>
		</returns>
		<remarks>
			<para>To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.SetCustomAttribute1">
		<summary>
			<para> Set a custom attribute using a custom attribute builder.
      </para>
		</summary>
		<param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
		<exception cref="System.ArgumentNullException"><paramref name="customBuilder "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">if <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has been called on the enclosing type.</exception>
	</doc><doc for="PropertyBuilder.SetConstant">
		<summary>
			<para>Sets the default value of this property.</para>
		</summary>
		<param name="defaultValue">The default value of this property. </param>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has been called on the enclosing type.</exception>
		<remarks>
			<para><paramref name="defaultValue"/> is restricted to
   the following types: <see langword="Boolean"/>, <see langword="SByte"/>,
<see langword="Int16"/>, <see langword="Int32"/>, <see langword="Int64"/>, 
<see langword="Byte"/>, <see langword="UInt16"/>, <see langword="UInt32"/>, 
<see langword="UInt64"/>, <see langword="Single"/>, <see langword="Double"/>, 
<see langword="DateTime"/>, <see langword="Char"/>, <see langword="String"/>, and 
<see langword="Enum"/>. If the type of the property is <see langword="Decimal "/>or <see langword="Object"/> , <paramref name="defaultValue"/> can only be null.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetValue">
		<summary>
			<para>Gets the value of the indexed property by calling the property's getter method.</para>
		</summary>
		<param name="obj">The object whose property value will be returned.</param>
		<param name="index">Optional index values for indexed properties. This value should be <see langword="null"/> for non-indexed properties.</param>
		<returns>
			<para>The value of the specified indexed
      property.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>To get the value of a property, reflect on the property's
      parent type using Type.GetType or Assembly.GetType, retrieve the
   <see langword="Reflection "/>property object from the type, and call
   <see langword="PropertyInfo.GetValue"/>
   .</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetValue1">
		<summary>
			<para>Gets the value of a property having the specified
      binding, index, and <see langword="CultureInfo"/> .</para>
		</summary>
		<param name="obj">The object whose property value will be returned.</param>
		<param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags"/>: <see langword="InvokeMethod"/>, <see langword="CreateInstance"/>, <see langword="Static"/>, <see langword="GetField"/>, <see langword="SetField"/>, <see langword="GetProperty"/>, or <see langword="SetProperty"/>. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static"/> flag of <see langword="BindingFlags"/> must be set.</param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects using reflection. If <paramref name="binder"/> is <see langword="null"/> , the default binder is used.</param>
		<param name="index">Optional index values for indexed properties. This value should be <see langword="null"/> for non-indexed properties.</param>
		<param name="culture">The <see langword="CultureInfo"/> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent"/> method will be called successively in search of a match. If this value is <see langword="null"/>, the <see langword="CultureInfo"/> is obtained from the <see langword="CultureInfo.CurrentUICulture"/> property.</param>
		<returns>
			<para>The property value for <paramref name="obj"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.SetValue1">
		<summary>
			<para> Sets the property value for the given object to the given value.</para>
		</summary>
		<param name="obj">The object whose property value will be returned.</param>
		<param name=" value">The new value for this property.</param>
		<param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags"/>: <see langword="InvokeMethod"/>, <see langword="CreateInstance"/>, <see langword="Static"/>, <see langword="GetField"/>, <see langword="SetField"/>, <see langword="GetProperty"/>, or <see langword="SetProperty"/>. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static"/> flag of <see langword="BindingFlags"/> must be set.</param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects using reflection. If <paramref name="binder"/> is <see langword="null"/> , the default binder is used.</param>
		<param name="index">Optional index values for indexed properties. This value should be <see langword="null"/> for non-indexed properties.</param>
		<param name="culture">The <see langword="CultureInfo"/> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent"/> method will be called successively in search of a match. If this value is <see langword="null"/>, the <see langword="CultureInfo"/> is obtained from the <see langword="CultureInfo.CurrentUICulture"/> property.</param>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>To set the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.SetValue.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetAccessors">
		<summary>
			<para>Returns an array of the public and non-public 
   <see langword="get"/> and <see langword="set"/> accessors on this property.</para>
		</summary>
		<param name="nonPublic">Indicates whether non-public methods should be returned in the <see langword="MethodInfo"/> array. <see langword="true"/> if non-public methods are to be included; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>An array of type <see langword="MethodInfo"/> containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para>To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetGetMethod">
		<summary>
			<para> Returns the public and non-public get accessor for this property.</para>
		</summary>
		<param name="nonPublic">Indicates whether non-public get accessors should be returned. <see langword="true"/> if non-public methods are to be included; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>A <see langword="MethodInfo"/> object representing the get accessor for this property, if <paramref name="nonPublic "/>is <see langword="true"/>. Returns <see langword="null"/> if <paramref name="nonPublic "/>is <see langword="false"/> and the get accessor is non-public, or if <paramref name="nonPublic "/>is <see langword="true"/> but no get accessors exist.</para>
		</returns>
		<remarks>
			<para>To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetCustomAttributes">
		<overload>
			<para>Returns all the custom
      attributes defined on this property.</para>
		</overload>
		<summary>
			<para>Returns an array of all the custom attributes for this property.</para>
		</summary>
		<param name="inherit">If <see langword="true"/> , walks up this property's inheritance chain to find the custom attributes</param>
		<returns>
			<para>An array of all the custom attributes.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para> Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.GetCustomAttributes1">
		<summary>
			<para>Returns an array of custom attributes identified by
   <see cref="System.Type"/> .</para>
		</summary>
		<param name="attributeType">An array of custom attributes identified by type.</param>
		<param name=" inherit">If <see langword="true"/> , walks up this property's inheritance chain to find the custom attributes.</param>
		<returns>
			<para>An array of custom attributes defined
      on this reflected member, or <see langword="null"/> if no attributes are defined
      on this member.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para> Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.IsDefined">
		<summary>
			<para>Indicates whether one or more instance of
   <paramref name="attributeType"/> is defined on this property.</para>
		</summary>
		<param name="attributeType">The <see langword="Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">Specifies whether to walk up this property's inheritance chain to find the custom attributes.</param>
		<returns>
			<para><see langword="true"/> if one or more
   instance of <paramref name="attributeType"/> is defined on this property; otherwise
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported.</exception>
		<remarks>
			<para> Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.</para>
		</remarks>
	</doc><doc for="PropertyBuilder.SetCustomAttribute">
		<overload>
			<para>Sets a custom attribute.</para>
		</overload>
		<summary>
			<para> Set a custom attribute using a specified custom attribute blob.
      </para>
		</summary>
		<param name="con">The constructor for the custom attribute. </param>
		<param name="binaryAttribute">A byte blob representing the attributes. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has been called on the enclosing type.</exception>
		<remarks>
			<para> See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition
      II documentation is included with the .NET Framework SDK installation, and can
      be found in the %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs
      directory.
      </para>
		</remarks>
	</doc>
	<doc for="PropertyBuilder">
		<summary>
			<para> Defines the properties for a type.
      </para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para> A <see langword="PropertyBuilder "/>is always associated
   with a <see langword="TypeBuilder"/>. The
<see langword="TypeBuilder"/>.<see langword="DefineProperty "/>method will return 
   a new <see langword="PropertyBuilder "/> to a client.
   </para>
		</remarks>
		<example>
			<para>The following code sample demonstrates how to implement properties in a 
      dynamic type using a <see langword="PropertyBuilder"/> obtained via <see cref="System.Reflection.Emit.TypeBuilder.DefineProperty" qualify="true"/>to create the property framework and an
      associated <see cref="System.Reflection.Emit.MethodBuilder"/> to implement the IL logic within the
      property.</para>
			<codelink SampleID="System.Reflection.Emit.PropertyBuilder Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PropertyBuilder.SetGetMethod">
		<summary>
			<para> Sets the method that gets the property value.
      </para>
		</summary>
		<param name="mdBuilder">A <see langword="MethodBuilder"/> object that represents the method that gets the property value. </param>
		<exception cref="System.ArgumentNullException"><paramref name="mdBuilder "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has been called on the enclosing type.</exception>
		<example>
			<para>The following code sample demonstrates how to attach a dynamic method to a 
   <see langword="get"/> property created with <see langword="PropertyBuilder"/> 
   using <see langword="SetGetMethod"/>.</para>
			<codelink SampleID="PropertyBuilder_SetGetMethod_4" SnippetID="1"/>
		</example>
	</doc>
	<doc for="PropertyBuilder.AddOtherMethod">
		<summary>
			<para> Adds one of the other methods associated with this property.
      </para>
		</summary>
		<param name="mdBuilder">A <see langword="MethodBuilder"/> object that represents the other method. </param>
		<exception cref="System.ArgumentNullException"><paramref name="mdBuilder "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has been called on the enclosing type.</exception>
	</doc>
	<doc for="PropertyBuilder.SetSetMethod">
		<summary>
			<para> Sets the method that sets the property value.
      </para>
		</summary>
		<param name="mdBuilder">A <see langword="MethodBuilder"/> object that represents the method that sets the property value. </param>
		<exception cref="System.ArgumentNullException"><paramref name="mdBuilder "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException"><see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> has been called on the enclosing type.</exception>
		<example>
			<para>The following code sample demonstrates how to attach a dynamic method to a 
   <see langword="set"/> property created with <see langword="PropertyBuilder"/> 
   using <see langword="SetSetMethod"/>.</para>
			<codelink SampleID="PropertyBuilder_SetGetMethod_4" SnippetID="2"/>
		</example>
	</doc>
</docs>
