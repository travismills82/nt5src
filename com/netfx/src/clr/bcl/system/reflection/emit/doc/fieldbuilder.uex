<docs>
	<doc for="FieldBuilder.GetToken">
		<summary>
			<para>Returns the token representing this field.</para>
		</summary>
		<returns>
			<para>Returns the <see cref="System.Reflection.Emit.FieldToken"/> object that
    represents the token for this field.</para>
		</returns>
	</doc>
	<doc for="FieldBuilder.FieldType">
		<summary>
			<para>Indicates the <see cref="System.Type"/> object that represents the
    type of this field. This property is read-only.</para>
		</summary>
		<value>
			<para> The <see cref="System.Type"/> object that
    represents the type of this field.</para>
		</value>
	</doc>
	<doc for="FieldBuilder.DeclaringType">
		<summary>
			<para>Indicates a reference to the <see cref="System.Type"/> object for the type that
    declares this field. This property is read-only.</para>
		</summary>
		<value>
			<para> A reference to the <see cref="System.Type"/> 
 object for the type that declares this field.</para>
		</value>
	</doc>
	<doc for="FieldBuilder.FieldHandle">
		<summary>
			<para>Indicates the internal metadata handle
      for this field. This property is read-only.</para>
		</summary>
		<value>
			<para> The internal metadata
      handle for this field.</para>
		</value>
		<exception cref="System.NotSupportedException"> This method is not supported. </exception>
	</doc><doc for="FieldBuilder.GetCustomAttributes">
		<overload>
			<para> Returns the custom attributes defined for this
      field.</para>
		</overload>
		<summary>
			<para>Returns all the custom attributes defined for this field.</para>
		</summary>
		<param name="inherit">Controls inheritance of custom attributes from base classes.</param>
		<returns>
			<para> An array of type <see cref="System.Object"/> representing all the custom
   attributes of the constructor represented by this <see cref="System.Reflection.Emit.FieldBuilder"/>
   instance.</para>
		</returns>
		<exception cref="System.NotSupportedException"> This method is not supported. </exception>
	</doc><doc for="FieldBuilder.GetCustomAttributes1">
		<summary>
			<para>Returns all the custom attributes defined for this field identified by the given type.</para>
		</summary>
		<param name=" attributeType">The custom attribute type.</param>
		<param name="inherit">Controls inheritance of custom attributes from base classes.</param>
		<returns>
			<para> An array of type <see cref="System.Object"/> representing all the custom
   attributes of the constructor represented by this <see cref="System.Reflection.Emit.FieldBuilder"/>
   instance.</para>
		</returns>
		<exception cref="System.NotSupportedException"> This method is not supported. </exception>
	</doc><doc for="FieldBuilder.IsDefined">
		<summary>
			<para>Indicates whether an attribute having the specified type is defined on a field.</para>
		</summary>
		<param name="attributeType">The type of the attribute.</param>
		<param name="inherit">Controls inheritance of custom attributes from base classes.</param>
		<returns>
			<para><see langword="true"/> if one or more instance of <paramref name="attributeType"/> is
   defined on this field; otherwise, <see langword="false"/> .</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. Retrieve the field using <see cref="System.Type.GetField"/> and call <see cref="System.Reflection.MemberInfo.IsDefined"/> on the returned <see cref="System.Reflection.FieldInfo"/>.</exception>
	</doc><doc for="FieldBuilder.SetConstant">
		<summary>
			<para>Sets the default value of this field.</para>
		</summary>
		<param name="defaultValue">The new default value for this field.</param>
		<exception cref="System.InvalidOperationException">The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> .</exception>
		<remarks>
			<para><paramref name="defaultValue"/> is restricted
   to the following types: <see langword="Boolean"/>, <see langword="SByte"/>,
<see langword="Int16"/>, <see langword="Int32"/>, <see langword="Int64"/>, 
<see langword="Byte"/>, <see langword="UInt16"/>, <see langword="UInt32"/>, 
<see langword="UInt64"/>, <see langword="Single"/>, <see langword="Double"/>, 
<see langword="DateTime"/>, <see langword="Char"/>, <see langword="String"/>, and 
<see langword="Enum"/>. If the type of the field is <see langword="Decimal "/>or 
<see langword="Object"/> 
, <paramref name="defaultValue"/> can only be null.</para>
		</remarks>
	</doc><doc for="FieldBuilder.GetValue">
		<summary>
			<para>Retrieves the value of the field supported by the given object.</para>
		</summary>
		<param name="obj">The object on which to access the field.</param>
		<returns>
			<para> An <see cref="System.Object"/> containing the value of
   the field reflected by this instance.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported. </exception>
		<remarks>
			<para>If the field is <see langword="static"/>, the
<paramref name="obj"/> 
parameter is ignored. For non-static fields,
<paramref name="obj"/>
should be an instance of a class that inherits or declares the field.</para>
			<para>The return type of <see cref="System.Reflection.Emit.FieldBuilder.GetValue"/> is <see cref="System.Object"/>. For example, if the field holds a
Boolean primitive value, an instance of <see cref="System.Object"/> with the appropriate Boolean value is
returned. Before returning the value, <see cref="System.Reflection.Emit.FieldBuilder.GetValue"/>
checks to see if the user has access permission.</para>
			<para> Access restrictions are ignored for fully-trusted code.
<see langword="Private"/>
constructors, methods, fields, and properties can be accessed and invoked
using Reflection whenever the code is fully-trusted.</para>
		</remarks>
	</doc><doc for="FieldBuilder.SetOffset">
		<summary>
			<para>Specifies the field layout.</para>
		</summary>
		<param name="iOffset">The offset of the field within the type containing this field.</param>
		<exception cref="System.InvalidOperationException">The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> .</exception>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="SetOffset"/>.</para>
			<codelink SampleID="FieldBuilder_SetOffset" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="FieldBuilder.SetMarshal">
		<summary>
			<para>Describes the native marshaling of the field.</para>
		</summary>
		<param name="unmanagedMarshal">A descriptor specifying the native marshalling of this field.</param>
		<exception cref="System.ArgumentNullException"><paramref name="unmanagedMarshal"/> is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> .</exception>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="SetMarshal"/>.</para>
			<codelink SampleID="FieldBuilder_SetOffset" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="FieldBuilder.ReflectedType">
		<summary>
			<para>Indicates the reference to the <see cref="System.Type"/><see langword=" "/> object from which this object was obtained. This property is read-only.</para>
		</summary>
		<value>
			<para>A reference to the <see cref="System.Type"/>
object from which this instance was obtained.</para>
		</value>
		<remarks>
			<para>A <see cref="System.Reflection.Emit.FieldBuilder"/> object represents a
   field of a particular class. In order to obtain a <see cref="System.Reflection.Emit.FieldBuilder"/> object, the <see cref="System.Type"/> object that
   represents the class that supports the field is queried. This property holds a
   reference to that <see cref="System.Type"/>
   object.</para>
			<para>The following code sample illustrates the use of 
<see langword="ReflectedType"/>.</para>
			<codelink SampleID="FieldBuilder_ReflectedType" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="FieldBuilder.Attributes">
		<summary>
			<para>Indicates the attributes of this field. This property is read-only.</para>
		</summary>
		<value>
			<para> The attributes of this field.</para>
		</value>
		<remarks>
			<para>The following code sample illustrates the use of 
   <see langword="Attributes"/>.</para>
			<codelink SampleID="FieldBuilder_ReflectedType" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="FieldBuilder.Name">
		<summary>
			<para>Indicates the name of this field. This property is read-only.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/> containing the name of this field.</para>
		</value>
		<remarks>
			<para>The following code sample illustrates the use of <see langword="Name"/>.</para>
			<codelink SampleID="FieldBuilder_Class_Name" SnippetID="1"/>
		</remarks>
	</doc>
	<doc for="FieldBuilder.SetCustomAttribute">
		<overload>
			<para>Sets a custom attribute.</para>
		</overload>
		<summary>
			<para>Sets a custom attribute using a specified custom attribute blob.</para>
		</summary>
		<param name="con">The constructor for the custom attribute.</param>
		<param name="binaryAttribute">A byte blob representing the attributes.</param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The parent type of this field is complete.</exception>
		<remarks>
			<para>See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition II documentation is
      included with the .NET Framework SDK installation, and can be found in the
      %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs directory.</para>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="SetCustomAttribute"/> in the context of <see cref="System.Reflection.Emit.FieldBuilder"/>, using a byte blob.</para>
			<codelink SampleID="FieldBuilder_SetCustomAttributes" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FieldBuilder.SetCustomAttribute1">
		<summary>
			<para>Sets a custom attribute using a custom attribute builder.</para>
		</summary>
		<param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/>is <see langword="null"/>.</exception>
		<exception cref="System.InvalidOperationException">The parent type of this field is complete.</exception>
		<example>
			<para>The following code sample illustrates the use of 
   <see langword="SetCustomAttribute"/> in the context of <see cref="System.Reflection.Emit.FieldBuilder"/>, using a <see cref="System.Reflection.Emit.CustomAttributeBuilder"/>.</para>
			<codelink SampleID="FieldBuilder_SetCustomAttributes" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FieldBuilder.SetValue">
		<summary>
			<para>Sets the value of the field supported by the given object.</para>
		</summary>
		<param name="obj">The object on which to access the field.</param>
		<param name="val">The value to assign to the field.</param>
		<param name="invokeAttr">A member of <see langword="IBinder"/> that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).</param>
		<param name="binder">A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.</param>
		<param name="culture">The software preferences of a particular culture.</param>
		<exception cref="System.NotSupportedException">This method is not supported. </exception>
		<remarks>
			<para>This method will assign the <paramref name="val"/> parameter to
   the field reflected by this instance on <see cref="System.Object"/>
				<paramref name="obj"/>. If the field is static, <paramref name="obj"/> will be ignored. For non-static fields, <paramref name="obj"/>
should be an instance of a
class that inherits or declares the field.</para>
			<para>The new value is passed as an <see cref="System.Object"/>. For example, if
the field's type is Boolean, an instance of <see cref="System.Object"/> with the appropriate Boolean value is
passed. Before setting the value, <see cref="System.Reflection.Emit.FieldBuilder.SetValue"/>
checks to see if the user has access permission.</para>
			<para> Access restrictions are ignored for fully-trusted code.
<see langword="Private"/>
constructors, methods, fields, and properties can be accessed and invoked
using Reflection whenever the code is fully-trusted.</para>
			<note type="note">
   This method is currently not supported. As a workaround, retrieve the <see cref="System.Reflection.FieldInfo"/> by
   reflecting on the finished type and call <see cref="System.Reflection.FieldInfo.SetValue"/> to set
   the value of the field.
</note>
		</remarks>
	</doc>
	<doc for="FieldBuilder">
		<summary>
			<para>Defines and represents a field. This class cannot be
      inherited.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para>Get an instance of <see langword="FieldBuilder"/> by calling
<see cref="System.Reflection.Emit.TypeBuilder.DefineField"/>, <see cref="System.Reflection.Emit.ModuleBuilder.DefineInitializedData"/>, or <see cref="System.Reflection.Emit.ModuleBuilder.DefineUninitializedData"/>.</para>
			<note type="note">
   The <see cref="System.Reflection.Emit.FieldBuilder.SetValue"/> method is currently not supported. As a
   workaround, retrieve the <see cref="System.Reflection.FieldInfo"/> by
   reflecting on the finished type and call <see cref="System.Reflection.FieldInfo.SetValue"/> to set the value of the field.
</note>
		</remarks>
		<example>
			<para>The following code sample illustrates the use of
   <see langword="FieldBuilder"/>.</para>
			<codelink SampleID="FieldBuilder_Class_Name" SnippetID="1"/>
		</example>
	</doc>
</docs>
