<docs>
	<doc for="OpCode.OperandType">
		<summary>
			<para> The operand type of an Microsoft intermediate language (MSIL) instruction.
      </para>
		</summary>
		<value>
			<para>Read-only. The operand type of an MSIL
      instruction.</para>
		</value>
	</doc><doc for="OpCode.OpCodeType">
		<summary>
			<para> The type of Microsoft intermediate language (MSIL) instruction.
      </para>
		</summary>
		<value>
			<para>Read-only. The type of Microsoft intermediate language (MSIL)
      instruction.</para>
		</value>
	</doc><doc for="OpCode.Size">
		<summary>
			<para> The size of the Microsoft intermediate language (MSIL) instruction.
      </para>
		</summary>
		<value>
			<para>Read-only. The size of the MSIL
      instruction.</para>
		</value>
	</doc><doc for="OpCode.Value">
		<summary>
			<para> The value of the immediate operand of the Microsoft intermediate language (MSIL) instruction.
      </para>
		</summary>
		<value>
			<para>Read-only. The value of the immediate
      operand of the MSIL instruction.</para>
		</value>
	</doc><doc for="OpCode.Name">
		<summary>
			<para>The name of the Microsoft intermediate language (MSIL) instruction.</para>
		</summary>
		<value>
			<para>Read-only. The name of the MSIL
      instruction.</para>
		</value>
	</doc><doc for="OpCode.GetHashCode">
		<summary>
			<para>Returns the generated hash code for this 
   <see langword="Opcode"/> .</para>
		</summary>
		<returns>
   Returns the hash code for this
   instance.
</returns>
	</doc><doc for="OpCode.StackBehaviourPop">
		<summary>
			<para> How the Microsoft intermediate language (MSIL) instruction pops the stack.
      </para>
		</summary>
		<value>
			<para>Read-only. The way the MSIL
      instruction pops the stack.</para>
		</value>
	</doc><doc for="OpCode.StackBehaviourPush">
		<summary>
			<para> How the Microsoft intermediate language (MSIL) instruction pushes operand onto
      the stack.
      </para>
		</summary>
		<value>
			<para> Read-only. The way the MSIL instruction
      pushes operand onto the stack.</para>
		</value>
	</doc><doc for="OpCode.Equals">
		<summary>
			<para>Tests whether the given object is equal to this
   <see langword="Opcode"/> .</para>
		</summary>
		<param name="obj">The object to compare to this object.</param>
		<returns>
			<para><see langword="true"/> if
<paramref name="obj"/> is an instance of <see langword="Opcode"/> and is equal to this 
   object; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="OpCode.ToString">
		<summary>
			<para>Returns this <see langword="Opcode"/> as a <see cref="System.String"/> .</para>
		</summary>
		<returns>
			<para>Returns a <see cref="System.String"/> containing the
   name of this <see langword="Opcode"/>.</para>
		</returns>
	</doc><doc for="OpCode.FlowControl">
		<summary>
			<para> The flow control characteristics of the Microsoft intermediate language (MSIL) instruction.
      </para>
		</summary>
		<value>
			<para>Read-only. The type of flow control.</para>
		</value>
	</doc><doc for="OpCode">
		<summary>
			<para> Describes a Microsoft intermediate language (MSIL) instruction.
      </para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
	</doc></docs>
