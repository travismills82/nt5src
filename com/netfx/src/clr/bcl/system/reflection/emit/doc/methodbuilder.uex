<docs>
	<doc for="MethodBuilder.GetMethodImplementationFlags">
		<summary>
			<para>
       Returns
       the implementation flags for the method.
    </para>
		</summary>
		<returns>
			<para>
       Returns
       the implementation flags for the method.
    </para>
		</returns>
	</doc>
	<doc for="MethodBuilder.GetHashCode">
		<summary>
			<para>Gets the hash code for this method.</para>
		</summary>
		<returns>
   The hash code for this method.
</returns>
	</doc><doc for="MethodBuilder.ToString">
		<summary>
			<para> Returns this <see langword="MethodBuilder"/> instance as a string.
   </para>
		</summary>
		<returns>
			<para> Returns a string containing
      the name, attributes, method signature, exceptions,
      and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.
      </para>
		</returns>
	</doc><doc for="MethodBuilder.Signature">
		<summary>
			<para> Retrieves the signature of the field.
      </para>
		</summary>
		<value>
			<para> Read-only. A String containing the signature of the 
      method reflected by this <see langword="MethodBase "/>
      instance.
      </para>
		</value>
	</doc><doc for="MethodBuilder.Attributes">
		<summary>
			<para> Retrieves the attributes for this method.
      </para>
		</summary>
		<value>
			<para> Read-only. Retrieves the <see langword="MethodAttributes "/> 
for this method.
</para>
		</value>
	</doc><doc for="MethodBuilder.MethodHandle">
		<summary>
			<para> Retrieves the internal handle for the method. Use this
      handle to access the
      underlying
      metadata handle.
      </para>
		</summary>
		<value>
			<para> Read-only. The internal handle for the method. Use this
      handle to access the
      underlying
      metadata handle.
      </para>
		</value>
		<exception cref="System.NotSupportedException"> This method is not currently supported. Retrieve the method using <see cref="System.Type.GetMethod"/> and call <see cref="System.Reflection.MethodBase.MethodHandle"/> on the returned <see cref="System.Reflection.MethodInfo"/>.</exception>
	</doc><doc for="MethodBuilder.GetCustomAttributes">
		<overload>
			<para> Returns the custom attributes defined for this
      method.
      </para>
		</overload>
		<summary>
			<para> Returns all the custom attributes defined for this method.
      </para>
		</summary>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
		<returns>
			<para> Returns an array of objects representing all the custom
      attributes of this
      method.
      </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="System.Type.GetMethod"/> and call <see cref="System.Reflection.MemberInfo.GetCustomAttributes"/> on the returned <see cref="System.Reflection.MethodInfo"/>.</exception>
	</doc><doc for="MethodBuilder.GetCustomAttributes1">
		<summary>
			<para> Returns the custom attributes identified by the given type.
      </para>
		</summary>
		<param name="attributeType">The custom attribute type. </param>
		<param name=" inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
		<returns>
			<para> Returns an array of objects representing the attributes
      of this method that are of <see cref="System.Type"/> attribute
      type.
      </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="System.Type.GetMethod"/> and call <see cref="System.Reflection.MemberInfo.GetCustomAttributes"/> on the returned <see cref="System.Reflection.MethodInfo"/>.</exception>
	</doc><doc for="MethodBuilder.IsDefined">
		<summary>
			<para> Checks if the specified custom attribute type is defined.
      </para>
		</summary>
		<param name="attributeType">The custom attribute type. </param>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
		<returns>
			<para><see langword="true "/>if the specified custom attribute
   type is defined; otherwise, <see langword="false"/>.
   </para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="System.Type.GetMethod"/> and call <see cref="System.Reflection.MemberInfo.IsDefined"/> on the returned <see cref="System.Reflection.MethodInfo"/>.</exception>
	</doc><doc for="MethodBuilder.Equals">
		<summary>
			<para> Determines whether the given object is equal to this instance.
      </para>
		</summary>
		<param name="obj">The object to compare with this <see langword="MethodBuilder"/> instance. </param>
		<returns>
			<para><see langword="true "/>if <paramref name="obj"/> is an instance of
<see langword="MethodBuilder "/> and is equal to this object; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Equality is determined by having the same name, attributes, and
      signature.
      </para>
		</remarks>
	</doc><doc for="MethodBuilder.DefineParameter">
		<summary>
			<para>Defines
      a parameter of this method.</para>
		</summary>
		<param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</param>
		<param name="attributes">The attributes of the parameter.</param>
		<param name="strParamName">The name of the parameter. The name can be the null string.</param>
		<returns>
			<para>Returns a <see langword="ParameterBuilder"/>
object that represents the new parrameter
of this method.</para>
		</returns>
		<exception cref="System.ArgumentOutOfRangeException"><para> The method has no parameters.</para>
			<para>-or- </para>
			<para>
				<paramref name="position"/> is less than or equal to zero.</para>
			<para>-or-</para>
			<para>
				<paramref name="position"/> is greater than the number of the method's parameters.</para></exception>
		<exception cref="System.InvalidOperationException">The containing type was previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/></exception>
	</doc><doc for="MethodBuilder.ReturnType">
		<summary>
			<para> Retrieves the type of this methodâ€™s
      return value.
      </para>
		</summary>
		<value>
			<para> Read-only. The type of object this method returns. If
      the <see langword="MethodBuilder"/> was defined as having the return type
   <see langword="null"/>, the method will be defined to return void. However,
   <see langword="ReturnType"/> will return <see langword="null"/>
   .
   </para>
		</value>
	</doc><doc for="MethodBuilder.Invoke">
		<summary>
			<para>Dynamically
      invokes the method reflected by this instance on the given object, passing
      along the specified parameters, and under the constraints of the given binder.</para>
		</summary>
		<param name="obj">The object on which to invoke the specified method. If the method is static, this parameter is ignored.</param>
		<param name="invokeAttr">This must be a bit flag from <see cref="System.Reflection.BindingFlags"/>: <see langword="InvokeMethod"/>, <see langword="NonPublic"/>, and so on.</param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is <see langword="null"/>, the default binder is used. For more details, see <see cref="System.Reflection.Binder"/>.</param>
		<param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be <see langword="null"/>.</param>
		<param name="culture">An instance of <see cref="System.Globalization.CultureInfo"/> used to govern the coercion of types. If this is null, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used. (Note that this is necessary to, for example, convert a <see cref="System.String"/> that represents 1000 to a <see cref="System.Double"/> value, since 1000 is represented differently by different cultures.)</param>
		<returns>
			<para>Returns an object containing the return value of the invoked method.</para>
		</returns>
		<exception cref="System.NotSupportedException"> This method is not currently supported. Retrieve the method using <see cref="System.Type.GetMethod"/> and call <see cref="System.Type.InvokeMember"/> on the returned <see cref="System.Reflection.MethodInfo"/>.</exception>
		<remarks>
			<para>If the method is static, the <paramref name="obj "/>parameter is
   ignored. For non-static methods, <paramref name="obj "/>should be an instance of a class
   that inherits or declares the method and must be the same type as this class. If
   the method has no parameters, the value of <paramref name="parameters "/>should be
<see langword="null"/>. Otherwise the number, type, and order of elements in
   the parameters array should be identical to the
   number, type, and order of parameters for the method reflected by this
   instance.</para>
			<note type="note">
   Access restrictions are
   ignored for fully-trusted code. That is, private constructors, methods, fields,
   and properties can be accessed and invoked using Reflection whenever the code is
   fully-trusted.
</note>
		</remarks>
	</doc><doc for="MethodBuilder.Name">
		<summary>
			<para> Retrieves the name of this method.
      </para>
		</summary>
		<value>
			<para> Read-only. Retrieves a string containing
      the simple name of this method.
      </para>
		</value>
	</doc><doc for="MethodBuilder.SetCustomAttribute1">
		<summary>
			<para> Sets a custom attribute using a custom attribute builder.
      </para>
		</summary>
		<param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
		<exception cref="System.ArgumentNullException"><paramref name="customBuilder "/>is <see langword="null"/>.</exception>
	</doc><doc for="MethodBuilder.ReflectedType">
		<summary>
			<para> Retrieves the class that was used in reflection to obtain this
      object.
      </para>
		</summary>
		<value>
			<para> Read-only. The type used to obtain this
      method.
      </para>
		</value>
	</doc><doc for="MethodBuilder.DeclaringType">
		<summary>
			<para> Returns the type that
      declares
      this method.
      </para>
		</summary>
		<value>
			<para> Read-only. The type that
      declares
      this method.
      </para>
		</value>
		<example>
			<para>The following code illustrates the use of the <see langword="Type"/> 
property.</para>
			<codelink SampleID="MethodBuilderClass_TypeSample" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.GetBaseDefinition">
		<summary>
			<para> Return the base implementation
      for a
      method.
      </para>
		</summary>
		<returns>
			<para> The base implementation
      of this
      method.
      </para>
		</returns>
		<remarks>
			<para>This always returns the current <see langword="MethodBuilder"/> object.</para>
		</remarks>
	</doc>
	<doc for="MethodBuilder.CallingConvention">
		<summary>
			<para> Returns the calling convention
      of
      the method.
      </para>
		</summary>
		<value>
			<para> Read-only. The calling convention
      of
      the method.
      </para>
		</value>
	</doc>
	<doc for="MethodBuilder.GetToken">
		<summary>
			<para> Returns the <see langword="MethodToken"/> that represents
   the token for this method.
   </para>
		</summary>
		<returns>
			<para> Returns the <see langword="MethodToken"/> of this method.
   </para>
		</returns>
	</doc>
	<doc for="MethodBuilder.SetSymCustomAttribute">
		<summary>
			<para> Set a symbolic custom attribute using a blob.
      </para>
		</summary>
		<param name="name">The name of the symbolic custom attribute. </param>
		<param name="data">The byte blob that represents the value of the symbolic custom attribute. </param>
		<exception cref="System.InvalidOperationException"><para> The containing type was previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> . </para>
			<para>-or-</para>
			<para> The module that contains this method is not a debug module.</para></exception>
		<remarks>
			<para>Unlike the metadata custom attribute, this custom attribute is associated
      with a symbol writer.</para>
		</remarks>
		<example>
			<para>The code sample below illustrates the contextual usage of the
   <see langword="SetSymCustomAttribute"/> method to set 
      the byte values for the name and key of a custom attribute attached to a dynamic
      method.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.GetILGenerator">
		<overload>
			<para>Returns an <see langword="ILGenerator "/> for
   this method.</para>
		</overload>
		<summary>
			<para> Returns an <see langword="ILGenerator"/> for this method with a default Microsoft
   intermediate
   language (MSIL) stream size of 64 bytes.
   </para>
		</summary>
		<returns>
			<para> Returns an <see langword="ILGenerator"/>
object for this method.</para>
		</returns>
		<exception cref="System.InvalidOperationException"><see langword="MethodImplAttributes"/> indicates that the method body is not managed MSIL.</exception>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="GetILGenerator"/> method, creating and emitting a dynamic assembly 
      that will calculate the dot product of two points in 3D space.</para>
			<codelink SampleID="System.Reflection.Emit ILGenerator Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.GetILGenerator1">
		<summary>
			<para>Returns an <see langword="ILGenerator"/> for this method with the
   specified Microsoft intermediate language (MSIL) stream size.</para>
		</summary>
		<param name="size">The size of the MSIL stream, in bytes.</param>
		<returns>
			<para>Returns an <see langword="ILGenerator"/> object for this method. </para>
		</returns>
		<exception cref="System.InvalidOperationException"><see langword="MethodImplAttributes"/> indicates that the method body is not managed MSIL.</exception>
		<example>
			<para>The code sample below demonstrates the contextual usage of the 
   <see langword="GetILGenerator"/> method, creating and emitting a dynamic assembly 
      that will calculate the dot product of two points in 3D space.</para>
			<codelink SampleID="System.Reflection.Emit ILGenerator Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.InitLocals">
		<summary>
			<para> Gets or sets whether the local variables in this method
      should be zero initialized. The default value of this property is
   <see langword="true"/>
   
   .
   </para>
		</summary>
		<value>
			<para> Read/write. Gets or sets whether the local variables in
      this method should
      be
      zero initialized.
      </para>
		</value>
		<remarks>
			<para>If this property is set to
   <see langword="false"/>, the runtime will generate unverifiable code.</para>
		</remarks>
	</doc>
	<doc for="MethodBuilder.GetModule">
		<summary>
			<para> Returns
      a reference to the module that contains this method.
      </para>
		</summary>
		<returns>
			<para> Returns
      a reference to the module that contains this method.
      </para>
		</returns>
		<example>
			<para>The sample code below illustrates the usage of the <see langword="GetModule"/> method to retrieve information 
   about a dynamically-generated
   module.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.GetModule" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.GetParameters">
		<summary>
			<para> Returns
      the parameters of this method.
      </para>
		</summary>
		<returns>
			<para> An array of <see langword="ParameterInfo"/>
objects that
represent the parameters of the method.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="System.Type.GetMethod"/> and call <see langword="GetParameters"/> on the returned <see cref="System.Reflection.MethodInfo"/>.</exception>
		<example>
			<para> The code sample below illustrates the use of
   <see langword="GetParameters"/> to discover information on the 
      parameters passed to a dynamically-generated method.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.GetParameters Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.SetMarshal">
		<summary>
			<para>Sets marshaling information for the return type of
      this method.</para>
		</summary>
		<param name="unmanagedMarshal">Marshaling information for the return type of this method. </param>
		<exception cref="System.InvalidOperationException">The containing type was previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/></exception>
		<example>
			<para>The code sample below illustrates the contextual usage of the
   <see langword="SetMarshal"/> method to marshal the 
      results of a method call as a different type.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.SetMarshal Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.SetImplementationFlags">
		<summary>
			<para> Sets the
      implementation flags for this method.
      </para>
		</summary>
		<param name="attributes">The implementation flags to set. </param>
		<exception cref="System.InvalidOperationException">The containing type was previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/>.</exception>
		<example>
			<para>The code sample below illustrates the contextual use of the
   <see langword="SetImplementationFlags"/> method to 
      describe the implementation of MSIL in a method body.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.ReturnTypeCustomAttributes">
		<summary>
			<para>Returns the custom attributes of the
      method's return type.</para>
		</summary>
		<value>
			<para>Read-only. The custom attributes of
      the method's return type.</para>
		</value>
		<remarks>
			<para>This method always returns
      <see langword="null"/>. Get the <see cref="System.Reflection.MethodInfo"/>
   after the containing <see cref="System.Type"/> has been created and invoked <see cref="System.Reflection.MethodInfo.ReturnTypeCustomAttributes"/> on the <see cref="System.Reflection.MethodInfo"/>.</para>
		</remarks>
	</doc>
	<doc for="MethodBuilder.SetCustomAttribute">
		<overload>
			<para>Sets a custom attribute.</para>
		</overload>
		<summary>
			<para> Sets a custom attribute using a specified custom attribute blob.
      </para>
		</summary>
		<param name="con">The constructor for the custom attribute. </param>
		<param name="binaryAttribute">A byte blob representing the attributes. </param>
		<exception cref="System.ArgumentNullException"><paramref name="con "/> or <paramref name="binaryAttribute "/>is <see langword="null"/>. </exception>
		<remarks>
			<para> See the metadata specification in the ECMA Partition II 
      documentation for details on how to format <paramref name="binaryAttribute"/>. The Partition
      II documentation is included with the .NET Framework SDK installation, and can
      be found in the %\Microsoft.NET\FrameworkSDK\Tool Developers Guide\docs
      directory.
      </para>
		</remarks>
	</doc>
	<doc for="MethodBuilder">
		<summary>
			<para> Defines and represents a method
      (or constructor) on a dynamic class.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when using assemblies that were created with
      the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para><see langword="MethodBuilder"/> is
   used to fully describe a method in Microsoft intermediate language (MSIL),
   including the name, attributes, signature, and method body. It is used in
   conjunction with the <see cref="System.Reflection.Emit.TypeBuilder"/>
   
   class to create classes at runtime.</para>
		</remarks>
		<example>
			<para>An example using the <see langword="MethodBuilder "/> class to create a method within a dynamic
   type is provided below.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.AddDeclarativeSecurity">
		<summary>
			<para> Adds declarative security
      to
      this method.
      </para>
		</summary>
		<param name="action">The security action to be taken (Demand, Assert, and so on). </param>
		<param name="pset">The set of permissions the action applies to. </param>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="action"/> is invalid (<see langword="RequestMinimum"/>, <see langword="RequestOptional"/>, and <see langword="RequestRefuse"/> are invalid).</exception>
		<exception cref="System.InvalidOperationException">The containing type has been created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/> or if the permission set <paramref name="pset"/> contains an action that was added earlier by AddDeclarativeSecurity.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="pset"/> is <see langword="null"/>.</exception>
		<example>
			<para> The code sample below illustrates the contextual use of
   <see langword="AddDeclarativeSecurity"/> to require the 
      caller of a
      method to have unrestricted permissions.</para>
			<codelink SampleID="System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBuilder.CreateMethodBody">
		<summary>
			<para> Creates the body of the method using a supplied byte array of Microsoft Intermediate Language (MSIL)
      instructions.
      </para>
		</summary>
		<param name="il">An array containing valid MSIL instructions. If this parameter is <see langword="null"/>, the method's body is cleared. </param>
		<param name="count">The number of valid bytes in the MSIL array. This value is ignored if MSIL is <see langword="null"/>. </param>
		<exception cref="System.ArgumentOutOfRangeException">The <paramref name="count "/>is not within the range of indexes of the supplied MSIL instruction array and <paramref name="il"/> is not <see langword="null"/>. </exception>
		<exception cref="System.InvalidOperationException"><para>The containing type was previously created using <see cref="System.Reflection.Emit.TypeBuilder.CreateType"/>. </para>
			<para>-or-</para>
			<para> This method was called previously on this <see langword="MethodBuilder"/> with a non-<see langword="null"/>
				<paramref name="il"/> argument.</para></exception>
		<remarks>
			<para> This method creates the method's body from <paramref name="il"/>
, an array containing MSIL instructions as opcodes. The number
of bytes
of valid MSIL is given by count.</para>
			<note type="note">
   This is currently not fully
   supported. The user cannot supply the location of
   token fix ups and exception
   handlers.
   
</note>
		</remarks>
		<example>
			<para>In the example provided below, a simple dynamic
      method that adds two integers is generated via opcode using
   <see langword="CreateMethodBody"/>.</para>
			<codelink SampleID="System.Refelction.Emit.MethodBuilder.CreateMethodBody Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
