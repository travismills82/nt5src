<docs>
	<doc for="MethodBase.IsPublic">
		<summary>
			<para>Gets a value indicating whether this is a public method.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if this method is public; otherwise, 
 <see langword="false"/>. </para>
		</value>
		<remarks>
			<para>To get the <see cref="System.Reflection.MethodBase"/>, first get the type. From the type, get the 
    method. From the method, get the <see langword="MethodBase"/>. If the <see langword="MethodBase "/>or
    constructor is other than public, it is protected and cannot be readily
    accessed. To access a non-public method, set the <see cref="System.Reflection.BindingFlags"/>
    mask to <see langword="NonPublic"/> in
 <see langword="GetMethod"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic MethodBase.IsPublic Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="MethodBase.IsSpecialName">
		<summary>
			<para>Gets a value indicating whether this method has a special name.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if this method has a special name; 
    otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>The <see cref="System.Reflection.MethodAttributes.SpecialName"/>
 bit is set to flag members that are treated in a special way
 by some compilers (such as property accessors and operator overloading methods).</para>
		</remarks>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Reflection.MethodAttributes"/>
	</doc>
	<doc for="MethodBase.IsFamilyAndAssembly">
		<summary>
			<para>Gets a value indicating whether this method can be called by derived classes if they are in the same assembly.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if access to this method is restricted to members of the
   class itself and to members of derived classes that are in the same assembly;
   otherwise, <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="MethodBase.MethodHandle">
		<summary>
			<para>Gets a handle to the internal metadata representation of
      a method.</para>
		</summary>
		<value>
			<para>A <see cref="System.RuntimeMethodHandle"/>
object.</para>
		</value>
		<remarks>
			<para>The handles are valid only in the application domain in which they were obtained.</para>
		</remarks>
	</doc>
	<doc for="MethodBase.IsFamily">
		<summary>
			<para> Gets a value indicating whether access to this method is restricted to members of the class and members of its
      derived classes.</para>
		</summary>
		<value>
			<para><see langword="true"/> if access to the class is restricted to members of the class
   itself and to members of its derived classes; otherwise,
<see langword="false"/>. </para>
		</value>
		<remarks>
			<para>If a type member has <see langword="Family"/> level visibility it can be called from any member
   in a derived class, but not from any other type.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="MethodBase.IsFamilyOrAssembly">
		<summary>
			<para>Gets a value indicating whether this method can be called by derived classes, wherever they are, and by all
      classes in the same assembly.</para>
		</summary>
		<value>
			<para><see langword="true"/> if access to this
   method is restricted to members of the class itself, members of derived classes
   wherever they are, and members of other classes in the same assembly; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If a type member has <see langword="FamilyOrAssembly"/> level visibility it can be called from
   any member in a derived class or any member in the same assembly, but not from
   any other type.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="MethodBase.IsPrivate">
		<summary>
			<para> Gets a value indicating whether this member
      is private.</para>
		</summary>
		<value>
			<para><see langword="true"/> if access to this method is restricted to other members
   of the class itself; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>If a type member has <see langword="Private"/> level visibility, it can be called from any member
   in the same class and no others.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="MethodBase.MethodBase">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.MethodBase"/>
class.</para>
		</summary>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MethodBase.Attributes">
		<summary>
			<para>Gets the attributes associated with this method. </para>
		</summary>
		<value>
			<para>One of the <see cref="System.Reflection.MethodAttributes"/> values.</para>
		</value>
		<remarks>
			<para>All
      members have a set of attributes, which are defined in relation to the specific
      type of member.</para>
			<para>To get the <see cref="System.Reflection.MethodAttributes"/>, first get the type. From 
   the type, get the method. From the method, get the <see cref="System.Reflection.MethodAttributes"/>.</para>
			<note type="inotes">
   Use
   the <see cref="System.Reflection.MethodBase.Attributes"/> property
   
   to determine whether a method is <see langword="public"/>,
<see langword="private"/>, <see langword="final"/>, <see langword="virtual"/>, and
   so on.
   
</note>
		</remarks>
		<example>
			<para>The following code example displays the attributes of the user-defined
      method Mymethod.</para>
			<codelink SampleID="Classic MethodBase.Attributes Example" SnippetID="1"/>
			<para>This code produces the following output:</para>
			<para>Reflection.MethodBase.Attributes Sample </para>
			<para>Mymethodbase = Void Mymethod(Int32, System.String ByRef, System.String ByRef) </para>
			<para>PrivateScope </para>
			<para>FamANDAssem </para>
			<para>Family </para>
			<para>Public </para>
			<para>HideBySig </para>
			<para>ReuseSlot</para>
		</example>
		<seealso cref="System.Reflection.MethodAttributes"/>
	</doc>
	<doc for="MethodBase">
		<summary>
			<para> Provides information about methods and constructors.</para>
		</summary>
		<remarks>
			<para><see langword="MethodBase "/>is the base class of <see cref="System.Reflection.MethodInfo"/> and <see cref="System.Reflection.ConstructorInfo"/>.</para>
			<note type="inheritinfo">
   When you inherit from
<see langword="MethodBase"/>, you must override the following
   members: <see cref="System.Reflection.MethodBase.GetParameters"/>, the
   abstract overload of <see cref="System.Reflection.MethodBase.Invoke"/>, and <see cref="System.Reflection.MethodBase.GetMethodImplementationFlags"/>.
   
</note>
		</remarks>
	</doc>
	<doc for="MethodBase.IsAssembly">
		<summary>
			<para> Gets a
      value indicating whether this method can be called by
      other classes in the same assembly.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this method can
   be called by other classes in the same assembly; otherwise,
<see langword="false"/>. </para>
		</value>
		<remarks>
			<para>If set, this method can be called by other classes in the same assembly.</para>
			<para>To get the <see cref="System.Reflection.MethodBase"/>, first get the type. From the type, get the
   method. From the method, get the <see langword="MethodBase"/>. If the <see langword="MethodBase "/>or
   constructor is other than public, it is protected
   and cannot be readily accessed. To access a non-public method, set the <see cref="System.Reflection.BindingFlags"/>
   mask to <see langword="NonPublic"/> in
<see langword="GetMethod"/>.</para>
		</remarks>
		<example>
			<para>The following example determines whether a specified method can be called by 
      other classes in the same assembly, and displays the result.</para>
			<codelink SampleID="Classic MethodBase.IsAssembly Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="MethodBase.IsFinal">
		<summary>
			<para>Gets a value indicating whether this method is
   <see langword="final"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if this
   method is <see langword="final"/> ;
   otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>To determine if a method is overridable, it is not
      sufficient to check that <see cref="System.Reflection.MethodBase.IsVirtual"/> is <see langword="true"/>. For a method to be overridable, <see langword="IsVirtual"/> must be <see langword="true"/> and <see langword="IsFinal"/> must be <see langword="false"/>. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as <see langword="virtual"/>; therefore, the compiler marks the method <see langword="virtual"/><see langword="final"/>. So there are cases where a method is marked as <see langword="virtual"/> but is still not overridable. </para>
			<para>To establish with certainty whether a method is overridable, use code such as this:</para>
			<c>
      if (MethodInfo.IsVirtual &amp;&amp; !MethodInfo.IsFinal)
   </c>
			<para> If <see langword="IsVirtual"/> is <see langword="false"/> or <see langword="IsFinal"/> is <see langword="true"/> , then the method cannot be overridden.</para>
		</remarks>
		<example>
			<para>The following example displays <see langword="false"/> for <see langword="IsFinal"/>, which might lead you to think that MyMethod is overridable. The code prints <see langword="false"/> even though MyMethod is not marked <see langword="virtual"/> and thus cannot be overridden.</para>
			<codelink SampleID="Classic MethodBase.IsVirtual Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="MethodBase.IsVirtual">
		<summary>
			<para> Gets a value indicating whether the method is
   <see langword="virtual"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if this
   method is <see langword="virtual"/> ;
   otherwise, <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>A virtual member may reference instance data in a class and must be
      referenced through an instance of the class.</para>
			<para> To determine if a method is overridable, it is not sufficient to check that
   <see langword="IsVirtual "/> is <see langword="true"/>. For a method to be
      overridable, <see langword="IsVirtual"/> must be <see langword="true"/> and <see cref="System.Reflection.MethodBase.IsFinal"/> must be <see langword="false"/>. For example, a
      method might be non-virtual, but it implements an interface method. The common
      language runtime requires that all methods that implement interface members must
      be marked as <see langword="virtual"/>; therefore, the compiler marks the
      method <see langword="virtual"/><see langword="final"/>. So there are cases where a method is marked
      as <see langword="virtual"/> but is still not overridable. </para>
			<para>To establish with certainty whether a method is overridable, use code such as
      this:</para>
			<c>
      if (MethodInfo.IsVirtual &amp;&amp; !MethodInfo.IsFinal)
   </c>
			<para> If
   <see langword="IsVirtual"/> is <see langword="false"/> or <see langword="IsFinal"/>
   is <see langword="true"/>
   , then the method cannot
   be overridden.</para>
		</remarks>
		<example>
			<para>The following example displays 
   <see langword="false"/> for <see langword="IsFinal"/>, which might lead you to 
      think that MyMethod is overridable. The code prints <see langword="false"/> even
      though MyMethod is not marked <see langword="virtual"/>
      and thus cannot be
      overridden.</para>
			<codelink SampleID="Classic MethodBase.IsVirtual Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MethodBase.IsAbstract">
		<summary>
			<para>Gets a value indicating whether the method is 
      abstract.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the method 
   is abstract; otherwise,
<see langword="false"/>.</para>
		</value>
		<remarks>
			<para>An abstract member is declared on a base class and has no
      implementation
      supplied.</para>
			<para>To get the <see cref="System.Reflection.MethodBase"/>, first get the type. From the type, get the
   method. From the method, get the <see langword="MethodBase"/>. If the <see langword="MethodBase "/>or
   constructor is other than public, it is protected
   and cannot be readily accessed. To access a non-public method, set the <see cref="System.Reflection.BindingFlags"/>
   mask to <see langword="NonPublic"/> in
<see langword="GetMethod"/> .</para>
		</remarks>
		<example>
			<para>The following example determines whether specified the 
      method is abstract and displays the result. </para>
			<codelink SampleID="Classic MethodBase.IsAbstract Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="MethodBase.Invoke">
		<overload>
			<para>Invokes the method or constructor reflected by this <see langword="MethodInfo "/>instance.</para>
		</overload>
		<summary>
			<para>Invokes the underlying method or constructor represented
      by this <see langword="MethodInfo"/> object with the specified parameters.</para>
		</summary>
		<param name="obj">The instance that created this method.</param>
		<param name=" parameters"><para>An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be <see langword="null"/> .</para>
			<para>If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null"/>. For value-type elements, this value is 0, 0.0, or <see langword="false"/>, depending on the specific element type. </para></param>
		<returns>
			<para> An <see langword="Object"/> containing the return value
   of the invoked method, or a re-initialized object in the case of a constructor.</para>
		</returns>
		<exception cref="System.Reflection.TargetException"><para>The <paramref name="obj"/> parameter is <see langword="null"/> and the method is not static.</para>
			<para>-or- </para>
			<para> The method is not declared or inherited by the class of <paramref name="obj"/>.</para></exception>
		<exception cref="System.ArgumentException">The type of the <paramref name="parameters "/>parameter does not match the signature of the method or constructor reflected by this instance.</exception>
		<exception cref="System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception.</exception>
		<exception cref="System.Reflection.TargetParameterCountException">The <paramref name="parameters"/> array does not have the correct number of arguments.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to execute the constructor.</exception>
		<remarks>
			<para> Use this method to invoke methods with parameters
      that have default values. To bind to these methods, Reflection requires one of
      the binding flags <see langword="DefaultValueBinding"/>, <see langword="DefaultValueChangeType"/>, or <see langword="DefaultValueFull"/> to be specified explicitly. This is a
      requirement even in those cases where a value is passed for a
      parameter that has a default value.</para>
			<para> For example, consider a method such as <c>MyMethod(int x, float y = 2.0)</c> . To invoke this method with only the first argument as
   MyMethod(4), pass one of the above binding flags and pass two arguments,
   namely, 4 for the first argument and <see langword="Missing.Value"/> for the
   second argument. Unless you use <see langword="Missing.Value"/>, you may not omit optional parameters with the
<see langword="Invoke"/> method. If you must do so, use <see cref="System.Type.InvokeMember"/>
instead.</para>
			<para>This is a convenience method that calls the following
<see langword="Invoke"/> method, passing
<see langword="null"/> in the other parameters. If the invoked method throws an exception, <see cref="System.Exception.GetBaseException"/> returns the
   exception.</para>
			<para>To invoke a static method using its <see cref="System.Reflection.MethodInfo"/> object, the first parameter
should be <see langword="null"/>, as shown in the following call: </para>
			<para><c>Object myReturnValue =
   myMethodInfo.Invoke(null, myParametersArray);</c></para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting non-public objects. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<example>
			<para> The following samples demonstrate dynamic method lookup 
      using reflection. Note that all of the invocations return 1, because the method
      in classes A and B is <see langword="virtual"/>
      .</para>
			<codelink SampleID="Classic MethodBase.Invoke1 Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.Missing"/>
		<seealso cref="System.Type.InvokeMember"/>
	</doc>
	<doc for="MethodBase.IsStatic">
		<summary>
			<para>Gets a value indicating whether the method is
   <see langword="static"/> .</para>
		</summary>
		<value>
			<para><see langword="true"/> if this
   method is <see langword="static"/> ; otherwise,
<see langword="false"/>. </para>
		</value>
		<remarks>
			<para>A static member cannot implicitly reference instance 
      data in a
      class.</para>
		</remarks>
		<seealso cref="System.Boolean"/>
		<seealso cref="System.Reflection.MethodAttributes"/>
	</doc>
	<doc for="MethodBase.Invoke1">
		<summary>
			<para> When overridden in a derived class, invokes the reflected method or constructor with
      the given parameters.</para>
		</summary>
		<param name="obj">The object on which to invoke the method or constructor. If the method or constructor is static, this argument is ignored.</param>
		<param name=" invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="System.Reflection.BindingFlags"/>, such as <see langword="DefaultBinding"/>, <see langword="NonPublic"/> , and so on. If <paramref name="binder"/> is <see langword="null"/> , this parameter will be assigned the value <see langword="BindingFlags.DefaultBinding"/> ; thus, whatever you pass in is ignored.</param>
		<param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects via reflection. If <paramref name="binder"/> is <see langword="null"/> , the default binder is used.</param>
		<param name=" parameters"><para>An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be <see langword="null"/> .</para>
			<para>If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null"/>. For value-type elements, this value is 0, 0.0, or <see langword="false"/>, depending on the specific element type. </para></param>
		<param name=" culture">An instance of <see langword="CultureInfo"/> used to govern the coercion of types. If this is <see langword="null"/>, the <see langword="CultureInfo"/> for the current thread is used. (This is necessary to convert a <see langword="String"/> that represents 1000 to a <see langword="Double"/> value, for example, since 1000 is represented differently by different cultures.)</param>
		<returns>
			<para>An <see langword="Object"/> containing the return value
   of the invoked method, or a reinitialized object in the case
   of a constructor, or <see langword="null "/>if
   the method's return type is <see langword="void"/>. Before calling the method or constructor,
<see langword="Invoke"/>
checks to see if the user
has access permission and verify that the parameters are valid.</para>
		</returns>
		<exception cref="System.Reflection.TargetException">The <paramref name="obj"/> parameter is <see langword="null"/> and the method is not static. <para>-or- </para>
			<para>The method is not declared or inherited by the class of <paramref name="obj"/>.</para></exception>
		<exception cref="System.ArgumentException">The type of the <paramref name="parameters "/>parameter does not match the signature of the method or constructor reflected by this instance.</exception>
		<exception cref="System.Reflection.TargetParameterCountException">The <paramref name="parameters"/> array does not have the correct number of arguments.</exception>
		<exception cref="System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception.</exception>
		<exception cref="System.MethodAccessException">The caller does not have permission to execute the constructor.</exception>
		<remarks>
			<para>Dynamically invokes the method reflected by this
      instance on <paramref name="obj"/>, and passes along the specified parameters. If the
      method is static, the <paramref name="obj"/> parameter is ignored. For non-static methods,
      <paramref name="obj"/>
   should be an instance of a class that inherits or declares the method and must
   be the same type as this class. If the method has no parameters, the value of
<paramref name="parameters"/> 
should be <see langword="null"/>
. Otherwise, the number, type, and order of elements in <paramref name="parameters"/>
should be identical to the number, type, and order of
parameters for the method reflected by this instance.</para>
			<para>You may not omit optional parameters in calls to
<see langword="Invoke"/>. To invoke a method omitting optional parameters, you
   should call <see langword="Type.InvokeMember"/>
   instead.</para>
			<para> For pass-by-value primitive parameters, normal
   widening is performed (Int16 -&gt; Int32, for example). For pass-by-value reference
   parameters, normal reference widening is allowed (derived class to base class,
   and base class to interface type). However, for pass-by-reference primitive
   parameters, the types must match exactly. For pass-by-reference reference
   parameters, the normal widening still applies.</para>
			<para> For example, if the method reflected by this instance is
   declared as <c>public boolean
   Compare(String a, String b)</c>, then <paramref name="parameters"/> should be an array of <see langword="Objects"/> with length 2
such that <c>parameters[0] = new
Object("SomeString1") and parameters[1] = new Object("SomeString2")</c>
.</para>
			<para>Reflection uses dynamic method lookup when invoking
   virtual methods. For example, suppose that class B inherits from class A and
   both implement a virtual method named M. Now suppose that you have a
<see langword="MethodInfo"/> object that represents M on class A. If you use the
<see langword="Invoke"/>
method to
invoke M on an object of type B, then reflection will use the implementation
given by class B. Even if the object of type B is cast to A, the implementation
given by class B is used (see code sample below).</para>
			<para>On the other hand, if the method is non-virtual, then
   reflection will use the implementation given by the type from which the
<see langword="MethodInfo"/>
was obtained, regardless of the type of the object passed as the
target.</para>
			<para>Access restrictions are ignored for fully trusted code.
   That is, private constructors, methods, fields, and properties can be accessed
   and invoked via reflection whenever the code is fully trusted.</para>
			<para>If the invoked method throws an exception,
<see langword="TargetInvocationException.GetException"/> returns the exception. 
   This implementation throws a <see langword="NotSupportedException"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting non-public objects. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<example>
			<para> The following example demonstrates all members of
      the <see cref="System.Reflection.Binder" qualify="true"/> class using an overload of <see cref="System.Type.InvokeMember" qualify="true"/>.
      The private method <see langword="CanConvertFrom"/> finds compatible types for a
      given type. For another example of invoking members in a custom binding
      scenario, see <see topic="cpcondynamicallyloadingusingtypes"/>
      .</para>
			<codelink SampleID="Binder_1" SnippetID="1"/>
		</example>
		<seealso topic="cpcondynamicallyloadingusingtypes"/>
		<seealso cref="System.Type.InvokeMember"/>
	</doc>
	<doc for="MethodBase.GetParameters">
		<summary>
			<para>When overridden in a derived class, gets the parameters
      of the specified method or constructor.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="ParameterInfo"/>
containing information that matches the signature of the method (or constructor)
reflected by this <see langword="MethodBase"/>
instance.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="eventarg" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.ParameterInfo"/>
	</doc>
	<doc for="MethodBase.GetMethodImplementationFlags">
		<summary>
			<para>When overridden in a derived class, returns
      the <see cref="System.Reflection.MethodImplAttributes"/> flags. </para>
		</summary>
		<returns>
			<para>The <see langword="MethodImplAttributes"/> flags.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="ConstructorBuilder_GetModule_4" SnippetID="2"/>
		</example>
		<seealso cref="System.Reflection.MethodImplAttributes"/>
	</doc>
	<doc for="MethodBase.GetMethodFromHandle">
		<summary>
			<para>Gets method information by using the method's internal metadata representation (handle). </para>
		</summary>
		<param name="handle">The method's handle.</param>
		<returns>
			<para><see langword="MethodBase"/> information about the method.</para>
		</returns>
		<remarks>
			<para>The handles are valid only in the application domain in which they were obtained.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="MethodBase.IsHideBySig">
		<summary>
			<para> Gets a value indicating whether only a member of the same
      kind with exactly the same signature is hidden in the derived class. </para>
		</summary>
		<value>
			<para><see langword="true"/> if the member is hidden by
   signature; otherwise, <see langword="false"/> .</para>
		</value>
	</doc>
	<doc for="MethodBase.IsConstructor">
		<summary>
			<para>Gets a value indicating whether the method is a constructor.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this method
   is a constructor; otherwise, <see langword="false"/>.</para>
		</value>
		<seealso cref="System.Boolean"/>
	</doc>
	<doc for="MethodBase.CallingConvention">
		<summary>
			<para>Gets a value
      indicating the calling conventions for this method.</para>
		</summary>
		<value>
			<para> The <see cref="System.Reflection.CallingConventions"/>
for this method.</para>
		</value>
		<example>
			<codelink SampleID="type_getconstructor3" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.CallingConventions"/>
	</doc>
	<doc for="MethodBase.GetCurrentMethod">
		<summary>
			<para>Returns a <see langword="MethodBase"/>
object representing the currently
executing method.</para>
		</summary>
		<returns>
			<para>A <see langword="MethodBase"/>
object representing the currently
executing method.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="OneWayAttribute" SnippetID="1"/>
		</example>
	</doc>
</docs>
