<docs>
	<doc for="ICustomAttributeProvider">
		<summary>
			<para>
       Provides custom attributes for reflection objects that
       support
       them.
    </para>
		</summary>
		<remarks>
			<para>
       Nearly all the Reflection classes can have attributes associated
       with them. Attributes can be standard (public, private, HelpString) or custom.
    </para>
		</remarks>
	</doc>
	<doc for="ICustomAttributeProvider.IsDefined">
		<summary>
			<para> Indicates whether one or more instance of <paramref name="attributeType"/> is
   defined on this member.
   </para>
		</summary>
		<param name="attributeType">The type of the custom attributes. </param>
		<param name="inherit">When <see langword="true"/>, look up the hierarchy chain for the inherited custom attribute. </param>
		<returns>
			<para><see langword="true "/>if the <paramref name="attributeType "/>is
   defined on this member; <see langword="false "/>
   otherwise.
   </para>
		</returns>
	</doc><doc for="ICustomAttributeProvider.GetCustomAttributes">
		<overload>
			<para> Returns custom attributes defined on this member.
      </para>
		</overload>
		<summary>
			<para> Returns
      an array of custom attributes defined on this member,
      identified by type, or an empty
      array if there are no custom attributes of that type.
      </para>
		</summary>
		<param name="attributeType">The type of the custom attributes. </param>
		<param name="inherit">When <see langword="true"/>, look up the hierarchy chain for the inherited custom attribute. </param>
		<returns>
			<para> An array of
      Objects representing custom attributes, or an empty array.
      </para>
		</returns>
		<exception cref="System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
		<exception cref="System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType"/> defined on this member. </exception>
		<remarks>
			<para> If <paramref name="attributeType"/>
is a base class or interface, this method returns any implementation of that
type.</para>
			<para> This method returns custom attributes defined directly on a non-inherited
   member only.
   </para>
			<para>Calling <see cref="System.Reflection.ICustomAttributeProvider.GetCustomAttributes" qualify="true"/> on <see cref="System.Reflection.PropertyInfo"/> or <see cref="System.Reflection.EventInfo"/>
when the <paramref name="inherit"/> parameter of <see langword="GetCustomAttributes"/> is
<see langword="true"/> does not walk the type hierarchy. Use <see cref="System.Attribute" qualify="true"/> to inherit 
custom attributes.</para>
		</remarks>
	</doc><doc for="ICustomAttributeProvider.GetCustomAttributes1">
		<summary>
			<para> Returns an array of all of the custom attributes defined
      on this member, excluding
      named attributes, or an empty array if there are no custom
      attributes.
      </para>
		</summary>
		<param name="inherit">When <see langword="true"/>, look up the hierarchy chain for the inherited custom attribute. </param>
		<returns>
			<para> An array of Objects representing custom attributes, or
      an empty array.
      </para>
		</returns>
		<exception cref="System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
		<exception cref="System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType"/> defined on this member. </exception>
		<remarks>
			<para> Calling <see cref="System.Reflection.ICustomAttributeProvider.GetCustomAttributes" qualify="true"/> on <see cref="System.Reflection.PropertyInfo"/> or <see cref="System.Reflection.EventInfo"/>
when the <paramref name="inherit"/> parameter of <see langword="GetCustomAttributes"/> is
<see langword="true"/> does not walk the type hierarchy. Use <see cref="System.Attribute" qualify="true"/> to inherit custom
attributes.</para>
			<para>This method returns custom attributes defined directly on a non-inherited
   member only. </para>
		</remarks>
	</doc></docs>
