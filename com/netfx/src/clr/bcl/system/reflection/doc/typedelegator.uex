<docs>
	<doc for="TypeDelegator.typeImpl">
		<summary>
			<para>A value indicating type information. </para>
		</summary>
	</doc>
	<doc for="TypeDelegator.TypeDelegator">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Reflection.TypeDelegator"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.TypeDelegator"/> 
 class with default properties.</para>
		</summary>
	</doc>
	<doc for="TypeDelegator.TypeDelegator1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.TypeDelegator"/> class specifying the encapsulating
   instance.</para>
		</summary>
		<param name="delegatingType">The instance of the class <see cref="System.Type"/> that encapsulates the call to the method of an object.</param>
		<exception cref="System.ArgumentNullException"><paramref name="delegatingType"/> is <see langword="null"/> .</exception>
		<remarks>
			<para>This constructor is called from a class to generate a 
      delegate based upon the <see langword="Type"/>
      object for the class defining the
      method.</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.TypeHandle">
		<summary>
			<para>Gets a handle to the internal metadata representation of an implemented type.</para>
		</summary>
		<value>
			<para>A <see langword="RuntimeTypeHandle"/> object.</para>
		</value>
		<remarks>
			<para>A type handle is a unique integer value associated with each
       type. The handle is unique during the runtime.</para>
		</remarks>
		<seealso cref="System.RuntimeTypeHandle"/>
	</doc>
	<doc for="TypeDelegator.AssemblyQualifiedName">
		<summary>
			<para>Gets the assembly's fully qualified name.</para>
		</summary>
		<value>
			<para>A <see langword="String"/> containing the 
    assembly's fully qualified name.</para>
		</value>
	</doc>
	<doc for="TypeDelegator.GetConstructors">
		<summary>
			<para>Returns an array of <see langword="ConstructorInfo"/> objects representing
   constructors defined for the current class.</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>An array of type
   <see langword="ConstructorInfo"/> containing the specified constructors
      defined for this class. If no constructors are defined, an empty array is returned. Depending on the value
      of a specified parameter, only public constructors or both public and
      non-public constructors will be returned.</para>
		</returns>
		<remarks>
			<para>Class initializers are available only through
   <see langword="GetMember"/>, <see langword="GetMembers"/>,
   <see langword="FindMembers"/>, and <see langword="GetConstructors"/>
   .</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.GetEvents1">
		<summary>
			<para>Returns the events specified in
   <paramref name="bindingAttr"/> that are declared or inherited by the current
   <see langword="TypeDelegator"/>
   .</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>An array of type
   <see langword="EventInfo"/> containing the events specified in
   <paramref name="bindingAttr"/>
   . If there are no events, an empty array
   is returned.</para>
		</returns>
	</doc>
	<doc for="TypeDelegator.IsValueTypeImpl">
		<summary>
			<para>Gets a value indicating whether the type is a value type; 
      that is, not a class or an interface.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the type is a value type; otherwise, 
<see langword="false"/>. </para>
		</returns>
	</doc>
	<doc for="TypeDelegator.GetInterfaceMap">
		<summary>
			<para>Returns an interface mapping for the specified interface type.</para>
		</summary>
		<param name="interfaceType">The <see cref="System.Type"/> of the interface to retrieve a mapping of.</param>
		<returns>
			<para>An <see cref="System.Reflection.InterfaceMapping"/> object representing the interface mapping for 
 <paramref name="interfaceType"/>.</para>
		</returns>
		<remarks>
			<para>The interface map denotes how an interface is mapped into the actual methods 
       on a class that implements that interface.</para>
		</remarks>
		<seealso cref="System.Reflection.InterfaceMapping"/>
	</doc>
	<doc for="TypeDelegator.GetCustomAttributes">
		<overload>
			<para>Returns all the custom attributes defined for this type.</para>
		</overload>
		<summary>
			<para>Returns all the custom attributes defined for
      this type, specifying whether to search the type's inheritance chain.</para>
		</summary>
		<param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
		<returns>
			<para>An array of objects containing all the custom attributes defined for this
      type. </para>
		</returns>
		<exception cref="System.Reflection.ReflectionTypeLoadException">The custom attribute type cannot be loaded.</exception>
	</doc><doc for="TypeDelegator.GetCustomAttributes1">
		<summary>
			<para> Returns an array of
      custom attributes identified by type.</para>
		</summary>
		<param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
		<param name=" attributeType">An array of custom attributes identified by type.</param>
		<returns>
			<para>An array of objects containing the custom attributes
      defined in this type that match the <paramref name="attributeType"/>
      parameter, specifying whether to search the type's inheritance chain, or
   <see langword="null"/> if no custom attributes are defined on this type. </para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="attributeType "/>is <see langword="null"/>.</exception>
		<exception cref="System.Reflection.ReflectionTypeLoadException">The custom attribute type cannot be loaded.</exception>
	</doc><doc for="TypeDelegator.IsDefined">
		<summary>
			<para>Indicates whether a custom attribute identified
      by <paramref name="attributeType"/> is defined.</para>
		</summary>
		<param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
		<param name="attributeType">An array of custom attributes identified by type.</param>
		<returns>
			<para><see langword="true"/> if a custom attribute identified by
<paramref name="attributeType"/> is defined; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="attributeType "/>is <see langword="null"/>.</exception>
		<exception cref="System.Reflection.ReflectionTypeLoadException">The custom attribute type cannot be loaded.</exception>
	</doc><doc for="TypeDelegator.Module">
		<summary>
			<para>Gets the module of the implemented type.</para>
		</summary>
		<value>
			<para>A <see langword="Module"/> object representing the module of the
   implemented type.</para>
		</value>
		<remarks>
			<para>A module is a loadable unit that can contain type declarations
      and implementations. Modules contain enough information to enable the common
      language runtime to locate all implementation bits when the module is loaded.</para>
		</remarks>
	</doc><doc for="TypeDelegator.Assembly">
		<summary>
			<para>Gets the assembly of the implemented type.</para>
		</summary>
		<value>
			<para>An <see cref="System.Reflection.Assembly" qualify="true"/> object representing the assembly of the implemented type. </para>
		</value>
		<remarks>
			<para>Assemblies are the deployment units in the common language runtime. Assemblies establish
      the namespace for resolving requests and determine which resources are
      exposed externally and which are accessible from within the assembly. The
      common language runtime can determine and locate the assembly for any running
      object.</para>
		</remarks>
	</doc><doc for="TypeDelegator.GetMembers">
		<summary>
			<para> Returns members specified by <paramref name="bindingAttr"/>.</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>An array of type
   <see langword="MemberInfo"/> containing all the members of the current
      class and its base classes that meet the <paramref name="bindingAttr"/> filter.</para>
		</returns>
		<remarks>
			<para>If <paramref name="bindingAttr"/> is <see cref="System.Reflection.BindingFlags"/> .NonPublic, all the members will
   be considered. If there are no matches, an empty array is returned.</para>
		</remarks>
	</doc><doc for="TypeDelegator">
		<summary>
			<para>Wraps a <see langword="Type"/> object and delegates all 
   methods to that <see langword="Type"/>
   .</para>
		</summary>
		<remarks>
			<para>Delegates are used for the managed code objects to 
      encapsulate method calls. They are used primarily in <see langword="Event"/>
      notifications and callbacks.</para>
			<para>Derive from this type and only overload those methods you need to provide
      customization in.</para>
		</remarks>
	</doc><doc for="TypeDelegator.FullName">
		<summary>
			<para>Gets the fully qualified name of the implemented type.</para>
		</summary>
		<value>
			<para>A <see langword="String"/> containing the type's fully qualified name.</para>
		</value>
		<remarks>
			<para>A string containing the fully qualified name of the 
      current <see langword="TypeDelegator"/>
      .</para>
		</remarks>
	</doc><doc for="TypeDelegator.BaseType">
		<summary>
			<para>Gets the base type for the current type.</para>
		</summary>
		<value>
			<para>The base type for a type.</para>
		</value>
		<remarks>
			<para>The base type is the type from which this type directly
      inherits. Since the <see cref="System.Object"/> class type is
      the ultimate base class of all the other types, it is the only type that does
      not have a base type. In this case, <see langword="null"/> is returned as
      the base type of the <see langword="Object"/>
      type.</para>
		</remarks>
	</doc><doc for="TypeDelegator.GetConstructorImpl">
		<summary>
			<para>Gets the constructor that implemented the 
   <see langword="TypeDelegator"/> .</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> .</param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects using reflection. If <paramref name="binder"/> is <see langword="null"/> , the default binder is used.</param>
		<param name="callConvention">The calling conventions.</param>
		<param name="types">An array of type <see langword="Type"/> containing a list of the parameter number, order, and types. Types cannot be <see langword="null"/>; use an appropriate <see langword="GetMethod"/> method or an empty array to search for a method without parameters.</param>
		<param name="modifiers">An array of type <see langword="ParameterModifier"/> having the same length as the <paramref name="types"/> array, whose elements represent the attributes associated with the parameters of the method to get.</param>
		<returns>
			<para>A <see langword="ConstructorInfo"/> object for the method
   that matches the specified criteria, or <see langword="null"/>
   if a match cannot be found.</para>
		</returns>
		<remarks>
			<para>The <paramref name="callConvention"/> parameter 
   indicates the calling convention
   for the entry point. If no calling convention is specified, a default
<see cref="System.Reflection.CallingConventions"/> value of <see langword="Standard"/>
is used.</para>
		</remarks>
		<seealso cref="System.Reflection.CallingConventions"/>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.Binder"/>
	</doc><doc for="TypeDelegator.GetInterfaces">
		<summary>
			<para> Returns all the interfaces
      implemented on the current class and its base classes.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="Type"/> containing all the interfaces implemented
   on the current class and its base classes. If none are defined, an
   empty array is returned.</para>
		</returns>
	</doc><doc for="TypeDelegator.GetNestedTypes">
		<summary>
			<para>Returns the nested types specified in
   <paramref name="bindingAttr"/> that are declared or inherited by the current
   <see langword="TypeDelegator"/> .</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>An array of type <see langword="Type"/> containing
   the nested types.</para>
		</returns>
	</doc><doc for="TypeDelegator.GetAttributeFlagsImpl">
		<summary>
			<para>Gets the attributes assigned to the
   <see langword="TypeDelegator"/> .</para>
		</summary>
		<returns>
			<para>A <see langword="TypeAttributes"/> object
   representing the implementation attribute flags.</para>
		</returns>
		<remarks>
			<para>This method can be used to determine if the 
   <see langword="TypeDelegator"/> is abstract,
      public, and so on.</para>
		</remarks>
		<seealso cref="System.Reflection.TypeAttributes"/>
	</doc><doc for="TypeDelegator.IsArrayImpl">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Type"/>is an array.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Type"/> is an array; otherwise,
<see langword="false"/>.</para>
		</returns>
	</doc><doc for="TypeDelegator.IsPrimitiveImpl">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Type"/> is one of the
   primitive types.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Type"/> is one of the primitive types;
   otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="TypeDelegator.IsByRefImpl">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Type"/> is passed by reference.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Type"/> is passed by
   reference; otherwise, <see langword="false"/> .</para>
		</returns>
	</doc><doc for="TypeDelegator.IsPointerImpl">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Type"/> is a pointer.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Type"/> is a pointer; otherwise, <see langword="false"/>. </para>
		</returns>
	</doc><doc for="TypeDelegator.IsCOMObjectImpl">
		<summary>
			<para>Gets a value indicating whether the <see cref="System.Type"/> is a COM object.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Type"/> is a COM object; otherwise, <see langword="false"/>. </para>
		</returns>
	</doc><doc for="TypeDelegator.GetElementType">
		<summary>
			<para>Returns the <see cref="System.Type"/> of the object encompassed or referred
   to by the current array, pointer or ByRef.</para>
		</summary>
		<returns>
			<para>The <see cref="System.Type"/> of the object 
   encompassed or referred to by the current array, pointer or
<see langword="ByRef"/> 
, or
<see langword="null"/> if the current <see cref="System.Type"/> is not an array, a pointer 
or a <see langword="ByRef"/>
.</para>
		</returns>
	</doc><doc for="TypeDelegator.HasElementTypeImpl">
		<summary>
			<para>Gets a value indicating whether the current <see cref="System.Type"/> encompasses or
   refers to another type; that is, whether the current <see cref="System.Type"/> is an array, a pointer or a ByRef.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the <see cref="System.Type"/> is an array, a pointer or a ByRef; otherwise,
<see langword="false"/>. </para>
		</returns>
	</doc><doc for="TypeDelegator.UnderlyingSystemType">
		<summary>
			<para>Gets the underlying <see cref="System.Type"/>
that represents the implemented
type.</para>
		</summary>
		<value>
			<para> The underlying type.</para>
		</value>
	</doc><doc for="TypeDelegator.GetMethods">
		<summary>
			<para>Returns an array of <see cref="System.Reflection.MethodInfo"/> objects representing specified methods of the
   current <see langword="TypeDelegator"/>
   
   .</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> .</param>
		<returns>
			<para>An array of <see langword="MethodInfo"/> objects
   representing the methods defined on this <see langword="TypeDelegator"/>
   .</para>
		</returns>
	</doc><doc for="TypeDelegator.GetEvents">
		<overload>
			<para>Returns an array of <see cref="System.Reflection.EventInfo"/> objects representing all the public events 
   declared or inherited by the current <see langword="TypeDelegator"/> .</para>
		</overload>
		<summary>
			<para>Returns an array of <see cref="System.Reflection.EventInfo"/> objects representing all the public events
   declared or inherited by the current <see langword="TypeDelegator"/>
   
   .</para>
		</summary>
		<returns>
			<para>Returns an array of type
   <see langword="EventInfo"/> containing all
      the events declared or inherited by the current type. If there are no events, an
      empty array is returned.</para>
		</returns>
	</doc><doc for="TypeDelegator.GetPropertyImpl">
		<summary>
			<para>When overridden in a derived class, searches for the
      specified property whose parameters match the specified argument types and
      modifiers, using the specified binding constraints.</para>
		</summary>
		<param name="name">The property to get.</param>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects via reflection. If <paramref name="binder"/> is <see langword="null"/>, the default binder is used. See <see cref="System.Reflection.Binder"/> .</param>
		<param name=" returnType">The return type of the property.</param>
		<param name="types">A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate <see langword="GetMethod"/> method or an empty array to search for a method without parameters.</param>
		<param name="modifiers">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</param>
		<returns>
			<para>A <see cref="System.Reflection.PropertyInfo"/>
object for the property that matches the specified
criteria, or null if a match cannot be found.</para>
		</returns>
	</doc><doc for="TypeDelegator.GetProperties">
		<summary>
			<para>Returns an array of <see cref="System.Reflection.PropertyInfo"/> objects representing properties defined on 
   this <see langword="TypeDelegator"/>
   
   .</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> .</param>
		<returns>
			<para>An array of <see langword="PropertyInfo"/> objects
   representing properties defined on this <see langword="TypeDelegator"/>
   .</para>
		</returns>
	</doc><doc for="TypeDelegator.Namespace">
		<summary>
			<para>Gets the namespace of the implemented type.</para>
		</summary>
		<value>
			<para>A <see langword="String"/> containing the type's namespace.</para>
		</value>
		<remarks>
			<para>This property gets a string containing the namespace of the current
   <see langword="TypeDelegator"/>. For example, if the <see langword="TypeDelegator "/>is <see cref="System.Reflection.TypeFilter"/>
   , the returned
   namespace is <see cref="System.Reflection"/>
   .</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.GetMethodImpl">
		<summary>
			<para>Searches for the specified method whose parameters match the specified
      argument types and modifiers, using the specified binding constraints and the
      specified calling convention.</para>
		</summary>
		<param name=" name">The method name.</param>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> .</param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects using reflection. If <paramref name="binder"/> is <see langword="null"/> , the default binder is used.</param>
		<param name="callConvention">The calling conventions.</param>
		<param name="types">An array of type <see langword="Type"/> containing a list of the parameter number, order, and types. Types cannot be <see langword="null"/>; use an appropriate <see langword="GetMethod"/> method or an empty array to search for a method without parameters.</param>
		<param name="modifiers">An array of type <see langword="ParameterModifier"/> having the same length as the <paramref name="types"/> array, whose elements represent the attributes associated with the parameters of the method to get.</param>
		<returns>
			<para>A <see langword="MethodInfoInfo"/> object for the
   implementation method that matches the specified criteria, or
<see langword="null"/>
if a match cannot be found.</para>
		</returns>
		<remarks>
			<para>The <paramref name="callConvention"/> parameter 
   indicates the calling convention for the entry point. If no
<see cref="System.Reflection.CallingConventions"/> is specified, a default 
<see langword="CallingConventions"/> value of <see langword="Standard"/> is used.</para>
		</remarks>
		<seealso cref="System.Reflection.CallingConventions"/>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.Binder"/>
	</doc>
	<doc for="TypeDelegator.GetFields">
		<summary>
			<para>Returns an array of <see cref="System.Reflection.FieldInfo"/>
objects
representing the data fields defined for the current class.</para>
		</summary>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>An array of type
   <see langword="FieldInfo"/> containing the fields declared or inherited by
      the current <see langword="TypeDelegator"/>
      . An empty array is returned if there
      are no matched fields.</para>
		</returns>
		<remarks>
			<para>Use a <paramref name="bindingAttr"/> of <see cref="System.Reflection.BindingFlags"/> .NonPublic to
   return all public and nonpublic fields.</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.InvokeMember">
		<summary>
			<para>Invokes the specified member. The method that is to be invoked must be
      accessible and provide the most specific match with the specified argument list,
      under the constraints of the specified binder and invocation attributes.</para>
		</summary>
		<param name="name">The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string ("") is passed, the default member is invoked.</param>
		<param name="invokeAttr">The invocation attribute. This must be one of the following <see cref="System.Reflection.BindingFlags"/>: <see langword="InvokeMethod"/>, <see langword="CreateInstance"/>, <see langword="Static"/>, <see langword="GetField"/>, <see langword="SetField"/>, <see langword="GetProperty"/>, or <see langword="SetProperty"/>. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static"/> flag must be set.</param>
		<param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo"/> objects via reflection. If <paramref name="binder"/> is <see langword="null"/>, the default binder is used. See <see cref="System.Reflection.Binder"/> .</param>
		<param name="target">The object on which to invoke the specified member.</param>
		<param name="args">An array of type <see langword="Object"/> that contains the number, order, and type of the parameters of the member to be invoked. If <paramref name="args"/> contains an uninitialized <see langword="Object"/> , it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</param>
		<param name="modifiers">An array of type <see langword="ParameterModifer"/> that is the same length as <paramref name="args"/>, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use <see langword="ParameterModifer.ByRef"/>, and for none, use <see langword="ParameterModifer.None"/>. The default binder does exact matching on these. Attributes such as <see langword="In"/> and <see langword="InOut"/> are not used in binding, and can be viewed using <see langword="ParameterInfo"/> .</param>
		<param name="culture">An instance of <see langword="CultureInfo"/> used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a <see langword="Double"/> value, since 1000 is represented differently by different cultures. If <paramref name="culture"/> is <see langword="null"/>, the <see langword="CultureInfo"/> for the current thread's <see langword="CultureInfo"/> is used.</param>
		<param name="namedParameters">An array of type <see langword="String"/> containing parameter names that match up, starting at element zero, with the <paramref name="args"/> array. There must be no holes in the array. If <paramref name="args"/>.<see langword="Length"/> is greater than <paramref name="namedParameters"/>.<see langword="Length"/> , the remaining parameters are filled in order.</param>
		<returns>
			<para>An <see langword="Object"/> representing the return value
   of the invoked member.</para>
		</returns>
		<remarks>
			<para>A method will be invoked if both the following conditions are true:</para>
			<list type="bullet"><item>
					<term>
						<para> The number of parameters in the method declaration
            equals the number of arguments in the specified argument list (unless
            default arguments are defined on the member).</para></term>
				</item>
				<item>
					<term>
						<para>The type of each arguments can be converted by the
               binder to the type of the parameter.</para></term>
				</item>
			</list>
			<para> The binder will find all the matching methods. These
         methods are found based upon the type of binding requested
         (<see langword="BindingFlags.MethodInvoke"/>,
      <see langword="BindingFlags.GetProperties"/>
      , and
      so on). The set of methods is filtered by the name,
      number of arguments, and a set of search modifiers defined in the binder.</para>
			<para>After the method is selected, it will be invoked.
      Accessibility is checked at that point. The search may control which set of
      methods are searched based upon the accessibility attribute associated with the
      method. The <see cref="System.Reflection.Binder.BindToMethod" qualify="true"/>
      
      method is responsible for selecting the method to be
      invoked. The default binder selects the most specific match.</para>
			<note type="note">
      Access restrictions are ignored for
      fully trusted code. That is, private constructors, methods, fields, and
      properties can be accessed and invoked using reflection whenever the code is
      fully trusted.
      
   </note>
			<para>Currently, <see langword="InvokeMember"/>
performs the
Microsoft .NET Framework reflection semantics for every type of object.</para>
			<para>If the member specified by name is an array and the
<see langword="BindingFlags.GetField"/> flag is set on <paramref name="invokeAttr"/>, the
<paramref name="args"/> array specifies the elements whose values are to be returned. For
   example, the following call through <see langword="Type"/> object
<see langword="t"/>
returns the value of the first element of the string
array MyArray, which is a member of the calling object:</para>
			<c>
   String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null,
   this, new Variant[]{0});
</c>
			<para>You can use <see langword="InvokeMember"/> to set one or more elements of a
member array. All elements are set to the same value. The <paramref name="args"/>
array must be formatted
as follows:</para>
			<para><c>{index1,
   index2, , value}</c>
			</para>
			<para>For example, to set the first member of MyArray from the previous
   example, the syntax is as follows:</para>
			<para><c>t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new
   Variant[]{0,"Updated"});</c>
			</para>
		</remarks>
		<seealso cref="System.Globalization.CultureInfo"/>
	</doc>
	<doc for="TypeDelegator.Name">
		<summary>
			<para>Gets the name of the implemented type, with the path
      removed.</para>
		</summary>
		<value>
			<para>A <see langword="String"/> containing the type's
   non-qualified
   name.</para>
		</value>
		<remarks>
			<para>A string containing the name of the current
   <see langword="TypeDelegator"/>. Only the simple name, not the fully qualified
      name, is returned. To get the name and the path, use <see cref="System.Reflection.TypeDelegator.FullName"/>
      
      .</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.GUID">
		<summary>
			<para>Gets the GUID
      (globally unique identifier) of the implemented type.</para>
		</summary>
		<value>
			<para>A GUID.</para>
		</value>
		<remarks>
			<para>The GUID (globally unique identifier) is a 128-bit unique identification
      string used to identify a class or an interface.
      It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</para>
		</remarks>
		<seealso cref="System.Guid"/>
	</doc>
	<doc for="TypeDelegator.GetField">
		<summary>
			<para>Returns the <see cref="System.Reflection.FieldInfo"/>
object representing the field with the
specified name.</para>
		</summary>
		<param name="name">The name of the field to find.</param>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>A <see langword="FieldInfo"/> object representing
   the field declared or inherited by this <see langword="TypeDelegator"/> with the
   specified name. Returns <see langword="null"/>
   if no such field is found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>Use a <paramref name="bindingAttr"/> of <see cref="System.Reflection.BindingFlags"/> .NonPublic to
   return all public and nonpublic fields. Use
<see langword="BindingFlags.IgnoreCase"/>
to ignore
the case of the fields, as the search is case-sensitive by default.</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.GetInterface">
		<summary>
			<para> Returns the specified interface
      implemented by the current class.</para>
		</summary>
		<param name="name">The fully qualified name of the interface implemented by the current class.</param>
		<param name="ignoreCase"><see langword="true"/> if the case is to be ignored; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>A <see langword="Type"/> object representing the interface implemented (directly or
   indirectly) by the current class with the fully qualified name matching the
   specified name. If no interface that matches name is found, null is returned.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
	</doc>
	<doc for="TypeDelegator.GetEvent">
		<summary>
			<para> Returns the specified event.</para>
		</summary>
		<param name="name">The name of the event to get.</param>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>An <see cref="System.Reflection.EventInfo"/> object 
   representing
   the event declared or inherited by this type with the specified name.
   This method returns <see langword="null"/>
   if no
   such event is found.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>If <paramref name="bindingAttr "/>is <see cref="System.Reflection.BindingFlags"/>
				<see langword=".IgnoreCase"/> , the case of the <paramref name="name"/> 
parameter is ignored.</para>
		</remarks>
	</doc>
	<doc for="TypeDelegator.GetNestedType">
		<summary>
			<para>Returns a nested type specified by <paramref name="name"/> and in
<paramref name="bindingAttr"/> that are declared or inherited by the
   current <see langword="TypeDelegator"/> .</para>
		</summary>
		<param name="name">The nested type's name.</param>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<returns>
			<para>A <see langword="Type"/> object representing the
   nested type.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
	</doc>
	<doc for="TypeDelegator.GetMember">
		<summary>
			<para>Returns members
      (properties,
      methods, constructors, fields, events, and nested types) specified by
      the given <paramref name="name"/>, <paramref name="type"/>, and <paramref name="bindingAttr"/>.</para>
		</summary>
		<param name="name">The name of the member to get.</param>
		<param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="System.Reflection.BindingFlags"/> . </param>
		<param name=" type">The type of members to get.</param>
		<returns>
			<para>An array of type
   <see langword="MemberInfo"/> containing all the members of the current class and its base class meeting the specified criteria. </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>If <paramref name="bindingAttr"/> is <see cref="System.Reflection.BindingFlags"/> .NonPublic, all the members will
   be considered. If there are no matches, an empty array is returned.</para>
		</remarks>
	</doc>
</docs>
