<docs>
	<doc for="BindingFlags.IgnoreCase">
		<summary>
    Specifies that the case of the member name should not be
    considered when binding.
 </summary>
	</doc>
	<doc for="BindingFlags.DeclaredOnly">
		<summary>
			<para>Specifies that only members declared at the level of the supplied type's
       hierarchy should be considered. Inherited members are not considered.</para>
		</summary>
	</doc>
	<doc for="BindingFlags.Instance">
		<summary>
			<para>
       Specifies that instance members are to be included in the search.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.Static">
		<summary>
			<para>
       Specifies that static members are to be included in the search.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.Public">
		<summary>
			<para>
       Specifies that public members are to be included in the search.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.NonPublic">
		<summary>
			<para>
       Specifies that non-public members are to be included in the search.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.FlattenHierarchy">
		<summary>
			<para>Specifies that static members up the hierarchy should be 
       returned. Static members include fields, methods, events, and properties. Nested types are not returned.</para>
		</summary>
	</doc>
	<doc for="BindingFlags.InvokeMethod">
		<summary>
			<para>Specifies that a method is to be invoked. This may not be a constructor or a 
       type initializer.</para>
		</summary>
	</doc>
	<doc for="BindingFlags.CreateInstance">
		<summary>
			<para>Specifies that Reflection should create an instance of 
       the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of
       lookup is not specified, (Instance | Public) will apply. It is
       not possible to call a type initializer.</para>
		</summary>
	</doc>
	<doc for="BindingFlags.GetField">
		<summary>
			<para>
       Specifies that the value of the specified field should be returned.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.SetField">
		<summary>
			<para>
       Specifies that the value of the specified field should be set.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.GetProperty">
		<summary>
			<para>
       Specifies that the value of the specified property should be returned.
    </para>
		</summary>
	</doc>
	<doc for="BindingFlags.SetProperty">
		<summary>
			<para>Specifies that the value of the specified property should 
      be set. For COM properties, specifying this binding flag is equivalent to
      specifying <see langword="PutDispProperty"/> and
   <see langword="PutRefDispProperty"/> .</para>
		</summary>
	</doc><doc for="BindingFlags.PutDispProperty">
		<summary>
			<para>Specifies that the <see langword="PROPPUT"/> member on a
   COM object should be invoked. <see langword="PROPPUT "/>specifies a property-setting
   function that uses a value. Use <see langword="PutDispProperty"/> if a property
   has both <see langword="PROPPUT"/> and <see langword="PROPPUTREF"/> and you need to distinguish which one is
   called.</para>
		</summary>
	</doc><doc for="BindingFlags.PutRefDispProperty">
		<summary>
			<para>Specifies that the <see langword="PROPPUTREF"/> member on
   a COM object should be invoked. <see langword="PROPPUTREF"/> specifies a
   property-setting function that uses a reference instead of a value. Use
<see langword="PutRefDispProperty"/> if a property has both 
<see langword="PROPPUT"/> and <see langword="PROPPUTREF"/> and you need to distinguish which one is 
   called. </para>
		</summary>
	</doc><doc for="BindingFlags.SuppressChangeType">
		<summary>
   Not implemented.
</summary>
	</doc><doc for="BindingFlags.OptionalParamBinding">
		<summary>
			<para>Returns the set of members whose parameter count matches the number of supplied arguments.
      This binding flag is used for methods with parameters that have default
      values and methods with variable arguments (varargs). This flag should only be used with
   <see cref="System.Type.InvokeMember" qualify="true"/>.</para>
			<para>Parameters with default values are used only in calls where trailing 
      arguments are omitted. They must be the last arguments.</para>
		</summary>
	</doc><doc for="BindingFlags.Default">
		<summary>
			<para>Specifies no binding flag.</para>
		</summary>
	</doc><doc for="BindingFlags.ExactBinding">
		<summary>
			<para>Specifies that types of the supplied arguments must 
      exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null
   <see langword="Binder"/> object, since that implies that the caller is supplying
   <see langword="BindToXXX "/>
   
   implementations that will pick the appropriate
   method.</para>
			<para>Reflection models the accessibility rules of the common type system. For
   example, if the caller is in the same assembly, the caller does not need special
   permissions for internal members. Otherwise, the caller needs <see cref="System.Security.Permissions.ReflectionPermission"/> . This is consistent with lookup of
   members that are protected, private, and so on. </para>
			<para>The general principle is that <see cref="System.Reflection.Binder.ChangeType"/> should perform only
widening coercions, which never lose data. An example of a widening coercion is
coercing a value that is a 32-bit signed integer to a value that is a 64-bit
signed integer. This is distinguished from a narrowing coercion, which may lose
data. An example of a narrowing coercion is coercing a 64-bit signed integer to
a 32-bit signed integer. </para>
			<para>The default binder ignores this flag, while custom binders can implement
   the semantics of this flag.</para>
		</summary>
	</doc>
	<doc for="BindingFlags">
		<summary>
			<para> Specifies flags that control binding and the way in
      which the search for members and types is conducted by reflection.</para>
		</summary>
		<remarks>
			<para>These <see langword="BindingFlags"/>
control binding for a great many classes in the <see langword="System"/>,
<see langword="System.Reflection"/>, and <see langword="System.Runtime"/> 
namespaces that
invoke, create, get, set, and find
members and
types.</para>
			<para><see langword="BindingFlags"/> are used in the following <see cref="System.Type"/> methods and other places
such as <see cref="System.Reflection.MethodBase.Invoke" qualify="true"/>:</para>
			<list type="bullet"><item>
					<term>
						<see cref="System.Reflection.MethodBase.Invoke" qualify="true"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetMembers"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetEvents"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.InvokeMember"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Activator.CreateInstance" qualify="true"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetConstructor"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetConstructors"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetMethod"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetMethods"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetField"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetFields"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetEvent"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetProperty"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetProperties"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.GetMember"/></term>
				</item>
				<item>
					<term>
						<see cref="System.Type.FindMembers"/></term>
				</item>
			</list>
			<para><see langword="InvokeMember"/> and
<see langword="GetMethod"/> are especially important.</para>
			<para>The binding flags are categorized as follows.</para>
			<list type="table">
				<listheader>
					<term>Binding Flag</term>
					<description>Purpose</description>
				</listheader>
				<item>
					<term><see langword="DeclaredOnly"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="FlattenHierarchy"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="IgnoreCase"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="IgnoreReturn"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="Instance"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="NonPublic"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="Public"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="Static"/></term>
					<description>Access Control</description>
				</item>
				<item>
					<term><see langword="ExactBinding"/></term>
					<description>Change Type</description>
				</item>
				<item>
					<term><see langword="OptionalParamBinding"/></term>
					<description>Change Type</description>
				</item>
				<item>
					<term><see langword="CreateInstance"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="GetField"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="SetField"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="GetProperty"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="SetProperty"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="InvokeMethod"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="PutDispProperty"/></term>
					<description>Operation Type</description>
				</item>
				<item>
					<term><see langword="PutRefDispProperty"/></term>
					<description>Operation Type</description>
				</item>
			</list>
			<note type="note">
   You must specify
<see langword="Instance"/> or <see langword="Static"/> along with <see langword="Public "/>or <see langword="NonPublic"/> or no members will be returned. 
</note>
			<para>The following table lists the coercions performed by the default <see cref="System.Reflection.Binder.ChangeType" qualify="true"/>. This
table applies especially to the <see langword="ExactBinding"/> binding flag.</para>
			<list type="table">
				<listheader>
					<term>Source Type</term>
					<description>Target Type</description>
				</listheader>
				<item>
					<term> Any type</term>
					<description>Its base type.</description>
				</item>
				<item>
					<term> Any type</term>
					<description>The interface it implements.</description>
				</item>
				<item>
					<term><see langword="Char"/></term>
					<description><see langword="UInt16"/>, <see langword="UInt32"/>,
<see langword="Int32"/>, <see langword="UInt64"/>, <see langword="Int64"/>, 
<see langword="Single"/>, <see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="Byte"/></term>
					<description><see langword="Char"/>, <see langword="UInt16"/>,
<see langword="Int16"/>, <see langword="UInt32"/>, <see langword="Int32"/>, 
<see langword="UInt64"/>, <see langword="Int64"/>, <see langword="Single"/>, 
<see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="SByte"/></term>
					<description><see langword="Int16"/>, <see langword="Int32"/>,
<see langword="Int64"/>, <see langword="Single"/>, 
<see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="UInt16"/></term>
					<description><see langword="UInt32"/>, <see langword="Int32"/>,
<see langword="UInt64"/>, <see langword="Int64"/>, <see langword="Single"/>, 
<see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="Int16"/></term>
					<description><see langword="Int32"/>, <see langword="Int64"/>,
<see langword="Single"/>, <see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="UInt32"/></term>
					<description><see langword="UInt64"/>, <see langword="Int64"/>,
<see langword="Single"/>, <see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="Int32"/></term>
					<description><see langword="Int64"/>, <see langword="Single"/>,
<see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="UInt64"/></term>
					<description><see langword="Single"/>,
<see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="Int64"/></term>
					<description><see langword="Single"/>,
<see langword="Double"/></description>
				</item>
				<item>
					<term><see langword="Single"/></term>
					<description><see langword="Double"/></description>
				</item>
				<item>
					<term> Non-reference</term>
					<description>By-reference.</description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates each binding flag.</para>
			<codelink SampleID="BindingFlags" SnippetID="1"/>
		</example>
	</doc>
	<doc for="BindingFlags.IgnoreReturn">
		<summary>
			<para>Used in COM interop to specify that the return value of
      the member can be ignored.</para>
		</summary>
	</doc>
</docs>
