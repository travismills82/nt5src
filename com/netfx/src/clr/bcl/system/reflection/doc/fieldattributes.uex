<docs>
	<doc for="FieldAttributes.FieldAccessMask">
		<summary>
			<para>
       Specifies the access level of a given field.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.PrivateScope">
		<summary>
			<para>
       Specifies that the field cannot be referenced.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.Private">
		<summary>
			<para>
       Specifies that the field is accessible only by the parent type.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.Assembly">
		<summary>
			<para>
       Specifies that the field is accessible throughout the assembly.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.Public">
		<summary>
			<para>
       Specifies that the field is accessible by any member for whom this scope
       is visible.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.Static">
		<summary>
			<para>
       Specifies that the field represents the defined type, or else it is
       per-instance.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.InitOnly">
		<summary>
			<para>
       Specifies that the field is initialized only, and cannot be written after
       initialization.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.Literal">
		<summary>
			<para>
       Specifies that the field's value is a compile-time (static or early bound)
       constant. No set accessor.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.NotSerialized">
		<summary>
			<para>
       Specifies that the field does not have to be serialized when the type is
       remoted.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.SpecialName">
		<summary>
			<para>
       Specifies a special method, with the name describing how the method is
       special.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.HasFieldMarshal">
		<summary>
			<para>
       Specifies that the field has marshalling information.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.HasDefault">
		<summary>
			<para>
       Specifies that the field has a default value.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes.HasFieldRVA">
		<summary>
			<para>
       Specifies that the field has a Relative Virtual Address (RVA). The RVA is the
       location of the method body in the current image, as an address relative to the
       start of the image file in which it is located.
    </para>
		</summary>
	</doc>
	<doc for="FieldAttributes">
		<summary>
			<para>Specifies flags that describe the attributes of a field.</para>
		</summary>
		<remarks>
			<para>
				<see langword="FieldAttributes"/> uses the value from <see langword="FieldAccessMask"/> to mask off only the parts 
   of the attribute value that is the accessibility. For example, the following
   code determines if <see langword="Attributes"/>
   
   has the public bit set:</para>
			<para>(Attributes &amp; FieldAttributes.FieldAccessMask) == 
   FieldAttributes.Public</para>
			<para>To get the <see langword="FieldAttributes"/>, first get 
the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the 
<see langword="Attributes"/> 
.</para>
			<para>The enumerated
   value is a number representing the bitwise OR of the attributes implemented
   on the field.</para>
		</remarks>
		<example>
			<para>In this example, three fields are built and the 
   <see langword="FieldAttributes"/> value is displayed when it is exactly defined. 
      A <see langword="FieldAttributes"/> may contain more than one attribute, such as
      both <see langword="Public"/> and <see langword="Literal"/>
      , as shown in the third field below.</para>
			<codelink SampleID="Classic FieldAttributes Example" SnippetID="1"/>
			<para>This code produces the following output:</para>
			<para>Reflection.FieldAttributes</para>
			<para>Myfielda - A private field; it has a Private field attribute.</para>
			<para>Myfieldb - B public field; it has a Public field attribute.</para>
			<para>Myfieldc - C constant field; it is not exactly defined.</para>
		</example>
	</doc>
	<doc for="FieldAttributes.ReservedMask">
		<summary>
			<para> Reserved.</para>
		</summary>
	</doc>
	<doc for="FieldAttributes.RTSpecialName">
		<summary>
			<para>Specifies that the common language runtime (metadata internal APIs) should check the
      name encoding.</para>
		</summary>
	</doc>
	<doc for="FieldAttributes.FamANDAssem">
		<summary>
			<para>       Specifies that the field is accessible only by subtypes in this
      assembly.
      </para>
		</summary>
	</doc><doc for="FieldAttributes.Family">
		<summary>
			<para> Specifies that the field is accessible only by type and subtypes.
      </para>
		</summary>
	</doc><doc for="FieldAttributes.FamORAssem">
		<summary>
			<para>       Specifies that the field is accessible by subtypes anywhere, as well as
      throughout this assembly.
      </para>
		</summary>
	</doc><doc for="FieldAttributes.PinvokeImpl">
		<summary>
			<para> Reserved for future use. 
   </para>
		</summary>
	</doc></docs>
