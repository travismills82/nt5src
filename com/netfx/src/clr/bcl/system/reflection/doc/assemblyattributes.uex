<docs>
	<doc for="AssemblyCultureAttribute.Culture">
		<summary>
			<para>Gets the supported culture of the attributed assembly.</para>
		</summary>
		<value>
			<para>A string containing the name of the supported culture.</para>
		</value>
	</doc><doc for="AssemblyVersionAttribute.Version">
		<summary>
			<para>Gets the version number of the attributed assembly.</para>
		</summary>
		<value>
			<para>A string containing the assembly version number.</para>
		</value>
	</doc><doc for="AssemblyDelaySignAttribute.AssemblyDelaySignAttribute">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyDelaySignAttribute"/>
class.</para>
		</summary>
		<param name="delaySign"><see langword="true"/> if the feature this attribute represents is activated; otherwise, <see langword="false"/> .</param>
	</doc><doc for="AssemblyAlgorithmIdAttribute.AssemblyAlgorithmIdAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyAlgorithmIdAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyAlgorithmIdAttribute"/> class with the
   specified hash algorithm, using one of the members of <see cref="System.Configuration.Assemblies.AssemblyHashAlgorithm"/> to
   represent the hash algorithm.</para>
		</summary>
		<param name="algorithmId">A member of <see langword="AssemblyHashAlgorithm"/> that represents the hash algorithm.</param>
	</doc><doc for="AssemblyKeyNameAttribute.AssemblyKeyNameAttribute">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyKeyNameAttribute"/> class with the name of the
   container holding the key pair used
   to generate a strong name for the assembly being attributed.</para>
		</summary>
		<param name="keyName">The name of the container containing the key pair.</param>
	</doc><doc for="AssemblyCultureAttribute.AssemblyCultureAttribute">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyCultureAttribute"/>
class with the culture supported by the assembly being
attributed.</para>
		</summary>
		<param name="culture">The culture supported by the attributed assembly.</param>
		<remarks>
			<para>The culture names follow the RFC1766 names. The format is as follows: "language"-"country/region". For
      example, the format for US English is "en-US".</para>
		</remarks>
	</doc><doc for="AssemblyKeyFileAttribute.AssemblyKeyFileAttribute">
		<summary>
			<para> Initializes a new instance of the
   <see langword="AssemblyKeyFileAttribute"/>
   class with the name of the file containing
   the key pair to generate a strong name for the assembly being attributed.</para>
		</summary>
		<param name="keyFile">The name of the file containing the key pair.</param>
		<remarks>
			<note type="caution">
      Since the path and file name persist, ensure
      that the string you use with <see langword="AssemblyKeyFileAttribute"/> does not
      contain sensitive information.
   </note>
		</remarks>
	</doc>
	<doc for="AssemblyKeyFileAttribute.KeyFile">
		<summary>
			<para>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</para>
		</summary>
		<value>
			<para>A string containing the name of the file that contains the key pair.</para>
		</value>
		<remarks>
			<note type="caution">
      Since the path and file name persist, ensure
      that the string you use with <see langword="AssemblyKeyFileAttribute"/> does not
      contain sensitive information.
      
   </note>
		</remarks>
	</doc>
	<doc for="AssemblyVersionAttribute">
		<summary>
			<para> Specifies the version of the assembly being attributed.</para>
		</summary>
		<remarks>
			<para>The assembly version number is part of an assembly's
      identity and plays a key part in binding to the assembly and in version
      policy. The default version policy for the runtime is that applications run only
      with the versions they were built and tested with, unless overridden by explicit
      version policy in configuration files (the application configuration file, the
      publisher policy file, and the computer's administrator configuration file).
      See <see topic="cpconassembliesoverview"/>
      for more
      
      information. </para>
			<note type="note">
      Version checking only occurs with
      strong-named assemblies.
      
   </note>
			<para>The version number has four parts, as follows: </para>
			<para>&lt;major version&gt;.&lt;minor version&gt;.&lt;build
      number&gt;.&lt;revision&gt;</para>
			<para>You can specify all the values or you can accept the
      default build number, revision number, or both by using an
      asterisk (*). For example, <c>[assembly:AssemblyVersion("2.3.25.1")]</c> indicates 2
   as the major version, 3 as the minor version, 25 as the build number, and 1 as
   the revision number. A version number such as <c>[assembly:AssemblyVersion("1.2.*")]</c> specifies 1 as the
major version, 2 as the minor version, and accepts the default build and
revision numbers. A version number such as <c>[assembly:AssemblyVersion("1.2.15.*")]</c> specifies 1 as
the major version, 2 as the minor version, 15 as the build number, and accepts
the default revision number. A version number such as <c>[assembly:AssemblyVersion("1.2.*.6")]</c>
specifies 1 as the major version, 2 as the minor
version, accepts the default build number, and specifies 6 as the revision
number.</para>
			<para> The assembly major and minor versions are used as the 
   type library version number when the assembly is exported. Some COM hosts do not
   accept type libraries with the version number 0.0. Therefore, if you want to
   expose an assembly to COM clients, set the
   assembly version explicitly to 1.0 in the
<see langword="AssemblyVersionAttribute"/> page for 
   projects created outside Visual Studio .NET and with no
<see langword="AssemblyVersionAttribute"/> specified. Do this even when the 
   assembly version is 0.0. All projects created in Visual Studio .NET have a
   default assembly version of 1.0*.</para>
			<para>To get the name of an assembly you have loaded,
   call <see cref="System.Reflection.Assembly.GetName"/> on the assembly to get an <see cref="System.Reflection.AssemblyName"/>,
   and then get the <see cref="System.Reflection.AssemblyName.Version"/> property. To get the name
   of an assembly you have not loaded, call <see cref="System.Reflection.AssemblyName.GetAssemblyName"/>
   from your client application to check
   the assembly version that your application uses. </para>
		</remarks>
		<seealso topic="cpconmetadataselfdescribingcomponents"/>
		<seealso topic="cpconmicrosoftintermediatelanguagemsil"/>
		<seealso topic="cpconmetadataoverview"/>
		<seealso topic="cpconassembliesoverview"/>
		<seealso cref="System.Reflection.AssemblyName.Version"/>
	</doc>
	<doc for="AssemblyFlagsAttribute.AssemblyFlagsAttribute1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyFlagsAttribute"/> class with the specified assembly flag.</para>
		</summary>
		<param name="assemblyFlags">A value representing the kind of side-by-side execution allowed (same machine, same process, or same application domain).</param>
	</doc>
	<doc for="AssemblyFlagsAttribute.Flags">
		<summary>
			<para> Gets the value representing the kind of side-by-side
      execution allowed (same machine, same process, or same application domain).</para>
		</summary>
		<altcompliant cref="System.Reflection.AssemblyFlagsAttribute.AssemblyFlags"/>
		<value>
			<para>A value representing the allowed side-by-side execution.</para>
		</value>
	</doc>
	<doc for="AssemblyAlgorithmIdAttribute.AssemblyAlgorithmIdAttribute1">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Reflection.AssemblyAlgorithmIdAttribute"/> class with the
   specified hash algorithm, using an unsigned integer to represent the hash
   algorithm.</para>
			<para>This constructor is not CLS-compliant. For more information about CLS compliance,
   see <see topic="cpconwhatiscommonlanguagespecification"/>.</para>
		</summary>
		<param name="algorithmId">An unsigned integer representing the hash algorithm.</param>
	</doc>
	<doc for="AssemblyFlagsAttribute.AssemblyFlagsAttribute">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyFlagsAttribute"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyFlagsAttribute"/> class with the specified side-by-side
   execution flag.</para>
			<para>This constructor is not CLS-compliant. For more information about CLS 
   compliance, see <see topic="cpconwhatiscommonlanguagespecification"/>.</para>
		</summary>
		<param name="flags">A value representing the kind of side-by-side execution allowed (same machine, same process, or same application domain).</param>
		<remarks>
			<para>The <see cref="System.Configuration.Assemblies.AssemblyVersionCompatibility"/> enumeration defines the
   compatibility of an assembly with other versions of the same assembly,
   indicating if it cannot execute side-by-side with other versions.</para>
		</remarks>
		<seealso cref="System.Configuration.Assemblies.AssemblyVersionCompatibility"/>
	</doc>
	<doc for="AssemblyVersionAttribute.AssemblyVersionAttribute">
		<summary>
			<para>Initializes a new instance of the
   <see langword="AssemblyVersionAttribute"/>
   class with the version number of the assembly
   being attributed.</para>
		</summary>
		<param name="version">The version number of the attributed assembly.</param>
		<remarks>
			<para>The format of the <paramref name="version"/> string is:
<see langword="major"/>.<see langword="minor"/>.<see langword="build"/>.<see langword="revision"/>.</para>
			<para>When specifying a version, you have to at least specify
<see langword="major"/>. If you specify <see langword="major"/> and
<see langword="minor"/>, you can specify an asterisk (*) for
<see langword="build"/>. This will cause <see langword="build"/> to be equal to
   the number of days since January 1, 2000 local time, and for
<see langword="revision"/> to be equal to the number of seconds since midnight local
   time, divided by 2.</para>
			<para>If you specify <see langword="major"/>, <see langword="minor"/>, and
<see langword="build"/>, you can specify an asterisk for
<see langword="revision"/>. This will cause <see langword="revision"/> to be equal to the number of seconds since midnight local time, divided by 2.</para>
			<para>Examples of valid version strings include:</para>
			<para>1</para>
			<para>1.1</para>
			<para>1.1.*</para>
			<para>1.1.1</para>
			<para>1.1.1.*</para>
			<para>1.1.1.1</para>
		</remarks>
	</doc>
	<doc for="AssemblyCultureAttribute">
		<summary>
			<para>Specifies which culture the assembly supports.</para>
		</summary>
		<remarks>
			<para>The attribute is used by compilers to distinguish
      between a main assembly and a satellite assembly. A main assembly contains code
      and the neutral culture's resources. A satellite assembly contains only
      resources for a particular culture, as in <c>[assembly:AssemblyCultureAttribute("de")]</c>
   . Putting this attribute
   on an assembly and using something other than the empty string
   ("") for the culture name will make this assembly look like a
   satellite assembly, rather than a main assembly that contains executable code. Labeling a
   traditional code library with this attribute will break it, because no other code will be able to find the library's entry points
   at runtime.</para>
			<para>For more detail, see the specifications for the common language runtime architecture, metadata,
   Microsoft intermediate language instruction set, file format,
   and Microsoft intermediate language assembly reference in the "Tool Developers
   Guide" folder of the SDK.</para>
		</remarks>
		<seealso topic="cpconmetadataselfdescribingcomponents"/>
		<seealso topic="cpconmicrosoftintermediatelanguagemsil"/>
		<seealso topic="cpconmetadataoverview"/>
	</doc>
	<doc for="AssemblyKeyFileAttribute">
		<summary>
			<para>Specifies
      the name of a file containing the key pair used to generate a strong
      name.</para>
		</summary>
		<remarks>
			<para> When building a
      strong-named assembly, the author must supply either this attribute or <see cref="System.Reflection.AssemblyKeyNameAttribute"/>. If <see cref="System.Reflection.AssemblyDelaySignAttribute"/> has also been specified, it is
      likely that this file will only contain the public key.</para>
			<para> An example of the syntax is <c>[assembly:AssemblyKeyFileAttribute("myKey.snk")]</c>
   .</para>
			<note type="caution">
   Since the path and file name
   persist, ensure that the string you use with
<see langword="AssemblyKeyFileAttribute"/> does not contain sensitive 
   information.
</note>
			<para>The classes in
<see langword="System.Runtime.CompilerServices"/> are intended for use by
   compilers only. Do not use them unless you are building a compiler.</para>
For more
detail, see the specifications for the common language runtime architecture, metadata,
Microsoft intermediate language instruction set, file format,
and Microsoft intermediate language assembly reference in the "Tool Developers
Guide" folder of the SDK.
</remarks>
		<example>
			<codelink SampleID="CodeAccessPermission_Copy_Demand" SnippetID="8"/>
		</example>
		<seealso topic="cpconmetadataselfdescribingcomponents"/>
		<seealso topic="cpconmicrosoftintermediatelanguagemsil"/>
		<seealso topic="cpconmetadataoverview"/>
	</doc>
	<doc for="AssemblyKeyNameAttribute">
		<summary>
			<para>Specifies
      the name of a key container within the CSP containing the key pair used to
      generate a strong name.</para>
		</summary>
		<remarks>
			<para>When building a strong-named assembly, the author must supply
      either this attribute or <see cref="System.Reflection.AssemblyKeyFileAttribute"/>.</para>
			<para>An example of the syntax is <c>[assembly:AssemblyKeyNameAttribute("myContainer")]</c>.</para>
			<para> The classes in
   <see langword="System.Runtime.CompilerServices"/> are intended for use by compilers
      only. Do not use them unless you are building a
      compiler.</para>
   For more
   detail, see the specifications for the common language runtime architecture, metadata,
   Microsoft intermediate language instruction set, file format,
   and Microsoft intermediate language assembly reference in the "Tool Developers
   Guide" folder of the SDK.
</remarks>
		<seealso topic="cpconmetadataselfdescribingcomponents"/>
		<seealso topic="cpconmicrosoftintermediatelanguagemsil"/>
		<seealso topic="cpconmetadataoverview"/>
	</doc>
	<doc for="AssemblyKeyNameAttribute.KeyName">
		<summary>
			<para>Gets the name of the container having the key pair that is used to generate
      a strong name for the attributed assembly.</para>
		</summary>
		<value>
			<para>A string containing the name of the container that has the relevant key
      pair.</para>
		</value>
	</doc>
	<doc for="AssemblyDelaySignAttribute">
		<summary>
			<para> Specifies that the assembly is not fully signed when
      created.</para>
		</summary>
		<remarks>
			<para>When this attribute is used on an
      assembly, space is reserved for the signature which is later filled by a signing
      tool such as the Sn.exe utility. Delayed signing is used when the author of the assembly does not have
      access to the private key that will be used to generate the signature, as in
      <c>[assembly:AssemblyDelaySignAttribute(true)]</c>.</para>
			<para> The classes in
      <see langword="System.Runtime.CompilerServices"/> are intended for use by compilers
         only. Do not use them unless you are building a
         compiler.</para>
      For more
      detail, see the specifications for the common language runtime architecture, metadata,
      Microsoft intermediate language instruction set, file format,
      and Microsoft intermediate language assembly reference in the "Tool Developers
      Guide" folder of the SDK.
   </remarks>
		<seealso topic="cpconmetadataoverview"/>
		<seealso topic="cpconmetadataselfdescribingcomponents"/>
		<seealso topic="cpconmicrosoftintermediatelanguagemsil"/>
	</doc>
	<doc for="AssemblyDelaySignAttribute.DelaySign">
		<summary>
			<para>Gets a value indicating the state of the attribute.</para>
		</summary>
		<value>
			<para><see langword="true"/> if this assembly has been built as delay-signed;
   otherwise, <see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="AssemblyAlgorithmIdAttribute">
		<summary>
			<para> Specifies
      an algorithm to hash all files in an assembly. This class cannot
      be inherited.</para>
		</summary>
		<remarks>
			<para>The file hash values and names in the assembly are stored in the
      assembly manifest. When a file is loaded, the hash value is used to verify that
      a file has not been changed since the manifest was built.</para>
		</remarks>
	</doc>
	<doc for="AssemblyAlgorithmIdAttribute.AlgorithmId">
		<summary>
			<para>Gets the hash algorithm of an assembly manifest's contents.</para>
			<para>This property is not CLS-compliant. For more information about CLS
      compliance, see <see topic="cpconwhatiscommonlanguagespecification"/>.</para>
		</summary>
		<value>
			<para>An unsigned integer representing the assembly hash algorithm.</para>
		</value>
		<seealso cref="System.Configuration.Assemblies.AssemblyHash"/>
	</doc>
	<doc for="AssemblyFlagsAttribute">
		<summary>
			<para>Specifies whether an assembly supports side-by-side
      execution on the same computer, in the same process, or in the same application
      domain. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The <see cref="System.Configuration.Assemblies.AssemblyVersionCompatibility"/> enumeration defines the
   compatibility of an assembly with other versions of the same assembly,
   indicating if it cannot execute side-by-side with other versions.</para>
		</remarks>
		<seealso cref="System.Configuration.Assemblies.AssemblyVersionCompatibility"/>
	</doc>
	<doc for="AssemblyFlagsAttribute.AssemblyFlags">
		<summary>
			<para>Gets the value representing the kind of side-by-side
      execution allowed (same machine, same process, or same application domain).</para>
		</summary>
		<value>
			<para>A value representing the allowed side-by-side execution.</para>
		</value>
	</doc>
</docs>
