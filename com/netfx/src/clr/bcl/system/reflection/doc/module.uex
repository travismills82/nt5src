<docs>
	<doc for="Module">
		<summary>
			<para> 
       Performs
       reflection on a module.</para>
		</summary>
		<remarks>
			<para>A module is a portable executable file of type .dll or .exe 
       consisting of one or more classes and interfaces. There may be multiple
       namespaces contained in a single module, and a namespace may span multiple
       modules. </para>
			<para>One or more modules deployed as a unit compose an assembly. </para>
		</remarks>
	</doc>
	<doc for="Module.GetTypes">
		<summary>
			<para>Returns
       all the classes defined within this module.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="Type"/>
 containing classes defined within the module that is reflected by this
 instance.</para>
		</returns>
		<exception cref="System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>
				<see langword="ReflectionTypeLoadException"/> is a special class load exception. The <see langword="ReflectionTypeLoadException.Types"/> property contains the array of classes that were defined in the module and were loaded. This array may contain some null values. The <see langword="ReflectionTypeLoadException.LoaderExceptions"/> property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.</para>
			<para>For example, if the class initializers of one of the 
    classes throws an exception while it is being loaded, a
 <see langword="TargetInvocationException"/> is stored in the corresponding 
    element of the <see langword="LoaderExceptions"/>
    array.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">Reflection permission for the current module.</permission>
		<seealso cref="System.Reflection.ReflectionTypeLoadException"/>
	</doc>
	<doc for="Module.GetObjectData">
		<summary>
			<para>Provides an <see cref="System.Runtime.Serialization.ISerializable"/> implementation for serialized 
    objects.</para>
		</summary>
		<param name="info">The information and data needed to serialize or deserialize an object.</param>
		<param name=" context">The context for the serialization.</param>
		<exception cref="System.ArgumentNullException">
			<paramref name="info"/> is <see langword="null"/>.</exception>
	</doc>
	<doc for="Module.Name">
		<summary>
			<para>Gets a <see langword="String"/> representing the name of the module with the path removed.</para>
		</summary>
		<value>
			<para>The module name with no path.</para>
		</value>
		<remarks>
			<para>
				<see langword="Name"/> is a platform-dependent string.</para>
			<para>To get the name and the path, use <see cref="System.Reflection.Module.FullyQualifiedName"/> .</para>
		</remarks>
		<example>
			<para>This example shows the effect of the <see langword="ScopeName"/>, <see langword="FullyQualifiedName"/>, and <see langword="Name"/> properties.</para>
			<codelink SampleID="Classic Module.Name Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.GetSignerCertificate">
		<summary>
			<para>Returns an <see langword="X509Certificate"/> object 
   corresponding to the certificate included in the Authenticode signature of the
   assembly which this module belongs to. If the assembly has not been Authenticode
   signed, <see langword="null"/> is returned. </para>
		</summary>
		<returns>
			<para>An <see langword="X509Certificate"/> object, 
   or <see langword="null"/> if the assembly to which this module belongs
   has not been Authenticode
   signed. </para>
		</returns>
	</doc><doc for="Module.ScopeName">
		<summary>
			<para>Gets a string representing the name of the module.</para>
		</summary>
		<value>
			<para>The module name.</para>
		</value>
		<remarks>
			<para>The <see langword="ScopeName"/> property is not used by
 the common language runtime, but you can use it to store any string you want in
 the property when you emit a module using the metadata APIs. Reflection itself
 does not allow you to set the <see langword="ScopeName"/>
 property.</para>
		</remarks>
		<example>
			<para>This example shows the effect of the <see langword="ScopeName"/>,
<see langword="FullyQualifiedName"/>, and <see langword="Name"/> properties.</para>
			<codelink SampleID="Classic Module.ScopeName Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.Assembly">
		<summary>
			<para>Gets the appropriate <see cref="System.Reflection.Assembly"/> for this instance of <see cref="System.Reflection.Module"/> .</para>
		</summary>
		<value>
			<para>An <see langword="Assembly"/> object.</para>
		</value>
		<example>
			<para>The following example displays the full name of the specified assembly in the 
      specified module.</para>
			<codelink SampleID="System.Reflection.Module.Assembly Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.FilterTypeName">
		<summary>
			<para>A <see langword="TypeFilter"/>
object that filters the list
of types defined in this module based upon the name. This field is case-sensitive and
read-only.</para>
		</summary>
		<remarks>
			<para> The filter supports a trailing "*"
      wildcard.</para>
		</remarks>
		<example>
			<para> The following example displays the module names that match the specified search criteria.</para>
			<codelink SampleID="System.Reflection.Module.FilterTypeName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.Module.FindTypes"/>
	</doc>
	<doc for="Module.FilterTypeNameIgnoreCase">
		<summary>
			<para>A <see langword="TypeFilter"/>
object that filters the list of
types defined in this module based upon the name. This
field is case-insensitive and read-only.</para>
		</summary>
		<remarks>
			<para> The filter supports a trailing "*"
      wildcard.</para>
		</remarks>
		<example>
			<para>The following example displays the module names that match the specified search criteria, ignoring the case.</para>
			<codelink SampleID="System.Reflection.Module.FilterTypeNameIgnoreCase Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.Module.FindTypes"/>
	</doc>
	<doc for="Module.FullyQualifiedName">
		<summary>
			<para>Gets a string representing the fully qualified name and path to this module.</para>
		</summary>
		<value>
			<para>The fully qualified module name.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permissions.</exception>
		<remarks>
			<para>To get the name without the path, use <see cref="System.Reflection.Module.Name"/> .</para>
			<para>If the assembly for this module was loaded from a
   byte array then the <see langword="FullyQualifiedName"/> for the module
   will be: &lt;Unknown&gt;. </para>
			<note type="note">
   The case of module name is
   platform-dependent.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to information in the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<para> The following example displays the fully qualified name of the specified module.</para>
			<codelink SampleID="System.Reflection.Module.FullyQualifiedName" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.FindTypes">
		<summary>
			<para>Returns an array of classes accepted by the given filter and
      filter criteria.</para>
		</summary>
		<param name="filter">The delegate used to filter the classes.</param>
		<param name="filterCriteria">An Object used to filter the classes.</param>
		<returns>
			<para> An array of type <see langword="Type"/> containing classes that were accepted by the filter.</para>
		</returns>
		<exception cref="System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
		<remarks>
			<para><see cref="System.Reflection.ReflectionTypeLoadException"/> is a
   special class load exception. The
<see langword="ReflectionTypeLoadException.Types"/> property contains the array
   of classes that were defined in the module and were loaded. This array may
   contain some null values. The
<see langword="ReflectionTypeLoadException.LoaderExceptions"/>
property is an array of exceptions that represent the exceptions that
were thrown by the class loader. The holes in
the class array line up with the exceptions.</para>
			<para>The delegate given by <paramref name="filter"/> is called for each class in the module,
passing along the <see langword="Type"/> object representing the class as well as
the given <paramref name="filterCriteria"/>. If <paramref name="filter"/> returns a particular
class, that class will be included in the returned array. If
<paramref name="filter"/> returns <see langword="null"/>, all classes are
returned and <paramref name="filterCriteria"/> is ignored.</para>
			<para><see langword="FindTypes"/> cannot be used to look up
parameterized types such as arrays.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the 
   <see langword="FindTypes"/> method.</para>
			<codelink SampleID="System.Reflection.Module.FilterTypeName Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.Module.FilterTypeName"/>
		<seealso cref="System.Reflection.Module.FilterTypeNameIgnoreCase"/>
		<seealso cref="System.Reflection.ReflectionTypeLoadException"/>
	</doc>
	<doc for="Module.GetCustomAttributes">
		<overload>
			<para> Returns custom attributes.</para>
		</overload>
		<summary>
			<para>Returns all custom attributes.</para>
		</summary>
		<param name="inherit">This argument is ignored for objects of this type. </param>
		<returns>
			<para>An array of type <see langword="Object"/> containing all custom
   attributes.</para>
		</returns>
		<example>
			<para>The following example displays the module names that match the specified search criteria.</para>
			<codelink SampleID="System.Reflection.Module.GetCustomAttributes 1Arg Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.GetType">
		<overload>
			<para>Returns the specified class.</para>
		</overload>
		<summary>
			<para> Returns the specified class, searching the module with
      the specified case sensitivity.</para>
		</summary>
		<param name="className">The name of the class to locate. The name must be fully qualified with the namespace.</param>
		<param name="ignoreCase"><see langword="true"/> for case-insensitive search; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>A <see langword="Type "/> object representing the given class name, if the class is in this
   module; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="className "/>is <see langword="null"/> .</exception>
		<exception cref="System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown.</exception>
		<exception cref="System.ArgumentException"><paramref name="className "/>is invalid, such as if it is greater than 1023 characters or if it is a zero-length string.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required reflection permissions and attempts to reflect on a type that is not public.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting on types that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<example>
			<para> The following example displays the name of a class in the specified module, 
      specifying <see langword="false"/> for the <paramref name="ignoreCase "/>parameter so that case will not be ignored.</para>
			<codelink SampleID="System.Reflection.Module.GetType 2Arg Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.GetType1">
		<summary>
			<para> Returns the specified class, performing a case-sensitive
      search.</para>
		</summary>
		<param name="className">The name of the class to locate. The name must be fully qualified with the namespace.</param>
		<returns>
			<para>A <see langword="Type "/>object representing the given class name, if the
   class is in this module; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="className "/>is <see langword="null"/> .</exception>
		<exception cref="System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown.</exception>
		<exception cref="System.ArgumentException"><paramref name="className "/>is invalid, such as if it is greater than 1023 characters or if it is a zero-length string.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required reflection permissions and attempts to reflect on a type that is not public.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting on types that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<example>
			<para> The following example displays the name of a class in the specified module.</para>
			<codelink SampleID="System.Reflection.Module.GetType 1Arg Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.GetType2">
		<summary>
			<para>Returns the specified class, searching the module with
      the specified case sensitivity and specifying whether to throw an exception if
      an error occurs while loading the <see langword="Type"/>
      .</para>
		</summary>
		<param name="className">The name of the class to locate. The name must be fully qualified with the namespace.</param>
		<param name=" throwOnError"><para>
				<see langword="true"/> to throw a <see langword="TypeLoadException"/> if an error occurs while loading the <see langword="Type"/> . </para>
			<para>-or-</para>
			<para>
				<see langword="false"/>to ignore errors while loading the <see langword="Type"/> . </para></param>
		<param name="ignoreCase"><see langword="true"/> for case-insensitive search; otherwise, <see langword="false"/> .</param>
		<returns>
			<para>A <see langword="Type "/>object representing the given class name, if the
   class is in this module; otherwise, <see langword="null"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="className "/>is <see langword="null"/> .</exception>
		<exception cref="System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown.</exception>
		<exception cref="System.ArgumentException"><paramref name="className "/>is invalid, such as if it is greater than 1023 characters or if it is a zero-length string.</exception>
		<exception cref="System.TypeLoadException">An error occurred while loading the type.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required reflection permissions and attempts to reflect on a type that is not public.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting on types that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<example>
			<para>The following example displays the name of a class in 
      the specified module. The <paramref name="throwOnError"/> and <paramref name="ignoreCase
      "/> parameters are specified as <see langword="false"/> .</para>
			<codelink SampleID="System.Reflection.Module.GetType 3Arg Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.ToString">
		<summary>
			<para>Returns the name of the module.</para>
		</summary>
		<returns>
			<para> A <see langword="String "/> representing the name of
   this module.</para>
		</returns>
		<example>
			<para>The following example demonstrates a use of the <see langword="ToString"/> method.</para>
			<codelink SampleID="System.Reflection.Module.ToString Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.GetCustomAttributes1">
		<summary>
			<para>Gets custom attributes of the
      specified type.</para>
		</summary>
		<param name="attributeType">The type of attribute to get.</param>
		<param name="inherit">This argument is ignored for objects of this type. </param>
		<returns>
			<para>An array of type <see langword="Object"/> containing all custom attributes of
   the specified type.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="attributeType"/> is <see langword="null"/>.</exception>
		<example>
			<para>The following example displays the module names of the specified type that match the specified search criteria.</para>
			<codelink SampleID="System.Reflection.Module.GetCustomAttributes 2Arg Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.IsDefined">
		<summary>
			<para>Determines if the specified <paramref name="attributeType"/> is defined on this module.</para>
		</summary>
		<param name="attributeType">The Type object to which the custom attribute is applied.</param>
		<param name="inherit">This argument is ignored for objects of this type.</param>
		<returns>
			<para><see langword="true"/>
if one or more instance of <paramref name="attributeType"/> is defined on this module; otherwise,
<see langword="false"/> .</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="attributeType"/> is <see langword="null"/> .</exception>
		<example>
			<para>The following example demonstrates a use of the 
   <see langword="IsDefined"/> method.</para>
			<codelink SampleID="System.Reflection.Module.IsDefined Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.IsResource">
		<summary>
			<para>Gets a value indicating whether the object is a resource.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the object is a resource;
   otherwise, <see langword="false"/> .</para>
		</returns>
		<example>
			<para>The following example demonstrates a use of the <see langword="IsResource"/> method.</para>
			<codelink SampleID="System.Reflection.Module.IsResource Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="Module.GetMethods">
		<summary>
			<para> Returns an array of all the global methods defined on the module.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="MethodInfo"/> containing all the global methods 
   defined on the module, or <see langword="null "/> if
   the methods do not exist.</para>
		</returns>
	</doc>
	<doc for="Module.GetMethod">
		<overload>
			<para>Returns a
      method having the specified criteria.</para>
		</overload>
		<summary>
			<para>Returns a method having the specified name, binding
      information, calling convention, and parameter types and modifiers.</para>
		</summary>
		<param name="name">The method name.</param>
		<param name="bindingAttr">One of the <see langword="BindingFlags"/> bit flags used to control the search.</param>
		<param name="binder">An object that implements <see langword="Binder"/> , containing properties related to this method. </param>
		<param name="callConvention">The calling convention for the method.</param>
		<param name="types">The parameter types to search for.</param>
		<param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
		<returns>
			<para>A <see langword="MethodInfo"/> object 
   in accordance with the specified criteria, or <see langword="null "/> if the method
   does
   not exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/> , <paramref name="types"/> is <see langword="null"/> , or <paramref name="types"/>(i) is <see langword="null"/> .</exception>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.CallingConventions"/>
		<seealso cref="System.Reflection.ParameterModifier"/>
	</doc>
	<doc for="Module.GetMethod1">
		<summary>
			<para>Returns a method having the specified name and
      parameter types.</para>
		</summary>
		<param name="name">The method name.</param>
		<param name="types">The parameter types to search for.</param>
		<returns>
			<para>A <see langword="MethodInfo"/> object 
   in accordance with the specified criteria, or <see langword="null "/> if the method does
   not exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/> , <paramref name="types"/> is <see langword="null"/> , or <paramref name="types"/>(i) is <see langword="null"/> .</exception>
	</doc>
	<doc for="Module.GetMethod2">
		<summary>
			<para>Returns a method having the specified name.</para>
		</summary>
		<param name="name">The method name.</param>
		<returns>
			<para>A <see langword="MethodInfo"/> object 
   having the specified name, or <see langword="null "/>if the method does
   not exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/> .</exception>
	</doc>
	<doc for="Module.GetFields">
		<summary>
			<para>Returns an array of fields implemented by a class.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="FieldInfo"/> containing the fields implemented by a 
   class, or <see langword="null "/>
   if the fields do not exist.</para>
		</returns>
	</doc>
	<doc for="Module.GetField">
		<overload>
			<para>Returns a specified field. </para>
		</overload>
		<summary>
			<para>Returns a field having the specified name.</para>
		</summary>
		<param name="name">The field name.</param>
		<returns>
			<para>A <see langword="FieldInfo"/> object 
   having the specified name, or <see langword="null "/>if the field does
   not exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
	</doc>
	<doc for="Module.GetField1">
		<summary>
			<para>Returns a field having the specified name and binding
      attributes.</para>
		</summary>
		<param name="name">The field name.</param>
		<param name="bindingAttr">One of the <see langword="BindingFlags"/> bit flags used to control the search.</param>
		<returns>
			<para>A <see langword="FieldInfo"/> object 
   having the specified name and binding attributes, or <see langword="null "/> if the field does
   not exist.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning fields that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
	</doc>
	<doc for="Module.GetMethodImpl">
		<summary>
			<para>Returns the method implementation in accordance with the
      specified criteria.</para>
		</summary>
		<param name="name">The method name.</param>
		<param name="bindingAttr">One of the <see langword="BindingFlags"/> bit flags used to control the search.</param>
		<param name="binder">An object that implements <see langword="Binder"/> , containing properties related to this method. </param>
		<param name="callConvention">The calling convention for the method.</param>
		<param name="types">The parameter types to search for.</param>
		<param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
		<returns>
			<para>A <see langword="MethodInfo"/> object 
   containing implementation information as specified, or <see langword="null "/> if the method does
   not exist.</para>
		</returns>
		<exception cref="System.Reflection.AmbiguousMatchException"><paramref name="types"/> is <see langword="null"/> .</exception>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.CallingConventions"/>
		<seealso cref="System.Reflection.ParameterModifier"/>
	</doc>
</docs>
