<docs>
	<doc for="CallingConventions.VarArgs">
		<summary>
			<para>
       Specifies the calling convention for methods with variable arguments.
    </para>
		</summary>
	</doc>
	<doc for="CallingConventions.ExplicitThis">
		<summary>
			<para>Specifies that the signature is a function-pointer 
       signature, representing a call to an instance or virtual method (not a static
       method). If <see langword="ExplicitThis"/> is set, <see langword="HasThis"/> must
       also be set. The first argument passed to the called method is still a
    <see langword="this"/> pointer, but the type of the first argument is now 
       unknown. Therefore, a token that describes the type (or class) of the
    <see langword="this"/> 
    pointer is explicitly stored into its metadata signature.</para>
		</summary>
	</doc>
	<doc for="CallingConventions.Any">
		<summary>
			<para> Specifies that either the <see langword="Standard"/> or 
   the <see langword="VarArgs "/> calling convention may be
   used.
   </para>
		</summary>
	</doc><doc for="CallingConventions.HasThis">
		<summary>
			<para> Specifies an instance or virtual method (not a
      static method). At run-time, the called method is passed a pointer to the target
      object as its first argument (the <see langword="this"/>
      pointer). The signature stored in metadata does not include the type of this first
      argument, because the method is known and its owner class can be discovered from metadata.</para>
		</summary>
	</doc><doc for="CallingConventions.Standard">
		<summary>
			<para>Specifies the default calling convention as determined by the common language runtime.</para>
		</summary>
	</doc><doc for="CallingConventions">
		<summary>
			<para> Defines the valid calling conventions for an enumeration.
      </para>
		</summary>
		<remarks>
			<para> The native calling convention is
      the set of rules governing the order and layout of arguments
      passed to compiled methods. It also governs how to pass the return value,
      what registers to use for arguments, and whether the called or the calling method removes
      arguments from the stack.
      </para>
		</remarks>
		<example>
			<codelink SampleID="Type_GetConstructor3" SnippetID="1"/>
		</example>
	</doc>
</docs>
