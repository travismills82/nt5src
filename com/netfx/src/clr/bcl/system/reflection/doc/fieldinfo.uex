<docs>
	<doc for="FieldInfo.IsLiteral">
		<summary>
			<para> Gets a
      value
      indicating whether the value is written at compile time and cannot be changed.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="Literal"/>
   attribute set; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> The <see langword="IsLiteral"/> property is set when the
<see langword="FieldAttributes.Literal"/> attribute is set.
   If this attribute is set, the field
   cannot be changed and is constant.
   </para>
		</remarks>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.Attributes">
		<summary>
			<para>Gets the attributes associated with this field.</para>
		</summary>
		<value>
			<para>The <see langword="FieldAttributes"/>
for this field.</para>
		</value>
		<remarks>
			<para>All members have a set of attributes, which are defined
      in relation to the specific type of member.
   <see langword="FieldAttributes"/>
   informs the user whether this field is the private field, a
   static field, and so on.</para>
			<para>To get the <see langword="Attributes"/> property, first
get the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the
<see langword="Attributes"/>
.</para>
		</remarks>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Type"/>
	</doc><doc for="FieldInfo.IsInitOnly">
		<summary>
			<para> Gets a
      value indicating whether the field can only be set in the body of the
      constructor.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="InitOnly"/>
   attribute set; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> If the returned value is <see langword="true"/>
, the field can only be initialized, and is
read-only thereafter.</para>
			<para> To get the <see langword="IsInitOnly"/> property, first
get the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the
<see langword="IsInitOnly"/> property. To access a non-public field, set the
<see langword="BindingFlags"/> to <see langword="NonPublic"/> and choose either 
<see langword="Static"/> or <see langword="Instance"/>
				<see langword="BindingFlags"/> in the
<see langword="GetField"/>
method.</para>
			<para> The <see langword="IsInitOnly"/> property is set when the
<see langword="FieldAttributes.InitOnly"/>
attribute is set.</para>
		</remarks>
		<example>
			<para> In the following example, two fields are created. The 
      second field is read-only, having no set accessor, and
   <see langword="IsInitOnly"/> 
   is set to <see langword="true"/>.
   </para>
			<codelink SampleID="Classic FieldInfo.IsInitOnly Example" SnippetID="1"/>
			<para> This code produces the following output:
 </para>
			<para>Reflection.FieldInfo</para>
			<para>Myfielda - A- modified, IsInitOnly = False </para>
			<para>Myfieldb - B readonly field, IsInitOnly = True</para>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Type.GetField"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.FieldInfo">
		<summary>
			<para> Initializes a new instance of the
   <see langword="FieldInfo"/>
   class.
   </para>
		</summary>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="FieldInfo.GetValueDirect">
		<summary>
			<para> Returns the value of a field supported by a given object.
      </para>
		</summary>
		<altcompliant cref="System.Reflection.FieldInfo.GetValue"/>
		<param name="obj">A managed pointer to a location and a runtime representation of the type that might be stored at that location. </param>
		<returns>
			<para>An <see langword="Object"/> containing a field value.</para>
		</returns>
		<exception cref="System.NotSupportedException">The caller requires the CLS alternative, but called this method instead. </exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="FieldInfo.SetValueDirect">
		<summary>
			<para> Sets the value of the field supported by the given object.
      </para>
		</summary>
		<altcompliant cref="System.Reflection.FieldInfo.SetValue"/>
		<param name="obj">A managed pointer to a location and a runtime representation of the type that can be stored at that location. </param>
		<param name=" value">The value to assign to the field. </param>
		<exception cref="System.NotSupportedException">The caller requires the CLS alternative, but called this method instead. </exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="FieldInfo">
		<summary>
			<para>Discovers the attributes of a field and provides access
      to field metadata.</para>
		</summary>
		<remarks>
			<para>The field information is obtained from metadata.
   <see langword="FieldInfo"/> does not have a public constructor.
   <see langword="FieldInfo "/>
   objects are obtained by calling either the <see cref="System.Type.GetFields"/> or <see cref="System.Type.GetField"/> method of
   a <see langword="Type"/>
   
   object.</para>
			<para> Fields are variables
   defined in the class. <see langword="FieldInfo"/> provides access to the
   metadata for a field within a class and provides dynamic set and get
   functionality for the field. The class is not loaded into memory until invoke or
   get is called on the object.</para>
			<note type="inheritinfo">
   When you inherit from
<see langword="FieldInfo"/>, you must override the following
   members: <see cref="System.Reflection.FieldInfo.GetValue"/> and <see cref="System.Reflection.FieldInfo.SetValue"/>.
   
</note>
		</remarks>
		<example>
			<para>The following example uses <see cref="System.Type.GetFields" qualify="true"/> to get the field-related information 
   from FieldInfoClass, and then displays field attributes.</para>
			<codelink SampleID="FieldInfo" SnippetID="1"/>
		</example>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.FieldHandle">
		<summary>
			<para>Gets a <see langword="RuntimeFieldHandle"/>
, which is a handle to the
internal metadata representation
of
a field.</para>
		</summary>
		<value>
			<para>A handle to the internal metadata representation of a field.</para>
		</value>
		<remarks>
			<para>The handles are valid only in the appdomain in which they were obtained.</para>
		</remarks>
		<example>
			<para>The following example retrieves MyClass.MyField field information 
      and displays the field associated with the field handle.</para>
			<codelink SampleID="FieldInfo_FieldHandle" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FieldInfo.FieldType">
		<summary>
			<para> Gets the type of
      this field object.</para>
		</summary>
		<value>
			<para> The type of this field object.
      </para>
		</value>
		<remarks>
			<para> The type is some primitive data type, such as
   <see langword="String"/>, <see langword="Boolean"/>, or <see langword="GUID"/>.
      </para>
			<para> To get the <see langword="FieldType"/> property, first
   get the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the
<see langword="FieldType"/>
value.</para>
		</remarks>
		<example>
			<para>The following example creates a field, gets its type and <see cref="System.Reflection.FieldInfo"/>, 
   and displays its <see cref="System.Reflection.FieldInfo.FieldType"/>.</para>
			<codelink SampleID="Classic FieldInfo.FieldType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.GetFieldFromHandle">
		<summary>
			<para>Gets a <see langword="FieldInfo"/>
containing the value of the field
reflected
by this instance.</para>
		</summary>
		<param name="handle">A handle to the internal metadata representation of a field.</param>
		<returns>
			<para>A <see langword="FieldInfo"/>
containing the value of
the field reflected by this instance.</para>
		</returns>
		<remarks>
			<para>The handles are valid only in the application domain in which they were obtained.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para>The following example displays the <see cref="System.Reflection.FieldInfo"/> containing the value of the 
   field reflected by the current instance.</para>
			<codelink SampleID="FieldInfo_GetFieldFromHandle" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FieldInfo.IsFamily">
		<summary>
			<para>Gets a value
      indicating
      whether this field has Family level visibility.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="Family"/>
   attribute set; otherwise, <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>This property can be
      called from any member in a derived class, but not from any other type.</para>
			<para>To get the <see langword="IsFamily"/> property, first get
   the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the
<see langword="IsFamily"/>
value.</para>
			<para>The <see langword="IsFamily"/> property is set when the
<see langword="FieldAttributes.Family"/>
attribute is set.</para>
		</remarks>
		<example>
			<para>In the following example, two properties are created.
      The first property has a private string field and the second property has a
      protected string field, resulting in the <see langword="IsFamily"/> property
      being set to <see langword="true"/>.</para>
			<codelink SampleID="Classic FieldInfo.IsFamily Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.IsAssembly">
		<summary>
			<para> Gets a value
      indicating
      whether this field has Assembly level visibility.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="Assembly"/>
   attribute set; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> If a field has <see langword="Assembly"/>
level visibility, it can be called from any member within
that assembly, but none outside of it.</para>
			<para> The <see langword="IsAssembly"/> property is set when the
<see langword="FieldAttributes.Assembly"/> attribute is set. In C#, 
you can declare the field as <see langword="internal"/> to set this property
to limit the access of this field to this project.</para>
		</remarks>
		<example>
			<para>The following example determines whether the specified fields have 
      Assembly-level visibility and displays the results.</para>
			<codelink SampleID="Classic FieldInfo.IsAssembly Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.IsFamilyAndAssembly">
		<summary>
			<para> Gets a value indicating whether this field has
   <see langword="FamilyAndAssembly"/>
   level visibility.
   </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="FamANDAssem"/>
   attribute set; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> If a field has <see langword="FamilyAndAssembly"/>
level visibility, it can be called from any member
in a derived class that is also in the same assembly, but not from any other
type.</para>
			<para> The <see langword="IsFamilyAndAssembly"/> property is set
when the <see langword="FieldAttributes.FamANDAssem"/>
attribute is set.</para>
		</remarks>
		<example>
			<para>The following example creates a class and displays the class name, field 
      name, and <see cref="System.Reflection.FieldInfo.IsFamilyAndAssembly"/> property value of the
      field.</para>
			<codelink SampleID="FieldInfo_IsFamilyAndAssembly" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.IsFamilyOrAssembly">
		<summary>
			<para> Gets a value indicating whether this field has
   <see langword="FamilyOrAssembly"/>
   level visibility.
   </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="FamORAssem"/>
   attribute set; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> If a field has <see langword="FamilyOrAssembly"/>
level visibility, it can be called from any member
in a derived class or any member in the same assembly, but not from any
other type.</para>
			<para>The <see langword="IsFamilyOrAssembly"/>
property is set when the <see langword="FieldAttributes.FamORAssem"/>
attribute is set.</para>
		</remarks>
		<example>
			<para> In the following example, two fields are created. The
      second field, Myfieldb is derived from the first field, Myfielda. Myfielda.field
      is <see langword="protected internal"/> (<see langword="Friend Protected"/>
      in Visual Basic),
      which allows Myfieldb.field to be derived. If Myfielda.field were a private
      field, Myfieldb.field could not be derived.
      </para>
			<codelink SampleID="Classic FieldInfo.IsFamilyOrAssembly Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.IsNotSerialized">
		<summary>
			<para> Gets a value indicating whether this field has the
   <see langword="NotSerialized"/>
   attribute.
   </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field
   has the <see langword="NotSerialized"/>
   attribute set; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> The <see langword="IsNotSerialized"/> property returns
<see langword="true"/> when the field is marked with the 
<see langword="FieldAttributes.NotSerialized"/> flag. When this flag is set 
   on a field, it indicates that the field does not have to be serialized when the
   type is remoted.
   </para>
		</remarks>
		<example>
			<para>The following example gets the field information of the fields of 
      MyClass, determines if the fields can be serialized, and displays the
      results.</para>
			<codelink SampleID="FieldInfo_IsNotSerialized" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.IsPublic">
		<summary>
			<para> Gets a value indicating whether the field is public.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if this field is
   public; otherwise, <see langword="false"/>
   .
   </para>
		</value>
		<remarks>
			<para> Public
      fields are accessible everywhere their corresponding classes are visible.
      </para>
			<para> The <see langword="IsPublic"/> property is set when the
<see langword="FieldAttributes.Public"/>
attribute is set.</para>
			<para> To get the <see langword="IsPublic"/> property, first get the class
<see langword="Type"/>. From the <see langword="Type"/> 
, get the <see langword="FieldInfo"/>. From the
<see langword="FieldInfo"/>, get the <see langword="IsPublic"/> property. If the
field is other than public, it is protected and cannot be readily accessed.
To access a nonpublic field, set the <see langword="BindingFlags"/> to
<see langword="NonPublic"/>, specify either 
<see langword="BindingFlags.Instance"/> or <see langword="BindingFlags.Static"/>, 
and use this for the <see langword="GetField"/>
method.</para>
		</remarks>
		<example>
			<para>The following example returns a value indicating whether or not the field of the class 
      is public or private.</para>
			<codelink SampleID="Classic FieldInfo.IsPublic Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="FieldInfo.IsPrivate">
		<summary>
			<para> Gets a value indicating whether the field is private.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if the field is
   private; otherwise; <see langword="false"/>
   .
   </para>
		</value>
		<remarks>
			<para> Private fields are accessible only from member
      functions.
      </para>
			<para> The <see langword="IsPrivate"/> property is set when the
<see langword="FieldAttributes.Private"/>
attribute is set.</para>
			<para> To get the <see langword="IsPrivate"/> property, first
get the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the
<see langword="IsPrivate"/> 
property. To access a non-public field, set
the <see langword="BindingFlags"/> to
<see langword="NonPublic"/>, and either <see langword="Static"/> or 
<see langword="Instance"/> in the
<see langword="GetField"/>
method.</para>
		</remarks>
		<example>
			<para>The following example returns a value indicating whether or not the field of 
      the class is private.</para>
			<codelink SampleID="FieldInfo_IsPrivate" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.IsSpecialName">
		<summary>
			<para> Gets a value indicating whether the corresponding
   <see langword="SpecialName"/>
   attribute is set in the <see cref="System.Reflection.FieldAttributes"/> enumerator.
   </para>
		</summary>
		<value>
			<para><see langword="true "/>if the
<see langword="SpecialName"/> attribute
   is set in <see cref="System.Reflection.FieldAttributes"/> ; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para>Names that begin with or contain an underscore character (_), property
      accessors, and operator overloading methods are examples of names that might
      require special treatment by some compilers. </para>
		</remarks>
		<example>
			<para>The following example returns a value indicating whether or not the fields in 
      the class contain a SpecialName attribute.</para>
			<codelink SampleID="FieldInfo_IsSpecialName" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.IsPinvokeImpl">
		<summary>
			<para> Gets a value indicating whether the corresponding
   <see langword="PinvokeImpl"/>
   attribute is set in <see cref="System.Reflection.FieldAttributes"/>.
   </para>
		</summary>
		<value>
			<para><see langword="true "/>if the
<see langword="PinvokeImpl"/> attribute is
   set in <see cref="System.Reflection.FieldAttributes"/>; otherwise, <see langword="false"/>.
   </para>
		</value>
		<example>
			<para>The following example creates a class and displays the name, field and 
   <see cref="System.Reflection.FieldInfo.IsPinvokeImpl"/> property value of the field.</para>
			<codelink SampleID="FieldInfo_IsPInvokeImpl" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
	</doc>
	<doc for="FieldInfo.MemberType">
		<summary>
			<para>Gets the <see langword="Type"/> of property reflected by
   this <see langword="FieldInfo"/>
   object. The retrieved value indicates that this member is a field.</para>
		</summary>
		<value>
			<para>A <see langword="MemberTypes.Field"/>
object.</para>
		</value>
		<remarks>
			<para>This
      property
      is used when this field is being tested as a generic member.</para>
		</remarks>
		<example>
			<para>The following example determines whether the specified member is a field and 
      displays the result.</para>
			<codelink SampleID="Classic FieldInfo.MemberType Example" SnippetID="1"/>
			<para>This code produces the following output:</para>
			<para>Reflection.FieldInfo</para>
			<para>Myfield.field - a private field; MemberType is a Field</para>
		</example>
		<seealso cref="System.Reflection.FieldInfo"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.SetValue">
		<overload>
			<para> Sets the value of the field for the given object to the given value.
      </para>
		</overload>
		<summary>
			<para> Sets the value of the field supported by the given object.
      </para>
		</summary>
		<param name="obj">The object whose field value will be set. </param>
		<param name=" value">The value to assign to the field. </param>
		<exception cref="System.FieldAccessException">The caller does not have permission to access this field.</exception>
		<exception cref="System.Reflection.TargetException">The <paramref name="obj"/> parameter is <see langword="null"/> and the field is an instance field.</exception>
		<exception cref="System.ArgumentException"><para>The field does not exist on the object.</para>
			<para>-or-</para>
			<para>The <paramref name="value"/> parameter cannot be converted and stored in the field.</para></exception>
		<remarks>
			<para> This method will assign <paramref name="value "/>to the field reflected by this
   instance on object <paramref name="obj"/>. If the field is static, <paramref name="obj "/>will be
   ignored. For non-static fields, <paramref name="obj "/>should be an instance of a class that inherits or
   declares the field. The new value is passed as an <see langword="Object"/>. For
   example, if the field's type is Boolean, an instance
   of <see langword="Object"/> with the appropriate Boolean value is passed.
   Before setting the value, <see langword="SetValue"/> checks to see if the user
   has access permission. This final method is a convenience method for calling the
   following <see langword="SetValue"/>
   method.
   </para>
			<note type="note">
   Access restrictions are ignored
   for fully trusted code. That is, private constructors, methods, fields, and
   properties can be accessed and invoked using reflection whenever the code is fully
   trusted.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning fields that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for updating init-only fields. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
		<example>
			<para>The following example sets the value of a field, gets and displays the 
      value, modifies the field, and displays the result.</para>
			<codelink SampleID="FieldInfo_SetValue" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FieldInfo.IsStatic">
		<summary>
			<para> Gets a
      value indicating whether the field is static.
      </para>
		</summary>
		<value>
			<para><see langword="true "/>if this field is
   static; otherwise, <see langword="false"/>
   .
   </para>
		</value>
		<remarks>
			<para> When a field is static, one copy of
      the field is shared by all instances of the type.
      </para>
			<para> The <see langword="IsStatic"/> property is set when the
<see langword="FieldAttributes.Static"/>
attribute is set.</para>
			<para> To get the <see langword="IsStatic"/> property, first get
the class <see langword="Type"/>. From the <see langword="Type"/>, get the
<see langword="FieldInfo"/>. From the <see langword="FieldInfo"/>, get the
<see langword="IsStatic"/> property. To access a non-public field, 
set the <see langword="BindingFlags"/> to <see langword="NonPublic"/> in the
<see langword="GetField"/> method and 
set the accessibility to <see langword="Instance"/> or
<see langword="Static"/>
.</para>
		</remarks>
		<example>
			<para>The following example determines whether the specified field is static and 
      displays the result.</para>
			<codelink SampleID="Classic FieldInfo.IsStatic Example" SnippetID="1"/>
			<para> This code produces the following output:
 </para>
			<para> Reflection.FieldInfo
 </para>
			<para> Myfielda - A private field; IsStatic - False
 </para>
			<para> Myfieldb - B static field; IsStatic - True
 </para>
		</example>
		<seealso cref="System.Reflection.FieldAttributes"/>
		<seealso cref="System.Type.GetField"/>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="FieldInfo.SetValue1">
		<summary>
			<para> When overridden in a derived class, sets the value of the field
      supported by the given object.
      </para>
		</summary>
		<param name="obj">The object whose field value will be set. </param>
		<param name="value">The value to assign to the field. </param>
		<param name=" invokeAttr">A field of <see langword="Binder"/> that specifies the type of binding that is desired (for example, <see langword="Binder.CreateInstance"/> or <see langword="Binder.ExactBinding"/> ). </param>
		<param name=" binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder "/>is <see langword="null"/>, then <see langword="Binder.DefaultBinding"/> is used. </param>
		<param name=" culture">The software preferences of a particular culture. </param>
		<exception cref="System.FieldAccessException">The caller does not have permission to access this field.</exception>
		<exception cref="System.Reflection.TargetException">The <paramref name="obj"/> parameter is <see langword="null"/> and the field is an instance field.</exception>
		<exception cref="System.ArgumentException"><para>The field does not exist on the object.</para><para>-or-</para><para>The <paramref name="value"/> parameter cannot be converted and stored in the field.</para></exception>
		<remarks>
			<para> This method will assign <paramref name="value "/> to the field reflected by
   this instance on <paramref name="obj"/>. If the field is static, <paramref name="obj "/>will be
   ignored. For non-static fields, <paramref name="obj "/>should be an instance of a
   class that inherits or declares the field. The new value is passed as an
<see langword="Object"/>. For example, if the field's type is
<see langword="Boolean"/>, an instance of <see langword="Object"/>
with the appropriate Boolean value is passed.
Before setting the value, <see langword="SetValue"/>
checks
to see if the user has access permission.</para>
			<note type="note">
   Access restrictions are ignored
   for fully trusted code. That is, private constructors, methods, fields, and
   properties can be accessed and invoked using reflection whenever the code is fully
   trusted.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning fields that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.SecurityPermission">for updating init-only fields. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" qualify="true"/>.</permission>
	</doc>
	<doc for="FieldInfo.GetValue">
		<summary>
			<para> When overridden in a derived
      class, returns the value of a field supported by a given object.
      </para>
		</summary>
		<param name="obj">The object whose field value will be returned. </param>
		<returns>
			<para> An object containing the value of the field reflected by this
      instance.
      </para>
		</returns>
		<exception cref="System.Reflection.TargetException"><para>The field is non-static and <paramref name="obj "/>is <see langword="null"/> .</para></exception>
		<exception cref="System.NotSupportedException">A field is marked literal, but the field does not have one of the accepted literal types.</exception>
		<exception cref="System.FieldAccessException">The caller does not have permission to access this field.</exception>
		<exception cref="System.ArgumentException">The method is neither declared nor inherited by the class of <paramref name="obj"/>.</exception>
		<remarks>
			<para> If the field is static, <paramref name="obj "/>is ignored. For non-static fields,
<paramref name="obj "/>should be
   an instance of a class that inherits or declares the field. Note that the return
   type of <see langword="GetValue"/> is <see langword="Object"/>. For example, if
   the field holds a Boolean primitive value, an instance of
<see langword="Object"/> with the appropriate Boolean value is returned. Before
   returning the value, <see langword="GetValue"/>
   checks to see if the user has access permission.
   </para>
			<note type="note">
   Access restrictions are ignored
   for fully trusted code. That is, private constructors, methods, fields, and
   properties can be accessed and invoked through reflection whenever the code is
   fully trusted.
   
</note>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="getfldval" SnippetID="1"/>
			<para>The following example retrieves the fields of MyClass and displays the field 
values.</para>
			<codelink SampleID="FieldInfo_GetValue" SnippetID="1"/>
		</example>
		<seealso cref="System.Object"/>
	</doc>
</docs>
