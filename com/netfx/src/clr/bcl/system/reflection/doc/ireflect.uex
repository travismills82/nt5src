<docs>
	<doc for="IReflect">
		<summary>
			<para>Allows objects to return <see cref="System.Reflection.MemberInfo"/>
objects that represent an object.</para>
		</summary>
		<remarks>
			<para>
				<see langword="IReflect"/>
defines a subset of the
<see cref="System.Type"/> reflection methods.
Use <see langword="IReflect"/> to access and invoke members of a
type.</para>
		</remarks>
	</doc>
	<doc for="IReflect.GetMethod">
		<overload>
			<para>Retrieves a <see cref="System.Reflection.MethodInfo"/>
object corresponding to a specified method.</para>
		</overload>
		<summary>
			<para>Retrieves a <see langword="MethodInfo"/> object
   corresponding to a specified method, using a <see langword="Type"/>
   array to choose from among overloaded
   methods.</para>
		</summary>
		<param name="name">The name of the member to find.</param>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<param name="binder">An object that implements <see cref="System.Reflection.Binder"/> , containing properties related to this method.</param>
		<param name="types">An array used to choose among overloaded methods.</param>
		<param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
		<returns>
			<para>The requested method that matches all the specified parameters.</para>
		</returns>
		<exception cref="System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name.</exception>
		<remarks>
			<para>The return value is a match based on the method name, <see cref="System.Reflection.BindingFlags"/> enum member, the 
   kind of type conversion specified by the <paramref name="binder"/>
   parameter, the overload, and the
<see cref="System.Reflection.ParameterInfo"/> that describes the signature of the
   method.</para>
		</remarks>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.Binder"/>
		<seealso cref="System.Type"/>
		<seealso cref="System.Reflection.ParameterModifier"/>
	</doc>
	<doc for="IReflect.GetMethod1">
		<summary>
			<para>Retrieves a <see cref="System.Reflection.MethodInfo"/>
object corresponding to a specified
method under specified search constraints.</para>
		</summary>
		<param name="name">The name of the member to find.</param>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<returns>
			<para>A <see langword="MethodInfo"/> 
object containing the method information, with the match being based on the
method name and search constraints specified in <paramref name="bindingAttr"/>

.</para>
		</returns>
		<exception cref="System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name.</exception>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetField">
		<summary>
			<para>Returns the <see cref="System.Reflection.FieldInfo"/> object corresponding to the specified 
   field and <see langword="BindingFlag"/>
   
   .</para>
		</summary>
		<param name="name">The name of the field to find.</param>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<returns>
			<para>A <see langword="FieldInfo"/> object 
   containing the field information for the named object that meets the search
   constraints specified in <paramref name="bindingAttr"/>
   .</para>
		</returns>
		<exception cref="System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name.</exception>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetFields">
		<summary>
			<para>Returns an array of <see cref="System.Reflection.FieldInfo"/>
objects corresponding to all fields of the current
class.</para>
		</summary>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<returns>
			<para>An array of <see langword="FieldInfo"/> objects containing all the field 
   information for this reflection object that meets the search constraints
   specified in <paramref name="bindingAttr"/>
   
   .</para>
		</returns>
		<remarks>
			<para>The match is based upon a name. Each field must have a 
      unique name. The <see cref="System.Reflection.BindingFlags.NonPublic" qualify="true"/> flag specifies that
      non-public methods are included in the search. The <see cref="System.Reflection.BindingFlags.Public" qualify="true"/> flag specifies that
      public methods are included in the
      search.</para>
		</remarks>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetProperty">
		<overload>
			<para>Retrieves a <see cref="System.Reflection.PropertyInfo"/>
object corresponding to a
specified property.</para>
		</overload>
		<summary>
			<para>Retrieves a <see langword="PropertyInfo"/>
object corresponding to a
specified property under specified search constraints.</para>
		</summary>
		<param name="name">The name of the property to find.</param>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<returns>
			<para>A <see langword="PropertyInfo"/> 
object for the located property that meets the search constraints specified in
<paramref name="bindingAttr"/>, or <see langword="null"/> if the property was not
located.</para>
		</returns>
		<exception cref="System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name.</exception>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetProperty1">
		<summary>
			<para>Retrieves a <see cref="System.Reflection.PropertyInfo"/> object corresponding to a specified property
   with specified search constraints.</para>
		</summary>
		<param name="name">The name of the member to find.</param>
		<param name="bindingAttr">The binding attribute used to control the search.</param>
		<param name="binder">An object that implements <see cref="System.Reflection.Binder"/> , containing properties related to this method.</param>
		<param name="returnType">The type of the property.</param>
		<param name="types">An array used to choose among overloaded methods with the same name.</param>
		<param name="modifiers">An array used to choose the parameter modifiers.</param>
		<returns>
			<para>A <see cref="System.Reflection.PropertyInfo"/> object for the
   located property, if a property with the specified name was located in this
   reflection object, or <see langword="null"/> if the property was not located.</para>
		</returns>
		<remarks>
			<para>This method retrieves 
      a <see langword="PropertyInfo"/> object corresponding to
      a specified property under specified search constraints. A type array is used
      to choose from among overloaded methods.</para>
		</remarks>
		<seealso cref="System.Reflection.ParameterModifier"/>
		<seealso cref="System.Type"/>
		<seealso cref="System.Reflection.Binder"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetProperties">
		<summary>
			<para>
       Retrieves an array of <see cref="System.Reflection.PropertyInfo"/>
       objects corresponding
       to all public properties or to all properties of the current class.
    </para>
		</summary>
		<param name="bindingAttr">
    The binding attribute used to control the search.
 </param>
		<returns>
			<para>
       An array of <see langword="PropertyInfo"/>
       objects
       for all the properties defined on the reflection object.
    </para>
		</returns>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetMembers">
		<summary>
			<para>Retrieves an array of <see cref="System.Reflection.MemberInfo"/> objects corresponding
    either to all public members or to all members of the current class.</para>
		</summary>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<returns>
			<para>An array of <see langword="MemberInfo"/>
 objects containing all the
 member information for this reflection object.</para>
		</returns>
		<remarks>
			<para>This method retrieves an array of <see cref="System.Reflection.MemberInfo"/> objects by using the
    binding attribute that corresponds either to all public members or to all
    members of the current class. It returns an array of all of the members defined
    for this object.</para>
		</remarks>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.UnderlyingSystemType">
		<summary>
			<para> Gets the underlying type that represents the <see langword="IReflect"/>
object.</para>
		</summary>
		<value>
			<para>The underlying type that represents the 
   <see langword="IReflect"/> object.</para>
		</value>
		<seealso cref="System.Object"/>
	</doc>
	<doc for="IReflect.GetMethods">
		<summary>
			<para> Retrieves an array of <see cref="System.Reflection.MethodInfo"/>
objects with all public methods or
all methods of the current class.</para>
		</summary>
		<param name="bindingAttr">The binding attributes used to control the search. </param>
		<returns>
			<para> An array of <see langword="MethodInfo"/> objects containing all the methods
   defined for this reflection object that meet the search constraints specified in
<paramref name="bindingAttr"/>
.</para>
		</returns>
		<remarks>
			<para> The non-public attribute of <paramref name="bindingAttr "/>is indicated only if public
   methods are returned.
   </para>
		</remarks>
		<seealso cref="System.Reflection.BindingFlags"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.GetMember">
		<summary>
			<para>Retrieves an array of <see cref="System.Reflection.MemberInfo"/> objects corresponding to
   all public members or to all members that match a specified name.</para>
		</summary>
		<param name="name">The name of the member to find.</param>
		<param name="bindingAttr">The binding attributes used to control the search.</param>
		<returns>
			<para>An array of
   <see langword="MemberInfo"/> objects matching the <paramref name="name"/> 
   parameter.</para>
		</returns>
		<remarks>
			<para>The <see langword="GetMember"/> method retrieves an array of <see cref="System.Reflection.MemberInfo"/> objects
   by using the name and binding attribute that correspond to all public members or
   to all members that match a specified name. The case of the specified name is
   observed or ignored, as specified by <see cref="System.Reflection.BindingFlags.IgnoreCase" qualify="true"/>.</para>
		</remarks>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="IReflect.InvokeMember">
		<summary>
			<para>Invokes a specified member.</para>
		</summary>
		<param name="name">The name of the member to find.</param>
		<param name=" invokeAttr">One of the <see langword="BindingFlags"/> invocation attributes. The <paramref name="invokeAttr "/>parameter may be a constructor, method, property, or field. A suitable invocation attribute must be specified. Invoke the default member of a class by passing the empty string ("") as the name of the member.</param>
		<param name=" binder">One of the <see cref="System.Reflection.BindingFlags"/> bit flags. Implements <see cref="System.Reflection.Binder"/> , containing properties related to this method.</param>
		<param name="target">The object on which to invoke the specified member. This parameter is ignored for static members.</param>
		<param name=" args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
		<param name=" modifiers">An array of <see langword="ParameterModifier"/> objects. This array has the same length as the <paramref name="args"/> parameter, representing the invoked member's argument attributes in the metadata. A parameter can have the following attributes: <see langword="pdIn"/>, <see langword="pdOut"/>, <see langword="pdRetval"/>, <see langword="pdOptional"/>, and <see langword="pdHasDefault"/> . These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.</param>
		<param name=" culture">An instance of <see cref="System.Globalization.CultureInfo"/> used to govern the coercion of types. For example, <paramref name="culture"/> converts a <see langword="String"/> that represents 1000 to a <see langword="Double"/> value, since 1000 is represented differently by different cultures. If this parameter is <see langword="null"/>, the <see langword="CultureInfo"/> for the current thread is used.</param>
		<param name="namedParameters">A <see langword="String"/> array of parameters.</param>
		<returns>
			<para>The specified member.</para>
		</returns>
		<exception cref="System.ArgumentException"><paramref name="invokeAttr "/>is <see cref="System.Reflection.BindingFlags.CreateInstance" qualify="true"/> and another bit flag is also set.</exception>
		<exception cref="System.ArgumentException"><paramref name="invokeAttr "/>is not <see cref="System.Reflection.BindingFlags.CreateInstance" qualify="true"/> and <paramref name="name "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException"><paramref name="invokeAttr "/>is not an invocation attribute from <see cref="System.Reflection.BindingFlags"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="invokeAttr "/>specifies both <see langword="get"/> and <see langword="set"/> for a property or field.</exception>
		<exception cref="System.ArgumentException"><paramref name="invokeAttr "/>specifies both a field <see langword="set"/> and an <see langword="Invoke"/> method. <paramref name="args "/>are provided for a field <see langword="get"/> .</exception>
		<exception cref="System.ArgumentException">More than one argument is specified for a field <see langword="set"/> .</exception>
		<exception cref="System.MissingFieldException">The field or property cannot be found.</exception>
		<exception cref="System.MissingMethodException">The method cannot be found.</exception>
		<exception cref="System.Security.SecurityException">A private member is invoked without the necessary <see cref="System.Security.Permissions.ReflectionPermission"/> .</exception>
		<remarks>
			<para>The method
      that is to be invoked must be accessible and provide the most specific match
      with the specified argument list, under the constraints of the specified binder
      and invocation attributes.</para>
			<para> A method is invoked if the number of parameters in the method
      declaration equals the number of arguments in the specified argument list, and
      the type of each argument can be converted by the binder to the type of the
      parameter.</para>
			<note type="note">
      The array of parameter modifiers passed in
      to <see langword="InvokeMember"/>
      must contain a single parameter modifier. Only the
      first parameter modifier is considered when determining which argument needs
      to be passed by reference when exposed to COM.
      
   </note>
			<para> The binder finds all matching methods, in accordance with
      the type of binding requested (<see cref="System.Reflection.BindingFlags.InvokeMethod" qualify="true"/>, <see cref="System.Reflection.IReflect.GetProperties"/> , and so
      on). The set of methods is filtered by the name, number of arguments, and
      a set of search modifiers defined in the binder. After the method is
      selected, it is invoked, and accessibility is checked at that point. The search may
      control which set of methods is searched based upon the accessibility attribute
      associated with the method. <see cref="System.Reflection.Binder.BindToMethod"/> selects
      the method to be invoked. The default binder selects the most specific
      match.</para>
			<para> Access restrictions are ignored for fully
      trusted code. That is, private constructors, methods, fields, and properties can be accessed and
      invoked through reflection whenever the code is fully trusted.</para>
		</remarks>
		<example>
			<para>The following example obtains the value of the <see cref="System.DateTime.Now"/> property.</para>
			<codelink SampleID="Classic IReflect.InvokeMember Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Object"/>
		<seealso cref="System.Reflection.Binder"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
</docs>
