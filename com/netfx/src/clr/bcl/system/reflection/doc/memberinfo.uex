<docs>
	<doc for="MemberInfo.MemberInfo">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.MemberInfo"/>
class.</para>
		</summary>
		<remarks>
			<para>Only a derived class can create this 
   <see langword="MemberInfo"/>
   class.</para>
		</remarks>
	</doc>
	<doc for="MemberInfo.GetCustomAttributes1">
		<summary>
			<para>When overridden in a derived class, returns an array of custom attributes identified by
   <see cref="System.Type"/> 
   .</para>
		</summary>
		<param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
		<returns>
			<para>An array of custom attributes defined on this reflected member,
      or an array with zero (0) elements if no attributes are
      defined.</para>
		</returns>
		<exception cref="System.TypeLoadException">If the custom attribute type can not be loaded.</exception>
	</doc><doc for="MemberInfo">
		<summary>
			<para>Discovers the attributes of a member and provides access
      to member metadata.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para> The <see langword="MemberInfo"/>
class is the abstract base
class of the classes used to obtain information for all members of
a class (constructors, events, fields, methods, and properties).</para>
			<para>This
   class introduces the basic functionality that all members
   provide.</para>
			<note type="inheritinfo">
   When you inherit from <see langword="MemberInfo"/>
   
   , you must override the following members: <see cref="System.Reflection.MemberInfo.GetCustomAttributes"/> and <see cref="System.Reflection.MemberInfo.IsDefined"/>.
</note>
		</remarks>
	</doc><doc for="MemberInfo.ReflectedType">
		<summary>
			<para>Gets the class object that was used to obtain this
      instance of <see langword="MemberInfo"/>
      .</para>
		</summary>
		<value>
			<para>The <see langword="Type"/> object through which this
<see langword="MemberInfo"/> object was obtained.</para>
		</value>
		<remarks>
			<para>The <see langword="ReflectedType"/> property retrieves the <see cref="System.Type"/> object that was used to
   obtain this instance of <see langword="MemberInfo"/>
   . A <see cref="System.Reflection.MemberInfo"/> object represents a member of a particular
   class or interface.</para>
			<para>In order to obtain a <see langword="MethodInfo"/> object:</para>
			<list type="bullet"><item>
					<term>
      The <see langword="Type"/> object that represents the
      class or interface that supports the method is queried. This property holds a
      reference to that <see langword="Type"/> object.</term>
				</item>
				<item>
					<term>
      If the reflected type is the same class as the
      declaring class, the member is defined on the declaring class, not on a base
      class.</term>
				</item>
				<item>
					<term>
						<para>If the <see langword="MemberInfo"/> object is a global member, (that is,
      it was obtained from <see cref="System.Reflection.Module.GetMethods" qualify="true"/>, which returns global methods on a
      module), then the returned <see langword="DeclaringType"/> will be
   <see langword="null"/>
   .</para></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example gets <see langword="ReflectedType"/> property for the
   specified type.</para>
			<codelink SampleID="Classic MemberInfo.ReflectedType Example" SnippetID="1"/>
			<para>This code produces the following output:</para>
			<para> 
Reflection.MemberInfo</para>
			<para>There are 31 members in System.IO.BufferedStream. </para>
			<para>WriteByte reflected type - System.IO.BufferedStream </para>
		</example>
	</doc>
	<doc for="MemberInfo.MemberType">
		<summary>
			<para> Gets the type of this member, such as field, method, and so
      on.</para>
		</summary>
		<value>
			<para>An enumerated value from the
   <see langword="MemberTypes"/>
   class, specifying a constructor, event, field, method, property, type
   information, all, or custom.</para>
		</value>
		<remarks>
			<para>To get the <see langword="MemberType"/>
property, get the class <see cref="System.Type"/>. From the
<see langword="Type"/>
, get the <see cref="System.Reflection.MethodInfo"/> array. From the <see langword="MethodInfo"/>
array, get the <see langword="MemberTypes"/> .</para>
		</remarks>
		<example>
			<para>The following example displays the member name and type of a specified 
      class.</para>
			<codelink SampleID="Classic MemberInfo.MemberType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.MemberTypes"/>
	</doc>
	<doc for="MemberInfo.Name">
		<summary>
			<para>Gets the name of this member.</para>
		</summary>
		<value>
			<para>A <see cref="System.String"/>
containing the name of this member.</para>
		</value>
		<remarks>
			<para> Only the simple
      name is returned, not the fully qualified name. For example, for a member
      System.Reflection.MemberTypes.Field, the Name property would be Field.</para>
			<para>To get the Name property, get the class <see cref="System.Type"/>. From the <see langword="Type"/> , get the <see cref="System.Reflection.MemberInfo"/> array. From a
<see langword="MemberInfo"/> element of the array, obtain the 
<see langword="Name"/> property.</para>
		</remarks>
		<example>
			<para> This example lists the <see langword="Name"/> and
<see langword="DeclaringType"/> property of each member of the 
   specified
   class.</para>
			<codelink SampleID="Classic MemberInfo.Name Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="MemberInfo.DeclaringType">
		<summary>
			<para>Gets the class that declares this member.</para>
		</summary>
		<value>
			<para>The <see langword="Type "/> object for the class that declares this member.</para>
		</value>
		<remarks>
			<para>The <see langword="DeclaringType"/> property retrieves a reference to the
<see cref="System.Type"/> object for the type that declares this member. A member 
   of a class (or interface) is either declared or inherited from a base class (or
   interface). The returned class might not be the same as the <see langword="Type"/>
   
   object used to obtain this <see cref="System.Reflection.MemberInfo"/>
   object.</para>
			<list type="bullet"><item>
					<term>
						<para>If the <see langword="Type"/> object from which this
   <see langword="MemberInfo"/> object was obtained did not declare this member,
      the <see langword="DeclaringType"/> will represent one of its base types.</para></term>
				</item>
				<item>
					<term>
						<para>If the <see langword="MemberInfo"/> object is a global member, (that is,
      it was obtained from <see cref="System.Reflection.Module.GetMethods" qualify="true"/>, which returns global methods on a
      module), then the returned <see langword="DeclaringType"/> will be
   <see langword="null"/> .</para></term>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows how
   <see langword="DeclaringType"/> works with classes and interfaces 
      and retrieves the member names of the <see langword="System.IO.BufferedStream "/>class, along with the
      class in which those members are declared. Also note that when B
      overrides virtual method M from A, it essentially redefines (or redeclares) this
      method. Therefore, B.M's <see langword="MethodInfo"/> reports the declaring type
      as B rather than A, even though A is where this method
      was originally declared.</para>
			<codelink SampleID="Classic MemberInfo.DeclaringType Example" SnippetID="1"/>
			<note type="note">
				<see langword="DeclaringType "/>returns only the member names and the names of
 their declaring types. To return the member names with their prototypes, call
<see langword="MemberInfo.ToString"/>.



</note>
		</example>
	</doc>
	<doc for="MemberInfo.GetCustomAttributes">
		<overload>
			<para> When
      overridden in a derived class, returns all attributes defined on this member.</para>
		</overload>
		<summary>
			<para> When overridden in a derived class, returns an array of all of the custom attributes.</para>
		</summary>
		<param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
		<returns>
			<para> An array of all the custom attributes, or an array with
      zero elements if no attributes are
      defined.</para>
		</returns>
		<example>
			<para>The following example defines a custom attribute and associates the 
      attribute with MyClass.MyMethod, retrieves the attribute at run time,
      and displays the result.</para>
			<codelink SampleID="MemberInfo_GetCustomAttributes1" SnippetID="1"/>
		</example>
		<seealso cref="System.Object"/>
		<seealso cref="System.Reflection.Emit.CustomAttributeBuilder"/>
	</doc>
	<doc for="MemberInfo.IsDefined">
		<summary>
			<para>When overridden in a derived class, indicates whether
      one or more instance of <paramref name="attributeType"/>
      is defined
      on this member.</para>
		</summary>
		<param name="attributeType">The <see langword="Type"/> object to which the custom attributes are applied.</param>
		<param name=" inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
		<returns>
			<para><see langword="true"/> if one or more instance of <paramref name="attributeType"/> is defined on this member; otherwise
<see langword="false"/>.</para>
		</returns>
		<example>
			<para>The following example determines whether the specified
      attribute is defined on the specified member. </para>
			<codelink SampleID="MemberInfo_GetCustomAttribute_IsDefined" SnippetID="1"/>
		</example>
	</doc>
</docs>
