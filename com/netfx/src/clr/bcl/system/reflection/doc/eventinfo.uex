<docs>
	<doc for="EventInfo.Attributes">
		<summary>
			<para>Gets the attributes for
      this event.</para>
		</summary>
		<value>
			<para>The read-only attributes for this
      event.</para>
		</value>
		<remarks>
			<para> The attributes are returned in a 4-byte integer representing
      a bitmap of the attributes set for the event reflected by this instance.</para>
		</remarks>
	</doc>
	<doc for="EventInfo.IsSpecialName">
		<summary>
			<para> Gets a value
      indicating whether the <see langword="EventInfo"/> has a name
      with a special meaning.
      </para>
		</summary>
		<value>
			<para><see langword="true "/> if this event has a special name;
   otherwise, <see langword="false"/>
   .
   </para>
		</value>
		<remarks>
			<para> This property determines whether the event's name has a
      special meaning. Names that begin with or contain an underscore character (_),
      property accessors, and operator overloading methods are examples of names
      that might require special treatment
      by some
      compilers.
      </para>
		</remarks>
		<seealso cref="System.Reflection.EventAttributes"/>
	</doc>
	<doc for="EventInfo.EventInfo">
		<summary>
			<para> Initializes a new instance of the
   <see langword="EventInfo"/>
   class.
   </para>
		</summary>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="EventInfo.GetAddMethod1">
		<summary>
			<para> When overridden in a derived class, retrieves the
   <see langword="MethodInfo "/>object for the <see cref="System.Reflection.EventInfo.AddEventHandler"/>
   
   method
   of
   the
   event, specifying whether to return non-public methods.
   </para>
		</summary>
		<param name="nonPublic"><see langword="true"/> if non-public methods can be returned; otherwise, <see langword="false"/> . </param>
		<returns>
			<para> A <see cref="System.Reflection.MethodInfo"/> object representing the method used to add an event handler delegate to the
   event source.
   </para>
		</returns>
		<exception cref="System.MethodAccessException"><paramref name="nonPublic"/> is <see langword="true"/>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
		<remarks>
			<para> The <see langword="GetAddMethod"/> initializes and adds
   the event subscribe method as a Boolean value. The <see langword="AddEventHandler"/> method is used to add an event-handler delegate to the
   invocation list of an event source.
   </para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning methods that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<example>
			<para> Typically, the method has the following signature:
      </para>
			<para><c>add_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)</c>
			</para>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="EventInfo.GetRemoveMethod">
		<overload>
			<para>Returns the
      method used to remove an event handler delegate
      from the event source.</para>
		</overload>
		<summary>
			<para> Returns the method used
      to
      remove an event handler delegate from
      the event source.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Reflection.MethodInfo"/> object representing the method used to remove
   an event handler
   delegate from the event source.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para>Typically, the method has
      the following signature:</para>
			<para><c>remove_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)</c>
			</para>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="EventInfo.GetRemoveMethod1">
		<summary>
			<para> When overridden in a derived class, retrieves the
   <see langword="MethodInfo"/>
   
   object for removing a method
   of the event, specifying whether to return non-public methods.
   </para>
		</summary>
		<param name="nonPublic"><see langword="true"/> if non-public methods can be returned; otherwise, <see langword="false"/> . </param>
		<returns>
			<para>A <see cref="System.Reflection.MethodInfo"/> object representing the method used to remove an event handler delegate from the event source.</para>
		</returns>
		<exception cref="System.MethodAccessException"><paramref name="nonPublic"/> is <see langword="true"/>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning methods that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<example>
			<para>Typically, the method has
      the following signature:</para>
			<para><c>remove_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)</c>
			</para>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="EventInfo.GetRaiseMethod1">
		<summary>
			<para> When overridden in a derived class, returns the method that is called when the event is raised,
      specifying whether to return non-public methods.</para>
		</summary>
		<param name="nonPublic"><see langword="true"/> if non-public methods can be returned; otherwise, <see langword="false"/> . </param>
		<returns>
			<para>A <see langword="MethodInfo"/>
object that was
called when the event was raised.</para>
		</returns>
		<exception cref="System.MethodAccessException"><paramref name="nonPublic"/> is <see langword="true"/>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning methods that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="EventInfo.RemoveEventHandler">
		<summary>
			<para>Removes an event handler from an event source.</para>
		</summary>
		<param name="target">The event source.</param>
		<param name="handler">The delegate to be disassociated from the events raised by target.</param>
		<exception cref="System.InvalidOperationException">The <see langword="MethodInfo"/> returned by <see langword="GetAddMethod"/> is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException">The handler that was passed in cannot be used. </exception>
		<exception cref="System.Reflection.TargetException"><para>The <paramref name="target"/> parameter is <see langword="null"/> and the event is not static.</para>
			<para>-or-</para>
			<para>The <see cref="System.Reflection.EventInfo"/> is not declared on the target.</para></exception>
		<exception cref="System.MethodAccessException">The caller does not have access permission to the member.</exception>
		<remarks>
			<para> This method attempts to remove the delegate
      that may synchronize this event on the target
      object.</para>
			<para>When an event is raised by target, the method or
      methods encapsulated by <paramref name="handler"/>
      will
      no longer be invoked.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting non-public objects. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<seealso cref="System.Object"/>
		<seealso cref="System.Delegate"/>
		<seealso cref="System.EventHandler"/>
	</doc>
	<doc for="EventInfo">
		<summary>
			<para>Discovers the attributes of an event and
      provides access to event metadata.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>Events are used with delegates. An event listener
      instantiates an event-handler delegate that is invoked whenever the event is
      raised by an event source. In order to connect to the event source, the event
      listener adds this delegate to the invocation list on the source. When the event
      is raised, the invoke method of the event-handler delegate is called. Both
      multicast and single-cast event notifications are supported. The
   <see langword="Add"/> and <see langword="Remove"/> methods,
      as well as the event-handler delegate class associated with an event, must
      be marked in the metadata.</para>
			<para> Delegates are object-oriented
      function pointers. In C or C++, a function pointer is a reference to a
      method. In contrast to the C or C++ function pointer, a delegate contains two
      references: a reference to a method and a reference to an object
      that supports the method. Delegates can invoke a method without knowing the class type that declares
      or inherits the method. Delegates need only know the return type and parameter
      list of the method.</para>
			<para>The event model works equally well for single-cast and multicast delegates.
      When the delegate's invoke method is called, only a single object will have a
      method called on it. A multicast modifier can be applied to a delegate
      declaration, which allows multiple methods to be called when the invoke method of
      the delegate is called.</para>
			<para>Calling <see cref="System.Reflection.ICustomAttributeProvider.GetCustomAttributes" qualify="true"/> on
<see langword="EventInfo"/> when the 
<paramref name="inherit"/> parameter of <see langword="GetCustomAttributes"/> is 
<see langword="true"/> does not walk the type hierarchy. Use <see cref="System.Attribute" qualify="true"/> to inherit 
   custom attributes.</para>
			<note type="inheritinfo">
   When you inherit from
<see langword="EventInfo"/>, you must override the following members: <see cref="System.Reflection.EventInfo.GetAddMethod"/>, <see cref="System.Reflection.EventInfo.GetRemoveMethod"/>, and <see cref="System.Reflection.EventInfo.GetRaiseMethod"/>.
</note>
		</remarks>
		<example>
			<codelink SampleID="type_getevent1" SnippetID="1"/>
		</example>
	</doc>
	<doc for="EventInfo.MemberType">
		<summary>
			<para>Gets the member type of this event.</para>
		</summary>
		<value>
			<para>The <see langword="MemberTypes.Event"/> value. The
   default is 0x02.</para>
		</value>
		<remarks>
			<para>Overrides <see cref="System.Reflection.MemberInfo.MemberType"/>
.</para>
		</remarks>
		<seealso cref="System.Type"/>
	</doc>
	<doc for="EventInfo.GetAddMethod">
		<overload>
			<para> Returns the method used to add
      an event handler delegate to the
      event source.</para>
		</overload>
		<summary>
			<para> Returns the method
      used to
      add an event handler delegate to the event
      source.</para>
		</summary>
		<returns>
			<para> A <see cref="System.Reflection.MethodInfo"/> object representing the method used to add an
   event handler delegate to the event source.
   </para>
		</returns>
		<remarks>
			<para><see langword="GetAddMethod"/> initializes and adds the
   event subscribe method. The <see langword="AddEventHandler"/>
   method is used
   to add an event-handler
   delegate to the invocation list of an
   event source.
   </para>
			<list type="bullet"></list>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<example>
			<para>Typically, the method has the following signature: </para>
			<para><c>add_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)</c>
			</para>
		</example>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="EventInfo.GetRaiseMethod">
		<overload>
			<para> Returns the method that is called when
      the event is raised.</para>
		</overload>
		<summary>
			<para> Returns the method that is called when
      the event is raised.</para>
		</summary>
		<returns>
			<para>The
      method that is called when the event is raised.</para>
		</returns>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<seealso cref="System.Reflection.MethodInfo"/>
	</doc>
	<doc for="EventInfo.AddEventHandler">
		<summary>
			<para> Adds an event handler to an event source.
      </para>
		</summary>
		<param name="target">The event source. </param>
		<param name="handler">Encapsulates a method or methods to be invoked when the event is raised by the target. </param>
		<exception cref="System.InvalidOperationException">The <see langword="MethodInfo"/> returned by <see langword="GetAddMethod"/> is <see langword="null"/> . </exception>
		<exception cref="System.ArgumentException">The handler that was passed in cannot be used. </exception>
		<exception cref="System.MethodAccessException">The caller does not have access permission to the member.</exception>
		<exception cref="System.Reflection.TargetException"><para>The <paramref name="target"/> parameter is <see langword="null"/> and the event is not static.</para>
			<para>-or-</para>
			<para>The <see cref="System.Reflection.EventInfo"/> is not declared on the target.</para></exception>
		<remarks>
			<para> This method attempts to add a delegate to synchronize
      the event on the target object.
      </para>
   Each time the event is raised by the target parameter,
   the method or methods encapsulated by the handler will be invoked.
</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting non-public objects. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<seealso cref="System.Object"/>
		<seealso cref="System.Delegate"/>
		<seealso cref="System.EventHandler"/>
	</doc>
	<doc for="EventInfo.IsMulticast">
		<summary>
			<para> Gets a
      value indicating whether the event
      is multicast.
      </para>
		</summary>
		<value>
			<para><see langword="true "/> if
   the delegate is an instance of a multicast delegate; otherwise,
<see langword="false"/>
.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning properties that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<seealso cref="System.MulticastDelegate"/>
		<seealso cref="System.Type"/>
		<seealso cref="System.EventHandler"/>
	</doc>
	<doc for="EventInfo.EventHandlerType">
		<summary>
			<para>Gets the <see langword="Type"/>
object of the underlying event-handler delegate associated with this event.</para>
		</summary>
		<value>
			<para>A read-only <see langword="Type"/>
object representing the delegate event
handler.</para>
		</value>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<permission cref="System.Security.Permissions.ReflectionPermission">for returning properties that are not public. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.TypeInformation" qualify="true"/></permission>
		<example>
			<codelink SampleID="eventarg" SnippetID="1"/>
		</example>
		<seealso cref="System.Type"/>
		<seealso cref="System.Delegate"/>
		<seealso cref="System.EventHandler"/>
	</doc>
</docs>
