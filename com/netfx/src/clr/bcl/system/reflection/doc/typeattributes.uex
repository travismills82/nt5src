<docs>
	<doc for="TypeAttributes.VisibilityMask">
		<summary>
			<para>Specifies type visibility information.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.NotPublic">
		<summary>
			<para> 
       Specifies that the class is not public.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Public">
		<summary>
			<para> 
       Specifies that the class is public.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.NestedPublic">
		<summary>
			<para> Specifies
       that the class is nested with public visibility.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.NestedPrivate">
		<summary>
			<para> 
       Specifies that the class is nested with private visibility.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.NestedAssembly">
		<summary>
			<para>Specifies that the class is nested with assembly visibility, and is thus accessible
       only by methods within its assembly.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.NestedFamANDAssem">
		<summary>
			<para>Specifies that the class is nested with assembly and family visibility, and is thus accessible
       only by methods lying in the intersection of its family and assembly.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.NestedFamORAssem">
		<summary>
			<para>Specifies that the class is nested with family or 
       assembly visibility, and is thus accessible
       only by methods lying in the union of its family and assembly.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.LayoutMask">
		<summary>
			<para>Specifies class layout information.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.SequentialLayout">
		<summary>
			<para>Specifies that class fields are laid out
       sequentially, in the order that the fields were emitted to the metadata.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.ExplicitLayout">
		<summary>
			<para>Specifies that class fields are laid out at the
       specified offsets.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.ClassSemanticsMask">
		<summary>
			<para>Specifies class semantics information; the current class is contextful (else agile).</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Class">
		<summary>
			<para> Specifies that the type is a class.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Interface">
		<summary>
			<para>Specifies that the type is an interface.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Abstract">
		<summary>
			<para>Specifies that the type is abstract.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Sealed">
		<summary>
			<para>Specifies that the class is concrete
       and cannot be extended.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.SpecialName">
		<summary>
			<para>Specifies that the class is special in a way denoted by the
       name.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Import">
		<summary>
			<para>Specifies that the class or interface is imported from another
       module.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.Serializable">
		<summary>
			<para>Specifies that the class can be serialized.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.AutoLayout">
		<summary>
			<para>Specifies that class fields are automatically laid out by the common language runtime.</para>
		</summary>
	</doc><doc for="TypeAttributes.NestedFamily">
		<summary>
			<para>Specifies that the class is nested with family visibility, and is thus accessible
      only by methods within its own type and any subtypes.</para>
		</summary>
	</doc><doc for="TypeAttributes">
		<summary>
   Specifies type attributes.
</summary>
		<remarks>
			<para>The members of this enumerator class match the CorTypeAttr 
      enumerator as defined in the corhdr.h file.</para>
		</remarks>
	</doc>
	<doc for="TypeAttributes.StringFormatMask">
		<summary>
			<para>Used to retrieve string information for native interoperability.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.AnsiClass">
		<summary>
			<para>LPTSTR is interpreted as ANSI.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.UnicodeClass">
		<summary>
			<para>LPTSTR is interpreted as UNICODE.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.AutoClass">
		<summary>
			<para>LPTSTR is interpreted automatically.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.ReservedMask">
		<summary>
			<para>Attributes reserved for runtime use.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.RTSpecialName">
		<summary>
			<para>Runtime should check name encoding.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.HasSecurity">
		<summary>
			<para>Type has security associate with it.</para>
		</summary>
	</doc>
	<doc for="TypeAttributes.BeforeFieldInit">
		<summary>
			<para> Specifies that calling static methods of the type does not force the system to initialize the type.</para>
		</summary>
	</doc>
</docs>
