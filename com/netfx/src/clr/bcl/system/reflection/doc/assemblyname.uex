<docs>
	<doc for="AssemblyName.OnDeserialization">
		<summary>
			<para>Implements the <see cref="System.Runtime.Serialization.ISerializable"/> interface and is called back by the
    deserialization event when deserialization is complete.</para>
		</summary>
		<param name="sender">The source of the deserialization event.</param>
		<seealso cref="System.Runtime.Serialization.ISerializable"/>
		<seealso cref="System.Reflection.AssemblyName.GetObjectData"/>
	</doc>
	<doc for="AssemblyName.AssemblyName1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyName"/> class with serialized data.</para>
		</summary>
		<param name="info">The object that holds the serialized object data.</param>
		<param name=" context">The contextual information about the source or destination.</param>
	</doc>
	<doc for="AssemblyName.AssemblyName">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Reflection.AssemblyName"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the
   <see cref="System.Reflection.AssemblyName"/> class.</para>
		</summary>
		<remarks>
			<codelink SampleID="AssemblyName_Constructor" SnippetID="1"/>
		</remarks>
	</doc><doc for="AssemblyName.Name">
		<summary>
			<para> Gets or sets the simple,
      unencrypted name of the assembly.</para>
		</summary>
		<value>
			<para>A <see langword="String"/> that is the simple, unencrypted name of
   the assembly.</para>
		</value>
		<remarks>
			<para>Assembly names are limited to the number of characters as defined by
      MAX_PATH. </para>
		</remarks>
		<example>
			<codelink SampleID="AssemblyName_Constructor" SnippetID="2"/>
		</example>
		<seealso topic="cpconSpecifyingFullyQualifiedTypeNames"/>
	</doc><doc for="AssemblyName.Version">
		<summary>
			<para> Gets or sets the major, minor, revision,
      and build numbers of the assembly.</para>
		</summary>
		<value>
			<para>A <see cref="System.Version"/> object representing the major, minor, revision, and build numbers
   of the assembly.</para>
		</value>
		<example>
			<codelink SampleID="AssemblyName_Constructor" SnippetID="3"/>
		</example>
	</doc><doc for="AssemblyName.CultureInfo">
		<summary>
			<para> Gets or sets the culture supported by the
      assembly.</para>
		</summary>
		<value>
			<para>A <see cref="System.Globalization.CultureInfo"/>
object representing the culture supported by the assembly.</para>
		</value>
		<example>
			<codelink SampleID="AssemblyName_CodeBase" SnippetID="2"/>
		</example>
	</doc><doc for="AssemblyName.Flags">
		<summary>
			<para> Gets or sets the attributes of the
      assembly.</para>
		</summary>
		<value>
			<para>An <see langword="AssemblyNameFlags"/> object representing the attributes of the assembly.</para>
		</value>
		<example>
			<codelink SampleID="AssemblyName_KeyPair" SnippetID="4"/>
		</example>
	</doc><doc for="AssemblyName.HashAlgorithm">
		<summary>
			<para> Gets or sets the hash algorithm used by the assembly manifest.</para>
		</summary>
		<value>
			<para>An <see langword="AssemblyHashAlgorithm"/> object representing the hash algorithm used by the assembly manifest.</para>
		</value>
		<example>
			<codelink SampleID="AssemblyName_CodeBase" SnippetID="3"/>
		</example>
	</doc><doc for="AssemblyName.VersionCompatibility">
		<summary>
			<para>Gets or sets the information related to the assembly's
      compatibility with other assemblies.</para>
		</summary>
		<value>
			<para>An <see langword="AssemblyVersionCompatibility"/> object representing information about the
   assembly's compatibility with other assemblies.</para>
		</value>
		<remarks>
			<para><see langword="VersionCompatibility"/> information indicates, for example,
   that the assembly cannot execute side-by-side with other versions due to
   conflicts over a device driver.</para>
			<para>Currently, <see langword="VersionCompatibility"/> always returns
<see langword="SameMachine"/>, and is not used by the loader. This 
property is reserved for a future feature.</para>
		</remarks>
		<example>
			<codelink SampleID="AssemblyName_KeyPair" SnippetID="5"/>
		</example>
	</doc><doc for="AssemblyName.ToString">
		<summary>
			<para>Returns the full name of the assembly, also known as the display name.</para>
		</summary>
		<returns>
			<para>A <see langword="String"/> that is the full name of the
   assembly, or the class name if the full name of the assembly cannot be determined.</para>
		</returns>
		<remarks>
			<para>See the description of <see cref="System.Reflection.AssemblyName"/>
for the format of the returned string.</para>
		</remarks>
		<example>
			<codelink SampleID="AssemblyName_GetAssemblyName" SnippetID="2"/>
		</example>
	</doc><doc for="AssemblyName.GetPublicKey">
		<summary>
			<para> Gets the public key of the assembly.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="byte"/> containing the public key of the
   assembly.</para>
		</returns>
		<example>
			<codelink SampleID="AssemblyName_KeyPair" SnippetID="2"/>
		</example>
	</doc>
	<doc for="AssemblyName.SetPublicKey">
		<summary>
			<para> Sets the public key identifying the assembly.</para>
		</summary>
		<param name="publicKey"> A byte array containing the public key of the assembly.</param>
		<example>
			<codelink SampleID="AssemblyName_SetPublicKey" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AssemblyName.KeyPair">
		<summary>
			<para> Gets or sets the public and private cryptographic key pair generated by
      the public key or public key token of the assembly.</para>
		</summary>
		<value>
			<para>A <see langword="StrongNameKeyPair"/> 
object containing the public and private cryptographic key pair generated by the
public key or public key token of the assembly.</para>
		</value>
		<remarks>
			<para>When the runtime loads an assembly, it does not set the
   <see langword="AssemblyName.KeyPair"/> property. The getter for the property is
      only useful if the user set the property after the assembly was loaded and wants
      to subsequently retrieve the property.</para>
		</remarks>
		<example>
			<codelink SampleID="AssemblyName_KeyPair" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AssemblyName">
		<summary>
			<para> Describes an assembly's unique identity in
      full.</para>
		</summary>
		<remarks>
			<para>The assembly cache manager uses
   <see langword="AssemblyName"/> objects for
      binding and retrieving information about an assembly.
      An assembly's identity consists of a simple name, a version number, a cryptographic
      key pair, and a supported culture. The simple name is the
      unencrypted name, as distinguished from the strong name.
      The strong name is an assembly name secured with a
      public and private cryptographic key pair.</para>
			<para>All compilers that support the common language runtime will emit the simple
      name of a nested class, and reflection constructs a mangled name when queried,
      in accordance with the following conventions.</para>
			<list type="table">
				<listheader>
					<term>Delimiter</term>
					<description>Meaning</description>
				</listheader>
				<item>
					<term> Backslash (\)</term>
					<description>Escape character.</description>
				</item>
				<item>
					<term> Comma (,)</term>
					<description>Precedes the Assembly name.</description>
				</item>
				<item>
					<term> Plus sign (+)</term>
					<description>Precedes a nested class.</description>
				</item>
				<item>
					<term> Period (.)</term>
					<description>Denotes namespace identifiers. </description>
				</item>
			</list>
			<para>For example, the fully qualified name for a class might look like this: </para>
			<para>TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly </para>
			<para>If the namespace were TopNamespace.Sub+Namespace, then the string would have
      to precede the plus sign (+) with an escape character (\) to prevent it from
      being interpreted as a nesting separator. Reflection emits this string as
      follows:</para>
			<para>TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly</para>
			<para>A "++" becomes "\+\+", and a "\" becomes "\\".</para>
			<para>This qualified name can be persisted and later used to load the <see cref="System.Type"/>. To search for and
   load a <see cref="System.Type"/>, use
<see cref="System.Type.GetType"/> 
either with the type name only or with the assembly qualified type name. <see cref="System.Type.GetType"/> with the
type name only will look for the <see cref="System.Type"/> in the caller's assembly and then in the System
assembly. <see cref="System.Type.GetType"/> with the assembly qualified type name will look for
the <see cref="System.Type"/> in any
assembly.</para>
			<para>Type names may include trailing characters that denote additional information
   about the type, such as whether the type is a reference type, a pointer type or
   an array type. To retrieve the type name without these trailing characters, use
<c>t.GetElementType().ToString()</c>, where <paramref name="t"/> is the type.</para>
			<para>Spaces are relevant in all type name components except the assembly name. In
   the assembly name, spaces before the ',' separator are relevant, but spaces
   after the ',' separator are ignored.</para>
			<para>A fully specified <see langword="AssemblyName"/> must have, in this order, the name,
culture, public key or public key token, major version, minor version, build number, and revision
number parameters. The last four are packaged in the <see cref="System.Version"/> type. However, an <see langword="AssemblyName"/>
may specify a partial query when an insufficient number
of parameters is supplied to explicitly determine a unique assembly. The
assembly cache manager returns the first assembly that matches the specified
<see langword="AssemblyName"/> . The parameter 
order for partial assembly name references must be the order specified above.
For example, you may specify and match on the name, culture, and public key or public key token with
the version parameters omitted, but you may not match on the name and
public key or public key token, omitting both the culture and the version. When used for binding,
the name is the minimum requirement.</para>
			<para>To create a simple name, create an
<see langword="AssemblyName"/> object using the default constructor and set the
<see cref="System.Reflection.AssemblyName.Name"/>
. The other properties are
optional.</para>
			<para>To create a full strong name, create an
<see langword="AssemblyName"/> object using the default constructor and set
   the <see cref="System.Reflection.AssemblyName.Name"/> and <see cref="System.Reflection.AssemblyName.KeyPair"/>. The
   other properties are optional. Use <see cref="System.Reflection.AssemblyName.SetPublicKey"/> and <see cref="System.Reflection.AssemblyName.SetPublicKeyToken"/>
   to set the
   public key and the strong name. The strong name
   signing always uses the <see cref="System.Security.Cryptography.SHA1"/>
   hash algorithm.</para>
			<para>For a partially specified strong name, create an
<see langword="AssemblyName"/> object using the default constructor 
   and set the name and public key. The other properties are optional. An assembly
   created using such an <see langword="AssemblyName"/>
   
   can be signed later using the Assembly Linker (Al.exe).</para>
			<para>It is possible to specify a public key
   and a <see langword="KeyPair"/> with inconsistent values. This can be useful
   in developer scenarios. In this case, the public key retrieved with <see cref="System.Reflection.AssemblyName.GetPublicKey"/> specifies the
   correct public key, while the <see langword="KeyPair"/> specifies the public and
   private keys used during development. When the runtime detects a mismatch
   between the <see langword="KeyPair"/> and the public key, it looks up in
   the registry the correct key that matches the public key.</para>
			<para>The format of the display name of an
<see langword="AssemblyName"/> is a comma-delimited
   Unicode string that begins with the name, as follows:</para>
			<c>
   Name &lt;,Culture =
   CultureInfo&gt; &lt;,Version =
   Major.Minor.Build.Revision&gt; &lt;, StrongName&gt;
   &lt;,PublicKeyToken&gt; '\0'
</c>
			<para><c>Name</c>
is the textual name of the assembly. <c>CultureInfo</c> is the RFC1766-format-defined culture. <c>Major</c>, <c>Minor</c>, <c>Build</c>, and <c>Revision</c> are the major version, minor version, build number, and
revision number of the assembly. <c>StrongName</c>
is the hexadecimal-encoded low-order 64 bits of the hash value of the
public key generated using the SHA-1 hashing algorithm and the public key
specified by <see langword="SetPublicKey"/>. <c>PublicKeyToken</c> is
the hexadecimal-encoded public key specified by <see langword="SetPublicKey"/>
.</para>
			<para>Quoted values are optional. Hexadecimal encoding is defined as
   the conversion of each byte of a binary object to two hexadecimal characters,
   progressing from least to most significant byte. Additional display values will
   be added as deemed necessary.</para>
			<para>If the full public key is known, then PublicKey may be
   substituted for StrongName.</para>
			<para>Also note that except for <c>Name</c>, which must come first, the lexical order of
parameters is unimportant. However, any parameter (<c>Version</c>, <c>Culture</c>, <c>StrongName</c> or
<c>PublicKey</c> 
) not specifically set is considered to be omitted, and the
<see langword="AssemblyName"/> is then considered partial. When specifying partial information,
Name parameters must be specified in the order described above.</para>
			<para>When supplying a display name, the convention <c>StrongName =null</c> or <c>PublicKey= null</c> indicates that binding and matching against a simply named assembly is
required. Additionally, the convention <c> Culture= ""</c>
(double quote representing
an empty string) indicates matching against the default culture.</para>
			<para> The
   following code example shows
   an <see langword=" AssemblyName"/> for a simply named assembly with
   default culture.</para>
			<para><c>com.microsoft.crypto,
   Culture=""</c></para>
			<para>The following code example shows a fully specified reference for a strongly
   named assembly with culture "en". </para>
			<para><c>com.microsoft.crypto, Culture=en, PublicKeyToken=a5d015c7d5a0b012, Version=1.0.0.0</c></para>
			<para>The following code examples each show a partially specified
<see langword="AssemblyName"/>, which can be satisfied by either a strong or a 
   simply named assembly. </para>
			<para><c>com.microsoft.crypto</c></para>
			<para><c>com.microsoft.crypto, Culture=""</c></para>
			<para><c>com.microsoft.crypto, Culture=en</c></para>
			<para>The following code examples each show a partially specified
<see langword="AssemblyName"/>, which must be satisfied by a simply named 
   assembly. </para>
			<para><c>com.microsoft.crypto, Culture="", PublicKeyToken=null</c></para>
			<para><c>com.microsoft.crypto, Culture=en, PublicKeyToken=null</c></para>
			<para>The following code examples each show a partially specified
<see langword="AssemblyName"/>, which must be satisfied by a strongly named 
   assembly. </para>
			<para><c>com.microsoft.crypto, Culture="", PublicKeyToken=a5d015c7d5a0b012</c></para>
			<para><c>com.microsoft.crypto, Culture=en, PublicKeyToken=a5d015c7d5a0b012, Version=1.0.0.0</c></para>
		</remarks>
		<seealso cref="System.Version"/>
		<seealso cref="System.Reflection.AssemblyName.GetPublicKey"/>
		<seealso cref="System.Reflection.AssemblyName.GetPublicKeyToken"/>
		<seealso cref="System.Reflection.AssemblyName.SetPublicKey"/>
		<seealso cref="System.Reflection.AssemblyName.SetPublicKeyToken"/>
		<seealso cref="System.Type.FullName"/>
		<seealso cref="System.Type.GetType"/>
		<seealso cref="System.Type.AssemblyQualifiedName"/>
		<seealso topic="cpconSpecifyingFullyQualifiedTypeNames"/>
	</doc>
	<doc for="AssemblyName.Clone">
		<summary>
			<para>Makes a copy of this <see langword="AssemblyName"/> object.</para>
		</summary>
		<returns>
			<para>An object that is a copy of this
   <see langword="AssemblyName"/> object.</para>
		</returns>
		<remarks>
			<para>A new object is created, identical to the original.</para>
		</remarks>
	</doc>
	<doc for="AssemblyName.FullName">
		<summary>
			<para> Gets the full name of the assembly, also known as the display name.</para>
		</summary>
		<value>
			<para>A string that is the full name of the assembly, also known as the display name.</para>
		</value>
		<example>
			<codelink SampleID="AssemblyName_CodeBase" SnippetID="4"/>
		</example>
		<seealso topic="cpconSpecifyingFullyQualifiedTypeNames"/>
	</doc>
	<doc for="AssemblyName.GetObjectData">
		<summary>
			<para>Gets serialization information with all of the data needed to recreate
      an instance of this <see langword="AssemblyName"/>.</para>
		</summary>
		<param name="info">The object to be populated with serialization information.</param>
		<param name=" context">The destination context of the serialization.</param>
		<exception cref="System.ArgumentNullException"><paramref name="info "/>is <see langword="null"/>.</exception>
	</doc>
	<doc for="AssemblyName.GetPublicKeyToken">
		<summary>
			<para>Gets the public key token, which is the last 8 bytes of
      the SHA-1 hash of the public key under which the application or assembly is
      signed.</para>
		</summary>
		<returns>
			<para>An array of type <see langword="byte"/> containing the public
   key token.</para>
		</returns>
		<example>
			<codelink SampleID="AssemblyName_KeyPair" SnippetID="3"/>
		</example>
	</doc>
	<doc for="AssemblyName.SetPublicKeyToken">
		<summary>
   Sets the public key, which is the last 8 bytes of the
   SHA-1 hash of the public key under which the application or assembly is signed.
</summary>
		<param name="publicKeyToken">A byte array containing the public key token of the assembly.</param>
		<example>
			<codelink SampleID="AssemblyName_SetPublicKey" SnippetID="2"/>
		</example>
	</doc>
	<doc for="AssemblyName.CodeBase">
		<summary>
			<para> Gets or sets the location
      of the assembly as a URL.</para>
		</summary>
		<value>
			<para>A string that is the URL location of the assembly. If
      the assembly is loaded from a byte array, such as when using the
   <see topic="frlrfSystemReflectionAssemblyClassLoadTopic2" title="Load(Byte[])"/> method, <see langword="CodeBase"/> is an empty string ("").</para>
		</value>
		<example>
			<codelink SampleID="AssemblyName_CodeBase" SnippetID="1"/>
		</example>
	</doc>
	<doc for="AssemblyName.EscapedCodeBase">
		<summary>
			<para>Gets the URI, including escape characters, that represents the codebase. </para>
		</summary>
		<value>
			<para>A URI with escape characters. </para>
		</value>
	</doc>
	<doc for="AssemblyName.GetAssemblyName">
		<summary>
			<para>Gets the <see langword="AssemblyName"/> for a given file.</para>
		</summary>
		<param name="assemblyFile">The assembly file for which to get the <see langword="AssemblyName"/> .</param>
		<returns>
			<para>An <see langword="AssemblyName"/> object representing the given
   file.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="assemblyFile"/> is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><paramref name="assemblyFile"/> is empty.</exception>
		<exception cref="System.IO.FileNotFoundException"><paramref name="assemblyFile"/> is not found.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have path discovery permission.</exception>
		<exception cref="System.BadImageFormatException"><paramref name="assemblyFile"/> is not a valid assembly.</exception>
		<remarks>
			<para>This will only work if the file contains an assembly manifest.
      This method causes the file to be opened and closed,
      but the assembly is not added to this domain.</para>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for access to information in the path. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>.</permission>
		<example>
			<codelink SampleID="AssemblyName_GetAssemblyName" SnippetID="1"/>
		</example>
	</doc>
</docs>
