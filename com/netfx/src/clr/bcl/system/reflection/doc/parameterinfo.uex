<docs>
	<doc for="ParameterInfo.ParameterInfo">
		<overload>
			<para>Initializes a new instance of the 
    <see langword="ParameterInfo"/> 
    class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the 
    <see langword="ParameterInfo"/> 
    class.</para>
		</summary>
	</doc>
	<doc for="ParameterInfo.ParameterInfo1">
		<summary>
			<para>Initializes a new instance of the ParameterInfo class with the specified 
       criteria.</para>
		</summary>
		<param name="theClass"> The class that represents the type of the parameter.</param>
		<param name=" name">The name of the parameter</param>
		<param name=" position">Zero-based position of the parameter in the parameter list.</param>
		<param name=" attributes"> The attribute to be associated with a parameter.</param>
	</doc>
	<doc for="ParameterInfo.NameImpl">
		<summary>
			<para>The name of the parameter.</para>
		</summary>
		<remarks>
			<para>This field is intended only for users who are deriving classes
      from <see langword="ParameterInfo"/>
      .</para>
			<para> Typical access to the parameter name is through the <see cref="System.Reflection.ParameterInfo.Name"/>.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.ClassImpl">
		<summary>
			<para>The <see langword="Type"/> of the parameter.</para>
		</summary>
		<remarks>
			<para>This field is intended only for users who are deriving classes
      from <see langword="ParameterInfo"/>.</para>
			<para> Typical access to parameter types is through <see cref="System.Reflection.ParameterInfo.ParameterType"/>.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.PositionImpl">
		<summary>
			<para>The zero-based position of the parameter in the parameter list.</para>
		</summary>
		<remarks>
			<para>This field is intended only for users who are deriving classes
      from <see langword="ParameterInfo"/>.</para>
			<para> Typical access to the
      name of the parameter is through <see cref="System.Reflection.ParameterInfo.Position"/>.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.AttrsImpl">
		<summary>
			<para>The attributes of the parameter.</para>
		</summary>
		<remarks>
			<para>This field is intended only for users who are deriving classes from 
   <see langword="ParameterInfo"/>
   .</para>
			<para> Typical access to parameter attributes is through <see cref="System.Reflection.ParameterInfo.Attributes"/>.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.DefaultValueImpl">
		<summary>
			<para>The default value of the parameter.</para>
		</summary>
		<remarks>
			<para>This field is intended only for users who are deriving classes
      from <see langword="ParameterInfo"/>.</para>
			<para> Typical
      access to the default value of the parameter is through <see cref="System.Reflection.ParameterInfo.DefaultValue"/>.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.Member">
		<summary>
			<para>Gets a value indicating the member in which the
      parameter is implemented.</para>
		</summary>
		<value>
			<para>A <see langword="MemberInfo"/> object.</para>
		</value>
	</doc>
	<doc for="ParameterInfo.GetCustomAttributes1">
		<summary>
			<para>Gets the custom attributes of the specified type defined on this
      parameter.</para>
		</summary>
		<param name="attributeType">The custom attributes identified by type.</param>
		<param name="inherit">This argument is ignored for objects of this type. </param>
		<returns>
			<para>An array of type <see langword="Object "/> containing the custom attributes
   of the specified type.</para>
		</returns>
	</doc>
	<doc for="ParameterInfo.MemberImpl">
		<summary>
			<para>The member in which the field is implemented.</para>
		</summary>
		<remarks>
			<para>This field is intended only for users who are deriving classes from 
   <see langword="ParameterInfo"/> .</para>
			<para>Typical access to the parameter name is through the <see cref="System.Reflection.ParameterInfo.Member"/>.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo">
		<summary>
			<para>Discovers the attributes of a parameter and provides access to parameter
      metadata.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para>Use an instance of
   <see langword="ParameterInfo"/>
   to obtain information about the parameter's
   data type, default value, and so on.</para>
			<para><see cref="System.Reflection.MethodBase.GetParameters"/> returns an array of
<see langword="ParameterInfo"/>
objects representing the
parameters of a method, in order.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.Name">
		<summary>
			<para>Gets
      the name of the parameter.</para>
		</summary>
		<value>
			<para>A <see langword="String"/>
containing the simple name of this
parameter.</para>
		</value>
		<remarks>
			<para>This method utilizes the protected <see cref="Reflection.ParameterInfo.NameImpl"/> method, and depends on an optional metadata
   flag that might not be available in all compilers.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method 
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic ParameterInfo.Name Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ParameterInfo.Position">
		<summary>
			<para>Gets the signature position for the parameter.</para>
		</summary>
		<value>
			<para>An integer representing the position this parameter occupies in the
      parameter list.</para>
		</value>
		<remarks>
			<para>This method utilizes the <see cref="Reflection.ParameterInfo.PositionImpl"/>
method.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method or 
the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<seealso cref="System.Reflection.ParameterInfo.Name"/>
	</doc>
	<doc for="ParameterInfo.IsOut">
		<summary>
			<para>Gets a value
      indicating whether this is an output parameter.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the parameter is an output
   parameter; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This
      method depends on an optional metadata flag. This flag can be inserted by
      compilers, but the compilers are not obligated to do so.</para>
			<para>This method utilizes the <see langword="Out"/> flag of the
<see langword="ParameterAttributes"/> enumerator.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method 
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="Classic ParameterInfo.IsOut Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ParameterInfo.ParameterType">
		<summary>
			<para>Gets the <see langword="Type"/> of this parameter.</para>
		</summary>
		<value>
			<para> The <see langword="Type "/>object that represents the
<see langword="Type"/> 
of this parameter.</para>
		</value>
		<remarks>
			<para>This method depends on an optional metadata and might not be
      available in all compilers.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method 
   or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
   .</para>
		</remarks>
		<example>
			<codelink SampleID="Classic ParameterInfo.ParameterType Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ParameterInfo.Attributes">
		<summary>
			<para>Gets
      the attributes for this parameter.</para>
		</summary>
		<value>
			<para>A <see langword="ParameterAttributes"/> object
   representing the attributes for this parameter.</para>
		</value>
		<remarks>
			<para>This method utilizes the <see cref="Reflection.ParameterInfo.AttrsImpl"/>
method.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="ParameterInfo_Attributes1" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.ParameterAttributes"/>
	</doc><doc for="ParameterInfo.IsIn">
		<summary>
			<para>Gets a value
      indicating whether this is an input parameter.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the parameter is an input parameter;
   otherwise, <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>This
      method depends on an optional metadata flag. This flag can be inserted by
      compilers, but the compilers are not obligated to do so.</para>
			<para>This method utilizes the <see langword="In"/> flag of the
<see langword="ParameterAttributes"/> enumerator.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="ParameterInfo_IsIn_IsOut_IsOptional" SnippetID="1"/>
		</example>
	</doc><doc for="ParameterInfo.IsLcid">
		<summary>
			<para>Gets a value indicating whether this parameter is a
      locale identifier (lcid).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   parameter is a locale identifier;
   otherwise, <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>This
      method depends on an optional metadata flag. This flag can be inserted by
      compilers, but the compilers are not obligated to do so.</para>
			<para>This method utilizes the <see langword="Lcid"/> flag of the
<see langword="ParameterAttributes"/> enumerator.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="ParameterInfo_IsIn_IsOut_IsOptional" SnippetID="1"/>
		</example>
	</doc><doc for="ParameterInfo.IsOptional">
		<summary>
			<para>Gets a value
      indicating whether this parameter is optional.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the parameter
   is optional; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This
      method depends on an optional metadata flag. This flag can be inserted by
      compilers, but the compilers are not obligated to do so.</para>
			<para>This method utilizes the <see langword="Optional"/> flag
   of the <see langword="ParameterAttributes"/>
   enumerator.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method
and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
		<example>
			<codelink SampleID="ParameterInfo_IsIn_IsOut_IsOptional" SnippetID="1"/>
		</example>
	</doc><doc for="ParameterInfo.DefaultValue">
		<summary>
			<para>Gets a value indicating the default value
      if the parameter has a default value.</para>
		</summary>
		<value>
			<para>The default value of the parameter, or <see cref="System.DBNull.Value"/> if
   the parameter has no default value.</para>
		</value>
		<remarks>
			<para>The default value is used when an actual value is not
      specified in the method call. A parameter can have a default value that is
   <see langword="null"/>. This is distinct from the case where
      a default value is not defined.</para>
			<para>This method utilizes the <see cref="Reflection.ParameterInfo.DefaultValueImpl"/>
method.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.IsRetval">
		<summary>
			<para>Gets a value indicating whether this is a
   <see langword="Retval"/>
   parameter.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the
   parameter is a <see langword="Retval"/> ;
   otherwise, <see langword="false"/>
   .</para>
		</value>
		<remarks>
			<para>This
      method depends on an optional metadata flag. This flag can be inserted by
      compilers, but the compilers are not obligated to do so.</para>
			<para>This method utilizes the <see langword="Retval"/> flag of the
<see langword="ParameterAttributes"/> enumerator.</para>
			<para>To get the <see cref="System.Reflection.ParameterInfo"/> array, first get the method
or the constructor and then call <see cref="System.Reflection.MethodBase.GetParameters" qualify="true"/>
.</para>
		</remarks>
	</doc>
	<doc for="ParameterInfo.GetCustomAttributes">
		<overload>
			<para>Gets custom attributes defined on this parameter.</para>
		</overload>
		<summary>
			<para>Gets all the custom attributes defined on this parameter.</para>
		</summary>
		<param name="inherit">This argument is ignored for object of this type. </param>
		<returns>
			<para>An array of type <see langword="Object"/> containing all the custom attributes
   defined on this parameter.</para>
		</returns>
		<example>
			<codelink SampleID="ParameterInfo_GetCustomAttribute_IsDefined" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ParameterInfo.IsDefined">
		<summary>
			<para>Determines if the custom attribute of the specified type
      is defined on this member.</para>
		</summary>
		<param name="attributeType">The <see langword="Type"/> object to search for.</param>
		<param name=" inherit">This argument is ignored for objects of this type.</param>
		<returns>
			<para><see langword="true"/> if one or more instance of <paramref name="attributeType"/> is defined on this member; otherwise,
<see langword="false"/>
.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="attributeType"/> is <see langword="null"/> .</exception>
		<example>
			<codelink SampleID="ParameterInfo_GetCustomAttribute_IsDefined" SnippetID="1"/>
		</example>
	</doc>
</docs>
