<docs>
	<doc for="ConstructorInfo.ConstructorInfo">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Reflection.ConstructorInfo"/>
class.</para>
		</summary>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
	</doc>
	<doc for="ConstructorInfo.Invoke">
		<overload>
			<para>Invokes the constructor reflected by this instance.</para>
		</overload>
		<summary>
			<para> Invokes the constructor reflected by the
      instance that has the specified parameters, providing default values for the parameters not commonly
      used.</para>
		</summary>
		<param name="parameters">An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or <see langword="null"/> , as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null"/>. For value-type elements, this value is 0, 0.0, or <see langword="false"/>, depending on the specific element type.</param>
		<returns>
			<para>An instance of the class associated with the constructor.</para>
		</returns>
		<exception cref="System.MethodAccessException"><para>The attempt to access the constructor fails (that is, the class might be abstract), or the method is a class initializer.</para>
			<para>-or-</para>
			<para>The caller does not have permission to execute the constructor.</para></exception>
		<exception cref="System.ArgumentException">The <paramref name="parameters "/>array does not contain values that match the types accepted by this constructor.</exception>
		<exception cref="System.Reflection.TargetInvocationException">The invoked constructor throws an exception.</exception>
		<exception cref="System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed.</exception>
		<remarks>
			<para>The number, type, and order of elements in the
   <paramref name="parameters "/>array should be identical to the number, type, and order of
      parameters for the constructor reflected by this instance. Before calling the
      constructor, <see langword="Invoke "/>
      ensures that the caller has access permission and verify that the
      parameters are valid.</para>
			<para>Access restrictions are ignored for fully trusted code.
      That is, private constructors, methods, fields, and properties can be accessed
      and invoked using reflection whenever the code is fully trusted.</para>
			<para>This method is a convenience method for the following
      overloaded version, using default values. This method cannot be overridden.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting non-public objects. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
	</doc>
	<doc for="ConstructorInfo.Invoke1">
		<summary>
			<para> When implemented in a derived class,
      invokes the constructor reflected by this
   <see langword="ConstructorInfo "/>with the specified arguments, under the
      constraints of the specified <see langword="Binder"/>
      .</para>
		</summary>
		<param name="invokeAttr">One of the <see langword="BindingFlags"/> values that specifies the type of binding.</param>
		<param name=" binder">A <see langword="Binder"/> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder "/>is <see langword="null"/>, then <see langword="Binder.DefaultBinding"/> is used.</param>
		<param name=" parameters">An array of type <see langword="Object"/> used to match the number, order and type of the parameters for this constructor, under the constraints of <paramref name="binder"/>. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null"/>. For value-type elements, this value is 0, 0.0, or <see langword="false"/>, depending on the specific element type.</param>
		<param name=" culture">A <see cref="System.Globalization.CultureInfo"/> used to govern the coercion of types. If this is <see langword="null"/>, the <see cref="System.Globalization.CultureInfo"/> for the current thread is used.</param>
		<returns>
			<para>An instance of the class associated with the constructor.</para>
		</returns>
		<exception cref="System.MethodAccessException"><para>The attempt to access the constructor fails (that is, the class might be abstract), or the method is a class initializer.</para>
			<para>-or-</para>
			<para>The caller does not have permission to execute the constructor.</para></exception>
		<exception cref="System.ArgumentException">The <paramref name="parameters "/> array does not contain values that match the types accepted by this constructor, under the constraints of the <paramref name="binder"/>.</exception>
		<exception cref="System.Reflection.TargetInvocationException">The invoked constructor throws an exception.</exception>
		<exception cref="System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed.</exception>
		<remarks>
			<para>The number, type, and order of elements in the
   <paramref name="parameters"/>
   array should be identical to the number, type, and order of parameters for the
   constructor reflected by this instance.</para>
			<para>Before calling the constructor, <see langword="Invoke"/>
ensures that the caller has access permission and that the parameters are of the
correct number, order and type.</para>
			<para> Access restrictions are ignored for fully trusted
   code. That is, private constructors, methods, fields, and properties can be
   accessed and invoked using reflection whenever the code is fully trusted.</para>
		</remarks>
		<permission cref="System.Security.Permissions.ReflectionPermission">to enhance security and performance when invoked late-bound through mechanisms such as <see cref="System.Type.InvokeMember" qualify="true"/>. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/>.</permission>
		<permission cref="System.Security.Permissions.ReflectionPermission">for reflecting non-public objects. Associated enumeration: <see cref="System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" qualify="true"/></permission>
		<seealso cref="System.Reflection.Binder"/>
		<seealso cref="System.Reflection.BindingFlags"/>
	</doc>
	<doc for="ConstructorInfo">
		<summary>
			<para>Discovers the attributes of a class constructor and
      provides access to constructor metadata.</para>
		</summary>
		<threadsafe>
			<para>This type is safe for multithreaded operations.</para>
		</threadsafe>
		<remarks>
			<para><see langword="ConstructorInfo"/> is
   used to discover the attributes of a constructor as well as to invoke a
   constructor. Objects are created by calling <see cref="System.Reflection.ConstructorInfo.Invoke"/> on a <see langword="ConstructorInfo"/>
   returned by either the <see cref="System.Type.GetConstructors"/> or <see cref="System.Type.GetConstructor"/>
   method of a <see cref="System.Type"/>
   object.</para>
			<note type="inheritinfo">
   When you inherit from <see langword="ConstructorInfo"/>, you
   must override the following member: <see topic="frlrfSystemReflectionConstructorInfoClassInvokeTopic2" title="Invoke(BindingFlags, Binder, Object, CultureInfo) "/>.
</note>
		</remarks>
		<example>
			<para>The following example uses <see langword="ConstructorInfo"/> with <see cref="System.Type.GetConstructor"/> and 
<see cref="System.Reflection.BindingFlags"/> to find the constructors that match the 
   specified search criteria.</para>
			<codelink SampleID="type_getconstructor3" SnippetID="1"/>
		</example>
	</doc>
	<doc for="ConstructorInfo.ConstructorName">
		<summary>
			<para> Represents the name of the class constructor method as it is stored in metadata. This name is
      always ".ctor". This field is read-only.</para>
		</summary>
	</doc>
	<doc for="ConstructorInfo.TypeConstructorName">
		<summary>
			<para> Represents the name of the type constructor method as
      it is stored in metadata. This name is always ".cctor". This property is
      read-only.</para>
		</summary>
	</doc>
	<doc for="ConstructorInfo.MemberType">
		<summary>
			<para> Specifies the type of member that this instance reflects. This property is read-only.
      </para>
		</summary>
		<value>
			<para> A <see langword="MemberTypes"/> object reflected by
   this
   instance.
   </para>
		</value>
		<example>
			<codelink SampleID="Classic MemberInfo.MemberType Example" SnippetID="1"/>
		</example>
		<seealso cref="System.Reflection.MemberTypes"/>
	</doc>
</docs>
