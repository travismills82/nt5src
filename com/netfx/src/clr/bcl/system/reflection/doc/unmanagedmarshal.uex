<docs>
	<doc for="UnmanagedMarshal.DefineUnmanagedMarshal">
		<summary>
			<para>Specifies a given type that is to be marshaled 
       to unmanaged code.</para>
		</summary>
		<param name="unmanagedType">The unmanaged type to which the type is to be marshaled.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.UnmanagedMarshal"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">The argument is not a simple native type.</exception>
		<remarks>
			<para>The <see langword="DefineUnmanagedMarshal"/> method is not a simple native marshal.</para>
 Only unmanaged marshal constructs can be made using
 these static constructors.
 </remarks>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc>
	<doc for="UnmanagedMarshal.DefineByValArray">
		<summary>
			<para>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</para>
		</summary>
		<param name="elemCount">The number of elements in the fixed-length array.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.UnmanagedMarshal"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">The argument is not a simple native type.</exception>
		<remarks>
			<para>The <see langword="DefineByValArray"/> method is not a simple native
    marshal.</para>
			<para>Only unmanaged marshal constructs can be made using these static
    constructors.</para>
			<para> Marshaling an array is a more complex process than marshaling an
    integer parameter. Array members are copied in a specific order so that the other side
    can reconstruct the array exactly.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc>
	<doc for="UnmanagedMarshal.GetUnmanagedType">
		<summary>
			<para>Indicates an unmanaged type. This property is read-only.</para>
		</summary>
		<value>
			<para>An <see cref="System.Runtime.InteropServices.UnmanagedType"/> object.</para>
		</value>
		<remarks>
			<para>The <see langword="GetUnmanagedType "/> property is an
    accessor function for the native type.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc>
	<doc for="UnmanagedMarshal.DefineByValTStr">
		<summary>
			<para> Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</para>
		</summary>
		<param name="elemCount">The number of elements in the fixed array buffer.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.UnmanagedMarshal"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">The argument is not a simple native type.</exception>
		<remarks>
			<para>The <see langword="DefineByValStr"/> method is not a simple native
   marshal.</para>
			<para>Only unmanaged marshal constructs can be made using these static
   constructors.</para>
			<para> Marshaling an array is a more complex process than marshaling an
   integer parameter. Array members are copied in a specific order so that the other side
   can reconstruct the array exactly.</para>
		</remarks>
		<seealso cref="System.Int32"/>
		<seealso cref="System.Array"/>
		<seealso cref="System.String"/>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc><doc for="UnmanagedMarshal.DefineSafeArray">
		<summary>
			<para>Specifies a <see langword="SafeArray"/> to marshal to unmanaged code.</para>
		</summary>
		<param name="elemType">The base type or the <see langword="UnmanagedType"/> of each element of the array.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.UnmanagedMarshal"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">The argument is not a simple native type.</exception>
		<remarks>
			<para>The <see langword="DefineSafeArray"/> method is not a simple native
   marshal.</para>
			<para>Only unmanaged marshal constructs can be made using these static
   constructors.</para>
			<para> Marshaling an array is a more complex process than marshaling an
   integer parameter. Array members are copied in a specific order so that the other side
   can reconstruct the array exactly.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc><doc for="UnmanagedMarshal.DefineLPArray">
		<summary>
			<para>Specifies an <see langword="LPArray"/> to marshal to 
   unmanaged code. The length of an <see langword="LPArray"/>
   is determined at runtime by the size of the actual marshaled array. </para>
		</summary>
		<param name="elemType">The unmanaged type to which to marshal the array.</param>
		<returns>
			<para>An <see cref="System.Reflection.Emit.UnmanagedMarshal"/> object.</para>
		</returns>
		<exception cref="System.ArgumentException">The argument is not a simple native type.</exception>
		<remarks>
			<para>The <see langword="DefineLPArray"/> method is not a simple native
   marshal.</para>
			<para>Only unmanaged marshal constructs can be made using these static
   constructors.</para>
			<para> Marshaling an array is a more complex process than marshaling an
   integer parameter. Array members are copied in a specific order so that the other side
   can reconstruct the array exactly.</para>
		</remarks>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc><doc for="UnmanagedMarshal.IIDGuid">
		<summary>
			<para>Gets a GUID. This property is read-only.</para>
		</summary>
		<value>
			<para>A <see cref="System.Guid"/> object.</para>
		</value>
		<exception cref="System.ArgumentException">The argument is not a custom marshaler.</exception>
		<remarks>
			<para>This property always
      returns Guid.Empty. This property might be removed in a future release.</para>
		</remarks>
		<seealso cref="System.Int32"/>
		<seealso cref="System.Guid"/>
	</doc><doc for="UnmanagedMarshal.ElementCount">
		<summary>
			<para>Gets a number element. This property is read-only.</para>
		</summary>
		<value>
			<para>An integer indicating the element count.</para>
		</value>
		<exception cref="System.ArgumentException">The argument is not an unmanaged element count.</exception>
		<remarks>
			<para>There is an <see langword="ElementCount "/>only if there is a <see langword="NativeTypeFixedArray"/> 
.</para>
		</remarks>
	</doc><doc for="UnmanagedMarshal.BaseType">
		<summary>
			<para>Gets an unmanaged base type. This property is read-only.</para>
		</summary>
		<value>
			<para>An <see langword="UnmanagedType "/> object.</para>
		</value>
		<exception cref="System.ArgumentException">The unmanaged type is not an <see langword="LPArray"/> or a <see langword="SafeArray"/> .</exception>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
	</doc><doc for="UnmanagedMarshal">
		<summary>
			<para> 
      Represents the class that describes how to
      marshal a field from managed to unmanaged code. This class cannot be inherited.</para>
		</summary>
		<threadsafe>
			<para>Reflection Emit is thread-safe when
      using assemblies that were created with the <see cref="System.AppDomain.DefineDynamicAssembly" qualify="true"/> method with the Boolean parameter
   <paramref name="isSynchronized"/> set to <see langword="true"/>.</para>
		</threadsafe>
		<remarks>
			<para>Marshaling is the process of packaging and unpackaging parameters so remote
      procedure calls can occur. During marshaling, a field might undergo a format
      conversion when the format of the managed type is different from the format of
      the corresponding unmanaged type. For example, you might want to
      marshal a <see langword="String"/> type as an unmanaged BSTR. Some format
      conversions are handled automatically by the runtime. To override the default
      behavior, you must use the <see langword="UnmanagedMarshal"/> class to define the
      format conversion.</para>
		</remarks>
		<seealso cref="System.Type"/>
		<seealso cref="System.Runtime.InteropServices.UnmanagedType"/>
		<seealso cref="System.Guid"/>
	</doc></docs>
