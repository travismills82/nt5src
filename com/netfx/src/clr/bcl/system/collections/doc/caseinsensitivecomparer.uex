<docs>
    <doc for="CaseInsensitiveComparer">
        <summary>
            <para>Compares two objects for equivalence, ignoring the case of strings.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.CaseInsensitiveComparer" /> implements the <see cref="System.Collections.IComparer" /> interface supporting case-insensitive comparisons on strings,
   just as <see cref="System.Collections.CaseInsensitiveHashCodeProvider" /> implements the <see cref="System.Collections.IHashCodeProvider" /> interface supporting case-insensitive comparisons on strings.</para>
            <para>The <see cref="System.Collections.Comparer" /> class is the default implementation of the <see cref="System.Collections.IComparer" /> interface
and performs case-sensitive string comparisons.</para>
            <para>The objects used as keys by a <see cref="System.Collections.Hashtable" /> are required to implement or inherit the 
<see cref="System.Object.GetHashCode" qualify="true" /> method (or 
the <see cref="System.Collections.IHashCodeProvider" /> interface) and the <see cref="System.Object.Equals" qualify="true" /> method (or the <see cref="System.Collections.IComparer" />
interface). The implementation of both methods or interfaces must handle
case sensitivity the same way; otherwise, the <see cref="System.Collections.Hashtable" /> might behave incorrectly. For example, when
creating a <see cref="System.Collections.Hashtable" />, you must use this class with the <see cref="System.Collections.CaseInsensitiveHashCodeProvider" /> class or any
case-insensitive <see cref="System.Collections.IHashCodeProvider" /> implementation.</para>
            <para>String comparisons might have different results depending on the culture.
   For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.Comparer" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso cref="System.Threading.Thread.CurrentCulture" qualify="true" />
        <seealso cref="System.Globalization.CultureInfo" qualify="true" />
        <seealso cref="System.Collections.CaseInsensitiveHashCodeProvider" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="CaseInsensitiveComparer.CaseInsensitiveComparer">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.CaseInsensitiveComparer" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.CaseInsensitiveComparer" /> class
   using the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread.</para>
        </summary>
        <remarks>
            <para>Comparison procedures use the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread
 to determine the sort order and casing rules.
 String comparisons might have different results depending on the culture.
 For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.Threading.Thread.CurrentCulture" qualify="true" />
        <seealso cref="System.Globalization.CultureInfo" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="CaseInsensitiveComparer.CaseInsensitiveComparer1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.CaseInsensitiveComparer" /> class
   using the specified <see cref="System.Globalization.CultureInfo" qualify="true" />.</para>
        </summary>
        <param name="culture">The <see cref="System.Globalization.CultureInfo" qualify="true" /> to use for the new <see cref="System.Collections.CaseInsensitiveComparer" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="culture" /> is <see langword="null" />.</exception>
        <remarks>
            <para>Comparison procedures use the specified <see cref="System.Globalization.CultureInfo" qualify="true" />
 to determine the sort order and casing rules.
 String comparisons might have different results depending on the culture.
 For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.Globalization.CultureInfo" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="CaseInsensitiveComparer.Default">
        <summary>
            <para>Gets an instance of <see cref="System.Collections.CaseInsensitiveComparer" />
 that is associated with the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread
 and that is always available.</para>
        </summary>
        <value>
            <para>An instance of <see cref="System.Collections.CaseInsensitiveComparer" />
 that is associated with the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread.</para>
        </value>
        <remarks>
            <para>Comparison procedures use the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread
 to determine the sort order and casing rules.
 String comparisons might have different results depending on the culture.
 For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.Threading.Thread.CurrentCulture" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="CaseInsensitiveComparer.DefaultInvariant">
        <summary>
            <para>Gets an instance of <see cref="System.Collections.CaseInsensitiveComparer" />
 that is associated with <see cref="System.Globalization.CultureInfo.InvariantCulture" qualify="true" />
 and that is always available.</para>
        </summary>
        <value>
            <para>An instance of <see cref="System.Collections.CaseInsensitiveComparer" />
 that is associated with <see cref="System.Globalization.CultureInfo.InvariantCulture" qualify="true" />.</para>
        </value>
        <remarks>
            <para>Comparison procedures use the <see cref="System.Globalization.CultureInfo.InvariantCulture" qualify="true" />
 to determine the sort order and casing rules.
 String comparisons might have different results depending on the culture.
 For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.Globalization.CultureInfo.InvariantCulture" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="CaseInsensitiveComparer.Compare">
        <summary>
            <para>Performs a case-insensitive comparison of two objects of the same type
      and returns a value indicating whether one is less than, equal to or greater than the other.</para>
        </summary>
        <param name="a">The first object to compare.</param>
        <param name="b">The second object to compare.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> Less than zero</term>
                    <description>
                        <paramref name="a" /> is less than <paramref name="b" />, with casing ignored.</description>
                </item>
                <item>
                    <term> Zero</term>
                    <description>
                        <paramref name="a" /> equals <paramref name="b" />, with casing ignored.</description>
                </item>
                <item>
                    <term> Greater than zero</term>
                    <description>
                        <paramref name="a" /> is greater than <paramref name="b" />, with casing ignored.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentException"><para>Neither <paramref name="a" /> nor <paramref name="b" /> implements the <see cref="System.IComparable" /> interface.</para><para>-or-</para>
            <para><paramref name="a" /> and <paramref name="b" /> are of different types.</para></exception>
        <remarks>
            <para>If <paramref name="a" /> and <paramref name="b" /> are both strings,
 this method uses <see cref="System.Globalization.CompareInfo.Compare" qualify="true" /> to compare the strings with the casing ignored;
 otherwise, it uses the <see cref="System.IComparable" /> implementation of either object.
 That is, if <paramref name="a" /> implements <see cref="System.IComparable" />,
 then this method returns the result of <paramref name="a" />.<see langword="CompareTo" />(<paramref name="b" /> );
 otherwise, if <paramref name="b" /> implements <see cref="System.IComparable" />,
 then it returns the negated result of <paramref name="b" />.<see langword="CompareTo" />(<paramref name="a" /> ).</para>
            <para>Comparing <see langword="null" /> with any type is allowed
and does not generate an exception when using <see cref="System.IComparable" />.
When sorting, <see langword="null" /> is considered to be less than any other object.</para>
            <para>String comparisons might have different results depending on the culture.
   For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.IComparable" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso cref="System.Threading.Thread.CurrentCulture" qualify="true" />
        <seealso cref="System.Globalization.CultureInfo" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc>
</docs>
