<docs>
    <doc for="Stack">
        <summary>
            <para> Represents a simple last-in-first-out collection of objects.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
   Instance members are not guaranteed to be thread-safe.</para>
            <para>To guarantee the thread safety of the <see cref="System.Collections.Stack" />,
all operations must be done through the wrapper returned by the <see cref="System.Collections.Stack.Synchronized" /> method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para><see cref="System.Collections.Stack" /> is implemented as a circular buffer.</para>
            <para>If <see cref="System.Collections.Stack.Count" /> is less than the capacity of the stack,
<see cref="System.Collections.Stack.Push" /> is an O(1) operation. If the capacity
needs to be increased to accommodate the new element, <see cref="System.Collections.Stack.Push" />
becomes an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Stack.Count" />.
<see cref="System.Collections.Stack.Pop" /> is an O(1) operation.</para>
            <para><see cref="System.Collections.Stack" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
        </remarks>
        <example>
            <para>The following example shows how to create and add values to a <see cref="System.Collections.Stack" /> and
   how to print out its values.</para>
            <codelink SampleID="Classic Stack Example" SnippetID="1" />
        </example>
    </doc><doc for="Stack.Stack">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.Stack" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Stack" /> class 
    that is empty and has the default initial capacity.</para>
        </summary>
        <remarks>
            <para>The initial capacity is the starting capacity of the new 
    <see cref="System.Collections.Stack" />. The default initial capacity for a <see cref="System.Collections.Stack" /> is 10.</para>
            <para>If the number of elements added to the stack reaches the current capacity, the capacity is automatically doubled.</para>
        </remarks>
    </doc><doc for="Stack.Stack1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Stack" /> class that is empty and 
    has the specified initial capacity or the default initial capacity, whichever is greater.</para>
        </summary>
        <param name="initialCapacity">The initial number of elements that the <see cref="System.Collections.Stack" /> can contain.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="initialCapacity" /> is less than zero.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new 
    <see cref="System.Collections.Stack" />. The default initial capacity for a 
    <see cref="System.Collections.Stack" /> is 10.</para>
            <para>If the number of elements added to the stack reaches the current capacity, the capacity is automatically doubled.
    Therefore, if the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <see cref="System.Collections.Stack" />.</para>
        </remarks>
    </doc><doc for="Stack.Stack2">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Stack" /> class that contains 
    elements copied from the specified collection and has the same initial
    capacity as the number of elements copied.</para>
        </summary>
        <param name="col">The <see cref="System.Collections.ICollection" /> to copy elements from.</param>
        <exception cref="System.ArgumentNullException"><paramref name="col" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new 
    <see cref="System.Collections.Stack" />. 
    If the number of elements added to the stack reaches the current capacity, the capacity is automatically doubled.</para>
            <para>The elements are copied onto the <see cref="System.Collections.Stack" /> in the same order they are
    read by the <see cref="System.Collections.IEnumerator" /> of the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="Stack.Count">
        <summary>
            <para>Gets the number of elements contained in the <see cref="System.Collections.Stack" />.
    </para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.Stack" />.
    </para>
        </value>
    </doc><doc for="Stack.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.Stack" />
is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.Stack" /> is
 synchronized (thread-safe); otherwise, <see langword="false" />. The
 default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.Stack" />,
 all operations must be done through the wrapper returned by the <see cref="System.Collections.Stack.Synchronized" />
 method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Stack.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">Stack myCollection = new Stack();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New Stack()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize a <see cref="System.Collections.Stack" />,
 determine if a <see cref="System.Collections.Stack" /> is synchronized and use a synchronized
<see cref="System.Collections.Stack" />.</para>
            <codelink SampleID="Classic Stack.IsSynchronized Example" SnippetID="1" />
        </example>
    </doc><doc for="Stack.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to
 the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Object" /> that can be used to synchronize access to the <see cref="System.Collections.Stack" />.</para>
        </value>
        <remarks>
            <para>To create a synchronized version of the <see cref="System.Collections.Stack" />, use the <see cref="System.Collections.Stack.Synchronized" /> method.
 However, derived classes can provide their own synchronized version of the <see cref="System.Collections.Stack" /> using the <see cref="System.Collections.Stack.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.Stack.SyncRoot" /> of the <see cref="System.Collections.Stack" />,
 not directly on the <see cref="System.Collections.Stack" />. This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.Stack" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Stack.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">Stack myCollection = new Stack();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New Stack()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
    </doc><doc for="Stack.Clear">
        <summary>
            <para>Removes all objects from the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.Stack.Count" /> is set to zero.</para>
        </remarks>
        <example>
            <para>The following example shows how to clear the values of the <see cref="System.Collections.Stack" />.</para>
            <codelink SampleID="Classic Stack.Clear Example" SnippetID="1" />
        </example>
    </doc><doc for="Stack.Clone">
        <summary>
            <para>Creates a shallow copy of the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <returns>
            <para>A shallow copy of the <see cref="System.Collections.Stack" />.</para>
        </returns>
        <remarks>
            <para> A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types,
 but it does not copy the objects that the references refer to.
 The references in the new collection point to the same objects that the references in the original collection point to.</para>
            <para>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</para>
        </remarks>
    </doc><doc for="Stack.Contains">
        <summary>
            <para>Determines whether an element is in the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <param name="obj">
            <para>The <see cref="System.Object" /> to locate in the <see cref="System.Collections.Stack" />. The value can be <see langword="null" />.</para>
        </param>
        <returns>
            <para><see langword="true" /> if
<paramref name="obj" /> is found in the <see cref="System.Collections.Stack" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time
      is proportional to <see cref="System.Collections.Stack.Count" />. That is, this method is an
      O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Stack.Count" />.</para>
            <para>This method determines
      equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="Stack.CopyTo">
        <summary>
            <para>Copies the <see cref="System.Collections.Stack" /> to an existing one-dimensional <see cref="System.Array" />, starting at the specified array index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.Stack" />. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.Stack" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.Stack" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The elements are copied onto the array in a last-in-first-out order, similar 
       to the order of the elements returned by a succession of calls to <see cref="System.Collections.Stack.Pop" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy a <see cref="System.Collections.Stack" /> into 
    a one-dimensional <see cref="System.Array" /> instance and into a one-dimensional standard array.</para>
            <codelink SampleID="Classic Stack.CopyTo Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Stack.ToArray" />
    </doc><doc for="Stack.GetEnumerator">
        <summary>
            <para>Returns an <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.Stack" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="Stack.Peek">
        <summary>
            <para>Returns the object at the top of the <see cref="System.Collections.Stack" />
without removing it.</para>
        </summary>
        <returns>
            <para>The <see cref="System.Object" /> at the top of the <see cref="System.Collections.Stack" />.</para>
        </returns>
<exception cref="System.InvalidOperationException">The <see cref="System.Collections.Stack" /> is empty.</exception>
        <remarks>
            <para>This method is similar to the <see cref="System.Collections.Stack.Pop" /> method,
 but <see cref="System.Collections.Stack.Peek" /> does not modify the <see cref="System.Collections.Stack" />.</para>
            <para><see langword="null" /> can be pushed onto the <see cref="System.Collections.Stack" /> as a placeholder, if
needed. To distinguish between a null value and the end of the stack, check the
<see cref="System.Collections.Stack.Count" /> property
or catch the <see cref="System.InvalidOperationException" />, which is thrown when the <see cref="System.Collections.Stack" /> is empty.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.Stack" />,
   remove elements from the <see cref="System.Collections.Stack" /> or just view the element at the top of the
<see cref="System.Collections.Stack" />.</para>
            <codelink SampleID="Classic Stack.Peek Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Stack.Pop" />
        <seealso cref="System.Collections.Stack.Push" />
    </doc><doc for="Stack.Pop">
        <summary>
            <para>Removes and returns the object at the top of the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <returns>
            <para>The <see cref="System.Object" /> removed from the
   top of the <see cref="System.Collections.Stack" />.</para>
        </returns>
<exception cref="System.InvalidOperationException">The <see cref="System.Collections.Stack" /> is empty.</exception>
        <remarks>
            <para>This method is similar to the <see cref="System.Collections.Stack.Peek" /> method,
 but <see cref="System.Collections.Stack.Peek" /> does not modify the <see cref="System.Collections.Stack" />.</para>
            <para><see langword="null" /> can be pushed onto the <see cref="System.Collections.Stack" /> as a placeholder, if
needed. To distinguish between a null value and the end of the stack,
check the <see cref="System.Collections.Stack.Count" /> property
or catch the <see cref="System.InvalidOperationException" />, which is thrown
when the <see cref="System.Collections.Stack" /> is empty.</para>
            <para><see cref="System.Collections.Stack" /> is implemented as a circular buffer.
 <see cref="System.Collections.Stack.Pop" /> is an O(1) operation.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.Stack" />,
   remove elements from the <see cref="System.Collections.Stack" /> or just view the element at the top of the
<see cref="System.Collections.Stack" />.</para>
            <codelink SampleID="Classic Stack.Peek Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Stack.Peek" />
        <seealso cref="System.Collections.Stack.Push" />
    </doc><doc for="Stack.Push">
        <summary>
            <para>Inserts an object at the top of the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <param name="obj">The <see cref="System.Object" /> to push onto the <see cref="System.Collections.Stack" />. The value can be <see langword="null" />.</param>
        <remarks>
            <para><see cref="System.Collections.Stack" /> is implemented as a circular
   buffer.</para>
            <para>If <see cref="System.Collections.Stack.Count" /> is less than the capacity of the stack,
<see cref="System.Collections.Stack.Push" /> is an O(1) operation. If the capacity
needs to be increased to accommodate the new element, <see cref="System.Collections.Stack.Push" />
becomes an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Stack.Count" />. </para>
            <para><see langword="null" /> can be pushed onto the <see cref="System.Collections.Stack" /> as a
placeholder, if needed. It occupies a slot in the stack and is treated like any object.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.Stack" />,
   remove elements from the <see cref="System.Collections.Stack" /> or just view the element at the top of the
<see cref="System.Collections.Stack" />.</para>
            <codelink SampleID="Classic Stack.Peek Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Stack.Peek" />
        <seealso cref="System.Collections.Stack.Pop" />
    </doc><doc for="Stack.Synchronized">
        <summary>
            <para>Returns a synchronized (thread-safe) wrapper for the <see cref="System.Collections.Stack" />.</para>
        </summary>
        <param name="stack">The <see cref="System.Collections.Stack" /> to synchronize.</param>
        <returns>
            <para>A synchronized wrapper around the <see cref="System.Collections.Stack" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="stack" /> is <see langword="null" />.</exception>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.Stack" />, all operations must be done through this
 wrapper.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Stack.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">Stack myCollection = new Stack();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New Stack()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize a <see cref="System.Collections.Stack" />,
 determine if a <see cref="System.Collections.Stack" /> is synchronized and use a synchronized
<see cref="System.Collections.Stack" />.</para>
            <codelink SampleID="Classic Stack.IsSynchronized Example" SnippetID="1" />
        </example>
    </doc><doc for="Stack.ToArray">
        <summary>
            <para>Copies the <see cref="System.Collections.Stack" /> to a new array.</para>
        </summary>
        <returns>
            <para>A new array containing copies of the elements of the <see cref="System.Collections.Stack" />.</para>
        </returns>
        <remarks>
            <para>The elements are copied onto the array in a last-in-first-out order, similar 
       to the order of the elements returned by a succession of calls to <see cref="System.Collections.Stack.Pop" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy a <see cref="System.Collections.Stack" /> into 
    a one-dimensional <see cref="System.Array" /> instance and into a one-dimensional standard array.</para>
            <codelink SampleID="Classic Stack.CopyTo Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Stack.CopyTo" />
        <seealso cref="System.Collections.Stack.Pop" />
    </doc>
</docs>
