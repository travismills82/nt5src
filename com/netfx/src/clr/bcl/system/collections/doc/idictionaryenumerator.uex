<docs>
    <doc for="IDictionaryEnumerator">
        <summary>
            <para>Enumerates the elements of a dictionary.</para>
        </summary>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="IDictionaryEnumerator.Key">
        <summary>
            <para>When implemented by a class, gets the key of the current dictionary entry.</para>
        </summary>
        <value>
            <para>The key of the current element of the enumeration.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The <see cref="System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</para><para> -or-</para><para>The dictionary is modified after the <see cref="System.Collections.IDictionaryEnumerator" /> was created.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a <see cref="System.Collections.IEnumerator.Reset" />, <see cref="System.Collections.IEnumerator.MoveNext" /> must be called to advance the 
    enumerator to the first element of the collection before reading the value of
 <see cref="System.Collections.IDictionaryEnumerator.Key" />; otherwise, <see cref="System.Collections.IDictionaryEnumerator.Key" /> is undefined.</para>
            <para><see cref="System.Collections.IDictionaryEnumerator.Key" /> also throws an exception if 
 the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />,
 which indicates the end of the collection.</para>
            <para><see cref="System.Collections.IDictionaryEnumerator.Key" /> does not move the position of 
 the enumerator and consecutive calls to <see cref="System.Collections.IDictionaryEnumerator.Key" /> return
 the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator.Reset" />
        <seealso cref="System.Collections.IEnumerator.MoveNext" />
        <seealso cref="System.Collections.IDictionaryEnumerator.Value" />
        <seealso cref="System.Collections.IDictionaryEnumerator.Entry" />
    </doc><doc for="IDictionaryEnumerator.Value">
        <summary>
            <para>When implemented by a class, gets the value of the current dictionary entry.</para>
        </summary>
        <value>
            <para>The value of the current element of the enumeration.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The <see cref="System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</para><para> -or-</para><para>The dictionary is modified after the <see cref="System.Collections.IDictionaryEnumerator" /> was created.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a <see cref="System.Collections.IEnumerator.Reset" />, <see cref="System.Collections.IEnumerator.MoveNext" /> must be called to advance the 
    enumerator to the first element of the collection before reading the value of
 <see cref="System.Collections.IDictionaryEnumerator.Value" />; otherwise, <see cref="System.Collections.IDictionaryEnumerator.Value" /> is undefined.</para>
            <para><see cref="System.Collections.IDictionaryEnumerator.Value" /> also throws an 
 exception if the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, which indicates the end of the
 collection.</para>
            <para><see cref="System.Collections.IDictionaryEnumerator.Value" /> does not move the 
 position of the enumerator and consecutive calls to <see cref="System.Collections.IDictionaryEnumerator.Value" /> return the same
 object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator.Reset" />
        <seealso cref="System.Collections.IEnumerator.MoveNext" />
        <seealso cref="System.Collections.IDictionaryEnumerator.Key" />
        <seealso cref="System.Collections.IDictionaryEnumerator.Entry" />
    </doc><doc for="IDictionaryEnumerator.Entry">
        <summary>
            <para>When implemented by a class, gets both the key and the value of the current dictionary entry.</para>
        </summary>
        <value>
            <para>A <see cref="System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The <see cref="System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</para><para> -or-</para><para>The dictionary is modified after the <see cref="System.Collections.IDictionaryEnumerator" /> was created.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a <see cref="System.Collections.IEnumerator.Reset" />, <see cref="System.Collections.IEnumerator.MoveNext" /> must be called to advance the 
    enumerator to the first element of the collection before reading the value of
 <see cref="System.Collections.IDictionaryEnumerator.Entry" />; otherwise, <see cref="System.Collections.IDictionaryEnumerator.Entry" /> is undefined.</para>
            <para><see cref="System.Collections.IDictionaryEnumerator.Entry" /> also throws an 
 exception if the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, which indicates the end of the
 collection.</para>
            <para><see cref="System.Collections.IDictionaryEnumerator.Entry" /> does not move the 
 position of the enumerator and consecutive calls to <see cref="System.Collections.IDictionaryEnumerator.Entry" /> return the same
 object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator.Reset" />
        <seealso cref="System.Collections.IEnumerator.MoveNext" />
        <seealso cref="System.Collections.IDictionaryEnumerator.Key" />
        <seealso cref="System.Collections.IDictionaryEnumerator.Value" />
    </doc>
</docs>
