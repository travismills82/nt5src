<docs>
    <doc for="ArrayList">
        <summary>
            <para>Implements the <see cref="System.Collections.IList" />
   interface using an array whose size is dynamically increased as required.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
   Instance members are not guaranteed to be thread-safe.</para>
            <para>An <see cref="System.Collections.ArrayList" /> can safely support multiple readers concurrently, as long as the collection is not modified.
   To guarantee the thread safety of the <see cref="System.Collections.ArrayList" />,
   all operations must be done through the wrapper returned by the <see cref="System.Collections.ArrayList.Synchronized" /> method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>The capacity of an <see cref="System.Collections.ArrayList" /> is the number
   of elements the list can hold. As elements are added to an <see cref="System.Collections.ArrayList" />, the capacity is automatically increased as
   required through reallocation. The capacity can be decreased by
   calling <see cref="System.Collections.ArrayList.TrimToSize" /> or by setting the <see cref="System.Collections.ArrayList.Capacity" />
   property explicitly.</para>
            <para>Indexes in this collection are zero-based.</para>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
        </remarks>
        <example>
            <para>The following example shows how to create and initialize an <see cref="System.Collections.ArrayList" />
   and how to print out its values.</para>
            <codelink SampleID="Classic ArrayList Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IList" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.ArrayList">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.ArrayList" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.ArrayList" /> 
   class that is empty and has the default initial capacity.</para>
        </summary>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.ArrayList" />. The default initial capacity for an <see cref="System.Collections.ArrayList" /> 
 is 16.</para>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.Capacity" />
    </doc><doc for="ArrayList.ArrayList1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.ArrayList" /> 
 class that is empty and has the specified initial capacity.</para>
        </summary>
        <param name="capacity">The number of elements that the new list is initially capable of storing.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than zero.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.ArrayList" />.
       The default initial capacity for an <see cref="System.Collections.ArrayList" /> is 16.
       If the specified initial capacity is zero, the default initial capacity is used.</para>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.
       Therefore, if the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <see cref="System.Collections.ArrayList" />.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.Capacity" />
    </doc><doc for="ArrayList.ArrayList2">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.ArrayList" /> class that contains elements copied from the specified 
    collection and that has the same initial capacity as the number of elements copied.</para>
        </summary>
        <param name="c">The <see cref="System.Collections.ICollection" /> whose elements are copied to the new list.</param>
        <exception cref="System.ArgumentNullException"><paramref name="c" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.ArrayList" />. 
    If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.</para>
            <para>The elements are copied onto the <see cref="System.Collections.ArrayList" /> in the same order they are read by the 
 <see cref="System.Collections.IEnumerator" /> of the <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.ArrayList.Capacity" />
    </doc><doc for="ArrayList.Capacity">
        <summary>
            <para>Gets or sets the number of elements that
       the <see cref="System.Collections.ArrayList" /> can contain.</para>
        </summary>
        <value>
            <para>The number of elements that
       the <see cref="System.Collections.ArrayList" /> can contain.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException"><see cref="System.Collections.ArrayList.Capacity" /> is set to a value that is less than <see cref="System.Collections.ArrayList.Count" />.</exception>
        <remarks>
            <para><see cref="System.Collections.ArrayList.Capacity" />
 is the number of elements that
 the <see cref="System.Collections.ArrayList" /> is capable of
 storing. <see cref="System.Collections.ArrayList.Count" /> is the number
 of elements that are actually in the <see cref="System.Collections.ArrayList" />.</para>
            <para><see cref="System.Collections.ArrayList.Capacity" /> is always greater than or 
 equal to <see cref="System.Collections.ArrayList.Count" />. If <see cref="System.Collections.ArrayList.Count" /> exceeds <see cref="System.Collections.ArrayList.Capacity" />
 while adding elements, the capacity of the list is
 doubled by automatically reallocating the internal array.</para>
            <para>When the value of <see cref="System.Collections.ArrayList.Capacity" /> is set explicitly, the internal 
 array is also reallocated to accommodate the specified capacity.
 If <see cref="System.Collections.ArrayList.Capacity" /> is explicitly set to zero, the
 common language runtime sets it to the default capacity instead. The default capacity is 16.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.Count" />
    </doc><doc for="ArrayList.Count">
        <summary>
            <para>Gets the number of elements actually contained in 
       the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <value>
            <para>The number of elements actually contained in 
       the <see cref="System.Collections.ArrayList" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.ArrayList.Count" />
 is the number of elements that are actually in the <see cref="System.Collections.ArrayList" />. <see cref="System.Collections.ArrayList.Capacity" />
 is the number of elements that the <see cref="System.Collections.ArrayList" /> is capable of storing.</para>
            <para><see cref="System.Collections.ArrayList.Count" /> is always less than or equal to <see cref="System.Collections.ArrayList.Capacity" />. If <see cref="System.Collections.ArrayList.Count" /> exceeds <see cref="System.Collections.ArrayList.Capacity" /> while 
 adding elements, the capacity of the list is doubled
 by automatically reallocating the internal array before copying the
 old elements and adding the new elements.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.Capacity" />
    </doc><doc for="ArrayList.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.ArrayList" /> has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.ArrayList" /> has a fixed size;
   otherwise, <see langword="false" />. The default is <see langword="false" />. </para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
        <example>
            <para>The following example shows how to create a fixed-size wrapper around
      an <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.IsFixedSize Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether
       the <see cref="System.Collections.ArrayList" /> is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.ArrayList" /> is read-only; otherwise, 
 <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
        <example>
            <para>The following example shows how to create a read-only wrapper around 
       an <see cref="System.Collections.ArrayList" /> and how to determine if an <see cref="System.Collections.ArrayList" />
       is read-only.</para>
            <codelink SampleID="Classic ArrayList.ReadOnly1 Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.ReadOnly" />
    </doc><doc for="ArrayList.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to
 the <see cref="System.Collections.ArrayList" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.ArrayList" /> is synchronized
 (thread-safe); otherwise, <see langword="false" />. The default is
 <see langword="false" />.</para>
        </value>
        <remarks>
            <para>To guarantee the thread safety of the <see cref="System.Collections.ArrayList" />,
 all operations must be done through the wrapper returned by the <see cref="System.Collections.ArrayList.Synchronized" /> method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ArrayList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">ArrayList myCollection = new ArrayList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ArrayList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize an <see cref="System.Collections.ArrayList" />,
 determine if an <see cref="System.Collections.ArrayList" /> is synchronized and use a synchronized
 <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.IsSynchronized Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.SyncRoot" />
        <seealso cref="System.Collections.ArrayList.Synchronized" />
    </doc><doc for="ArrayList.SyncRoot">
        <summary>
            <para>Gets an object that can be used to
 synchronize access to the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <value>
            <para>An object that can be used to
 synchronize access to the <see cref="System.Collections.ArrayList" />.</para>
        </value>
        <remarks>
            <para>To create a synchronized version of the <see cref="System.Collections.ArrayList" />, use the <see cref="System.Collections.ArrayList.Synchronized" /> method.
 However, derived classes can provide their own synchronized version of the <see cref="System.Collections.ArrayList" /> using the <see cref="System.Collections.ArrayList.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.ArrayList.SyncRoot" /> of the <see cref="System.Collections.ArrayList" />,
 not directly on the <see cref="System.Collections.ArrayList" />. This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.ArrayList" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ArrayList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">ArrayList myCollection = new ArrayList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ArrayList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.ArrayList.IsSynchronized" />
        <seealso cref="System.Collections.ArrayList.Synchronized" />
    </doc><doc for="ArrayList.this">
        <summary>
            <para>Gets or sets the element at the specified index.</para>
        </summary>
        <param name="index">The zero-based index of the element to get or set.</param>
        <value>
            <para>The element at the specified index.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.ArrayList.Count" />.</para></exception>
<remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
            <para>This property provides the ability to access a specific element in the
   collection by using the following syntax: <c>myCollection[index]</c>.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.Count" />
    </doc><doc for="ArrayList.Adapter">
        <summary>
            <para>Creates an <see cref="System.Collections.ArrayList" />
wrapper for a specific <see cref="System.Collections.IList" />.
</para>
        </summary>
        <param name="list">
   The <see cref="System.Collections.IList" /> to wrap.
   </param>
        <returns>
            <para>The <see cref="System.Collections.ArrayList" />
wrapper around the <see cref="System.Collections.IList" />.
</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />.</exception>
        <remarks>
            <para><see cref="System.Collections.ArrayList.Adapter" /> does not copy the contents of <see cref="System.Collections.IList" />.
   Instead, it only creates an <see cref="System.Collections.ArrayList" /> wrapper around <see cref="System.Collections.IList" />;
   therefore, changes to the <see cref="System.Collections.IList" /> also affect the <see cref="System.Collections.ArrayList" />.
   </para>
            <para>The <see cref="System.Collections.ArrayList" /> class provides generic
<see cref="System.Collections.ArrayList.Reverse" />, <see cref="System.Collections.ArrayList.BinarySearch" /> and <see cref="System.Collections.ArrayList.Sort" /> methods. This wrapper can be a means
to use those methods on <see cref="System.Collections.IList" />; however, performing these generic
operations through the wrapper might be less efficient than operations applied directly
on the <see cref="System.Collections.IList" />.
</para>
        </remarks>
        <seealso cref="System.Collections.IList" />
        <seealso cref="System.Collections.ArrayList.BinarySearch" />
        <seealso cref="System.Collections.ArrayList.Reverse" />
        <seealso cref="System.Collections.ArrayList.Sort" />
    </doc><doc for="ArrayList.Add">
        <summary>
            <para>Adds an object to the end of the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to be added to the end of the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The <see cref="System.Collections.ArrayList" /> index at which the <paramref name="value" /> has
   been added.</para>
        </returns>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
        <remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
            <para>If <see cref="System.Collections.ArrayList.Count" /> already equals <see cref="System.Collections.ArrayList.Capacity" />,
 the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array
 before the new element is added.</para>
            <para>If <see cref="System.Collections.ArrayList.Count" /> is less than <see cref="System.Collections.ArrayList.Capacity" />, this method is an O(1)
operation. If the capacity needs to be increased to accommodate the
new element, this method becomes an O(<paramref name="n" />) operation, where <paramref name="n" /> is
<see cref="System.Collections.ArrayList.Count" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Add Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.AddRange" />
        <seealso cref="System.Collections.ArrayList.Insert" />
        <seealso cref="System.Collections.ArrayList.Remove" />
        <seealso cref="System.Collections.ArrayList.Count" />
    </doc><doc for="ArrayList.AddRange">
        <summary>
            <para>Adds the elements of an <see cref="System.Collections.ICollection" />
to the end of the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="c">The <see cref="System.Collections.ICollection" /> whose elements should be added to the end of the <see cref="System.Collections.ArrayList" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="c" /> is <see langword="null" />.</exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
        <remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
            <para>The order of the elements in the <see cref="System.Collections.ICollection" />
is preserved in the <see cref="System.Collections.ArrayList" />.</para>
            <para>If the new <see cref="System.Collections.ArrayList.Count" />
(the current <see cref="System.Collections.ArrayList.Count" /> plus the size of the collection)
will be greater than <see cref="System.Collections.ArrayList.Capacity" />,
the capacity of the list is either doubled or increased to the new <see cref="System.Collections.ArrayList.Count" />,
whichever is greater.
The internal array is automatically reallocated to accommodate the new elements
and the existing elements are copied to the new array before the new elements are added.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> can accommodate the new elements
without increasing the <see cref="System.Collections.ArrayList.Capacity" />, this method is an
O(<paramref name="n" />) operation, where <paramref name="n" /> is the number of elements to be added.
If the capacity needs to be increased to accommodate the new elements, this
method becomes an O(<paramref name="n" />+<paramref name="m" />) operation, where <paramref name="n" /> is the
number of elements to be added and <paramref name="m" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Add Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.ArrayList.Capacity" />
        <seealso cref="System.Collections.ArrayList.Count" />
        <seealso cref="System.Collections.ArrayList.Add" />
        <seealso cref="System.Collections.ArrayList.InsertRange" />
        <seealso cref="System.Collections.ArrayList.SetRange" />
        <seealso cref="System.Collections.ArrayList.GetRange" />
        <seealso cref="System.Collections.ArrayList.RemoveRange" />
    </doc><doc for="ArrayList.BinarySearch">
        <overload>
            <para>Uses a binary search algorithm to locate a specific element in the sorted <see cref="System.Collections.ArrayList" />
or a portion of it.</para>
        </overload>
        <summary>
            <para>Searches a section of the sorted <see cref="System.Collections.ArrayList" /> for
   an element using the specified comparer and returns the zero-based index of the
   element.</para>
        </summary>
        <param name="index">The zero-based starting index of the range to search.</param>
        <param name="count">The length of the range to search.</param>
        <param name="value">The <see cref="System.Object" /> to locate. The value can be <see langword="null" />.</param>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the default comparer that is the <see cref="System.IComparable" /> implementation of each element.</para>
        </param>
        <returns>
            <para>The zero-based index of <paramref name="value" /> in the sorted <see cref="System.Collections.ArrayList" />,
   if <paramref name="value" /> is found;
   otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value" />
   or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count" />.</para>
        </returns>
        <exception cref="System.ArgumentException">
            <para><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="System.Collections.ArrayList" />.</para><para>-or-</para>
            <para><paramref name="comparer" /> is <see langword="null" /> and neither <paramref name="value" /> nor the elements of <see cref="System.Collections.ArrayList" /> implement the <see cref="System.IComparable" /> interface.</para></exception>
        <exception cref="System.InvalidOperationException">
            <para><paramref name="comparer" /> is <see langword="null" /> and <paramref name="value" /> is not of the same type as the elements of the <see cref="System.Collections.ArrayList" />.</para></exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
<remarks>
            <para>The comparer customizes how the elements are compared.
      For example, you can use a <see cref="System.Collections.CaseInsensitiveComparer" /> instance as the
      comparer to perform case-insensitive string searches.</para>
            <para>If <paramref name="comparer" /> is provided, the elements of
   the <see cref="System.Collections.ArrayList" /> are compared to the specified value using
   the specified <see cref="System.Collections.IComparer" /> implementation. If the
<see cref="System.Collections.ArrayList" /> is not already sorted according to the
   sort order defined by <paramref name="comparer" />, the result might be incorrect.</para>
            <para>If <paramref name="comparer" />
is <see langword="null" />, the comparison is done using the <see cref="System.IComparable" /> implementation provided by
the element itself or by the specified value. If the
<see cref="System.Collections.ArrayList" /> is not already sorted according to the
<see cref="System.IComparable" /> implementation, the result might be incorrect.</para>
            <para> Comparing <see langword="null" /> with any type is allowed and does not generate
an exception when using <see cref="System.IComparable" />. When sorting, <see langword="null" /> is considered to be less than any other
object.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> contains more than one element with the same value,
the method returns only one of the occurrences,
and it might return any one of the occurrences, not necessarily the first one.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> does not contain the
specified value, the method returns a negative integer. You can apply the bitwise complement
operation (~) to this negative integer to get the index of
the first element that is larger than the search value. When inserting the value
into the <see cref="System.Collections.ArrayList" />, this
index should be used as the insertion point to maintain the sort order.</para>
            <para>This method is an O(log<subscript term="2" /><paramref name="n" />) operation, where <paramref name="n" /> is the
number of elements in the range.</para>
        </remarks>
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.IComparable" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.BinarySearch1">
        <summary>
            <para>Searches the entire sorted <see cref="System.Collections.ArrayList" /> for an element using the default comparer and
   returns the zero-based index of the element.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index of <paramref name="value" /> in the sorted <see cref="System.Collections.ArrayList" />,
   if <paramref name="value" /> is found;
   otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value" />
   or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count" />.</para>
        </returns>
        <exception cref="System.ArgumentException"><para> Neither <paramref name="value" /> nor the elements of <see cref="System.Collections.ArrayList" /> implement the <see cref="System.IComparable" /> interface.</para></exception>
        <exception cref="System.InvalidOperationException">
            <para><paramref name="value" /> is not of the same type as the elements of the <see cref="System.Collections.ArrayList" />.</para></exception>
<remarks>
            <para>The <paramref name="value" />
parameter and each element of the
<see cref="System.Collections.ArrayList" /> must implement
the <see cref="System.IComparable" />
interface, which is used for comparisons. If the
<see cref="System.Collections.ArrayList" /> is not already sorted according to the
<see cref="System.IComparable" />
implementation, the result might be incorrect.</para>
            <para>Comparing <see langword="null" /> with any type is allowed and does not
generate an exception when using <see cref="System.IComparable" />. When sorting, <see langword="null" />
is considered to be less than any other object.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> contains more than one element with the same value,
the method returns only one of the occurrences,
and it might return any one of the occurrences, not necessarily the first one.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> does not contain the specified value, the
method returns a negative integer. You can apply the bitwise complement
operation (~) to this negative integer to get the index of the first element that
is larger than the search value. When inserting the value into the <see cref="System.Collections.ArrayList" />,
this index should be used as the insertion point to maintain the sort order.</para>
            <para>This method is an O(log<subscript term="2" /><paramref name="n" />) operation, where <paramref name="n" /> is the number
of elements in the range.</para>
        </remarks>
        <example>
            <para>The following example shows how to use <see cref="System.Collections.ArrayList.BinarySearch" /> to locate a
   specific object in the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.BinarySearch1 Example" SnippetID="1" />
        </example>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.BinarySearch2">
        <summary>
            <para>Searches the entire sorted <see cref="System.Collections.ArrayList" /> for an element using the specified comparer
   and returns the zero-based index of the element.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate. The value can be <see langword="null" />.</param>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the default comparer that is the <see cref="System.IComparable" /> implementation of each element.</para>
        </param>
        <returns>
            <para>The zero-based index of <paramref name="value" /> in the sorted <see cref="System.Collections.ArrayList" />,
   if <paramref name="value" /> is found;
   otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value" />
   or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count" />.</para>
        </returns>
        <exception cref="System.ArgumentException">
            <para><paramref name="comparer" /> is <see langword="null" /> and neither <paramref name="value" /> nor the elements of <see cref="System.Collections.ArrayList" /> implement the <see cref="System.IComparable" /> interface.</para></exception>
        <exception cref="System.InvalidOperationException">
            <para><paramref name="comparer" /> is <see langword="null" /> and <paramref name="value" /> is not of the same type as the elements of the <see cref="System.Collections.ArrayList" />.</para></exception>
<remarks>
            <para>The comparer customizes how the elements are compared.
      For example, you can use a <see cref="System.Collections.CaseInsensitiveComparer" /> instance as the
      comparer to perform case-insensitive string searches.</para>
            <para>If <paramref name="comparer" /> is provided, the
   elements of the <see cref="System.Collections.ArrayList" /> are compared to
   the specified value using the specified <see cref="System.Collections.IComparer" /> implementation. If the
<see cref="System.Collections.ArrayList" /> is not already sorted according to the
   sort order defined by <paramref name="comparer" />, the result might be incorrect.</para>
            <para>If <paramref name="comparer" /> is <see langword="null" />, the comparison is done using the <see cref="System.IComparable" /> implementation provided by
the element itself or by the specified value. If the
<see cref="System.Collections.ArrayList" /> is not already sorted according to the
<see cref="System.IComparable" /> implementation, the result might be incorrect.</para>
            <para>Comparing <see langword="null" /> with any type is allowed and does not
generate an exception when using <see cref="System.IComparable" />. When sorting, <see langword="null" /> is considered to be less than any other
object.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> contains more than one element with the same value,
the method returns only one of the occurrences,
and it might return any one of the occurrences, not necessarily the first one.</para>
            <para>If the <see cref="System.Collections.ArrayList" /> does not contain the specified value, the
method returns a negative integer. You can apply the bitwise complement
operation (~) to this negative integer to get the index of the first element that
is larger than the search value. When inserting the value into the <see cref="System.Collections.ArrayList" />,
this index should be used as the insertion point to maintain the sort order.</para>
            <para>This method is an O(log<subscript term="2" /><paramref name="n" />) operation, where <paramref name="n" /> is the number
of elements in the range.</para>
        </remarks>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.Clear">
        <summary>
            <para>Removes all elements from the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
        <remarks>
            <para><see cref="System.Collections.ArrayList.Count" /> is set to zero. <see cref="System.Collections.ArrayList.Capacity" /> remains unchanged.
    To reset the capacity of the <see cref="System.Collections.ArrayList" />,
    call <see cref="System.Collections.ArrayList.TrimToSize" /> or
    set the <see cref="System.Collections.ArrayList.Capacity" /> property directly. Trimming an empty <see cref="System.Collections.ArrayList" />
    sets the capacity of the <see cref="System.Collections.ArrayList" /> to the default capacity, not zero.</para>
        </remarks>
        <example>
            <para>The following example shows how to trim the unused 
       portions of the <see cref="System.Collections.ArrayList" /> and how to clear the values of the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Clear Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.TrimToSize" />
        <seealso cref="System.Collections.ArrayList.Capacity" />
        <seealso cref="System.Collections.ArrayList.Count" />
    </doc><doc for="ArrayList.Clone">
        <summary>
            <para>Creates a shallow copy of the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <returns>
            <para>A shallow copy of the <see cref="System.Collections.ArrayList" />.</para>
        </returns>
        <remarks>
            <para> A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types,
 but it does not copy the objects that the references refer to.
 The references in the new collection point to the same objects that the references in the original collection point to.</para>
            <para>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</para>
        </remarks>
    </doc><doc for="ArrayList.Contains">
        <summary>
            <para>Determines whether an element is in the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="item">
            <para>The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</para>
        </param>
        <returns>
            <para><see langword="true" /> if <paramref name="item" /> is found in the <see cref="System.Collections.ArrayList" />;
   otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.ArrayList.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.IndexOf" />
        <seealso cref="System.Collections.ArrayList.LastIndexOf" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.CopyTo">
        <overload>
            <para>Copies the <see cref="System.Collections.ArrayList" />
    or a portion of it to a one-dimensional array.</para>
        </overload>
        <summary>
            <para>Copies the entire <see cref="System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the beginning of the target array.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.ArrayList" />. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.ArrayList" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type. </para>
            <para>This method uses <see cref="System.Array.Copy" qualify="true" /> to copy the elements.</para>
            <para>The elements are copied to the <see cref="System.Array" /> in the same order in which the enumerator iterates
    through the <see cref="System.Collections.ArrayList" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy an <see cref="System.Collections.ArrayList" /> 
 into a one-dimensional <see cref="System.Array" qualify="true" />.</para>
            <codelink SampleID="Classic ArrayList.CopyTo Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.CopyTo1">
        <summary>
            <para>Copies the entire <see cref="System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the specified index of the target array.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.ArrayList" />. The <see cref="System.Array" /> must have zero-based indexing. </param>
        <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.ArrayList" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type. </para>
            <para>This method uses <see cref="System.Array.Copy" qualify="true" /> to copy the elements.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy an <see cref="System.Collections.ArrayList" /> 
 into a one-dimensional <see cref="System.Array" qualify="true" />.</para>
            <codelink SampleID="Classic ArrayList.CopyTo1 Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.CopyTo2">
        <summary>
            <para>Copies a range of elements from the <see cref="System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the specified index of the target array.</para>
        </summary>
        <param name="index">The zero-based index in the source <see cref="System.Collections.ArrayList" /> at which copying begins.</param>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.ArrayList" />. The <see cref="System.Array" /> must have zero-based indexing. </param>
        <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <param name="count">The number of elements to copy.</param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero. </para><para>-or- </para>
            <para><paramref name="arrayIndex" /> is less than zero. </para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the <see cref="System.Collections.ArrayList.Count" /> of the source <see cref="System.Collections.ArrayList" />.</para><para>-or-</para>
            <para><paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.ArrayList" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type. </para>
        </remarks>
        <example>
            <para>The following example shows how to copy an <see cref="System.Collections.ArrayList" /> 
 into a one-dimensional <see cref="System.Array" qualify="true" />.</para>
            <codelink SampleID="Classic ArrayList.CopyTo1 Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.FixedSize">
        <overload>
            <para>Returns a list wrapper with a fixed size, where elements are allowed to be modified, but not added or removed.
    </para>
        </overload>
        <summary>
            <para>Returns an <see cref="System.Collections.IList" /> wrapper with a fixed size.
    </para>
        </summary>
        <param name="list">
    The <see cref="System.Collections.IList" /> to wrap.
 </param>
        <returns>
            <para>An <see cref="System.Collections.IList" /> wrapper with a fixed size.
    </para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />.</exception>
        <remarks>
            <para>This wrapper can be used to prevent additions to and deletions from the original <see cref="System.Collections.IList" />.
   The elements can still be modified or replaced.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="ArrayList.FixedSize1">
        <summary>
            <para>Returns an <see cref="System.Collections.ArrayList" /> wrapper with a fixed size.</para>
        </summary>
        <param name="list">The <see cref="System.Collections.ArrayList" /> to wrap.</param>
        <returns>
            <para>An <see cref="System.Collections.ArrayList" /> wrapper with a fixed size.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />.</exception>
        <remarks>
            <para>This wrapper can be used to prevent additions to and deletions from the original <see cref="System.Collections.ArrayList" />.
   The elements can still be modified or replaced.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
        <example>
            <para>The following example shows how to create a fixed-size wrapper around 
       an <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.IsFixedSize Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.GetEnumerator">
        <overload>
            <para> Returns an enumerator that can iterate through
       the <see cref="System.Collections.ArrayList" />.</para>
        </overload>
        <summary>
            <para>Returns an enumerator for the entire
    <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" />
 for the entire <see cref="System.Collections.ArrayList" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="ArrayList.GetEnumerator1">
        <summary>
            <para>Returns an enumerator for a section of the
    <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="index">The zero-based starting index of the <see cref="System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
        <param name="count">The number of elements in the <see cref="System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" />
 for the specified section of the <see cref="System.Collections.ArrayList" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="System.Collections.ArrayList" />.</exception>
<remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
    </doc><doc for="ArrayList.IndexOf">
        <overload>
            <para>Returns the zero-based index of the
      first occurrence of a value in the <see cref="System.Collections.ArrayList" /> or in a portion of it.</para>
        </overload>
        <summary>
            <para>Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="System.Collections.ArrayList" />, if found; otherwise, -1.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.Collections.ArrayList" /> is searched forward starting at the first element and ending at the last element.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.ArrayList.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of the first
      occurrence of a specified element.</para>
            <codelink SampleID="Classic ArrayList.IndexOf Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.LastIndexOf" />
        <seealso cref="System.Collections.ArrayList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.IndexOf1">
        <summary>
            <para>Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the first occurrence within the section of the <see cref="System.Collections.ArrayList" /> that extends from the specified index to the last element.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" /> within the section of the <see cref="System.Collections.ArrayList" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList" />.</para></exception>
<remarks>
            <para>The <see cref="System.Collections.ArrayList" /> is searched forward starting at <paramref name="startIndex" /> and ending at the last element.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to the number of elements from <paramref name="startIndex" /> to the end of the <see cref="System.Collections.ArrayList" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is the number of elements from <paramref name="startIndex" /> to the end of the <see cref="System.Collections.ArrayList" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of the first
      occurrence of a specified element.</para>
            <codelink SampleID="Classic ArrayList.IndexOf Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.LastIndexOf" />
        <seealso cref="System.Collections.ArrayList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.IndexOf2">
        <summary>
            <para>Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the first occurrence within the section of the <see cref="System.Collections.ArrayList" /> that starts at the specified index and contains the specified number of elements.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" /> within the section of the <see cref="System.Collections.ArrayList" /> that starts at <paramref name="startIndex" /> and contains <paramref name="count" /> number of elements, if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="System.Collections.ArrayList" />.</para></exception>
<remarks>
            <para>The <see cref="System.Collections.ArrayList" /> is searched forward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="count" /> - 1.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <paramref name="count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <paramref name="count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of the first
      occurrence of a specified element.</para>
            <codelink SampleID="Classic ArrayList.IndexOf Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.LastIndexOf" />
        <seealso cref="System.Collections.ArrayList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.Insert">
        <summary>
            <para>Inserts an element into the <see cref="System.Collections.ArrayList" />
at the specified index.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
        <param name="value">
            <para>The <see cref="System.Object" /> to insert. The value can be <see langword="null" />.</para>
        </param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is greater than <see cref="System.Collections.ArrayList.Count" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
<remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
            <para>If <see cref="System.Collections.ArrayList.Count" /> already equals <see cref="System.Collections.ArrayList.Capacity" />, the
capacity of the list is doubled by automatically reallocating the internal
array before the new element is inserted.</para>
            <para>If <paramref name="index" /> is equal to <see cref="System.Collections.ArrayList.Count" />, <paramref name="value" /> is added to the end of
<see cref="System.Collections.ArrayList" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accomodate the new element.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to insert elements into the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Insert Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.InsertRange" />
        <seealso cref="System.Collections.ArrayList.Add" />
        <seealso cref="System.Collections.ArrayList.Remove" />
    </doc><doc for="ArrayList.InsertRange">
        <summary>
            <para>Inserts the elements of a collection into
      the <see cref="System.Collections.ArrayList" /> at the specified index.</para>
        </summary>
        <param name="index">The zero-based index at which the new elements should be inserted.</param>
        <param name="c">The <see cref="System.Collections.ICollection" /> whose elements should be inserted into the <see cref="System.Collections.ArrayList" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="c" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is greater than <see cref="System.Collections.ArrayList.Count" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
<remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
            <para>If the new <see cref="System.Collections.ArrayList.Count" /> (the current <see cref="System.Collections.ArrayList.Count" /> plus the size of the collection) is
greater than <see cref="System.Collections.ArrayList.Capacity" />, the capacity of the list is
either doubled or increased to the new count, whichever is greater. The internal
array is automatically reallocated to accommodate the new elements.</para>
            <para>If <paramref name="index" /> is equal to <see cref="System.Collections.ArrayList.Count" />, the elements are added to the end of
<see cref="System.Collections.ArrayList" />.</para>
            <para>The order of the elements in the <see cref="System.Collections.ICollection" />
is preserved in the <see cref="System.Collections.ArrayList" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accomodate the new element.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to insert elements into the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Insert Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.Insert" />
        <seealso cref="System.Collections.ArrayList.AddRange" />
        <seealso cref="System.Collections.ArrayList.SetRange" />
        <seealso cref="System.Collections.ArrayList.GetRange" />
        <seealso cref="System.Collections.ArrayList.RemoveRange" />
    </doc><doc for="ArrayList.LastIndexOf">
        <overload>
            <para>Returns the zero-based index of the last occurrence of a value in the <see cref="System.Collections.ArrayList" /> or in a portion of it.</para>
        </overload>
        <summary>
            <para> Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the last occurrence within the entire <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" /> within the entire the <see cref="System.Collections.ArrayList" />, if found; otherwise, -1.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.Collections.ArrayList" /> is searched backward starting at the last element and ending at the first element.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.ArrayList.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of the last
      occurrence of a specified element.</para>
            <codelink SampleID="Classic ArrayList.LastIndexOf Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.IndexOf" />
        <seealso cref="System.Collections.ArrayList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.LastIndexOf1">
        <summary>
            <para> Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the last occurrence within the section of the <see cref="System.Collections.ArrayList" /> that extends from the first element to the specified index.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" /> within the section of the <see cref="System.Collections.ArrayList" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList" />.</para></exception>
<remarks>
            <para>The <see cref="System.Collections.ArrayList" /> is searched backward starting at <paramref name="startIndex" /> and ending at the first element.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to the number of elements from the beginning of the <see cref="System.Collections.ArrayList" /> to <paramref name="startIndex" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is the number of elements from the beginning of the <see cref="System.Collections.ArrayList" /> to <paramref name="startIndex" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of the last
      occurrence of a specified element.</para>
            <codelink SampleID="Classic ArrayList.LastIndexOf Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.IndexOf" />
        <seealso cref="System.Collections.ArrayList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.LastIndexOf2">
        <summary>
            <para> Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the last occurrence within the section of the <see cref="System.Collections.ArrayList" /> that contains the specified number of elements and ends at the specified index.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <returns>
            <para>The zero-based index of the last occurrence of <paramref name="value" /> within the section of the <see cref="System.Collections.ArrayList" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="startIndex" />, if found; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList" />.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="System.Collections.ArrayList" />.</para></exception>
<remarks>
            <para>The <see cref="System.Collections.ArrayList" /> is searched backward starting at <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> - <paramref name="count" /> + 1.</para>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <paramref name="count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <paramref name="count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index
      of the last occurrence of a specified element. Note that LastIndexOf is a
      backward search; therefore, <paramref name="count" /> must be less than or equal to
   <paramref name="startIndex" /> + 1.</para>
            <codelink SampleID="Classic ArrayList.LastIndexOf Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.IndexOf" />
        <seealso cref="System.Collections.ArrayList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.ReadOnly">
        <overload>
            <para>Returns a list wrapper that is read-only.</para>
        </overload>
        <summary>
            <para>Returns a read-only <see cref="System.Collections.IList" /> wrapper.</para>
        </summary>
        <param name="list">The <see cref="System.Collections.IList" /> to wrap.</param>
        <returns>
            <para>A read-only <see cref="System.Collections.IList" />
 wrapper around <paramref name="list" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />.</exception>
        <remarks>
            <para>To prevent any modifications to <paramref name="list" />, expose <paramref name="list" /> only through this wrapper.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList.IsReadOnly" />
    </doc><doc for="ArrayList.ReadOnly1">
        <summary>
            <para>Returns a read-only <see cref="System.Collections.ArrayList" /> wrapper.</para>
        </summary>
        <param name="list">The <see cref="System.Collections.ArrayList" /> to wrap.</param>
        <returns>
            <para>A read-only <see cref="System.Collections.ArrayList" />
 wrapper around <paramref name="list" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />. </exception>
        <remarks>
            <para>To prevent any modifications to <paramref name="list" />, expose <paramref name="list" /> only through this wrapper.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
        <example>
            <para>The following example shows how to create a read-only wrapper around 
       an <see cref="System.Collections.ArrayList" /> and how to determine if an <see cref="System.Collections.ArrayList" />
       is read-only.</para>
            <codelink SampleID="Classic ArrayList.ReadOnly1 Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.IsReadOnly" />
    </doc><doc for="ArrayList.Remove">
        <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="obj">The <see cref="System.Object" /> to remove from the <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.ArrayList.Count" />.
 That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
   If the collection is indexed, the indexes of the elements that are moved are also updated.
   This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to remove elements from the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Remove Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.RemoveAt" />
        <seealso cref="System.Collections.ArrayList.RemoveRange" />
        <seealso cref="System.Collections.ArrayList.Add" />
        <seealso cref="System.Collections.ArrayList.Insert" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.RemoveAt">
        <summary>
            <para>Removes the element at the specified index
      of the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="index">The zero-based index of the element to remove.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.ArrayList.Count" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
<remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to remove elements from the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Remove Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.Remove" />
        <seealso cref="System.Collections.ArrayList.RemoveRange" />
        <seealso cref="System.Collections.ArrayList.Add" />
        <seealso cref="System.Collections.ArrayList.Insert" />
    </doc><doc for="ArrayList.RemoveRange">
        <summary>
            <para>Removes a range of elements from the
   <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="index">The zero-based starting index of the range of elements to remove.</param>
        <param name="count">The number of elements to remove.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList" />.</exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
<remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to remove elements from the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Remove Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.Remove" />
        <seealso cref="System.Collections.ArrayList.RemoveAt" />
        <seealso cref="System.Collections.ArrayList.GetRange" />
        <seealso cref="System.Collections.ArrayList.AddRange" />
        <seealso cref="System.Collections.ArrayList.InsertRange" />
        <seealso cref="System.Collections.ArrayList.SetRange" />
    </doc><doc for="ArrayList.Repeat">
        <summary>
            <para>Returns an <see cref="System.Collections.ArrayList" />
whose elements are copies of the specified value.</para>
        </summary>
        <param name="value">
            <para>The <see cref="System.Object" /> to copy multiple times in the new <see cref="System.Collections.ArrayList" />. The value can be <see langword="null" />.</para>
        </param>
        <param name="count">The number of times <paramref name="value" /> should be copied.</param>
        <returns>
            <para>An <see cref="System.Collections.ArrayList" />
with <paramref name="count" /> number of elements, all of which are copies of
<paramref name="value" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="count" /> is less than zero.</exception>
        <remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
        </remarks>
        <example>
            <para>The following example shows how to create and
      initialize a new <see cref="System.Collections.ArrayList" /> with the same value.</para>
            <codelink SampleID="Classic ArrayList.Repeat Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.Reverse">
        <overload>
            <para>Reverses the order of the
       elements in the <see cref="System.Collections.ArrayList" /> or a portion of it.</para>
        </overload>
        <summary>
            <para>Reverses the order of the elements in the
       entire <see cref="System.Collections.ArrayList" />.</para>
        </summary>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.ArrayList" /> is read-only.</exception>
        <example>
            <para> The following example shows how to reverse the sort order of the 
       values in an <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Reverse Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.Reverse1">
        <summary>
            <para>Reverses the order of the elements in the
       specified range.</para>
        </summary>
        <param name="index">The zero-based starting index of the range to reverse.</param>
        <param name="count">The number of elements in the range to reverse.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList" />.</exception>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.ArrayList" /> is read-only.</exception>
<remarks>
            <para>This method uses <see cref="System.Array.Reverse" qualify="true" /> to reverse the order of the elements, such
    that the element at <see cref="System.Collections.ArrayList" />[i], where i is any index within the range,
    moves to <see cref="System.Collections.ArrayList" />[j], where j equals <paramref name="index" /> +
 <paramref name="index" /> + <paramref name="count" /> - i - 1.</para>
        </remarks>
        <example>
            <para>The following example shows how to reverse the sort order of the values in a 
       section of an <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Reverse1 Example" SnippetID="1" />
        </example>
    </doc><doc for="ArrayList.SetRange">
        <summary>
            <para>Copies the elements of a collection over a
      range of elements in the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="index">The zero-based <see cref="System.Collections.ArrayList" /> index at which to start copying the elements of <paramref name="c" />.</param>
        <param name="c">The <see cref="System.Collections.ICollection" /> whose elements to copy to the <see cref="System.Collections.ArrayList" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> plus the number of elements in <paramref name="c" /> is greater than <see cref="System.Collections.ArrayList.Count" />.</para></exception>
        <exception cref="System.ArgumentNullException"><paramref name="c" /> is <see langword="null" />.</exception>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.ArrayList" /> is read-only.</exception>
<remarks>
            <para><see cref="System.Collections.ArrayList" /> accepts <see langword="null" /> as a valid value and allows duplicate elements.</para>
            <para>The order of the elements in the <see cref="System.Collections.ICollection" /> is preserved in the <see cref="System.Collections.ArrayList" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to set and get a
      range of elements in the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.SetRange Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.AddRange" />
        <seealso cref="System.Collections.ArrayList.InsertRange" />
        <seealso cref="System.Collections.ArrayList.GetRange" />
        <seealso cref="System.Collections.ArrayList.RemoveRange" />
    </doc><doc for="ArrayList.GetRange">
        <summary>
            <para>Returns an <see cref="System.Collections.ArrayList" /> which represents a subset of the elements in the source <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <param name="index">The zero-based <see cref="System.Collections.ArrayList" /> index at which the range starts.</param>
        <param name="count">The number of elements in the range.</param>
        <returns>
            <para> An <see cref="System.Collections.ArrayList" /> which
   represents a subset of the elements in the source <see cref="System.Collections.ArrayList" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList" />. </exception>
<remarks>
            <para>This method does not create copies of the
      elements. The new <see cref="System.Collections.ArrayList" /> is only a view
      window into the source <see cref="System.Collections.ArrayList" />.
      However, all subsequent changes to the source <see cref="System.Collections.ArrayList" /> must be done through this
      view window <see cref="System.Collections.ArrayList" />. If changes are made directly to the
      source <see cref="System.Collections.ArrayList" />, the view window <see cref="System.Collections.ArrayList" /> is invalidated and any
      operations on it will return an <see cref="System.InvalidOperationException" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to set and get a
      range of elements in the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.SetRange Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.RemoveRange" />
        <seealso cref="System.Collections.ArrayList.AddRange" />
        <seealso cref="System.Collections.ArrayList.InsertRange" />
        <seealso cref="System.Collections.ArrayList.SetRange" />
    </doc><doc for="ArrayList.Sort">
        <overload>
            <para>Sorts the elements in the
    <see cref="System.Collections.ArrayList" /> or a portion of it.</para>
        </overload>
        <summary>
            <para>Sorts the elements in the
       entire <see cref="System.Collections.ArrayList" /> using the <see cref="System.IComparable" /> implementation of each element.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para></exception>
        <remarks>
            <para>This method uses <see cref="System.Array.Sort" qualify="true" />, which uses the QuickSort algorithm.
    This is an O(<paramref name="n" />^2) operation, where <paramref name="n" /> is the number of elements to sort,
    with an average of (theta)(<paramref name="n" />log<paramref name="n" />).</para>
            <para>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.
   In contrast, a stable sort preserves the order of elements that are equal.</para>
        </remarks>
        <example>
            <para>The following example shows how to sort the values in an <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Sort Example" SnippetID="1" />
        </example>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.Sort1">
        <summary>
            <para>Sorts the elements in the
       entire <see cref="System.Collections.ArrayList" /> using the specified comparer.</para>
        </summary>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the <see cref="System.IComparable" /> implementation of each element.</para>
        </param>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.ArrayList" /> is read-only.</exception>
        <remarks>
            <para>This method uses <see cref="System.Array.Sort" qualify="true" />, which uses the QuickSort algorithm.
    This is an O(<paramref name="n" />^2) operation, where <paramref name="n" /> is the number of elements to sort,
    with an average of (theta)(<paramref name="n" />log<paramref name="n" />).</para>
            <para>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.
   In contrast, a stable sort preserves the order of elements that are equal.</para>
        </remarks>
        <example>
            <para>The following example shows how to sort the values in an <see cref="System.Collections.ArrayList" /> using the default comparer and a custom comparer that reverses the sort order.</para>
            <codelink SampleID="System.Collections.ArrayList.Sort_2" SnippetID="1" />
        </example>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.Sort2">
        <summary>
            <para>Sorts the elements in a section
       of <see cref="System.Collections.ArrayList" /> using the specified comparer.</para>
        </summary>
        <param name="index">The zero-based starting index of the range to sort.</param>
        <param name="count">The length of the range to sort.</param>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the <see cref="System.IComparable" /> implementation of each element.</para>
        </param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="count" /> is less than zero.</para></exception>
        <exception cref="System.ArgumentException"><paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="System.Collections.ArrayList" />.</exception>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.ArrayList" /> is read-only.</exception>
<remarks>
            <para>This method uses <see cref="System.Array.Sort" qualify="true" />, which uses the QuickSort algorithm.
    This is an O(<paramref name="n" />^2) operation, where <paramref name="n" /> is the number of elements to sort,
    with an average of (theta)(<paramref name="n" />log<paramref name="n" />).</para>
            <para>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.
   In contrast, a stable sort preserves the order of elements that are equal.</para>
        </remarks>
        <example>
            <para>The following example shows how to sort the values in a section of an <see cref="System.Collections.ArrayList" /> using the default comparer and a custom comparer that reverses the sort order.</para>
            <codelink SampleID="System.Collections.ArrayList.Sort_3" SnippetID="1" />
        </example>
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="ArrayList.Synchronized">
        <overload>
            <para>Returns a list wrapper
 that is synchronized (thread-safe).</para>
        </overload>
        <summary>
            <para>Returns an <see cref="System.Collections.IList" />
wrapper that is synchronized (thread-safe).</para>
        </summary>
        <param name="list">The <see cref="System.Collections.IList" /> to synchronize.</param>
        <returns>
            <para>An <see cref="System.Collections.IList" /> wrapper that is
 synchronized (thread-safe).</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />. </exception>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.ArrayList" />, all operations must be done through this wrapper.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ArrayList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">ArrayList myCollection = new ArrayList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ArrayList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.ArrayList.SyncRoot" />
        <seealso cref="System.Collections.ArrayList.IsSynchronized" />
    </doc><doc for="ArrayList.Synchronized1">
        <summary>
            <para>Returns an <see cref="System.Collections.ArrayList" />
wrapper that is synchronized (thread-safe).</para>
        </summary>
        <param name="list">The <see cref="System.Collections.ArrayList" /> to synchronize.</param>
        <returns>
            <para>An <see cref="System.Collections.ArrayList" /> wrapper that is
 synchronized (thread-safe).</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />. </exception>
        <remarks>
            <para>To guarantee the thread safety of the <see cref="System.Collections.ArrayList" />,
 all operations must be done through this wrapper.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ArrayList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">ArrayList myCollection = new ArrayList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ArrayList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize an <see cref="System.Collections.ArrayList" />,
 determine if an <see cref="System.Collections.ArrayList" /> is synchronized and use a synchronized
 <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.IsSynchronized Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.SyncRoot" />
        <seealso cref="System.Collections.ArrayList.IsSynchronized" />
    </doc><doc for="ArrayList.ToArray">
        <overload>
            <para>Copies the elements of
       the <see cref="System.Collections.ArrayList" /> to a new array.</para>
        </overload>
        <summary>
            <para>Copies the elements of the <see cref="System.Collections.ArrayList" />
 to a new <see cref="System.Object" /> array.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Object" /> array containing copies of the
    elements of the <see cref="System.Collections.ArrayList" />.</para>
        </returns>
        <remarks>
            <para>The elements are copied using <see cref="System.Array.Copy" qualify="true" />, which is an O(<paramref name="n" />) operation, where 
 <paramref name="n" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
        </remarks>
    </doc><doc for="ArrayList.ToArray1">
        <summary>
            <para>Copies the elements of the <see cref="System.Collections.ArrayList" />
 to a new array of the specified type.</para>
        </summary>
        <param name="type">The <see cref="System.Type" /> of array to create and copy elements to.</param>
        <returns>
            <para>An array of the specified type
       containing copies of the elements of the <see cref="System.Collections.ArrayList" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="type" /> is <see langword="null" />.</exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList" /> cannot be cast automatically to the specified type.</exception>
        <remarks>
            <para>The elements are copied using <see cref="System.Array.Copy" qualify="true" />, which is an O(<paramref name="n" />) 
    operation, where <paramref name="n" /> is <see cref="System.Collections.ArrayList.Count" />.</para>
            <para>Elements can be cast to the specified type as required. If the casting
    cannot be done automatically, the copy operation might fail.</para>
        </remarks>
        <seealso cref="System.Type" />
    </doc><doc for="ArrayList.TrimToSize">
        <summary>
            <para>Sets the capacity to the actual number of elements in the <see cref="System.Collections.ArrayList" />.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.ArrayList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.ArrayList" /> has a fixed size.</para></exception>
        <remarks>
            <para>This method can be used to minimize a list's memory
       overhead if no new elements will be added to the list.</para>
            <para>To completely clear all
       elements in a list, call the <see cref="System.Collections.ArrayList.Clear" /> method before calling
    <see cref="System.Collections.ArrayList.TrimToSize" />. 
       Trimming an empty <see cref="System.Collections.ArrayList" /> sets the capacity of the <see cref="System.Collections.ArrayList" />
       to the default capacity, not zero. </para>
        </remarks>
        <example>
            <para>The following example shows how to trim the unused 
       portions of the <see cref="System.Collections.ArrayList" /> and how to clear the values of the <see cref="System.Collections.ArrayList" />.</para>
            <codelink SampleID="Classic ArrayList.Clear Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList.Clear" />
        <seealso cref="System.Collections.ArrayList.Capacity" />
        <seealso cref="System.Collections.ArrayList.Count" />
    </doc>
</docs>
