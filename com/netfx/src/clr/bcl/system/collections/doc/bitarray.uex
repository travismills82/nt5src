<docs>
    <doc for="BitArray">
        <summary>
            <para>Manages a compact array of bit values,
      which are represented as Booleans, where <see langword="true" /> indicates that
      the bit is on (1) and <see langword="false" /> indicates the bit is off (0).</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
 Instance members are not guaranteed to be thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="System.Collections.BitArray" />.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>The size of a <see cref="System.Collections.BitArray" /> is controlled by the client; indexing past
   the end of the <see cref="System.Collections.BitArray" />
   throws an <see cref="System.ArgumentException" />.</para>
            <para>Indexes in this collection are zero-based.</para>
        </remarks>
        <example>
            <para>The following example shows how to create and
      initialize a <see cref="System.Collections.BitArray" /> and how to print out its values.</para>
            <codelink SampleID="Classic BitArray Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.BitArray">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> class whose capacity and initial values can be specified.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> 
   class that can hold the specified number of bit values, which are initially set to <see langword="false" />.</para>
        </summary>
        <param name="length">The number of bit values in the new <see cref="System.Collections.BitArray" />.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="length" /> is less than zero.</exception>
    </doc><doc for="BitArray.BitArray1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> 
   class that can hold the specified number of bit values, which are initially set to the specified value.</para>
        </summary>
        <param name="length">The number of bit values in the new <see cref="System.Collections.BitArray" />.</param>
        <param name="defaultValue">The Boolean value to assign to each bit.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="length" /> is less than zero. </exception>
    </doc><doc for="BitArray.BitArray2">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> class that contains bit values copied from 
   the specified array of bytes.</para>
        </summary>
        <param name="bytes">An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</param>
        <exception cref="System.ArgumentNullException"><paramref name="bytes" /> is <see langword="null" />.</exception>
        <remarks>
            <para> The first byte in the array represents 
       bits 0 through 7, the second byte represents bits 8 through 15, and so on. The
       Least Significant Bit of each byte represents the lowest index value:
       "<paramref name="bytes" />[0] &amp; 1" represents bit 0, "<paramref name="bytes" />[0] &amp; 2"
       represents bit 1, "<paramref name="bytes" />[0] &amp; 4" represents bit 2, and so on.</para>
        </remarks>
    </doc><doc for="BitArray.BitArray3">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> class that contains bit values copied from 
    the specified array of Booleans.</para>
        </summary>
        <param name="values">An array of Booleans to copy.</param>
        <exception cref="System.ArgumentNullException"><paramref name="values" /> is <see langword="null" />.</exception>
    </doc><doc for="BitArray.BitArray4">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> class that contains bit values copied from 
    the specified array of 32-bit integers.</para>
        </summary>
        <param name="values">An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</param>
        <exception cref="System.ArgumentNullException"><paramref name="values" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The number in the first <paramref name="values" /> array element represents bits 0 through 31,
   the second number in the array represents bits 32 through 63, and so on.
   The Least Significant Bit of each integer represents the lowest index value: "<paramref name="values" />[0] &amp; 1" represents bit 0,
   "<paramref name="values" />[0] &amp; 2" represents bit 1, "<paramref name="values" />[0] &amp; 4" represents bit 2, and so on.</para>
        </remarks>
    </doc><doc for="BitArray.BitArray5">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.BitArray" /> 
   class that contains bit values copied from the specified <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <param name="bits">The <see cref="System.Collections.BitArray" /> to copy.</param>
        <exception cref="System.ArgumentNullException"><paramref name="bits" /> is <see langword="null" />.</exception>
    </doc><doc for="BitArray.this">
        <summary>
            <para>Gets or sets the value of the bit at a specific position in the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <param name="index">The zero-based index of the value to get or set.</param>
        <value>
            <para>The value of the bit at position <paramref name="index" />.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.BitArray.Count" />.</para></exception>
<remarks>
            <para>This property provides the ability to access a specific element in the 
       collection by using the following syntax: <c>myCollection[index]</c>.</para>
        </remarks>
        <seealso cref="System.Collections.BitArray.Count" />
    </doc><doc for="BitArray.Get">
        <summary>
            <para>Gets the value of the bit at a specific position in the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <param name="index">The zero-based index of the value to get.</param>
        <returns>
            <para>The value of the bit at position <paramref name="index" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is greater than or equal to the number of elements in the <see cref="System.Collections.BitArray" />.</para></exception>
<example>
            <para>The following example shows how to set and get specific elements in a <see cref="System.Collections.BitArray" />.</para>
            <codelink SampleID="Classic BitArray.Get Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.Set">
        <summary>
            <para> Sets the bit at a specific position in the <see cref="System.Collections.BitArray" /> to the specified value.</para>
        </summary>
        <param name="index">The zero-based index of the bit to set.</param>
        <param name="value">The Boolean value to assign to the bit.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is greater than or equal to the number of elements in the <see cref="System.Collections.BitArray" />.</para></exception>
<example>
            <para>The following example shows how to set and get specific elements in a <see cref="System.Collections.BitArray" />.</para>
            <codelink SampleID="Classic BitArray.Get Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.SetAll">
        <summary>
            <para> Sets all bits in the <see cref="System.Collections.BitArray" /> to the specified value.</para>
        </summary>
        <param name="value">The Boolean value to assign to all bits.</param>
        <example>
            <para>The following example shows how to set and get specific elements in a <see cref="System.Collections.BitArray" />.</para>
            <codelink SampleID="Classic BitArray.Get Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.And">
        <summary>
            <para>Performs the bitwise AND operation on the elements in the
       current <see cref="System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <param name="value">The <see cref="System.Collections.BitArray" /> with which to perform the bitwise AND operation.</param>
        <returns>
            <para>A <see cref="System.Collections.BitArray" /> containing the result of the bitwise AND
    operation on the elements in the current <see cref="System.Collections.BitArray" /> against the corresponding
    elements in the specified <see cref="System.Collections.BitArray" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentException"><paramref name="value" /> and the current <see cref="System.Collections.BitArray" /> do not have the same number of elements.</exception>
        <remarks>
            <para>The bitwise AND operation returns <see langword="true" /> if both operands are <see langword="true" />, and 
       returns <see langword="false" /> if one or both operands are <see langword="false" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to apply AND to two <see cref="System.Collections.BitArray" /> instances.</para>
            <codelink SampleID="Classic BitArray.And Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.Or">
        <summary>
            <para>Performs the bitwise OR operation on the elements in the
       current <see cref="System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <param name="value">The <see cref="System.Collections.BitArray" /> with which to perform the bitwise OR operation.</param>
        <returns>
            <para>A <see cref="System.Collections.BitArray" /> containing the result of the bitwise OR
    operation on the elements in the current <see cref="System.Collections.BitArray" /> against the corresponding
    elements in the specified <see cref="System.Collections.BitArray" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />. </exception>
        <exception cref="System.ArgumentException"><paramref name="value" /> and the current <see cref="System.Collections.BitArray" /> do not have the same number of elements. </exception>
        <remarks>
            <para>The bitwise OR operation returns <see langword="true" /> if one or both operands
    are <see langword="true" />, and returns <see langword="false" /> if both operands are <see langword="false" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to apply OR to two <see cref="System.Collections.BitArray" /> instances.</para>
            <codelink SampleID="Classic BitArray.Or Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.Xor">
        <summary>
            <para>Performs the bitwise eXclusive OR operation on the
       elements in the current <see cref="System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <param name="value">The <see cref="System.Collections.BitArray" /> with which to perform the bitwise eXclusive OR operation.</param>
        <returns>
            <para>A <see cref="System.Collections.BitArray" /> containing the result of the bitwise
    eXclusive OR operation on the elements in the current <see cref="System.Collections.BitArray" />
    against the corresponding elements in the specified <see cref="System.Collections.BitArray" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />. </exception>
        <exception cref="System.ArgumentException"><paramref name="value" /> and the current <see cref="System.Collections.BitArray" /> do not have the same number of elements. </exception>
        <remarks>
            <para>The bitwise exclusive OR operation returns <see langword="true" /> if exactly
       one operand is <see langword="true" />, and returns <see langword="false" /> if both operands have the same Boolean value.</para>
        </remarks>
        <example>
            <para>The following example shows how to apply XOR to two <see cref="System.Collections.BitArray" /> instances.</para>
            <codelink SampleID="Classic BitArray.Xor Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.Not">
        <summary>
            <para>Inverts all the bit values in the current <see cref="System.Collections.BitArray" />,
    so that elements set to <see langword="true" /> are changed to <see langword="false" />,
    and elements set to <see langword="false" /> are changed to <see langword="true" />.</para>
        </summary>
        <returns>
            <para>The current instance with inverted bit values.</para>
        </returns>
        <example>
            <para>The following example shows how to apply NOT to a <see cref="System.Collections.BitArray" />.</para>
            <codelink SampleID="Classic BitArray.Not Example" SnippetID="1" />
        </example>
    </doc><doc for="BitArray.Length">
        <summary>
            <para> Gets or sets the number of elements in the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <value>
            <para> The number of elements in the <see cref="System.Collections.BitArray" />.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException"><para>The property is set to a value that is less than zero.</para></exception>
        <remarks>
            <para><see cref="System.Collections.BitArray.Length" /> and <see cref="System.Collections.BitArray.Count" /> return the same value. <see cref="System.Collections.BitArray.Length" /> can be set to a specific value, but 
 <see cref="System.Collections.BitArray.Count" /> is read-only.</para>
            <para>If <see cref="System.Collections.BitArray.Length" /> is set to a value that is less 
 than <see cref="System.Collections.BitArray.Count" />, the <see cref="System.Collections.BitArray" /> is truncated
  and the elements after the index <paramref name="value" />-1 are deleted.</para>
            <para>If <see cref="System.Collections.BitArray.Length" /> is set to a value that is greater
 than <see cref="System.Collections.BitArray.Count" />, the new elements are set to <see langword="false" />.</para>
        </remarks>
    </doc><doc for="BitArray.CopyTo">
        <summary>
            <para>Copies the entire <see cref="System.Collections.BitArray" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the
   specified index of the target array.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.BitArray" />. The <see cref="System.Array" /> must have zero-based indexing. </param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.BitArray" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.BitArray" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type.
    Only <see langword="bool" />, <see langword="int" /> and <see langword="byte" /> types of arrays are supported. </para>
            <para>This method uses <see cref="System.Array.Copy" qualify="true" /> to copy the elements.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy a <see cref="System.Collections.BitArray" />
   into a one-dimensional <see cref="System.Array" />.</para>
            <codelink SampleID="Classic BitArray.CopyTo Example" SnippetID="1" />
        </example>
        <seealso cref="System.Array" />
    </doc><doc for="BitArray.Count">
        <summary>
            <para>Gets the number of elements contained in the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.BitArray" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.BitArray.Length" /> and <see cref="System.Collections.BitArray.Count" /> return the same value. 
   <see cref="System.Collections.BitArray.Length" /> can be set to a specific value, but <see cref="System.Collections.BitArray.Count" /> is read-only.</para>
        </remarks>
    </doc><doc for="BitArray.Clone">
        <summary>
            <para>Creates a shallow copy of the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <returns>
            <para>A shallow copy of the <see cref="System.Collections.BitArray" />.</para>
        </returns>
        <remarks>
            <para> A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types,
 but it does not copy the objects that the references refer to.
 The references in the new collection point to the same objects that the references in the original collection point to.</para>
            <para>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</para>
        </remarks>
    </doc><doc for="BitArray.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.BitArray" />.</para>
        </value>
        <remarks>
            <para> Derived classes can provide their own synchronized version of the <see cref="System.Collections.BitArray" /> using the <see cref="System.Collections.BitArray.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.BitArray.SyncRoot" /> of the <see cref="System.Collections.BitArray" />,
 not directly on the <see cref="System.Collections.BitArray" />. This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.BitArray" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.BitArray.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">BitArray myCollection = new BitArray();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New BitArray()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.BitArray.IsSynchronized" />
    </doc><doc for="BitArray.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.BitArray" /> is read-only.</para>
        </summary>
        <value>
            <para>This property is always <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.BitArray" /> implements the <see cref="System.Collections.BitArray.IsReadOnly" /> property because it is required by the <see cref="System.Collections.IList" qualify="true" /> interface.</para>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="BitArray.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.BitArray" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para>This property is always <see langword="false" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.BitArray" /> implements the <see cref="System.Collections.BitArray.IsSynchronized" /> property because it is required by the <see cref="System.Collections.ICollection" qualify="true" /> interface.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.BitArray.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">BitArray myCollection = new BitArray();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New BitArray()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.BitArray.SyncRoot" />
    </doc><doc for="BitArray.GetEnumerator">
        <summary>
            <para>Returns an enumerator that can iterate through the <see cref="System.Collections.BitArray" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the entire <see cref="System.Collections.BitArray" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator" />
    </doc>
</docs>
