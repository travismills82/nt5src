<docs>
    <doc for="SortedList">
        <summary>
            <para> Represents a collection of key-and-value pairs that are sorted by the keys
      and are accessible by key and by index.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
   Instance members are not guaranteed to be thread-safe.</para>
            <para>A <see cref="System.Collections.SortedList" /> can safely support multiple readers concurrently, as long as the collection is not modified.
To guarantee the thread safety of the <see cref="System.Collections.SortedList" />, all operations must be done through the wrapper returned by the <see cref="System.Collections.SortedList.Synchronized" /> method. </para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>A <see cref="System.Collections.SortedList" /> is a hybrid between a <see cref="System.Collections.Hashtable" /> and an <see cref="System.Array" />.
   When an element is accessed by its key using the <see cref="System.Collections.SortedList.this" /> indexer property, it behaves like a <see cref="System.Collections.Hashtable" />.
   When an element is accessed by its index using <see cref="System.Collections.SortedList.GetByIndex" /> or <see cref="System.Collections.SortedList.SetByIndex" />, it behaves like an <see cref="System.Array" />.</para>
            <para>A <see cref="System.Collections.SortedList" /> internally maintains two arrays to store the elements of the list;
that is, one array for the keys and another array for the associated values.
Each element is a key-and-value pair that can be accessed as a <see cref="System.Collections.DictionaryEntry" /> object. A key cannot be <see langword="null" />, but a value can be.</para>
            <para>The capacity of a <see cref="System.Collections.SortedList" /> is the number of elements
that the list can hold. As elements are added to a <see cref="System.Collections.SortedList" />,
the capacity is automatically increased as required through
reallocation. The capacity can be decreased by calling <see cref="System.Collections.SortedList.TrimToSize" /> or by setting the <see cref="System.Collections.SortedList.Capacity" />
property explicitly.</para>
            <para>The elements of a <see cref="System.Collections.SortedList" /> are sorted by the keys either
according to a specific <see cref="System.Collections.IComparer" /> implementation specified when
the <see cref="System.Collections.SortedList" /> is created or according to
the <see cref="System.IComparable" /> implementation provided by the keys themselves. In
either case, a <see cref="System.Collections.SortedList" />
does not allow duplicate keys.</para>
            <para>The index sequence is based on the sort sequence.
   When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order,
   and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
   Therefore, the index of a specific key-and-value pair might change
   as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
            <para>Operations on a <see cref="System.Collections.SortedList" /> tend to be slower than operations on a
<see cref="System.Collections.Hashtable" /> because of the sorting. However,
the <see cref="System.Collections.SortedList" /> offers more flexibility by
allowing access to the values either through the associated keys
or through the indexes.</para>
            <para>Indexes in this collection are zero-based.</para>
            <para lang="VB, C#">The <see langword="foreach" /> statement of the C# language (<see langword="for each" /> in Visual Basic) 
 requires the type of each element in the collection.
 Since each element of the <see cref="System.Collections.SortedList" /> is a key-and-value pair,
 the element type is not the type of the key or the type of the value.
 Instead, the element type is <see cref="System.Collections.DictionaryEntry" />.
 For example:</para>
            <code lang="C#">foreach (DictionaryEntry myDE in mySortedList) {...}
</code>
            <code lang="VB">Dim myDE As DictionaryEntry
For Each myDE In mySortedList
   ...
Next myDE
</code>
            <para lang="VB, C#">The <see langword="foreach" /> statement is a wrapper around the enumerator,
 which only allows reading from, not writing to, the collection.</para>
        </remarks>
        <example>
            <para>The following example shows how to create and initialize a <see cref="System.Collections.SortedList" />
and how to print out its keys and values.</para>
            <codelink SampleID="Classic SortedList Example" SnippetID="1" />
        </example>
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.Collections.IDictionary" />
        <seealso cref="System.Collections.Hashtable" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SortedList">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class that is empty, has the default initial
 capacity and is sorted according to the <see cref="System.IComparable" /> interface implemented by each key
 added to the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.SortedList" />.
 The default initial capacity for a <see cref="System.Collections.SortedList" /> is 16.</para>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.</para>
            <para>Each key must implement the <see cref="System.IComparable" /> interface to be capable of comparisons with every other key in the <see cref="System.Collections.SortedList" />.
 The elements are sorted according to the <see cref="System.IComparable" /> implementation of each key added to the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SortedList1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class that is empty, has
 the specified initial capacity and is sorted according to the <see cref="System.IComparable" />
 interface implemented by each key added to the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="initialCapacity">The initial number of elements that the <see cref="System.Collections.SortedList" /> can contain.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="initialCapacity" /> is less than zero. </exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.SortedList" />.
 The default initial capacity for a <see cref="System.Collections.SortedList" /> is 16.</para>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.
 Therefore, if the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations
 while adding elements to the <see cref="System.Collections.SortedList" />.</para>
            <para>Each key must implement the <see cref="System.IComparable" /> interface to be capable of comparisons with every other key in the <see cref="System.Collections.SortedList" />.
 The elements are sorted according to the <see cref="System.IComparable" /> implementation of each key added to the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SortedList2">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class that is empty, has
 the default initial capacity and is sorted according to the
 specified <see cref="System.Collections.IComparer" /> interface.</para>
        </summary>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the <see cref="System.IComparable" /> implementation of each key.</para>
        </param>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.SortedList" />.
 The default initial capacity for a <see cref="System.Collections.SortedList" /> is 16.</para>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.</para>
            <para>The elements are sorted according to the specified <see cref="System.Collections.IComparer" /> implementation.
 If <paramref name="comparer" /> is <see langword="null" />, the <see cref="System.IComparable" /> implementation of each key is used;
 therefore, each key must implement the <see cref="System.IComparable" /> interface to be capable of comparisons
 with every other key in the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SortedList3">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class that is empty, has
 the specified initial capacity and is sorted according to
 the specified <see cref="System.Collections.IComparer" /> interface.</para>
        </summary>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the <see cref="System.IComparable" /> implementation of each key.</para>
        </param>
        <param name="capacity">The initial number of elements that the <see cref="System.Collections.SortedList" /> can contain.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="initialCapacity" /> is less than zero. </exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.SortedList" />.
 The default initial capacity for a <see cref="System.Collections.SortedList" /> is 16.</para>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.
 Therefore, if the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations
 while adding elements to the <see cref="System.Collections.SortedList" />.</para>
            <para>The elements are sorted according to the specified <see cref="System.Collections.IComparer" /> implementation.
 If <paramref name="comparer" /> is <see langword="null" />, the <see cref="System.IComparable" /> implementation of each key is used;
 therefore, each key must implement the <see cref="System.IComparable" /> interface to be capable of comparisons
 with every other key in the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SortedList4">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class that contains elements copied from the
 specified dictionary, has the same initial capacity as the number of elements copied and is
 sorted according to the <see cref="System.IComparable" /> interface implemented by each key.</para>
        </summary>
        <param name="d">The <see cref="System.Collections.IDictionary" /> to copy to a new <see cref="System.Collections.SortedList" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="d" /> is <see langword="null" />.</exception>
<exception cref="System.InvalidCastException">One or more elements in <paramref name="d" /> do not implement the <see cref="System.IComparable" /> interface.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.SortedList" />. When
 adding elements to the list, if the number of elements exceeds the current capacity, the capacity is automatically doubled.</para>
            <para>Each key must implement the <see cref="System.IComparable" /> interface to be capable of comparisons with every other key in the <see cref="System.Collections.SortedList" />.
 The elements are sorted according to the <see cref="System.IComparable" /> implementation of each key added to the <see cref="System.Collections.SortedList" />.</para>
            <para>A <see cref="System.Collections.Hashtable" /> is an example of
an <see cref="System.Collections.IDictionary" /> implementation that can be passed to this constructor. The
new <see cref="System.Collections.SortedList" /> contains a copy of the keys and values
stored in the <see cref="System.Collections.Hashtable" />.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary" />
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.Hashtable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SortedList5">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.SortedList" /> class that contains
 elements copied from the specified dictionary, has the same initial capacity as the number of elements copied and is
 sorted according to the specified <see cref="System.Collections.IComparer" /> interface.</para>
        </summary>
        <param name="d">The <see cref="System.Collections.IDictionary" /> to copy to a new <see cref="System.Collections.SortedList" />.</param>
        <param name="comparer">
            <para>The <see cref="System.Collections.IComparer" /> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para><see langword="null" /> to use the <see cref="System.IComparable" /> implementation of each key.</para>
        </param>
        <exception cref="System.ArgumentNullException"><paramref name="d" /> is <see langword="null" />. </exception>
        <exception cref="System.InvalidCastException"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="System.IComparable" /> interface. </exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.SortedList" />. When
 adding elements to the list, if the number of elements exceeds the current capacity, the capacity is automatically doubled.</para>
            <para>The elements are sorted according to the specified <see cref="System.Collections.IComparer" /> implementation.
 If <paramref name="comparer" /> is <see langword="null" />, the <see cref="System.IComparable" /> implementation of each key is used;
 therefore, each key must implement the <see cref="System.IComparable" /> interface to be capable of comparisons
 with every other key in the <see cref="System.Collections.SortedList" />.</para>
            <para>A <see cref="System.Collections.Hashtable" /> is an example of
an <see cref="System.Collections.IDictionary" /> implementation that can be passed to this constructor. The
new <see cref="System.Collections.SortedList" /> contains a copy of the keys and values
stored in the <see cref="System.Collections.Hashtable" />.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary" />
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.Hashtable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.Add">
        <summary>
            <para>Adds an element with the specified key and value to
      the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="key">The key of the element to add.</param>
        <param name="value">The value of the element to add. The value can be <see langword="null" />.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentException"><para> An element with the specified <paramref name="key" /> already exists in the <see cref="System.Collections.SortedList" />.</para><para>-or-</para><para>The <see cref="System.Collections.SortedList" /> is set to use the <see cref="System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="System.IComparable" /> interface.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.SortedList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.SortedList" /> has a fixed size.</para></exception>
<exception cref="System.InvalidOperationException">The comparer throws an exception.</exception>
        <remarks>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.
      The insertion point is determined
      based on the comparer selected, either explicitly or by default when
      the <see cref="System.Collections.SortedList" />
      was created.</para>
            <para>The <see cref="System.Collections.SortedList.this" /> property can also be used to add new
   elements by setting the value of a key that does not exist in the <see cref="System.Collections.SortedList" />.
   For example: <c>myCollection["myNonexistentKey"] = myValue</c>. However, if the
specified key already exists in the <see cref="System.Collections.SortedList" />, setting the
<see cref="System.Collections.SortedList.this" /> property overwrites the old
value. In contrast, the <see cref="System.Collections.SortedList.Add" /> method does not modify existing elements. </para>
            <para>The elements of a <see cref="System.Collections.SortedList" /> are sorted by the keys either
according to a specific <see cref="System.Collections.IComparer" /> implementation specified when
the <see cref="System.Collections.SortedList" /> is created or according to
the <see cref="System.IComparable" /> implementation provided by the keys themselves.</para>
            <para>A key cannot be <see langword="null" />, but a value can be.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.Add Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.this" />
        <seealso cref="System.Collections.IComparer" />
        <seealso cref="System.IComparable" />
        <seealso cref="System.Collections.SortedList.Capacity" />
    </doc><doc for="SortedList.Capacity">
        <summary>
            <para>Gets or sets the capacity of the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <value>
            <para>The number of elements that the <see cref="System.Collections.SortedList" /> can contain.</para>
        </value>
<exception cref="System.ArgumentOutOfRangeException">The value assigned is less than the current number of elements in the <see cref="System.Collections.SortedList" />.</exception>
        <remarks>
            <para>If the number of elements added to the list reaches the current capacity, the capacity is automatically doubled.</para>
            <para>When <see cref="System.Collections.SortedList.Capacity" /> is
    set, the internal arrays are reallocated to accommodate the new capacity.</para>
            <para><see cref="System.Collections.SortedList.TrimToSize" /> can also be used to reduce 
 the capacity of the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <seealso cref="System.Collections.SortedList.TrimToSize" />
    </doc><doc for="SortedList.Count">
        <summary>
            <para>Gets the number of elements contained in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.SortedList" />.</para>
        </value>
        <remarks>
            <para>Each element is a key-and-value pair that can be accessed as a <see cref="System.Collections.DictionaryEntry" /> object.</para>
        </remarks>
        <seealso cref="System.Collections.SortedList.Capacity" />
    </doc><doc for="SortedList.Keys">
        <summary>
            <para>Gets the keys in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the keys in the
<see cref="System.Collections.SortedList" />.</para>
        </value>
        <remarks>
            <para>The <see cref="System.Collections.ICollection" /> is a read-only view of the keys of the <see cref="System.Collections.SortedList" />.
 Modifications made to the underlying <see cref="System.Collections.SortedList" /> are immediately reflected in the <see cref="System.Collections.ICollection" />.</para>
            <para>The elements of the <see cref="System.Collections.ICollection" /> are sorted in the same order as the keys
 of the <see cref="System.Collections.SortedList" />.</para>
            <para>Similar to <see cref="System.Collections.SortedList.GetKeyList" />, but returns an <see cref="System.Collections.ICollection" />
 instead of an <see cref="System.Collections.IList" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.SortedList.Values" />
        <seealso cref="System.Collections.SortedList.GetKeyList" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.Values">
        <summary>
            <para>Gets the values in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the values
 in the <see cref="System.Collections.SortedList" />.</para>
        </value>
        <remarks>
            <para>The <see cref="System.Collections.ICollection" /> is a read-only view of the values of the <see cref="System.Collections.SortedList" />.
 Modifications made to the underlying <see cref="System.Collections.SortedList" /> are immediately reflected in the <see cref="System.Collections.ICollection" />.</para>
            <para>The elements of the <see cref="System.Collections.ICollection" /> are sorted in the same order as the values 
 of the <see cref="System.Collections.SortedList" />.</para>
            <para>Similar to <see cref="System.Collections.SortedList.GetValueList" />, but returns an <see cref="System.Collections.ICollection" />
 instead of an <see cref="System.Collections.IList" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="System.Collections.SortedList.Keys" />
        <seealso cref="System.Collections.SortedList.GetValueList" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.SortedList" /> is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.SortedList" /> is read-only; otherwise, <see langword="false" />.
 The default is <see langword="false" />. </para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="SortedList.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.SortedList" /> has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.SortedList" /> has a fixed size; 
    otherwise, <see langword="false" />. The default is <see langword="false" />. </para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="SortedList.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.SortedList" />
is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.SortedList" /> is synchronized
 (thread-safe); otherwise, <see langword="false" />. The
 default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.SortedList" />,
 all operations must be done through the wrapper returned by the <see cref="System.Collections.SortedList.Synchronized" /> method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.SortedList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">SortedList myCollection = new SortedList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New SortedList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize a
 <see cref="System.Collections.SortedList" />, determine if a <see cref="System.Collections.SortedList" />
 is synchronized and use a synchronized <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.IsSynchronized Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.SyncRoot" />
        <seealso cref="System.Collections.SortedList.Synchronized" />
    </doc><doc for="SortedList.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to
 the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the
 <see cref="System.Collections.SortedList" />.</para>
        </value>
        <remarks>
            <para>To create a synchronized version of the <see cref="System.Collections.SortedList" />, use the <see cref="System.Collections.SortedList.Synchronized" /> method.
 However, derived classes can provide their own synchronized version of the <see cref="System.Collections.SortedList" /> using the <see cref="System.Collections.SortedList.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.SortedList.SyncRoot" /> of the <see cref="System.Collections.SortedList" />,
 not directly on the <see cref="System.Collections.SortedList" />. This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.SortedList" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.SortedList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">SortedList myCollection = new SortedList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New SortedList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.SortedList.IsSynchronized" />
        <seealso cref="System.Collections.SortedList.Synchronized" />
    </doc><doc for="SortedList.Clear">
        <summary>
            <para>Removes all elements from the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.SortedList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.SortedList" /> has a fixed size.</para></exception>
        <remarks>
            <para><see cref="System.Collections.SortedList.Count" /> is set to zero. <see cref="System.Collections.SortedList.Capacity" /> remains unchanged. To reset the 
    capacity of the <see cref="System.Collections.SortedList" />, call
 <see cref="System.Collections.SortedList.TrimToSize" /> or 
    set the <see cref="System.Collections.SortedList.Capacity" /> property directly. Trimming an empty <see cref="System.Collections.SortedList" /> sets the capacity of the <see cref="System.Collections.SortedList" /> to the default capacity, not zero.</para>
        </remarks>
        <example>
            <para>The following example shows how to trim the unused 
       portions of the <see cref="System.Collections.SortedList" /> and how to clear the values of the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.Clear Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.TrimToSize" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso cref="System.Collections.SortedList.Count" />
    </doc><doc for="SortedList.Clone">
        <summary>
            <para>Creates a shallow copy of the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <returns>
            <para>A shallow copy of the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <remarks>
            <para> A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types,
 but it does not copy the objects that the references refer to.
 The references in the new collection point to the same objects that the references in the original collection point to.</para>
            <para>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</para>
        </remarks>
        <seealso cref="System.Collections.SortedList.CopyTo" />
    </doc><doc for="SortedList.Contains">
        <summary>
            <para>Determines whether the <see cref="System.Collections.SortedList" /> contains a specific key.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.SortedList" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.SortedList" />
contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
<exception cref="System.InvalidOperationException">The comparer throws an exception.</exception>
        <remarks>
            <para>The elements of a <see cref="System.Collections.SortedList" /> are sorted by the keys either
 according to a specific <see cref="System.Collections.IComparer" /> implementation specified when
 the <see cref="System.Collections.SortedList" /> is created or according to
 the <see cref="System.IComparable" /> implementation provided by the keys themselves.</para>
            <para>This method uses a binary search algorithm; therefore, the average execution time is proportional to <paramref name="Log2" />(<paramref name="n" />),
where <paramref name="n" /> is <see cref="System.Collections.SortedList.Count" />.</para>
            <para><see cref="System.Collections.SortedList.Contains" /> implements <see cref="System.Collections.IDictionary.Contains" qualify="true" />. It behaves exactly as <see cref="System.Collections.SortedList.ContainsKey" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine
 whether the <see cref="System.Collections.SortedList" /> contains a specific element.</para>
            <codelink SampleID="Classic SortedList.Contains Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.ContainsKey" />
        <seealso cref="System.Collections.SortedList.IndexOfKey" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.ContainsKey">
        <summary>
            <para>Determines whether the <see cref="System.Collections.SortedList" /> contains a specific key.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.SortedList" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.SortedList" />
contains an element with the specified <paramref name="key" />;
otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />. </exception>
<exception cref="System.InvalidOperationException">The comparer throws an exception.</exception>
        <remarks>
            <para>The elements of a <see cref="System.Collections.SortedList" /> are sorted by the keys either
 according to a specific <see cref="System.Collections.IComparer" /> implementation specified when
 the <see cref="System.Collections.SortedList" /> is created or according to
 the <see cref="System.IComparable" /> implementation provided by the keys themselves.</para>
            <para>This method uses a binary search algorithm; therefore, the average execution time is proportional to <paramref name="Log2" />(<paramref name="n" />),
where <paramref name="n" /> is <see cref="System.Collections.SortedList.Count" />.</para>
            <para>This method behaves exactly as <see cref="System.Collections.SortedList.Contains" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine
 whether the <see cref="System.Collections.SortedList" /> contains a specific element.</para>
            <codelink SampleID="Classic SortedList.Contains Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.Contains" />
        <seealso cref="System.Collections.SortedList.ContainsValue" />
        <seealso cref="System.Collections.SortedList.IndexOfKey" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.ContainsValue">
        <summary>
            <para>Determines whether the <see cref="System.Collections.SortedList" /> contains a specific value.</para>
        </summary>
        <param name="value">The value to locate in the <see cref="System.Collections.SortedList" />. The value can be <see langword="null" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.SortedList" /> contains an element with
   the specified <paramref name="value" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time
      is proportional to <see cref="System.Collections.SortedList.Count" />. That is, this method is an
      O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.SortedList.Count" />.</para>
            <para>The values of the elements of the <see cref="System.Collections.SortedList" /> are compared to the
   specified value using the <see cref="System.Object.Equals" /> method.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine
      whether the <see cref="System.Collections.SortedList" /> contains a specific element.</para>
            <codelink SampleID="Classic SortedList.Contains Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.ContainsKey" />
        <seealso cref="System.Collections.SortedList.IndexOfValue" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.CopyTo">
        <summary>
            <para>Copies the <see cref="System.Collections.SortedList" /> elements to a one-dimensional <see cref="System.Array" /> instance at the
 specified index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the <see cref="System.Collections.DictionaryEntry" /> objects copied from <see cref="System.Collections.SortedList" />. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.SortedList" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The key-and-value pairs are copied to the <see cref="System.Array" /> in the same order in which the enumerator iterates
 through the <see cref="System.Collections.SortedList" />.</para>
            <para>To copy only the keys in the <see cref="System.Collections.SortedList" />,
use <c>SortedList.Keys.CopyTo</c>.</para>
            <para>To copy only the values in the <see cref="System.Collections.SortedList" />,
use <c>SortedList.Values.CopyTo</c>.</para>
        </remarks>
        <example>
            <para> The following example shows how to copy the values in a <see cref="System.Collections.SortedList" /> into a one-dimensional <see cref="System.Array" />.</para>
            <codelink SampleID="Classic SortedList.CopyTo Example" SnippetID="1" />
        </example>
        <seealso cref="System.Array" />
        <seealso cref="System.Collections.DictionaryEntry" />
        <seealso cref="System.Collections.SortedList.GetEnumerator" />
    </doc><doc for="SortedList.GetByIndex">
        <summary>
            <para>Gets the value at the specified index of the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="index">The zero-based index of the value to get.</param>
        <returns>
            <para>The value at the specified index of the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is outside the range of valid indexes for the <see cref="System.Collections.SortedList" />.</exception>
        <remarks>
            <para>The index sequence is based on the sort sequence.
 When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order,
 and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
 Therefore, the index of a specific key-and-value pair might change
 as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to get one or all
 the keys or values in the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.GetByIndex Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.IndexOfKey" />
        <seealso cref="System.Collections.SortedList.IndexOfValue" />
    </doc><doc for="SortedList.IEnumerable.GetEnumerator">
        <summary>
            <para>Returns an <see cref="System.Collections.IEnumerator" /> that can iterate through the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="SortedList.GetEnumerator">
        <summary>
            <para> Returns an <see cref="System.Collections.IDictionaryEnumerator" /> that can iterate
   through the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IDictionaryEnumerator" /> for the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="SortedList.GetKey">
        <summary>
            <para>Gets the key at the specified index of the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="index">The zero-based index of the key to get.</param>
        <returns>
            <para>The key at the specified index of the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is outside the range of valid indexes for the <see cref="System.Collections.SortedList" />. </exception>
        <remarks>
            <para>The index sequence is based on the sort sequence.
 When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order, 
 and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
 Therefore, the index of a specific key-and-value pair might change
 as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to get one or all
 the keys or values in the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.GetByIndex Example" SnippetID="1" />
        </example>
    </doc><doc for="SortedList.GetKeyList">
        <summary>
            <para>Gets the keys in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IList" /> containing the keys in the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <remarks>
            <para>The returned <see cref="System.Collections.IList" /> is a read-only view of the keys
    of the <see cref="System.Collections.SortedList" />. Modifications made to the underlying
 <see cref="System.Collections.SortedList" /> are immediately reflected in the <see cref="System.Collections.IList" />.</para>
            <para>The elements of the returned <see cref="System.Collections.IList" /> are
 sorted in the same order as the keys of the <see cref="System.Collections.SortedList" />.</para>
            <para>Similar to <see cref="System.Collections.SortedList.Keys" />, but returns an <see cref="System.Collections.IList" /> instead of an <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to get one or all 
       the keys or values in the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.GetByIndex Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IList" />
        <seealso cref="System.Collections.SortedList.GetValueList" />
        <seealso cref="System.Collections.SortedList.Keys" />
    </doc><doc for="SortedList.GetValueList">
        <summary>
            <para>Gets the values in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IList" /> containing the values in the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <remarks>
            <para>The returned <see cref="System.Collections.IList" /> is a read-only view of the values of
    the <see cref="System.Collections.SortedList" />.
    Modifications made to the underlying <see cref="System.Collections.SortedList" /> are immediately reflected in the <see cref="System.Collections.IList" />.</para>
            <para>The elements of the returned <see cref="System.Collections.IList" /> are
 sorted in the same order as the values of the <see cref="System.Collections.SortedList" />.</para>
            <para>Similar to <see cref="System.Collections.SortedList.Values" />, but returns an <see cref="System.Collections.IList" /> instead of an <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to get one or all 
       the keys or values in the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.GetByIndex Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.IList" />
        <seealso cref="System.Collections.SortedList.GetKeyList" />
        <seealso cref="System.Collections.SortedList.Values" />
    </doc><doc for="SortedList.this">
        <summary>
            <para>Gets and sets the value associated with a specific key
      in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="key">The key associated with the value to get or set.</param>
        <value>
            <para>The value associated with <paramref name="key" /> in the <see cref="System.Collections.SortedList" />,
   if <paramref name="key" /> is found; otherwise, <see langword="null" />.</para>
        </value>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="System.NotSupportedException"><para>The property is set and the <see cref="System.Collections.SortedList" /> is read-only.</para><para>-or-</para><para>The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="System.Collections.SortedList" /> has a fixed size.</para></exception>
<exception cref="System.InvalidOperationException">The comparer throws an exception.</exception>
        <remarks>
            <para>This property provides the ability to access a specific element in the
      collection by using the following syntax: <c>myCollection[key]</c>.</para>
            <para>When setting this property, if the specified key already exists in the
   <see cref="System.Collections.SortedList" />, the value is replaced; otherwise,
      a new element is created. In contrast, the <see cref="System.Collections.SortedList.Add" /> method does not modify existing elements. </para>
            <para>A key cannot be <see langword="null" />, but a value can be.
 To distinguish between <see langword="null" /> that is returned because the specified key is not found
 and <see langword="null" /> that is returned because the value of the specified key is <see langword="null" />,
 use the <see cref="System.Collections.SortedList.Contains" /> method
 or the <see cref="System.Collections.SortedList.ContainsKey" /> method
 to determine if the key exists in the list.</para>
            <para>The elements of a <see cref="System.Collections.SortedList" /> are sorted by the keys either
according to a specific <see cref="System.Collections.IComparer" /> implementation specified when
the <see cref="System.Collections.SortedList" /> is created or according to
the <see cref="System.IComparable" /> implementation provided by the keys themselves.</para>
        </remarks>
        <seealso cref="System.Collections.SortedList.Add" />
        <seealso cref="System.Collections.SortedList.Contains" />
        <seealso cref="System.Collections.SortedList.ContainsKey" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.IndexOfKey">
        <summary>
            <para>Returns the zero-based index of the specified key in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.SortedList" />.</param>
        <returns>
            <para>The zero-based index of <paramref name="key" />, if
<paramref name="key" /> is found in the <see cref="System.Collections.SortedList" />; otherwise, -1.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
<exception cref="System.InvalidOperationException">The comparer throws an exception.</exception>
        <remarks>
            <para>The elements of a <see cref="System.Collections.SortedList" /> are sorted by the keys either
 according to a specific <see cref="System.Collections.IComparer" /> implementation specified when
 the <see cref="System.Collections.SortedList" /> is created or according to
 the <see cref="System.IComparable" /> implementation provided by the keys themselves.</para>
            <para>The index sequence is based on the sort sequence.
 When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order, 
 and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
 Therefore, the index of a specific key-and-value pair might change
 as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
            <para>This method uses a binary search algorithm; therefore, the average execution time is proportional to <paramref name="Log2" />(<paramref name="n" />),
where <paramref name="n" /> is <see cref="System.Collections.SortedList.Count" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of a key or a
 value in a <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.IndexOfKey Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.ContainsKey" />
        <seealso cref="System.Collections.SortedList.IndexOfValue" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.IndexOfValue">
        <summary>
            <para>Returns the zero-based index of the first occurrence of the specified
      value in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="value">The value to locate in the <see cref="System.Collections.SortedList" />. The value can be <see langword="null" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" />, if <paramref name="value" /> is found in the <see cref="System.Collections.SortedList" />; otherwise, -1.</para>
        </returns>
        <remarks>
            <para>The index sequence is based on the sort sequence.
      When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order,
      and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
      Therefore, the index of a specific key-and-value pair might change
      as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
            <para>The values of the elements of the <see cref="System.Collections.SortedList" /> are compared to the
   specified value using the <see cref="System.Object.Equals" /> method.</para>
            <para>This method uses a linear search;
   therefore, the average execution time is proportional to <see cref="System.Collections.SortedList.Count" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to determine the index of a key or a
      value in a <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.IndexOfKey Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.ContainsValue" />
        <seealso cref="System.Collections.SortedList.IndexOfKey" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.RemoveAt">
        <summary>
            <para>Removes the element at the specified index of <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="index">The zero-based index of the element to remove.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is outside the range of valid indexes for the <see cref="System.Collections.SortedList" />. </exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.SortedList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.SortedList" /> has a fixed size.</para></exception>
        <remarks>
            <para>The index sequence is based on the sort sequence.
 When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order, 
 and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
 Therefore, the index of a specific key-and-value pair might change
 as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to remove elements from the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.RemoveAt Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.Remove" />
    </doc><doc for="SortedList.Remove">
        <summary>
            <para>Removes the element with the specified key from <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="key">The key of the element to remove.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />. </exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.SortedList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.SortedList" /> has a fixed size.</para></exception>
        <remarks>
            <para>If the <see cref="System.Collections.SortedList" /> does not contain an element with the 
    specified key, the <see cref="System.Collections.SortedList" /> remains unchanged. No exception is
    thrown.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <example>
            <para>The following example shows how to remove elements from the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.RemoveAt Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.RemoveAt" />
        <seealso topic="cpconperformingculture-insensitivestringoperationsincollections" />
    </doc><doc for="SortedList.SetByIndex">
        <summary>
            <para>Replaces the value at a specific index in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="index">The zero-based index at which to save <paramref name="value" />.</param>
        <param name="value">The <see cref="System.Object" /> to save into the <see cref="System.Collections.SortedList" />. The value can be <see langword="null" />.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is outside the range of valid indexes for the <see cref="System.Collections.SortedList" />. </exception>
        <remarks>
            <para>The index sequence is based on the sort sequence.
      When an element is added, it is inserted into <see cref="System.Collections.SortedList" /> in the correct sort order,
      and the indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
      Therefore, the index of a specific key-and-value pair might change
      as elements are added or removed from the <see cref="System.Collections.SortedList" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to replace the value of an existing
      element in the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.SetByIndex Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.IndexOfKey" />
        <seealso cref="System.Collections.SortedList.IndexOfValue" />
    </doc><doc for="SortedList.Synchronized">
        <summary>
            <para>Returns a synchronized (thread-safe) wrapper for the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <param name="list">The <see cref="System.Collections.SortedList" /> to synchronize.</param>
        <returns>
            <para>A synchronized (thread-safe) wrapper for the <see cref="System.Collections.SortedList" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="list" /> is <see langword="null" />.</exception>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.SortedList" />,
 all operations must be done through this wrapper only.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.SortedList.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">SortedList myCollection = new SortedList();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New SortedList()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize a
 <see cref="System.Collections.SortedList" />, determine if a <see cref="System.Collections.SortedList" />
 is synchronized and use a synchronized <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.IsSynchronized Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.IsSynchronized" />
        <seealso cref="System.Collections.SortedList.SyncRoot" />
    </doc><doc for="SortedList.TrimToSize">
        <summary>
            <para>Sets the capacity to the actual number of elements in the <see cref="System.Collections.SortedList" />.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.SortedList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.SortedList" /> has a fixed size.</para></exception>
        <remarks>
            <para>This method can be used to minimize a list's memory overhead if no new
       elements will be added to the list.</para>
            <para>To completely clear all elements in a list,
       call the <see cref="System.Collections.SortedList.Clear" /> method before calling <see cref="System.Collections.SortedList.TrimToSize" />. Trimming an empty <see cref="System.Collections.SortedList" />
       sets the capacity of the <see cref="System.Collections.SortedList" /> to the default capacity, not zero.</para>
        </remarks>
        <example>
            <para>The following example shows how to trim the unused 
       portions of the <see cref="System.Collections.SortedList" /> and how to clear the values of the <see cref="System.Collections.SortedList" />.</para>
            <codelink SampleID="Classic SortedList.Clear Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.SortedList.Clear" />
        <seealso cref="System.Collections.SortedList.Capacity" />
        <seealso cref="System.Collections.SortedList.Count" />
    </doc>
</docs>
