<docs>
    <doc for="DictionaryBase">
        <summary>
            <para>Provides the <see langword="abstract" /> base class for a strongly typed collection of key-and-value pairs.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
 Instance members are not guaranteed to be thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="System.Collections.DictionaryBase" />,
 but derived classes can create their own synchronized versions of the <see cref="System.Collections.DictionaryBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para lang="VB, C#">The <see langword="foreach" /> statement of the C# language (<see langword="for each" /> in Visual Basic) 
 requires the type of each element in the collection.
 Since each element of the <see cref="System.Collections.DictionaryBase" /> is a key-and-value pair,
 the element type is not the type of the key or the type of the value.
 Instead, the element type is <see cref="System.Collections.DictionaryEntry" />.
 For example:</para>
            <code lang="C#">foreach (DictionaryEntry myDE in myDictionary) {...}
</code>
            <code lang="VB">Dim myDE As DictionaryEntry
For Each myDE In myDictionary
   ...
Next myDE
</code>
            <para lang="VB, C#">The <see langword="foreach" /> statement is a wrapper around the enumerator,
 which only allows reading from, not writing to, the collection.</para>
            <note type="inotes">
            </note>
            <para>This base class is provided to make it easier for implementers to create a strongly typed custom collection.
   Implementers should extend this base class instead of creating their own.</para>
            <para>Members of this base class are protected and are intended to be used through a derived class only.</para>
        </remarks>
        <example>
            <para>The following code example implements the <see cref="System.Collections.DictionaryBase" /> class
 and uses that implementation to create a dictionary of <see cref="System.String" /> keys and values
 that have a <see cref="System.String.Length" /> of 5 characters or less.</para>
            <codelink SampleID="System.Collections.DictionaryBase" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Hashtable" qualify="true" />
        <seealso cref="System.Collections.IDictionary" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="DictionaryBase.InnerHashtable">
        <summary>
            <para>Gets the list of elements contained in the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <value>
            <para>A <see cref="System.Collections.Hashtable" qualify="true" /> representing the <see cref="System.Collections.DictionaryBase" /> instance itself.</para>
        </value>
        <remarks>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
        </remarks>
    </doc><doc for="DictionaryBase.Dictionary">
        <summary>
            <para>Gets the list of elements contained in the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.IDictionary" /> representing the <see cref="System.Collections.DictionaryBase" /> instance itself.</para>
        </value>
        <remarks>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
        </remarks>
    </doc><doc for="DictionaryBase.Count">
        <summary>
            <para>Gets the number of elements contained in the 
    <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </value>
    </doc><doc for="DictionaryBase.IDictionary.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.DictionaryBase" /> is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.DictionaryBase" /> is read-only;
    otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="DictionaryBase.IDictionary.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.DictionaryBase" /> has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.DictionaryBase" /> has a fixed size;
    otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="DictionaryBase.ICollection.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.DictionaryBase" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.DictionaryBase" /> is synchronized (thread-safe);
   otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A <see cref="System.Collections.DictionaryBase" /> instance is not synchronized.
 Derived classes can provide a synchronized version of the <see cref="System.Collections.DictionaryBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ICollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">DictionaryBase myCollection = new DictionaryBase();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New DictionaryBase()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Hashtable.Synchronized" qualify="true" />
        <seealso cref="System.Collections.ICollection.SyncRoot" />
    </doc><doc for="DictionaryBase.IDictionary.Keys">
        <summary>
            <para>Gets an <see cref="System.Collections.ICollection" /> containing the keys in the <see cref="System.Collections.DictionaryBase" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the keys in the <see cref="System.Collections.DictionaryBase" />.</para>
        </value>
        <remarks>
            <para>The order of the keys in the <see cref="System.Collections.ICollection" /> is unspecified, but it is
    the same order as the associated values in the <see cref="System.Collections.ICollection" />
    returned by the <see cref="P:System.Collections.IDictionary.Values" /> property.</para>
            <para> The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the keys
 in the original <see cref="System.Collections.DictionaryBase" />.
 Therefore, changes to the <see cref="System.Collections.DictionaryBase" />
 continue to be reflected in the returned <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="P:System.Collections.IDictionary.Values" />
    </doc><doc for="DictionaryBase.ICollection.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </value>
        <remarks>
            <para>Derived classes can provide their own synchronized version of the <see cref="System.Collections.DictionaryBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.
   The synchronizing code must perform operations on the <see cref="System.Collections.ICollection.SyncRoot" /> of the <see cref="System.Collections.DictionaryBase" />,
   not directly on the <see cref="System.Collections.DictionaryBase" />. This ensures proper operation of collections that are derived from other objects.
   Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.DictionaryBase" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ICollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">DictionaryBase myCollection = new DictionaryBase();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New DictionaryBase()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="P:System.Collections.ICollection.IsSynchronized" />
        <seealso cref="System.Collections.Hashtable.Synchronized" qualify="true" />
    </doc><doc for="DictionaryBase.IDictionary.Values">
        <summary>
            <para>Gets an <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.DictionaryBase" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.DictionaryBase" />.</para>
        </value>
        <remarks>
            <para>The order of the values in the <see cref="System.Collections.ICollection" /> is unspecified, but it is
    the same order as the associated keys in the <see cref="System.Collections.ICollection" /> returned by the <see cref="P:System.Collections.IDictionary.Keys" /> method.</para>
            <para> The returned <see cref="System.Collections.ICollection" /> is not a static copy;
 instead, the <see cref="System.Collections.ICollection" /> refers back to the values
 in the original <see cref="System.Collections.DictionaryBase" />.
 Therefore, changes to the <see cref="System.Collections.DictionaryBase" />
 continue to be reflected in the returned <see cref="System.Collections.ICollection" />.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
        <seealso cref="P:System.Collections.IDictionary.Keys" />
    </doc><doc for="DictionaryBase.CopyTo">
        <summary>
            <para>Copies the <see cref="System.Collections.DictionaryBase" /> elements to a one-dimensional <see cref="System.Array" /> at the specified index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the <see cref="System.Collections.DictionaryEntry" /> objects copied from the <see cref="System.Collections.DictionaryBase" /> instance. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.DictionaryBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.DictionaryBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The elements are copied to the <see cref="System.Array" /> in the same order in which the enumerator iterates through the <see cref="System.Collections.DictionaryBase" />.</para>
        </remarks>
        <seealso cref="System.Array" qualify="true" />
        <seealso cref="System.Collections.DictionaryEntry" />
        <seealso cref="System.Collections.DictionaryBase.GetEnumerator" />
    </doc><doc for="DictionaryBase.IDictionary.this">
        <summary>
            <para>Gets or sets the value associated with the specified key.</para>
        </summary>
        <param name=" key">The key whose value to get or set.</param>
        <value>
            <para>The value associated with the specified key. If the specified key is not 
      found, attempting to get it returns <see langword="null" />, and attempting to set
      it creates a new element using the specified key.</para>
        </value>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />. </exception>
        <exception cref="System.NotSupportedException"><para>The property is set and the <see cref="System.Collections.DictionaryBase" /> is read-only.</para><para>-or-</para><para>The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="System.Collections.DictionaryBase" /> has a fixed size.</para></exception>
        <remarks>
            <para>This property provides the ability to access a specific element in the 
      collection by using the following syntax: <c>myCollection[key]</c>.</para>
            <para>When setting this property, if the specified key already exists in the 
   <see cref="System.Collections.DictionaryBase" />, the value is replaced; otherwise, a new 
      element is created. In contrast, the <see cref="M:System.Collections.IDictionary.Add" /> method does not modify
      existing elements.</para>
        </remarks>
        <seealso cref="M:System.Collections.IDictionary.Add" />
    </doc><doc for="DictionaryBase.IDictionary.Contains">
        <summary>
            <para>Determines whether the <see cref="System.Collections.DictionaryBase" /> contains a specific key.</para>
        </summary>
        <param name=" key">The key to locate in the <see cref="System.Collections.DictionaryBase" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.DictionaryBase" /> 
contains an element with the specified key; otherwise,
<see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />. </exception>
        <remarks>
            <para>This implementation is close to O(1) in most cases.</para>
        </remarks>
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="DictionaryBase.IDictionary.Add">
        <summary>
            <para>Adds an element with the specified key and value into 
      the <see cref="System.Collections.DictionaryBase" />.</para>
        </summary>
        <param name=" key">The key of the element to add.</param>
        <param name=" value">The value of the element to add.</param>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="key" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><para>An element with the same key already exists in the <see cref="System.Collections.DictionaryBase" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.DictionaryBase" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.DictionaryBase" /> has a fixed size.</para></exception>
<remarks>
            <para>An object that has no correlation between its state and its hash code value 
      should typically not be used as the key. For example, <see cref="System.String" /> objects are better
      than <see cref="System.Text.StringBuilder" /> objects for use as keys.</para>
            <para>The <see cref="System.Collections.IDictionary.this" /> property can also be used to add 
   new elements by setting the value of a key that does not exist in the <see cref="System.Collections.DictionaryBase" />.
   For example: <c>myCollection["myNonexistentKey"] = myValue</c>. However, if the
specified key already exists in the <see cref="System.Collections.DictionaryBase" />, setting the <see cref="System.Collections.IDictionary.this" /> property overwrites the old value.
In contrast, the <see cref="M:System.Collections.IDictionary.Add" /> method does not modify existing
elements.</para>
        </remarks>
        <seealso cref="M:System.Collections.IDictionary.Remove" />
        <seealso cref="System.Collections.IDictionary.this" qualify="true" />
        <seealso cref="System.Collections.IDictionary.Add" qualify="true" />
    </doc><doc for="DictionaryBase.Clear">
        <summary>
            <para>Clears the contents of the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.DictionaryBase.Count" /> is set to zero.</para>
        </remarks>
    </doc><doc for="DictionaryBase.IDictionary.Remove">
        <summary>
            <para>Removes the element with the specified key from the <see cref="System.Collections.DictionaryBase" />.</para>
        </summary>
        <param name=" key">The key of the element to remove.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />. </exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.DictionaryBase" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.DictionaryBase" /> has a fixed size.</para></exception>
        <remarks>
            <para>If the <see cref="System.Collections.DictionaryBase" /> does not contain an element with the 
   specified key, the <see cref="System.Collections.DictionaryBase" /> remains unchanged. No exception is
   thrown.</para>
        </remarks>
        <seealso cref="M:System.Collections.IDictionary.Add" />
        <seealso cref="System.Collections.IDictionary.Remove" qualify="true" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="DictionaryBase.GetEnumerator">
        <summary>
            <para>Returns an <see cref="System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IDictionaryEnumerator" /> for the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="DictionaryBase.IEnumerable.GetEnumerator">
        <summary>
            <para>Returns an <see cref="System.Collections.IEnumerator" /> that can iterate through the <see cref="System.Collections.DictionaryBase" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.DictionaryBase" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="DictionaryBase.OnGet">
        <summary>
            <para>Gets the element with the specified key and value in the
   <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to get.</param>
        <param name="currentValue">The current value of the element associated with <paramref name="key" />.</param>
        <returns>
            <para>An <see cref="System.Object" /> containing the element with the specified key and
   value.</para>
        </returns>
        <remarks>
            <para>The default implementation of this method returns <paramref name="currentValue" />.
   It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define processes
   that must be performed when executing the standard Get behavior of the
   underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnGet" /> can be used to specify processes to
perform before returning the value retrieved from the underlying <see cref="System.Collections.Hashtable" qualify="true" />. For example, implementers can cast the
value into another type before returning it.</para>
        </remarks>
    </doc><doc for="DictionaryBase.OnSet">
        <summary>
            <para>Performs additional custom processes before setting a value in the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to locate.</param>
        <param name="oldValue">The old value of the element associated with <paramref name="key" />.</param>
        <param name="newValue">The new value of the element associated with <paramref name="key" />.</param>
        <remarks>
            <para> The default implementation of this method is intended to
      be overridden by a derived class to perform some action before the specified element is set.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define processes
   that must be performed before setting the specified element in the
   underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnSet" /> is invoked before the
standard Set behavior, whereas <see cref="System.Collections.DictionaryBase.OnSetComplete" />
is invoked after the standard Set behavior.</para>
            <para> For example, implementers can restrict which values can be overwritten by performing a check inside <see cref="System.Collections.DictionaryBase.OnSet" />.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnSetComplete" />
        <seealso cref="System.Collections.DictionaryBase.OnInsert" />
        <seealso cref="System.Collections.DictionaryBase.OnValidate" />
    </doc><doc for="DictionaryBase.OnInsert">
        <summary>
            <para>Performs additional custom processes before inserting a new element into the
   <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to insert.</param>
        <param name="value">The value of the element to insert.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action before the specified element is inserted.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define
   processes that must be performed before inserting the element into the
   underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnInsert" /> is invoked before the standard Insert
behavior, whereas <see cref="System.Collections.DictionaryBase.OnInsertComplete" /> is invoked after the
standard Insert behavior.</para>
            <para> For example, implementers can restrict which types of objects can be inserted into
   the <see cref="System.Collections.Hashtable" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnInsertComplete" />
        <seealso cref="System.Collections.DictionaryBase.OnSet" />
        <seealso cref="System.Collections.DictionaryBase.OnValidate" />
    </doc><doc for="DictionaryBase.OnClear">
        <summary>
            <para>Performs additional custom processes before clearing the contents of the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action before the collection is cleared.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define processes
   that must be performed before deleting all the elements from the
   underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear
behavior, whereas <see cref="System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</para>
            <para> For example, implementers can exempt certain elements from deletion by a global Clear.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnClearComplete" />
        <seealso cref="System.Collections.DictionaryBase.OnRemove" />
    </doc><doc for="DictionaryBase.OnRemove">
        <summary>
            <para> Performs additional custom processes before removing an element from the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to remove.</param>
        <param name="value">The value of the element to remove.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action before the specified element is removed.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define
   processes that must be performed before removing the element from the
   underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnRemove" /> is invoked before the standard Remove
behavior, whereas <see cref="System.Collections.DictionaryBase.OnRemoveComplete" /> is invoked after the standard Remove behavior.</para>
            <para> For example, implementers can prevent removal of elements by always throwing an
   exception in <see cref="System.Collections.DictionaryBase.OnRemove" />.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnRemoveComplete" />
        <seealso cref="System.Collections.DictionaryBase.OnClear" />
    </doc><doc for="DictionaryBase.OnValidate">
        <summary>
            <para>Performs additional custom processes when validating the element with the specified key and value.</para>
        </summary>
        <param name="key">The key of the element to validate.</param>
        <param name="value">The value of the element to validate.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action when the specified element is validated.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed when executing the standard behavior of the
   underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnValidate" /> can be used to impose restrictions on the type of objects that are
accepted into the collection. The default implementation prevents <see langword="null" /> from being added to or removed from
the underlying <see cref="System.Collections.Hashtable" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnSet" />
        <seealso cref="System.Collections.DictionaryBase.OnInsert" />
    </doc><doc for="DictionaryBase.OnSetComplete">
        <summary>
            <para>Performs additional custom processes after setting a value in the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to locate.</param>
        <param name="oldValue">The old value of the element associated with <paramref name="key" />.</param>
        <param name="newValue">The new value of the element associated with <paramref name="key" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to
      be overridden by a derived class to perform some action after the specified element is set.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after setting the specified element in the underlying
<see cref="System.Collections.Hashtable" qualify="true" />. By defining this method,
   implementers can add functionality to inherited
   methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnSet" /> is invoked before the
standard Set behavior, whereas <see cref="System.Collections.DictionaryBase.OnSetComplete" />
is invoked after the standard Set behavior.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnSet" />
        <seealso cref="System.Collections.DictionaryBase.OnInsertComplete" />
    </doc><doc for="DictionaryBase.OnInsertComplete">
        <summary>
            <para>Performs additional custom processes after inserting a
      new element into the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to insert.</param>
        <param name="value">The value of the element to insert.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the specified element is inserted.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after inserting the element into the underlying
<see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to inherited methods
   without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnInsert" /> is invoked before the standard Insert
behavior, whereas <see cref="System.Collections.DictionaryBase.OnInsertComplete" /> is invoked after the standard Insert behavior.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnInsert" />
        <seealso cref="System.Collections.DictionaryBase.OnSetComplete" />
    </doc><doc for="DictionaryBase.OnClearComplete">
        <summary>
            <para>Performs additional custom processes after clearing the contents of the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the collection is cleared.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after deleting all the elements from the underlying
<see cref="System.Collections.Hashtable" qualify="true" />. By defining this method, implementers can add functionality to inherited
   methods without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear
behavior, whereas <see cref="System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnClear" />
        <seealso cref="System.Collections.DictionaryBase.OnRemoveComplete" />
    </doc><doc for="DictionaryBase.OnRemoveComplete">
        <summary>
            <para>Performs additional custom processes after removing an
      element from the <see cref="System.Collections.DictionaryBase" /> instance.</para>
        </summary>
        <param name="key">The key of the element to remove.</param>
        <param name="value">The value of the element to remove.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the specified element is removed.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.DictionaryBase.Dictionary" /> property,
 but not on the instance returned by the <see cref="System.Collections.DictionaryBase.InnerHashtable" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after removing the element from the underlying <see cref="System.Collections.Hashtable" qualify="true" />.
   By defining this method, implementers can add functionality to inherited methods
   without having to override all other methods.</para>
            <para><see cref="System.Collections.DictionaryBase.OnRemove" /> is invoked before the standard Remove
behavior, whereas <see cref="System.Collections.DictionaryBase.OnRemoveComplete" /> is invoked after the standard Remove behavior.</para>
        </remarks>
        <seealso cref="System.Collections.DictionaryBase.OnRemove" />
        <seealso cref="System.Collections.DictionaryBase.OnClearComplete" />
    </doc>
</docs>
