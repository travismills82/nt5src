<docs>
    <doc for="ReadOnlyCollectionBase">
        <summary>
            <para>Provides the <see langword="abstract" /> base class for
   a strongly typed read-only collection.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
 Instance members are not guaranteed to be thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="System.Collections.ReadOnlyCollectionBase" />,
 but derived classes can create their own synchronized versions of the <see cref="System.Collections.ReadOnlyCollectionBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>A <see cref="System.Collections.ReadOnlyCollectionBase" /> instance is
   always read-only. See <see cref="System.Collections.CollectionBase" /> for a modifiable
   version of this class.</para>
            <note type="inotes">
            </note>
            <para>This base class is provided to make it easier for implementers to create a strongly typed read-only custom collection.
   Implementers should extend this base class instead of creating their own.
   Members of this base class are protected and are intended to be used through a derived class only.</para>
            <para>This class makes the underlying collection available through the <see cref="System.Collections.ReadOnlyCollectionBase.InnerList" /> property,
 which is intended for use only by classes that are derived directly from <see cref="System.Collections.ReadOnlyCollectionBase" />.
 The derived class must ensure that its own users cannot modify the underlying collection.</para>
        </remarks>
        <seealso cref="System.Collections.ArrayList" qualify="true" />
        <seealso cref="System.Collections.CollectionBase" />
    </doc><doc for="ReadOnlyCollectionBase.InnerList">
        <summary>
            <para>Gets the list of elements contained in the <see cref="System.Collections.ReadOnlyCollectionBase" /> instance.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ArrayList" /> 
 representing the <see cref="System.Collections.ReadOnlyCollectionBase" /> instance
 itself.</para>
        </value>
        <remarks>
            <note type="inotes">
            </note>
            <para>This class makes the underlying collection available through the <see cref="System.Collections.ReadOnlyCollectionBase.InnerList" /> property,
 which is intended for use only by classes that are derived directly from <see cref="System.Collections.ReadOnlyCollectionBase" />.
 The derived class must ensure that its own users cannot modify the underlying collection.</para>
        </remarks>
    </doc><doc for="ReadOnlyCollectionBase.Count">
        <summary>
            <para>Gets the number of elements contained in the 
    <see cref="System.Collections.ReadOnlyCollectionBase" /> instance.</para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.ReadOnlyCollectionBase" /> instance.</para>
        </value>
    </doc><doc for="ReadOnlyCollectionBase.ICollection.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.ReadOnlyCollectionBase" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.ReadOnlyCollectionBase" /> is synchronized (thread-safe); otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A <see cref="System.Collections.ReadOnlyCollectionBase" /> instance is not synchronized.
   Derived classes can provide a synchronized version of the <see cref="System.Collections.ReadOnlyCollectionBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ICollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">ReadOnlyCollectionBase myCollection = new ReadOnlyCollectionBase();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ReadOnlyCollectionBase()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.ICollection.SyncRoot" />
    </doc><doc for="ReadOnlyCollectionBase.ICollection.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.ReadOnlyCollectionBase" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.ReadOnlyCollectionBase" />.</para>
        </value>
        <remarks>
            <para>Derived classes can provide their own synchronized version of the <see cref="System.Collections.ReadOnlyCollectionBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.ICollection.SyncRoot" /> of the <see cref="System.Collections.ReadOnlyCollectionBase" />, not directly on the <see cref="System.Collections.ReadOnlyCollectionBase" />.
 This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.ReadOnlyCollectionBase" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ICollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">ReadOnlyCollectionBase myCollection = new ReadOnlyCollectionBase();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New ReadOnlyCollectionBase()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="P:System.Collections.ICollection.IsSynchronized" />
    </doc><doc for="ReadOnlyCollectionBase.ICollection.CopyTo">
        <summary>
            <para>Copies the entire <see cref="System.Collections.ReadOnlyCollectionBase" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the specified index of the target array.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.ReadOnlyCollectionBase" />. The <see cref="System.Array" /> must have zero-based indexing. </param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.ReadOnlyCollectionBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.ReadOnlyCollectionBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type.</para>
            <para>This method uses <see cref="System.Array.Copy" qualify="true" /> to copy the elements.</para>
        </remarks>
    </doc><doc for="ReadOnlyCollectionBase.GetEnumerator">
        <summary>
            <para>Returns an enumerator that can iterate through the 
    <see cref="System.Collections.ReadOnlyCollectionBase" /> instance.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.ReadOnlyCollectionBase" /> instance.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator" qualify="true" />
    </doc>
</docs>
