<docs>
    <doc for="Queue">
        <summary>
            <para>Represents a first-in, first-out collection of objects.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
   Instance members are not guaranteed to be thread-safe.</para>
            <para>To guarantee the thread safety of the <see cref="System.Collections.Queue" />,
all operations must be done through the wrapper returned by the <see cref="System.Collections.Queue.Synchronized" /> method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>Queues are useful for storing messages in the order they were received for sequential processing.
      This class implements a queue as a circular array.
      Objects stored in a <see cref="System.Collections.Queue" /> are inserted at one end and removed from the other.
      If the number of elements added to the <see cref="System.Collections.Queue" /> reaches the current capacity,
      the capacity is automatically increased to accommodate more elements.
      The capacity can be decreased by calling <see cref="System.Collections.Queue.TrimToSize" />.</para>
            <para><see cref="System.Collections.Queue" /> accepts <see langword="null" /> as a valid value
 and allows duplicate elements.</para>
        </remarks>
        <example>
            <para>The following example shows how to create and add values to a <see cref="System.Collections.Queue" /> and
   how to print out its values.</para>
            <codelink SampleID="Classic Queue Example" SnippetID="1" />
        </example>
    </doc><doc for="Queue.Queue">
        <overload>
            <para>Initializes a new instance of the <see cref="System.Collections.Queue" /> class.</para>
        </overload>
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Queue" /> class that is empty, has the 
    default initial capacity and uses the default growth factor.</para>
        </summary>
        <remarks>
            <para>The initial capacity is the starting capacity of the new <see cref="System.Collections.Queue" />. The 
    growth factor is the number by which the current capacity is multiplied when a
    greater capacity is required. The default initial capacity is 32 and the
    default growth factor is 2.0.</para>
            <para>If the number of elements added to the <see cref="System.Collections.Queue" /> reaches the current capacity, 
 the capacity is automatically increased. The new capacity is determined by
 multiplying the current capacity by the growth factor.</para>
        </remarks>
    </doc><doc for="Queue.Queue1">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Queue" /> class that is empty, has 
    the specified initial capacity and uses the default growth factor.</para>
        </summary>
        <param name="capacity">The initial number of elements that the <see cref="System.Collections.Queue" /> can contain.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than zero.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new 
    <see cref="System.Collections.Queue" />. The 
       growth factor is the number by which the current capacity is multiplied when a
       greater capacity is required. The default initial capacity is 32 and the
       default growth factor is 2.0.</para>
            <para>If the number of elements added to the <see cref="System.Collections.Queue" /> reaches the current capacity, the capacity is 
    automatically increased. The new capacity is determined by multiplying the
    current capacity by the growth factor.</para>
            <para>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <see cref="System.Collections.Queue" />.</para>
        </remarks>
    </doc><doc for="Queue.Queue2">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Queue" /> class that is empty, has the specified 
    initial capacity and uses the specified growth factor.</para>
        </summary>
        <param name="capacity">The initial number of elements that the <see cref="System.Collections.Queue" /> can contain.</param>
        <param name="growFactor">The factor by which the capacity of the <see cref="System.Collections.Queue" /> is expanded.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="capacity" /> is less than zero. </para><para>-or-</para>
            <para><paramref name="growFactor" /> is less than 1.0 or greater than 10.0. </para></exception>
<remarks>
            <para>The initial capacity is the starting capacity of the new 
    <see cref="System.Collections.Queue" />. The 
       growth factor is the number by which the current capacity is multiplied when a
       greater capacity is required. The default initial capacity is 32 and the
       default growth factor is 2.0.</para>
            <para>If the number of elements added to the <see cref="System.Collections.Queue" /> reaches the current capacity, the capacity is 
    automatically increased. The new capacity is determined by multiplying the
    current capacity by the growth factor.</para>
            <para>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <see cref="System.Collections.Queue" />.</para>
        </remarks>
    </doc><doc for="Queue.Queue3">
        <summary>
            <para>Initializes a new instance of the <see cref="System.Collections.Queue" /> class that contains elements copied from 
    the specified collection, has the same initial capacity as the number of elements copied and uses the default
    growth factor.</para>
        </summary>
        <param name="col">The <see cref="System.Collections.ICollection" /> to copy elements from.</param>
        <exception cref="System.ArgumentNullException"><paramref name="col" /> is <see langword="null" />.</exception>
        <remarks>
            <para>The initial capacity is the starting capacity of the new 
    <see cref="System.Collections.Queue" />. The 
       growth factor is the number by which the current capacity is multiplied when a
       greater capacity is required. The default initial capacity is 32 and the
       default growth factor is 2.0.</para>
            <para>The elements are copied onto the <see cref="System.Collections.Queue" /> in the same order they are 
    read by the <see cref="System.Collections.IEnumerator" /> of the <see cref="System.Collections.ICollection" />.</para>
            <para>If the number of elements added to the <see cref="System.Collections.Queue" /> reaches the current capacity, the capacity is 
 automatically increased. The new capacity is determined by multiplying the current capacity by the growth factor.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
    </doc><doc for="Queue.Count">
        <summary>
            <para>Gets the number of elements contained in the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.Queue" />.</para>
        </value>
        <remarks>
            <para><see cref="System.Collections.Queue.Count" /> is the number of elements that are 
    actually in the <see cref="System.Collections.Queue" />. The capacity of
    a <see cref="System.Collections.Queue" /> is the number of
    elements that the <see cref="System.Collections.Queue" /> is capable of storing.</para>
            <para><see cref="System.Collections.Queue.Count" /> 
 is always less than or equal to the capacity of the <see cref="System.Collections.Queue" />. If <see cref="System.Collections.Queue.Count" /> exceeds the capacity of the
 <see cref="System.Collections.Queue" /> while adding elements, the capacity is 
 increased by automatically reallocating the internal array before copying the
 old elements and adding the new element. The new capacity is determined by
 multiplying the current capacity by the growth factor, which is determined when
 the <see cref="System.Collections.Queue" />
 is constructed.</para>
        </remarks>
    </doc><doc for="Queue.Clone">
        <summary>
            <para>Creates a shallow copy of the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <returns>
            <para>A shallow copy of the <see cref="System.Collections.Queue" />.</para>
        </returns>
        <remarks>
            <para> A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types,
 but it does not copy the objects that the references refer to.
 The references in the new collection point to the same objects that the references in the original collection point to.</para>
            <para>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</para>
        </remarks>
    </doc><doc for="Queue.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.Queue" />
is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.Queue" /> is
 synchronized (thread-safe); otherwise, <see langword="false" />. The
 default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.Queue" />,
 all operations must be done through the wrapper returned by the <see cref="System.Collections.Queue.Synchronized" />
 method.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Queue.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">Queue myCollection = new Queue();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New Queue()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize a <see cref="System.Collections.Queue" />,
 determine if a <see cref="System.Collections.Queue" /> is synchronized and use a synchronized
<see cref="System.Collections.Queue" />.</para>
            <codelink SampleID="Classic Queue.IsSynchronized Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Queue.SyncRoot" />
        <seealso cref="System.Collections.Queue.Synchronized" />
    </doc><doc for="Queue.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to
 the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.Queue" />.</para>
        </value>
        <remarks>
            <para>To create a synchronized version of the <see cref="System.Collections.Queue" />, use the <see cref="System.Collections.Queue.Synchronized" /> method.
 However, derived classes can provide their own synchronized version of the <see cref="System.Collections.Queue" /> using the <see cref="System.Collections.Queue.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.Queue.SyncRoot" /> of the <see cref="System.Collections.Queue" />,
 not directly on the <see cref="System.Collections.Queue" />. This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.Queue" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Queue.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">Queue myCollection = new Queue();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New Queue()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.Queue.IsSynchronized" />
        <seealso cref="System.Collections.Queue.Synchronized" />
    </doc><doc for="Queue.Clear">
        <summary>
            <para>Removes all objects from the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.Queue.Count" /> is set to zero.
 To reset the capacity of the <see cref="System.Collections.Queue" />, call <see cref="System.Collections.Queue.TrimToSize" />.
 Trimming an empty <see cref="System.Collections.Queue" /> sets the capacity of the <see cref="System.Collections.Queue" /> to the default capacity, not zero.</para>
        </remarks>
        <example>
            <para>The following example shows how to clear the values of the <see cref="System.Collections.Queue" />.</para>
            <codelink SampleID="Classic Queue.Clear Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Queue.TrimToSize" />
    </doc><doc for="Queue.CopyTo">
        <summary>
            <para>Copies the <see cref="System.Collections.Queue" /> elements to an existing
    one-dimensional <see cref="System.Array" />, starting at the specified array index.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.Queue" />. The <see cref="System.Array" /> must have zero-based indexing.</param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.Queue" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.ArrayTypeMismatchException">The type of the source <see cref="System.Collections.Queue" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The elements are copied to the <see cref="System.Array" /> in the same order in which the enumerator iterates
    through the <see cref="System.Collections.Queue" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy a <see cref="System.Collections.Queue" /> into 
    a one-dimensional <see cref="System.Array" /> instance and into a one-dimensional standard array.</para>
            <codelink SampleID="Classic Queue.CopyTo Example" SnippetID="1" />
        </example>
    </doc><doc for="Queue.Enqueue">
        <summary>
            <para>Adds an object to the end of the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <param name="obj">The object to add to the <see cref="System.Collections.Queue" />. The value can be <see langword="null" />.</param>
        <remarks>
            <para>If <see cref="System.Collections.Queue.Count" /> already
   equals the capacity of the <see cref="System.Collections.Queue" />, the capacity is increased by automatically
   reallocating the internal array before copying the old elements and adding the
   new element. The new capacity is determined by multiplying the current
   capacity by the growth factor, which is determined when the <see cref="System.Collections.Queue" /> is constructed.</para>
            <para>If <see cref="System.Collections.Queue.Count" />
is less than the capacity of the internal array, this method is an O(1) operation.
If the internal array needs to be reallocated to accommodate the new element, this
method becomes an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Queue.Count" />.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.Queue" />,
   remove elements from the <see cref="System.Collections.Queue" /> or just view the element at the beginning of the
<see cref="System.Collections.Queue" />.</para>
            <codelink SampleID="Classic Queue.Enqueue Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Queue.Dequeue" />
        <seealso cref="System.Collections.Queue.Peek" />
    </doc><doc for="Queue.GetEnumerator">
        <summary>
            <para> Returns an enumerator that can iterate
       through the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.Queue" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="Queue.Dequeue">
        <summary>
            <para>Removes and returns the object at the beginning of the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <returns>
            <para>The object that is removed from the beginning of the <see cref="System.Collections.Queue" />.</para>
        </returns>
<exception cref="System.InvalidOperationException">The <see cref="System.Collections.Queue" /> is empty.</exception>
        <remarks>
            <para>This method is similar to the <see cref="System.Collections.Queue.Peek" /> method, but <see cref="System.Collections.Queue.Peek" /> does not modify the <see cref="System.Collections.Queue" />.</para>
            <para><see langword="null" /> can be added to the <see cref="System.Collections.Queue" /> as a value.
 To distinguish between a null value and the end of the <see cref="System.Collections.Queue" />,
 check the <see cref="System.Collections.Queue.Count" /> property
 or catch the <see cref="System.InvalidOperationException" />,
 which is thrown when the <see cref="System.Collections.Queue" /> is empty.</para>
            <para>This method is an O(1) operation.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.Queue" />,
   remove elements from the <see cref="System.Collections.Queue" /> or just view the element at the beginning of the
<see cref="System.Collections.Queue" />.</para>
            <codelink SampleID="Classic Queue.Enqueue Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Queue.Enqueue" />
        <seealso cref="System.Collections.Queue.Peek" />
    </doc><doc for="Queue.Peek">
        <summary>
            <para>Returns the object at the beginning of the <see cref="System.Collections.Queue" />
without removing it.</para>
        </summary>
        <returns>
            <para>The object at the beginning of the <see cref="System.Collections.Queue" />.</para>
        </returns>
<exception cref="System.InvalidOperationException">The <see cref="System.Collections.Queue" /> is empty.</exception>
        <remarks>
            <para>This method is similar to the <see cref="System.Collections.Queue.Dequeue" /> method, but <see cref="System.Collections.Queue.Peek" /> does not modify the <see cref="System.Collections.Queue" />.</para>
            <para><see langword="null" /> can be added to the <see cref="System.Collections.Queue" /> as a value.
 To distinguish between a null value and the end of the <see cref="System.Collections.Queue" />,
 check the <see cref="System.Collections.Queue.Count" /> property
 or catch the <see cref="System.InvalidOperationException" />,
 which is thrown when the <see cref="System.Collections.Queue" /> is empty.</para>
        </remarks>
        <example>
            <para>The following example shows how to add elements to the <see cref="System.Collections.Queue" />,
   remove elements from the <see cref="System.Collections.Queue" /> or just view the element at the beginning of the
<see cref="System.Collections.Queue" />.</para>
            <codelink SampleID="Classic Queue.Enqueue Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Queue.Enqueue" />
        <seealso cref="System.Collections.Queue.Dequeue" />
    </doc><doc for="Queue.Synchronized">
        <summary>
            <para>Returns a <see cref="System.Collections.Queue" /> wrapper that is synchronized (thread-safe).</para>
        </summary>
        <param name="queue">The <see cref="System.Collections.Queue" /> to synchronize.</param>
        <returns>
            <para>A <see cref="System.Collections.Queue" /> wrapper that is synchronized
 (thread-safe).</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="queue" /> is <see langword="null" />.</exception>
        <remarks>
            <para> To guarantee the thread safety of the <see cref="System.Collections.Queue" />,
 all operations must be done through this wrapper only.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection,
 which causes the enumerator to throw an exception. To guarantee thread safety during enumeration,
 you can either lock the collection during the entire enumeration
 or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.Queue.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">Queue myCollection = new Queue();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New Queue()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <example>
            <para>The following example shows how to synchronize a <see cref="System.Collections.Queue" />,
 determine if a <see cref="System.Collections.Queue" /> is synchronized and use a synchronized
<see cref="System.Collections.Queue" />.</para>
            <codelink SampleID="Classic Queue.IsSynchronized Example" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.Queue.IsSynchronized" />
        <seealso cref="System.Collections.Queue.SyncRoot" />
    </doc><doc for="Queue.Contains">
        <summary>
            <para>Determines whether an element is in the <see cref="System.Collections.Queue" />.</para>
        </summary>
        <param name="obj">
            <para>The <see cref="System.Object" /> to locate in the <see cref="System.Collections.Queue" />. The value can be <see langword="null" />.</para>
        </param>
        <returns>
            <para><see langword="true" /> if <paramref name="obj" /> is found in the <see cref="System.Collections.Queue" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the
      average execution time is proportional to <see cref="System.Collections.Queue.Count" />. That is, this
      method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.Queue.Count" />.</para>
            <para> This method determines
      equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="Queue.ToArray">
        <summary>
            <para>Copies the <see cref="System.Collections.Queue" /> elements to a new array.</para>
        </summary>
        <returns>
            <para>A new array containing elements copied from the <see cref="System.Collections.Queue" />.</para>
        </returns>
        <remarks>
            <para>The <see cref="System.Collections.Queue" /> is not modified.
    The order of the elements in the new array is the same as the order of the elements
    from the beginning of the <see cref="System.Collections.Queue" /> to its end.</para>
        </remarks>
        <example>
            <para>The following example shows how to copy a <see cref="System.Collections.Queue" /> into 
    a one-dimensional <see cref="System.Array" /> instance and into a one-dimensional standard array.</para>
            <codelink SampleID="Classic Queue.CopyTo Example" SnippetID="1" />
        </example>
    </doc><doc for="Queue.TrimToSize">
        <summary>
            <para>Sets the capacity to the actual number of elements in the <see cref="System.Collections.Queue" />.</para>
        </summary>
<exception cref="System.NotSupportedException">The <see cref="System.Collections.Queue" /> is read-only.</exception>
        <remarks>
            <para>This method can be used to minimize a list's memory overhead if no new elements will be added to the list.</para>
            <para>To completely clear all elements in a list, call the <see cref="System.Collections.Queue.Clear" /> method before calling <see cref="System.Collections.Queue.TrimToSize" />.
 Trimming an empty <see cref="System.Collections.Queue" /> sets the capacity of the <see cref="System.Collections.Queue" /> to the default capacity, not zero. </para>
        </remarks>
        <seealso cref="System.Collections.Queue.Clear" />
        <seealso cref="System.Collections.Queue.Count" />
    </doc>
</docs>
