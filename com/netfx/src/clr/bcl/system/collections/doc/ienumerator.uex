<docs>
    <doc for="IEnumerator">
        <summary>
            <para> Supports a simple iteration over a collection.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.IEnumerator" /> is the base interface for all enumerators.</para>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerable" />
        <seealso cref="System.Collections.ICollection" />
    </doc><doc for="IEnumerator.MoveNext">
        <summary>
            <para>Advances the enumerator to the next element of the collection.</para>
        </summary>
        <returns>
            <para><see langword="true" /> if the enumerator was successfully advanced to the next element;
 <see langword="false" /> if the enumerator has passed the end of the collection.</para>
        </returns>
        <exception cref="System.InvalidOperationException"><para>The collection was modified after the enumerator was created.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a call to <see cref="System.Collections.IEnumerator.Reset" />, an enumerator is positioned
    before the first element of the collection, and the first call to <see cref="System.Collections.IEnumerator.MoveNext" />
    moves the enumerator over the first element of the collection.</para>
            <para>After the end of the collection is passed, subsequent
    calls to <see cref="System.Collections.IEnumerator.MoveNext" /> return <see langword="false" />
    until <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator.Current" />
        <seealso cref="System.Collections.IEnumerator.Reset" />
    </doc><doc for="IEnumerator.Current">
        <summary>
            <para>Gets the current element in the collection.</para>
        </summary>
        <value>
            <para>The current element in the collection.</para>
        </value>
        <exception cref="System.InvalidOperationException"><para>The enumerator is positioned before the first element of the collection or after the last element.</para></exception>
        <remarks>
            <para>After an enumerator is created or after a <see cref="System.Collections.IEnumerator.Reset" />, <see cref="System.Collections.IEnumerator.MoveNext" /> must be called to advance the enumerator to
    the first element of the collection before reading the value of <see cref="System.Collections.IEnumerator.Current" />; otherwise, <see cref="System.Collections.IEnumerator.Current" /> is undefined.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> also throws an 
 exception if the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned
 <see langword="false" />, which indicates the end of the collection.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> does not move the position 
 of the enumerator and consecutive calls to <see cref="System.Collections.IEnumerator.Current" /> return the same object until
 either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator.MoveNext" />
        <seealso cref="System.Collections.IEnumerator.Reset" />
    </doc><doc for="IEnumerator.Reset">
        <summary>
            <para>Sets the enumerator to its initial position, which is before
 the first element in the collection.</para>
        </summary>
        <exception cref="System.InvalidOperationException"><para>The collection was modified after the enumerator was created.</para></exception>
        <remarks>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />.</para>
            <note type="inotes">
            </note>
            <para>All calls to <see cref="System.Collections.IEnumerator.Reset" /> must result in the same state for the enumerator.
 The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.
 This invalidates the enumerator if the collection has been modified since the enumerator was created,
 which is consistent with <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator.MoveNext" />
        <seealso cref="System.Collections.IEnumerator.Current" />
    </doc>
</docs>
