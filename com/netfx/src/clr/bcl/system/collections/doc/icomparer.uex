<docs>
    <doc for="IComparer">
        <summary>
            <para>Exposes a method that compares two objects.</para>
        </summary>
        <remarks>
            <para>This interface is used in conjunction with
 the <see cref="System.Array.Sort" qualify="true" /> and <see cref="System.Array.BinarySearch" qualify="true" /> methods. It provides a way to customize the sort order of
 a collection.</para>
            <para> The default implementation of this interface is
 the <see cref="System.Collections.Comparer" />
 class.</para>
            <para>Comparison procedures use the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread unless otherwise specified.
 String comparisons might have different results depending on the culture.
 For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.Collections.Comparer" />
        <seealso cref="System.Threading.Thread.CurrentCulture" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso cref="System.Globalization.CultureInfo" qualify="true" />
    </doc><doc for="IComparer.Compare">
        <summary>
            <para> Compares two objects and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
        </summary>
        <param name="x">First object to compare.</param>
        <param name="y">Second object to compare.</param>
        <returns>
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <description>Condition</description>
                </listheader>
                <item>
                    <term> Less than zero</term>
                    <description>
                        <paramref name="x" /> is less than <paramref name="y" />.</description>
                </item>
                <item>
                    <term> Zero</term>
                    <description>
                        <paramref name="x" /> equals <paramref name="y" />.</description>
                </item>
                <item>
                    <term> Greater than zero</term>
                    <description>
                        <paramref name="x" /> is greater than <paramref name="y" />.</description>
                </item>
            </list>
        </returns>
        <exception cref="System.ArgumentException"><para>Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="System.IComparable" /> interface.</para><para>-or-</para>
            <para><paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</para></exception>
<remarks>
            <para>The preferred implementation is to use the <see cref="System.IComparable.CompareTo" />
method of one of the parameters.</para>
            <para>Comparing <see langword="null" /> with any type is allowed and does not
generate an exception when using <see cref="System.IComparable" />. When sorting, <see langword="null" />
is considered to be less than any other object.</para>
            <para>Comparison procedures use the <see cref="System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread unless otherwise specified.
 String comparisons might have different results depending on the culture.
 For more information on culture-specific comparisons, see the <see cref="System.Globalization" /> namespace and <see topic="cpcondesigningglobalapplications" />.</para>
        </remarks>
        <seealso cref="System.IComparable" />
        <seealso cref="System.Threading.Thread.CurrentCulture" qualify="true" />
        <seealso cref="System.Globalization.CompareInfo" qualify="true" />
        <seealso cref="System.Globalization.CultureInfo" qualify="true" />
    </doc>
</docs>
