<docs>
    <doc for="CollectionBase">
        <summary>
            <para>Provides the <see langword="abstract" /> base class for a strongly typed collection.</para>
        </summary>
        <threadsafe>
            <para>Public static (<see langword="Shared" /> in Visual Basic) members of this type are safe for multithreaded operations.
   Instance members are not guaranteed to be thread-safe.</para>
            <para>This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="System.Collections.CollectionBase" />,
but derived classes can create their own synchronized versions of the <see cref="System.Collections.CollectionBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </threadsafe>
        <remarks>
            <para>A <see cref="System.Collections.CollectionBase" /> instance is always
   modifiable. See <see cref="System.Collections.ReadOnlyCollectionBase" /> for a read-only
   version of this class.</para>
            <note type="inotes">
   This base class is provided to make it easier for implementers to create a strongly typed custom collection.
   Implementers should extend this base class instead of creating their own.
   
</note>
        </remarks>
        <example>
            <para>The following code example implements the <see cref="System.Collections.CollectionBase" /> class
and uses that implementation to create a collection of <see cref="System.Int16" /> objects.</para>
            <codelink SampleID="System.Collections.CollectionBase" SnippetID="1" />
        </example>
        <seealso cref="System.Collections.ArrayList" qualify="true" />
        <seealso cref="System.Collections.IList" qualify="true" />
        <seealso cref="System.Collections.ReadOnlyCollectionBase" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="CollectionBase.InnerList">
        <summary>
            <para>Gets an <see cref="System.Collections.ArrayList" /> containing the list of elements in the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ArrayList" /> representing the <see cref="System.Collections.CollectionBase" /> instance itself.</para>
        </value>
        <remarks>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
        </remarks>
    </doc><doc for="CollectionBase.List">
        <summary>
            <para>Gets an <see cref="System.Collections.IList" /> containing the list of elements in the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.IList" /> representing the <see cref="System.Collections.CollectionBase" /> instance itself.</para>
        </value>
        <remarks>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
        </remarks>
    </doc><doc for="CollectionBase.Count">
        <summary>
            <para>Gets the number of elements contained in the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <value>
            <para>The number of elements contained in the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </value>
    </doc><doc for="CollectionBase.Clear">
        <summary>
            <para>Removes all objects from the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <remarks>
            <para><see cref="System.Collections.CollectionBase.Count" /> is set to zero.</para>
        </remarks>
    </doc><doc for="CollectionBase.RemoveAt">
        <summary>
            <para>Removes the element at the specified index of the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name="index">The zero-based index of the element to remove.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.CollectionBase.Count" />.</para></exception>
<remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc><doc for="CollectionBase.IList.IsReadOnly">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.CollectionBase" /> is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.CollectionBase" /> is read-only; otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="CollectionBase.IList.IsFixedSize">
        <summary>
            <para>Gets a value indicating whether the <see cref="System.Collections.CollectionBase" /> has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.CollectionBase" /> has a fixed size; otherwise, <see langword="false" />. The default is <see langword="false" />. </para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="CollectionBase.ICollection.IsSynchronized">
        <summary>
            <para>Gets a value indicating whether access to the <see cref="System.Collections.CollectionBase" /> is synchronized (thread-safe).</para>
        </summary>
        <value>
            <para><see langword="true" /> if access to the <see cref="System.Collections.CollectionBase" /> is synchronized (thread-safe); otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A <see cref="System.Collections.CollectionBase" /> instance is not synchronized.
   Derived classes can provide a synchronized version of the <see cref="System.Collections.CollectionBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
   Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
   To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ICollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">CollectionBase myCollection = new CollectionBase();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New CollectionBase()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="System.Collections.ICollection.SyncRoot" />
    </doc><doc for="CollectionBase.ICollection.SyncRoot">
        <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="System.Collections.CollectionBase" />.</para>
        </summary>
        <value>
            <para>An object that can be used to synchronize access to the <see cref="System.Collections.CollectionBase" />.</para>
        </value>
        <remarks>
            <para>Derived classes can provide their own synchronized version of the <see cref="System.Collections.CollectionBase" /> using the <see cref="System.Collections.ICollection.SyncRoot" /> property.
 The synchronizing code must perform operations on the <see cref="System.Collections.ICollection.SyncRoot" /> of the <see cref="System.Collections.CollectionBase" />, not directly on the <see cref="System.Collections.CollectionBase" />.
 This ensures proper operation of collections that are derived from other objects.
 Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <see cref="System.Collections.CollectionBase" /> object.</para>
            <para>Enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
            <para lang="VB, C#">The following code example shows how to lock the collection using the <see cref="System.Collections.ICollection.SyncRoot" /> during the entire enumeration:</para>
            <code lang="C#">CollectionBase myCollection = new CollectionBase();
 lock( myCollection.SyncRoot ) {
 foreach ( Object item in myCollection ) {
 // Insert your code here.
 }
}
</code>
            <code lang="VB">Dim myCollection As New CollectionBase()
Dim item As Object
SyncLock myCollection.SyncRoot
 For Each item In myCollection
 ' Insert your code here.
 Next item
End SyncLock
</code>
        </remarks>
        <seealso cref="P:System.Collections.ICollection.IsSynchronized" />
    </doc><doc for="CollectionBase.ICollection.CopyTo">
        <summary>
            <para>Copies the entire <see cref="System.Collections.CollectionBase" /> to a compatible one-dimensional <see cref="System.Array" />, starting at the specified index of the target array.</para>
        </summary>
        <param name="array">The one-dimensional <see cref="System.Array" /> that is the destination of the elements copied from <see cref="System.Collections.CollectionBase" />. The <see cref="System.Array" /> must have zero-based indexing. </param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        <exception cref="System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
        <exception cref="System.ArgumentException">
            <para><paramref name="array" /> is multidimensional.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.</para><para>-or-</para><para>The number of elements in the source <see cref="System.Collections.CollectionBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</para></exception>
<exception cref="System.InvalidCastException">The type of the source <see cref="System.Collections.CollectionBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
<remarks>
            <para>The specified array must be of a compatible type. </para>
            <para>This method uses <see cref="System.Array.Copy" qualify="true" /> to copy the elements.</para>
        </remarks>
    </doc><doc for="CollectionBase.IList.this">
        <summary>
            <para>Gets or sets the element at the specified index.</para>
        </summary>
        <param name="index">The zero-based index of the element to get or set.</param>
        <value>
            <para>The element at the specified index.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is equal to or greater than <see cref="System.Collections.CollectionBase.Count" />.</para></exception>
<remarks>
            <para>This property provides the ability to access a specific element in the collection by using the following syntax: <c>myCollection[index]</c>.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.Count" />
    </doc><doc for="CollectionBase.IList.Contains">
        <summary>
            <para>Determines whether the <see cref="System.Collections.CollectionBase" /> contains a specific element.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.CollectionBase" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.CollectionBase" /> contains the specified <paramref name="value" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.CollectionBase.Count" />.
   That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.CollectionBase.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.IndexOf" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="CollectionBase.IList.Add">
        <summary>
            <para>Adds an object to the end of the <see cref="System.Collections.CollectionBase" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to be added to the end of the <see cref="System.Collections.CollectionBase" />.</param>
        <returns>
            <para>The <see cref="System.Collections.CollectionBase" /> index at which the <paramref name="value" /> has been added.</para>
        </returns>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.CollectionBase" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.CollectionBase" /> has a fixed size.</para></exception>
        <remarks>
            <para>If <see cref="System.Collections.CollectionBase.Count" /> already equals the capacity,
 the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.</para>
            <para>If <see cref="System.Collections.CollectionBase.Count" /> is less than the capacity, this method is an O(1) operation.
 If the capacity needs to be increased to accommodate the new element, this method becomes an O(<paramref name="n" />) operation,
 where <paramref name="n" /> is <see cref="System.Collections.CollectionBase.Count" />.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.Count" />
        <seealso cref="M:System.Collections.IList.Insert" />
        <seealso cref="M:System.Collections.IList.Remove" />
    </doc><doc for="CollectionBase.IList.Remove">
        <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="System.Collections.CollectionBase" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to remove from the <see cref="System.Collections.CollectionBase" />.</param>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.CollectionBase" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.CollectionBase" /> has a fixed size.</para></exception>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.CollectionBase.Count" />.
   That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.CollectionBase.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.RemoveAt" />
        <seealso cref="M:System.Collections.IList.Add" />
        <seealso cref="M:System.Collections.IList.Insert" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="CollectionBase.IList.IndexOf">
        <summary>
            <para>Searches for the specified <see cref="System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="System.Collections.CollectionBase" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.CollectionBase" />.</param>
        <returns>
            <para>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="System.Collections.CollectionBase" />, if found; otherwise, -1.</para>
        </returns>
        <remarks>
            <para>This method performs a linear search; therefore, the average execution time is proportional to <see cref="System.Collections.CollectionBase.Count" />.
   That is, this method is an O(<paramref name="n" />) operation, where <paramref name="n" /> is <see cref="System.Collections.CollectionBase.Count" />.</para>
            <para>This method determines equality by calling <see cref="System.Object.Equals" qualify="true" />.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.Contains" />
        <seealso topic="cpconperformingculture-insensitivestringoperations" />
    </doc><doc for="CollectionBase.IList.Insert">
        <summary>
            <para>Inserts an element into the <see cref="System.Collections.CollectionBase" /> at the specified index.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
        <param name="value">The <see cref="System.Object" /> to insert.</param>
        <exception cref="System.ArgumentOutOfRangeException">
            <para><paramref name="index" /> is less than zero.</para><para>-or-</para>
            <para><paramref name="index" /> is greater than <see cref="System.Collections.CollectionBase.Count" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.CollectionBase" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.CollectionBase" /> has a fixed size.</para></exception>
<remarks>
            <para>If <see cref="System.Collections.CollectionBase.Count" /> already equals the capacity,
 the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</para>
            <para>If <paramref name="index" /> is equal to <see cref="System.Collections.CollectionBase.Count" />, <paramref name="value" /> is added to the end of <see cref="System.Collections.CollectionBase" />.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accomodate the new element.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
        <seealso cref="M:System.Collections.IList.Add" />
        <seealso cref="M:System.Collections.IList.Remove" />
    </doc><doc for="CollectionBase.GetEnumerator">
        <summary>
            <para>Returns an enumerator that can iterate through the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IEnumerator" /> for the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IEnumerator" qualify="true" />
    </doc><doc for="CollectionBase.OnSet">
        <summary>
            <para> Performs additional custom processes before setting a value in the
   <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
        <param name="oldValue">The value to replace with <paramref name="newValue" />.</param>
        <param name="newValue">The new value of the element at <paramref name="index" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action before the specified element is set.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed before setting the specified element in the underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.CollectionBase.OnSet" /> is invoked before the
standard Set behavior, whereas <see cref="System.Collections.CollectionBase.OnSetComplete" />
is invoked after the standard Set behavior.</para>
            <para> For example, implementers can restrict which values can be overwritten by performing a check inside
<see cref="System.Collections.CollectionBase.OnSet" />.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnSetComplete" />
        <seealso cref="System.Collections.CollectionBase.OnInsert" />
        <seealso cref="System.Collections.CollectionBase.OnValidate" />
    </doc><doc for="CollectionBase.OnInsert">
        <summary>
            <para> Performs additional custom processes before inserting a new element into the
   <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
        <param name="value">The new value of the element at <paramref name="index" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action before the specified element is inserted.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed before inserting the element into the underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.CollectionBase.OnInsert" /> is invoked before the
standard Insert behavior, whereas <see cref="System.Collections.CollectionBase.OnInsertComplete" />
is invoked after the standard Insert behavior.</para>
            <para> For example, implementers can restrict which types of objects can be inserted into
   the <see cref="System.Collections.ArrayList" qualify="true" />. </para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnInsertComplete" />
        <seealso cref="System.Collections.CollectionBase.OnSet" />
        <seealso cref="System.Collections.CollectionBase.OnValidate" />
    </doc><doc for="CollectionBase.OnClear">
        <summary>
            <para>Performs additional custom processes
      when clearing the contents of the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action before the collection is cleared.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define processes
   that must be performed before deleting all the elements from the
   underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.CollectionBase.OnClear" /> is invoked before the
standard Clear behavior, whereas <see cref="System.Collections.CollectionBase.OnClearComplete" />
is invoked after the standard Clear behavior.</para>
            <para>For example, implementers can exempt certain elements from deletion by a global Clear. </para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnClearComplete" />
        <seealso cref="System.Collections.CollectionBase.OnRemove" />
    </doc><doc for="CollectionBase.OnRemove">
        <summary>
            <para>Performs additional custom processes when removing an element from the
   <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
        <param name="value">The value of the element to remove from <paramref name="index" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to
      be overridden by a derived class to perform some action before the specified element is removed.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para> This method allows implementers to define
   processes that must be performed before removing the element from the
   underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.CollectionBase.OnRemove" /> is invoked before the standard Remove
behavior, whereas <see cref="System.Collections.CollectionBase.OnRemoveComplete" /> is invoked after the
standard Remove behavior.</para>
            <para> For example, implementers can prevent removal of elements by always throwing an
   exception in <see cref="System.Collections.CollectionBase.OnRemove" />.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnRemoveComplete" />
        <seealso cref="System.Collections.CollectionBase.OnClear" />
    </doc><doc for="CollectionBase.OnValidate">
        <summary>
            <para>Performs additional custom processes when validating a value.</para>
        </summary>
        <param name="value">The object to validate.</param>
        <remarks>
            <para>The default implementation of this method determines whether <paramref name="value" /> is <see langword="null" />, and, if so, throws <see cref="System.ArgumentNullException" />.
   It is intended to be overridden by a derived class to perform additional action when the specified element is validated.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed when executing the standard behavior of the
   underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.CollectionBase.OnValidate" /> can be used to impose restrictions on the type of objects that are
accepted into the collection. The default implementation prevents
<see langword="null" /> from being added to or removed from the underlying <see cref="System.Collections.ArrayList" qualify="true" />.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnSet" />
        <seealso cref="System.Collections.CollectionBase.OnInsert" />
    </doc><doc for="CollectionBase.OnSetComplete">
        <summary>
            <para> Performs additional custom processes after setting a value in the
   <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
        <param name="oldValue">The value to replace with <paramref name="newValue" />.</param>
        <param name="newValue">The new value of the element at <paramref name="index" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the specified element is set.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after setting the specified element in the underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to
   inherited methods without having to override all other methods.</para>
            <para><see cref="System.Collections.CollectionBase.OnSet" /> is invoked before the
standard Set behavior, whereas <see cref="System.Collections.CollectionBase.OnSetComplete" /> is invoked
after the standard Set behavior.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnSet" />
        <seealso cref="System.Collections.CollectionBase.OnInsertComplete" />
    </doc><doc for="CollectionBase.OnInsertComplete">
        <summary>
            <para>Performs additional custom processes after inserting a
      new element into the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name=" index">The zero-based index at which to insert <paramref name="value" />.</param>
        <param name=" value">The new value of the element at <paramref name="index" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the specified element is inserted.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after inserting the element into the underlying <see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to inherited methods
   without having to override all other methods. </para>
            <para><see cref="System.Collections.CollectionBase.OnInsert" /> is invoked before the
standard Insert behavior, whereas <see cref="System.Collections.CollectionBase.OnInsertComplete" /> is invoked after the standard Insert
behavior.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnInsert" />
        <seealso cref="System.Collections.CollectionBase.OnSetComplete" />
    </doc><doc for="CollectionBase.OnClearComplete">
        <summary>
            <para>Performs additional custom processes after clearing the
      contents of the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the collection is cleared.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after deleting all the elements from the underlying
<see cref="System.Collections.ArrayList" qualify="true" />. By defining this method, implementers can add functionality to inherited
   methods without having to override all other methods. </para>
            <para><see cref="System.Collections.CollectionBase.OnClear" /> is invoked before the
standard Clear behavior, whereas <see cref="System.Collections.CollectionBase.OnClearComplete" /> is invoked after the standard Clear
behavior.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnClear" />
        <seealso cref="System.Collections.CollectionBase.OnRemoveComplete" />
    </doc><doc for="CollectionBase.OnRemoveComplete">
        <summary>
            <para>Performs additional custom processes after removing an
      element from the <see cref="System.Collections.CollectionBase" /> instance.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
        <param name="value">The value of the element to remove from <paramref name="index" />.</param>
        <remarks>
            <para>The default implementation of this method is intended to be overridden by a
      derived class to perform some action after the specified element is
      removed.</para>
            <para>The On* methods are invoked only on the instance returned by the <see cref="System.Collections.CollectionBase.List" /> property,
 but not on the instance returned by the <see cref="System.Collections.CollectionBase.InnerList" /> property.</para>
            <note type="inotes">
            </note>
            <para>This method allows implementers to define processes that
   must be performed after removing the element from the underlying
<see cref="System.Collections.ArrayList" qualify="true" />.
   By defining this method, implementers can add functionality to inherited methods
   without having to override all other methods. </para>
            <para><see cref="System.Collections.CollectionBase.OnRemove" /> is invoked before the standard Remove
behavior, whereas <see cref="System.Collections.CollectionBase.OnRemoveComplete" /> is invoked after the
standard Remove behavior.</para>
        </remarks>
        <seealso cref="System.Collections.CollectionBase.OnRemove" />
        <seealso cref="System.Collections.CollectionBase.OnClearComplete" />
    </doc>
</docs>
