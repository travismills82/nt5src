<docs>
    <doc for="IDictionary">
        <summary>
            <para>Represents a collection of key-and-value pairs.</para>
        </summary>
        <remarks>
            <para>The <see cref="System.Collections.IDictionary" /> class is the
   base interface for collections of key-and-value pairs.</para>
            <para>Each element is a key-and-value pair stored in a <see cref="System.Collections.DictionaryEntry" /> object.</para>
            <para>Each association must have a unique key that is not <see langword="null" />, but
the value of an association can be any object reference, including <see langword="null" />.
The <see cref="System.Collections.IDictionary" /> interface allows the contained keys and values to
be enumerated, but it does not imply any particular sort order.</para>
            <para><see cref="System.Collections.IDictionary" />
implementations fall into three categories: read-only, fixed-size,
variable-size. A read-only <see cref="System.Collections.IDictionary" /> cannot be modified. A fixed-size <see cref="System.Collections.IDictionary" /> does
not allow the addition or removal of elements, but it allows the modification of
existing elements. A variable-size <see cref="System.Collections.IDictionary" /> allows the addition,
removal and modification of elements.</para>
            <para lang="VB, C#">The <see langword="foreach" /> statement of the C# language (<see langword="for each" /> in Visual Basic) 
 requires the type of each element in the collection.
 Since each element of the <see cref="System.Collections.IDictionary" /> is a key-and-value pair,
 the element type is not the type of the key or the type of the value.
 Instead, the element type is <see cref="System.Collections.DictionaryEntry" />.
 For example:</para>
            <code lang="C#">foreach (DictionaryEntry myDE in myHashtable) {...}
</code>
            <code lang="VB">Dim myDE As DictionaryEntry
For Each myDE In myHashtable
   ...
Next myDE
</code>
            <para lang="VB, C#">The <see langword="foreach" /> statement is a wrapper around the enumerator,
 which only allows reading from, not writing to, the collection.</para>
        </remarks>
        <seealso cref="System.Collections.Hashtable" />
    </doc><doc for="IDictionary.this">
        <summary>
            <para>When implemented by a class, gets or sets the element with the specified key.</para>
        </summary>
        <param name="key">The key of the element to get or set.</param>
        <value>
            <para>The element with the specified key.</para>
        </value>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="key" /> is <see langword="null" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The property is set and the <see cref="System.Collections.IDictionary" /> is read-only.</para><para>-or-</para><para>The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="System.Collections.IDictionary" /> has a fixed size.</para></exception>
<remarks>
            <para>This property provides the ability to access a specific element in the 
       collection by using the following syntax: <c>myCollection[key]</c>.</para>
            <para>When setting this property, if the specified key already exists in the 
       dictionary, the value is replaced; otherwise, a new element is created.
       In contrast, the <see cref="System.Collections.IDictionary.Add" /> method does not modify existing
       elements.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary.Add" />
    </doc><doc for="IDictionary.Keys">
        <summary>
            <para>When implemented by a class, gets an <see cref="System.Collections.ICollection" /> containing the keys of the <see cref="System.Collections.IDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the keys of the <see cref="System.Collections.IDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the keys in the returned <see cref="System.Collections.ICollection" /> is unspecified, but it is
    guaranteed to be the same order as the corresponding values in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.IDictionary.Values" /> method.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
    </doc><doc for="IDictionary.Values">
        <summary>
            <para>When implemented by a class, gets an <see cref="System.Collections.ICollection" /> containing the values in the <see cref="System.Collections.IDictionary" />.</para>
        </summary>
        <value>
            <para>An <see cref="System.Collections.ICollection" /> containing the
    values in the <see cref="System.Collections.IDictionary" />.</para>
        </value>
        <remarks>
            <para>The order of the values in the returned <see cref="System.Collections.ICollection" /> is unspecified, but it is
    guaranteed to be the same order as the corresponding keys in the <see cref="System.Collections.ICollection" /> returned by the <see cref="System.Collections.IDictionary.Keys" /> method.</para>
        </remarks>
        <seealso cref="System.Collections.ICollection" />
    </doc><doc for="IDictionary.Contains">
        <summary>
            <para>When implemented by a class, determines whether the <see cref="System.Collections.IDictionary" /> contains an element with the specified key.</para>
        </summary>
        <param name="key">The key to locate in the <see cref="System.Collections.IDictionary" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</para>
        </returns>
        <exception cref="System.ArgumentNullException"><paramref name="key " />is <see langword="null" />.</exception>
    </doc><doc for="IDictionary.Add">
        <summary>
            <para>When implemented by a class, adds an element with the provided key and value to the <see cref="System.Collections.IDictionary" />.</para>
        </summary>
        <param name="key">The <see cref="System.Object" /> to use as the key of the element to add.</param>
        <param name="value">The <see cref="System.Object" /> to use as the value of the element to add.</param>
        <exception cref="System.ArgumentNullException">
            <para><paramref name="key" /> is <see langword="null" />.</para></exception>
        <exception cref="System.ArgumentException"><para> An element with the same key already exists in the <see cref="System.Collections.IDictionary" />.</para></exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IDictionary" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.IDictionary" /> has a fixed size.</para></exception>
<remarks>
            <para>The <see cref="System.Collections.IDictionary.this" /> property can also be used to add new 
    elements by setting the value of a key that does not exist in the dictionary.
    For example: <c>myCollection["myNonexistentKey"] = myValue</c>. However, if the
 specified key already exists in the dictionary, setting the <see cref="System.Collections.IDictionary.this" /> property overwrites the old
 value. In contrast, the <see cref="System.Collections.IDictionary.Add" /> method does not modify
 existing elements.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionary.this" />
    </doc><doc for="IDictionary.Clear">
        <summary>
            <para>When implemented by a class, removes all elements from the <see cref="System.Collections.IDictionary" />.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IDictionary" /> is read-only. </para></exception>
    </doc><doc for="IDictionary.IsReadOnly">
        <summary>
            <para>When implemented by a class, gets a value indicating whether the <see cref="System.Collections.IDictionary" />
is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.IDictionary" /> is read-only;
 otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="IDictionary.IsFixedSize">
        <summary>
            <para>When implemented by a class, gets a value indicating whether the <see cref="System.Collections.IDictionary" />
has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.IDictionary" /> has a fixed size;
   otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="IDictionary.GetEnumerator">
        <summary>
            <para>When implemented by a class, returns an
    <see cref="System.Collections.IDictionaryEnumerator" /> for the <see cref="System.Collections.IDictionary" />.</para>
        </summary>
        <returns>
            <para>An <see cref="System.Collections.IDictionaryEnumerator" /> for the <see cref="System.Collections.IDictionary" />.</para>
        </returns>
        <remarks>
            <para> Enumerators only allow reading the data in the collection.
 Enumerators cannot be used to modify the underlying collection.</para>
            <para>Initially, the enumerator is positioned before the first element in the collection.
 <see cref="System.Collections.IEnumerator.Reset" /> also brings the enumerator back to this position.
 At this position, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 Therefore, you must call <see cref="System.Collections.IEnumerator.MoveNext" /> to advance the enumerator to the first element of the collection
 before reading the value of <see cref="System.Collections.IEnumerator.Current" />.</para>
            <para><see cref="System.Collections.IEnumerator.Current" /> returns the same object until either <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> is called.
<see cref="System.Collections.IEnumerator.MoveNext" /> sets <see cref="System.Collections.IEnumerator.Current" /> to the next element.</para>
            <para>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <see cref="System.Collections.IEnumerator.MoveNext" /> returns <see langword="false" />.
 If the last call to <see cref="System.Collections.IEnumerator.MoveNext" /> returned <see langword="false" />, calling <see cref="System.Collections.IEnumerator.Current" /> throws an exception.
 To set <see cref="System.Collections.IEnumerator.Current" /> to the first element of the collection again,
 you can call <see cref="System.Collections.IEnumerator.Reset" /> followed by <see cref="System.Collections.IEnumerator.MoveNext" />.</para>
            <para>An enumerator remains valid as long as the collection remains unchanged.
 If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated
 and the next call to <see cref="System.Collections.IEnumerator.MoveNext" /> or <see cref="System.Collections.IEnumerator.Reset" /> throws an <see cref="System.InvalidOperationException" />. 
 If the collection is modified between <see cref="System.Collections.IEnumerator.MoveNext" /> and <see cref="System.Collections.IEnumerator.Current" />,
 <see cref="System.Collections.IEnumerator.Current" /> will return the element that it is set to, even if the enumerator is already invalidated.</para>
            <para>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.
 Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.
 To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</para>
        </remarks>
        <seealso cref="System.Collections.IDictionaryEnumerator" />
        <seealso cref="System.Collections.IEnumerator" />
    </doc><doc for="IDictionary.Remove">
        <summary>
            <para>When implemented by a class, removes the element with the
       specified key from the <see cref="System.Collections.IDictionary" />.</para>
        </summary>
        <param name="key">The key of the element to remove.</param>
        <exception cref="System.ArgumentNullException"><paramref name="key " /> is <see langword="null" />.</exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IDictionary" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.IDictionary" /> has a fixed size.</para></exception>
        <remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc>
</docs>
