<docs>
    <doc for="IList">
        <summary>
            <para>Represents a collection of objects that can be individually accessed by index.</para>
        </summary>
        <remarks>
            <see cref="System.Collections.IList" /> is a descendant of the <see cref="System.Collections.ICollection" /> 
 interface and is the base interface of all lists. <see cref="System.Collections.IList" /> implementations fall
 into three categories: read-only, fixed-size, variable-size. A
 read-only <see cref="System.Collections.IList" /> cannot be modified. A
 fixed-size <see cref="System.Collections.IList" /> does not allow the addition or removal of elements,
 but it allows the modification of existing elements. A variable-size <see cref="System.Collections.IList" />
 allows the addition, removal and modification of elements.
 </remarks>
        <seealso cref="System.Collections.ICollection" />
    </doc><doc for="IList.this">
        <summary>
            <para>When implemented by a class, gets or sets the element at the specified 
       index.</para>
        </summary>
        <param name="index">The zero-based index of the element to get or set.</param>
        <value>
            <para>The element at the specified index.</para>
        </value>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="System.Collections.IList" />.</exception>
<exception cref="System.NotSupportedException">The property is set and the <see cref="System.Collections.IList" /> is read-only.</exception>
        <remarks>
            <para>This property provides the ability to access a specific element in the 
       collection by using the following syntax: <c>myCollection[index]</c>.</para>
        </remarks>
    </doc><doc for="IList.Add">
        <summary>
            <para>When implemented by a class, adds an item to the <see cref="System.Collections.IList" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to add to the <see cref="System.Collections.IList" />.</param>
        <returns>
            <para>The position into which the new element was inserted.</para>
        </returns>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.IList" /> has a fixed size.</para></exception>
    </doc><doc for="IList.Contains">
        <summary>
            <para>When implemented by a class, determines whether the <see cref="System.Collections.IList" /> contains a specific value.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.IList" />.</param>
        <returns>
            <para><see langword="true" /> if the <see cref="System.Object" />
    is found in the <see cref="System.Collections.IList" />; otherwise, <see langword="false" />.</para>
        </returns>
    </doc><doc for="IList.Clear">
        <summary>
            <para>When implemented by a class, removes all items from the <see cref="System.Collections.IList" />.</para>
        </summary>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IList" /> is read-only. </para></exception>
        <remarks>
            <para>Implementations of this method can vary in how they handle the <see cref="System.Collections.ICollection.Count" qualify="true" /> and the capacity of a collection.
 Typically, the count is set to zero. The capacity can be set to zero or a default value, or it can remain unchanged.</para>
        </remarks>
    </doc><doc for="IList.IsReadOnly">
        <summary>
            <para>When implemented by a class, gets a value indicating whether the <see cref="System.Collections.IList" /> is read-only.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.IList" /> is read-only;
 otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</para>
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection;
 therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
        </remarks>
    </doc><doc for="IList.IsFixedSize">
        <summary>
            <para>When implemented by a class, gets a value indicating whether the <see cref="System.Collections.IList" /> has a fixed size.</para>
        </summary>
        <value>
            <para><see langword="true" /> if the <see cref="System.Collections.IList" /> has a fixed size;
 otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
            <para>A collection with a fixed size does not allow the addition or removal of elements after the collection is created,
 but it allows the modification of existing elements.</para>
            <para>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements;
 therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</para>
        </remarks>
    </doc><doc for="IList.IndexOf">
        <summary>
            <para>When implemented by a class, determines the index of a
       specific item in the <see cref="System.Collections.IList" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to locate in the <see cref="System.Collections.IList" />.</param>
        <returns>
            <para>The index of <paramref name="value" /> if found in the list; otherwise, -1.</para>
        </returns>
    </doc><doc for="IList.Insert">
        <summary>
            <para>When implemented by a class, inserts an item to
       the <see cref="System.Collections.IList" /> at the
       specified position.</para>
        </summary>
        <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
        <param name="value">The <see cref="System.Object" /> to insert into the <see cref="System.Collections.IList" />.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="System.Collections.IList" />.</exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.IList" /> has a fixed size.</para></exception>
        <remarks>
            <para>If <paramref name="index" /> equals the number
    of items in the <see cref="System.Collections.IList" />, then <paramref name="value" />
    is appended to the end.</para>
            <para>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accomodate the new element.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc><doc for="IList.Remove">
        <summary>
            <para>When implemented by a class, removes the first occurrence of a specific object from the <see cref="System.Collections.IList" />.</para>
        </summary>
        <param name="value">The <see cref="System.Object" /> to remove from the <see cref="System.Collections.IList" />.</param>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.IList" /> has a fixed size.</para></exception>
        <remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc><doc for="IList.RemoveAt">
        <summary>
            <para>When implemented by a class, removes the <see cref="System.Collections.IList" />
 item at the specified index.</para>
        </summary>
        <param name="index">The zero-based index of the item to remove.</param>
        <exception cref="System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="System.Collections.IList" />.</exception>
        <exception cref="System.NotSupportedException"><para>The <see cref="System.Collections.IList" /> is read-only.</para><para>-or-</para><para>The <see cref="System.Collections.IList" /> has a fixed size.</para></exception>
        <remarks>
            <para>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.
 If the collection is indexed, the indexes of the elements that are moved are also updated.
 This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</para>
        </remarks>
    </doc>
</docs>
