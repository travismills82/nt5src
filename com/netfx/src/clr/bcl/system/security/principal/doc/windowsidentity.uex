<docs>
	<doc for="WindowsAccountType.Normal">
		<summary>
    A normal user account.
 </summary>
	</doc>
	<doc for="WindowsAccountType.Guest">
		<summary>
			<para>A Windows guest account.</para>
		</summary>
	</doc>
	<doc for="WindowsAccountType.System">
		<summary>
			<para>A Windows system account.</para>
		</summary>
	</doc>
	<doc for="WindowsAccountType.Anonymous">
		<summary>
			<para>An anonymous account.</para>
		</summary>
	</doc>
	<doc for="WindowsAccountType">
		<summary>
			<para>Specifies the type of Windows account used.</para>
		</summary>
	</doc>
	<doc for="WindowsIdentity.IsAuthenticated">
		<summary>
			<para> Gets a value indicating whether the user has been authenticated by Windows.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/> if the user was authenticated; 
   otherwise,<see langword="false"/>.</para>
		</value>
	</doc>
	<doc for="WindowsIdentity.Token">
		<summary>
			<para> Gets the Windows account token for the user.</para>
		</summary>
		<value>
			<para>The handle of the access token associated with the current execution thread.</para>
		</value>
		<remarks>
			<para>The account token is usually retrieved through a call to unmanaged code, 
 such as a call to the Win32 API LogonUser. For more information on calls to
 unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions"/>.</para>
		</remarks>
	</doc><doc for="WindowsIdentity.Name">
		<summary>
			<para> Gets the user's Windows logon name.</para>
		</summary>
		<value>
			<para>The Windows logon name of the user on whose behalf the code is being run.</para>
		</value>
		<remarks>
			<para> The logon name is in the form
 DOMAIN\USERNAME.</para>
		</remarks>
	</doc><doc for="WindowsIdentity.IsGuest">
		<summary>
			<para> Gets a value indicating whether the user account is 
 identified as a <see cref="System.Security.Principal.WindowsAccountType.Guest"/> account by the
 system.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the user 
 account is a <see cref="System.Security.Principal.WindowsAccountType.Guest"/>
 account; otherwise, <see langword="false"/>.</para>
		</value>
	</doc><doc for="WindowsIdentity.IsSystem">
		<summary>
			<para> Gets a value indicating whether the user account is 
 identified as a <see cref="System.Security.Principal.WindowsAccountType.System"/> account by the
 system.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the user 
 account is a <see cref="System.Security.Principal.WindowsAccountType.System"/>
 account; otherwise, <see langword="false"/>.</para>
		</value>
	</doc><doc for="WindowsIdentity.IDeserializationCallback.OnDeserialization">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="WindowsIdentity">
		<summary>
			<para> Represents a Windows user.</para>
		</summary>
		<remarks>
			<para> Call the <see cref="System.Security.Principal.WindowsIdentity.GetCurrent"/> method to create
   a <see cref="System.Security.Principal.WindowsIdentity"/> object
   that represents the current user.</para>
		</remarks>
	</doc><doc for="WindowsIdentity.AuthenticationType">
		<summary>
			<para> Gets the type of authentication used to identify the user.</para>
		</summary>
		<value>
			<para>The type of authentication used to identify the user.</para>
		</value>
		<remarks>
			<para>The authentication type is typically NTLM
      for <see cref="System.Security.Principal.WindowsIdentity"/> objects.</para>
		</remarks>
	</doc><doc for="WindowsIdentity.GetAnonymous">
		<summary>
			<para>Returns a <see cref="System.Security.Principal.WindowsIdentity"/> object that represents
   an anonymous Windows user.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Security.Principal.WindowsIdentity"/> object that represents
   an anonymous Windows user.</para>
		</returns>
	</doc><doc for="WindowsIdentity.IsAnonymous">
		<summary>
			<para> Gets a value indicating whether the user account is identified as an anonymous account by the
      system.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the user account is an
   anonymous account; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Anonymous accounts are typically only encountered from within ASP.NET-based
      applications when anonymous access is allowed by the Microsoft Internet
      Information Services.</para>
		</remarks>
	</doc><doc for="WindowsIdentity.Finalize">
		<summary>
			<para>Frees resources before the <see cref="System.Security.Principal.WindowsIdentity"/> is reclaimed by the
   Garbage Collector.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="M:System.Object.Finalize" qualify="true"/>. Application code should not call this method;
   an object's <see cref="M:System.Object.Finalize"/> method is automatically invoked during garbage
   collection, unless finalization by the garbage collector has been disabled by a
   call to the <see cref="M:System.GC.SuppressFinalize" qualify="true"/> method. </para>
			<para>For more information about <see cref="System.Object.Finalize" qualify="true"/> and <see cref="M:System.ComponentModel.Container.Dispose"/>, see
<see topic="cpconfinalizemethodscdestructors"/>, 
<see topic="cpconCleaningUpUnmanagedResources"/> 
and <see topic="cpconOverridingFinalizeMethod"/>. </para>
		</remarks>
	</doc>
	<doc for="WindowsIdentity.ISerializable.GetObjectData">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class
   for the user represented by the specified Windows account
   token.</para>
		</summary>
		<param name="userToken">The account token for the user on whose behalf the code is running.</param>
		<exception cref="System.ArgumentException"><para>Unable to logon.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Security.Principal.WindowsIdentity"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term><see cref="System.Security.Principal.WindowsIdentity.AuthenticationType"/></term>
					<description>NTLM</description>
				</item>
				<item>
					<term><see cref="System.Security.Principal.WindowsAccountType"/></term>
					<description><see langword="Normal"/></description>
				</item>
				<item>
					<term><see cref="System.Security.Principal.WindowsIdentity.IsAuthenticated"/></term>
					<description><see langword="false"/></description>
				</item>
			</list>
			<note type="note">
   The token represented by <paramref name="userToken"/> is usually retrieved through a call
   to unmanaged code, such as a call to the Win32 API LogonUser. For more
   information on calls to unmanaged code, see
<see topic="cpconconsumingunmanageddllfunctions"/>.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class
   for the user represented by the
   specified User Principal Name (UPN).</para>
		</summary>
		<param name="sUserPrincipalName">The UPN for the user on whose behalf the code is running.</param>
		<exception cref="System.ArgumentException"><para>Unable to logon.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The UPN identified in <paramref name="sUserPrincipalName"/>
is used to retrieve a token for that user though the Win32 API
LogonUser. In turn that token is used to identify the
user. An exception might be returned due to the inability to logon using the
supplied UPN. </para>
			<para><see langword="Note[note]"/> This
constructor only applies to Windows .NET Server or later platforms. On
all other platforms it will return an <see cref="System.ArgumentException"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/>
class for the user represented by the specified Windows account token
and the specified authentication type.</para>
		</summary>
		<param name="userToken">The account token for the user on whose behalf the code is running.</param>
		<param name=" type">The type of authentication used to identify the user.</param>
		<exception cref="System.ArgumentException"><para>Unable to logon.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Security.Principal.WindowsIdentity"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term><see cref="System.Security.Principal.WindowsAccountType"/></term>
					<description><see langword="Normal"/></description>
				</item>
				<item>
					<term><see cref="System.Security.Principal.WindowsIdentity.IsAuthenticated"/></term>
					<description><see langword="false"/></description>
				</item>
			</list>
			<note type="note">
   The token represented by <paramref name="userToken"/> is usually retrieved through a call
   to unmanaged code, such as a call to the Win32 API LogonUser. For more
   information on calls to unmanaged code, see
<see topic="cpconconsumingunmanageddllfunctions"/>.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity5">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class
   for the user represented by the specified User Principal Name (UPN)
   and the specified authentication type.</para>
		</summary>
		<param name="sUserPrincipalName">The UPN for the user on whose behalf the code is running.</param>
		<param name=" type">The type of authentication used to identify the user.</param>
		<exception cref="System.ArgumentException"><para>Unable to logon.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The UPN identified in <paramref name="sUserPrincipalName"/>
is used to retrieve a token for that user though the Win32 API
LogonUser. In turn that token is used to identify the
user. An exception might be returned due to the inability to logon using the
supplied UPN. </para>
			<para><see langword="Note[note]"/> This constructor only applies
to Windows .NET Server or later platforms. On all other platforms it
will return an <see cref="System.ArgumentException"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class for
   the user represented by the specified Windows account token, the specified
   authentication type, and the specified Windows account type.</para>
		</summary>
		<param name="userToken">The account token for the user on whose behalf the code is running.</param>
		<param name=" type">The type of authentication used to identify the user.</param>
		<param name=" acctType">One of the <see cref="System.Security.Principal.WindowsAccountType"/> values.</param>
		<exception cref="System.ArgumentException"><para>Unable to logon.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The following table shows initial property values for an instance of <see cref="System.Security.Principal.WindowsIdentity"/>.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Initial Value</description>
				</listheader>
				<item>
					<term><see cref="System.Security.Principal.WindowsIdentity.IsAuthenticated"/></term>
					<description><see langword="false"/></description>
				</item>
			</list>
			<note type="note">
   The token represented by <paramref name="userToken"/> is usually retrieved through a call
   to unmanaged code, such as a call to the Win32 API LogonUser. For more
   information on calls to unmanaged code, see
<see topic="cpconconsumingunmanageddllfunctions"/>.
</note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class for the user represented by
   the specified Windows account token, the specified authentication type, the specified
   Windows account type, and the specified authentication status.</para>
		</summary>
		<param name="userToken">The account token for the user on whose behalf the code is running.</param>
		<param name=" type">The type of authentication used to identify the user.</param>
		<param name=" acctType">One of the <see cref="System.Security.Principal.WindowsAccountType"/> values.</param>
		<param name=" isAuthenticated"><see langword="true"/> to indicate that the user is authenticated; otherwise, <see langword="false"/>.</param>
		<exception cref="System.ArgumentException"><para>Unable to logon.</para></exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>The token represented by <paramref name="userToken"/> is usually retrieved through a call
   to unmanaged code, such as a call to the Win32 API LogonUser. For more
   information on calls to unmanaged code, see
<see topic="cpconconsumingunmanageddllfunctions"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.GetCurrent">
		<summary>
			<para>Returns a <see cref="System.Security.Principal.WindowsIdentity"/> object that represents the current Windows user.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Security.Principal.WindowsIdentity"/> object that represents the current user.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
	<doc for="WindowsIdentity.Impersonate1">
		<summary>
			<para>Impersonates the user represented by the specified user token.</para>
		</summary>
		<param name="userToken">The handle of a Windows account token. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser. For more information on calls to unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions"/>.</param>
		<returns>
			<para>A <see cref="System.Security.Principal.WindowsImpersonationContext"/> object
   that
   represents the Windows user prior to impersonation; this object can be
   used to revert to the original user's context.</para>
		</returns>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<remarks>
			<para>On Windows NT platforms, the current user must have
      sufficient rights to allow impersonation.</para>
			<note type="inotes">
      Because Microsoft Windows 98
      and Windows Millennium
      Edition platforms do not have users or user tokens, impersonation cannot take place
      on those platforms.
      
   </note>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
		<example>
			<para>The following example demonstrates how to impersonate a
      user and then revert to the original identity.</para>
			<codelink SampleID="WindowsIdentity Impersonation" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WindowsIdentity.Impersonate">
		<overload>
			<para>Allows code to impersonate
      a different Windows user.</para>
		</overload>
		<summary>
			<para>Impersonates the user represented by the <see cref="System.Security.Principal.WindowsIdentity"/>
object.</para>
		</summary>
		<returns>
			<para>A <see cref="System.Security.Principal.WindowsImpersonationContext"/> object
   that represents the Windows user prior to impersonation; this can be used to
   revert to the original user's context.</para>
		</returns>
		<remarks>
			<para> On Windows NT platforms, the current user must have
      sufficient rights to allow impersonation.</para>
			<note type="inotes">
      Because Microsoft Windows
      98
      and Windows Millennium
      Edition platforms do not have users or user tokens, impersonation cannot take place on
      those platforms.
      
   </note>
		</remarks>
		<example>
			<para>The following example demonstrates how to impersonate a
      user and then revert to the original identity.</para>
			<codelink SampleID="WindowsIdentity Impersonation" SnippetID="1"/>
		</example>
	</doc>
	<doc for="WindowsIdentity.WindowsIdentity6">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Principal.WindowsIdentity"/> class for the user represented by
   information in a <see cref="System.Runtime.Serialization.SerializationInfo"/> stream.</para>
		</summary>
		<param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> containing the account information for the user. </param>
		<param name=" context">A <see cref="System.Runtime.Serialization.StreamingContext"/> that indicates the stream characteristics.</param>
		<exception cref="System.NotSupportedException">A <see cref="System.Security.Principal.WindowsIdentity"/> cannot be serialized across processes.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the correct permissions. See the requirements section.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for ability to manipulate the principal object. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" qualify="true"/>.</permission>
	</doc>
</docs>
