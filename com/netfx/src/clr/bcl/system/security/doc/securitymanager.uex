<docs>
	<doc for="SecurityManager.PrintGrantInfo">
		<summary>
			<para>Displays a current list of the set of granted and denied permissions.</para>
		</summary>
	</doc>
	<doc for="SecurityManager">
		<summary>
			<para> Provides the main access point
      for
      classes interacting with the security system. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para>Security provides methods to access and manipulate the security policy configuration. You
      cannot create instances of <see cref="System.Security.SecurityManager"/>.</para>
		</remarks>
	</doc>
	<doc for="PolicyLevelType.Enterprise">
		<summary>
			<para> Security policy for all managed code in an enterprise.</para>
		</summary>
	</doc><doc for="PolicyLevelType.AppDomain">
		<summary>
			<para> Security policy for all managed code in an 
 application.</para>
		</summary>
	</doc><doc for="SecurityManager.ResolvePolicy1">
		<summary>
			<para> Determines what permissions to grant to code based
 on the specified evidence.</para>
		</summary>
		<param name="evidence">The evidence set used to evaluate policy.</param>
		<returns>
			<para>The set of permissions that would be granted by the security system.</para>
		</returns>
		<remarks>
			<para>This method invokes the security policy engine, providing it with evidence of
 the calling code's identity. The result is determined by the security
 policy.</para>
		</remarks>
	</doc><doc for="SecurityManager.ResolvePolicy">
		<overload>
			<para>Determines what permissions to grant to code.</para>
		</overload>
		<summary>
			<para> Determines what permissions to grant to code based on the
 specified evidence and requests.</para>
		</summary>
		<param name="evidence">The evidence set used to evaluate policy.</param>
		<param name="reqdPset">The required permissions the code needs to run.</param>
		<param name="optPset">The optional permissions that will be used if granted, but aren't required for the code to run.</param>
		<param name="denyPset">The denied permissions that must never be granted to the code even if policy otherwise permits it.</param>
		<param name="denied">An output parameter that contains the set of permissions not granted.</param>
		<returns>
			<para>The set of permissions that would be granted by the security system.</para>
		</returns>
		<exception cref="System.Security.Policy.PolicyException">Policy fails to grant the minimum required permissions specified by the <paramref name="reqdPset "/>parameter.</exception>
		<remarks>
			<para> This method invokes the security policy
 engine, providing it with evidence of the calling code's identity and the set of
 permissions the code requests. The result is determined by the security policy. This method
 returns the set of permissions that would be granted by the security system,
 and returns the set of permissions that would be denied as an output parameter. The effective granted
 permissions are those in the granted set that are
 not in the denied set.</para>
		</remarks>
	</doc><doc for="SecurityManager.ResolvePolicyGroups">
		<summary>
			<para> Gets a collection of code groups matching the specified
 evidence.</para>
		</summary>
		<param name="evidence">The evidence set against which the policy is evaluated.</param>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/>
enumeration of the set of
code groups matching the evidence.</para>
		</returns>
		<remarks>
			<para> This method is useful in analyzing how a specified policy configuration
 works with specific kinds of evidence.</para>
			<para> Code groups will be returned from all applicable levels
 of the policy hierarchy matching the <paramref name="evidence"/>
 parameter.</para>
		</remarks>
	</doc><doc for="PolicyLevelType.User">
		<summary>
			<para> Security policy for all managed code that is run by the user.</para>
		</summary>
	</doc><doc for="SecurityManager.IsGranted">
		<summary>
			<para>Determines whether a permission is granted to the caller.</para>
		</summary>
		<param name="perm">The permission to test against the grant of the caller.</param>
		<returns>
			<para><see langword="true"/> if the permissions granted to
   the caller include the permission <paramref name="perm"/>; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Granting of permissions is determined by
      policy and is different from a demand subject to overrides, such as an assert.
      Also, <see cref="System.Security.SecurityManager.IsGranted"/>
      only tests the grant of the
      calling code assembly, independent of other callers on the stack.</para>
		</remarks>
	</doc><doc for="PolicyLevelType">
		<summary>
			<para>Specifies the type of a managed code policy level.</para>
		</summary>
		<remarks>
			<para>The highest level of security policy is enterprise-wide. Successive lower
      levels of hierarchy represent further policy restrictions, but can never grant
      more permissions than allowed by higher levels. The policy levels in order are
      the following.</para>
			<para>1. Enterprise</para>
			<para>2. Machine</para>
			<para>3. User</para>
			<para>4. Application domain</para>
		</remarks>
		<seealso cref="System.Security.Policy.PolicyLevel"/>
		<seealso cref="System.Security.SecurityManager.PolicyHierarchy"/>
	</doc><doc for="PolicyLevelType.Machine">
		<summary>
			<para> Security policy for all managed code that is run on the computer.</para>
		</summary>
	</doc><doc for="SecurityManager.GetZoneAndOrigin">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc>
	<doc for="SecurityManager.LoadPolicyLevelFromString">
		<summary>
			<para>Loads a <see cref="System.Security.Policy.PolicyLevel"/> from the specified string.</para>
		</summary>
		<param name="str">The XML representation of a security policy level in the same form in which it appears in a configuration file.</param>
		<param name=" type">One of the <see cref="System.Security.PolicyLevelType"/> values.</param>
		<returns>
			<para>The loaded <see cref="System.Security.Policy.PolicyLevel"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="str"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="str"/> parameter is not valid.</exception>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para></exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to view and modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc>
	<doc for="SecurityManager.SavePolicyLevel">
		<summary>
			<para>Saves a modified security policy level loaded with
   <see cref="System.Security.SecurityManager.LoadPolicyLevelFromFile"/>.</para>
		</summary>
		<param name="level">The <see cref="System.Security.Policy.PolicyLevel"/> object to be saved.</param>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para></exception>
		<remarks>
			<para>The <see cref="System.Security.Policy.PolicyLevel"/> will be saved to the same location
   from which it loaded.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc>
	<doc for="SecurityManager.PolicyHierarchy">
		<summary>
			<para>Provides an
      enumerator to access the security policy hierarchy by levels, such as
      computer policy and user policy.</para>
		</summary>
		<returns>
			<para>An <see cref="System.Collections.IEnumerator"/> for <see cref="System.Security.Policy.PolicyLevel"/>
objects that compose the security
policy hierarchy.</para>
		</returns>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para></exception>
		<remarks>
			<para>The returned enumerator provides successive <see cref="System.Security.Policy.PolicyLevel"/><see langword=" "/>objects that represent the policy at the
   respective (machine, user, enterprise, application domain) level of the hierarchy. These objects are the live policy objects; altering
   these objects can have unpredictable results.</para>
			<para> Minimum policy hierarchy
   consists of a machine level, an enterprise level, and a user level. However,
   the hierarchy can include additional levels. </para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to view and modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc>
	<doc for="SecurityManager.SavePolicy">
		<summary>
			<para> Saves
      the modified security policy state.</para>
		</summary>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para></exception>
		<remarks>
			<para>This method saves the policy as exposed by <see cref="System.Security.SecurityManager.PolicyHierarchy"/>, <see cref="System.Security.Policy.PolicyLevel"/> , and
   other classes that represent configuration of the security policy. Unless this
   method is called, changes made to the policy objects will not be saved and will not affect subsequent
   application runs.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc>
	<doc for="SecurityManager.CheckExecutionRights">
		<summary>
			<para> Gets or sets a value indicating whether code must
      have <see cref="System.Security.Permissions.SecurityPermissionFlag.Execution"/> in order to execute.</para>
		</summary>
		<value>
			<para><see langword="true"/> if code must
   have <see cref="System.Security.Permissions.SecurityPermissionFlag.Execution"/> in order to execute; otherwise,
<see langword="false"/>.</para>
		</value>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para></exception>
		<remarks>
			<para>If this property is <see langword="false"/>, even code
   without <see cref="System.Security.Permissions.SecurityPermissionFlag.Execution"/> can execute.
   Execution checking is expensive and can eliminate the advantages of lazy policy
   resolution. This property is provided to disable execution checking when needed.</para>
			<para> A change to this property is not persisted until <see cref="System.Security.SecurityManager.SavePolicy"/> is
called. New processes will not be affected by the change until it is persisted
in the registry.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc>
	<doc for="SecurityManager.LoadPolicyLevelFromFile">
		<summary>
			<para>Loads a <see cref="System.Security.Policy.PolicyLevel"/> from the specified file.</para>
		</summary>
		<param name="path">The physical file path to a file containing the security policy information.</param>
		<param name=" type">One of the <see cref="System.Security.PolicyLevelType"/> values.</param>
		<returns>
			<para>The loaded <see cref="System.Security.Policy.PolicyLevel"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The file indicated by the <paramref name="path"/> parameter does not exist.</exception>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para>
			<para>-or-</para>
			<para>The code that calls this method does not have <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>. </para>
			<para>-or-</para>
			<para>The code that calls this method does not have <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/>.</para>
			<para>-or-</para>
			<para>The code that calls this method does not have <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/>. </para></exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to view and modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" qualify="true"/></permission>
	</doc>
	<doc for="SecurityManager.SecurityEnabled">
		<summary>
			<para> Gets or sets a
      value indicating whether security is
      enabled.</para>
		</summary>
		<value>
			<para><see langword="true"/> if security is
   enabled; otherwise, <see langword="false"/>.</para>
		</value>
		<exception cref="System.Security.SecurityException"><para>The code that calls this method does not have <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/>. </para></exception>
		<remarks>
			<para>This property is used by the
   <see topic="cpgrfcodeaccesssecuritypolicyutilitycaspolexe"/>
				<see langword="-security"/>
(<see langword="-s"/>) option to
turn off code-based security.</para>
			<para><see cref="System.Security.SecurityManager.SecurityEnabled"/> provides a way for
administrators to disable code access security. When code access security is
disabled, all code access demands succeed. Effectively, this grants all
code <see langword="FullTrust"/>. Disabling code access security
bypasses the security system so that code might perform slightly better than the equivalent
security policy granting <see langword="FullTrust"/>
to all code. This property does not
disable role-based security; therefore, <see cref="System.Security.Permissions.PrincipalPermission"/> demands
are not affected.</para>
			<note type="caution">
   Disabling
   code access security makes
   the system vulnerable to attacks by malicious code such as viruses and worms.
   Disabling code access security does not automatically block managed code from
   running in any way. It only causes managed code to run without restriction
   by the code access security system, and should only be done with the most
   extreme caution. Turning off security to gain extra performance should only be
   done when other security measures have been taken to ensure that overall system
   security is not breached. Examples of other security precautions include
   disconnecting from public networks, physically securing computers, and so
   on.
</note>
			<para>A change to this property is not persisted in the registry until <see cref="System.Security.SecurityManager.SavePolicy"/>
is called. New processes will not be affected by the change until it is
persisted in the registry. Changing the
value of this property in a running process does not necessarily change the state
in the expected manner. To ensure changes have taken effect, you must call
<see cref="System.Security.SecurityManager.SavePolicy"/> and start a new process.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to modify policy. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
		<example>
			<para>The following example ensures that code cannot run in an
      unsecured environment.</para>
			<codelink SampleID="Classic SecurityManager.SecurityEnabled Example" SnippetID="1"/>
		</example>
	</doc>
</docs>
