<docs>
	<doc for="SecurityElement.ToString">
		<summary>
			<para>Produces a string representation of an XML element and its constituent
       attributes, child elements, and text.</para>
		</summary>
		<returns>
			<para> The XML element
       and its contents.</para>
		</returns>
		<remarks>
			<para>This method is useful in debugging to see the XML
       representation of the element.</para>
		</remarks>
	</doc>
	<doc for="SecurityElement.AddChild">
		<summary>
			<para>Adds a child element to the XML element.</para>
		</summary>
		<param name="child">The child element to add.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="child"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The child element is added following any previously existing child
      elements.</para>
		</remarks>
	</doc><doc for="SecurityElement.Equal">
		<summary>
			<para>Compares two XML element objects for equality.</para>
		</summary>
		<param name="other">An XML element object to which to compare the current XML element object.</param>
		<returns>
			<para><see langword="true"/> if the tag, 
   attribute names and values, child elements, and text fields in the current XML
   element are identical to their counterparts in the <paramref name="other"/>
   parameter; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>If there are child elements, comparison extends recursively to them.</para>
			<para>There is no support for comparing different XML representations of the same
      characters.</para>
		</remarks>
	</doc><doc for="SecurityElement.IsValidTag">
		<summary>
			<para>Determines whether a string is a valid tag.</para>
		</summary>
		<param name="tag">The tag to test for validity.</param>
		<returns>
			<para><see langword="true"/> if 
   the <paramref name="tag"/> parameter is a valid XML
   tag; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This can be used to test a <see cref="System.Security.SecurityElement.Tag"/> before setting it.</para>
		</remarks>
	</doc><doc for="SecurityElement.IsValidText">
		<summary>
			<para>Determines whether a string is valid as text within an XML element.</para>
		</summary>
		<param name="text">The text to test for validity.</param>
		<returns>
			<para><see langword="true"/> if 
   the <paramref name="text"/> parameter is a valid XML text element; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method can be used to test <see cref="System.Security.SecurityElement.Text"/>before setting it.</para>
		</remarks>
	</doc><doc for="SecurityElement.IsValidAttributeName">
		<summary>
			<para>Determines whether a string is a valid attribute name.</para>
		</summary>
		<param name="name">The attribute name to test for validity.</param>
		<returns>
			<para><see langword="true"/> if 
   the <paramref name="name"/> parameter is a valid XML
   attribute name; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> This method can be used to test an attribute before adding it to a security
      element.</para>
		</remarks>
	</doc><doc for="SecurityElement.IsValidAttributeValue">
		<summary>
			<para>Determines whether a string is a valid attribute value.</para>
		</summary>
		<param name="value">The attribute value to test for validity.</param>
		<returns>
			<para><see langword="true"/> if 
   the <paramref name="value"/> parameter is a valid XML attribute value; otherwise,
<see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method can be used to test an attribute before adding it to a security element.</para>
		</remarks>
	</doc><doc for="SecurityElement.SearchForChildByTag">
		<summary>
			<para>Finds a child by its tag name.</para>
		</summary>
		<param name="tag">The tag for which to search in child elements.</param>
		<returns>
			<para>The first child XML element with the specified tag value, or
   <see langword="null"/> if no child element with <paramref name="tag"/>
   exists.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="tag"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>With XML as follows, <c>SearchForChildByTag("second")</c> would return the child element
   <c>&lt;second&gt;</c>.</para>
			<para><c>&lt;thetag A="123" B="456" C="789"&gt; &lt;first&gt;text1&lt;/first&gt;
      &lt;second&gt;text2&lt;/second&gt;&lt;/thetag&gt;</c></para>
		</remarks>
	</doc><doc for="SecurityElement.SearchForTextOfTag">
		<summary>
			<para>Finds a child by its tag name and returns the contained text.</para>
		</summary>
		<param name="tag">The tag for which to search in child elements.</param>
		<returns>
			<para>The text contents of the first child element with the specified tag value.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
		<remarks>
			<para>This method is equivalent to the following:</para>
			<code lang="C#">String SearchForTextOfTag(String tag) { 
    SecurityElement element = this.SearchForChildByTag(tag);
    return element.Text;
 }
   </code>
			<para><c>
				</c></para>
   With XML as follows, <c>SearchForTextOfTag("second")</c> would
return "text2".
<para><c>&lt;thetag A="123" B="456" C="789"&gt; &lt;first&gt;text1&lt;/first&gt;
   &lt;second&gt;text2&lt;/second&gt;&lt;/thetag&gt;</c></para>
		</remarks>
	</doc><doc for="SecurityElement.Attribute">
		<summary>
			<para>Finds an attribute by name in an XML element.</para>
		</summary>
		<param name="name">The name of the attribute for which to search.</param>
		<returns>
			<para>The value associated with the named attribute,
      or <see langword="null"/> if no attribute with <paramref name="name"/> exists.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>With XML as follows, <c>Attribute("B")</c> would return "456".</para>
			<para><c>&lt;thetag A="123" B="456" C="789"&gt;text&lt;/thetag&gt;</c></para>
		</remarks>
	</doc><doc for="SecurityElement.SecurityElement">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.SecurityElement"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.SecurityElement"/> class with the specified tag.</para>
		</summary>
		<param name="tag">The tag name of an XML element.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="tag"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="tag"/> parameter is invalid in XML.</exception>
		<remarks>
			<para>The <paramref name="tag"/> parameter must
   consist of a valid XML tag name. Use <see cref="System.Security.SecurityElement.Escape"/>
   to remove invalid characters from the string.</para>
		</remarks>
	</doc><doc for="SecurityElement.Tag">
		<summary>
			<para> Gets or sets the tag name of
      an XML element.</para>
		</summary>
		<value>
			<para>The tag name of an XML element.</para>
		</value>
		<exception cref="System.ArgumentNullException">The tag is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The tag is not valid in XML.</exception>
		<remarks>
			<para> In XML, the tag appears in the script
      as appears below:</para>
			<para><c>&lt;tag attributes&gt;text&lt;/tag&gt;</c></para>
			<para>If this element has child elements, the children will
      replace <c>text</c>.</para>
			<para>Assign only valid XML tag strings to this property. Use
      <see cref="System.Security.SecurityElement.Escape"/> to remove
      invalid characters from the string.</para>
		</remarks>
	</doc><doc for="SecurityElement.Attributes">
		<summary>
			<para> Gets or sets the attributes of an XML element as name/value
      pairs.</para>
		</summary>
		<value>
			<para>The <see cref="System.Collections.Hashtable"/> object for the attribute values of the XML element.</para>
		</value>
		<exception cref="System.ArgumentException">The name or value of the <see cref="System.Collections.Hashtable"/> object is invalid.</exception>
		<remarks>
			<para> Each attribute is stored in the <see cref="System.Collections.Hashtable"/> as a name/value
   pair.</para>
			<para>Names and values in attributes should contain only valid
   XML attribute characters. Use <see cref="System.Security.SecurityElement.Escape"/> to remove invalid characters from the
   string.</para>
			<para> There is no support for quoted strings, so strings for name/value
   pairs should not contain quotes or other characters requiring quoting.</para>
		</remarks>
	</doc><doc for="SecurityElement.AddAttribute">
		<summary>
			<para> Adds a name/value attribute to an XML element.</para>
		</summary>
		<param name="name">The name of the attribute.</param>
		<param name=" value">The value of the attribute.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter or <paramref name="value"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="name"/> parameter or <paramref name="value"/> parameter is invalid in XML.</para>
			<para>-or-</para>
			<para>An attribute with the name specified by the <paramref name="name"/> parameter already exists.</para></exception>
		<remarks>
			<para>Names and values in attributes should only contain valid
      XML attribute characters. XML attribute names must be unique. Use <see cref="System.Security.SecurityElement.Escape"/> to remove invalid characters from the
      string.</para>
			<para> There is no support for quoted strings, so strings for name/value
      pairs should not contain quotes or other characters requiring quoting.</para>
		</remarks>
	</doc><doc for="SecurityElement.Escape">
		<summary>
			<para>Replaces invalid XML characters in a string with their valid XML equivalent.</para>
		</summary>
		<param name="str">The string within which to escape invalid characters.</param>
		<returns>
			<para>The input string with invalid characters replaced.</para>
		</returns>
		<remarks>
			<para>Use this method to replace invalid characters in a
      string before using the string in a <see cref="System.Security.SecurityElement"/>. If invalid characters are used in
      an <see cref="System.Security.SecurityElement"/> without being escaped, an <see cref="System.ArgumentException"/> is
      thrown.</para>
			<para> The following table shows the invalid XML characters and their escaped
      equivalents.</para>
			<list type="table">
				<listheader>
					<term>invalid XML Character</term>
					<description>Replaced With</description>
				</listheader>
				<item>
					<term> "&lt;"</term>
					<description>"&amp;lt;"</description>
				</item>
				<item>
					<term> "&gt;"</term>
					<description>"&amp;gt;"</description>
				</item>
				<item>
					<term> "\""</term>
					<description>"&amp;quot;"</description>
				</item>
				<item>
					<term> "\'"</term>
					<description>"&amp;apos;"</description>
				</item>
				<item>
					<term> "&amp;"</term>
					<description>"&amp;amp;"</description>
				</item>
			</list>
		</remarks>
	</doc><doc for="SecurityElement.Children">
		<summary>
			<para> Gets or sets the array of child elements of the XML element.</para>
		</summary>
		<value>
			<para> The ordered child elements of the XML element as security elements.</para>
		</value>
		<exception cref="System.ArgumentNullException">A child of the XML parent node is <see langword="null"/>.</exception>
		<remarks>
			<para>If a <see cref="System.Security.SecurityElement"/> contains both <see cref="System.Security.SecurityElement.Text"/> and <see cref="System.Security.SecurityElement.Children"/>, <see cref="System.Security.SecurityElement.Text"/> will appear first.</para>
		</remarks>
	</doc><doc for="SecurityElement.Text">
		<summary>
			<para> Gets or sets the text within an XML element.</para>
		</summary>
		<value>
			<para> The value of the text within an XML element.</para>
		</value>
		<exception cref="System.ArgumentException">The text is not valid in XML.</exception>
		<remarks>
			<para>The text should not contain XML special characters. Use
 <see cref="System.Security.SecurityElement.Escape"/> to remove invalid characters from the string.</para>
			<para>If a <see cref="System.Security.SecurityElement"/> contains both 
<see cref="System.Security.SecurityElement.Text"/> and 
<see cref="System.Security.SecurityElement.Children"/>, 
<see cref="System.Security.SecurityElement.Text"/> 
will appear first.</para>
		</remarks>
	</doc><doc for="SecurityElement">
		<summary>
			<para> Represents the XML object model
      for encoding security objects. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> This class is intended to be
      a
      lightweight implementation of a simple XML object model for
      use within the security system, and not for use as
      a general XML object
      model. This documentation assumes a basic knowledge of XML.</para>
			<para>The simple XML object model for an element consists of the following
      parts:</para>
			<list type="bullet"><item>
					<term>
         The tag is the element name.</term>
				</item>
				<item>
					<term>
         The attributes are zero or more name/value attribute
         pairs on the element.</term>
				</item>
				<item>
					<term>
         The children are zero or more elements nested within
            <c>&lt;tag&gt;</c> and <c>&lt;/tag&gt;</c>.</term>
				</item>
			</list>
			<para> It is strongly suggested that
      attribute based XML representation is used to express security elements and their
      values. This means properties of an element are expressed as attributes and
      property values are expressed as attribute values. Avoid nesting text within tags.
      For any <c>&lt;tag&gt;text&lt;/tag&gt;</c> representation a representation of
   type <c>&lt;tag value=”text”/&gt;</c> is usually available. Using this
attribute-based XML representation increases readability and allows easy WMI portability of
the resulting XML serialization.</para>
			<para> An attribute name must be one character or longer,
   and cannot be <see langword="null"/> . If element-based value representation is
   used, elements with a text string that is <see langword="null"/>
   are represented in the <c>&lt;tag/&gt;</c> form; otherwise, text is
delimited by the <c>&lt;tag&gt;</c> and <c>&lt;/tag&gt;</c> tokens. Both forms
can be combined with attributes, which are shown if present.</para>
			<para> The tags, attributes, and text of elements,
   if present, are always case-sensitive. The XML form contains quotations
   and escapes where necessary. String values that include characters invalid for use
   in XML result in an <see cref="System.ArgumentException"/>
   . These rules apply to all properties and methods.</para>
			<note type="note">
   For performance reasons,
   character validity is only checked when the element is encoded into XML text form, and
   not on every set of a property or method. Static methods allow explicit
   checking where needed.
   
</note>
		</remarks>
	</doc><doc for="SecurityElement.SecurityElement1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.SecurityElement"/> class with the specified tag and text.</para>
		</summary>
		<param name="tag">The tag name of the XML element.</param>
		<param name=" text">The text content within the element.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="tag"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="tag"/> parameter or <paramref name="text"/> parameter is invalid in XML.</exception>
		<remarks>
			<para>If the <paramref name="text"/> parameter
   is <see langword="null"/> this constructor produces an element
   identical to the default constructor.</para>
		</remarks>
	</doc></docs>
