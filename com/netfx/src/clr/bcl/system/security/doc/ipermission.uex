<docs>
	<doc for="IPermission">
		<summary>
			<para> Defines methods implemented by permission types. </para>
		</summary>
		<remarks>
			<para> Permissions in
      the
      common language runtime are objects that describe sets of operations that
      can be secured for specified resources. A permission object describes operations or access that is subject
      to security control; it does not represent access or a right to perform operations.
      Permissions are used by both application code and the .NET Framework security system in the
      following ways.</para>
			<list type="bullet"><item>
					<term>
         Code requests the permissions it needs in order to
         run.</term>
				</item>
				<item>
					<term>
         The security system policy grants permissions to code
         in order for it to run.</term>
				</item>
				<item>
					<term>
         Code demands that calling code has a permission.</term>
				</item>
				<item>
					<term>
         Code overrides the security stack using
         assert/deny/permit-only.</term>
				</item>
			</list>
			<note type="note">
   If you write a new permission, you
   must implement this interface in your class.
   
</note>
		</remarks>
	</doc><doc for="IPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same
      access to resources as the original permission.</para>
		</remarks>
	</doc><doc for="IPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection of the current
      permission and the specified permission. </para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
		<returns>
			<para> A new permission that represents
      the intersection of the current permission and the specified permission. This
      new permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not an instance of the same class as the current permission.</exception>
		<remarks>
			<para> The
      intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
			<para>The following statements are required to be true for all implementations of 
      the <see cref="System.Security.IPermission.Intersect"/> method. <paramref name="X"/> and <paramref name="Y"/>
      represent <see cref="System.Security.IPermission"/> object references that are not
   <see langword="null"/>.</para>
			<list type="bullet"><item>
					<term>
						<paramref name="X"/>.Intersect(<paramref name="X"/>) returns a value equal to <paramref name="X"/>.</term>
				</item>
				<item>
					<term>
						<paramref name="X"/>.Intersect(<paramref name="Y"/>) returns the same value as 
      <paramref name="Y"/>.Intersect(<paramref name="X"/>).</term>
				</item>
				<item>
					<term>
						<paramref name="X"/>.Intersect(<see langword="null"/>) returns <see langword="null"/>.</term>
				</item>
			</list>
		</remarks>
	</doc><doc for="IPermission.Union">
		<summary>
			<para> Creates a permission that is the union of
      the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the union
      of the current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.IPermission.Union"/>
is a permission
that represents all the operations represented by both the current permission and the specified permission. Any
demand that passes either permission passes their union.</para>
			<para>The following statements are required to be true for all implementations of
   the <see cref="System.Security.IPermission.Union"/> method. <paramref name="X"/> and <paramref name="Y"/>
   represent <see cref="System.Security.IPermission"/> objects that are not <see langword="null"/>.</para>
			<list type="bullet"><item>
					<term>
						<paramref name="X"/>.Union(<paramref name="X"/>) returns an object that has the same value as
   <paramref name="X"/>.</term>
				</item>
				<item>
					<term>
						<paramref name="X"/>.Union(<paramref name="Y"/>) returns an object that has the same value as the
      object returned by <paramref name="Y"/>.Union(<paramref name="X"/>).</term>
				</item>
				<item>
					<term>
						<paramref name="X"/>.Union(<see langword="null"/>) returns an object that has the same
      value as <paramref name="X"/>.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="IPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of the
      specified permission.</para>
		</summary>
		<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the
   current permission is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para> The current permission is a subset of the specified
      permission if the current permission specifies a set of operations that is
      wholly contained by the specified permission. For example, a permission that
      represents access to C:\example.txt is a subset of a permission that represents
      access to C:\. If this method returns<see langword="true"/> , the current permission represents
      no more access to the protected resource than does the specified
      permission.</para>
			<para>The following statements are required to be true for all implementations of
      the <see cref="System.Security.IPermission.IsSubsetOf"/> method. <paramref name="X"/>, <paramref name="Y"/>, and <paramref name="Z"/>
      represent <see cref="System.Security.IPermission"/> objects that are not <see langword="null"/>.</para>
			<list type="bullet"><item>
					<term>
						<paramref name="X"/>.IsSubsetOf(<paramref name="X"/>) returns <see langword="true"/>.</term>
				</item>
				<item>
					<term>
						<paramref name="X"/>.IsSubsetOf(<paramref name="Y"/>) returns the same value as
      <paramref name="Y"/>.IsSubsetOf(<paramref name="X"/>) if and only if <paramref name="X"/> and <paramref name="Y"/> represent the 
         same set of permissions.</term>
				</item>
				<item>
					<term>
         
         If <paramref name="X"/>.IsSubsetOf(<paramref name="Y"/>) and <paramref name="Y"/>.IsSubsetOf(<paramref name="Z"/>)
         both return <see langword="true"/>, <paramref name="X"/>.IsSubsetOf(<paramref name="Z"/>) returns
      <see langword="true"/>.</term>
				</item>
			</list>
		</remarks>
	</doc>
	<doc for="IPermission.Demand">
		<summary>
			<para>Throws a <see cref="System.Security.SecurityException"/> at run time if the security requirement is not
   met.</para>
		</summary>
		<remarks>
			<para>This method is typically used by secure libraries to ensure that callers have
      permission to access a resource. For example, a file class in a secure class
      library calls <see cref="System.Security.CodeAccessPermission.Demand"/> for the necessary <see cref="System.Security.Permissions.FileIOPermission"/> before performing a file operation
      requested by the caller. </para>
			<para> Although the
      majority of the classes that implement this interface method satisfy the security
      criteria by performing a full stack walk, a stack walk is not necessarily
      performed. An example of an implementation that does not perform a stack walk
      is <see cref="System.Security.Permissions.PrincipalPermission.Demand" qualify="true"/> . </para>
			<para> When a stack walk is performed, the permissions of the code that calls this method are
      not examined; the check begins from the immediate caller of that code and proceeds
      up the stack. The call stack is typically represented as growing down, so
      that methods higher in the call stack call methods lower in the call stack.
   <see cref="System.Security.CodeAccessPermission.Demand"/> succeeds only if no
   <see cref="System.Security.SecurityException"/> is raised. </para>
		</remarks>
	</doc>
</docs>
