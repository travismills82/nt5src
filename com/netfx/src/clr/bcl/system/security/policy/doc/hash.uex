<docs>
	<doc for="Hash.Hash">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Policy.Hash"/> 
class.</para>
		</summary>
		<param name="assembly">The <see cref="System.Reflection.Assembly"/> for which to compute hash value.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="assembly"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="assembly"/> parameter is not a valid <see cref="System.Reflection.Assembly"/>.</exception>
		<remarks>
			<para>The hash value computation is not performed until one of the
      properties or methods is called.</para>
		</remarks>
	</doc>
	<doc for="Hash.GetObjectData">
		<summary>
			<para>Gets the <see cref="System.Runtime.Serialization.SerializationInfo"/> object with the parameter name
 and additional exception information.</para>
		</summary>
		<param name="info">The object that holds the serialized object data.</param>
		<param name=" context">The contextual information about the source or destination. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="info"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>This method is provided to support inheritance of the <see cref="System.Runtime.Serialization.ISerializable"/> interface.</para>
		</remarks>
	</doc><doc for="Hash.ToString">
		<summary>
			<para> Returns a string representation of the
 current <see cref="System.Security.Policy.Hash"/>.</para>
		</summary>
		<returns>
			<para> A representation of the current <see cref="System.Security.Policy.Hash"/>.</para>
		</returns>
		<remarks>
			<para> This method is useful during debugging to get an easy-to-read representation
 of the object.</para>
		</remarks>
	</doc><doc for="Hash.IBuiltInEvidence.OutputToBuffer">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Hash.IBuiltInEvidence.GetRequiredSize">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Hash.IBuiltInEvidence.InitFromBuffer">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="Hash">
		<summary>
			<para> Provides
      evidence about the hash value for an assembly. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> A hash value represents a unique value that corresponds to a particular set of bytes.
      Rather than referring to an assembly by name, version, or other designation,
      a hash value designates the assembly without ambiguity. Names are subject
      to collisions in rare cases where the same name is given to completely different
      code. Different variations of code can accidentally be marked with the same
      version. However, even changing a single bit results in a very different hash
      value.</para>
			<para>Hash values are a cryptographically secure way to refer
      to specific assemblies in policy without the use of digital signatures. A
      secure hash algorithm is designed so that it is computationally infeasible to construct
      a different assembly with the identical hash value by either an accidental
      or malicious attempt. By default, evidence from the <see cref="System.Security.Cryptography.SHA1"/> and <see cref="System.Security.Cryptography.MD5"/> hash algorithms is supported,
      although any hash algorithm can be used through <see cref="System.Security.Policy.Hash.GenerateHash"/>.</para>
		</remarks>
	</doc><doc for="Hash.SHA1">
		<summary>
			<para>Gets the <see cref="System.Security.Cryptography.SHA1"/> hash value for the assembly.</para>
		</summary>
		<value>
			<para>A byte array that represents the <see cref="System.Security.Cryptography.SHA1"/> hash value for
   the assembly.</para>
		</value>
		<remarks>
			<para>The assembly specified in the constructor provides the bytes for
      the hash computation.</para>
		</remarks>
		<example>
			<para>The following example computes the <see cref="System.Security.Cryptography.SHA1"/> hash for <c>myAssembly</c> and stores it in <c>hashcode</c>.</para>
			<codelink SampleID="Classic Hash.SHA1 Example" SnippetID="1"/>
		</example>
	</doc><doc for="Hash.MD5">
		<summary>
			<para>Gets the <see cref="System.Security.Cryptography.MD5"/> hash value for the assembly.</para>
		</summary>
		<value>
			<para>A byte array that represents the <see cref="System.Security.Cryptography.MD5"/> hash value for
   the assembly.</para>
		</value>
		<remarks>
			<para>The assembly specified in the constructor provides the bytes for
      the hash computation.</para>
		</remarks>
		<example>
			<para>The following example computes the <see cref="System.Security.Cryptography.MD5"/> hash for <c>myAssembly</c> and stores it in <c>hashcode</c>.</para>
			<codelink SampleID="Classic Hash.MD5 Example" SnippetID="1"/>
		</example>
	</doc><doc for="Hash.GenerateHash">
		<summary>
			<para> Computes the hash value for the assembly using the specified hash algorithm.
      </para>
		</summary>
		<param name="hashAlg">The hash algorithm to use to compute the hash value for the assembly. </param>
		<returns>
			<para> A byte array that represents the hash value for
      the assembly.
      </para>
		</returns>
		<remarks>
			<para> The assembly specified in the constructor provides the bytes for
      the hash computation.
      </para>
		</remarks>
	</doc></docs>
