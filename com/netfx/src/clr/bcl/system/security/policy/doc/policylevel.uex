<docs>
	<doc for="PolicyLevel.Label">
		<summary>
			<para>Gets a descriptive label for the policy level.</para>
		</summary>
		<value>
			<para>The label associated with the policy level.</para>
		</value>
		<remarks>
			<para>The label is used to help the administrator identify the policy
 level.</para>
		</remarks>
		<example>
			<para>The following example writes a list of the labels of all policy levels in the 
 hierarchy.</para>
			<codelink SampleID="Classic PolicyLevel.Label Example" SnippetID="1"/>
		</example>
	</doc><doc for="PolicyLevel.NamedPermissionSets">
		<summary>
			<para>Gets a list of named permission sets defined for the policy level.</para>
		</summary>
		<value>
			<para>A list of named permission sets defined for the policy level.</para>
		</value>
		<example>
			<para>The following example writes the names of the permission 
 sets in all policy levels.</para>
			<codelink SampleID="Classic PolicyLevel.NamedPermissionSets Example" SnippetID="1"/>
		</example>
	</doc><doc for="PolicyLevel.AddNamedPermissionSet">
		<summary>
			<para> Adds a <see cref="System.Security.NamedPermissionSet"/> to the current policy level.
 </para>
		</summary>
		<param name="permSet">The <see cref="System.Security.NamedPermissionSet"/> to add to the current policy level. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="permSet"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="permSet"/> parameter has the same name as an existing <see cref="System.Security.NamedPermissionSet"/> in the <see cref="System.Security.Policy.PolicyLevel"/>.</exception>
		<remarks>
			<para> Named permission sets are scoped by policy
 level.
 </para>
		</remarks>
	</doc><doc for="PolicyLevel.RemoveNamedPermissionSet">
		<overload>
			<para>Removes a <see cref="System.Security.NamedPermissionSet"/> from the 
 current policy level.</para>
		</overload>
		<summary>
			<para>Removes the specified <see cref="System.Security.NamedPermissionSet"/> from the current policy level.</para>
		</summary>
		<param name="permSet">The <see cref="System.Security.NamedPermissionSet"/> to remove from the current policy level.</param>
		<returns>
			<para>The <see cref="System.Security.NamedPermissionSet"/> that was removed.</para>
		</returns>
		<exception cref="System.ArgumentException">The <see cref="System.Security.NamedPermissionSet"/> specified by the <paramref name="permSet"/> parameter was not found.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="permSet"/> parameter is <see langword="null"/>.</exception>
	</doc><doc for="PolicyLevel.GetNamedPermissionSet">
		<summary>
			<para> Returns the <see cref="System.Security.NamedPermissionSet"/> in the current policy level with the
 specified name.
 </para>
		</summary>
		<param name="name">The name of the <see cref="System.Security.NamedPermissionSet"/> to find. </param>
		<returns>
			<para> The <see cref="System.Security.NamedPermissionSet"/> in the current policy level 
 with the specified name, if found; otherwise, <see langword="null"/>.
 </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<seealso cref="System.Security.NamedPermissionSet"/>
	</doc><doc for="PolicyLevel.RemoveNamedPermissionSet1">
		<summary>
			<para>Removes the <see cref="System.Security.NamedPermissionSet"/> with the specified name from the current policy level.</para>
		</summary>
		<param name="name">The name of the <see cref="System.Security.NamedPermissionSet"/> to remove.</param>
		<returns>
			<para>The <see cref="System.Security.NamedPermissionSet"/> that was removed.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="name"/> parameter is equal to the name of a reserved permission set. <para>-or-</para>
			<para>A <see cref="System.Security.NamedPermissionSet"/> with the specified name cannot be found.</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="name"/> parameter is <see langword="null"/>.</exception>
		<seealso cref="System.Security.NamedPermissionSet"/>
	</doc><doc for="PolicyLevel.ChangeNamedPermissionSet">
		<summary>
			<para>Replaces a <see cref="System.Security.NamedPermissionSet"/> in the current policy level
 with the specified <see cref="System.Security.PermissionSet"/>.</para>
		</summary>
		<param name="name">The name of the <see cref="System.Security.NamedPermissionSet"/> to replace.</param>
		<param name=" pSet">The <see cref="System.Security.PermissionSet"/> that replaces the <see cref="System.Security.NamedPermissionSet"/> specified by the <paramref name="name"/> parameter.</param>
		<returns>
			<para>A copy of the <see cref="System.Security.NamedPermissionSet"/> that was replaced.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>The <paramref name="name"/> parameter is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="pSet"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="name"/> parameter is equal to the name of a reserved permission set.</para>
			<para>-or-</para>
			<para>The <see cref="System.Security.PermissionSet"/> specified by the <paramref name="pSet"/> parameter cannot be found.</para></exception>
	</doc><doc for="PolicyLevel.RemoveFullTrustAssembly">
		<overload>
			<para>Removes an assembly from the list of assemblies the policy level uses to evaluate
 policy.</para>
		</overload>
		<summary>
			<para>Removes an assembly with the specified <see cref="System.Security.Policy.StrongName"/> from the list of assemblies the policy
 level uses to evaluate policy.</para>
		</summary>
		<param name="sn">The <see cref="System.Security.Policy.StrongName"/> of the assembly to remove from the list of assemblies used to evaluate policy.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="sn"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The assembly with the <see cref="System.Security.Policy.StrongName"/> specified by the <paramref name="sn"/> parameter does not have full trust.</exception>
	</doc><doc for="PolicyLevel.RemoveFullTrustAssembly1">
		<summary>
			<para>Removes an assembly with the specified <see cref="System.Security.Policy.StrongNameMembershipCondition"/> from the list of assemblies the policy
 level uses to evaluate policy.</para>
		</summary>
		<param name="snMC">The <see cref="System.Security.Policy.StrongNameMembershipCondition"/> of the assembly to remove from the list of assemblies used to evaluate policy.</param>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="snMC"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.ArgumentException">The <see cref="System.Security.Policy.StrongNameMembershipCondition"/> specified by the <paramref name="snMC"/> parameter does not have full trust.</exception>
	</doc><doc for="PolicyLevel.ToXml">
		<summary>
			<para> Creates an XML encoding of the security object and its current
 state.
 </para>
		</summary>
		<returns>
			<para> An XML encoding of the security object, including any state
 information.
 </para>
		</returns>
	</doc><doc for="PolicyLevel.FromXml">
		<summary>
			<para> Reconstructs a security object with a given state from an XML
 encoding.
 </para>
		</summary>
		<param name="e">The XML encoding to use to reconstruct the security object. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="e"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <see cref="System.Security.SecurityElement"/> specified by the <paramref name="e"/> parameter is invalid.</exception>
	</doc><doc for="PolicyLevel.AddFullTrustAssembly1">
		<summary>
			<para>Adds the specified <see cref="System.Security.Policy.StrongNameMembershipCondition"/> to the list of <see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects used to determine whether an 
   assembly is a member of the group of assemblies
   that should not be evaluated.</para>
		</summary>
		<param name="snMC">The <see cref="System.Security.Policy.StrongNameMembershipCondition"/> to add to the list of <see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</param>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="snMC"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.ArgumentException">The <see cref="System.Security.Policy.StrongNameMembershipCondition"/> specified by the <paramref name="snMC"/> parameter already has full trust.</exception>
		<seealso cref="System.Security.Policy.PolicyLevel.FullTrustAssemblies"/>
	</doc><doc for="PolicyLevel.AddFullTrustAssembly">
		<overload>
			<para> Adds a <see cref="System.Security.Policy.StrongNameMembershipCondition"/> to the list of <see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects used to determine whether an 
   assembly is a member of the group of assemblies that should not be
   evaluated.</para>
		</overload>
		<summary>
			<para> Adds a <see cref="System.Security.Policy.StrongNameMembershipCondition"/> 
corresponding to the specified <see cref="System.Security.Policy.StrongName"/> to the list of
<see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects used to determine whether an 
assembly is a member of the group of assemblies
that should not be evaluated.</para>
		</summary>
		<param name="sn">The <see cref="System.Security.Policy.StrongName"/> used to create the <see cref="System.Security.Policy.StrongNameMembershipCondition"/> to add to the list of <see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="sn"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <see cref="System.Security.Policy.StrongName"/> specified by the <paramref name="sn"/> parameter already has full trust.</exception>
		<seealso cref="System.Security.Policy.PolicyLevel.FullTrustAssemblies"/>
	</doc><doc for="PolicyLevel.FullTrustAssemblies">
		<summary>
			<para>Gets a list of <see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects used to determine whether
   an assembly is a member of the group of assemblies used to
   evaluate security policy.</para>
		</summary>
		<value>
			<para>A list of <see cref="System.Security.Policy.StrongNameMembershipCondition"/> objects 
   used to determine whether an assembly is a member of the group of assemblies used
   to evaluate security policy. These
   assemblies are granted full trust during security policy evaluation of assemblies not in the list.</para>
		</value>
		<remarks>
			<para><see cref="System.Security.Policy.PolicyLevel.FullTrustAssemblies"/> 
are granted full trust during security policy evaluation of assemblies not in
the list, but are not automatically granted full
trust when directly evaluated by the security policy system.</para>
		</remarks>
	</doc><doc for="PolicyLevel.Reset">
		<summary>
			<para>Returns the current policy level to the default state.</para>
		</summary>
		<remarks>
			<para>The default state is different for each policy level.</para>
		</remarks>
	</doc><doc for="PolicyLevel.Resolve">
		<summary>
			<para>Resolves policy based on evidence for the policy level, and
      returns the resulting <see cref="System.Security.Policy.PolicyStatement"/>.</para>
		</summary>
		<param name="evidence">The <see cref="System.Security.Policy.Evidence"/> used to resolve the <see cref="System.Security.Policy.PolicyLevel"/>.</param>
		<returns>
			<para>The resulting <see cref="System.Security.Policy.PolicyStatement"/>.</para>
		</returns>
		<exception cref="System.Security.Policy.PolicyException">The policy level contains multiple matching code groups marked as exclusive.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="evidence"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para><see cref="System.Security.Policy.PolicyLevel.Resolve"/> is the basic policy evaluation operation for
   policy levels. Given a set of evidence as input, this method tests membership
   conditions of code groups starting at the root and working down as matched. The
   combination of permissions resulting from the matching code groups produces
   a <see cref="System.Security.Policy.PolicyStatement"/>
   
   that is returned.</para>
			<para>In granting permissions to code, security policy uses the
   resolved policy statements for all applicable policy levels, together with the code
   request for permissions.</para>
		</remarks>
	</doc><doc for="PolicyLevel.RootCodeGroup">
		<summary>
			<para>Gets or sets the root code group for the policy level.</para>
		</summary>
		<value>
			<para>The <see cref="System.Security.Policy.CodeGroup"/> that is the root of the tree of policy level code groups.</para>
		</value>
		<remarks>
			<para> Every policy level has one root <see cref="System.Security.Policy.CodeGroup"/>.</para>
		</remarks>
		<example>
			<para>The following example writes the type of the membership 
      condition that the root <see cref="System.Security.Policy.CodeGroup"/>
      in each policy level uses.</para>
			<codelink SampleID="Classic PolicyLevel.RootCodeGroup Example" SnippetID="1"/>
		</example>
	</doc><doc for="PolicyLevel.Recover">
		<summary>
			<para>Replaces the configuration file for this <see cref="System.Security.Policy.PolicyLevel"/> with
   the last backup (reflecting the state of policy prior to the last time it was saved) and returns it to the state of the last save.</para>
		</summary>
		<exception cref="System.Security.Policy.PolicyException"><para>The policy level does not have a valid configuration file.</para></exception>
		<remarks>
			<para>This method does not make modifications to the current
   <see cref="System.Security.Policy.PolicyLevel"/>. Instead, it updates the
   <see cref="System.Security.Policy.PolicyLevel"/> object's file and the
   <see cref="System.Security.Policy.PolicyLevel"/> that the security system uses to
      evaluate policy.</para>
			<para>This method is used by the caspol -recover option (see <see topic="cpgrfcodeaccesssecuritypolicyutilitycaspolexe"/>).</para>
		</remarks>
	</doc><doc for="PolicyLevel.ResolveMatchingCodeGroups">
		<summary>
			<para> Resolves policy at the policy level and returns the root of a code group tree
      that matches the evidence.
      </para>
		</summary>
		<param name="evidence">The <see cref="System.Security.Policy.Evidence"/> used to resolve policy. </param>
		<returns>
			<para> A <see cref="System.Security.Policy.CodeGroup"/> representing the root of a tree of code groups matching the specified evidence.
   </para>
		</returns>
		<exception cref="System.Security.Policy.PolicyException">The policy level contains multiple matching code groups marked as exclusive.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="evidence"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> You can use this method to analyze the effect of the code groups in a policy level with
      respect to a certain set of evidence. For example, if the security policy is not
      granting an assembly the minimum code request permissions it needs, it can be
      difficult to tell by examination of the code groups exactly where the problem
      is.
      </para>
			<para> Since this method returns a code group that can have
      child code
      groups, it
      is possible for an administrator to examine the code group and its child code groups and determine
      which code groups match.
      </para>
		</remarks>
	</doc><doc for="PolicyLevel">
		<summary>
			<para> Represents the security policy levels for the common language runtime. This class cannot be
      inherited.</para>
		</summary>
		<remarks>
			<para>The highest level of security policy is enterprise-wide. Successive lower
      levels of hierarchy represent further policy restrictions, but can never grant
      more permissions than allowed by higher levels. The following policy levels are
      implemented:</para>
			<para>1. Enterprise: security policy for all managed code in an enterprise.</para>
			<para>2. Machine: security policy for all managed code run on the computer.</para>
			<para>3. User: security policy for all managed code run by the user.</para>
			<para>4. Application domain: security policy for all managed code in an
      application.</para>
			<para>A policy level consists of a set of code groups
      organized into a single rooted tree (see <see cref="System.Security.Policy.CodeGroup"/> ), a
      set of named permission sets that are referenced by the code groups to
      specify permissions to be granted to code belonging to the code group, and
      a list of fully-trusted assemblies.</para>
			<para>Use <see cref="System.Security.SecurityManager.PolicyHierarchy" qualify="true"/> to enumerate the policy levels.</para>
		</remarks>
	</doc><doc for="PolicyLevel.CreateAppDomainLevel">
		<summary>
			<para> Creates a new policy level for use at the application
      domain policy level.</para>
		</summary>
		<returns>
			<para>The newly created <see cref="System.Security.Policy.PolicyLevel"/>.</para>
		</returns>
		<remarks>
			<para>This method creates a new <see cref="System.Security.Policy.PolicyLevel"/> with the <see cref="System.Security.Policy.PolicyLevel.Label"/> "AppDomain". The
   new <see cref="System.Security.Policy.PolicyLevel"/> will initially
   contain the same <see cref="System.Security.NamedPermissionSet"/> objects as in the default
   computer policy, and will have a single root code group that grants
<see langword="FullTrust"/> to all code.</para>
		</remarks>
		<seealso cref="System.AppDomain.SetAppDomainPolicy" qualify="true"/>
	</doc><doc for="PolicyLevel.StoreLocation">
		<summary>
			<para>Gets the path where the policy file is stored.</para>
		</summary>
		<value>
			<para>The path where the policy file is stored, or
   <see langword="null"/> if the <see cref="System.Security.Policy.PolicyLevel"/> does not have a storage location.</para>
		</value>
	</doc></docs>
