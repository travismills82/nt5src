<docs>
	<doc for="CodeGroup.AttributeString">
		<summary>
			<para>Gets a string representation of the attributes of the policy
       statement for the code group.</para>
		</summary>
		<value>
			<para>A string representation of the attributes of the policy statement
       for the code group.</para>
		</value>
		<remarks>
			<para>The string representation is not localized.</para>
		</remarks>
	</doc>
	<doc for="CodeGroup.PolicyStatement">
		<summary>
			<para> Gets or sets the
      policy statement associated with the code group.</para>
		</summary>
		<value>
			<para>The policy statement for the code group.</para>
		</value>
		<remarks>
			<para>The policy statement applies to code in assemblies when evidence matches
      the membership condition.</para>
			<para>This property can also be set by passing a policy statement to 
      the constructor.</para>
		</remarks>
		<example>
			<para>The following example sets the <see cref="System.Security.Policy.PolicyStatement"/> for a code group.</para>
			<codelink SampleID="Classic CodeGroup.PolicyStatement Example" SnippetID="1"/>
		</example>
	</doc>
	<doc for="CodeGroup.Name">
		<summary>
			<para>Gets or sets the name of the code group.</para>
		</summary>
		<value>
			<para>The name of the code group.</para>
		</value>
	</doc>
	<doc for="CodeGroup.Description">
		<summary>
			<para>Gets or sets the description of the code group.</para>
		</summary>
		<value>
			<para>The description of the code group.</para>
		</value>
	</doc>
	<doc for="CodeGroup.Copy">
		<summary>
			<para> When overridden in a derived class, makes a deep copy of the current code group.
      </para>
		</summary>
		<returns>
			<para> An equivalent copy of the current code group, including its membership
      conditions and child code groups.
      </para>
		</returns>
		<remarks>
			<para> This method makes a deep copy of the code group, so that copies
      of all objects the code group contains are also made.
      </para>
		</remarks>
	</doc>
	<doc for="CodeGroup.GetHashCode">
		<summary>
			<para>Gets the hash code of the current code group.</para>
		</summary>
		<returns>
			<para>The hash code of the current code group.</para>
		</returns>
	</doc><doc for="CodeGroup.PermissionSetName">
		<summary>
			<para> Gets the name of the named permission set for the code group.
      </para>
		</summary>
		<value>
			<para> The name of a named permission set of the policy level.
      </para>
		</value>
		<remarks>
			<para> This property can be <see langword="null"/> if the code group contains an unnamed permission set.
   </para>
		</remarks>
	</doc><doc for="CodeGroup.RemoveChild">
		<summary>
			<para> Removes the specified child code group.
      </para>
		</summary>
		<param name="group">The code group to be removed as a child. </param>
		<exception cref="System.ArgumentException">The <paramref name="group"/> parameter is not an immediate child code group of the current code group. </exception>
		<remarks>
			<para> Only immediate
      child code groups can be removed with this method.
      </para>
		</remarks>
	</doc><doc for="CodeGroup.CodeGroup">
		<summary>
			<para>Initializes a new instance of <see cref="System.Security.Policy.CodeGroup"/>.</para>
		</summary>
		<param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy.</param>
		<param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="membershipCondition"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The type of the <paramref name="membershipCondition"/> parameter is not valid.</para>
			<para>-or-</para>
			<para>The type of the <paramref name="policy"/> parameter is not valid.</para></exception>
		<remarks>
			<para>This constructor creates a basic code group and should be
      called from the constructors of custom code groups. You can add child code
      groups using the <see cref="System.Security.Policy.CodeGroup.AddChild"/>
      method.</para>
		</remarks>
	</doc><doc for="CodeGroup.Children">
		<summary>
			<para>Gets or sets an ordered list of the child code groups of a code group.</para>
		</summary>
		<value>
			<para>A list of child code groups.</para>
		</value>
		<exception cref="System.ArgumentException">An attempt is made to set this property to <see langword="null"/>.</exception>
		<remarks>
			<para> The order of child code groups is significant
      for certain code groups.</para>
		</remarks>
	</doc><doc for="CodeGroup.AddChild">
		<summary>
			<para>Adds a child code group to the current code group.</para>
		</summary>
		<param name="group">The code group to be added as a child. This new child code group is added to the end of the list.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="group"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="group"/> parameter is not a valid code group.</exception>
	</doc><doc for="CodeGroup.ToXml">
		<overload>
			<para> Creates an XML encoding of the security object and its current
 state.
 </para>
		</overload>
		<summary>
			<para> Creates an XML encoding of the security object and its current state.
 </para>
		</summary>
		<returns>
			<para> An XML encoding of the security object, including any state information.
 </para>
		</returns>
		<remarks>
			<note type="inheritinfo">
				<see cref="System.Security.Policy.CodeGroup.FromXml"/> and <see cref="System.Security.Policy.CodeGroup.ToXml"/> cannot be 
 overridden. If you need to change the way in which your code group
 implementation handles XML, override the <see cref="System.Security.Policy.CodeGroup.ParseXml"/> and <see cref="System.Security.Policy.CodeGroup.CreateXml"/>
 
 methods.
 
 </note>
		</remarks>
	</doc><doc for="CodeGroup.FromXml">
		<overload>
			<para> Reconstructs a security object with a given state from an XML
 encoding.
 </para>
		</overload>
		<summary>
			<para> Reconstructs a security object with a given state from an XML encoding.
 </para>
		</summary>
		<param name="e">The XML encoding to use to reconstruct the security object. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="e"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<note type="inheritinfo">
				<see cref="System.Security.Policy.CodeGroup.FromXml"/> and <see cref="System.Security.Policy.CodeGroup.ToXml"/> cannot be 
 overridden. If you need to change the way in which your code group
 implementation handles XML, override the <see cref="System.Security.Policy.CodeGroup.ParseXml"/> and <see cref="System.Security.Policy.CodeGroup.CreateXml"/>
 
 methods.
 
 </note>
		</remarks>
	</doc><doc for="CodeGroup.FromXml1">
		<summary>
			<para> Reconstructs a security object with a given state and policy level from an XML
 encoding.
 </para>
		</summary>
		<param name="e">The XML encoding to use to reconstruct the security object. </param>
		<param name="level">The policy level within which the code group exists. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="e"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> The policy level context is
 provided for resolution of named permission sets.
 </para>
			<note type="inheritinfo">
				<see cref="System.Security.Policy.CodeGroup.FromXml"/> and <see cref="System.Security.Policy.CodeGroup.ToXml"/> cannot be 
 overridden. If you need to change the way in which your code group
 implementation handles XML, override the <see cref="System.Security.Policy.CodeGroup.ParseXml"/> and <see cref="System.Security.Policy.CodeGroup.CreateXml"/>
 
 methods.
 
 </note>
		</remarks>
	</doc><doc for="CodeGroup.Equals">
		<overload>
			<para>Determines whether two code groups are equivalent.</para>
		</overload>
		<summary>
			<para>Determines whether the specified code group is
 equivalent to the current code group.</para>
		</summary>
		<param name="o">The code group to compare with the current code group. </param>
		<returns>
			<para><see langword="true"/> if the specified code group is
 equivalent to the current code group; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> Two code groups are equivalent if they have the same
 <see cref="System.Security.Policy.CodeGroup.Name"/>, <see cref="System.Security.Policy.CodeGroup.Description"/>, and <see cref="System.Security.Policy.CodeGroup.MembershipCondition"/>.</para>
			<para>This method tests the top-level code group only, not its child code groups.</para>
		</remarks>
	</doc><doc for="CodeGroup.ToXml1">
		<summary>
			<para> Creates an XML encoding of the security object, its current state, and the policy level within which the code
 exists.
 </para>
		</summary>
		<param name="level">The policy level within which the code group exists. </param>
		<returns>
			<para> An XML encoding of the security object, including any state
 information.
 </para>
		</returns>
		<remarks>
			<para> The policy level context is provided for resolution of
 named permission sets.
 </para>
			<note type="inheritinfo">
				<see cref="System.Security.Policy.CodeGroup.FromXml"/> and <see cref="System.Security.Policy.CodeGroup.ToXml"/> cannot be 
 overridden. If you need to change the way in which your code group
 implementation handles XML, override the <see cref="System.Security.Policy.CodeGroup.ParseXml"/> and <see cref="System.Security.Policy.CodeGroup.CreateXml"/>
 
 methods.
 
 </note>
		</remarks>
	</doc><doc for="CodeGroup.MergeLogic">
		<summary>
			<para>When overridden in a derived class, gets the merge logic for the code group.</para>
		</summary>
		<value>
			<para>A description of the merge logic for the code group.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
 This
 property is a string description of the merge logic used by the code group
 to resolve the permissions granted by its child code groups. It is meant to aid
 administrators using the code group, but is not used by the policy system.
 
 </note>
		</remarks>
	</doc><doc for="CodeGroup.Equals1">
		<summary>
			<para>Determines whether the specified code group is equivalent to the current
 code group, checking the child code groups as well, if specified.</para>
		</summary>
		<param name="cg">The code group to compare with the current code group.</param>
		<param name=" compareChildren"><see langword="true"/> to compare child code groups, as well; otherwise, <see langword="false"/>.</param>
		<returns>
			<para><see langword="true"/> if the specified code group is equivalent to the
 current code group; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>Two code groups are equivalent if they have the same
 <see cref="System.Security.Policy.CodeGroup.Name"/>, <see cref="System.Security.Policy.CodeGroup.Description"/>,
 and <see cref="System.Security.Policy.CodeGroup.MembershipCondition"/>.</para>
			<para>If the <paramref name="compareChildren"/> parameter is
<see langword="true"/>, this method will only return <see langword="true"/> if the current code group and 
 all its child code groups are equivalent to the specified code group and all its
 child code groups.</para>
		</remarks>
	</doc><doc for="CodeGroup.CreateXml">
		<summary>
			<para>When overridden in a derived class, serializes
 properties and internal state specific to a derived code group and adds the
 serialization to the specified <see cref="System.Security.SecurityElement"/>.</para>
		</summary>
		<param name="element">The XML encoding to which to add the serialization.</param>
		<param name=" level">The policy level within which the code group exists.</param>
		<remarks>
			<para><see cref="System.Security.Policy.CodeGroup.ToXml"/> cannot be overridden. If you
 need to serialize members specific to a particular implementation of <see cref="System.Security.Policy.CodeGroup"/>, you must override <see cref="System.Security.Policy.CodeGroup.CreateXml"/> and serialize your members
 there. When the code group is serialized, <see cref="System.Security.Policy.CodeGroup.ToXml"/> calls
<see cref="System.Security.Policy.CodeGroup.CreateXml"/> and adds your serialization to 
 the <see cref="System.Security.SecurityElement"/> created by <see cref="System.Security.Policy.CodeGroup.ToXml"/>.
 </para>
			<para>The XML created using this method is deserialized by the <see cref="System.Security.Policy.CodeGroup.ParseXml"/> method.</para>
			<note type="inheritinfo">
 If
 you implement this method, you must implement the <see cref="System.Security.Policy.CodeGroup.ParseXml"/> method as well.
</note>
		</remarks>
		<seealso cref="System.Security.Policy.CodeGroup.ParseXml"/>
	</doc><doc for="CodeGroup.ParseXml">
		<summary>
			<para>When overridden in a derived class, reconstructs
 properties and internal state specific to a derived code group from the
 specified <see cref="System.Security.SecurityElement"/>.</para>
		</summary>
		<param name="e">The XML encoding to use to reconstruct the security object.</param>
		<param name=" level">The policy level within which the code group exists.</param>
		<remarks>
			<para><see cref="System.Security.Policy.CodeGroup.FromXml"/> cannot be overridden. If you
 need to deserialize members specific to a particular implementation of <see cref="System.Security.Policy.CodeGroup"/>, you must override <see cref="System.Security.Policy.CodeGroup.ParseXml"/> and deserialize your members
 there. When the code group is deserialized, <see cref="System.Security.Policy.CodeGroup.FromXml"/> calls <see cref="System.Security.Policy.CodeGroup.ParseXml"/> and reconstructs your members
 from the <see cref="System.Security.SecurityElement"/>.
 </para>
			<para>This method deserializes XML created using <see cref="System.Security.Policy.CodeGroup.CreateXml"/>.</para>
			<note type="inheritinfo">
 If you implement
 this method, you must implement the <see cref="System.Security.Policy.CodeGroup.CreateXml"/> method as well.
</note>
		</remarks>
		<seealso cref="System.Security.Policy.CodeGroup.CreateXml"/>
	</doc><doc for="CodeGroup.MembershipCondition">
		<summary>
			<para> Gets or sets the code group's membership condition.
      </para>
		</summary>
		<value>
			<para> The membership condition that determines to which evidence the code
      group is applicable.
      </para>
		</value>
		<exception cref="System.ArgumentException">An attempt is made to set this parameter to <see langword="null"/>.</exception>
		<remarks>
			<para> A membership condition tests evidence and returns a Boolean value that tells whether there
      is a match.
      </para>
		</remarks>
	</doc><doc for="CodeGroup.Resolve">
		<summary>
			<para> When overridden in a derived class, resolves policy
      for the code group and its descendants for a set of evidence.
      </para>
		</summary>
		<param name="evidence">The evidence for the assembly. </param>
		<returns>
			<para> A policy statement that consists of the permissions granted
      by the code group with optional attributes, or <see langword="null"/>
      if
      the code group does not apply (the membership condition does not match the
      specified evidence).
      </para>
		</returns>
		<remarks>
			<para> Given evidence for an assembly to be loaded, this method
      evaluates the code group by checking the membership condition against the specified
      evidence. If there is a match, this method returns a policy statement for the code group,
      including evaluation of child code groups.
      </para>
			<para>For a <see cref="System.Security.Policy.UnionCodeGroup"/>, all child code groups whose membership
   condition match the specified evidence are also resolved, and all resulting
   policy statements are combined with the policy statement of the parent union code
   group. Each child code group type determines how all child groups under it are
   applied, depending on how the <see cref="System.Security.Policy.CodeGroup.Resolve"/>
   
   methods of
   these child groups work. </para>
			<para> The .NET Framework security system uses
<see cref="System.Security.Policy.CodeGroup.Resolve"/> on the policy levels to determine which permissions 
   to grant to loaded code from the resulting policy statements and the code
   request on the assembly. </para>
		</remarks>
	</doc><doc for="CodeGroup.ResolveMatchingCodeGroups">
		<summary>
			<para>When overridden in a derived class, resolves matching code groups.</para>
		</summary>
		<param name="evidence">The evidence for the assembly.</param>
		<returns>
			<para>A <see cref="System.Security.Policy.CodeGroup"/>
that is the root of the tree of matching code groups.</para>
		</returns>
		<remarks>
			<para>This method has the same evaluation characteristics as <see cref="System.Security.Policy.CodeGroup.Resolve"/>
. The code group that is returned contains child code groups, which
in turn can have child code groups as necessary to reflect the complete set of
code groups that were matched by the evidence provided.</para>
		</remarks>
	</doc><doc for="CodeGroup">
		<summary>
			<para> Represents the abstract base class from which all implementations
      of code groups must derive.
      </para>
		</summary>
		<remarks>
			<para> 
      Code groups are the building blocks of code access
      security policy. Each policy level consists of a root code group that can have child
      code groups. Each child code group can have their own child code groups; this behavior
      extends to any number of levels, forming a tree. Each code group has a membership
      condition that determines if a given assembly belongs to it based
      on the evidence for that assembly. </para>
			<para> 
      
      Only those code groups whose membership conditions
      match a given assembly's evidence will be applied. If a matching code group has child
      code groups, then those children whose membership conditions also match the
      supplied evidence will likewise be applied. </para>
		</remarks>
		<seealso topic="cpconcodegroups"/>
	</doc>
</docs>
