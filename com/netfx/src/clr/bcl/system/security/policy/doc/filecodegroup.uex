<docs>
	<doc for="FileCodeGroup.Copy">
		<summary>
			<para> Makes a deep copy of the current code group.
      </para>
		</summary>
		<returns>
			<para> An equivalent copy of the current code group, including its membership
      conditions and child code groups.
      </para>
		</returns>
		<remarks>
			<para>This method makes a deep copy of the code group, so that
      copies of all objects the code group contains are also made.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.GetHashCode">
		<summary>
			<para>Gets the hash code of the current code group.</para>
		</summary>
		<returns>
			<para>The hash code of the current code group.</para>
		</returns>
	</doc><doc for="FileCodeGroup.Equals">
		<overload>
			<para>Determines whether the specified code group is
      equivalent to the current code group.</para>
		</overload>
		<summary>
			<para>Determines whether the specified code group is
      equivalent to the current code group.</para>
		</summary>
		<param name="o">The code group to compare with the current code group. </param>
		<returns>
			<para><see langword="true"/> if the specified code group is
   equivalent to the current code group; otherwise, <see langword="false"/>.</para>
		</returns>
	</doc><doc for="FileCodeGroup.MergeLogic">
		<summary>
			<para>Gets the merge logic.</para>
		</summary>
		<value>
			<para> The string "Union".</para>
		</value>
	</doc><doc for="FileCodeGroup.FileCodeGroup">
		<summary>
			<para> Initializes a new instance of the <see cref="System.Security.Policy.FileCodeGroup"/>
class.</para>
		</summary>
		<param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy. </param>
		<param name="access">One of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values. This value is used to construct the <see cref="System.Security.Permissions.FileIOPermission"/> that is granted. </param>
		<exception cref="System.ArgumentNullException">The <paramref name="membershipCondition"/> parameter is <see langword="null"/>. </exception>
		<exception cref="System.ArgumentException"><para>The type of the <paramref name="membershipCondition"/> parameter is not valid.</para>
			<para>-or-</para>
			<para>The type of the <paramref name="access"/> parameter is not valid.</para></exception>
		<remarks>
			<para> This constructor creates a basic code group. Child code
 groups can be added with the <see cref="System.Security.Policy.CodeGroup.AddChild"/>
 method.
 </para>
			<para><see cref="System.Security.Policy.FileCodeGroup"/> returns a permission set containing a
 dynamically-calculated <see cref="System.Security.Permissions.FileIOPermission"/> that grants file access to the
 directory from which the code is run. The type of access granted is determined
 by the <paramref name="access"/> parameter.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.CreateXml">
		<summary>
			<para> Creates an XML encoding of the security object, its
 current state, and the policy level within which the code exists.</para>
		</summary>
		<param name="element">The XML encoding to use to create the security object.</param>
		<param name=" level">The policy level within which the code group exists.</param>
		<remarks>
			<para>This method is for use by the security system, and is not typically called by 
 application code.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.ParseXml">
		<summary>
			<para> Reconstructs a security object with a given state and
 policy level from an XML encoding.</para>
		</summary>
		<param name="e">The XML encoding to use to reconstruct the security object.</param>
		<param name=" level">The policy level within which the code group exists.</param>
		<remarks>
			<para>This method is for use by the security system, and is not typically called by 
 application code.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.AttributeString">
		<summary>
			<para>Gets a string representation of the attributes of the
 policy statement for the code group.</para>
		</summary>
		<value>
			<para>Always <see langword="null"/>.</para>
		</value>
		<remarks>
			<para><see cref="System.Security.Policy.FileCodeGroup"/> does not use <see cref="System.Security.Policy.FileCodeGroup.AttributeString"/>, so this property is always
<see langword="null"/>.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.Resolve">
		<summary>
			<para>Resolves policy for the code group and its descendants
      for a set of evidence.</para>
		</summary>
		<param name="evidence">The evidence for the assembly. </param>
		<returns>
			<para> A policy statement consisting of the permissions granted
      by the code group with optional attributes, or <see langword="null"/>
      if
      the code group does not apply (the membership condition does not match the
      specified evidence).
      </para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="evidence"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.Security.Policy.PolicyException"><para>The current policy is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>More than one code group (including the parent code group and all child code groups) is marked <see cref="System.Security.Policy.PolicyStatementAttribute.Exclusive"/>.</para></exception>
		<remarks>
			<para>Given evidence for an assembly to be loaded, this method
      evaluates the code group by first checking the membership condition against the
      specified evidence. If there is a match, this method returns a policy statement
      for the code group, including evaluation of child code groups. </para>
			<para> The .NET Framework security system uses <see cref="System.Security.Policy.FileCodeGroup.Resolve"/> on
   the policy levels to determine which permissions to grant to loaded code from
   the resulting policy statements and the code request on the assembly.</para>
			<para><see cref="System.Security.Policy.FileCodeGroup"/> uses union semantics and forms a permission
set based on the <see cref="System.Security.Policy.Url"/> specified by <paramref name="evidence"/>.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.ResolveMatchingCodeGroups">
		<summary>
			<para>Resolves matching code groups.</para>
		</summary>
		<param name="evidence">The evidence for the assembly.</param>
		<returns>
			<para>A <see cref="System.Security.Policy.CodeGroup"/> that is the root of the tree of matching
   code groups.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="evidence"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> Given evidence for an assembly to be
      loaded, this method evaluates the code group by first checking the membership
      condition against the specified evidence. If there is a match, this method returns a root code group. The code
      group that is returned contains child code groups, which in turn
      can have child code groups as necessary to reflect the complete set of code groups that
      were matched by the evidence provided. </para>
			<para><see cref="System.Security.Policy.FileCodeGroup"/> uses union semantics and forms a
   permission set based on the <see cref="System.Security.Policy.Url"/> specified by <paramref name="evidence"/>.</para>
		</remarks>
	</doc><doc for="FileCodeGroup.PermissionSetName">
		<summary>
			<para>Gets the name of the named permission set for the code group.</para>
		</summary>
		<value>
			<para>The concatenatation of the string "Same directory FileIO - " and the access type.</para>
		</value>
	</doc><doc for="FileCodeGroup">
		<summary>
			<para>Grants permission to manipulate files located in the code assemblies to code assemblies that match the
      membership condition. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Code groups are the building blocks of code access security policy. Each
      policy level consists of a root code group that can have child code groups. Each
      child code group can have their own child code groups; this behavior extends to
      any number of levels, forming a tree. Each code group has a membership condition
      that determines if a given assembly belongs to it based on the evidence for that
      assembly. Only code groups whose membership conditions match a given assembly
      and their child code groups apply policy. </para>
			<para><see cref="System.Security.Policy.FileCodeGroup"/> has the same child matching semantics as
<see cref="System.Security.Policy.UnionCodeGroup"/>. However, <see cref="System.Security.Policy.FileCodeGroup"/> returns a permission set containing a 
   dynamically-calculated <see cref="System.Security.Permissions.FileIOPermission"/> that grants file access to the
   directory from which the code is run; <see cref="System.Security.Policy.UnionCodeGroup"/> only returns a static permission set.
   The type of file access granted is passed as a parameter to the constructor. </para>
			<para>This code group only matches assemblies run over a file protocol, that is,
   assemblies that have URLs that point to a file or UNC path.</para>
		</remarks>
		<seealso topic="cpconcodegroups"/>
	</doc></docs>
