<docs>
	<doc for="AsymmetricAlgorithm">
		<summary>
			<para> Represents the abstract base class from which all implementations of asymmetric algorithms must
      inherit.
      </para>
		</summary>
		<remarks>
			<para> Asymmetric cryptographic algorithms, also known as
      public-key algorithms, require that both sender and receiver maintain a
      pair of related keys: a private key and a public key. Both keys are unique to
      the entity. The public key can be made available to anyone; this key is used for
      encoding data that is sent to a receiver. The private key must be kept private by
      the receiver; this key is used for decoding messages encoded using the
      receiver's public key. <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/>
      is an implementation of a public-key algorithm.
      </para>
			<para> You can also use public-key systems to
      form digital signatures. Digital signatures are used to authenticate the identity
      of another entity and to protect the integrity of data. For example, to use
      a public-key system to digitally sign a message, the sender first applies a hash
      function to the message to create a message digest. The sender then encrypts
      the message digest with the sender's private key to create the sender's
      personal signature, because this private key uniquely identifies the sender. Upon
      receiving the message and signature, the receiver decrypts the signature using
      the sender's public key to recover the message digest and hashes the message using
      the same hash algorithm that the sender used. If the message digest that
      the receiver computes exactly matches the message digest received from the sender,
      then the receiver can be sure that the message came from the sender. Note
      that anyone can verify a signature, because the sender's public key is common
      knowledge. This method does not retain the secrecy of the message; for the
      message to be secret, it must also be encrypted as described previously. The
      receiver decrypts the message using the receiver's private key and then computes
      the message digest as before. <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> is an
      implementation of a digital signature algorithm. You can
      also use <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/>
      to create and verify a digital signature.
      </para>
			<para> The present implementation provides concrete classes
      for <see cref="System.Security.Cryptography.RSA"/> and <see cref="System.Security.Cryptography.DSA"/>
      only. This class cannot be extended by application code.
      </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.KeySizeValue">
		<summary>
			<para> Represents the size of the key modulus used by the asymmetric algorithm in bits.
      </para>
		</summary>
		<remarks>
			<para>The valid key sizes are specified by the particular asymmetric algorithm
      implementation and are listed in <see cref="System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes"/>.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.AsymmetricAlgorithm.KeySize"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.LegalKeySizesValue">
		<summary>
			<para> Specifies the key sizes that are supported by the asymmetric algorithm.
      </para>
		</summary>
		<remarks>
			<para>Only key sizes that match an entry in this array are supported by the
      asymmetric algorithm.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.AsymmetricAlgorithm">
		<summary>
			<para> Initializes a new instance of <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/>.
   </para>
		</summary>
		<exception cref="System.Security.Cryptography.CryptographicException">The asymmetric algorithm derived class implementation is not valid.</exception>
		<remarks>
			<para>You cannot create an instance of an abstract class. Application
      code will create a new instance of a derived class.
   <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> and <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/>
   are the only currently supported implementations. </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.IDisposable.Dispose">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.Clear">
		<summary>
			<para> Releases all resources used by
      the <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/>.</para>
		</summary>
		<remarks>
			<para>This method is a simple call to <see cref="System.IDisposable.Dispose" qualify="true"/>.</para>
			<para>Calling <see langword="Dispose"/> allows the resources
used by the <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> to be reallocated for other
purposes. For more information about <see langword="Dispose"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.Dispose">
		<summary>
			<para>When overridden in a derived class, releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.KeySize">
		<summary>
			<para> Gets or sets the size of the key modulus used by the asymmetric algorithm in bits.
      </para>
		</summary>
		<value>
			<para> The size of the key modulus used by the asymmetric algorithm.
      </para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">The key modulus size is invalid.</exception>
		<remarks>
			<para> The valid key sizes are specified by the particular
      asymmetric algorithm implementation and are listed in <see cref="System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes"/>.
      </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.LegalKeySizes">
		<summary>
			<para> Gets the key sizes that are supported by the asymmetric
      algorithm.
      </para>
		</summary>
		<value>
			<para> An array containing the key sizes supported by the algorithm.
      </para>
		</value>
		<remarks>
			<para>Only key sizes that match an entry in this array are
      supported by the asymmetric algorithm.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.SignatureAlgorithm">
		<summary>
			<para> Gets the name of the signature algorithm.
      </para>
		</summary>
		<value>
			<para> The name of the signature algorithm.
      </para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.KeyExchangeAlgorithm">
		<summary>
			<para> When overridden in a derived class, gets the name of the key exchange algorithm.
      </para>
		</summary>
		<value>
			<para> The name of the key exchange algorithm.
      </para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.Create">
		<overload>
			<para>Creates an instance of a cryptographic object used to perform the asymmetric
      algorithm.</para>
		</overload>
		<summary>
			<para> Creates an instance of the default
      cryptographic object used to perform the asymmetric algorithm.
      </para>
		</summary>
		<returns>
			<para> The instance of a cryptographic object used to perform the asymmetric algorithm.
      </para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.Create1">
		<summary>
			<para> Creates an instance of the
      specified cryptographic object used to perform the asymmetric algorithm.
      </para>
		</summary>
		<param name="algName">The name of the specific implementation of <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> to use.</param>
		<returns>
			<para> The instance of a cryptographic object used to perform the asymmetric algorithm.
      </para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.FromXmlString">
		<summary>
			<para>When overridden in a derived class, reconstructs
      an <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> object from an XML string.</para>
		</summary>
		<param name="xmlString">The XML string to use to reconstruct the <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> object.</param>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricAlgorithm.ToXmlString">
		<summary>
			<para>When overridden in a derived class, creates and returns
      an XML string representation of the current <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/>
      object.</para>
		</summary>
		<param name="includePrivateParameters"><see langword="true"/> to include private parameters; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>An XML string encoding of the current
   <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> object.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
