<docs>
	<doc for="SymmetricAlgorithm">
		<summary>
			<para> Represents the abstract base
      class from which all implementations of symmetric algorithms must inherit.</para>
		</summary>
		<remarks>
			<para> Symmetric cryptographic algorithms have a single secret key that is
      used for both encryption and decryption. For a symmetric algorithm to be secure, the
      secret key must be known only to the sender and the receiver.</para>
			<para><see cref="System.Security.Cryptography.RijndaelManaged"/>,
<see cref="System.Security.Cryptography.DESCryptoServiceProvider"/>, <see cref="System.Security.Cryptography.RC2CryptoServiceProvider"/>, and <see cref="System.Security.Cryptography.TripleDESCryptoServiceProvider"/>
are implementations of symmetric algorithms.</para>
		</remarks>
		<example>
			<para>The following example method uses <see cref="System.Security.Cryptography.TripleDESCryptoServiceProvider"/> with the specified <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and
   initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>) to encrypt a file specified by <c>inName</c>,
and outputs the encrypted
result to the file specified by <c>outName</c>. The <c>desKey</c> and <c>desIV</c> parameters to the method are 8-byte arrays. You must
have the high encryption pack installed to run this sample.</para>
			<codelink SampleID="Classic CryptoStream Example" SnippetID="1"/>
			<para>Decryption can be handled in the same way; use <see cref="System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor"/> instead of <see cref="System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor"/>. The same
<see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and <see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/> used to encrypt
the file must be used to decrypt.</para>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.BlockSizeValue">
		<summary>
			<para> Represents the
      block size of the cryptographic operation in bits.</para>
		</summary>
		<remarks>
			<para> The block size is the basic unit of data that can
      be encrypted or decrypted in one operation. Messages longer than
      the block size are handled as successive blocks; messages shorter than
      the block size must be padded with extra bits to reach
      the size of a block. Valid block sizes are determined by the symmetric algorithm used.</para>
			<para> This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.BlockSize"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.FeedbackSizeValue">
		<summary>
			<para>Represents the feedback size of the cryptographic operation in bits.</para>
		</summary>
		<remarks>
			<para> The feedback size determines the amount of data that
      is fed back to successive encryption or decryption operations. The feedback size cannot be greater
      than the block size.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.IVValue">
		<summary>
			<para> Represents the initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>) for the
   symmetric algorithm.</para>
		</summary>
		<remarks>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.KeyValue">
		<summary>
			<para> Represents the secret key for the symmetric algorithm.</para>
		</summary>
		<remarks>
			<para>The secret key is used both for encryption and for
      decryption. For a symmetric algorithm to be secure, the secret key must be known
      only to the sender and the receiver. The valid key sizes are specified by the
      particular symmetric algorithm implementation and are listed in <see cref="System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes"/>.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.LegalBlockSizesValue">
		<summary>
			<para>Specifies the block sizes that are supported by the symmetric algorithm.</para>
		</summary>
		<remarks>
			<para>Only block sizes that match an entry in this array are supported by the symmetric
      algorithm.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.LegalKeySizesValue">
		<summary>
			<para>Specifies the key sizes that are supported by the symmetric algorithm.</para>
		</summary>
		<remarks>
			<para> Only key sizes that match an entry in this array are supported by the
      symmetric algorithm.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.KeySizeValue">
		<summary>
			<para>Represents the size of the secret key used by the symmetric algorithm in bits.</para>
		</summary>
		<remarks>
			<para>The valid key sizes are specified by the particular
      symmetric algorithm implementation and are listed in <see cref="System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes"/>.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.KeySize"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.ModeValue">
		<summary>
			<para>Represents the cipher mode used in the symmetric algorithm.</para>
		</summary>
		<remarks>
			<para>See <see cref="System.Security.Cryptography.CipherMode"/> for a description of specific modes.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.Mode"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.PaddingValue">
		<summary>
			<para>Represents the padding mode used in the symmetric algorithm.</para>
		</summary>
		<remarks>
			<para>Most plain text messages do not consist of a number of
      bytes that completely fill blocks. Often, there are not enough bytes to fill the
      last block. When this happens, a padding string is added to the text. For
      example, if the block length is 64 bits and the last block contains only 40
      bits, 24 bits of padding are added. See <see cref="System.Security.Cryptography.PaddingMode"/> for a description of specific modes.</para>
			<para>This field is accessed through the <see cref="System.Security.Cryptography.SymmetricAlgorithm.Padding"/> property.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.SymmetricAlgorithm">
		<summary>
			<para>Initializes a new instance of <see cref="System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
		</summary>
		<exception cref="System.Security.Cryptography.CryptographicException">The symmetric algorithm derived class implementation is not valid.</exception>
		<remarks>
			<para>You cannot create an instance of an abstract class. Application code will create a new instance of a
      derived class.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.IDisposable.Dispose">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Clear">
		<summary>
			<para> Releases all resources used by the <see cref="System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
		</summary>
		<remarks>
			<para>This method is a simple call to <see cref="System.IDisposable.Dispose" qualify="true"/>.</para>
			<para>Calling <see langword="Dispose"/>
allows the resources used by the <see cref="System.Security.Cryptography.SymmetricAlgorithm"/> to be reallocated for other
purposes. For more information about <see langword="Dispose"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Dispose">
		<summary>
			<para> Releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.SymmetricAlgorithm"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.SymmetricAlgorithm"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Finalize">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
		</summary>
		<remarks>
			<para>This method is guaranteed to be called before the object
      is destroyed, even if an exception occurs. Clearing the <see cref="System.Security.Cryptography.SymmetricAlgorithm.KeyValue"/> parameter prevents the secret key
      for the symmetric algorithm from being disclosed to other applications.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.BlockSize">
		<summary>
			<para> Gets
      or sets the block size of the cryptographic operation in bits.</para>
		</summary>
		<value>
			<para>The block size in bits.</para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
		<remarks>
			<para> The block size is the basic unit of data that can
      be encrypted or decrypted in one operation. Messages longer than the block size
      are handled as successive blocks; messages shorter than the block size must
      be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.FeedbackSize">
		<summary>
			<para> Gets or sets the feedback size of the
      cryptographic operation in bits.</para>
		</summary>
		<value>
			<para>The feedback size in bits.</para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">The feedback size is larger than the block size.</exception>
		<remarks>
			<para>The feedback size determines the amount of data that is
      fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.IV">
		<summary>
			<para> Gets or sets the initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>) for the
   symmetric algorithm.</para>
		</summary>
		<value>
			<para> The initialization vector.</para>
		</value>
		<exception cref="System.ArgumentNullException">An attempt is made to set the IV to <see langword="null"/>.</exception>
		<exception cref="System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid size.</exception>
		<remarks>
			<para>If this property is <see langword="null"/> when it is used, <see cref="System.Security.Cryptography.SymmetricAlgorithm.GenerateIV"/> is called to create a new random
   value.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Key">
		<summary>
			<para>Gets or sets the secret key for the symmetric algorithm.</para>
		</summary>
		<value>
			<para>The secret key to be used for the symmetric algorithm.</para>
		</value>
		<exception cref="System.ArgumentNullException">An attempt is made to set the key to <see langword="null"/>.</exception>
		<remarks>
			<para>The secret key is used both for encryption and for
      decryption. For a symmetric algorithm to be secure, the secret key must be known
      only to the sender and the receiver. The valid key sizes are specified by the
      particular symmetric algorithm implementation and are listed in <see cref="System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes"/>.</para>
			<para>If this property is <see langword="null"/> when it is used, <see cref="System.Security.Cryptography.SymmetricAlgorithm.GenerateKey"/> is called to create a new random
   value.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.LegalBlockSizes">
		<summary>
			<para> Gets the block sizes that are supported by the symmetric
      algorithm.</para>
		</summary>
		<value>
			<para>An array containing the block sizes supported by the algorithm.</para>
		</value>
		<remarks>
			<para>Only block sizes that match an entry in this array are supported by the symmetric
      algorithm.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.LegalKeySizes">
		<summary>
			<para> Gets the key sizes that are supported by the symmetric
      algorithm.</para>
		</summary>
		<value>
			<para> An array containing the key sizes supported by the algorithm.</para>
		</value>
		<remarks>
			<para> Only key sizes that match an entry in this array are supported by the symmetric
      algorithm.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.KeySize">
		<summary>
			<para>Gets or sets the size of the secret key used by the symmetric algorithm in bits.</para>
		</summary>
		<value>
			<para>The size of the secret key used by the symmetric algorithm.</para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">The key size is not valid. </exception>
		<remarks>
			<para>The valid key sizes are specified by the particular
      symmetric algorithm implementation and are listed in <see cref="System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Mode">
		<summary>
			<para>Gets or sets the mode for operation of the symmetric algorithm.</para>
		</summary>
		<value>
			<para>The mode for operation of the symmetric algorithm.</para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">The cipher mode is not one of the <see cref="System.Security.Cryptography.CipherMode"/> values.</exception>
		<remarks>
			<para>See <see cref="System.Security.Cryptography.CipherMode"/> for a description of specific modes.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Padding">
		<summary>
			<para>Gets or sets the padding mode used in the symmetric algorithm.</para>
		</summary>
		<value>
			<para>The padding mode used in the symmetric algorithm.</para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">The padding mode is not one of the <see cref="System.Security.Cryptography.PaddingMode"/> values.</exception>
		<remarks>
			<para>Most plain text messages do not consist of a number of
      bytes that completely fill blocks. Often, there are not enough bytes to fill the
      last block. When this happens, a padding string is added to the text. For
      example, if the block length is 64 bits and the last block contains only 40
      bits, 24 bits of padding are added. See <see cref="System.Security.Cryptography.PaddingMode"/> for a description of specific modes.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.ValidKeySize">
		<summary>
			<para>Determines whether the specified key size is valid for
      the current algorithm.</para>
		</summary>
		<param name="bitLength">The key size in bits to check for validity</param>
		<returns>
			<para><see langword="true"/> if the specified key size is valid for the current
   algorithm; otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Create">
		<overload>
			<para>Creates an instance of a cryptographic object used to perform the symmetric algorithm.</para>
		</overload>
		<summary>
			<para>Creates an instance of the default
      cryptographic object used to perform the symmetric algorithm.</para>
		</summary>
		<returns>
			<para>The instance of a cryptographic object used to perform the symmetric algorithm.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.Create1">
		<summary>
			<para>Creates an instance of
      the specified cryptographic object used to perform the symmetric algorithm.</para>
		</summary>
		<param name="algName">The name of the specific implementation of <see cref="System.Security.Cryptography.SymmetricAlgorithm"/> to use.</param>
		<returns>
			<para>The instance of a cryptographic object used to perform the symmetric algorithm.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.CreateEncryptor">
		<overload>
			<para>Creates a symmetric encryptor object.</para>
		</overload>
		<summary>
			<para> Creates a symmetric encryptor object with the
      current <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and
      initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>).</para>
		</summary>
		<returns>
			<para>A symmetric encryptor object.</para>
		</returns>
		<remarks>
			<para>If the current <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> is
<see langword="null"/>, <see cref="System.Security.Cryptography.SymmetricAlgorithm.GenerateKey"/> is called to create a new random
<see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/>. If the current
<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/> is
<see langword="null"/>, <see cref="System.Security.Cryptography.SymmetricAlgorithm.GenerateIV"/> is called to
   create a new random <see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>.</para>
			<para>Use the <see cref="System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor"/> overload with the same
signature to decrypt the result of this method.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.CreateEncryptor3">
		<summary>
			<para>When overridden in a derived class, creates a symmetric encryptor object with the
      specified <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and
      initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>).</para>
		</summary>
		<param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
		<param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
		<returns>
			<para>A symmetric encryptor object.</para>
		</returns>
		<remarks>
			<para>Use the <see cref="System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor"/> overload with the same parameters to decrypt the result of this
   method.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.CreateDecryptor">
		<overload>
			<para>Creates a symmetric decryptor object.</para>
		</overload>
		<summary>
			<para>Creates a symmetric decryptor object with the current
   <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and
      initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>).</para>
		</summary>
		<returns>
			<para>A symmetric decryptor object.</para>
		</returns>
		<remarks>
			<para>This method decrypts an encrypted message created using
      the <see cref="System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor"/> overload with the same
      signature.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.CreateDecryptor3">
		<summary>
			<para>When overridden in a derived class, creates a symmetric decryptor object with the specified
   <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and
      initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>).</para>
		</summary>
		<param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
		<param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
		<returns>
			<para>A symmetric decryptor object.</para>
		</returns>
		<remarks>
			<para>This method decrypts an encrypted message created using
      the <see cref="System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor"/> overload with
      the same parameters.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.GenerateKey">
		<summary>
			<para>When overridden in a derived class, generates a random <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> to be used for the algorithm.</para>
		</summary>
		<remarks>
			<para>Use this method to generate a random key when none is specified.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="SymmetricAlgorithm.GenerateIV">
		<summary>
			<para>When overridden in a derived class, generates a random initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>) to be used for the algorithm.</para>
		</summary>
		<remarks>
			<para>Use this method to generate a random initialization vector when none is
      specified.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
