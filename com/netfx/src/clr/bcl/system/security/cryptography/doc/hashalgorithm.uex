<docs>
	<doc for="HashAlgorithm">
		<summary>
			<para> Represents the base class
      from which all implementations of cryptographic hash algorithms must derive.
      </para>
		</summary>
		<remarks>
			<para> Hash functions are fundamental to modern cryptography. These
      functions map binary strings of an arbitrary length to small binary strings
      of a fixed length, known as hash values. A cryptographic hash function
      has the property that it is computationally infeasible to find two distinct
      inputs that hash to the same value. Hash
      functions are commonly used with digital signatures and for data integrity.
      </para>
			<para> The hash is used as a unique value of fixed
      size representing a large amount of data. Hashes of two sets of data should match if
      the corresponding data also matches. Small changes to the data result in large unpredictable changes in
      the hash.
      </para>
			<note type="inheritinfo">
      When overriding this
      class, you must provide implementations of <see cref="System.Security.Cryptography.HashAlgorithm.HashCore"/> and <see cref="System.Security.Cryptography.HashAlgorithm.HashFinal"/>.
      
   </note>
		</remarks>
		<example>
			<para>The following example computes the <see cref="System.Security.Cryptography.SHA1CryptoServiceProvider"/>
hash for an array. This example assumes that there is
a predefined byte array <c>dataArray[]</c>.
<see cref="System.Security.Cryptography.SHA1CryptoServiceProvider"/> is a derived class of <see cref="System.Security.Cryptography.HashAlgorithm"/>.</para>
			<codelink SampleID="Classic HashAlgorithm Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.HashSizeValue">
		<summary>
			<para> Represents the size of the computed hash code in bits.
      </para>
		</summary>
		<remarks>
			<para> The size of the hash code is specified by the hash
      algorithm. For example, <see cref="System.Security.Cryptography.SHA1"/> uses a hash size of 160 bits.
      </para>
			<para> This field is accessed through the <see cref="System.Security.Cryptography.HashAlgorithm.HashSize"/> property.
   </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.HashValue">
		<summary>
			<para> Represents the value of the computed hash code.
      </para>
		</summary>
		<remarks>
			<para> This field is accessed through the <see cref="System.Security.Cryptography.HashAlgorithm.Hash"/> property.
   </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.State">
		<summary>
			<para> Represents the state of the hash computation.
      </para>
		</summary>
		<remarks>
			<para> This field is used to prevent users from changing the key
      of a keyed hash algorithm during a hash operation. The value of this field is
      zero before and after a hash operation when a key change is legitimate, and
      nonzero otherwise.
      </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.HashAlgorithm">
		<summary>
			<para> Initializes a new instance of <see cref="System.Security.Cryptography.HashAlgorithm"/>.
   </para>
		</summary>
		<remarks>
			<para> You cannot create an instance of an abstract class.
      Application code will create a new instance of a derived
      class.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.HashSize">
		<summary>
			<para>Gets the size of the computed hash code in bits. </para>
		</summary>
		<value>
			<para> The size of the computed hash code in bits.
      </para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.Hash">
		<summary>
			<para>Gets the value of the computed hash code. </para>
		</summary>
		<value>
			<para> The current value of the computed hash code.
      </para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicUnexpectedOperationException"><see cref="System.Security.Cryptography.HashAlgorithm.HashValue"/>is <see langword="null"/>.</exception>
		<remarks>
			<para><see cref="System.Security.Cryptography.HashAlgorithm.Hash"/> is a byte
   array; <see cref="System.Security.Cryptography.HashAlgorithm.HashSize"/> is in bits. Therefore, the number
   of elements in <see cref="System.Security.Cryptography.HashAlgorithm.Hash"/> is one-eighth <see cref="System.Security.Cryptography.HashAlgorithm.HashSize"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.Create">
		<overload>
			<para>Creates an instance of an implementation of <see cref="System.Security.Cryptography.HashAlgorithm"/>.</para>
		</overload>
		<summary>
			<para> Creates an instance of the default implementation of
   <see cref="System.Security.Cryptography.HashAlgorithm"/>.
      </para>
		</summary>
		<returns>
			<para> An instance of a cryptographic object to perform the hash algorithm.
      </para>
		</returns>
		<remarks>
			<para>The default implementation of <see cref="System.Security.Cryptography.HashAlgorithm"/> is defined by the cryptography
   configuration system. Unless the settings have been changed, the default
   implementation is <see cref="System.Security.Cryptography.SHA1Managed"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.Create1">
		<summary>
			<para> Creates an instance of the specified implementation
      of <see cref="System.Security.Cryptography.HashAlgorithm"/>.
      </para>
		</summary>
		<param name="hashName">The implementation of <see cref="System.Security.Cryptography.HashAlgorithm"/> to create.</param>
		<returns>
			<para> An instance of a cryptographic object to perform the hash algorithm.
      </para>
		</returns>
		<remarks>
			<para>The following table shows the valid values of the
   <paramref name="hashName"/> parameter and the algorithms to which they
      map.</para>
			<list type="table">
				<listheader>
					<term>Simple Name</term>
					<description>Algorithm Implementation</description>
				</listheader>
				<item>
					<term> SHA</term>
					<description><see cref="System.Security.Cryptography.SHA1CryptoServiceProvider"/></description>
				</item>
				<item>
					<term> SHA1</term>
					<description><see cref="System.Security.Cryptography.SHA1CryptoServiceProvider"/></description>
				</item>
				<item>
					<term> System.Security.Cryptography.SHA1</term>
					<description><see cref="System.Security.Cryptography.SHA1CryptoServiceProvider"/></description>
				</item>
				<item>
					<term> System.Security.Cryptography.HashAlgorithm</term>
					<description><see cref="System.Security.Cryptography.SHA1CryptoServiceProvider"/></description>
				</item>
				<item>
					<term> MD5</term>
					<description><see cref="System.Security.Cryptography.MD5CryptoServiceProvider"/></description>
				</item>
				<item>
					<term> System.Security.Cryptography.MD5</term>
					<description><see cref="System.Security.Cryptography.MD5CryptoServiceProvider"/></description>
				</item>
				<item>
					<term> SHA256</term>
					<description><see cref="System.Security.Cryptography.SHA256Managed"/></description>
				</item>
				<item>
					<term> SHA-256</term>
					<description><see cref="System.Security.Cryptography.SHA256Managed"/></description>
				</item>
				<item>
					<term> System.Security.Cryptography.SHA256</term>
					<description><see cref="System.Security.Cryptography.SHA256Managed"/></description>
				</item>
				<item>
					<term> SHA384</term>
					<description><see cref="System.Security.Cryptography.SHA384Managed"/></description>
				</item>
				<item>
					<term> SHA-384</term>
					<description><see cref="System.Security.Cryptography.SHA384Managed"/></description>
				</item>
				<item>
					<term> System.Security.Cryptography.SHA384</term>
					<description><see cref="System.Security.Cryptography.SHA384Managed"/></description>
				</item>
				<item>
					<term> SHA512</term>
					<description><see cref="System.Security.Cryptography.SHA512Managed"/></description>
				</item>
				<item>
					<term> SHA-512</term>
					<description><see cref="System.Security.Cryptography.SHA512Managed"/></description>
				</item>
				<item>
					<term> System.Security.Cryptography.SHA512</term>
					<description><see cref="System.Security.Cryptography.SHA512Managed"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.ComputeHash">
		<overload>
			<para>Computes the hash value for the input data.</para>
		</overload>
		<summary>
			<para> Computes the hash value for the specified <see cref="System.IO.Stream"/>.</para>
		</summary>
		<param name="inputStream">The input for which to compute the hash code.</param>
		<returns>
			<para>The computed hash code.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.ComputeHash1">
		<summary>
			<para>Computes the hash value for the specified byte array.</para>
		</summary>
		<param name="buffer">The input for which to compute the hash code.</param>
		<returns>
			<para>The computed hash code.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.ComputeHash2">
		<summary>
			<para>Computes the hash value for the specified region of the specified byte array.</para>
		</summary>
		<param name="buffer">The input for which to compute the hash code.</param>
		<param name=" offset">The offset into the byte array from which to begin using data.</param>
		<param name=" count">The number of bytes in the array to use as data.</param>
		<returns>
			<para>The computed hash code.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.InputBlockSize">
		<summary>
			<para>When overridden in a derived class, gets the input block size.</para>
		</summary>
		<value>
			<para>The input block size.</para>
		</value>
		<remarks>
			<para>Unless overridden, this property returns the value 1.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.OutputBlockSize">
		<summary>
			<para>When overridden in a derived class, gets the output block size.</para>
		</summary>
		<value>
			<para>The output block size.</para>
		</value>
		<remarks>
			<para>Unless overridden, this property returns the value 1.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.CanTransformMultipleBlocks">
		<summary>
			<para>When overridden in a derived class, gets a value
      indicating whether multiple blocks can be transformed.</para>
		</summary>
		<value>
			<para><see langword="true"/> if multiple blocks can be
   transformed; otherwise, <see langword="false"/>.</para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.CanReuseTransform">
		<summary>
			<para>Gets a value indicating whether the current transform
      can be reused.</para>
		</summary>
		<value>
			<para>Always <see langword="true"/>.</para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.TransformBlock">
		<summary>
			<para> Computes the hash value for the specified region of the
      input byte array and copies the resulting hash value to the specified region of
      the output byte array.</para>
		</summary>
		<param name="inputBuffer">The input for which to compute the hash code.</param>
		<param name=" inputOffset">The offset into the input byte array from which to begin using data.</param>
		<param name=" inputCount">The number of bytes in the input byte array to use as data.</param>
		<param name=" outputBuffer">The output to which to write the hash code.</param>
		<param name=" outputOffset">The offset into the output byte array from which to begin writing data.</param>
		<returns>
			<para>The number of bytes written.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.TransformFinalBlock">
		<summary>
			<para> Computes the hash value for the specified region of the
      specified byte array.</para>
		</summary>
		<param name="inputBuffer">The input for which to compute the hash code.</param>
		<param name=" inputOffset">The offset into the byte array from which to begin using data.</param>
		<param name=" inputCount">The number of bytes in the byte array to use as data.</param>
		<returns>
			<para>The computed hash code.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.IDisposable.Dispose">
		<internalonly/>
		<summary>
			<para>[To be supplied.]</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.Clear">
		<summary>
			<para> Releases all resources used by the <see cref="System.Security.Cryptography.HashAlgorithm"/>.</para>
		</summary>
		<remarks>
			<para>This method is a simple call to <see cref="System.IDisposable.Dispose" qualify="true"/>.</para>
			<para>Calling <see langword="Dispose"/>
allows the resources used by the <see cref="System.Security.Cryptography.HashAlgorithm"/> to be reallocated for other
purposes. For more information about <see langword="Dispose"/>, see <see topic="cpconCleaningUpUnmanagedResources"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.Dispose">
		<summary>
			<para> Releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.HashAlgorithm"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.HashAlgorithm"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.Initialize">
		<summary>
			<para>Initializes an implementation of <see cref="System.Security.Cryptography.HashAlgorithm"/>.</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.HashCore">
		<summary>
			<para> When overridden in a derived class,
      routes data written to the object into the hash algorithm for computing the hash.</para>
		</summary>
		<param name="array">The input for which to compute the hash code.</param>
		<param name=" ibStart">The offset into the byte array from which to begin using data.</param>
		<param name=" cbSize">The number of bytes in the byte array to use as data.</param>
		<remarks>
			<para> This method is not called by application code.</para>
			<para> This abstract method performs
      the hash computation. Every write to the cryptographic stream object passes the
      data through this method. For each block of data, this method updates the
      state of the hash object so a correct hash value is returned at the end of the data stream.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="HashAlgorithm.HashFinal">
		<summary>
			<para> When overridden in a derived class, finalizes the hash
      computation after the last data is processed by the cryptographic stream object. </para>
		</summary>
		<returns>
			<para> The computed hash code.
      </para>
		</returns>
		<remarks>
			<para> This method finalizes any partial computation and returns
      the correct hash value for the data stream.
      </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
