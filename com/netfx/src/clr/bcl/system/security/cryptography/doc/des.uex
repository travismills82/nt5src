<docs>
	<doc for="DES">
		<summary>
			<para> Represents the base class for the Data Encryption Standard (DES)
      algorithm from which all <see cref="System.Security.Cryptography.DES"/>
      implementations must derive.</para>
		</summary>
		<example>
			<para>The following example method uses <see cref="System.Security.Cryptography.DESCryptoServiceProvider"/> (an
   implementation of <see cref="System.Security.Cryptography.DES"/>) with the specified <see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and
   initialization vector (<see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/>) to encrypt a file specified by <c>inName</c>,
and outputs the encrypted
result to the file specified by <c>outName</c>.</para>
			<codelink SampleID="Classic DES Example" SnippetID="1"/>
			<para>Decryption can be handled in the same way; use <see cref="System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor"/> instead of <see cref="System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor"/>. The same
<see cref="System.Security.Cryptography.SymmetricAlgorithm.Key"/> and <see cref="System.Security.Cryptography.SymmetricAlgorithm.IV"/> used to encrypt
the file must be used to decrypt.</para>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DES.DES">
		<summary>
			<para>Initializes a new instance of <see cref="System.Security.Cryptography.DES"/>.</para>
		</summary>
		<remarks>
			<para> You cannot create an instance of an abstract class. Application
      code will create a new instance of
      a derived class.</para>
			<para>This method defaults the protected fields
      of <see cref="System.Security.Cryptography.SymmetricAlgorithm"/> to the
      values shown in the
      following table.</para>
			<list type="table">
				<listheader>
					<term>Field</term>
					<description>Default Value</description>
				</listheader>
				<item>
					<term>
						<see cref="System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue"/></term>
					<description>64</description>
				</item>
				<item>
					<term>
						<see cref="System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue"/></term>
					<description>64</description>
				</item>
				<item>
					<term>
						<see cref="System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue"/></term>
					<description>64</description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DES.Key">
		<summary>
			<para>Gets or sets the secret key for the Data Encryption
      Standard (<see cref="System.Security.Cryptography.DES"/>) algorithm.</para>
		</summary>
		<value>
			<para> The secret key for
      the <see cref="System.Security.Cryptography.DES"/> algorithm.</para>
		</value>
		<exception cref="System.ArgumentNullException">An attempt is made to set the key to <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">An attempt is made to set a key whose length is not equal to <see cref="System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue"/>.</exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>An attempt is made to set a weak key (see <see cref="System.Security.Cryptography.DES.IsWeakKey"/>) or a semi-weak key (see <see cref="System.Security.Cryptography.DES.IsSemiWeakKey"/>). </para></exception>
		<remarks>
			<para>If this property is <see langword="null"/> when it is
   used, <see cref="System.Security.Cryptography.SymmetricAlgorithm.GenerateKey"/> is called to
   create a new random value.</para>
			<para> The length of the key must be equal to <see cref="System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DES.Create">
		<overload>
			<para>Creates an instance of a cryptographic object to perform
      the Data Encryption Standard (<see cref="System.Security.Cryptography.DES"/>) algorithm.</para>
		</overload>
		<summary>
			<para> Creates an instance of a cryptographic object to perform
      the Data Encryption Standard (<see cref="System.Security.Cryptography.DES"/>) algorithm.
      </para>
		</summary>
		<returns>
			<para> A cryptographic object.
      </para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DES.Create1">
		<summary>
			<para> Creates an instance of a cryptographic object to perform
      the specified implementation of the Data Encryption Standard (<see cref="System.Security.Cryptography.DES"/>)
      algorithm.
      </para>
		</summary>
		<param name="algName">The name of the specific implementation of <see cref="System.Security.Cryptography.DES"/> to use.</param>
		<returns>
			<para> A cryptographic object.
      </para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DES.IsWeakKey">
		<summary>
			<para>Determines whether the specified key is weak.</para>
		</summary>
		<param name="rgbKey">The secret key to be tested for weakness.</param>
		<returns>
			<para><see langword="true"/> if the key is weak; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException">The size of the <paramref name="rgbKey"/> parameter is not valid.</exception>
		<remarks>
			<para>Weak keys are keys that result in ciphers that are easy
      to break. If text is encrypted with a weak key, encrypting the resulting cipher
      again with the same weak key returns the original text. There are four known
      weak keys for the Data Encryption Standard (<see cref="System.Security.Cryptography.DES"/>)
      
      algorithm; this method checks for those weak keys.</para>
			<para>An attempt to set a weak key will result in a <see cref="System.Security.Cryptography.CryptographicException"/>. When <see cref="System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey"/> is
   called to create a random key, a weak key will never be returned.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DES.IsSemiWeakKey">
		<summary>
			<para>Determines whether the specified key is semi-weak.</para>
		</summary>
		<param name="rgbKey">The secret key to be tested for semi-weakness.</param>
		<returns>
			<para><see langword="true"/> if the key is semi-weak; otherwise,
<see langword="false"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException">The size of the <paramref name="rgbKey"/> parameter is not valid.</exception>
		<remarks>
			<para>Semi-weak keys are pairs of keys that result in ciphers
      that are easy to break. If text is encrypted with a semi-weak key, encrypting
      the resulting cipher with the partner of that semi-weak key returns the original
      text. There are six known semi-weak key pairs for the Data Encryption Standard
      (<see cref="System.Security.Cryptography.DES"/>)
      algorithm; this method checks for those semi-weak keys.</para>
			<para>An attempt to set a semi-weak key will result in a <see cref="System.Security.Cryptography.CryptographicException"/>. When <see cref="System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey"/> is called
   to create a random key, a semi-weak key will never be returned.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
