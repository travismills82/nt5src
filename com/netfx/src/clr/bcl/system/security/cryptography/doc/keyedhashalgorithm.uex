<docs>
	<doc for="KeyedHashAlgorithm">
		<summary>
			<para> Represents
      the abstract class from
      which all implementations of keyed hash algorithms must derive.</para>
		</summary>
		<remarks>
			<para> Hash functions
      map binary strings of an arbitrary length to small binary strings of a fixed length. A cryptographic hash
      function has the property that it is computationally infeasible to find two distinct inputs that hash
      to the same value. Small changes to the data result in large
      unpredictable changes in the hash.</para>
			<para>A keyed hash algorithm is a key-dependent, one-way hash function used as a
      message authentication code. Only someone who knows the key can verify the
      hash. Keyed hash algorithms provide authenticity without secrecy.</para>
			<para>Hash functions are commonly used with digital signatures and for data
      integrity. <see cref="System.Security.Cryptography.HMACSHA1"/> is an example of a keyed hash
      algorithm.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.KeyValue">
		<summary>
			<para> The key to be used in the hash algorithm.</para>
		</summary>
		<remarks>
			<para> This field is accessed through <see cref="System.Security.Cryptography.KeyedHashAlgorithm.Key"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.KeyedHashAlgorithm">
		<summary>
			<para>Initializes a new instance of <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/>.</para>
		</summary>
		<remarks>
			<para> You cannot create an instance of an abstract class. Application code will
      create a new instance of a derived class.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.Finalize">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/>.</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.Dispose">
		<summary>
			<para> Releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.Key">
		<summary>
			<para> Gets or sets the key to be used in the hash algorithm.</para>
		</summary>
		<value>
			<para>The key to be used in the hash algorithm.</para>
		</value>
		<exception cref="System.Security.Cryptography.CryptographicException">An attempt is made to change <see cref="System.Security.Cryptography.KeyedHashAlgorithm.Key"/> after hashing has begun.</exception>
		<remarks>
			<para>This property is the public accessor for <see cref="System.Security.Cryptography.KeyedHashAlgorithm.KeyValue"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.Create">
		<overload>
			<para> Creates an instance of an implementation of a keyed
      hash algorithm.</para>
		</overload>
		<summary>
			<para>Creates
      an instance of the default implementation of a keyed hash algorithm.</para>
		</summary>
		<returns>
			<para>A new instance of a keyed hash algorithm.</para>
		</returns>
		<remarks>
			<para>The default implementation of <see cref="System.Security.Cryptography.KeyedHashAlgorithm"/>
is defined by the cryptography configuration system. The keyed hash
algorithms currently supported are <see cref="System.Security.Cryptography.HMACSHA1"/> and <see cref="System.Security.Cryptography.MACTripleDES"/>. </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="KeyedHashAlgorithm.Create1">
		<summary>
			<para> Creates an instance of the specified implementation of a keyed hash algorithm.</para>
		</summary>
		<param name="algName">The name of the keyed hash algorithm implementation to use.</param>
		<returns>
			<para>A new instance of the specified keyed hash algorithm.</para>
		</returns>
		<remarks>
			<para>The keyed hash algorithms currently supported are<see cref="System.Security.Cryptography.HMACSHA1"/> and<see cref="System.Security.Cryptography.MACTripleDES"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
