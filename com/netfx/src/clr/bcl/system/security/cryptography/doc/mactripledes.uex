<docs>
	<doc for="MACTripleDES.MACTripleDES1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.MACTripleDES"/>
class with the specified key
data.</para>
		</summary>
		<param name="rgbKey">The secret key for <see cref="System.Security.Cryptography.MACTripleDES"/> encryption.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="rgbKey"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>This constructor uses the default implementation of
   <see cref="System.Security.Cryptography.TripleDES"/>. The
   <paramref name="rgbKey"/> parameter must be 8, 16, or 24 bytes in length.</para>
		</remarks>
	</doc>
	<doc for="MACTripleDES.MACTripleDES">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.MACTripleDES"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.MACTripleDES"/>
class.</para>
		</summary>
		<remarks>
			<para>This constructor uses the default implementation of
   <see cref="System.Security.Cryptography.TripleDES"/>.</para>
		</remarks>
	</doc><doc for="MACTripleDES.HashFinal">
		<summary>
			<para> Returns the computed Message Authentication Code (MAC) after all data
      is written to the object.</para>
		</summary>
		<returns>
			<para> The computed MAC.</para>
		</returns>
		<remarks>
			<para> You can read this value only after all data
      is written and you cannot write more data afterward. Create a new instance
      of <see cref="System.Security.Cryptography.MACTripleDES"/>
      for each
      separate segment of data to compute the MAC for that data.</para>
		</remarks>
	</doc><doc for="MACTripleDES">
		<summary>
			<para>Computes a Message Authentication Code (MAC)
 using <see cref="System.Security.Cryptography.TripleDES"/> for the input data <see cref="System.Security.Cryptography.CryptoStream"/>.</para>
		</summary>
		<remarks>
			<para> A MAC can be used to determine whether a message
 sent over an insecure channel has been tampered with, provided that the sender
 and receiver share a secret key. The sender computes the MAC for the original data, and sends
 both as a single message. The receiver recomputes the MAC on the received message, and checks that
 the computed MAC matches the transmitted MAC.</para>
			<para> Any change to the data or the MAC will result in a mismatch, because knowledge
 of the secret key is required to change the message and reproduce the correct MAC. Therefore, if
 the codes match, the message is authenticated.</para>
			<para><see cref="System.Security.Cryptography.MACTripleDES"/> uses a key of length 8, 16 or 24 
 bytes, and produces a hash sequence of length 8 bytes.</para>
		</remarks>
		<example>
			<para>The following example computes the MAC for <c>data</c> using
 the <see cref="System.Security.Cryptography.TripleDES"/> hash algorithm and stores it in
 <c>result</c>. This example assumes that there is a
 predefined constant <c>DATA_SIZE</c>.</para>
			<codelink SampleID="Classic MACTripleDES Example" SnippetID="1"/>
		</example>
	</doc><doc for="MACTripleDES.MACTripleDES2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.MACTripleDES"/> class
 with the specified key data using the specified implementation of <see cref="System.Security.Cryptography.TripleDES"/>.</para>
		</summary>
		<param name=" strTripleDES">The name of the <see cref="System.Security.Cryptography.TripleDES"/> implementation to use.</param>
		<param name="rgbKey">The secret key for <see cref="System.Security.Cryptography.MACTripleDES"/> encryption.</param>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="strTripleDES"/> parameter is <see langword="null"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="rgbKey"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.Security.Cryptography.CryptographicUnexpectedOperationException">The <paramref name="strTripleDES"/> parameter is not a valid name of a <see cref="System.Security.Cryptography.TripleDES"/> implementation.</exception>
		<remarks>
			<para>The <paramref name="strTripleDES"/> parameter is the friendly name of
 the <see cref="System.Security.Cryptography.TripleDES"/> implementation
 type. The default implementation is
 System.Security.Cryptography.TripleDES.</para>
			<para>The <paramref name="rgbKey"/> parameter must be 8, 16, or 24 bytes in length.</para>
		</remarks>
	</doc><doc for="MACTripleDES.Initialize">
		<summary>
			<para>Initializes an instance of <see cref="System.Security.Cryptography.MACTripleDES"/>.</para>
		</summary>
	</doc><doc for="MACTripleDES.HashCore">
		<summary>
			<para>Routes data written to the object into the <see cref="System.Security.Cryptography.TripleDES"/>
encryptor for computing the Message Authentication Code
(MAC).</para>
		</summary>
		<param name="rgbData">The input data.</param>
		<param name=" ibStart">The offset into the byte array from which to begin using data.</param>
		<param name=" cbSize">The number of bytes in the array to use as data.</param>
		<seealso cref="System.Security.Cryptography.HashAlgorithm"/>
	</doc><doc for="MACTripleDES.Finalize">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Security.Cryptography.MACTripleDES"/>.</para>
		</summary>
	</doc><doc for="MACTripleDES.Dispose">
		<summary>
			<para> Releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.MACTripleDES"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.MACTripleDES"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
	</doc></docs>
