<docs>
	<doc for="AsymmetricSignatureDeformatter">
		<summary>
			<para>Represents the abstract base class from which all
      implementations of asymmetric signature deformatters derive.</para>
		</summary>
		<remarks>
			<para>Asymmetric signature deformatters verify the digital signatures that
      are created using implementations of <see cref="System.Security.Cryptography.AsymmetricSignatureFormatter"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter">
		<summary>
			<para> Initializes a new instance of <see cref="System.Security.Cryptography.AsymmetricSignatureDeformatter"/>.
   </para>
		</summary>
		<remarks>
			<para>You cannot create an instance of an abstract class. Application
      code will create a new instance of a derived class.</para>
			<para>Use implementations of <see cref="System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey"/> and
<see cref="System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm"/> to 
   set the key and hash algorithm before calling an implementation of <see cref="System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricSignatureDeformatter.SetKey">
		<summary>
			<para> When overridden in a derived class, sets the public key to use for verifying the signature.
      </para>
		</summary>
		<param name="key">The instance of an implementation of <see cref="System.Security.Cryptography.AsymmetricAlgorithm"/> that holds the public key. </param>
		<remarks>
			<para>You must set a key before calling an implementation of <see cref="System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricSignatureDeformatter.SetHashAlgorithm">
		<summary>
			<para> When overridden in a derived class, sets the hash algorithm to use for verifying the signature.
      </para>
		</summary>
		<param name="strName">The name of the hash algorithm to use for verifying the signature. </param>
		<remarks>
			<para>You must set a hash algorithm before calling an
      implementation of <see cref="System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricSignatureDeformatter.VerifySignature">
		<overload>
			<para> Verifies the signature. </para>
		</overload>
		<summary>
			<para> Verifies the signature from the specified hash value.
      </para>
		</summary>
		<param name="hash">The hash algorithm to use to verify the signature. </param>
		<param name=" rgbSignature">The signature to be verified.</param>
		<returns>
			<para><see langword="true"/> if the signature is valid for the
   hash; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="hash"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para> This method sets the hash algorithm to be
      used before verifying the signature of the input hash
      algorithm value.
      </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="AsymmetricSignatureDeformatter.VerifySignature1">
		<summary>
			<para> When overridden in a derived class, verifies the signature for the specified data.
      </para>
		</summary>
		<param name="rgbHash">The data signed with <paramref name="rgbSignature"/>. </param>
		<param name=" rgbSignature">The signature to be verified for <paramref name="rgbHash"/>. </param>
		<returns>
			<para><see langword="true"/> if <paramref name="rgbSignature"/> matches the
   signature computed using the specified hash algorithm and key on <paramref name="rgbHash"/>;
   otherwise, <see langword="false"/>.
   </para>
		</returns>
		<remarks>
			<para>You must specify a public key and a hash algorithm
      before calling this method.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
