<docs>
	<doc for="DSACryptoServiceProvider.DSACryptoServiceProvider1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> class with
   the specified key size.</para>
		</summary>
		<param name="dwKeySize">The size of the key for the asymmetric algorithm in bits.</param>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.DSACryptoServiceProvider2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> class
   with the specified parameters for
   the cryptographic service provider (CSP).</para>
		</summary>
		<param name="parameters">The parameters for the CSP.</param>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.DSACryptoServiceProvider3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> class
   with the specified key
   size and parameters for the cryptographic service provider (CSP).</para>
		</summary>
		<param name="dwKeySize">The size of the key for the cryptographic algorithm in bits.</param>
		<param name=" parameters">The parameters for the CSP.</param>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The CSP cannot be acquired.</para>
			<para>-or-</para>
			<para>The key cannot be created.</para></exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.Dispose">
		<summary>
			<para> Releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.Finalize">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/>.</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.KeyExchangeAlgorithm">
		<summary>
			<para> Gets the name of the key exchange algorithm.
      </para>
		</summary>
		<value>
			<para> The name of the key exchange algorithm.
      </para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.KeySize">
		<summary>
			<para> Gets the size of the key used by the asymmetric algorithm in bits.
      </para>
		</summary>
		<value>
			<para> The size of the key used by the asymmetric algorithm.
      </para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.LegalKeySizes">
		<summary>
			<para>Gets the key sizes that are supported by the asymmetric
      algorithm.</para>
		</summary>
		<value>
			<para>Only key sizes that match an entry in this array are
      supported by the asymmetric algorithm.</para>
		</value>
		<remarks>
			<para>Only values represented in this array are valid for the
      property <see cref="System.Security.Cryptography.DSACryptoServiceProvider.KeySize"/> .</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.SignatureAlgorithm">
		<summary>
			<para>Gets the name of the signature algorithm.</para>
		</summary>
		<value>
			<para> The name of the signature algorithm.
      </para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.PersistKeyInCsp">
		<summary>
			<para>Gets or sets a value indicating whether the key should be
      persisted in the cryptographic service provider (CSP).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the key should be persisted in the CSP; otherwise,
<see langword="false"/>.</para>
		</value>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code to set this property. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.SignData2">
		<overload>
			<para> Computes the hash value of the specified
      data and signs it.</para>
		</overload>
		<summary>
			<para>Computes the hash value of a subset of the specified byte array using the
      specified hash algorithm, and signs the resulting hash value.</para>
		</summary>
		<param name="buffer">The input data for which to compute the hash.</param>
		<param name=" offset">The offset into the array from which to begin using data.</param>
		<param name=" count">The number of bytes in the array to use as data.</param>
		<returns>
			<para>The <see cref="System.Security.Cryptography.DSA"/> signature for the specified
   data.</para>
		</returns>
		<remarks>
			<para>This method creates a digital signature that is verified using the <see cref="System.Security.Cryptography.DSACryptoServiceProvider.VerifyData"/>
method.</para>
			<para><see cref="System.Security.Cryptography.DSA"/> uses the <see cref="System.Security.Cryptography.SHA1"/> hash algorithm.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.VerifySignature">
		<summary>
			<para>Verifies the <see cref="System.Security.Cryptography.DSA"/> signature for the
   specified data.</para>
		</summary>
		<param name="rgbHash">The data signed with <paramref name="rgbSignature"/>.</param>
		<param name=" rgbSignature">The signature to be verified for <paramref name="rgbData"/>.</param>
		<returns>
			<para><see langword="true"/> if <paramref name="rgbSignature"/> matches the
   signature computed using the specified hash algorithm and key on <paramref name="rgbHash"/>;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.UseMachineKeyStore">
		<summary>
			<para>Gets or sets a value indicating whether the key should 
      be persisted in the computer's key store instead of the user profile store.</para>
		</summary>
		<value>
			<para><see langword="true"/> if the key should be persisted in the computer key 
   store; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>Setting this property to true is equivalent to passing 
      the <see cref="System.Security.Cryptography.CspFlags.UseMachineKeyStore" qualify="true"/> flag to a <see cref="System.Security.Cryptography.CspParameters"/>
      object. The <see cref="System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore"/>
      
      property applies to all code in
      the current application domain, while the <see cref="System.Security.Cryptography.CspParameters"/> object applies only to
      classes that explicitly reference it. These settings are useful when
      impersonating or running under an account whose user profile is not loaded. </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider">
		<summary>
			<para>Defines a wrapper object to access the
      cryptographic service provider (CSP) implementation of the <see cref="System.Security.Cryptography.DSA"/>
      algorithm.</para>
		</summary>
		<remarks>
			<para> Digital signatures authenticate
      the identity of another entity and protect the integrity of data. For example, to use
      a public-key system to digitally sign a message, the sender first applies a
      hash function to the message to create a message digest. The sender then encrypts
      the message digest with the sender's private key to create the sender's
      personal signature, because this private key uniquely identifies the sender. Upon
      receiving the message and signature, the receiver decrypts the signature using
      the sender's public key to recover the message digest and hashes the message
      using the same hash algorithm that the sender used. If the message digest that
      the receiver computes exactly matches the message digest received from the
      sender, the receiver can be sure that the message came from the sender. Note that a
      signature can be verified by anyone, because the sender's public key is common
      knowledge.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.DSACryptoServiceProvider">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.DSACryptoServiceProvider"/> class.</para>
		</summary>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.ExportParameters">
		<summary>
			<para> Exports the <see cref="System.Security.Cryptography.DSAParameters"/>.</para>
		</summary>
		<param name="includePrivateParameters"><see langword="true"/> to include private parameters; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>The parameters for <see cref="System.Security.Cryptography.DSA"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException">The key cannot be exported.</exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.ImportParameters">
		<summary>
			<para> Imports the specified <see cref="System.Security.Cryptography.DSAParameters"/>.</para>
		</summary>
		<param name="parameters">The parameters for <see cref="System.Security.Cryptography.DSA"/>.</param>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>The <paramref name="parameters"/> parameter has missing fields.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.SignData">
		<overload>
			<para> Computes the hash value of the specified
      data and signs it.</para>
		</overload>
		<summary>
			<para> Computes the hash value of the
      specified input stream and signs the resulting hash value.</para>
		</summary>
		<param name="inputStream">The input data for which to compute the hash.</param>
		<returns>
			<para>The <see cref="System.Security.Cryptography.DSA"/> signature for the specified
   data.</para>
		</returns>
		<remarks>
			<para><see cref="System.Security.Cryptography.DSA"/> uses the <see cref="System.Security.Cryptography.SHA1"/> hash algorithm.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.SignData1">
		<overload>
			<para> Computes the hash value of the specified
      data and signs it.</para>
		</overload>
		<summary>
			<para> Computes the hash value of the
      specified byte array and signs the resulting hash value.</para>
		</summary>
		<param name="buffer">The input data for which to compute the hash.</param>
		<returns>
			<para>The <see cref="System.Security.Cryptography.DSA"/> signature for the specified
   data.</para>
		</returns>
		<remarks>
			<para>This method creates a digital signature that is verified using the <see cref="System.Security.Cryptography.DSACryptoServiceProvider.VerifyData"/>
method.</para>
			<para><see cref="System.Security.Cryptography.DSA"/> uses the <see cref="System.Security.Cryptography.SHA1"/> hash algorithm.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.Sign-VerifyData" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.VerifyData">
		<summary>
			<para> Verifies the specified
      signature data by comparing it to the signature computed for the specified data.</para>
		</summary>
		<param name="rgbData">The data that was signed.</param>
		<param name=" rgbSignature">The signature data to be verified.</param>
		<returns>
			<para><see langword="true"/> if the signature verifies as
   valid; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para>This method verifies the <see cref="System.Security.Cryptography.DSA"/> digital signature
   produced by <see cref="System.Security.Cryptography.DSACryptoServiceProvider.SignData"/>.</para>
			<para><see cref="System.Security.Cryptography.DSA"/> uses the <see cref="System.Security.Cryptography.SHA1"/> hash algorithm.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.Sign-VerifyData" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.CreateSignature">
		<summary>
			<para>Creates
      the <see cref="System.Security.Cryptography.DSA"/> signature for the specified data.</para>
		</summary>
		<param name="rgbHash">The data to be signed.</param>
		<returns>
			<para>The digital signature for the specified data.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.SignHash">
		<summary>
			<para> Computes the signature for the specified hash value by encrypting it with the private key.
      </para>
		</summary>
		<param name="rgbHash">The hash value of the data to be signed. </param>
		<param name=" str">The name of the hash algorithm used to create the hash value of the data. </param>
		<returns>
			<para> The <see cref="System.Security.Cryptography.DSA"/> signature for the specified hash value.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="rgbHash"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>There is no private key.</para></exception>
		<remarks>
			<para> This method creates a digital signature that is verified
      using the <see cref="System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash"/> method.</para>
			<para><see cref="System.Security.Cryptography.DSA"/> uses the <see cref="System.Security.Cryptography.SHA1"/> hash algorithm.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.Sign-VerifyHash" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="DSACryptoServiceProvider.VerifyHash">
		<summary>
			<para> Verifies the specified signature
      data by comparing it to the signature computed for the specified hash value.</para>
		</summary>
		<param name="rgbHash">The hash value of the data to be signed.</param>
		<param name=" str">The name of the hash algorithm used to create the hash value of the data.</param>
		<param name=" rgbSignature">The signature data to be verified.</param>
		<returns>
			<para><see langword="true"/> if the signature verifies as
   valid; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="rgbHash"/> parameter is <see langword="null"/>.</para><para>-or-</para><para>The <paramref name="rgbSignature"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>The signature cannot be verified.</para></exception>
		<remarks>
			<para>This method verifies the <see cref="System.Security.Cryptography.DSA"/> digital signature
   produced by <see cref="System.Security.Cryptography.DSACryptoServiceProvider.SignHash"/>.</para>
			<para>If the <paramref name="str"/> parameter is <see langword="null"/>, the
default hash algorithm (SHA1) is used. The valid hash algorithms are <see cref="System.Security.Cryptography.SHA1"/> and <see cref="System.Security.Cryptography.MD5"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.DSACryptoServiceProvider.Sign-VerifyHash" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
