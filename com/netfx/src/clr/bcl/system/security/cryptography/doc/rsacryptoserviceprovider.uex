<docs>
	<doc for="RSACryptoServiceProvider.RSACryptoServiceProvider2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> class with the specified parameters.</para>
		</summary>
		<param name="parameters">The parameters to be passed to the cryptographic service provider (CSP).</param>
		<exception cref="System.Security.Cryptography.CryptographicException">The CSP cannot be acquired.</exception>
		<remarks>
			<para>Parameters can be used to specify which key to use when more than one exist
      on the system.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.RSACryptoServiceProvider3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> class
   with the specified key size and parameters.</para>
		</summary>
		<param name="dwKeySize">The size of the key to use in bits.</param>
		<param name=" parameters">The parameters to be passed to the cryptographic service provider (CSP).</param>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The CSP cannot be acquired.</para>
			<para>-or-</para>
			<para>The key cannot be created.</para></exception>
		<remarks>
			<para>Parameters can be used to specify which key to use when more than one exist
      on the system.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.Dispose">
		<summary>
			<para> Releases the unmanaged resources used by
      the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> and optionally releases the
      managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>This method is called by the
      public <see langword="Dispose()"/> method and the <see langword="Finalize"/>
      method. <see langword="Dispose()"/> invokes the protected
   <see langword="Dispose(Boolean)"/> method with the disposing parameter set to
   <see langword="true"/>. <see langword="Finalize"/> invokes
   <see langword="Dispose"/> with disposing set to <see langword="false"/>.</para>
			<para>When the <paramref name="disposing"/> parameter is
<see langword="true"/>, this method releases all resources held by any managed 
   objects that this <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> references. This
   method invokes the <see langword="Dispose()"/> method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple times by other objects. When
   overriding <see langword="Dispose(Boolean)"/>, be careful not to reference
   objects that have been previously disposed in an earlier call to
<see langword="Dispose"/>. For more information about how to implement 
<see langword="Dispose(Boolean)"/>, see <see topic="cpconImplementingDisposeMethod"/>. 
</note>
			<para>For more information about <see langword="Dispose"/> and
<see langword="Finalize"/>, see <see topic="cpconCleaningUpUnmanagedResources"/> and <see topic="cpconOverridingFinalizeMethod"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.Finalize">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/>.</para>
		</summary>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.KeySize">
		<summary>
			<para> Gets the size of the current key.</para>
		</summary>
		<value>
			<para> The size of the key in bits.</para>
		</value>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.KeyExchangeAlgorithm">
		<summary>
			<para> Gets the name of the key exchange algorithm
      available with this implementation of <see cref="System.Security.Cryptography.RSA"/>.</para>
		</summary>
		<value>
			<para>The name of the key exchange algorithm if it
      exists; otherwise, <see langword="null"/>.</para>
		</value>
		<remarks>
			<para>This property indicates the name of the algorithm, not of the type. For example,
      RSA-PKCS1-KeyEx is a key exchange algorithm name.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.SignatureAlgorithm">
		<summary>
			<para>Gets the name of the signature algorithm available
      with this implementation of <see cref="System.Security.Cryptography.RSA"/>.</para>
		</summary>
		<value>
			<para>The name of the signature algorithm.</para>
		</value>
		<remarks>
			<para> This property is used in XML digital signature classes
      to indicate the algorithm URI. In this implementation, this property always
      returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.PersistKeyInCsp">
		<summary>
			<para>Gets or sets a value indicating whether the key should be
      persisted in the cryptographic service provider (CSP).</para>
		</summary>
		<value>
			<para><see langword="true"/> if the key should be persisted in the CSP; otherwise,
<see langword="false"/>.</para>
		</value>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code to set this property. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.SignData">
		<overload>
			<para> Computes the hash value of the specified
      data and signs it.</para>
		</overload>
		<summary>
			<para>Computes the hash value of the specified input stream using the
      specified hash algorithm, and signs the resulting hash value.</para>
		</summary>
		<param name="inputStream">The input data for which to compute the hash.</param>
		<param name=" halg">The hash algorithm to use to create the hash value.</param>
		<returns>
			<para>The <see cref="System.Security.Cryptography.RSA"/> signature for the specified
   data.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="halg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="halg"/> parameter is not a valid type.</exception>
		<remarks>
			<para>The <paramref name="halg"/> parameter can accept a <see cref="System.String"/>, a <see cref="System.Security.Cryptography.HashAlgorithm"/>, or a <see cref="System.Type"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.SignData2">
		<summary>
			<para>Computes the hash value of a subset of the specified byte array using the
      specified hash algorithm, and signs the resulting hash value.</para>
		</summary>
		<param name="buffer">The input data for which to compute the hash.</param>
		<param name=" offset">The offset into the array from which to begin using data.</param>
		<param name=" count">The number of bytes in the array to use as data.</param>
		<param name=" halg">The hash algorithm to use to create the hash value.</param>
		<returns>
			<para>The <see cref="System.Security.Cryptography.RSA"/> signature for the specified
   data.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="halg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="halg"/> parameter is not a valid type.</exception>
		<remarks>
			<para>This method creates a digital signature that is verified
      using the <see cref="System.Security.Cryptography.RSACryptoServiceProvider.VerifyData"/>
      method.</para>
			<para>The <paramref name="halg"/> parameter can accept a <see cref="System.String"/>, a <see cref="System.Security.Cryptography.HashAlgorithm"/>, or a <see cref="System.Type"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.VerifyData">
		<summary>
			<para> Verifies the specified
      signature data by comparing it to the signature computed for the specified data.</para>
		</summary>
		<param name="buffer">The data that was signed.</param>
		<param name=" halg">The name of the hash algorithm used to create the hash value of the data.</param>
		<param name=" signature">The signature data to be verified.</param>
		<returns>
			<para><see langword="true"/> if the signature verifies as
   valid; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="halg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="halg"/> parameter is not a valid type.</exception>
		<remarks>
			<para>This method verifies the <see cref="System.Security.Cryptography.RSA"/> digital signature
   produced by <see cref="System.Security.Cryptography.RSACryptoServiceProvider.SignData"/>.</para>
			<para> The <paramref name="halg"/> parameter can
accept a <see cref="System.String"/>,
a <see cref="System.Security.Cryptography.HashAlgorithm"/>, or a <see cref="System.Type"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.DecryptValue">
		<summary>
			<para>This method is not supported in the current version.</para>
		</summary>
		<param name="rgb">The data to be decrypted.</param>
		<returns>
			<para>The decrypted data, which is the original plain text before encryption.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported in the current version.</exception>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.EncryptValue">
		<summary>
			<para>This method is not supported in the current version.</para>
		</summary>
		<param name="rgb">The data to be encrypted.</param>
		<returns>
			<para>The encrypted data.</para>
		</returns>
		<exception cref="System.NotSupportedException">This method is not supported in the current version.</exception>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.UseMachineKeyStore">
		<summary>
			<para> Gets or sets a value
      indicating whether the key should be
      persisted in the computer's key store instead of the user profile store. </para>
		</summary>
		<value>
			<para><see langword="true"/> if the key should be persisted in the computer key store;
   otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Setting this property to true is equivalent to passing 
      the <see cref="System.Security.Cryptography.CspFlags.UseMachineKeyStore" qualify="true"/> flag to a <see cref="System.Security.Cryptography.CspParameters"/>
      object. The <see cref="System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore"/> property applies to all code in
      the current application domain, while the <see cref="System.Security.Cryptography.CspParameters"/>
      
      object applies only to classes that explicitly reference it. These
      settings are useful when impersonating or running under an account whose user
      profile is not loaded. </para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider">
		<summary>
			<para>Performs asymmetric encryption and decryption using the
      implementation of the <see cref="System.Security.Cryptography.RSA"/>
      algorithm provided by the cryptographic service
      provider (CSP). This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>This is the default implementation of <see cref="System.Security.Cryptography.RSA"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider" SnippetID="1"/>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.RSACryptoServiceProvider">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> class
   using the default key.</para>
		</summary>
		<exception cref="System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
		<remarks>
			<para> If no default key is found, a new key is created.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.ExportParameters">
		<summary>
			<para> Exports the <see cref="System.Security.Cryptography.RSAParameters"/>.</para>
		</summary>
		<param name="includePrivateParameters"><see langword="true"/> to include private parameters; otherwise, <see langword="false"/>.</param>
		<returns>
			<para>The parameters for <see cref="System.Security.Cryptography.RSA"/>.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException">The key cannot be exported.</exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.ImportParameters">
		<summary>
			<para> Imports the specified <see cref="System.Security.Cryptography.RSAParameters"/>.</para>
		</summary>
		<param name="parameters">The parameters for <see cref="System.Security.Cryptography.RSA"/>.</param>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>The <paramref name="parameters"/> parameter has missing fields.</para></exception>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.Encrypt">
		<summary>
			<para>Encrypts data with the <see cref="System.Security.Cryptography.RSA"/>
algorithm.</para>
		</summary>
		<param name="rgb">The data to be encrypted.</param>
		<param name=" fOAEP"><see langword="true"/> to perform direct <see cref="System.Security.Cryptography.RSA"/> encryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <see langword="false"/> to use PKCS#1 v1.5 padding.</param>
		<returns>
			<para> The encrypted data.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>The length of the <paramref name="rgb"/> parameter is greater than the maximum allowed length.</para>
			<para>-or-</para>
			<para> The <paramref name="fOAEP"/> parameter is <see langword="true"/> and OAEP padding is not supported.</para></exception>
		<remarks>
			<para>The following table describes the padding supported by
      different versions of Microsoft Windows and the maximum length of <paramref name="rgb"/> allowed by the different combinations of operating systems and padding.</para>
			<list type="table">
				<listheader>
					<term>Padding</term>
					<description>Operating System Supported</description>
					<description>Maximum Length of rgb Parameter</description>
				</listheader>
				<item>
					<term> OAEP padding (PKCS#1 v2)</term>
					<description>Microsoft Windows XP or later.</description>
					<description>Modulus size -2 -2*hLen, where hLen is the size of the hash.</description>
				</item>
				<item>
					<term> Direct Encryption (PKCS#1 v1.5)</term>
					<description>Microsoft Windows 2000 or later with the high encryption pack
            installed.</description>
					<description>Modulus size - 11. (11 bytes is the minimum padding possible.)</description>
				</item>
				<item>
					<term> Direct Encryption and OAEP padding not
            supported</term>
					<description>Microsoft Windows 98, Microsoft Windows Millenium,
            or Windows 2000 or later without the high encryption pack
            installed.</description>
					<description>The maximum size allowed for a symmetric
            key.</description>
				</item>
			</list>
			<para>Use <see cref="System.Security.Cryptography.RSACryptoServiceProvider.Decrypt"/> to
   decrypt the results of this method.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider.Encrypt" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.Decrypt">
		<summary>
			<para> Decrypts data with the <see cref="System.Security.Cryptography.RSA"/>
algorithm.</para>
		</summary>
		<param name="rgb">The data to be decrypted.</param>
		<param name=" fOAEP"><see langword="true"/> to perform direct <see cref="System.Security.Cryptography.RSA"/> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <see langword="false"/> to use PKCS#1 v1.5 padding.</param>
		<returns>
			<para>The decrypted data, which is the original plain text before encryption.</para>
		</returns>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>The <paramref name="fOAEP"/> parameter is <see langword="true"/> and the length of the <paramref name="rgb"/> parameter is greater than <see cref="System.Security.Cryptography.RSACryptoServiceProvider.KeySize"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="fOAEP"/> parameter is <see langword="true"/> and OAEP is not supported.</para></exception>
		<remarks>
			<para>Use <see cref="System.Security.Cryptography.RSACryptoServiceProvider.Encrypt"/> to encrypt data for decryption with this method.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.RSACryptoServiceProvider1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Cryptography.RSACryptoServiceProvider"/> class with the specified key size.</para>
		</summary>
		<param name="dwKeySize">The size of the key to use in bits.</param>
		<exception cref="System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider Parameters Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.SignData1">
		<summary>
			<para>Computes the hash value of the specified byte array using the
      specified hash algorithm, and signs the resulting hash value.</para>
		</summary>
		<param name="buffer">The input data for which to compute the hash.</param>
		<param name=" halg">The hash algorithm to use to create the hash value.</param>
		<returns>
			<para>The <see cref="System.Security.Cryptography.RSA"/> signature for the specified
   data.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="halg"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException">The <paramref name="halg"/> parameter is not a valid type.</exception>
		<remarks>
			<para>This method creates a digital signature that is verified using the <see cref="System.Security.Cryptography.RSACryptoServiceProvider.VerifyData"/>
method.</para>
			<para>The <paramref name="halg"/> parameter can accept a <see cref="System.String"/>, a <see cref="System.Security.Cryptography.HashAlgorithm"/>, or a <see cref="System.Type"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.SignHash">
		<summary>
			<para> Computes the signature for the specified hash value by encrypting it with the private key.
      </para>
		</summary>
		<param name="rgbHash">The hash value of the data to be signed. </param>
		<param name=" str">The hash algorithm identifier (OID) used to create the hash value of the data. </param>
		<returns>
			<para> The <see cref="System.Security.Cryptography.RSA"/> signature for the specified hash value.
   </para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="rgbHash"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>There is no private key.</para></exception>
		<remarks>
			<para> This method creates a digital signature that is verified
      using the <see cref="System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash"/> method.</para>
			<para> The valid hash algorithms are <see cref="System.Security.Cryptography.SHA1"/> and <see cref="System.Security.Cryptography.MD5"/>. The algorithm identifier can be derived from the hash
   name by using the <see cref="System.Security.Cryptography.CryptoConfig.MapNameToOID"/> method.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RSACryptoServiceProvider.VerifyHash">
		<summary>
			<para> Verifies the specified signature
      data by comparing it to the signature computed for the specified hash value.</para>
		</summary>
		<param name="rgbHash">The hash value of the data to be signed.</param>
		<param name=" str">The hash algorithm identifier (OID) used to create the hash value of the data.</param>
		<param name=" rgbSignature">The signature data to be verified.</param>
		<returns>
			<para><see langword="true"/> if the signature verifies as
   valid; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="rgbHash"/> parameter is <see langword="null"/>.</para><para>-or-</para><para>The <paramref name="rgbSignature"/> parameter is <see langword="null"/>.</para></exception>
		<exception cref="System.Security.Cryptography.CryptographicException"><para>The cryptographic service provider (CSP) cannot be acquired.</para>
			<para>-or-</para>
			<para>The signature cannot be verified.</para></exception>
		<remarks>
			<para>This method verifies the <see cref="System.Security.Cryptography.RSA"/> digital signature
   produced by <see cref="System.Security.Cryptography.RSACryptoServiceProvider.SignHash"/>.</para>
			<para> The valid hash algorithms are <see cref="System.Security.Cryptography.SHA1"/> and <see cref="System.Security.Cryptography.MD5"/>. The algorithm identifier can be derived from the hash
name by using the <see cref="System.Security.Cryptography.CryptoConfig.MapNameToOID"/> method.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
