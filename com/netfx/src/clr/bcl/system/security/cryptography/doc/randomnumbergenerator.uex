<docs>
	<doc for="RandomNumberGenerator">
		<summary>
			<para> Represents the abstract class from which all implementations
      of cryptographic random number generators derive.</para>
		</summary>
		<remarks>
			<para> Cryptographic
      random number generators create cryptographically
      strong random
      values.</para>
			<para>Application code does not directly use this class. This abstract class is
      provided as the base class for all cryptographic random number generators.</para>
			<para>For an implementation of a cryptographic random
      number generator, use the derived class <see cref="System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RandomNumberGenerator.RandomNumberGenerator">
		<summary>
			<para> Initializes a new instance of <see cref="System.Security.Cryptography.RandomNumberGenerator"/>.</para>
		</summary>
		<remarks>
			<para>You cannot create an instance of an abstract class. Application code will
      create a new instance of a derived class.</para>
		</remarks>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RandomNumberGenerator.Create">
		<overload>
			<para> Creates an instance of an implementation
      of a cryptographic random number generator.</para>
		</overload>
		<summary>
			<para>Creates an instance of the default implementation of a cryptographic random number generator that can be used to
      generate random data.</para>
		</summary>
		<returns>
			<para>A new instance of a cryptographic random number generator.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RandomNumberGenerator.Create1">
		<summary>
			<para> Creates an instance of the
      specified implementation of a cryptographic random number generator.</para>
		</summary>
		<param name="rngName">The name of the random number generator implementation to use.</param>
		<returns>
			<para>A new instance of a cryptographic random number generator.</para>
		</returns>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RandomNumberGenerator.GetBytes">
		<summary>
			<para>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of
      values.</para>
		</summary>
		<param name="data">The array to fill with cryptographically strong random bytes.</param>
		<remarks>
			<para>The length of the byte array determines how many random bytes are
      produced.</para>
		</remarks>
		<example>
			<para>The following example creates a random sequence 100 bytes long and stores it
      in <c>random</c>.</para>
			<codelink SampleID="Classic RandomNumberGenerator.GetBytes Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
	<doc for="RandomNumberGenerator.GetNonZeroBytes">
		<summary>
			<para>When overridden in a derived class, fills
      an array of bytes with a cryptographically strong random sequence of nonzero
      values.</para>
		</summary>
		<param name="data">The array to fill with cryptographically strong random nonzero bytes.</param>
		<remarks>
			<para>The length of the byte array determines how many random bytes are
      produced.</para>
		</remarks>
		<example>
			<para>The following example creates a random sequence of 100 nonzero bytes and stores it
      in <c>random</c>.</para>
			<codelink SampleID="Classic RandomNumberGenerator.GetNonZeroBytes Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconcryptographicservices"/>
	</doc>
</docs>
