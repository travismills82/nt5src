<docs>
	<doc for="StrongNameIdentityPermission.PublicKey">
		<summary>
			<para> Gets or sets the public key blob that defines the strong name
       identity namespace.</para>
		</summary>
		<value>
			<para>The public key of the identity.</para>
		</value>
		<exception cref="System.ArgumentNullException">The property value is <see langword="null"/>.</exception>
	</doc>
	<doc for="StrongNameIdentityPermission.Version">
		<summary>
			<para> Gets or sets the version number of the identity.</para>
		</summary>
		<value>
			<para>The version of the identity.</para>
		</value>
	</doc>
	<doc for="StrongNameIdentityPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="StrongNameIdentityPermission">
		<summary>
			<para>Defines the identity permission for strong names. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Use <see cref="System.Security.Permissions.StrongNameIdentityPermission"/> to achieve versioning and
   naming protection by confirming that the calling code is in a particular
   strong-named code assembly.</para>
			<para> A strong name identity is
   based on a cryptographic public key called a blob optionally combined with the name and
   version of a specific assembly. The key defines a unique namespace and provides
   strong verification that the name is genuine, because the definition of the name must
   be in an assembly signed by the corresponding private key.</para>
			<para>Note that the validity of the strong name key is not dependent on
   a trust relationship or any certificate necessarily being issued for the key.</para>
			<note type="note">
   Full demands for
<see cref="System.Security.Permissions.StrongNameIdentityPermission"/> succeed only if all
   the assemblies in the stack have the correct evidence to satisfy the demand.
   Link demands using <see cref="System.Security.Permissions.StrongNameIdentityPermissionAttribute"/> succeed if only
   the immediate caller has the correct evidence.
   
</note>
			<para> For a complete description of strong names see
<see cref="System.Security.Policy.StrongName"/>. For 
   more information on
   strong-named assemblies, see <see topic="cpconstrong-namedassemblies"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso topic="cpconstrong-namedassemblies"/>
		<seealso cref="System.Security.Permissions.StrongNameIdentityPermission"/>
		<seealso cref="System.Security.Permissions.StrongNamePublicKeyBlob"/>
		<seealso cref="System.Security.Policy.StrongName"/>
		<seealso cref="System.Security.Policy.StrongNameMembershipCondition"/>
	</doc>
	<doc for="StrongNameIdentityPermission.StrongNameIdentityPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.StrongNameIdentityPermission"/> class
   with fully restricted <see cref="System.Security.Permissions.PermissionState"/>.</para>
		</summary>
		<param name="state"><see langword="None"/> is the only valid value for identity permissions.</param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para>Identity permissions do not allow an
      <see langword="Unrestricted"/>
				<see cref="System.Security.Permissions.PermissionState"/>.</para>
			<para>Use this constructor to create an identity permission
   that matches no strong names. If you subsequently set the <see cref="System.Security.Permissions.StrongNameIdentityPermission.Name"/> and <see cref="System.Security.Permissions.StrongNameIdentityPermission.Version"/>
   properties, a specific strong name
   identity can be represented by the permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.StrongNameIdentityPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
class for
the specified strong name identity.</para>
		</summary>
		<param name="blob">The public key defining the strong name identity namespace.</param>
		<param name="name">The simple name part of the strong name identity. This corresponds to the name of the assembly.</param>
		<param name="version">The version number of the identity.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="blob"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>The <paramref name="name"/> and <paramref name="version"/> parameters can be
<see langword="null"/> in cases when only the public key is to 
   be used to identify the assembly. An empty string ("") should not be used
   in place of <see langword="null"/>.</para>
			<para>For more information on names and version numbers of assemblies, see <see topic="cpconstrong-namedassemblies"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="8"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.Name">
		<summary>
			<para> Gets or sets the simple name portion of the strong name
      identity.</para>
		</summary>
		<value>
			<para>The simple name of the identity.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources as the
      original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para> The current permission is a
      subset of the specified
      permission if the current permission specifies a
      set of operations that is wholly contained by the specified
      permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
		</summary>
		<param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
		<returns>
			<para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para>The intersection of two permissions is a permission that
      describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
			<para>The intersection of two identical strong name identity permissions
      is the same permission. The intersection of two different (not wild card)
      expressions is an empty permission. The intersection of a wild card expression
      and a matching strong name is the strong name. The intersection of two
      wild card expressions that match is the longer, more specific of the two
      expressions.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
		</summary>
		<param name="target"> A permission to combine with the current permission. It must be of the same type as the current permission.</param>
		<returns>
			<para> A new permission that represents the union of
      the current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target "/>parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.StrongNameIdentityPermission.Union"/>
is a permission that
represents all the operations represented by both the current permission and
the specified permission. Any demand that passes either permission passes their
union.</para>
			<para>The union of a permission and <see langword="null"/> is
the permission that is not <see langword="null"/>. The union of a permission and
a subset of that permission is the permission that contains the other. Any other
combination results in a permission that is <see langword="null"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="e"> The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="e"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="e"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="e"/> parameter's version number is not valid.</para></exception>
		<remarks>
			<para>This method is not used by application code.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="StrongNameIdentityPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<remarks>
			<para>This method is not typically used by application code.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.StrongNameIdentityPermission" SnippetID="6"/>
		</example>
	</doc>
</docs>
