<docs>
	<doc for="SecurityAction.Demand">
		<summary>
			<para>
             All callers higher in the call stack are required to have been 
       granted the permission specified by the current permission object (see 
            <see topic="cpconmakingsecuritydemands"/>
            ).
         </para>
		</summary>
	</doc>
	<doc for="SecurityAction.Assert">
		<summary>
			<para>
             The calling code can access the resource identified by 
       the current permission object, even if callers higher in the stack have not been
       granted permission to access the resource (see 
            <see topic="cpconassert"/>
            ).
         </para>
		</summary>
	</doc>
	<doc for="SecurityAction.Deny">
		<summary>
			<para>
            The ability to access the resource specified by the 
       current permission object is denied to callers, even if they have been granted
       permission to access it (see 
            <see topic="cpcondeny"/>
            ).
         </para>
		</summary>
	</doc>
	<doc for="SecurityAction.PermitOnly">
		<summary>
			<para>
             Only the resources specified by this permission object 
       can be accessed, even if the code has been granted permission to access other
       resources (see 
            <see topic="cpconpermitonly"/>
            ).
         </para>
		</summary>
	</doc>
	<doc for="SecurityAction.RequestMinimum">
		<summary>
			<para> The request for the minimum 
       permissions required for code to run. This action can only be used within the scope of
       the assembly.</para>
		</summary>
	</doc>
	<doc for="SecurityAction.RequestOptional">
		<summary>
			<para> The request for additional 
       permissions that are optional (not required to run). This action can only be used
       within the scope of the assembly.</para>
		</summary>
	</doc>
	<doc for="SecurityAction.RequestRefuse">
		<summary>
			<para> The request that permissions that might be 
       misused will not be granted to the calling code. This action can only be used within the scope of
       the assembly.</para>
		</summary>
	</doc>
	<doc for="SecurityAttribute.m_action">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="SecurityAttribute.m_unrestricted">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="SecurityAttribute.SecurityAttribute">
		<summary>
			<para>
             Initializes a new instance of 
            <see cref="System.Security.Permissions.SecurityAttribute"/>
             
 with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
          One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
		<exception cref="System.ArgumentException">
         The 
         <paramref name="action"/>
          parameter is not a valid value of 
         <see cref="System.Security.Permissions.SecurityAction"/>
         . 
      </exception>
		<remarks>
			<para>You cannot create an instance of this class. You must inherit from this class 
       to make use of its functionality.</para>
		</remarks>
	</doc>
	<doc for="SecurityAttribute.Action">
		<summary>
			<para> Gets or
       sets a security action.</para>
		</summary>
		<value>
			<para>
            One of the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             values. 
         </para>
		</value>
		<remarks>
			<para>This property is inherited by all classes implementing custom attributes for declarative
       security.</para>
		</remarks>
	</doc>
	<doc for="PrincipalPermissionAttribute.Authenticated">
		<summary>
			<para> Gets or sets a value indicating whether the current principal has been
       authenticated by the underlying role-based security provider.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if the current principal has been 
    authenticated; otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
	</doc>
	<doc for="ReflectionPermissionAttribute.MemberAccess">
		<summary>
			<para> Gets or sets a value indicating whether invocation of operations on type 
       members is allowed.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if invocation of operations on type members is allowed; 
    otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
	</doc>
	<doc for="UIPermissionAttribute.UIPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.UIPermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
          One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="ZoneIdentityPermissionAttribute.ZoneIdentityPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.ZoneIdentityPermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
          One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="ZoneIdentityPermissionAttribute.Zone">
		<summary>
			<para> Gets or sets membership in the content zone specified by
       the property value.</para>
		</summary>
		<value>
			<para>
             One of the 
            <see cref="System.Security.SecurityZone"/>
             values.
         </para>
		</value>
	</doc>
	<doc for="StrongNameIdentityPermissionAttribute.StrongNameIdentityPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.StrongNameIdentityPermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
          One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values. 
      </param>
	</doc>
	<doc for="SiteIdentityPermissionAttribute.SiteIdentityPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.SiteIdentityPermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
          One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="UrlIdentityPermissionAttribute.UrlIdentityPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.UrlIdentityPermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="PublisherIdentityPermissionAttribute.PublisherIdentityPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.m_userQuota">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.m_machineQuota">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.m_expirationDays">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.m_permanentData">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.m_allowed">
		<internalonly/>
		<summary>
			<para>Internal.</para>
		</summary>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.IsolatedStoragePermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.IsolatedStoragePermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
		<remarks>
			<para>This constructor is called by derived class constructors to initialize states 
       in this type.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.ExpirationDays">
		<summary>
			<para>Gets or sets the maximum number of days of inactivity after which data in isolated storage
       should be
       marked for deletion.</para>
		</summary>
		<value>
			<para>Lifetime of isolated storage in days.</para>
		</value>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.PermanentData">
		<summary>
			<para> Gets or sets
       a value indicating whether the ability to retain data indefinitely is declared.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if the ability to retain 
    data indefinitely is declared; otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
	</doc>
	<doc for="IsolatedStorageFilePermissionAttribute.IsolatedStorageFilePermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.IsolatedStorageFilePermissionAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="PermissionSetAttribute.PermissionSetAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.PermissionSetAttribute"/>
             class 
    with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
	</doc>
	<doc for="PermissionSetAttribute.XML">
		<summary>
			<para> Gets or sets the XML representation of a permission set.</para>
		</summary>
		<value>
			<para> The XML
       representation of a permission set.</para>
		</value>
	</doc>
	<doc for="PermissionSetAttribute.File">
		<summary>
			<para> Gets or sets a file containing the XML representation of a
      custom permission set to be declared.</para>
		</summary>
		<value>
			<para>The physical path to the file containing the XML representation of the
      permission set.</para>
		</value>
		<remarks>
			<para>
             If the file specified is Unicode, set the 
            <see cref="System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded"/>
             property to

            <see langword="true"/>
            .
         </para>
		</remarks>
	</doc>
	<doc for="PermissionSetAttribute.UnicodeEncoded">
		<summary>
			<para>
             Gets or sets a value indicating whether the file specified
      by 
            <see cref="System.Security.Permissions.PermissionSetAttribute.File"/>
             is
      Unicode or ASCII encoded.
         </para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if the file is Unicode encoded;
   otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
		<remarks>
			<para>If this property is not set, the file is assumed to be ASCII.</para>
			<para>
            If 
            <see cref="System.Security.Permissions.PermissionSetAttribute.File"/>
             is 
            <see langword="null"/>
             this 
   property is not used.
         </para>
		</remarks>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.UsageAllowed">
		<summary>
			<para> Gets or sets the level of isolated storage that should be
      declared.</para>
		</summary>
		<value>
			<para>
             One of the 
            <see cref="System.Security.Permissions.IsolatedStorageContainment"/>
             values.
         </para>
		</value>
	</doc>
	<doc for="PrincipalPermissionAttribute.Name">
		<summary>
			<para> Gets or sets the name of the
      identity associated with the current principal.</para>
		</summary>
		<value>
			<para>A name to match against that provided by the underlying role-based security provider.</para>
		</value>
		<remarks>
			<para>
             If the authentication provider is Windows
      NT, 
            <see cref="System.Security.Permissions.PrincipalPermissionAttribute.Name"/>
             is the
      same as the user's Windows NT login
      name (in the form "DomainName\UserName"). Check the documentation of your host to determine
      which authentication provider it uses and how it determines the identity
      of the current principal.
         </para>
		</remarks>
	</doc>
	<doc for="SecurityAction.InheritanceDemand">
		<summary>
			<para> The derived
      class inheriting the class or
      overriding a method is required to have been granted the
      specified permission.</para>
		</summary>
	</doc>
	<doc for="PrincipalPermissionAttribute.Role">
		<summary>
			<para> Gets or sets membership in a specified security
      role.</para>
		</summary>
		<value>
			<para>The name of a role from the underlying role-based security provider.</para>
		</value>
		<remarks>
			<para> The available roles will differ based on the authentication provider in use by the
      host. If the authentication provider is Windows NT, roles are Windows NT
      user groups (in the form "DomainName\GroupName"). Check the documentation of your host
      to determine which authentication provider it uses and what roles users
      can belong to.</para>
		</remarks>
	</doc>
	<doc for="UrlIdentityPermissionAttribute.Url">
		<summary>
			<para> Gets or sets the full URL of the calling code.</para>
		</summary>
		<value>
			<para> The URL to match with the URL specified by the host.</para>
		</value>
		<remarks>
			<para>The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and
      the file, for example: http://www.fourthcoffee.com/process/grind.htm/.</para>
			<para>URLs can be matched exactly or by a wildcard in the final position, for
      example: http://www.fourthcoffee.com/process/*.</para>
		</remarks>
	</doc>
	<doc for="StrongNameIdentityPermissionAttribute.Name">
		<summary>
			<para> Gets or sets the name of the strong name identity.</para>
		</summary>
		<value>
			<para>A name to compare against the name specified by the security provider.</para>
		</value>
	</doc>
	<doc for="StrongNameIdentityPermissionAttribute.PublicKey">
		<summary>
			<para> Gets or sets the public key value of the strong name identity expressed as a hexadecimal string.</para>
		</summary>
		<value>
			<para>The public key value of the strong name identity expressed as a hexadecimal string.</para>
		</value>
	</doc>
	<doc for="StrongNameIdentityPermissionAttribute.Version">
		<summary>
			<para> Gets or sets the version of the strong name identity.</para>
		</summary>
		<value>
			<para>The version number of the strong name identity.</para>
		</value>
	</doc>
	<doc for="PermissionSetAttribute.CreatePermissionSet">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.PermissionSet"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A new 
            <see cref="System.Security.PermissionSet"/>
            .
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by
 application code.</para>
			<para>Attributes are used at compile time to convert security declarations to a serialized form
 in metadata. Declarative security data in metadata is created from the
 permission object this method returns corresponding to this attribute
 instance.</para>
		</remarks>
	</doc>
	<doc for="SecurityAttribute">
		<summary>
			<para>
             Specifies the base attribute class for declarative
 security from which 
            <see cref="System.Security.Permissions.CodeAccessSecurityAttribute"/>
            
 is derived.
         </para>
		</summary>
		<remarks>
			<note type="inheritinfo">
            
 When you inherit from 
            <see cref="System.Security.Permissions.SecurityAttribute"/>
            , you must override 
            <see cref="System.Security.Permissions.SecurityAttribute.CreatePermission"/>
            .
 
 
         </note>
		</remarks>
		<seealso topic="cpconextendingmetadatausingattributes"/>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute.UserQuota">
		<summary>
			<para> Gets or sets the maximum user storage quota size.</para>
		</summary>
		<value>
			<para> The maximum user storage quota size.</para>
		</value>
	</doc>
	<doc for="ReflectionPermissionAttribute.ReflectionEmit">
		<summary>
			<para>
             Gets or sets a value indicating whether use 
 of 
            <see cref="System.Reflection.Emit"/>
             is
 allowed.
         </para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if use of 

            <see cref="System.Reflection.Emit"/>
             is allowed;
 otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
	</doc>
	<doc for="ReflectionPermissionAttribute.TypeInformation">
		<summary>
			<para> Gets or sets a value indicating whether reflection on 
 members that are not visible is allowed.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if reflection 
 on members that are not visible is
 allowed; otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
	</doc>
	<doc for="SiteIdentityPermissionAttribute.Site">
		<summary>
			<para> Gets or sets the site name of the calling code.</para>
		</summary>
		<value>
			<para>The site name to compare against the site name specified by the
 security provider.</para>
		</value>
		<remarks>
			<para>Site identity is only defined for code from URLs with
 the protocols of HTTP, HTTPS, and FTP. A site is the string between the "//"
 after the protocol of a URL and the following "/", if present, for example,
 www.fourthcoffee.com in the URL http://www.fourthcoffee.com/process/grind.htm. This excludes port numbers. If a given URL
 is http://www.fourthcoffee.com:8000/, the site is www.fourthcoffee.com, not
 www.fourthcoffee.com:8000. </para>
			<para>Sites can be matched exactly, or by a wildcard ("*") prefix at the dot
 delimiter. For example, the site name string *.fourthcoffee.com matches
 fourthcoffee.com as well as www.fourthcoffee.com. Without a wildcard, the site
 name must be a precise match.</para>
		</remarks>
	</doc>
	<doc for="SecurityAttribute.Unrestricted">
		<summary>
			<para> Gets or sets a value indicating whether full
      (unrestricted) permission to the resource protected by the attribute is declared.</para>
		</summary>
		<value>
			<para>
				<see langword="true"/>
             if full permission to
   the protected resource is declared; otherwise, 
            <see langword="false"/>
            .
         </para>
		</value>
		<remarks>
			<para>This property is inherited by all classes implementing
      custom attributes for declarative security.</para>
		</remarks>
	</doc>
	<doc for="PermissionSetAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.IPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A new 
            <see cref="System.Security.IPermission"/>
            .
         </para>
		</returns>
		<remarks>
			<para>
             This method is not used, and is included only to support
      inheritance from 
            <see cref="System.Security.Permissions.SecurityAttribute"/>
            .
         </para>
		</remarks>
	</doc>
	<doc for="SecurityAttribute.CreatePermission">
		<summary>
			<para>
            When overridden in a derived class, creates a permission
      object that can then be serialized into binary form and persistently stored
      along with the 
            <see cref="System.Security.Permissions.SecurityAction"/>
            
      in an assembly's metadata.
         </para>
		</summary>
		<returns>
			<para>A serializable permission object.</para>
		</returns>
		<remarks>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="EnvironmentPermissionAttribute.CreatePermission">
		<summary>
			<para>
             Creates and returns a new
   
            <see cref="System.Security.Permissions.EnvironmentPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            An 
            <see cref="System.Security.Permissions.EnvironmentPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application
      code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="FileDialogPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new
   
            <see cref="System.Security.Permissions.FileDialogPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.FileDialogPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="PrincipalPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.PrincipalPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.PrincipalPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="ReflectionPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.ReflectionPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.ReflectionPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="RegistryPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.RegistryPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.RegistryPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never
      by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="SecurityPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.SecurityPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.SecurityPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="UIPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.UIPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.UIPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="ZoneIdentityPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.ZoneIdentityPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.ZoneIdentityPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<exception cref="System.ArgumentException">
         The identity permission attribute specifies that code should be run with 
         <see cref="System.Security.Permissions.PermissionState.Unrestricted"/>
          access.
      </exception>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="StrongNameIdentityPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<exception cref="System.ArgumentException">
         The identity permission attribute specifies that code should be run with 
         <see cref="System.Security.Permissions.PermissionState.Unrestricted"/>
          access.
      </exception>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="SiteIdentityPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new instance of 
            <see cref="System.Security.Permissions.SiteIdentityPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.SiteIdentityPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<exception cref="System.ArgumentException">
         The identity permission attribute specifies that code should be run with 
         <see cref="System.Security.Permissions.PermissionState.Unrestricted"/>
          access.
      </exception>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="UrlIdentityPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.UrlIdentityPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.UrlIdentityPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<exception cref="System.ArgumentException">
         The identity permission attribute specifies that code should be run with 
         <see cref="System.Security.Permissions.PermissionState.Unrestricted"/>
          access.
      </exception>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="PublisherIdentityPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new instance of 
            <see cref="System.Security.Permissions.PublisherIdentityPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.PublisherIdentityPermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<exception cref="System.ArgumentException">
         The identity permission attribute has an 
         <see langword="Unrestricted"/>
			<see cref="System.Security.Permissions.PermissionState"/>
         .
      </exception>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStorageFilePermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            An 
            <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
             that corresponds to this
   attribute.
         </para>
		</returns>
		<remarks>
			<para>This method should only be called by the security system, never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="UIPermissionAttribute.Window">
		<summary>
			<para> Gets or sets the type of access to the window
      resources that is permitted.</para>
		</summary>
		<value>
			<para>
             One of the 
            <see cref="System.Security.Permissions.UIPermissionWindow"/>
             values.
         </para>
		</value>
	</doc>
	<doc for="UIPermissionAttribute.Clipboard">
		<summary>
			<para> Gets or sets the type of access to the clipboard that is
      permitted.</para>
		</summary>
		<value>
			<para>
             One of the 
            <see cref="System.Security.Permissions.UIPermissionClipboard"/>
             values.
         </para>
		</value>
	</doc>
	<doc for="PublisherIdentityPermissionAttribute.X509Certificate">
		<summary>
			<para> Gets or sets an Authenticode X.509v3 certificate identifying the publisher of the calling code.</para>
		</summary>
		<value>
			<para> A hexadecimal representation of the X.509 certificate.</para>
		</value>
		<remarks>
			<para>
            If this property is set, 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile"/>
             and 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile"/>
             are ignored.
         </para>
			<para>
            The hexadecimal representation can be attained by running secutil.exe with
   -hex and -x509certificate options against a file with an Authenticode
   signature. For more information, see 
            <see topic="cpgrfsecutiltoolsecutilexe"/>
            .
         </para>
		</remarks>
	</doc>
	<doc for="PublisherIdentityPermissionAttribute.CertFile">
		<summary>
			<para> Gets or sets a certification file containing an Authenticode X.509v3 certificate.</para>
		</summary>
		<value>
			<para>The file path of an X.509 certificate file (usually has
      the extension .cer).</para>
		</value>
		<remarks>
			<para>
            If 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate"/>
             is set,
   this property is ignored.
         </para>
		</remarks>
	</doc>
	<doc for="PublisherIdentityPermissionAttribute.SignedFile">
		<summary>
			<para> Gets or sets a signed file from which to extract
      an Authenticode X.509v3 certificate.</para>
		</summary>
		<value>
			<para>The file path of a file signed with the Authenticode
      signature.</para>
		</value>
		<remarks>
			<para>
            If either 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate"/>
            
or 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile"/>
             is set, this
property is ignored.
         </para>
		</remarks>
	</doc>
	<doc for="ReflectionPermissionAttribute.Flags">
		<summary>
			<para> Gets or sets the current allowed uses of reflection.</para>
		</summary>
		<value>
			<para>
            One or more of the 
            <see cref="System.Security.Permissions.ReflectionPermissionFlag"/>
             values
   combined using a bitwise OR.
         </para>
		</value>
		<exception cref="System.ArgumentException">
         An attempt is made to set this property to an invalid value. See 
         <see cref="System.Security.Permissions.ReflectionPermissionFlag"/>
          for the valid values.
      </exception>
	</doc>
	<doc for="PermissionSetAttribute.Name">
		<summary>
			<para> Gets or sets the name of the permission set.</para>
		</summary>
		<value>
			<para>
             The name of an immutable 
            <see cref="System.Security.NamedPermissionSet"/>
            
(one of several permission sets that are contained
in the default policy and cannot be altered).
         </para>
		</value>
		<remarks>
			<para> Because named permission sets can vary from computer to
      computer, the use of named permission sets for declarative
      security is
      restricted to the immutable named permission sets included as part of
      the default policy. This ensures that the permissions contained in the permission set referenced
      will be the same wherever the code is run. A compiler error will be
      thrown if a mutable or unrecognized named permission set
      is used.</para>
		</remarks>
	</doc>
	<doc for="PrincipalPermissionAttribute.PrincipalPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.PrincipalPermissionAttribute"/>
             class
   with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
		<remarks>
			<para>
				<see langword="Demand"/>
            ,

            <see langword="InheritanceDemand"/>
            , and 
            <see langword="LinkDemand"/>
             are the only values of 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that 
   have meaning for this attribute. Other
   actions do not apply to permissions that are not code access
   permissions.
         </para>
		</remarks>
	</doc>
	<doc for="EnvironmentPermissionAttribute">
		<summary>
			<para>
             Allows security actions for
   
            <see cref="System.Security.Permissions.EnvironmentPermission"/>
             to be
      applied to code using declarative security. This
      class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
             The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
			<para>
            Environment variable names are case-insensitive. Multiple environment
      variable names are specified by separating the names using 
            <see cref="System.IO.Path.PathSeparator"/>
            .
         </para>
		</remarks>
		<example>
			<para>
             The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.EnvironmentPermission"/>
             for the
      ability to read the specified environment variables and
      states that you must have at least this permission to run your code.
         </para>
			<codelink SampleID="Classic EnvironmentPermissionAttribute Example" SnippetID="1"/>
			<para>
             The following example shows how to demand that the 
calling code has 
            <see cref="System.Security.Permissions.EnvironmentPermission"/>
             at link time. 
Demands are typically made in managed libraries (DLLs) to protect methods or 
classes from potentially harmful code.
 
         </para>
			<codelink SampleID="Classic EnvironmentPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.EnvironmentPermission"/>
		<seealso cref="System.Security.Permissions.EnvironmentPermissionAccess"/>
	</doc>
	<doc for="FileDialogPermissionAttribute">
		<summary>
			<para>
             Allows security actions for
   
            <see cref="System.Security.Permissions.FileDialogPermission"/>
             to be
      applied to code using declarative security. This
      class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on the
   
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is
      used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
             The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.FileDialogPermission"/>
             and
      states that you must have at least this permission to run your code.
         </para>
			<codelink SampleID="Classic FileDialogPermissionAttribute Example" SnippetID="1"/>
			<para>
             The following example shows how to
 demand that the calling code has 
            <see cref="System.Security.Permissions.FileDialogPermission"/>
             at link time.
 Demands are typically made in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
         </para>
			<codelink SampleID="Classic FileDialogPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.FileDialogPermission"/>
		<seealso cref="System.Security.Permissions.FileDialogPermissionAccess"/>
	</doc>
	<doc for="PrincipalPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.PrincipalPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
				<see cref="System.Security.Permissions.PrincipalPermissionAttribute"/>
             can be
   used to declaratively demand that users running your code belong to a specified
   role or have been authenticated. Use of 
            <see cref="System.Security.Permissions.PermissionState.Unrestricted"/>
             creates a 
            <see cref="System.Security.Permissions.PrincipalPermission"/>
             with 
            <see cref="System.Security.Permissions.PrincipalPermissionAttribute.Authenticated"/>
             set to 
            <see langword="true"/>
            
   and 
            <see cref="System.Security.Permissions.PrincipalPermissionAttribute.Name"/>
             and 
            <see cref="System.Security.Permissions.PrincipalPermissionAttribute.Role"/>
             set to 
            <see langword="null"/>
            .
         </para>
			<para>
            The scope of the declaration that is allowed depends on
   the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is
   used. 
            <see cref="System.Security.Permissions.PrincipalPermissionAttribute"/>
             cannot be applied at the assembly
   level.
         </para>
			<para>The security information declared by a security
   attribute is stored in the metadata of the attribute target and is accessed by the system
   at run time. Security attributes are used only for declarative
   security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example demonstrates how 
            <see cref="System.Security.Permissions.PrincipalPermission"/>
             can be used declaratively to demand
   that the current user is Bob and belongs to the Supervisor role.
         </para>
			<codelink SampleID="Classic PrincipalPermissionAttribute Example" SnippetID="1"/>
			<para>The following example demonstrates how to demand that
 the current user's identity is Bob, regardless of role membership.</para>
			<codelink SampleID="Classic PrincipalPermissionAttribute Example" SnippetID="2"/>
			<para>The following example demonstrates how to demand only
 that the user is authenticated.</para>
			<codelink SampleID="Classic PrincipalPermissionAttribute Example" SnippetID="3"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso topic="cpconprincipal"/>
		<seealso cref="System.Security.Permissions.PrincipalPermission"/>
	</doc>
	<doc for="ReflectionPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.ReflectionPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.ReflectionPermission"/>
             for
   
            <see cref="System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit"/>
            
   and states that you must have at least this permission to run your code.
         </para>
			<codelink SampleID="Classic ReflectionPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has unrestricted 
            <see cref="System.Security.Permissions.ReflectionPermission"/>
             at link time.
 Demands are typically made in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
         </para>
			<codelink SampleID="Classic ReflectionPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.ReflectionPermission"/>
		<seealso cref="System.Security.Permissions.ReflectionPermissionFlag"/>
	</doc>
	<doc for="RegistryPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.RegistryPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.RegistryPermission"/>
             for
      access to the given registry value and
      states that you must have at least this permission to run your code.
         </para>
			<codelink SampleID="Classic RegistryPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has unrestricted 
            <see cref="System.Security.Permissions.RegistryPermission"/>
             at link time.
 Demands are typically made in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
         </para>
			<codelink SampleID="Classic RegistryPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.RegistryPermission"/>
		<seealso cref="System.Security.Permissions.RegistryPermissionAccess"/>
	</doc>
	<doc for="SecurityPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.SecurityPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.SecurityPermission"/>
             for the
      ability to assert and
      states that you must have at least this permission to run your code.
         </para>
			<codelink SampleID="Classic SecurityPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has 
            <see cref="System.Security.Permissions.SecurityPermission"/>
             at link time.
 Demands are typically made in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
         </para>
			<codelink SampleID="Classic SecurityPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.SecurityPermission"/>
		<seealso cref="System.Security.Permissions.SecurityPermissionFlag"/>
	</doc>
	<doc for="UIPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.UIPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.UIPermission"/>
            for the ability to use the
      clipboard within your own application domain and
      states that you must have at least this permission to run your code.
         </para>
			<codelink SampleID="Classic UIPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has 
            <see cref="System.Security.Permissions.UIPermission"/>
             at link time.
 Demands are typically made in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
         </para>
			<codelink SampleID="Classic UIPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.UIPermission"/>
		<seealso cref="System.Security.Permissions.UIPermissionWindow"/>
		<seealso cref="System.Security.Permissions.UIPermissionClipboard"/>
	</doc>
	<doc for="ZoneIdentityPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.ZoneIdentityPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.ZoneIdentityPermission"/>
             and
      states that you must have at least this permission to
      run your code. Code will run only if executed from the local computer.
         </para>
			<codelink SampleID="Classic ZoneIdentityPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has 
            <see cref="System.Security.Permissions.ZoneIdentityPermission"/>
             at link time. Code
 will run only if executed from the local computer.
         </para>
			<codelink SampleID="Classic ZoneIdentityPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.ZoneIdentityPermission"/>
		<seealso cref="System.Security.Policy.Zone"/>
		<seealso cref="System.Security.Policy.ZoneMembershipCondition"/>
	</doc>
	<doc for="StrongNameIdentityPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
             to be applied to code using
   declarative security. This class cannot be
   inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>
            The key strings for this attribute can be attained by running secutil.exe.
      For more information, see 
            <see topic="cpgrfsecutiltoolsecutilexe"/>
            .
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
             and
      states that you must have at least this permission to run your code. Code will
      only execute if signed with a strong name using the private key counterpart of
      the specified public key. Since 
            <see cref="System.Security.Permissions.StrongNameIdentityPermissionAttribute.Name"/>
             and 
            <see cref="System.Security.Permissions.StrongNameIdentityPermissionAttribute.Version"/>
            
      are not specified, this attribute will match any name and version.
         </para>
			<codelink SampleID="Classic StrongNameIdentityPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has 
            <see cref="System.Security.Permissions.StrongNameIdentityPermission"/>
             at link time. Code
 will only execute if signed with a strong name using the private key counterpart
 of the specified public key
         </para>
			<codelink SampleID="Classic StrongNameIdentityPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.StrongNameIdentityPermission"/>
		<seealso cref="System.Security.Permissions.StrongNamePublicKeyBlob"/>
		<seealso cref="System.Security.Policy.StrongName"/>
		<seealso cref="System.Security.Policy.StrongNameMembershipCondition"/>
	</doc>
	<doc for="SiteIdentityPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.SiteIdentityPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para> Site identity is only defined for code from URLs
      with the protocols of HTTP, HTTPS, and FTP. A site is the string between the
      "//" after the protocol of a URL and the following "/", if present, for
      example, www.fourthcoffee.com in the URL
      http://www.fourthcoffee.com/process/grind.htm. This excludes port numbers. If a given URL is
      http://www.fourthcoffee.com:8000/, the site is www.fourthcoffee.com,
      not
      
      www.fourthcoffee.com:8000.</para>
			<para>Sites can be matched exactly, or by a wildcard ("*")
      prefix at the dot delimiter. For example, the site name string *.fourthcoffee.com matches fourthcoffee.com as well as www.fourthcoffee.com. Without a wildcard, the site
      name must be a precise match. The site name
      string * will match any site, but will not match
      code that has no site evidence. </para>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.SiteIdentityPermission"/>
             and
      states
      that you must have at least this permission to run your code. Code will only
      execute if it is run from the Web site example.microsoft.com.
         </para>
			<codelink SampleID="Classic SiteIdentityPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has 
            <see cref="System.Security.Permissions.SiteIdentityPermission"/>
             at link time. Code will
 only execute if it is run from the Web site example.microsoft.com.
         </para>
			<codelink SampleID="Classic SiteIdentityPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.SiteIdentityPermission"/>
		<seealso cref="System.Security.Policy.Site"/>
		<seealso cref="System.Security.Policy.SiteMembershipCondition"/>
	</doc>
	<doc for="UrlIdentityPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.UrlIdentityPermission"/>
             to be applied to code using
   declarative security. This
   class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>The complete URL is considered, including the protocol
      (HTTP, HTTPS, FTP) and the file. For example, http://www.fourthcoffee.com/process/grind.htm
      is a complete URL.</para>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.UrlIdentityPermission"/>
             and states
      that you must have the specified URL identity
      to run your code. Code will execute only if run from the specified URL.
         </para>
			<codelink SampleID="Classic UrlIdentityPermissionAttribute Example" SnippetID="1"/>
			<para>The following example shows how to demand that the calling code has the specified URL identity at link time. Code
 will execute only if run from the specified URL.</para>
			<codelink SampleID="Classic UrlIdentityPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.UrlIdentityPermission"/>
		<seealso cref="System.Security.Policy.Url"/>
		<seealso cref="System.Security.Policy.UrlMembershipCondition"/>
	</doc>
	<doc for="PublisherIdentityPermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.PublisherIdentityPermission"/>
             to be applied to code using
   declarative security. This class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>
            The properties 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile"/>
            , 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile"/>
            , and 
            <see cref="System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate"/>
             are mutually
   exclusive.
         </para>
			<para>The security information declared by a security
   attribute is stored in the metadata of the attribute target and is accessed by the system
   at run time. Security attributes are used only for declarative
   security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.PublisherIdentityPermission"/>
             and states
      that you must have at least this permission to run your code. Code will only
      execute if signed with the Authenticode X.509v3 publisher certificate stored in the file "myX509.cert".
         </para>
			<codelink SampleID="Classic PublisherIdentityPermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has 
            <see cref="System.Security.Permissions.PublisherIdentityPermission"/>
             at link time. Code
 will only execute if signed with the X.509 publisher certificate stored in the
 file "myX509.cert".
         </para>
			<codelink SampleID="Classic PublisherIdentityPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.PublisherIdentityPermission"/>
		<seealso cref="System.Security.Policy.Publisher"/>
		<seealso cref="System.Security.Policy.PublisherMembershipCondition"/>
	</doc>
	<doc for="IsolatedStoragePermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.IsolatedStoragePermission"/>
             to
   be applied to code using declarative security.
         </para>
		</summary>
		<remarks>
			<para> This class is an abstract base class. This class
      is never used instantiated; instead, classes that extend it and represent access to a
      particular type of isolated storage are used.</para>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageContainment"/>
	</doc>
	<doc for="IsolatedStorageFilePermissionAttribute">
		<summary>
			<para>
             Allows security actions for 
            <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
             to be applied to code using
   declarative security. This class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The scope of the declaration that is allowed depends on
      the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used.
         </para>
			<para>The security information declared by a security
      attribute is stored in the metadata of the attribute target and is accessed by the system
      at run time. Security attributes are used only for declarative
      security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<example>
			<para>
            The following example of a declarative attribute shows the
      correct way to request 
            <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
            , states
      that you must have at least this permission
      to run your code, and requests a maximum user quota of 5 MB.
         </para>
			<codelink SampleID="Classic IsolatedStorageFilePermissionAttribute Example" SnippetID="1"/>
			<para>
            The following example shows how to demand that the calling code has unrestricted 
            <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
             at link time.
 Demands are typically made in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
         </para>
			<codelink SampleID="Classic IsolatedStorageFilePermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageContainment"/>
	</doc>
	<doc for="PermissionSetAttribute">
		<summary>
			<para>
            Allows security actions for a 
            <see cref="System.Security.PermissionSet"/>
            
to be applied to code
using
declarative security. This class cannot be inherited.
         </para>
		</summary>
		<remarks>
			<para>
            The 
            <see cref="System.Security.Permissions.PermissionSetAttribute"/>
             properties 
            <see cref="System.Security.Permissions.PermissionSetAttribute.Name"/>
            , 
            <see cref="System.Security.Permissions.PermissionSetAttribute.File"/>
            , and 
            <see cref="System.Security.Permissions.PermissionSetAttribute.XML"/>
             are mutually
   exclusive, meaning that a permission set can have as its source only one
   of the following: a named permission set, a
   file containing an XML representation of a permission set, or a string
   containing an XML representation of a permission set.
         </para>
			<para>
            The scope of the declaration that is allowed depends on
   the 
            <see cref="System.Security.Permissions.SecurityAction"/>
             that is used. A

            <see cref="System.Security.Permissions.SecurityAction"/>
             performed on a 
            <see cref="System.Security.PermissionSet"/>
             
is the equivalent of performing that action on each of the permissions within
the set.
         </para>
			<para>The security information declared by a security
   attribute is stored in the metadata of the attribute target and is accessed by the system
   at run time. Security attributes are used only for declarative
   security. For imperative security, use the corresponding permission class.</para>
		</remarks>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.PermissionSet"/>
		<seealso cref="System.Security.NamedPermissionSet"/>
	</doc>
	<doc for="SecurityAction">
		<summary>
			<para>Specifies the security actions that can be performed using declarative security.</para>
		</summary>
		<remarks>
			<para> The following table describes the time that each of
      the security actions takes place and the targets that each supports. </para>
			<list type="table">
				<listheader>
					<term>
						<para>Declaration of security action </para>
					</term>
					<description>Time of action </description>
					<description>Targets supported</description>
				</listheader>
				<item>
					<term>
						<see langword="LinkDemand"/>
					</term>
					<description>Just-in-time compilation</description>
					<description>Class, Method</description>
				</item>
				<item>
					<term>
						<see langword="InheritanceDemand"/>
					</term>
					<description>Load time</description>
					<description>Class, Method</description>
				</item>
				<item>
					<term>
						<see langword="Demand"/>
					</term>
					<description>Run time</description>
					<description>Class, Method</description>
				</item>
				<item>
					<term>
						<see langword="Assert"/>
					</term>
					<description>Run time</description>
					<description>Class, Method</description>
				</item>
				<item>
					<term>
						<see langword="Deny"/>
					</term>
					<description>Run time</description>
					<description>Class, Method</description>
				</item>
				<item>
					<term>
						<see langword="PermitOnly"/>
					</term>
					<description>Run time</description>
					<description>Class, Method</description>
				</item>
				<item>
					<term>
						<see langword="RequestMinimum"/>
					</term>
					<description>Grant time</description>
					<description>Assembly</description>
				</item>
				<item>
					<term>
						<see langword="RequestOptional"/>
					</term>
					<description>Grant time</description>
					<description>Assembly</description>
				</item>
				<item>
					<term>
						<see langword="RequestRefuse"/>
					</term>
					<description>Grant time</description>
					<description>Assembly</description>
				</item>
			</list>
			<para>
            For additional information about attribute targets, see 
            <see cref="System.Attribute"/>
            .
         </para>
		</remarks>
	</doc>
	<doc for="FileIOPermissionAttribute.CreatePermission">
		<summary>
			<para>
            Creates and returns a new 
            <see cref="System.Security.Permissions.FileIOPermission"/>
            .
         </para>
		</summary>
		<returns>
			<para>
            A 
            <see cref="System.Security.Permissions.FileIOPermission"/>
             that corresponds to
   this attribute.
         </para>
		</returns>
		<exception cref="System.ArgumentException">The path information for a file or directory for which access is to be secured contains invalid characters or wild card specifiers.</exception>
		<remarks>
			<para>This method should only be called by the security system,
      never by application code.</para>
			<para> At compile time, attributes convert security declarations to a serialized
      form in metadata. Declarative security data in metadata is created from
      the permission that this method returns that corresponds to this
      attribute.</para>
		</remarks>
	</doc>
	<doc for="ReflectionPermissionAttribute.ReflectionPermissionAttribute">
		<summary>
			<para>
            Initializes a new instance of the 
            <see cref="System.Security.Permissions.ReflectionPermissionAttribute"/>
             class
   with the specified 
            <see cref="System.Security.Permissions.SecurityAction"/>
            .
         </para>
		</summary>
		<param name="action">
         One of the 
         <see cref="System.Security.Permissions.SecurityAction"/>
         values.
      </param>
		<exception cref="System.ArgumentException">
         The 
         <paramref name="action"/>
          parameter is not a valid 
         <see cref="System.Security.Permissions.SecurityAction"/>
          value.
      </exception>
	</doc>
	<doc for="FileIOPermissionAttribute">
		<summary>
			<para> Allows security actions for
   <see cref="System.Security.Permissions.FileIOPermission"/>
   to be applied to code using
   declarative security. This
   class cannot be inherited.
   </para>
		</summary>
		<remarks>
			<para>Files and directories are specified using absolute
      paths. When accessing files, a security check is performed when the file is
      created or opened. The security check is not done again unless the file is
      closed and reopened. Checking permissions when the file is first accessed
      minimizes the impact of the security check on application performance because
      opening a file happens only once, while reading and writing can happen multiple
      times.</para>
			<para> The scope of the declaration that is allowed depends on
      the
   <see cref="System.Security.Permissions.SecurityAction"/>
   that is used.
   </para>
			<para>The security information declared by a security
   attribute is stored in the metadata of the attribute target and is accessed by the system
   at run time. Security attributes are used only for declarative
   security. For imperative security, use the corresponding permission class.</para>
			<note type="caution">
				<see langword="Unrestricted"/>
				<see cref="System.Security.Permissions.FileIOPermission"/>
grants
permission for all paths within a file system,
including multiple pathnames that can be used to access a single given file.
To
<see cref="System.Security.CodeAccessPermission.Deny"/>
access to a file, you must
<see langword="Deny"/>
all possible paths to the file. For example, if \\server\share is
mapped to the network drive X, to
<see langword="Deny"/> access to \\server\share\file
,
you must
<see langword="Deny"/>
\\server\share\file, X:\file and any
other path that you
can use to access the file.
</note>
		</remarks>
		<example>
			<para> The following example of a declarative attribute shows the
      correct way to request
   <see cref="System.Security.Permissions.FileIOPermission"/>
   for full access to the
   specified file and
   states that you must have at least this permission to run your code.
   </para>
			<codelink SampleID="Classic FileIOPermissionAttribute Example" SnippetID="1"/>
			<para> The following example shows how to demand
 that the calling code has unrestricted 
<see cref="System.Security.Permissions.FileIOPermission"/>
 at link time. You typically make demands in managed libraries (DLLs) to protect methods or classes from potentially harmful code.
 </para>
			<codelink SampleID="Classic FileIOPermissionAttribute Example" SnippetID="2"/>
		</example>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.Permissions.FileIOPermission"/>
		<seealso cref="System.Security.Permissions.FileIOPermissionAccess"/>
	</doc>
	<doc for="SecurityAction.LinkDemand">
		<summary>
			<para> The immediate caller is required to have
      been granted the specified permission.</para>
			<para>For more information on declarative security and link demands, see <see topic="cpconDeclarativeSecurityUsedWithClassMemberScope"/>.</para>
		</summary>
	</doc>
	<doc for="CodeAccessSecurityAttribute">
		<summary>
			<para> Specifies the base attribute class for code access
      security.</para>
		</summary>
		<remarks>
			<para> This attribute class associates a
   <see cref="System.Security.Permissions.SecurityAction"/>
   , for example,
<see langword="Demand"/>
,
with a custom security attribute.</para>
			<para> The types that derive from
<see cref="System.Security.Permissions.CodeAccessSecurityAttribute"/>
are used to secure access to
resources or securable operations.</para>
			<para> The security information declared by a security attribute is stored in the
   metadata of the attribute target and is accessed by the system at run time.
   Security attributes are used only for declarative security. Use the
   corresponding permission class derived from
<see cref="System.Security.CodeAccessPermission"/>
for imperative security.</para>
			<note type="inheritinfo">
   All permission attributes derived from this class must have
   only a single constructor that takes a <see cref="System.Security.Permissions.SecurityAction"/>
   
   as its only parameter.
</note>
		</remarks>
		<seealso topic="cpconextendingmetadatausingattributes"/>
		<seealso cref="System.Security.CodeAccessPermission"/>
	</doc>
	<doc for="CodeAccessSecurityAttribute.CodeAccessSecurityAttribute">
		<summary>
			<para> Initializes a new instance of
   <see cref="System.Security.Permissions.CodeAccessSecurityAttribute"/>
   with the specified
<see cref="System.Security.Permissions.SecurityAction"/>
.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/>values.</param>
		<exception cref="System.ArgumentException">The <paramref name="action"/>parameter is not a valid<see cref="System.Security.Permissions.SecurityAction"/>.</exception>
		<remarks>
			<para>You cannot create an instance of this class. You must inherit from this
      class to make use of its functionality.</para>
			<note type="inheritinfo">
      Derived classes must have only one constructor that takes
      a <see cref="System.Security.Permissions.SecurityAction"/>
      
      as its only
      parameter.
      
   </note>
		</remarks>
	</doc>
	<doc for="EnvironmentPermissionAttribute.EnvironmentPermissionAttribute">
		<summary>
			<para> Initializes a new instance of the
   <see cref="System.Security.Permissions.EnvironmentPermissionAttribute"/>
   class
   with the specified
<see cref="System.Security.Permissions.SecurityAction"/>
.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/>values.</param>
		<exception cref="System.ArgumentException">The <paramref name="action"/>parameter is not a valid value of<see cref="System.Security.Permissions.SecurityAction"/>.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermissionAttribute" SnippetID="1"/>
		</example>
	</doc>
	<doc for="EnvironmentPermissionAttribute.Read">
		<summary>
			<para> Gets or sets read access for the environment variables specified by the string
      value.</para>
		</summary>
		<value>
			<para> A list of environment variables for read access.</para>
		</value>
		<remarks>
			<para> Environment variable names are case-insensitive. Multiple environment
      variable names are specified by separating the names using
   <see cref="System.IO.Path.PathSeparator"/>
   .
   </para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermissionAttribute" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EnvironmentPermissionAttribute.Write">
		<summary>
			<para> Gets or sets write access
      for the environment variables specified by the string value.</para>
		</summary>
		<value>
			<para> A list of environment variables for write access.</para>
		</value>
		<remarks>
			<para> Environment variable names are case-insensitive. Multiple environment
      variable names are specified by separating the names using
   <see cref="System.IO.Path.PathSeparator"/>
   .
   </para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermissionAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="EnvironmentPermissionAttribute.All">
		<summary>
			<para>Sets full access for the environment variables specified by the
      string value.</para>
		</summary>
		<value>
			<para> A list of environment variables for full access.</para>
		</value>
		<remarks>
			<para> Environment variable names are case-insensitive. Multiple environment
      variable names are specified by separating the names using
   <see cref="System.IO.Path.PathSeparator"/>
   .
   </para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermissionAttribute" SnippetID="3"/>
		</example>
	</doc>
	<doc for="FileDialogPermissionAttribute.FileDialogPermissionAttribute">
		<summary>
			<para> Initializes a new instance of the
   <see cref="System.Security.Permissions.FileDialogPermissionAttribute"/>
   class
   with the specified
<see cref="System.Security.Permissions.SecurityAction"/>
.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/>values.</param>
		<example>
			<codelink SampleID="System.Security.Permissions.FileDialogPermissionAttribute" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FileDialogPermissionAttribute.Open">
		<summary>
			<para>Gets or sets a value indicating whether permission to open files through the file dialog is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to open files through the file dialog is
declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.FileDialogPermissionAttribute" SnippetID="2"/>
		</example>
	</doc>
	<doc for="FileDialogPermissionAttribute.Save">
		<summary>
			<para>Gets or sets a value indicating whether permission to save files through the file dialog is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to save files through the file dialog is
declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.FileDialogPermissionAttribute" SnippetID="3"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.SecurityPermissionAttribute">
		<summary>
			<para> Initializes a new instance of the
   <see cref="System.Security.Permissions.SecurityPermissionAttribute"/>
   class
   with the specified
<see cref="System.Security.Permissions.SecurityAction"/>
.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/>values.</param>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.Flags">
		<summary>
			<para> Gets or sets all permission flags comprising
      the
   <see cref="System.Security.Permissions.SecurityPermission"/>
   
   permissions.
   </para>
		</summary>
		<value>
			<para> One or more of the
   <see cref="System.Security.Permissions.SecurityPermissionFlag"/>
   values
   combined using a bitwise OR.
   </para>
		</value>
		<exception cref="System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.SecurityPermissionFlag"/>for the valid values.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="11"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.Assertion">
		<summary>
			<para> Gets or sets a value indicating whether permission to
      assert
   <see langword=" "/>
   that all this code's callers have the requisite permission for
   the operation is declared.
   </para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to assert is
declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="2"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.UnmanagedCode">
		<summary>
			<para> Gets or sets a value indicating whether permission to call
      unmanaged code is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to
call unmanaged code is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="17"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.Execution">
		<summary>
			<para> Gets or sets a value indicating whether permission
      to execute code is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to execute
code is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="9"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.SkipVerification">
		<summary>
			<para> Gets or sets a value indicating whether
      permission to bypass code verification is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to bypass
code verification is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<remarks>
			<note type="caution">
      This is a powerful permission that
      should be granted only to highly trusted code.
      
   </note>
			<para>For information on the use of <see cref="System.Security.Permissions.SecurityPermissionAttribute.SkipVerification"/>,
   see <see topic="cpcontypesafetysecurity"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="16"/>
		</example>
		<seealso topic="cpcontypesafetysecurity"/>
	</doc>
	<doc for="SecurityPermissionAttribute.ControlThread">
		<summary>
			<para> Gets or sets a value indicating whether permission
      to manipulate threads is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to manipulate threads
is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<remarks>
			<para> For more information, see
   <see cref="System.Threading.Thread"/>
   .
   </para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="8"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.ControlEvidence">
		<summary>
			<para> Gets or sets a value indicating whether permission
      to alter or manipulate evidence is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if the ability to alter
or manipulate evidence is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="5"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.ControlPolicy">
		<summary>
			<para> Gets or sets a value indicating whether permission to view and
      manipulate security policy is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to manipulate security policy
is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="6"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.ControlDomainPolicy">
		<summary>
			<para> Gets or sets a value indicating whether permission to alter or
      manipulate domain security policy is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to
alter or manipulate security policy in
an application domain is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.ControlPrincipal">
		<summary>
			<para> Gets or sets a value indicating whether permission to
      manipulate the current principal is declared.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission to manipulate the
current principal is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<remarks>
			<para> For more information, see
   <see topic="cpconprincipal"/>
   .
   </para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="7"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.ControlAppDomain">
		<summary>
			<para> Gets or sets a value indicating whether permission to
      manipulate
   <see cref="System.AppDomain"/>
   
   is declared.
   </para>
		</summary>
		<value>
			<para><see langword="true"/>
if permission
to manipulate
<see cref="System.AppDomain"/>
is declared; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="3"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.SerializationFormatter">
		<summary>
			<para>Gets or sets a value indicating whether code can use a
      serialization formatter to serialize or deserialize an object.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if code can
use a serialization formatter to serialize or deserialize an object; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="15"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.RemotingConfiguration">
		<summary>
			<para>Gets or sets a value indicating whether code can
      configure remoting types and channels.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if code can configure remoting types and channels;
otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="13"/>
		</example>
	</doc>
	<doc for="SecurityPermissionAttribute.Infrastructure">
		<summary>
			<para>Gets or sets a value indicating whether code can plug into the common
      language runtime infrastructure, such as adding Remoting Context Sinks, Envoy
      Sinks and Dynamic Sinks.</para>
		</summary>
		<value>
			<para><see langword="true"/>
if code can plug into the common language runtime
infrastructure; otherwise,
<see langword="false"/>
.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionAttribute" SnippetID="12"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAttribute.FileIOPermissionAttribute">
		<summary>
			<para> Initializes a new instance of the
   <see cref="System.Security.Permissions.FileIOPermissionAttribute"/>
   class
   with the specified
<see cref="System.Security.Permissions.SecurityAction"/>
.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/>values.</param>
		<exception cref="System.ArgumentException">The <paramref name="action"/>parameter is not a valid<see cref="System.Security.Permissions.SecurityAction"/>.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermissionAttribute" SnippetID="1"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAttribute.Read">
		<summary>
			<para> Gets or sets read access for the file or directory specified by the string
      value.</para>
		</summary>
		<value>
			<para> The absolute path of the file or directory for read access.</para>
		</value>
		<remarks>
			<para>This property sets access for a single file or directory. Use additional attributes to specify additional files
      and directories.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermissionAttribute" SnippetID="2"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAttribute.Write">
		<summary>
			<para> Gets or sets write access for
      the file or directory specified by the string value.</para>
		</summary>
		<value>
			<para> The absolute path of the file or directory for write access.</para>
		</value>
		<remarks>
			<para>This property sets access for a single file or directory. Use additional attributes to specify additional files
      and directories.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermissionAttribute" SnippetID="5"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAttribute.Append">
		<summary>
			<para> Gets or sets append access for the file or directory specified by the string value.</para>
		</summary>
		<value>
			<para> The absolute path of the file or directory for append access.</para>
		</value>
		<remarks>
			<para>This property sets access for a single file or directory. Use additional attributes to specify additional files
      and directories.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermissionAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAttribute.PathDiscovery">
		<summary>
			<para> Gets or sets the file or directory to which to
      grant path discovery.</para>
		</summary>
		<value>
			<para> The absolute path of
      the file or directory.</para>
		</value>
		<remarks>
			<para>Path discovery controls access to the information in the
      path itself. This protects sensitive information in the path, such as user
      names, as well as information about the directory structure revealed in the
      path. This value does not grant access to files or folders represented by the
      path.</para>
			<note type="note">
      
      For performance
      reasons,
   <see langword="PathDiscovery"/>
   should only be granted to directories,
   not to files. For example,
<see langword="PathDiscovery"/>
permission should be granted to paths
such as C:\test and C:\test\, not C:\test\example.txt.
</note>
			<para>This property sets access for a single file or directory. Use additional attributes to specify additional files
   and directories.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermissionAttribute" SnippetID="3"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAttribute.All">
		<summary>
			<para> Sets full access for the file or directory specified by the string
      value.</para>
		</summary>
		<value>
			<para> The absolute path of the file or directory for full access.</para>
		</value>
		<remarks>
			<para>This property sets access for a single file or directory. Use additional attributes to specify additional files
      and directories.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermissionAttribute" SnippetID="6"/>
		</example>
	</doc>
	<doc for="RegistryPermissionAttribute.RegistryPermissionAttribute">
		<summary>
			<para> Initializes a new instance of the
   <see cref="System.Security.Permissions.RegistryPermissionAttribute"/>
   class
   with the specified
<see cref="System.Security.Permissions.SecurityAction"/>
.</para>
		</summary>
		<param name="action">One of the <see cref="System.Security.Permissions.SecurityAction"/>values.</param>
		<exception cref="System.ArgumentException">The <paramref name="action"/>parameter is not a valid<see cref="System.Security.Permissions.SecurityAction"/>.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermissionAttribute" SnippetID="1"/>
		</example>
	</doc>
	<doc for="RegistryPermissionAttribute.Read">
		<summary>
			<para> Gets or sets read access for the specified keys and
      values.</para>
		</summary>
		<value>
			<para> A list of keys and values with paths for read access.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermissionAttribute" SnippetID="4"/>
		</example>
	</doc>
	<doc for="RegistryPermissionAttribute.Write">
		<summary>
			<para> Gets or
      sets write access for the specified keys and values.</para>
		</summary>
		<value>
			<para> A list of keys and values with paths for write access.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermissionAttribute" SnippetID="5"/>
		</example>
	</doc>
	<doc for="RegistryPermissionAttribute.Create">
		<summary>
			<para> Gets or sets create access for the specified keys
      and values.</para>
		</summary>
		<value>
			<para> A list of keys and values with paths for create access.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermissionAttribute" SnippetID="6"/>
		</example>
	</doc>
	<doc for="RegistryPermissionAttribute.All">
		<summary>
			<para> Sets full access for the keys and values
      specified.</para>
		</summary>
		<value>
			<para> A list of keys and values with paths for full access.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermissionAttribute" SnippetID="7"/>
		</example>
	</doc>
</docs>
