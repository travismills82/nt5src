<docs>
	<doc for="RegistryPermissionAccess.Read">
		<summary>
			<para> Read access to registry variables.</para>
		</summary>
	</doc>
	<doc for="RegistryPermissionAccess.Write">
		<summary>
			<para> Write access to registry variables.</para>
		</summary>
	</doc>
	<doc for="RegistryPermissionAccess.Create">
		<summary>
			<para> Create access to registry variables.</para>
		</summary>
	</doc>
	<doc for="RegistryPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="RegistryPermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating
      whether the current permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if
   the current permission
   is unrestricted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents access to any and
      all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="RegistryPermissionAccess.NoAccess">
		<summary>
			<para> No access to registry variables. 
   <see cref="System.Security.Permissions.RegistryPermissionAccess.NoAccess"/> 
   represents no valid <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values and causes
   an <see cref="System.ArgumentException"/> when used as the parameter for <see cref="System.Security.Permissions.RegistryPermission.GetPathList"/>, which expects a single value.</para>
		</summary>
	</doc>
	<doc for="RegistryPermissionAccess.AllAccess">
		<summary>
			<para><see cref="System.Security.Permissions.RegistryPermissionAccess.Create"/>, <see cref="System.Security.Permissions.RegistryPermissionAccess.Read"/>, and <see cref="System.Security.Permissions.RegistryPermissionAccess.Write"/> access to registry variables. 
<see cref="System.Security.Permissions.RegistryPermissionAccess.AllAccess"/> 
represents multiple <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values and causes
an <see cref="System.ArgumentException"/> when used as the <paramref name="access"/> parameter for the <see cref="System.Security.Permissions.RegistryPermission.GetPathList"/> method, which expects a single value.</para>
		</summary>
	</doc>
	<doc for="RegistryPermission.RegistryPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.RegistryPermission"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.RegistryPermission"/> class with either fully restricted
   or unrestricted permission as specified.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/>values. </param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>. </exception>
		<remarks>
			<para>Creates either fully restricted (<see langword="None"/>)
   or <see langword="Unrestricted"/> access to
   registry variables.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="RegistryPermission.RegistryPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.RegistryPermission"/> class
   with the specified access to the specified registry variables.</para>
		</summary>
		<param name="access">One of the <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values.</param>
		<param name="pathList">A list of registry variables (semicolon-separated) to which access is granted.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="pathList"/> parameter is not a valid string. </para></exception>
		<remarks>
			<para>This constructor allows only one of the <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values
   to be specified. This access applies to all listed registry variables. Use
<see cref="System.Security.Permissions.RegistryPermission.AddPathList"/>
to define more complicated permissions.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="8"/>
		</example>
	</doc>
	<doc for="RegistryPermission.SetPathList">
		<summary>
			<para>Sets new access for the specified registry variable names to the existing
      state of the permission.</para>
		</summary>
		<param name="access">One of the <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values. </param>
		<param name="pathList">A list of registry variables (semicolon-separated).</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="pathList"/> parameter is not a valid string. </para></exception>
		<remarks>
			<para> The previous state of the current
      permission is overwritten.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="9"/>
		</example>
	</doc>
	<doc for="RegistryPermission.AddPathList">
		<summary>
			<para>Adds access for the specified registry variables
      to the existing state of the permission.</para>
		</summary>
		<param name="access">One of the <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values.</param>
		<param name="pathList">A list of registry variables (semicolon-separated).</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="pathList"/> parameter is not a valid string. </para></exception>
		<remarks>
			<para> Use this method to modify access to registry
      variables by adding to the state of the current permission object.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="9"/>
		</example>
	</doc>
	<doc for="RegistryPermission.GetPathList">
		<summary>
			<para> Gets paths for all registry variables with the
      specified <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
		</summary>
		<param name="access">One of the <see cref="System.Security.Permissions.RegistryPermissionAccess"/> values that represents a single type of registry variable access.</param>
		<returns>
			<para>A list of the registry variables (semicolon-separated)
      with the specified <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>
				<paramref name="access"/> is not a valid value of <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
			<para>-or-</para>
			<para><paramref name="access"/> is <see cref="System.Security.Permissions.RegistryPermissionAccess.AllAccess"/>, which represents more than one type of registry variable access, or <see cref="System.Security.Permissions.RegistryPermissionAccess.NoAccess"/>, which does not represent any type of registry variable access. </para></exception>
		<remarks>
			<para> Use this method to get the state of the current permission. You must call this
      method separately for each type of access.</para>
			<note type="note">
      The <paramref name="access"/> parameter is
      limited to the values of <see cref="System.Security.Permissions.RegistryPermissionAccess"/>, which
      represent single types of registry variable access. Those values are
   <see cref="System.Security.Permissions.RegistryPermissionAccess.Read"/>,
   <see cref="System.Security.Permissions.RegistryPermissionAccess.Write"/>, and
   <see cref="System.Security.Permissions.RegistryPermissionAccess.Create"/>. The
      values acceptable to <paramref name="access"/> do not include
   <see cref="System.Security.Permissions.RegistryPermissionAccess.NoAccess"/> and
   <see cref="System.Security.Permissions.RegistryPermissionAccess.AllAccess"/>, which
      do not represent single types of registry variable access.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="9"/>
		</example>
	</doc>
	<doc for="RegistryPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The current permission is a
      subset of the specified permission if the current permission specifies a set
      of operations that is wholly contained by the specified permission. For
      example, a permission that represents access to C:\example.txt is a subset of a
      permission that represents access to C:\. If this method returns
   <see langword="true"/>
   , the current permission represents no
   more access to the protected resource than does the specified
   permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="RegistryPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that
      is the intersection of the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is
   <see langword="null"/>
   if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The intersection
      of two permissions is a permission that describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="RegistryPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
		</summary>
		<param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the union of the current permission and the specified
      permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="other "/>parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.RegistryPermission.Union"/>
is a permission
that represents all the operations represented by both the current permission
and the specified permission. Any demand that passes either permission passes
their union.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="RegistryPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources
      as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="RegistryPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="RegistryPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd">The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not valid.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="RegistryPermission">
		<summary>
			<para>Controls the ability to access registry variables. This class
      cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.Security.Permissions.RegistryPermission"/>
describes protected operations on registry variables. Registry variables should not be
stored in memory locations where code without <see cref="System.Security.Permissions.RegistryPermission"/> can
access them. If the registry object is passed to an untrusted caller it
can be misused.</para>
			<para> The allowed registry access types are defined by
<see cref="System.Security.Permissions.RegistryPermissionAccess"/>. If
   more than one type of access is desired, they can be combined using the bitwise
   OR operation as shown in the code sample that follows.</para>
			<para> Registry permission is defined in terms of canonical absolute paths; checks
   should always be made with canonical pathnames. Key access implies access to all values
   it contains and all variables under it.</para>
			<para><see langword="Caution[note]"/>
				<see cref="System.Security.Permissions.RegistryPermission"/> grants permission for all paths
to a key, including both HKEY_CURRENT_USER and HKEY_USERS. To <see cref="System.Security.CodeAccessPermission.Deny"/> access to a key, you must
<see cref="System.Security.CodeAccessPermission.Deny"/> all possible paths to the 
key. For example, to <see cref="System.Security.CodeAccessPermission.Deny"/> access to
HKEY_CURRENT_USER\Software\Microsoft\Cryptography, you must <see cref="System.Security.CodeAccessPermission.Deny"/>
HKEY_CURRENT_USER\Software\Microsoft\Cryptography, HKEY_USERS\.......\Software\Microsoft\Cryptography
and any other path that you can use to access the key. A better technique to deal
with multiple paths is to use a combination of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> and <see cref="System.Security.CodeAccessPermission.Deny"/>. For more
information on this subject and the use of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> with <see cref="System.Security.CodeAccessPermission.Deny"/>, see <see langword="Canonicalization Problems Using Deny"/> in the <see topic="cpcondeny"/> topic. </para>
		</remarks>
		<example>
			<para> After the following code the <see cref="System.Security.Permissions.RegistryPermission"/>
f represents permission to read
the values from the CentralProcessor key. <see langword="Read"/> and
<see langword="Write"/> are values of <see cref="System.Security.Permissions.RegistryPermissionAccess"/>.</para>
			<codelink SampleID="Classic RegistryPermission Example" SnippetID="1"/>
			<para>The following code adds permission to read from and 
write to the FloatingPointProcessor key to the <see cref="System.Security.Permissions.RegistryPermission"/>
 f.</para>
			<codelink SampleID="Classic RegistryPermission Example" SnippetID="2"/>
			<para>The <see cref="System.Security.Permissions.RegistryPermission"/> f now represents the permission to read from the CentralProcessor key 
and to read from and write to the FloatingPointProcessor key.</para>
			<para>The following example demonstrates many <see cref="System.Security.Permissions.RegistryPermission"/> members.</para>
			<codelink SampleID="System.Security.Permissions.RegistryPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.RegistryPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.RegistryPermissionAccess"/>
	</doc>
	<doc for="RegistryPermissionAccess">
		<summary>
			<para> Specifies the permitted access to registry keys and
      values.</para>
		</summary>
		<remarks>
			<para><see cref="System.Security.Permissions.RegistryPermissionAccess"/>
values are independent; rights to one type of access do not
imply rights to another. For instance, <see langword="Write"/> permission does
not imply permission to <see langword="Read"/> or <see langword="Create"/>. </para>
			<note type="note">
   Although <see cref="System.Security.Permissions.RegistryPermissionAccess.NoAccess"/> and
<see cref="System.Security.Permissions.RegistryPermissionAccess.AllAccess"/> appear 
   in <see cref="System.Security.Permissions.RegistryPermissionAccess"/>, they are not valid for use as the
   parameter for <see cref="System.Security.Permissions.RegistryPermission.GetPathList"/> because they
   describe no registry variable access types or all registry variable access
   types, respectively, and <see cref="System.Security.Permissions.RegistryPermission.GetPathList"/> expects a
   single registry variable access type.
</note>
		</remarks>
		<seealso cref="System.Security.Permissions.RegistryPermission"/>
		<seealso cref="System.Security.Permissions.RegistryPermissionAttribute"/>
	</doc>
</docs>
