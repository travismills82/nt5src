<docs>
	<doc for="ReflectionPermissionFlag.AllFlags">
		<summary>
			<para><see langword="TypeInformation"/>, <see langword="MemberAccess"/>, and <see langword="ReflectionEmit"/> 
 are set.</para>
		</summary>
	</doc>
	<doc for="ReflectionPermissionFlag.NoFlags">
		<summary>
			<para>No reflection is allowed on types that are not 
 visible.</para>
		</summary>
	</doc><doc for="ReflectionPermissionFlag.TypeInformation">
		<summary>
			<para>Reflection is allowed on members of a type that are not 
 visible.</para>
		</summary>
	</doc><doc for="ReflectionPermissionFlag.MemberAccess">
		<summary>
			<para>Invocation of operations on all type members is allowed. 
 If this flag is not set, only invocation of operations on visible type members is allowed.</para>
		</summary>
	</doc><doc for="ReflectionPermissionFlag.ReflectionEmit">
		<summary>
			<para> Use of <see cref="System.Reflection.Emit"/> is allowed.</para>
		</summary>
	</doc><doc for="ReflectionPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="ReflectionPermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating whether the current
      permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the current permission is
   unrestricted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents access to any and
      all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="ReflectionPermission">
		<summary>
			<para> Controls access to metadata through the <see cref="System.Reflection"/>
APIs. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para><see cref="System.Type"/> is the root of
   the <see cref="System.Reflection"/>
   functionality. Without <see cref="System.Security.Permissions.ReflectionPermission"/>, code can only access the <see langword="public"/> members of
   loaded assemblies. This includes, but
   is not limited to, unrestricted access to <see cref="System.Object.GetType" qualify="true"/>, access to
<see langword="public"/> exported types through
<see cref="System.Type.GetType" qualify="true"/>, and access to <see cref="System.Type.GetTypeFromHandle"/>.
   Some properties of <see cref="System.Type"/>, such as <see cref="System.Type.FullName"/> and <see cref="System.Type.Attributes"/>, are
   accessible without <see cref="System.Security.Permissions.ReflectionPermission"/>.</para>
			<para>Code with the appropriate <see cref="System.Security.Permissions.ReflectionPermission"/> has access to the
<see langword="public"/>, <see langword="protected"/>, and
even <see langword="private"/> members of any loaded <see cref="System.Type"/>. This includes
access to <see cref="System.Type.Module"/>, <see cref="System.Reflection.Assembly"/>, <see cref="System.Type.BaseType"/>, and <see cref="System.Type.GetInterfaces"/>. </para>
			<note type="caution">
   Because <see cref="System.Security.Permissions.ReflectionPermission"/> can
   provide access to private class members and
   metadata, it is recommended that <see cref="System.Security.Permissions.ReflectionPermission"/>
   not be granted to Internet code.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.ReflectionPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.ReflectionPermissionFlag"/>
	</doc>
	<doc for="ReflectionPermission.ReflectionPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.ReflectionPermission"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.ReflectionPermission"/> class with either fully restricted
   or unrestricted permission as specified.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/> values.</param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para>Creates either fully restricted (<see langword="None"/>) or
   <see langword="Unrestricted"/> access to metadata.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.ReflectionPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.ReflectionPermission"/> class with the specified
   access.</para>
		</summary>
		<param name="flag">One of the <see cref="System.Security.Permissions.ReflectionPermissionFlag"/> values.</param>
		<exception cref="System.ArgumentException">The <paramref name="flag"/> parameter is not a valid value of <see cref="System.Security.Permissions.ReflectionPermissionFlag"/>.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="8"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.Flags">
		<summary>
			<para> Gets or sets the type of reflection allowed for the
      current permission.</para>
		</summary>
		<value>
			<para> The set flags for the current permission. </para>
		</value>
		<exception cref="System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.ReflectionPermissionFlag"/> for the valid values.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.ToString">
		<summary>
			<para>Creates and returns a string containing information on the currently set reflection
      access flags.</para>
		</summary>
		<returns>
			<para> A list of the set flags for the current permission.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the current permission
      and the specified permission.</para>
		</summary>
		<param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the union
      of the current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="other "/>parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.ReflectionPermission.Union"/>
is a
permission that represents all the operations represented by both the
current permission and the specified permission. Any demand that passes either permission passes
their union.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The current permission is a
      subset of the specified permission if the current permission specifies a set
      of operations that is wholly contained by the specified permission. For
      example, a permission that represents access to C:\example.txt is a subset of a
      permission that represents access to C:\. If this method returns
   <see langword="true"/>
   , the current permission represents no
   more access to the protected resource than does the specified
   permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The intersection
      of two permissions is a permission that describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources
      as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="ReflectionPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd">The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not valid.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="ReflectionPermissionFlag">
		<summary>
			<para>Specifies the permitted use of <see cref="System.Reflection"/> on members that are not visible.</para>
		</summary>
		<remarks>
			<para>This enumeration is used by <see cref="System.Security.Permissions.ReflectionPermission"/>. If
   no <see cref="System.Security.Permissions.ReflectionPermission"/> is
   granted, reflection is allowed only on visible members.</para>
			<note type="caution">
   Because <see cref="System.Security.Permissions.ReflectionPermission"/> can provide access to private class
   members and metadata, it is recommended that <see cref="System.Security.Permissions.ReflectionPermission"/> not be
   granted to Internet code.
   
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.ReflectionPermissionFlag" SnippetID="1"/>
		</example>
		<seealso cref="System.Security.Permissions.ReflectionPermission"/>
		<seealso cref="System.Security.Permissions.ReflectionPermissionAttribute"/>
	</doc>
</docs>
