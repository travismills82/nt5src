<docs>
	<doc for="IsolatedStorageContainment.None">
		<summary>
			<para>Use of isolated storage is not 
       allowed.</para>
		</summary>
	</doc>
	<doc for="IsolatedStorageContainment.UnrestrictedIsolatedStorage">
		<summary>
			<para>Use of isolated storage is allowed without restriction. Code has full access to any part of
       the user store, regardless of the identity of the domain or assembly. This use of isolated
       storage includes the ability to enumerate
       the contents of the isolated storage data store.</para>
		</summary>
	</doc>
	<doc for="IsolatedStoragePermission.IsolatedStoragePermission">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStoragePermission"/> class 
    with either restricted or unrestricted permission as specified.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/>values. </param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>. </exception>
		<remarks>
			<para>Creates either fully restricted 
       (<see langword="None"/>) or <see langword="Unrestricted"/>
       access to isolated storage.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStoragePermission.IsolatedStoragePermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStoragePermission"/> class with the specified access, 
    number of inactive days until expiration, and permanent status. </para>
		</summary>
		<param name="UsageAllowed">The type of <see cref="System.Security.Permissions.IsolatedStorageContainment"/> allowed.</param>
		<param name=" ExpirationDays">The number of inactive days until automatic expiration.</param>
		<param name=" PermanentData"><see langword="true"/> to specify no expiration; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para>If <paramref name="PermanentData"/> is <see langword="true"/> and the caller has appropriate 
    access, this constructor will create isolated storage that will never
    automatically expire. Otherwise, the isolated storage will expire and be
    reclaimed after <paramref name="ExpirationDays"/> of inactivity.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStoragePermission.IsolatedStoragePermission2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStoragePermission"/> class 
    with the specified access, number of inactive
    days until expiration, permanent status, and allowed disk space. </para>
		</summary>
		<param name="UsageAllowed">The type of <see cref="System.Security.Permissions.IsolatedStorageContainment"/> allowed.</param>
		<param name=" ExpirationDays">The number of inactive days until automatic expiration.</param>
		<param name=" PermanentData"><see langword="true"/> to specify no expiration; otherwise, <see langword="false"/>.</param>
		<param name=" UserQuota">The allowed overall size of the user's total store.</param>
		<remarks>
			<para>If <paramref name="PermanentData"/> is <see langword="true"/> and the caller has 
    appropriate access, this constructor will create isolated storage that will
    never automatically expire. Otherwise, the isolated storage will expire and be
    reclaimed after <paramref name="ExpirationDays"/> of inactivity.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStoragePermission.ExpirationDays">
		<summary>
			<para> Indicates the maximum number of days since last usage, after which data in isolated storage
       should expire.</para>
		</summary>
		<value>
			<para>The lifetime of isolated storage data in days.</para>
		</value>
	</doc>
	<doc for="IsolatedStoragePermission.PermanentData">
		<summary>
			<para> Indicates whether data can be retained in the isolated store indefinitely.</para>
		</summary>
		<value>
			<para><see langword="true"/> if data can be retained in the 
    isolated store indefinitely; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para>This method prevents the data from expiring and being 
       automatically deleted.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStoragePermission.UsageAllowed">
		<summary>
			<para> Gets or sets the type of isolated storage containment allowed.</para>
		</summary>
		<value>
			<para> One of the <see cref="System.Security.Permissions.IsolatedStorageContainment"/> values.</para>
		</value>
	</doc>
	<doc for="IsolatedStorageContainment.DomainIsolationByRoamingUser">
		<summary>
			<para>Storage is isolated first by user and then by domain and assembly. Storage will roam if Windows user data roaming is 
      enabled. Data can only be accessed within the context of the same application
      and only when run by the same user. This is helpful when a third-party assembly
      wants to keep a private data store.</para>
		</summary>
	</doc><doc for="IsolatedStorageContainment.AssemblyIsolationByRoamingUser">
		<summary>
			<para>Storage is isolated first by user and then by assembly
 evidence. Storage will roam if Windows user data roaming is
 enabled. This provides a data store for the assembly that is accessible in any
 domain context. The per-assembly data compartment requires additional trust
 because it potentially provides a "tunnel" between applications that could
 compromise the data isolation of applications in particular Web sites.</para>
		</summary>
	</doc><doc for="IsolatedStorageContainment.AdministerIsolatedStorageByUser">
		<summary>
			<para> Unlimited administration ability for the user store. Allows browsing and
 deletion of the entire user store, but not read access other than
 the user's own domain/assembly identity.</para>
		</summary>
	</doc><doc for="IsolatedStoragePermission.UserQuota">
		<summary>
			<para> Gets or sets the quota on the overall size of each user's total store.</para>
		</summary>
		<value>
			<para> The size of the resource allocated to the user.</para>
		</value>
	</doc><doc for="IsolatedStoragePermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating whether the current permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the current permission
   is unrestricted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents access to
      any and all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="IsolatedStoragePermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any
      state information.</para>
		</returns>
	</doc><doc for="IsolatedStoragePermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML encoding.</para>
		</summary>
		<param name="esd"> The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not valid.</para></exception>
	</doc><doc for="IsolatedStorageContainment">
		<summary>
			<para>Specifies the permitted use of isolated storage.</para>
		</summary>
		<remarks>
			<para> Isolated storage uses evidence to
      determine a unique storage area for use by an application or component. The
      identity of an assembly uniquely determines the root of a virtual file
      system for use by that assembly. Thus, rather than many applications and components sharing a
      common resource such as the file system or registry, each has its own file
      area inherently assigned to it.</para>
			<para> Three basic isolation scopes are used when assigning
      isolated storage: </para>
			<list type="bullet"><item>
					<term>
						<see langword="User"/> - Code is 
         always scoped according to the current user. The same assembly will receive
         different stores when being run by different users.</term>
				</item>
				<item>
					<term>
						<see langword="Assembly"/> - Code 
         is identified cryptographically by strong name (for example,
         Microsoft.Office.* or Microsoft.Office.Word), by publisher (based on public
         key), by URL (for example, http://www.fourthcoffee.com/process/grind.htm), by
         site, or by zone.</term>
				</item>
				<item>
					<term>
						<see langword="Domain"/> - Code is identified based on
         evidence associated with the application domain. Web
         application identity is derived from the site's URL,
         or by the Web page's URL, site, or
         zone. Local code identity is based on the application directory path.</term>
				</item>
			</list>
			<para> For definitions of URL, site, and zone, see <see cref="System.Security.Permissions.UrlIdentityPermission"/>, <see cref="System.Security.Permissions.SiteIdentityPermission"/>, and <see cref="System.Security.Permissions.ZoneIdentityPermission"/>.</para>
			<para> These identities are grouped together, in which case the identities are applied one after another until
   the desired isolated storage is created. The valid groupings are User+Assembly and User+Assembly+Domain.
   This grouping of identities is useful in many different applications.</para>
			<para> 
   If data is stored by domain, user, and assembly, the data is private in
   that only code in that assembly can access the data. The data store is
   also isolated by the application in which it runs, so that the assembly
   does not represent a potential leak by exposing data to other applications. </para>
			<para>Isolation by assembly and user could be used for user data that applies
   across multiple applications; for example, license information, or a
   user's personal information (name, authentication credentials, and so
   on) that is independent of an application. </para>
			<para><see cref="System.Security.Permissions.IsolatedStorageContainment"/> exposes
flags that determine whether an application is allowed to use isolated storage
and, if so, which identity combinations are allowed to use it. It also
determines whether an application is
allowed
to store information in a location that can roam with a user (Windows
Roaming User Profiles or Folder Redirection must be configured).</para>
		</remarks>
		<seealso topic="cpconisolatedstorage"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermissionAttribute"/>
	</doc><doc for="IsolatedStoragePermission">
		<summary>
			<para> Represents access to generic isolated storage
      capabilities.</para>
		</summary>
		<remarks>
			<para> This class is an abstract base class. This class is never instantiated; instead,
      classes that extend it and represent access to a particular type of isolated
      storage are used.</para>
		</remarks>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageContainment"/>
	</doc><doc for="IsolatedStorageContainment.DomainIsolationByUser">
		<summary>
			<para>Storage is isolated first by user and then by domain and assembly. Storage is also isolated by
      computer. Data can only be accessed within the context of the same application and only
      when run by the same user. This is helpful when a third-party assembly wants to keep a private data store.</para>
		</summary>
	</doc><doc for="IsolatedStorageContainment.AssemblyIsolationByUser">
		<summary>
			<para> Storage is isolated first by user and then by code assembly. Storage is also isolated
      by computer. This provides a data store for the assembly that is accessible in
      any domain context. The per-assembly data compartment requires additional trust because
      it potentially provides a "tunnel" between applications that could compromise the data isolation of applications in
      particular Web sites.</para>
		</summary>
	</doc></docs>
