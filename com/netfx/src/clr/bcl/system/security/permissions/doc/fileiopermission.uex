<docs>
	<doc for="FileIOPermissionAccess.Read">
		<summary>
			<para>Access to read from a file or directory.</para>
		</summary>
	</doc>
	<doc for="FileIOPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="FileIOPermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating whether
      the current permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the current permission
   is unrestricted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents access to
      all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="FileIOPermissionAccess.PathDiscovery">
		<summary>
			<para>Access to the information in the path itself. This
      protects sensitive information in the path, such as user names, as
      well as information about the directory structure revealed in the path. This
      value does not grant access to files or folders represented by the path.</para>
			<note type="note">
      For performance
      reasons, <see langword="PathDiscovery"/> should only be granted to directories,
      not to files. For example, <see langword="PathDiscovery"/> permission should be granted to paths
      such as C:\test and C:\test\, not C:\test\example.txt.
      
   </note>
		</summary>
	</doc><doc for="FileIOPermissionAccess.Write">
		<summary>
			<para>Access to write to or delete a file or directory. 
   <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/> 
   access includes deleting and overwriting files or directories.
   </para>
		</summary>
	</doc>
	<doc for="FileIOPermission.FileIOPermission2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.FileIOPermission"/> class with the specified
   access to the specified files and directories.</para>
		</summary>
		<param name="access">A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values.</param>
		<param name="pathList">An array containing the absolute paths of the files and directories.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>. </para>
			<para>-or-</para>
			<para>An entry in the <paramref name="pathList"/> array is not a valid string. </para>
		</exception>
		<remarks>
			<para> This constructor only allows one <see cref="System.Security.Permissions.FileIOPermissionAccess"/> value to
   be specified for the specified files and directories. Use <see cref="System.Security.Permissions.FileIOPermission.AddPathList"/>
   to define complex permissions.</para>
		</remarks>
	</doc>
	<doc for="FileIOPermission.SetPathList1">
		<summary>
			<para>Sets the specified access to the specified files and directories, replacing the current state for the
      specified access with
      the new set of
      paths.</para>
		</summary>
		<param name="access">A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values.</param>
		<param name="pathList">An array containing the absolute paths of the files and directories.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>. </para>
			<para>-or-</para>
			<para>An entry in the <paramref name="pathList"/> parameter is not a valid string. </para></exception>
		<remarks>
			<para> The previous state of the current permission for the
      specified access type is overwritten. The following code sets the access
      for C:\temp to <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>. </para>
			<code lang="C#">SetPathList(FileIOPermissionAccess.Read, "C:\\temp");
   </code>
			<code lang="VB">SetPathList(FileIOPermissionAccess.Read, "C:\temp")
   </code>
			<para>This access will not be overwritten by the following
      code because the access types are not the same.</para>
			<code lang="C#">SetPathList(FileIOPermissionAccess.Write, "C:\\documents");
   </code>
			<code lang="VB">SetPathList(FileIOPermissionAccess.Write, "C:\documents")
   </code>
		</remarks>
	</doc>
	<doc for="FileIOPermission.AddPathList1">
		<summary>
			<para>Adds access for the specified files and directories to
      the existing state of the permission. </para>
		</summary>
		<param name="access">A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values.</param>
		<param name="pathList">An array containing the absolute paths of the files and directories.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>.</para>
			<para>-or-</para>
			<para>An entry in the <paramref name="pathList"/> array is not valid.</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="pathList"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>Use this method to modify file and directory access by adding to the state of the current
      permission.</para>
		</remarks>
	</doc>
	<doc for="FileIOPermissionAccess.Append">
		<summary>
			<para>Access to append material to a file or directory.
   <see cref="System.Security.Permissions.FileIOPermissionAccess.Append"/>
   access includes the ability to create a new file or directory.</para>
			<note type="note">
   To create files, code must also be granted
   both <see cref="System.Security.Permissions.FileIOPermissionAccess.Append"/>
   
   and either <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/> or <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/> access.
   For more detail see <see cref="System.IO.FileMode"/>.
   
</note>
		</summary>
	</doc>
	<doc for="FileIOPermissionAccess.AllAccess">
		<summary>
			<para><see cref="System.Security.Permissions.FileIOPermissionAccess.Append"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/>, and <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"/> access to a file or 
   directory. <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess"/> represents
   multiple <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values and causes an <see cref="System.ArgumentException"/> when used as the <paramref name="access"/> parameter for the <see cref="System.Security.Permissions.FileIOPermission.GetPathList"/> method, which expects a single
   value.</para>
		</summary>
	</doc>
	<doc for="FileIOPermissionAccess.NoAccess">
		<summary>
			<para> No access to a file or directory. <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"/> 
represents no valid <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values and causes
an <see cref="System.ArgumentException"/> when used as the parameter
for <see cref="System.Security.Permissions.FileIOPermission.GetPathList"/>, which expects a single
value.</para>
		</summary>
	</doc>
	<doc for="FileIOPermission.FileIOPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.FileIOPermission"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.FileIOPermission"/> class with fully-restricted or unrestricted permission as
   specified.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/>values.</param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para> Creates either fully-restricted (<see langword="None"/>)
   or <see langword="Unrestricted"/>
   access to files and directories.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="9"/>
		</example>
	</doc>
	<doc for="FileIOPermission.SetPathList">
		<overload>
			<para>Sets the specified access to the specified files and directories, replacing the
      existing state of the permission.</para>
		</overload>
		<summary>
			<para> Sets the specified access to the specified file
      or directory, replacing the
      existing state of the
      permission.</para>
		</summary>
		<param name="access">A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values.</param>
		<param name="path">The absolute path of the file or directory.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>. </para>
			<para>-or-</para>
			<para>The <paramref name="path"/> parameter is not a valid string. </para>
			<para>-or-</para>
			<para>The <paramref name="path"/> parameter did not specify the absolute path to the file or directory.</para></exception>
		<remarks>
			<para> The previous state of the current permission for the
      specified access type is overwritten. The following code sets the access
      for C:\temp to <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>. </para>
			<code lang="C#">SetPathList(FileIOPermissionAccess.Read, "C:\\temp");
      </code>
			<code lang="VB">SetPathList(FileIOPermissionAccess.Read, "C:\temp")
      </code>
			<para>This access will not be overwritten by the following
      code because the access types are not the same.</para>
			<code lang="C#">SetPathList(FileIOPermissionAccess.Write, "C:\\documents");
      </code>
			<code lang="VB">SetPathList(FileIOPermissionAccess.Write, "C:\documents")
      </code>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="FileIOPermission.AddPathList">
		<overload>
			<para>Adds access for the specified files and directories to the existing state of
      the permission. </para>
		</overload>
		<summary>
			<para>Adds access for the specified file or directory to
      the existing state of the permission. </para>
		</summary>
		<param name="access">A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values.</param>
		<param name="path">The absolute path of a file or directory.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>.</para>
			<para>-or-</para>
			<para>The <paramref name="path"/> parameter is not a valid string.</para>
			<para>-or-</para>
			<para>The <paramref name="path"/> parameter did not specify the absolute path to the file or directory.</para></exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> parameter is <see langword="null"/>.</exception>
		<remarks>
			<para>Use this method to modify file and directory access by adding to the state of the current
      permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="FileIOPermission.GetPathList">
		<summary>
			<para>Gets all files and directories with the specified
      <see cref="System.Security.Permissions.FileIOPermissionAccess"/>.</para>
		</summary>
		<param name="access">One of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values that represents a single type of file access.</param>
		<returns>
			<para>An array containing the paths of the files and directories to
      which access specified by the <paramref name="access"/> parameter is granted.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>
				<paramref name="access"/> is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>. </para>
			<para>-or-</para>
			<para><paramref name="access"/> is <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess"/>, which represents more than one type of file access, or <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"/>, which does not represent any type of file access. </para></exception>
		<remarks>
			<para>Use this method to get the state of the current permission. To get
      the state of both <see langword="Read"/> and <see langword="Write"/>
      access, two calls
      to this
      method are required.</para>
			<note type="note">
      The <paramref name="access"/>
      parameter is limited
      to the values of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>, which represent single types of
      file access. Those values are <see cref="System.Security.Permissions.FileIOPermissionAccess.Read"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Append"/>, and <see cref="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"/>. The values
      acceptable to <paramref name="access "/> do not include <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"/> and
      <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess"/>, which do not represent single types
      of file access.
      
      </note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="FileIOPermission.AllLocalFiles">
		<summary>
			<para> Gets or sets the permitted access to all local files.</para>
		</summary>
		<value>
			<para> The set of file I/O flags for all local files.</para>
		</value>
		<remarks>
			<para>Local files are files contained on the local computer. Any files not accessed
      through a network drive are local files.</para>
			<para>An individual <see cref="System.Security.Permissions.FileIOPermissionAccess"/> value can be
   checked for using a bitwise AND operation.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="11"/>
		</example>
	</doc>
	<doc for="FileIOPermission.AllFiles">
		<summary>
			<para> Gets or sets the permitted access to all files.</para>
		</summary>
		<value>
			<para> The set of file I/O flags for all files. </para>
		</value>
		<remarks>
			<para> This property gets or
      sets the permitted access to all files on the local computer and network
      drives. </para>
			<para>An individual <see cref="System.Security.Permissions.FileIOPermissionAccess"/> value can be
   checked for using a bitwise AND operation.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="11"/>
		</example>
	</doc>
	<doc for="FileIOPermission.IsSubsetOf">
		<summary>
			<para>Determines whether the current permission is a subset of the
      specified permission.</para>
		</summary>
		<param name="target">A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para> The current permission is a subset of the specified
      permission if the current permission specifies a set of operations
      that is contained by the specified permission. For example, a
      permission that represents read access to C:\example.txt is a subset of a permission
      that represents read access to C:\. If this method returns
   <see langword="true"/>, the current permission represents no more
      access to the protected resource than does the specified
      permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="FileIOPermission.Intersect">
		<summary>
			<para> Creates
      and returns a permission that is the intersection of the current
      permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
		<returns>
			<para>A new permission that represents the intersection
      of the current permission and the specified permission. This new
      permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para> The intersection
      of two permissions is a permission that describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="FileIOPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the current
      permission and the specified permission.</para>
		</summary>
		<param name="other">A permission to combine with the current permission. It must be the same type as the current permission.</param>
		<returns>
			<para>A new permission that represents the union of the current
      permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="other "/>parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.FileIOPermission.Union"/> is
   a permission that represents
   all the operations represented by both the current permission and
   the specified permission. Any demand that passes either permission passes
   their union.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="FileIOPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para>A copy of the current permission.</para>
		</returns>
		<remarks>
			<para>A copy of the permission represents the same
      access to resources as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="FileIOPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="FileIOPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd">The XML encoding used to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not compatible.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="FileIOPermissionAccess">
		<summary>
			<para> Specifies the type of file access requested.</para>
		</summary>
		<remarks>
			<para>This enumeration is used with the <see cref="System.Security.Permissions.FileIOPermission"/> class. </para>
			<note type="note">
   
   Although <see cref="System.Security.Permissions.FileIOPermissionAccess.NoAccess"/> and <see cref="System.Security.Permissions.FileIOPermissionAccess.AllAccess"/>
   appear in <see cref="System.Security.Permissions.FileIOPermissionAccess"/>, they are not valid for use
   as the parameter for <see cref="System.Security.Permissions.FileIOPermission.GetPathList"/> because they
   describe no file access types or all file access types, respectively, and <see cref="System.Security.Permissions.FileIOPermission.GetPathList"/>
   expects a single file access type.
</note>
		</remarks>
		<seealso cref="System.Security.Permissions.FileIOPermission"/>
		<seealso cref="System.Security.Permissions.FileIOPermissionAttribute"/>
	</doc>
	<doc for="FileIOPermission">
		<summary>
			<para>Controls the ability
      to access files and folders. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> This permission distinguishes between the following
      four types of file IO access provided by <see cref="System.Security.Permissions.FileIOPermissionAccess"/>:</para>
			<list type="bullet"><item>
					<term>
						<see langword="Read"/>: Read 
         access to the contents of the file or access to information about the file,
         such as its length or last modification time.</term>
				</item>
				<item>
					<term>
						<see langword="Write"/>: Write 
         access to the contents of the file or access to change information about the
         file, such as its name. Also allows for deletion and overwriting.</term>
				</item>
				<item>
					<term>
						<see langword="Append"/>: Ability 
         to write to the end of a file only. No ability to read.</term>
				</item>
				<item>
					<term>
						<see langword="PathDiscovery"/>:
         Access to the information in the path itself. This protects sensitive
         information in the path, such as user names, as well as information about the
         directory structure revealed in the path. This value does not grant access to
         files or folders represented by the path.</term>
				</item>
			</list>
			<para>All these permissions are independent, meaning that
   rights to one do not imply rights to another. For example, <see langword="Write "/>permission does not imply permission to <see langword="Read"/> or
<see langword="Append"/>. If more than one permission is desired,
   they can be combined using a bitwise OR
   as
   shown in the code example that follows. File permission is defined in terms
   of canonical absolute paths; calls should always be made with canonical file
   paths.</para>
			<para><see cref="System.Security.Permissions.FileIOPermission"/>
describes protected operations on files and folders. The <see cref="System.IO.File"/>
class
provides secure access to files and folders. The security access check is performed when the
handle to the file is created. By doing the check at creation time, the
performance impact of the security check is minimized. Opening a file happens once,
while reading and writing can happen multiple times. Once the file is opened, no further checks
are done. If the object is passed to an untrusted caller, it can
be misused. For example, file handles should not be stored in public global statics where
code with less permission can access them.</para>
			<para><see cref="System.Security.Permissions.FileIOPermissionAccess"/>
specifies actions that can be performed on the file or folder.
In addition, these actions can be combined using a
bitwise OR to form complex instances.</para>
			<para>Access to a folder implies access to all the files it
   contains, as well as access to all the files and folders in
   its subfolders. For example, <see langword="Read"/> access to
   C:\folder1\ implies <see langword="Read"/> access to C:\folder1\file1.txt, C:\folder1\folder2\, C:\folder1\folder2\file2.txt,
   and so on.</para>
			<note type="caution">
				<see langword="Unrestricted"/>
				<see cref="System.Security.Permissions.FileIOPermission"/> grants
permission for all paths within a file system,
including multiple pathnames that can be used to access a single given file.
To <see cref="System.Security.CodeAccessPermission.Deny"/> access to a file, you must
<see cref="System.Security.CodeAccessPermission.Deny"/> all possible paths to the
file. For example, if \\server\share is mapped to the network drive X,
to <see cref="System.Security.CodeAccessPermission.Deny"/> access to \\server\share\file, you
must <see cref="System.Security.CodeAccessPermission.Deny"/> \\server\share\file,
X:\file and any other path that you can use to access the file. A
better technique to deal with multiple paths is to use a combination of
<see cref="System.Security.CodeAccessPermission.PermitOnly"/> 
and <see cref="System.Security.CodeAccessPermission.Deny"/>. In the above example you
can <see cref="System.Security.CodeAccessPermission.PermitOnly"/> \\server\share, then <see cref="System.Security.CodeAccessPermission.Deny"/> \\server\share\file, eliminating alternate
paths completely. For more information
on this subject and the use of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> with
<see cref="System.Security.CodeAccessPermission.Deny"/>, see <see langword="Canonicalization Problems Using Deny"/> in the <see topic="cpcondeny"/> topic. 
</note>
			<note type="note">
   Paths of the form
   \\server\share\bogusfolder\..\file are converted into the canonical form
   \\server\share\file by the security system so you only need to <see cref="System.Security.CodeAccessPermission.Deny"/> the canonical path,
   \\server\share\file, and do not need to account for the syntactical variations that can be used
   to specify the same path.
</note>
			<note type="note">
				<see cref="System.Security.CodeAccessPermission.Deny"/> is most effective when used with
   the Windows NTFS file system. NTFS offers substantially more security
   than FAT32. For details on NTFS, see the Windows documentation.
</note>
		</remarks>
		<example>
			<para> The following examples illustrate code that uses
   <see cref="System.Security.Permissions.FileIOPermission"/> . After
      the following two lines of code, the object <c>f</c>
   represents permission to read all files on
   the client computer's local disks.</para>
			<codelink SampleID="Classic FileIOPermission Example" SnippetID="1"/>
			<para> After the following two lines of code, the 
object <c>f2</c> 
represents permissions to read C:\test_r and read and write to
 C:\example\out.txt. <see langword="Read"/> and <see langword="Write"/>
 represent the file/folder permissions as previously described.</para>
			<codelink SampleID="Classic FileIOPermission Example" SnippetID="2"/>
			<para> The following example demonstrates many of the <see cref="System.Security.Permissions.FileIOPermission"/> members.</para>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.FileIOPermissionAccess"/>
		<seealso cref="System.Security.Permissions.FileIOPermissionAttribute"/>
	</doc>
	<doc for="FileIOPermission.FileIOPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.FileIOPermission"/> class with the specified access
   to the specified file or directory.</para>
		</summary>
		<param name="access">A bitwise combination of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values.</param>
		<param name="path">The absolute path of the file or directory.</param>
		<exception cref="System.ArgumentException"><para>The <paramref name="access"/> parameter is not a valid value of <see cref="System.Security.Permissions.FileIOPermissionAccess"/>. </para>
			<para>-or-</para>
			<para>The <paramref name="path"/> parameter is not a valid string. </para>
			<para>-or-</para>
			<para>The <paramref name="path"/> parameter did not specify the absolute path to the file or directory.</para></exception>
		<remarks>
			<para>This constructor only allows one of the <see cref="System.Security.Permissions.FileIOPermissionAccess"/> values to be
   specified for the specified file or directory. Use <see cref="System.Security.Permissions.FileIOPermission.AddPathList"/>
   to define complex permissions.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.FileIOPermission" SnippetID="8"/>
		</example>
	</doc>
</docs>
