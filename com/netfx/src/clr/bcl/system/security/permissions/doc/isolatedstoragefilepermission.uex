<docs>
	<doc for="IsolatedStorageFilePermission.IsolatedStorageFilePermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/> class with either fully restricted 
    or unrestricted permission as specified.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/>values. </param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para>Constructs either fully restricted 
       (<see langword="None"/>) or <see langword="Unrestricted"/> access to isolated storage
       files.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStorageFilePermission.IsolatedStorageFilePermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/> class with the specified access, 
    number of inactive days until expiration, and permanent status.</para>
		</summary>
		<param name="UsageAllowed">The type of <see cref="System.Security.Permissions.IsolatedStorageContainment"/> allowed.</param>
		<param name=" ExpirationDays">The number of inactive days until automatic expiration.</param>
		<param name=" PermanentData"><see langword="true"/> to specify no expiration; otherwise, <see langword="false"/>.</param>
		<remarks>
			<para>If <paramref name="PermanentData"/> is <see langword="true"/> and the 
    caller has appropriate access, this constructor will create isolated storage
    that will never automatically expire. Otherwise, the isolated storage will
    expire and be reclaimed after <paramref name="ExpirationDays"/> of inactivity.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStorageFilePermission.IsolatedStorageFilePermission2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/> class with the specified access, 
    number of inactive days until expiration, permanent status, and allowed disk
    space. </para>
		</summary>
		<param name="UsageAllowed">The type of <see cref="System.Security.Permissions.IsolatedStorageContainment"/> allowed.</param>
		<param name=" ExpirationDays">The number of inactive days until automatic expiration.</param>
		<param name=" PermanentData"><see langword="true"/> to specify no expiration; otherwise, <see langword="false"/>.</param>
		<param name=" UserQuota">The allowed overall size of the user's total store.</param>
		<remarks>
			<para>If <paramref name="PermanentData"/> is <see langword="true"/> and the 
    caller has appropriate access, this constructor will create isolated storage
    that will never automatically expire. Otherwise, the isolated storage will
    expire and be reclaimed after <paramref name="ExpirationDays"/> of inactivity.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStorageFilePermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="IsolatedStorageFilePermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The current permission is a
      subset of the specified permission if the current permission specifies a set
      of operations that is wholly contained by the specified permission. For
      example, a permission that represents access to C:\example.txt is a subset of a
      permission that represents access to C:\. If this method returns
   <see langword="true"/>
   , the current permission represents no
   more access to the protected resource than does the specified
   permission.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFilePermission.Intersect">
		<summary>
			<para> Creates and returns a permission that
      is the intersection of the current permission and the specified permission.</para>
		</summary>
		<param name="target"> A permission to intersect with the current permission object. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The intersection
      of two permissions is a permission that describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFilePermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources
      as the original permission.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFilePermission.Union">
		<summary>
			<para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the union of the current permission and the specified
      permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target "/>parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.IsolatedStorageFilePermission.Union"/><see langword=" "/> is a permission
   that represents all the operations represented by both the current permission
   and the specified permission. Any demand that passes either permission passes
   their union.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFilePermission">
		<summary>
			<para>Specifies the allowed usage of a private virtual file system. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>The common language runtime uses this class to control access to isolated
      storage.</para>
			<para> Isolated storage creates a unique storage area for use by an application or component. It
      provides true isolation in that the identity of an application uniquely determines
      the root of a virtual file system that only that application can access.
      Thus, each application has its own file area inherently assigned to it. This
      file area is fully isolated from other applications, making it essentially
      private.</para>
			<note type="note">
      The <see langword="Assert"/> method,
      inherited from <see cref="System.Security.CodeAccessPermission.Assert" qualify="true"/>, does not have any effect
      on <see cref="System.Security.Permissions.IsolatedStorageFilePermission"/>.
      The <see langword="Assert"/> will be ignored.
      
   </note>
		</remarks>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageFilePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermission"/>
		<seealso cref="System.Security.Permissions.IsolatedStoragePermissionAttribute"/>
		<seealso cref="System.Security.Permissions.IsolatedStorageContainment"/>
	</doc>
</docs>
