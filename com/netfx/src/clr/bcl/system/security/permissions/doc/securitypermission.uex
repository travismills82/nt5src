<docs>
	<doc for="SecurityPermissionFlag.NoFlags">
		<summary>
			<para> No security access.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.ControlThread">
		<summary>
			<para> Ability to use certain advanced operations on threads.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.SerializationFormatter">
		<summary>
			<para> Ability to provide serialization services. Used by
       serialization formatters.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.ControlDomainPolicy">
		<summary>
			<para> Ability to specify domain policy.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.ControlPrincipal">
		<summary>
			<para> Ability to manipulate the principal object.</para>
		</summary>
		<summary>
			<para>Denotes ability to manipulate the principal object.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.ControlAppDomain">
		<summary>
			<para> Ability to create and manipulate an <see cref="System.AppDomain"/>.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.AllFlags">
		<summary>
			<para> The unrestricted
       state of the permission.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.ControlPolicy">
		<summary>
			<para> Ability to view and modify policy.</para>
			<para>This is a powerful permission that should only be granted to highly trusted 
      code.</para>
		</summary>
	</doc><doc for="SecurityPermissionFlag.ControlEvidence">
		<summary>
			<para> Ability to provide evidence, including the ability to
      alter the evidence provided by the
      common language runtime.</para>
			<para>This is a powerful permission that should only be granted to highly trusted
      code.</para>
		</summary>
	</doc><doc for="SecurityPermissionFlag.Assertion">
		<summary>
			<para>
      Ability to assert<see langword=" "/>
      that all this code's callers have
      the requisite permission
      for the operation.</para>
		</summary>
	</doc><doc for="SecurityPermissionFlag.RemotingConfiguration">
		<summary>
			<para>Permission to configure Remoting types and channels.</para>
		</summary>
	</doc><doc for="SecurityPermissionFlag.Infrastructure">
		<summary>
			<para> Permission to plug code into the common 
 language runtime infrastructure, such as adding Remoting Context Sinks, Envoy
 Sinks and Dynamic Sinks.</para>
		</summary>
	</doc><doc for="SecurityPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="SecurityPermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating whether the current
      permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if the current permission
   is unrestricted; otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents access to any and
      all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="SecurityPermissionFlag.Execution">
		<summary>
			<para> Permission for the code to run. Without this permission, managed
      code will not be executed.</para>
			<para>This flag has no effect when used dynamically with stack modifiers such as
   <see cref="System.Security.CodeAccessPermission.Deny"/>, <see cref="System.Security.CodeAccessPermission.Assert"/>, and <see cref="System.Security.CodeAccessPermission.PermitOnly"/>.</para>
		</summary>
	</doc><doc for="SecurityPermissionFlag.SkipVerification">
		<summary>
			<para> Ability to skip verification of code
      in this assembly. Code that is unverifiable can be run if this permission
      is granted.</para>
			<para>This is a powerful permission that should be granted only to highly trusted
      code.</para>
			<para>This flag has no effect when used dynamically with stack modifiers such as
   <see cref="System.Security.CodeAccessPermission.Deny"/>, <see cref="System.Security.CodeAccessPermission.Assert"/>, and <see cref="System.Security.CodeAccessPermission.PermitOnly"/>.</para>
		</summary>
	</doc><doc for="SecurityPermissionFlag.UnmanagedCode">
		<summary>
			<para> Ability to call unmanaged code.</para>
			<para> Since unmanaged code potentially allows
      other permissions to be bypassed, this is a dangerous permission that should only be granted to highly trusted code. It
      is used for such applications as calling native code using PInvoke or using COM interop.</para>
		</summary>
	</doc>
	<doc for="SecurityPermissionFlag.BindingRedirects">
		<summary>
			<para> Permission to perform explicit binding redirection
      in the application configuration file. This includes redirection of .NET
      Framework assemblies that have been unified as well as other assemblies found outside
      the .NET Framework.</para>
		</summary>
	</doc>
	<doc for="SecurityPermission">
		<summary>
			<para> Describes a set of security permissions applied to code.
      This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>This permission uses the <see cref="System.Security.Permissions.SecurityPermissionFlag"/>
enumeration. The values for this enumeration can be found in its
documentation.</para>
		</remarks>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.SecurityPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.SecurityPermissionFlag"/>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="1"/>
		</example>
	</doc>
	<doc for="SecurityPermission.SecurityPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.SecurityPermission"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.SecurityPermission"/> class
   with either restricted or unrestricted permission as specified.</para>
		</summary>
		<param name="state"><para> One of the <see cref="System.Security.Permissions.PermissionState"/>values. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>. </exception>
		<remarks>
			<para>Creates either fully restricted (<see langword="None"/>)
   or <see langword="Unrestricted"/> access to all security permissions.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="SecurityPermission.SecurityPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.SecurityPermission"/> class with the
   specified initial set state of the flags.</para>
		</summary>
		<param name="flag">The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <see cref="System.Security.Permissions.SecurityPermissionFlag"/>.</param>
		<exception cref="System.ArgumentException">The <paramref name="flag"/> parameter is not a valid value of <see cref="System.Security.Permissions.SecurityPermissionFlag"/>.</exception>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="8"/>
		</example>
	</doc>
	<doc for="SecurityPermission.Flags">
		<summary>
			<para> Gets or sets the security permission flags.</para>
		</summary>
		<value>
			<para> The state of the current permission, represented by a
      bitwise OR
      combination of any permission bits defined by <see cref="System.Security.Permissions.SecurityPermissionFlag"/>.</para>
		</value>
		<exception cref="System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="System.Security.Permissions.SecurityPermissionFlag"/> for the valid values.</exception>
		<remarks>
			<para>Individual permission bits can be determined by
      performing an AND operation against this
      value and checking for nonzero.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="SecurityPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of the
      specified permission.</para>
		</summary>
		<param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The current permission is a
      subset of the specified permission if the current permission specifies a set
      of operations that is wholly contained by the specified permission. For
      example, a permission that represents access to C:\example.txt is a subset of a
      permission that represents access to C:\. If this method returns
      <see langword="true"/>
   , the current permission represents no
   more access to the protected resource than does the specified
   permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="SecurityPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
		</summary>
		<param name="target"> A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the union of
      the current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target "/>parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.SecurityPermission.Union"/>
is a permission that represents all the
operations represented by both the current permission and the specified permission. Any demand
that passes either permission passes their union.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="SecurityPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para>A new permission object that represents the intersection
      of the current permission and the specified permission. This new permission is
      <see langword="null"/>
   if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The
      intersection of two permissions is a permission that describes the state that
      they both describe in common. Only a demand that passes both
      original permissions will pass the intersection.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="SecurityPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources
      as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="SecurityPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="SecurityPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd"> The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not supported.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="SecurityPermission.ToString">
		<summary>
			<para> Creates and returns a string representation of the
      permission.</para>
		</summary>
		<returns>
			<para> A representation of the current permission.</para>
		</returns>
		<remarks>
			<para>This method is useful for debugging.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="SecurityPermissionFlag">
		<summary>
			<para>Specifies access flags for the security permission object.</para>
		</summary>
		<remarks>
			<para>This enumeration is used by <see cref="System.Security.Permissions.SecurityPermission"/>.</para>
			<note type="caution">
   Many of these flags are powerful
   and should only be granted to highly trusted code.
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.SecurityPermissionFlag" SnippetID="1"/>
		</example>
		<seealso cref="System.Security.Permissions.SecurityPermission"/>
		<seealso cref="System.Security.Permissions.SecurityPermissionAttribute"/>
	</doc>
</docs>
