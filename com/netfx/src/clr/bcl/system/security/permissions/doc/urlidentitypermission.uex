<docs>
	<doc for="UrlIdentityPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="UrlIdentityPermission">
		<summary>
			<para>Defines the identity permission for the URL from which the code originates. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> The complete URL is considered, including the protocol
      (HTTP, HTTPS, FTP) and the file. For example, http://www.fourthcoffee.com/process/grind.htm
      is a complete URL.</para>
			<para>URLs
      can be matched exactly or by a wildcard in the final position, for
      example: http://www.fourthcoffee.com/process/*.</para>
			<note type="caution">
				<see cref="System.Security.Permissions.UrlIdentityPermission"/>
   grants permission for
   all paths to the file, including both the URL and the IP address.
   To <see cref="System.Security.CodeAccessPermission.Deny"/> access to the file, you must
<see cref="System.Security.CodeAccessPermission.Deny"/> all possible paths to the 
   file. For example, if http://www.fourthcoffee.com/process/grind.htm is
   located at IP address 192.168.238.241,
   to <see cref="System.Security.CodeAccessPermission.Deny"/> access to http://www.fourthcoffee.com/process/grind.htm, you
   must <see cref="System.Security.CodeAccessPermission.Deny"/>
   http://www.fourthcoffee.com/process/grind.htm, 192.168.238.241/grind.htm and any
   other path that you can use to access the code. Unfortunately, there are a
   myriad of ways URL paths can be phrased, so it is extremely difficult to block
   all paths through the use of <see cref="System.Security.CodeAccessPermission.Deny"/>alone. A better technique to
   deal with multiple paths is to use a combination of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> and <see cref="System.Security.CodeAccessPermission.Deny"/>. <see cref="System.Security.CodeAccessPermission.PermitOnly"/> allows you to identify a finite set of URLs that you can provide
   access to, and then <see cref="System.Security.CodeAccessPermission.Deny"/> allows you to explicitly
   select addresses from that set that you want to deny access to. For more
   information on this subject and the use of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> with <see cref="System.Security.CodeAccessPermission.Deny"/>, see <see langword="Canonicalization Problems Using Deny"/> in the <see topic="cpcondeny"/> topic.
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.UrlIdentityPermissionAttribute"/>
		<seealso cref="System.Security.Policy.Url"/>
		<seealso cref="System.Security.Policy.UrlMembershipCondition"/>
	</doc>
	<doc for="UrlIdentityPermission.UrlIdentityPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UrlIdentityPermission"/>
class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UrlIdentityPermission"/> class
   with a fully restricted <see cref="System.Security.Permissions.PermissionState"/>.</para>
		</summary>
		<param name="state"><see langword="None"/> is the only valid value for identity permissions.</param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para>Identity permissions do not allow an
   <see langword="Unrestricted"/>
				<see cref="System.Security.Permissions.PermissionState"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.UrlIdentityPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UrlIdentityPermission"/> class
   to represent the URL identity described by <paramref name="site"/>.</para>
		</summary>
		<param name="site">A URL or wildcard expression.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="site"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.FormatException">The length of the <paramref name="site"/> parameter is zero.</exception>
		<exception cref="System.ArgumentException">The URL, directory, or site portion of the <paramref name="site"/> parameter is not valid.</exception>
		<remarks>
			<para>The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and
      the file, for example: http://www.fourthcoffee.com/process/grind.htm/.</para>
   URLs
   can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.
</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="8"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.Url">
		<summary>
			<para> Gets or sets a URL representing the identity of Internet code.</para>
		</summary>
		<value>
			<para>A URL representing the identity of Internet code.</para>
		</value>
		<remarks>
			<para>The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and
      the file, for example: http://www.fourthcoffee.com/process/grind.htm/.</para>
			<para>URLs can be matched exactly or by a wildcard in the final position, for
      example: http://www.fourthcoffee.com/process/*.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources
      as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the current permission
   is a subset of<paramref name=" "/> the specified permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para> The current permission is a
      subset of the specified permission if the current permission specifies a set
      of operations that is wholly contained by the specified permission. For
      example, a permission that represents access to C:\example.txt is a subset of a
      permission that represents access to C:\. If this method returns
   <see langword="true"/>, the current permission represents no
      more access to the protected resource than does the specified
      permission.</para>
			<para><see cref="System.Security.Permissions.UrlIdentityPermission"/> only supports set operations (<see cref="System.Security.Permissions.UrlIdentityPermission.IsSubsetOf"/>, <see cref="System.Security.Permissions.UrlIdentityPermission.Intersect"/>, and <see cref="System.Security.Permissions.UrlIdentityPermission.Union"/> )
   when the current permission is equal to the specified permission or when
   one of the permissions uses the wildcard operator ("*").</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The intersection
      of two permissions is a permission that describes the set of operations they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
			<para><see cref="System.Security.Permissions.UrlIdentityPermission"/> only supports set operations (<see cref="System.Security.Permissions.UrlIdentityPermission.IsSubsetOf"/>, <see cref="System.Security.Permissions.UrlIdentityPermission.Intersect"/>, and <see cref="System.Security.Permissions.UrlIdentityPermission.Union"/> ) when
   the current permission is equal to the specified permission object or when
   one of the permissions uses the wildcard operator ("*").</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the union of
      the current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target "/>parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.UrlIdentityPermission.Union"/> is a
   permission that represents all the operations represented by the current
   permission as well as all the operations represented by the specified
   permission.</para>
			<para><see cref="System.Security.Permissions.UrlIdentityPermission"/> only supports set operations (<see cref="System.Security.Permissions.UrlIdentityPermission.IsSubsetOf"/>, <see cref="System.Security.Permissions.UrlIdentityPermission.Intersect"/>, and <see cref="System.Security.Permissions.UrlIdentityPermission.Union"/>) when the current permission is equal to the specified permission or
when one of the permissions uses the wildcard operator ("*").</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd">The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not valid.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="UrlIdentityPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.UrlIdentityPermission" SnippetID="6"/>
		</example>
	</doc>
</docs>
