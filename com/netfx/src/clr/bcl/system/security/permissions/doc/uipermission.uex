<docs>
	<doc for="UIPermissionWindow.AllWindows">
		<summary>
			<para>
       Users can use all windows and user input events without restriction.
    </para>
		</summary>
	</doc>
	<doc for="UIPermissionClipboard.NoClipboard">
		<summary>
			<para>Clipboard cannot be used.</para>
		</summary>
	</doc>
	<doc for="UIPermissionClipboard.AllClipboard">
		<summary>
			<para>
       Clipboard can be used without restriction.
    </para>
		</summary>
	</doc>
	<doc for="UIPermissionClipboard.OwnClipboard">
		<summary>
			<para> The ability to put data on the clipboard 
 (<see langword="Copy"/>, <see langword="Cut"/>) is unrestricted. Intrinsic
 controls that accept <see langword="Paste"/>, such as text box, can accept the
 clipboard data, but user controls that must programmatically read the clipboard cannot.
 </para>
		</summary>
	</doc><doc for="UIPermissionWindow.SafeTopLevelWindows">
		<summary>
			<para> Users can only use safe top-level windows and
 safe subwindows for drawing, and can only use user input events for the user interface within those top-level windows
 and subwindows. Special safe windows for use by partially-trusted code are guaranteed to
 be clearly labeled and have minimum and maximum size restrictions. These
 restrictions prevent potentially harmful code from spoofing attacks, such as
 imitating trusted system dialogs.</para>
		</summary>
	</doc><doc for="UIPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="UIPermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating
      whether the current permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if
   the current permission is unrestricted;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents access to any and
      all resources protected by the permission.</para>
		</remarks>
	</doc><doc for="UIPermissionWindow.NoWindows">
		<summary>
			<para> Users cannot use any windows or user interface events. No user interface
      can be used.</para>
		</summary>
	</doc><doc for="UIPermissionWindow.SafeSubWindows">
		<summary>
			<para>Users can only use safe subwindows for drawing, and can
      only use user input events for user interface within that subwindow.
      Examples of a safe subwindow are a <see cref="T:System.Windows.Forms.MessageBox"/>, common dialog controls, and a control displayed within a
      browser.</para>
		</summary>
	</doc>
	<doc for="UIPermission">
		<summary>
			<para> Controls the permissions related
      to user interfaces and the clipboard. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para> Drawing and user input events in windows are
      user interfaces.</para>
			<para>The permission to use windows can be one of the following: unrestricted,
      limited to safe top-level windows, only safe subwindows, or no window
      drawing or user input event access allowed. Safe windows are restricted in
      title and size to prevent possible spoofing by potentially harmful code.</para>
			<para> The permission to use the clipboard can be one of the
      following: unrestricted, write-only, or no clipboard access allowed. The paste
      limitation prevents potentially harmful applications from taking data from the
      clipboard without the user's consent, while still allowing the cut, copy, and
      paste operations when initiated by the
      user through keyboard
      commands.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.UIPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.UIPermissionWindow"/>
		<seealso cref="System.Security.Permissions.UIPermissionClipboard"/>
	</doc>
	<doc for="UIPermission.UIPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UIPermission"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UIPermission"/> class with either fully restricted
   or unrestricted access, as specified.</para>
		</summary>
		<param name="state"><para>One of the <see cref="System.Security.Permissions.PermissionState"/>values. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para>This constructor creates either the fully restricted
      (<see langword="None"/>) or the <see langword="Unrestricted"/> form of the
      permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="UIPermission.UIPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UIPermission"/>
class with
the specified permissions for windows and the clipboard.</para>
		</summary>
		<param name="windowFlag"><para>One of the <see cref="System.Security.Permissions.UIPermissionWindow"/> values.</para></param>
		<param name="clipboardFlag"><para>One of the <see cref="System.Security.Permissions.UIPermissionClipboard"/> values.</para></param>
		<exception cref="System.ArgumentException"><para>The <paramref name="windowFlag"/> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionWindow"/> value.</para>
			<para>-or-</para>
			<para>The <paramref name="clipboardFlag"/> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionClipboard"/> value.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="10"/>
		</example>
	</doc>
	<doc for="UIPermission.UIPermission2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UIPermission"/><see langword=" "/> class
   with the permissions for windows, and no
   access to the clipboard.</para>
		</summary>
		<param name="windowFlag"><para>One of the <see cref="System.Security.Permissions.UIPermissionWindow"/> values.</para></param>
		<exception cref="System.ArgumentException">The <paramref name="windowFlag"/> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionWindow"/> value.</exception>
		<remarks>
			<para> To set both the clipboard
      and
      window permissions, use the constructor that takes parameters for
      both.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="8"/>
		</example>
	</doc>
	<doc for="UIPermission.UIPermission3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.UIPermission"/>
class with the permissions for the
clipboard, and no access to windows.</para>
		</summary>
		<param name="clipboardFlag"><para>One of the <see cref="System.Security.Permissions.UIPermissionClipboard"/> values.</para></param>
		<exception cref="System.ArgumentException">The <paramref name="clipboardFlag"/> parameter is not a valid <see cref="System.Security.Permissions.UIPermissionClipboard"/> value.</exception>
		<remarks>
			<para> To set both the clipboard
      and
      window permissions, use the constructor that takes parameters for both.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="9"/>
		</example>
	</doc>
	<doc for="UIPermission.Window">
		<summary>
			<para> Gets or sets the window access represented by the
      permission.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Security.Permissions.UIPermissionWindow"/> values.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="UIPermission.Clipboard">
		<summary>
			<para> Gets or sets the clipboard access represented by the
      permission.</para>
		</summary>
		<value>
			<para>One of the <see cref="System.Security.Permissions.UIPermissionClipboard"/> values.</para>
		</value>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="UIPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
		<returns>
			<para><see langword="true"/> if the
   current permission is a subset of the specified permission; otherwise, <see langword="false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission.</exception>
		<remarks>
			<para> The current permission is a subset of the specified permission if all demands that succeed
      for the current permission also succeed for the specified permission. That is, the
      specified permission contains at least the permissions contained in the subset.
      For <see cref="System.Security.Permissions.UIPermission.IsSubsetOf"/> to return <see langword="true"/>,
      both the <see cref="System.Security.Permissions.UIPermissionWindow"/> and <see cref="System.Security.Permissions.UIPermissionClipboard"/>
      
      values of the current permission
      must be equal to or less permissive than the values of
      the specified permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="UIPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection of
      the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the intersection
      of the current permission and the specified permission. This new permission is <see langword="null"/> if
      the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para>The intersection of two permissions is a permission that
      describes the set of operations they both describe in common. Specifically, it
      represents the least permissive values of <see cref="System.Security.Permissions.UIPermissionWindow"/> and <see cref="System.Security.Permissions.UIPermissionClipboard"/>
      from those in the
      current permission and the specified permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="UIPermission.Union">
		<summary>
			<para> Creates a permission that is the union of
      the permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to combine with the current permission. It must be the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the union of the
      current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.UIPermission.Union"/><see langword=" "/> is a permission that represents
   all the operations represented by the current permission as well as all
   the operations represented by the specified permission. Specifically, it
   represents the most permissive values of <see cref="System.Security.Permissions.UIPermissionWindow"/> and <see cref="System.Security.Permissions.UIPermissionClipboard"/>
   from those in the current permission and the
   specified permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="UIPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of the permission represents the same access to resources
      as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="UIPermission.ToXml">
		<summary>
			<para>Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para>An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="UIPermission.FromXml">
		<summary>
			<para>Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd">The XML encoding used to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not valid.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="UIPermissionWindow">
		<summary>
			<para>Specifies the type of windows that code is allowed to use.</para>
		</summary>
		<remarks>
			<para>This enumeration is used by <see cref="System.Security.Permissions.UIPermission"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermissionEnumerations" SnippetID="1"/>
		</example>
		<seealso cref="System.Security.Permissions.UIPermission"/>
		<seealso cref="System.Security.Permissions.UIPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.UIPermissionClipboard"/>
	</doc>
	<doc for="UIPermissionClipboard">
		<summary>
			<para>Specifies the type of clipboard access that is allowed to the calling code.</para>
		</summary>
		<remarks>
			<para>This enumeration is used by <see cref="System.Security.Permissions.UIPermission"/>.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.UIPermissionEnumerations" SnippetID="1"/>
		</example>
		<seealso cref="System.Security.Permissions.UIPermission"/>
		<seealso cref="System.Security.Permissions.UIPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.UIPermissionWindow"/>
	</doc>
</docs>
