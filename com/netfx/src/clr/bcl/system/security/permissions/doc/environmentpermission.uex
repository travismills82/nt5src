<docs>
	<doc for="EnvironmentPermission.IBuiltInPermission.GetTokenIndex">
		<summary>
			<para>[To be supplied.]</para>
		</summary>
	</doc><doc for="EnvironmentPermission.IsUnrestricted">
		<summary>
			<para> Returns a value indicating
      whether the current permission is unrestricted.</para>
		</summary>
		<returns>
			<para><see langword="true"/> if
   the current permission is unrestricted;
   otherwise, <see langword="false"/>.</para>
		</returns>
		<remarks>
			<para> An unrestricted permission represents the union of
      all possible states of the permission.</para>
		</remarks>
	</doc><doc for="EnvironmentPermissionAccess.Read">
		<summary>
			<para>Only read access to environment variables is specified. 
      Changing, deleting and creating environment variables is not included in this access level.</para>
		</summary>
	</doc><doc for="EnvironmentPermissionAccess.Write">
		<summary>
			<para>Only write access to environment variables is specified. 
      Write access includes creating and deleting environment variables as well as
      changing existing values. Reading environment variables is not included in this access level.</para>
		</summary>
	</doc><doc for="EnvironmentPermissionAccess.NoAccess">
		<summary>
			<para>No access to environment variables. <see cref="System.Security.Permissions.EnvironmentPermissionAccess.NoAccess"/> represents 
   no valid <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values and causes an <see cref="System.ArgumentException"/> when
   used as the parameter for <see cref="System.Security.Permissions.EnvironmentPermission.GetPathList"/>, which expects a single value.</para>
		</summary>
	</doc>
	<doc for="EnvironmentPermissionAccess.AllAccess">
		<summary>
			<para><see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read"/> and 
<see cref="System.Security.Permissions.EnvironmentPermissionAccess.Write"/> access to environment variables. 
<see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess"/> represents 
   multiple <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values and causes an <see cref="System.ArgumentException"/> when used as
   the <paramref name="flag"/> parameter for the <see cref="System.Security.Permissions.EnvironmentPermission.GetPathList"/> method, which expects a single value.</para>
		</summary>
	</doc>
	<doc for="EnvironmentPermissionAccess">
		<summary>
			<para> Specifies access to
      environment variables.</para>
		</summary>
		<remarks>
			<para>This enumeration is used by <see cref="System.Security.Permissions.EnvironmentPermission"/>.</para>
			<note type="note">
   Although <see cref="System.Security.Permissions.EnvironmentPermissionAccess.NoAccess"/> and
<see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess"/> 
appear in <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>, they are not valid for use as the
parameter for <see cref="System.Security.Permissions.EnvironmentPermission.GetPathList"/> because they
describe no environment variable access types or all environment
variable access types, respectively, and <see cref="System.Security.Permissions.EnvironmentPermission.GetPathList"/>
expects a
single environment variable access type.
</note>
		</remarks>
		<seealso cref="System.Security.Permissions.EnvironmentPermission"/>
		<seealso cref="System.Security.Permissions.EnvironmentPermissionAttribute"/>
	</doc>
	<doc for="EnvironmentPermission">
		<summary>
			<para> Controls
      access to system and user
      environment variables. This class cannot be inherited.</para>
		</summary>
		<remarks>
			<para>Environment variable names are designated by one or more case-insensitive name lists
      separated by semicolons, with separate lists for read and write access to the
      named variables. Write access includes the ability to create and delete
      environment variables as well as to change existing values.</para>
			<note type="caution">
				<see cref="System.Security.Permissions.EnvironmentPermission"/> grants
      permission for access to the environment variable and its value. To deny
      access to a variable and its value, you must deny access to it and any other
      variable which contains the same value. For example, to <see cref="System.Security.CodeAccessPermission.Deny"/> access to the
      TMP variable and its value, %USERPROFILE%\Local Settings\Temp, you must
   <see cref="System.Security.CodeAccessPermission.Deny"/>
   access to TMP, TEMP and any other variable that you can use to
   access that value. A better technique to deal with multiple paths is to use a
   combination of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> and <see cref="System.Security.CodeAccessPermission.Deny"/>. For more
   information on this subject and the use of <see cref="System.Security.CodeAccessPermission.PermitOnly"/> with <see cref="System.Security.CodeAccessPermission.Deny"/>, see <see langword="Canonicalization Problems Using Deny"/> in the <see topic="cpcondeny"/> topic.
</note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="1"/>
		</example>
		<seealso topic="cpconpermissions"/>
		<seealso topic="cpconrequestingpermissions"/>
		<seealso cref="System.Security.Permissions.EnvironmentPermissionAttribute"/>
		<seealso cref="System.Security.Permissions.EnvironmentPermissionAccess"/>
	</doc>
	<doc for="EnvironmentPermission.EnvironmentPermission">
		<overload>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.EnvironmentPermission"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.EnvironmentPermission"/> class with either restricted or
   unrestricted permission as specified.</para>
		</summary>
		<param name="state">One of the <see cref="System.Security.Permissions.PermissionState"/> values.</param>
		<exception cref="System.ArgumentException">The <paramref name="state"/> parameter is not a valid value of <see cref="System.Security.Permissions.PermissionState"/>.</exception>
		<remarks>
			<para>Creates either fully restricted
      (<see langword="None"/>) or <see langword="Unrestricted"/> access
      to all environment variables.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="10"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.EnvironmentPermission1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.Security.Permissions.EnvironmentPermission"/> class with the specified access to
   the specified environment variables.</para>
		</summary>
		<param name="flag">One of the <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values. </param>
		<param name="pathList">A list of environment variables (semicolon-separated) to which access is granted.</param>
		<exception cref="System.ArgumentNullException"><para>The <paramref name="pathList"/> parameter is <see langword="null"/>. </para></exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="flag"/> parameter is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>. </para></exception>
		<remarks>
			<para>This constructor allows only one of the <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values to be specified. This access
   applies to all listed environment variables. Use <see cref="System.Security.Permissions.EnvironmentPermission.AddPathList"/>
   
   to define complex permissions.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="9"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.SetPathList">
		<summary>
			<para> Sets the specified access to the specified environment variables to the existing
      state of the permission.</para>
		</summary>
		<param name="flag">One of the <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values. </param>
		<param name="pathList">A list of environment variables (semicolon-separated).</param>
		<exception cref="System.ArgumentNullException">The <paramref name="pathList"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="flag"/> parameter is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>. </para></exception>
		<remarks>
			<para> The previous state of the current
      permission is overwritten.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.AddPathList">
		<summary>
			<para>Adds access for the specified environment variables to the
      existing state of the permission.</para>
		</summary>
		<param name="flag">One of the <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values. </param>
		<param name="pathList">A list of environment variables (semicolon-separated).</param>
		<exception cref="System.ArgumentNullException">The <paramref name="pathList"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="flag"/> parameter is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>. </para></exception>
		<remarks>
			<para> Use this method to modify environment variable access by adding
      to the state of the current permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.GetPathList">
		<summary>
			<para>Gets all environment variables with the specified <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>.</para>
		</summary>
		<param name="flag">One of the <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/> values that represents a single type of environment variable access. </param>
		<returns>
			<para>A list of environment variables (semicolon-separated)
      for the selected flag.</para>
		</returns>
		<exception cref="System.ArgumentException"><para>
				<paramref name="flag"/> is not a valid value of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>. </para>
			<para>-or-</para>
			<para><paramref name="flag"/> is <see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess"/>, which represents more than one type of environment variable access, or <see cref="System.Security.Permissions.EnvironmentPermissionAccess.NoAccess"/>, which does not represent any type of environment variable access. </para></exception>
		<remarks>
			<para> Use this method to get the state of the current
      permission. To get both <see langword="Read"/> and <see langword="Write"/>
      access states requires two calls to this method.</para>
			<note type="note">
      The <paramref name="flag"/> parameter is
      limited to the values of <see cref="System.Security.Permissions.EnvironmentPermissionAccess"/>, which represent
      single types of environment variable access. Those values are <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Read"/>
      and <see cref="System.Security.Permissions.EnvironmentPermissionAccess.Write"/>. The
      values acceptable to <paramref name="flag"/>
      do not include
   <see cref="System.Security.Permissions.EnvironmentPermissionAccess.NoAccess"/> and
   <see cref="System.Security.Permissions.EnvironmentPermissionAccess.AllAccess"/>, which do not represent single types of environment variable access.
      
   </note>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="7"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.IsSubsetOf">
		<summary>
			<para> Determines whether the current permission is a subset of
      the specified permission.</para>
		</summary>
		<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		<returns>
			<para><see langword=" true"/>
if the current permission is a subset of the specified
permission; otherwise,<see langword=" false"/>.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The current permission
      is a subset of the specified permission if the current permission specifies
      a state that is wholly contained by the specified permission. For
      example, a permission that represents access to C:\example.txt is a subset of a
      permission that represents access to C:\. If this method returns
   <see langword="true"/>, the current permission represents no
      more access to the protected resource than does the specified
      permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="2"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.Intersect">
		<summary>
			<para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
		</summary>
		<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null"/>
      if the intersection is empty.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="target"/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para> The intersection of two permissions is a permission that describes the state they both describe in common. Only a
      demand that passes both original permissions will pass the intersection.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="4"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.Union">
		<summary>
			<para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
		</summary>
		<param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		<returns>
			<para> A new permission that represents the union of
      the current permission and the specified permission.</para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="other "/> parameter is not <see langword="null"/> and is not of the same type as the current permission. </exception>
		<remarks>
			<para>The result of a call to <see cref="System.Security.Permissions.EnvironmentPermission.Union"/>
is a
permission that represents all the states represented by both the current permission
and the specified permission. Any demand that passes either permission passes
their union.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="3"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.Copy">
		<summary>
			<para> Creates and returns an identical copy of the current
      permission.</para>
		</summary>
		<returns>
			<para> A copy of the current permission.</para>
		</returns>
		<remarks>
			<para> A copy of a permission represents the same access to resources
      as the original permission.</para>
		</remarks>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="5"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.ToXml">
		<summary>
			<para> Creates an XML encoding of the permission and its current
      state.</para>
		</summary>
		<returns>
			<para> An XML encoding of the permission, including any state
      information.</para>
		</returns>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="6"/>
		</example>
	</doc>
	<doc for="EnvironmentPermission.FromXml">
		<summary>
			<para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
		</summary>
		<param name="esd">The XML encoding to use to reconstruct the permission.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="esd"/> parameter is <see langword="null"/>.</exception>
		<exception cref="System.ArgumentException"><para>The <paramref name="esd"/> parameter is not a valid permission element.</para>
			<para>-or-</para>
			<para>The <paramref name="esd"/> parameter's version number is not valid.</para></exception>
		<example>
			<codelink SampleID="System.Security.Permissions.EnvironmentPermission" SnippetID="6"/>
		</example>
	</doc>
</docs>
