<docs>
	<doc for="IsolatedStorageFileStream.Read">
		<summary>
			<para>Copies bytes from the current buffered <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> to an array.</para>
		</summary>
		<param name="buffer">The buffer to read. </param>
		<param name=" offset">The offset in the buffer at which to begin writing. </param>
		<param name=" count">The maximum number of bytes to read. </param>
		<returns>
			<para> The total number of bytes read into the <paramref name="buffer"/>. This can be less than the number
   of bytes requested if that many bytes are not currently available, or zero
   if the end of the stream is reached.
   </para>
		</returns>
		<remarks>
			<para> The <paramref name="buffer "/>parameter can be 
   an instance of the <see cref="System.Buffer"/>
   class, or an array of one of the following types:
<see cref="System.Byte"/>, <see cref="System.SByte"/>, <see cref="System.Char"/>, <see cref="System.Int16"/>, <see cref="System.Int32"/>, <see cref="System.Int64"/>, <see cref="System.UInt16"/>, <see cref="System.UInt32"/>, <see cref="System.UInt64"/>, <see cref="System.Single"/>, or <see cref="System.Double"/>. The <paramref name="offset "/>parameter gives the offset of the byte in buffer at which to begin writing (index in the buffer),
   and the <paramref name="count "/>parameter gives
   the maximum number of bytes
   that will be read from this stream.
   The returned value is the actual number of bytes read, or zero if the end of the
   stream is reached. If the read operation is successful, the current position of
   the stream is advanced by the number of bytes read. If an exception occurs, the
   current position of the stream is unchanged.</para>
			<para> The <see langword="Read "/> method treats the <paramref name="buffer
"/>parameter as a block of bytes, regardless of its actual type. Likewise, the
<paramref name="offset "/>and <paramref name="count "/>parameters are always specified in bytes. For <paramref name="buffer "/>parameters other than byte arrays, this means 
that an element index must be multiplied by the element size in bytes to form a correct value for <paramref name="offset
"/>or <paramref name="count"/>.</para>
			<para> The <see langword="Read "/>method will return zero only if
the end of the stream is reached. In all other cases, <see langword="Read "/>always reads at least one byte from the stream before returning. If no
data is available from the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> upon a call to
<see langword="Read"/>, the
method will block until at least one byte of data can be returned.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.CanSeek">
		<summary>
			<para> Gets a Boolean value indicating whether seek operations are supported.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> 
supports seek operations; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Use this property to determine whether the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
supports seek
operations.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.SetLength">
		<summary>
			<para> Sets the length of this <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> to 
   the specified <paramref name="value"/>.</para>
		</summary>
		<param name="value">The new length of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </param>
		<remarks>
			<para>If the specified <paramref name="value"/>is less than the current length of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>, the stream is truncated. If the
   specified <paramref name="value "/>is larger
   than the current length of the
   stream, the stream is expanded. If the stream is expanded, the contents of the stream
   between the old and the new length are undefined. In order to use this
   method, an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
   
   must support both writing and seeking. </para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.Seek">
		<summary>
			<para> Sets the current position of this <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> to 
   the specified value.</para>
		</summary>
		<param name="offset">The new position of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </param>
		<param name=" origin">One of the <see cref="System.IO.SeekOrigin"/>values.</param>
		<returns>
			<para> The new position in the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
   </para>
		</returns>
		<exception cref="System.ArgumentException">The <paramref name="origin "/>must be one of the <see cref="System.IO.SeekOrigin"/> values.</exception>
		<remarks>
			<para>Some <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> objects support positioning beyond the length of the stream, others
   will throw an exception in this case.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.Flush">
		<summary>
			<para> Updates the file with the current state of the buffer then clears
      the buffer.
      </para>
		</summary>
		<remarks>
			<para> Since a buffer can be used for either reading or
      writing, but not both simultaneously, <see langword="Flush "/>performs two
      functions. First, any data previously written to the buffer is copied to the
      file and the buffer is cleared. Second, if <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek"/> is
   <see langword="true "/>
   
   and data was previously copied from the file to the buffer for
   reading, the current position within the file is decremented by the number of
   unread bytes in the buffer. The buffer is then cleared.
   </para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.BeginWrite">
		<summary>
			<para>Begins an asynchronous write.</para>
		</summary>
		<param name="buffer">The buffer to which to write data.</param>
		<param name="offset">The byte offset in <paramref name="array"/> at which to begin writing.</param>
		<param name="numBytes">The maximum number of bytes to write.</param>
		<param name="userCallback">The method to be called when the asynchronous write operation is completed. This parameter is optional.</param>
		<param name="stateObject">The status of the asynchronous write. </param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> that represents the
   asynchronous write, which is possibly still pending. This
<see langword="IAsyncResult"/> must be passed to this stream's
<see cref="System.IO.Stream.EndWrite"/> method to ensure that the write
   is complete, then frees resources appropriately. This can be done
   either by the same code that called <see langword="BeginWrite"/>
   or in a callback passed to <see langword="BeginWrite"/>.</para>
		</returns>
		<exception cref="System.IO.IOException">An asynchronous write was attempted past the end of the file.</exception>
		<remarks>
			<para> If a <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> is writable, writing at the end of the
   stream expands the stream.</para>
			<para>The current position in the stream is updated when you issue the asynchronous
   read or write, not when the I/O operation completes.</para>
			<para>You must call <see cref="System.IO.Stream.EndWrite"/> with the <see cref="System.IAsyncResult"/> that this method returns to find out how many bytes
were written.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.EndWrite">
		<summary>
			<para> Ends an asynchronous write.
      </para>
		</summary>
		<param name="asyncResult">The pending asynchronous I/O request to end.</param>
		<exception cref="System.ArgumentNullException">The <paramref name="asyncResult"/> parameter is <see langword="null"/>. </exception>
		<remarks>
			<para><see langword="EndWrite "/> must be called exactly once on every <see cref="System.IAsyncResult"/> from
<see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite"/>. </para>
			<para><see langword="EndWrite "/> will block until the I/O operation has completed.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.Dispose">
		<summary>
			<para>Releases resources associated with the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.</para>
		</summary>
		<param name="disposing">A value that indicates all associated resources should be closed.</param>
		<remarks>
			<para>Call <see langword="Dispose"/> when you are finished using the
<see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. The <see langword="Dispose"/> method leaves the 
<see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> in an unusable state. After calling 
<see langword="Dispose"/>, you must release all references to the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> so the memory it was occupying can be 
   reclaimed by garbage collection.</para>
			<note type="note">
   Always call <see langword="Dispose"/> before you
   release your last reference to the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. Otherwise, the resources
   the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> is using will not be freed until
   garbage collection calls the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object's
   destructor.
</note>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.EndRead">
		<summary>
			<para>Ends a pending asynchronous read request.</para>
		</summary>
		<param name="asyncResult">The pending asynchronous request. </param>
		<returns>
			<para> The number of bytes read from
      the stream, between zero and the number of requested bytes. Streams will only return zero at the end
      of the stream. Otherwise, they will block until at least one byte
      is available.</para>
		</returns>
		<exception cref="System.ArgumentNullException">The <paramref name="asyncResult"/> is <see langword="null"/>. </exception>
		<remarks>
			<para><see langword="EndRead "/>must be called exactly once on
   every <see cref="System.IAsyncResult"/> from <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead"/>, and
   calling <see langword="EndRead "/>is the only way to know how many bytes were
   read from the <see cref="System.IO.Stream"/>. <see langword="EndRead "/> will block until the I/O operation has completed.
   </para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.BeginRead">
		<summary>
			<para>Begins an asynchronous read.</para>
		</summary>
		<param name="buffer">The buffer into which to read data.</param>
		<param name="offset">The byte offset in <paramref name="array"/> at which to begin reading.</param>
		<param name="numBytes">The maximum number of bytes to read.</param>
		<param name="userCallback">The method to be called when the asynchronous read operation is completed. This parameter is optional.</param>
		<param name="stateObject">The status of the asynchronous read.</param>
		<returns>
			<para>An <see cref="System.IAsyncResult"/> that represents the asynchronous read, which is possibly
   still pending. This <see langword="IAsyncResult "/>must be passed to this
   stream's <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead"/> method to
   determine how many bytes were read. This can be done either by the same code
   that called <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead"/> or in a callback
   passed to <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead"/>.</para>
		</returns>
		<exception cref="System.IO.IOException">An asynchronous read was attempted past the end of the file.</exception>
		<remarks>
			<para>The current position in the stream is
      updated when you issue the asynchronous read or write, not when
      the I/O operation completes.</para>
			<para>You must call <see cref="System.IO.Stream.EndRead"/> with this <see langword="IAsyncResult "/>
to find out how many bytes were
read.</para>
		</remarks>
	</doc><doc for="IsolatedStorageFileStream.Close">
		<summary>
			<para> Releases resources associated with the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
   </para>
		</summary>
		<remarks>
			<para> Any data previously written to the buffer is copied to
      the file before the file stream is closed, so it is not necessary to call
   <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush"/> before
      invoking <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Close"/>.
      </para>
			<para> Following a call to <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Close"/>, any operations on the file stream
   might raise exceptions. After <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Close"/>has been
   called once, it does nothing if called again. The <see cref="System.Object.Finalize"/> method
   invokes <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Close"/>
   so the file stream is
   closed before the garbage collector finalizes the object.</para>
			<para><see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>objects require an <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> that
determines the storage context for the files accessed. For streams opened
without passing an <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> object, a default <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> is created for the executing assembly
and then closed during the call to <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Close"/>. </para>
			<note type="note">
   The <see langword="Close "/>method
   calls <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose"/> with
<paramref name="disposing"/> set to <see langword="true"/> to release its resources, then 
   calls <see cref="System.GC.SuppressFinalize"/> to suppress finalization
   of this object by the garbage collector.
</note>
		</remarks>
		<example>
			<para>The following code example demonstrates the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Close"/> method.</para>
			<code lang="C#">IsolatedStorageFileStream source =
    new IsolatedStorageFileStream(this.userName,FileMode.Open,isoFile);
// This stream is the one that data will be read from
Console.WriteLine("Source can be read?" + (source.CanRead?"true":"false"));

IsolatedStorageFileStream target =
    new IsolatedStorageFileStream("Archive\\ " + this.userName,FileMode.OpenOrCreate,isoFile);
// This stream is the one that data will be written to
Console.WriteLine("Target is writable?" + (target.CanWrite?"true":"false"));

// Do work ...

// After you have read and written to the streams, close them
source.Close();
target.Close();
</code>
			<code lang="VB">Dim source As New IsolatedStorageFileStream(UserName,FileMode.Open,isoFile)
' This stream is the one that data will be read from
If source.CanRead Then
    Console.WriteLine("Source can read ? true")
Else
    Console.WriteLine("Source can read ? false")
End If

Dim target As New IsolatedStorageFileStream("Archive\\ " &amp; UserName, _
                                            FileMode.OpenOrCreate, _
                                            isoFile)

' This stream is the one that data will be written to
If target.CanWrite Then
    Console.WriteLine("Target is writable? true")
Else
    Console.WriteLine("Target is writable? false")
End If

' After you have read and written to the streams, close them
source.Close()
target.Close()
</code>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream2">
		<summary>
			<para> Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path "/>in the specified <paramref name="mode"/>, with the kind of
<paramref name="access "/> 
requested.</para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name=" mode"><para>One of the <see cref="System.IO.FileMode"/> values.</para></param>
		<param name=" access"><para>A bitwise combination of the <see cref="System.IO.FileAccess"/> values. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<remarks>
			<para> The isolated store that is used is scoped by the
      current executing assembly's identity and that of the application domain in which it
      is running. This store will remain open only for the lifetime of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object. To specify a
      different isolated storage scope, or to allow the store to remain open (so multiple
   <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>objects can be opened from it), use the form
      of the constructor that accepts an <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
      
      object.
      </para>
			<para>The <paramref name="mode"/> parameter indicates
   whether a new file should be created or an existing one used. The
<paramref name="access"/> parameter includes read-only, read/write, and write-only. </para>
			<note type="caution">
   When you compile a
   set of characters with a particular cultural setting and retrieve those
   same characters with a different cultural setting, the characters might not be interpretable, and
   can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
	</doc>
	<doc for="IsolatedStorageFileStream.Write">
		<summary>
			<para>Writes a block of bytes to the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> using data read
   from a byte array.</para>
		</summary>
		<param name="buffer">The buffer to write. </param>
		<param name="offset">The byte offset in buffer from which to begin. </param>
		<param name="count">The maximum number of bytes to write. </param>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException">The write attempt exceeds the quota for the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </exception>
		<remarks>
			<para>The <paramref name="offset "/>parameter gives the offset of the
   byte in the <paramref name="buffer "/>at which to begin reading, and the <paramref name="count
   "/>parameter gives the number of bytes that will be written to this <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. If the write operation is
   successful, the current position of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> is advanced by the number of bytes
   written. If an exception occurs, the current position of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
   
   is unchanged.</para>
		</remarks>
	</doc>
	<doc for="IsolatedStorageFileStream">
		<summary>
			<para> Exposes a file within isolated storage.
      </para>
		</summary>
		<remarks>
			<para> Use this class to read, write and create files in isolated storage.
      </para>
			<para>Since this class extends <see cref="System.IO.FileStream"/>, you can use an
   instance of <see langword="IsolatedStorageFileStream"/> in most
   situations where a <see langword="FileStream"/> might otherwise be used, such
   as to construct a <see cref="System.IO.StreamReader"/> or <see cref="System.IO.StreamWriter"/>.</para>
		</remarks>
		<example>
			<para>The following console application demonstrates how you
      can use <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> and
   <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> to write data to an
      Isolated Storage file. The user is requested to log in. If the user is a new user, a News URL
      and a Sports URL are recorded as personal preferences in Isolated Storage. If
      the user is a returning user, the user's current preferences are displayed. The
      code examples used throughout this namespace are presented in the context of
      this sample application.</para>
			<para>You can use the <see topic="cpgrfisolatedstorageutilitystoreadmexe"/> utility to list and remove the Isolated
   Storage files that are created with this console application.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="1"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream1">
		<summary>
			<para>Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path, "/>in the specified <paramref name="mode, "/>and in the context of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> specified by <paramref name="isf"/>.</para>
			<para><see langword=" "/></para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name=" mode"><para>One of the <see cref="System.IO.FileMode"/> values.</para></param>
		<param name=" isf"><para>The <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException"><paramref name="isf "/> does not have a quota.</exception>
		<remarks>
			<para>The <paramref name="mode"/>
parameter <paramref name=" "/> indicates whether a new file should be created, an existing one used, and so
on. </para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
		<example>
			<para>The following code example demonstrates the use of this
      constructor. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="11"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream3">
		<summary>
			<para>Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path "/>in the specified <paramref name="mode"/>, with the specified file
<paramref name="access"/>, and in the context of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> specified by <paramref name="isf"/>.</para>
			<para><see langword=" "/></para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name=" mode"><para>One of the <see cref="System.IO.FileMode"/> values. </para></param>
		<param name=" access"><para>A bitwise combination of the <see cref="System.IO.FileAccess"/> values. </para></param>
		<param name=" isf">The <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException"><paramref name="isf "/> does not have a quota.</exception>
		<remarks>
			<para>The <paramref name="mode"/> parameter indicates whether a new file
   should be created or an existing one used. The <paramref name="access"/> parameter includes read-only, read/write,
   and write-only.</para>
			<note type="caution">
   When
   you compile a set of characters with a particular cultural setting and
   retrieve those same characters with a different cultural setting, the characters might not
   be interpretable, and can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
		<example>
			<para>The following code example demonstrates the use of this
      constructor. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="10"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream4">
		<summary>
			<para> Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path, "/>in the
   specified <paramref name="mode, "/>with the specified file <paramref name="access"/>,<paramref name=" "/> using the file sharing mode specified by <paramref name="share"/>.</para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name=" mode"><para>One of the <see cref="System.IO.FileMode"/> values. </para></param>
		<param name=" access"><para>A bitwise combination of the <see cref="System.IO.FileAccess"/> values. </para></param>
		<param name=" share"><para>A bitwise combination of the <see cref="System.IO.FileShare"/> values. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<remarks>
			<para> The isolated store that is used is scoped by the current
      executing assembly's identity and that of the application domain in which it is
      running. This store will remain open only for the lifetime of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object. To specify a
      different isolated storage scope, or to allow the store to remain open (so multiple
      <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>objects can be opened from it), use the form
      of the constructor that accepts an <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
      
      object.</para>
			<note type="caution">
      When you compile a set
      of characters with a particular cultural setting and retrieve those same
      characters with a different cultural setting, the characters might not be interpretable and
      can cause an exception to be thrown.
      
      </note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
		<example>
			<para>The following code example demonstrates the use of this
      constructor. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="15"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream7">
		<summary>
			<para>Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path, "/>in the specified <paramref name="mode"/>, with the specified file
<paramref name="access"/>, using the file sharing mode specified by <paramref name="share"/>, with the <paramref name="buffersize "/>specified, and in the context of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> specified by <paramref name="isf"/>.</para>
			<para><see langword=" "/></para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name="mode"><para>One of the <see cref="System.IO.FileMode"/> values. </para></param>
		<param name="access"><para>A bitwise combination of the <see cref="System.IO.FileAccess"/> values. </para></param>
		<param name="share">A bitwise combination of the <see cref="System.IO.FileShare"/> values </param>
		<param name="bufferSize">The FileStream buffer size. </param>
		<param name=" isf"><para>The <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException"><paramref name="isf "/> does not have a quota.</exception>
		<remarks>
			<para>The <paramref name="mode"/> parameter indicates whether a new file should be created or
   an existing one used. The <paramref name="access"/> parameter includes read-only,
   read/write, and write-only. </para>
			<note type="caution">
   When you compile a set
   of characters with a particular cultural setting and retrieve those same
   characters with a different cultural setting, the characters might not be interpretable, and
   can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
		<example>
			<para>The following code example demonstrates the use of this
      constructor. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="12"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.CanRead">
		<summary>
			<para> Gets a Boolean value indicating whether the file can be read.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> can be
   read; otherwise, <see langword="false"/>.
   </para>
		</value>
		<remarks>
			<para> Use this property to determine whether the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> can be
   read.
   </para>
		</remarks>
		<example>
			<para>The following code example demonstrates how you could use the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead"/> property, as a check to see whether a stream can be read
   before calling the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Read"/>
   or <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead"/>
   methods. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="11"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.CanWrite">
		<summary>
			<para> Gets a Boolean value indicating whether you can write to the file.
      </para>
		</summary>
		<value>
			<para><see langword="true"/> if an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> can be
   written; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Use this property to determine whether the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> can be
   written.
   </para>
		</remarks>
		<example>
			<para>The following code example demonstrates how you could use the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite"/> property, as a check to see whether a stream can be read
   before calling the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Write"/>
   or <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite"/>
   methods. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="13"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsAsync">
		<summary>
			<para> Gets a Boolean value indicating whether the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
was opened
asynchronously or synchronously.</para>
		</summary>
		<value>
			<para><see langword="true "/>if the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> supports
   asynchronous access; otherwise, <see langword="false"/>. </para>
		</value>
		<remarks>
			<para>Asynchronous <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> objects
   cannot be created, unlike <see cref="System.IO.FileStream"/>. However, the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite"/>, <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead"/>, <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite"/>, and <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead"/> methods are supported on synchronous
   instances, with some performance penalties.</para>
		</remarks>
		<example>
			<para>The following code example demonstrates how you can use
      the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync"/> property
      to verify that an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> is
      synchronous. For the complete context of this example, see
      the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="7"/>
		</example>
		<seealso cref="System.IO.FileStream"/>
	</doc>
	<doc for="IsolatedStorageFileStream.Length">
		<summary>
			<para> Gets the length of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> .
   </para>
		</summary>
		<value>
			<para> The length of the
      <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> in bytes.
      </para>
		</value>
		<remarks>
			<para><see langword="Length "/> represents the number of bytes currently in the
   file. It is not affected by isolated storage quota.
   </para>
		</remarks>
		<example>
			<para>The following code example demonstrates the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Length"/> property.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="14"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.Position">
		<summary>
			<para> Gets or sets the current position of this <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
to the specified value.</para>
		</summary>
		<value>
			<para> The current position
      of this <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
      </para>
		</value>
		<exception cref="ArgumentOutOfRangeException">The position cannot be set to a negative number.</exception>
		<remarks>
			<para> Setting this property works when the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek"/> property is
<see langword="true"/>.
   </para>
		</remarks>
		<example>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="14"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.Handle">
		<summary>
			<para> Gets the file handle for the file that the current
   <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object
      encapsulates. Accessing this property is not permitted on an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>, and throws an <see cref="System.IO.IsolatedStorage.IsolatedStorageException"/>
      .
      </para>
		</summary>
		<value>
			<para> The file handle for the file that the current <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
object encapsulates.</para>
		</value>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException">The property is accessed.</exception>
		<remarks>
			<para> For more information, see <see cref="System.IO.FileStream.Handle"/>.</para>
		</remarks>
		<permission cref="System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true"/></permission>
		<example>
			<para>The following code example demonstrates the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle"/> property.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="4"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.ReadByte">
		<summary>
			<para> Reads a single byte from the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> in isolated storage.
   </para>
		</summary>
		<returns>
			<para>The 8-bit unsigned integer value read from the isolated storage file.
      </para>
		</returns>
		<example>
			<para>The following code example demonstrates how the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte"/> method can be used to read data from
   an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
   For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="14"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.WriteByte">
		<summary>
			<para> Writes a single byte to the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
   </para>
		</summary>
		<param name="value">The byte value to write to the isolated storage file. </param>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException">The write attempt exceeds the quota for the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </exception>
		<example>
			<para>The following code example demonstrates how the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte"/> method can be used to read data from
   an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. For the
   complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="14"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream5">
		<summary>
			<para>Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file designated by <paramref name="path, "/>in the specified <paramref name="mode"/>, with the specified file <paramref name="access"/>, using the file sharing mode specified by <paramref name="share"/>, and in the context of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> specified by
<paramref name="isf"/>.</para>
			<para><see langword=" "/></para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name=" mode"><para>One of the <see cref="System.IO.FileMode"/> values. </para></param>
		<param name=" access"><para>A bitwise combination of the <see cref="System.IO.FileAccess"/> values. </para></param>
		<param name=" share"><para>A bitwise combination of the <see cref="System.IO.FileShare"/> values. </para></param>
		<param name=" isf"><para>The <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>. </para></param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException"><paramref name="isf "/> does not have a quota.</exception>
		<remarks>
			<para>The <paramref name="mode"/> parameter indicates whether a new file should be created or
   an existing one used. The <paramref name="access"/> parameter includes read-only,
   read/write, and write-only. </para>
			<note type="caution">
   When you compile a set
   of characters with a particular cultural setting and retrieve those same
   characters with a different cultural setting, the characters might not be interpretable, and
   can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
		<example>
			<para>The following code example demonstrates the use of this
      constructor. For the complete context of this example, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> overview.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="11"/>
		</example>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream">
		<overload>
			<para> Initializes a new instance of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
class. The only way to open an <see langword="IsolatedStorageFileStream"/>
is by one of its constructors.</para>
		</overload>
		<summary>
			<para> Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path "/>in the specified <paramref name="mode"/>.
   </para>
		</summary>
		<param name="path"><para> The relative path of the file within isolated storage. </para></param>
		<param name="mode"><para>One of the <see cref="System.IO.FileMode"/> values.</para></param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The <paramref name="path"/> is badly formed.</exception>
		<exception cref="System.IO.FileNotFoundException">No file was found and the <paramref name="mode "/>is set to <see langword="Open"/></exception>
		<remarks>
			<para> The isolated store that is used is scoped by the
      current executing assembly's identity and that of the application domain in which it
      is running. This store will remain open only for the lifetime of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object. To specify
      a different isolated storage scope, or to allow the store to remain open (so multiple
   <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>objects can be opened from it), use the form
      of the constructor that accepts an <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
      
      object.
      </para>
			<para>The<paramref name=" mode"/> parameter indicates whether a new file
   should be created, an existing one used, and so on.</para>
			<note type="caution">
   When you compile a
   set of characters with a particular cultural setting and retrieve those
   same characters with a different cultural setting, the characters might not be interpretable and
   can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
	</doc>
	<doc for="IsolatedStorageFileStream.IsolatedStorageFileStream6">
		<summary>
			<para> Initializes a new instance of an <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object giving access to the file
   designated by <paramref name="path, "/>in the specified <paramref name="mode"/>, with the specified file
<paramref name="access"/>, using the file sharing mode specified by <paramref name="share"/>, with the <paramref name="buffersize "/>
specified.</para>
		</summary>
		<param name="path">The relative path of the file within isolated storage. </param>
		<param name=" mode"><para>One of the <see cref="System.IO.FileMode"/> values. </para></param>
		<param name=" access"><para>A bitwise combination of the <see cref="System.IO.FileAccess"/> values. </para></param>
		<param name=" share"><para>A bitwise combination of the <see cref="System.IO.FileShare"/> values. </para></param>
		<param name=" bufferSize">The FileStream buffer size. </param>
		<exception cref="System.ArgumentException">The <paramref name="path "/>is badly formed.</exception>
		<exception cref="System.ArgumentNullException">The <paramref name="path"/> is <see langword="null"/>.</exception>
		<exception cref="System.IO.FileNotFoundException"><para>No file was found and the <paramref name="mode "/>is set to <see langword="Open"/>.</para></exception>
		<remarks>
			<para> The isolated store that is used is scoped by the
      current executing assembly's identity and that of the application domain in which it
      is running. This store will remain open only for the lifetime of the <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/> object. To specify a
      different isolated storage scope, or to allow the store to remain open (so multiple
   <see cref="System.IO.IsolatedStorage.IsolatedStorageFileStream"/>objects can be opened from it), use the form
      of the constructor that accepts an <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
      
      object.
      </para>
			<para>The <paramref name="mode"/> parameter indicates whether a new file should be created or
   an existing one used. The <paramref name="access"/> parameter includes read-only,
   read/write, and write-only. </para>
			<note type="caution">
   When you compile a set
   of characters with a particular cultural setting and retrieve those same
   characters with a different cultural setting, the characters might not be interpretable, and
   can cause an exception to be thrown.
</note>
		</remarks>
		<permission cref="IsolatedStorageFilePermission">code must have isolated storage access </permission>
	</doc>
</docs>
