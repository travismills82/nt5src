<docs>
	<doc for="IsolatedStorageScope.None">
		<summary>
			<para> No isolated storage usage.
      </para>
		</summary>
	</doc><doc for="IsolatedStorageScope.User">
		<summary>
			<para> Isolated storage scoped by user identity.
      </para>
		</summary>
	</doc><doc for="IsolatedStorageScope.Domain">
		<summary>
			<para> Isolated storage scoped to the application domain identity.
      </para>
		</summary>
	</doc><doc for="IsolatedStorageScope.Assembly">
		<summary>
			<para> Isolated storage scoped to the identity of the assembly.
      </para>
		</summary>
	</doc><doc for="IsolatedStorage.Remove">
		<summary>
			<para> When overridden in a derived class, removes the individual isolated store and all contained data.
      </para>
		</summary>
		<returns>
			<para> This is an abstract method in this base class; it must be implemented by derived
      classes.
      </para>
		</returns>
		<remarks>
			<para> See derived class for details. <see cref="System.IO.IsolatedStorage.IsolatedStorageFile.Remove" qualify="true"/> implements this method.
   </para>
		</remarks>
	</doc><doc for="IsolatedStorage">
		<summary>
			<para> Represents the abstract base class from which
      all isolated storage implementations must
      derive.
      </para>
		</summary>
		<remarks>
			<para> For information about file-based isolated storage, see the <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
class.</para>
		</remarks>
		<seealso topic="cpconisolatedstorage"/>
	</doc><doc for="IsolatedStorage.GetPermission">
		<summary>
			<para> When implemented by a derived class, returns a permission that
      represents access to isolated storage from within a permission set.</para>
		</summary>
		<param name="ps">The <see cref="System.Security.PermissionSet"/> that contains the set of permissions granted to code attempting to use isolated storage.</param>
		<returns>
			<para>An <see cref="System.Security.Permissions.IsolatedStoragePermission"/>
object.</para>
		</returns>
		<remarks>
			<para> You call this method on derived classes to determine what permission type
      governs their use, and to return the permission of the type that has been
      granted. Use this information to determine the allowable quota and any other derived
      class-specific isolated storage settings.</para>
			<para>See derived classes for more information. <see cref="System.IO.IsolatedStorage.IsolatedStorageFile.GetPermission" qualify="true"/> implements this method.</para>
		</remarks>
	</doc><doc for="IsolatedStorageScope.Roaming">
		<summary>
			<para> The isolated store can be placed in a
      location on the file system that might roam (if roaming user data is enabled on
      the underlying operating system).</para>
		</summary>
	</doc><doc for="IsolatedStorage.Scope">
		<summary>
			<para>Gets an <see cref="System.IO.IsolatedStorage.IsolatedStorageScope"/> enumeration value specifying the
 scope used to isolate the store.</para>
		</summary>
		<value>
			<para> A bitwise combination of
 <see langword="IsolatedStorageScope"/> values specifying the scope
 used to isolate the store.</para>
		</value>
		<remarks>
			<para>Stores are isolated by a combination of factors (user, assembly, domain, and
 so on). </para>
		</remarks>
	</doc><doc for="IsolatedStorage.SeparatorExternal">
		<summary>
			<para>Gets a backslash character that can be used in a directory string. When 
 overridden in a derived class, another character might be returned.</para>
		</summary>
		<value>
			<para>The default implementation returns the '\' character.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
 When you inherit from
 <see cref="System.IO.IsolatedStorage.IsolatedStorage"/>, you can override <see cref="System.IO.IsolatedStorage.IsolatedStorage.SeparatorExternal"/> and return a 
 character other than the '\' to control the naming syntax of the store. In a
 Windows <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
 this separator is a '\'.
 
 </note>
		</remarks>
	</doc><doc for="IsolatedStorage.SeparatorInternal">
		<summary>
			<para> Gets a period character that can be used in a directory 
 string. When overridden in a derived class, another character might be returned.</para>
		</summary>
		<value>
			<para>The default implementation returns the '.' (period) character.</para>
		</value>
		<remarks>
			<note type="inheritinfo">
 When you inherit from
 <see cref="System.IO.IsolatedStorage.IsolatedStorage"/>, you can override <see cref="System.IO.IsolatedStorage.IsolatedStorage.SeparatorInternal"/> and return a character other than the 
 '.' to control the naming syntax of the store. In a Windows <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/> this separator is
 a '.'.
 
 </note>
		</remarks>
	</doc><doc for="IsolatedStorage.MaximumSize">
		<summary>
			<para> Gets a value representing the maximum amount of space available for
 isolated storage. When overridden in a derived class, this value can take on different
 units of measure. </para>
		</summary>
		<value>
			<para>The maximum amount of isolated storage space
 in bytes. Derived classes can return different units of value. </para>
		</value>
		<exception cref="System.InvalidOperationException">The quota has not been defined.</exception>
		<remarks>
			<para>The default implementation of <see cref="System.IO.IsolatedStorage.IsolatedStorage.MaximumSize"/> returns the value of <see cref="System.Security.Permissions.IsolatedStoragePermission.UserQuota" qualify="true"/>, which is expressed in bytes. Derived classes can express the value in
 other units of measure. A potential example of such an implementation is an isolated storage
 database. </para>
			<para> You cannot set <see cref="System.IO.IsolatedStorage.IsolatedStorage.MaximumSize"/> , but the quota
is configured in the security policy, and can be set. Code receives a quota of
space on the basis of its evidence, so the same code can receive a different quota
if it is run with different evidence (for example, the same application
run locally and from a share on an intranet can receive different quotas). <see cref="System.IO.IsolatedStorage.IsolatedStorageFile.MaximumSize" qualify="true"/> implements this
property. </para>
		</remarks>
	</doc><doc for="IsolatedStorage.CurrentSize">
		<summary>
			<para> Gets a value representing the current size of isolated storage.
 </para>
		</summary>
		<value>
			<para> The number of storage units currently used within the
 isolated storage scope.
 </para>
		</value>
		<exception cref="System.InvalidOperationException">The current size of the isolated store is undefined.</exception>
		<remarks>
			<para> Represents the total usage of all storage resources
 within the isolated storage scope. <see cref="System.IO.IsolatedStorage.IsolatedStorageFile.CurrentSize" qualify="true"/> implements this
 property. In the case of <see cref="System.IO.IsolatedStorage.IsolatedStorageFile"/>
 objects this value is in bytes. In the case of implementations of other storage
 objects such as a database, this value might be in other
 units of
 storage.
 </para>
		</remarks>
	</doc><doc for="IsolatedStorage.DomainIdentity">
		<summary>
			<para> Gets a domain identity that scopes isolated storage.
      </para>
		</summary>
		<value>
			<para> An <see cref="System.Object"/> that represents the <see cref="System.IO.IsolatedStorage.IsolatedStorageScope.Domain"/> identity.
   </para>
		</value>
		<exception cref="System.Security.SecurityException">The code lacks the required <see cref="System.Security.Permissions.SecurityPermission"/> to access this object. These permissions are granted by the runtime based on security policy. </exception>
		<exception cref="System.InvalidOperationException">The <see cref="System.IO.IsolatedStorage.IsolatedStorage"/> is not isolated by the domain <see cref="System.IO.IsolatedStorage.IsolatedStorageScope"/>.</exception>
		<permission cref="System.Security.Permissions.SecurityPermission"> for the ability to access evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc><doc for="IsolatedStorage.AssemblyIdentity">
		<summary>
			<para> Gets an assembly identity used to scope isolated storage.
      </para>
		</summary>
		<value>
			<para> An <see cref="System.Object"/> that represents the
<see cref="System.Reflection.Assembly"/> identity.
   </para>
		</value>
		<exception cref="System.Security.SecurityException">The code lacks the required <see cref="System.Security.Permissions.SecurityPermission"/> to access this object. </exception>
		<permission cref="System.Security.Permissions.SecurityPermission"> for the ability to access evidence. Associated enumeration: <see cref="System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" qualify="true"/></permission>
	</doc><doc for="IsolatedStorage.InitStore">
		<summary>
			<para> Initializes a new instance of the <see cref="System.IO.IsolatedStorage.IsolatedStorage"/> object.
   </para>
		</summary>
		<param name="scope"><para>A bitwise combination of the <see cref="System.IO.IsolatedStorage.IsolatedStorageScope"/> values. </para></param>
		<param name="domainEvidenceType"><para>The type of the <see cref="System.Security.Policy.Evidence"/> that you can chose from the list of <see cref="System.Security.Policy.Evidence"/> present in the domain of the calling application. <see langword="null"/> lets the <see cref="System.IO.IsolatedStorage.IsolatedStorage"/> choose the evidence.</para></param>
		<param name="assemblyEvidenceType"><para>The type of the <see cref="System.Security.Policy.Evidence"/> that you can chose from the list of <see cref="System.Security.Policy.Evidence"/> present in the domain of the calling application. <see langword="null"/> lets the <see cref="System.IO.IsolatedStorage.IsolatedStorage"/> choose the evidence.</para></param>
		<exception cref="System.IO.IsolatedStorage.IsolatedStorageException">The assembly specified has insufficient permissions to create isolated stores.</exception>
		<remarks>
			<para> Derived classes use this method to initialize a new instance.
      </para>
		</remarks>
		<permission cref="System.Security.Permissions.IsolatedStorageFilePermission"><para>for permission to use isolated storage. Associated enumeration: <see cref="System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByUser" qualify="true"/>
			</para>
			<para> -or-</para>
			<para><see cref="System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByUser" qualify="true"/>
			</para>
			<para> -or-</para>
			<para><see cref="System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByRoamingUser" qualify="true"/>
			</para>
			<para> -or-</para><para><see cref="System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByRoamingUser" qualify="true"/></para></permission>
	</doc><doc for="IsolatedStorageScope">
		<summary>
			<para> Enumerates the levels of isolated storage scope that are
      supported by <see cref="System.IO.IsolatedStorage.IsolatedStorage"/>.
      </para>
		</summary>
		<remarks>
			<para> Use <see cref="System.IO.IsolatedStorage.IsolatedStorageScope"/> to specify a degree
   of scope for an isolated store. You can specify combinations of these levels
   that are supported by <see cref="System.IO.IsolatedStorage.IsolatedStorage"/>.
   </para>
		</remarks>
		<example>
			<para>The following code example demonstrates how
      the <see cref="System.IO.IsolatedStorage.IsolatedStorageScope"/>
      enumeration is used in the <see cref="System.IO.IsolatedStorage.IsolatedStorageFile.GetStore"/> methods.</para>
			<codelink SampleID="System.IO.IsolatedStorage.IsolatedStorage" SnippetID="15"/>
		</example>
		<seealso topic="cpcontypesofisolation"/>
	</doc>
</docs>
