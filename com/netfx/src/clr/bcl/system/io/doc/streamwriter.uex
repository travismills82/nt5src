<docs>
	<doc for="StreamWriter.Close">
		<summary>
			<para>Closes the current <see langword="StreamWriter"/>
and the underlying stream.</para>
		</summary>
		<remarks>
			<para>This method overrides <see cref="System.IO.Stream.Close"/>
.</para>
			<para>This implementation of <see langword="Close"/> calls the
<see cref="System.IO.StreamWriter.Dispose"/> method passing a <see langword="true"/>
value.</para>
			<para>You must call <see langword="Close"/> to ensure that all
data is correctly written out to the underlying stream. Following a call to
<see langword="Close"/>, any operations on the <see langword="StreamWriter"/> might raise exceptions.</para>
			<para>Flushing the stream will not flush its underlying encoder unless you
   explicitly call <see cref="System.IO.StreamWriter.Flush"/> or <see langword="Close"/>. Setting
<see cref="System.IO.StreamWriter.AutoFlush"/> to <see langword="true"/> means that data 
   will be flushed from the buffer to the stream, but the encoder state will not be
   flushed. This allows the encoder to keep its state (partial characters) so that
   it can encode the next block of characters correctly. This scenario affects UTF8
   and UTF7 where certain characters can only be encoded after the encoder receives
   the adjacent character or characters.</para>
		</remarks>
		<example>
			<para>The following example demonstrates the <see langword="Close "/>method.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="17"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Dispose">
		<summary>
			<para>Releases the unmanaged resources used by the <see cref="System.IO.StreamWriter"/> and optionally
   releases the managed resources.</para>
		</summary>
		<param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
		<remarks>
			<para>When
      the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all resources
      held by any managed objects that this <see cref="System.IO.StreamWriter"/>
      references. This method invokes the <see langword="Dispose"/>
      
      method of each referenced object.</para>
			<note type="inheritinfo">
				<see langword="Dispose"/> can be called multiple
      times by other objects. When overriding <see langword="Dispose"/>, be careful not to
      reference objects that have been previously disposed in an earlier call to
   <see langword="Dispose"/>.
      
   </note>
			<para>This method calls the dispose method of the base class,
   <see cref="System.IO.TextWriter.Dispose" qualify="true"/> .</para>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter">
		<summary>
			<para>Implements a <see cref="System.IO.TextWriter"/> for writing
   characters to a stream in a particular encoding.</para>
		</summary>
		<remarks>
			<para><see langword="StreamWriter "/>is
   designed for character
   output in a particular Encoding, whereas classes derived
   from <see langword="Stream"/> are designed for byte input and output.</para>
			<para><see langword="StreamWriter "/>defaults to using an instance of <see cref="System.Text.UTF8Encoding"/> unless specified otherwise. This instance of
<see langword="UTF8Encoding"/> is constructed such that the <see cref="System.Text.Encoding.GetPreamble" qualify="true"/> method returns the Unicode byte order mark written
in UTF-8. The preamble of the encoding is added to a stream when you are
not appending to an existing stream. This means any text file you create with
<see langword="StreamWriter"/> will have three byte order marks at
its beginning. UTF-8
handles all Unicode characters correctly and gives consistent results on
localized versions of the operating system. </para>
			<para>By default, a <see langword="StreamWriter"/> is not thread safe. See <see cref="System.IO.TextWriter.Synchronized" qualify="true"/> for a thread-safe wrapper.</para>
			<para>
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.IO.Stream"/>
		<seealso cref="System.IO.StreamReader"/>
		<seealso cref="System.Text.Encoder"/>
		<seealso cref="System.Text.Encoding"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
		<seealso topic="cpconbasicfileio"/>
		<seealso topic="cpconReadingWritingToNewlyCreatedDataFile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter">
		<overload>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/> class.</para>
		</overload>
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/> class for the specified stream, using the default
   encoding and buffer size.</para>
		</summary>
		<param name="stream">The stream to write to.</param>
		<exception cref="System.ArgumentException"><paramref name="stream "/>is not writable.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="stream "/>is <see langword="null"/> .</exception>
		<remarks>
			<para>This constructor creates a <see langword="StreamWriter"/> with UTF-8 encoding whose <see cref="System.Text.Encoding.GetPreamble"/> method returns
   an empty byte array. The <see cref="System.IO.StreamWriter.BaseStream"/>
   property is initialized using the
<paramref name="stream"/> parameter.</para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter1">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/>
class for the specified stream, using the specified
encoding and the default buffer size.</para>
		</summary>
		<param name="stream">The stream to write to.</param>
		<param name="encoding">The character encoding to use.</param>
		<exception cref="System.ArgumentNullException"><paramref name="stream "/>or <paramref name="encoding "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException"><paramref name="stream"/> is not writable.</exception>
		<remarks>
			<para>This constructor initializes the <see cref="System.IO.StreamWriter.Encoding"/>
property using the encoding parameter, and the <see cref="System.IO.StreamWriter.BaseStream"/> property using the stream parameter. For
additional information, see <see cref="System.IO.TextWriter.Encoding"/> .</para>
			<para>If you specify something other than <see cref="System.Text.Encoding.Default" qualify="true"/>, the byte order mark (BOM) is written to the
file. </para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso cref="System.Text.Encoding"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter2">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/>
class for the specified stream, using the specified
encoding and buffer size.</para>
		</summary>
		<param name="stream">The stream to write to.</param>
		<param name="encoding">The character encoding to use.</param>
		<param name="bufferSize">Sets the buffer size.</param>
		<exception cref="System.ArgumentNullException"><paramref name="stream "/>or <paramref name="encoding "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="bufferSize "/> is negative.</exception>
		<exception cref="System.ArgumentException"><paramref name="stream"/> is not writable.</exception>
		<remarks>
			<para>This constructor initializes the <see cref="System.IO.StreamWriter.Encoding"/>
property
using the <paramref name="encoding"/> parameter, and
the <see cref="System.IO.StreamWriter.BaseStream"/>
property using the <paramref name="stream"/> parameter. For additional information, see
<see cref="System.IO.TextWriter.Encoding"/>.</para>
			<para>If you specify something other than <see cref="System.Text.Encoding.Default" qualify="true"/>, the byte order mark (BOM) is written to the
file.</para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso cref="System.Text.Encoding"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter3">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/> class for the specified file on the specified path, using the default encoding and
   buffer size.</para>
		</summary>
		<param name="path">The complete file path to write to. <paramref name="path"/> can be a filename</param>
		<exception cref="System.UnauthorizedAccessException">Access is denied.</exception>
		<exception cref="System.ArgumentException"><paramref name="path "/>is an empty string("").</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path "/>is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.IO.IOException"><paramref name="path "/> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This constructor creates a <see langword="StreamWriter"/> with UTF-8 encoding
   whose <see cref="System.Text.Encoding.GetPreamble"/> method returns an empty byte array.</para>
			<para><paramref name="path "/>
can be a file name, including a file on a Universal Naming Convention (UNC)
share.</para>
			<para><paramref name="path"/>
is not required to be a file stored on disk; it can be any part of a system that
supports access via streams.</para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter4">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/> class for the specified file on the specified path, using the default encoding and buffer size. If the
   file exists, it can be either overwritten or appended to. If the
   file does not exist, this constructor creates a new file.</para>
		</summary>
		<param name="path">The complete file path to write to.</param>
		<param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append "/>is <see langword="false"/> , the file is overwritten. If the file exists and <paramref name="append "/>is <see langword="true"/> , the data is appended to the file. Otherwise, a new file is created.</param>
		<exception cref="System.UnauthorizedAccessException">Access is denied.</exception>
		<exception cref="System.ArgumentException"><paramref name="path "/> is empty.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path "/>is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException"><paramref name="path "/> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This constructor creates a <see langword="StreamWriter"/> with UTF-8 encoding
   whose <see cref="System.Text.Encoding.GetPreamble"/> method returns
   an empty byte array. For additional information, see <see cref="System.IO.TextWriter.Encoding"/>
   .</para>
			<para><paramref name="path "/>can be a file name, including a file on a Universal Naming Convention (UNC) share.</para>
			<para><paramref name="path"/> is not required to be a file stored on disk; it can be any part
of a system that supports access via streams.</para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter5">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/> class for the specified file on the specified path,
   using the specified encoding and default buffer size. If the file exists,
   it can be either overwritten or appended to. If
   the file does not exist, this constructor creates a new file.</para>
		</summary>
		<param name="path">The complete file path to write to.</param>
		<param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append "/>is <see langword="false"/> , the file is overwritten. If the file exists and <paramref name="append "/>is <see langword="true"/> , the data is appended to the file. Otherwise, a new file is created.</param>
		<param name="encoding">The character encoding to use.</param>
		<exception cref="System.UnauthorizedAccessException">Access is denied.</exception>
		<exception cref="System.ArgumentException"><paramref name="path "/> is empty.</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path "/>is <see langword="null"/> .</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.IOException"><paramref name="path "/> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<remarks>
			<para>This constructor initializes the <see cref="System.IO.StreamWriter.Encoding"/>
property using the encoding parameter. For additional information, see <see cref="System.IO.TextWriter.Encoding"/> .</para>
			<para>If you specify something other than <see cref="System.Text.Encoding.Default" qualify="true"/>, the byte order mark (BOM) is written to the
file.</para>
			<para><paramref name="path "/>can be a file name, including a file on a Universal Naming Convention (UNC) share.</para>
			<para><paramref name="path"/> is not required to be a file stored on disk; it can be any part
of a system that supports access via streams.</para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso cref="System.Text.Encoding"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.StreamWriter6">
		<summary>
			<para>Initializes a new instance of the <see cref="System.IO.StreamWriter"/> class for the specified file on the specified path,
   using the specified encoding and buffer size. If the file exists, it
   can be either overwritten or appended to. If the
   file does not exist, this constructor creates a new file.</para>
		</summary>
		<param name="path">The complete file path to write to.</param>
		<param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append "/>is <see langword="false"/> , the file is overwritten. If the file exists and <paramref name="append "/>is <see langword="true"/> , the data is appended to the file. Otherwise, a new file is created.</param>
		<param name="encoding">The character encoding to use.</param>
		<param name="bufferSize">Sets the buffer size.</param>
		<exception cref="System.ArgumentException"><paramref name="path "/> is an empty string ("").</exception>
		<exception cref="System.ArgumentNullException"><paramref name="path "/>or <paramref name="encoding "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="bufferSize "/> is negative.</exception>
		<exception cref="System.IO.FileNotFoundException">The file cannot be found.</exception>
		<exception cref="System.IO.IOException"><paramref name="path "/> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
		<exception cref="System.Security.SecurityException">The caller does not have the required permission.</exception>
		<exception cref="System.UnauthorizedAccessException">Access is denied.</exception>
		<exception cref="System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
		<exception cref="System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
		<remarks>
			<para>This constructor initializes the <see cref="System.IO.StreamWriter.Encoding"/> property using the
   encoding parameter. For additional information, see <see cref="System.IO.TextWriter.Encoding"/>
   .</para>
			<para>If you specify something other than <see cref="System.Text.Encoding.Default" qualify="true"/>, the byte order mark (BOM) is written to the
file.</para>
			<para><paramref name="path "/>can be a file name, including a file on a Universal Naming Convention (UNC) share.</para>
			<para><paramref name="path"/> is not required to be a file stored on disk; it can be any part
of a system that supports access via streams.</para>
			<note type="caution">
   When you compile a set of
   characters with a particular cultural setting and retrieve those same characters
   with a different cultural setting, the characters might not be interpretable, and
   could cause an exception to be thrown.
</note>
			<para>For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<permission cref="System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true"/>, <see cref="System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true"/></permission>
		<example>
			<para>The following example demonstrates the <see langword="StreamWriter "/>constructors.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="2"/>
		</example>
		<seealso cref="System.Text.Encoding"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Finalize">
		<summary>
			<para>Frees the resources of the current <see cref="System.IO.StreamWriter"/>
before it is reclaimed by the garbage collector.</para>
		</summary>
		<example>
			<para> For an example of using this method, see the Example
   section below.
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Flush">
		<summary>
			<para>Clears all buffers for the current writer and causes any buffered
      data to be written to the underlying stream.</para>
		</summary>
		<exception cref="System.ObjectDisposedException">The current writer is closed.</exception>
		<exception cref="System.IO.IOException">An I/O error has occurred.</exception>
		<remarks>
			<para>This method overrides <see cref="System.IO.TextWriter.Flush"/>.</para>
			<para>Flushing the stream will not flush its underlying encoder unless you
   explicitly call <see langword="Flush"/> or <see cref="System.IO.StreamWriter.Close"/>. Setting <see cref="System.IO.StreamWriter.AutoFlush"/> to <see langword="true"/> means that data
   will be flushed from the buffer to the stream, but the encoder state will not be
   flushed. This allows the encoder to keep its state (partial characters) so that
   it can encode the next block of characters correctly. This scenario affects UTF8
   and UTF7 where certain characters can only be encoded after the encoder receives
   the adjacent character or characters.</para>
			<para>
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso cref="System.IO.Stream.Close"/>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Write">
		<overload>
			<para> Writes to the stream.</para>
		</overload>
		<summary>
			<para> Writes a character to the stream.</para>
		</summary>
		<param name="value">The character to write to the text stream.</param>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and current writer is closed.</exception>
		<exception cref="System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"/> is at the end the stream.</exception>
		<remarks>
			<para>This method overrides <see cref="System.IO.TextWriter.Write" qualify="true"/>
.</para>
			<para>The
   specified character is written to the underlying stream unless the end of the
   stream is reached prematurely. If
<see cref="System.IO.StreamWriter.AutoFlush"/> is <see langword="true"/>, 
<see cref="System.IO.StreamWriter.Flush"/> is invoked automatically. </para>
			<para>
      The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Write1">
		<summary>
			<para> Writes a character array to the stream.</para>
		</summary>
		<param name="buffer">A character array containing the data to write. If <paramref name="buffer"/> is <see langword="null"/> , nothing is written.</param>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and current writer is closed.</exception>
		<exception cref="System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"/> is at the end the stream.</exception>
		<remarks>
			<para>This method overrides <see cref="System.IO.TextWriter.Write" qualify="true"/>.</para>
			<para>The specified characters are written to the underlying
   stream unless the end of the stream is reached prematurely. If <see cref="System.IO.StreamWriter.AutoFlush"/>
   
   is <see langword="true"/>, <see cref="System.IO.StreamWriter.Flush"/>
   is invoked automatically.</para>
			<para>This method might provide faster performance than
<see langword="Write"/>(<paramref name="char[], int, int"/>) because it has fewer arguments
   to check.</para>
			<para>
      The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Write2">
		<summary>
			<para> Writes a subarray of characters to the stream.</para>
		</summary>
		<param name="buffer">A character array containing the data to write.</param>
		<param name="index">The index into <paramref name="buffer "/> at which to begin writing.</param>
		<param name="count">The number of characters to read from <paramref name="buffer"/> .</param>
		<exception cref="System.ArgumentNullException"><paramref name="buffer "/>is <see langword="null"/> .</exception>
		<exception cref="System.ArgumentException">The buffer length minus <paramref name="index "/>is less than <paramref name="count"/>.</exception>
		<exception cref="System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<exception cref="System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and current writer is closed.</exception>
		<exception cref="System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"/> is at the end the stream.</exception>
		<remarks>
			<para>This method overrides <see cref="System.IO.TextWriter.Write" qualify="true"/>
.</para>
			<para>The characters are read from <paramref name="buffer "/>beginning
at <paramref name="index "/>and continuing through <paramref name="index "/>+ (<paramref name="count
"/>- 1). All characters
are written to the underlying stream unless the end of the underlying stream is
reached prematurely. <see cref="System.IO.StreamWriter.Flush"/> is invoked automatically if <see cref="System.IO.StreamWriter.AutoFlush"/> is
<see langword="true"/>.</para>
			<para> For an example of using this method, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para> This example writes eight characters from a 13-element array to a file,
      beginning at the third element of the array.</para>
			<codelink SampleID="Classic StreamWriter.Write2 Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Null">
		<summary>
			<para>Provides a <see langword="StreamWriter"/> with no backing store that can
   be written to, but not read from.</para>
		</summary>
		<remarks>
			<para> Use <see langword="Null"/> to redirect output to a
<see langword="StreamWriter"/>
that will not consume any operating system resources.</para>
			<para>When the <see langword="StreamWriter.Write"/> methods are invoked on
<see langword="Null"/>, the call simply returns, and no data is actually written
to any backing store.</para>
			<para> For an example of using this field, see the Example
   section below.
   The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example demonstrates a use of the <see langword="Null "/>field.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="6"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.AutoFlush">
		<summary>
			<para>Gets or sets a value indicating whether the <see cref="System.IO.StreamWriter"/> will flush its buffer to the
   underlying stream after every call to <see cref="System.IO.StreamWriter.Write" qualify="true"/>.</para>
		</summary>
		<value>
			<para><see langword="true"/> to force 
<see cref="System.IO.StreamWriter"/> to flush its
   buffer; otherwise, <see langword="false"/>.</para>
		</value>
		<remarks>
			<para> Flushing the stream will not
      flush its underlying encoder unless you explicitly call <see cref="System.IO.StreamWriter.Flush"/> or
   <see cref="System.IO.StreamWriter.Close"/>. Setting <see cref="System.IO.StreamWriter.AutoFlush"/> to
   <see langword="true"/> means that data will be flushed from the
      buffer to the stream, but the encoder state will not be flushed. This allows the
      encoder to keep its state (partial characters) so that it can encode the next
      block of characters correctly. This scenario affects UTF8 and UTF7 where certain
      characters can only be encoded after the encoder receives the adjacent character
      or characters.</para>
			<para> When <see langword="AutoFlush"/> is set to
<see langword="false"/>, <see langword="StreamWriter"/> will do a limited amount of
   buffering, both internally and potentially in the encoder from the encoding you passed in. You can get
   better performance by setting <see langword="AutoFlush"/> to
<see langword="false"/>, assuming that you always call <see langword="Close"/> (or
   at least <see langword="Flush"/>) when you're done writing with a
<see langword="StreamWriter"/>.</para>
			<para>For example, set <see langword="AutoFlush"/> to
<see langword="true"/> when you are writing to a device where the user
expects immediate feedback. <see langword="Console.Out"/> is one of these
cases: The <see langword="StreamWriter"/> used internally for writing to
<see langword="Console"/> flushes all its internal state 
except the encoder state after every call to <see cref="System.IO.StreamWriter.Write" qualify="true"/>.</para>
			<para> For an example of using this property, see the Example section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows the syntax for using the <see langword="AutoFlush"/>
property.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="5"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.BaseStream">
		<summary>
			<para> Gets the underlying stream that interfaces with a backing
      store.</para>
		</summary>
		<value>
			<para>The stream this <see langword="StreamWriter"/> is writing to.</para>
		</value>
		<remarks>
			<para> For an example of using this property, see the Example
      section below.
      The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example shows a use of <see langword="BaseStream"/> with <see cref="System.IO.Stream.Seek"/> and
<see cref="System.IO.SeekOrigin"/> to
   set the file pointer of the underlying stream to the end.</para>
			<codelink SampleID="Classic StreamWriter.BaseStream Example" SnippetID="1"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Encoding">
		<summary>
			<para> Gets the <see cref="System.Text.Encoding"/> in which the output is written.</para>
		</summary>
		<value>
			<para>The
   <see cref="System.Text.Encoding"/> specified in the constructor for the current
      instance, or <see cref="System.Text.UTF8Encoding"/> if an encoding was not
      specified.</para>
		</value>
		<remarks>
			<para>This property is necessary for some XML scenarios where a 
      header must be written containing the encoding used by the <see cref="System.IO.StreamWriter"/>. This
      allows the XML code to consume an arbitrary <see cref="System.IO.StreamWriter"/> and generate the
      correct XML header.</para>
			<para> For an example of using this property, see the Example
      section below. The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
            topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<example>
			<para>The following example retrieves the encoding of the 
      specified <see cref="System.IO.StreamWriter"/> instance.</para>
			<codelink SampleID="System.IO.StreamWriter" SnippetID="11"/>
		</example>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
	<doc for="StreamWriter.Write3">
		<summary>
			<para> Writes a string to the stream.</para>
		</summary>
		<param name="value">The string to write to the stream. If <paramref name="value"/> is null, nothing is written.</param>
		<exception cref="System.ObjectDisposedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and current writer is closed.</exception>
		<exception cref="System.NotSupportedException"><see cref="System.IO.StreamWriter.AutoFlush"/>is true or the <see cref="System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="System.IO.StreamWriter"/> is at the end the stream.</exception>
		<exception cref="System.IO.IOException">An I/O error occurs.</exception>
		<remarks>
			<para>This method overrides <see cref="System.IO.TextWriter.Write" qualify="true"/>.</para>
			<para>The specified <see cref="System.String"/>
is written to the underlying stream unless the
end of the stream is reached prematurely.</para>
			<para><see cref="System.IO.StreamWriter.Flush"/> is invoked automatically
if <see cref="System.IO.StreamWriter.AutoFlush"/> is
<see langword="true"/>. If <paramref name="value "/>is <see langword="null"/>
, no entries are written.</para>
			<para> The following table lists examples of other typical or related I/O tasks.</para>
			<list type="table">
				<listheader>
					<term>To do this...</term>
					<description>See the example in this
         topic...</description>
				</listheader>
				<item>
					<term> Create a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Write to a text file.</term>
					<description><see topic="cpconwritingtexttofile"/></description>
				</item>
				<item>
					<term> Read from a text file.</term>
					<description><see topic="cpconreadingtextfromfile"/></description>
				</item>
				<item>
					<term> Append text to a file.</term>
					<description>
						<para><see topic="cpconopeningappendingtologfile"/></para>
						<para><see cref="System.IO.File.AppendText" qualify="true"/></para>
						<para><see cref="System.IO.FileInfo.AppendText" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the size of a file.</term>
					<description>
						<para><see cref="System.IO.FileInfo.Length" qualify="true"/></para></description>
				</item>
				<item>
					<term> Get the attributes of a file.</term>
					<description><see cref="System.IO.File.GetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Set the attributes of a file.</term>
					<description><see cref="System.IO.File.SetAttributes" qualify="true"/></description>
				</item>
				<item>
					<term> Determine if a file exists.</term>
					<description>
						<para><see cref="System.IO.File.Exists" qualify="true"/></para></description>
				</item>
				<item>
					<term> Read from a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
				<item>
					<term> Write to a binary file.</term>
					<description><see topic="cpconReadingWritingToNewlyCreatedDataFile"/></description>
				</item>
			</list>
		</remarks>
		<seealso topic="cpconworkingwithio"/>
		<seealso topic="cpconreadingtextfromfile"/>
		<seealso topic="cpconwritingtexttofile"/>
	</doc>
</docs>
